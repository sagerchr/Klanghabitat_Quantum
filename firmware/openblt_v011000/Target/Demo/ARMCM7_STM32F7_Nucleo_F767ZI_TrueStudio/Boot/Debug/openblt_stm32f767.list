
openblt_stm32f767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .shared       00000040  20000000  20000000  00030000  2**2
                  ALLOC
  1 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004e7c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000012c  08005074  08005074  00015074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  080051a0  080051a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  080051a8  080051a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000000c  20000040  080051b0  00020040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00003df8  2000004c  080051bc  0002004c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003e44  080051bc  00023e44  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001c35b  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004667  00000000  00000000  0003c3d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000dd0  00000000  00000000  00040a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c38  00000000  00000000  00041810  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002bec4  00000000  00000000  00042448  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00014964  00000000  00000000  0006e30c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000fc986  00000000  00000000  00082c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0017f5f6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000020e0  00000000  00000000  0017f674  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00006296  00000000  00000000  00181754  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000004c 	.word	0x2000004c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800505c 	.word	0x0800505c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000050 	.word	0x20000050
 8000234:	0800505c 	.word	0x0800505c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <CpuIrqDisable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
  __asm volatile ("cpsid i");
 8000538:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 800053a:	4770      	bx	lr

0800053c <CpuIrqEnable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
  __asm volatile ("cpsie i");
 800053c:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 800053e:	4770      	bx	lr

08000540 <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 8000540:	b508      	push	{r3, lr}
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals.
   */
  CpuIrqDisable();
 8000542:	f7ff fff9 	bl	8000538 <CpuIrqDisable>
} /*** end of CpuInit ***/
 8000546:	bd08      	pop	{r3, pc}

08000548 <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 8000548:	b510      	push	{r4, lr}
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 800054a:	f000 fa05 	bl	8000958 <NvmVerifyChecksum>
 800054e:	b1b8      	cbz	r0, 8000580 <CpuStartUserProgram+0x38>
    /* not a valid user program so it cannot be started */
    return;
  }
#if (BOOT_CPU_USER_PROGRAM_START_HOOK > 0)
  /* invoke callback */
  if (CpuUserProgramStartHook() == BLT_FALSE)
 8000550:	f002 fb32 	bl	8002bb8 <CpuUserProgramStartHook>
 8000554:	b1b8      	cbz	r0, 8000586 <CpuStartUserProgram+0x3e>
    return;
  }
#endif
#if (BOOT_COM_ENABLE > 0)
  /* release the communication interface */
  ComFree();
 8000556:	f000 fb95 	bl	8000c84 <ComFree>
#endif
  /* reset the timer */
  TimerReset();
 800055a:	f000 fac1 	bl	8000ae0 <TimerReset>
  /* reset the HAL */
  HAL_DeInit();
 800055e:	f002 fd55 	bl	800300c <HAL_DeInit>
  /* remap user program's vector table */
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 8000562:	f000 f9fd 	bl	8000960 <NvmGetUserProgBaseAddress>
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <CpuStartUserProgram+0x44>)
 8000568:	4003      	ands	r3, r0
 800056a:	4a09      	ldr	r2, [pc, #36]	; (8000590 <CpuStartUserProgram+0x48>)
 800056c:	6093      	str	r3, [r2, #8]
  /* set the address where the bootloader needs to jump to. this is the address of
   * the 2nd entry in the user program's vector table. this address points to the
   * user program's reset handler.
   */
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 800056e:	f000 f9f7 	bl	8000960 <NvmGetUserProgBaseAddress>
 8000572:	6844      	ldr	r4, [r0, #4]
  /* The Cortex-M4 core has interrupts enabled out of reset. the bootloader
   * explicitly disables these for security reasons. Enable them here again, so it does 
   * not have to be done by the user program.
   */
  CpuIrqEnable();
 8000574:	f7ff ffe2 	bl	800053c <CpuIrqEnable>
  /* start the user program by activating its reset interrupt service routine */
  pProgResetHandler();
 8000578:	47a0      	blx	r4
  /* theoretically, the code never gets here because the user program should now be
   * running and the previous function call should not return. In case it did return
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
 800057a:	f000 fbbd 	bl	8000cf8 <ComDeferredInit>
 800057e:	e001      	b.n	8000584 <CpuStartUserProgram+0x3c>
    ComDeferredInit();
 8000580:	f000 fbba 	bl	8000cf8 <ComDeferredInit>
#endif
} /*** end of CpuStartUserProgram ***/
 8000584:	bd10      	pop	{r4, pc}
    ComDeferredInit();
 8000586:	f000 fbb7 	bl	8000cf8 <ComDeferredInit>
    return;
 800058a:	e7fb      	b.n	8000584 <CpuStartUserProgram+0x3c>
 800058c:	1fffff80 	.word	0x1fffff80
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 8000594:	b570      	push	{r4, r5, r6, lr}
  /* set casted pointers */
  from = (blt_int8u *)src;
  to = (blt_int8u *)dest;

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 8000596:	e008      	b.n	80005aa <CpuMemCopy+0x16>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 8000598:	1c4d      	adds	r5, r1, #1
 800059a:	1c46      	adds	r6, r0, #1
 800059c:	780b      	ldrb	r3, [r1, #0]
 800059e:	7003      	strb	r3, [r0, #0]
    /* keep the watchdog happy */
    CopService();
 80005a0:	f000 fbba 	bl	8000d18 <CopService>
    *to++ = *from++;
 80005a4:	4630      	mov	r0, r6
 80005a6:	4629      	mov	r1, r5
  while (len-- > 0)
 80005a8:	4622      	mov	r2, r4
 80005aa:	1e53      	subs	r3, r2, #1
 80005ac:	b29c      	uxth	r4, r3
 80005ae:	2a00      	cmp	r2, #0
 80005b0:	d1f2      	bne.n	8000598 <CpuMemCopy+0x4>
  }
} /*** end of CpuMemCopy ***/
 80005b2:	bd70      	pop	{r4, r5, r6, pc}

080005b4 <FlashGetSector>:
** \param     address Address in the flash sector.
** \return    Flash sector number or FLASH_INVALID_SECTOR.
**
****************************************************************************************/
static blt_int8u FlashGetSector(blt_addr address)
{
 80005b4:	b538      	push	{r3, r4, r5, lr}
 80005b6:	4605      	mov	r5, r0
  blt_int8u result = FLASH_INVALID_SECTOR;
  blt_int8u sectorIdx;

  /* search through the sectors to find the right one */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 80005b8:	2400      	movs	r4, #0
 80005ba:	e001      	b.n	80005c0 <FlashGetSector+0xc>
 80005bc:	3401      	adds	r4, #1
 80005be:	b2e4      	uxtb	r4, r4
 80005c0:	2c0a      	cmp	r4, #10
 80005c2:	d815      	bhi.n	80005f0 <FlashGetSector+0x3c>
  {
    /* keep the watchdog happy */
    CopService();
 80005c4:	f000 fba8 	bl	8000d18 <CopService>
    /* is the address in this sector? */
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 80005c8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80005cc:	0093      	lsls	r3, r2, #2
 80005ce:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <FlashGetSector+0x40>)
 80005d0:	58d3      	ldr	r3, [r2, r3]
 80005d2:	42ab      	cmp	r3, r5
 80005d4:	d8f2      	bhi.n	80005bc <FlashGetSector+0x8>
        (address < (flashLayout[sectorIdx].sector_start + \
                    flashLayout[sectorIdx].sector_size)))
 80005d6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80005da:	0091      	lsls	r1, r2, #2
 80005dc:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <FlashGetSector+0x40>)
 80005de:	440a      	add	r2, r1
 80005e0:	6852      	ldr	r2, [r2, #4]
        (address < (flashLayout[sectorIdx].sector_start + \
 80005e2:	4413      	add	r3, r2
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 80005e4:	42ab      	cmp	r3, r5
 80005e6:	d9e9      	bls.n	80005bc <FlashGetSector+0x8>
    {
      /* found the sector we are looking for so store it */
      result = flashLayout[sectorIdx].sector_num;
 80005e8:	4b02      	ldr	r3, [pc, #8]	; (80005f4 <FlashGetSector+0x40>)
 80005ea:	440b      	add	r3, r1
 80005ec:	7a18      	ldrb	r0, [r3, #8]
      /* all done so no need to continue looping */
      break;
 80005ee:	e000      	b.n	80005f2 <FlashGetSector+0x3e>
  blt_int8u result = FLASH_INVALID_SECTOR;
 80005f0:	20ff      	movs	r0, #255	; 0xff
    }
  }
  /* give the result back to the caller */
  return result;
} /*** end of FlashGetSector ***/
 80005f2:	bd38      	pop	{r3, r4, r5, pc}
 80005f4:	08005074 	.word	0x08005074

080005f8 <FlashInitBlock>:
{
 80005f8:	b508      	push	{r3, lr}
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 80005fa:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80005fe:	b953      	cbnz	r3, 8000616 <FlashInitBlock+0x1e>
  if (block->base_addr == address)
 8000600:	6803      	ldr	r3, [r0, #0]
 8000602:	428b      	cmp	r3, r1
 8000604:	d009      	beq.n	800061a <FlashInitBlock+0x22>
  block->base_addr = address;
 8000606:	f840 1b04 	str.w	r1, [r0], #4
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 800060a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800060e:	f7ff ffc1 	bl	8000594 <CpuMemCopy>
  return BLT_TRUE;
 8000612:	2001      	movs	r0, #1
 8000614:	e000      	b.n	8000618 <FlashInitBlock+0x20>
    return BLT_FALSE;
 8000616:	2000      	movs	r0, #0
} /*** end of FlashInitBlock ***/
 8000618:	bd08      	pop	{r3, pc}
    return BLT_TRUE;
 800061a:	2001      	movs	r0, #1
 800061c:	e7fc      	b.n	8000618 <FlashInitBlock+0x20>

0800061e <FlashWriteBlock>:
{
 800061e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000622:	4607      	mov	r7, r0
  HAL_FLASH_Unlock();
 8000624:	f003 fa32 	bl	8003a8c <HAL_FLASH_Unlock>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8000628:	2400      	movs	r4, #0
 800062a:	2c7f      	cmp	r4, #127	; 0x7f
 800062c:	d814      	bhi.n	8000658 <FlashWriteBlock+0x3a>
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 800062e:	683e      	ldr	r6, [r7, #0]
 8000630:	00a3      	lsls	r3, r4, #2
 8000632:	eb06 0803 	add.w	r8, r6, r3
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 8000636:	443b      	add	r3, r7
 8000638:	685d      	ldr	r5, [r3, #4]
    CopService();
 800063a:	f000 fb6d 	bl	8000d18 <CopService>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 800063e:	462a      	mov	r2, r5
 8000640:	2300      	movs	r3, #0
 8000642:	4641      	mov	r1, r8
 8000644:	2002      	movs	r0, #2
 8000646:	f003 fa77 	bl	8003b38 <HAL_FLASH_Program>
 800064a:	b938      	cbnz	r0, 800065c <FlashWriteBlock+0x3e>
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 800064c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8000650:	42ab      	cmp	r3, r5
 8000652:	d109      	bne.n	8000668 <FlashWriteBlock+0x4a>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8000654:	3401      	adds	r4, #1
 8000656:	e7e8      	b.n	800062a <FlashWriteBlock+0xc>
  blt_bool   result = BLT_TRUE;
 8000658:	2401      	movs	r4, #1
 800065a:	e000      	b.n	800065e <FlashWriteBlock+0x40>
      result = BLT_FALSE;
 800065c:	2400      	movs	r4, #0
  HAL_FLASH_Lock();
 800065e:	f003 fa2d 	bl	8003abc <HAL_FLASH_Lock>
} /*** end of FlashWriteBlock ***/
 8000662:	4620      	mov	r0, r4
 8000664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      result = BLT_FALSE;
 8000668:	2400      	movs	r4, #0
 800066a:	e7f8      	b.n	800065e <FlashWriteBlock+0x40>

0800066c <FlashSwitchBlock>:
{
 800066c:	b538      	push	{r3, r4, r5, lr}
 800066e:	460d      	mov	r5, r1
  if (block == &bootBlockInfo)
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <FlashSwitchBlock+0x38>)
 8000672:	4298      	cmp	r0, r3
 8000674:	d011      	beq.n	800069a <FlashSwitchBlock+0x2e>
 8000676:	4604      	mov	r4, r0
  else if (base_addr == flashLayout[0].sector_start)
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <FlashSwitchBlock+0x3c>)
 800067a:	4299      	cmp	r1, r3
 800067c:	d107      	bne.n	800068e <FlashSwitchBlock+0x22>
    block = &bootBlockInfo;
 800067e:	4c09      	ldr	r4, [pc, #36]	; (80006a4 <FlashSwitchBlock+0x38>)
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 8000680:	4629      	mov	r1, r5
 8000682:	4620      	mov	r0, r4
 8000684:	f7ff ffb8 	bl	80005f8 <FlashInitBlock>
 8000688:	b148      	cbz	r0, 800069e <FlashSwitchBlock+0x32>
} /*** end of FlashSwitchBlock ***/
 800068a:	4620      	mov	r0, r4
 800068c:	bd38      	pop	{r3, r4, r5, pc}
    if (FlashWriteBlock(block) == BLT_FALSE)
 800068e:	f7ff ffc6 	bl	800061e <FlashWriteBlock>
 8000692:	2800      	cmp	r0, #0
 8000694:	d1f4      	bne.n	8000680 <FlashSwitchBlock+0x14>
      return BLT_NULL;
 8000696:	2400      	movs	r4, #0
 8000698:	e7f7      	b.n	800068a <FlashSwitchBlock+0x1e>
    block = &blockInfo;
 800069a:	4c04      	ldr	r4, [pc, #16]	; (80006ac <FlashSwitchBlock+0x40>)
 800069c:	e7f0      	b.n	8000680 <FlashSwitchBlock+0x14>
    return BLT_NULL;
 800069e:	2400      	movs	r4, #0
 80006a0:	e7f3      	b.n	800068a <FlashSwitchBlock+0x1e>
 80006a2:	bf00      	nop
 80006a4:	2000026c 	.word	0x2000026c
 80006a8:	08008000 	.word	0x08008000
 80006ac:	20000068 	.word	0x20000068

080006b0 <FlashAddToBlock>:
{
 80006b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006b4:	4606      	mov	r6, r0
 80006b6:	460c      	mov	r4, r1
 80006b8:	4617      	mov	r7, r2
 80006ba:	461d      	mov	r5, r3
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 80006bc:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8000734 <FlashAddToBlock+0x84>
 80006c0:	ea01 0808 	and.w	r8, r1, r8
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 80006c4:	6803      	ldr	r3, [r0, #0]
 80006c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006ca:	d007      	beq.n	80006dc <FlashAddToBlock+0x2c>
  if (block->base_addr != current_base_addr)
 80006cc:	6833      	ldr	r3, [r6, #0]
 80006ce:	4543      	cmp	r3, r8
 80006d0:	d10b      	bne.n	80006ea <FlashAddToBlock+0x3a>
  dst = &(block->data[address - block->base_addr]);
 80006d2:	6833      	ldr	r3, [r6, #0]
 80006d4:	1ae4      	subs	r4, r4, r3
 80006d6:	4434      	add	r4, r6
 80006d8:	3404      	adds	r4, #4
 80006da:	e015      	b.n	8000708 <FlashAddToBlock+0x58>
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 80006dc:	4641      	mov	r1, r8
 80006de:	f7ff ff8b 	bl	80005f8 <FlashInitBlock>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2800      	cmp	r0, #0
 80006e6:	d1f1      	bne.n	80006cc <FlashAddToBlock+0x1c>
 80006e8:	e01f      	b.n	800072a <FlashAddToBlock+0x7a>
    block = FlashSwitchBlock(block, current_base_addr);
 80006ea:	4641      	mov	r1, r8
 80006ec:	4630      	mov	r0, r6
 80006ee:	f7ff ffbd 	bl	800066c <FlashSwitchBlock>
    if (block == BLT_NULL)
 80006f2:	4606      	mov	r6, r0
 80006f4:	2800      	cmp	r0, #0
 80006f6:	d1ec      	bne.n	80006d2 <FlashAddToBlock+0x22>
      return BLT_FALSE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	e016      	b.n	800072a <FlashAddToBlock+0x7a>
    *dst = *src;
 80006fc:	f817 3b01 	ldrb.w	r3, [r7], #1
 8000700:	f804 3b01 	strb.w	r3, [r4], #1
  while (len > 0);
 8000704:	3d01      	subs	r5, #1
 8000706:	d00f      	beq.n	8000728 <FlashAddToBlock+0x78>
    CopService();
 8000708:	f000 fb06 	bl	8000d18 <CopService>
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 800070c:	1d33      	adds	r3, r6, #4
 800070e:	1ae3      	subs	r3, r4, r3
 8000710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000714:	d3f2      	bcc.n	80006fc <FlashAddToBlock+0x4c>
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 8000716:	f508 7100 	add.w	r1, r8, #512	; 0x200
 800071a:	4630      	mov	r0, r6
 800071c:	f7ff ffa6 	bl	800066c <FlashSwitchBlock>
      if (block == BLT_NULL)
 8000720:	4606      	mov	r6, r0
 8000722:	b128      	cbz	r0, 8000730 <FlashAddToBlock+0x80>
      dst = &(block->data[0]);
 8000724:	1d04      	adds	r4, r0, #4
 8000726:	e7e9      	b.n	80006fc <FlashAddToBlock+0x4c>
  return BLT_TRUE;
 8000728:	2301      	movs	r3, #1
} /*** end of FlashAddToBlock ***/
 800072a:	4618      	mov	r0, r3
 800072c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLT_FALSE;
 8000730:	2300      	movs	r3, #0
 8000732:	e7fa      	b.n	800072a <FlashAddToBlock+0x7a>
 8000734:	fffffe00 	.word	0xfffffe00

08000738 <FlashEraseSectors>:
{
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	4604      	mov	r4, r0
 800073e:	460e      	mov	r6, r1
  blt_int32u eraseSectorError = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	9300      	str	r3, [sp, #0]
  if (first_sector > last_sector)
 8000744:	4288      	cmp	r0, r1
 8000746:	d819      	bhi.n	800077c <FlashEraseSectors+0x44>
  blt_bool result = BLT_TRUE;
 8000748:	2501      	movs	r5, #1
  if ((first_sector < flashLayout[0].sector_num) || \
 800074a:	b1ec      	cbz	r4, 8000788 <FlashEraseSectors+0x50>
 800074c:	2e0b      	cmp	r6, #11
 800074e:	d81f      	bhi.n	8000790 <FlashEraseSectors+0x58>
  if (result == BLT_TRUE)
 8000750:	b1dd      	cbz	r5, 800078a <FlashEraseSectors+0x52>
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000752:	2300      	movs	r3, #0
 8000754:	9301      	str	r3, [sp, #4]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000756:	2302      	movs	r3, #2
 8000758:	9305      	str	r3, [sp, #20]
    eraseInitStruct.NbSectors = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	9304      	str	r3, [sp, #16]
    HAL_FLASH_Unlock();
 800075e:	f003 f995 	bl	8003a8c <HAL_FLASH_Unlock>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8000762:	42b4      	cmp	r4, r6
 8000764:	d80d      	bhi.n	8000782 <FlashEraseSectors+0x4a>
      CopService();
 8000766:	f000 fad7 	bl	8000d18 <CopService>
      eraseInitStruct.Sector = sectorIdx;
 800076a:	9403      	str	r4, [sp, #12]
      if(HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&eraseSectorError) != HAL_OK)
 800076c:	4669      	mov	r1, sp
 800076e:	a801      	add	r0, sp, #4
 8000770:	f003 fa7a 	bl	8003c68 <HAL_FLASHEx_Erase>
 8000774:	b920      	cbnz	r0, 8000780 <FlashEraseSectors+0x48>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8000776:	3401      	adds	r4, #1
 8000778:	b2e4      	uxtb	r4, r4
 800077a:	e7f2      	b.n	8000762 <FlashEraseSectors+0x2a>
    result = BLT_FALSE;
 800077c:	2500      	movs	r5, #0
 800077e:	e7e4      	b.n	800074a <FlashEraseSectors+0x12>
        result = BLT_FALSE;
 8000780:	2500      	movs	r5, #0
    HAL_FLASH_Lock();
 8000782:	f003 f99b 	bl	8003abc <HAL_FLASH_Lock>
 8000786:	e000      	b.n	800078a <FlashEraseSectors+0x52>
 8000788:	2500      	movs	r5, #0
} /*** end of FlashEraseSectors ***/
 800078a:	4628      	mov	r0, r5
 800078c:	b006      	add	sp, #24
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	2500      	movs	r5, #0
 8000792:	e7fa      	b.n	800078a <FlashEraseSectors+0x52>

08000794 <FlashInit>:
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8000794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000798:	4a02      	ldr	r2, [pc, #8]	; (80007a4 <FlashInit+0x10>)
 800079a:	6013      	str	r3, [r2, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 800079c:	4a02      	ldr	r2, [pc, #8]	; (80007a8 <FlashInit+0x14>)
 800079e:	6013      	str	r3, [r2, #0]
} /*** end of FlashInit ***/
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000068 	.word	0x20000068
 80007a8:	2000026c 	.word	0x2000026c

080007ac <FlashWrite>:
{
 80007ac:	b570      	push	{r4, r5, r6, lr}
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 80007ae:	1e4b      	subs	r3, r1, #1
 80007b0:	4c14      	ldr	r4, [pc, #80]	; (8000804 <FlashWrite+0x58>)
 80007b2:	1a24      	subs	r4, r4, r0
 80007b4:	42a3      	cmp	r3, r4
 80007b6:	d901      	bls.n	80007bc <FlashWrite+0x10>
    return BLT_FALSE;
 80007b8:	2000      	movs	r0, #0
} /*** end of FlashWrite ***/
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	4616      	mov	r6, r2
 80007be:	460d      	mov	r5, r1
 80007c0:	4604      	mov	r4, r0
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 80007c2:	f7ff fef7 	bl	80005b4 <FlashGetSector>
 80007c6:	28ff      	cmp	r0, #255	; 0xff
 80007c8:	d018      	beq.n	80007fc <FlashWrite+0x50>
      (FlashGetSector(addr+len-1) == FLASH_INVALID_SECTOR))
 80007ca:	1928      	adds	r0, r5, r4
 80007cc:	3801      	subs	r0, #1
 80007ce:	f7ff fef1 	bl	80005b4 <FlashGetSector>
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 80007d2:	28ff      	cmp	r0, #255	; 0xff
 80007d4:	d014      	beq.n	8000800 <FlashWrite+0x54>
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <FlashWrite+0x5c>)
 80007d8:	4023      	ands	r3, r4
  if (base_addr == flashLayout[0].sector_start)
 80007da:	4a0c      	ldr	r2, [pc, #48]	; (800080c <FlashWrite+0x60>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d006      	beq.n	80007ee <FlashWrite+0x42>
  return FlashAddToBlock(&blockInfo, addr, data, len);
 80007e0:	462b      	mov	r3, r5
 80007e2:	4632      	mov	r2, r6
 80007e4:	4621      	mov	r1, r4
 80007e6:	480a      	ldr	r0, [pc, #40]	; (8000810 <FlashWrite+0x64>)
 80007e8:	f7ff ff62 	bl	80006b0 <FlashAddToBlock>
 80007ec:	e7e5      	b.n	80007ba <FlashWrite+0xe>
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 80007ee:	462b      	mov	r3, r5
 80007f0:	4632      	mov	r2, r6
 80007f2:	4621      	mov	r1, r4
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <FlashWrite+0x68>)
 80007f6:	f7ff ff5b 	bl	80006b0 <FlashAddToBlock>
 80007fa:	e7de      	b.n	80007ba <FlashWrite+0xe>
    return BLT_FALSE;
 80007fc:	2000      	movs	r0, #0
 80007fe:	e7dc      	b.n	80007ba <FlashWrite+0xe>
 8000800:	2000      	movs	r0, #0
 8000802:	e7da      	b.n	80007ba <FlashWrite+0xe>
 8000804:	081fffff 	.word	0x081fffff
 8000808:	fffffe00 	.word	0xfffffe00
 800080c:	08008000 	.word	0x08008000
 8000810:	20000068 	.word	0x20000068
 8000814:	2000026c 	.word	0x2000026c

08000818 <FlashErase>:
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8000818:	1e4a      	subs	r2, r1, #1
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <FlashErase+0x38>)
 800081c:	1a1b      	subs	r3, r3, r0
 800081e:	429a      	cmp	r2, r3
 8000820:	d901      	bls.n	8000826 <FlashErase+0xe>
    return BLT_FALSE;
 8000822:	2000      	movs	r0, #0
} /*** end of FlashErase ***/
 8000824:	4770      	bx	lr
{
 8000826:	b570      	push	{r4, r5, r6, lr}
 8000828:	460c      	mov	r4, r1
 800082a:	4605      	mov	r5, r0
  first_sector = FlashGetSector(addr);
 800082c:	f7ff fec2 	bl	80005b4 <FlashGetSector>
 8000830:	4606      	mov	r6, r0
  last_sector  = FlashGetSector(addr+len-1);
 8000832:	1960      	adds	r0, r4, r5
 8000834:	3801      	subs	r0, #1
 8000836:	f7ff febd 	bl	80005b4 <FlashGetSector>
  if ((first_sector == FLASH_INVALID_SECTOR) || (last_sector == FLASH_INVALID_SECTOR))
 800083a:	28ff      	cmp	r0, #255	; 0xff
 800083c:	bf18      	it	ne
 800083e:	2eff      	cmpne	r6, #255	; 0xff
 8000840:	d101      	bne.n	8000846 <FlashErase+0x2e>
    return BLT_FALSE;
 8000842:	2000      	movs	r0, #0
} /*** end of FlashErase ***/
 8000844:	bd70      	pop	{r4, r5, r6, pc}
  return FlashEraseSectors(first_sector, last_sector);
 8000846:	4601      	mov	r1, r0
 8000848:	4630      	mov	r0, r6
 800084a:	f7ff ff75 	bl	8000738 <FlashEraseSectors>
 800084e:	e7f9      	b.n	8000844 <FlashErase+0x2c>
 8000850:	081fffff 	.word	0x081fffff

08000854 <FlashWriteChecksum>:
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 8000854:	4b10      	ldr	r3, [pc, #64]	; (8000898 <FlashWriteChecksum+0x44>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800085c:	d01a      	beq.n	8000894 <FlashWriteChecksum+0x40>
{
 800085e:	b500      	push	{lr}
 8000860:	b083      	sub	sp, #12
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 8000862:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <FlashWriteChecksum+0x44>)
 8000864:	6853      	ldr	r3, [r2, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 8000866:	6891      	ldr	r1, [r2, #8]
 8000868:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 800086a:	68d1      	ldr	r1, [r2, #12]
 800086c:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 800086e:	6911      	ldr	r1, [r2, #16]
 8000870:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 8000872:	6951      	ldr	r1, [r2, #20]
 8000874:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 8000876:	6991      	ldr	r1, [r2, #24]
 8000878:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 800087a:	69d2      	ldr	r2, [r2, #28]
 800087c:	4413      	add	r3, r2
  signature_checksum += 1; /* two's complement */
 800087e:	425b      	negs	r3, r3
 8000880:	aa02      	add	r2, sp, #8
 8000882:	f842 3d04 	str.w	r3, [r2, #-4]!
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 8000886:	2104      	movs	r1, #4
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <FlashWriteChecksum+0x48>)
 800088a:	f7ff ff8f 	bl	80007ac <FlashWrite>
} /*** end of FlashWriteChecksum ***/
 800088e:	b003      	add	sp, #12
 8000890:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLT_TRUE;
 8000894:	2001      	movs	r0, #1
} /*** end of FlashWriteChecksum ***/
 8000896:	4770      	bx	lr
 8000898:	2000026c 	.word	0x2000026c
 800089c:	080081f8 	.word	0x080081f8

080008a0 <FlashVerifyChecksum>:
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <FlashVerifyChecksum+0x38>)
 80008a2:	681b      	ldr	r3, [r3, #0]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 80008a4:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <FlashVerifyChecksum+0x3c>)
 80008a6:	6812      	ldr	r2, [r2, #0]
 80008a8:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <FlashVerifyChecksum+0x40>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 80008b0:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <FlashVerifyChecksum+0x44>)
 80008b2:	6812      	ldr	r2, [r2, #0]
 80008b4:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 80008b6:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <FlashVerifyChecksum+0x48>)
 80008b8:	6812      	ldr	r2, [r2, #0]
 80008ba:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <FlashVerifyChecksum+0x4c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <FlashVerifyChecksum+0x50>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 80008c8:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <FlashVerifyChecksum+0x54>)
 80008ca:	6812      	ldr	r2, [r2, #0]
  if (signature_checksum == 0)
 80008cc:	42da      	cmn	r2, r3
 80008ce:	d001      	beq.n	80008d4 <FlashVerifyChecksum+0x34>
  return BLT_FALSE;
 80008d0:	2000      	movs	r0, #0
} /*** end of FlashVerifyChecksum ***/
 80008d2:	4770      	bx	lr
    return BLT_TRUE;
 80008d4:	2001      	movs	r0, #1
 80008d6:	4770      	bx	lr
 80008d8:	08008000 	.word	0x08008000
 80008dc:	08008004 	.word	0x08008004
 80008e0:	08008008 	.word	0x08008008
 80008e4:	0800800c 	.word	0x0800800c
 80008e8:	08008010 	.word	0x08008010
 80008ec:	08008014 	.word	0x08008014
 80008f0:	08008018 	.word	0x08008018
 80008f4:	080081f8 	.word	0x080081f8

080008f8 <FlashDone>:
{
 80008f8:	b508      	push	{r3, lr}
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <FlashDone+0x38>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000902:	d10b      	bne.n	800091c <FlashDone+0x24>
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <FlashDone+0x3c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800090c:	d00d      	beq.n	800092a <FlashDone+0x32>
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 800090e:	4809      	ldr	r0, [pc, #36]	; (8000934 <FlashDone+0x3c>)
 8000910:	f7ff fe85 	bl	800061e <FlashWriteBlock>
 8000914:	4603      	mov	r3, r0
 8000916:	b148      	cbz	r0, 800092c <FlashDone+0x34>
  return BLT_TRUE;
 8000918:	2301      	movs	r3, #1
 800091a:	e007      	b.n	800092c <FlashDone+0x34>
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <FlashDone+0x38>)
 800091e:	f7ff fe7e 	bl	800061e <FlashWriteBlock>
 8000922:	4603      	mov	r3, r0
 8000924:	2800      	cmp	r0, #0
 8000926:	d1ed      	bne.n	8000904 <FlashDone+0xc>
 8000928:	e000      	b.n	800092c <FlashDone+0x34>
  return BLT_TRUE;
 800092a:	2301      	movs	r3, #1
} /*** end of FlashDone ***/
 800092c:	4618      	mov	r0, r3
 800092e:	bd08      	pop	{r3, pc}
 8000930:	2000026c 	.word	0x2000026c
 8000934:	20000068 	.word	0x20000068

08000938 <FlashGetUserProgBaseAddress>:
} /*** end of FlashGetUserProgBaseAddress ***/
 8000938:	4800      	ldr	r0, [pc, #0]	; (800093c <FlashGetUserProgBaseAddress+0x4>)
 800093a:	4770      	bx	lr
 800093c:	08008000 	.word	0x08008000

08000940 <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 8000940:	b508      	push	{r3, lr}
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 8000942:	f7ff ff27 	bl	8000794 <FlashInit>
} /*** end of NvmInit ***/
 8000946:	bd08      	pop	{r3, pc}

08000948 <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8000948:	b508      	push	{r3, lr}
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 800094a:	f7ff ff2f 	bl	80007ac <FlashWrite>
} /*** end of NvmWrite ***/
 800094e:	bd08      	pop	{r3, pc}

08000950 <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 8000950:	b508      	push	{r3, lr}
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 8000952:	f7ff ff61 	bl	8000818 <FlashErase>
} /*** end of NvmErase ***/
 8000956:	bd08      	pop	{r3, pc}

08000958 <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 8000958:	b508      	push	{r3, lr}
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 800095a:	f7ff ffa1 	bl	80008a0 <FlashVerifyChecksum>
#endif
} /*** end of NvmVerifyChecksum ***/
 800095e:	bd08      	pop	{r3, pc}

08000960 <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 8000960:	b508      	push	{r3, lr}
  return FlashGetUserProgBaseAddress();
 8000962:	f7ff ffe9 	bl	8000938 <FlashGetUserProgBaseAddress>
} /*** end of NvmGetUserProgBaseAddress ***/
 8000966:	bd08      	pop	{r3, pc}

08000968 <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 8000968:	b508      	push	{r3, lr}
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 800096a:	f7ff ff73 	bl	8000854 <FlashWriteChecksum>
 800096e:	4603      	mov	r3, r0
 8000970:	b908      	cbnz	r0, 8000976 <NvmDone+0xe>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
} /*** end of NvmDone ***/
 8000972:	4618      	mov	r0, r3
 8000974:	bd08      	pop	{r3, pc}
  return FlashDone();
 8000976:	f7ff ffbf 	bl	80008f8 <FlashDone>
 800097a:	4603      	mov	r3, r0
 800097c:	e7f9      	b.n	8000972 <NvmDone+0xa>
	...

08000980 <Rs232ReceiveByte>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <Rs232ReceiveByte+0x18>)
 8000982:	69db      	ldr	r3, [r3, #28]
** \return    BLT_TRUE if a byte was received, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool Rs232ReceiveByte(blt_int8u *data)
{
  if (LL_USART_IsActiveFlag_RXNE(USART_CHANNEL) != 0)
 8000984:	f013 0f20 	tst.w	r3, #32
 8000988:	d004      	beq.n	8000994 <Rs232ReceiveByte+0x14>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 800098a:	4b03      	ldr	r3, [pc, #12]	; (8000998 <Rs232ReceiveByte+0x18>)
 800098c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  {
    /* retrieve and store the newly received byte */
    *data = LL_USART_ReceiveData8(USART_CHANNEL);
 800098e:	7003      	strb	r3, [r0, #0]
    /* all done */
    return BLT_TRUE;
 8000990:	2001      	movs	r0, #1
 8000992:	4770      	bx	lr
  }
  /* still here to no new byte received */
  return BLT_FALSE;
 8000994:	2000      	movs	r0, #0
} /*** end of Rs232ReceiveByte ***/
 8000996:	4770      	bx	lr
 8000998:	40004800 	.word	0x40004800

0800099c <Rs232TransmitByte>:
** \param     data Value of byte that is to be transmitted.
** \return    none.
**
****************************************************************************************/
static void Rs232TransmitByte(blt_int8u data)
{
 800099c:	b510      	push	{r4, lr}
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <Rs232TransmitByte+0x28>)
 80009a0:	6298      	str	r0, [r3, #40]	; 0x28
  blt_int32u timeout;

  /* write byte to transmit holding register */
  LL_USART_TransmitData8(USART_CHANNEL, data);
  /* set timeout time to wait for transmit completion. */
  timeout = TimerGet() + RS232_BYTE_TX_TIMEOUT_MS;
 80009a2:	f000 f8c5 	bl	8000b30 <TimerGet>
 80009a6:	f100 040a 	add.w	r4, r0, #10
  return (READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE));
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <Rs232TransmitByte+0x28>)
 80009ac:	69db      	ldr	r3, [r3, #28]
  /* wait for tx holding register to be empty */
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 80009ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 80009b2:	d105      	bne.n	80009c0 <Rs232TransmitByte+0x24>
  {
    /* keep the watchdog happy */
    CopService();
 80009b4:	f000 f9b0 	bl	8000d18 <CopService>
    /* break loop upon timeout. this would indicate a hardware failure. */
    if (TimerGet() > timeout)
 80009b8:	f000 f8ba 	bl	8000b30 <TimerGet>
 80009bc:	42a0      	cmp	r0, r4
 80009be:	d9f4      	bls.n	80009aa <Rs232TransmitByte+0xe>
    {
      break;
    }
  }
} /*** end of Rs232TransmitByte ***/
 80009c0:	bd10      	pop	{r4, pc}
 80009c2:	bf00      	nop
 80009c4:	40004800 	.word	0x40004800

080009c8 <Rs232Init>:
{
 80009c8:	b510      	push	{r4, lr}
 80009ca:	b088      	sub	sp, #32
  USART_InitStruct.BaudRate = BOOT_COM_RS232_BAUDRATE;
 80009cc:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80009d0:	9301      	str	r3, [sp, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80009d2:	2300      	movs	r3, #0
 80009d4:	9302      	str	r3, [sp, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80009d6:	9303      	str	r3, [sp, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80009d8:	9304      	str	r3, [sp, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80009da:	220c      	movs	r2, #12
 80009dc:	9205      	str	r2, [sp, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80009de:	9306      	str	r3, [sp, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80009e0:	9307      	str	r3, [sp, #28]
  LL_USART_Init(USART_CHANNEL, &USART_InitStruct);
 80009e2:	4c05      	ldr	r4, [pc, #20]	; (80009f8 <Rs232Init+0x30>)
 80009e4:	a901      	add	r1, sp, #4
 80009e6:	4620      	mov	r0, r4
 80009e8:	f004 f910 	bl	8004c0c <LL_USART_Init>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80009ec:	6823      	ldr	r3, [r4, #0]
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	6023      	str	r3, [r4, #0]
} /*** end of Rs232Init ***/
 80009f4:	b008      	add	sp, #32
 80009f6:	bd10      	pop	{r4, pc}
 80009f8:	40004800 	.word	0x40004800

080009fc <Rs232TransmitPacket>:
{
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	4606      	mov	r6, r0
 8000a00:	460d      	mov	r5, r1
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 8000a02:	2940      	cmp	r1, #64	; 0x40
 8000a04:	d804      	bhi.n	8000a10 <Rs232TransmitPacket+0x14>
  Rs232TransmitByte(len);
 8000a06:	4628      	mov	r0, r5
 8000a08:	f7ff ffc8 	bl	800099c <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 8000a0c:	2400      	movs	r4, #0
 8000a0e:	e00b      	b.n	8000a28 <Rs232TransmitPacket+0x2c>
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 8000a10:	2181      	movs	r1, #129	; 0x81
 8000a12:	4807      	ldr	r0, [pc, #28]	; (8000a30 <Rs232TransmitPacket+0x34>)
 8000a14:	f000 f899 	bl	8000b4a <AssertFailure>
 8000a18:	e7f5      	b.n	8000a06 <Rs232TransmitPacket+0xa>
    CopService();
 8000a1a:	f000 f97d 	bl	8000d18 <CopService>
    Rs232TransmitByte(data[data_index]);
 8000a1e:	5d30      	ldrb	r0, [r6, r4]
 8000a20:	f7ff ffbc 	bl	800099c <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 8000a24:	3401      	adds	r4, #1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	b2ab      	uxth	r3, r5
 8000a2a:	42a3      	cmp	r3, r4
 8000a2c:	d8f5      	bhi.n	8000a1a <Rs232TransmitPacket+0x1e>
} /*** end of Rs232TransmitPacket ***/
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	080050f8 	.word	0x080050f8

08000a34 <Rs232ReceivePacket>:
{
 8000a34:	b570      	push	{r4, r5, r6, lr}
  if (xcpCtoRxInProgress == BLT_FALSE)
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <Rs232ReceivePacket+0x98>)
 8000a38:	781c      	ldrb	r4, [r3, #0]
 8000a3a:	b9bc      	cbnz	r4, 8000a6c <Rs232ReceivePacket+0x38>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == BLT_TRUE)
 8000a3c:	4824      	ldr	r0, [pc, #144]	; (8000ad0 <Rs232ReceivePacket+0x9c>)
 8000a3e:	f7ff ff9f 	bl	8000980 <Rs232ReceiveByte>
 8000a42:	2801      	cmp	r0, #1
 8000a44:	d001      	beq.n	8000a4a <Rs232ReceivePacket+0x16>
} /*** end of Rs232ReceivePacket ***/
 8000a46:	4620      	mov	r0, r4
 8000a48:	bd70      	pop	{r4, r5, r6, pc}
      if ( (xcpCtoReqPacket[0] > 0) &&
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <Rs232ReceivePacket+0x9c>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b3f      	cmp	r3, #63	; 0x3f
 8000a54:	d8f7      	bhi.n	8000a46 <Rs232ReceivePacket+0x12>
        xcpCtoRxStartTime = TimerGet();
 8000a56:	f000 f86b 	bl	8000b30 <TimerGet>
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <Rs232ReceivePacket+0xa0>)
 8000a5c:	6018      	str	r0, [r3, #0]
        xcpCtoRxLength = 0;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <Rs232ReceivePacket+0xa4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
        xcpCtoRxInProgress = BLT_TRUE;
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <Rs232ReceivePacket+0x98>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	701a      	strb	r2, [r3, #0]
 8000a6a:	e7ec      	b.n	8000a46 <Rs232ReceivePacket+0x12>
 8000a6c:	4606      	mov	r6, r0
 8000a6e:	460d      	mov	r5, r1
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <Rs232ReceivePacket+0xa4>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	4816      	ldr	r0, [pc, #88]	; (8000ad0 <Rs232ReceivePacket+0x9c>)
 8000a78:	4418      	add	r0, r3
 8000a7a:	f7ff ff81 	bl	8000980 <Rs232ReceiveByte>
 8000a7e:	4604      	mov	r4, r0
 8000a80:	2801      	cmp	r0, #1
 8000a82:	d115      	bne.n	8000ab0 <Rs232ReceivePacket+0x7c>
      xcpCtoRxLength++;
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <Rs232ReceivePacket+0xa4>)
 8000a86:	781a      	ldrb	r2, [r3, #0]
 8000a88:	3201      	adds	r2, #1
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	701a      	strb	r2, [r3, #0]
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <Rs232ReceivePacket+0x9c>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d001      	beq.n	8000a9a <Rs232ReceivePacket+0x66>
  return BLT_FALSE;
 8000a96:	2400      	movs	r4, #0
 8000a98:	e7d5      	b.n	8000a46 <Rs232ReceivePacket+0x12>
        CpuMemCopy((blt_int32u)data, (blt_int32u)&xcpCtoReqPacket[1], xcpCtoRxLength);
 8000a9a:	4910      	ldr	r1, [pc, #64]	; (8000adc <Rs232ReceivePacket+0xa8>)
 8000a9c:	4630      	mov	r0, r6
 8000a9e:	f7ff fd79 	bl	8000594 <CpuMemCopy>
        xcpCtoRxInProgress = BLT_FALSE;
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <Rs232ReceivePacket+0x98>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
        *len = xcpCtoRxLength;
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <Rs232ReceivePacket+0xa4>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	702b      	strb	r3, [r5, #0]
        return BLT_TRUE;
 8000aae:	e7ca      	b.n	8000a46 <Rs232ReceivePacket+0x12>
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 8000ab0:	f000 f83e 	bl	8000b30 <TimerGet>
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <Rs232ReceivePacket+0xa0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	3364      	adds	r3, #100	; 0x64
 8000aba:	4298      	cmp	r0, r3
 8000abc:	d903      	bls.n	8000ac6 <Rs232ReceivePacket+0x92>
        xcpCtoRxInProgress = BLT_FALSE;
 8000abe:	2400      	movs	r4, #0
 8000ac0:	4b02      	ldr	r3, [pc, #8]	; (8000acc <Rs232ReceivePacket+0x98>)
 8000ac2:	701c      	strb	r4, [r3, #0]
 8000ac4:	e7bf      	b.n	8000a46 <Rs232ReceivePacket+0x12>
  return BLT_FALSE;
 8000ac6:	2400      	movs	r4, #0
 8000ac8:	e7bd      	b.n	8000a46 <Rs232ReceivePacket+0x12>
 8000aca:	bf00      	nop
 8000acc:	200004b1 	.word	0x200004b1
 8000ad0:	20000470 	.word	0x20000470
 8000ad4:	200004b4 	.word	0x200004b4
 8000ad8:	200004b2 	.word	0x200004b2
 8000adc:	20000471 	.word	0x20000471

08000ae0 <TimerReset>:
**
****************************************************************************************/
void TimerReset(void)
{
  /* Set the systick's status and control register back into the default reset value. */
  SysTick->CTRL = 0;
 8000ae0:	4b01      	ldr	r3, [pc, #4]	; (8000ae8 <TimerReset+0x8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
} /* end of TimerReset */
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e010 	.word	0xe000e010

08000aec <TimerInit>:
{
 8000aec:	b508      	push	{r3, lr}
  TimerReset();
 8000aee:	f7ff fff7 	bl	8000ae0 <TimerReset>
  SysTick->LOAD = BOOT_CPU_SYSTEM_SPEED_KHZ - 1;
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <TimerInit+0x1c>)
 8000af4:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <TimerInit+0x20>)
 8000af6:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8000afc:	2105      	movs	r1, #5
 8000afe:	6019      	str	r1, [r3, #0]
  millisecond_counter = 0;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <TimerInit+0x24>)
 8000b02:	601a      	str	r2, [r3, #0]
} /*** end of TimerInit ***/
 8000b04:	bd08      	pop	{r3, pc}
 8000b06:	bf00      	nop
 8000b08:	e000e010 	.word	0xe000e010
 8000b0c:	00034bbf 	.word	0x00034bbf
 8000b10:	200004b8 	.word	0x200004b8

08000b14 <TimerUpdate>:
**
****************************************************************************************/
void TimerUpdate(void)
{
  /* Check if the millisecond event occurred. */
  if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <TimerUpdate+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000b1c:	d003      	beq.n	8000b26 <TimerUpdate+0x12>
  {
    /* Increment the millisecond counter. */
    millisecond_counter++;
 8000b1e:	4a03      	ldr	r2, [pc, #12]	; (8000b2c <TimerUpdate+0x18>)
 8000b20:	6813      	ldr	r3, [r2, #0]
 8000b22:	3301      	adds	r3, #1
 8000b24:	6013      	str	r3, [r2, #0]
  }
} /*** end of TimerUpdate ***/
 8000b26:	4770      	bx	lr
 8000b28:	e000e010 	.word	0xe000e010
 8000b2c:	200004b8 	.word	0x200004b8

08000b30 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 8000b30:	b508      	push	{r3, lr}
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 8000b32:	f7ff ffef 	bl	8000b14 <TimerUpdate>
  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
} /*** end of TimerGet ***/
 8000b36:	4b01      	ldr	r3, [pc, #4]	; (8000b3c <TimerGet+0xc>)
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	bd08      	pop	{r3, pc}
 8000b3c:	200004b8 	.word	0x200004b8

08000b40 <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 8000b40:	b508      	push	{r3, lr}
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 8000b42:	f7ff fff5 	bl	8000b30 <TimerGet>
} /*** end of HAL_GetTick ***/
 8000b46:	bd08      	pop	{r3, pc}

08000b48 <SysTick_Handler>:
**
****************************************************************************************/
void SysTick_Handler(void)
{
  /* Nothing to do here. */
} /*** end of SysTick_Handler ***/
 8000b48:	4770      	bx	lr

08000b4a <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 8000b4a:	b508      	push	{r3, lr}
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 8000b4c:	f000 f8e4 	bl	8000d18 <CopService>
 8000b50:	e7fc      	b.n	8000b4c <AssertFailure+0x2>
	...

08000b54 <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 8000b54:	b508      	push	{r3, lr}
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 8000b56:	f000 f8c7 	bl	8000ce8 <ComIsConnected>
 8000b5a:	2801      	cmp	r0, #1
 8000b5c:	d003      	beq.n	8000b66 <BackDoorCheck+0x12>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <BackDoorCheck+0x38>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d000      	beq.n	8000b68 <BackDoorCheck+0x14>
        CpuStartUserProgram();
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 8000b66:	bd08      	pop	{r3, pc}
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 8000b68:	f7ff ffe2 	bl	8000b30 <TimerGet>
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <BackDoorCheck+0x3c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <BackDoorCheck+0x40>)
 8000b72:	6812      	ldr	r2, [r2, #0]
 8000b74:	4413      	add	r3, r2
 8000b76:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000b7a:	4298      	cmp	r0, r3
 8000b7c:	d3f3      	bcc.n	8000b66 <BackDoorCheck+0x12>
      backdoorOpen = BLT_FALSE;
 8000b7e:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <BackDoorCheck+0x38>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
        CpuStartUserProgram();
 8000b84:	f7ff fce0 	bl	8000548 <CpuStartUserProgram>
 8000b88:	e7ed      	b.n	8000b66 <BackDoorCheck+0x12>
 8000b8a:	bf00      	nop
 8000b8c:	200004c0 	.word	0x200004c0
 8000b90:	200004bc 	.word	0x200004bc
 8000b94:	200004c4 	.word	0x200004c4

08000b98 <BackDoorSetExtension>:
**
****************************************************************************************/
void BackDoorSetExtension(blt_int32u extension_ms)
{
  /* update the extension time */
  backdoorExtensionTime = extension_ms;
 8000b98:	4b01      	ldr	r3, [pc, #4]	; (8000ba0 <BackDoorSetExtension+0x8>)
 8000b9a:	6018      	str	r0, [r3, #0]
} /*** end of BackDoorSetExtension ***/
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	200004bc 	.word	0x200004bc

08000ba4 <BackDoorGetExtension>:
****************************************************************************************/
blt_int32u BackDoorGetExtension(void)
{
  /* read out and reutrn the currently configured extension time */
  return backdoorExtensionTime;
} /*** end of BackDoorGetExtension ***/
 8000ba4:	4b01      	ldr	r3, [pc, #4]	; (8000bac <BackDoorGetExtension+0x8>)
 8000ba6:	6818      	ldr	r0, [r3, #0]
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	200004bc 	.word	0x200004bc

08000bb0 <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 8000bb0:	b508      	push	{r3, lr}
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <BackDoorRestartTimer+0x18>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d000      	beq.n	8000bbc <BackDoorRestartTimer+0xc>
  {
    backdoorOpenTime = TimerGet();
  }
} /*** end of BackDoorRestartTimer ***/
 8000bba:	bd08      	pop	{r3, pc}
    backdoorOpenTime = TimerGet();
 8000bbc:	f7ff ffb8 	bl	8000b30 <TimerGet>
 8000bc0:	4b02      	ldr	r3, [pc, #8]	; (8000bcc <BackDoorRestartTimer+0x1c>)
 8000bc2:	6018      	str	r0, [r3, #0]
} /*** end of BackDoorRestartTimer ***/
 8000bc4:	e7f9      	b.n	8000bba <BackDoorRestartTimer+0xa>
 8000bc6:	bf00      	nop
 8000bc8:	200004c0 	.word	0x200004c0
 8000bcc:	200004c4 	.word	0x200004c4

08000bd0 <BackDoorInit>:
{
 8000bd0:	b508      	push	{r3, lr}
  backdoorOpen = BLT_TRUE;
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <BackDoorInit+0x14>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 8000bd8:	f7ff ffea 	bl	8000bb0 <BackDoorRestartTimer>
  BackDoorCheck();
 8000bdc:	f7ff ffba 	bl	8000b54 <BackDoorCheck>
} /*** end of BackDoorInit ***/
 8000be0:	bd08      	pop	{r3, pc}
 8000be2:	bf00      	nop
 8000be4:	200004c0 	.word	0x200004c0

08000be8 <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 8000be8:	b508      	push	{r3, lr}
  /* initialize the CPU */
  CpuInit();
 8000bea:	f7ff fca9 	bl	8000540 <CpuInit>
  /* initialize the watchdog */
  CopInit();
 8000bee:	f000 f88f 	bl	8000d10 <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 8000bf2:	f7ff ff7b 	bl	8000aec <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 8000bf6:	f7ff fea3 	bl	8000940 <NvmInit>
  /* initialize the file system module */
  FileInit();
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 8000bfa:	f000 f80d 	bl	8000c18 <ComInit>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 8000bfe:	f7ff ffe7 	bl	8000bd0 <BackDoorInit>
} /*** end of BootInit ***/
 8000c02:	bd08      	pop	{r3, pc}

08000c04 <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 8000c04:	b508      	push	{r3, lr}
  /* service the watchdog */
  CopService();
 8000c06:	f000 f887 	bl	8000d18 <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 8000c0a:	f7ff ff83 	bl	8000b14 <TimerUpdate>
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 8000c0e:	f000 f80f 	bl	8000c30 <ComTask>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
 8000c12:	f7ff ff9f 	bl	8000b54 <BackDoorCheck>
} /*** end of BootTask ***/
 8000c16:	bd08      	pop	{r3, pc}

08000c18 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 8000c18:	b508      	push	{r3, lr}
  /* initialize the XCP communication protocol */
  XcpInit();
 8000c1a:	f000 fb7b 	bl	8001314 <XcpInit>
  /* set it as active */
  comActiveInterface = COM_IF_CAN;
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* initialize the RS232 interface */
  Rs232Init();
 8000c1e:	f7ff fed3 	bl	80009c8 <Rs232Init>
  /* set it as active */
  comActiveInterface = COM_IF_RS232;
 8000c22:	4b02      	ldr	r3, [pc, #8]	; (8000c2c <ComInit+0x14>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
  NetInit();
  /* set it as active */
  comActiveInterface = COM_IF_NET;
  #endif
#endif
} /*** end of ComInit ***/
 8000c28:	bd08      	pop	{r3, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000040 	.word	0x20000040

08000c30 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 8000c30:	b500      	push	{lr}
 8000c32:	b083      	sub	sp, #12
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  if (Rs232ReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 8000c34:	f10d 0107 	add.w	r1, sp, #7
 8000c38:	4810      	ldr	r0, [pc, #64]	; (8000c7c <ComTask+0x4c>)
 8000c3a:	f7ff fefb 	bl	8000a34 <Rs232ReceivePacket>
 8000c3e:	2801      	cmp	r0, #1
 8000c40:	d009      	beq.n	8000c56 <ComTask+0x26>
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_NET_ENABLE > 0)
  if (NetReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 8000c42:	f10d 0107 	add.w	r1, sp, #7
 8000c46:	480d      	ldr	r0, [pc, #52]	; (8000c7c <ComTask+0x4c>)
 8000c48:	f000 f992 	bl	8000f70 <NetReceivePacket>
 8000c4c:	2801      	cmp	r0, #1
 8000c4e:	d00b      	beq.n	8000c68 <ComTask+0x38>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 8000c50:	b003      	add	sp, #12
 8000c52:	f85d fb04 	ldr.w	pc, [sp], #4
    comActiveInterface = COM_IF_RS232;
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <ComTask+0x50>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 8000c5c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000c60:	4806      	ldr	r0, [pc, #24]	; (8000c7c <ComTask+0x4c>)
 8000c62:	f000 fb77 	bl	8001354 <XcpPacketReceived>
 8000c66:	e7ec      	b.n	8000c42 <ComTask+0x12>
    comActiveInterface = COM_IF_NET;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <ComTask+0x50>)
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	701a      	strb	r2, [r3, #0]
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 8000c6e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000c72:	4802      	ldr	r0, [pc, #8]	; (8000c7c <ComTask+0x4c>)
 8000c74:	f000 fb6e 	bl	8001354 <XcpPacketReceived>
} /*** end of ComTask ***/
 8000c78:	e7ea      	b.n	8000c50 <ComTask+0x20>
 8000c7a:	bf00      	nop
 8000c7c:	200004c8 	.word	0x200004c8
 8000c80:	20000040 	.word	0x20000040

08000c84 <ComFree>:
{
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
#endif
} /*** end of ComFree ***/
 8000c84:	4770      	bx	lr
	...

08000c88 <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	460d      	mov	r5, r1
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* transmit the packet. note that len is limited to 255 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_RS232)
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <ComTransmitPacket+0x2c>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b133      	cbz	r3, 8000ca2 <ComTransmitPacket+0x1a>
  {
    UsbTransmitPacket(data, len);
  }
#endif
#if (BOOT_COM_NET_ENABLE > 0)
  if (comActiveInterface == COM_IF_NET)
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <ComTransmitPacket+0x2c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b03      	cmp	r3, #3
 8000c9a:	d006      	beq.n	8000caa <ComTransmitPacket+0x22>
    NetTransmitPacket(data, len);
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 8000c9c:	f000 fb52 	bl	8001344 <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 8000ca0:	bd38      	pop	{r3, r4, r5, pc}
    Rs232TransmitPacket(data, (blt_int8u)len);
 8000ca2:	b2c9      	uxtb	r1, r1
 8000ca4:	f7ff feaa 	bl	80009fc <Rs232TransmitPacket>
 8000ca8:	e7f4      	b.n	8000c94 <ComTransmitPacket+0xc>
    NetTransmitPacket(data, len);
 8000caa:	b2e9      	uxtb	r1, r5
 8000cac:	4620      	mov	r0, r4
 8000cae:	f000 f93b 	bl	8000f28 <NetTransmitPacket>
 8000cb2:	e7f3      	b.n	8000c9c <ComTransmitPacket+0x14>
 8000cb4:	20000040 	.word	0x20000040

08000cb8 <ComGetActiveInterfaceMaxRxLen>:
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <ComGetActiveInterfaceMaxRxLen+0x14>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d901      	bls.n	8000cc6 <ComGetActiveInterfaceMaxRxLen+0xe>
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_RX_MAX_DATA;
 8000cc2:	2040      	movs	r0, #64	; 0x40
 8000cc4:	4770      	bx	lr
      break;

    case COM_IF_CAN:
      result = BOOT_COM_CAN_RX_MAX_DATA;
 8000cc6:	2000      	movs	r0, #0
      result = BOOT_COM_RX_MAX_DATA;
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000040 	.word	0x20000040

08000cd0 <ComGetActiveInterfaceMaxTxLen>:
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <ComGetActiveInterfaceMaxTxLen+0x14>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d901      	bls.n	8000cde <ComGetActiveInterfaceMaxTxLen+0xe>
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_TX_MAX_DATA;
 8000cda:	2040      	movs	r0, #64	; 0x40
 8000cdc:	4770      	bx	lr
      break;

    case COM_IF_CAN:
      result = BOOT_COM_CAN_TX_MAX_DATA;
 8000cde:	2000      	movs	r0, #0
      result = BOOT_COM_TX_MAX_DATA;
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000040 	.word	0x20000040

08000ce8 <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 8000ce8:	b508      	push	{r3, lr}
  blt_bool result = BLT_FALSE;

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 8000cea:	f000 fb21 	bl	8001330 <XcpIsConnected>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	b100      	cbz	r0, 8000cf4 <ComIsConnected+0xc>
  {
    result = BLT_TRUE;
 8000cf2:	2301      	movs	r3, #1
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
} /*** end of ComIsConnected ***/
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	bd08      	pop	{r3, pc}

08000cf8 <ComDeferredInit>:
**            a request.
** \return    none
**
****************************************************************************************/
void ComDeferredInit(void)
{
 8000cf8:	b508      	push	{r3, lr}
#if (BOOT_COM_NET_ENABLE > 0)
  #if (BOOT_COM_NET_DEFERRED_INIT_ENABLE == 1)
  /* perform deferred initialization the TCP/IP interface */
  NetDeferredInit();
 8000cfa:	f000 f905 	bl	8000f08 <NetDeferredInit>
  /* set it as active */
  comActiveInterface = COM_IF_NET;
 8000cfe:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <ComDeferredInit+0x14>)
 8000d00:	2203      	movs	r2, #3
 8000d02:	701a      	strb	r2, [r3, #0]
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
  /* the default internal timed backdoor mechanism should start its timer after the
   * communication interfaces are initialized. since a deferred initialization was now
   * performed, the backdoor timer should be restarted.
   */
  BackDoorRestartTimer();
 8000d04:	f7ff ff54 	bl	8000bb0 <BackDoorRestartTimer>
#endif
} /*** end of ComDeferredInit ***/
 8000d08:	bd08      	pop	{r3, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000040 	.word	0x20000040

08000d10 <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 8000d10:	b508      	push	{r3, lr}
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
 8000d12:	f001 ff61 	bl	8002bd8 <CopInitHook>
#endif
} /*** end of CopInit ***/
 8000d16:	bd08      	pop	{r3, pc}

08000d18 <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 8000d18:	b508      	push	{r3, lr}
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
 8000d1a:	f001 ff62 	bl	8002be2 <CopServiceHook>
#endif
} /*** end of CopService ***/
 8000d1e:	bd08      	pop	{r3, pc}

08000d20 <NetServerTask>:
** \brief     Runs the TCP/IP server task.
** \return    none.
**
****************************************************************************************/
static void NetServerTask(void)
{
 8000d20:	b510      	push	{r4, lr}
  blt_int32u connection;
  blt_int32u packetLen;

  /* check for an RX packet and read it. */
  packetLen = netdev_read();
 8000d22:	f004 f8f1 	bl	8004f08 <netdev_read>
  if (packetLen > 0)
 8000d26:	b9b8      	cbnz	r0, 8000d58 <NetServerTask+0x38>
      }
    }
  }

  /* process TCP/IP Periodic Timer here. */
  if (TimerGet() >= periodicTimerTimeOut)
 8000d28:	f7ff ff02 	bl	8000b30 <TimerGet>
 8000d2c:	4b46      	ldr	r3, [pc, #280]	; (8000e48 <NetServerTask+0x128>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4298      	cmp	r0, r3
 8000d32:	d309      	bcc.n	8000d48 <NetServerTask+0x28>
  {
    periodicTimerTimeOut += NET_UIP_PERIODIC_TIMER_MS;
 8000d34:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000d38:	4a43      	ldr	r2, [pc, #268]	; (8000e48 <NetServerTask+0x128>)
 8000d3a:	6013      	str	r3, [r2, #0]
    for (connection = 0; connection < UIP_CONNS; connection++)
 8000d3c:	2400      	movs	r4, #0
 8000d3e:	2c00      	cmp	r4, #0
 8000d40:	d037      	beq.n	8000db2 <NetServerTask+0x92>
        uip_len = 0;
      }
    }

#if UIP_UDP
    for (connection = 0; connection < UIP_UDP_CONNS; connection++)
 8000d42:	2400      	movs	r4, #0
 8000d44:	2c00      	cmp	r4, #0
 8000d46:	d04a      	beq.n	8000dde <NetServerTask+0xbe>
    }
#endif
  }

  /* process ARP Timer here. */
  if (TimerGet() >= ARPTimerTimeOut)
 8000d48:	f7ff fef2 	bl	8000b30 <TimerGet>
 8000d4c:	4b3f      	ldr	r3, [pc, #252]	; (8000e4c <NetServerTask+0x12c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4298      	cmp	r0, r3
 8000d52:	d259      	bcs.n	8000e08 <NetServerTask+0xe8>
    for (connection = 0; connection < UIP_UDP_CONNS; connection++)
 8000d54:	2400      	movs	r4, #0
 8000d56:	e060      	b.n	8000e1a <NetServerTask+0xfa>
    uip_len = (blt_int16u)packetLen;
 8000d58:	4a3d      	ldr	r2, [pc, #244]	; (8000e50 <NetServerTask+0x130>)
 8000d5a:	8010      	strh	r0, [r2, #0]
    if (NET_UIP_HEADER_BUF->type == htons(UIP_ETHTYPE_IP))
 8000d5c:	4b3d      	ldr	r3, [pc, #244]	; (8000e54 <NetServerTask+0x134>)
 8000d5e:	899c      	ldrh	r4, [r3, #12]
 8000d60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d64:	f000 fea8 	bl	8001ab8 <htons>
 8000d68:	4284      	cmp	r4, r0
 8000d6a:	d013      	beq.n	8000d94 <NetServerTask+0x74>
    else if (NET_UIP_HEADER_BUF->type == htons(UIP_ETHTYPE_ARP))
 8000d6c:	4b39      	ldr	r3, [pc, #228]	; (8000e54 <NetServerTask+0x134>)
 8000d6e:	899c      	ldrh	r4, [r3, #12]
 8000d70:	f640 0006 	movw	r0, #2054	; 0x806
 8000d74:	f000 fea0 	bl	8001ab8 <htons>
 8000d78:	4284      	cmp	r4, r0
 8000d7a:	d1d5      	bne.n	8000d28 <NetServerTask+0x8>
      uip_arp_arpin();
 8000d7c:	f001 fdee 	bl	800295c <uip_arp_arpin>
      if (uip_len > 0)
 8000d80:	4b33      	ldr	r3, [pc, #204]	; (8000e50 <NetServerTask+0x130>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0cf      	beq.n	8000d28 <NetServerTask+0x8>
        netdev_send();
 8000d88:	f004 f8e8 	bl	8004f5c <netdev_send>
        uip_len = 0;
 8000d8c:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <NetServerTask+0x130>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	801a      	strh	r2, [r3, #0]
 8000d92:	e7c9      	b.n	8000d28 <NetServerTask+0x8>
      uip_input();
 8000d94:	2001      	movs	r0, #1
 8000d96:	f000 fec9 	bl	8001b2c <uip_process>
      if (uip_len > 0)
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <NetServerTask+0x130>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d0c2      	beq.n	8000d28 <NetServerTask+0x8>
        uip_arp_out();
 8000da2:	f001 fe4b 	bl	8002a3c <uip_arp_out>
        netdev_send();
 8000da6:	f004 f8d9 	bl	8004f5c <netdev_send>
        uip_len = 0;
 8000daa:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <NetServerTask+0x130>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	801a      	strh	r2, [r3, #0]
 8000db0:	e7ba      	b.n	8000d28 <NetServerTask+0x8>
      uip_periodic(connection);
 8000db2:	2368      	movs	r3, #104	; 0x68
 8000db4:	4a28      	ldr	r2, [pc, #160]	; (8000e58 <NetServerTask+0x138>)
 8000db6:	fb03 2304 	mla	r3, r3, r4, r2
 8000dba:	4a28      	ldr	r2, [pc, #160]	; (8000e5c <NetServerTask+0x13c>)
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f000 feb4 	bl	8001b2c <uip_process>
      if (uip_len > 0)
 8000dc4:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <NetServerTask+0x130>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	b90b      	cbnz	r3, 8000dce <NetServerTask+0xae>
    for (connection = 0; connection < UIP_CONNS; connection++)
 8000dca:	3401      	adds	r4, #1
 8000dcc:	e7b7      	b.n	8000d3e <NetServerTask+0x1e>
        uip_arp_out();
 8000dce:	f001 fe35 	bl	8002a3c <uip_arp_out>
        netdev_send();
 8000dd2:	f004 f8c3 	bl	8004f5c <netdev_send>
        uip_len = 0;
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <NetServerTask+0x130>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	801a      	strh	r2, [r3, #0]
 8000ddc:	e7f5      	b.n	8000dca <NetServerTask+0xaa>
      uip_udp_periodic(connection);
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <NetServerTask+0x140>)
 8000de0:	eb03 1384 	add.w	r3, r3, r4, lsl #6
 8000de4:	4a1f      	ldr	r2, [pc, #124]	; (8000e64 <NetServerTask+0x144>)
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	2005      	movs	r0, #5
 8000dea:	f000 fe9f 	bl	8001b2c <uip_process>
      if(uip_len > 0)
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <NetServerTask+0x130>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	b90b      	cbnz	r3, 8000df8 <NetServerTask+0xd8>
    for (connection = 0; connection < UIP_UDP_CONNS; connection++)
 8000df4:	3401      	adds	r4, #1
 8000df6:	e7a5      	b.n	8000d44 <NetServerTask+0x24>
        uip_arp_out();
 8000df8:	f001 fe20 	bl	8002a3c <uip_arp_out>
        netdev_send();
 8000dfc:	f004 f8ae 	bl	8004f5c <netdev_send>
        uip_len = 0;
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <NetServerTask+0x130>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	801a      	strh	r2, [r3, #0]
 8000e06:	e7f5      	b.n	8000df4 <NetServerTask+0xd4>
  {
    ARPTimerTimeOut += NET_UIP_ARP_TIMER_MS;
 8000e08:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e0c:	441a      	add	r2, r3
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <NetServerTask+0x12c>)
 8000e10:	601a      	str	r2, [r3, #0]
    uip_arp_timer();
 8000e12:	f001 fd6f 	bl	80028f4 <uip_arp_timer>
 8000e16:	e79d      	b.n	8000d54 <NetServerTask+0x34>
  }

  /* perform polling operations here. */
  for (connection = 0; connection < UIP_CONNS; connection++)
 8000e18:	3401      	adds	r4, #1
 8000e1a:	b9a4      	cbnz	r4, 8000e46 <NetServerTask+0x126>
  {
    uip_poll_conn(&uip_conns[connection]);
 8000e1c:	2368      	movs	r3, #104	; 0x68
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <NetServerTask+0x138>)
 8000e20:	fb03 2304 	mla	r3, r3, r4, r2
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <NetServerTask+0x13c>)
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 fe7f 	bl	8001b2c <uip_process>
    /* If the above function invocation resulted in data that
     * should be sent out on the network, the global variable
     * uip_len is set to a value > 0.
     */
    if (uip_len > 0)
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <NetServerTask+0x130>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0f0      	beq.n	8000e18 <NetServerTask+0xf8>
    {
      uip_arp_out();
 8000e36:	f001 fe01 	bl	8002a3c <uip_arp_out>
      netdev_send();
 8000e3a:	f004 f88f 	bl	8004f5c <netdev_send>
      uip_len = 0;
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <NetServerTask+0x130>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	801a      	strh	r2, [r3, #0]
 8000e44:	e7e8      	b.n	8000e18 <NetServerTask+0xf8>
    }
  }

} /*** end of NetServerTask ***/
 8000e46:	bd10      	pop	{r4, pc}
 8000e48:	20000514 	.word	0x20000514
 8000e4c:	20000508 	.word	0x20000508
 8000e50:	20000628 	.word	0x20000628
 8000e54:	200006bc 	.word	0x200006bc
 8000e58:	20000644 	.word	0x20000644
 8000e5c:	20000640 	.word	0x20000640
 8000e60:	20000d00 	.word	0x20000d00
 8000e64:	20000638 	.word	0x20000638

08000e68 <NetInit>:
  if (netInitializationDeferred == BLT_FALSE)
 8000e68:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <NetInit+0x80>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b103      	cbz	r3, 8000e70 <NetInit+0x8>
 8000e6e:	4770      	bx	lr
{
 8000e70:	b510      	push	{r4, lr}
    netdev_init();
 8000e72:	f003 ffe9 	bl	8004e48 <netdev_init>
    periodicTimerTimeOut = TimerGet() + NET_UIP_PERIODIC_TIMER_MS;
 8000e76:	f7ff fe5b 	bl	8000b30 <TimerGet>
 8000e7a:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <NetInit+0x84>)
 8000e80:	6018      	str	r0, [r3, #0]
    ARPTimerTimeOut = TimerGet() + NET_UIP_ARP_TIMER_MS;
 8000e82:	f7ff fe55 	bl	8000b30 <TimerGet>
 8000e86:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e8a:	4403      	add	r3, r0
 8000e8c:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <NetInit+0x88>)
 8000e8e:	6013      	str	r3, [r2, #0]
    uip_init();
 8000e90:	f000 fdba 	bl	8001a08 <uip_init>
    uip_sethostaddr(ipaddr);
 8000e94:	4a17      	ldr	r2, [pc, #92]	; (8000ef4 <NetInit+0x8c>)
 8000e96:	2300      	movs	r3, #0
 8000e98:	8013      	strh	r3, [r2, #0]
 8000e9a:	8053      	strh	r3, [r2, #2]
    uip_setnetmask(ipaddr);
 8000e9c:	4a16      	ldr	r2, [pc, #88]	; (8000ef8 <NetInit+0x90>)
 8000e9e:	8013      	strh	r3, [r2, #0]
 8000ea0:	8053      	strh	r3, [r2, #2]
    uip_setdraddr(ipaddr);
 8000ea2:	4a16      	ldr	r2, [pc, #88]	; (8000efc <NetInit+0x94>)
 8000ea4:	8013      	strh	r3, [r2, #0]
 8000ea6:	8053      	strh	r3, [r2, #2]
    uip_listen(HTONS(BOOT_COM_NET_PORT));
 8000ea8:	f64e 0003 	movw	r0, #59395	; 0xe803
 8000eac:	f000 fdec 	bl	8001a88 <uip_listen>
    netdev_init_mac();
 8000eb0:	f004 f806 	bl	8004ec0 <netdev_init_mac>
    netdev_get_mac(&macAddress.addr[0]);
 8000eb4:	4c12      	ldr	r4, [pc, #72]	; (8000f00 <NetInit+0x98>)
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f004 f816 	bl	8004ee8 <netdev_get_mac>
    dhcpc_init(&macAddress.addr[0], 6);
 8000ebc:	2106      	movs	r1, #6
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	f000 fbda 	bl	8001678 <dhcpc_init>
    dhcpc_request();
 8000ec4:	f000 fbf6 	bl	80016b4 <dhcpc_request>
    if (BackDoorGetExtension() < BOOT_COM_NET_BACKDOOR_EXTENSION_MS)
 8000ec8:	f7ff fe6c 	bl	8000ba4 <BackDoorGetExtension>
 8000ecc:	f242 730f 	movw	r3, #9999	; 0x270f
 8000ed0:	4298      	cmp	r0, r3
 8000ed2:	d903      	bls.n	8000edc <NetInit+0x74>
    netInitializedFlag = BLT_TRUE;
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <NetInit+0x9c>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
} /*** end of NetInit ***/
 8000eda:	bd10      	pop	{r4, pc}
      BackDoorSetExtension(BOOT_COM_NET_BACKDOOR_EXTENSION_MS);
 8000edc:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ee0:	f7ff fe5a 	bl	8000b98 <BackDoorSetExtension>
 8000ee4:	e7f6      	b.n	8000ed4 <NetInit+0x6c>
 8000ee6:	bf00      	nop
 8000ee8:	20000041 	.word	0x20000041
 8000eec:	20000514 	.word	0x20000514
 8000ef0:	20000508 	.word	0x20000508
 8000ef4:	200006b8 	.word	0x200006b8
 8000ef8:	200006b4 	.word	0x200006b4
 8000efc:	200006b0 	.word	0x200006b0
 8000f00:	2000050c 	.word	0x2000050c
 8000f04:	20000512 	.word	0x20000512

08000f08 <NetDeferredInit>:
{
 8000f08:	b508      	push	{r3, lr}
  netInitializationDeferred = BLT_FALSE;
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <NetDeferredInit+0x18>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
  if (netInitializedFlag == BLT_FALSE)
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <NetDeferredInit+0x1c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b103      	cbz	r3, 8000f18 <NetDeferredInit+0x10>
} /*** end of NetDeferredInit ***/
 8000f16:	bd08      	pop	{r3, pc}
    NetInit();
 8000f18:	f7ff ffa6 	bl	8000e68 <NetInit>
} /*** end of NetDeferredInit ***/
 8000f1c:	e7fb      	b.n	8000f16 <NetDeferredInit+0xe>
 8000f1e:	bf00      	nop
 8000f20:	20000041 	.word	0x20000041
 8000f24:	20000512 	.word	0x20000512

08000f28 <NetTransmitPacket>:
  if (netInitializedFlag == BLT_TRUE)
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <NetTransmitPacket+0x40>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d000      	beq.n	8000f32 <NetTransmitPacket+0xa>
 8000f30:	4770      	bx	lr
{
 8000f32:	b470      	push	{r4, r5, r6}
    s = &(uip_conn->appstate);
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <NetTransmitPacket+0x44>)
 8000f36:	681c      	ldr	r4, [r3, #0]
    *(blt_int32u *)&(s->dto_data[0]) = s->dto_counter;
 8000f38:	69e6      	ldr	r6, [r4, #28]
 8000f3a:	6226      	str	r6, [r4, #32]
    for (cnt=0; cnt<len; cnt++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e006      	b.n	8000f4e <NetTransmitPacket+0x26>
      s->dto_data[cnt+4] = data[cnt];
 8000f40:	1d1a      	adds	r2, r3, #4
 8000f42:	5cc5      	ldrb	r5, [r0, r3]
 8000f44:	4422      	add	r2, r4
 8000f46:	f882 5020 	strb.w	r5, [r2, #32]
    for (cnt=0; cnt<len; cnt++)
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	b28a      	uxth	r2, r1
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d8f5      	bhi.n	8000f40 <NetTransmitPacket+0x18>
    s->dto_len = len + 4;
 8000f54:	3204      	adds	r2, #4
 8000f56:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
    s->dto_tx_req = BLT_TRUE;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    s->dto_counter++;
 8000f60:	441e      	add	r6, r3
 8000f62:	61e6      	str	r6, [r4, #28]
} /*** end of NetTransmitPacket ***/
 8000f64:	bc70      	pop	{r4, r5, r6}
 8000f66:	4770      	bx	lr
 8000f68:	20000512 	.word	0x20000512
 8000f6c:	20000640 	.word	0x20000640

08000f70 <NetReceivePacket>:
{
 8000f70:	b508      	push	{r3, lr}
  if (netInitializedFlag == BLT_TRUE)
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <NetReceivePacket+0x14>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d001      	beq.n	8000f7e <NetReceivePacket+0xe>
} /*** end of NetReceivePacket ***/
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	bd08      	pop	{r3, pc}
    NetServerTask();
 8000f7e:	f7ff fecf 	bl	8000d20 <NetServerTask>
 8000f82:	e7fa      	b.n	8000f7a <NetReceivePacket+0xa>
 8000f84:	20000512 	.word	0x20000512

08000f88 <NetApp>:
{
 8000f88:	b510      	push	{r4, lr}
  s = &(uip_conn->appstate);
 8000f8a:	4b29      	ldr	r3, [pc, #164]	; (8001030 <NetApp+0xa8>)
 8000f8c:	681c      	ldr	r4, [r3, #0]
  if (uip_connected())
 8000f8e:	4b29      	ldr	r3, [pc, #164]	; (8001034 <NetApp+0xac>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000f96:	d12a      	bne.n	8000fee <NetApp+0x66>
  if (uip_acked())
 8000f98:	f013 0f01 	tst.w	r3, #1
 8000f9c:	d002      	beq.n	8000fa4 <NetApp+0x1c>
    s->dto_tx_pending = BLT_FALSE;
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
  if (uip_rexmit())
 8000fa4:	f013 0f04 	tst.w	r3, #4
 8000fa8:	d003      	beq.n	8000fb2 <NetApp+0x2a>
    if (s->dto_tx_pending == BLT_TRUE)
 8000faa:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d027      	beq.n	8001002 <NetApp+0x7a>
  if (uip_poll())
 8000fb2:	4b20      	ldr	r3, [pc, #128]	; (8001034 <NetApp+0xac>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	f013 0f08 	tst.w	r3, #8
 8000fba:	d003      	beq.n	8000fc4 <NetApp+0x3c>
    if (s->dto_tx_req == BLT_TRUE)
 8000fbc:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d025      	beq.n	8001010 <NetApp+0x88>
  if (uip_newdata())
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <NetApp+0xac>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	f013 0f02 	tst.w	r3, #2
 8000fcc:	d018      	beq.n	8001000 <NetApp+0x78>
    if ( ((uip_datalen() - 4) <= BOOT_COM_NET_RX_MAX_DATA) &&
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <NetApp+0xb0>)
 8000fd0:	8819      	ldrh	r1, [r3, #0]
 8000fd2:	1f0b      	subs	r3, r1, #4
 8000fd4:	2b40      	cmp	r3, #64	; 0x40
 8000fd6:	dc13      	bgt.n	8001000 <NetApp+0x78>
         (s->dto_tx_pending == BLT_FALSE) )
 8000fd8:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
    if ( ((uip_datalen() - 4) <= BOOT_COM_NET_RX_MAX_DATA) &&
 8000fdc:	b983      	cbnz	r3, 8001000 <NetApp+0x78>
      newDataPtr = uip_appdata;
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <NetApp+0xb4>)
 8000fe0:	6818      	ldr	r0, [r3, #0]
      XcpPacketReceived(&newDataPtr[4], (blt_int8u)(uip_datalen() - 4));
 8000fe2:	3904      	subs	r1, #4
 8000fe4:	b2c9      	uxtb	r1, r1
 8000fe6:	3004      	adds	r0, #4
 8000fe8:	f000 f9b4 	bl	8001354 <XcpPacketReceived>
 8000fec:	e008      	b.n	8001000 <NetApp+0x78>
    s->dto_counter = 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61e3      	str	r3, [r4, #28]
    s->dto_len = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    s->dto_tx_req = BLT_FALSE;
 8000ff8:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    s->dto_tx_pending = BLT_FALSE;
 8000ffc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
} /*** end of NetApp ***/
 8001000:	bd10      	pop	{r4, pc}
      uip_send(s->dto_data, s->dto_len);
 8001002:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
 8001006:	f104 0020 	add.w	r0, r4, #32
 800100a:	f001 fbdf 	bl	80027cc <uip_send>
 800100e:	e7d0      	b.n	8000fb2 <NetApp+0x2a>
      s->dto_tx_req = BLT_FALSE;
 8001010:	2300      	movs	r3, #0
 8001012:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      if (s->dto_len > 0)
 8001016:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
 800101a:	2900      	cmp	r1, #0
 800101c:	d0d2      	beq.n	8000fc4 <NetApp+0x3c>
        s->dto_tx_pending = BLT_TRUE;
 800101e:	2301      	movs	r3, #1
 8001020:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
        uip_send(s->dto_data, s->dto_len);
 8001024:	f104 0020 	add.w	r0, r4, #32
 8001028:	f001 fbd0 	bl	80027cc <uip_send>
 800102c:	e7ca      	b.n	8000fc4 <NetApp+0x3c>
 800102e:	bf00      	nop
 8001030:	20000640 	.word	0x20000640
 8001034:	20000634 	.word	0x20000634
 8001038:	20000628 	.word	0x20000628
 800103c:	2000063c 	.word	0x2000063c

08001040 <XcpProtectResources>:
** \return    none
**
****************************************************************************************/
static void XcpProtectResources(void)
{
  xcpInfo.protection = 0;
 8001040:	4b01      	ldr	r3, [pc, #4]	; (8001048 <XcpProtectResources+0x8>)
 8001042:	2200      	movs	r2, #0
 8001044:	705a      	strb	r2, [r3, #1]

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 8001046:	4770      	bx	lr
 8001048:	20000518 	.word	0x20000518

0800104c <XcpSetCtoError>:
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <XcpSetCtoError+0x10>)
 800104e:	22fe      	movs	r2, #254	; 0xfe
 8001050:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[1] = error;
 8001052:	7118      	strb	r0, [r3, #4]
  xcpInfo.ctoLen = 2;
 8001054:	2202      	movs	r2, #2
 8001056:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpSetCtoError ***/
 800105a:	4770      	bx	lr
 800105c:	20000518 	.word	0x20000518

08001060 <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 8001060:	b510      	push	{r4, lr}
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 8001062:	4c05      	ldr	r4, [pc, #20]	; (8001078 <XcpCmdDisconnect+0x18>)
 8001064:	2300      	movs	r3, #0
 8001066:	7023      	strb	r3, [r4, #0]

  /* enable resource protection */
  XcpProtectResources();
 8001068:	f7ff ffea 	bl	8001040 <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800106c:	23ff      	movs	r3, #255	; 0xff
 800106e:	70e3      	strb	r3, [r4, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001070:	2301      	movs	r3, #1
 8001072:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdDisconnect ***/
 8001076:	bd10      	pop	{r4, pc}
 8001078:	20000518 	.word	0x20000518

0800107c <XcpCmdGetStatus>:
{
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <XcpCmdGetStatus+0x1c>)
 800107e:	22ff      	movs	r2, #255	; 0xff
 8001080:	70da      	strb	r2, [r3, #3]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 8001082:	2200      	movs	r2, #0
 8001084:	711a      	strb	r2, [r3, #4]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 8001086:	7859      	ldrb	r1, [r3, #1]
 8001088:	7159      	strb	r1, [r3, #5]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 800108a:	719a      	strb	r2, [r3, #6]
  xcpInfo.ctoData[4] = 0;
 800108c:	71da      	strb	r2, [r3, #7]
  xcpInfo.ctoData[5] = 0;
 800108e:	721a      	strb	r2, [r3, #8]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 8001090:	2206      	movs	r2, #6
 8001092:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetStatus ***/
 8001096:	4770      	bx	lr
 8001098:	20000518 	.word	0x20000518

0800109c <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 800109c:	b508      	push	{r3, lr}
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff ffd4 	bl	800104c <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 80010a4:	bd08      	pop	{r3, pc}
	...

080010a8 <XcpCmdGetId>:
{
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <XcpCmdGetId+0x20>)
 80010aa:	22ff      	movs	r2, #255	; 0xff
 80010ac:	70da      	strb	r2, [r3, #3]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <XcpCmdGetId+0x24>)
 80010b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 80010b2:	2200      	movs	r2, #0
 80010b4:	711a      	strb	r2, [r3, #4]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 80010b6:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[3] = 0;
 80010b8:	719a      	strb	r2, [r3, #6]

  /* store station id length (excl. null termination) for response packet */
  *(blt_int32u *)&xcpInfo.ctoData[4] = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 80010ba:	2207      	movs	r2, #7
 80010bc:	f8c3 2007 	str.w	r2, [r3, #7]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 80010c0:	2208      	movs	r2, #8
 80010c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetId ***/
 80010c6:	4770      	bx	lr
 80010c8:	20000518 	.word	0x20000518
 80010cc:	08005164 	.word	0x08005164

080010d0 <XcpCmdSetMta>:
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <XcpCmdSetMta+0x14>)
 80010d2:	22ff      	movs	r2, #255	; 0xff
 80010d4:	70da      	strb	r2, [r3, #3]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = *(blt_int32u *)&data[4];
 80010d6:	6842      	ldr	r2, [r0, #4]
 80010d8:	649a      	str	r2, [r3, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = 1;
 80010da:	2201      	movs	r2, #1
 80010dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdSetMta ***/
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000518 	.word	0x20000518

080010e8 <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 80010e8:	b508      	push	{r3, lr}
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 80010ea:	2031      	movs	r0, #49	; 0x31
 80010ec:	f7ff ffae 	bl	800104c <XcpSetCtoError>
  return;
} /*** end of XcpCmdProgramPrepare ***/
 80010f0:	bd08      	pop	{r3, pc}
	...

080010f4 <XcpCmdProgramStart>:
{
 80010f4:	b538      	push	{r3, r4, r5, lr}
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80010f6:	4c08      	ldr	r4, [pc, #32]	; (8001118 <XcpCmdProgramStart+0x24>)
 80010f8:	23ff      	movs	r3, #255	; 0xff
 80010fa:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] = 0;
 80010fc:	2500      	movs	r5, #0
 80010fe:	7125      	strb	r5, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8001100:	7165      	strb	r5, [r4, #5]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8001102:	f7ff fdd9 	bl	8000cb8 <ComGetActiveInterfaceMaxRxLen>
 8001106:	71a0      	strb	r0, [r4, #6]
  xcpInfo.ctoData[4] = 0;
 8001108:	71e5      	strb	r5, [r4, #7]
  xcpInfo.ctoData[5] = 0;
 800110a:	7225      	strb	r5, [r4, #8]
  xcpInfo.ctoData[6] = 0;
 800110c:	7265      	strb	r5, [r4, #9]
  xcpInfo.ctoLen = 7;
 800110e:	2307      	movs	r3, #7
 8001110:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdProgramStart ***/
 8001114:	bd38      	pop	{r3, r4, r5, pc}
 8001116:	bf00      	nop
 8001118:	20000518 	.word	0x20000518

0800111c <XcpCmdConnect>:
{
 800111c:	b538      	push	{r3, r4, r5, lr}
  XcpProtectResources();
 800111e:	f7ff ff8f 	bl	8001040 <XcpProtectResources>
  xcpInfo.connected = 1;
 8001122:	4c0e      	ldr	r4, [pc, #56]	; (800115c <XcpCmdConnect+0x40>)
 8001124:	2501      	movs	r5, #1
 8001126:	7025      	strb	r5, [r4, #0]
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001128:	23ff      	movs	r3, #255	; 0xff
 800112a:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 800112c:	2310      	movs	r3, #16
 800112e:	7123      	strb	r3, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	7163      	strb	r3, [r4, #5]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8001134:	f7ff fdc0 	bl	8000cb8 <ComGetActiveInterfaceMaxRxLen>
 8001138:	71a0      	strb	r0, [r4, #6]
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 800113a:	f7ff fdc9 	bl	8000cd0 <ComGetActiveInterfaceMaxTxLen>
 800113e:	71e0      	strb	r0, [r4, #7]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 8001140:	f7ff fdc6 	bl	8000cd0 <ComGetActiveInterfaceMaxTxLen>
 8001144:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001148:	7220      	strb	r0, [r4, #8]
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 800114a:	7265      	strb	r5, [r4, #9]
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 800114c:	72a5      	strb	r5, [r4, #10]
  xcpInfo.ctoLen = 8;
 800114e:	2308      	movs	r3, #8
 8001150:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  NvmInit();
 8001154:	f7ff fbf4 	bl	8000940 <NvmInit>
} /*** end of XcpCmdConnect ***/
 8001158:	bd38      	pop	{r3, r4, r5, pc}
 800115a:	bf00      	nop
 800115c:	20000518 	.word	0x20000518

08001160 <XcpCmdUpload>:
{
 8001160:	b538      	push	{r3, r4, r5, lr}
 8001162:	4605      	mov	r5, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8001164:	7844      	ldrb	r4, [r0, #1]
 8001166:	f7ff fda7 	bl	8000cb8 <ComGetActiveInterfaceMaxRxLen>
 800116a:	3801      	subs	r0, #1
 800116c:	4284      	cmp	r4, r0
 800116e:	dc10      	bgt.n	8001192 <XcpCmdUpload+0x32>
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8001170:	4c0a      	ldr	r4, [pc, #40]	; (800119c <XcpCmdUpload+0x3c>)
 8001172:	786a      	ldrb	r2, [r5, #1]
 8001174:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001176:	1d20      	adds	r0, r4, #4
 8001178:	f7ff fa0c 	bl	8000594 <CpuMemCopy>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800117c:	23ff      	movs	r3, #255	; 0xff
 800117e:	70e3      	strb	r3, [r4, #3]
  xcpInfo.mta += data[1];
 8001180:	786a      	ldrb	r2, [r5, #1]
 8001182:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001184:	4413      	add	r3, r2
 8001186:	64a3      	str	r3, [r4, #72]	; 0x48
  xcpInfo.ctoLen = data[1]+1;
 8001188:	786b      	ldrb	r3, [r5, #1]
 800118a:	3301      	adds	r3, #1
 800118c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdUpload ***/
 8001190:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8001192:	2022      	movs	r0, #34	; 0x22
 8001194:	f7ff ff5a 	bl	800104c <XcpSetCtoError>
    return;
 8001198:	e7fa      	b.n	8001190 <XcpCmdUpload+0x30>
 800119a:	bf00      	nop
 800119c:	20000518 	.word	0x20000518

080011a0 <XcpCmdShortUpload>:
{
 80011a0:	b538      	push	{r3, r4, r5, lr}
 80011a2:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 80011a4:	7845      	ldrb	r5, [r0, #1]
 80011a6:	f7ff fd87 	bl	8000cb8 <ComGetActiveInterfaceMaxRxLen>
 80011aa:	3801      	subs	r0, #1
 80011ac:	4285      	cmp	r5, r0
 80011ae:	dc11      	bgt.n	80011d4 <XcpCmdShortUpload+0x34>
  xcpInfo.mta = *(blt_int32u *)&data[4];
 80011b0:	6861      	ldr	r1, [r4, #4]
 80011b2:	4d0a      	ldr	r5, [pc, #40]	; (80011dc <XcpCmdShortUpload+0x3c>)
 80011b4:	64a9      	str	r1, [r5, #72]	; 0x48
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 80011b6:	7862      	ldrb	r2, [r4, #1]
 80011b8:	1d28      	adds	r0, r5, #4
 80011ba:	f7ff f9eb 	bl	8000594 <CpuMemCopy>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80011be:	23ff      	movs	r3, #255	; 0xff
 80011c0:	70eb      	strb	r3, [r5, #3]
  xcpInfo.mta += data[1];
 80011c2:	7862      	ldrb	r2, [r4, #1]
 80011c4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80011c6:	4413      	add	r3, r2
 80011c8:	64ab      	str	r3, [r5, #72]	; 0x48
  xcpInfo.ctoLen = data[1]+1;
 80011ca:	7863      	ldrb	r3, [r4, #1]
 80011cc:	3301      	adds	r3, #1
 80011ce:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
} /*** end of XcpCmdShortUpload ***/
 80011d2:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 80011d4:	2022      	movs	r0, #34	; 0x22
 80011d6:	f7ff ff39 	bl	800104c <XcpSetCtoError>
    return;
 80011da:	e7fa      	b.n	80011d2 <XcpCmdShortUpload+0x32>
 80011dc:	20000518 	.word	0x20000518

080011e0 <XcpComputeChecksum>:
{
 80011e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011e2:	4605      	mov	r5, r0
 80011e4:	4617      	mov	r7, r2
  blt_int8u cs = 0;
 80011e6:	2400      	movs	r4, #0
  while (length-- > 0)
 80011e8:	e006      	b.n	80011f8 <XcpComputeChecksum+0x18>
    cs += *((blt_int8u *)(blt_addr)address);
 80011ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80011ee:	441c      	add	r4, r3
 80011f0:	b2e4      	uxtb	r4, r4
    CopService();
 80011f2:	f7ff fd91 	bl	8000d18 <CopService>
  while (length-- > 0)
 80011f6:	4631      	mov	r1, r6
 80011f8:	1e4e      	subs	r6, r1, #1
 80011fa:	2900      	cmp	r1, #0
 80011fc:	d1f5      	bne.n	80011ea <XcpComputeChecksum+0xa>
  *checksum = cs;
 80011fe:	603c      	str	r4, [r7, #0]
} /*** end of XcpComputeChecksum ***/
 8001200:	2001      	movs	r0, #1
 8001202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001204 <XcpCmdBuildCheckSum>:
{
 8001204:	b510      	push	{r4, lr}
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001206:	4c08      	ldr	r4, [pc, #32]	; (8001228 <XcpCmdBuildCheckSum+0x24>)
 8001208:	23ff      	movs	r3, #255	; 0xff
 800120a:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] = XcpComputeChecksum(xcpInfo.mta, *(blt_int32u *)&data[4],
 800120c:	1de2      	adds	r2, r4, #7
 800120e:	6841      	ldr	r1, [r0, #4]
 8001210:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001212:	f7ff ffe5 	bl	80011e0 <XcpComputeChecksum>
 8001216:	7120      	strb	r0, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	7163      	strb	r3, [r4, #5]
  xcpInfo.ctoData[3] = 0;
 800121c:	71a3      	strb	r3, [r4, #6]
  xcpInfo.ctoLen = 8;
 800121e:	2308      	movs	r3, #8
 8001220:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdBuildCheckSum ***/
 8001224:	bd10      	pop	{r4, pc}
 8001226:	bf00      	nop
 8001228:	20000518 	.word	0x20000518

0800122c <XcpCmdProgramMax>:
{
 800122c:	b538      	push	{r3, r4, r5, lr}
 800122e:	4605      	mov	r5, r0
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <XcpCmdProgramMax+0x3c>)
 8001232:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001234:	f7ff fd40 	bl	8000cb8 <ComGetActiveInterfaceMaxRxLen>
 8001238:	1c6a      	adds	r2, r5, #1
 800123a:	1e41      	subs	r1, r0, #1
 800123c:	4620      	mov	r0, r4
 800123e:	f7ff fb83 	bl	8000948 <NvmWrite>
 8001242:	b160      	cbz	r0, 800125e <XcpCmdProgramMax+0x32>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001244:	4c08      	ldr	r4, [pc, #32]	; (8001268 <XcpCmdProgramMax+0x3c>)
 8001246:	23ff      	movs	r3, #255	; 0xff
 8001248:	70e3      	strb	r3, [r4, #3]
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 800124a:	f7ff fd35 	bl	8000cb8 <ComGetActiveInterfaceMaxRxLen>
 800124e:	3801      	subs	r0, #1
 8001250:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001252:	4403      	add	r3, r0
 8001254:	64a3      	str	r3, [r4, #72]	; 0x48
  xcpInfo.ctoLen = 1;
 8001256:	2301      	movs	r3, #1
 8001258:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdProgramMax ***/
 800125c:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_GENERIC);
 800125e:	2031      	movs	r0, #49	; 0x31
 8001260:	f7ff fef4 	bl	800104c <XcpSetCtoError>
    return;
 8001264:	e7fa      	b.n	800125c <XcpCmdProgramMax+0x30>
 8001266:	bf00      	nop
 8001268:	20000518 	.word	0x20000518

0800126c <XcpCmdProgram>:
{
 800126c:	b538      	push	{r3, r4, r5, lr}
 800126e:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 8001270:	7845      	ldrb	r5, [r0, #1]
 8001272:	f7ff fd21 	bl	8000cb8 <ComGetActiveInterfaceMaxRxLen>
 8001276:	3802      	subs	r0, #2
 8001278:	4285      	cmp	r5, r0
 800127a:	dc0e      	bgt.n	800129a <XcpCmdProgram+0x2e>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <XcpCmdProgram+0x58>)
 800127e:	22ff      	movs	r2, #255	; 0xff
 8001280:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 8001282:	2201      	movs	r2, #1
 8001284:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (data[1] == 0)
 8001288:	7861      	ldrb	r1, [r4, #1]
 800128a:	b951      	cbnz	r1, 80012a2 <XcpCmdProgram+0x36>
    if (NvmDone() == BLT_FALSE)
 800128c:	f7ff fb6c 	bl	8000968 <NvmDone>
 8001290:	b930      	cbnz	r0, 80012a0 <XcpCmdProgram+0x34>
      XcpSetCtoError(XCP_ERR_GENERIC);
 8001292:	2031      	movs	r0, #49	; 0x31
 8001294:	f7ff feda 	bl	800104c <XcpSetCtoError>
 8001298:	e002      	b.n	80012a0 <XcpCmdProgram+0x34>
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 800129a:	2022      	movs	r0, #34	; 0x22
 800129c:	f7ff fed6 	bl	800104c <XcpSetCtoError>
} /*** end of XcpCmdProgram ***/
 80012a0:	bd38      	pop	{r3, r4, r5, pc}
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 80012a2:	1ca2      	adds	r2, r4, #2
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <XcpCmdProgram+0x58>)
 80012a6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80012a8:	f7ff fb4e 	bl	8000948 <NvmWrite>
 80012ac:	b128      	cbz	r0, 80012ba <XcpCmdProgram+0x4e>
  xcpInfo.mta += data[1];
 80012ae:	7861      	ldrb	r1, [r4, #1]
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <XcpCmdProgram+0x58>)
 80012b2:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80012b4:	440b      	add	r3, r1
 80012b6:	6493      	str	r3, [r2, #72]	; 0x48
 80012b8:	e7f2      	b.n	80012a0 <XcpCmdProgram+0x34>
    XcpSetCtoError(XCP_ERR_GENERIC);
 80012ba:	2031      	movs	r0, #49	; 0x31
 80012bc:	f7ff fec6 	bl	800104c <XcpSetCtoError>
    return;
 80012c0:	e7ee      	b.n	80012a0 <XcpCmdProgram+0x34>
 80012c2:	bf00      	nop
 80012c4:	20000518 	.word	0x20000518

080012c8 <XcpCmdProgramClear>:
{
 80012c8:	b508      	push	{r3, lr}
  if (NvmErase((blt_addr)xcpInfo.mta, *(blt_int32u *)&data[4]) == BLT_FALSE)
 80012ca:	6841      	ldr	r1, [r0, #4]
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <XcpCmdProgramClear+0x24>)
 80012ce:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80012d0:	f7ff fb3e 	bl	8000950 <NvmErase>
 80012d4:	b130      	cbz	r0, 80012e4 <XcpCmdProgramClear+0x1c>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <XcpCmdProgramClear+0x24>)
 80012d8:	22ff      	movs	r2, #255	; 0xff
 80012da:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 80012dc:	2201      	movs	r2, #1
 80012de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramClear ***/
 80012e2:	bd08      	pop	{r3, pc}
    XcpSetCtoError(XCP_ERR_GENERIC);
 80012e4:	2031      	movs	r0, #49	; 0x31
 80012e6:	f7ff feb1 	bl	800104c <XcpSetCtoError>
    return;
 80012ea:	e7fa      	b.n	80012e2 <XcpCmdProgramClear+0x1a>
 80012ec:	20000518 	.word	0x20000518

080012f0 <XcpCmdProgramReset>:
{
 80012f0:	b508      	push	{r3, lr}
  CpuStartUserProgram();
 80012f2:	f7ff f929 	bl	8000548 <CpuStartUserProgram>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80012f6:	4b03      	ldr	r3, [pc, #12]	; (8001304 <XcpCmdProgramReset+0x14>)
 80012f8:	22ff      	movs	r2, #255	; 0xff
 80012fa:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 80012fc:	2201      	movs	r2, #1
 80012fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramReset ***/
 8001302:	bd08      	pop	{r3, pc}
 8001304:	20000518 	.word	0x20000518

08001308 <XcpTransmitPacket>:
{
 8001308:	b508      	push	{r3, lr}
  ComTransmitPacket(data, len);
 800130a:	b289      	uxth	r1, r1
 800130c:	f7ff fcbc 	bl	8000c88 <ComTransmitPacket>
} /*** end of XcpTransmitPacket ***/
 8001310:	bd08      	pop	{r3, pc}
	...

08001314 <XcpInit>:
  xcpInfo.connected = 0;
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <XcpInit+0x18>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
  xcpInfo.mta = 0;
 800131a:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoPending = 0;
 800131c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  xcpInfo.ctoLen = 0;
 8001320:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  xcpInfo.s_n_k_resource = 0;
 8001324:	709a      	strb	r2, [r3, #2]
  xcpInfo.protection = 0;
 8001326:	705a      	strb	r2, [r3, #1]
} /*** end of XcpInit ***/
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000518 	.word	0x20000518

08001330 <XcpIsConnected>:
  if (xcpInfo.connected == 0)
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <XcpIsConnected+0x10>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b10b      	cbz	r3, 800133a <XcpIsConnected+0xa>
  return BLT_TRUE;
 8001336:	2001      	movs	r0, #1
} /*** end of XcpIsConnected ***/
 8001338:	4770      	bx	lr
    return BLT_FALSE;
 800133a:	2000      	movs	r0, #0
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000518 	.word	0x20000518

08001344 <XcpPacketTransmitted>:
  xcpInfo.ctoPending = 0;
 8001344:	4b02      	ldr	r3, [pc, #8]	; (8001350 <XcpPacketTransmitted+0xc>)
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
} /*** end of XcpPacketTransmitted ***/
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000518 	.word	0x20000518

08001354 <XcpPacketReceived>:
{
 8001354:	b508      	push	{r3, lr}
  if (data[0] == XCP_CMD_CONNECT)
 8001356:	7803      	ldrb	r3, [r0, #0]
 8001358:	2bff      	cmp	r3, #255	; 0xff
 800135a:	d004      	beq.n	8001366 <XcpPacketReceived+0x12>
  else if (xcpInfo.connected == 1)
 800135c:	4a35      	ldr	r2, [pc, #212]	; (8001434 <XcpPacketReceived+0xe0>)
 800135e:	7812      	ldrb	r2, [r2, #0]
 8001360:	2a01      	cmp	r2, #1
 8001362:	d014      	beq.n	800138e <XcpPacketReceived+0x3a>
} /*** end of XcpPacketReceived ***/
 8001364:	bd08      	pop	{r3, pc}
    XcpCmdConnect(data);
 8001366:	f7ff fed9 	bl	800111c <XcpCmdConnect>
  if (xcpInfo.ctoPending == 1)
 800136a:	4b32      	ldr	r3, [pc, #200]	; (8001434 <XcpPacketReceived+0xe0>)
 800136c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001370:	2b01      	cmp	r3, #1
 8001372:	d05a      	beq.n	800142a <XcpPacketReceived+0xd6>
  if (xcpInfo.ctoLen > 0)
 8001374:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <XcpPacketReceived+0xe0>)
 8001376:	f9b3 1044 	ldrsh.w	r1, [r3, #68]	; 0x44
 800137a:	2900      	cmp	r1, #0
 800137c:	ddf2      	ble.n	8001364 <XcpPacketReceived+0x10>
    xcpInfo.ctoPending = 1;
 800137e:	4618      	mov	r0, r3
 8001380:	2301      	movs	r3, #1
 8001382:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 8001386:	3003      	adds	r0, #3
 8001388:	f7ff ffbe 	bl	8001308 <XcpTransmitPacket>
 800138c:	e7ea      	b.n	8001364 <XcpPacketReceived+0x10>
    switch (data[0])
 800138e:	3bc9      	subs	r3, #201	; 0xc9
 8001390:	2b35      	cmp	r3, #53	; 0x35
 8001392:	d846      	bhi.n	8001422 <XcpPacketReceived+0xce>
 8001394:	e8df f003 	tbb	[pc, r3]
 8001398:	42454533 	.word	0x42454533
 800139c:	363f4545 	.word	0x363f4545
 80013a0:	4545393c 	.word	0x4545393c
 80013a4:	45454545 	.word	0x45454545
 80013a8:	45454545 	.word	0x45454545
 80013ac:	45454545 	.word	0x45454545
 80013b0:	45454545 	.word	0x45454545
 80013b4:	45454545 	.word	0x45454545
 80013b8:	45454545 	.word	0x45454545
 80013bc:	45454545 	.word	0x45454545
 80013c0:	1e244545 	.word	0x1e244545
 80013c4:	4545211b 	.word	0x4545211b
 80013c8:	2a452745 	.word	0x2a452745
 80013cc:	302d      	.short	0x302d
        XcpCmdUpload(data);
 80013ce:	f7ff fec7 	bl	8001160 <XcpCmdUpload>
        break;
 80013d2:	e7ca      	b.n	800136a <XcpPacketReceived+0x16>
        XcpCmdShortUpload(data);
 80013d4:	f7ff fee4 	bl	80011a0 <XcpCmdShortUpload>
        break;
 80013d8:	e7c7      	b.n	800136a <XcpPacketReceived+0x16>
        XcpCmdSetMta(data);
 80013da:	f7ff fe79 	bl	80010d0 <XcpCmdSetMta>
        break;
 80013de:	e7c4      	b.n	800136a <XcpPacketReceived+0x16>
        XcpCmdBuildCheckSum(data);
 80013e0:	f7ff ff10 	bl	8001204 <XcpCmdBuildCheckSum>
        break;
 80013e4:	e7c1      	b.n	800136a <XcpPacketReceived+0x16>
        XcpCmdGetId(data);
 80013e6:	f7ff fe5f 	bl	80010a8 <XcpCmdGetId>
        break;
 80013ea:	e7be      	b.n	800136a <XcpPacketReceived+0x16>
        XcpCmdSynch(data);
 80013ec:	f7ff fe56 	bl	800109c <XcpCmdSynch>
        break;
 80013f0:	e7bb      	b.n	800136a <XcpPacketReceived+0x16>
        XcpCmdGetStatus(data);
 80013f2:	f7ff fe43 	bl	800107c <XcpCmdGetStatus>
        break;
 80013f6:	e7b8      	b.n	800136a <XcpPacketReceived+0x16>
        XcpCmdDisconnect(data);
 80013f8:	f7ff fe32 	bl	8001060 <XcpCmdDisconnect>
        break;
 80013fc:	e7b5      	b.n	800136a <XcpPacketReceived+0x16>
        XcpCmdProgramMax(data);
 80013fe:	f7ff ff15 	bl	800122c <XcpCmdProgramMax>
        break;
 8001402:	e7b2      	b.n	800136a <XcpPacketReceived+0x16>
        XcpCmdProgram(data);
 8001404:	f7ff ff32 	bl	800126c <XcpCmdProgram>
        break;
 8001408:	e7af      	b.n	800136a <XcpPacketReceived+0x16>
        XcpCmdProgramStart(data);
 800140a:	f7ff fe73 	bl	80010f4 <XcpCmdProgramStart>
        break;
 800140e:	e7ac      	b.n	800136a <XcpPacketReceived+0x16>
        XcpCmdProgramClear(data);
 8001410:	f7ff ff5a 	bl	80012c8 <XcpCmdProgramClear>
        break;
 8001414:	e7a9      	b.n	800136a <XcpPacketReceived+0x16>
        XcpCmdProgramReset(data);
 8001416:	f7ff ff6b 	bl	80012f0 <XcpCmdProgramReset>
        break;
 800141a:	e7a6      	b.n	800136a <XcpPacketReceived+0x16>
        XcpCmdProgramPrepare(data);
 800141c:	f7ff fe64 	bl	80010e8 <XcpCmdProgramPrepare>
        break;
 8001420:	e7a3      	b.n	800136a <XcpPacketReceived+0x16>
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 8001422:	2020      	movs	r0, #32
 8001424:	f7ff fe12 	bl	800104c <XcpSetCtoError>
        break;
 8001428:	e79f      	b.n	800136a <XcpPacketReceived+0x16>
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 800142a:	2010      	movs	r0, #16
 800142c:	f7ff fe0e 	bl	800104c <XcpSetCtoError>
 8001430:	e7a0      	b.n	8001374 <XcpPacketReceived+0x20>
 8001432:	bf00      	nop
 8001434:	20000518 	.word	0x20000518

08001438 <add_msg_type>:

/*---------------------------------------------------------------------------*/
static u8_t *
add_msg_type(u8_t *optptr, u8_t type)
{
  *optptr++ = DHCP_OPTION_MSG_TYPE;
 8001438:	2335      	movs	r3, #53	; 0x35
 800143a:	7003      	strb	r3, [r0, #0]
  *optptr++ = 1;
 800143c:	2301      	movs	r3, #1
 800143e:	7043      	strb	r3, [r0, #1]
  *optptr++ = type;
 8001440:	7081      	strb	r1, [r0, #2]
  return optptr;
}
 8001442:	3003      	adds	r0, #3
 8001444:	4770      	bx	lr
	...

08001448 <add_server_id>:
/*---------------------------------------------------------------------------*/
static u8_t *
add_server_id(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_SERVER_ID;
 8001448:	2336      	movs	r3, #54	; 0x36
 800144a:	7003      	strb	r3, [r0, #0]
  *optptr++ = 4;
 800144c:	2304      	movs	r3, #4
 800144e:	7043      	strb	r3, [r0, #1]
  memcpy(optptr, s.serverid, 4);
 8001450:	4b02      	ldr	r3, [pc, #8]	; (800145c <add_server_id+0x14>)
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	f8c0 3002 	str.w	r3, [r0, #2]
  return optptr + 4;
}
 8001458:	3006      	adds	r0, #6
 800145a:	4770      	bx	lr
 800145c:	20000564 	.word	0x20000564

08001460 <add_req_ipaddr>:
/*---------------------------------------------------------------------------*/
static u8_t *
add_req_ipaddr(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_REQ_IPADDR;
 8001460:	2332      	movs	r3, #50	; 0x32
 8001462:	7003      	strb	r3, [r0, #0]
  *optptr++ = 4;
 8001464:	2304      	movs	r3, #4
 8001466:	7043      	strb	r3, [r0, #1]
  memcpy(optptr, s.ipaddr, 4);
 8001468:	4b02      	ldr	r3, [pc, #8]	; (8001474 <add_req_ipaddr+0x14>)
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	f8c0 3002 	str.w	r3, [r0, #2]
  return optptr + 4;
}
 8001470:	3006      	adds	r0, #6
 8001472:	4770      	bx	lr
 8001474:	20000564 	.word	0x20000564

08001478 <add_req_options>:
/*---------------------------------------------------------------------------*/
static u8_t *
add_req_options(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_REQ_LIST;
 8001478:	2337      	movs	r3, #55	; 0x37
 800147a:	7003      	strb	r3, [r0, #0]
  *optptr++ = 3;
 800147c:	2303      	movs	r3, #3
 800147e:	7043      	strb	r3, [r0, #1]
  *optptr++ = DHCP_OPTION_SUBNET_MASK;
 8001480:	2201      	movs	r2, #1
 8001482:	7082      	strb	r2, [r0, #2]
  *optptr++ = DHCP_OPTION_ROUTER;
 8001484:	70c3      	strb	r3, [r0, #3]
  *optptr++ = DHCP_OPTION_DNS_SERVER;
 8001486:	2306      	movs	r3, #6
 8001488:	7103      	strb	r3, [r0, #4]
  return optptr;
}
 800148a:	3005      	adds	r0, #5
 800148c:	4770      	bx	lr

0800148e <add_end>:
/*---------------------------------------------------------------------------*/
static u8_t *
add_end(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_END;
 800148e:	23ff      	movs	r3, #255	; 0xff
 8001490:	7003      	strb	r3, [r0, #0]
  return optptr;
}
 8001492:	3001      	adds	r0, #1
 8001494:	4770      	bx	lr
	...

08001498 <parse_options>:
  uip_send(uip_appdata, end - (u8_t *)uip_appdata);
}
/*---------------------------------------------------------------------------*/
static u8_t
parse_options(u8_t *optptr, int len)
{
 8001498:	4603      	mov	r3, r0
  u8_t *end = optptr + len;
 800149a:	4401      	add	r1, r0
  u8_t type = 0;
 800149c:	2000      	movs	r0, #0

  while (optptr < end)
 800149e:	428b      	cmp	r3, r1
 80014a0:	d234      	bcs.n	800150c <parse_options+0x74>
{
 80014a2:	b410      	push	{r4}
 80014a4:	e010      	b.n	80014c8 <parse_options+0x30>
  {
    switch (*optptr)
 80014a6:	2a36      	cmp	r2, #54	; 0x36
 80014a8:	d023      	beq.n	80014f2 <parse_options+0x5a>
 80014aa:	2aff      	cmp	r2, #255	; 0xff
 80014ac:	d02b      	beq.n	8001506 <parse_options+0x6e>
 80014ae:	2a35      	cmp	r2, #53	; 0x35
 80014b0:	d105      	bne.n	80014be <parse_options+0x26>
        break;
      case DHCP_OPTION_DNS_SERVER:
        memcpy(s.dnsaddr, optptr + 2, 4);
        break;
      case DHCP_OPTION_MSG_TYPE:
        type = *(optptr + 2);
 80014b2:	7898      	ldrb	r0, [r3, #2]
        break;
 80014b4:	e003      	b.n	80014be <parse_options+0x26>
        memcpy(s.netmask, optptr + 2, 4);
 80014b6:	f8d3 4002 	ldr.w	r4, [r3, #2]
 80014ba:	4a15      	ldr	r2, [pc, #84]	; (8001510 <parse_options+0x78>)
 80014bc:	6294      	str	r4, [r2, #40]	; 0x28
        break;
      case DHCP_OPTION_END:
        return type;
    }

    optptr += optptr[1] + 2;
 80014be:	785a      	ldrb	r2, [r3, #1]
 80014c0:	3202      	adds	r2, #2
 80014c2:	4413      	add	r3, r2
  while (optptr < end)
 80014c4:	428b      	cmp	r3, r1
 80014c6:	d21e      	bcs.n	8001506 <parse_options+0x6e>
    switch (*optptr)
 80014c8:	781a      	ldrb	r2, [r3, #0]
 80014ca:	2a33      	cmp	r2, #51	; 0x33
 80014cc:	d016      	beq.n	80014fc <parse_options+0x64>
 80014ce:	d8ea      	bhi.n	80014a6 <parse_options+0xe>
 80014d0:	2a03      	cmp	r2, #3
 80014d2:	d004      	beq.n	80014de <parse_options+0x46>
 80014d4:	2a06      	cmp	r2, #6
 80014d6:	d007      	beq.n	80014e8 <parse_options+0x50>
 80014d8:	2a01      	cmp	r2, #1
 80014da:	d1f0      	bne.n	80014be <parse_options+0x26>
 80014dc:	e7eb      	b.n	80014b6 <parse_options+0x1e>
        memcpy(s.default_router, optptr + 2, 4);
 80014de:	f8d3 4002 	ldr.w	r4, [r3, #2]
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <parse_options+0x78>)
 80014e4:	6314      	str	r4, [r2, #48]	; 0x30
        break;
 80014e6:	e7ea      	b.n	80014be <parse_options+0x26>
        memcpy(s.dnsaddr, optptr + 2, 4);
 80014e8:	f8d3 4002 	ldr.w	r4, [r3, #2]
 80014ec:	4a08      	ldr	r2, [pc, #32]	; (8001510 <parse_options+0x78>)
 80014ee:	62d4      	str	r4, [r2, #44]	; 0x2c
        break;
 80014f0:	e7e5      	b.n	80014be <parse_options+0x26>
        memcpy(s.serverid, optptr + 2, 4);
 80014f2:	f8d3 4002 	ldr.w	r4, [r3, #2]
 80014f6:	4a06      	ldr	r2, [pc, #24]	; (8001510 <parse_options+0x78>)
 80014f8:	61d4      	str	r4, [r2, #28]
        break;
 80014fa:	e7e0      	b.n	80014be <parse_options+0x26>
        memcpy(s.lease_time, optptr + 2, 4);
 80014fc:	f8d3 4002 	ldr.w	r4, [r3, #2]
 8001500:	4a03      	ldr	r2, [pc, #12]	; (8001510 <parse_options+0x78>)
 8001502:	6214      	str	r4, [r2, #32]
        break;
 8001504:	e7db      	b.n	80014be <parse_options+0x26>
  }
  return type;
}
 8001506:	f85d 4b04 	ldr.w	r4, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000564 	.word	0x20000564

08001514 <dhcpc_configured>:
/*---------------------------------------------------------------------------*/
void
dhcpc_configured(const struct dhcpc_state *s)
{
  /* set the IP address received from the DHCP server. */
  uip_sethostaddr(&s->ipaddr);
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <dhcpc_configured+0x20>)
 8001516:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 8001518:	801a      	strh	r2, [r3, #0]
 800151a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 800151c:	805a      	strh	r2, [r3, #2]
  /* set the network mask received from the DHCP server. */
  uip_setnetmask(&s->netmask);
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <dhcpc_configured+0x24>)
 8001520:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8001522:	801a      	strh	r2, [r3, #0]
 8001524:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001526:	805a      	strh	r2, [r3, #2]
  /* set the gateway address received from the DHCP server. */
  uip_setdraddr(&s->default_router);
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <dhcpc_configured+0x28>)
 800152a:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 800152c:	801a      	strh	r2, [r3, #0]
 800152e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001530:	805a      	strh	r2, [r3, #2]
}
 8001532:	4770      	bx	lr
 8001534:	200006b8 	.word	0x200006b8
 8001538:	200006b4 	.word	0x200006b4
 800153c:	200006b0 	.word	0x200006b0

08001540 <create_msg>:
{
 8001540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001542:	4604      	mov	r4, r0
  m->op = DHCP_REQUEST;
 8001544:	2301      	movs	r3, #1
 8001546:	7003      	strb	r3, [r0, #0]
  m->htype = DHCP_HTYPE_ETHERNET;
 8001548:	7043      	strb	r3, [r0, #1]
  m->hlen = s.mac_len;
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <create_msg+0x6c>)
 800154c:	699a      	ldr	r2, [r3, #24]
 800154e:	7082      	strb	r2, [r0, #2]
  m->hops = 0;
 8001550:	2500      	movs	r5, #0
 8001552:	70c5      	strb	r5, [r0, #3]
  memcpy(m->xid, xid, sizeof(m->xid));
 8001554:	4a16      	ldr	r2, [pc, #88]	; (80015b0 <create_msg+0x70>)
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	6042      	str	r2, [r0, #4]
  m->secs = 0;
 800155a:	8105      	strh	r5, [r0, #8]
  m->flags = HTONS(BOOTP_BROADCAST); /*  Broadcast bit. */
 800155c:	2780      	movs	r7, #128	; 0x80
 800155e:	8147      	strh	r7, [r0, #10]
  memcpy(m->ciaddr, uip_hostaddr, sizeof(m->ciaddr));
 8001560:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <create_msg+0x74>)
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	60c2      	str	r2, [r0, #12]
  memset(m->yiaddr, 0, sizeof(m->yiaddr));
 8001566:	6105      	str	r5, [r0, #16]
  memset(m->siaddr, 0, sizeof(m->siaddr));
 8001568:	6145      	str	r5, [r0, #20]
  memset(m->giaddr, 0, sizeof(m->giaddr));
 800156a:	6185      	str	r5, [r0, #24]
  memcpy(m->chaddr, s.mac_addr, s.mac_len);
 800156c:	699e      	ldr	r6, [r3, #24]
 800156e:	4632      	mov	r2, r6
 8001570:	6959      	ldr	r1, [r3, #20]
 8001572:	301c      	adds	r0, #28
 8001574:	f003 fd5f 	bl	8005036 <memcpy>
  memset(&m->chaddr[s.mac_len], 0, sizeof(m->chaddr) - s.mac_len);
 8001578:	f106 0018 	add.w	r0, r6, #24
 800157c:	4420      	add	r0, r4
 800157e:	f1c6 0210 	rsb	r2, r6, #16
 8001582:	4629      	mov	r1, r5
 8001584:	3004      	adds	r0, #4
 8001586:	f003 fd61 	bl	800504c <memset>
  memset(m->sname, 0, sizeof(m->sname));
 800158a:	2240      	movs	r2, #64	; 0x40
 800158c:	4629      	mov	r1, r5
 800158e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001592:	f003 fd5b 	bl	800504c <memset>
  memset(m->file, 0, sizeof(m->file));
 8001596:	463a      	mov	r2, r7
 8001598:	4629      	mov	r1, r5
 800159a:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 800159e:	f003 fd55 	bl	800504c <memset>
  memcpy(m->options, magic_cookie, sizeof(magic_cookie));
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <create_msg+0x78>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
 80015aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015ac:	20000564 	.word	0x20000564
 80015b0:	08005170 	.word	0x08005170
 80015b4:	200006b8 	.word	0x200006b8
 80015b8:	0800516c 	.word	0x0800516c

080015bc <send_discover>:
{
 80015bc:	b538      	push	{r3, r4, r5, lr}
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
 80015be:	4c0a      	ldr	r4, [pc, #40]	; (80015e8 <send_discover+0x2c>)
 80015c0:	6825      	ldr	r5, [r4, #0]
  create_msg(m);
 80015c2:	4628      	mov	r0, r5
 80015c4:	f7ff ffbc 	bl	8001540 <create_msg>
  end = add_msg_type(&m->options[4], DHCPDISCOVER);
 80015c8:	2101      	movs	r1, #1
 80015ca:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
 80015ce:	f7ff ff33 	bl	8001438 <add_msg_type>
  end = add_req_options(end);
 80015d2:	f7ff ff51 	bl	8001478 <add_req_options>
  end = add_end(end);
 80015d6:	f7ff ff5a 	bl	800148e <add_end>
  uip_send(uip_appdata, end - (u8_t *)uip_appdata);
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	1ac1      	subs	r1, r0, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f001 f8f4 	bl	80027cc <uip_send>
}
 80015e4:	bd38      	pop	{r3, r4, r5, pc}
 80015e6:	bf00      	nop
 80015e8:	2000063c 	.word	0x2000063c

080015ec <send_request>:
{
 80015ec:	b538      	push	{r3, r4, r5, lr}
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
 80015ee:	4c0b      	ldr	r4, [pc, #44]	; (800161c <send_request+0x30>)
 80015f0:	6825      	ldr	r5, [r4, #0]
  create_msg(m);
 80015f2:	4628      	mov	r0, r5
 80015f4:	f7ff ffa4 	bl	8001540 <create_msg>
  end = add_msg_type(&m->options[4], DHCPREQUEST);
 80015f8:	2103      	movs	r1, #3
 80015fa:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
 80015fe:	f7ff ff1b 	bl	8001438 <add_msg_type>
  end = add_server_id(end);
 8001602:	f7ff ff21 	bl	8001448 <add_server_id>
  end = add_req_ipaddr(end);
 8001606:	f7ff ff2b 	bl	8001460 <add_req_ipaddr>
  end = add_end(end);
 800160a:	f7ff ff40 	bl	800148e <add_end>
  uip_send(uip_appdata, end - (u8_t *)uip_appdata);
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	1ac1      	subs	r1, r0, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f001 f8da 	bl	80027cc <uip_send>
}
 8001618:	bd38      	pop	{r3, r4, r5, pc}
 800161a:	bf00      	nop
 800161c:	2000063c 	.word	0x2000063c

08001620 <parse_msg>:
{
 8001620:	b510      	push	{r4, lr}
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <parse_msg+0x48>)
 8001624:	681c      	ldr	r4, [r3, #0]
  if (m->op == DHCP_REPLY &&
 8001626:	7823      	ldrb	r3, [r4, #0]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d001      	beq.n	8001630 <parse_msg+0x10>
  return 0;
 800162c:	2000      	movs	r0, #0
}
 800162e:	bd10      	pop	{r4, pc}
      memcmp(m->xid, xid, sizeof(xid)) == 0 &&
 8001630:	2204      	movs	r2, #4
 8001632:	490e      	ldr	r1, [pc, #56]	; (800166c <parse_msg+0x4c>)
 8001634:	18a0      	adds	r0, r4, r2
 8001636:	f003 fcef 	bl	8005018 <memcmp>
  if (m->op == DHCP_REPLY &&
 800163a:	b998      	cbnz	r0, 8001664 <parse_msg+0x44>
      memcmp(m->chaddr, s.mac_addr, s.mac_len) == 0)
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <parse_msg+0x50>)
 800163e:	699a      	ldr	r2, [r3, #24]
 8001640:	6959      	ldr	r1, [r3, #20]
 8001642:	f104 001c 	add.w	r0, r4, #28
 8001646:	f003 fce7 	bl	8005018 <memcmp>
      memcmp(m->xid, xid, sizeof(xid)) == 0 &&
 800164a:	b108      	cbz	r0, 8001650 <parse_msg+0x30>
  return 0;
 800164c:	2000      	movs	r0, #0
 800164e:	e7ee      	b.n	800162e <parse_msg+0xe>
    memcpy(s.ipaddr, m->yiaddr, 4);
 8001650:	6922      	ldr	r2, [r4, #16]
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <parse_msg+0x50>)
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
    return parse_options(&m->options[4], uip_datalen());
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <parse_msg+0x54>)
 8001658:	8819      	ldrh	r1, [r3, #0]
 800165a:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
 800165e:	f7ff ff1b 	bl	8001498 <parse_options>
 8001662:	e7e4      	b.n	800162e <parse_msg+0xe>
  return 0;
 8001664:	2000      	movs	r0, #0
 8001666:	e7e2      	b.n	800162e <parse_msg+0xe>
 8001668:	2000063c 	.word	0x2000063c
 800166c:	08005170 	.word	0x08005170
 8001670:	20000564 	.word	0x20000564
 8001674:	20000628 	.word	0x20000628

08001678 <dhcpc_init>:
{
 8001678:	b510      	push	{r4, lr}
 800167a:	b082      	sub	sp, #8
  s.mac_addr = mac_addr;
 800167c:	4c0c      	ldr	r4, [pc, #48]	; (80016b0 <dhcpc_init+0x38>)
 800167e:	6160      	str	r0, [r4, #20]
  s.mac_len  = mac_len;
 8001680:	61a1      	str	r1, [r4, #24]
  s.state = STATE_INITIAL;
 8001682:	2300      	movs	r3, #0
 8001684:	70a3      	strb	r3, [r4, #2]
  uip_ipaddr(addr, 255,255,255,255);
 8001686:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800168a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800168e:	f8ad 3006 	strh.w	r3, [sp, #6]
  s.conn = uip_udp_new(&addr, HTONS(DHCPC_SERVER_PORT));
 8001692:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 8001696:	a801      	add	r0, sp, #4
 8001698:	f001 f848 	bl	800272c <uip_udp_new>
 800169c:	6060      	str	r0, [r4, #4]
  if (s.conn != NULL)
 800169e:	b110      	cbz	r0, 80016a6 <dhcpc_init+0x2e>
    uip_udp_bind(s.conn, HTONS(DHCPC_CLIENT_PORT));
 80016a0:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80016a4:	8083      	strh	r3, [r0, #4]
  PT_INIT(&s.pt);
 80016a6:	4b02      	ldr	r3, [pc, #8]	; (80016b0 <dhcpc_init+0x38>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	801a      	strh	r2, [r3, #0]
}
 80016ac:	b002      	add	sp, #8
 80016ae:	bd10      	pop	{r4, pc}
 80016b0:	20000564 	.word	0x20000564

080016b4 <dhcpc_request>:
  uip_sethostaddr(ipaddr);
 80016b4:	4b02      	ldr	r3, [pc, #8]	; (80016c0 <dhcpc_request+0xc>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	801a      	strh	r2, [r3, #0]
 80016ba:	805a      	strh	r2, [r3, #2]
}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	200006b8 	.word	0x200006b8

080016c4 <handle_dhcp>:
{
 80016c4:	b538      	push	{r3, r4, r5, lr}
  PT_BEGIN(&s.pt);
 80016c6:	4b98      	ldr	r3, [pc, #608]	; (8001928 <handle_dhcp+0x264>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80016ce:	d015      	beq.n	80016fc <handle_dhcp+0x38>
 80016d0:	d859      	bhi.n	8001786 <handle_dhcp+0xc2>
 80016d2:	f240 120f 	movw	r2, #271	; 0x10f
 80016d6:	4293      	cmp	r3, r2
 80016d8:	f000 809a 	beq.w	8001810 <handle_dhcp+0x14c>
 80016dc:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80016e0:	d347      	bcc.n	8001772 <handle_dhcp+0xae>
 80016e2:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80016e6:	f000 8097 	beq.w	8001818 <handle_dhcp+0x154>
 80016ea:	f240 1225 	movw	r2, #293	; 0x125
 80016ee:	4293      	cmp	r3, r2
 80016f0:	f040 8115 	bne.w	800191e <handle_dhcp+0x25a>
    PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));
 80016f4:	4b8c      	ldr	r3, [pc, #560]	; (8001928 <handle_dhcp+0x264>)
 80016f6:	f44f 7293 	mov.w	r2, #294	; 0x126
 80016fa:	801a      	strh	r2, [r3, #0]
 80016fc:	4b8b      	ldr	r3, [pc, #556]	; (800192c <handle_dhcp+0x268>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	f013 0f02 	tst.w	r3, #2
 8001704:	f000 80cb 	beq.w	800189e <handle_dhcp+0x1da>
    if (uip_newdata() && parse_msg() == DHCPACK)
 8001708:	4b88      	ldr	r3, [pc, #544]	; (800192c <handle_dhcp+0x268>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	f013 0f02 	tst.w	r3, #2
 8001710:	f040 80cd 	bne.w	80018ae <handle_dhcp+0x1ea>
    if (s.ticks <= CLOCK_SECOND * 10)
 8001714:	4b84      	ldr	r3, [pc, #528]	; (8001928 <handle_dhcp+0x264>)
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	f242 7210 	movw	r2, #10000	; 0x2710
 800171c:	4293      	cmp	r3, r2
 800171e:	f300 80cf 	bgt.w	80018c0 <handle_dhcp+0x1fc>
      s.ticks += CLOCK_SECOND;
 8001722:	4a81      	ldr	r2, [pc, #516]	; (8001928 <handle_dhcp+0x264>)
 8001724:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001728:	6113      	str	r3, [r2, #16]
  while (s.state != STATE_CONFIG_RECEIVED);
 800172a:	7893      	ldrb	r3, [r2, #2]
 800172c:	2b03      	cmp	r3, #3
 800172e:	f040 80a9 	bne.w	8001884 <handle_dhcp+0x1c0>
  dhcpc_configured(&s);
 8001732:	487d      	ldr	r0, [pc, #500]	; (8001928 <handle_dhcp+0x264>)
 8001734:	f7ff feee 	bl	8001514 <dhcpc_configured>
    lease_renew_time  = ((unsigned long)(ntohs(s.lease_time[0])) << 16u);
 8001738:	4d7b      	ldr	r5, [pc, #492]	; (8001928 <handle_dhcp+0x264>)
 800173a:	8c28      	ldrh	r0, [r5, #32]
 800173c:	f000 f9bc 	bl	8001ab8 <htons>
 8001740:	0404      	lsls	r4, r0, #16
    lease_renew_time |= (ntohs(s.lease_time[1]));
 8001742:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 8001744:	f000 f9b8 	bl	8001ab8 <htons>
 8001748:	4320      	orrs	r0, r4
    lease_renew_time /= 2;
 800174a:	0840      	lsrs	r0, r0, #1
    if ((lease_renew_time * CLOCK_SECOND) <= INT_MAX)
 800174c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001750:	fb04 f000 	mul.w	r0, r4, r0
 8001754:	2800      	cmp	r0, #0
 8001756:	f2c0 80b7 	blt.w	80018c8 <handle_dhcp+0x204>
      s.ticks = lease_renew_time * CLOCK_SECOND;
 800175a:	6128      	str	r0, [r5, #16]
    timer_set(&s.timer, s.ticks);
 800175c:	4c72      	ldr	r4, [pc, #456]	; (8001928 <handle_dhcp+0x264>)
 800175e:	6921      	ldr	r1, [r4, #16]
 8001760:	f104 0008 	add.w	r0, r4, #8
 8001764:	f001 fa14 	bl	8002b90 <timer_set>
    PT_YIELD(&s.pt);
 8001768:	f240 1355 	movw	r3, #341	; 0x155
 800176c:	8023      	strh	r3, [r4, #0]
 800176e:	2003      	movs	r0, #3
 8001770:	e075      	b.n	800185e <handle_dhcp+0x19a>
  PT_BEGIN(&s.pt);
 8001772:	2b00      	cmp	r3, #0
 8001774:	f040 80d3 	bne.w	800191e <handle_dhcp+0x25a>
  s.state = STATE_SENDING;
 8001778:	4b6b      	ldr	r3, [pc, #428]	; (8001928 <handle_dhcp+0x264>)
 800177a:	2201      	movs	r2, #1
 800177c:	709a      	strb	r2, [r3, #2]
  s.ticks = CLOCK_SECOND;
 800177e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001782:	611a      	str	r2, [r3, #16]
 8001784:	e05f      	b.n	8001846 <handle_dhcp+0x182>
  PT_BEGIN(&s.pt);
 8001786:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 800178a:	d03a      	beq.n	8001802 <handle_dhcp+0x13e>
 800178c:	d930      	bls.n	80017f0 <handle_dhcp+0x12c>
 800178e:	f5b3 7fb5 	cmp.w	r3, #362	; 0x16a
 8001792:	f000 80a7 	beq.w	80018e4 <handle_dhcp+0x220>
 8001796:	f240 126b 	movw	r2, #363	; 0x16b
 800179a:	4293      	cmp	r3, r2
 800179c:	f040 80bf 	bne.w	800191e <handle_dhcp+0x25a>
      PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));
 80017a0:	4b62      	ldr	r3, [pc, #392]	; (800192c <handle_dhcp+0x268>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	f013 0f02 	tst.w	r3, #2
 80017a8:	f000 80a1 	beq.w	80018ee <handle_dhcp+0x22a>
      if (uip_newdata() && parse_msg() == DHCPACK)
 80017ac:	4b5f      	ldr	r3, [pc, #380]	; (800192c <handle_dhcp+0x268>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	f013 0f02 	tst.w	r3, #2
 80017b4:	f040 80a3 	bne.w	80018fe <handle_dhcp+0x23a>
      if (s.ticks <= CLOCK_SECOND * 10)
 80017b8:	4b5b      	ldr	r3, [pc, #364]	; (8001928 <handle_dhcp+0x264>)
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80017c0:	4293      	cmp	r3, r2
 80017c2:	f300 80a8 	bgt.w	8001916 <handle_dhcp+0x252>
        s.ticks += CLOCK_SECOND;
 80017c6:	4a58      	ldr	r2, [pc, #352]	; (8001928 <handle_dhcp+0x264>)
 80017c8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80017cc:	6113      	str	r3, [r2, #16]
    while (s.state != STATE_CONFIG_RECEIVED);
 80017ce:	7893      	ldrb	r3, [r2, #2]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	f000 809c 	beq.w	800190e <handle_dhcp+0x24a>
      send_request();
 80017d6:	f7ff ff09 	bl	80015ec <send_request>
      timer_set(&s.timer, s.ticks);
 80017da:	4c53      	ldr	r4, [pc, #332]	; (8001928 <handle_dhcp+0x264>)
 80017dc:	6921      	ldr	r1, [r4, #16]
 80017de:	f104 0008 	add.w	r0, r4, #8
 80017e2:	f001 f9d5 	bl	8002b90 <timer_set>
      PT_YIELD(&s.pt);
 80017e6:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 80017ea:	8023      	strh	r3, [r4, #0]
 80017ec:	2003      	movs	r0, #3
 80017ee:	e036      	b.n	800185e <handle_dhcp+0x19a>
  PT_BEGIN(&s.pt);
 80017f0:	f240 1255 	movw	r2, #341	; 0x155
 80017f4:	4293      	cmp	r3, r2
 80017f6:	f040 8092 	bne.w	800191e <handle_dhcp+0x25a>
    PT_WAIT_UNTIL(&s.pt, timer_expired(&s.timer));
 80017fa:	4b4b      	ldr	r3, [pc, #300]	; (8001928 <handle_dhcp+0x264>)
 80017fc:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8001800:	801a      	strh	r2, [r3, #0]
 8001802:	484b      	ldr	r0, [pc, #300]	; (8001930 <handle_dhcp+0x26c>)
 8001804:	f001 f9cb 	bl	8002b9e <timer_expired>
 8001808:	2800      	cmp	r0, #0
 800180a:	d162      	bne.n	80018d2 <handle_dhcp+0x20e>
 800180c:	2000      	movs	r0, #0
 800180e:	e026      	b.n	800185e <handle_dhcp+0x19a>
    PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));
 8001810:	4b45      	ldr	r3, [pc, #276]	; (8001928 <handle_dhcp+0x264>)
 8001812:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001816:	801a      	strh	r2, [r3, #0]
 8001818:	4b44      	ldr	r3, [pc, #272]	; (800192c <handle_dhcp+0x268>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	f013 0f02 	tst.w	r3, #2
 8001820:	d01e      	beq.n	8001860 <handle_dhcp+0x19c>
    if (uip_newdata() && parse_msg() == DHCPOFFER)
 8001822:	4b42      	ldr	r3, [pc, #264]	; (800192c <handle_dhcp+0x268>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	f013 0f02 	tst.w	r3, #2
 800182a:	d120      	bne.n	800186e <handle_dhcp+0x1aa>
    if (s.ticks < CLOCK_SECOND * 60)
 800182c:	4b3e      	ldr	r3, [pc, #248]	; (8001928 <handle_dhcp+0x264>)
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001834:	4293      	cmp	r3, r2
 8001836:	dc02      	bgt.n	800183e <handle_dhcp+0x17a>
      s.ticks *= 2;
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4a3b      	ldr	r2, [pc, #236]	; (8001928 <handle_dhcp+0x264>)
 800183c:	6113      	str	r3, [r2, #16]
  while (s.state != STATE_OFFER_RECEIVED);
 800183e:	4b3a      	ldr	r3, [pc, #232]	; (8001928 <handle_dhcp+0x264>)
 8001840:	789b      	ldrb	r3, [r3, #2]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d01a      	beq.n	800187c <handle_dhcp+0x1b8>
    send_discover();
 8001846:	f7ff feb9 	bl	80015bc <send_discover>
    timer_set(&s.timer, s.ticks);
 800184a:	4c37      	ldr	r4, [pc, #220]	; (8001928 <handle_dhcp+0x264>)
 800184c:	6921      	ldr	r1, [r4, #16]
 800184e:	f104 0008 	add.w	r0, r4, #8
 8001852:	f001 f99d 	bl	8002b90 <timer_set>
    PT_YIELD(&s.pt);
 8001856:	f240 130f 	movw	r3, #271	; 0x10f
 800185a:	8023      	strh	r3, [r4, #0]
 800185c:	2003      	movs	r0, #3
}
 800185e:	bd38      	pop	{r3, r4, r5, pc}
    PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));
 8001860:	4833      	ldr	r0, [pc, #204]	; (8001930 <handle_dhcp+0x26c>)
 8001862:	f001 f99c 	bl	8002b9e <timer_expired>
 8001866:	2800      	cmp	r0, #0
 8001868:	d1db      	bne.n	8001822 <handle_dhcp+0x15e>
 800186a:	2000      	movs	r0, #0
 800186c:	e7f7      	b.n	800185e <handle_dhcp+0x19a>
    if (uip_newdata() && parse_msg() == DHCPOFFER)
 800186e:	f7ff fed7 	bl	8001620 <parse_msg>
 8001872:	2802      	cmp	r0, #2
 8001874:	d1da      	bne.n	800182c <handle_dhcp+0x168>
      s.state = STATE_OFFER_RECEIVED;
 8001876:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <handle_dhcp+0x264>)
 8001878:	2202      	movs	r2, #2
 800187a:	709a      	strb	r2, [r3, #2]
  s.ticks = CLOCK_SECOND;
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <handle_dhcp+0x264>)
 800187e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001882:	611a      	str	r2, [r3, #16]
    send_request();
 8001884:	f7ff feb2 	bl	80015ec <send_request>
    timer_set(&s.timer, s.ticks);
 8001888:	4c27      	ldr	r4, [pc, #156]	; (8001928 <handle_dhcp+0x264>)
 800188a:	6921      	ldr	r1, [r4, #16]
 800188c:	f104 0008 	add.w	r0, r4, #8
 8001890:	f001 f97e 	bl	8002b90 <timer_set>
    PT_YIELD(&s.pt);
 8001894:	f240 1325 	movw	r3, #293	; 0x125
 8001898:	8023      	strh	r3, [r4, #0]
 800189a:	2003      	movs	r0, #3
 800189c:	e7df      	b.n	800185e <handle_dhcp+0x19a>
    PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));
 800189e:	4824      	ldr	r0, [pc, #144]	; (8001930 <handle_dhcp+0x26c>)
 80018a0:	f001 f97d 	bl	8002b9e <timer_expired>
 80018a4:	2800      	cmp	r0, #0
 80018a6:	f47f af2f 	bne.w	8001708 <handle_dhcp+0x44>
 80018aa:	2000      	movs	r0, #0
 80018ac:	e7d7      	b.n	800185e <handle_dhcp+0x19a>
    if (uip_newdata() && parse_msg() == DHCPACK)
 80018ae:	f7ff feb7 	bl	8001620 <parse_msg>
 80018b2:	2805      	cmp	r0, #5
 80018b4:	f47f af2e 	bne.w	8001714 <handle_dhcp+0x50>
      s.state = STATE_CONFIG_RECEIVED;
 80018b8:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <handle_dhcp+0x264>)
 80018ba:	2203      	movs	r2, #3
 80018bc:	709a      	strb	r2, [r3, #2]
      break;
 80018be:	e738      	b.n	8001732 <handle_dhcp+0x6e>
      PT_RESTART(&s.pt);
 80018c0:	2000      	movs	r0, #0
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <handle_dhcp+0x264>)
 80018c4:	8018      	strh	r0, [r3, #0]
 80018c6:	e7ca      	b.n	800185e <handle_dhcp+0x19a>
      s.ticks = INT_MAX;
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <handle_dhcp+0x264>)
 80018ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80018ce:	611a      	str	r2, [r3, #16]
 80018d0:	e744      	b.n	800175c <handle_dhcp+0x98>
    s.state = STATE_OFFER_RECEIVED;
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <handle_dhcp+0x264>)
 80018d4:	2202      	movs	r2, #2
 80018d6:	709a      	strb	r2, [r3, #2]
    s.ticks = CLOCK_SECOND;
 80018d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018dc:	611a      	str	r2, [r3, #16]
    dhcpc_request();
 80018de:	f7ff fee9 	bl	80016b4 <dhcpc_request>
 80018e2:	e778      	b.n	80017d6 <handle_dhcp+0x112>
      PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <handle_dhcp+0x264>)
 80018e6:	f240 126b 	movw	r2, #363	; 0x16b
 80018ea:	801a      	strh	r2, [r3, #0]
 80018ec:	e758      	b.n	80017a0 <handle_dhcp+0xdc>
 80018ee:	4810      	ldr	r0, [pc, #64]	; (8001930 <handle_dhcp+0x26c>)
 80018f0:	f001 f955 	bl	8002b9e <timer_expired>
 80018f4:	2800      	cmp	r0, #0
 80018f6:	f47f af59 	bne.w	80017ac <handle_dhcp+0xe8>
 80018fa:	2000      	movs	r0, #0
 80018fc:	e7af      	b.n	800185e <handle_dhcp+0x19a>
      if (uip_newdata() && parse_msg() == DHCPACK)
 80018fe:	f7ff fe8f 	bl	8001620 <parse_msg>
 8001902:	2805      	cmp	r0, #5
 8001904:	f47f af58 	bne.w	80017b8 <handle_dhcp+0xf4>
        s.state = STATE_CONFIG_RECEIVED;
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <handle_dhcp+0x264>)
 800190a:	2203      	movs	r2, #3
 800190c:	709a      	strb	r2, [r3, #2]
    dhcpc_configured(&s);
 800190e:	4806      	ldr	r0, [pc, #24]	; (8001928 <handle_dhcp+0x264>)
 8001910:	f7ff fe00 	bl	8001514 <dhcpc_configured>
    lease_renew_time  = ((unsigned long)(ntohs(s.lease_time[0])) << 16u);
 8001914:	e710      	b.n	8001738 <handle_dhcp+0x74>
        PT_RESTART(&s.pt);
 8001916:	2000      	movs	r0, #0
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <handle_dhcp+0x264>)
 800191a:	8018      	strh	r0, [r3, #0]
 800191c:	e79f      	b.n	800185e <handle_dhcp+0x19a>
  PT_END(&s.pt);
 800191e:	4b02      	ldr	r3, [pc, #8]	; (8001928 <handle_dhcp+0x264>)
 8001920:	2200      	movs	r2, #0
 8001922:	801a      	strh	r2, [r3, #0]
 8001924:	2002      	movs	r0, #2
 8001926:	e79a      	b.n	800185e <handle_dhcp+0x19a>
 8001928:	20000564 	.word	0x20000564
 800192c:	20000634 	.word	0x20000634
 8001930:	2000056c 	.word	0x2000056c

08001934 <dhcpc_appcall>:
{
 8001934:	b508      	push	{r3, lr}
  handle_dhcp();
 8001936:	f7ff fec5 	bl	80016c4 <handle_dhcp>
}
 800193a:	bd08      	pop	{r3, pc}

0800193c <chksum>:

#if ! UIP_ARCH_CHKSUM
/*---------------------------------------------------------------------------*/
static u16_t
chksum(u16_t sum, const u8_t *data, u16_t len)
{
 800193c:	b410      	push	{r4}
  u16_t t;
  const u8_t *dataptr;
  const u8_t *last_byte;

  dataptr = data;
  last_byte = data + len - 1;
 800193e:	3a01      	subs	r2, #1
 8001940:	440a      	add	r2, r1

  while (dataptr < last_byte)  	/* At least two more bytes */
 8001942:	e000      	b.n	8001946 <chksum+0xa>
    sum += t;
    if (sum < t)
    {
      sum++;		/* carry */
    }
    dataptr += 2;
 8001944:	3102      	adds	r1, #2
  while (dataptr < last_byte)  	/* At least two more bytes */
 8001946:	4291      	cmp	r1, r2
 8001948:	d20b      	bcs.n	8001962 <chksum+0x26>
    t = (dataptr[0] << 8) + dataptr[1];
 800194a:	780c      	ldrb	r4, [r1, #0]
 800194c:	784b      	ldrb	r3, [r1, #1]
 800194e:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8001952:	b29b      	uxth	r3, r3
    sum += t;
 8001954:	4418      	add	r0, r3
 8001956:	b280      	uxth	r0, r0
    if (sum < t)
 8001958:	4283      	cmp	r3, r0
 800195a:	d9f3      	bls.n	8001944 <chksum+0x8>
      sum++;		/* carry */
 800195c:	3001      	adds	r0, #1
 800195e:	b280      	uxth	r0, r0
 8001960:	e7f0      	b.n	8001944 <chksum+0x8>
  }

  if (dataptr == last_byte)
 8001962:	d002      	beq.n	800196a <chksum+0x2e>
    }
  }

  /* Return sum in host byte order. */
  return sum;
}
 8001964:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001968:	4770      	bx	lr
    t = (dataptr[0] << 8) + 0;
 800196a:	780b      	ldrb	r3, [r1, #0]
 800196c:	021b      	lsls	r3, r3, #8
    sum += t;
 800196e:	4418      	add	r0, r3
 8001970:	b280      	uxth	r0, r0
    if (sum < t)
 8001972:	4283      	cmp	r3, r0
 8001974:	d9f6      	bls.n	8001964 <chksum+0x28>
      sum++;		/* carry */
 8001976:	3001      	adds	r0, #1
 8001978:	b280      	uxth	r0, r0
 800197a:	e7f3      	b.n	8001964 <chksum+0x28>

0800197c <uip_add32>:
{
 800197c:	b470      	push	{r4, r5, r6}
  uip_acc32[3] = op32[3] + (op16 & 0xff);
 800197e:	78c5      	ldrb	r5, [r0, #3]
 8001980:	440d      	add	r5, r1
 8001982:	b2ed      	uxtb	r5, r5
 8001984:	4c13      	ldr	r4, [pc, #76]	; (80019d4 <uip_add32+0x58>)
 8001986:	70e5      	strb	r5, [r4, #3]
  uip_acc32[2] = op32[2] + (op16 >> 8);
 8001988:	7883      	ldrb	r3, [r0, #2]
 800198a:	0a0e      	lsrs	r6, r1, #8
 800198c:	4433      	add	r3, r6
 800198e:	b2db      	uxtb	r3, r3
 8001990:	70a3      	strb	r3, [r4, #2]
  uip_acc32[1] = op32[1];
 8001992:	7842      	ldrb	r2, [r0, #1]
 8001994:	7062      	strb	r2, [r4, #1]
  uip_acc32[0] = op32[0];
 8001996:	7800      	ldrb	r0, [r0, #0]
 8001998:	7020      	strb	r0, [r4, #0]
  if (uip_acc32[2] < (op16 >> 8))
 800199a:	b29c      	uxth	r4, r3
 800199c:	42a6      	cmp	r6, r4
 800199e:	d906      	bls.n	80019ae <uip_add32+0x32>
    ++uip_acc32[1];
 80019a0:	3201      	adds	r2, #1
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	4c0b      	ldr	r4, [pc, #44]	; (80019d4 <uip_add32+0x58>)
 80019a6:	7062      	strb	r2, [r4, #1]
    if (uip_acc32[1] == 0)
 80019a8:	b90a      	cbnz	r2, 80019ae <uip_add32+0x32>
      ++uip_acc32[0];
 80019aa:	3001      	adds	r0, #1
 80019ac:	7020      	strb	r0, [r4, #0]
  if (uip_acc32[3] < (op16 & 0xff))
 80019ae:	b2c9      	uxtb	r1, r1
 80019b0:	428d      	cmp	r5, r1
 80019b2:	da0c      	bge.n	80019ce <uip_add32+0x52>
    ++uip_acc32[2];
 80019b4:	3301      	adds	r3, #1
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	4a06      	ldr	r2, [pc, #24]	; (80019d4 <uip_add32+0x58>)
 80019ba:	7093      	strb	r3, [r2, #2]
    if (uip_acc32[2] == 0)
 80019bc:	b93b      	cbnz	r3, 80019ce <uip_add32+0x52>
      ++uip_acc32[1];
 80019be:	7853      	ldrb	r3, [r2, #1]
 80019c0:	3301      	adds	r3, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	7053      	strb	r3, [r2, #1]
      if (uip_acc32[1] == 0)
 80019c6:	b913      	cbnz	r3, 80019ce <uip_add32+0x52>
        ++uip_acc32[0];
 80019c8:	7813      	ldrb	r3, [r2, #0]
 80019ca:	3301      	adds	r3, #1
 80019cc:	7013      	strb	r3, [r2, #0]
}
 80019ce:	bc70      	pop	{r4, r5, r6}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000630 	.word	0x20000630

080019d8 <uip_add_rcv_nxt>:
#endif /* UIP_REASSEMBLY */
/*---------------------------------------------------------------------------*/
#if UIP_TCP
static void
uip_add_rcv_nxt(u16_t n)
{
 80019d8:	b510      	push	{r4, lr}
  uip_add32(uip_conn->rcv_nxt, n);
 80019da:	4c09      	ldr	r4, [pc, #36]	; (8001a00 <uip_add_rcv_nxt+0x28>)
 80019dc:	6823      	ldr	r3, [r4, #0]
 80019de:	4601      	mov	r1, r0
 80019e0:	f103 0008 	add.w	r0, r3, #8
 80019e4:	f7ff ffca 	bl	800197c <uip_add32>
  uip_conn->rcv_nxt[0] = uip_acc32[0];
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	4a06      	ldr	r2, [pc, #24]	; (8001a04 <uip_add_rcv_nxt+0x2c>)
 80019ec:	7811      	ldrb	r1, [r2, #0]
 80019ee:	7219      	strb	r1, [r3, #8]
  uip_conn->rcv_nxt[1] = uip_acc32[1];
 80019f0:	7851      	ldrb	r1, [r2, #1]
 80019f2:	7259      	strb	r1, [r3, #9]
  uip_conn->rcv_nxt[2] = uip_acc32[2];
 80019f4:	7891      	ldrb	r1, [r2, #2]
 80019f6:	7299      	strb	r1, [r3, #10]
  uip_conn->rcv_nxt[3] = uip_acc32[3];
 80019f8:	78d2      	ldrb	r2, [r2, #3]
 80019fa:	72da      	strb	r2, [r3, #11]
}
 80019fc:	bd10      	pop	{r4, pc}
 80019fe:	bf00      	nop
 8001a00:	20000640 	.word	0x20000640
 8001a04:	20000630 	.word	0x20000630

08001a08 <uip_init>:
  for (c = 0; c < UIP_LISTENPORTS; ++c)
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <uip_init+0x6c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
 8001a0e:	e006      	b.n	8001a1e <uip_init+0x16>
    uip_listenports[c] = 0;
 8001a10:	4a19      	ldr	r2, [pc, #100]	; (8001a78 <uip_init+0x70>)
 8001a12:	2100      	movs	r1, #0
 8001a14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (c = 0; c < UIP_LISTENPORTS; ++c)
 8001a18:	3301      	adds	r3, #1
 8001a1a:	4a16      	ldr	r2, [pc, #88]	; (8001a74 <uip_init+0x6c>)
 8001a1c:	7013      	strb	r3, [r2, #0]
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <uip_init+0x6c>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f4      	beq.n	8001a10 <uip_init+0x8>
  for (c = 0; c < UIP_CONNS; ++c)
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <uip_init+0x6c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
 8001a2c:	e008      	b.n	8001a40 <uip_init+0x38>
    uip_conns[c].tcpstateflags = UIP_CLOSED;
 8001a2e:	4913      	ldr	r1, [pc, #76]	; (8001a7c <uip_init+0x74>)
 8001a30:	2268      	movs	r2, #104	; 0x68
 8001a32:	fb02 1203 	mla	r2, r2, r3, r1
 8001a36:	2100      	movs	r1, #0
 8001a38:	7651      	strb	r1, [r2, #25]
  for (c = 0; c < UIP_CONNS; ++c)
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <uip_init+0x6c>)
 8001a3e:	7013      	strb	r3, [r2, #0]
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <uip_init+0x6c>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f2      	beq.n	8001a2e <uip_init+0x26>
  lastport = 1024;
 8001a48:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <uip_init+0x78>)
 8001a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a4e:	801a      	strh	r2, [r3, #0]
  for (c = 0; c < UIP_UDP_CONNS; ++c)
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <uip_init+0x6c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
 8001a56:	e007      	b.n	8001a68 <uip_init+0x60>
    uip_udp_conns[c].lport = 0;
 8001a58:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <uip_init+0x7c>)
 8001a5a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
 8001a5e:	2100      	movs	r1, #0
 8001a60:	8091      	strh	r1, [r2, #4]
  for (c = 0; c < UIP_UDP_CONNS; ++c)
 8001a62:	3301      	adds	r3, #1
 8001a64:	4a03      	ldr	r2, [pc, #12]	; (8001a74 <uip_init+0x6c>)
 8001a66:	7013      	strb	r3, [r2, #0]
 8001a68:	4b02      	ldr	r3, [pc, #8]	; (8001a74 <uip_init+0x6c>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f3      	beq.n	8001a58 <uip_init+0x50>
}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000598 	.word	0x20000598
 8001a78:	200006ac 	.word	0x200006ac
 8001a7c:	20000644 	.word	0x20000644
 8001a80:	200005a0 	.word	0x200005a0
 8001a84:	20000d00 	.word	0x20000d00

08001a88 <uip_listen>:
  for (c = 0; c < UIP_LISTENPORTS; ++c)
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <uip_listen+0x28>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <uip_listen+0x28>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	b963      	cbnz	r3, 8001aae <uip_listen+0x26>
    if (uip_listenports[c] == 0)
 8001a94:	4619      	mov	r1, r3
 8001a96:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <uip_listen+0x2c>)
 8001a98:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a9c:	b11a      	cbz	r2, 8001aa6 <uip_listen+0x1e>
  for (c = 0; c < UIP_LISTENPORTS; ++c)
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	4a03      	ldr	r2, [pc, #12]	; (8001ab0 <uip_listen+0x28>)
 8001aa2:	7013      	strb	r3, [r2, #0]
 8001aa4:	e7f3      	b.n	8001a8e <uip_listen+0x6>
      uip_listenports[c] = port;
 8001aa6:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <uip_listen+0x2c>)
 8001aa8:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
      return;
 8001aac:	4770      	bx	lr
}
 8001aae:	4770      	bx	lr
 8001ab0:	20000598 	.word	0x20000598
 8001ab4:	200006ac 	.word	0x200006ac

08001ab8 <htons>:
}
/*---------------------------------------------------------------------------*/
u16_t
htons(u16_t val)
{
  return HTONS(val);
 8001ab8:	0a03      	lsrs	r3, r0, #8
 8001aba:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 8001abe:	b280      	uxth	r0, r0
 8001ac0:	4770      	bx	lr
	...

08001ac4 <uip_ipchksum>:
{
 8001ac4:	b508      	push	{r3, lr}
  sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
 8001ac6:	2214      	movs	r2, #20
 8001ac8:	4905      	ldr	r1, [pc, #20]	; (8001ae0 <uip_ipchksum+0x1c>)
 8001aca:	2000      	movs	r0, #0
 8001acc:	f7ff ff36 	bl	800193c <chksum>
  return (sum == 0) ? 0xffff : htons(sum);
 8001ad0:	b110      	cbz	r0, 8001ad8 <uip_ipchksum+0x14>
 8001ad2:	f7ff fff1 	bl	8001ab8 <htons>
}
 8001ad6:	bd08      	pop	{r3, pc}
  return (sum == 0) ? 0xffff : htons(sum);
 8001ad8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001adc:	e7fb      	b.n	8001ad6 <uip_ipchksum+0x12>
 8001ade:	bf00      	nop
 8001ae0:	200006ca 	.word	0x200006ca

08001ae4 <upper_layer_chksum>:
{
 8001ae4:	b538      	push	{r3, r4, r5, lr}
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
 8001ae6:	4d0d      	ldr	r5, [pc, #52]	; (8001b1c <upper_layer_chksum+0x38>)
 8001ae8:	7c2b      	ldrb	r3, [r5, #16]
 8001aea:	7c6c      	ldrb	r4, [r5, #17]
 8001aec:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 8001af0:	b2a4      	uxth	r4, r4
 8001af2:	3c14      	subs	r4, #20
 8001af4:	b2a4      	uxth	r4, r4
  sum = upper_layer_len + proto;
 8001af6:	4420      	add	r0, r4
  sum = chksum(sum, (u8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
 8001af8:	2208      	movs	r2, #8
 8001afa:	f105 011a 	add.w	r1, r5, #26
 8001afe:	b280      	uxth	r0, r0
 8001b00:	f7ff ff1c 	bl	800193c <chksum>
  sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN],
 8001b04:	4622      	mov	r2, r4
 8001b06:	f105 0122 	add.w	r1, r5, #34	; 0x22
 8001b0a:	f7ff ff17 	bl	800193c <chksum>
  return (sum == 0) ? 0xffff : htons(sum);
 8001b0e:	b110      	cbz	r0, 8001b16 <upper_layer_chksum+0x32>
 8001b10:	f7ff ffd2 	bl	8001ab8 <htons>
}
 8001b14:	bd38      	pop	{r3, r4, r5, pc}
  return (sum == 0) ? 0xffff : htons(sum);
 8001b16:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b1a:	e7fb      	b.n	8001b14 <upper_layer_chksum+0x30>
 8001b1c:	200006bc 	.word	0x200006bc

08001b20 <uip_tcpchksum>:
{
 8001b20:	b508      	push	{r3, lr}
  return upper_layer_chksum(UIP_PROTO_TCP);
 8001b22:	2006      	movs	r0, #6
 8001b24:	f7ff ffde 	bl	8001ae4 <upper_layer_chksum>
}
 8001b28:	bd08      	pop	{r3, pc}
	...

08001b2c <uip_process>:
{
 8001b2c:	b570      	push	{r4, r5, r6, lr}
  register struct uip_conn *uip_connr = uip_conn;
 8001b2e:	4bb2      	ldr	r3, [pc, #712]	; (8001df8 <uip_process+0x2cc>)
 8001b30:	681c      	ldr	r4, [r3, #0]
  if (flag == UIP_UDP_SEND_CONN)
 8001b32:	2804      	cmp	r0, #4
 8001b34:	f000 8196 	beq.w	8001e64 <uip_process+0x338>
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
 8001b38:	4bb0      	ldr	r3, [pc, #704]	; (8001dfc <uip_process+0x2d0>)
 8001b3a:	4ab1      	ldr	r2, [pc, #708]	; (8001e00 <uip_process+0x2d4>)
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4ab1      	ldr	r2, [pc, #708]	; (8001e04 <uip_process+0x2d8>)
 8001b40:	6013      	str	r3, [r2, #0]
  if (flag == UIP_POLL_REQUEST)
 8001b42:	2803      	cmp	r0, #3
 8001b44:	d059      	beq.n	8001bfa <uip_process+0xce>
  else if (flag == UIP_TIMER)
 8001b46:	2802      	cmp	r0, #2
 8001b48:	f000 80c8 	beq.w	8001cdc <uip_process+0x1b0>
  if (flag == UIP_UDP_TIMER)
 8001b4c:	2805      	cmp	r0, #5
 8001b4e:	f000 8172 	beq.w	8001e36 <uip_process+0x30a>
  if (BUF->vhl != 0x45)   /* IP version and header length. */
 8001b52:	4bad      	ldr	r3, [pc, #692]	; (8001e08 <uip_process+0x2dc>)
 8001b54:	7b9b      	ldrb	r3, [r3, #14]
 8001b56:	2b45      	cmp	r3, #69	; 0x45
 8001b58:	d154      	bne.n	8001c04 <uip_process+0xd8>
  if ((BUF->len[0] << 8) + BUF->len[1] <= uip_len)
 8001b5a:	4aab      	ldr	r2, [pc, #684]	; (8001e08 <uip_process+0x2dc>)
 8001b5c:	7c15      	ldrb	r5, [r2, #16]
 8001b5e:	7c53      	ldrb	r3, [r2, #17]
 8001b60:	eb03 2105 	add.w	r1, r3, r5, lsl #8
 8001b64:	4aa9      	ldr	r2, [pc, #676]	; (8001e0c <uip_process+0x2e0>)
 8001b66:	8812      	ldrh	r2, [r2, #0]
 8001b68:	4291      	cmp	r1, r2
 8001b6a:	dc4b      	bgt.n	8001c04 <uip_process+0xd8>
    uip_len = (BUF->len[0] << 8) + BUF->len[1];
 8001b6c:	b28d      	uxth	r5, r1
 8001b6e:	4ba7      	ldr	r3, [pc, #668]	; (8001e0c <uip_process+0x2e0>)
 8001b70:	801d      	strh	r5, [r3, #0]
  if ((BUF->ipoffset[0] & 0x3f) != 0 ||
 8001b72:	4ba5      	ldr	r3, [pc, #660]	; (8001e08 <uip_process+0x2dc>)
 8001b74:	7d1b      	ldrb	r3, [r3, #20]
 8001b76:	f013 0f3f 	tst.w	r3, #63	; 0x3f
 8001b7a:	d143      	bne.n	8001c04 <uip_process+0xd8>
      BUF->ipoffset[1] != 0)
 8001b7c:	4ba2      	ldr	r3, [pc, #648]	; (8001e08 <uip_process+0x2dc>)
 8001b7e:	7d5b      	ldrb	r3, [r3, #21]
  if ((BUF->ipoffset[0] & 0x3f) != 0 ||
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d13f      	bne.n	8001c04 <uip_process+0xd8>
  if (uip_ipaddr_cmp(uip_hostaddr, all_zeroes_addr))
 8001b84:	4ba2      	ldr	r3, [pc, #648]	; (8001e10 <uip_process+0x2e4>)
 8001b86:	881c      	ldrh	r4, [r3, #0]
 8001b88:	b90c      	cbnz	r4, 8001b8e <uip_process+0x62>
 8001b8a:	885b      	ldrh	r3, [r3, #2]
 8001b8c:	b14b      	cbz	r3, 8001ba2 <uip_process+0x76>
    if (!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr))
 8001b8e:	4b9e      	ldr	r3, [pc, #632]	; (8001e08 <uip_process+0x2dc>)
 8001b90:	8bdb      	ldrh	r3, [r3, #30]
 8001b92:	429c      	cmp	r4, r3
 8001b94:	d136      	bne.n	8001c04 <uip_process+0xd8>
 8001b96:	4b9c      	ldr	r3, [pc, #624]	; (8001e08 <uip_process+0x2dc>)
 8001b98:	8c1a      	ldrh	r2, [r3, #32]
 8001b9a:	4b9d      	ldr	r3, [pc, #628]	; (8001e10 <uip_process+0x2e4>)
 8001b9c:	885b      	ldrh	r3, [r3, #2]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d130      	bne.n	8001c04 <uip_process+0xd8>
  if (uip_ipchksum() != 0xffff)
 8001ba2:	f7ff ff8f 	bl	8001ac4 <uip_ipchksum>
 8001ba6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001baa:	4298      	cmp	r0, r3
 8001bac:	d12a      	bne.n	8001c04 <uip_process+0xd8>
  if (BUF->proto == UIP_PROTO_TCP)
 8001bae:	4b96      	ldr	r3, [pc, #600]	; (8001e08 <uip_process+0x2dc>)
 8001bb0:	7ddb      	ldrb	r3, [r3, #23]
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	f000 81e9 	beq.w	8001f8a <uip_process+0x45e>
  if (BUF->proto == UIP_PROTO_UDP)
 8001bb8:	2b11      	cmp	r3, #17
 8001bba:	f000 819f 	beq.w	8001efc <uip_process+0x3d0>
  if (BUF->proto != UIP_PROTO_ICMP)
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d120      	bne.n	8001c04 <uip_process+0xd8>
  if (ICMPBUF->type != ICMP_ECHO)
 8001bc2:	4b91      	ldr	r3, [pc, #580]	; (8001e08 <uip_process+0x2dc>)
 8001bc4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d11b      	bne.n	8001c04 <uip_process+0xd8>
  ICMPBUF->type = ICMP_ECHO_REPLY;
 8001bcc:	4b8e      	ldr	r3, [pc, #568]	; (8001e08 <uip_process+0x2dc>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  if (ICMPBUF->icmpchksum >= HTONS(0xffff - (ICMP_ECHO << 8)))
 8001bd4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001bd6:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	f240 818a 	bls.w	8001ef4 <uip_process+0x3c8>
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8) + 1;
 8001be0:	3309      	adds	r3, #9
 8001be2:	4a89      	ldr	r2, [pc, #548]	; (8001e08 <uip_process+0x2dc>)
 8001be4:	8493      	strh	r3, [r2, #36]	; 0x24
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
 8001be6:	4b88      	ldr	r3, [pc, #544]	; (8001e08 <uip_process+0x2dc>)
 8001be8:	8b5a      	ldrh	r2, [r3, #26]
 8001bea:	83da      	strh	r2, [r3, #30]
 8001bec:	8b9a      	ldrh	r2, [r3, #28]
 8001bee:	841a      	strh	r2, [r3, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 8001bf0:	835c      	strh	r4, [r3, #26]
 8001bf2:	4a87      	ldr	r2, [pc, #540]	; (8001e10 <uip_process+0x2e4>)
 8001bf4:	8852      	ldrh	r2, [r2, #2]
 8001bf6:	839a      	strh	r2, [r3, #28]
  goto send;
 8001bf8:	e178      	b.n	8001eec <uip_process+0x3c0>
    if ((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
 8001bfa:	7e63      	ldrb	r3, [r4, #25]
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d005      	beq.n	8001c10 <uip_process+0xe4>
  uip_len = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	4a81      	ldr	r2, [pc, #516]	; (8001e0c <uip_process+0x2e0>)
 8001c08:	8013      	strh	r3, [r2, #0]
  uip_flags = 0;
 8001c0a:	4a82      	ldr	r2, [pc, #520]	; (8001e14 <uip_process+0x2e8>)
 8001c0c:	7013      	strb	r3, [r2, #0]
}
 8001c0e:	bd70      	pop	{r4, r5, r6, pc}
        !uip_outstanding(uip_connr))
 8001c10:	8a23      	ldrh	r3, [r4, #16]
    if ((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f6      	bne.n	8001c04 <uip_process+0xd8>
      uip_flags = UIP_POLL;
 8001c16:	4b7f      	ldr	r3, [pc, #508]	; (8001e14 <uip_process+0x2e8>)
 8001c18:	2208      	movs	r2, #8
 8001c1a:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
 8001c1c:	f7ff f9b4 	bl	8000f88 <NetApp>
        if (uip_flags & UIP_ABORT)
 8001c20:	4b7c      	ldr	r3, [pc, #496]	; (8001e14 <uip_process+0x2e8>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	f013 0f20 	tst.w	r3, #32
 8001c28:	f000 84a4 	beq.w	8002574 <uip_process+0xa48>
          uip_slen = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	4a7a      	ldr	r2, [pc, #488]	; (8001e18 <uip_process+0x2ec>)
 8001c30:	8013      	strh	r3, [r2, #0]
          uip_connr->tcpstateflags = UIP_CLOSED;
 8001c32:	7663      	strb	r3, [r4, #25]
          BUF->flags = TCP_RST | TCP_ACK;
 8001c34:	4b74      	ldr	r3, [pc, #464]	; (8001e08 <uip_process+0x2dc>)
 8001c36:	2214      	movs	r2, #20
 8001c38:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  uip_len = UIP_IPTCPH_LEN;
 8001c3c:	4b73      	ldr	r3, [pc, #460]	; (8001e0c <uip_process+0x2e0>)
 8001c3e:	2228      	movs	r2, #40	; 0x28
 8001c40:	801a      	strh	r2, [r3, #0]
  BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
 8001c42:	4b71      	ldr	r3, [pc, #452]	; (8001e08 <uip_process+0x2dc>)
 8001c44:	2250      	movs	r2, #80	; 0x50
 8001c46:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  BUF->ackno[0] = uip_connr->rcv_nxt[0];
 8001c4a:	7a22      	ldrb	r2, [r4, #8]
 8001c4c:	4b6e      	ldr	r3, [pc, #440]	; (8001e08 <uip_process+0x2dc>)
 8001c4e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  BUF->ackno[1] = uip_connr->rcv_nxt[1];
 8001c52:	7a62      	ldrb	r2, [r4, #9]
 8001c54:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  BUF->ackno[2] = uip_connr->rcv_nxt[2];
 8001c58:	7aa2      	ldrb	r2, [r4, #10]
 8001c5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  BUF->ackno[3] = uip_connr->rcv_nxt[3];
 8001c5e:	7ae2      	ldrb	r2, [r4, #11]
 8001c60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  BUF->seqno[0] = uip_connr->snd_nxt[0];
 8001c64:	7b22      	ldrb	r2, [r4, #12]
 8001c66:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  BUF->seqno[1] = uip_connr->snd_nxt[1];
 8001c6a:	7b62      	ldrb	r2, [r4, #13]
 8001c6c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  BUF->seqno[2] = uip_connr->snd_nxt[2];
 8001c70:	7ba2      	ldrb	r2, [r4, #14]
 8001c72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  BUF->seqno[3] = uip_connr->snd_nxt[3];
 8001c76:	7be2      	ldrb	r2, [r4, #15]
 8001c78:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BUF->proto = UIP_PROTO_TCP;
 8001c7c:	2206      	movs	r2, #6
 8001c7e:	75da      	strb	r2, [r3, #23]
  BUF->srcport  = uip_connr->lport;
 8001c80:	88a2      	ldrh	r2, [r4, #4]
 8001c82:	845a      	strh	r2, [r3, #34]	; 0x22
  BUF->destport = uip_connr->rport;
 8001c84:	88e2      	ldrh	r2, [r4, #6]
 8001c86:	849a      	strh	r2, [r3, #36]	; 0x24
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 8001c88:	4a61      	ldr	r2, [pc, #388]	; (8001e10 <uip_process+0x2e4>)
 8001c8a:	8811      	ldrh	r1, [r2, #0]
 8001c8c:	8359      	strh	r1, [r3, #26]
 8001c8e:	8852      	ldrh	r2, [r2, #2]
 8001c90:	839a      	strh	r2, [r3, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_connr->ripaddr);
 8001c92:	8822      	ldrh	r2, [r4, #0]
 8001c94:	83da      	strh	r2, [r3, #30]
 8001c96:	8862      	ldrh	r2, [r4, #2]
 8001c98:	841a      	strh	r2, [r3, #32]
  if (uip_connr->tcpstateflags & UIP_STOPPED)
 8001c9a:	7e63      	ldrb	r3, [r4, #25]
 8001c9c:	f013 0f10 	tst.w	r3, #16
 8001ca0:	f000 8534 	beq.w	800270c <uip_process+0xbe0>
    BUF->wnd[0] = BUF->wnd[1] = 0;
 8001ca4:	4b58      	ldr	r3, [pc, #352]	; (8001e08 <uip_process+0x2dc>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8001cac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  BUF->ttl = UIP_TTL;
 8001cb0:	4c55      	ldr	r4, [pc, #340]	; (8001e08 <uip_process+0x2dc>)
 8001cb2:	2340      	movs	r3, #64	; 0x40
 8001cb4:	75a3      	strb	r3, [r4, #22]
  BUF->len[0] = (uip_len >> 8);
 8001cb6:	4b55      	ldr	r3, [pc, #340]	; (8001e0c <uip_process+0x2e0>)
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	0a1a      	lsrs	r2, r3, #8
 8001cbc:	7422      	strb	r2, [r4, #16]
  BUF->len[1] = (uip_len & 0xff);
 8001cbe:	7463      	strb	r3, [r4, #17]
  BUF->urgp[0] = BUF->urgp[1] = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8001cc6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  BUF->tcpchksum = 0;
 8001cca:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 8001cce:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  BUF->tcpchksum = ~(uip_tcpchksum());
 8001cd2:	f7ff ff25 	bl	8001b20 <uip_tcpchksum>
 8001cd6:	43c0      	mvns	r0, r0
 8001cd8:	8660      	strh	r0, [r4, #50]	; 0x32
 8001cda:	e0f2      	b.n	8001ec2 <uip_process+0x396>
    if (++iss[3] == 0)
 8001cdc:	4a4f      	ldr	r2, [pc, #316]	; (8001e1c <uip_process+0x2f0>)
 8001cde:	78d3      	ldrb	r3, [r2, #3]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	70d3      	strb	r3, [r2, #3]
 8001ce6:	b963      	cbnz	r3, 8001d02 <uip_process+0x1d6>
      if (++iss[2] == 0)
 8001ce8:	7893      	ldrb	r3, [r2, #2]
 8001cea:	3301      	adds	r3, #1
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	7093      	strb	r3, [r2, #2]
 8001cf0:	b93b      	cbnz	r3, 8001d02 <uip_process+0x1d6>
        if (++iss[1] == 0)
 8001cf2:	7853      	ldrb	r3, [r2, #1]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	7053      	strb	r3, [r2, #1]
 8001cfa:	b913      	cbnz	r3, 8001d02 <uip_process+0x1d6>
          ++iss[0];
 8001cfc:	7813      	ldrb	r3, [r2, #0]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	7013      	strb	r3, [r2, #0]
    uip_len = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	4a41      	ldr	r2, [pc, #260]	; (8001e0c <uip_process+0x2e0>)
 8001d06:	8013      	strh	r3, [r2, #0]
    uip_slen = 0;
 8001d08:	4a43      	ldr	r2, [pc, #268]	; (8001e18 <uip_process+0x2ec>)
 8001d0a:	8013      	strh	r3, [r2, #0]
    if (uip_connr->tcpstateflags == UIP_TIME_WAIT ||
 8001d0c:	7e63      	ldrb	r3, [r4, #25]
 8001d0e:	2b05      	cmp	r3, #5
 8001d10:	bf18      	it	ne
 8001d12:	2b07      	cmpne	r3, #7
 8001d14:	d109      	bne.n	8001d2a <uip_process+0x1fe>
      ++(uip_connr->timer);
 8001d16:	7ea3      	ldrb	r3, [r4, #26]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	76a3      	strb	r3, [r4, #26]
      if (uip_connr->timer == UIP_TIME_WAIT_TIMEOUT)
 8001d1e:	2b78      	cmp	r3, #120	; 0x78
 8001d20:	f47f af70 	bne.w	8001c04 <uip_process+0xd8>
        uip_connr->tcpstateflags = UIP_CLOSED;
 8001d24:	2300      	movs	r3, #0
 8001d26:	7663      	strb	r3, [r4, #25]
 8001d28:	e76c      	b.n	8001c04 <uip_process+0xd8>
    else if (uip_connr->tcpstateflags != UIP_CLOSED)
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f43f af6a 	beq.w	8001c04 <uip_process+0xd8>
      if (uip_outstanding(uip_connr))
 8001d30:	8a22      	ldrh	r2, [r4, #16]
 8001d32:	2a00      	cmp	r2, #0
 8001d34:	d074      	beq.n	8001e20 <uip_process+0x2f4>
        if (uip_connr->timer-- == 0)
 8001d36:	7ea2      	ldrb	r2, [r4, #26]
 8001d38:	1e51      	subs	r1, r2, #1
 8001d3a:	76a1      	strb	r1, [r4, #26]
 8001d3c:	2a00      	cmp	r2, #0
 8001d3e:	f47f af61 	bne.w	8001c04 <uip_process+0xd8>
          if (uip_connr->nrtx == UIP_MAXRTX ||
 8001d42:	7ee2      	ldrb	r2, [r4, #27]
 8001d44:	2a08      	cmp	r2, #8
 8001d46:	d027      	beq.n	8001d98 <uip_process+0x26c>
              ((uip_connr->tcpstateflags == UIP_SYN_SENT ||
 8001d48:	1e59      	subs	r1, r3, #1
 8001d4a:	b2c9      	uxtb	r1, r1
          if (uip_connr->nrtx == UIP_MAXRTX ||
 8001d4c:	2901      	cmp	r1, #1
 8001d4e:	d921      	bls.n	8001d94 <uip_process+0x268>
                                         4:
 8001d50:	4610      	mov	r0, r2
 8001d52:	2a04      	cmp	r2, #4
 8001d54:	bf28      	it	cs
 8001d56:	2004      	movcs	r0, #4
          uip_connr->timer = UIP_RTO << (uip_connr->nrtx > 4?
 8001d58:	2103      	movs	r1, #3
 8001d5a:	4081      	lsls	r1, r0
 8001d5c:	76a1      	strb	r1, [r4, #26]
          ++(uip_connr->nrtx);
 8001d5e:	3201      	adds	r2, #1
 8001d60:	76e2      	strb	r2, [r4, #27]
          switch (uip_connr->tcpstateflags & UIP_TS_MASK)
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	3b01      	subs	r3, #1
 8001d68:	2b07      	cmp	r3, #7
 8001d6a:	f63f af4b 	bhi.w	8001c04 <uip_process+0xd8>
 8001d6e:	a201      	add	r2, pc, #4	; (adr r2, 8001d74 <uip_process+0x248>)
 8001d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d74:	08002235 	.word	0x08002235
 8001d78:	08001db1 	.word	0x08001db1
 8001d7c:	08001ded 	.word	0x08001ded
 8001d80:	080024e9 	.word	0x080024e9
 8001d84:	08001c05 	.word	0x08001c05
 8001d88:	080024e9 	.word	0x080024e9
 8001d8c:	08001c05 	.word	0x08001c05
 8001d90:	080024e9 	.word	0x080024e9
                uip_connr->tcpstateflags == UIP_SYN_RCVD) &&
 8001d94:	2a05      	cmp	r2, #5
 8001d96:	d1db      	bne.n	8001d50 <uip_process+0x224>
            uip_connr->tcpstateflags = UIP_CLOSED;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	7663      	strb	r3, [r4, #25]
            uip_flags = UIP_TIMEDOUT;
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <uip_process+0x2e8>)
 8001d9e:	2280      	movs	r2, #128	; 0x80
 8001da0:	701a      	strb	r2, [r3, #0]
            UIP_APPCALL();
 8001da2:	f7ff f8f1 	bl	8000f88 <NetApp>
            BUF->flags = TCP_RST | TCP_ACK;
 8001da6:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <uip_process+0x2dc>)
 8001da8:	2214      	movs	r2, #20
 8001daa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            goto tcp_send_nodata;
 8001dae:	e745      	b.n	8001c3c <uip_process+0x110>
              BUF->flags = 0;
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <uip_process+0x2dc>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  BUF->flags |= TCP_SYN;
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <uip_process+0x2dc>)
 8001dba:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8001dbe:	f042 0202 	orr.w	r2, r2, #2
 8001dc2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  BUF->optdata[0] = TCP_OPT_MSS;
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  BUF->optdata[1] = TCP_OPT_MSS_LEN;
 8001dcc:	2204      	movs	r2, #4
 8001dce:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  BUF->optdata[2] = (UIP_TCP_MSS) / 256;
 8001dd2:	2206      	movs	r2, #6
 8001dd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  BUF->optdata[3] = (UIP_TCP_MSS) & 255;
 8001dd8:	220a      	movs	r2, #10
 8001dda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
 8001dde:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <uip_process+0x2e0>)
 8001de0:	212c      	movs	r1, #44	; 0x2c
 8001de2:	8011      	strh	r1, [r2, #0]
  BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
 8001de4:	2260      	movs	r2, #96	; 0x60
 8001de6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  goto tcp_send;
 8001dea:	e72e      	b.n	8001c4a <uip_process+0x11e>
              uip_flags = UIP_REXMIT;
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <uip_process+0x2e8>)
 8001dee:	2204      	movs	r2, #4
 8001df0:	701a      	strb	r2, [r3, #0]
              UIP_APPCALL();
 8001df2:	f7ff f8c9 	bl	8000f88 <NetApp>
              goto apprexmit;
 8001df6:	e3e2      	b.n	80025be <uip_process+0xa92>
 8001df8:	20000640 	.word	0x20000640
 8001dfc:	200006f2 	.word	0x200006f2
 8001e00:	2000063c 	.word	0x2000063c
 8001e04:	2000062c 	.word	0x2000062c
 8001e08:	200006bc 	.word	0x200006bc
 8001e0c:	20000628 	.word	0x20000628
 8001e10:	200006b8 	.word	0x200006b8
 8001e14:	20000634 	.word	0x20000634
 8001e18:	20000cfe 	.word	0x20000cfe
 8001e1c:	2000059c 	.word	0x2000059c
      else if ((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED)
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	f47f aeed 	bne.w	8001c04 <uip_process+0xd8>
        uip_flags = UIP_POLL;
 8001e2a:	4bac      	ldr	r3, [pc, #688]	; (80020dc <uip_process+0x5b0>)
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
 8001e30:	f7ff f8aa 	bl	8000f88 <NetApp>
        goto appsend;
 8001e34:	e6f4      	b.n	8001c20 <uip_process+0xf4>
    if (uip_udp_conn->lport != 0)
 8001e36:	4baa      	ldr	r3, [pc, #680]	; (80020e0 <uip_process+0x5b4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	889b      	ldrh	r3, [r3, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f43f aee1 	beq.w	8001c04 <uip_process+0xd8>
      uip_conn = NULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	4aa7      	ldr	r2, [pc, #668]	; (80020e4 <uip_process+0x5b8>)
 8001e46:	6013      	str	r3, [r2, #0]
      uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
 8001e48:	4aa7      	ldr	r2, [pc, #668]	; (80020e8 <uip_process+0x5bc>)
 8001e4a:	49a8      	ldr	r1, [pc, #672]	; (80020ec <uip_process+0x5c0>)
 8001e4c:	600a      	str	r2, [r1, #0]
 8001e4e:	49a8      	ldr	r1, [pc, #672]	; (80020f0 <uip_process+0x5c4>)
 8001e50:	600a      	str	r2, [r1, #0]
      uip_len = uip_slen = 0;
 8001e52:	4aa8      	ldr	r2, [pc, #672]	; (80020f4 <uip_process+0x5c8>)
 8001e54:	8013      	strh	r3, [r2, #0]
 8001e56:	4aa8      	ldr	r2, [pc, #672]	; (80020f8 <uip_process+0x5cc>)
 8001e58:	8013      	strh	r3, [r2, #0]
      uip_flags = UIP_POLL;
 8001e5a:	4ba0      	ldr	r3, [pc, #640]	; (80020dc <uip_process+0x5b0>)
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	701a      	strb	r2, [r3, #0]
      UIP_UDP_APPCALL();
 8001e60:	f7ff fd68 	bl	8001934 <dhcpc_appcall>
  if (uip_slen == 0)
 8001e64:	4ba3      	ldr	r3, [pc, #652]	; (80020f4 <uip_process+0x5c8>)
 8001e66:	881a      	ldrh	r2, [r3, #0]
 8001e68:	2a00      	cmp	r2, #0
 8001e6a:	f43f aecb 	beq.w	8001c04 <uip_process+0xd8>
  uip_len = uip_slen + UIP_IPUDPH_LEN;
 8001e6e:	f102 011c 	add.w	r1, r2, #28
 8001e72:	b289      	uxth	r1, r1
 8001e74:	4ba0      	ldr	r3, [pc, #640]	; (80020f8 <uip_process+0x5cc>)
 8001e76:	8019      	strh	r1, [r3, #0]
  BUF->len[0] = (uip_len >> 8);
 8001e78:	4ba0      	ldr	r3, [pc, #640]	; (80020fc <uip_process+0x5d0>)
 8001e7a:	0a08      	lsrs	r0, r1, #8
 8001e7c:	7418      	strb	r0, [r3, #16]
  BUF->len[1] = (uip_len & 0xff);
 8001e7e:	7459      	strb	r1, [r3, #17]
  BUF->ttl = uip_udp_conn->ttl;
 8001e80:	4997      	ldr	r1, [pc, #604]	; (80020e0 <uip_process+0x5b4>)
 8001e82:	6809      	ldr	r1, [r1, #0]
 8001e84:	7a08      	ldrb	r0, [r1, #8]
 8001e86:	7598      	strb	r0, [r3, #22]
  BUF->proto = UIP_PROTO_UDP;
 8001e88:	2011      	movs	r0, #17
 8001e8a:	75d8      	strb	r0, [r3, #23]
  UDPBUF->udplen = HTONS(uip_slen + UIP_UDPH_LEN);
 8001e8c:	3208      	adds	r2, #8
 8001e8e:	b292      	uxth	r2, r2
 8001e90:	0a10      	lsrs	r0, r2, #8
 8001e92:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
 8001e96:	84da      	strh	r2, [r3, #38]	; 0x26
  UDPBUF->udpchksum = 0;
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001e9e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BUF->srcport  = uip_udp_conn->lport;
 8001ea2:	888a      	ldrh	r2, [r1, #4]
 8001ea4:	845a      	strh	r2, [r3, #34]	; 0x22
  BUF->destport = uip_udp_conn->rport;
 8001ea6:	88ca      	ldrh	r2, [r1, #6]
 8001ea8:	849a      	strh	r2, [r3, #36]	; 0x24
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 8001eaa:	4a95      	ldr	r2, [pc, #596]	; (8002100 <uip_process+0x5d4>)
 8001eac:	8810      	ldrh	r0, [r2, #0]
 8001eae:	8358      	strh	r0, [r3, #26]
 8001eb0:	8852      	ldrh	r2, [r2, #2]
 8001eb2:	839a      	strh	r2, [r3, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_udp_conn->ripaddr);
 8001eb4:	880a      	ldrh	r2, [r1, #0]
 8001eb6:	83da      	strh	r2, [r3, #30]
 8001eb8:	884a      	ldrh	r2, [r1, #2]
 8001eba:	841a      	strh	r2, [r3, #32]
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPTCPH_LEN];
 8001ebc:	3336      	adds	r3, #54	; 0x36
 8001ebe:	4a8b      	ldr	r2, [pc, #556]	; (80020ec <uip_process+0x5c0>)
 8001ec0:	6013      	str	r3, [r2, #0]
  BUF->vhl = 0x45;
 8001ec2:	4c8e      	ldr	r4, [pc, #568]	; (80020fc <uip_process+0x5d0>)
 8001ec4:	2345      	movs	r3, #69	; 0x45
 8001ec6:	73a3      	strb	r3, [r4, #14]
  BUF->tos = 0;
 8001ec8:	2200      	movs	r2, #0
 8001eca:	73e2      	strb	r2, [r4, #15]
  BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
 8001ecc:	7562      	strb	r2, [r4, #21]
 8001ece:	7522      	strb	r2, [r4, #20]
  ++ipid;
 8001ed0:	498c      	ldr	r1, [pc, #560]	; (8002104 <uip_process+0x5d8>)
 8001ed2:	880b      	ldrh	r3, [r1, #0]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	800b      	strh	r3, [r1, #0]
  BUF->ipid[0] = ipid >> 8;
 8001eda:	0a19      	lsrs	r1, r3, #8
 8001edc:	74a1      	strb	r1, [r4, #18]
  BUF->ipid[1] = ipid & 0xff;
 8001ede:	74e3      	strb	r3, [r4, #19]
  BUF->ipchksum = 0;
 8001ee0:	7622      	strb	r2, [r4, #24]
 8001ee2:	7662      	strb	r2, [r4, #25]
  BUF->ipchksum = ~(uip_ipchksum());
 8001ee4:	f7ff fdee 	bl	8001ac4 <uip_ipchksum>
 8001ee8:	43c0      	mvns	r0, r0
 8001eea:	8320      	strh	r0, [r4, #24]
  uip_flags = 0;
 8001eec:	4b7b      	ldr	r3, [pc, #492]	; (80020dc <uip_process+0x5b0>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
  return;
 8001ef2:	e68c      	b.n	8001c0e <uip_process+0xe2>
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8);
 8001ef4:	3308      	adds	r3, #8
 8001ef6:	4a81      	ldr	r2, [pc, #516]	; (80020fc <uip_process+0x5d0>)
 8001ef8:	8493      	strh	r3, [r2, #36]	; 0x24
 8001efa:	e674      	b.n	8001be6 <uip_process+0xba>
  uip_len = uip_len - UIP_IPUDPH_LEN;
 8001efc:	3d1c      	subs	r5, #28
 8001efe:	4b7e      	ldr	r3, [pc, #504]	; (80020f8 <uip_process+0x5cc>)
 8001f00:	801d      	strh	r5, [r3, #0]
  for (uip_udp_conn = &uip_udp_conns[0];
 8001f02:	4b77      	ldr	r3, [pc, #476]	; (80020e0 <uip_process+0x5b4>)
 8001f04:	4a80      	ldr	r2, [pc, #512]	; (8002108 <uip_process+0x5dc>)
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	e00e      	b.n	8001f28 <uip_process+0x3fc>
        (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
 8001f0a:	881a      	ldrh	r2, [r3, #0]
         uip_udp_conn->rport == HTONS(69)) &&
 8001f0c:	b90a      	cbnz	r2, 8001f12 <uip_process+0x3e6>
        (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
 8001f0e:	8859      	ldrh	r1, [r3, #2]
 8001f10:	b329      	cbz	r1, 8001f5e <uip_process+0x432>
 8001f12:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f16:	428a      	cmp	r2, r1
 8001f18:	d01e      	beq.n	8001f58 <uip_process+0x42c>
         uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr)))
 8001f1a:	4978      	ldr	r1, [pc, #480]	; (80020fc <uip_process+0x5d0>)
 8001f1c:	8b49      	ldrh	r1, [r1, #26]
         uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
 8001f1e:	428a      	cmp	r2, r1
 8001f20:	d02d      	beq.n	8001f7e <uip_process+0x452>
       ++uip_udp_conn)
 8001f22:	3340      	adds	r3, #64	; 0x40
 8001f24:	4a6e      	ldr	r2, [pc, #440]	; (80020e0 <uip_process+0x5b4>)
 8001f26:	6013      	str	r3, [r2, #0]
       uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
 8001f28:	4b6d      	ldr	r3, [pc, #436]	; (80020e0 <uip_process+0x5b4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
  for (uip_udp_conn = &uip_udp_conns[0];
 8001f2c:	4a77      	ldr	r2, [pc, #476]	; (800210c <uip_process+0x5e0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	f4bf ae68 	bcs.w	8001c04 <uip_process+0xd8>
    if (uip_udp_conn->lport != 0 &&
 8001f34:	889a      	ldrh	r2, [r3, #4]
 8001f36:	2a00      	cmp	r2, #0
 8001f38:	d0f3      	beq.n	8001f22 <uip_process+0x3f6>
        UDPBUF->destport == uip_udp_conn->lport &&
 8001f3a:	4970      	ldr	r1, [pc, #448]	; (80020fc <uip_process+0x5d0>)
 8001f3c:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    if (uip_udp_conn->lport != 0 &&
 8001f3e:	428a      	cmp	r2, r1
 8001f40:	d1ef      	bne.n	8001f22 <uip_process+0x3f6>
        (uip_udp_conn->rport == 0 ||
 8001f42:	88da      	ldrh	r2, [r3, #6]
        UDPBUF->destport == uip_udp_conn->lport &&
 8001f44:	2a00      	cmp	r2, #0
 8001f46:	d0e0      	beq.n	8001f0a <uip_process+0x3de>
         UDPBUF->srcport == uip_udp_conn->rport ||
 8001f48:	496c      	ldr	r1, [pc, #432]	; (80020fc <uip_process+0x5d0>)
 8001f4a:	8c49      	ldrh	r1, [r1, #34]	; 0x22
        (uip_udp_conn->rport == 0 ||
 8001f4c:	428a      	cmp	r2, r1
 8001f4e:	d0dc      	beq.n	8001f0a <uip_process+0x3de>
         UDPBUF->srcport == uip_udp_conn->rport ||
 8001f50:	f5b2 4f8a 	cmp.w	r2, #17664	; 0x4500
 8001f54:	d1e5      	bne.n	8001f22 <uip_process+0x3f6>
 8001f56:	e7d8      	b.n	8001f0a <uip_process+0x3de>
         uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
 8001f58:	8858      	ldrh	r0, [r3, #2]
 8001f5a:	4288      	cmp	r0, r1
 8001f5c:	d1dd      	bne.n	8001f1a <uip_process+0x3ee>
  uip_conn = NULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	4a60      	ldr	r2, [pc, #384]	; (80020e4 <uip_process+0x5b8>)
 8001f62:	6013      	str	r3, [r2, #0]
  uip_flags = UIP_NEWDATA;
 8001f64:	4a5d      	ldr	r2, [pc, #372]	; (80020dc <uip_process+0x5b0>)
 8001f66:	2102      	movs	r1, #2
 8001f68:	7011      	strb	r1, [r2, #0]
  uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
 8001f6a:	4a5f      	ldr	r2, [pc, #380]	; (80020e8 <uip_process+0x5bc>)
 8001f6c:	495f      	ldr	r1, [pc, #380]	; (80020ec <uip_process+0x5c0>)
 8001f6e:	600a      	str	r2, [r1, #0]
 8001f70:	495f      	ldr	r1, [pc, #380]	; (80020f0 <uip_process+0x5c4>)
 8001f72:	600a      	str	r2, [r1, #0]
  uip_slen = 0;
 8001f74:	4a5f      	ldr	r2, [pc, #380]	; (80020f4 <uip_process+0x5c8>)
 8001f76:	8013      	strh	r3, [r2, #0]
  UIP_UDP_APPCALL();
 8001f78:	f7ff fcdc 	bl	8001934 <dhcpc_appcall>
 8001f7c:	e772      	b.n	8001e64 <uip_process+0x338>
         uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr)))
 8001f7e:	4a5f      	ldr	r2, [pc, #380]	; (80020fc <uip_process+0x5d0>)
 8001f80:	8b91      	ldrh	r1, [r2, #28]
 8001f82:	885a      	ldrh	r2, [r3, #2]
 8001f84:	4291      	cmp	r1, r2
 8001f86:	d1cc      	bne.n	8001f22 <uip_process+0x3f6>
udp_found:
 8001f88:	e7e9      	b.n	8001f5e <uip_process+0x432>
  if (uip_tcpchksum() != 0xffff)
 8001f8a:	f7ff fdc9 	bl	8001b20 <uip_tcpchksum>
 8001f8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f92:	4298      	cmp	r0, r3
 8001f94:	f47f ae36 	bne.w	8001c04 <uip_process+0xd8>
  for (uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
 8001f98:	4c5d      	ldr	r4, [pc, #372]	; (8002110 <uip_process+0x5e4>)
 8001f9a:	4b5d      	ldr	r3, [pc, #372]	; (8002110 <uip_process+0x5e4>)
 8001f9c:	429c      	cmp	r4, r3
 8001f9e:	d95a      	bls.n	8002056 <uip_process+0x52a>
  if ((BUF->flags & TCP_CTL) != TCP_SYN)
 8001fa0:	4b56      	ldr	r3, [pc, #344]	; (80020fc <uip_process+0x5d0>)
 8001fa2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001fa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d07f      	beq.n	80020ae <uip_process+0x582>
  if (BUF->flags & TCP_RST)
 8001fae:	4b53      	ldr	r3, [pc, #332]	; (80020fc <uip_process+0x5d0>)
 8001fb0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001fb4:	f013 0f04 	tst.w	r3, #4
 8001fb8:	f47f ae24 	bne.w	8001c04 <uip_process+0xd8>
  BUF->flags = TCP_RST | TCP_ACK;
 8001fbc:	494f      	ldr	r1, [pc, #316]	; (80020fc <uip_process+0x5d0>)
 8001fbe:	2314      	movs	r3, #20
 8001fc0:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
  uip_len = UIP_IPTCPH_LEN;
 8001fc4:	4b4c      	ldr	r3, [pc, #304]	; (80020f8 <uip_process+0x5cc>)
 8001fc6:	2228      	movs	r2, #40	; 0x28
 8001fc8:	801a      	strh	r2, [r3, #0]
  BUF->tcpoffset = 5 << 4;
 8001fca:	2350      	movs	r3, #80	; 0x50
 8001fcc:	f881 302e 	strb.w	r3, [r1, #46]	; 0x2e
  c = BUF->seqno[3];
 8001fd0:	f891 0029 	ldrb.w	r0, [r1, #41]	; 0x29
  BUF->seqno[3] = BUF->ackno[3];
 8001fd4:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8001fd8:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  c = BUF->seqno[2];
 8001fdc:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
  BUF->seqno[2] = BUF->ackno[2];
 8001fe0:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8001fe4:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  BUF->ackno[2] = c;
 8001fe8:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
  c = BUF->seqno[1];
 8001fec:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
  BUF->seqno[1] = BUF->ackno[1];
 8001ff0:	f891 402b 	ldrb.w	r4, [r1, #43]	; 0x2b
 8001ff4:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  BUF->ackno[1] = c;
 8001ff8:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b
  c = BUF->seqno[0];
 8001ffc:	f891 4026 	ldrb.w	r4, [r1, #38]	; 0x26
 8002000:	4d44      	ldr	r5, [pc, #272]	; (8002114 <uip_process+0x5e8>)
 8002002:	702c      	strb	r4, [r5, #0]
  BUF->seqno[0] = BUF->ackno[0];
 8002004:	f891 502a 	ldrb.w	r5, [r1, #42]	; 0x2a
 8002008:	f881 5026 	strb.w	r5, [r1, #38]	; 0x26
  BUF->ackno[0] = c;
 800200c:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
  if (++BUF->ackno[3] == 0)
 8002010:	3001      	adds	r0, #1
 8002012:	b2c0      	uxtb	r0, r0
 8002014:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
 8002018:	b960      	cbnz	r0, 8002034 <uip_process+0x508>
    if (++BUF->ackno[2] == 0)
 800201a:	3201      	adds	r2, #1
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
 8002022:	b93a      	cbnz	r2, 8002034 <uip_process+0x508>
      if (++BUF->ackno[1] == 0)
 8002024:	3301      	adds	r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b
 800202c:	b913      	cbnz	r3, 8002034 <uip_process+0x508>
        ++BUF->ackno[0];
 800202e:	3401      	adds	r4, #1
 8002030:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
  tmp16 = BUF->srcport;
 8002034:	4b31      	ldr	r3, [pc, #196]	; (80020fc <uip_process+0x5d0>)
 8002036:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8002038:	4937      	ldr	r1, [pc, #220]	; (8002118 <uip_process+0x5ec>)
 800203a:	800a      	strh	r2, [r1, #0]
  BUF->srcport = BUF->destport;
 800203c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800203e:	8459      	strh	r1, [r3, #34]	; 0x22
  BUF->destport = tmp16;
 8002040:	849a      	strh	r2, [r3, #36]	; 0x24
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
 8002042:	8b5a      	ldrh	r2, [r3, #26]
 8002044:	83da      	strh	r2, [r3, #30]
 8002046:	8b9a      	ldrh	r2, [r3, #28]
 8002048:	841a      	strh	r2, [r3, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 800204a:	4a2d      	ldr	r2, [pc, #180]	; (8002100 <uip_process+0x5d4>)
 800204c:	8811      	ldrh	r1, [r2, #0]
 800204e:	8359      	strh	r1, [r3, #26]
 8002050:	8852      	ldrh	r2, [r2, #2]
 8002052:	839a      	strh	r2, [r3, #28]
  goto tcp_send_noconn;
 8002054:	e62c      	b.n	8001cb0 <uip_process+0x184>
    if (uip_connr->tcpstateflags != UIP_CLOSED &&
 8002056:	7e61      	ldrb	r1, [r4, #25]
 8002058:	b121      	cbz	r1, 8002064 <uip_process+0x538>
        BUF->destport == uip_connr->lport &&
 800205a:	4b28      	ldr	r3, [pc, #160]	; (80020fc <uip_process+0x5d0>)
 800205c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800205e:	88a3      	ldrh	r3, [r4, #4]
    if (uip_connr->tcpstateflags != UIP_CLOSED &&
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <uip_process+0x53c>
       ++uip_connr)
 8002064:	3468      	adds	r4, #104	; 0x68
 8002066:	e798      	b.n	8001f9a <uip_process+0x46e>
        BUF->srcport == uip_connr->rport &&
 8002068:	4b24      	ldr	r3, [pc, #144]	; (80020fc <uip_process+0x5d0>)
 800206a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800206c:	88e3      	ldrh	r3, [r4, #6]
        BUF->destport == uip_connr->lport &&
 800206e:	429a      	cmp	r2, r3
 8002070:	d1f8      	bne.n	8002064 <uip_process+0x538>
        uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr))
 8002072:	4b22      	ldr	r3, [pc, #136]	; (80020fc <uip_process+0x5d0>)
 8002074:	8b5a      	ldrh	r2, [r3, #26]
 8002076:	8823      	ldrh	r3, [r4, #0]
        BUF->srcport == uip_connr->rport &&
 8002078:	429a      	cmp	r2, r3
 800207a:	d1f3      	bne.n	8002064 <uip_process+0x538>
        uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr))
 800207c:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <uip_process+0x5d0>)
 800207e:	8b9a      	ldrh	r2, [r3, #28]
 8002080:	8863      	ldrh	r3, [r4, #2]
 8002082:	429a      	cmp	r2, r3
 8002084:	d1ee      	bne.n	8002064 <uip_process+0x538>
  uip_conn = uip_connr;
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <uip_process+0x5b8>)
 8002088:	601c      	str	r4, [r3, #0]
  uip_flags = 0;
 800208a:	4b14      	ldr	r3, [pc, #80]	; (80020dc <uip_process+0x5b0>)
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
  if (BUF->flags & TCP_RST)
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <uip_process+0x5d0>)
 8002092:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8002096:	f012 0f04 	tst.w	r2, #4
 800209a:	f000 80da 	beq.w	8002252 <uip_process+0x726>
    uip_connr->tcpstateflags = UIP_CLOSED;
 800209e:	2300      	movs	r3, #0
 80020a0:	7663      	strb	r3, [r4, #25]
    uip_flags = UIP_ABORT;
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <uip_process+0x5b0>)
 80020a4:	2220      	movs	r2, #32
 80020a6:	701a      	strb	r2, [r3, #0]
    UIP_APPCALL();
 80020a8:	f7fe ff6e 	bl	8000f88 <NetApp>
    goto drop;
 80020ac:	e5aa      	b.n	8001c04 <uip_process+0xd8>
  tmp16 = BUF->destport;
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <uip_process+0x5d0>)
 80020b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020b2:	b299      	uxth	r1, r3
 80020b4:	4a18      	ldr	r2, [pc, #96]	; (8002118 <uip_process+0x5ec>)
 80020b6:	8013      	strh	r3, [r2, #0]
  for (c = 0; c < UIP_LISTENPORTS; ++c)
 80020b8:	4b16      	ldr	r3, [pc, #88]	; (8002114 <uip_process+0x5e8>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <uip_process+0x5e8>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f47f af73 	bne.w	8001fae <uip_process+0x482>
    if (tmp16 == uip_listenports[c])
 80020c8:	4a14      	ldr	r2, [pc, #80]	; (800211c <uip_process+0x5f0>)
 80020ca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80020ce:	4291      	cmp	r1, r2
 80020d0:	d026      	beq.n	8002120 <uip_process+0x5f4>
  for (c = 0; c < UIP_LISTENPORTS; ++c)
 80020d2:	3301      	adds	r3, #1
 80020d4:	4a0f      	ldr	r2, [pc, #60]	; (8002114 <uip_process+0x5e8>)
 80020d6:	7013      	strb	r3, [r2, #0]
 80020d8:	e7f1      	b.n	80020be <uip_process+0x592>
 80020da:	bf00      	nop
 80020dc:	20000634 	.word	0x20000634
 80020e0:	20000638 	.word	0x20000638
 80020e4:	20000640 	.word	0x20000640
 80020e8:	200006e6 	.word	0x200006e6
 80020ec:	2000063c 	.word	0x2000063c
 80020f0:	2000062c 	.word	0x2000062c
 80020f4:	20000cfe 	.word	0x20000cfe
 80020f8:	20000628 	.word	0x20000628
 80020fc:	200006bc 	.word	0x200006bc
 8002100:	200006b8 	.word	0x200006b8
 8002104:	2000059a 	.word	0x2000059a
 8002108:	20000d00 	.word	0x20000d00
 800210c:	20000d40 	.word	0x20000d40
 8002110:	20000644 	.word	0x20000644
 8002114:	20000598 	.word	0x20000598
 8002118:	200005a2 	.word	0x200005a2
 800211c:	200006ac 	.word	0x200006ac
  for (c = 0; c < UIP_CONNS; ++c)
 8002120:	2400      	movs	r4, #0
 8002122:	4b9a      	ldr	r3, [pc, #616]	; (800238c <uip_process+0x860>)
 8002124:	701c      	strb	r4, [r3, #0]
 8002126:	e00b      	b.n	8002140 <uip_process+0x614>
    if (uip_conns[c].tcpstateflags == UIP_CLOSED)
 8002128:	4619      	mov	r1, r3
 800212a:	4899      	ldr	r0, [pc, #612]	; (8002390 <uip_process+0x864>)
 800212c:	2268      	movs	r2, #104	; 0x68
 800212e:	fb02 0203 	mla	r2, r2, r3, r0
 8002132:	7e52      	ldrb	r2, [r2, #25]
 8002134:	b14a      	cbz	r2, 800214a <uip_process+0x61e>
    if (uip_conns[c].tcpstateflags == UIP_TIME_WAIT)
 8002136:	2a07      	cmp	r2, #7
 8002138:	d056      	beq.n	80021e8 <uip_process+0x6bc>
  for (c = 0; c < UIP_CONNS; ++c)
 800213a:	3301      	adds	r3, #1
 800213c:	4a93      	ldr	r2, [pc, #588]	; (800238c <uip_process+0x860>)
 800213e:	7013      	strb	r3, [r2, #0]
 8002140:	4b92      	ldr	r3, [pc, #584]	; (800238c <uip_process+0x860>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0ef      	beq.n	8002128 <uip_process+0x5fc>
 8002148:	e002      	b.n	8002150 <uip_process+0x624>
      uip_connr = &uip_conns[c];
 800214a:	2468      	movs	r4, #104	; 0x68
 800214c:	fb04 0401 	mla	r4, r4, r1, r0
  if (uip_connr == 0)
 8002150:	2c00      	cmp	r4, #0
 8002152:	f43f ad57 	beq.w	8001c04 <uip_process+0xd8>
  uip_conn = uip_connr;
 8002156:	4b8f      	ldr	r3, [pc, #572]	; (8002394 <uip_process+0x868>)
 8002158:	601c      	str	r4, [r3, #0]
  uip_connr->rto = uip_connr->timer = UIP_RTO;
 800215a:	2303      	movs	r3, #3
 800215c:	76a3      	strb	r3, [r4, #26]
 800215e:	7623      	strb	r3, [r4, #24]
  uip_connr->sa = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	75a3      	strb	r3, [r4, #22]
  uip_connr->sv = 4;
 8002164:	2204      	movs	r2, #4
 8002166:	75e2      	strb	r2, [r4, #23]
  uip_connr->nrtx = 0;
 8002168:	76e3      	strb	r3, [r4, #27]
  uip_connr->lport = BUF->destport;
 800216a:	4d8b      	ldr	r5, [pc, #556]	; (8002398 <uip_process+0x86c>)
 800216c:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800216e:	80a3      	strh	r3, [r4, #4]
  uip_connr->rport = BUF->srcport;
 8002170:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 8002172:	80e3      	strh	r3, [r4, #6]
  uip_ipaddr_copy(uip_connr->ripaddr, BUF->srcipaddr);
 8002174:	8b6b      	ldrh	r3, [r5, #26]
 8002176:	8023      	strh	r3, [r4, #0]
 8002178:	8bab      	ldrh	r3, [r5, #28]
 800217a:	8063      	strh	r3, [r4, #2]
  uip_connr->tcpstateflags = UIP_SYN_RCVD;
 800217c:	2001      	movs	r0, #1
 800217e:	7660      	strb	r0, [r4, #25]
  uip_connr->snd_nxt[0] = iss[0];
 8002180:	4b86      	ldr	r3, [pc, #536]	; (800239c <uip_process+0x870>)
 8002182:	781a      	ldrb	r2, [r3, #0]
 8002184:	7322      	strb	r2, [r4, #12]
  uip_connr->snd_nxt[1] = iss[1];
 8002186:	785a      	ldrb	r2, [r3, #1]
 8002188:	7362      	strb	r2, [r4, #13]
  uip_connr->snd_nxt[2] = iss[2];
 800218a:	789a      	ldrb	r2, [r3, #2]
 800218c:	73a2      	strb	r2, [r4, #14]
  uip_connr->snd_nxt[3] = iss[3];
 800218e:	78db      	ldrb	r3, [r3, #3]
 8002190:	73e3      	strb	r3, [r4, #15]
  uip_connr->len = 1;
 8002192:	8220      	strh	r0, [r4, #16]
  uip_connr->rcv_nxt[3] = BUF->seqno[3];
 8002194:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8002198:	72e3      	strb	r3, [r4, #11]
  uip_connr->rcv_nxt[2] = BUF->seqno[2];
 800219a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800219e:	72a3      	strb	r3, [r4, #10]
  uip_connr->rcv_nxt[1] = BUF->seqno[1];
 80021a0:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 80021a4:	7263      	strb	r3, [r4, #9]
  uip_connr->rcv_nxt[0] = BUF->seqno[0];
 80021a6:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 80021aa:	7223      	strb	r3, [r4, #8]
  uip_add_rcv_nxt(1);
 80021ac:	f7ff fc14 	bl	80019d8 <uip_add_rcv_nxt>
  if ((BUF->tcpoffset & 0xf0) > 0x50)
 80021b0:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
 80021b4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80021b8:	2b50      	cmp	r3, #80	; 0x50
 80021ba:	d93b      	bls.n	8002234 <uip_process+0x708>
    for (c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;)
 80021bc:	4b73      	ldr	r3, [pc, #460]	; (800238c <uip_process+0x860>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
 80021c2:	4b72      	ldr	r3, [pc, #456]	; (800238c <uip_process+0x860>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	0901      	lsrs	r1, r0, #4
 80021ca:	3905      	subs	r1, #5
 80021cc:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 80021d0:	da30      	bge.n	8002234 <uip_process+0x708>
      opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
 80021d2:	f103 0136 	add.w	r1, r3, #54	; 0x36
 80021d6:	4d70      	ldr	r5, [pc, #448]	; (8002398 <uip_process+0x86c>)
 80021d8:	5c69      	ldrb	r1, [r5, r1]
      if (opt == TCP_OPT_END)
 80021da:	b359      	cbz	r1, 8002234 <uip_process+0x708>
      else if (opt == TCP_OPT_NOOP)
 80021dc:	2901      	cmp	r1, #1
 80021de:	d111      	bne.n	8002204 <uip_process+0x6d8>
        ++c;
 80021e0:	3301      	adds	r3, #1
 80021e2:	4a6a      	ldr	r2, [pc, #424]	; (800238c <uip_process+0x860>)
 80021e4:	7013      	strb	r3, [r2, #0]
 80021e6:	e7ec      	b.n	80021c2 <uip_process+0x696>
      if (uip_connr == 0 ||
 80021e8:	b13c      	cbz	r4, 80021fa <uip_process+0x6ce>
          uip_conns[c].timer > uip_connr->timer)
 80021ea:	4969      	ldr	r1, [pc, #420]	; (8002390 <uip_process+0x864>)
 80021ec:	2268      	movs	r2, #104	; 0x68
 80021ee:	fb02 1203 	mla	r2, r2, r3, r1
 80021f2:	7e91      	ldrb	r1, [r2, #26]
 80021f4:	7ea2      	ldrb	r2, [r4, #26]
      if (uip_connr == 0 ||
 80021f6:	4291      	cmp	r1, r2
 80021f8:	d99f      	bls.n	800213a <uip_process+0x60e>
        uip_connr = &uip_conns[c];
 80021fa:	2468      	movs	r4, #104	; 0x68
 80021fc:	4a64      	ldr	r2, [pc, #400]	; (8002390 <uip_process+0x864>)
 80021fe:	fb04 2403 	mla	r4, r4, r3, r2
 8002202:	e79a      	b.n	800213a <uip_process+0x60e>
      else if (opt == TCP_OPT_MSS &&
 8002204:	2902      	cmp	r1, #2
 8002206:	d11a      	bne.n	800223e <uip_process+0x712>
               uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN)
 8002208:	f103 0137 	add.w	r1, r3, #55	; 0x37
 800220c:	4d62      	ldr	r5, [pc, #392]	; (8002398 <uip_process+0x86c>)
 800220e:	5c69      	ldrb	r1, [r5, r1]
      else if (opt == TCP_OPT_MSS &&
 8002210:	2904      	cmp	r1, #4
 8002212:	d114      	bne.n	800223e <uip_process+0x712>
        tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 8002214:	f102 0138 	add.w	r1, r2, #56	; 0x38
 8002218:	5c69      	ldrb	r1, [r5, r1]
                (u16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
 800221a:	3239      	adds	r2, #57	; 0x39
 800221c:	5cab      	ldrb	r3, [r5, r2]
        tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 800221e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002222:	4a5f      	ldr	r2, [pc, #380]	; (80023a0 <uip_process+0x874>)
 8002224:	8013      	strh	r3, [r2, #0]
                                  tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
 8002226:	f240 620a 	movw	r2, #1546	; 0x60a
 800222a:	4293      	cmp	r3, r2
 800222c:	bf28      	it	cs
 800222e:	4613      	movcs	r3, r2
        uip_connr->initialmss = uip_connr->mss =
 8002230:	8263      	strh	r3, [r4, #18]
 8002232:	82a3      	strh	r3, [r4, #20]
  BUF->flags = TCP_ACK;
 8002234:	4b58      	ldr	r3, [pc, #352]	; (8002398 <uip_process+0x86c>)
 8002236:	2210      	movs	r2, #16
 8002238:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800223c:	e5bc      	b.n	8001db8 <uip_process+0x28c>
        if (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0)
 800223e:	f103 0237 	add.w	r2, r3, #55	; 0x37
 8002242:	4955      	ldr	r1, [pc, #340]	; (8002398 <uip_process+0x86c>)
 8002244:	5c8a      	ldrb	r2, [r1, r2]
 8002246:	2a00      	cmp	r2, #0
 8002248:	d0f4      	beq.n	8002234 <uip_process+0x708>
        c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
 800224a:	4413      	add	r3, r2
 800224c:	4a4f      	ldr	r2, [pc, #316]	; (800238c <uip_process+0x860>)
 800224e:	7013      	strb	r3, [r2, #0]
 8002250:	e7b7      	b.n	80021c2 <uip_process+0x696>
  c = (BUF->tcpoffset >> 4) << 2;
 8002252:	4b51      	ldr	r3, [pc, #324]	; (8002398 <uip_process+0x86c>)
 8002254:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	484b      	ldr	r0, [pc, #300]	; (800238c <uip_process+0x860>)
 800225e:	7003      	strb	r3, [r0, #0]
  uip_len = uip_len - c - UIP_IPH_LEN;
 8002260:	1aeb      	subs	r3, r5, r3
 8002262:	b29b      	uxth	r3, r3
 8002264:	3b14      	subs	r3, #20
 8002266:	b29b      	uxth	r3, r3
 8002268:	484e      	ldr	r0, [pc, #312]	; (80023a4 <uip_process+0x878>)
 800226a:	8003      	strh	r3, [r0, #0]
  if (!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
 800226c:	f001 010f 	and.w	r1, r1, #15
 8002270:	2902      	cmp	r1, #2
 8002272:	d103      	bne.n	800227c <uip_process+0x750>
 8002274:	f002 013f 	and.w	r1, r2, #63	; 0x3f
 8002278:	2912      	cmp	r1, #18
 800227a:	d00f      	beq.n	800229c <uip_process+0x770>
    if ((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
 800227c:	b913      	cbnz	r3, 8002284 <uip_process+0x758>
 800227e:	f012 0f03 	tst.w	r2, #3
 8002282:	d00b      	beq.n	800229c <uip_process+0x770>
        (BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
 8002284:	4b44      	ldr	r3, [pc, #272]	; (8002398 <uip_process+0x86c>)
 8002286:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 8002288:	8923      	ldrh	r3, [r4, #8]
    if ((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
 800228a:	4299      	cmp	r1, r3
 800228c:	f040 81e7 	bne.w	800265e <uip_process+0xb32>
         BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
 8002290:	4b41      	ldr	r3, [pc, #260]	; (8002398 <uip_process+0x86c>)
 8002292:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8002294:	8963      	ldrh	r3, [r4, #10]
 8002296:	4299      	cmp	r1, r3
 8002298:	f040 81e1 	bne.w	800265e <uip_process+0xb32>
  if ((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr))
 800229c:	f012 0f10 	tst.w	r2, #16
 80022a0:	d047      	beq.n	8002332 <uip_process+0x806>
 80022a2:	8a21      	ldrh	r1, [r4, #16]
 80022a4:	2900      	cmp	r1, #0
 80022a6:	d044      	beq.n	8002332 <uip_process+0x806>
    uip_add32(uip_connr->snd_nxt, uip_connr->len);
 80022a8:	f104 000c 	add.w	r0, r4, #12
 80022ac:	f7ff fb66 	bl	800197c <uip_add32>
    if (BUF->ackno[0] == uip_acc32[0] &&
 80022b0:	4b39      	ldr	r3, [pc, #228]	; (8002398 <uip_process+0x86c>)
 80022b2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80022b6:	4a3c      	ldr	r2, [pc, #240]	; (80023a8 <uip_process+0x87c>)
 80022b8:	7810      	ldrb	r0, [r2, #0]
 80022ba:	4283      	cmp	r3, r0
 80022bc:	d139      	bne.n	8002332 <uip_process+0x806>
        BUF->ackno[1] == uip_acc32[1] &&
 80022be:	4b36      	ldr	r3, [pc, #216]	; (8002398 <uip_process+0x86c>)
 80022c0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80022c4:	7851      	ldrb	r1, [r2, #1]
    if (BUF->ackno[0] == uip_acc32[0] &&
 80022c6:	428b      	cmp	r3, r1
 80022c8:	d133      	bne.n	8002332 <uip_process+0x806>
        BUF->ackno[2] == uip_acc32[2] &&
 80022ca:	4b33      	ldr	r3, [pc, #204]	; (8002398 <uip_process+0x86c>)
 80022cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80022d0:	7892      	ldrb	r2, [r2, #2]
        BUF->ackno[1] == uip_acc32[1] &&
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d12d      	bne.n	8002332 <uip_process+0x806>
        BUF->ackno[3] == uip_acc32[3])
 80022d6:	4b30      	ldr	r3, [pc, #192]	; (8002398 <uip_process+0x86c>)
 80022d8:	f893 502d 	ldrb.w	r5, [r3, #45]	; 0x2d
 80022dc:	4b32      	ldr	r3, [pc, #200]	; (80023a8 <uip_process+0x87c>)
 80022de:	78db      	ldrb	r3, [r3, #3]
        BUF->ackno[2] == uip_acc32[2] &&
 80022e0:	429d      	cmp	r5, r3
 80022e2:	d126      	bne.n	8002332 <uip_process+0x806>
      uip_connr->snd_nxt[0] = uip_acc32[0];
 80022e4:	7320      	strb	r0, [r4, #12]
      uip_connr->snd_nxt[1] = uip_acc32[1];
 80022e6:	7361      	strb	r1, [r4, #13]
      uip_connr->snd_nxt[2] = uip_acc32[2];
 80022e8:	73a2      	strb	r2, [r4, #14]
      uip_connr->snd_nxt[3] = uip_acc32[3];
 80022ea:	73e3      	strb	r3, [r4, #15]
      if (uip_connr->nrtx == 0)
 80022ec:	7ee3      	ldrb	r3, [r4, #27]
 80022ee:	b9cb      	cbnz	r3, 8002324 <uip_process+0x7f8>
        m = uip_connr->rto - uip_connr->timer;
 80022f0:	7e23      	ldrb	r3, [r4, #24]
 80022f2:	7ea2      	ldrb	r2, [r4, #26]
 80022f4:	1a9b      	subs	r3, r3, r2
 80022f6:	b2db      	uxtb	r3, r3
        m = m - (uip_connr->sa >> 3);
 80022f8:	7da1      	ldrb	r1, [r4, #22]
 80022fa:	eba3 03d1 	sub.w	r3, r3, r1, lsr #3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	b25a      	sxtb	r2, r3
        uip_connr->sa += m;
 8002302:	4419      	add	r1, r3
 8002304:	b2c9      	uxtb	r1, r1
 8002306:	75a1      	strb	r1, [r4, #22]
        if (m < 0)
 8002308:	2a00      	cmp	r2, #0
 800230a:	da01      	bge.n	8002310 <uip_process+0x7e4>
          m = -m;
 800230c:	425b      	negs	r3, r3
 800230e:	b25a      	sxtb	r2, r3
        m = m - (uip_connr->sv >> 2);
 8002310:	7de0      	ldrb	r0, [r4, #23]
 8002312:	eba2 0390 	sub.w	r3, r2, r0, lsr #2
        uip_connr->sv += m;
 8002316:	fa50 f383 	uxtab	r3, r0, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	75e3      	strb	r3, [r4, #23]
        uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;
 800231e:	eb03 03d1 	add.w	r3, r3, r1, lsr #3
 8002322:	7623      	strb	r3, [r4, #24]
      uip_flags = UIP_ACKDATA;
 8002324:	4b21      	ldr	r3, [pc, #132]	; (80023ac <uip_process+0x880>)
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
      uip_connr->timer = uip_connr->rto;
 800232a:	7e23      	ldrb	r3, [r4, #24]
 800232c:	76a3      	strb	r3, [r4, #26]
      uip_connr->len = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	8223      	strh	r3, [r4, #16]
  switch (uip_connr->tcpstateflags & UIP_TS_MASK)
 8002332:	7e61      	ldrb	r1, [r4, #25]
 8002334:	f001 030f 	and.w	r3, r1, #15
 8002338:	3b01      	subs	r3, #1
 800233a:	2b07      	cmp	r3, #7
 800233c:	f63f ac62 	bhi.w	8001c04 <uip_process+0xd8>
 8002340:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002344:	00380008 	.word	0x00380008
 8002348:	017000ac 	.word	0x017000ac
 800234c:	01d801ba 	.word	0x01d801ba
 8002350:	0161018d 	.word	0x0161018d
      if (uip_flags & UIP_ACKDATA)
 8002354:	4b15      	ldr	r3, [pc, #84]	; (80023ac <uip_process+0x880>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	f013 0f01 	tst.w	r3, #1
 800235c:	f43f ac52 	beq.w	8001c04 <uip_process+0xd8>
        uip_connr->tcpstateflags = UIP_ESTABLISHED;
 8002360:	2303      	movs	r3, #3
 8002362:	7663      	strb	r3, [r4, #25]
        uip_flags = UIP_CONNECTED;
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <uip_process+0x880>)
 8002366:	2240      	movs	r2, #64	; 0x40
 8002368:	701a      	strb	r2, [r3, #0]
        uip_connr->len = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	8223      	strh	r3, [r4, #16]
        if (uip_len > 0)
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <uip_process+0x878>)
 8002370:	8818      	ldrh	r0, [r3, #0]
 8002372:	b120      	cbz	r0, 800237e <uip_process+0x852>
          uip_flags |= UIP_NEWDATA;
 8002374:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <uip_process+0x880>)
 8002376:	2242      	movs	r2, #66	; 0x42
 8002378:	701a      	strb	r2, [r3, #0]
          uip_add_rcv_nxt(uip_len);
 800237a:	f7ff fb2d 	bl	80019d8 <uip_add_rcv_nxt>
        uip_slen = 0;
 800237e:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <uip_process+0x884>)
 8002380:	2200      	movs	r2, #0
 8002382:	801a      	strh	r2, [r3, #0]
        UIP_APPCALL();
 8002384:	f7fe fe00 	bl	8000f88 <NetApp>
        goto appsend;
 8002388:	e44a      	b.n	8001c20 <uip_process+0xf4>
 800238a:	bf00      	nop
 800238c:	20000598 	.word	0x20000598
 8002390:	20000644 	.word	0x20000644
 8002394:	20000640 	.word	0x20000640
 8002398:	200006bc 	.word	0x200006bc
 800239c:	2000059c 	.word	0x2000059c
 80023a0:	200005a2 	.word	0x200005a2
 80023a4:	20000628 	.word	0x20000628
 80023a8:	20000630 	.word	0x20000630
 80023ac:	20000634 	.word	0x20000634
 80023b0:	20000cfe 	.word	0x20000cfe
      if ((uip_flags & UIP_ACKDATA) &&
 80023b4:	4bad      	ldr	r3, [pc, #692]	; (800266c <uip_process+0xb40>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	f013 0f01 	tst.w	r3, #1
 80023bc:	d064      	beq.n	8002488 <uip_process+0x95c>
          (BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK))
 80023be:	4bac      	ldr	r3, [pc, #688]	; (8002670 <uip_process+0xb44>)
 80023c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
      if ((uip_flags & UIP_ACKDATA) &&
 80023c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023c8:	2b12      	cmp	r3, #18
 80023ca:	d15d      	bne.n	8002488 <uip_process+0x95c>
        if ((BUF->tcpoffset & 0xf0) > 0x50)
 80023cc:	4ba8      	ldr	r3, [pc, #672]	; (8002670 <uip_process+0xb44>)
 80023ce:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
 80023d2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80023d6:	2b50      	cmp	r3, #80	; 0x50
 80023d8:	d92d      	bls.n	8002436 <uip_process+0x90a>
          for (c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;)
 80023da:	4ba6      	ldr	r3, [pc, #664]	; (8002674 <uip_process+0xb48>)
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
 80023e0:	4ba4      	ldr	r3, [pc, #656]	; (8002674 <uip_process+0xb48>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	0901      	lsrs	r1, r0, #4
 80023e8:	3905      	subs	r1, #5
 80023ea:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 80023ee:	da22      	bge.n	8002436 <uip_process+0x90a>
            opt = uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + c];
 80023f0:	f103 0136 	add.w	r1, r3, #54	; 0x36
 80023f4:	4d9e      	ldr	r5, [pc, #632]	; (8002670 <uip_process+0xb44>)
 80023f6:	5c69      	ldrb	r1, [r5, r1]
            if (opt == TCP_OPT_END)
 80023f8:	b1e9      	cbz	r1, 8002436 <uip_process+0x90a>
            else if (opt == TCP_OPT_NOOP)
 80023fa:	2901      	cmp	r1, #1
 80023fc:	d103      	bne.n	8002406 <uip_process+0x8da>
              ++c;
 80023fe:	3301      	adds	r3, #1
 8002400:	4a9c      	ldr	r2, [pc, #624]	; (8002674 <uip_process+0xb48>)
 8002402:	7013      	strb	r3, [r2, #0]
 8002404:	e7ec      	b.n	80023e0 <uip_process+0x8b4>
            else if (opt == TCP_OPT_MSS &&
 8002406:	2902      	cmp	r1, #2
 8002408:	d134      	bne.n	8002474 <uip_process+0x948>
                     uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN)
 800240a:	f103 0137 	add.w	r1, r3, #55	; 0x37
 800240e:	4d98      	ldr	r5, [pc, #608]	; (8002670 <uip_process+0xb44>)
 8002410:	5c69      	ldrb	r1, [r5, r1]
            else if (opt == TCP_OPT_MSS &&
 8002412:	2904      	cmp	r1, #4
 8002414:	d12e      	bne.n	8002474 <uip_process+0x948>
              tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 8002416:	f102 0138 	add.w	r1, r2, #56	; 0x38
 800241a:	5c69      	ldrb	r1, [r5, r1]
                      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
 800241c:	3239      	adds	r2, #57	; 0x39
 800241e:	5cab      	ldrb	r3, [r5, r2]
              tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 8002420:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002424:	4a94      	ldr	r2, [pc, #592]	; (8002678 <uip_process+0xb4c>)
 8002426:	8013      	strh	r3, [r2, #0]
                uip_connr->mss = tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
 8002428:	f240 620a 	movw	r2, #1546	; 0x60a
 800242c:	4293      	cmp	r3, r2
 800242e:	bf28      	it	cs
 8002430:	4613      	movcs	r3, r2
 8002432:	8263      	strh	r3, [r4, #18]
              uip_connr->initialmss =
 8002434:	82a3      	strh	r3, [r4, #20]
        uip_connr->tcpstateflags = UIP_ESTABLISHED;
 8002436:	2303      	movs	r3, #3
 8002438:	7663      	strb	r3, [r4, #25]
        uip_connr->rcv_nxt[0] = BUF->seqno[0];
 800243a:	4b8d      	ldr	r3, [pc, #564]	; (8002670 <uip_process+0xb44>)
 800243c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8002440:	7222      	strb	r2, [r4, #8]
        uip_connr->rcv_nxt[1] = BUF->seqno[1];
 8002442:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8002446:	7262      	strb	r2, [r4, #9]
        uip_connr->rcv_nxt[2] = BUF->seqno[2];
 8002448:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800244c:	72a2      	strb	r2, [r4, #10]
        uip_connr->rcv_nxt[3] = BUF->seqno[3];
 800244e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002452:	72e3      	strb	r3, [r4, #11]
        uip_add_rcv_nxt(1);
 8002454:	2001      	movs	r0, #1
 8002456:	f7ff fabf 	bl	80019d8 <uip_add_rcv_nxt>
        uip_flags = UIP_CONNECTED | UIP_NEWDATA;
 800245a:	4b84      	ldr	r3, [pc, #528]	; (800266c <uip_process+0xb40>)
 800245c:	2242      	movs	r2, #66	; 0x42
 800245e:	701a      	strb	r2, [r3, #0]
        uip_connr->len = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	8223      	strh	r3, [r4, #16]
        uip_len = 0;
 8002464:	4a85      	ldr	r2, [pc, #532]	; (800267c <uip_process+0xb50>)
 8002466:	8013      	strh	r3, [r2, #0]
        uip_slen = 0;
 8002468:	4a85      	ldr	r2, [pc, #532]	; (8002680 <uip_process+0xb54>)
 800246a:	8013      	strh	r3, [r2, #0]
        UIP_APPCALL();
 800246c:	f7fe fd8c 	bl	8000f88 <NetApp>
        goto appsend;
 8002470:	f7ff bbd6 	b.w	8001c20 <uip_process+0xf4>
              if (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0)
 8002474:	f103 0237 	add.w	r2, r3, #55	; 0x37
 8002478:	497d      	ldr	r1, [pc, #500]	; (8002670 <uip_process+0xb44>)
 800247a:	5c8a      	ldrb	r2, [r1, r2]
 800247c:	2a00      	cmp	r2, #0
 800247e:	d0da      	beq.n	8002436 <uip_process+0x90a>
              c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
 8002480:	4413      	add	r3, r2
 8002482:	4a7c      	ldr	r2, [pc, #496]	; (8002674 <uip_process+0xb48>)
 8002484:	7013      	strb	r3, [r2, #0]
 8002486:	e7ab      	b.n	80023e0 <uip_process+0x8b4>
      uip_flags = UIP_ABORT;
 8002488:	4b78      	ldr	r3, [pc, #480]	; (800266c <uip_process+0xb40>)
 800248a:	2220      	movs	r2, #32
 800248c:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
 800248e:	f7fe fd7b 	bl	8000f88 <NetApp>
      uip_conn->tcpstateflags = UIP_CLOSED;
 8002492:	4b7c      	ldr	r3, [pc, #496]	; (8002684 <uip_process+0xb58>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2200      	movs	r2, #0
 8002498:	765a      	strb	r2, [r3, #25]
      goto reset;
 800249a:	e588      	b.n	8001fae <uip_process+0x482>
      if (BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED))
 800249c:	4b74      	ldr	r3, [pc, #464]	; (8002670 <uip_process+0xb44>)
 800249e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80024a2:	f013 0f01 	tst.w	r3, #1
 80024a6:	d025      	beq.n	80024f4 <uip_process+0x9c8>
 80024a8:	f011 0f10 	tst.w	r1, #16
 80024ac:	d122      	bne.n	80024f4 <uip_process+0x9c8>
        if (uip_outstanding(uip_connr))
 80024ae:	8a23      	ldrh	r3, [r4, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f47f aba7 	bne.w	8001c04 <uip_process+0xd8>
        uip_add_rcv_nxt(1 + uip_len);
 80024b6:	4d71      	ldr	r5, [pc, #452]	; (800267c <uip_process+0xb50>)
 80024b8:	8828      	ldrh	r0, [r5, #0]
 80024ba:	3001      	adds	r0, #1
 80024bc:	b280      	uxth	r0, r0
 80024be:	f7ff fa8b 	bl	80019d8 <uip_add_rcv_nxt>
        uip_flags |= UIP_CLOSE;
 80024c2:	4a6a      	ldr	r2, [pc, #424]	; (800266c <uip_process+0xb40>)
 80024c4:	7813      	ldrb	r3, [r2, #0]
 80024c6:	f043 0310 	orr.w	r3, r3, #16
 80024ca:	7013      	strb	r3, [r2, #0]
        if (uip_len > 0)
 80024cc:	882a      	ldrh	r2, [r5, #0]
 80024ce:	b11a      	cbz	r2, 80024d8 <uip_process+0x9ac>
          uip_flags |= UIP_NEWDATA;
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	4a65      	ldr	r2, [pc, #404]	; (800266c <uip_process+0xb40>)
 80024d6:	7013      	strb	r3, [r2, #0]
        UIP_APPCALL();
 80024d8:	f7fe fd56 	bl	8000f88 <NetApp>
        uip_connr->len = 1;
 80024dc:	2301      	movs	r3, #1
 80024de:	8223      	strh	r3, [r4, #16]
        uip_connr->tcpstateflags = UIP_LAST_ACK;
 80024e0:	2308      	movs	r3, #8
 80024e2:	7663      	strb	r3, [r4, #25]
        uip_connr->nrtx = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	76e3      	strb	r3, [r4, #27]
        BUF->flags = TCP_FIN | TCP_ACK;
 80024e8:	4b61      	ldr	r3, [pc, #388]	; (8002670 <uip_process+0xb44>)
 80024ea:	2211      	movs	r2, #17
 80024ec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        goto tcp_send_nodata;
 80024f0:	f7ff bba4 	b.w	8001c3c <uip_process+0x110>
      if ((BUF->flags & TCP_URG) != 0)
 80024f4:	f013 0f20 	tst.w	r3, #32
 80024f8:	d00f      	beq.n	800251a <uip_process+0x9ee>
        uip_appdata = ((char *)uip_appdata) + ((BUF->urgp[0] << 8) | BUF->urgp[1]);
 80024fa:	485d      	ldr	r0, [pc, #372]	; (8002670 <uip_process+0xb44>)
 80024fc:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8002500:	021a      	lsls	r2, r3, #8
 8002502:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002506:	ea42 0603 	orr.w	r6, r2, r3
 800250a:	4d5f      	ldr	r5, [pc, #380]	; (8002688 <uip_process+0xb5c>)
 800250c:	6828      	ldr	r0, [r5, #0]
 800250e:	4430      	add	r0, r6
 8002510:	6028      	str	r0, [r5, #0]
        uip_len -= (BUF->urgp[0] << 8) | BUF->urgp[1];
 8002512:	485a      	ldr	r0, [pc, #360]	; (800267c <uip_process+0xb50>)
 8002514:	8802      	ldrh	r2, [r0, #0]
 8002516:	1b93      	subs	r3, r2, r6
 8002518:	8003      	strh	r3, [r0, #0]
      if (uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED))
 800251a:	4b58      	ldr	r3, [pc, #352]	; (800267c <uip_process+0xb50>)
 800251c:	8818      	ldrh	r0, [r3, #0]
 800251e:	b148      	cbz	r0, 8002534 <uip_process+0xa08>
 8002520:	f011 0f10 	tst.w	r1, #16
 8002524:	d106      	bne.n	8002534 <uip_process+0xa08>
        uip_flags |= UIP_NEWDATA;
 8002526:	4a51      	ldr	r2, [pc, #324]	; (800266c <uip_process+0xb40>)
 8002528:	7813      	ldrb	r3, [r2, #0]
 800252a:	f043 0302 	orr.w	r3, r3, #2
 800252e:	7013      	strb	r3, [r2, #0]
        uip_add_rcv_nxt(uip_len);
 8002530:	f7ff fa52 	bl	80019d8 <uip_add_rcv_nxt>
      tmp16 = ((u16_t)BUF->wnd[0] << 8) + (u16_t)BUF->wnd[1];
 8002534:	4b4e      	ldr	r3, [pc, #312]	; (8002670 <uip_process+0xb44>)
 8002536:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800253a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800253e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002542:	b29b      	uxth	r3, r3
 8002544:	4a4c      	ldr	r2, [pc, #304]	; (8002678 <uip_process+0xb4c>)
 8002546:	8013      	strh	r3, [r2, #0]
      if (tmp16 > uip_connr->initialmss ||
 8002548:	8aa2      	ldrh	r2, [r4, #20]
 800254a:	4293      	cmp	r3, r2
 800254c:	d800      	bhi.n	8002550 <uip_process+0xa24>
 800254e:	b90b      	cbnz	r3, 8002554 <uip_process+0xa28>
        tmp16 = uip_connr->initialmss;
 8002550:	4b49      	ldr	r3, [pc, #292]	; (8002678 <uip_process+0xb4c>)
 8002552:	801a      	strh	r2, [r3, #0]
      uip_connr->mss = tmp16;
 8002554:	4b48      	ldr	r3, [pc, #288]	; (8002678 <uip_process+0xb4c>)
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	8263      	strh	r3, [r4, #18]
      if (uip_flags & (UIP_NEWDATA | UIP_ACKDATA))
 800255a:	4b44      	ldr	r3, [pc, #272]	; (800266c <uip_process+0xb40>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	f013 0f03 	tst.w	r3, #3
 8002562:	f43f ab4f 	beq.w	8001c04 <uip_process+0xd8>
        uip_slen = 0;
 8002566:	4b46      	ldr	r3, [pc, #280]	; (8002680 <uip_process+0xb54>)
 8002568:	2200      	movs	r2, #0
 800256a:	801a      	strh	r2, [r3, #0]
        UIP_APPCALL();
 800256c:	f7fe fd0c 	bl	8000f88 <NetApp>
 8002570:	f7ff bb56 	b.w	8001c20 <uip_process+0xf4>
        if (uip_flags & UIP_CLOSE)
 8002574:	f013 0f10 	tst.w	r3, #16
 8002578:	d00d      	beq.n	8002596 <uip_process+0xa6a>
          uip_slen = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	4a40      	ldr	r2, [pc, #256]	; (8002680 <uip_process+0xb54>)
 800257e:	8013      	strh	r3, [r2, #0]
          uip_connr->len = 1;
 8002580:	2201      	movs	r2, #1
 8002582:	8222      	strh	r2, [r4, #16]
          uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
 8002584:	2204      	movs	r2, #4
 8002586:	7662      	strb	r2, [r4, #25]
          uip_connr->nrtx = 0;
 8002588:	76e3      	strb	r3, [r4, #27]
          BUF->flags = TCP_FIN | TCP_ACK;
 800258a:	4b39      	ldr	r3, [pc, #228]	; (8002670 <uip_process+0xb44>)
 800258c:	2211      	movs	r2, #17
 800258e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          goto tcp_send_nodata;
 8002592:	f7ff bb53 	b.w	8001c3c <uip_process+0x110>
        if (uip_slen > 0)
 8002596:	4a3a      	ldr	r2, [pc, #232]	; (8002680 <uip_process+0xb54>)
 8002598:	8812      	ldrh	r2, [r2, #0]
 800259a:	b172      	cbz	r2, 80025ba <uip_process+0xa8e>
          if ((uip_flags & UIP_ACKDATA) != 0)
 800259c:	f013 0f01 	tst.w	r3, #1
 80025a0:	d001      	beq.n	80025a6 <uip_process+0xa7a>
            uip_connr->len = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	8223      	strh	r3, [r4, #16]
          if (uip_connr->len == 0)
 80025a6:	8a23      	ldrh	r3, [r4, #16]
 80025a8:	b9db      	cbnz	r3, 80025e2 <uip_process+0xab6>
            if (uip_slen > uip_connr->mss)
 80025aa:	8a63      	ldrh	r3, [r4, #18]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d901      	bls.n	80025b4 <uip_process+0xa88>
              uip_slen = uip_connr->mss;
 80025b0:	4a33      	ldr	r2, [pc, #204]	; (8002680 <uip_process+0xb54>)
 80025b2:	8013      	strh	r3, [r2, #0]
            uip_connr->len = uip_slen;
 80025b4:	4b32      	ldr	r3, [pc, #200]	; (8002680 <uip_process+0xb54>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	8223      	strh	r3, [r4, #16]
        uip_connr->nrtx = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	76e3      	strb	r3, [r4, #27]
        uip_appdata = uip_sappdata;
 80025be:	4b33      	ldr	r3, [pc, #204]	; (800268c <uip_process+0xb60>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4b31      	ldr	r3, [pc, #196]	; (8002688 <uip_process+0xb5c>)
 80025c4:	601a      	str	r2, [r3, #0]
        if (uip_slen > 0 && uip_connr->len > 0)
 80025c6:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <uip_process+0xb54>)
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b16b      	cbz	r3, 80025e8 <uip_process+0xabc>
 80025cc:	8a23      	ldrh	r3, [r4, #16]
 80025ce:	b15b      	cbz	r3, 80025e8 <uip_process+0xabc>
          uip_len = uip_connr->len + UIP_TCPIP_HLEN;
 80025d0:	3328      	adds	r3, #40	; 0x28
 80025d2:	4a2a      	ldr	r2, [pc, #168]	; (800267c <uip_process+0xb50>)
 80025d4:	8013      	strh	r3, [r2, #0]
          BUF->flags = TCP_ACK | TCP_PSH;
 80025d6:	4b26      	ldr	r3, [pc, #152]	; (8002670 <uip_process+0xb44>)
 80025d8:	2218      	movs	r2, #24
 80025da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          goto tcp_send_noopts;
 80025de:	f7ff bb30 	b.w	8001c42 <uip_process+0x116>
            uip_slen = uip_connr->len;
 80025e2:	4a27      	ldr	r2, [pc, #156]	; (8002680 <uip_process+0xb54>)
 80025e4:	8013      	strh	r3, [r2, #0]
 80025e6:	e7e8      	b.n	80025ba <uip_process+0xa8e>
        if (uip_flags & UIP_NEWDATA)
 80025e8:	4b20      	ldr	r3, [pc, #128]	; (800266c <uip_process+0xb40>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	f013 0f02 	tst.w	r3, #2
 80025f0:	f43f ab08 	beq.w	8001c04 <uip_process+0xd8>
          uip_len = UIP_TCPIP_HLEN;
 80025f4:	4b21      	ldr	r3, [pc, #132]	; (800267c <uip_process+0xb50>)
 80025f6:	2228      	movs	r2, #40	; 0x28
 80025f8:	801a      	strh	r2, [r3, #0]
          BUF->flags = TCP_ACK;
 80025fa:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <uip_process+0xb44>)
 80025fc:	2210      	movs	r2, #16
 80025fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          goto tcp_send_noopts;
 8002602:	f7ff bb1e 	b.w	8001c42 <uip_process+0x116>
      if (uip_flags & UIP_ACKDATA)
 8002606:	4b19      	ldr	r3, [pc, #100]	; (800266c <uip_process+0xb40>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	f013 0f01 	tst.w	r3, #1
 800260e:	f43f aaf9 	beq.w	8001c04 <uip_process+0xd8>
        uip_connr->tcpstateflags = UIP_CLOSED;
 8002612:	2300      	movs	r3, #0
 8002614:	7663      	strb	r3, [r4, #25]
        uip_flags = UIP_CLOSE;
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <uip_process+0xb40>)
 8002618:	2210      	movs	r2, #16
 800261a:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
 800261c:	f7fe fcb4 	bl	8000f88 <NetApp>
 8002620:	f7ff baf0 	b.w	8001c04 <uip_process+0xd8>
      if (uip_len > 0)
 8002624:	4b15      	ldr	r3, [pc, #84]	; (800267c <uip_process+0xb50>)
 8002626:	8818      	ldrh	r0, [r3, #0]
 8002628:	b108      	cbz	r0, 800262e <uip_process+0xb02>
        uip_add_rcv_nxt(uip_len);
 800262a:	f7ff f9d5 	bl	80019d8 <uip_add_rcv_nxt>
      if (BUF->flags & TCP_FIN)
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <uip_process+0xb44>)
 8002630:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002634:	f013 0f01 	tst.w	r3, #1
 8002638:	d02d      	beq.n	8002696 <uip_process+0xb6a>
        if (uip_flags & UIP_ACKDATA)
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <uip_process+0xb40>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	f013 0f01 	tst.w	r3, #1
 8002642:	d025      	beq.n	8002690 <uip_process+0xb64>
          uip_connr->tcpstateflags = UIP_TIME_WAIT;
 8002644:	2307      	movs	r3, #7
 8002646:	7663      	strb	r3, [r4, #25]
          uip_connr->timer = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	76a3      	strb	r3, [r4, #26]
          uip_connr->len = 0;
 800264c:	8223      	strh	r3, [r4, #16]
        uip_add_rcv_nxt(1);
 800264e:	2001      	movs	r0, #1
 8002650:	f7ff f9c2 	bl	80019d8 <uip_add_rcv_nxt>
        uip_flags = UIP_CLOSE;
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <uip_process+0xb40>)
 8002656:	2210      	movs	r2, #16
 8002658:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
 800265a:	f7fe fc95 	bl	8000f88 <NetApp>
  BUF->flags = TCP_ACK;
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <uip_process+0xb44>)
 8002660:	2210      	movs	r2, #16
 8002662:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8002666:	f7ff bae9 	b.w	8001c3c <uip_process+0x110>
 800266a:	bf00      	nop
 800266c:	20000634 	.word	0x20000634
 8002670:	200006bc 	.word	0x200006bc
 8002674:	20000598 	.word	0x20000598
 8002678:	200005a2 	.word	0x200005a2
 800267c:	20000628 	.word	0x20000628
 8002680:	20000cfe 	.word	0x20000cfe
 8002684:	20000640 	.word	0x20000640
 8002688:	2000063c 	.word	0x2000063c
 800268c:	2000062c 	.word	0x2000062c
          uip_connr->tcpstateflags = UIP_CLOSING;
 8002690:	2306      	movs	r3, #6
 8002692:	7663      	strb	r3, [r4, #25]
 8002694:	e7db      	b.n	800264e <uip_process+0xb22>
      else if (uip_flags & UIP_ACKDATA)
 8002696:	4b22      	ldr	r3, [pc, #136]	; (8002720 <uip_process+0xbf4>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	f013 0f01 	tst.w	r3, #1
 800269e:	d005      	beq.n	80026ac <uip_process+0xb80>
        uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
 80026a0:	2305      	movs	r3, #5
 80026a2:	7663      	strb	r3, [r4, #25]
        uip_connr->len = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	8223      	strh	r3, [r4, #16]
        goto drop;
 80026a8:	f7ff baac 	b.w	8001c04 <uip_process+0xd8>
      if (uip_len > 0)
 80026ac:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <uip_process+0xbf8>)
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1d4      	bne.n	800265e <uip_process+0xb32>
 80026b4:	f7ff baa6 	b.w	8001c04 <uip_process+0xd8>
      if (uip_len > 0)
 80026b8:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <uip_process+0xbf8>)
 80026ba:	8818      	ldrh	r0, [r3, #0]
 80026bc:	b108      	cbz	r0, 80026c2 <uip_process+0xb96>
        uip_add_rcv_nxt(uip_len);
 80026be:	f7ff f98b 	bl	80019d8 <uip_add_rcv_nxt>
      if (BUF->flags & TCP_FIN)
 80026c2:	4b19      	ldr	r3, [pc, #100]	; (8002728 <uip_process+0xbfc>)
 80026c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80026c8:	f013 0f01 	tst.w	r3, #1
 80026cc:	d00c      	beq.n	80026e8 <uip_process+0xbbc>
        uip_connr->tcpstateflags = UIP_TIME_WAIT;
 80026ce:	2307      	movs	r3, #7
 80026d0:	7663      	strb	r3, [r4, #25]
        uip_connr->timer = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	76a3      	strb	r3, [r4, #26]
        uip_add_rcv_nxt(1);
 80026d6:	2001      	movs	r0, #1
 80026d8:	f7ff f97e 	bl	80019d8 <uip_add_rcv_nxt>
        uip_flags = UIP_CLOSE;
 80026dc:	4b10      	ldr	r3, [pc, #64]	; (8002720 <uip_process+0xbf4>)
 80026de:	2210      	movs	r2, #16
 80026e0:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
 80026e2:	f7fe fc51 	bl	8000f88 <NetApp>
        goto tcp_send_ack;
 80026e6:	e7ba      	b.n	800265e <uip_process+0xb32>
      if (uip_len > 0)
 80026e8:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <uip_process+0xbf8>)
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1b6      	bne.n	800265e <uip_process+0xb32>
 80026f0:	f7ff ba88 	b.w	8001c04 <uip_process+0xd8>
      if (uip_flags & UIP_ACKDATA)
 80026f4:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <uip_process+0xbf4>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	f013 0f01 	tst.w	r3, #1
 80026fc:	f43f aa82 	beq.w	8001c04 <uip_process+0xd8>
        uip_connr->tcpstateflags = UIP_TIME_WAIT;
 8002700:	2307      	movs	r3, #7
 8002702:	7663      	strb	r3, [r4, #25]
        uip_connr->timer = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	76a3      	strb	r3, [r4, #26]
 8002708:	f7ff ba7c 	b.w	8001c04 <uip_process+0xd8>
    BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <uip_process+0xbfc>)
 800270e:	2206      	movs	r2, #6
 8002710:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
 8002714:	220a      	movs	r2, #10
 8002716:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800271a:	f7ff bac9 	b.w	8001cb0 <uip_process+0x184>
 800271e:	bf00      	nop
 8002720:	20000634 	.word	0x20000634
 8002724:	20000628 	.word	0x20000628
 8002728:	200006bc 	.word	0x200006bc

0800272c <uip_udp_new>:
{
 800272c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272e:	4605      	mov	r5, r0
 8002730:	460e      	mov	r6, r1
  ++lastport;
 8002732:	4a23      	ldr	r2, [pc, #140]	; (80027c0 <uip_udp_new+0x94>)
 8002734:	8813      	ldrh	r3, [r2, #0]
 8002736:	3301      	adds	r3, #1
 8002738:	b29b      	uxth	r3, r3
 800273a:	8013      	strh	r3, [r2, #0]
  if (lastport >= 32000)
 800273c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002740:	d303      	bcc.n	800274a <uip_udp_new+0x1e>
    lastport = 4096;
 8002742:	4613      	mov	r3, r2
 8002744:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002748:	801a      	strh	r2, [r3, #0]
  for (c = 0; c < UIP_UDP_CONNS; ++c)
 800274a:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <uip_udp_new+0x98>)
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <uip_udp_new+0x98>)
 8002752:	781c      	ldrb	r4, [r3, #0]
 8002754:	b96c      	cbnz	r4, 8002772 <uip_udp_new+0x46>
    if (uip_udp_conns[c].lport == htons(lastport))
 8002756:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <uip_udp_new+0x9c>)
 8002758:	eb03 1384 	add.w	r3, r3, r4, lsl #6
 800275c:	889f      	ldrh	r7, [r3, #4]
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <uip_udp_new+0x94>)
 8002760:	8818      	ldrh	r0, [r3, #0]
 8002762:	f7ff f9a9 	bl	8001ab8 <htons>
 8002766:	4287      	cmp	r7, r0
 8002768:	d0e3      	beq.n	8002732 <uip_udp_new+0x6>
  for (c = 0; c < UIP_UDP_CONNS; ++c)
 800276a:	3401      	adds	r4, #1
 800276c:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <uip_udp_new+0x98>)
 800276e:	701c      	strb	r4, [r3, #0]
 8002770:	e7ee      	b.n	8002750 <uip_udp_new+0x24>
  for (c = 0; c < UIP_UDP_CONNS; ++c)
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
 8002776:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <uip_udp_new+0x98>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	b963      	cbnz	r3, 8002796 <uip_udp_new+0x6a>
    if (uip_udp_conns[c].lport == 0)
 800277c:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <uip_udp_new+0x9c>)
 800277e:	eb02 1283 	add.w	r2, r2, r3, lsl #6
 8002782:	8892      	ldrh	r2, [r2, #4]
 8002784:	b11a      	cbz	r2, 800278e <uip_udp_new+0x62>
  for (c = 0; c < UIP_UDP_CONNS; ++c)
 8002786:	3301      	adds	r3, #1
 8002788:	4a0e      	ldr	r2, [pc, #56]	; (80027c4 <uip_udp_new+0x98>)
 800278a:	7013      	strb	r3, [r2, #0]
 800278c:	e7f3      	b.n	8002776 <uip_udp_new+0x4a>
      conn = &uip_udp_conns[c];
 800278e:	480e      	ldr	r0, [pc, #56]	; (80027c8 <uip_udp_new+0x9c>)
 8002790:	eb00 1083 	add.w	r0, r0, r3, lsl #6
      break;
 8002794:	e000      	b.n	8002798 <uip_udp_new+0x6c>
  conn = 0;
 8002796:	2000      	movs	r0, #0
  if (conn == 0)
 8002798:	b168      	cbz	r0, 80027b6 <uip_udp_new+0x8a>
  conn->lport = HTONS(lastport);
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <uip_udp_new+0x94>)
 800279c:	881a      	ldrh	r2, [r3, #0]
 800279e:	0a13      	lsrs	r3, r2, #8
 80027a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80027a4:	8083      	strh	r3, [r0, #4]
  conn->rport = rport;
 80027a6:	80c6      	strh	r6, [r0, #6]
  if (ripaddr == NULL)
 80027a8:	b135      	cbz	r5, 80027b8 <uip_udp_new+0x8c>
    uip_ipaddr_copy(&conn->ripaddr, ripaddr);
 80027aa:	882b      	ldrh	r3, [r5, #0]
 80027ac:	8003      	strh	r3, [r0, #0]
 80027ae:	886b      	ldrh	r3, [r5, #2]
 80027b0:	8043      	strh	r3, [r0, #2]
  conn->ttl = UIP_TTL;
 80027b2:	2340      	movs	r3, #64	; 0x40
 80027b4:	7203      	strb	r3, [r0, #8]
}
 80027b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset(conn->ripaddr, 0, sizeof(uip_ipaddr_t));
 80027b8:	2300      	movs	r3, #0
 80027ba:	6003      	str	r3, [r0, #0]
 80027bc:	e7f9      	b.n	80027b2 <uip_udp_new+0x86>
 80027be:	bf00      	nop
 80027c0:	200005a0 	.word	0x200005a0
 80027c4:	20000598 	.word	0x20000598
 80027c8:	20000d00 	.word	0x20000d00

080027cc <uip_send>:
/*---------------------------------------------------------------------------*/
void
uip_send(const void *data, int len)
{
  if (len > 0)
 80027cc:	2900      	cmp	r1, #0
 80027ce:	dd0c      	ble.n	80027ea <uip_send+0x1e>
{
 80027d0:	b508      	push	{r3, lr}
  {
    uip_slen = len;
 80027d2:	b28a      	uxth	r2, r1
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <uip_send+0x20>)
 80027d6:	801a      	strh	r2, [r3, #0]
    if (data != uip_sappdata)
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <uip_send+0x24>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4283      	cmp	r3, r0
 80027de:	d003      	beq.n	80027e8 <uip_send+0x1c>
 80027e0:	4601      	mov	r1, r0
    {
      memcpy(uip_sappdata, (data), uip_slen);
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 fc27 	bl	8005036 <memcpy>
    }
  }
}
 80027e8:	bd08      	pop	{r3, pc}
 80027ea:	4770      	bx	lr
 80027ec:	20000cfe 	.word	0x20000cfe
 80027f0:	2000062c 	.word	0x2000062c

080027f4 <uip_arp_update>:

}
/*-----------------------------------------------------------------------------------*/
static void
uip_arp_update(u16_t *ipaddr, struct uip_eth_addr *ethaddr)
{
 80027f4:	b4f0      	push	{r4, r5, r6, r7}
  register struct arp_entry *tabptr = arp_table;
  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 80027f6:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <uip_arp_update+0xec>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
  register struct arp_entry *tabptr = arp_table;
 80027fc:	4e39      	ldr	r6, [pc, #228]	; (80028e4 <uip_arp_update+0xf0>)
  for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 80027fe:	e002      	b.n	8002806 <uip_arp_update+0x12>
 8002800:	3301      	adds	r3, #1
 8002802:	4a37      	ldr	r2, [pc, #220]	; (80028e0 <uip_arp_update+0xec>)
 8002804:	7013      	strb	r3, [r2, #0]
 8002806:	4b36      	ldr	r3, [pc, #216]	; (80028e0 <uip_arp_update+0xec>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b07      	cmp	r3, #7
 800280c:	d818      	bhi.n	8002840 <uip_arp_update+0x4c>
  {

    tabptr = &arp_table[i];
 800280e:	4d35      	ldr	r5, [pc, #212]	; (80028e4 <uip_arp_update+0xf0>)
 8002810:	005a      	lsls	r2, r3, #1
 8002812:	441a      	add	r2, r3
 8002814:	0094      	lsls	r4, r2, #2
 8002816:	192e      	adds	r6, r5, r4
    /* Only check those entries that are actually in use. */
    if (tabptr->ipaddr[0] != 0 &&
 8002818:	5b2a      	ldrh	r2, [r5, r4]
 800281a:	2a00      	cmp	r2, #0
 800281c:	d0f0      	beq.n	8002800 <uip_arp_update+0xc>
        tabptr->ipaddr[1] != 0)
 800281e:	8874      	ldrh	r4, [r6, #2]
    if (tabptr->ipaddr[0] != 0 &&
 8002820:	2c00      	cmp	r4, #0
 8002822:	d0ed      	beq.n	8002800 <uip_arp_update+0xc>
    {

      /* Check if the source IP address of the incoming packet matches
         the IP address in this ARP table entry. */
      if (ipaddr[0] == tabptr->ipaddr[0] &&
 8002824:	8805      	ldrh	r5, [r0, #0]
 8002826:	42aa      	cmp	r2, r5
 8002828:	d1ea      	bne.n	8002800 <uip_arp_update+0xc>
          ipaddr[1] == tabptr->ipaddr[1])
 800282a:	8842      	ldrh	r2, [r0, #2]
      if (ipaddr[0] == tabptr->ipaddr[0] &&
 800282c:	4294      	cmp	r4, r2
 800282e:	d1e7      	bne.n	8002800 <uip_arp_update+0xc>
      {

        /* An old entry found, update this and return. */
        memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 8002830:	680c      	ldr	r4, [r1, #0]
 8002832:	6074      	str	r4, [r6, #4]
 8002834:	8889      	ldrh	r1, [r1, #4]
 8002836:	8131      	strh	r1, [r6, #8]
        tabptr->time = arptime;
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <uip_arp_update+0xf4>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	72b3      	strb	r3, [r6, #10]

        return;
 800283e:	e022      	b.n	8002886 <uip_arp_update+0x92>

  /* If we get here, no existing ARP table entry was found, so we
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 8002840:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <uip_arp_update+0xec>)
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	e002      	b.n	800284e <uip_arp_update+0x5a>
 8002848:	3301      	adds	r3, #1
 800284a:	4a25      	ldr	r2, [pc, #148]	; (80028e0 <uip_arp_update+0xec>)
 800284c:	7013      	strb	r3, [r2, #0]
 800284e:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <uip_arp_update+0xec>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b07      	cmp	r3, #7
 8002854:	d80a      	bhi.n	800286c <uip_arp_update+0x78>
  {
    tabptr = &arp_table[i];
 8002856:	4d23      	ldr	r5, [pc, #140]	; (80028e4 <uip_arp_update+0xf0>)
 8002858:	005a      	lsls	r2, r3, #1
 800285a:	441a      	add	r2, r3
 800285c:	0094      	lsls	r4, r2, #2
 800285e:	192e      	adds	r6, r5, r4
    if (tabptr->ipaddr[0] == 0 &&
 8002860:	5b2a      	ldrh	r2, [r5, r4]
 8002862:	2a00      	cmp	r2, #0
 8002864:	d1f0      	bne.n	8002848 <uip_arp_update+0x54>
        tabptr->ipaddr[1] == 0)
 8002866:	8872      	ldrh	r2, [r6, #2]
    if (tabptr->ipaddr[0] == 0 &&
 8002868:	2a00      	cmp	r2, #0
 800286a:	d1ed      	bne.n	8002848 <uip_arp_update+0x54>
    }
  }

  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if (i == UIP_ARPTAB_SIZE)
 800286c:	2b08      	cmp	r3, #8
 800286e:	d00c      	beq.n	800288a <uip_arp_update+0x96>
    tabptr = &arp_table[i];
  }

  /* Now, i is the ARP table entry which we will fill with the new
     information. */
  memcpy(tabptr->ipaddr, ipaddr, 4);
 8002870:	6802      	ldr	r2, [r0, #0]
 8002872:	4633      	mov	r3, r6
 8002874:	f843 2b04 	str.w	r2, [r3], #4
  memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 8002878:	680a      	ldr	r2, [r1, #0]
 800287a:	6072      	str	r2, [r6, #4]
 800287c:	888a      	ldrh	r2, [r1, #4]
 800287e:	809a      	strh	r2, [r3, #4]
  tabptr->time = arptime;
 8002880:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <uip_arp_update+0xf4>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	72b3      	strb	r3, [r6, #10]
}
 8002886:	bcf0      	pop	{r4, r5, r6, r7}
 8002888:	4770      	bx	lr
    tmpage = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	4a17      	ldr	r2, [pc, #92]	; (80028ec <uip_arp_update+0xf8>)
 800288e:	7013      	strb	r3, [r2, #0]
    c = 0;
 8002890:	4a17      	ldr	r2, [pc, #92]	; (80028f0 <uip_arp_update+0xfc>)
 8002892:	7013      	strb	r3, [r2, #0]
    for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 8002894:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <uip_arp_update+0xec>)
 8002896:	7013      	strb	r3, [r2, #0]
 8002898:	e002      	b.n	80028a0 <uip_arp_update+0xac>
 800289a:	3301      	adds	r3, #1
 800289c:	4a10      	ldr	r2, [pc, #64]	; (80028e0 <uip_arp_update+0xec>)
 800289e:	7013      	strb	r3, [r2, #0]
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <uip_arp_update+0xec>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b07      	cmp	r3, #7
 80028a6:	d811      	bhi.n	80028cc <uip_arp_update+0xd8>
      if (arptime - tabptr->time > tmpage)
 80028a8:	4a0f      	ldr	r2, [pc, #60]	; (80028e8 <uip_arp_update+0xf4>)
 80028aa:	7814      	ldrb	r4, [r2, #0]
 80028ac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80028b0:	0095      	lsls	r5, r2, #2
 80028b2:	4a0c      	ldr	r2, [pc, #48]	; (80028e4 <uip_arp_update+0xf0>)
 80028b4:	442a      	add	r2, r5
 80028b6:	7a92      	ldrb	r2, [r2, #10]
 80028b8:	1aa6      	subs	r6, r4, r2
 80028ba:	4d0c      	ldr	r5, [pc, #48]	; (80028ec <uip_arp_update+0xf8>)
 80028bc:	782d      	ldrb	r5, [r5, #0]
 80028be:	42ae      	cmp	r6, r5
 80028c0:	ddeb      	ble.n	800289a <uip_arp_update+0xa6>
        tmpage = arptime - tabptr->time;
 80028c2:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <uip_arp_update+0xf8>)
 80028c4:	7016      	strb	r6, [r2, #0]
        c = i;
 80028c6:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <uip_arp_update+0xfc>)
 80028c8:	7013      	strb	r3, [r2, #0]
 80028ca:	e7e6      	b.n	800289a <uip_arp_update+0xa6>
    i = c;
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <uip_arp_update+0xfc>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	4a03      	ldr	r2, [pc, #12]	; (80028e0 <uip_arp_update+0xec>)
 80028d2:	7013      	strb	r3, [r2, #0]
    tabptr = &arp_table[i];
 80028d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80028d8:	009a      	lsls	r2, r3, #2
 80028da:	4e02      	ldr	r6, [pc, #8]	; (80028e4 <uip_arp_update+0xf0>)
 80028dc:	4416      	add	r6, r2
 80028de:	e7c7      	b.n	8002870 <uip_arp_update+0x7c>
 80028e0:	2000060e 	.word	0x2000060e
 80028e4:	200005ac 	.word	0x200005ac
 80028e8:	2000060c 	.word	0x2000060c
 80028ec:	20000614 	.word	0x20000614
 80028f0:	2000060d 	.word	0x2000060d

080028f4 <uip_arp_timer>:
{
 80028f4:	b410      	push	{r4}
  ++arptime;
 80028f6:	4b16      	ldr	r3, [pc, #88]	; (8002950 <uip_arp_timer+0x5c>)
 80028f8:	781c      	ldrb	r4, [r3, #0]
 80028fa:	3401      	adds	r4, #1
 80028fc:	b2e4      	uxtb	r4, r4
 80028fe:	701c      	strb	r4, [r3, #0]
  for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 8002900:	4b14      	ldr	r3, [pc, #80]	; (8002954 <uip_arp_timer+0x60>)
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	e002      	b.n	800290e <uip_arp_timer+0x1a>
 8002908:	3301      	adds	r3, #1
 800290a:	4a12      	ldr	r2, [pc, #72]	; (8002954 <uip_arp_timer+0x60>)
 800290c:	7013      	strb	r3, [r2, #0]
 800290e:	4b11      	ldr	r3, [pc, #68]	; (8002954 <uip_arp_timer+0x60>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b07      	cmp	r3, #7
 8002914:	d818      	bhi.n	8002948 <uip_arp_timer+0x54>
    if ((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
 8002916:	4810      	ldr	r0, [pc, #64]	; (8002958 <uip_arp_timer+0x64>)
 8002918:	005a      	lsls	r2, r3, #1
 800291a:	441a      	add	r2, r3
 800291c:	0091      	lsls	r1, r2, #2
 800291e:	1842      	adds	r2, r0, r1
 8002920:	5a41      	ldrh	r1, [r0, r1]
 8002922:	8852      	ldrh	r2, [r2, #2]
 8002924:	430a      	orrs	r2, r1
 8002926:	d0ef      	beq.n	8002908 <uip_arp_timer+0x14>
        arptime - tabptr->time >= UIP_ARP_MAXAGE)
 8002928:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800292c:	0091      	lsls	r1, r2, #2
 800292e:	4602      	mov	r2, r0
 8002930:	440a      	add	r2, r1
 8002932:	7a92      	ldrb	r2, [r2, #10]
 8002934:	1aa2      	subs	r2, r4, r2
    if ((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
 8002936:	2a77      	cmp	r2, #119	; 0x77
 8002938:	dde6      	ble.n	8002908 <uip_arp_timer+0x14>
      memset(tabptr->ipaddr, 0, 4);
 800293a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800293e:	008a      	lsls	r2, r1, #2
 8002940:	4601      	mov	r1, r0
 8002942:	2000      	movs	r0, #0
 8002944:	5088      	str	r0, [r1, r2]
 8002946:	e7df      	b.n	8002908 <uip_arp_timer+0x14>
}
 8002948:	f85d 4b04 	ldr.w	r4, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	2000060c 	.word	0x2000060c
 8002954:	2000060e 	.word	0x2000060e
 8002958:	200005ac 	.word	0x200005ac

0800295c <uip_arp_arpin>:
/*-----------------------------------------------------------------------------------*/
void
uip_arp_arpin(void)
{

  if (uip_len < sizeof(struct arp_hdr))
 800295c:	4b32      	ldr	r3, [pc, #200]	; (8002a28 <uip_arp_arpin+0xcc>)
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	2b29      	cmp	r3, #41	; 0x29
 8002962:	d90c      	bls.n	800297e <uip_arp_arpin+0x22>
{
 8002964:	b510      	push	{r4, lr}
  {
    uip_len = 0;
    return;
  }
  uip_len = 0;
 8002966:	4b30      	ldr	r3, [pc, #192]	; (8002a28 <uip_arp_arpin+0xcc>)
 8002968:	2200      	movs	r2, #0
 800296a:	801a      	strh	r2, [r3, #0]

  switch (BUF->opcode)
 800296c:	4b2f      	ldr	r3, [pc, #188]	; (8002a2c <uip_arp_arpin+0xd0>)
 800296e:	8a9b      	ldrh	r3, [r3, #20]
 8002970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002974:	d007      	beq.n	8002986 <uip_arp_arpin+0x2a>
 8002976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800297a:	d043      	beq.n	8002a04 <uip_arp_arpin+0xa8>
      }
      break;
  }

  return;
}
 800297c:	bd10      	pop	{r4, pc}
    uip_len = 0;
 800297e:	4b2a      	ldr	r3, [pc, #168]	; (8002a28 <uip_arp_arpin+0xcc>)
 8002980:	2200      	movs	r2, #0
 8002982:	801a      	strh	r2, [r3, #0]
 8002984:	4770      	bx	lr
      if (uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr))
 8002986:	4b29      	ldr	r3, [pc, #164]	; (8002a2c <uip_arp_arpin+0xd0>)
 8002988:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800298a:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <uip_arp_arpin+0xd4>)
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d1f4      	bne.n	800297c <uip_arp_arpin+0x20>
 8002992:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <uip_arp_arpin+0xd0>)
 8002994:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8002996:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <uip_arp_arpin+0xd4>)
 8002998:	885b      	ldrh	r3, [r3, #2]
 800299a:	429a      	cmp	r2, r3
 800299c:	d1ee      	bne.n	800297c <uip_arp_arpin+0x20>
        uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 800299e:	4c25      	ldr	r4, [pc, #148]	; (8002a34 <uip_arp_arpin+0xd8>)
 80029a0:	4621      	mov	r1, r4
 80029a2:	1da0      	adds	r0, r4, #6
 80029a4:	f7ff ff26 	bl	80027f4 <uip_arp_update>
        BUF->opcode = HTONS(2);
 80029a8:	2200      	movs	r2, #0
 80029aa:	f804 2c02 	strb.w	r2, [r4, #-2]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f804 2c01 	strb.w	r2, [r4, #-1]
        memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
 80029b4:	6821      	ldr	r1, [r4, #0]
 80029b6:	f8c4 100a 	str.w	r1, [r4, #10]
 80029ba:	88a1      	ldrh	r1, [r4, #4]
 80029bc:	81e1      	strh	r1, [r4, #14]
        memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 80029be:	491e      	ldr	r1, [pc, #120]	; (8002a38 <uip_arp_arpin+0xdc>)
 80029c0:	6808      	ldr	r0, [r1, #0]
 80029c2:	6020      	str	r0, [r4, #0]
 80029c4:	8889      	ldrh	r1, [r1, #4]
 80029c6:	80a1      	strh	r1, [r4, #4]
        memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 80029c8:	f844 0c10 	str.w	r0, [r4, #-16]
 80029cc:	f824 1c0c 	strh.w	r1, [r4, #-12]
        memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
 80029d0:	f8d4 100a 	ldr.w	r1, [r4, #10]
 80029d4:	f844 1c16 	str.w	r1, [r4, #-22]
 80029d8:	89e2      	ldrh	r2, [r4, #14]
 80029da:	f824 2c12 	strh.w	r2, [r4, #-18]
        BUF->dipaddr[0] = BUF->sipaddr[0];
 80029de:	88e2      	ldrh	r2, [r4, #6]
 80029e0:	8222      	strh	r2, [r4, #16]
        BUF->dipaddr[1] = BUF->sipaddr[1];
 80029e2:	8922      	ldrh	r2, [r4, #8]
 80029e4:	8262      	strh	r2, [r4, #18]
        BUF->sipaddr[0] = uip_hostaddr[0];
 80029e6:	4a12      	ldr	r2, [pc, #72]	; (8002a30 <uip_arp_arpin+0xd4>)
 80029e8:	8811      	ldrh	r1, [r2, #0]
 80029ea:	80e1      	strh	r1, [r4, #6]
        BUF->sipaddr[1] = uip_hostaddr[1];
 80029ec:	8852      	ldrh	r2, [r2, #2]
 80029ee:	8122      	strh	r2, [r4, #8]
        BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 80029f0:	2208      	movs	r2, #8
 80029f2:	f804 2c0a 	strb.w	r2, [r4, #-10]
 80029f6:	2206      	movs	r2, #6
 80029f8:	f804 2c09 	strb.w	r2, [r4, #-9]
        uip_len = sizeof(struct arp_hdr);
 80029fc:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <uip_arp_arpin+0xcc>)
 80029fe:	222a      	movs	r2, #42	; 0x2a
 8002a00:	801a      	strh	r2, [r3, #0]
 8002a02:	e7bb      	b.n	800297c <uip_arp_arpin+0x20>
      if (uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr))
 8002a04:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <uip_arp_arpin+0xd0>)
 8002a06:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <uip_arp_arpin+0xd4>)
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d1b5      	bne.n	800297c <uip_arp_arpin+0x20>
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <uip_arp_arpin+0xd0>)
 8002a12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <uip_arp_arpin+0xd4>)
 8002a16:	885b      	ldrh	r3, [r3, #2]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d1af      	bne.n	800297c <uip_arp_arpin+0x20>
        uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 8002a1c:	4805      	ldr	r0, [pc, #20]	; (8002a34 <uip_arp_arpin+0xd8>)
 8002a1e:	4601      	mov	r1, r0
 8002a20:	3006      	adds	r0, #6
 8002a22:	f7ff fee7 	bl	80027f4 <uip_arp_update>
 8002a26:	e7a9      	b.n	800297c <uip_arp_arpin+0x20>
 8002a28:	20000628 	.word	0x20000628
 8002a2c:	200006bc 	.word	0x200006bc
 8002a30:	200006b8 	.word	0x200006b8
 8002a34:	200006d2 	.word	0x200006d2
 8002a38:	200005a4 	.word	0x200005a4

08002a3c <uip_arp_out>:
 * uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_out(void)
{
 8002a3c:	b430      	push	{r4, r5}

     If not ARP table entry is found, we overwrite the original IP
     packet with an ARP request for the IP address. */

  /* First check if destination is a local broadcast. */
  if (uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr))
 8002a3e:	4b49      	ldr	r3, [pc, #292]	; (8002b64 <uip_arp_out+0x128>)
 8002a40:	8bda      	ldrh	r2, [r3, #30]
 8002a42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d01a      	beq.n	8002a80 <uip_arp_out+0x44>
    memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
  }
  else
  {
    /* Check if the destination address is on the local network. */
    if (!uip_ipaddr_maskcmp(IPBUF->destipaddr, uip_hostaddr, uip_netmask))
 8002a4a:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <uip_arp_out+0x12c>)
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	4947      	ldr	r1, [pc, #284]	; (8002b6c <uip_arp_out+0x130>)
 8002a50:	8809      	ldrh	r1, [r1, #0]
 8002a52:	4053      	eors	r3, r2
 8002a54:	4219      	tst	r1, r3
 8002a56:	d108      	bne.n	8002a6a <uip_arp_out+0x2e>
 8002a58:	4b42      	ldr	r3, [pc, #264]	; (8002b64 <uip_arp_out+0x128>)
 8002a5a:	8c19      	ldrh	r1, [r3, #32]
 8002a5c:	4b42      	ldr	r3, [pc, #264]	; (8002b68 <uip_arp_out+0x12c>)
 8002a5e:	885b      	ldrh	r3, [r3, #2]
 8002a60:	4842      	ldr	r0, [pc, #264]	; (8002b6c <uip_arp_out+0x130>)
 8002a62:	8840      	ldrh	r0, [r0, #2]
 8002a64:	404b      	eors	r3, r1
 8002a66:	4218      	tst	r0, r3
 8002a68:	d017      	beq.n	8002a9a <uip_arp_out+0x5e>
    {
      /* Destination address was not on the local network, so we need to
      use the default router's IP address instead of the destination
      address when determining the MAC address. */
      uip_ipaddr_copy(ipaddr, uip_draddr);
 8002a6a:	4b41      	ldr	r3, [pc, #260]	; (8002b70 <uip_arp_out+0x134>)
 8002a6c:	4a41      	ldr	r2, [pc, #260]	; (8002b74 <uip_arp_out+0x138>)
 8002a6e:	8811      	ldrh	r1, [r2, #0]
 8002a70:	8019      	strh	r1, [r3, #0]
 8002a72:	8852      	ldrh	r2, [r2, #2]
 8002a74:	805a      	strh	r2, [r3, #2]
    {
      /* Else, we use the destination IP address. */
      uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
    }

    for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 8002a76:	4b40      	ldr	r3, [pc, #256]	; (8002b78 <uip_arp_out+0x13c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
  struct arp_entry *tabptr = arp_table;
 8002a7c:	4d3f      	ldr	r5, [pc, #252]	; (8002b7c <uip_arp_out+0x140>)
    for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 8002a7e:	e013      	b.n	8002aa8 <uip_arp_out+0x6c>
  if (uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr))
 8002a80:	4b38      	ldr	r3, [pc, #224]	; (8002b64 <uip_arp_out+0x128>)
 8002a82:	8c19      	ldrh	r1, [r3, #32]
 8002a84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a88:	4299      	cmp	r1, r3
 8002a8a:	d1de      	bne.n	8002a4a <uip_arp_out+0xe>
    memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
 8002a8c:	4b35      	ldr	r3, [pc, #212]	; (8002b64 <uip_arp_out+0x128>)
 8002a8e:	4a3c      	ldr	r2, [pc, #240]	; (8002b80 <uip_arp_out+0x144>)
 8002a90:	6810      	ldr	r0, [r2, #0]
 8002a92:	6018      	str	r0, [r3, #0]
 8002a94:	8892      	ldrh	r2, [r2, #4]
 8002a96:	809a      	strh	r2, [r3, #4]
 8002a98:	e021      	b.n	8002ade <uip_arp_out+0xa2>
      uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
 8002a9a:	4b35      	ldr	r3, [pc, #212]	; (8002b70 <uip_arp_out+0x134>)
 8002a9c:	801a      	strh	r2, [r3, #0]
 8002a9e:	8059      	strh	r1, [r3, #2]
 8002aa0:	e7e9      	b.n	8002a76 <uip_arp_out+0x3a>
    for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	4a34      	ldr	r2, [pc, #208]	; (8002b78 <uip_arp_out+0x13c>)
 8002aa6:	7013      	strb	r3, [r2, #0]
 8002aa8:	4b33      	ldr	r3, [pc, #204]	; (8002b78 <uip_arp_out+0x13c>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b07      	cmp	r3, #7
 8002aae:	d80e      	bhi.n	8002ace <uip_arp_out+0x92>
    {
      tabptr = &arp_table[i];
 8002ab0:	4832      	ldr	r0, [pc, #200]	; (8002b7c <uip_arp_out+0x140>)
 8002ab2:	005a      	lsls	r2, r3, #1
 8002ab4:	441a      	add	r2, r3
 8002ab6:	0091      	lsls	r1, r2, #2
 8002ab8:	1845      	adds	r5, r0, r1
      if (uip_ipaddr_cmp(ipaddr, tabptr->ipaddr))
 8002aba:	4a2d      	ldr	r2, [pc, #180]	; (8002b70 <uip_arp_out+0x134>)
 8002abc:	8814      	ldrh	r4, [r2, #0]
 8002abe:	5a42      	ldrh	r2, [r0, r1]
 8002ac0:	4294      	cmp	r4, r2
 8002ac2:	d1ee      	bne.n	8002aa2 <uip_arp_out+0x66>
 8002ac4:	4a2a      	ldr	r2, [pc, #168]	; (8002b70 <uip_arp_out+0x134>)
 8002ac6:	8850      	ldrh	r0, [r2, #2]
 8002ac8:	886a      	ldrh	r2, [r5, #2]
 8002aca:	4290      	cmp	r0, r2
 8002acc:	d1e9      	bne.n	8002aa2 <uip_arp_out+0x66>
      {
        break;
      }
    }

    if (i == UIP_ARPTAB_SIZE)
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d016      	beq.n	8002b00 <uip_arp_out+0xc4>
      uip_len = sizeof(struct arp_hdr);
      return;
    }

    /* Build an ethernet header. */
    memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
 8002ad2:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <uip_arp_out+0x128>)
 8002ad4:	f855 2f04 	ldr.w	r2, [r5, #4]!
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	88aa      	ldrh	r2, [r5, #4]
 8002adc:	809a      	strh	r2, [r3, #4]
  }
  memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 8002ade:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <uip_arp_out+0x128>)
 8002ae0:	4a28      	ldr	r2, [pc, #160]	; (8002b84 <uip_arp_out+0x148>)
 8002ae2:	6811      	ldr	r1, [r2, #0]
 8002ae4:	f8c3 1006 	str.w	r1, [r3, #6]
 8002ae8:	8892      	ldrh	r2, [r2, #4]
 8002aea:	815a      	strh	r2, [r3, #10]

  IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
 8002aec:	2208      	movs	r2, #8
 8002aee:	731a      	strb	r2, [r3, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	735a      	strb	r2, [r3, #13]

  uip_len += sizeof(struct uip_eth_hdr);
 8002af4:	4a24      	ldr	r2, [pc, #144]	; (8002b88 <uip_arp_out+0x14c>)
 8002af6:	8813      	ldrh	r3, [r2, #0]
 8002af8:	330e      	adds	r3, #14
 8002afa:	8013      	strh	r3, [r2, #0]
}
 8002afc:	bc30      	pop	{r4, r5}
 8002afe:	4770      	bx	lr
      memset(BUF->ethhdr.dest.addr, 0xff, 6);
 8002b00:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <uip_arp_out+0x128>)
 8002b02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	809a      	strh	r2, [r3, #4]
      memset(BUF->dhwaddr.addr, 0x00, 6);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	621a      	str	r2, [r3, #32]
 8002b0e:	849a      	strh	r2, [r3, #36]	; 0x24
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 8002b10:	491c      	ldr	r1, [pc, #112]	; (8002b84 <uip_arp_out+0x148>)
 8002b12:	6808      	ldr	r0, [r1, #0]
 8002b14:	f8c3 0006 	str.w	r0, [r3, #6]
 8002b18:	8889      	ldrh	r1, [r1, #4]
 8002b1a:	8159      	strh	r1, [r3, #10]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 8002b1c:	f8c3 0016 	str.w	r0, [r3, #22]
 8002b20:	8359      	strh	r1, [r3, #26]
      uip_ipaddr_copy(BUF->dipaddr, ipaddr);
 8002b22:	4913      	ldr	r1, [pc, #76]	; (8002b70 <uip_arp_out+0x134>)
 8002b24:	8808      	ldrh	r0, [r1, #0]
 8002b26:	84d8      	strh	r0, [r3, #38]	; 0x26
 8002b28:	8849      	ldrh	r1, [r1, #2]
 8002b2a:	8519      	strh	r1, [r3, #40]	; 0x28
      uip_ipaddr_copy(BUF->sipaddr, uip_hostaddr);
 8002b2c:	490e      	ldr	r1, [pc, #56]	; (8002b68 <uip_arp_out+0x12c>)
 8002b2e:	8808      	ldrh	r0, [r1, #0]
 8002b30:	8398      	strh	r0, [r3, #28]
 8002b32:	8849      	ldrh	r1, [r1, #2]
 8002b34:	83d9      	strh	r1, [r3, #30]
      BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
 8002b36:	751a      	strb	r2, [r3, #20]
 8002b38:	2101      	movs	r1, #1
 8002b3a:	7559      	strb	r1, [r3, #21]
      BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
 8002b3c:	739a      	strb	r2, [r3, #14]
 8002b3e:	73d9      	strb	r1, [r3, #15]
      BUF->protocol = HTONS(UIP_ETHTYPE_IP);
 8002b40:	2108      	movs	r1, #8
 8002b42:	7419      	strb	r1, [r3, #16]
 8002b44:	745a      	strb	r2, [r3, #17]
      BUF->hwlen = 6;
 8002b46:	2206      	movs	r2, #6
 8002b48:	749a      	strb	r2, [r3, #18]
      BUF->protolen = 4;
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	74da      	strb	r2, [r3, #19]
      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 8002b4e:	7319      	strb	r1, [r3, #12]
 8002b50:	2206      	movs	r2, #6
 8002b52:	735a      	strb	r2, [r3, #13]
      uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
 8002b54:	3336      	adds	r3, #54	; 0x36
 8002b56:	4a0d      	ldr	r2, [pc, #52]	; (8002b8c <uip_arp_out+0x150>)
 8002b58:	6013      	str	r3, [r2, #0]
      uip_len = sizeof(struct arp_hdr);
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <uip_arp_out+0x14c>)
 8002b5c:	222a      	movs	r2, #42	; 0x2a
 8002b5e:	801a      	strh	r2, [r3, #0]
      return;
 8002b60:	e7cc      	b.n	8002afc <uip_arp_out+0xc0>
 8002b62:	bf00      	nop
 8002b64:	200006bc 	.word	0x200006bc
 8002b68:	200006b8 	.word	0x200006b8
 8002b6c:	200006b4 	.word	0x200006b4
 8002b70:	20000610 	.word	0x20000610
 8002b74:	200006b0 	.word	0x200006b0
 8002b78:	2000060e 	.word	0x2000060e
 8002b7c:	200005ac 	.word	0x200005ac
 8002b80:	08005174 	.word	0x08005174
 8002b84:	200005a4 	.word	0x200005a4
 8002b88:	20000628 	.word	0x20000628
 8002b8c:	2000063c 	.word	0x2000063c

08002b90 <timer_set>:
 * \param interval The interval before the timer expires.
 *
 */
void
timer_set(struct timer *t, clock_time_t interval)
{
 8002b90:	b510      	push	{r4, lr}
 8002b92:	4604      	mov	r4, r0
  t->interval = interval;
 8002b94:	6041      	str	r1, [r0, #4]
  t->start = clock_time();
 8002b96:	f002 f8f5 	bl	8004d84 <clock_time>
 8002b9a:	6020      	str	r0, [r4, #0]
}
 8002b9c:	bd10      	pop	{r4, pc}

08002b9e <timer_expired>:
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
int
timer_expired(struct timer *t)
{
 8002b9e:	b510      	push	{r4, lr}
 8002ba0:	4604      	mov	r4, r0
  return (clock_time_t)(clock_time() - t->start) >= (clock_time_t)t->interval;
 8002ba2:	f002 f8ef 	bl	8004d84 <clock_time>
 8002ba6:	6823      	ldr	r3, [r4, #0]
 8002ba8:	1ac0      	subs	r0, r0, r3
 8002baa:	6863      	ldr	r3, [r4, #4]
}
 8002bac:	4298      	cmp	r0, r3
 8002bae:	bfb4      	ite	lt
 8002bb0:	2000      	movlt	r0, #0
 8002bb2:	2001      	movge	r0, #1
 8002bb4:	bd10      	pop	{r4, pc}
	...

08002bb8 <CpuUserProgramStartHook>:
** \return    BLT_TRUE if it is okay to start the user program, BLT_FALSE to keep
**            keep the bootloader active.
**
****************************************************************************************/
blt_bool CpuUserProgramStartHook(void)
{
 8002bb8:	b508      	push	{r3, lr}
  /* additional and optional backdoor entry through the pushbutton on the board. to
   * force the bootloader to stay active after reset, keep the pushbutton pressed while
   * resetting the microcontroller.
   */
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 8002bba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bbe:	4805      	ldr	r0, [pc, #20]	; (8002bd4 <CpuUserProgramStartHook+0x1c>)
 8002bc0:	f001 fa2c 	bl	800401c <HAL_GPIO_ReadPin>
 8002bc4:	2801      	cmp	r0, #1
 8002bc6:	d003      	beq.n	8002bd0 <CpuUserProgramStartHook+0x18>
     * bootloader active instead.
     */
    return BLT_FALSE;
  }
  /* clean up the LED driver */
  LedBlinkExit();
 8002bc8:	f000 f840 	bl	8002c4c <LedBlinkExit>
  /*  okay to start the user program.*/
  return BLT_TRUE;
 8002bcc:	2001      	movs	r0, #1
} /*** end of CpuUserProgramStartHook ***/
 8002bce:	bd08      	pop	{r3, pc}
    return BLT_FALSE;
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	e7fc      	b.n	8002bce <CpuUserProgramStartHook+0x16>
 8002bd4:	40020800 	.word	0x40020800

08002bd8 <CopInitHook>:
**            watchdog.
** \return    none.
**
****************************************************************************************/
void CopInitHook(void)
{
 8002bd8:	b508      	push	{r3, lr}
  /* this function is called upon initialization. might as well use it to initialize
   * the LED driver. It is kind of a visual watchdog anyways.
   */
  LedBlinkInit(100);
 8002bda:	2064      	movs	r0, #100	; 0x64
 8002bdc:	f000 f806 	bl	8002bec <LedBlinkInit>
} /*** end of CopInitHook ***/
 8002be0:	bd08      	pop	{r3, pc}

08002be2 <CopServiceHook>:
**            the watchdog to prevent a watchdog reset.
** \return    none.
**
****************************************************************************************/
void CopServiceHook(void)
{
 8002be2:	b508      	push	{r3, lr}
  /* run the LED blink task. this is a better place to do it than in the main() program
   * loop. certain operations such as flash erase can take a long time, which would cause
   * a blink interval to be skipped. this function is also called during such operations,
   * so no blink intervals will be skipped when calling the LED blink task here.
   */
  LedBlinkTask();
 8002be4:	f000 f808 	bl	8002bf8 <LedBlinkTask>
} /*** end of CopServiceHook ***/
 8002be8:	bd08      	pop	{r3, pc}
	...

08002bec <LedBlinkInit>:
**
****************************************************************************************/
void LedBlinkInit(blt_int16u interval_ms)
{
  /* store the interval time between LED toggles */
  ledBlinkIntervalMs = interval_ms;
 8002bec:	4b01      	ldr	r3, [pc, #4]	; (8002bf4 <LedBlinkInit+0x8>)
 8002bee:	8018      	strh	r0, [r3, #0]
} /*** end of LedBlinkInit ***/
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	20000616 	.word	0x20000616

08002bf8 <LedBlinkTask>:
** \brief     Task function for blinking the LED as a fixed timer interval.
** \return    none.
**
****************************************************************************************/
void LedBlinkTask(void)
{
 8002bf8:	b508      	push	{r3, lr}
  static blt_bool ledOn = BLT_FALSE;
  static blt_int32u nextBlinkEvent = 0;

  /* check for blink event */
  if (TimerGet() >= nextBlinkEvent)
 8002bfa:	f7fd ff99 	bl	8000b30 <TimerGet>
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <LedBlinkTask+0x44>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4298      	cmp	r0, r3
 8002c04:	d310      	bcc.n	8002c28 <LedBlinkTask+0x30>
  {
    /* toggle the LED state */
    if (ledOn == BLT_FALSE)
 8002c06:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <LedBlinkTask+0x48>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b973      	cbnz	r3, 8002c2a <LedBlinkTask+0x32>
    {
      ledOn = BLT_TRUE;
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <LedBlinkTask+0x48>)
 8002c10:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8002c12:	2180      	movs	r1, #128	; 0x80
 8002c14:	480b      	ldr	r0, [pc, #44]	; (8002c44 <LedBlinkTask+0x4c>)
 8002c16:	f001 fa08 	bl	800402a <HAL_GPIO_WritePin>
    {
      ledOn = BLT_FALSE;
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
    }
    /* schedule the next blink event */
    nextBlinkEvent = TimerGet() + ledBlinkIntervalMs;
 8002c1a:	f7fd ff89 	bl	8000b30 <TimerGet>
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <LedBlinkTask+0x50>)
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	4418      	add	r0, r3
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <LedBlinkTask+0x44>)
 8002c26:	6018      	str	r0, [r3, #0]
  }
} /*** end of LedBlinkTask ***/
 8002c28:	bd08      	pop	{r3, pc}
      ledOn = BLT_FALSE;
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <LedBlinkTask+0x48>)
 8002c2e:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002c30:	2180      	movs	r1, #128	; 0x80
 8002c32:	4804      	ldr	r0, [pc, #16]	; (8002c44 <LedBlinkTask+0x4c>)
 8002c34:	f001 f9f9 	bl	800402a <HAL_GPIO_WritePin>
 8002c38:	e7ef      	b.n	8002c1a <LedBlinkTask+0x22>
 8002c3a:	bf00      	nop
 8002c3c:	2000061c 	.word	0x2000061c
 8002c40:	20000618 	.word	0x20000618
 8002c44:	40020400 	.word	0x40020400
 8002c48:	20000616 	.word	0x20000616

08002c4c <LedBlinkExit>:
**            exit.
** \return    none.
**
****************************************************************************************/
void LedBlinkExit(void)
{
 8002c4c:	b508      	push	{r3, lr}
  /* turn the LED off */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2180      	movs	r1, #128	; 0x80
 8002c52:	4802      	ldr	r0, [pc, #8]	; (8002c5c <LedBlinkExit+0x10>)
 8002c54:	f001 f9e9 	bl	800402a <HAL_GPIO_WritePin>
} /*** end of LedBlinkExit ***/
 8002c58:	bd08      	pop	{r3, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40020400 	.word	0x40020400

08002c60 <SystemClock_Config>:
**            subsystem.
** \return    none.
**
****************************************************************************************/
static void SystemClock_Config(void)
{
 8002c60:	b500      	push	{lr}
 8002c62:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  /* Configure the main internal regulator output voltage. */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c64:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <SystemClock_Config+0xa4>)
 8002c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c78:	4b23      	ldr	r3, [pc, #140]	; (8002d08 <SystemClock_Config+0xa8>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c88:	9301      	str	r3, [sp, #4]
 8002c8a:	9b01      	ldr	r3, [sp, #4]

  /* Initializes the CPU, AHB and APB busses clocks. */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c94:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c96:	2302      	movs	r3, #2
 8002c98:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c9a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002c9e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002ca4:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8002ca8:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002caa:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002cac:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cae:	a807      	add	r0, sp, #28
 8002cb0:	f001 faaa 	bl	8004208 <HAL_RCC_OscConfig>
 8002cb4:	b9b0      	cbnz	r0, 8002ce4 <SystemClock_Config+0x84>
     */
    ASSERT_RT(BLT_FALSE);
  }

  /* Activate the Over-Drive mode. */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002cb6:	f001 f9bf 	bl	8004038 <HAL_PWREx_EnableOverDrive>
 8002cba:	b9c0      	cbnz	r0, 8002cee <SystemClock_Config+0x8e>
     */
    ASSERT_RT(BLT_FALSE);
  }

  /* Initializes the CPU, AHB and APB busses clocks. */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8002cbc:	230f      	movs	r3, #15
 8002cbe:	9302      	str	r3, [sp, #8]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002cc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ccc:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cd2:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002cd4:	2107      	movs	r1, #7
 8002cd6:	a802      	add	r0, sp, #8
 8002cd8:	f001 fcec 	bl	80046b4 <HAL_RCC_ClockConfig>
 8002cdc:	b960      	cbnz	r0, 8002cf8 <SystemClock_Config+0x98>
    /* Clock configuration incorrect or hardware failure. Hang the system to prevent
     * damage.
     */
    ASSERT_RT(BLT_FALSE);
  }
} /*** end of SystemClock_Config ***/
 8002cde:	b015      	add	sp, #84	; 0x54
 8002ce0:	f85d fb04 	ldr.w	pc, [sp], #4
    ASSERT_RT(BLT_FALSE);
 8002ce4:	2195      	movs	r1, #149	; 0x95
 8002ce6:	4809      	ldr	r0, [pc, #36]	; (8002d0c <SystemClock_Config+0xac>)
 8002ce8:	f7fd ff2f 	bl	8000b4a <AssertFailure>
 8002cec:	e7e3      	b.n	8002cb6 <SystemClock_Config+0x56>
    ASSERT_RT(BLT_FALSE);
 8002cee:	219d      	movs	r1, #157	; 0x9d
 8002cf0:	4806      	ldr	r0, [pc, #24]	; (8002d0c <SystemClock_Config+0xac>)
 8002cf2:	f7fd ff2a 	bl	8000b4a <AssertFailure>
 8002cf6:	e7e1      	b.n	8002cbc <SystemClock_Config+0x5c>
    ASSERT_RT(BLT_FALSE);
 8002cf8:	21ac      	movs	r1, #172	; 0xac
 8002cfa:	4804      	ldr	r0, [pc, #16]	; (8002d0c <SystemClock_Config+0xac>)
 8002cfc:	f7fd ff25 	bl	8000b4a <AssertFailure>
} /*** end of SystemClock_Config ***/
 8002d00:	e7ed      	b.n	8002cde <SystemClock_Config+0x7e>
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	0800517c 	.word	0x0800517c

08002d10 <Init>:
{
 8002d10:	b508      	push	{r3, lr}
  HAL_Init();
 8002d12:	f000 f9b7 	bl	8003084 <HAL_Init>
  SystemClock_Config();
 8002d16:	f7ff ffa3 	bl	8002c60 <SystemClock_Config>
} /*** end of Init ***/
 8002d1a:	bd08      	pop	{r3, pc}

08002d1c <main>:
{
 8002d1c:	b500      	push	{lr}
 8002d1e:	b083      	sub	sp, #12
  blt_int8u deferredInitRequestFlag = 0;
 8002d20:	2500      	movs	r5, #0
 8002d22:	ac02      	add	r4, sp, #8
 8002d24:	f804 5d01 	strb.w	r5, [r4, #-1]!
  Init();
 8002d28:	f7ff fff2 	bl	8002d10 <Init>
  SharedParamsInit();
 8002d2c:	f000 f914 	bl	8002f58 <SharedParamsInit>
  BootInit();
 8002d30:	f7fd ff5a 	bl	8000be8 <BootInit>
  SharedParamsReadByIndex(0, &deferredInitRequestFlag);
 8002d34:	4621      	mov	r1, r4
 8002d36:	4628      	mov	r0, r5
 8002d38:	f000 f926 	bl	8002f88 <SharedParamsReadByIndex>
  if (deferredInitRequestFlag == 1)
 8002d3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d002      	beq.n	8002d4a <main+0x2e>
    BootTask();
 8002d44:	f7fd ff5e 	bl	8000c04 <BootTask>
 8002d48:	e7fc      	b.n	8002d44 <main+0x28>
    ComDeferredInit();
 8002d4a:	f7fd ffd5 	bl	8000cf8 <ComDeferredInit>
 8002d4e:	e7f9      	b.n	8002d44 <main+0x28>

08002d50 <HAL_MspInit>:
**            interrupt).
** \return    none.
**
****************************************************************************************/
void HAL_MspInit(void)
{
 8002d50:	b570      	push	{r4, r5, r6, lr}
 8002d52:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Power and SYSCFG clock enable. */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d54:	4b39      	ldr	r3, [pc, #228]	; (8002e3c <HAL_MspInit+0xec>)
 8002d56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
 8002d5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d60:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002d64:	9201      	str	r2, [sp, #4]
 8002d66:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d6e:	645a      	str	r2, [r3, #68]	; 0x44
 8002d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d72:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002d76:	9202      	str	r2, [sp, #8]
 8002d78:	9a02      	ldr	r2, [sp, #8]
  /* GPIO ports clock enable. */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d7c:	f042 0201 	orr.w	r2, r2, #1
 8002d80:	631a      	str	r2, [r3, #48]	; 0x30
 8002d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d84:	f002 0201 	and.w	r2, r2, #1
 8002d88:	9203      	str	r2, [sp, #12]
 8002d8a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d8e:	f042 0202 	orr.w	r2, r2, #2
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	f002 0202 	and.w	r2, r2, #2
 8002d9a:	9204      	str	r2, [sp, #16]
 8002d9c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002da0:	f042 0204 	orr.w	r2, r2, #4
 8002da4:	631a      	str	r2, [r3, #48]	; 0x30
 8002da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002da8:	f002 0204 	and.w	r2, r2, #4
 8002dac:	9205      	str	r2, [sp, #20]
 8002dae:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002db2:	f042 0208 	orr.w	r2, r2, #8
 8002db6:	631a      	str	r2, [r3, #48]	; 0x30
 8002db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dba:	f002 0208 	and.w	r2, r2, #8
 8002dbe:	9206      	str	r2, [sp, #24]
 8002dc0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002dd0:	9207      	str	r2, [sp, #28]
 8002dd2:	9a07      	ldr	r2, [sp, #28]

#if (BOOT_COM_RS232_ENABLE > 0)
  /* UART clock enable. */
  __HAL_RCC_USART3_CLK_ENABLE();
 8002dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002dda:	641a      	str	r2, [r3, #64]	; 0x40
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de2:	9308      	str	r3, [sp, #32]
 8002de4:	9b08      	ldr	r3, [sp, #32]
#endif

  /* Configure GPIO pin for the LED. */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002de6:	2680      	movs	r6, #128	; 0x80
 8002de8:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dea:	2301      	movs	r3, #1
 8002dec:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2400      	movs	r4, #0
 8002df0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df4:	4d12      	ldr	r5, [pc, #72]	; (8002e40 <HAL_MspInit+0xf0>)
 8002df6:	a909      	add	r1, sp, #36	; 0x24
 8002df8:	4628      	mov	r0, r5
 8002dfa:	f000 ff81 	bl	8003d00 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002dfe:	4622      	mov	r2, r4
 8002e00:	4631      	mov	r1, r6
 8002e02:	4628      	mov	r0, r5
 8002e04:	f001 f911 	bl	800402a <HAL_GPIO_WritePin>

  /* Configure GPIO pin for (optional) backdoor entry input. */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e0c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e0e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e12:	a909      	add	r1, sp, #36	; 0x24
 8002e14:	480b      	ldr	r0, [pc, #44]	; (8002e44 <HAL_MspInit+0xf4>)
 8002e16:	f000 ff73 	bl	8003d00 <HAL_GPIO_Init>
#if (BOOT_COM_RS232_ENABLE > 0)
  /* UART TX and RX GPIO pin configuration. */
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8002e1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e1e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e20:	2302      	movs	r3, #2
 8002e22:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e26:	2303      	movs	r3, #3
 8002e28:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e2a:	2307      	movs	r3, #7
 8002e2c:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e2e:	a909      	add	r1, sp, #36	; 0x24
 8002e30:	4805      	ldr	r0, [pc, #20]	; (8002e48 <HAL_MspInit+0xf8>)
 8002e32:	f000 ff65 	bl	8003d00 <HAL_GPIO_Init>
#endif
} /*** end of HAL_MspInit ***/
 8002e36:	b00e      	add	sp, #56	; 0x38
 8002e38:	bd70      	pop	{r4, r5, r6, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40020400 	.word	0x40020400
 8002e44:	40020800 	.word	0x40020800
 8002e48:	40020c00 	.word	0x40020c00

08002e4c <HAL_MspDeInit>:
**            interrupt).
** \return    none.
**
****************************************************************************************/
void HAL_MspDeInit(void)
{
 8002e4c:	b510      	push	{r4, lr}
  /* Reset the RCC clock configuration to the default reset state. */
  HAL_RCC_DeInit();
 8002e4e:	f001 f931 	bl	80040b4 <HAL_RCC_DeInit>

  /* Reset GPIO pin for the LED to turn it off. */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002e52:	4c1e      	ldr	r4, [pc, #120]	; (8002ecc <HAL_MspDeInit+0x80>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	2180      	movs	r1, #128	; 0x80
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f001 f8e6 	bl	800402a <HAL_GPIO_WritePin>

  /* Deinit used GPIOs. */
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002e5e:	2180      	movs	r1, #128	; 0x80
 8002e60:	4620      	mov	r0, r4
 8002e62:	f001 f83d 	bl	8003ee0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_13);
 8002e66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e6a:	4819      	ldr	r0, [pc, #100]	; (8002ed0 <HAL_MspDeInit+0x84>)
 8002e6c:	f001 f838 	bl	8003ee0 <HAL_GPIO_DeInit>

#if (BOOT_COM_RS232_ENABLE > 0)
  /* Deinit used GPIOs. */
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8);
 8002e70:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8002e74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f001 f831 	bl	8003ee0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_9);
 8002e7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e82:	4620      	mov	r0, r4
 8002e84:	f001 f82c 	bl	8003ee0 <HAL_GPIO_DeInit>
  /* UART clock disable. */
  __HAL_RCC_USART3_CLK_DISABLE();
 8002e88:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <HAL_MspDeInit+0x88>)
 8002e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* GPIO ports clock disable. */
  __HAL_RCC_GPIOG_CLK_DISABLE();
 8002e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e98:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_DISABLE();
 8002e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e9c:	f022 0208 	bic.w	r2, r2, #8
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8002ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ea4:	f022 0204 	bic.w	r2, r2, #4
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8002eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eac:	f022 0202 	bic.w	r2, r2, #2
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8002eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb4:	f022 0201 	bic.w	r2, r2, #1
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30

  /* SYSCFG and PWR clock disable. */
  __HAL_RCC_PWR_CLK_DISABLE();
 8002eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ebc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_DISABLE();
 8002ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ec4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ec8:	645a      	str	r2, [r3, #68]	; 0x44
} /*** end of HAL_MspDeInit ***/
 8002eca:	bd10      	pop	{r4, pc}
 8002ecc:	40020400 	.word	0x40020400
 8002ed0:	40020800 	.word	0x40020800
 8002ed4:	40023800 	.word	0x40023800

08002ed8 <SharedParamsCalculateChecksum>:
{
  uint16_t result = 0;
  uint32_t byteIdx;

  /* Add the identifier bytes to the checksum. */
  result += (uint8_t)sharedParamsBuffer.identifier;
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <SharedParamsCalculateChecksum+0x30>)
 8002eda:	681b      	ldr	r3, [r3, #0]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 8u);
 8002edc:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8002ee0:	fa50 f283 	uxtab	r2, r0, r3
  result += (uint8_t)(sharedParamsBuffer.identifier >> 16u);
 8002ee4:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8002ee8:	4410      	add	r0, r2
  result += (uint8_t)(sharedParamsBuffer.identifier >> 24u);
 8002eea:	eb00 6013 	add.w	r0, r0, r3, lsr #24
  /* Loop through the parameter data array. */
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e005      	b.n	8002efe <SharedParamsCalculateChecksum+0x26>
  {
    /* Add parameter data byte to the checksum. */
    result += (uint8_t)sharedParamsBuffer.data[byteIdx];
 8002ef2:	4a05      	ldr	r2, [pc, #20]	; (8002f08 <SharedParamsCalculateChecksum+0x30>)
 8002ef4:	441a      	add	r2, r3
 8002ef6:	7912      	ldrb	r2, [r2, #4]
 8002ef8:	4410      	add	r0, r2
 8002efa:	b280      	uxth	r0, r0
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8002efc:	3301      	adds	r3, #1
 8002efe:	2b37      	cmp	r3, #55	; 0x37
 8002f00:	d9f7      	bls.n	8002ef2 <SharedParamsCalculateChecksum+0x1a>
  }
  /* Determine one's complement. */
  result = ~result;
  /* Determine two's complement. */
  result += 1;
 8002f02:	4240      	negs	r0, r0
  /* Give the result back to the caller. */
  return result;
} /*** end of SharedParamsCalculateChecksum ***/
 8002f04:	b280      	uxth	r0, r0
 8002f06:	4770      	bx	lr
 8002f08:	20000000 	.word	0x20000000

08002f0c <SharedParamsVerifyChecksum>:
{
 8002f0c:	b508      	push	{r3, lr}
  if (SharedParamsCalculateChecksum() == sharedParamsBuffer.checksum)
 8002f0e:	f7ff ffe3 	bl	8002ed8 <SharedParamsCalculateChecksum>
 8002f12:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <SharedParamsVerifyChecksum+0x18>)
 8002f14:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002f16:	4298      	cmp	r0, r3
 8002f18:	d001      	beq.n	8002f1e <SharedParamsVerifyChecksum+0x12>
  bool result = false;
 8002f1a:	2000      	movs	r0, #0
} /*** end of SharedParamsVerifyChecksum ***/
 8002f1c:	bd08      	pop	{r3, pc}
    result = true;
 8002f1e:	2001      	movs	r0, #1
 8002f20:	e7fc      	b.n	8002f1c <SharedParamsVerifyChecksum+0x10>
 8002f22:	bf00      	nop
 8002f24:	20000000 	.word	0x20000000

08002f28 <SharedParamsValidateBuffer>:
{
 8002f28:	b508      	push	{r3, lr}
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <SharedParamsValidateBuffer+0x18>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <SharedParamsValidateBuffer+0x1c>)
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <SharedParamsValidateBuffer+0x10>
  bool result = false;
 8002f34:	2000      	movs	r0, #0
} /*** end of SharedParamsValitabeTable ***/
 8002f36:	bd08      	pop	{r3, pc}
       (SharedParamsVerifyChecksum()) )
 8002f38:	f7ff ffe8 	bl	8002f0c <SharedParamsVerifyChecksum>
 8002f3c:	e7fb      	b.n	8002f36 <SharedParamsValidateBuffer+0xe>
 8002f3e:	bf00      	nop
 8002f40:	20000000 	.word	0x20000000
 8002f44:	ce42e7a2 	.word	0xce42e7a2

08002f48 <SharedParamsWriteChecksum>:
{
 8002f48:	b508      	push	{r3, lr}
  sharedParamsBuffer.checksum = SharedParamsCalculateChecksum();
 8002f4a:	f7ff ffc5 	bl	8002ed8 <SharedParamsCalculateChecksum>
 8002f4e:	4b01      	ldr	r3, [pc, #4]	; (8002f54 <SharedParamsWriteChecksum+0xc>)
 8002f50:	8798      	strh	r0, [r3, #60]	; 0x3c
} /*** end of SharedParamsWriteChecksum ***/
 8002f52:	bd08      	pop	{r3, pc}
 8002f54:	20000000 	.word	0x20000000

08002f58 <SharedParamsInit>:
{
 8002f58:	b508      	push	{r3, lr}
  if (!SharedParamsValidateBuffer())
 8002f5a:	f7ff ffe5 	bl	8002f28 <SharedParamsValidateBuffer>
 8002f5e:	b968      	cbnz	r0, 8002f7c <SharedParamsInit+0x24>
    sharedParamsBuffer.identifier = SHARED_PARAMS_BUFFER_ID;
 8002f60:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <SharedParamsInit+0x28>)
 8002f62:	4a08      	ldr	r2, [pc, #32]	; (8002f84 <SharedParamsInit+0x2c>)
 8002f64:	601a      	str	r2, [r3, #0]
    for (byteIdx=0; byteIdx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	e004      	b.n	8002f74 <SharedParamsInit+0x1c>
      sharedParamsBuffer.data[byteIdx] = 0;
 8002f6a:	4a05      	ldr	r2, [pc, #20]	; (8002f80 <SharedParamsInit+0x28>)
 8002f6c:	441a      	add	r2, r3
 8002f6e:	2100      	movs	r1, #0
 8002f70:	7111      	strb	r1, [r2, #4]
    for (byteIdx=0; byteIdx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8002f72:	3301      	adds	r3, #1
 8002f74:	2b37      	cmp	r3, #55	; 0x37
 8002f76:	d9f8      	bls.n	8002f6a <SharedParamsInit+0x12>
    SharedParamsWriteChecksum();
 8002f78:	f7ff ffe6 	bl	8002f48 <SharedParamsWriteChecksum>
} /*** end of SharedParamsInit ***/
 8002f7c:	bd08      	pop	{r3, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000000 	.word	0x20000000
 8002f84:	ce42e7a2 	.word	0xce42e7a2

08002f88 <SharedParamsReadByIndex>:
{
 8002f88:	b538      	push	{r3, r4, r5, lr}
 8002f8a:	4605      	mov	r5, r0
 8002f8c:	460c      	mov	r4, r1
  if ( (SharedParamsValidateBuffer()) &&
 8002f8e:	f7ff ffcb 	bl	8002f28 <SharedParamsValidateBuffer>
 8002f92:	4603      	mov	r3, r0
 8002f94:	b158      	cbz	r0, 8002fae <SharedParamsReadByIndex+0x26>
       (idx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN)  &&
 8002f96:	2d37      	cmp	r5, #55	; 0x37
 8002f98:	bf8c      	ite	hi
 8002f9a:	2300      	movhi	r3, #0
 8002f9c:	2301      	movls	r3, #1
 8002f9e:	2c00      	cmp	r4, #0
 8002fa0:	bf08      	it	eq
 8002fa2:	2300      	moveq	r3, #0
 8002fa4:	b11b      	cbz	r3, 8002fae <SharedParamsReadByIndex+0x26>
    *value = sharedParamsBuffer.data[idx];
 8002fa6:	4a03      	ldr	r2, [pc, #12]	; (8002fb4 <SharedParamsReadByIndex+0x2c>)
 8002fa8:	4415      	add	r5, r2
 8002faa:	792a      	ldrb	r2, [r5, #4]
 8002fac:	7022      	strb	r2, [r4, #0]
} /*** end of SharedParamsReadByIndex ***/
 8002fae:	4618      	mov	r0, r3
 8002fb0:	bd38      	pop	{r3, r4, r5, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000000 	.word	0x20000000

08002fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ff0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002fbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002fbe:	e003      	b.n	8002fc8 <LoopCopyDataInit>

08002fc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002fc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002fc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002fc6:	3104      	adds	r1, #4

08002fc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002fc8:	480b      	ldr	r0, [pc, #44]	; (8002ff8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002fca:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002fcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002fce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002fd0:	d3f6      	bcc.n	8002fc0 <CopyDataInit>
  ldr  r2, =_sbss
 8002fd2:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002fd4:	e002      	b.n	8002fdc <LoopFillZerobss>

08002fd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002fd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002fd8:	f842 3b04 	str.w	r3, [r2], #4

08002fdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002fdc:	4b09      	ldr	r3, [pc, #36]	; (8003004 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002fde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002fe0:	d3f9      	bcc.n	8002fd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fe2:	f001 fea7 	bl	8004d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fe6:	f001 fff3 	bl	8004fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fea:	f7ff fe97 	bl	8002d1c <main>
  bx  lr    
 8002fee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ff0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002ff4:	080051b0 	.word	0x080051b0
  ldr  r0, =_sdata
 8002ff8:	20000040 	.word	0x20000040
  ldr  r3, =_edata
 8002ffc:	2000004c 	.word	0x2000004c
  ldr  r2, =_sbss
 8003000:	2000004c 	.word	0x2000004c
  ldr  r3, = _ebss
 8003004:	20003e44 	.word	0x20003e44

08003008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003008:	e7fe      	b.n	8003008 <ADC_IRQHandler>
	...

0800300c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800300c:	b510      	push	{r4, lr}
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_DeInit+0x28>)
 8003010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003014:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8003016:	2400      	movs	r4, #0
 8003018:	621c      	str	r4, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800301a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800301c:	625c      	str	r4, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 800301e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8003020:	611c      	str	r4, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8003022:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8003024:	615c      	str	r4, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8003026:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8003028:	619c      	str	r4, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800302a:	f7ff ff0f 	bl	8002e4c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
}
 800302e:	4620      	mov	r0, r4
 8003030:	bd10      	pop	{r4, pc}
 8003032:	bf00      	nop
 8003034:	40023800 	.word	0x40023800

08003038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003038:	b510      	push	{r4, lr}
 800303a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800303c:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <HAL_InitTick+0x40>)
 800303e:	7818      	ldrb	r0, [r3, #0]
 8003040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003044:	fbb3 f3f0 	udiv	r3, r3, r0
 8003048:	4a0c      	ldr	r2, [pc, #48]	; (800307c <HAL_InitTick+0x44>)
 800304a:	6810      	ldr	r0, [r2, #0]
 800304c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003050:	f000 f87c 	bl	800314c <HAL_SYSTICK_Config>
 8003054:	b968      	cbnz	r0, 8003072 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003056:	2c0f      	cmp	r4, #15
 8003058:	d901      	bls.n	800305e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800305a:	2001      	movs	r0, #1
 800305c:	e00a      	b.n	8003074 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800305e:	2200      	movs	r2, #0
 8003060:	4621      	mov	r1, r4
 8003062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003066:	f000 f83f 	bl	80030e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_InitTick+0x48>)
 800306c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800306e:	2000      	movs	r0, #0
 8003070:	e000      	b.n	8003074 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8003072:	2001      	movs	r0, #1
}
 8003074:	bd10      	pop	{r4, pc}
 8003076:	bf00      	nop
 8003078:	20000042 	.word	0x20000042
 800307c:	20000048 	.word	0x20000048
 8003080:	20000044 	.word	0x20000044

08003084 <HAL_Init>:
{
 8003084:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003086:	2003      	movs	r0, #3
 8003088:	f000 f81c 	bl	80030c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800308c:	2000      	movs	r0, #0
 800308e:	f7ff ffd3 	bl	8003038 <HAL_InitTick>
  HAL_MspInit();
 8003092:	f7ff fe5d 	bl	8002d50 <HAL_MspInit>
}
 8003096:	2000      	movs	r0, #0
 8003098:	bd08      	pop	{r3, pc}
	...

0800309c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800309c:	b538      	push	{r3, r4, r5, lr}
 800309e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80030a0:	f7fd fd4e 	bl	8000b40 <HAL_GetTick>
 80030a4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030a6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80030aa:	d002      	beq.n	80030b2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <HAL_Delay+0x24>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030b2:	f7fd fd45 	bl	8000b40 <HAL_GetTick>
 80030b6:	1b40      	subs	r0, r0, r5
 80030b8:	42a0      	cmp	r0, r4
 80030ba:	d3fa      	bcc.n	80030b2 <HAL_Delay+0x16>
  {
  }
}
 80030bc:	bd38      	pop	{r3, r4, r5, pc}
 80030be:	bf00      	nop
 80030c0:	20000042 	.word	0x20000042

080030c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030c4:	4906      	ldr	r1, [pc, #24]	; (80030e0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80030c6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030cc:	041b      	lsls	r3, r3, #16
 80030ce:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80030d0:	0200      	lsls	r0, r0, #8
 80030d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030d6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80030d8:	4a02      	ldr	r2, [pc, #8]	; (80030e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80030da:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80030dc:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80030de:	4770      	bx	lr
 80030e0:	e000ed00 	.word	0xe000ed00
 80030e4:	05fa0000 	.word	0x05fa0000

080030e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030e8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030ea:	4b15      	ldr	r3, [pc, #84]	; (8003140 <HAL_NVIC_SetPriority+0x58>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f2:	f1c3 0407 	rsb	r4, r3, #7
 80030f6:	2c04      	cmp	r4, #4
 80030f8:	bf28      	it	cs
 80030fa:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fc:	1d1d      	adds	r5, r3, #4
 80030fe:	2d06      	cmp	r5, #6
 8003100:	d914      	bls.n	800312c <HAL_NVIC_SetPriority+0x44>
 8003102:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003104:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003108:	fa05 f404 	lsl.w	r4, r5, r4
 800310c:	ea21 0104 	bic.w	r1, r1, r4
 8003110:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003112:	fa05 f303 	lsl.w	r3, r5, r3
 8003116:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 800311c:	2800      	cmp	r0, #0
 800311e:	db07      	blt.n	8003130 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003120:	0109      	lsls	r1, r1, #4
 8003122:	b2c9      	uxtb	r1, r1
 8003124:	4b07      	ldr	r3, [pc, #28]	; (8003144 <HAL_NVIC_SetPriority+0x5c>)
 8003126:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003128:	bc30      	pop	{r4, r5}
 800312a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800312c:	2300      	movs	r3, #0
 800312e:	e7e9      	b.n	8003104 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003130:	f000 000f 	and.w	r0, r0, #15
 8003134:	0109      	lsls	r1, r1, #4
 8003136:	b2c9      	uxtb	r1, r1
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <HAL_NVIC_SetPriority+0x60>)
 800313a:	5419      	strb	r1, [r3, r0]
 800313c:	e7f4      	b.n	8003128 <HAL_NVIC_SetPriority+0x40>
 800313e:	bf00      	nop
 8003140:	e000ed00 	.word	0xe000ed00
 8003144:	e000e400 	.word	0xe000e400
 8003148:	e000ed14 	.word	0xe000ed14

0800314c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800314c:	3801      	subs	r0, #1
 800314e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003152:	d20a      	bcs.n	800316a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_SYSTICK_Config+0x24>)
 8003156:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003158:	4a06      	ldr	r2, [pc, #24]	; (8003174 <HAL_SYSTICK_Config+0x28>)
 800315a:	21f0      	movs	r1, #240	; 0xf0
 800315c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003160:	2000      	movs	r0, #0
 8003162:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003164:	2207      	movs	r2, #7
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800316a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	e000e010 	.word	0xe000e010
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <ETH_MACAddressConfig>:
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003178:	7950      	ldrb	r0, [r2, #5]
 800317a:	7913      	ldrb	r3, [r2, #4]
 800317c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8003180:	4807      	ldr	r0, [pc, #28]	; (80031a0 <ETH_MACAddressConfig+0x28>)
 8003182:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8003184:	78d0      	ldrb	r0, [r2, #3]
 8003186:	7893      	ldrb	r3, [r2, #2]
 8003188:	041b      	lsls	r3, r3, #16
 800318a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800318e:	7850      	ldrb	r0, [r2, #1]
 8003190:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003194:	7812      	ldrb	r2, [r2, #0]
 8003196:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8003198:	4a02      	ldr	r2, [pc, #8]	; (80031a4 <ETH_MACAddressConfig+0x2c>)
 800319a:	508b      	str	r3, [r1, r2]
}
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40028040 	.word	0x40028040
 80031a4:	40028044 	.word	0x40028044

080031a8 <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80031a8:	6801      	ldr	r1, [r0, #0]
 80031aa:	f241 0218 	movw	r2, #4120	; 0x1018
 80031ae:	588b      	ldr	r3, [r1, r2]
 80031b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031b4:	508b      	str	r3, [r1, r2]
}
 80031b6:	4770      	bx	lr

080031b8 <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80031b8:	6801      	ldr	r1, [r0, #0]
 80031ba:	f241 0218 	movw	r2, #4120	; 0x1018
 80031be:	588b      	ldr	r3, [r1, r2]
 80031c0:	f043 0302 	orr.w	r3, r3, #2
 80031c4:	508b      	str	r3, [r1, r2]
}
 80031c6:	4770      	bx	lr

080031c8 <ETH_MACDMAConfig>:
{
 80031c8:	b570      	push	{r4, r5, r6, lr}
 80031ca:	b09e      	sub	sp, #120	; 0x78
 80031cc:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80031ce:	b129      	cbz	r1, 80031dc <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80031d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031d4:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 80031d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031da:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80031dc:	69e3      	ldr	r3, [r4, #28]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d168      	bne.n	80032b4 <ETH_MACDMAConfig+0xec>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80031e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031e6:	9307      	str	r3, [sp, #28]
  tmpreg = (heth->Instance)->MACCR;
 80031e8:	6821      	ldr	r1, [r4, #0]
 80031ea:	680b      	ldr	r3, [r1, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80031ec:	4a37      	ldr	r2, [pc, #220]	; (80032cc <ETH_MACDMAConfig+0x104>)
 80031ee:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 80031f0:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 80031f2:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 80031f4:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 80031f6:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 80031f8:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 80031fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80031fe:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003200:	600b      	str	r3, [r1, #0]
  tmpreg = (heth->Instance)->MACCR;
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003206:	2001      	movs	r0, #1
 8003208:	f7ff ff48 	bl	800309c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	2240      	movs	r2, #64	; 0x40
 8003214:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800321a:	2001      	movs	r0, #1
 800321c:	f7ff ff3e 	bl	800309c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	2500      	movs	r5, #0
 8003228:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800322e:	6822      	ldr	r2, [r4, #0]
 8003230:	6993      	ldr	r3, [r2, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003232:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 8003236:	041b      	lsls	r3, r3, #16
 8003238:	0c1b      	lsrs	r3, r3, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800323a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800323e:	6193      	str	r3, [r2, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8003240:	6823      	ldr	r3, [r4, #0]
 8003242:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003244:	2001      	movs	r0, #1
 8003246:	f7ff ff29 	bl	800309c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003256:	2001      	movs	r0, #1
 8003258:	f7ff ff20 	bl	800309c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 8003260:	6821      	ldr	r1, [r4, #0]
 8003262:	f241 0518 	movw	r5, #4120	; 0x1018
 8003266:	594b      	ldr	r3, [r1, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003268:	4a19      	ldr	r2, [pc, #100]	; (80032d0 <ETH_MACDMAConfig+0x108>)
 800326a:	401a      	ands	r2, r3
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800326c:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <ETH_MACDMAConfig+0x10c>)
 800326e:	4313      	orrs	r3, r2
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8003270:	514b      	str	r3, [r1, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003276:	2001      	movs	r0, #1
 8003278:	f7ff ff10 	bl	800309c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003286:	4a14      	ldr	r2, [pc, #80]	; (80032d8 <ETH_MACDMAConfig+0x110>)
 8003288:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003290:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003292:	2001      	movs	r0, #1
 8003294:	f7ff ff02 	bl	800309c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800329e:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80032a0:	69a3      	ldr	r3, [r4, #24]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d009      	beq.n	80032ba <ETH_MACDMAConfig+0xf2>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80032a6:	6962      	ldr	r2, [r4, #20]
 80032a8:	2100      	movs	r1, #0
 80032aa:	4620      	mov	r0, r4
 80032ac:	f7ff ff64 	bl	8003178 <ETH_MACAddressConfig>
}
 80032b0:	b01e      	add	sp, #120	; 0x78
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80032b4:	2300      	movs	r3, #0
 80032b6:	9307      	str	r3, [sp, #28]
 80032b8:	e796      	b.n	80031e8 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80032ba:	6821      	ldr	r1, [r4, #0]
 80032bc:	f241 021c 	movw	r2, #4124	; 0x101c
 80032c0:	5888      	ldr	r0, [r1, r2]
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <ETH_MACDMAConfig+0x114>)
 80032c4:	4303      	orrs	r3, r0
 80032c6:	508b      	str	r3, [r1, r2]
 80032c8:	e7ed      	b.n	80032a6 <ETH_MACDMAConfig+0xde>
 80032ca:	bf00      	nop
 80032cc:	ff20810f 	.word	0xff20810f
 80032d0:	f8de3f23 	.word	0xf8de3f23
 80032d4:	02200004 	.word	0x02200004
 80032d8:	02c12080 	.word	0x02c12080
 80032dc:	00010040 	.word	0x00010040

080032e0 <ETH_MACTransmissionEnable>:
{ 
 80032e0:	b510      	push	{r4, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80032ea:	6802      	ldr	r2, [r0, #0]
 80032ec:	6813      	ldr	r3, [r2, #0]
 80032ee:	f043 0308 	orr.w	r3, r3, #8
 80032f2:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 80032f4:	6803      	ldr	r3, [r0, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032fa:	2001      	movs	r0, #1
 80032fc:	f7ff fece 	bl	800309c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	9a01      	ldr	r2, [sp, #4]
 8003304:	601a      	str	r2, [r3, #0]
}
 8003306:	b002      	add	sp, #8
 8003308:	bd10      	pop	{r4, pc}

0800330a <ETH_MACReceptionEnable>:
{ 
 800330a:	b510      	push	{r4, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003314:	6802      	ldr	r2, [r0, #0]
 8003316:	6813      	ldr	r3, [r2, #0]
 8003318:	f043 0304 	orr.w	r3, r3, #4
 800331c:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 800331e:	6803      	ldr	r3, [r0, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003324:	2001      	movs	r0, #1
 8003326:	f7ff feb9 	bl	800309c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	9a01      	ldr	r2, [sp, #4]
 800332e:	601a      	str	r2, [r3, #0]
}
 8003330:	b002      	add	sp, #8
 8003332:	bd10      	pop	{r4, pc}

08003334 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003334:	b530      	push	{r4, r5, lr}
 8003336:	b083      	sub	sp, #12
 8003338:	4605      	mov	r5, r0
  __IO uint32_t tmpreg = 0;
 800333a:	2300      	movs	r3, #0
 800333c:	9301      	str	r3, [sp, #4]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800333e:	6802      	ldr	r2, [r0, #0]
 8003340:	f241 0418 	movw	r4, #4120	; 0x1018
 8003344:	5913      	ldr	r3, [r2, r4]
 8003346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800334a:	5113      	str	r3, [r2, r4]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800334c:	6803      	ldr	r3, [r0, #0]
 800334e:	591b      	ldr	r3, [r3, r4]
 8003350:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003352:	2001      	movs	r0, #1
 8003354:	f7ff fea2 	bl	800309c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003358:	682b      	ldr	r3, [r5, #0]
 800335a:	9a01      	ldr	r2, [sp, #4]
 800335c:	511a      	str	r2, [r3, r4]
}
 800335e:	b003      	add	sp, #12
 8003360:	bd30      	pop	{r4, r5, pc}

08003362 <HAL_ETH_DMATxDescListInit>:
{
 8003362:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8003364:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8003368:	2c01      	cmp	r4, #1
 800336a:	d031      	beq.n	80033d0 <HAL_ETH_DMATxDescListInit+0x6e>
 800336c:	2401      	movs	r4, #1
 800336e:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8003372:	2402      	movs	r4, #2
 8003374:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8003378:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 800337a:	2400      	movs	r4, #0
 800337c:	e001      	b.n	8003382 <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800337e:	60f9      	str	r1, [r7, #12]
  for(i=0; i < TxBuffCount; i++)
 8003380:	3401      	adds	r4, #1
 8003382:	429c      	cmp	r4, r3
 8003384:	d217      	bcs.n	80033b6 <HAL_ETH_DMATxDescListInit+0x54>
    dmatxdesc = DMATxDescTab + i;
 8003386:	0165      	lsls	r5, r4, #5
 8003388:	194f      	adds	r7, r1, r5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800338a:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 800338e:	514e      	str	r6, [r1, r5]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003390:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8003394:	fb06 2604 	mla	r6, r6, r4, r2
 8003398:	60be      	str	r6, [r7, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800339a:	69c6      	ldr	r6, [r0, #28]
 800339c:	b91e      	cbnz	r6, 80033a6 <HAL_ETH_DMATxDescListInit+0x44>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800339e:	594e      	ldr	r6, [r1, r5]
 80033a0:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 80033a4:	514e      	str	r6, [r1, r5]
    if(i < (TxBuffCount-1))
 80033a6:	1e5d      	subs	r5, r3, #1
 80033a8:	42a5      	cmp	r5, r4
 80033aa:	d9e8      	bls.n	800337e <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80033ac:	1c65      	adds	r5, r4, #1
 80033ae:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80033b2:	60fd      	str	r5, [r7, #12]
 80033b4:	e7e4      	b.n	8003380 <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80033b6:	6802      	ldr	r2, [r0, #0]
 80033b8:	f241 0310 	movw	r3, #4112	; 0x1010
 80033bc:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80033be:	2301      	movs	r3, #1
 80033c0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80033c4:	2300      	movs	r3, #0
 80033c6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80033ca:	4618      	mov	r0, r3
}
 80033cc:	bcf0      	pop	{r4, r5, r6, r7}
 80033ce:	4770      	bx	lr
  __HAL_LOCK(heth);
 80033d0:	2002      	movs	r0, #2
 80033d2:	e7fb      	b.n	80033cc <HAL_ETH_DMATxDescListInit+0x6a>

080033d4 <HAL_ETH_DMARxDescListInit>:
{
 80033d4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 80033d6:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80033da:	2c01      	cmp	r4, #1
 80033dc:	d02e      	beq.n	800343c <HAL_ETH_DMARxDescListInit+0x68>
 80033de:	2401      	movs	r4, #1
 80033e0:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80033e4:	2402      	movs	r4, #2
 80033e6:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 80033ea:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 80033ec:	2400      	movs	r4, #0
 80033ee:	e001      	b.n	80033f4 <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80033f0:	60e9      	str	r1, [r5, #12]
  for(i=0; i < RxBuffCount; i++)
 80033f2:	3401      	adds	r4, #1
 80033f4:	429c      	cmp	r4, r3
 80033f6:	d214      	bcs.n	8003422 <HAL_ETH_DMARxDescListInit+0x4e>
    DMARxDesc = DMARxDescTab+i;
 80033f8:	0166      	lsls	r6, r4, #5
 80033fa:	198d      	adds	r5, r1, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80033fc:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8003400:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003402:	f244 56f4 	movw	r6, #17908	; 0x45f4
 8003406:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003408:	f240 56f4 	movw	r6, #1524	; 0x5f4
 800340c:	fb06 2604 	mla	r6, r6, r4, r2
 8003410:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1))
 8003412:	1e5e      	subs	r6, r3, #1
 8003414:	42a6      	cmp	r6, r4
 8003416:	d9eb      	bls.n	80033f0 <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8003418:	1c66      	adds	r6, r4, #1
 800341a:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 800341e:	60ee      	str	r6, [r5, #12]
 8003420:	e7e7      	b.n	80033f2 <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003422:	6802      	ldr	r2, [r0, #0]
 8003424:	f241 030c 	movw	r3, #4108	; 0x100c
 8003428:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 800342a:	2301      	movs	r3, #1
 800342c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8003430:	2300      	movs	r3, #0
 8003432:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8003436:	4618      	mov	r0, r3
}
 8003438:	bcf0      	pop	{r4, r5, r6, r7}
 800343a:	4770      	bx	lr
  __HAL_LOCK(heth);
 800343c:	2002      	movs	r0, #2
 800343e:	e7fb      	b.n	8003438 <HAL_ETH_DMARxDescListInit+0x64>

08003440 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8003440:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8003444:	2b01      	cmp	r3, #1
 8003446:	f000 8085 	beq.w	8003554 <HAL_ETH_TransmitFrame+0x114>
 800344a:	2301      	movs	r3, #1
 800344c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8003450:	2302      	movs	r3, #2
 8003452:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0) 
 8003456:	b1b1      	cbz	r1, 8003486 <HAL_ETH_TransmitFrame+0x46>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003458:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	2a00      	cmp	r2, #0
 800345e:	db1a      	blt.n	8003496 <HAL_ETH_TransmitFrame+0x56>
{
 8003460:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003462:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003466:	4291      	cmp	r1, r2
 8003468:	d91d      	bls.n	80034a6 <HAL_ETH_TransmitFrame+0x66>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800346a:	4a3b      	ldr	r2, [pc, #236]	; (8003558 <HAL_ETH_TransmitFrame+0x118>)
 800346c:	fba2 4201 	umull	r4, r2, r2, r1
 8003470:	0a92      	lsrs	r2, r2, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003472:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8003476:	fb04 1412 	mls	r4, r4, r2, r1
 800347a:	b104      	cbz	r4, 800347e <HAL_ETH_TransmitFrame+0x3e>
      bufcount++;
 800347c:	3201      	adds	r2, #1
  if (bufcount == 1)
 800347e:	2a01      	cmp	r2, #1
 8003480:	d011      	beq.n	80034a6 <HAL_ETH_TransmitFrame+0x66>
    for (i=0; i< bufcount; i++)
 8003482:	2300      	movs	r3, #0
 8003484:	e047      	b.n	8003516 <HAL_ETH_TransmitFrame+0xd6>
    heth->State = HAL_ETH_STATE_READY;
 8003486:	2301      	movs	r3, #1
 8003488:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800348c:	2200      	movs	r2, #0
 800348e:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 8003492:	4618      	mov	r0, r3
 8003494:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003496:	2312      	movs	r3, #18
 8003498:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800349c:	2300      	movs	r3, #0
 800349e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 80034a2:	2001      	movs	r0, #1
 80034a4:	4770      	bx	lr
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80034ac:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80034ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80034b0:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80034b4:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80034b6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80034b8:	6813      	ldr	r3, [r2, #0]
 80034ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034be:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80034c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80034c6:	6803      	ldr	r3, [r0, #0]
 80034c8:	f241 0214 	movw	r2, #4116	; 0x1014
 80034cc:	589a      	ldr	r2, [r3, r2]
 80034ce:	f012 0f04 	tst.w	r2, #4
 80034d2:	d008      	beq.n	80034e6 <HAL_ETH_TransmitFrame+0xa6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80034d4:	f241 0214 	movw	r2, #4116	; 0x1014
 80034d8:	2104      	movs	r1, #4
 80034da:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 80034dc:	6802      	ldr	r2, [r0, #0]
 80034de:	f241 0304 	movw	r3, #4100	; 0x1004
 80034e2:	2100      	movs	r1, #0
 80034e4:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 80034e6:	2301      	movs	r3, #1
 80034e8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80034ec:	2300      	movs	r3, #0
 80034ee:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80034f2:	4618      	mov	r0, r3
}
 80034f4:	bc30      	pop	{r4, r5}
 80034f6:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80034f8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80034fa:	682c      	ldr	r4, [r5, #0]
 80034fc:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8003500:	602c      	str	r4, [r5, #0]
 8003502:	e011      	b.n	8003528 <HAL_ETH_TransmitFrame+0xe8>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003504:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8003506:	682c      	ldr	r4, [r5, #0]
 8003508:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800350c:	602c      	str	r4, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800350e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003510:	68e4      	ldr	r4, [r4, #12]
 8003512:	62c4      	str	r4, [r0, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8003514:	3301      	adds	r3, #1
 8003516:	429a      	cmp	r2, r3
 8003518:	d9d5      	bls.n	80034c6 <HAL_ETH_TransmitFrame+0x86>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800351a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 800351c:	682c      	ldr	r4, [r5, #0]
 800351e:	f024 5440 	bic.w	r4, r4, #805306368	; 0x30000000
 8003522:	602c      	str	r4, [r5, #0]
      if (i == 0) 
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0e7      	beq.n	80034f8 <HAL_ETH_TransmitFrame+0xb8>
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003528:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800352a:	f240 55f4 	movw	r5, #1524	; 0x5f4
 800352e:	6065      	str	r5, [r4, #4]
      if (i == (bufcount-1))
 8003530:	1e54      	subs	r4, r2, #1
 8003532:	429c      	cmp	r4, r3
 8003534:	d1e6      	bne.n	8003504 <HAL_ETH_TransmitFrame+0xc4>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003536:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8003538:	682c      	ldr	r4, [r5, #0]
 800353a:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800353e:	602c      	str	r4, [r5, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8003540:	4c06      	ldr	r4, [pc, #24]	; (800355c <HAL_ETH_TransmitFrame+0x11c>)
 8003542:	fb04 1402 	mla	r4, r4, r2, r1
 8003546:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800354a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 800354c:	f3c4 040c 	ubfx	r4, r4, #0, #13
 8003550:	606c      	str	r4, [r5, #4]
 8003552:	e7d7      	b.n	8003504 <HAL_ETH_TransmitFrame+0xc4>
  __HAL_LOCK(heth);
 8003554:	2002      	movs	r0, #2
}
 8003556:	4770      	bx	lr
 8003558:	ac02b00b 	.word	0xac02b00b
 800355c:	fffffa0c 	.word	0xfffffa0c

08003560 <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 8003560:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8003564:	2b01      	cmp	r3, #1
 8003566:	d040      	beq.n	80035ea <HAL_ETH_GetReceivedFrame+0x8a>
 8003568:	2301      	movs	r3, #1
 800356a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800356e:	2302      	movs	r3, #2
 8003570:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8003574:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	2a00      	cmp	r2, #0
 800357a:	db28      	blt.n	80035ce <HAL_ETH_GetReceivedFrame+0x6e>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003582:	d019      	beq.n	80035b8 <HAL_ETH_GetReceivedFrame+0x58>
      (heth->RxFrameInfos).SegCount++;
 8003584:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003586:	3201      	adds	r2, #1
 8003588:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos).SegCount == 1)
 800358a:	2a01      	cmp	r2, #1
 800358c:	d012      	beq.n	80035b4 <HAL_ETH_GetReceivedFrame+0x54>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800358e:	6343      	str	r3, [r0, #52]	; 0x34
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8003596:	3a04      	subs	r2, #4
      heth->RxFrameInfos.length = framelength;
 8003598:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800359a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800359c:	6892      	ldr	r2, [r2, #8]
 800359e:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80035aa:	2300      	movs	r3, #0
 80035ac:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 80035b0:	4618      	mov	r0, r3
 80035b2:	4770      	bx	lr
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80035b4:	6303      	str	r3, [r0, #48]	; 0x30
 80035b6:	e7ea      	b.n	800358e <HAL_ETH_GetReceivedFrame+0x2e>
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	f412 7f00 	tst.w	r2, #512	; 0x200
 80035be:	d00e      	beq.n	80035de <HAL_ETH_GetReceivedFrame+0x7e>
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80035c0:	6303      	str	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80035c2:	2200      	movs	r2, #0
 80035c4:	6342      	str	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 80035c6:	2201      	movs	r2, #1
 80035c8:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	6283      	str	r3, [r0, #40]	; 0x28
  heth->State = HAL_ETH_STATE_READY;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80035d4:	2200      	movs	r2, #0
 80035d6:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 80035da:	4618      	mov	r0, r3
 80035dc:	4770      	bx	lr
      (heth->RxFrameInfos).SegCount++;
 80035de:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80035e0:	3201      	adds	r2, #1
 80035e2:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	6283      	str	r3, [r0, #40]	; 0x28
 80035e8:	e7f1      	b.n	80035ce <HAL_ETH_GetReceivedFrame+0x6e>
  __HAL_LOCK(heth);
 80035ea:	2002      	movs	r0, #2
}
 80035ec:	4770      	bx	lr

080035ee <HAL_ETH_ReadPHYRegister>:
{
 80035ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80035f0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b82      	cmp	r3, #130	; 0x82
 80035f8:	d033      	beq.n	8003662 <HAL_ETH_ReadPHYRegister+0x74>
 80035fa:	4616      	mov	r6, r2
 80035fc:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80035fe:	2382      	movs	r3, #130	; 0x82
 8003600:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8003604:	6802      	ldr	r2, [r0, #0]
 8003606:	6913      	ldr	r3, [r2, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003608:	f003 031c 	and.w	r3, r3, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800360c:	8a04      	ldrh	r4, [r0, #16]
 800360e:	02e4      	lsls	r4, r4, #11
 8003610:	b2a4      	uxth	r4, r4
 8003612:	4323      	orrs	r3, r4
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003614:	018c      	lsls	r4, r1, #6
 8003616:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800361a:	431c      	orrs	r4, r3
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800361c:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 8003620:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8003622:	f7fd fa8d 	bl	8000b40 <HAL_GetTick>
 8003626:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003628:	f014 0f01 	tst.w	r4, #1
 800362c:	d010      	beq.n	8003650 <HAL_ETH_ReadPHYRegister+0x62>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800362e:	f7fd fa87 	bl	8000b40 <HAL_GetTick>
 8003632:	1bc0      	subs	r0, r0, r7
 8003634:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003638:	d202      	bcs.n	8003640 <HAL_ETH_ReadPHYRegister+0x52>
    tmpreg = heth->Instance->MACMIIAR;
 800363a:	682b      	ldr	r3, [r5, #0]
 800363c:	691c      	ldr	r4, [r3, #16]
 800363e:	e7f3      	b.n	8003628 <HAL_ETH_ReadPHYRegister+0x3a>
      heth->State= HAL_ETH_STATE_READY;
 8003640:	2301      	movs	r3, #1
 8003642:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8003646:	2300      	movs	r3, #0
 8003648:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 800364c:	2003      	movs	r0, #3
 800364e:	e007      	b.n	8003660 <HAL_ETH_ReadPHYRegister+0x72>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003650:	682b      	ldr	r3, [r5, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	b29b      	uxth	r3, r3
 8003656:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8003658:	2301      	movs	r3, #1
 800365a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 800365e:	2000      	movs	r0, #0
}
 8003660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003662:	2002      	movs	r0, #2
 8003664:	e7fc      	b.n	8003660 <HAL_ETH_ReadPHYRegister+0x72>

08003666 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003666:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b42      	cmp	r3, #66	; 0x42
 800366e:	d032      	beq.n	80036d6 <HAL_ETH_WritePHYRegister+0x70>
{
 8003670:	b570      	push	{r4, r5, r6, lr}
 8003672:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003674:	2342      	movs	r3, #66	; 0x42
 8003676:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 800367a:	6800      	ldr	r0, [r0, #0]
 800367c:	6903      	ldr	r3, [r0, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800367e:	f003 031c 	and.w	r3, r3, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003682:	8a2c      	ldrh	r4, [r5, #16]
 8003684:	02e4      	lsls	r4, r4, #11
 8003686:	b2a4      	uxth	r4, r4
 8003688:	4323      	orrs	r3, r4
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800368a:	018c      	lsls	r4, r1, #6
 800368c:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8003690:	431c      	orrs	r4, r3
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8003692:	f044 0403 	orr.w	r4, r4, #3
 8003696:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003698:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg;
 800369a:	682b      	ldr	r3, [r5, #0]
 800369c:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 800369e:	f7fd fa4f 	bl	8000b40 <HAL_GetTick>
 80036a2:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80036a4:	f014 0f01 	tst.w	r4, #1
 80036a8:	d010      	beq.n	80036cc <HAL_ETH_WritePHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80036aa:	f7fd fa49 	bl	8000b40 <HAL_GetTick>
 80036ae:	1b80      	subs	r0, r0, r6
 80036b0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80036b4:	d202      	bcs.n	80036bc <HAL_ETH_WritePHYRegister+0x56>
    tmpreg = heth->Instance->MACMIIAR;
 80036b6:	682b      	ldr	r3, [r5, #0]
 80036b8:	691c      	ldr	r4, [r3, #16]
 80036ba:	e7f3      	b.n	80036a4 <HAL_ETH_WritePHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 80036bc:	2301      	movs	r3, #1
 80036be:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80036c2:	2300      	movs	r3, #0
 80036c4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80036c8:	2003      	movs	r0, #3
 80036ca:	e003      	b.n	80036d4 <HAL_ETH_WritePHYRegister+0x6e>
  heth->State = HAL_ETH_STATE_READY;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 80036d2:	2000      	movs	r0, #0
}
 80036d4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80036d6:	2002      	movs	r0, #2
}
 80036d8:	4770      	bx	lr
	...

080036dc <HAL_ETH_Init>:
{
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	b082      	sub	sp, #8
  uint32_t tempreg = 0, phyreg = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 80036e4:	2800      	cmp	r0, #0
 80036e6:	f000 810c 	beq.w	8003902 <HAL_ETH_Init+0x226>
 80036ea:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 80036ec:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d032      	beq.n	800375a <HAL_ETH_Init+0x7e>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f4:	4b84      	ldr	r3, [pc, #528]	; (8003908 <HAL_ETH_Init+0x22c>)
 80036f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44
 80036fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003708:	4b80      	ldr	r3, [pc, #512]	; (800390c <HAL_ETH_Init+0x230>)
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003710:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	6a21      	ldr	r1, [r4, #32]
 8003716:	430a      	orrs	r2, r1
 8003718:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003728:	f7fd fa0a 	bl	8000b40 <HAL_GetTick>
 800372c:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8003734:	6812      	ldr	r2, [r2, #0]
 8003736:	f012 0f01 	tst.w	r2, #1
 800373a:	d013      	beq.n	8003764 <HAL_ETH_Init+0x88>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800373c:	f7fd fa00 	bl	8000b40 <HAL_GetTick>
 8003740:	1b40      	subs	r0, r0, r5
 8003742:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8003746:	d9f2      	bls.n	800372e <HAL_ETH_Init+0x52>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003748:	2503      	movs	r5, #3
 800374a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800374e:	2300      	movs	r3, #0
 8003750:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8003754:	4628      	mov	r0, r5
 8003756:	b002      	add	sp, #8
 8003758:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 800375a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800375e:	f001 fb15 	bl	8004d8c <HAL_ETH_MspInit>
 8003762:	e7c7      	b.n	80036f4 <HAL_ETH_Init+0x18>
  tempreg = (heth->Instance)->MACMIIAR;
 8003764:	691d      	ldr	r5, [r3, #16]
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003766:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 800376a:	f001 f855 	bl	8004818 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 800376e:	4b68      	ldr	r3, [pc, #416]	; (8003910 <HAL_ETH_Init+0x234>)
 8003770:	4403      	add	r3, r0
 8003772:	4a68      	ldr	r2, [pc, #416]	; (8003914 <HAL_ETH_Init+0x238>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d855      	bhi.n	8003824 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003778:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003780:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003784:	2100      	movs	r1, #0
 8003786:	4620      	mov	r0, r4
 8003788:	f7ff ff6d 	bl	8003666 <HAL_ETH_WritePHYRegister>
 800378c:	4605      	mov	r5, r0
 800378e:	2800      	cmp	r0, #0
 8003790:	d160      	bne.n	8003854 <HAL_ETH_Init+0x178>
  HAL_Delay(PHY_RESET_DELAY);
 8003792:	20ff      	movs	r0, #255	; 0xff
 8003794:	f7ff fc82 	bl	800309c <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003798:	6863      	ldr	r3, [r4, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 8091 	beq.w	80038c2 <HAL_ETH_Init+0x1e6>
    tickstart = HAL_GetTick();
 80037a0:	f7fd f9ce 	bl	8000b40 <HAL_GetTick>
 80037a4:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80037a6:	aa01      	add	r2, sp, #4
 80037a8:	2101      	movs	r1, #1
 80037aa:	4620      	mov	r0, r4
 80037ac:	f7ff ff1f 	bl	80035ee <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80037b0:	f7fd f9c6 	bl	8000b40 <HAL_GetTick>
 80037b4:	1b80      	subs	r0, r0, r6
 80037b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80037ba:	4298      	cmp	r0, r3
 80037bc:	d852      	bhi.n	8003864 <HAL_ETH_Init+0x188>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80037be:	9b01      	ldr	r3, [sp, #4]
 80037c0:	f013 0f04 	tst.w	r3, #4
 80037c4:	d0ef      	beq.n	80037a6 <HAL_ETH_Init+0xca>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80037c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037ca:	2100      	movs	r1, #0
 80037cc:	4620      	mov	r0, r4
 80037ce:	f7ff ff4a 	bl	8003666 <HAL_ETH_WritePHYRegister>
 80037d2:	2800      	cmp	r0, #0
 80037d4:	d152      	bne.n	800387c <HAL_ETH_Init+0x1a0>
    tickstart = HAL_GetTick();
 80037d6:	f7fd f9b3 	bl	8000b40 <HAL_GetTick>
 80037da:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80037dc:	aa01      	add	r2, sp, #4
 80037de:	2101      	movs	r1, #1
 80037e0:	4620      	mov	r0, r4
 80037e2:	f7ff ff04 	bl	80035ee <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80037e6:	f7fd f9ab 	bl	8000b40 <HAL_GetTick>
 80037ea:	1b80      	subs	r0, r0, r6
 80037ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80037f0:	4298      	cmp	r0, r3
 80037f2:	d84b      	bhi.n	800388c <HAL_ETH_Init+0x1b0>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80037f4:	9b01      	ldr	r3, [sp, #4]
 80037f6:	f013 0f20 	tst.w	r3, #32
 80037fa:	d0ef      	beq.n	80037dc <HAL_ETH_Init+0x100>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80037fc:	aa01      	add	r2, sp, #4
 80037fe:	2110      	movs	r1, #16
 8003800:	4620      	mov	r0, r4
 8003802:	f7ff fef4 	bl	80035ee <HAL_ETH_ReadPHYRegister>
 8003806:	2800      	cmp	r0, #0
 8003808:	d14c      	bne.n	80038a4 <HAL_ETH_Init+0x1c8>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800380a:	9b01      	ldr	r3, [sp, #4]
 800380c:	f013 0f04 	tst.w	r3, #4
 8003810:	d050      	beq.n	80038b4 <HAL_ETH_Init+0x1d8>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003812:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003816:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003818:	f013 0f02 	tst.w	r3, #2
 800381c:	d04d      	beq.n	80038ba <HAL_ETH_Init+0x1de>
      (heth->Init).Speed = ETH_SPEED_10M; 
 800381e:	2300      	movs	r3, #0
 8003820:	60a3      	str	r3, [r4, #8]
 8003822:	e05e      	b.n	80038e2 <HAL_ETH_Init+0x206>
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8003824:	4b3c      	ldr	r3, [pc, #240]	; (8003918 <HAL_ETH_Init+0x23c>)
 8003826:	4403      	add	r3, r0
 8003828:	4a3c      	ldr	r2, [pc, #240]	; (800391c <HAL_ETH_Init+0x240>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d802      	bhi.n	8003834 <HAL_ETH_Init+0x158>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800382e:	f045 050c 	orr.w	r5, r5, #12
 8003832:	e7a3      	b.n	800377c <HAL_ETH_Init+0xa0>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8003834:	4b3a      	ldr	r3, [pc, #232]	; (8003920 <HAL_ETH_Init+0x244>)
 8003836:	4403      	add	r3, r0
 8003838:	4a3a      	ldr	r2, [pc, #232]	; (8003924 <HAL_ETH_Init+0x248>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d99e      	bls.n	800377c <HAL_ETH_Init+0xa0>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800383e:	4b3a      	ldr	r3, [pc, #232]	; (8003928 <HAL_ETH_Init+0x24c>)
 8003840:	4403      	add	r3, r0
 8003842:	4a3a      	ldr	r2, [pc, #232]	; (800392c <HAL_ETH_Init+0x250>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d802      	bhi.n	800384e <HAL_ETH_Init+0x172>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003848:	f045 0504 	orr.w	r5, r5, #4
 800384c:	e796      	b.n	800377c <HAL_ETH_Init+0xa0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800384e:	f045 0510 	orr.w	r5, r5, #16
 8003852:	e793      	b.n	800377c <HAL_ETH_Init+0xa0>
    ETH_MACDMAConfig(heth, err);
 8003854:	2101      	movs	r1, #1
 8003856:	4620      	mov	r0, r4
 8003858:	f7ff fcb6 	bl	80031c8 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 800385c:	2501      	movs	r5, #1
 800385e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 8003862:	e777      	b.n	8003754 <HAL_ETH_Init+0x78>
        ETH_MACDMAConfig(heth, err);
 8003864:	2101      	movs	r1, #1
 8003866:	4620      	mov	r0, r4
 8003868:	f7ff fcae 	bl	80031c8 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 800386c:	2301      	movs	r3, #1
 800386e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8003872:	2300      	movs	r3, #0
 8003874:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8003878:	2503      	movs	r5, #3
 800387a:	e76b      	b.n	8003754 <HAL_ETH_Init+0x78>
      ETH_MACDMAConfig(heth, err);
 800387c:	2101      	movs	r1, #1
 800387e:	4620      	mov	r0, r4
 8003880:	f7ff fca2 	bl	80031c8 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8003884:	2501      	movs	r5, #1
 8003886:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 800388a:	e763      	b.n	8003754 <HAL_ETH_Init+0x78>
        ETH_MACDMAConfig(heth, err);
 800388c:	2101      	movs	r1, #1
 800388e:	4620      	mov	r0, r4
 8003890:	f7ff fc9a 	bl	80031c8 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8003894:	2301      	movs	r3, #1
 8003896:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800389a:	2300      	movs	r3, #0
 800389c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 80038a0:	2503      	movs	r5, #3
 80038a2:	e757      	b.n	8003754 <HAL_ETH_Init+0x78>
      ETH_MACDMAConfig(heth, err);
 80038a4:	2101      	movs	r1, #1
 80038a6:	4620      	mov	r0, r4
 80038a8:	f7ff fc8e 	bl	80031c8 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80038ac:	2501      	movs	r5, #1
 80038ae:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 80038b2:	e74f      	b.n	8003754 <HAL_ETH_Init+0x78>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80038b4:	2200      	movs	r2, #0
 80038b6:	60e2      	str	r2, [r4, #12]
 80038b8:	e7ae      	b.n	8003818 <HAL_ETH_Init+0x13c>
      (heth->Init).Speed = ETH_SPEED_100M;
 80038ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038be:	60a3      	str	r3, [r4, #8]
 80038c0:	e00f      	b.n	80038e2 <HAL_ETH_Init+0x206>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80038c2:	68e2      	ldr	r2, [r4, #12]
 80038c4:	f3c2 02cf 	ubfx	r2, r2, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80038c8:	68a3      	ldr	r3, [r4, #8]
 80038ca:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80038ce:	431a      	orrs	r2, r3
 80038d0:	2100      	movs	r1, #0
 80038d2:	4620      	mov	r0, r4
 80038d4:	f7ff fec7 	bl	8003666 <HAL_ETH_WritePHYRegister>
 80038d8:	b958      	cbnz	r0, 80038f2 <HAL_ETH_Init+0x216>
    HAL_Delay(PHY_CONFIG_DELAY);
 80038da:	f640 70ff 	movw	r0, #4095	; 0xfff
 80038de:	f7ff fbdd 	bl	800309c <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 80038e2:	2100      	movs	r1, #0
 80038e4:	4620      	mov	r0, r4
 80038e6:	f7ff fc6f 	bl	80031c8 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 80038ea:	2301      	movs	r3, #1
 80038ec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 80038f0:	e730      	b.n	8003754 <HAL_ETH_Init+0x78>
      ETH_MACDMAConfig(heth, err);
 80038f2:	2101      	movs	r1, #1
 80038f4:	4620      	mov	r0, r4
 80038f6:	f7ff fc67 	bl	80031c8 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80038fa:	2501      	movs	r5, #1
 80038fc:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8003900:	e728      	b.n	8003754 <HAL_ETH_Init+0x78>
    return HAL_ERROR;
 8003902:	2501      	movs	r5, #1
 8003904:	e726      	b.n	8003754 <HAL_ETH_Init+0x78>
 8003906:	bf00      	nop
 8003908:	40023800 	.word	0x40023800
 800390c:	40013800 	.word	0x40013800
 8003910:	feced300 	.word	0xfeced300
 8003914:	00e4e1bf 	.word	0x00e4e1bf
 8003918:	fde9f140 	.word	0xfde9f140
 800391c:	017d783f 	.word	0x017d783f
 8003920:	fc6c7900 	.word	0xfc6c7900
 8003924:	026259ff 	.word	0x026259ff
 8003928:	fa0a1f00 	.word	0xfa0a1f00
 800392c:	02faf07f 	.word	0x02faf07f

08003930 <HAL_ETH_Start>:
{  
 8003930:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 8003932:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8003936:	2b01      	cmp	r3, #1
 8003938:	d01a      	beq.n	8003970 <HAL_ETH_Start+0x40>
 800393a:	4604      	mov	r4, r0
 800393c:	2501      	movs	r5, #1
 800393e:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8003942:	2302      	movs	r3, #2
 8003944:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 8003948:	f7ff fcca 	bl	80032e0 <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 800394c:	4620      	mov	r0, r4
 800394e:	f7ff fcdc 	bl	800330a <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 8003952:	4620      	mov	r0, r4
 8003954:	f7ff fcee 	bl	8003334 <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 8003958:	4620      	mov	r0, r4
 800395a:	f7ff fc25 	bl	80031a8 <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 800395e:	4620      	mov	r0, r4
 8003960:	f7ff fc2a 	bl	80031b8 <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 8003964:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8003968:	2000      	movs	r0, #0
 800396a:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
}
 800396e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(heth);
 8003970:	2002      	movs	r0, #2
 8003972:	e7fc      	b.n	800396e <HAL_ETH_Start+0x3e>

08003974 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003974:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8003976:	490a      	ldr	r1, [pc, #40]	; (80039a0 <FLASH_Program_DoubleWord+0x2c>)
 8003978:	690c      	ldr	r4, [r1, #16]
 800397a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800397e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003980:	690c      	ldr	r4, [r1, #16]
 8003982:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8003986:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003988:	690c      	ldr	r4, [r1, #16]
 800398a:	f044 0401 	orr.w	r4, r4, #1
 800398e:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003990:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003992:	6043      	str	r3, [r0, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003994:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8003998:	f85d 4b04 	ldr.w	r4, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40023c00 	.word	0x40023c00

080039a4 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80039a4:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <FLASH_Program_Word+0x24>)
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039ac:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	f042 0201 	orr.w	r2, r2, #1
 80039bc:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80039be:	6001      	str	r1, [r0, #0]
 80039c0:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40023c00 	.word	0x40023c00

080039cc <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80039cc:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <FLASH_Program_HalfWord+0x24>)
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039d4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039dc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	f042 0201 	orr.w	r2, r2, #1
 80039e4:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80039e6:	8001      	strh	r1, [r0, #0]
 80039e8:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40023c00 	.word	0x40023c00

080039f4 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <FLASH_Program_Byte+0x20>)
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039fc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	f042 0201 	orr.w	r2, r2, #1
 8003a08:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 8003a0a:	7001      	strb	r1, [r0, #0]
 8003a0c:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40023c00 	.word	0x40023c00

08003a18 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003a18:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <FLASH_SetErrorCode+0x6c>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f013 0f02 	tst.w	r3, #2
 8003a20:	d004      	beq.n	8003a2c <FLASH_SetErrorCode+0x14>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003a22:	4a19      	ldr	r2, [pc, #100]	; (8003a88 <FLASH_SetErrorCode+0x70>)
 8003a24:	6993      	ldr	r3, [r2, #24]
 8003a26:	f043 0320 	orr.w	r3, r3, #32
 8003a2a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003a2c:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <FLASH_SetErrorCode+0x6c>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f013 0f10 	tst.w	r3, #16
 8003a34:	d004      	beq.n	8003a40 <FLASH_SetErrorCode+0x28>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003a36:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <FLASH_SetErrorCode+0x70>)
 8003a38:	6993      	ldr	r3, [r2, #24]
 8003a3a:	f043 0310 	orr.w	r3, r3, #16
 8003a3e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003a40:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <FLASH_SetErrorCode+0x6c>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f013 0f20 	tst.w	r3, #32
 8003a48:	d004      	beq.n	8003a54 <FLASH_SetErrorCode+0x3c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003a4a:	4a0f      	ldr	r2, [pc, #60]	; (8003a88 <FLASH_SetErrorCode+0x70>)
 8003a4c:	6993      	ldr	r3, [r2, #24]
 8003a4e:	f043 0308 	orr.w	r3, r3, #8
 8003a52:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003a54:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <FLASH_SetErrorCode+0x6c>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a5c:	d004      	beq.n	8003a68 <FLASH_SetErrorCode+0x50>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003a5e:	4a0a      	ldr	r2, [pc, #40]	; (8003a88 <FLASH_SetErrorCode+0x70>)
 8003a60:	6993      	ldr	r3, [r2, #24]
 8003a62:	f043 0304 	orr.w	r3, r3, #4
 8003a66:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <FLASH_SetErrorCode+0x6c>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003a70:	d004      	beq.n	8003a7c <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8003a72:	4a05      	ldr	r2, [pc, #20]	; (8003a88 <FLASH_SetErrorCode+0x70>)
 8003a74:	6993      	ldr	r3, [r2, #24]
 8003a76:	f043 0302 	orr.w	r3, r3, #2
 8003a7a:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8003a7c:	4b01      	ldr	r3, [pc, #4]	; (8003a84 <FLASH_SetErrorCode+0x6c>)
 8003a7e:	22f2      	movs	r2, #242	; 0xf2
 8003a80:	60da      	str	r2, [r3, #12]
}
 8003a82:	4770      	bx	lr
 8003a84:	40023c00 	.word	0x40023c00
 8003a88:	20000d40 	.word	0x20000d40

08003a8c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003a8c:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <HAL_FLASH_Unlock+0x28>)
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	db01      	blt.n	8003a98 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8003a94:	2000      	movs	r0, #0
 8003a96:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_FLASH_Unlock+0x28>)
 8003a9a:	4a07      	ldr	r2, [pc, #28]	; (8003ab8 <HAL_FLASH_Unlock+0x2c>)
 8003a9c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003a9e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003aa2:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	db01      	blt.n	8003aae <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8003aaa:	2000      	movs	r0, #0
 8003aac:	4770      	bx	lr
      status = HAL_ERROR;
 8003aae:	2001      	movs	r0, #1
}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40023c00 	.word	0x40023c00
 8003ab8:	45670123 	.word	0x45670123

08003abc <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8003abc:	4a03      	ldr	r2, [pc, #12]	; (8003acc <HAL_FLASH_Lock+0x10>)
 8003abe:	6913      	ldr	r3, [r2, #16]
 8003ac0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ac4:	6113      	str	r3, [r2, #16]
}
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40023c00 	.word	0x40023c00

08003ad0 <FLASH_WaitForLastOperation>:
{ 
 8003ad0:	b538      	push	{r3, r4, r5, lr}
 8003ad2:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ad4:	4b16      	ldr	r3, [pc, #88]	; (8003b30 <FLASH_WaitForLastOperation+0x60>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8003ada:	f7fd f831 	bl	8000b40 <HAL_GetTick>
 8003ade:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003ae0:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <FLASH_WaitForLastOperation+0x64>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003ae8:	d00a      	beq.n	8003b00 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8003aea:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003aee:	d0f7      	beq.n	8003ae0 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003af0:	b1cc      	cbz	r4, 8003b26 <FLASH_WaitForLastOperation+0x56>
 8003af2:	f7fd f825 	bl	8000b40 <HAL_GetTick>
 8003af6:	1b40      	subs	r0, r0, r5
 8003af8:	42a0      	cmp	r0, r4
 8003afa:	d9f1      	bls.n	8003ae0 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 8003afc:	2003      	movs	r0, #3
 8003afe:	e00d      	b.n	8003b1c <FLASH_WaitForLastOperation+0x4c>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8003b00:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <FLASH_WaitForLastOperation+0x64>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 8003b08:	d109      	bne.n	8003b1e <FLASH_WaitForLastOperation+0x4e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003b0a:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <FLASH_WaitForLastOperation+0x64>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f013 0f01 	tst.w	r3, #1
 8003b12:	d00a      	beq.n	8003b2a <FLASH_WaitForLastOperation+0x5a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003b14:	4b07      	ldr	r3, [pc, #28]	; (8003b34 <FLASH_WaitForLastOperation+0x64>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8003b1a:	2000      	movs	r0, #0
}  
 8003b1c:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 8003b1e:	f7ff ff7b 	bl	8003a18 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003b22:	2001      	movs	r0, #1
 8003b24:	e7fa      	b.n	8003b1c <FLASH_WaitForLastOperation+0x4c>
        return HAL_TIMEOUT;
 8003b26:	2003      	movs	r0, #3
 8003b28:	e7f8      	b.n	8003b1c <FLASH_WaitForLastOperation+0x4c>
  return HAL_OK;
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	e7f6      	b.n	8003b1c <FLASH_WaitForLastOperation+0x4c>
 8003b2e:	bf00      	nop
 8003b30:	20000d40 	.word	0x20000d40
 8003b34:	40023c00 	.word	0x40023c00

08003b38 <HAL_FLASH_Program>:
{
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8003b3a:	4c1e      	ldr	r4, [pc, #120]	; (8003bb4 <HAL_FLASH_Program+0x7c>)
 8003b3c:	7d24      	ldrb	r4, [r4, #20]
 8003b3e:	2c01      	cmp	r4, #1
 8003b40:	d035      	beq.n	8003bae <HAL_FLASH_Program+0x76>
 8003b42:	461f      	mov	r7, r3
 8003b44:	4616      	mov	r6, r2
 8003b46:	460d      	mov	r5, r1
 8003b48:	4604      	mov	r4, r0
 8003b4a:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <HAL_FLASH_Program+0x7c>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	751a      	strb	r2, [r3, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b54:	f7ff ffbc 	bl	8003ad0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8003b58:	4601      	mov	r1, r0
 8003b5a:	b998      	cbnz	r0, 8003b84 <HAL_FLASH_Program+0x4c>
    switch(TypeProgram)
 8003b5c:	2c03      	cmp	r4, #3
 8003b5e:	d807      	bhi.n	8003b70 <HAL_FLASH_Program+0x38>
 8003b60:	e8df f004 	tbb	[pc, r4]
 8003b64:	1f1a1502 	.word	0x1f1a1502
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8003b68:	b2f1      	uxtb	r1, r6
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	f7ff ff42 	bl	80039f4 <FLASH_Program_Byte>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b74:	f7ff ffac 	bl	8003ad0 <FLASH_WaitForLastOperation>
 8003b78:	4601      	mov	r1, r0
    FLASH->CR &= (~FLASH_CR_PG);
 8003b7a:	4a0f      	ldr	r2, [pc, #60]	; (8003bb8 <HAL_FLASH_Program+0x80>)
 8003b7c:	6913      	ldr	r3, [r2, #16]
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <HAL_FLASH_Program+0x7c>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	751a      	strb	r2, [r3, #20]
}
 8003b8a:	4608      	mov	r0, r1
 8003b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003b8e:	b2b1      	uxth	r1, r6
 8003b90:	4628      	mov	r0, r5
 8003b92:	f7ff ff1b 	bl	80039cc <FLASH_Program_HalfWord>
        break;
 8003b96:	e7eb      	b.n	8003b70 <HAL_FLASH_Program+0x38>
        FLASH_Program_Word(Address, (uint32_t) Data);
 8003b98:	4631      	mov	r1, r6
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	f7ff ff02 	bl	80039a4 <FLASH_Program_Word>
        break;
 8003ba0:	e7e6      	b.n	8003b70 <HAL_FLASH_Program+0x38>
        FLASH_Program_DoubleWord(Address, Data);
 8003ba2:	4632      	mov	r2, r6
 8003ba4:	463b      	mov	r3, r7
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	f7ff fee4 	bl	8003974 <FLASH_Program_DoubleWord>
        break;
 8003bac:	e7e0      	b.n	8003b70 <HAL_FLASH_Program+0x38>
  __HAL_LOCK(&pFlash);
 8003bae:	2102      	movs	r1, #2
 8003bb0:	e7eb      	b.n	8003b8a <HAL_FLASH_Program+0x52>
 8003bb2:	bf00      	nop
 8003bb4:	20000d40 	.word	0x20000d40
 8003bb8:	40023c00 	.word	0x40023c00

08003bbc <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8003bbc:	4a11      	ldr	r2, [pc, #68]	; (8003c04 <FLASH_MassErase+0x48>)
 8003bbe:	6913      	ldr	r3, [r2, #16]
 8003bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc4:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8003bc6:	2903      	cmp	r1, #3
 8003bc8:	d010      	beq.n	8003bec <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
  }
  else if(Banks == FLASH_BANK_2)
 8003bca:	2902      	cmp	r1, #2
 8003bcc:	d014      	beq.n	8003bf8 <FLASH_MassErase+0x3c>
    FLASH->CR |= FLASH_CR_MER2;
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8003bce:	4a0d      	ldr	r2, [pc, #52]	; (8003c04 <FLASH_MassErase+0x48>)
 8003bd0:	6913      	ldr	r3, [r2, #16]
 8003bd2:	f043 0304 	orr.w	r3, r3, #4
 8003bd6:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8003bd8:	4a0a      	ldr	r2, [pc, #40]	; (8003c04 <FLASH_MassErase+0x48>)
 8003bda:	6913      	ldr	r3, [r2, #16]
 8003bdc:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8003be0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003be4:	6110      	str	r0, [r2, #16]
 8003be6:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8003bea:	4770      	bx	lr
    FLASH->CR |= FLASH_MER_BIT;
 8003bec:	6911      	ldr	r1, [r2, #16]
 8003bee:	f248 0304 	movw	r3, #32772	; 0x8004
 8003bf2:	430b      	orrs	r3, r1
 8003bf4:	6113      	str	r3, [r2, #16]
 8003bf6:	e7ef      	b.n	8003bd8 <FLASH_MassErase+0x1c>
    FLASH->CR |= FLASH_CR_MER2;
 8003bf8:	4a02      	ldr	r2, [pc, #8]	; (8003c04 <FLASH_MassErase+0x48>)
 8003bfa:	6913      	ldr	r3, [r2, #16]
 8003bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c00:	6113      	str	r3, [r2, #16]
 8003c02:	e7e9      	b.n	8003bd8 <FLASH_MassErase+0x1c>
 8003c04:	40023c00 	.word	0x40023c00

08003c08 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003c08:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003c0a:	b149      	cbz	r1, 8003c20 <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003c0c:	2901      	cmp	r1, #1
 8003c0e:	d026      	beq.n	8003c5e <FLASH_Erase_Sector+0x56>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003c10:	2902      	cmp	r1, #2
 8003c12:	d002      	beq.n	8003c1a <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003c14:	f44f 7440 	mov.w	r4, #768	; 0x300
 8003c18:	e003      	b.n	8003c22 <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 8003c1a:	f44f 7400 	mov.w	r4, #512	; 0x200
 8003c1e:	e000      	b.n	8003c22 <FLASH_Erase_Sector+0x1a>
     tmp_psize = FLASH_PSIZE_BYTE;
 8003c20:	2400      	movs	r4, #0
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8003c22:	280b      	cmp	r0, #11
 8003c24:	d900      	bls.n	8003c28 <FLASH_Erase_Sector+0x20>
  {
    Sector += 4;
 8003c26:	3004      	adds	r0, #4
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8003c28:	4b0e      	ldr	r3, [pc, #56]	; (8003c64 <FLASH_Erase_Sector+0x5c>)
 8003c2a:	6919      	ldr	r1, [r3, #16]
 8003c2c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8003c30:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	4322      	orrs	r2, r4
 8003c36:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003c3e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8003c46:	f040 0002 	orr.w	r0, r0, #2
 8003c4a:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003c52:	611a      	str	r2, [r3, #16]
 8003c54:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8003c58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c5c:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003c5e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8003c62:	e7de      	b.n	8003c22 <FLASH_Erase_Sector+0x1a>
 8003c64:	40023c00 	.word	0x40023c00

08003c68 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8003c68:	4b22      	ldr	r3, [pc, #136]	; (8003cf4 <HAL_FLASHEx_Erase+0x8c>)
 8003c6a:	7d1b      	ldrb	r3, [r3, #20]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d03d      	beq.n	8003cec <HAL_FLASHEx_Erase+0x84>
{
 8003c70:	b570      	push	{r4, r5, r6, lr}
 8003c72:	460e      	mov	r6, r1
 8003c74:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8003c76:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <HAL_FLASHEx_Erase+0x8c>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	751a      	strb	r2, [r3, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c80:	f7ff ff26 	bl	8003ad0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8003c84:	4602      	mov	r2, r0
 8003c86:	bb60      	cbnz	r0, 8003ce2 <HAL_FLASHEx_Erase+0x7a>
    *SectorError = 0xFFFFFFFFU;
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c8c:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d016      	beq.n	8003cc2 <HAL_FLASHEx_Erase+0x5a>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003c94:	68a5      	ldr	r5, [r4, #8]
 8003c96:	68e3      	ldr	r3, [r4, #12]
 8003c98:	68a1      	ldr	r1, [r4, #8]
 8003c9a:	440b      	add	r3, r1
 8003c9c:	42ab      	cmp	r3, r5
 8003c9e:	d920      	bls.n	8003ce2 <HAL_FLASHEx_Erase+0x7a>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003ca0:	7c21      	ldrb	r1, [r4, #16]
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	f7ff ffb0 	bl	8003c08 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ca8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003cac:	f7ff ff10 	bl	8003ad0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8003cb0:	4a11      	ldr	r2, [pc, #68]	; (8003cf8 <HAL_FLASHEx_Erase+0x90>)
 8003cb2:	6913      	ldr	r3, [r2, #16]
 8003cb4:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003cb8:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 8003cba:	4602      	mov	r2, r0
 8003cbc:	b980      	cbnz	r0, 8003ce0 <HAL_FLASHEx_Erase+0x78>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003cbe:	3501      	adds	r5, #1
 8003cc0:	e7e9      	b.n	8003c96 <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003cc2:	6861      	ldr	r1, [r4, #4]
 8003cc4:	7c20      	ldrb	r0, [r4, #16]
 8003cc6:	f7ff ff79 	bl	8003bbc <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003cca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003cce:	f7ff feff 	bl	8003ad0 <FLASH_WaitForLastOperation>
 8003cd2:	4602      	mov	r2, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8003cd4:	4908      	ldr	r1, [pc, #32]	; (8003cf8 <HAL_FLASHEx_Erase+0x90>)
 8003cd6:	6908      	ldr	r0, [r1, #16]
 8003cd8:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_FLASHEx_Erase+0x94>)
 8003cda:	4003      	ands	r3, r0
 8003cdc:	610b      	str	r3, [r1, #16]
 8003cde:	e000      	b.n	8003ce2 <HAL_FLASHEx_Erase+0x7a>
          *SectorError = index;
 8003ce0:	6035      	str	r5, [r6, #0]
  __HAL_UNLOCK(&pFlash);
 8003ce2:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <HAL_FLASHEx_Erase+0x8c>)
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	7519      	strb	r1, [r3, #20]
}
 8003ce8:	4610      	mov	r0, r2
 8003cea:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8003cec:	2202      	movs	r2, #2
}
 8003cee:	4610      	mov	r0, r2
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	20000d40 	.word	0x20000d40
 8003cf8:	40023c00 	.word	0x40023c00
 8003cfc:	ffff7ffb 	.word	0xffff7ffb

08003d00 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d00:	2300      	movs	r3, #0
 8003d02:	2b0f      	cmp	r3, #15
 8003d04:	f200 80e2 	bhi.w	8003ecc <HAL_GPIO_Init+0x1cc>
{
 8003d08:	b4f0      	push	{r4, r5, r6, r7}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	e039      	b.n	8003d82 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d0e:	2209      	movs	r2, #9
 8003d10:	e000      	b.n	8003d14 <HAL_GPIO_Init+0x14>
 8003d12:	2200      	movs	r2, #0
 8003d14:	40b2      	lsls	r2, r6
 8003d16:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d18:	3402      	adds	r4, #2
 8003d1a:	4e6d      	ldr	r6, [pc, #436]	; (8003ed0 <HAL_GPIO_Init+0x1d0>)
 8003d1c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d20:	4a6c      	ldr	r2, [pc, #432]	; (8003ed4 <HAL_GPIO_Init+0x1d4>)
 8003d22:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003d24:	43ea      	mvns	r2, r5
 8003d26:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d2a:	684f      	ldr	r7, [r1, #4]
 8003d2c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8003d30:	d001      	beq.n	8003d36 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8003d32:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8003d36:	4c67      	ldr	r4, [pc, #412]	; (8003ed4 <HAL_GPIO_Init+0x1d4>)
 8003d38:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8003d3a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8003d3c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d40:	684f      	ldr	r7, [r1, #4]
 8003d42:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003d46:	d001      	beq.n	8003d4c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8003d48:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8003d4c:	4c61      	ldr	r4, [pc, #388]	; (8003ed4 <HAL_GPIO_Init+0x1d4>)
 8003d4e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d50:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8003d52:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d56:	684f      	ldr	r7, [r1, #4]
 8003d58:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003d5c:	d001      	beq.n	8003d62 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8003d5e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8003d62:	4c5c      	ldr	r4, [pc, #368]	; (8003ed4 <HAL_GPIO_Init+0x1d4>)
 8003d64:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8003d66:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003d68:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d6a:	684e      	ldr	r6, [r1, #4]
 8003d6c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8003d70:	d001      	beq.n	8003d76 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8003d72:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8003d76:	4c57      	ldr	r4, [pc, #348]	; (8003ed4 <HAL_GPIO_Init+0x1d4>)
 8003d78:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	2b0f      	cmp	r3, #15
 8003d7e:	f200 80a2 	bhi.w	8003ec6 <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 8003d82:	2201      	movs	r2, #1
 8003d84:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d86:	680c      	ldr	r4, [r1, #0]
 8003d88:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8003d8c:	42aa      	cmp	r2, r5
 8003d8e:	d1f4      	bne.n	8003d7a <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d90:	684c      	ldr	r4, [r1, #4]
 8003d92:	2c12      	cmp	r4, #18
 8003d94:	bf18      	it	ne
 8003d96:	2c02      	cmpne	r4, #2
 8003d98:	d110      	bne.n	8003dbc <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8003d9a:	08de      	lsrs	r6, r3, #3
 8003d9c:	3608      	adds	r6, #8
 8003d9e:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003da2:	f003 0407 	and.w	r4, r3, #7
 8003da6:	00a7      	lsls	r7, r4, #2
 8003da8:	240f      	movs	r4, #15
 8003daa:	40bc      	lsls	r4, r7
 8003dac:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003db0:	690c      	ldr	r4, [r1, #16]
 8003db2:	40bc      	lsls	r4, r7
 8003db4:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8003db8:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8003dbc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003dbe:	005f      	lsls	r7, r3, #1
 8003dc0:	2603      	movs	r6, #3
 8003dc2:	40be      	lsls	r6, r7
 8003dc4:	43f6      	mvns	r6, r6
 8003dc6:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003dca:	684c      	ldr	r4, [r1, #4]
 8003dcc:	f004 0403 	and.w	r4, r4, #3
 8003dd0:	40bc      	lsls	r4, r7
 8003dd2:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003dd6:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dd8:	684c      	ldr	r4, [r1, #4]
 8003dda:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8003dde:	2c11      	cmp	r4, #17
 8003de0:	bf18      	it	ne
 8003de2:	f1bc 0f01 	cmpne.w	ip, #1
 8003de6:	d901      	bls.n	8003dec <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003de8:	2c12      	cmp	r4, #18
 8003dea:	d111      	bne.n	8003e10 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8003dec:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003dee:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8003df2:	68cc      	ldr	r4, [r1, #12]
 8003df4:	40bc      	lsls	r4, r7
 8003df6:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8003dfa:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003dfc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dfe:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003e02:	684c      	ldr	r4, [r1, #4]
 8003e04:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 8003e0e:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8003e10:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e12:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e14:	688a      	ldr	r2, [r1, #8]
 8003e16:	40ba      	lsls	r2, r7
 8003e18:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8003e1a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e1c:	684a      	ldr	r2, [r1, #4]
 8003e1e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8003e22:	d0aa      	beq.n	8003d7a <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e24:	4a2c      	ldr	r2, [pc, #176]	; (8003ed8 <HAL_GPIO_Init+0x1d8>)
 8003e26:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8003e28:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003e2c:	6454      	str	r4, [r2, #68]	; 0x44
 8003e2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e30:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003e34:	9201      	str	r2, [sp, #4]
 8003e36:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8003e38:	089c      	lsrs	r4, r3, #2
 8003e3a:	1ca6      	adds	r6, r4, #2
 8003e3c:	4a24      	ldr	r2, [pc, #144]	; (8003ed0 <HAL_GPIO_Init+0x1d0>)
 8003e3e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e42:	f003 0203 	and.w	r2, r3, #3
 8003e46:	0096      	lsls	r6, r2, #2
 8003e48:	220f      	movs	r2, #15
 8003e4a:	40b2      	lsls	r2, r6
 8003e4c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e50:	4a22      	ldr	r2, [pc, #136]	; (8003edc <HAL_GPIO_Init+0x1dc>)
 8003e52:	4290      	cmp	r0, r2
 8003e54:	f43f af5d 	beq.w	8003d12 <HAL_GPIO_Init+0x12>
 8003e58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e5c:	4290      	cmp	r0, r2
 8003e5e:	d022      	beq.n	8003ea6 <HAL_GPIO_Init+0x1a6>
 8003e60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e64:	4290      	cmp	r0, r2
 8003e66:	d020      	beq.n	8003eaa <HAL_GPIO_Init+0x1aa>
 8003e68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e6c:	4290      	cmp	r0, r2
 8003e6e:	d01e      	beq.n	8003eae <HAL_GPIO_Init+0x1ae>
 8003e70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e74:	4290      	cmp	r0, r2
 8003e76:	d01c      	beq.n	8003eb2 <HAL_GPIO_Init+0x1b2>
 8003e78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e7c:	4290      	cmp	r0, r2
 8003e7e:	d01a      	beq.n	8003eb6 <HAL_GPIO_Init+0x1b6>
 8003e80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e84:	4290      	cmp	r0, r2
 8003e86:	d018      	beq.n	8003eba <HAL_GPIO_Init+0x1ba>
 8003e88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e8c:	4290      	cmp	r0, r2
 8003e8e:	d016      	beq.n	8003ebe <HAL_GPIO_Init+0x1be>
 8003e90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e94:	4290      	cmp	r0, r2
 8003e96:	d014      	beq.n	8003ec2 <HAL_GPIO_Init+0x1c2>
 8003e98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e9c:	4290      	cmp	r0, r2
 8003e9e:	f43f af36 	beq.w	8003d0e <HAL_GPIO_Init+0xe>
 8003ea2:	220a      	movs	r2, #10
 8003ea4:	e736      	b.n	8003d14 <HAL_GPIO_Init+0x14>
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	e734      	b.n	8003d14 <HAL_GPIO_Init+0x14>
 8003eaa:	2202      	movs	r2, #2
 8003eac:	e732      	b.n	8003d14 <HAL_GPIO_Init+0x14>
 8003eae:	2203      	movs	r2, #3
 8003eb0:	e730      	b.n	8003d14 <HAL_GPIO_Init+0x14>
 8003eb2:	2204      	movs	r2, #4
 8003eb4:	e72e      	b.n	8003d14 <HAL_GPIO_Init+0x14>
 8003eb6:	2205      	movs	r2, #5
 8003eb8:	e72c      	b.n	8003d14 <HAL_GPIO_Init+0x14>
 8003eba:	2206      	movs	r2, #6
 8003ebc:	e72a      	b.n	8003d14 <HAL_GPIO_Init+0x14>
 8003ebe:	2207      	movs	r2, #7
 8003ec0:	e728      	b.n	8003d14 <HAL_GPIO_Init+0x14>
 8003ec2:	2208      	movs	r2, #8
 8003ec4:	e726      	b.n	8003d14 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8003ec6:	b002      	add	sp, #8
 8003ec8:	bcf0      	pop	{r4, r5, r6, r7}
 8003eca:	4770      	bx	lr
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40013800 	.word	0x40013800
 8003ed4:	40013c00 	.word	0x40013c00
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40020000 	.word	0x40020000

08003ee0 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	2b0f      	cmp	r3, #15
 8003ee4:	f200 8092 	bhi.w	800400c <HAL_GPIO_DeInit+0x12c>
{
 8003ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eea:	e00a      	b.n	8003f02 <HAL_GPIO_DeInit+0x22>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003eec:	2509      	movs	r5, #9
 8003eee:	e000      	b.n	8003ef2 <HAL_GPIO_DeInit+0x12>
 8003ef0:	2500      	movs	r5, #0
 8003ef2:	fa05 f202 	lsl.w	r2, r5, r2
 8003ef6:	42a2      	cmp	r2, r4
 8003ef8:	d06f      	beq.n	8003fda <HAL_GPIO_DeInit+0xfa>
  for(position = 0; position < GPIO_NUMBER; position++)
 8003efa:	3301      	adds	r3, #1
 8003efc:	2b0f      	cmp	r3, #15
 8003efe:	f200 8084 	bhi.w	800400a <HAL_GPIO_DeInit+0x12a>
    ioposition = ((uint32_t)0x01) << position;
 8003f02:	2201      	movs	r2, #1
 8003f04:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8003f06:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8003f0a:	42b2      	cmp	r2, r6
 8003f0c:	d1f5      	bne.n	8003efa <HAL_GPIO_DeInit+0x1a>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f0e:	6805      	ldr	r5, [r0, #0]
 8003f10:	005f      	lsls	r7, r3, #1
 8003f12:	2403      	movs	r4, #3
 8003f14:	40bc      	lsls	r4, r7
 8003f16:	43e4      	mvns	r4, r4
 8003f18:	4025      	ands	r5, r4
 8003f1a:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f1c:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8003f20:	f10c 0c08 	add.w	ip, ip, #8
 8003f24:	f850 e02c 	ldr.w	lr, [r0, ip, lsl #2]
 8003f28:	f003 0507 	and.w	r5, r3, #7
 8003f2c:	00ad      	lsls	r5, r5, #2
 8003f2e:	270f      	movs	r7, #15
 8003f30:	fa07 f505 	lsl.w	r5, r7, r5
 8003f34:	ea2e 0505 	bic.w	r5, lr, r5
 8003f38:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003f3c:	6885      	ldr	r5, [r0, #8]
 8003f3e:	4025      	ands	r5, r4
 8003f40:	6085      	str	r5, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f42:	6845      	ldr	r5, [r0, #4]
 8003f44:	ea25 0202 	bic.w	r2, r5, r2
 8003f48:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f4a:	68c2      	ldr	r2, [r0, #12]
 8003f4c:	4014      	ands	r4, r2
 8003f4e:	60c4      	str	r4, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8003f50:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003f54:	f10c 0402 	add.w	r4, ip, #2
 8003f58:	4a2d      	ldr	r2, [pc, #180]	; (8004010 <HAL_GPIO_DeInit+0x130>)
 8003f5a:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f5e:	f003 0203 	and.w	r2, r3, #3
 8003f62:	0092      	lsls	r2, r2, #2
 8003f64:	4097      	lsls	r7, r2
 8003f66:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003f68:	4d2a      	ldr	r5, [pc, #168]	; (8004014 <HAL_GPIO_DeInit+0x134>)
 8003f6a:	42a8      	cmp	r0, r5
 8003f6c:	d0c0      	beq.n	8003ef0 <HAL_GPIO_DeInit+0x10>
 8003f6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f72:	42a8      	cmp	r0, r5
 8003f74:	d021      	beq.n	8003fba <HAL_GPIO_DeInit+0xda>
 8003f76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f7a:	42a8      	cmp	r0, r5
 8003f7c:	d01f      	beq.n	8003fbe <HAL_GPIO_DeInit+0xde>
 8003f7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f82:	42a8      	cmp	r0, r5
 8003f84:	d01d      	beq.n	8003fc2 <HAL_GPIO_DeInit+0xe2>
 8003f86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f8a:	42a8      	cmp	r0, r5
 8003f8c:	d01b      	beq.n	8003fc6 <HAL_GPIO_DeInit+0xe6>
 8003f8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f92:	42a8      	cmp	r0, r5
 8003f94:	d019      	beq.n	8003fca <HAL_GPIO_DeInit+0xea>
 8003f96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f9a:	42a8      	cmp	r0, r5
 8003f9c:	d017      	beq.n	8003fce <HAL_GPIO_DeInit+0xee>
 8003f9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003fa2:	42a8      	cmp	r0, r5
 8003fa4:	d015      	beq.n	8003fd2 <HAL_GPIO_DeInit+0xf2>
 8003fa6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003faa:	42a8      	cmp	r0, r5
 8003fac:	d013      	beq.n	8003fd6 <HAL_GPIO_DeInit+0xf6>
 8003fae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003fb2:	42a8      	cmp	r0, r5
 8003fb4:	d09a      	beq.n	8003eec <HAL_GPIO_DeInit+0xc>
 8003fb6:	250a      	movs	r5, #10
 8003fb8:	e79b      	b.n	8003ef2 <HAL_GPIO_DeInit+0x12>
 8003fba:	2501      	movs	r5, #1
 8003fbc:	e799      	b.n	8003ef2 <HAL_GPIO_DeInit+0x12>
 8003fbe:	2502      	movs	r5, #2
 8003fc0:	e797      	b.n	8003ef2 <HAL_GPIO_DeInit+0x12>
 8003fc2:	2503      	movs	r5, #3
 8003fc4:	e795      	b.n	8003ef2 <HAL_GPIO_DeInit+0x12>
 8003fc6:	2504      	movs	r5, #4
 8003fc8:	e793      	b.n	8003ef2 <HAL_GPIO_DeInit+0x12>
 8003fca:	2505      	movs	r5, #5
 8003fcc:	e791      	b.n	8003ef2 <HAL_GPIO_DeInit+0x12>
 8003fce:	2506      	movs	r5, #6
 8003fd0:	e78f      	b.n	8003ef2 <HAL_GPIO_DeInit+0x12>
 8003fd2:	2507      	movs	r5, #7
 8003fd4:	e78d      	b.n	8003ef2 <HAL_GPIO_DeInit+0x12>
 8003fd6:	2508      	movs	r5, #8
 8003fd8:	e78b      	b.n	8003ef2 <HAL_GPIO_DeInit+0x12>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003fda:	4d0d      	ldr	r5, [pc, #52]	; (8004010 <HAL_GPIO_DeInit+0x130>)
 8003fdc:	f10c 0202 	add.w	r2, ip, #2
 8003fe0:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
 8003fe4:	ea24 0707 	bic.w	r7, r4, r7
 8003fe8:	f845 7022 	str.w	r7, [r5, r2, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003fec:	4c0a      	ldr	r4, [pc, #40]	; (8004018 <HAL_GPIO_DeInit+0x138>)
 8003fee:	6825      	ldr	r5, [r4, #0]
 8003ff0:	43f2      	mvns	r2, r6
 8003ff2:	4015      	ands	r5, r2
 8003ff4:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003ff6:	6865      	ldr	r5, [r4, #4]
 8003ff8:	4015      	ands	r5, r2
 8003ffa:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003ffc:	68a5      	ldr	r5, [r4, #8]
 8003ffe:	4015      	ands	r5, r2
 8004000:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004002:	68e5      	ldr	r5, [r4, #12]
 8004004:	402a      	ands	r2, r5
 8004006:	60e2      	str	r2, [r4, #12]
 8004008:	e777      	b.n	8003efa <HAL_GPIO_DeInit+0x1a>
	  }
    }
  }
}
 800400a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40013800 	.word	0x40013800
 8004014:	40020000 	.word	0x40020000
 8004018:	40013c00 	.word	0x40013c00

0800401c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800401c:	6903      	ldr	r3, [r0, #16]
 800401e:	4219      	tst	r1, r3
 8004020:	d101      	bne.n	8004026 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004022:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8004024:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8004026:	2001      	movs	r0, #1
 8004028:	4770      	bx	lr

0800402a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800402a:	b912      	cbnz	r2, 8004032 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800402c:	0409      	lsls	r1, r1, #16
 800402e:	6181      	str	r1, [r0, #24]
  }
}
 8004030:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8004032:	6181      	str	r1, [r0, #24]
 8004034:	4770      	bx	lr
	...

08004038 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004038:	b510      	push	{r4, lr}
 800403a:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800403c:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <HAL_PWREx_EnableOverDrive+0x74>)
 800403e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004040:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004044:	641a      	str	r2, [r3, #64]	; 0x40
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004050:	4a17      	ldr	r2, [pc, #92]	; (80040b0 <HAL_PWREx_EnableOverDrive+0x78>)
 8004052:	6813      	ldr	r3, [r2, #0]
 8004054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004058:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800405a:	f7fc fd71 	bl	8000b40 <HAL_GetTick>
 800405e:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004060:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <HAL_PWREx_EnableOverDrive+0x78>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004068:	d108      	bne.n	800407c <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800406a:	f7fc fd69 	bl	8000b40 <HAL_GetTick>
 800406e:	1b00      	subs	r0, r0, r4
 8004070:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004074:	d9f4      	bls.n	8004060 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8004076:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8004078:	b002      	add	sp, #8
 800407a:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800407c:	4a0c      	ldr	r2, [pc, #48]	; (80040b0 <HAL_PWREx_EnableOverDrive+0x78>)
 800407e:	6813      	ldr	r3, [r2, #0]
 8004080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004084:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8004086:	f7fc fd5b 	bl	8000b40 <HAL_GetTick>
 800408a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800408c:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <HAL_PWREx_EnableOverDrive+0x78>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004094:	d107      	bne.n	80040a6 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004096:	f7fc fd53 	bl	8000b40 <HAL_GetTick>
 800409a:	1b00      	subs	r0, r0, r4
 800409c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80040a0:	d9f4      	bls.n	800408c <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 80040a2:	2003      	movs	r0, #3
 80040a4:	e7e8      	b.n	8004078 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 80040a6:	2000      	movs	r0, #0
 80040a8:	e7e6      	b.n	8004078 <HAL_PWREx_EnableOverDrive+0x40>
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800
 80040b0:	40007000 	.word	0x40007000

080040b4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80040b4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80040b6:	f7fc fd43 	bl	8000b40 <HAL_GetTick>
 80040ba:	4604      	mov	r4, r0

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80040bc:	4a4e      	ldr	r2, [pc, #312]	; (80041f8 <HAL_RCC_DeInit+0x144>)
 80040be:	6813      	ldr	r3, [r2, #0]
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80040c6:	4b4c      	ldr	r3, [pc, #304]	; (80041f8 <HAL_RCC_DeInit+0x144>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f013 0f02 	tst.w	r3, #2
 80040ce:	d107      	bne.n	80040e0 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040d0:	f7fc fd36 	bl	8000b40 <HAL_GetTick>
 80040d4:	1b00      	subs	r0, r0, r4
 80040d6:	2802      	cmp	r0, #2
 80040d8:	d9f5      	bls.n	80040c6 <HAL_RCC_DeInit+0x12>
    {
      return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
  }
  else
  {
    return HAL_OK;
  }
}
 80040dc:	4618      	mov	r0, r3
 80040de:	bd38      	pop	{r3, r4, r5, pc}
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80040e0:	4d45      	ldr	r5, [pc, #276]	; (80041f8 <HAL_RCC_DeInit+0x144>)
 80040e2:	682b      	ldr	r3, [r5, #0]
 80040e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e8:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80040ea:	f7fc fd29 	bl	8000b40 <HAL_GetTick>
 80040ee:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 80040f0:	2300      	movs	r3, #0
 80040f2:	60ab      	str	r3, [r5, #8]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80040f4:	4b40      	ldr	r3, [pc, #256]	; (80041f8 <HAL_RCC_DeInit+0x144>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f013 0f0c 	tst.w	r3, #12
 80040fc:	d008      	beq.n	8004110 <HAL_RCC_DeInit+0x5c>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040fe:	f7fc fd1f 	bl	8000b40 <HAL_GetTick>
 8004102:	1b00      	subs	r0, r0, r4
 8004104:	f241 3388 	movw	r3, #5000	; 0x1388
 8004108:	4298      	cmp	r0, r3
 800410a:	d9f3      	bls.n	80040f4 <HAL_RCC_DeInit+0x40>
      return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e7e5      	b.n	80040dc <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8004110:	f7fc fd16 	bl	8000b40 <HAL_GetTick>
 8004114:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8004116:	4a38      	ldr	r2, [pc, #224]	; (80041f8 <HAL_RCC_DeInit+0x144>)
 8004118:	6813      	ldr	r3, [r2, #0]
 800411a:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800411e:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8004120:	4b35      	ldr	r3, [pc, #212]	; (80041f8 <HAL_RCC_DeInit+0x144>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004128:	d006      	beq.n	8004138 <HAL_RCC_DeInit+0x84>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800412a:	f7fc fd09 	bl	8000b40 <HAL_GetTick>
 800412e:	1b00      	subs	r0, r0, r4
 8004130:	2864      	cmp	r0, #100	; 0x64
 8004132:	d9f5      	bls.n	8004120 <HAL_RCC_DeInit+0x6c>
      return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e7d1      	b.n	80040dc <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8004138:	f7fc fd02 	bl	8000b40 <HAL_GetTick>
 800413c:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800413e:	4a2e      	ldr	r2, [pc, #184]	; (80041f8 <HAL_RCC_DeInit+0x144>)
 8004140:	6813      	ldr	r3, [r2, #0]
 8004142:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004146:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004148:	4b2b      	ldr	r3, [pc, #172]	; (80041f8 <HAL_RCC_DeInit+0x144>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004150:	d006      	beq.n	8004160 <HAL_RCC_DeInit+0xac>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004152:	f7fc fcf5 	bl	8000b40 <HAL_GetTick>
 8004156:	1b00      	subs	r0, r0, r4
 8004158:	2802      	cmp	r0, #2
 800415a:	d9f5      	bls.n	8004148 <HAL_RCC_DeInit+0x94>
      return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e7bd      	b.n	80040dc <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8004160:	f7fc fcee 	bl	8000b40 <HAL_GetTick>
 8004164:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8004166:	4a24      	ldr	r2, [pc, #144]	; (80041f8 <HAL_RCC_DeInit+0x144>)
 8004168:	6813      	ldr	r3, [r2, #0]
 800416a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800416e:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8004170:	4b21      	ldr	r3, [pc, #132]	; (80041f8 <HAL_RCC_DeInit+0x144>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004178:	d006      	beq.n	8004188 <HAL_RCC_DeInit+0xd4>
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800417a:	f7fc fce1 	bl	8000b40 <HAL_GetTick>
 800417e:	1b00      	subs	r0, r0, r4
 8004180:	2864      	cmp	r0, #100	; 0x64
 8004182:	d9f5      	bls.n	8004170 <HAL_RCC_DeInit+0xbc>
      return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e7a9      	b.n	80040dc <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8004188:	f7fc fcda 	bl	8000b40 <HAL_GetTick>
 800418c:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 800418e:	4a1a      	ldr	r2, [pc, #104]	; (80041f8 <HAL_RCC_DeInit+0x144>)
 8004190:	6813      	ldr	r3, [r2, #0]
 8004192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004196:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8004198:	4b17      	ldr	r3, [pc, #92]	; (80041f8 <HAL_RCC_DeInit+0x144>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80041a0:	d006      	beq.n	80041b0 <HAL_RCC_DeInit+0xfc>
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041a2:	f7fc fccd 	bl	8000b40 <HAL_GetTick>
 80041a6:	1b00      	subs	r0, r0, r4
 80041a8:	2864      	cmp	r0, #100	; 0x64
 80041aa:	d9f5      	bls.n	8004198 <HAL_RCC_DeInit+0xe4>
      return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e795      	b.n	80040dc <HAL_RCC_DeInit+0x28>
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
 80041b0:	4b11      	ldr	r3, [pc, #68]	; (80041f8 <HAL_RCC_DeInit+0x144>)
 80041b2:	4a12      	ldr	r2, [pc, #72]	; (80041fc <HAL_RCC_DeInit+0x148>)
 80041b4:	605a      	str	r2, [r3, #4]
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80041b6:	3a10      	subs	r2, #16
 80041b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | 0x20000000U;
 80041bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80041c6:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_PLLI2SRDYC | RCC_CIR_PLLSAIRDYC | RCC_CIR_CSSC);
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 80041ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80041d0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80041d2:	f022 0201 	bic.w	r2, r2, #1
 80041d6:	675a      	str	r2, [r3, #116]	; 0x74
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80041d8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80041da:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80041de:	675a      	str	r2, [r3, #116]	; 0x74
  SystemCoreClock = HSI_VALUE;
 80041e0:	4b07      	ldr	r3, [pc, #28]	; (8004200 <HAL_RCC_DeInit+0x14c>)
 80041e2:	4a08      	ldr	r2, [pc, #32]	; (8004204 <HAL_RCC_DeInit+0x150>)
 80041e4:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041e6:	2000      	movs	r0, #0
 80041e8:	f7fe ff26 	bl	8003038 <HAL_InitTick>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2800      	cmp	r0, #0
 80041f0:	f43f af74 	beq.w	80040dc <HAL_RCC_DeInit+0x28>
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e771      	b.n	80040dc <HAL_RCC_DeInit+0x28>
 80041f8:	40023800 	.word	0x40023800
 80041fc:	24003010 	.word	0x24003010
 8004200:	20000048 	.word	0x20000048
 8004204:	00f42400 	.word	0x00f42400

08004208 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004208:	2800      	cmp	r0, #0
 800420a:	f000 81dc 	beq.w	80045c6 <HAL_RCC_OscConfig+0x3be>
{
 800420e:	b570      	push	{r4, r5, r6, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004214:	6803      	ldr	r3, [r0, #0]
 8004216:	f013 0f01 	tst.w	r3, #1
 800421a:	d029      	beq.n	8004270 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800421c:	4ba2      	ldr	r3, [pc, #648]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 030c 	and.w	r3, r3, #12
 8004224:	2b04      	cmp	r3, #4
 8004226:	d01a      	beq.n	800425e <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004228:	4b9f      	ldr	r3, [pc, #636]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b08      	cmp	r3, #8
 8004232:	d00f      	beq.n	8004254 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004234:	6863      	ldr	r3, [r4, #4]
 8004236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423a:	d040      	beq.n	80042be <HAL_RCC_OscConfig+0xb6>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d154      	bne.n	80042ea <HAL_RCC_OscConfig+0xe2>
 8004240:	4b99      	ldr	r3, [pc, #612]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	e039      	b.n	80042c8 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004254:	4b94      	ldr	r3, [pc, #592]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800425c:	d0ea      	beq.n	8004234 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800425e:	4b92      	ldr	r3, [pc, #584]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004266:	d003      	beq.n	8004270 <HAL_RCC_OscConfig+0x68>
 8004268:	6863      	ldr	r3, [r4, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 81ad 	beq.w	80045ca <HAL_RCC_OscConfig+0x3c2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004270:	6823      	ldr	r3, [r4, #0]
 8004272:	f013 0f02 	tst.w	r3, #2
 8004276:	d075      	beq.n	8004364 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004278:	4b8b      	ldr	r3, [pc, #556]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f013 0f0c 	tst.w	r3, #12
 8004280:	d05e      	beq.n	8004340 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004282:	4b89      	ldr	r3, [pc, #548]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	2b08      	cmp	r3, #8
 800428c:	d053      	beq.n	8004336 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800428e:	68e3      	ldr	r3, [r4, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 808a 	beq.w	80043aa <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004296:	4a84      	ldr	r2, [pc, #528]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 8004298:	6813      	ldr	r3, [r2, #0]
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fc fc4e 	bl	8000b40 <HAL_GetTick>
 80042a4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a6:	4b80      	ldr	r3, [pc, #512]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f013 0f02 	tst.w	r3, #2
 80042ae:	d173      	bne.n	8004398 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042b0:	f7fc fc46 	bl	8000b40 <HAL_GetTick>
 80042b4:	1b40      	subs	r0, r0, r5
 80042b6:	2802      	cmp	r0, #2
 80042b8:	d9f5      	bls.n	80042a6 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80042ba:	2003      	movs	r0, #3
 80042bc:	e188      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042be:	4a7a      	ldr	r2, [pc, #488]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 80042c0:	6813      	ldr	r3, [r2, #0]
 80042c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c6:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042c8:	6863      	ldr	r3, [r4, #4]
 80042ca:	b32b      	cbz	r3, 8004318 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80042cc:	f7fc fc38 	bl	8000b40 <HAL_GetTick>
 80042d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d2:	4b75      	ldr	r3, [pc, #468]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80042da:	d1c9      	bne.n	8004270 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042dc:	f7fc fc30 	bl	8000b40 <HAL_GetTick>
 80042e0:	1b40      	subs	r0, r0, r5
 80042e2:	2864      	cmp	r0, #100	; 0x64
 80042e4:	d9f5      	bls.n	80042d2 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80042e6:	2003      	movs	r0, #3
 80042e8:	e172      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ee:	d009      	beq.n	8004304 <HAL_RCC_OscConfig+0xfc>
 80042f0:	4b6d      	ldr	r3, [pc, #436]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	e7e1      	b.n	80042c8 <HAL_RCC_OscConfig+0xc0>
 8004304:	4b68      	ldr	r3, [pc, #416]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	e7d7      	b.n	80042c8 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8004318:	f7fc fc12 	bl	8000b40 <HAL_GetTick>
 800431c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431e:	4b62      	ldr	r3, [pc, #392]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004326:	d0a3      	beq.n	8004270 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004328:	f7fc fc0a 	bl	8000b40 <HAL_GetTick>
 800432c:	1b40      	subs	r0, r0, r5
 800432e:	2864      	cmp	r0, #100	; 0x64
 8004330:	d9f5      	bls.n	800431e <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8004332:	2003      	movs	r0, #3
 8004334:	e14c      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004336:	4b5c      	ldr	r3, [pc, #368]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800433e:	d1a6      	bne.n	800428e <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004340:	4b59      	ldr	r3, [pc, #356]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f013 0f02 	tst.w	r3, #2
 8004348:	d004      	beq.n	8004354 <HAL_RCC_OscConfig+0x14c>
 800434a:	68e3      	ldr	r3, [r4, #12]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d001      	beq.n	8004354 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8004350:	2001      	movs	r0, #1
 8004352:	e13d      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004354:	4a54      	ldr	r2, [pc, #336]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 8004356:	6813      	ldr	r3, [r2, #0]
 8004358:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800435c:	6921      	ldr	r1, [r4, #16]
 800435e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004362:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	f013 0f08 	tst.w	r3, #8
 800436a:	d046      	beq.n	80043fa <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800436c:	6963      	ldr	r3, [r4, #20]
 800436e:	b383      	cbz	r3, 80043d2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004370:	4a4d      	ldr	r2, [pc, #308]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 8004372:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004374:	f043 0301 	orr.w	r3, r3, #1
 8004378:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437a:	f7fc fbe1 	bl	8000b40 <HAL_GetTick>
 800437e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004380:	4b49      	ldr	r3, [pc, #292]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 8004382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004384:	f013 0f02 	tst.w	r3, #2
 8004388:	d137      	bne.n	80043fa <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800438a:	f7fc fbd9 	bl	8000b40 <HAL_GetTick>
 800438e:	1b40      	subs	r0, r0, r5
 8004390:	2802      	cmp	r0, #2
 8004392:	d9f5      	bls.n	8004380 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8004394:	2003      	movs	r0, #3
 8004396:	e11b      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004398:	4a43      	ldr	r2, [pc, #268]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 800439a:	6813      	ldr	r3, [r2, #0]
 800439c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80043a0:	6921      	ldr	r1, [r4, #16]
 80043a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	e7dc      	b.n	8004364 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 80043aa:	4a3f      	ldr	r2, [pc, #252]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 80043ac:	6813      	ldr	r3, [r2, #0]
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80043b4:	f7fc fbc4 	bl	8000b40 <HAL_GetTick>
 80043b8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ba:	4b3b      	ldr	r3, [pc, #236]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f013 0f02 	tst.w	r3, #2
 80043c2:	d0cf      	beq.n	8004364 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043c4:	f7fc fbbc 	bl	8000b40 <HAL_GetTick>
 80043c8:	1b40      	subs	r0, r0, r5
 80043ca:	2802      	cmp	r0, #2
 80043cc:	d9f5      	bls.n	80043ba <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 80043ce:	2003      	movs	r0, #3
 80043d0:	e0fe      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043d2:	4a35      	ldr	r2, [pc, #212]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 80043d4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043dc:	f7fc fbb0 	bl	8000b40 <HAL_GetTick>
 80043e0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e2:	4b31      	ldr	r3, [pc, #196]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 80043e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e6:	f013 0f02 	tst.w	r3, #2
 80043ea:	d006      	beq.n	80043fa <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ec:	f7fc fba8 	bl	8000b40 <HAL_GetTick>
 80043f0:	1b40      	subs	r0, r0, r5
 80043f2:	2802      	cmp	r0, #2
 80043f4:	d9f5      	bls.n	80043e2 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 80043f6:	2003      	movs	r0, #3
 80043f8:	e0ea      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	f013 0f04 	tst.w	r3, #4
 8004400:	d07e      	beq.n	8004500 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004402:	4b29      	ldr	r3, [pc, #164]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800440a:	d11e      	bne.n	800444a <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800440c:	4b26      	ldr	r3, [pc, #152]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 800440e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004410:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441c:	9301      	str	r3, [sp, #4]
 800441e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004420:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004422:	4b22      	ldr	r3, [pc, #136]	; (80044ac <HAL_RCC_OscConfig+0x2a4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f413 7f80 	tst.w	r3, #256	; 0x100
 800442a:	d010      	beq.n	800444e <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800442c:	68a3      	ldr	r3, [r4, #8]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d021      	beq.n	8004476 <HAL_RCC_OscConfig+0x26e>
 8004432:	2b00      	cmp	r3, #0
 8004434:	d13c      	bne.n	80044b0 <HAL_RCC_OscConfig+0x2a8>
 8004436:	4b1c      	ldr	r3, [pc, #112]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 8004438:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800443a:	f022 0201 	bic.w	r2, r2, #1
 800443e:	671a      	str	r2, [r3, #112]	; 0x70
 8004440:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004442:	f022 0204 	bic.w	r2, r2, #4
 8004446:	671a      	str	r2, [r3, #112]	; 0x70
 8004448:	e01a      	b.n	8004480 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 800444a:	2500      	movs	r5, #0
 800444c:	e7e9      	b.n	8004422 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 800444e:	4a17      	ldr	r2, [pc, #92]	; (80044ac <HAL_RCC_OscConfig+0x2a4>)
 8004450:	6813      	ldr	r3, [r2, #0]
 8004452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004456:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004458:	f7fc fb72 	bl	8000b40 <HAL_GetTick>
 800445c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800445e:	4b13      	ldr	r3, [pc, #76]	; (80044ac <HAL_RCC_OscConfig+0x2a4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004466:	d1e1      	bne.n	800442c <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004468:	f7fc fb6a 	bl	8000b40 <HAL_GetTick>
 800446c:	1b80      	subs	r0, r0, r6
 800446e:	2864      	cmp	r0, #100	; 0x64
 8004470:	d9f5      	bls.n	800445e <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8004472:	2003      	movs	r0, #3
 8004474:	e0ac      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004476:	4a0c      	ldr	r2, [pc, #48]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 8004478:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004480:	68a3      	ldr	r3, [r4, #8]
 8004482:	b35b      	cbz	r3, 80044dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004484:	f7fc fb5c 	bl	8000b40 <HAL_GetTick>
 8004488:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448a:	4b07      	ldr	r3, [pc, #28]	; (80044a8 <HAL_RCC_OscConfig+0x2a0>)
 800448c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448e:	f013 0f02 	tst.w	r3, #2
 8004492:	d134      	bne.n	80044fe <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004494:	f7fc fb54 	bl	8000b40 <HAL_GetTick>
 8004498:	1b80      	subs	r0, r0, r6
 800449a:	f241 3388 	movw	r3, #5000	; 0x1388
 800449e:	4298      	cmp	r0, r3
 80044a0:	d9f3      	bls.n	800448a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 80044a2:	2003      	movs	r0, #3
 80044a4:	e094      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c8>
 80044a6:	bf00      	nop
 80044a8:	40023800 	.word	0x40023800
 80044ac:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b0:	2b05      	cmp	r3, #5
 80044b2:	d009      	beq.n	80044c8 <HAL_RCC_OscConfig+0x2c0>
 80044b4:	4b48      	ldr	r3, [pc, #288]	; (80045d8 <HAL_RCC_OscConfig+0x3d0>)
 80044b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044b8:	f022 0201 	bic.w	r2, r2, #1
 80044bc:	671a      	str	r2, [r3, #112]	; 0x70
 80044be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044c0:	f022 0204 	bic.w	r2, r2, #4
 80044c4:	671a      	str	r2, [r3, #112]	; 0x70
 80044c6:	e7db      	b.n	8004480 <HAL_RCC_OscConfig+0x278>
 80044c8:	4b43      	ldr	r3, [pc, #268]	; (80045d8 <HAL_RCC_OscConfig+0x3d0>)
 80044ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044cc:	f042 0204 	orr.w	r2, r2, #4
 80044d0:	671a      	str	r2, [r3, #112]	; 0x70
 80044d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044d4:	f042 0201 	orr.w	r2, r2, #1
 80044d8:	671a      	str	r2, [r3, #112]	; 0x70
 80044da:	e7d1      	b.n	8004480 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044dc:	f7fc fb30 	bl	8000b40 <HAL_GetTick>
 80044e0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e2:	4b3d      	ldr	r3, [pc, #244]	; (80045d8 <HAL_RCC_OscConfig+0x3d0>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	f013 0f02 	tst.w	r3, #2
 80044ea:	d008      	beq.n	80044fe <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ec:	f7fc fb28 	bl	8000b40 <HAL_GetTick>
 80044f0:	1b80      	subs	r0, r0, r6
 80044f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80044f6:	4298      	cmp	r0, r3
 80044f8:	d9f3      	bls.n	80044e2 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 80044fa:	2003      	movs	r0, #3
 80044fc:	e068      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044fe:	b9f5      	cbnz	r5, 800453e <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004500:	69a3      	ldr	r3, [r4, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d063      	beq.n	80045ce <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004506:	4a34      	ldr	r2, [pc, #208]	; (80045d8 <HAL_RCC_OscConfig+0x3d0>)
 8004508:	6892      	ldr	r2, [r2, #8]
 800450a:	f002 020c 	and.w	r2, r2, #12
 800450e:	2a08      	cmp	r2, #8
 8004510:	d060      	beq.n	80045d4 <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004512:	2b02      	cmp	r3, #2
 8004514:	d019      	beq.n	800454a <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004516:	4a30      	ldr	r2, [pc, #192]	; (80045d8 <HAL_RCC_OscConfig+0x3d0>)
 8004518:	6813      	ldr	r3, [r2, #0]
 800451a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800451e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fc fb0e 	bl	8000b40 <HAL_GetTick>
 8004524:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004526:	4b2c      	ldr	r3, [pc, #176]	; (80045d8 <HAL_RCC_OscConfig+0x3d0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800452e:	d048      	beq.n	80045c2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004530:	f7fc fb06 	bl	8000b40 <HAL_GetTick>
 8004534:	1b00      	subs	r0, r0, r4
 8004536:	2802      	cmp	r0, #2
 8004538:	d9f5      	bls.n	8004526 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800453a:	2003      	movs	r0, #3
 800453c:	e048      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 800453e:	4a26      	ldr	r2, [pc, #152]	; (80045d8 <HAL_RCC_OscConfig+0x3d0>)
 8004540:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004546:	6413      	str	r3, [r2, #64]	; 0x40
 8004548:	e7da      	b.n	8004500 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 800454a:	4a23      	ldr	r2, [pc, #140]	; (80045d8 <HAL_RCC_OscConfig+0x3d0>)
 800454c:	6813      	ldr	r3, [r2, #0]
 800454e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004552:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004554:	f7fc faf4 	bl	8000b40 <HAL_GetTick>
 8004558:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455a:	4b1f      	ldr	r3, [pc, #124]	; (80045d8 <HAL_RCC_OscConfig+0x3d0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004562:	d006      	beq.n	8004572 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004564:	f7fc faec 	bl	8000b40 <HAL_GetTick>
 8004568:	1b40      	subs	r0, r0, r5
 800456a:	2802      	cmp	r0, #2
 800456c:	d9f5      	bls.n	800455a <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 800456e:	2003      	movs	r0, #3
 8004570:	e02e      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004572:	69e3      	ldr	r3, [r4, #28]
 8004574:	6a22      	ldr	r2, [r4, #32]
 8004576:	4313      	orrs	r3, r2
 8004578:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800457a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800457e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004580:	0852      	lsrs	r2, r2, #1
 8004582:	3a01      	subs	r2, #1
 8004584:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004588:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800458a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800458e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004590:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004594:	4a10      	ldr	r2, [pc, #64]	; (80045d8 <HAL_RCC_OscConfig+0x3d0>)
 8004596:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004598:	6813      	ldr	r3, [r2, #0]
 800459a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800459e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80045a0:	f7fc face 	bl	8000b40 <HAL_GetTick>
 80045a4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a6:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <HAL_RCC_OscConfig+0x3d0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80045ae:	d106      	bne.n	80045be <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b0:	f7fc fac6 	bl	8000b40 <HAL_GetTick>
 80045b4:	1b00      	subs	r0, r0, r4
 80045b6:	2802      	cmp	r0, #2
 80045b8:	d9f5      	bls.n	80045a6 <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 80045ba:	2003      	movs	r0, #3
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80045be:	2000      	movs	r0, #0
 80045c0:	e006      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c8>
 80045c2:	2000      	movs	r0, #0
 80045c4:	e004      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 80045c6:	2001      	movs	r0, #1
}
 80045c8:	4770      	bx	lr
        return HAL_ERROR;
 80045ca:	2001      	movs	r0, #1
 80045cc:	e000      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 80045ce:	2000      	movs	r0, #0
}
 80045d0:	b002      	add	sp, #8
 80045d2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80045d4:	2001      	movs	r0, #1
 80045d6:	e7fb      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c8>
 80045d8:	40023800 	.word	0x40023800

080045dc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045dc:	4b32      	ldr	r3, [pc, #200]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 030c 	and.w	r3, r3, #12
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d05c      	beq.n	80046a2 <HAL_RCC_GetSysClockFreq+0xc6>
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d001      	beq.n	80045f0 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045ec:	482f      	ldr	r0, [pc, #188]	; (80046ac <HAL_RCC_GetSysClockFreq+0xd0>)
 80045ee:	4770      	bx	lr
{
 80045f0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045f4:	4b2c      	ldr	r3, [pc, #176]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004602:	d02b      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004604:	4b28      	ldr	r3, [pc, #160]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800460c:	461e      	mov	r6, r3
 800460e:	2700      	movs	r7, #0
 8004610:	015c      	lsls	r4, r3, #5
 8004612:	2500      	movs	r5, #0
 8004614:	1ae4      	subs	r4, r4, r3
 8004616:	eb65 0507 	sbc.w	r5, r5, r7
 800461a:	01a9      	lsls	r1, r5, #6
 800461c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004620:	01a0      	lsls	r0, r4, #6
 8004622:	1b00      	subs	r0, r0, r4
 8004624:	eb61 0105 	sbc.w	r1, r1, r5
 8004628:	00cb      	lsls	r3, r1, #3
 800462a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800462e:	00c4      	lsls	r4, r0, #3
 8004630:	19a0      	adds	r0, r4, r6
 8004632:	eb43 0107 	adc.w	r1, r3, r7
 8004636:	024b      	lsls	r3, r1, #9
 8004638:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800463c:	0244      	lsls	r4, r0, #9
 800463e:	4620      	mov	r0, r4
 8004640:	4619      	mov	r1, r3
 8004642:	2300      	movs	r3, #0
 8004644:	f7fb fdf8 	bl	8000238 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004648:	4b17      	ldr	r3, [pc, #92]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004650:	3301      	adds	r3, #1
 8004652:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004654:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004658:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800465c:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004664:	461e      	mov	r6, r3
 8004666:	2700      	movs	r7, #0
 8004668:	015c      	lsls	r4, r3, #5
 800466a:	2500      	movs	r5, #0
 800466c:	1ae4      	subs	r4, r4, r3
 800466e:	eb65 0507 	sbc.w	r5, r5, r7
 8004672:	01a9      	lsls	r1, r5, #6
 8004674:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004678:	01a0      	lsls	r0, r4, #6
 800467a:	1b00      	subs	r0, r0, r4
 800467c:	eb61 0105 	sbc.w	r1, r1, r5
 8004680:	00cb      	lsls	r3, r1, #3
 8004682:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004686:	00c4      	lsls	r4, r0, #3
 8004688:	19a0      	adds	r0, r4, r6
 800468a:	eb43 0107 	adc.w	r1, r3, r7
 800468e:	028b      	lsls	r3, r1, #10
 8004690:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8004694:	0284      	lsls	r4, r0, #10
 8004696:	4620      	mov	r0, r4
 8004698:	4619      	mov	r1, r3
 800469a:	2300      	movs	r3, #0
 800469c:	f7fb fdcc 	bl	8000238 <__aeabi_uldivmod>
 80046a0:	e7d2      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 80046a2:	4803      	ldr	r0, [pc, #12]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40023800 	.word	0x40023800
 80046ac:	00f42400 	.word	0x00f42400
 80046b0:	007a1200 	.word	0x007a1200

080046b4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80046b4:	2800      	cmp	r0, #0
 80046b6:	f000 80a2 	beq.w	80047fe <HAL_RCC_ClockConfig+0x14a>
{
 80046ba:	b570      	push	{r4, r5, r6, lr}
 80046bc:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046be:	4b52      	ldr	r3, [pc, #328]	; (8004808 <HAL_RCC_ClockConfig+0x154>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	428b      	cmp	r3, r1
 80046c8:	d20c      	bcs.n	80046e4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ca:	4a4f      	ldr	r2, [pc, #316]	; (8004808 <HAL_RCC_ClockConfig+0x154>)
 80046cc:	6813      	ldr	r3, [r2, #0]
 80046ce:	f023 030f 	bic.w	r3, r3, #15
 80046d2:	430b      	orrs	r3, r1
 80046d4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d6:	6813      	ldr	r3, [r2, #0]
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	428b      	cmp	r3, r1
 80046de:	d001      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80046e0:	2001      	movs	r0, #1
}
 80046e2:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	f013 0f02 	tst.w	r3, #2
 80046ea:	d017      	beq.n	800471c <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ec:	f013 0f04 	tst.w	r3, #4
 80046f0:	d004      	beq.n	80046fc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046f2:	4a46      	ldr	r2, [pc, #280]	; (800480c <HAL_RCC_ClockConfig+0x158>)
 80046f4:	6893      	ldr	r3, [r2, #8]
 80046f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046fa:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	f013 0f08 	tst.w	r3, #8
 8004702:	d004      	beq.n	800470e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004704:	4a41      	ldr	r2, [pc, #260]	; (800480c <HAL_RCC_ClockConfig+0x158>)
 8004706:	6893      	ldr	r3, [r2, #8]
 8004708:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800470c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800470e:	4a3f      	ldr	r2, [pc, #252]	; (800480c <HAL_RCC_ClockConfig+0x158>)
 8004710:	6893      	ldr	r3, [r2, #8]
 8004712:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004716:	68a0      	ldr	r0, [r4, #8]
 8004718:	4303      	orrs	r3, r0
 800471a:	6093      	str	r3, [r2, #8]
 800471c:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	f013 0f01 	tst.w	r3, #1
 8004724:	d031      	beq.n	800478a <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004726:	6863      	ldr	r3, [r4, #4]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d020      	beq.n	800476e <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800472c:	2b02      	cmp	r3, #2
 800472e:	d025      	beq.n	800477c <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004730:	4a36      	ldr	r2, [pc, #216]	; (800480c <HAL_RCC_ClockConfig+0x158>)
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	f012 0f02 	tst.w	r2, #2
 8004738:	d063      	beq.n	8004802 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800473a:	4934      	ldr	r1, [pc, #208]	; (800480c <HAL_RCC_ClockConfig+0x158>)
 800473c:	688a      	ldr	r2, [r1, #8]
 800473e:	f022 0203 	bic.w	r2, r2, #3
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004746:	f7fc f9fb 	bl	8000b40 <HAL_GetTick>
 800474a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474c:	4b2f      	ldr	r3, [pc, #188]	; (800480c <HAL_RCC_ClockConfig+0x158>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	6862      	ldr	r2, [r4, #4]
 8004756:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800475a:	d016      	beq.n	800478a <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800475c:	f7fc f9f0 	bl	8000b40 <HAL_GetTick>
 8004760:	1b80      	subs	r0, r0, r6
 8004762:	f241 3388 	movw	r3, #5000	; 0x1388
 8004766:	4298      	cmp	r0, r3
 8004768:	d9f0      	bls.n	800474c <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 800476a:	2003      	movs	r0, #3
 800476c:	e7b9      	b.n	80046e2 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476e:	4a27      	ldr	r2, [pc, #156]	; (800480c <HAL_RCC_ClockConfig+0x158>)
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004776:	d1e0      	bne.n	800473a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8004778:	2001      	movs	r0, #1
 800477a:	e7b2      	b.n	80046e2 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477c:	4a23      	ldr	r2, [pc, #140]	; (800480c <HAL_RCC_ClockConfig+0x158>)
 800477e:	6812      	ldr	r2, [r2, #0]
 8004780:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004784:	d1d9      	bne.n	800473a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8004786:	2001      	movs	r0, #1
 8004788:	e7ab      	b.n	80046e2 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800478a:	4b1f      	ldr	r3, [pc, #124]	; (8004808 <HAL_RCC_ClockConfig+0x154>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	42ab      	cmp	r3, r5
 8004794:	d90c      	bls.n	80047b0 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004796:	4a1c      	ldr	r2, [pc, #112]	; (8004808 <HAL_RCC_ClockConfig+0x154>)
 8004798:	6813      	ldr	r3, [r2, #0]
 800479a:	f023 030f 	bic.w	r3, r3, #15
 800479e:	432b      	orrs	r3, r5
 80047a0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a2:	6813      	ldr	r3, [r2, #0]
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	42ab      	cmp	r3, r5
 80047aa:	d001      	beq.n	80047b0 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 80047ac:	2001      	movs	r0, #1
 80047ae:	e798      	b.n	80046e2 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	f013 0f04 	tst.w	r3, #4
 80047b6:	d006      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b8:	4a14      	ldr	r2, [pc, #80]	; (800480c <HAL_RCC_ClockConfig+0x158>)
 80047ba:	6893      	ldr	r3, [r2, #8]
 80047bc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80047c0:	68e1      	ldr	r1, [r4, #12]
 80047c2:	430b      	orrs	r3, r1
 80047c4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	f013 0f08 	tst.w	r3, #8
 80047cc:	d007      	beq.n	80047de <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047ce:	4a0f      	ldr	r2, [pc, #60]	; (800480c <HAL_RCC_ClockConfig+0x158>)
 80047d0:	6893      	ldr	r3, [r2, #8]
 80047d2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80047d6:	6921      	ldr	r1, [r4, #16]
 80047d8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80047dc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047de:	f7ff fefd 	bl	80045dc <HAL_RCC_GetSysClockFreq>
 80047e2:	4b0a      	ldr	r3, [pc, #40]	; (800480c <HAL_RCC_ClockConfig+0x158>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80047ea:	4a09      	ldr	r2, [pc, #36]	; (8004810 <HAL_RCC_ClockConfig+0x15c>)
 80047ec:	5cd3      	ldrb	r3, [r2, r3]
 80047ee:	40d8      	lsrs	r0, r3
 80047f0:	4b08      	ldr	r3, [pc, #32]	; (8004814 <HAL_RCC_ClockConfig+0x160>)
 80047f2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80047f4:	2000      	movs	r0, #0
 80047f6:	f7fe fc1f 	bl	8003038 <HAL_InitTick>
  return HAL_OK;
 80047fa:	2000      	movs	r0, #0
 80047fc:	e771      	b.n	80046e2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80047fe:	2001      	movs	r0, #1
}
 8004800:	4770      	bx	lr
        return HAL_ERROR;
 8004802:	2001      	movs	r0, #1
 8004804:	e76d      	b.n	80046e2 <HAL_RCC_ClockConfig+0x2e>
 8004806:	bf00      	nop
 8004808:	40023c00 	.word	0x40023c00
 800480c:	40023800 	.word	0x40023800
 8004810:	08005188 	.word	0x08005188
 8004814:	20000048 	.word	0x20000048

08004818 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004818:	4b01      	ldr	r3, [pc, #4]	; (8004820 <HAL_RCC_GetHCLKFreq+0x8>)
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	20000048 	.word	0x20000048

08004824 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004824:	4b03      	ldr	r3, [pc, #12]	; (8004834 <RCC_GetHCLKClockFreq+0x10>)
 8004826:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004828:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800482c:	4a02      	ldr	r2, [pc, #8]	; (8004838 <RCC_GetHCLKClockFreq+0x14>)
 800482e:	5cd3      	ldrb	r3, [r2, r3]
}
 8004830:	40d8      	lsrs	r0, r3
 8004832:	4770      	bx	lr
 8004834:	40023800 	.word	0x40023800
 8004838:	08005188 	.word	0x08005188

0800483c <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800483c:	4b03      	ldr	r3, [pc, #12]	; (800484c <RCC_GetPCLK1ClockFreq+0x10>)
 800483e:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004840:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004844:	4a02      	ldr	r2, [pc, #8]	; (8004850 <RCC_GetPCLK1ClockFreq+0x14>)
 8004846:	5cd3      	ldrb	r3, [r2, r3]
}
 8004848:	40d8      	lsrs	r0, r3
 800484a:	4770      	bx	lr
 800484c:	40023800 	.word	0x40023800
 8004850:	08005198 	.word	0x08005198

08004854 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004854:	4b03      	ldr	r3, [pc, #12]	; (8004864 <RCC_GetPCLK2ClockFreq+0x10>)
 8004856:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004858:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800485c:	4a02      	ldr	r2, [pc, #8]	; (8004868 <RCC_GetPCLK2ClockFreq+0x14>)
 800485e:	5cd3      	ldrb	r3, [r2, r3]
}
 8004860:	40d8      	lsrs	r0, r3
 8004862:	4770      	bx	lr
 8004864:	40023800 	.word	0x40023800
 8004868:	08005198 	.word	0x08005198

0800486c <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800486c:	4b0d      	ldr	r3, [pc, #52]	; (80048a4 <RCC_PLL_GetFreqDomain_SYS+0x38>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8004874:	b90b      	cbnz	r3, 800487a <RCC_PLL_GetFreqDomain_SYS+0xe>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004876:	480c      	ldr	r0, [pc, #48]	; (80048a8 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8004878:	e000      	b.n	800487c <RCC_PLL_GetFreqDomain_SYS+0x10>
      break;

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800487a:	480c      	ldr	r0, [pc, #48]	; (80048ac <RCC_PLL_GetFreqDomain_SYS+0x40>)
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800487c:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <RCC_PLL_GetFreqDomain_SYS+0x38>)
 800487e:	6853      	ldr	r3, [r2, #4]
 8004880:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004884:	fbb0 f3f3 	udiv	r3, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004888:	6850      	ldr	r0, [r2, #4]
 800488a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800488e:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004892:	6853      	ldr	r3, [r2, #4]
 8004894:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004898:	3301      	adds	r3, #1
 800489a:	005b      	lsls	r3, r3, #1
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 800489c:	fbb0 f0f3 	udiv	r0, r0, r3
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40023800 	.word	0x40023800
 80048a8:	00f42400 	.word	0x00f42400
 80048ac:	007a1200 	.word	0x007a1200

080048b0 <RCC_GetSystemClockFreq>:
{
 80048b0:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80048b2:	4b07      	ldr	r3, [pc, #28]	; (80048d0 <RCC_GetSystemClockFreq+0x20>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d006      	beq.n	80048cc <RCC_GetSystemClockFreq+0x1c>
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d001      	beq.n	80048c6 <RCC_GetSystemClockFreq+0x16>
      frequency = HSI_VALUE;
 80048c2:	4804      	ldr	r0, [pc, #16]	; (80048d4 <RCC_GetSystemClockFreq+0x24>)
}
 80048c4:	bd08      	pop	{r3, pc}
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80048c6:	f7ff ffd1 	bl	800486c <RCC_PLL_GetFreqDomain_SYS>
      break;
 80048ca:	e7fb      	b.n	80048c4 <RCC_GetSystemClockFreq+0x14>
      frequency = HSE_VALUE;
 80048cc:	4802      	ldr	r0, [pc, #8]	; (80048d8 <RCC_GetSystemClockFreq+0x28>)
  return frequency;
 80048ce:	e7f9      	b.n	80048c4 <RCC_GetSystemClockFreq+0x14>
 80048d0:	40023800 	.word	0x40023800
 80048d4:	00f42400 	.word	0x00f42400
 80048d8:	007a1200 	.word	0x007a1200

080048dc <LL_RCC_GetUSARTClockFreq>:
{
 80048dc:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80048de:	2803      	cmp	r0, #3
 80048e0:	d008      	beq.n	80048f4 <LL_RCC_GetUSARTClockFreq+0x18>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80048e2:	280c      	cmp	r0, #12
 80048e4:	d02d      	beq.n	8004942 <LL_RCC_GetUSARTClockFreq+0x66>
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 80048e6:	f5b0 6f40 	cmp.w	r0, #3072	; 0xc00
 80048ea:	d051      	beq.n	8004990 <LL_RCC_GetUSARTClockFreq+0xb4>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80048ec:	2830      	cmp	r0, #48	; 0x30
 80048ee:	d077      	beq.n	80049e0 <LL_RCC_GetUSARTClockFreq+0x104>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80048f0:	2000      	movs	r0, #0
}
 80048f2:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 80048f4:	4b58      	ldr	r3, [pc, #352]	; (8004a58 <LL_RCC_GetUSARTClockFreq+0x17c>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fa:	4003      	ands	r3, r0
 80048fc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004900:	4b56      	ldr	r3, [pc, #344]	; (8004a5c <LL_RCC_GetUSARTClockFreq+0x180>)
 8004902:	4298      	cmp	r0, r3
 8004904:	d00f      	beq.n	8004926 <LL_RCC_GetUSARTClockFreq+0x4a>
 8004906:	f1b0 1f03 	cmp.w	r0, #196611	; 0x30003
 800490a:	d013      	beq.n	8004934 <LL_RCC_GetUSARTClockFreq+0x58>
 800490c:	3b01      	subs	r3, #1
 800490e:	4298      	cmp	r0, r3
 8004910:	d006      	beq.n	8004920 <LL_RCC_GetUSARTClockFreq+0x44>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004912:	f7ff ffcd 	bl	80048b0 <RCC_GetSystemClockFreq>
 8004916:	f7ff ff85 	bl	8004824 <RCC_GetHCLKClockFreq>
 800491a:	f7ff ff9b 	bl	8004854 <RCC_GetPCLK2ClockFreq>
        break;
 800491e:	e7e8      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
        usart_frequency = RCC_GetSystemClockFreq();
 8004920:	f7ff ffc6 	bl	80048b0 <RCC_GetSystemClockFreq>
        break;
 8004924:	e7e5      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004926:	4b4c      	ldr	r3, [pc, #304]	; (8004a58 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8004928:	681b      	ldr	r3, [r3, #0]
        if (LL_RCC_HSI_IsReady())
 800492a:	f013 0f02 	tst.w	r3, #2
 800492e:	d17e      	bne.n	8004a2e <LL_RCC_GetUSARTClockFreq+0x152>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004930:	2000      	movs	r0, #0
 8004932:	e7de      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8004934:	4b48      	ldr	r3, [pc, #288]	; (8004a58 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8004936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        if (LL_RCC_LSE_IsReady())
 8004938:	f013 0f02 	tst.w	r3, #2
 800493c:	d179      	bne.n	8004a32 <LL_RCC_GetUSARTClockFreq+0x156>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800493e:	2000      	movs	r0, #0
 8004940:	e7d7      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 8004942:	4b45      	ldr	r3, [pc, #276]	; (8004a58 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8004944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004948:	4003      	ands	r3, r0
 800494a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800494e:	4b44      	ldr	r3, [pc, #272]	; (8004a60 <LL_RCC_GetUSARTClockFreq+0x184>)
 8004950:	4298      	cmp	r0, r3
 8004952:	d00f      	beq.n	8004974 <LL_RCC_GetUSARTClockFreq+0x98>
 8004954:	f1b0 1f0c 	cmp.w	r0, #786444	; 0xc000c
 8004958:	d013      	beq.n	8004982 <LL_RCC_GetUSARTClockFreq+0xa6>
 800495a:	3b04      	subs	r3, #4
 800495c:	4298      	cmp	r0, r3
 800495e:	d006      	beq.n	800496e <LL_RCC_GetUSARTClockFreq+0x92>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004960:	f7ff ffa6 	bl	80048b0 <RCC_GetSystemClockFreq>
 8004964:	f7ff ff5e 	bl	8004824 <RCC_GetHCLKClockFreq>
 8004968:	f7ff ff68 	bl	800483c <RCC_GetPCLK1ClockFreq>
        break;
 800496c:	e7c1      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
        usart_frequency = RCC_GetSystemClockFreq();
 800496e:	f7ff ff9f 	bl	80048b0 <RCC_GetSystemClockFreq>
        break;
 8004972:	e7be      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004974:	4b38      	ldr	r3, [pc, #224]	; (8004a58 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8004976:	681b      	ldr	r3, [r3, #0]
        if (LL_RCC_HSI_IsReady())
 8004978:	f013 0f02 	tst.w	r3, #2
 800497c:	d15c      	bne.n	8004a38 <LL_RCC_GetUSARTClockFreq+0x15c>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800497e:	2000      	movs	r0, #0
 8004980:	e7b7      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8004982:	4b35      	ldr	r3, [pc, #212]	; (8004a58 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        if (LL_RCC_LSE_IsReady())
 8004986:	f013 0f02 	tst.w	r3, #2
 800498a:	d157      	bne.n	8004a3c <LL_RCC_GetUSARTClockFreq+0x160>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800498c:	2000      	movs	r0, #0
 800498e:	e7b0      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 8004990:	4b31      	ldr	r3, [pc, #196]	; (8004a58 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004996:	4003      	ands	r3, r0
 8004998:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800499c:	4b31      	ldr	r3, [pc, #196]	; (8004a64 <LL_RCC_GetUSARTClockFreq+0x188>)
 800499e:	4298      	cmp	r0, r3
 80049a0:	d010      	beq.n	80049c4 <LL_RCC_GetUSARTClockFreq+0xe8>
 80049a2:	f1b0 2f0c 	cmp.w	r0, #201329664	; 0xc000c00
 80049a6:	d014      	beq.n	80049d2 <LL_RCC_GetUSARTClockFreq+0xf6>
 80049a8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80049ac:	4298      	cmp	r0, r3
 80049ae:	d006      	beq.n	80049be <LL_RCC_GetUSARTClockFreq+0xe2>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80049b0:	f7ff ff7e 	bl	80048b0 <RCC_GetSystemClockFreq>
 80049b4:	f7ff ff36 	bl	8004824 <RCC_GetHCLKClockFreq>
 80049b8:	f7ff ff4c 	bl	8004854 <RCC_GetPCLK2ClockFreq>
        break;
 80049bc:	e799      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
        usart_frequency = RCC_GetSystemClockFreq();
 80049be:	f7ff ff77 	bl	80048b0 <RCC_GetSystemClockFreq>
        break;
 80049c2:	e796      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80049c4:	4b24      	ldr	r3, [pc, #144]	; (8004a58 <LL_RCC_GetUSARTClockFreq+0x17c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
        if (LL_RCC_HSI_IsReady())
 80049c8:	f013 0f02 	tst.w	r3, #2
 80049cc:	d139      	bne.n	8004a42 <LL_RCC_GetUSARTClockFreq+0x166>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80049ce:	2000      	movs	r0, #0
 80049d0:	e78f      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80049d2:	4b21      	ldr	r3, [pc, #132]	; (8004a58 <LL_RCC_GetUSARTClockFreq+0x17c>)
 80049d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        if (LL_RCC_LSE_IsReady())
 80049d6:	f013 0f02 	tst.w	r3, #2
 80049da:	d134      	bne.n	8004a46 <LL_RCC_GetUSARTClockFreq+0x16a>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80049dc:	2000      	movs	r0, #0
 80049de:	e788      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 80049e0:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <LL_RCC_GetUSARTClockFreq+0x17c>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	4003      	ands	r3, r0
 80049e8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80049ec:	4b1e      	ldr	r3, [pc, #120]	; (8004a68 <LL_RCC_GetUSARTClockFreq+0x18c>)
 80049ee:	4298      	cmp	r0, r3
 80049f0:	d00f      	beq.n	8004a12 <LL_RCC_GetUSARTClockFreq+0x136>
 80049f2:	f1b0 1f30 	cmp.w	r0, #3145776	; 0x300030
 80049f6:	d013      	beq.n	8004a20 <LL_RCC_GetUSARTClockFreq+0x144>
 80049f8:	3b10      	subs	r3, #16
 80049fa:	4298      	cmp	r0, r3
 80049fc:	d006      	beq.n	8004a0c <LL_RCC_GetUSARTClockFreq+0x130>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80049fe:	f7ff ff57 	bl	80048b0 <RCC_GetSystemClockFreq>
 8004a02:	f7ff ff0f 	bl	8004824 <RCC_GetHCLKClockFreq>
 8004a06:	f7ff ff19 	bl	800483c <RCC_GetPCLK1ClockFreq>
          break;
 8004a0a:	e772      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
          usart_frequency = RCC_GetSystemClockFreq();
 8004a0c:	f7ff ff50 	bl	80048b0 <RCC_GetSystemClockFreq>
          break;
 8004a10:	e76f      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004a12:	4b11      	ldr	r3, [pc, #68]	; (8004a58 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
          if (LL_RCC_HSI_IsReady())
 8004a16:	f013 0f02 	tst.w	r3, #2
 8004a1a:	d117      	bne.n	8004a4c <LL_RCC_GetUSARTClockFreq+0x170>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	e768      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8004a20:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          if (LL_RCC_LSE_IsReady())
 8004a24:	f013 0f02 	tst.w	r3, #2
 8004a28:	d112      	bne.n	8004a50 <LL_RCC_GetUSARTClockFreq+0x174>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e761      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
          usart_frequency = HSI_VALUE;
 8004a2e:	480f      	ldr	r0, [pc, #60]	; (8004a6c <LL_RCC_GetUSARTClockFreq+0x190>)
 8004a30:	e75f      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
          usart_frequency = LSE_VALUE;
 8004a32:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a36:	e75c      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
          usart_frequency = HSI_VALUE;
 8004a38:	480c      	ldr	r0, [pc, #48]	; (8004a6c <LL_RCC_GetUSARTClockFreq+0x190>)
 8004a3a:	e75a      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
          usart_frequency = LSE_VALUE;
 8004a3c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a40:	e757      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
          usart_frequency = HSI_VALUE;
 8004a42:	480a      	ldr	r0, [pc, #40]	; (8004a6c <LL_RCC_GetUSARTClockFreq+0x190>)
 8004a44:	e755      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
          usart_frequency = LSE_VALUE;
 8004a46:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a4a:	e752      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
            usart_frequency = HSI_VALUE;
 8004a4c:	4807      	ldr	r0, [pc, #28]	; (8004a6c <LL_RCC_GetUSARTClockFreq+0x190>)
 8004a4e:	e750      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
            usart_frequency = LSE_VALUE;
 8004a50:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return usart_frequency;
 8004a54:	e74d      	b.n	80048f2 <LL_RCC_GetUSARTClockFreq+0x16>
 8004a56:	bf00      	nop
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	00030002 	.word	0x00030002
 8004a60:	000c0008 	.word	0x000c0008
 8004a64:	0c000800 	.word	0x0c000800
 8004a68:	00300020 	.word	0x00300020
 8004a6c:	00f42400 	.word	0x00f42400

08004a70 <LL_RCC_GetUARTClockFreq>:
{
 8004a70:	b508      	push	{r3, lr}
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8004a72:	28c0      	cmp	r0, #192	; 0xc0
 8004a74:	d00a      	beq.n	8004a8c <LL_RCC_GetUARTClockFreq+0x1c>
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8004a76:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8004a7a:	d02f      	beq.n	8004adc <LL_RCC_GetUARTClockFreq+0x6c>
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 8004a7c:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
 8004a80:	d054      	beq.n	8004b2c <LL_RCC_GetUARTClockFreq+0xbc>
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 8004a82:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8004a86:	d079      	beq.n	8004b7c <LL_RCC_GetUARTClockFreq+0x10c>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004a88:	2000      	movs	r0, #0
}
 8004a8a:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 8004a8c:	4b59      	ldr	r3, [pc, #356]	; (8004bf4 <LL_RCC_GetUARTClockFreq+0x184>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a92:	4003      	ands	r3, r0
 8004a94:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004a98:	4b57      	ldr	r3, [pc, #348]	; (8004bf8 <LL_RCC_GetUARTClockFreq+0x188>)
 8004a9a:	4298      	cmp	r0, r3
 8004a9c:	d00f      	beq.n	8004abe <LL_RCC_GetUARTClockFreq+0x4e>
 8004a9e:	f1b0 1fc0 	cmp.w	r0, #12583104	; 0xc000c0
 8004aa2:	d014      	beq.n	8004ace <LL_RCC_GetUARTClockFreq+0x5e>
 8004aa4:	3b40      	subs	r3, #64	; 0x40
 8004aa6:	4298      	cmp	r0, r3
 8004aa8:	d006      	beq.n	8004ab8 <LL_RCC_GetUARTClockFreq+0x48>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004aaa:	f7ff ff01 	bl	80048b0 <RCC_GetSystemClockFreq>
 8004aae:	f7ff feb9 	bl	8004824 <RCC_GetHCLKClockFreq>
 8004ab2:	f7ff fec3 	bl	800483c <RCC_GetPCLK1ClockFreq>
        break;
 8004ab6:	e7e8      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
        uart_frequency = RCC_GetSystemClockFreq();
 8004ab8:	f7ff fefa 	bl	80048b0 <RCC_GetSystemClockFreq>
        break;
 8004abc:	e7e5      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004abe:	4b4d      	ldr	r3, [pc, #308]	; (8004bf4 <LL_RCC_GetUARTClockFreq+0x184>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
        if (LL_RCC_HSI_IsReady())
 8004ac2:	f013 0f02 	tst.w	r3, #2
 8004ac6:	f040 8081 	bne.w	8004bcc <LL_RCC_GetUARTClockFreq+0x15c>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004aca:	2000      	movs	r0, #0
 8004acc:	e7dd      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8004ace:	4b49      	ldr	r3, [pc, #292]	; (8004bf4 <LL_RCC_GetUARTClockFreq+0x184>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        if (LL_RCC_LSE_IsReady())
 8004ad2:	f013 0f02 	tst.w	r3, #2
 8004ad6:	d17b      	bne.n	8004bd0 <LL_RCC_GetUARTClockFreq+0x160>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004ad8:	2000      	movs	r0, #0
 8004ada:	e7d6      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 8004adc:	4b45      	ldr	r3, [pc, #276]	; (8004bf4 <LL_RCC_GetUARTClockFreq+0x184>)
 8004ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae2:	4003      	ands	r3, r0
 8004ae4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004ae8:	4b44      	ldr	r3, [pc, #272]	; (8004bfc <LL_RCC_GetUARTClockFreq+0x18c>)
 8004aea:	4298      	cmp	r0, r3
 8004aec:	d010      	beq.n	8004b10 <LL_RCC_GetUARTClockFreq+0xa0>
 8004aee:	f1b0 2f03 	cmp.w	r0, #50332416	; 0x3000300
 8004af2:	d014      	beq.n	8004b1e <LL_RCC_GetUARTClockFreq+0xae>
 8004af4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004af8:	4298      	cmp	r0, r3
 8004afa:	d006      	beq.n	8004b0a <LL_RCC_GetUARTClockFreq+0x9a>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004afc:	f7ff fed8 	bl	80048b0 <RCC_GetSystemClockFreq>
 8004b00:	f7ff fe90 	bl	8004824 <RCC_GetHCLKClockFreq>
 8004b04:	f7ff fe9a 	bl	800483c <RCC_GetPCLK1ClockFreq>
        break;
 8004b08:	e7bf      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
        uart_frequency = RCC_GetSystemClockFreq();
 8004b0a:	f7ff fed1 	bl	80048b0 <RCC_GetSystemClockFreq>
        break;
 8004b0e:	e7bc      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004b10:	4b38      	ldr	r3, [pc, #224]	; (8004bf4 <LL_RCC_GetUARTClockFreq+0x184>)
 8004b12:	681b      	ldr	r3, [r3, #0]
        if (LL_RCC_HSI_IsReady())
 8004b14:	f013 0f02 	tst.w	r3, #2
 8004b18:	d15d      	bne.n	8004bd6 <LL_RCC_GetUARTClockFreq+0x166>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	e7b5      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8004b1e:	4b35      	ldr	r3, [pc, #212]	; (8004bf4 <LL_RCC_GetUARTClockFreq+0x184>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        if (LL_RCC_LSE_IsReady())
 8004b22:	f013 0f02 	tst.w	r3, #2
 8004b26:	d158      	bne.n	8004bda <LL_RCC_GetUARTClockFreq+0x16a>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004b28:	2000      	movs	r0, #0
 8004b2a:	e7ae      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 8004b2c:	4b31      	ldr	r3, [pc, #196]	; (8004bf4 <LL_RCC_GetUARTClockFreq+0x184>)
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b32:	4003      	ands	r3, r0
 8004b34:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004b38:	4b31      	ldr	r3, [pc, #196]	; (8004c00 <LL_RCC_GetUARTClockFreq+0x190>)
 8004b3a:	4298      	cmp	r0, r3
 8004b3c:	d010      	beq.n	8004b60 <LL_RCC_GetUARTClockFreq+0xf0>
 8004b3e:	f1b0 2f30 	cmp.w	r0, #805318656	; 0x30003000
 8004b42:	d014      	beq.n	8004b6e <LL_RCC_GetUARTClockFreq+0xfe>
 8004b44:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8004b48:	4298      	cmp	r0, r3
 8004b4a:	d006      	beq.n	8004b5a <LL_RCC_GetUARTClockFreq+0xea>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004b4c:	f7ff feb0 	bl	80048b0 <RCC_GetSystemClockFreq>
 8004b50:	f7ff fe68 	bl	8004824 <RCC_GetHCLKClockFreq>
 8004b54:	f7ff fe72 	bl	800483c <RCC_GetPCLK1ClockFreq>
        break;
 8004b58:	e797      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
        uart_frequency = RCC_GetSystemClockFreq();
 8004b5a:	f7ff fea9 	bl	80048b0 <RCC_GetSystemClockFreq>
        break;
 8004b5e:	e794      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004b60:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <LL_RCC_GetUARTClockFreq+0x184>)
 8004b62:	681b      	ldr	r3, [r3, #0]
        if (LL_RCC_HSI_IsReady())
 8004b64:	f013 0f02 	tst.w	r3, #2
 8004b68:	d13a      	bne.n	8004be0 <LL_RCC_GetUARTClockFreq+0x170>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	e78d      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8004b6e:	4b21      	ldr	r3, [pc, #132]	; (8004bf4 <LL_RCC_GetUARTClockFreq+0x184>)
 8004b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        if (LL_RCC_LSE_IsReady())
 8004b72:	f013 0f02 	tst.w	r3, #2
 8004b76:	d135      	bne.n	8004be4 <LL_RCC_GetUARTClockFreq+0x174>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004b78:	2000      	movs	r0, #0
 8004b7a:	e786      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 8004b7c:	4b1d      	ldr	r3, [pc, #116]	; (8004bf4 <LL_RCC_GetUARTClockFreq+0x184>)
 8004b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b82:	4003      	ands	r3, r0
 8004b84:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004b88:	4b1e      	ldr	r3, [pc, #120]	; (8004c04 <LL_RCC_GetUARTClockFreq+0x194>)
 8004b8a:	4298      	cmp	r0, r3
 8004b8c:	d010      	beq.n	8004bb0 <LL_RCC_GetUARTClockFreq+0x140>
 8004b8e:	f1b0 2fc0 	cmp.w	r0, #3221274624	; 0xc000c000
 8004b92:	d014      	beq.n	8004bbe <LL_RCC_GetUARTClockFreq+0x14e>
 8004b94:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004b98:	4298      	cmp	r0, r3
 8004b9a:	d006      	beq.n	8004baa <LL_RCC_GetUARTClockFreq+0x13a>
          uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004b9c:	f7ff fe88 	bl	80048b0 <RCC_GetSystemClockFreq>
 8004ba0:	f7ff fe40 	bl	8004824 <RCC_GetHCLKClockFreq>
 8004ba4:	f7ff fe4a 	bl	800483c <RCC_GetPCLK1ClockFreq>
          break;
 8004ba8:	e76f      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
          uart_frequency = RCC_GetSystemClockFreq();
 8004baa:	f7ff fe81 	bl	80048b0 <RCC_GetSystemClockFreq>
          break;
 8004bae:	e76c      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004bb0:	4b10      	ldr	r3, [pc, #64]	; (8004bf4 <LL_RCC_GetUARTClockFreq+0x184>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
          if (LL_RCC_HSI_IsReady())
 8004bb4:	f013 0f02 	tst.w	r3, #2
 8004bb8:	d117      	bne.n	8004bea <LL_RCC_GetUARTClockFreq+0x17a>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004bba:	2000      	movs	r0, #0
 8004bbc:	e765      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <LL_RCC_GetUARTClockFreq+0x184>)
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          if (LL_RCC_LSE_IsReady())
 8004bc2:	f013 0f02 	tst.w	r3, #2
 8004bc6:	d112      	bne.n	8004bee <LL_RCC_GetUARTClockFreq+0x17e>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004bc8:	2000      	movs	r0, #0
 8004bca:	e75e      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
          uart_frequency = HSI_VALUE;
 8004bcc:	480e      	ldr	r0, [pc, #56]	; (8004c08 <LL_RCC_GetUARTClockFreq+0x198>)
 8004bce:	e75c      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
          uart_frequency = LSE_VALUE;
 8004bd0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004bd4:	e759      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
          uart_frequency = HSI_VALUE;
 8004bd6:	480c      	ldr	r0, [pc, #48]	; (8004c08 <LL_RCC_GetUARTClockFreq+0x198>)
 8004bd8:	e757      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
          uart_frequency = LSE_VALUE;
 8004bda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004bde:	e754      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
          uart_frequency = HSI_VALUE;
 8004be0:	4809      	ldr	r0, [pc, #36]	; (8004c08 <LL_RCC_GetUARTClockFreq+0x198>)
 8004be2:	e752      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
          uart_frequency = LSE_VALUE;
 8004be4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004be8:	e74f      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
            uart_frequency = HSI_VALUE;
 8004bea:	4807      	ldr	r0, [pc, #28]	; (8004c08 <LL_RCC_GetUARTClockFreq+0x198>)
 8004bec:	e74d      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
            uart_frequency = LSE_VALUE;
 8004bee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return uart_frequency;
 8004bf2:	e74a      	b.n	8004a8a <LL_RCC_GetUARTClockFreq+0x1a>
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	00c00080 	.word	0x00c00080
 8004bfc:	03000200 	.word	0x03000200
 8004c00:	30002000 	.word	0x30002000
 8004c04:	c0008000 	.word	0xc0008000
 8004c08:	00f42400 	.word	0x00f42400

08004c0c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004c0c:	b538      	push	{r3, r4, r5, lr}
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004c0e:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004c10:	f013 0f01 	tst.w	r3, #1
 8004c14:	d175      	bne.n	8004d02 <LL_USART_Init+0xf6>
 8004c16:	460d      	mov	r5, r1
 8004c18:	4604      	mov	r4, r0
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004c1a:	6803      	ldr	r3, [r0, #0]
 8004c1c:	4a3c      	ldr	r2, [pc, #240]	; (8004d10 <LL_USART_Init+0x104>)
 8004c1e:	401a      	ands	r2, r3
 8004c20:	684b      	ldr	r3, [r1, #4]
 8004c22:	68c9      	ldr	r1, [r1, #12]
 8004c24:	430b      	orrs	r3, r1
 8004c26:	6929      	ldr	r1, [r5, #16]
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	69a9      	ldr	r1, [r5, #24]
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	6003      	str	r3, [r0, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004c32:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004c34:	6842      	ldr	r2, [r0, #4]
 8004c36:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	6043      	str	r3, [r0, #4]

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004c3e:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004c40:	6882      	ldr	r2, [r0, #8]
 8004c42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c46:	4313      	orrs	r3, r2
 8004c48:	6083      	str	r3, [r0, #8]

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8004c4a:	4b32      	ldr	r3, [pc, #200]	; (8004d14 <LL_USART_Init+0x108>)
 8004c4c:	4298      	cmp	r0, r3
 8004c4e:	d016      	beq.n	8004c7e <LL_USART_Init+0x72>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 8004c50:	4b31      	ldr	r3, [pc, #196]	; (8004d18 <LL_USART_Init+0x10c>)
 8004c52:	4298      	cmp	r0, r3
 8004c54:	d027      	beq.n	8004ca6 <LL_USART_Init+0x9a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
    }
    else if (USARTx == USART3)
 8004c56:	4b31      	ldr	r3, [pc, #196]	; (8004d1c <LL_USART_Init+0x110>)
 8004c58:	4298      	cmp	r0, r3
 8004c5a:	d028      	beq.n	8004cae <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
    }
    else if (USARTx == USART6)
 8004c5c:	4b30      	ldr	r3, [pc, #192]	; (8004d20 <LL_USART_Init+0x114>)
 8004c5e:	4298      	cmp	r0, r3
 8004c60:	d029      	beq.n	8004cb6 <LL_USART_Init+0xaa>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
    }
    else if (USARTx == UART4)
 8004c62:	4b30      	ldr	r3, [pc, #192]	; (8004d24 <LL_USART_Init+0x118>)
 8004c64:	4298      	cmp	r0, r3
 8004c66:	d02b      	beq.n	8004cc0 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
    }
    else if (USARTx == UART5)
 8004c68:	4b2f      	ldr	r3, [pc, #188]	; (8004d28 <LL_USART_Init+0x11c>)
 8004c6a:	4298      	cmp	r0, r3
 8004c6c:	d02c      	beq.n	8004cc8 <LL_USART_Init+0xbc>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
    }
    else if (USARTx == UART7)
 8004c6e:	4b2f      	ldr	r3, [pc, #188]	; (8004d2c <LL_USART_Init+0x120>)
 8004c70:	4298      	cmp	r0, r3
 8004c72:	d02e      	beq.n	8004cd2 <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
    }
    else if (USARTx == UART8)
 8004c74:	4b2e      	ldr	r3, [pc, #184]	; (8004d30 <LL_USART_Init+0x124>)
 8004c76:	4298      	cmp	r0, r3
 8004c78:	d030      	beq.n	8004cdc <LL_USART_Init+0xd0>
  ErrorStatus status = ERROR;
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	e042      	b.n	8004d04 <LL_USART_Init+0xf8>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8004c7e:	2003      	movs	r0, #3
 8004c80:	f7ff fe2c 	bl	80048dc <LL_RCC_GetUSARTClockFreq>

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004c84:	2800      	cmp	r0, #0
 8004c86:	d03e      	beq.n	8004d06 <LL_USART_Init+0xfa>
        && (USART_InitStruct->BaudRate != 0U))
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d03d      	beq.n	8004d0a <LL_USART_Init+0xfe>
    {
      status = SUCCESS;
      LL_USART_SetBaudRate(USARTx,
 8004c8e:	69aa      	ldr	r2, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004c90:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004c94:	d027      	beq.n	8004ce6 <LL_USART_Init+0xda>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004c96:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004c9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8004c9e:	b280      	uxth	r0, r0
 8004ca0:	60e0      	str	r0, [r4, #12]
      status = SUCCESS;
 8004ca2:	2001      	movs	r0, #1
 8004ca4:	e02e      	b.n	8004d04 <LL_USART_Init+0xf8>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8004ca6:	200c      	movs	r0, #12
 8004ca8:	f7ff fe18 	bl	80048dc <LL_RCC_GetUSARTClockFreq>
 8004cac:	e7ea      	b.n	8004c84 <LL_USART_Init+0x78>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8004cae:	2030      	movs	r0, #48	; 0x30
 8004cb0:	f7ff fe14 	bl	80048dc <LL_RCC_GetUSARTClockFreq>
 8004cb4:	e7e6      	b.n	8004c84 <LL_USART_Init+0x78>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 8004cb6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004cba:	f7ff fe0f 	bl	80048dc <LL_RCC_GetUSARTClockFreq>
 8004cbe:	e7e1      	b.n	8004c84 <LL_USART_Init+0x78>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8004cc0:	20c0      	movs	r0, #192	; 0xc0
 8004cc2:	f7ff fed5 	bl	8004a70 <LL_RCC_GetUARTClockFreq>
 8004cc6:	e7dd      	b.n	8004c84 <LL_USART_Init+0x78>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8004cc8:	f44f 7040 	mov.w	r0, #768	; 0x300
 8004ccc:	f7ff fed0 	bl	8004a70 <LL_RCC_GetUARTClockFreq>
 8004cd0:	e7d8      	b.n	8004c84 <LL_USART_Init+0x78>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 8004cd2:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8004cd6:	f7ff fecb 	bl	8004a70 <LL_RCC_GetUARTClockFreq>
 8004cda:	e7d3      	b.n	8004c84 <LL_USART_Init+0x78>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 8004cdc:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8004ce0:	f7ff fec6 	bl	8004a70 <LL_RCC_GetUARTClockFreq>
 8004ce4:	e7ce      	b.n	8004c84 <LL_USART_Init+0x78>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004ce6:	085a      	lsrs	r2, r3, #1
 8004ce8:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8004cec:	fbb0 f0f3 	udiv	r0, r0, r3
    brrtemp = usartdiv & 0xFFF0U;
 8004cf0:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8004cf4:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cf6:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8004cfa:	4318      	orrs	r0, r3
    USARTx->BRR = brrtemp;
 8004cfc:	60e0      	str	r0, [r4, #12]
      status = SUCCESS;
 8004cfe:	2001      	movs	r0, #1
 8004d00:	e000      	b.n	8004d04 <LL_USART_Init+0xf8>
  ErrorStatus status = ERROR;
 8004d02:	2000      	movs	r0, #0
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8004d04:	bd38      	pop	{r3, r4, r5, pc}
  ErrorStatus status = ERROR;
 8004d06:	2000      	movs	r0, #0
 8004d08:	e7fc      	b.n	8004d04 <LL_USART_Init+0xf8>
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	e7fa      	b.n	8004d04 <LL_USART_Init+0xf8>
 8004d0e:	bf00      	nop
 8004d10:	efff69f3 	.word	0xefff69f3
 8004d14:	40011000 	.word	0x40011000
 8004d18:	40004400 	.word	0x40004400
 8004d1c:	40004800 	.word	0x40004800
 8004d20:	40011400 	.word	0x40011400
 8004d24:	40004c00 	.word	0x40004c00
 8004d28:	40005000 	.word	0x40005000
 8004d2c:	40007800 	.word	0x40007800
 8004d30:	40007c00 	.word	0x40007c00

08004d34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d34:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d36:	4a0f      	ldr	r2, [pc, #60]	; (8004d74 <SystemInit+0x40>)
 8004d38:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004d44:	4b0c      	ldr	r3, [pc, #48]	; (8004d78 <SystemInit+0x44>)
 8004d46:	6819      	ldr	r1, [r3, #0]
 8004d48:	f041 0101 	orr.w	r1, r1, #1
 8004d4c:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004d4e:	2000      	movs	r0, #0
 8004d50:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004d52:	681c      	ldr	r4, [r3, #0]
 8004d54:	4909      	ldr	r1, [pc, #36]	; (8004d7c <SystemInit+0x48>)
 8004d56:	4021      	ands	r1, r4
 8004d58:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004d5a:	4909      	ldr	r1, [pc, #36]	; (8004d80 <SystemInit+0x4c>)
 8004d5c:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004d5e:	6819      	ldr	r1, [r3, #0]
 8004d60:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8004d64:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004d66:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004d68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d6c:	6093      	str	r3, [r2, #8]
#endif
}
 8004d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	e000ed00 	.word	0xe000ed00
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	fef6ffff 	.word	0xfef6ffff
 8004d80:	24003010 	.word	0x24003010

08004d84 <clock_time>:
#include "boot.h"

/*---------------------------------------------------------------------------*/
clock_time_t
clock_time(void)
{
 8004d84:	b508      	push	{r3, lr}
  return (clock_time_t)TimerGet();
 8004d86:	f7fb fed3 	bl	8000b30 <TimerGet>
}
 8004d8a:	bd08      	pop	{r3, pc}

08004d8c <HAL_ETH_MspInit>:
/*---------------------------------------------------------------------------*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  if (heth->Instance == ETH)
 8004d8c:	6802      	ldr	r2, [r0, #0]
 8004d8e:	4b29      	ldr	r3, [pc, #164]	; (8004e34 <HAL_ETH_MspInit+0xa8>)
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d000      	beq.n	8004d96 <HAL_ETH_MspInit+0xa>
 8004d94:	4770      	bx	lr
{
 8004d96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d98:	b089      	sub	sp, #36	; 0x24
  {
    /* Ethernet clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004d9a:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8004d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004da4:	631a      	str	r2, [r3, #48]	; 0x30
 8004da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da8:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8004dac:	9200      	str	r2, [sp, #0]
 8004dae:	9a00      	ldr	r2, [sp, #0]
 8004db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004db6:	631a      	str	r2, [r3, #48]	; 0x30
 8004db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dba:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8004dbe:	9201      	str	r2, [sp, #4]
 8004dc0:	9a01      	ldr	r2, [sp, #4]
 8004dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8004dc8:	631a      	str	r2, [r3, #48]	; 0x30
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dd0:	9302      	str	r3, [sp, #8]
 8004dd2:	9b02      	ldr	r3, [sp, #8]
     * PC5      ------> ETH_RXD1
     * PB13     ------> ETH_TXD1
     * PG11     ------> ETH_TX_EN
     * PG13     ------> ETH_TXD0
     */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8004dd4:	2332      	movs	r3, #50	; 0x32
 8004dd6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd8:	2702      	movs	r7, #2
 8004dda:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ddc:	2600      	movs	r6, #0
 8004dde:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de0:	2503      	movs	r5, #3
 8004de2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004de4:	240b      	movs	r4, #11
 8004de6:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004de8:	a903      	add	r1, sp, #12
 8004dea:	4813      	ldr	r0, [pc, #76]	; (8004e38 <HAL_ETH_MspInit+0xac>)
 8004dec:	f7fe ff88 	bl	8003d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8004df0:	2386      	movs	r3, #134	; 0x86
 8004df2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004df4:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df6:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004df8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004dfa:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dfc:	a903      	add	r1, sp, #12
 8004dfe:	480f      	ldr	r0, [pc, #60]	; (8004e3c <HAL_ETH_MspInit+0xb0>)
 8004e00:	f7fe ff7e 	bl	8003d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004e04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e08:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e0a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0c:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e0e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e10:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e12:	a903      	add	r1, sp, #12
 8004e14:	480a      	ldr	r0, [pc, #40]	; (8004e40 <HAL_ETH_MspInit+0xb4>)
 8004e16:	f7fe ff73 	bl	8003d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8004e1a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004e1e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e20:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e22:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e24:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e26:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004e28:	a903      	add	r1, sp, #12
 8004e2a:	4806      	ldr	r0, [pc, #24]	; (8004e44 <HAL_ETH_MspInit+0xb8>)
 8004e2c:	f7fe ff68 	bl	8003d00 <HAL_GPIO_Init>
  }
}
 8004e30:	b009      	add	sp, #36	; 0x24
 8004e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e34:	40028000 	.word	0x40028000
 8004e38:	40020800 	.word	0x40020800
 8004e3c:	40020000 	.word	0x40020000
 8004e40:	40020400 	.word	0x40020400
 8004e44:	40021800 	.word	0x40021800

08004e48 <netdev_init>:
}


/*---------------------------------------------------------------------------*/
void netdev_init(void)
{
 8004e48:	b510      	push	{r4, lr}
  /* Store the default MAC address. */
  macAddress.addr[0] = NETDEV_DEFAULT_MACADDR0;
 8004e4a:	4b16      	ldr	r3, [pc, #88]	; (8004ea4 <netdev_init+0x5c>)
 8004e4c:	2208      	movs	r2, #8
 8004e4e:	701a      	strb	r2, [r3, #0]
  macAddress.addr[1] = NETDEV_DEFAULT_MACADDR1;
 8004e50:	2200      	movs	r2, #0
 8004e52:	705a      	strb	r2, [r3, #1]
  macAddress.addr[2] = NETDEV_DEFAULT_MACADDR2;
 8004e54:	2127      	movs	r1, #39	; 0x27
 8004e56:	7099      	strb	r1, [r3, #2]
  macAddress.addr[3] = NETDEV_DEFAULT_MACADDR3;
 8004e58:	2169      	movs	r1, #105	; 0x69
 8004e5a:	70d9      	strb	r1, [r3, #3]
  macAddress.addr[4] = NETDEV_DEFAULT_MACADDR4;
 8004e5c:	215b      	movs	r1, #91	; 0x5b
 8004e5e:	7119      	strb	r1, [r3, #4]
  macAddress.addr[5] = NETDEV_DEFAULT_MACADDR5;
 8004e60:	2145      	movs	r1, #69	; 0x45
 8004e62:	7159      	strb	r1, [r3, #5]

  /* Initialize Ethernet. */
  heth.Instance = ETH;
 8004e64:	4c10      	ldr	r4, [pc, #64]	; (8004ea8 <netdev_init+0x60>)
 8004e66:	4911      	ldr	r1, [pc, #68]	; (8004eac <netdev_init+0x64>)
 8004e68:	6021      	str	r1, [r4, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	6061      	str	r1, [r4, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004e6e:	8222      	strh	r2, [r4, #16]
  heth.Init.MACAddr = &(macAddress.addr)[0];
 8004e70:	6163      	str	r3, [r4, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004e72:	61a2      	str	r2, [r4, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004e74:	61e2      	str	r2, [r4, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004e76:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004e7a:	6223      	str	r3, [r4, #32]
  (void)HAL_ETH_Init(&heth);
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f7fe fc2d 	bl	80036dc <HAL_ETH_Init>

  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004e82:	2304      	movs	r3, #4
 8004e84:	4a0a      	ldr	r2, [pc, #40]	; (8004eb0 <netdev_init+0x68>)
 8004e86:	490b      	ldr	r1, [pc, #44]	; (8004eb4 <netdev_init+0x6c>)
 8004e88:	4620      	mov	r0, r4
 8004e8a:	f7fe fa6a 	bl	8003362 <HAL_ETH_DMATxDescListInit>
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004e8e:	2304      	movs	r3, #4
 8004e90:	4a09      	ldr	r2, [pc, #36]	; (8004eb8 <netdev_init+0x70>)
 8004e92:	490a      	ldr	r1, [pc, #40]	; (8004ebc <netdev_init+0x74>)
 8004e94:	4620      	mov	r0, r4
 8004e96:	f7fe fa9d 	bl	80033d4 <HAL_ETH_DMARxDescListInit>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f7fe fd48 	bl	8003930 <HAL_ETH_Start>
}
 8004ea0:	bd10      	pop	{r4, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20000620 	.word	0x20000620
 8004ea8:	2000262c 	.word	0x2000262c
 8004eac:	40028000 	.word	0x40028000
 8004eb0:	20002674 	.word	0x20002674
 8004eb4:	20000d5c 	.word	0x20000d5c
 8004eb8:	20000ddc 	.word	0x20000ddc
 8004ebc:	200025ac 	.word	0x200025ac

08004ec0 <netdev_init_mac>:

/*---------------------------------------------------------------------------*/
void netdev_init_mac(void)
{
  /* Configure the MAC address */
  uip_setethaddr(macAddress);
 8004ec0:	4a07      	ldr	r2, [pc, #28]	; (8004ee0 <netdev_init_mac+0x20>)
 8004ec2:	7811      	ldrb	r1, [r2, #0]
 8004ec4:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <netdev_init_mac+0x24>)
 8004ec6:	7019      	strb	r1, [r3, #0]
 8004ec8:	7851      	ldrb	r1, [r2, #1]
 8004eca:	7059      	strb	r1, [r3, #1]
 8004ecc:	7891      	ldrb	r1, [r2, #2]
 8004ece:	7099      	strb	r1, [r3, #2]
 8004ed0:	78d1      	ldrb	r1, [r2, #3]
 8004ed2:	70d9      	strb	r1, [r3, #3]
 8004ed4:	7911      	ldrb	r1, [r2, #4]
 8004ed6:	7119      	strb	r1, [r3, #4]
 8004ed8:	7952      	ldrb	r2, [r2, #5]
 8004eda:	715a      	strb	r2, [r3, #5]
}
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000620 	.word	0x20000620
 8004ee4:	200005a4 	.word	0x200005a4

08004ee8 <netdev_get_mac>:


/*---------------------------------------------------------------------------*/
void netdev_get_mac(unsigned char * mac_addr)
{
  mac_addr[0] = macAddress.addr[0];
 8004ee8:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <netdev_get_mac+0x1c>)
 8004eea:	781a      	ldrb	r2, [r3, #0]
 8004eec:	7002      	strb	r2, [r0, #0]
  mac_addr[1] = macAddress.addr[1];
 8004eee:	785a      	ldrb	r2, [r3, #1]
 8004ef0:	7042      	strb	r2, [r0, #1]
  mac_addr[2] = macAddress.addr[2];
 8004ef2:	789a      	ldrb	r2, [r3, #2]
 8004ef4:	7082      	strb	r2, [r0, #2]
  mac_addr[3] = macAddress.addr[3];
 8004ef6:	78da      	ldrb	r2, [r3, #3]
 8004ef8:	70c2      	strb	r2, [r0, #3]
  mac_addr[4] = macAddress.addr[4];
 8004efa:	791a      	ldrb	r2, [r3, #4]
 8004efc:	7102      	strb	r2, [r0, #4]
  mac_addr[5] = macAddress.addr[5];
 8004efe:	795b      	ldrb	r3, [r3, #5]
 8004f00:	7143      	strb	r3, [r0, #5]
}
 8004f02:	4770      	bx	lr
 8004f04:	20000620 	.word	0x20000620

08004f08 <netdev_read>:


/*---------------------------------------------------------------------------*/
unsigned int netdev_read(void)
{
 8004f08:	b538      	push	{r3, r4, r5, lr}
  uint16_t  len = 0;
  uint8_t * buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;

  /* Check if a new frame was received. */
  if (HAL_ETH_GetReceivedFrame(&heth) == HAL_OK)
 8004f0a:	4812      	ldr	r0, [pc, #72]	; (8004f54 <netdev_read+0x4c>)
 8004f0c:	f7fe fb28 	bl	8003560 <HAL_ETH_GetReceivedFrame>
 8004f10:	b110      	cbz	r0, 8004f18 <netdev_read+0x10>
  unsigned int result = 0;
 8004f12:	2400      	movs	r4, #0
    /* Update the result. */
    result = len;
  }
  /* Give the result back to the caller. */
  return result;
}
 8004f14:	4620      	mov	r0, r4
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
    len = heth.RxFrameInfos.length;
 8004f18:	4d0e      	ldr	r5, [pc, #56]	; (8004f54 <netdev_read+0x4c>)
 8004f1a:	8fac      	ldrh	r4, [r5, #60]	; 0x3c
    memcpy(uip_buf, buffer, len);
 8004f1c:	4622      	mov	r2, r4
 8004f1e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8004f20:	480d      	ldr	r0, [pc, #52]	; (8004f58 <netdev_read+0x50>)
 8004f22:	f000 f888 	bl	8005036 <memcpy>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004f26:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004f28:	6813      	ldr	r3, [r2, #0]
 8004f2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f2e:	6013      	str	r3, [r2, #0]
    heth.RxFrameInfos.SegCount =0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	63ab      	str	r3, [r5, #56]	; 0x38
    if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	f241 0214 	movw	r2, #4116	; 0x1014
 8004f3a:	589a      	ldr	r2, [r3, r2]
 8004f3c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004f40:	d0e8      	beq.n	8004f14 <netdev_read+0xc>
      heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004f42:	f241 0214 	movw	r2, #4116	; 0x1014
 8004f46:	2180      	movs	r1, #128	; 0x80
 8004f48:	5099      	str	r1, [r3, r2]
      heth.Instance->DMARPDR = 0;
 8004f4a:	f241 0208 	movw	r2, #4104	; 0x1008
 8004f4e:	2100      	movs	r1, #0
 8004f50:	5099      	str	r1, [r3, r2]
 8004f52:	e7df      	b.n	8004f14 <netdev_read+0xc>
 8004f54:	2000262c 	.word	0x2000262c
 8004f58:	200006bc 	.word	0x200006bc

08004f5c <netdev_send>:


/*---------------------------------------------------------------------------*/
void netdev_send(void)
{
 8004f5c:	b538      	push	{r3, r4, r5, lr}
  uint32_t framelength;
  uint32_t timeout;
  ErrorStatus errorStatus = SUCCESS;

  /* Obtain pointer to the transmission DMA descriptor. */
  DmaTxDesc = heth.TxDesc;
 8004f5e:	4b19      	ldr	r3, [pc, #100]	; (8004fc4 <netdev_send+0x68>)
 8004f60:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  /* Set timeout time to wait for the DMA buffer to become available. */
  timeout = TimerGet() + NETDEV_TX_PACKET_TIMEOUT_MS;
 8004f62:	f7fb fde5 	bl	8000b30 <TimerGet>
 8004f66:	f100 05fa 	add.w	r5, r0, #250	; 0xfa
  /* Only continue with packet transmission of the buffer is available. */
  while ((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	da07      	bge.n	8004f80 <netdev_send+0x24>
  {
    CopService();
 8004f70:	f7fb fed2 	bl	8000d18 <CopService>
    /* Break loop upon timeout. This would indicate a hardware failure. */
    if (TimerGet() > timeout)
 8004f74:	f7fb fddc 	bl	8000b30 <TimerGet>
 8004f78:	42a8      	cmp	r0, r5
 8004f7a:	d9f6      	bls.n	8004f6a <netdev_send+0xe>
    {
      /* Update the error status. */
      errorStatus = ERROR;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e000      	b.n	8004f82 <netdev_send+0x26>
  ErrorStatus errorStatus = SUCCESS;
 8004f80:	2301      	movs	r3, #1
      break;
    }
  }
  /* Only continue with transmission if not error was detected. */
  if (errorStatus == SUCCESS)
 8004f82:	b983      	cbnz	r3, 8004fa6 <netdev_send+0x4a>
  }

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to
   * resume transmission.
   */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004f84:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <netdev_send+0x68>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f241 0214 	movw	r2, #4116	; 0x1014
 8004f8c:	589a      	ldr	r2, [r3, r2]
 8004f8e:	f012 0f20 	tst.w	r2, #32
 8004f92:	d007      	beq.n	8004fa4 <netdev_send+0x48>
  {
    /* Clear TUS ETHERNET DMA flag. */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004f94:	f241 0214 	movw	r2, #4116	; 0x1014
 8004f98:	2120      	movs	r1, #32
 8004f9a:	5099      	str	r1, [r3, r2]
    /* Resume DMA transmission. */
    heth.Instance->DMATPDR = 0;
 8004f9c:	f241 0204 	movw	r2, #4100	; 0x1004
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	5099      	str	r1, [r3, r2]
  }
}
 8004fa4:	bd38      	pop	{r3, r4, r5, pc}
    framelength = uip_len;
 8004fa6:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <netdev_send+0x6c>)
 8004fa8:	881d      	ldrh	r5, [r3, #0]
    buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004faa:	4c06      	ldr	r4, [pc, #24]	; (8004fc4 <netdev_send+0x68>)
 8004fac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    memcpy(buffer, uip_buf, framelength);
 8004fae:	462a      	mov	r2, r5
 8004fb0:	4906      	ldr	r1, [pc, #24]	; (8004fcc <netdev_send+0x70>)
 8004fb2:	6898      	ldr	r0, [r3, #8]
 8004fb4:	f000 f83f 	bl	8005036 <memcpy>
    HAL_ETH_TransmitFrame(&heth, framelength);
 8004fb8:	4629      	mov	r1, r5
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f7fe fa40 	bl	8003440 <HAL_ETH_TransmitFrame>
 8004fc0:	e7e0      	b.n	8004f84 <netdev_send+0x28>
 8004fc2:	bf00      	nop
 8004fc4:	2000262c 	.word	0x2000262c
 8004fc8:	20000628 	.word	0x20000628
 8004fcc:	200006bc 	.word	0x200006bc

08004fd0 <__libc_init_array>:
 8004fd0:	b570      	push	{r4, r5, r6, lr}
 8004fd2:	4e0d      	ldr	r6, [pc, #52]	; (8005008 <__libc_init_array+0x38>)
 8004fd4:	4c0d      	ldr	r4, [pc, #52]	; (800500c <__libc_init_array+0x3c>)
 8004fd6:	1ba4      	subs	r4, r4, r6
 8004fd8:	10a4      	asrs	r4, r4, #2
 8004fda:	2500      	movs	r5, #0
 8004fdc:	42a5      	cmp	r5, r4
 8004fde:	d109      	bne.n	8004ff4 <__libc_init_array+0x24>
 8004fe0:	4e0b      	ldr	r6, [pc, #44]	; (8005010 <__libc_init_array+0x40>)
 8004fe2:	4c0c      	ldr	r4, [pc, #48]	; (8005014 <__libc_init_array+0x44>)
 8004fe4:	f000 f83a 	bl	800505c <_init>
 8004fe8:	1ba4      	subs	r4, r4, r6
 8004fea:	10a4      	asrs	r4, r4, #2
 8004fec:	2500      	movs	r5, #0
 8004fee:	42a5      	cmp	r5, r4
 8004ff0:	d105      	bne.n	8004ffe <__libc_init_array+0x2e>
 8004ff2:	bd70      	pop	{r4, r5, r6, pc}
 8004ff4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ff8:	4798      	blx	r3
 8004ffa:	3501      	adds	r5, #1
 8004ffc:	e7ee      	b.n	8004fdc <__libc_init_array+0xc>
 8004ffe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005002:	4798      	blx	r3
 8005004:	3501      	adds	r5, #1
 8005006:	e7f2      	b.n	8004fee <__libc_init_array+0x1e>
 8005008:	080051a8 	.word	0x080051a8
 800500c:	080051a8 	.word	0x080051a8
 8005010:	080051a8 	.word	0x080051a8
 8005014:	080051ac 	.word	0x080051ac

08005018 <memcmp>:
 8005018:	b530      	push	{r4, r5, lr}
 800501a:	2400      	movs	r4, #0
 800501c:	42a2      	cmp	r2, r4
 800501e:	d101      	bne.n	8005024 <memcmp+0xc>
 8005020:	2000      	movs	r0, #0
 8005022:	e007      	b.n	8005034 <memcmp+0x1c>
 8005024:	5d03      	ldrb	r3, [r0, r4]
 8005026:	3401      	adds	r4, #1
 8005028:	190d      	adds	r5, r1, r4
 800502a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800502e:	42ab      	cmp	r3, r5
 8005030:	d0f4      	beq.n	800501c <memcmp+0x4>
 8005032:	1b58      	subs	r0, r3, r5
 8005034:	bd30      	pop	{r4, r5, pc}

08005036 <memcpy>:
 8005036:	b510      	push	{r4, lr}
 8005038:	1e43      	subs	r3, r0, #1
 800503a:	440a      	add	r2, r1
 800503c:	4291      	cmp	r1, r2
 800503e:	d100      	bne.n	8005042 <memcpy+0xc>
 8005040:	bd10      	pop	{r4, pc}
 8005042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005046:	f803 4f01 	strb.w	r4, [r3, #1]!
 800504a:	e7f7      	b.n	800503c <memcpy+0x6>

0800504c <memset>:
 800504c:	4402      	add	r2, r0
 800504e:	4603      	mov	r3, r0
 8005050:	4293      	cmp	r3, r2
 8005052:	d100      	bne.n	8005056 <memset+0xa>
 8005054:	4770      	bx	lr
 8005056:	f803 1b01 	strb.w	r1, [r3], #1
 800505a:	e7f9      	b.n	8005050 <memset+0x4>

0800505c <_init>:
 800505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505e:	bf00      	nop
 8005060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005062:	bc08      	pop	{r3}
 8005064:	469e      	mov	lr, r3
 8005066:	4770      	bx	lr

08005068 <_fini>:
 8005068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506a:	bf00      	nop
 800506c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506e:	bc08      	pop	{r3}
 8005070:	469e      	mov	lr, r3
 8005072:	4770      	bx	lr
