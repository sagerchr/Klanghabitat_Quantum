
openblt_stm32f767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .shared       00000040  20000000  20000000  00030000  2**2
                  ALLOC
  1 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004d70  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000012c  08004f68  08004f68  00014f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08005094  08005094  00015094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0800509c  0800509c  0001509c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080050a0  080050a0  000150a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000000c  20000040  080050a4  00020040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00003df4  2000004c  080050b0  0002004c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003e40  080050b0  00023e40  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001c2f3  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004667  00000000  00000000  0003c36f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000dd0  00000000  00000000  000409d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c38  00000000  00000000  000417a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002bec4  00000000  00000000  000423e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00014967  00000000  00000000  0006e2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000fc987  00000000  00000000  00082c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0017f592  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000020e0  00000000  00000000  0017f610  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00006296  00000000  00000000  001816f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000004c 	.word	0x2000004c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004f50 	.word	0x08004f50

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000050 	.word	0x20000050
 8000234:	08004f50 	.word	0x08004f50

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <CpuIrqDisable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
  __asm volatile ("cpsid i");
 8000538:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 800053a:	4770      	bx	lr

0800053c <CpuIrqEnable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
  __asm volatile ("cpsie i");
 800053c:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 800053e:	4770      	bx	lr

08000540 <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 8000540:	b508      	push	{r3, lr}
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals.
   */
  CpuIrqDisable();
 8000542:	f7ff fff9 	bl	8000538 <CpuIrqDisable>
} /*** end of CpuInit ***/
 8000546:	bd08      	pop	{r3, pc}

08000548 <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 8000548:	b510      	push	{r4, lr}
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 800054a:	f000 fa05 	bl	8000958 <NvmVerifyChecksum>
 800054e:	b1b8      	cbz	r0, 8000580 <CpuStartUserProgram+0x38>
    /* not a valid user program so it cannot be started */
    return;
  }
#if (BOOT_CPU_USER_PROGRAM_START_HOOK > 0)
  /* invoke callback */
  if (CpuUserProgramStartHook() == BLT_FALSE)
 8000550:	f002 fac0 	bl	8002ad4 <CpuUserProgramStartHook>
 8000554:	b1b8      	cbz	r0, 8000586 <CpuStartUserProgram+0x3e>
    return;
  }
#endif
#if (BOOT_COM_ENABLE > 0)
  /* release the communication interface */
  ComFree();
 8000556:	f000 fb95 	bl	8000c84 <ComFree>
#endif
  /* reset the timer */
  TimerReset();
 800055a:	f000 fac1 	bl	8000ae0 <TimerReset>
  /* reset the HAL */
  HAL_DeInit();
 800055e:	f002 fce3 	bl	8002f28 <HAL_DeInit>
  /* remap user program's vector table */
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 8000562:	f000 f9fd 	bl	8000960 <NvmGetUserProgBaseAddress>
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <CpuStartUserProgram+0x44>)
 8000568:	4003      	ands	r3, r0
 800056a:	4a09      	ldr	r2, [pc, #36]	; (8000590 <CpuStartUserProgram+0x48>)
 800056c:	6093      	str	r3, [r2, #8]
  /* set the address where the bootloader needs to jump to. this is the address of
   * the 2nd entry in the user program's vector table. this address points to the
   * user program's reset handler.
   */
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 800056e:	f000 f9f7 	bl	8000960 <NvmGetUserProgBaseAddress>
 8000572:	6844      	ldr	r4, [r0, #4]
  /* The Cortex-M4 core has interrupts enabled out of reset. the bootloader
   * explicitly disables these for security reasons. Enable them here again, so it does 
   * not have to be done by the user program.
   */
  CpuIrqEnable();
 8000574:	f7ff ffe2 	bl	800053c <CpuIrqEnable>
  /* start the user program by activating its reset interrupt service routine */
  pProgResetHandler();
 8000578:	47a0      	blx	r4
  /* theoretically, the code never gets here because the user program should now be
   * running and the previous function call should not return. In case it did return
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
 800057a:	f000 fbbd 	bl	8000cf8 <ComDeferredInit>
 800057e:	e001      	b.n	8000584 <CpuStartUserProgram+0x3c>
    ComDeferredInit();
 8000580:	f000 fbba 	bl	8000cf8 <ComDeferredInit>
#endif
} /*** end of CpuStartUserProgram ***/
 8000584:	bd10      	pop	{r4, pc}
    ComDeferredInit();
 8000586:	f000 fbb7 	bl	8000cf8 <ComDeferredInit>
    return;
 800058a:	e7fb      	b.n	8000584 <CpuStartUserProgram+0x3c>
 800058c:	1fffff80 	.word	0x1fffff80
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 8000594:	b570      	push	{r4, r5, r6, lr}
  /* set casted pointers */
  from = (blt_int8u *)src;
  to = (blt_int8u *)dest;

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 8000596:	e008      	b.n	80005aa <CpuMemCopy+0x16>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 8000598:	1c4d      	adds	r5, r1, #1
 800059a:	1c46      	adds	r6, r0, #1
 800059c:	780b      	ldrb	r3, [r1, #0]
 800059e:	7003      	strb	r3, [r0, #0]
    /* keep the watchdog happy */
    CopService();
 80005a0:	f000 fbba 	bl	8000d18 <CopService>
    *to++ = *from++;
 80005a4:	4630      	mov	r0, r6
 80005a6:	4629      	mov	r1, r5
  while (len-- > 0)
 80005a8:	4622      	mov	r2, r4
 80005aa:	1e53      	subs	r3, r2, #1
 80005ac:	b29c      	uxth	r4, r3
 80005ae:	2a00      	cmp	r2, #0
 80005b0:	d1f2      	bne.n	8000598 <CpuMemCopy+0x4>
  }
} /*** end of CpuMemCopy ***/
 80005b2:	bd70      	pop	{r4, r5, r6, pc}

080005b4 <FlashGetSector>:
** \param     address Address in the flash sector.
** \return    Flash sector number or FLASH_INVALID_SECTOR.
**
****************************************************************************************/
static blt_int8u FlashGetSector(blt_addr address)
{
 80005b4:	b538      	push	{r3, r4, r5, lr}
 80005b6:	4605      	mov	r5, r0
  blt_int8u result = FLASH_INVALID_SECTOR;
  blt_int8u sectorIdx;

  /* search through the sectors to find the right one */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 80005b8:	2400      	movs	r4, #0
 80005ba:	e001      	b.n	80005c0 <FlashGetSector+0xc>
 80005bc:	3401      	adds	r4, #1
 80005be:	b2e4      	uxtb	r4, r4
 80005c0:	2c0a      	cmp	r4, #10
 80005c2:	d815      	bhi.n	80005f0 <FlashGetSector+0x3c>
  {
    /* keep the watchdog happy */
    CopService();
 80005c4:	f000 fba8 	bl	8000d18 <CopService>
    /* is the address in this sector? */
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 80005c8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80005cc:	0093      	lsls	r3, r2, #2
 80005ce:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <FlashGetSector+0x40>)
 80005d0:	58d3      	ldr	r3, [r2, r3]
 80005d2:	42ab      	cmp	r3, r5
 80005d4:	d8f2      	bhi.n	80005bc <FlashGetSector+0x8>
        (address < (flashLayout[sectorIdx].sector_start + \
                    flashLayout[sectorIdx].sector_size)))
 80005d6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80005da:	0091      	lsls	r1, r2, #2
 80005dc:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <FlashGetSector+0x40>)
 80005de:	440a      	add	r2, r1
 80005e0:	6852      	ldr	r2, [r2, #4]
        (address < (flashLayout[sectorIdx].sector_start + \
 80005e2:	4413      	add	r3, r2
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 80005e4:	42ab      	cmp	r3, r5
 80005e6:	d9e9      	bls.n	80005bc <FlashGetSector+0x8>
    {
      /* found the sector we are looking for so store it */
      result = flashLayout[sectorIdx].sector_num;
 80005e8:	4b02      	ldr	r3, [pc, #8]	; (80005f4 <FlashGetSector+0x40>)
 80005ea:	440b      	add	r3, r1
 80005ec:	7a18      	ldrb	r0, [r3, #8]
      /* all done so no need to continue looping */
      break;
 80005ee:	e000      	b.n	80005f2 <FlashGetSector+0x3e>
  blt_int8u result = FLASH_INVALID_SECTOR;
 80005f0:	20ff      	movs	r0, #255	; 0xff
    }
  }
  /* give the result back to the caller */
  return result;
} /*** end of FlashGetSector ***/
 80005f2:	bd38      	pop	{r3, r4, r5, pc}
 80005f4:	08004f68 	.word	0x08004f68

080005f8 <FlashInitBlock>:
{
 80005f8:	b508      	push	{r3, lr}
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 80005fa:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80005fe:	b953      	cbnz	r3, 8000616 <FlashInitBlock+0x1e>
  if (block->base_addr == address)
 8000600:	6803      	ldr	r3, [r0, #0]
 8000602:	428b      	cmp	r3, r1
 8000604:	d009      	beq.n	800061a <FlashInitBlock+0x22>
  block->base_addr = address;
 8000606:	f840 1b04 	str.w	r1, [r0], #4
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 800060a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800060e:	f7ff ffc1 	bl	8000594 <CpuMemCopy>
  return BLT_TRUE;
 8000612:	2001      	movs	r0, #1
 8000614:	e000      	b.n	8000618 <FlashInitBlock+0x20>
    return BLT_FALSE;
 8000616:	2000      	movs	r0, #0
} /*** end of FlashInitBlock ***/
 8000618:	bd08      	pop	{r3, pc}
    return BLT_TRUE;
 800061a:	2001      	movs	r0, #1
 800061c:	e7fc      	b.n	8000618 <FlashInitBlock+0x20>

0800061e <FlashWriteBlock>:
{
 800061e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000622:	4607      	mov	r7, r0
  HAL_FLASH_Unlock();
 8000624:	f003 f9c0 	bl	80039a8 <HAL_FLASH_Unlock>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8000628:	2400      	movs	r4, #0
 800062a:	2c7f      	cmp	r4, #127	; 0x7f
 800062c:	d814      	bhi.n	8000658 <FlashWriteBlock+0x3a>
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 800062e:	683e      	ldr	r6, [r7, #0]
 8000630:	00a3      	lsls	r3, r4, #2
 8000632:	eb06 0803 	add.w	r8, r6, r3
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 8000636:	443b      	add	r3, r7
 8000638:	685d      	ldr	r5, [r3, #4]
    CopService();
 800063a:	f000 fb6d 	bl	8000d18 <CopService>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 800063e:	462a      	mov	r2, r5
 8000640:	2300      	movs	r3, #0
 8000642:	4641      	mov	r1, r8
 8000644:	2002      	movs	r0, #2
 8000646:	f003 fa05 	bl	8003a54 <HAL_FLASH_Program>
 800064a:	b938      	cbnz	r0, 800065c <FlashWriteBlock+0x3e>
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 800064c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8000650:	42ab      	cmp	r3, r5
 8000652:	d109      	bne.n	8000668 <FlashWriteBlock+0x4a>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8000654:	3401      	adds	r4, #1
 8000656:	e7e8      	b.n	800062a <FlashWriteBlock+0xc>
  blt_bool   result = BLT_TRUE;
 8000658:	2401      	movs	r4, #1
 800065a:	e000      	b.n	800065e <FlashWriteBlock+0x40>
      result = BLT_FALSE;
 800065c:	2400      	movs	r4, #0
  HAL_FLASH_Lock();
 800065e:	f003 f9bb 	bl	80039d8 <HAL_FLASH_Lock>
} /*** end of FlashWriteBlock ***/
 8000662:	4620      	mov	r0, r4
 8000664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      result = BLT_FALSE;
 8000668:	2400      	movs	r4, #0
 800066a:	e7f8      	b.n	800065e <FlashWriteBlock+0x40>

0800066c <FlashSwitchBlock>:
{
 800066c:	b538      	push	{r3, r4, r5, lr}
 800066e:	460d      	mov	r5, r1
  if (block == &bootBlockInfo)
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <FlashSwitchBlock+0x38>)
 8000672:	4298      	cmp	r0, r3
 8000674:	d011      	beq.n	800069a <FlashSwitchBlock+0x2e>
 8000676:	4604      	mov	r4, r0
  else if (base_addr == flashLayout[0].sector_start)
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <FlashSwitchBlock+0x3c>)
 800067a:	4299      	cmp	r1, r3
 800067c:	d107      	bne.n	800068e <FlashSwitchBlock+0x22>
    block = &bootBlockInfo;
 800067e:	4c09      	ldr	r4, [pc, #36]	; (80006a4 <FlashSwitchBlock+0x38>)
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 8000680:	4629      	mov	r1, r5
 8000682:	4620      	mov	r0, r4
 8000684:	f7ff ffb8 	bl	80005f8 <FlashInitBlock>
 8000688:	b148      	cbz	r0, 800069e <FlashSwitchBlock+0x32>
} /*** end of FlashSwitchBlock ***/
 800068a:	4620      	mov	r0, r4
 800068c:	bd38      	pop	{r3, r4, r5, pc}
    if (FlashWriteBlock(block) == BLT_FALSE)
 800068e:	f7ff ffc6 	bl	800061e <FlashWriteBlock>
 8000692:	2800      	cmp	r0, #0
 8000694:	d1f4      	bne.n	8000680 <FlashSwitchBlock+0x14>
      return BLT_NULL;
 8000696:	2400      	movs	r4, #0
 8000698:	e7f7      	b.n	800068a <FlashSwitchBlock+0x1e>
    block = &blockInfo;
 800069a:	4c04      	ldr	r4, [pc, #16]	; (80006ac <FlashSwitchBlock+0x40>)
 800069c:	e7f0      	b.n	8000680 <FlashSwitchBlock+0x14>
    return BLT_NULL;
 800069e:	2400      	movs	r4, #0
 80006a0:	e7f3      	b.n	800068a <FlashSwitchBlock+0x1e>
 80006a2:	bf00      	nop
 80006a4:	2000026c 	.word	0x2000026c
 80006a8:	08008000 	.word	0x08008000
 80006ac:	20000068 	.word	0x20000068

080006b0 <FlashAddToBlock>:
{
 80006b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006b4:	4606      	mov	r6, r0
 80006b6:	460c      	mov	r4, r1
 80006b8:	4617      	mov	r7, r2
 80006ba:	461d      	mov	r5, r3
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 80006bc:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8000734 <FlashAddToBlock+0x84>
 80006c0:	ea01 0808 	and.w	r8, r1, r8
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 80006c4:	6803      	ldr	r3, [r0, #0]
 80006c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006ca:	d007      	beq.n	80006dc <FlashAddToBlock+0x2c>
  if (block->base_addr != current_base_addr)
 80006cc:	6833      	ldr	r3, [r6, #0]
 80006ce:	4543      	cmp	r3, r8
 80006d0:	d10b      	bne.n	80006ea <FlashAddToBlock+0x3a>
  dst = &(block->data[address - block->base_addr]);
 80006d2:	6833      	ldr	r3, [r6, #0]
 80006d4:	1ae4      	subs	r4, r4, r3
 80006d6:	4434      	add	r4, r6
 80006d8:	3404      	adds	r4, #4
 80006da:	e015      	b.n	8000708 <FlashAddToBlock+0x58>
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 80006dc:	4641      	mov	r1, r8
 80006de:	f7ff ff8b 	bl	80005f8 <FlashInitBlock>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2800      	cmp	r0, #0
 80006e6:	d1f1      	bne.n	80006cc <FlashAddToBlock+0x1c>
 80006e8:	e01f      	b.n	800072a <FlashAddToBlock+0x7a>
    block = FlashSwitchBlock(block, current_base_addr);
 80006ea:	4641      	mov	r1, r8
 80006ec:	4630      	mov	r0, r6
 80006ee:	f7ff ffbd 	bl	800066c <FlashSwitchBlock>
    if (block == BLT_NULL)
 80006f2:	4606      	mov	r6, r0
 80006f4:	2800      	cmp	r0, #0
 80006f6:	d1ec      	bne.n	80006d2 <FlashAddToBlock+0x22>
      return BLT_FALSE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	e016      	b.n	800072a <FlashAddToBlock+0x7a>
    *dst = *src;
 80006fc:	f817 3b01 	ldrb.w	r3, [r7], #1
 8000700:	f804 3b01 	strb.w	r3, [r4], #1
  while (len > 0);
 8000704:	3d01      	subs	r5, #1
 8000706:	d00f      	beq.n	8000728 <FlashAddToBlock+0x78>
    CopService();
 8000708:	f000 fb06 	bl	8000d18 <CopService>
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 800070c:	1d33      	adds	r3, r6, #4
 800070e:	1ae3      	subs	r3, r4, r3
 8000710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000714:	d3f2      	bcc.n	80006fc <FlashAddToBlock+0x4c>
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 8000716:	f508 7100 	add.w	r1, r8, #512	; 0x200
 800071a:	4630      	mov	r0, r6
 800071c:	f7ff ffa6 	bl	800066c <FlashSwitchBlock>
      if (block == BLT_NULL)
 8000720:	4606      	mov	r6, r0
 8000722:	b128      	cbz	r0, 8000730 <FlashAddToBlock+0x80>
      dst = &(block->data[0]);
 8000724:	1d04      	adds	r4, r0, #4
 8000726:	e7e9      	b.n	80006fc <FlashAddToBlock+0x4c>
  return BLT_TRUE;
 8000728:	2301      	movs	r3, #1
} /*** end of FlashAddToBlock ***/
 800072a:	4618      	mov	r0, r3
 800072c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLT_FALSE;
 8000730:	2300      	movs	r3, #0
 8000732:	e7fa      	b.n	800072a <FlashAddToBlock+0x7a>
 8000734:	fffffe00 	.word	0xfffffe00

08000738 <FlashEraseSectors>:
{
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	4604      	mov	r4, r0
 800073e:	460e      	mov	r6, r1
  blt_int32u eraseSectorError = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	9300      	str	r3, [sp, #0]
  if (first_sector > last_sector)
 8000744:	4288      	cmp	r0, r1
 8000746:	d819      	bhi.n	800077c <FlashEraseSectors+0x44>
  blt_bool result = BLT_TRUE;
 8000748:	2501      	movs	r5, #1
  if ((first_sector < flashLayout[0].sector_num) || \
 800074a:	b1ec      	cbz	r4, 8000788 <FlashEraseSectors+0x50>
 800074c:	2e0b      	cmp	r6, #11
 800074e:	d81f      	bhi.n	8000790 <FlashEraseSectors+0x58>
  if (result == BLT_TRUE)
 8000750:	b1dd      	cbz	r5, 800078a <FlashEraseSectors+0x52>
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000752:	2300      	movs	r3, #0
 8000754:	9301      	str	r3, [sp, #4]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000756:	2302      	movs	r3, #2
 8000758:	9305      	str	r3, [sp, #20]
    eraseInitStruct.NbSectors = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	9304      	str	r3, [sp, #16]
    HAL_FLASH_Unlock();
 800075e:	f003 f923 	bl	80039a8 <HAL_FLASH_Unlock>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8000762:	42b4      	cmp	r4, r6
 8000764:	d80d      	bhi.n	8000782 <FlashEraseSectors+0x4a>
      CopService();
 8000766:	f000 fad7 	bl	8000d18 <CopService>
      eraseInitStruct.Sector = sectorIdx;
 800076a:	9403      	str	r4, [sp, #12]
      if(HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&eraseSectorError) != HAL_OK)
 800076c:	4669      	mov	r1, sp
 800076e:	a801      	add	r0, sp, #4
 8000770:	f003 fa08 	bl	8003b84 <HAL_FLASHEx_Erase>
 8000774:	b920      	cbnz	r0, 8000780 <FlashEraseSectors+0x48>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8000776:	3401      	adds	r4, #1
 8000778:	b2e4      	uxtb	r4, r4
 800077a:	e7f2      	b.n	8000762 <FlashEraseSectors+0x2a>
    result = BLT_FALSE;
 800077c:	2500      	movs	r5, #0
 800077e:	e7e4      	b.n	800074a <FlashEraseSectors+0x12>
        result = BLT_FALSE;
 8000780:	2500      	movs	r5, #0
    HAL_FLASH_Lock();
 8000782:	f003 f929 	bl	80039d8 <HAL_FLASH_Lock>
 8000786:	e000      	b.n	800078a <FlashEraseSectors+0x52>
 8000788:	2500      	movs	r5, #0
} /*** end of FlashEraseSectors ***/
 800078a:	4628      	mov	r0, r5
 800078c:	b006      	add	sp, #24
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	2500      	movs	r5, #0
 8000792:	e7fa      	b.n	800078a <FlashEraseSectors+0x52>

08000794 <FlashInit>:
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8000794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000798:	4a02      	ldr	r2, [pc, #8]	; (80007a4 <FlashInit+0x10>)
 800079a:	6013      	str	r3, [r2, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 800079c:	4a02      	ldr	r2, [pc, #8]	; (80007a8 <FlashInit+0x14>)
 800079e:	6013      	str	r3, [r2, #0]
} /*** end of FlashInit ***/
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000068 	.word	0x20000068
 80007a8:	2000026c 	.word	0x2000026c

080007ac <FlashWrite>:
{
 80007ac:	b570      	push	{r4, r5, r6, lr}
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 80007ae:	1e4b      	subs	r3, r1, #1
 80007b0:	4c14      	ldr	r4, [pc, #80]	; (8000804 <FlashWrite+0x58>)
 80007b2:	1a24      	subs	r4, r4, r0
 80007b4:	42a3      	cmp	r3, r4
 80007b6:	d901      	bls.n	80007bc <FlashWrite+0x10>
    return BLT_FALSE;
 80007b8:	2000      	movs	r0, #0
} /*** end of FlashWrite ***/
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	4616      	mov	r6, r2
 80007be:	460d      	mov	r5, r1
 80007c0:	4604      	mov	r4, r0
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 80007c2:	f7ff fef7 	bl	80005b4 <FlashGetSector>
 80007c6:	28ff      	cmp	r0, #255	; 0xff
 80007c8:	d018      	beq.n	80007fc <FlashWrite+0x50>
      (FlashGetSector(addr+len-1) == FLASH_INVALID_SECTOR))
 80007ca:	1928      	adds	r0, r5, r4
 80007cc:	3801      	subs	r0, #1
 80007ce:	f7ff fef1 	bl	80005b4 <FlashGetSector>
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 80007d2:	28ff      	cmp	r0, #255	; 0xff
 80007d4:	d014      	beq.n	8000800 <FlashWrite+0x54>
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <FlashWrite+0x5c>)
 80007d8:	4023      	ands	r3, r4
  if (base_addr == flashLayout[0].sector_start)
 80007da:	4a0c      	ldr	r2, [pc, #48]	; (800080c <FlashWrite+0x60>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d006      	beq.n	80007ee <FlashWrite+0x42>
  return FlashAddToBlock(&blockInfo, addr, data, len);
 80007e0:	462b      	mov	r3, r5
 80007e2:	4632      	mov	r2, r6
 80007e4:	4621      	mov	r1, r4
 80007e6:	480a      	ldr	r0, [pc, #40]	; (8000810 <FlashWrite+0x64>)
 80007e8:	f7ff ff62 	bl	80006b0 <FlashAddToBlock>
 80007ec:	e7e5      	b.n	80007ba <FlashWrite+0xe>
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 80007ee:	462b      	mov	r3, r5
 80007f0:	4632      	mov	r2, r6
 80007f2:	4621      	mov	r1, r4
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <FlashWrite+0x68>)
 80007f6:	f7ff ff5b 	bl	80006b0 <FlashAddToBlock>
 80007fa:	e7de      	b.n	80007ba <FlashWrite+0xe>
    return BLT_FALSE;
 80007fc:	2000      	movs	r0, #0
 80007fe:	e7dc      	b.n	80007ba <FlashWrite+0xe>
 8000800:	2000      	movs	r0, #0
 8000802:	e7da      	b.n	80007ba <FlashWrite+0xe>
 8000804:	081fffff 	.word	0x081fffff
 8000808:	fffffe00 	.word	0xfffffe00
 800080c:	08008000 	.word	0x08008000
 8000810:	20000068 	.word	0x20000068
 8000814:	2000026c 	.word	0x2000026c

08000818 <FlashErase>:
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8000818:	1e4a      	subs	r2, r1, #1
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <FlashErase+0x38>)
 800081c:	1a1b      	subs	r3, r3, r0
 800081e:	429a      	cmp	r2, r3
 8000820:	d901      	bls.n	8000826 <FlashErase+0xe>
    return BLT_FALSE;
 8000822:	2000      	movs	r0, #0
} /*** end of FlashErase ***/
 8000824:	4770      	bx	lr
{
 8000826:	b570      	push	{r4, r5, r6, lr}
 8000828:	460c      	mov	r4, r1
 800082a:	4605      	mov	r5, r0
  first_sector = FlashGetSector(addr);
 800082c:	f7ff fec2 	bl	80005b4 <FlashGetSector>
 8000830:	4606      	mov	r6, r0
  last_sector  = FlashGetSector(addr+len-1);
 8000832:	1960      	adds	r0, r4, r5
 8000834:	3801      	subs	r0, #1
 8000836:	f7ff febd 	bl	80005b4 <FlashGetSector>
  if ((first_sector == FLASH_INVALID_SECTOR) || (last_sector == FLASH_INVALID_SECTOR))
 800083a:	28ff      	cmp	r0, #255	; 0xff
 800083c:	bf18      	it	ne
 800083e:	2eff      	cmpne	r6, #255	; 0xff
 8000840:	d101      	bne.n	8000846 <FlashErase+0x2e>
    return BLT_FALSE;
 8000842:	2000      	movs	r0, #0
} /*** end of FlashErase ***/
 8000844:	bd70      	pop	{r4, r5, r6, pc}
  return FlashEraseSectors(first_sector, last_sector);
 8000846:	4601      	mov	r1, r0
 8000848:	4630      	mov	r0, r6
 800084a:	f7ff ff75 	bl	8000738 <FlashEraseSectors>
 800084e:	e7f9      	b.n	8000844 <FlashErase+0x2c>
 8000850:	081fffff 	.word	0x081fffff

08000854 <FlashWriteChecksum>:
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 8000854:	4b10      	ldr	r3, [pc, #64]	; (8000898 <FlashWriteChecksum+0x44>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800085c:	d01a      	beq.n	8000894 <FlashWriteChecksum+0x40>
{
 800085e:	b500      	push	{lr}
 8000860:	b083      	sub	sp, #12
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 8000862:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <FlashWriteChecksum+0x44>)
 8000864:	6853      	ldr	r3, [r2, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 8000866:	6891      	ldr	r1, [r2, #8]
 8000868:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 800086a:	68d1      	ldr	r1, [r2, #12]
 800086c:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 800086e:	6911      	ldr	r1, [r2, #16]
 8000870:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 8000872:	6951      	ldr	r1, [r2, #20]
 8000874:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 8000876:	6991      	ldr	r1, [r2, #24]
 8000878:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 800087a:	69d2      	ldr	r2, [r2, #28]
 800087c:	4413      	add	r3, r2
  signature_checksum += 1; /* two's complement */
 800087e:	425b      	negs	r3, r3
 8000880:	aa02      	add	r2, sp, #8
 8000882:	f842 3d04 	str.w	r3, [r2, #-4]!
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 8000886:	2104      	movs	r1, #4
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <FlashWriteChecksum+0x48>)
 800088a:	f7ff ff8f 	bl	80007ac <FlashWrite>
} /*** end of FlashWriteChecksum ***/
 800088e:	b003      	add	sp, #12
 8000890:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLT_TRUE;
 8000894:	2001      	movs	r0, #1
} /*** end of FlashWriteChecksum ***/
 8000896:	4770      	bx	lr
 8000898:	2000026c 	.word	0x2000026c
 800089c:	080081f8 	.word	0x080081f8

080008a0 <FlashVerifyChecksum>:
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <FlashVerifyChecksum+0x38>)
 80008a2:	681b      	ldr	r3, [r3, #0]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 80008a4:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <FlashVerifyChecksum+0x3c>)
 80008a6:	6812      	ldr	r2, [r2, #0]
 80008a8:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <FlashVerifyChecksum+0x40>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 80008b0:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <FlashVerifyChecksum+0x44>)
 80008b2:	6812      	ldr	r2, [r2, #0]
 80008b4:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 80008b6:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <FlashVerifyChecksum+0x48>)
 80008b8:	6812      	ldr	r2, [r2, #0]
 80008ba:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <FlashVerifyChecksum+0x4c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <FlashVerifyChecksum+0x50>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 80008c8:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <FlashVerifyChecksum+0x54>)
 80008ca:	6812      	ldr	r2, [r2, #0]
  if (signature_checksum == 0)
 80008cc:	42da      	cmn	r2, r3
 80008ce:	d001      	beq.n	80008d4 <FlashVerifyChecksum+0x34>
  return BLT_FALSE;
 80008d0:	2000      	movs	r0, #0
} /*** end of FlashVerifyChecksum ***/
 80008d2:	4770      	bx	lr
    return BLT_TRUE;
 80008d4:	2001      	movs	r0, #1
 80008d6:	4770      	bx	lr
 80008d8:	08008000 	.word	0x08008000
 80008dc:	08008004 	.word	0x08008004
 80008e0:	08008008 	.word	0x08008008
 80008e4:	0800800c 	.word	0x0800800c
 80008e8:	08008010 	.word	0x08008010
 80008ec:	08008014 	.word	0x08008014
 80008f0:	08008018 	.word	0x08008018
 80008f4:	080081f8 	.word	0x080081f8

080008f8 <FlashDone>:
{
 80008f8:	b508      	push	{r3, lr}
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <FlashDone+0x38>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000902:	d10b      	bne.n	800091c <FlashDone+0x24>
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <FlashDone+0x3c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800090c:	d00d      	beq.n	800092a <FlashDone+0x32>
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 800090e:	4809      	ldr	r0, [pc, #36]	; (8000934 <FlashDone+0x3c>)
 8000910:	f7ff fe85 	bl	800061e <FlashWriteBlock>
 8000914:	4603      	mov	r3, r0
 8000916:	b148      	cbz	r0, 800092c <FlashDone+0x34>
  return BLT_TRUE;
 8000918:	2301      	movs	r3, #1
 800091a:	e007      	b.n	800092c <FlashDone+0x34>
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <FlashDone+0x38>)
 800091e:	f7ff fe7e 	bl	800061e <FlashWriteBlock>
 8000922:	4603      	mov	r3, r0
 8000924:	2800      	cmp	r0, #0
 8000926:	d1ed      	bne.n	8000904 <FlashDone+0xc>
 8000928:	e000      	b.n	800092c <FlashDone+0x34>
  return BLT_TRUE;
 800092a:	2301      	movs	r3, #1
} /*** end of FlashDone ***/
 800092c:	4618      	mov	r0, r3
 800092e:	bd08      	pop	{r3, pc}
 8000930:	2000026c 	.word	0x2000026c
 8000934:	20000068 	.word	0x20000068

08000938 <FlashGetUserProgBaseAddress>:
} /*** end of FlashGetUserProgBaseAddress ***/
 8000938:	4800      	ldr	r0, [pc, #0]	; (800093c <FlashGetUserProgBaseAddress+0x4>)
 800093a:	4770      	bx	lr
 800093c:	08008000 	.word	0x08008000

08000940 <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 8000940:	b508      	push	{r3, lr}
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 8000942:	f7ff ff27 	bl	8000794 <FlashInit>
} /*** end of NvmInit ***/
 8000946:	bd08      	pop	{r3, pc}

08000948 <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8000948:	b508      	push	{r3, lr}
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 800094a:	f7ff ff2f 	bl	80007ac <FlashWrite>
} /*** end of NvmWrite ***/
 800094e:	bd08      	pop	{r3, pc}

08000950 <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 8000950:	b508      	push	{r3, lr}
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 8000952:	f7ff ff61 	bl	8000818 <FlashErase>
} /*** end of NvmErase ***/
 8000956:	bd08      	pop	{r3, pc}

08000958 <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 8000958:	b508      	push	{r3, lr}
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 800095a:	f7ff ffa1 	bl	80008a0 <FlashVerifyChecksum>
#endif
} /*** end of NvmVerifyChecksum ***/
 800095e:	bd08      	pop	{r3, pc}

08000960 <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 8000960:	b508      	push	{r3, lr}
  return FlashGetUserProgBaseAddress();
 8000962:	f7ff ffe9 	bl	8000938 <FlashGetUserProgBaseAddress>
} /*** end of NvmGetUserProgBaseAddress ***/
 8000966:	bd08      	pop	{r3, pc}

08000968 <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 8000968:	b508      	push	{r3, lr}
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 800096a:	f7ff ff73 	bl	8000854 <FlashWriteChecksum>
 800096e:	4603      	mov	r3, r0
 8000970:	b908      	cbnz	r0, 8000976 <NvmDone+0xe>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
} /*** end of NvmDone ***/
 8000972:	4618      	mov	r0, r3
 8000974:	bd08      	pop	{r3, pc}
  return FlashDone();
 8000976:	f7ff ffbf 	bl	80008f8 <FlashDone>
 800097a:	4603      	mov	r3, r0
 800097c:	e7f9      	b.n	8000972 <NvmDone+0xa>
	...

08000980 <Rs232ReceiveByte>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <Rs232ReceiveByte+0x18>)
 8000982:	69db      	ldr	r3, [r3, #28]
** \return    BLT_TRUE if a byte was received, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool Rs232ReceiveByte(blt_int8u *data)
{
  if (LL_USART_IsActiveFlag_RXNE(USART_CHANNEL) != 0)
 8000984:	f013 0f20 	tst.w	r3, #32
 8000988:	d004      	beq.n	8000994 <Rs232ReceiveByte+0x14>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 800098a:	4b03      	ldr	r3, [pc, #12]	; (8000998 <Rs232ReceiveByte+0x18>)
 800098c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  {
    /* retrieve and store the newly received byte */
    *data = LL_USART_ReceiveData8(USART_CHANNEL);
 800098e:	7003      	strb	r3, [r0, #0]
    /* all done */
    return BLT_TRUE;
 8000990:	2001      	movs	r0, #1
 8000992:	4770      	bx	lr
  }
  /* still here to no new byte received */
  return BLT_FALSE;
 8000994:	2000      	movs	r0, #0
} /*** end of Rs232ReceiveByte ***/
 8000996:	4770      	bx	lr
 8000998:	40004800 	.word	0x40004800

0800099c <Rs232TransmitByte>:
** \param     data Value of byte that is to be transmitted.
** \return    none.
**
****************************************************************************************/
static void Rs232TransmitByte(blt_int8u data)
{
 800099c:	b510      	push	{r4, lr}
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <Rs232TransmitByte+0x28>)
 80009a0:	6298      	str	r0, [r3, #40]	; 0x28
  blt_int32u timeout;

  /* write byte to transmit holding register */
  LL_USART_TransmitData8(USART_CHANNEL, data);
  /* set timeout time to wait for transmit completion. */
  timeout = TimerGet() + RS232_BYTE_TX_TIMEOUT_MS;
 80009a2:	f000 f8c5 	bl	8000b30 <TimerGet>
 80009a6:	f100 040a 	add.w	r4, r0, #10
  return (READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE));
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <Rs232TransmitByte+0x28>)
 80009ac:	69db      	ldr	r3, [r3, #28]
  /* wait for tx holding register to be empty */
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 80009ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 80009b2:	d105      	bne.n	80009c0 <Rs232TransmitByte+0x24>
  {
    /* keep the watchdog happy */
    CopService();
 80009b4:	f000 f9b0 	bl	8000d18 <CopService>
    /* break loop upon timeout. this would indicate a hardware failure. */
    if (TimerGet() > timeout)
 80009b8:	f000 f8ba 	bl	8000b30 <TimerGet>
 80009bc:	42a0      	cmp	r0, r4
 80009be:	d9f4      	bls.n	80009aa <Rs232TransmitByte+0xe>
    {
      break;
    }
  }
} /*** end of Rs232TransmitByte ***/
 80009c0:	bd10      	pop	{r4, pc}
 80009c2:	bf00      	nop
 80009c4:	40004800 	.word	0x40004800

080009c8 <Rs232Init>:
{
 80009c8:	b510      	push	{r4, lr}
 80009ca:	b088      	sub	sp, #32
  USART_InitStruct.BaudRate = BOOT_COM_RS232_BAUDRATE;
 80009cc:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80009d0:	9301      	str	r3, [sp, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80009d2:	2300      	movs	r3, #0
 80009d4:	9302      	str	r3, [sp, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80009d6:	9303      	str	r3, [sp, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80009d8:	9304      	str	r3, [sp, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80009da:	220c      	movs	r2, #12
 80009dc:	9205      	str	r2, [sp, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80009de:	9306      	str	r3, [sp, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80009e0:	9307      	str	r3, [sp, #28]
  LL_USART_Init(USART_CHANNEL, &USART_InitStruct);
 80009e2:	4c05      	ldr	r4, [pc, #20]	; (80009f8 <Rs232Init+0x30>)
 80009e4:	a901      	add	r1, sp, #4
 80009e6:	4620      	mov	r0, r4
 80009e8:	f004 f89e 	bl	8004b28 <LL_USART_Init>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80009ec:	6823      	ldr	r3, [r4, #0]
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	6023      	str	r3, [r4, #0]
} /*** end of Rs232Init ***/
 80009f4:	b008      	add	sp, #32
 80009f6:	bd10      	pop	{r4, pc}
 80009f8:	40004800 	.word	0x40004800

080009fc <Rs232TransmitPacket>:
{
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	4606      	mov	r6, r0
 8000a00:	460d      	mov	r5, r1
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 8000a02:	2940      	cmp	r1, #64	; 0x40
 8000a04:	d804      	bhi.n	8000a10 <Rs232TransmitPacket+0x14>
  Rs232TransmitByte(len);
 8000a06:	4628      	mov	r0, r5
 8000a08:	f7ff ffc8 	bl	800099c <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 8000a0c:	2400      	movs	r4, #0
 8000a0e:	e00b      	b.n	8000a28 <Rs232TransmitPacket+0x2c>
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 8000a10:	2181      	movs	r1, #129	; 0x81
 8000a12:	4807      	ldr	r0, [pc, #28]	; (8000a30 <Rs232TransmitPacket+0x34>)
 8000a14:	f000 f899 	bl	8000b4a <AssertFailure>
 8000a18:	e7f5      	b.n	8000a06 <Rs232TransmitPacket+0xa>
    CopService();
 8000a1a:	f000 f97d 	bl	8000d18 <CopService>
    Rs232TransmitByte(data[data_index]);
 8000a1e:	5d30      	ldrb	r0, [r6, r4]
 8000a20:	f7ff ffbc 	bl	800099c <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 8000a24:	3401      	adds	r4, #1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	b2ab      	uxth	r3, r5
 8000a2a:	42a3      	cmp	r3, r4
 8000a2c:	d8f5      	bhi.n	8000a1a <Rs232TransmitPacket+0x1e>
} /*** end of Rs232TransmitPacket ***/
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	08004fec 	.word	0x08004fec

08000a34 <Rs232ReceivePacket>:
{
 8000a34:	b570      	push	{r4, r5, r6, lr}
  if (xcpCtoRxInProgress == BLT_FALSE)
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <Rs232ReceivePacket+0x98>)
 8000a38:	781c      	ldrb	r4, [r3, #0]
 8000a3a:	b9bc      	cbnz	r4, 8000a6c <Rs232ReceivePacket+0x38>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == BLT_TRUE)
 8000a3c:	4824      	ldr	r0, [pc, #144]	; (8000ad0 <Rs232ReceivePacket+0x9c>)
 8000a3e:	f7ff ff9f 	bl	8000980 <Rs232ReceiveByte>
 8000a42:	2801      	cmp	r0, #1
 8000a44:	d001      	beq.n	8000a4a <Rs232ReceivePacket+0x16>
} /*** end of Rs232ReceivePacket ***/
 8000a46:	4620      	mov	r0, r4
 8000a48:	bd70      	pop	{r4, r5, r6, pc}
      if ( (xcpCtoReqPacket[0] > 0) &&
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <Rs232ReceivePacket+0x9c>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b3f      	cmp	r3, #63	; 0x3f
 8000a54:	d8f7      	bhi.n	8000a46 <Rs232ReceivePacket+0x12>
        xcpCtoRxStartTime = TimerGet();
 8000a56:	f000 f86b 	bl	8000b30 <TimerGet>
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <Rs232ReceivePacket+0xa0>)
 8000a5c:	6018      	str	r0, [r3, #0]
        xcpCtoRxLength = 0;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <Rs232ReceivePacket+0xa4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
        xcpCtoRxInProgress = BLT_TRUE;
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <Rs232ReceivePacket+0x98>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	701a      	strb	r2, [r3, #0]
 8000a6a:	e7ec      	b.n	8000a46 <Rs232ReceivePacket+0x12>
 8000a6c:	4606      	mov	r6, r0
 8000a6e:	460d      	mov	r5, r1
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <Rs232ReceivePacket+0xa4>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	4816      	ldr	r0, [pc, #88]	; (8000ad0 <Rs232ReceivePacket+0x9c>)
 8000a78:	4418      	add	r0, r3
 8000a7a:	f7ff ff81 	bl	8000980 <Rs232ReceiveByte>
 8000a7e:	4604      	mov	r4, r0
 8000a80:	2801      	cmp	r0, #1
 8000a82:	d115      	bne.n	8000ab0 <Rs232ReceivePacket+0x7c>
      xcpCtoRxLength++;
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <Rs232ReceivePacket+0xa4>)
 8000a86:	781a      	ldrb	r2, [r3, #0]
 8000a88:	3201      	adds	r2, #1
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	701a      	strb	r2, [r3, #0]
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <Rs232ReceivePacket+0x9c>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d001      	beq.n	8000a9a <Rs232ReceivePacket+0x66>
  return BLT_FALSE;
 8000a96:	2400      	movs	r4, #0
 8000a98:	e7d5      	b.n	8000a46 <Rs232ReceivePacket+0x12>
        CpuMemCopy((blt_int32u)data, (blt_int32u)&xcpCtoReqPacket[1], xcpCtoRxLength);
 8000a9a:	4910      	ldr	r1, [pc, #64]	; (8000adc <Rs232ReceivePacket+0xa8>)
 8000a9c:	4630      	mov	r0, r6
 8000a9e:	f7ff fd79 	bl	8000594 <CpuMemCopy>
        xcpCtoRxInProgress = BLT_FALSE;
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <Rs232ReceivePacket+0x98>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
        *len = xcpCtoRxLength;
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <Rs232ReceivePacket+0xa4>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	702b      	strb	r3, [r5, #0]
        return BLT_TRUE;
 8000aae:	e7ca      	b.n	8000a46 <Rs232ReceivePacket+0x12>
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 8000ab0:	f000 f83e 	bl	8000b30 <TimerGet>
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <Rs232ReceivePacket+0xa0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	3364      	adds	r3, #100	; 0x64
 8000aba:	4298      	cmp	r0, r3
 8000abc:	d903      	bls.n	8000ac6 <Rs232ReceivePacket+0x92>
        xcpCtoRxInProgress = BLT_FALSE;
 8000abe:	2400      	movs	r4, #0
 8000ac0:	4b02      	ldr	r3, [pc, #8]	; (8000acc <Rs232ReceivePacket+0x98>)
 8000ac2:	701c      	strb	r4, [r3, #0]
 8000ac4:	e7bf      	b.n	8000a46 <Rs232ReceivePacket+0x12>
  return BLT_FALSE;
 8000ac6:	2400      	movs	r4, #0
 8000ac8:	e7bd      	b.n	8000a46 <Rs232ReceivePacket+0x12>
 8000aca:	bf00      	nop
 8000acc:	200004b1 	.word	0x200004b1
 8000ad0:	20000470 	.word	0x20000470
 8000ad4:	200004b4 	.word	0x200004b4
 8000ad8:	200004b2 	.word	0x200004b2
 8000adc:	20000471 	.word	0x20000471

08000ae0 <TimerReset>:
**
****************************************************************************************/
void TimerReset(void)
{
  /* Set the systick's status and control register back into the default reset value. */
  SysTick->CTRL = 0;
 8000ae0:	4b01      	ldr	r3, [pc, #4]	; (8000ae8 <TimerReset+0x8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
} /* end of TimerReset */
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e010 	.word	0xe000e010

08000aec <TimerInit>:
{
 8000aec:	b508      	push	{r3, lr}
  TimerReset();
 8000aee:	f7ff fff7 	bl	8000ae0 <TimerReset>
  SysTick->LOAD = BOOT_CPU_SYSTEM_SPEED_KHZ - 1;
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <TimerInit+0x1c>)
 8000af4:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <TimerInit+0x20>)
 8000af6:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8000afc:	2105      	movs	r1, #5
 8000afe:	6019      	str	r1, [r3, #0]
  millisecond_counter = 0;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <TimerInit+0x24>)
 8000b02:	601a      	str	r2, [r3, #0]
} /*** end of TimerInit ***/
 8000b04:	bd08      	pop	{r3, pc}
 8000b06:	bf00      	nop
 8000b08:	e000e010 	.word	0xe000e010
 8000b0c:	00034bbf 	.word	0x00034bbf
 8000b10:	200004b8 	.word	0x200004b8

08000b14 <TimerUpdate>:
**
****************************************************************************************/
void TimerUpdate(void)
{
  /* Check if the millisecond event occurred. */
  if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <TimerUpdate+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000b1c:	d003      	beq.n	8000b26 <TimerUpdate+0x12>
  {
    /* Increment the millisecond counter. */
    millisecond_counter++;
 8000b1e:	4a03      	ldr	r2, [pc, #12]	; (8000b2c <TimerUpdate+0x18>)
 8000b20:	6813      	ldr	r3, [r2, #0]
 8000b22:	3301      	adds	r3, #1
 8000b24:	6013      	str	r3, [r2, #0]
  }
} /*** end of TimerUpdate ***/
 8000b26:	4770      	bx	lr
 8000b28:	e000e010 	.word	0xe000e010
 8000b2c:	200004b8 	.word	0x200004b8

08000b30 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 8000b30:	b508      	push	{r3, lr}
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 8000b32:	f7ff ffef 	bl	8000b14 <TimerUpdate>
  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
} /*** end of TimerGet ***/
 8000b36:	4b01      	ldr	r3, [pc, #4]	; (8000b3c <TimerGet+0xc>)
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	bd08      	pop	{r3, pc}
 8000b3c:	200004b8 	.word	0x200004b8

08000b40 <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 8000b40:	b508      	push	{r3, lr}
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 8000b42:	f7ff fff5 	bl	8000b30 <TimerGet>
} /*** end of HAL_GetTick ***/
 8000b46:	bd08      	pop	{r3, pc}

08000b48 <SysTick_Handler>:
**
****************************************************************************************/
void SysTick_Handler(void)
{
  /* Nothing to do here. */
} /*** end of SysTick_Handler ***/
 8000b48:	4770      	bx	lr

08000b4a <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 8000b4a:	b508      	push	{r3, lr}
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 8000b4c:	f000 f8e4 	bl	8000d18 <CopService>
 8000b50:	e7fc      	b.n	8000b4c <AssertFailure+0x2>
	...

08000b54 <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 8000b54:	b508      	push	{r3, lr}
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 8000b56:	f000 f8c7 	bl	8000ce8 <ComIsConnected>
 8000b5a:	2801      	cmp	r0, #1
 8000b5c:	d003      	beq.n	8000b66 <BackDoorCheck+0x12>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <BackDoorCheck+0x38>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d000      	beq.n	8000b68 <BackDoorCheck+0x14>
        CpuStartUserProgram();
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 8000b66:	bd08      	pop	{r3, pc}
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 8000b68:	f7ff ffe2 	bl	8000b30 <TimerGet>
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <BackDoorCheck+0x3c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <BackDoorCheck+0x40>)
 8000b72:	6812      	ldr	r2, [r2, #0]
 8000b74:	4413      	add	r3, r2
 8000b76:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000b7a:	4298      	cmp	r0, r3
 8000b7c:	d3f3      	bcc.n	8000b66 <BackDoorCheck+0x12>
      backdoorOpen = BLT_FALSE;
 8000b7e:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <BackDoorCheck+0x38>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
        CpuStartUserProgram();
 8000b84:	f7ff fce0 	bl	8000548 <CpuStartUserProgram>
 8000b88:	e7ed      	b.n	8000b66 <BackDoorCheck+0x12>
 8000b8a:	bf00      	nop
 8000b8c:	200004c0 	.word	0x200004c0
 8000b90:	200004bc 	.word	0x200004bc
 8000b94:	200004c4 	.word	0x200004c4

08000b98 <BackDoorSetExtension>:
**
****************************************************************************************/
void BackDoorSetExtension(blt_int32u extension_ms)
{
  /* update the extension time */
  backdoorExtensionTime = extension_ms;
 8000b98:	4b01      	ldr	r3, [pc, #4]	; (8000ba0 <BackDoorSetExtension+0x8>)
 8000b9a:	6018      	str	r0, [r3, #0]
} /*** end of BackDoorSetExtension ***/
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	200004bc 	.word	0x200004bc

08000ba4 <BackDoorGetExtension>:
****************************************************************************************/
blt_int32u BackDoorGetExtension(void)
{
  /* read out and reutrn the currently configured extension time */
  return backdoorExtensionTime;
} /*** end of BackDoorGetExtension ***/
 8000ba4:	4b01      	ldr	r3, [pc, #4]	; (8000bac <BackDoorGetExtension+0x8>)
 8000ba6:	6818      	ldr	r0, [r3, #0]
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	200004bc 	.word	0x200004bc

08000bb0 <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 8000bb0:	b508      	push	{r3, lr}
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <BackDoorRestartTimer+0x18>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d000      	beq.n	8000bbc <BackDoorRestartTimer+0xc>
  {
    backdoorOpenTime = TimerGet();
  }
} /*** end of BackDoorRestartTimer ***/
 8000bba:	bd08      	pop	{r3, pc}
    backdoorOpenTime = TimerGet();
 8000bbc:	f7ff ffb8 	bl	8000b30 <TimerGet>
 8000bc0:	4b02      	ldr	r3, [pc, #8]	; (8000bcc <BackDoorRestartTimer+0x1c>)
 8000bc2:	6018      	str	r0, [r3, #0]
} /*** end of BackDoorRestartTimer ***/
 8000bc4:	e7f9      	b.n	8000bba <BackDoorRestartTimer+0xa>
 8000bc6:	bf00      	nop
 8000bc8:	200004c0 	.word	0x200004c0
 8000bcc:	200004c4 	.word	0x200004c4

08000bd0 <BackDoorInit>:
{
 8000bd0:	b508      	push	{r3, lr}
  backdoorOpen = BLT_TRUE;
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <BackDoorInit+0x14>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 8000bd8:	f7ff ffea 	bl	8000bb0 <BackDoorRestartTimer>
  BackDoorCheck();
 8000bdc:	f7ff ffba 	bl	8000b54 <BackDoorCheck>
} /*** end of BackDoorInit ***/
 8000be0:	bd08      	pop	{r3, pc}
 8000be2:	bf00      	nop
 8000be4:	200004c0 	.word	0x200004c0

08000be8 <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 8000be8:	b508      	push	{r3, lr}
  /* initialize the CPU */
  CpuInit();
 8000bea:	f7ff fca9 	bl	8000540 <CpuInit>
  /* initialize the watchdog */
  CopInit();
 8000bee:	f000 f88f 	bl	8000d10 <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 8000bf2:	f7ff ff7b 	bl	8000aec <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 8000bf6:	f7ff fea3 	bl	8000940 <NvmInit>
  /* initialize the file system module */
  FileInit();
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 8000bfa:	f000 f80d 	bl	8000c18 <ComInit>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 8000bfe:	f7ff ffe7 	bl	8000bd0 <BackDoorInit>
} /*** end of BootInit ***/
 8000c02:	bd08      	pop	{r3, pc}

08000c04 <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 8000c04:	b508      	push	{r3, lr}
  /* service the watchdog */
  CopService();
 8000c06:	f000 f887 	bl	8000d18 <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 8000c0a:	f7ff ff83 	bl	8000b14 <TimerUpdate>
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 8000c0e:	f000 f80f 	bl	8000c30 <ComTask>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
 8000c12:	f7ff ff9f 	bl	8000b54 <BackDoorCheck>
} /*** end of BootTask ***/
 8000c16:	bd08      	pop	{r3, pc}

08000c18 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 8000c18:	b508      	push	{r3, lr}
  /* initialize the XCP communication protocol */
  XcpInit();
 8000c1a:	f000 fb77 	bl	800130c <XcpInit>
  /* set it as active */
  comActiveInterface = COM_IF_CAN;
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* initialize the RS232 interface */
  Rs232Init();
 8000c1e:	f7ff fed3 	bl	80009c8 <Rs232Init>
  /* set it as active */
  comActiveInterface = COM_IF_RS232;
 8000c22:	4b02      	ldr	r3, [pc, #8]	; (8000c2c <ComInit+0x14>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
  NetInit();
  /* set it as active */
  comActiveInterface = COM_IF_NET;
  #endif
#endif
} /*** end of ComInit ***/
 8000c28:	bd08      	pop	{r3, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000040 	.word	0x20000040

08000c30 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 8000c30:	b500      	push	{lr}
 8000c32:	b083      	sub	sp, #12
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  if (Rs232ReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 8000c34:	f10d 0107 	add.w	r1, sp, #7
 8000c38:	4810      	ldr	r0, [pc, #64]	; (8000c7c <ComTask+0x4c>)
 8000c3a:	f7ff fefb 	bl	8000a34 <Rs232ReceivePacket>
 8000c3e:	2801      	cmp	r0, #1
 8000c40:	d009      	beq.n	8000c56 <ComTask+0x26>
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_NET_ENABLE > 0)
  if (NetReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 8000c42:	f10d 0107 	add.w	r1, sp, #7
 8000c46:	480d      	ldr	r0, [pc, #52]	; (8000c7c <ComTask+0x4c>)
 8000c48:	f000 f98e 	bl	8000f68 <NetReceivePacket>
 8000c4c:	2801      	cmp	r0, #1
 8000c4e:	d00b      	beq.n	8000c68 <ComTask+0x38>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 8000c50:	b003      	add	sp, #12
 8000c52:	f85d fb04 	ldr.w	pc, [sp], #4
    comActiveInterface = COM_IF_RS232;
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <ComTask+0x50>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 8000c5c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000c60:	4806      	ldr	r0, [pc, #24]	; (8000c7c <ComTask+0x4c>)
 8000c62:	f000 fb73 	bl	800134c <XcpPacketReceived>
 8000c66:	e7ec      	b.n	8000c42 <ComTask+0x12>
    comActiveInterface = COM_IF_NET;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <ComTask+0x50>)
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	701a      	strb	r2, [r3, #0]
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 8000c6e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000c72:	4802      	ldr	r0, [pc, #8]	; (8000c7c <ComTask+0x4c>)
 8000c74:	f000 fb6a 	bl	800134c <XcpPacketReceived>
} /*** end of ComTask ***/
 8000c78:	e7ea      	b.n	8000c50 <ComTask+0x20>
 8000c7a:	bf00      	nop
 8000c7c:	200004c8 	.word	0x200004c8
 8000c80:	20000040 	.word	0x20000040

08000c84 <ComFree>:
{
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
#endif
} /*** end of ComFree ***/
 8000c84:	4770      	bx	lr
	...

08000c88 <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	460d      	mov	r5, r1
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* transmit the packet. note that len is limited to 255 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_RS232)
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <ComTransmitPacket+0x2c>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b133      	cbz	r3, 8000ca2 <ComTransmitPacket+0x1a>
  {
    UsbTransmitPacket(data, len);
  }
#endif
#if (BOOT_COM_NET_ENABLE > 0)
  if (comActiveInterface == COM_IF_NET)
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <ComTransmitPacket+0x2c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b03      	cmp	r3, #3
 8000c9a:	d006      	beq.n	8000caa <ComTransmitPacket+0x22>
    NetTransmitPacket(data, len);
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 8000c9c:	f000 fb4e 	bl	800133c <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 8000ca0:	bd38      	pop	{r3, r4, r5, pc}
    Rs232TransmitPacket(data, (blt_int8u)len);
 8000ca2:	b2c9      	uxtb	r1, r1
 8000ca4:	f7ff feaa 	bl	80009fc <Rs232TransmitPacket>
 8000ca8:	e7f4      	b.n	8000c94 <ComTransmitPacket+0xc>
    NetTransmitPacket(data, len);
 8000caa:	b2e9      	uxtb	r1, r5
 8000cac:	4620      	mov	r0, r4
 8000cae:	f000 f937 	bl	8000f20 <NetTransmitPacket>
 8000cb2:	e7f3      	b.n	8000c9c <ComTransmitPacket+0x14>
 8000cb4:	20000040 	.word	0x20000040

08000cb8 <ComGetActiveInterfaceMaxRxLen>:
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <ComGetActiveInterfaceMaxRxLen+0x14>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d901      	bls.n	8000cc6 <ComGetActiveInterfaceMaxRxLen+0xe>
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_RX_MAX_DATA;
 8000cc2:	2040      	movs	r0, #64	; 0x40
 8000cc4:	4770      	bx	lr
      break;

    case COM_IF_CAN:
      result = BOOT_COM_CAN_RX_MAX_DATA;
 8000cc6:	2000      	movs	r0, #0
      result = BOOT_COM_RX_MAX_DATA;
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000040 	.word	0x20000040

08000cd0 <ComGetActiveInterfaceMaxTxLen>:
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <ComGetActiveInterfaceMaxTxLen+0x14>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d901      	bls.n	8000cde <ComGetActiveInterfaceMaxTxLen+0xe>
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_TX_MAX_DATA;
 8000cda:	2040      	movs	r0, #64	; 0x40
 8000cdc:	4770      	bx	lr
      break;

    case COM_IF_CAN:
      result = BOOT_COM_CAN_TX_MAX_DATA;
 8000cde:	2000      	movs	r0, #0
      result = BOOT_COM_TX_MAX_DATA;
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000040 	.word	0x20000040

08000ce8 <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 8000ce8:	b508      	push	{r3, lr}
  blt_bool result = BLT_FALSE;

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 8000cea:	f000 fb1d 	bl	8001328 <XcpIsConnected>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	b100      	cbz	r0, 8000cf4 <ComIsConnected+0xc>
  {
    result = BLT_TRUE;
 8000cf2:	2301      	movs	r3, #1
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
} /*** end of ComIsConnected ***/
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	bd08      	pop	{r3, pc}

08000cf8 <ComDeferredInit>:
**            a request.
** \return    none
**
****************************************************************************************/
void ComDeferredInit(void)
{
 8000cf8:	b508      	push	{r3, lr}
#if (BOOT_COM_NET_ENABLE > 0)
  #if (BOOT_COM_NET_DEFERRED_INIT_ENABLE == 1)
  /* perform deferred initialization the TCP/IP interface */
  NetDeferredInit();
 8000cfa:	f000 f901 	bl	8000f00 <NetDeferredInit>
  /* set it as active */
  comActiveInterface = COM_IF_NET;
 8000cfe:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <ComDeferredInit+0x14>)
 8000d00:	2203      	movs	r2, #3
 8000d02:	701a      	strb	r2, [r3, #0]
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
  /* the default internal timed backdoor mechanism should start its timer after the
   * communication interfaces are initialized. since a deferred initialization was now
   * performed, the backdoor timer should be restarted.
   */
  BackDoorRestartTimer();
 8000d04:	f7ff ff54 	bl	8000bb0 <BackDoorRestartTimer>
#endif
} /*** end of ComDeferredInit ***/
 8000d08:	bd08      	pop	{r3, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000040 	.word	0x20000040

08000d10 <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 8000d10:	b508      	push	{r3, lr}
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
 8000d12:	f001 feef 	bl	8002af4 <CopInitHook>
#endif
} /*** end of CopInit ***/
 8000d16:	bd08      	pop	{r3, pc}

08000d18 <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 8000d18:	b508      	push	{r3, lr}
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
 8000d1a:	f001 fef0 	bl	8002afe <CopServiceHook>
#endif
} /*** end of CopService ***/
 8000d1e:	bd08      	pop	{r3, pc}

08000d20 <NetServerTask>:
** \brief     Runs the TCP/IP server task.
** \return    none.
**
****************************************************************************************/
static void NetServerTask(void)
{
 8000d20:	b510      	push	{r4, lr}
  blt_int32u connection;
  blt_int32u packetLen;

  /* check for an RX packet and read it. */
  packetLen = netdev_read();
 8000d22:	f004 f86b 	bl	8004dfc <netdev_read>
  if (packetLen > 0)
 8000d26:	b9b8      	cbnz	r0, 8000d58 <NetServerTask+0x38>
      }
    }
  }

  /* process TCP/IP Periodic Timer here. */
  if (TimerGet() >= periodicTimerTimeOut)
 8000d28:	f7ff ff02 	bl	8000b30 <TimerGet>
 8000d2c:	4b46      	ldr	r3, [pc, #280]	; (8000e48 <NetServerTask+0x128>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4298      	cmp	r0, r3
 8000d32:	d309      	bcc.n	8000d48 <NetServerTask+0x28>
  {
    periodicTimerTimeOut += NET_UIP_PERIODIC_TIMER_MS;
 8000d34:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000d38:	4a43      	ldr	r2, [pc, #268]	; (8000e48 <NetServerTask+0x128>)
 8000d3a:	6013      	str	r3, [r2, #0]
    for (connection = 0; connection < UIP_CONNS; connection++)
 8000d3c:	2400      	movs	r4, #0
 8000d3e:	2c00      	cmp	r4, #0
 8000d40:	d037      	beq.n	8000db2 <NetServerTask+0x92>
        uip_len = 0;
      }
    }

#if UIP_UDP
    for (connection = 0; connection < UIP_UDP_CONNS; connection++)
 8000d42:	2400      	movs	r4, #0
 8000d44:	2c00      	cmp	r4, #0
 8000d46:	d04a      	beq.n	8000dde <NetServerTask+0xbe>
    }
#endif
  }

  /* process ARP Timer here. */
  if (TimerGet() >= ARPTimerTimeOut)
 8000d48:	f7ff fef2 	bl	8000b30 <TimerGet>
 8000d4c:	4b3f      	ldr	r3, [pc, #252]	; (8000e4c <NetServerTask+0x12c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4298      	cmp	r0, r3
 8000d52:	d259      	bcs.n	8000e08 <NetServerTask+0xe8>
    for (connection = 0; connection < UIP_UDP_CONNS; connection++)
 8000d54:	2400      	movs	r4, #0
 8000d56:	e060      	b.n	8000e1a <NetServerTask+0xfa>
    uip_len = (blt_int16u)packetLen;
 8000d58:	4a3d      	ldr	r2, [pc, #244]	; (8000e50 <NetServerTask+0x130>)
 8000d5a:	8010      	strh	r0, [r2, #0]
    if (NET_UIP_HEADER_BUF->type == htons(UIP_ETHTYPE_IP))
 8000d5c:	4b3d      	ldr	r3, [pc, #244]	; (8000e54 <NetServerTask+0x134>)
 8000d5e:	899c      	ldrh	r4, [r3, #12]
 8000d60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d64:	f000 fe86 	bl	8001a74 <htons>
 8000d68:	4284      	cmp	r4, r0
 8000d6a:	d013      	beq.n	8000d94 <NetServerTask+0x74>
    else if (NET_UIP_HEADER_BUF->type == htons(UIP_ETHTYPE_ARP))
 8000d6c:	4b39      	ldr	r3, [pc, #228]	; (8000e54 <NetServerTask+0x134>)
 8000d6e:	899c      	ldrh	r4, [r3, #12]
 8000d70:	f640 0006 	movw	r0, #2054	; 0x806
 8000d74:	f000 fe7e 	bl	8001a74 <htons>
 8000d78:	4284      	cmp	r4, r0
 8000d7a:	d1d5      	bne.n	8000d28 <NetServerTask+0x8>
      uip_arp_arpin();
 8000d7c:	f001 fd7c 	bl	8002878 <uip_arp_arpin>
      if (uip_len > 0)
 8000d80:	4b33      	ldr	r3, [pc, #204]	; (8000e50 <NetServerTask+0x130>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0cf      	beq.n	8000d28 <NetServerTask+0x8>
        netdev_send();
 8000d88:	f004 f862 	bl	8004e50 <netdev_send>
        uip_len = 0;
 8000d8c:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <NetServerTask+0x130>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	801a      	strh	r2, [r3, #0]
 8000d92:	e7c9      	b.n	8000d28 <NetServerTask+0x8>
      uip_input();
 8000d94:	2001      	movs	r0, #1
 8000d96:	f000 fea7 	bl	8001ae8 <uip_process>
      if (uip_len > 0)
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <NetServerTask+0x130>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d0c2      	beq.n	8000d28 <NetServerTask+0x8>
        uip_arp_out();
 8000da2:	f001 fdd9 	bl	8002958 <uip_arp_out>
        netdev_send();
 8000da6:	f004 f853 	bl	8004e50 <netdev_send>
        uip_len = 0;
 8000daa:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <NetServerTask+0x130>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	801a      	strh	r2, [r3, #0]
 8000db0:	e7ba      	b.n	8000d28 <NetServerTask+0x8>
      uip_periodic(connection);
 8000db2:	2368      	movs	r3, #104	; 0x68
 8000db4:	4a28      	ldr	r2, [pc, #160]	; (8000e58 <NetServerTask+0x138>)
 8000db6:	fb03 2304 	mla	r3, r3, r4, r2
 8000dba:	4a28      	ldr	r2, [pc, #160]	; (8000e5c <NetServerTask+0x13c>)
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f000 fe92 	bl	8001ae8 <uip_process>
      if (uip_len > 0)
 8000dc4:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <NetServerTask+0x130>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	b90b      	cbnz	r3, 8000dce <NetServerTask+0xae>
    for (connection = 0; connection < UIP_CONNS; connection++)
 8000dca:	3401      	adds	r4, #1
 8000dcc:	e7b7      	b.n	8000d3e <NetServerTask+0x1e>
        uip_arp_out();
 8000dce:	f001 fdc3 	bl	8002958 <uip_arp_out>
        netdev_send();
 8000dd2:	f004 f83d 	bl	8004e50 <netdev_send>
        uip_len = 0;
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <NetServerTask+0x130>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	801a      	strh	r2, [r3, #0]
 8000ddc:	e7f5      	b.n	8000dca <NetServerTask+0xaa>
      uip_udp_periodic(connection);
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <NetServerTask+0x140>)
 8000de0:	eb03 1384 	add.w	r3, r3, r4, lsl #6
 8000de4:	4a1f      	ldr	r2, [pc, #124]	; (8000e64 <NetServerTask+0x144>)
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	2005      	movs	r0, #5
 8000dea:	f000 fe7d 	bl	8001ae8 <uip_process>
      if(uip_len > 0)
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <NetServerTask+0x130>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	b90b      	cbnz	r3, 8000df8 <NetServerTask+0xd8>
    for (connection = 0; connection < UIP_UDP_CONNS; connection++)
 8000df4:	3401      	adds	r4, #1
 8000df6:	e7a5      	b.n	8000d44 <NetServerTask+0x24>
        uip_arp_out();
 8000df8:	f001 fdae 	bl	8002958 <uip_arp_out>
        netdev_send();
 8000dfc:	f004 f828 	bl	8004e50 <netdev_send>
        uip_len = 0;
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <NetServerTask+0x130>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	801a      	strh	r2, [r3, #0]
 8000e06:	e7f5      	b.n	8000df4 <NetServerTask+0xd4>
  {
    ARPTimerTimeOut += NET_UIP_ARP_TIMER_MS;
 8000e08:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e0c:	441a      	add	r2, r3
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <NetServerTask+0x12c>)
 8000e10:	601a      	str	r2, [r3, #0]
    uip_arp_timer();
 8000e12:	f001 fcfd 	bl	8002810 <uip_arp_timer>
 8000e16:	e79d      	b.n	8000d54 <NetServerTask+0x34>
  }

  /* perform polling operations here. */
  for (connection = 0; connection < UIP_CONNS; connection++)
 8000e18:	3401      	adds	r4, #1
 8000e1a:	b9a4      	cbnz	r4, 8000e46 <NetServerTask+0x126>
  {
    uip_poll_conn(&uip_conns[connection]);
 8000e1c:	2368      	movs	r3, #104	; 0x68
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <NetServerTask+0x138>)
 8000e20:	fb03 2304 	mla	r3, r3, r4, r2
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <NetServerTask+0x13c>)
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 fe5d 	bl	8001ae8 <uip_process>
    /* If the above function invocation resulted in data that
     * should be sent out on the network, the global variable
     * uip_len is set to a value > 0.
     */
    if (uip_len > 0)
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <NetServerTask+0x130>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0f0      	beq.n	8000e18 <NetServerTask+0xf8>
    {
      uip_arp_out();
 8000e36:	f001 fd8f 	bl	8002958 <uip_arp_out>
      netdev_send();
 8000e3a:	f004 f809 	bl	8004e50 <netdev_send>
      uip_len = 0;
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <NetServerTask+0x130>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	801a      	strh	r2, [r3, #0]
 8000e44:	e7e8      	b.n	8000e18 <NetServerTask+0xf8>
    }
  }

} /*** end of NetServerTask ***/
 8000e46:	bd10      	pop	{r4, pc}
 8000e48:	20000510 	.word	0x20000510
 8000e4c:	20000508 	.word	0x20000508
 8000e50:	20000624 	.word	0x20000624
 8000e54:	200006b8 	.word	0x200006b8
 8000e58:	20000640 	.word	0x20000640
 8000e5c:	2000063c 	.word	0x2000063c
 8000e60:	20000cfc 	.word	0x20000cfc
 8000e64:	20000634 	.word	0x20000634

08000e68 <NetInit>:
{
 8000e68:	b508      	push	{r3, lr}
  if (netInitializationDeferred == BLT_FALSE)
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <NetInit+0x7c>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b103      	cbz	r3, 8000e72 <NetInit+0xa>
} /*** end of NetInit ***/
 8000e70:	bd08      	pop	{r3, pc}
    netdev_init();
 8000e72:	f003 ff77 	bl	8004d64 <netdev_init>
    periodicTimerTimeOut = TimerGet() + NET_UIP_PERIODIC_TIMER_MS;
 8000e76:	f7ff fe5b 	bl	8000b30 <TimerGet>
 8000e7a:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <NetInit+0x80>)
 8000e80:	6018      	str	r0, [r3, #0]
    ARPTimerTimeOut = TimerGet() + NET_UIP_ARP_TIMER_MS;
 8000e82:	f7ff fe55 	bl	8000b30 <TimerGet>
 8000e86:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e8a:	4403      	add	r3, r0
 8000e8c:	4a17      	ldr	r2, [pc, #92]	; (8000eec <NetInit+0x84>)
 8000e8e:	6013      	str	r3, [r2, #0]
    uip_init();
 8000e90:	f000 fd98 	bl	80019c4 <uip_init>
    uip_sethostaddr(ipaddr);
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <NetInit+0x88>)
 8000e96:	f64a 02c0 	movw	r2, #43200	; 0xa8c0
 8000e9a:	801a      	strh	r2, [r3, #0]
 8000e9c:	f244 6101 	movw	r1, #17921	; 0x4601
 8000ea0:	8059      	strh	r1, [r3, #2]
    uip_setnetmask(ipaddr);
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <NetInit+0x8c>)
 8000ea4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ea8:	8019      	strh	r1, [r3, #0]
 8000eaa:	21ff      	movs	r1, #255	; 0xff
 8000eac:	8059      	strh	r1, [r3, #2]
    uip_setdraddr(ipaddr);
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <NetInit+0x90>)
 8000eb0:	801a      	strh	r2, [r3, #0]
 8000eb2:	f240 1201 	movw	r2, #257	; 0x101
 8000eb6:	805a      	strh	r2, [r3, #2]
    uip_listen(HTONS(BOOT_COM_NET_PORT));
 8000eb8:	f64e 0003 	movw	r0, #59395	; 0xe803
 8000ebc:	f000 fdc2 	bl	8001a44 <uip_listen>
    netdev_init_mac();
 8000ec0:	f003 ff88 	bl	8004dd4 <netdev_init_mac>
    if (BackDoorGetExtension() < BOOT_COM_NET_BACKDOOR_EXTENSION_MS)
 8000ec4:	f7ff fe6e 	bl	8000ba4 <BackDoorGetExtension>
 8000ec8:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000ecc:	4298      	cmp	r0, r3
 8000ece:	d903      	bls.n	8000ed8 <NetInit+0x70>
    netInitializedFlag = BLT_TRUE;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <NetInit+0x94>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
} /*** end of NetInit ***/
 8000ed6:	e7cb      	b.n	8000e70 <NetInit+0x8>
      BackDoorSetExtension(BOOT_COM_NET_BACKDOOR_EXTENSION_MS);
 8000ed8:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000edc:	f7ff fe5c 	bl	8000b98 <BackDoorSetExtension>
 8000ee0:	e7f6      	b.n	8000ed0 <NetInit+0x68>
 8000ee2:	bf00      	nop
 8000ee4:	20000041 	.word	0x20000041
 8000ee8:	20000510 	.word	0x20000510
 8000eec:	20000508 	.word	0x20000508
 8000ef0:	200006b4 	.word	0x200006b4
 8000ef4:	200006b0 	.word	0x200006b0
 8000ef8:	200006ac 	.word	0x200006ac
 8000efc:	2000050c 	.word	0x2000050c

08000f00 <NetDeferredInit>:
{
 8000f00:	b508      	push	{r3, lr}
  netInitializationDeferred = BLT_FALSE;
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <NetDeferredInit+0x18>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
  if (netInitializedFlag == BLT_FALSE)
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <NetDeferredInit+0x1c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b103      	cbz	r3, 8000f10 <NetDeferredInit+0x10>
} /*** end of NetDeferredInit ***/
 8000f0e:	bd08      	pop	{r3, pc}
    NetInit();
 8000f10:	f7ff ffaa 	bl	8000e68 <NetInit>
} /*** end of NetDeferredInit ***/
 8000f14:	e7fb      	b.n	8000f0e <NetDeferredInit+0xe>
 8000f16:	bf00      	nop
 8000f18:	20000041 	.word	0x20000041
 8000f1c:	2000050c 	.word	0x2000050c

08000f20 <NetTransmitPacket>:
  if (netInitializedFlag == BLT_TRUE)
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <NetTransmitPacket+0x40>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d000      	beq.n	8000f2a <NetTransmitPacket+0xa>
 8000f28:	4770      	bx	lr
{
 8000f2a:	b470      	push	{r4, r5, r6}
    s = &(uip_conn->appstate);
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <NetTransmitPacket+0x44>)
 8000f2e:	681c      	ldr	r4, [r3, #0]
    *(blt_int32u *)&(s->dto_data[0]) = s->dto_counter;
 8000f30:	69e6      	ldr	r6, [r4, #28]
 8000f32:	6226      	str	r6, [r4, #32]
    for (cnt=0; cnt<len; cnt++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	e006      	b.n	8000f46 <NetTransmitPacket+0x26>
      s->dto_data[cnt+4] = data[cnt];
 8000f38:	1d1a      	adds	r2, r3, #4
 8000f3a:	5cc5      	ldrb	r5, [r0, r3]
 8000f3c:	4422      	add	r2, r4
 8000f3e:	f882 5020 	strb.w	r5, [r2, #32]
    for (cnt=0; cnt<len; cnt++)
 8000f42:	3301      	adds	r3, #1
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	b28a      	uxth	r2, r1
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d8f5      	bhi.n	8000f38 <NetTransmitPacket+0x18>
    s->dto_len = len + 4;
 8000f4c:	3204      	adds	r2, #4
 8000f4e:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
    s->dto_tx_req = BLT_TRUE;
 8000f52:	2301      	movs	r3, #1
 8000f54:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    s->dto_counter++;
 8000f58:	441e      	add	r6, r3
 8000f5a:	61e6      	str	r6, [r4, #28]
} /*** end of NetTransmitPacket ***/
 8000f5c:	bc70      	pop	{r4, r5, r6}
 8000f5e:	4770      	bx	lr
 8000f60:	2000050c 	.word	0x2000050c
 8000f64:	2000063c 	.word	0x2000063c

08000f68 <NetReceivePacket>:
{
 8000f68:	b508      	push	{r3, lr}
  if (netInitializedFlag == BLT_TRUE)
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <NetReceivePacket+0x14>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d001      	beq.n	8000f76 <NetReceivePacket+0xe>
} /*** end of NetReceivePacket ***/
 8000f72:	2000      	movs	r0, #0
 8000f74:	bd08      	pop	{r3, pc}
    NetServerTask();
 8000f76:	f7ff fed3 	bl	8000d20 <NetServerTask>
 8000f7a:	e7fa      	b.n	8000f72 <NetReceivePacket+0xa>
 8000f7c:	2000050c 	.word	0x2000050c

08000f80 <NetApp>:
{
 8000f80:	b510      	push	{r4, lr}
  s = &(uip_conn->appstate);
 8000f82:	4b29      	ldr	r3, [pc, #164]	; (8001028 <NetApp+0xa8>)
 8000f84:	681c      	ldr	r4, [r3, #0]
  if (uip_connected())
 8000f86:	4b29      	ldr	r3, [pc, #164]	; (800102c <NetApp+0xac>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000f8e:	d12a      	bne.n	8000fe6 <NetApp+0x66>
  if (uip_acked())
 8000f90:	f013 0f01 	tst.w	r3, #1
 8000f94:	d002      	beq.n	8000f9c <NetApp+0x1c>
    s->dto_tx_pending = BLT_FALSE;
 8000f96:	2200      	movs	r2, #0
 8000f98:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
  if (uip_rexmit())
 8000f9c:	f013 0f04 	tst.w	r3, #4
 8000fa0:	d003      	beq.n	8000faa <NetApp+0x2a>
    if (s->dto_tx_pending == BLT_TRUE)
 8000fa2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d027      	beq.n	8000ffa <NetApp+0x7a>
  if (uip_poll())
 8000faa:	4b20      	ldr	r3, [pc, #128]	; (800102c <NetApp+0xac>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	f013 0f08 	tst.w	r3, #8
 8000fb2:	d003      	beq.n	8000fbc <NetApp+0x3c>
    if (s->dto_tx_req == BLT_TRUE)
 8000fb4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d025      	beq.n	8001008 <NetApp+0x88>
  if (uip_newdata())
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	; (800102c <NetApp+0xac>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	f013 0f02 	tst.w	r3, #2
 8000fc4:	d018      	beq.n	8000ff8 <NetApp+0x78>
    if ( ((uip_datalen() - 4) <= BOOT_COM_NET_RX_MAX_DATA) &&
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <NetApp+0xb0>)
 8000fc8:	8819      	ldrh	r1, [r3, #0]
 8000fca:	1f0b      	subs	r3, r1, #4
 8000fcc:	2b40      	cmp	r3, #64	; 0x40
 8000fce:	dc13      	bgt.n	8000ff8 <NetApp+0x78>
         (s->dto_tx_pending == BLT_FALSE) )
 8000fd0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
    if ( ((uip_datalen() - 4) <= BOOT_COM_NET_RX_MAX_DATA) &&
 8000fd4:	b983      	cbnz	r3, 8000ff8 <NetApp+0x78>
      newDataPtr = uip_appdata;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <NetApp+0xb4>)
 8000fd8:	6818      	ldr	r0, [r3, #0]
      XcpPacketReceived(&newDataPtr[4], (blt_int8u)(uip_datalen() - 4));
 8000fda:	3904      	subs	r1, #4
 8000fdc:	b2c9      	uxtb	r1, r1
 8000fde:	3004      	adds	r0, #4
 8000fe0:	f000 f9b4 	bl	800134c <XcpPacketReceived>
 8000fe4:	e008      	b.n	8000ff8 <NetApp+0x78>
    s->dto_counter = 1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	61e3      	str	r3, [r4, #28]
    s->dto_len = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    s->dto_tx_req = BLT_FALSE;
 8000ff0:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    s->dto_tx_pending = BLT_FALSE;
 8000ff4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
} /*** end of NetApp ***/
 8000ff8:	bd10      	pop	{r4, pc}
      uip_send(s->dto_data, s->dto_len);
 8000ffa:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
 8000ffe:	f104 0020 	add.w	r0, r4, #32
 8001002:	f001 fb71 	bl	80026e8 <uip_send>
 8001006:	e7d0      	b.n	8000faa <NetApp+0x2a>
      s->dto_tx_req = BLT_FALSE;
 8001008:	2300      	movs	r3, #0
 800100a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      if (s->dto_len > 0)
 800100e:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
 8001012:	2900      	cmp	r1, #0
 8001014:	d0d2      	beq.n	8000fbc <NetApp+0x3c>
        s->dto_tx_pending = BLT_TRUE;
 8001016:	2301      	movs	r3, #1
 8001018:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
        uip_send(s->dto_data, s->dto_len);
 800101c:	f104 0020 	add.w	r0, r4, #32
 8001020:	f001 fb62 	bl	80026e8 <uip_send>
 8001024:	e7ca      	b.n	8000fbc <NetApp+0x3c>
 8001026:	bf00      	nop
 8001028:	2000063c 	.word	0x2000063c
 800102c:	20000630 	.word	0x20000630
 8001030:	20000624 	.word	0x20000624
 8001034:	20000638 	.word	0x20000638

08001038 <XcpProtectResources>:
** \return    none
**
****************************************************************************************/
static void XcpProtectResources(void)
{
  xcpInfo.protection = 0;
 8001038:	4b01      	ldr	r3, [pc, #4]	; (8001040 <XcpProtectResources+0x8>)
 800103a:	2200      	movs	r2, #0
 800103c:	705a      	strb	r2, [r3, #1]

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 800103e:	4770      	bx	lr
 8001040:	20000514 	.word	0x20000514

08001044 <XcpSetCtoError>:
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <XcpSetCtoError+0x10>)
 8001046:	22fe      	movs	r2, #254	; 0xfe
 8001048:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[1] = error;
 800104a:	7118      	strb	r0, [r3, #4]
  xcpInfo.ctoLen = 2;
 800104c:	2202      	movs	r2, #2
 800104e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpSetCtoError ***/
 8001052:	4770      	bx	lr
 8001054:	20000514 	.word	0x20000514

08001058 <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 8001058:	b510      	push	{r4, lr}
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 800105a:	4c05      	ldr	r4, [pc, #20]	; (8001070 <XcpCmdDisconnect+0x18>)
 800105c:	2300      	movs	r3, #0
 800105e:	7023      	strb	r3, [r4, #0]

  /* enable resource protection */
  XcpProtectResources();
 8001060:	f7ff ffea 	bl	8001038 <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001064:	23ff      	movs	r3, #255	; 0xff
 8001066:	70e3      	strb	r3, [r4, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001068:	2301      	movs	r3, #1
 800106a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdDisconnect ***/
 800106e:	bd10      	pop	{r4, pc}
 8001070:	20000514 	.word	0x20000514

08001074 <XcpCmdGetStatus>:
{
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <XcpCmdGetStatus+0x1c>)
 8001076:	22ff      	movs	r2, #255	; 0xff
 8001078:	70da      	strb	r2, [r3, #3]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 800107a:	2200      	movs	r2, #0
 800107c:	711a      	strb	r2, [r3, #4]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 800107e:	7859      	ldrb	r1, [r3, #1]
 8001080:	7159      	strb	r1, [r3, #5]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 8001082:	719a      	strb	r2, [r3, #6]
  xcpInfo.ctoData[4] = 0;
 8001084:	71da      	strb	r2, [r3, #7]
  xcpInfo.ctoData[5] = 0;
 8001086:	721a      	strb	r2, [r3, #8]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 8001088:	2206      	movs	r2, #6
 800108a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetStatus ***/
 800108e:	4770      	bx	lr
 8001090:	20000514 	.word	0x20000514

08001094 <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 8001094:	b508      	push	{r3, lr}
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ffd4 	bl	8001044 <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 800109c:	bd08      	pop	{r3, pc}
	...

080010a0 <XcpCmdGetId>:
{
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <XcpCmdGetId+0x20>)
 80010a2:	22ff      	movs	r2, #255	; 0xff
 80010a4:	70da      	strb	r2, [r3, #3]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 80010a6:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <XcpCmdGetId+0x24>)
 80010a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 80010aa:	2200      	movs	r2, #0
 80010ac:	711a      	strb	r2, [r3, #4]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 80010ae:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[3] = 0;
 80010b0:	719a      	strb	r2, [r3, #6]

  /* store station id length (excl. null termination) for response packet */
  *(blt_int32u *)&xcpInfo.ctoData[4] = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 80010b2:	2207      	movs	r2, #7
 80010b4:	f8c3 2007 	str.w	r2, [r3, #7]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 80010b8:	2208      	movs	r2, #8
 80010ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetId ***/
 80010be:	4770      	bx	lr
 80010c0:	20000514 	.word	0x20000514
 80010c4:	08005058 	.word	0x08005058

080010c8 <XcpCmdSetMta>:
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <XcpCmdSetMta+0x14>)
 80010ca:	22ff      	movs	r2, #255	; 0xff
 80010cc:	70da      	strb	r2, [r3, #3]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = *(blt_int32u *)&data[4];
 80010ce:	6842      	ldr	r2, [r0, #4]
 80010d0:	649a      	str	r2, [r3, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = 1;
 80010d2:	2201      	movs	r2, #1
 80010d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdSetMta ***/
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000514 	.word	0x20000514

080010e0 <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 80010e0:	b508      	push	{r3, lr}
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 80010e2:	2031      	movs	r0, #49	; 0x31
 80010e4:	f7ff ffae 	bl	8001044 <XcpSetCtoError>
  return;
} /*** end of XcpCmdProgramPrepare ***/
 80010e8:	bd08      	pop	{r3, pc}
	...

080010ec <XcpCmdProgramStart>:
{
 80010ec:	b538      	push	{r3, r4, r5, lr}
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80010ee:	4c08      	ldr	r4, [pc, #32]	; (8001110 <XcpCmdProgramStart+0x24>)
 80010f0:	23ff      	movs	r3, #255	; 0xff
 80010f2:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] = 0;
 80010f4:	2500      	movs	r5, #0
 80010f6:	7125      	strb	r5, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 80010f8:	7165      	strb	r5, [r4, #5]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 80010fa:	f7ff fddd 	bl	8000cb8 <ComGetActiveInterfaceMaxRxLen>
 80010fe:	71a0      	strb	r0, [r4, #6]
  xcpInfo.ctoData[4] = 0;
 8001100:	71e5      	strb	r5, [r4, #7]
  xcpInfo.ctoData[5] = 0;
 8001102:	7225      	strb	r5, [r4, #8]
  xcpInfo.ctoData[6] = 0;
 8001104:	7265      	strb	r5, [r4, #9]
  xcpInfo.ctoLen = 7;
 8001106:	2307      	movs	r3, #7
 8001108:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdProgramStart ***/
 800110c:	bd38      	pop	{r3, r4, r5, pc}
 800110e:	bf00      	nop
 8001110:	20000514 	.word	0x20000514

08001114 <XcpCmdConnect>:
{
 8001114:	b538      	push	{r3, r4, r5, lr}
  XcpProtectResources();
 8001116:	f7ff ff8f 	bl	8001038 <XcpProtectResources>
  xcpInfo.connected = 1;
 800111a:	4c0e      	ldr	r4, [pc, #56]	; (8001154 <XcpCmdConnect+0x40>)
 800111c:	2501      	movs	r5, #1
 800111e:	7025      	strb	r5, [r4, #0]
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001120:	23ff      	movs	r3, #255	; 0xff
 8001122:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 8001124:	2310      	movs	r3, #16
 8001126:	7123      	strb	r3, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	7163      	strb	r3, [r4, #5]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 800112c:	f7ff fdc4 	bl	8000cb8 <ComGetActiveInterfaceMaxRxLen>
 8001130:	71a0      	strb	r0, [r4, #6]
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 8001132:	f7ff fdcd 	bl	8000cd0 <ComGetActiveInterfaceMaxTxLen>
 8001136:	71e0      	strb	r0, [r4, #7]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 8001138:	f7ff fdca 	bl	8000cd0 <ComGetActiveInterfaceMaxTxLen>
 800113c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001140:	7220      	strb	r0, [r4, #8]
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 8001142:	7265      	strb	r5, [r4, #9]
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 8001144:	72a5      	strb	r5, [r4, #10]
  xcpInfo.ctoLen = 8;
 8001146:	2308      	movs	r3, #8
 8001148:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  NvmInit();
 800114c:	f7ff fbf8 	bl	8000940 <NvmInit>
} /*** end of XcpCmdConnect ***/
 8001150:	bd38      	pop	{r3, r4, r5, pc}
 8001152:	bf00      	nop
 8001154:	20000514 	.word	0x20000514

08001158 <XcpCmdUpload>:
{
 8001158:	b538      	push	{r3, r4, r5, lr}
 800115a:	4605      	mov	r5, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 800115c:	7844      	ldrb	r4, [r0, #1]
 800115e:	f7ff fdab 	bl	8000cb8 <ComGetActiveInterfaceMaxRxLen>
 8001162:	3801      	subs	r0, #1
 8001164:	4284      	cmp	r4, r0
 8001166:	dc10      	bgt.n	800118a <XcpCmdUpload+0x32>
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8001168:	4c0a      	ldr	r4, [pc, #40]	; (8001194 <XcpCmdUpload+0x3c>)
 800116a:	786a      	ldrb	r2, [r5, #1]
 800116c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800116e:	1d20      	adds	r0, r4, #4
 8001170:	f7ff fa10 	bl	8000594 <CpuMemCopy>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001174:	23ff      	movs	r3, #255	; 0xff
 8001176:	70e3      	strb	r3, [r4, #3]
  xcpInfo.mta += data[1];
 8001178:	786a      	ldrb	r2, [r5, #1]
 800117a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800117c:	4413      	add	r3, r2
 800117e:	64a3      	str	r3, [r4, #72]	; 0x48
  xcpInfo.ctoLen = data[1]+1;
 8001180:	786b      	ldrb	r3, [r5, #1]
 8001182:	3301      	adds	r3, #1
 8001184:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdUpload ***/
 8001188:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 800118a:	2022      	movs	r0, #34	; 0x22
 800118c:	f7ff ff5a 	bl	8001044 <XcpSetCtoError>
    return;
 8001190:	e7fa      	b.n	8001188 <XcpCmdUpload+0x30>
 8001192:	bf00      	nop
 8001194:	20000514 	.word	0x20000514

08001198 <XcpCmdShortUpload>:
{
 8001198:	b538      	push	{r3, r4, r5, lr}
 800119a:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 800119c:	7845      	ldrb	r5, [r0, #1]
 800119e:	f7ff fd8b 	bl	8000cb8 <ComGetActiveInterfaceMaxRxLen>
 80011a2:	3801      	subs	r0, #1
 80011a4:	4285      	cmp	r5, r0
 80011a6:	dc11      	bgt.n	80011cc <XcpCmdShortUpload+0x34>
  xcpInfo.mta = *(blt_int32u *)&data[4];
 80011a8:	6861      	ldr	r1, [r4, #4]
 80011aa:	4d0a      	ldr	r5, [pc, #40]	; (80011d4 <XcpCmdShortUpload+0x3c>)
 80011ac:	64a9      	str	r1, [r5, #72]	; 0x48
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 80011ae:	7862      	ldrb	r2, [r4, #1]
 80011b0:	1d28      	adds	r0, r5, #4
 80011b2:	f7ff f9ef 	bl	8000594 <CpuMemCopy>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80011b6:	23ff      	movs	r3, #255	; 0xff
 80011b8:	70eb      	strb	r3, [r5, #3]
  xcpInfo.mta += data[1];
 80011ba:	7862      	ldrb	r2, [r4, #1]
 80011bc:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80011be:	4413      	add	r3, r2
 80011c0:	64ab      	str	r3, [r5, #72]	; 0x48
  xcpInfo.ctoLen = data[1]+1;
 80011c2:	7863      	ldrb	r3, [r4, #1]
 80011c4:	3301      	adds	r3, #1
 80011c6:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
} /*** end of XcpCmdShortUpload ***/
 80011ca:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 80011cc:	2022      	movs	r0, #34	; 0x22
 80011ce:	f7ff ff39 	bl	8001044 <XcpSetCtoError>
    return;
 80011d2:	e7fa      	b.n	80011ca <XcpCmdShortUpload+0x32>
 80011d4:	20000514 	.word	0x20000514

080011d8 <XcpComputeChecksum>:
{
 80011d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011da:	4605      	mov	r5, r0
 80011dc:	4617      	mov	r7, r2
  blt_int8u cs = 0;
 80011de:	2400      	movs	r4, #0
  while (length-- > 0)
 80011e0:	e006      	b.n	80011f0 <XcpComputeChecksum+0x18>
    cs += *((blt_int8u *)(blt_addr)address);
 80011e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80011e6:	441c      	add	r4, r3
 80011e8:	b2e4      	uxtb	r4, r4
    CopService();
 80011ea:	f7ff fd95 	bl	8000d18 <CopService>
  while (length-- > 0)
 80011ee:	4631      	mov	r1, r6
 80011f0:	1e4e      	subs	r6, r1, #1
 80011f2:	2900      	cmp	r1, #0
 80011f4:	d1f5      	bne.n	80011e2 <XcpComputeChecksum+0xa>
  *checksum = cs;
 80011f6:	603c      	str	r4, [r7, #0]
} /*** end of XcpComputeChecksum ***/
 80011f8:	2001      	movs	r0, #1
 80011fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080011fc <XcpCmdBuildCheckSum>:
{
 80011fc:	b510      	push	{r4, lr}
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80011fe:	4c08      	ldr	r4, [pc, #32]	; (8001220 <XcpCmdBuildCheckSum+0x24>)
 8001200:	23ff      	movs	r3, #255	; 0xff
 8001202:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] = XcpComputeChecksum(xcpInfo.mta, *(blt_int32u *)&data[4],
 8001204:	1de2      	adds	r2, r4, #7
 8001206:	6841      	ldr	r1, [r0, #4]
 8001208:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800120a:	f7ff ffe5 	bl	80011d8 <XcpComputeChecksum>
 800120e:	7120      	strb	r0, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	7163      	strb	r3, [r4, #5]
  xcpInfo.ctoData[3] = 0;
 8001214:	71a3      	strb	r3, [r4, #6]
  xcpInfo.ctoLen = 8;
 8001216:	2308      	movs	r3, #8
 8001218:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdBuildCheckSum ***/
 800121c:	bd10      	pop	{r4, pc}
 800121e:	bf00      	nop
 8001220:	20000514 	.word	0x20000514

08001224 <XcpCmdProgramMax>:
{
 8001224:	b538      	push	{r3, r4, r5, lr}
 8001226:	4605      	mov	r5, r0
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 8001228:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <XcpCmdProgramMax+0x3c>)
 800122a:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800122c:	f7ff fd44 	bl	8000cb8 <ComGetActiveInterfaceMaxRxLen>
 8001230:	1c6a      	adds	r2, r5, #1
 8001232:	1e41      	subs	r1, r0, #1
 8001234:	4620      	mov	r0, r4
 8001236:	f7ff fb87 	bl	8000948 <NvmWrite>
 800123a:	b160      	cbz	r0, 8001256 <XcpCmdProgramMax+0x32>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800123c:	4c08      	ldr	r4, [pc, #32]	; (8001260 <XcpCmdProgramMax+0x3c>)
 800123e:	23ff      	movs	r3, #255	; 0xff
 8001240:	70e3      	strb	r3, [r4, #3]
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 8001242:	f7ff fd39 	bl	8000cb8 <ComGetActiveInterfaceMaxRxLen>
 8001246:	3801      	subs	r0, #1
 8001248:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800124a:	4403      	add	r3, r0
 800124c:	64a3      	str	r3, [r4, #72]	; 0x48
  xcpInfo.ctoLen = 1;
 800124e:	2301      	movs	r3, #1
 8001250:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdProgramMax ***/
 8001254:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_GENERIC);
 8001256:	2031      	movs	r0, #49	; 0x31
 8001258:	f7ff fef4 	bl	8001044 <XcpSetCtoError>
    return;
 800125c:	e7fa      	b.n	8001254 <XcpCmdProgramMax+0x30>
 800125e:	bf00      	nop
 8001260:	20000514 	.word	0x20000514

08001264 <XcpCmdProgram>:
{
 8001264:	b538      	push	{r3, r4, r5, lr}
 8001266:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 8001268:	7845      	ldrb	r5, [r0, #1]
 800126a:	f7ff fd25 	bl	8000cb8 <ComGetActiveInterfaceMaxRxLen>
 800126e:	3802      	subs	r0, #2
 8001270:	4285      	cmp	r5, r0
 8001272:	dc0e      	bgt.n	8001292 <XcpCmdProgram+0x2e>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <XcpCmdProgram+0x58>)
 8001276:	22ff      	movs	r2, #255	; 0xff
 8001278:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 800127a:	2201      	movs	r2, #1
 800127c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (data[1] == 0)
 8001280:	7861      	ldrb	r1, [r4, #1]
 8001282:	b951      	cbnz	r1, 800129a <XcpCmdProgram+0x36>
    if (NvmDone() == BLT_FALSE)
 8001284:	f7ff fb70 	bl	8000968 <NvmDone>
 8001288:	b930      	cbnz	r0, 8001298 <XcpCmdProgram+0x34>
      XcpSetCtoError(XCP_ERR_GENERIC);
 800128a:	2031      	movs	r0, #49	; 0x31
 800128c:	f7ff feda 	bl	8001044 <XcpSetCtoError>
 8001290:	e002      	b.n	8001298 <XcpCmdProgram+0x34>
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8001292:	2022      	movs	r0, #34	; 0x22
 8001294:	f7ff fed6 	bl	8001044 <XcpSetCtoError>
} /*** end of XcpCmdProgram ***/
 8001298:	bd38      	pop	{r3, r4, r5, pc}
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 800129a:	1ca2      	adds	r2, r4, #2
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <XcpCmdProgram+0x58>)
 800129e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80012a0:	f7ff fb52 	bl	8000948 <NvmWrite>
 80012a4:	b128      	cbz	r0, 80012b2 <XcpCmdProgram+0x4e>
  xcpInfo.mta += data[1];
 80012a6:	7861      	ldrb	r1, [r4, #1]
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <XcpCmdProgram+0x58>)
 80012aa:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80012ac:	440b      	add	r3, r1
 80012ae:	6493      	str	r3, [r2, #72]	; 0x48
 80012b0:	e7f2      	b.n	8001298 <XcpCmdProgram+0x34>
    XcpSetCtoError(XCP_ERR_GENERIC);
 80012b2:	2031      	movs	r0, #49	; 0x31
 80012b4:	f7ff fec6 	bl	8001044 <XcpSetCtoError>
    return;
 80012b8:	e7ee      	b.n	8001298 <XcpCmdProgram+0x34>
 80012ba:	bf00      	nop
 80012bc:	20000514 	.word	0x20000514

080012c0 <XcpCmdProgramClear>:
{
 80012c0:	b508      	push	{r3, lr}
  if (NvmErase((blt_addr)xcpInfo.mta, *(blt_int32u *)&data[4]) == BLT_FALSE)
 80012c2:	6841      	ldr	r1, [r0, #4]
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <XcpCmdProgramClear+0x24>)
 80012c6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80012c8:	f7ff fb42 	bl	8000950 <NvmErase>
 80012cc:	b130      	cbz	r0, 80012dc <XcpCmdProgramClear+0x1c>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <XcpCmdProgramClear+0x24>)
 80012d0:	22ff      	movs	r2, #255	; 0xff
 80012d2:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 80012d4:	2201      	movs	r2, #1
 80012d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramClear ***/
 80012da:	bd08      	pop	{r3, pc}
    XcpSetCtoError(XCP_ERR_GENERIC);
 80012dc:	2031      	movs	r0, #49	; 0x31
 80012de:	f7ff feb1 	bl	8001044 <XcpSetCtoError>
    return;
 80012e2:	e7fa      	b.n	80012da <XcpCmdProgramClear+0x1a>
 80012e4:	20000514 	.word	0x20000514

080012e8 <XcpCmdProgramReset>:
{
 80012e8:	b508      	push	{r3, lr}
  CpuStartUserProgram();
 80012ea:	f7ff f92d 	bl	8000548 <CpuStartUserProgram>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80012ee:	4b03      	ldr	r3, [pc, #12]	; (80012fc <XcpCmdProgramReset+0x14>)
 80012f0:	22ff      	movs	r2, #255	; 0xff
 80012f2:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 80012f4:	2201      	movs	r2, #1
 80012f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramReset ***/
 80012fa:	bd08      	pop	{r3, pc}
 80012fc:	20000514 	.word	0x20000514

08001300 <XcpTransmitPacket>:
{
 8001300:	b508      	push	{r3, lr}
  ComTransmitPacket(data, len);
 8001302:	b289      	uxth	r1, r1
 8001304:	f7ff fcc0 	bl	8000c88 <ComTransmitPacket>
} /*** end of XcpTransmitPacket ***/
 8001308:	bd08      	pop	{r3, pc}
	...

0800130c <XcpInit>:
  xcpInfo.connected = 0;
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <XcpInit+0x18>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
  xcpInfo.mta = 0;
 8001312:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoPending = 0;
 8001314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  xcpInfo.ctoLen = 0;
 8001318:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  xcpInfo.s_n_k_resource = 0;
 800131c:	709a      	strb	r2, [r3, #2]
  xcpInfo.protection = 0;
 800131e:	705a      	strb	r2, [r3, #1]
} /*** end of XcpInit ***/
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000514 	.word	0x20000514

08001328 <XcpIsConnected>:
  if (xcpInfo.connected == 0)
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <XcpIsConnected+0x10>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b10b      	cbz	r3, 8001332 <XcpIsConnected+0xa>
  return BLT_TRUE;
 800132e:	2001      	movs	r0, #1
} /*** end of XcpIsConnected ***/
 8001330:	4770      	bx	lr
    return BLT_FALSE;
 8001332:	2000      	movs	r0, #0
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000514 	.word	0x20000514

0800133c <XcpPacketTransmitted>:
  xcpInfo.ctoPending = 0;
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <XcpPacketTransmitted+0xc>)
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
} /*** end of XcpPacketTransmitted ***/
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000514 	.word	0x20000514

0800134c <XcpPacketReceived>:
{
 800134c:	b508      	push	{r3, lr}
  if (data[0] == XCP_CMD_CONNECT)
 800134e:	7803      	ldrb	r3, [r0, #0]
 8001350:	2bff      	cmp	r3, #255	; 0xff
 8001352:	d004      	beq.n	800135e <XcpPacketReceived+0x12>
  else if (xcpInfo.connected == 1)
 8001354:	4a35      	ldr	r2, [pc, #212]	; (800142c <XcpPacketReceived+0xe0>)
 8001356:	7812      	ldrb	r2, [r2, #0]
 8001358:	2a01      	cmp	r2, #1
 800135a:	d014      	beq.n	8001386 <XcpPacketReceived+0x3a>
} /*** end of XcpPacketReceived ***/
 800135c:	bd08      	pop	{r3, pc}
    XcpCmdConnect(data);
 800135e:	f7ff fed9 	bl	8001114 <XcpCmdConnect>
  if (xcpInfo.ctoPending == 1)
 8001362:	4b32      	ldr	r3, [pc, #200]	; (800142c <XcpPacketReceived+0xe0>)
 8001364:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001368:	2b01      	cmp	r3, #1
 800136a:	d05a      	beq.n	8001422 <XcpPacketReceived+0xd6>
  if (xcpInfo.ctoLen > 0)
 800136c:	4b2f      	ldr	r3, [pc, #188]	; (800142c <XcpPacketReceived+0xe0>)
 800136e:	f9b3 1044 	ldrsh.w	r1, [r3, #68]	; 0x44
 8001372:	2900      	cmp	r1, #0
 8001374:	ddf2      	ble.n	800135c <XcpPacketReceived+0x10>
    xcpInfo.ctoPending = 1;
 8001376:	4618      	mov	r0, r3
 8001378:	2301      	movs	r3, #1
 800137a:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 800137e:	3003      	adds	r0, #3
 8001380:	f7ff ffbe 	bl	8001300 <XcpTransmitPacket>
 8001384:	e7ea      	b.n	800135c <XcpPacketReceived+0x10>
    switch (data[0])
 8001386:	3bc9      	subs	r3, #201	; 0xc9
 8001388:	2b35      	cmp	r3, #53	; 0x35
 800138a:	d846      	bhi.n	800141a <XcpPacketReceived+0xce>
 800138c:	e8df f003 	tbb	[pc, r3]
 8001390:	42454533 	.word	0x42454533
 8001394:	363f4545 	.word	0x363f4545
 8001398:	4545393c 	.word	0x4545393c
 800139c:	45454545 	.word	0x45454545
 80013a0:	45454545 	.word	0x45454545
 80013a4:	45454545 	.word	0x45454545
 80013a8:	45454545 	.word	0x45454545
 80013ac:	45454545 	.word	0x45454545
 80013b0:	45454545 	.word	0x45454545
 80013b4:	45454545 	.word	0x45454545
 80013b8:	1e244545 	.word	0x1e244545
 80013bc:	4545211b 	.word	0x4545211b
 80013c0:	2a452745 	.word	0x2a452745
 80013c4:	302d      	.short	0x302d
        XcpCmdUpload(data);
 80013c6:	f7ff fec7 	bl	8001158 <XcpCmdUpload>
        break;
 80013ca:	e7ca      	b.n	8001362 <XcpPacketReceived+0x16>
        XcpCmdShortUpload(data);
 80013cc:	f7ff fee4 	bl	8001198 <XcpCmdShortUpload>
        break;
 80013d0:	e7c7      	b.n	8001362 <XcpPacketReceived+0x16>
        XcpCmdSetMta(data);
 80013d2:	f7ff fe79 	bl	80010c8 <XcpCmdSetMta>
        break;
 80013d6:	e7c4      	b.n	8001362 <XcpPacketReceived+0x16>
        XcpCmdBuildCheckSum(data);
 80013d8:	f7ff ff10 	bl	80011fc <XcpCmdBuildCheckSum>
        break;
 80013dc:	e7c1      	b.n	8001362 <XcpPacketReceived+0x16>
        XcpCmdGetId(data);
 80013de:	f7ff fe5f 	bl	80010a0 <XcpCmdGetId>
        break;
 80013e2:	e7be      	b.n	8001362 <XcpPacketReceived+0x16>
        XcpCmdSynch(data);
 80013e4:	f7ff fe56 	bl	8001094 <XcpCmdSynch>
        break;
 80013e8:	e7bb      	b.n	8001362 <XcpPacketReceived+0x16>
        XcpCmdGetStatus(data);
 80013ea:	f7ff fe43 	bl	8001074 <XcpCmdGetStatus>
        break;
 80013ee:	e7b8      	b.n	8001362 <XcpPacketReceived+0x16>
        XcpCmdDisconnect(data);
 80013f0:	f7ff fe32 	bl	8001058 <XcpCmdDisconnect>
        break;
 80013f4:	e7b5      	b.n	8001362 <XcpPacketReceived+0x16>
        XcpCmdProgramMax(data);
 80013f6:	f7ff ff15 	bl	8001224 <XcpCmdProgramMax>
        break;
 80013fa:	e7b2      	b.n	8001362 <XcpPacketReceived+0x16>
        XcpCmdProgram(data);
 80013fc:	f7ff ff32 	bl	8001264 <XcpCmdProgram>
        break;
 8001400:	e7af      	b.n	8001362 <XcpPacketReceived+0x16>
        XcpCmdProgramStart(data);
 8001402:	f7ff fe73 	bl	80010ec <XcpCmdProgramStart>
        break;
 8001406:	e7ac      	b.n	8001362 <XcpPacketReceived+0x16>
        XcpCmdProgramClear(data);
 8001408:	f7ff ff5a 	bl	80012c0 <XcpCmdProgramClear>
        break;
 800140c:	e7a9      	b.n	8001362 <XcpPacketReceived+0x16>
        XcpCmdProgramReset(data);
 800140e:	f7ff ff6b 	bl	80012e8 <XcpCmdProgramReset>
        break;
 8001412:	e7a6      	b.n	8001362 <XcpPacketReceived+0x16>
        XcpCmdProgramPrepare(data);
 8001414:	f7ff fe64 	bl	80010e0 <XcpCmdProgramPrepare>
        break;
 8001418:	e7a3      	b.n	8001362 <XcpPacketReceived+0x16>
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 800141a:	2020      	movs	r0, #32
 800141c:	f7ff fe12 	bl	8001044 <XcpSetCtoError>
        break;
 8001420:	e79f      	b.n	8001362 <XcpPacketReceived+0x16>
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 8001422:	2010      	movs	r0, #16
 8001424:	f7ff fe0e 	bl	8001044 <XcpSetCtoError>
 8001428:	e7a0      	b.n	800136c <XcpPacketReceived+0x20>
 800142a:	bf00      	nop
 800142c:	20000514 	.word	0x20000514

08001430 <add_msg_type>:

/*---------------------------------------------------------------------------*/
static u8_t *
add_msg_type(u8_t *optptr, u8_t type)
{
  *optptr++ = DHCP_OPTION_MSG_TYPE;
 8001430:	2335      	movs	r3, #53	; 0x35
 8001432:	7003      	strb	r3, [r0, #0]
  *optptr++ = 1;
 8001434:	2301      	movs	r3, #1
 8001436:	7043      	strb	r3, [r0, #1]
  *optptr++ = type;
 8001438:	7081      	strb	r1, [r0, #2]
  return optptr;
}
 800143a:	3003      	adds	r0, #3
 800143c:	4770      	bx	lr
	...

08001440 <add_server_id>:
/*---------------------------------------------------------------------------*/
static u8_t *
add_server_id(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_SERVER_ID;
 8001440:	2336      	movs	r3, #54	; 0x36
 8001442:	7003      	strb	r3, [r0, #0]
  *optptr++ = 4;
 8001444:	2304      	movs	r3, #4
 8001446:	7043      	strb	r3, [r0, #1]
  memcpy(optptr, s.serverid, 4);
 8001448:	4b02      	ldr	r3, [pc, #8]	; (8001454 <add_server_id+0x14>)
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	f8c0 3002 	str.w	r3, [r0, #2]
  return optptr + 4;
}
 8001450:	3006      	adds	r0, #6
 8001452:	4770      	bx	lr
 8001454:	20000560 	.word	0x20000560

08001458 <add_req_ipaddr>:
/*---------------------------------------------------------------------------*/
static u8_t *
add_req_ipaddr(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_REQ_IPADDR;
 8001458:	2332      	movs	r3, #50	; 0x32
 800145a:	7003      	strb	r3, [r0, #0]
  *optptr++ = 4;
 800145c:	2304      	movs	r3, #4
 800145e:	7043      	strb	r3, [r0, #1]
  memcpy(optptr, s.ipaddr, 4);
 8001460:	4b02      	ldr	r3, [pc, #8]	; (800146c <add_req_ipaddr+0x14>)
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	f8c0 3002 	str.w	r3, [r0, #2]
  return optptr + 4;
}
 8001468:	3006      	adds	r0, #6
 800146a:	4770      	bx	lr
 800146c:	20000560 	.word	0x20000560

08001470 <add_req_options>:
/*---------------------------------------------------------------------------*/
static u8_t *
add_req_options(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_REQ_LIST;
 8001470:	2337      	movs	r3, #55	; 0x37
 8001472:	7003      	strb	r3, [r0, #0]
  *optptr++ = 3;
 8001474:	2303      	movs	r3, #3
 8001476:	7043      	strb	r3, [r0, #1]
  *optptr++ = DHCP_OPTION_SUBNET_MASK;
 8001478:	2201      	movs	r2, #1
 800147a:	7082      	strb	r2, [r0, #2]
  *optptr++ = DHCP_OPTION_ROUTER;
 800147c:	70c3      	strb	r3, [r0, #3]
  *optptr++ = DHCP_OPTION_DNS_SERVER;
 800147e:	2306      	movs	r3, #6
 8001480:	7103      	strb	r3, [r0, #4]
  return optptr;
}
 8001482:	3005      	adds	r0, #5
 8001484:	4770      	bx	lr

08001486 <add_end>:
/*---------------------------------------------------------------------------*/
static u8_t *
add_end(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_END;
 8001486:	23ff      	movs	r3, #255	; 0xff
 8001488:	7003      	strb	r3, [r0, #0]
  return optptr;
}
 800148a:	3001      	adds	r0, #1
 800148c:	4770      	bx	lr
	...

08001490 <parse_options>:
  uip_send(uip_appdata, end - (u8_t *)uip_appdata);
}
/*---------------------------------------------------------------------------*/
static u8_t
parse_options(u8_t *optptr, int len)
{
 8001490:	4603      	mov	r3, r0
  u8_t *end = optptr + len;
 8001492:	4401      	add	r1, r0
  u8_t type = 0;
 8001494:	2000      	movs	r0, #0

  while (optptr < end)
 8001496:	428b      	cmp	r3, r1
 8001498:	d234      	bcs.n	8001504 <parse_options+0x74>
{
 800149a:	b410      	push	{r4}
 800149c:	e010      	b.n	80014c0 <parse_options+0x30>
  {
    switch (*optptr)
 800149e:	2a36      	cmp	r2, #54	; 0x36
 80014a0:	d023      	beq.n	80014ea <parse_options+0x5a>
 80014a2:	2aff      	cmp	r2, #255	; 0xff
 80014a4:	d02b      	beq.n	80014fe <parse_options+0x6e>
 80014a6:	2a35      	cmp	r2, #53	; 0x35
 80014a8:	d105      	bne.n	80014b6 <parse_options+0x26>
        break;
      case DHCP_OPTION_DNS_SERVER:
        memcpy(s.dnsaddr, optptr + 2, 4);
        break;
      case DHCP_OPTION_MSG_TYPE:
        type = *(optptr + 2);
 80014aa:	7898      	ldrb	r0, [r3, #2]
        break;
 80014ac:	e003      	b.n	80014b6 <parse_options+0x26>
        memcpy(s.netmask, optptr + 2, 4);
 80014ae:	f8d3 4002 	ldr.w	r4, [r3, #2]
 80014b2:	4a15      	ldr	r2, [pc, #84]	; (8001508 <parse_options+0x78>)
 80014b4:	6294      	str	r4, [r2, #40]	; 0x28
        break;
      case DHCP_OPTION_END:
        return type;
    }

    optptr += optptr[1] + 2;
 80014b6:	785a      	ldrb	r2, [r3, #1]
 80014b8:	3202      	adds	r2, #2
 80014ba:	4413      	add	r3, r2
  while (optptr < end)
 80014bc:	428b      	cmp	r3, r1
 80014be:	d21e      	bcs.n	80014fe <parse_options+0x6e>
    switch (*optptr)
 80014c0:	781a      	ldrb	r2, [r3, #0]
 80014c2:	2a33      	cmp	r2, #51	; 0x33
 80014c4:	d016      	beq.n	80014f4 <parse_options+0x64>
 80014c6:	d8ea      	bhi.n	800149e <parse_options+0xe>
 80014c8:	2a03      	cmp	r2, #3
 80014ca:	d004      	beq.n	80014d6 <parse_options+0x46>
 80014cc:	2a06      	cmp	r2, #6
 80014ce:	d007      	beq.n	80014e0 <parse_options+0x50>
 80014d0:	2a01      	cmp	r2, #1
 80014d2:	d1f0      	bne.n	80014b6 <parse_options+0x26>
 80014d4:	e7eb      	b.n	80014ae <parse_options+0x1e>
        memcpy(s.default_router, optptr + 2, 4);
 80014d6:	f8d3 4002 	ldr.w	r4, [r3, #2]
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <parse_options+0x78>)
 80014dc:	6314      	str	r4, [r2, #48]	; 0x30
        break;
 80014de:	e7ea      	b.n	80014b6 <parse_options+0x26>
        memcpy(s.dnsaddr, optptr + 2, 4);
 80014e0:	f8d3 4002 	ldr.w	r4, [r3, #2]
 80014e4:	4a08      	ldr	r2, [pc, #32]	; (8001508 <parse_options+0x78>)
 80014e6:	62d4      	str	r4, [r2, #44]	; 0x2c
        break;
 80014e8:	e7e5      	b.n	80014b6 <parse_options+0x26>
        memcpy(s.serverid, optptr + 2, 4);
 80014ea:	f8d3 4002 	ldr.w	r4, [r3, #2]
 80014ee:	4a06      	ldr	r2, [pc, #24]	; (8001508 <parse_options+0x78>)
 80014f0:	61d4      	str	r4, [r2, #28]
        break;
 80014f2:	e7e0      	b.n	80014b6 <parse_options+0x26>
        memcpy(s.lease_time, optptr + 2, 4);
 80014f4:	f8d3 4002 	ldr.w	r4, [r3, #2]
 80014f8:	4a03      	ldr	r2, [pc, #12]	; (8001508 <parse_options+0x78>)
 80014fa:	6214      	str	r4, [r2, #32]
        break;
 80014fc:	e7db      	b.n	80014b6 <parse_options+0x26>
  }
  return type;
}
 80014fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000560 	.word	0x20000560

0800150c <dhcpc_configured>:
/*---------------------------------------------------------------------------*/
void
dhcpc_configured(const struct dhcpc_state *s)
{
  /* set the IP address received from the DHCP server. */
  uip_sethostaddr(&s->ipaddr);
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <dhcpc_configured+0x20>)
 800150e:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 8001510:	801a      	strh	r2, [r3, #0]
 8001512:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8001514:	805a      	strh	r2, [r3, #2]
  /* set the network mask received from the DHCP server. */
  uip_setnetmask(&s->netmask);
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <dhcpc_configured+0x24>)
 8001518:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 800151a:	801a      	strh	r2, [r3, #0]
 800151c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800151e:	805a      	strh	r2, [r3, #2]
  /* set the gateway address received from the DHCP server. */
  uip_setdraddr(&s->default_router);
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <dhcpc_configured+0x28>)
 8001522:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8001524:	801a      	strh	r2, [r3, #0]
 8001526:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001528:	805a      	strh	r2, [r3, #2]
}
 800152a:	4770      	bx	lr
 800152c:	200006b4 	.word	0x200006b4
 8001530:	200006b0 	.word	0x200006b0
 8001534:	200006ac 	.word	0x200006ac

08001538 <create_msg>:
{
 8001538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153a:	4604      	mov	r4, r0
  m->op = DHCP_REQUEST;
 800153c:	2301      	movs	r3, #1
 800153e:	7003      	strb	r3, [r0, #0]
  m->htype = DHCP_HTYPE_ETHERNET;
 8001540:	7043      	strb	r3, [r0, #1]
  m->hlen = s.mac_len;
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <create_msg+0x6c>)
 8001544:	699a      	ldr	r2, [r3, #24]
 8001546:	7082      	strb	r2, [r0, #2]
  m->hops = 0;
 8001548:	2500      	movs	r5, #0
 800154a:	70c5      	strb	r5, [r0, #3]
  memcpy(m->xid, xid, sizeof(m->xid));
 800154c:	4a16      	ldr	r2, [pc, #88]	; (80015a8 <create_msg+0x70>)
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	6042      	str	r2, [r0, #4]
  m->secs = 0;
 8001552:	8105      	strh	r5, [r0, #8]
  m->flags = HTONS(BOOTP_BROADCAST); /*  Broadcast bit. */
 8001554:	2780      	movs	r7, #128	; 0x80
 8001556:	8147      	strh	r7, [r0, #10]
  memcpy(m->ciaddr, uip_hostaddr, sizeof(m->ciaddr));
 8001558:	4a14      	ldr	r2, [pc, #80]	; (80015ac <create_msg+0x74>)
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	60c2      	str	r2, [r0, #12]
  memset(m->yiaddr, 0, sizeof(m->yiaddr));
 800155e:	6105      	str	r5, [r0, #16]
  memset(m->siaddr, 0, sizeof(m->siaddr));
 8001560:	6145      	str	r5, [r0, #20]
  memset(m->giaddr, 0, sizeof(m->giaddr));
 8001562:	6185      	str	r5, [r0, #24]
  memcpy(m->chaddr, s.mac_addr, s.mac_len);
 8001564:	699e      	ldr	r6, [r3, #24]
 8001566:	4632      	mov	r2, r6
 8001568:	6959      	ldr	r1, [r3, #20]
 800156a:	301c      	adds	r0, #28
 800156c:	f003 fcdd 	bl	8004f2a <memcpy>
  memset(&m->chaddr[s.mac_len], 0, sizeof(m->chaddr) - s.mac_len);
 8001570:	f106 0018 	add.w	r0, r6, #24
 8001574:	4420      	add	r0, r4
 8001576:	f1c6 0210 	rsb	r2, r6, #16
 800157a:	4629      	mov	r1, r5
 800157c:	3004      	adds	r0, #4
 800157e:	f003 fcdf 	bl	8004f40 <memset>
  memset(m->sname, 0, sizeof(m->sname));
 8001582:	2240      	movs	r2, #64	; 0x40
 8001584:	4629      	mov	r1, r5
 8001586:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800158a:	f003 fcd9 	bl	8004f40 <memset>
  memset(m->file, 0, sizeof(m->file));
 800158e:	463a      	mov	r2, r7
 8001590:	4629      	mov	r1, r5
 8001592:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8001596:	f003 fcd3 	bl	8004f40 <memset>
  memcpy(m->options, magic_cookie, sizeof(magic_cookie));
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <create_msg+0x78>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
 80015a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015a4:	20000560 	.word	0x20000560
 80015a8:	08005064 	.word	0x08005064
 80015ac:	200006b4 	.word	0x200006b4
 80015b0:	08005060 	.word	0x08005060

080015b4 <send_discover>:
{
 80015b4:	b538      	push	{r3, r4, r5, lr}
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
 80015b6:	4c0a      	ldr	r4, [pc, #40]	; (80015e0 <send_discover+0x2c>)
 80015b8:	6825      	ldr	r5, [r4, #0]
  create_msg(m);
 80015ba:	4628      	mov	r0, r5
 80015bc:	f7ff ffbc 	bl	8001538 <create_msg>
  end = add_msg_type(&m->options[4], DHCPDISCOVER);
 80015c0:	2101      	movs	r1, #1
 80015c2:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
 80015c6:	f7ff ff33 	bl	8001430 <add_msg_type>
  end = add_req_options(end);
 80015ca:	f7ff ff51 	bl	8001470 <add_req_options>
  end = add_end(end);
 80015ce:	f7ff ff5a 	bl	8001486 <add_end>
  uip_send(uip_appdata, end - (u8_t *)uip_appdata);
 80015d2:	6823      	ldr	r3, [r4, #0]
 80015d4:	1ac1      	subs	r1, r0, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f001 f886 	bl	80026e8 <uip_send>
}
 80015dc:	bd38      	pop	{r3, r4, r5, pc}
 80015de:	bf00      	nop
 80015e0:	20000638 	.word	0x20000638

080015e4 <send_request>:
{
 80015e4:	b538      	push	{r3, r4, r5, lr}
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
 80015e6:	4c0b      	ldr	r4, [pc, #44]	; (8001614 <send_request+0x30>)
 80015e8:	6825      	ldr	r5, [r4, #0]
  create_msg(m);
 80015ea:	4628      	mov	r0, r5
 80015ec:	f7ff ffa4 	bl	8001538 <create_msg>
  end = add_msg_type(&m->options[4], DHCPREQUEST);
 80015f0:	2103      	movs	r1, #3
 80015f2:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
 80015f6:	f7ff ff1b 	bl	8001430 <add_msg_type>
  end = add_server_id(end);
 80015fa:	f7ff ff21 	bl	8001440 <add_server_id>
  end = add_req_ipaddr(end);
 80015fe:	f7ff ff2b 	bl	8001458 <add_req_ipaddr>
  end = add_end(end);
 8001602:	f7ff ff40 	bl	8001486 <add_end>
  uip_send(uip_appdata, end - (u8_t *)uip_appdata);
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	1ac1      	subs	r1, r0, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f001 f86c 	bl	80026e8 <uip_send>
}
 8001610:	bd38      	pop	{r3, r4, r5, pc}
 8001612:	bf00      	nop
 8001614:	20000638 	.word	0x20000638

08001618 <parse_msg>:
{
 8001618:	b510      	push	{r4, lr}
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <parse_msg+0x48>)
 800161c:	681c      	ldr	r4, [r3, #0]
  if (m->op == DHCP_REPLY &&
 800161e:	7823      	ldrb	r3, [r4, #0]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d001      	beq.n	8001628 <parse_msg+0x10>
  return 0;
 8001624:	2000      	movs	r0, #0
}
 8001626:	bd10      	pop	{r4, pc}
      memcmp(m->xid, xid, sizeof(xid)) == 0 &&
 8001628:	2204      	movs	r2, #4
 800162a:	490e      	ldr	r1, [pc, #56]	; (8001664 <parse_msg+0x4c>)
 800162c:	18a0      	adds	r0, r4, r2
 800162e:	f003 fc6d 	bl	8004f0c <memcmp>
  if (m->op == DHCP_REPLY &&
 8001632:	b998      	cbnz	r0, 800165c <parse_msg+0x44>
      memcmp(m->chaddr, s.mac_addr, s.mac_len) == 0)
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <parse_msg+0x50>)
 8001636:	699a      	ldr	r2, [r3, #24]
 8001638:	6959      	ldr	r1, [r3, #20]
 800163a:	f104 001c 	add.w	r0, r4, #28
 800163e:	f003 fc65 	bl	8004f0c <memcmp>
      memcmp(m->xid, xid, sizeof(xid)) == 0 &&
 8001642:	b108      	cbz	r0, 8001648 <parse_msg+0x30>
  return 0;
 8001644:	2000      	movs	r0, #0
 8001646:	e7ee      	b.n	8001626 <parse_msg+0xe>
    memcpy(s.ipaddr, m->yiaddr, 4);
 8001648:	6922      	ldr	r2, [r4, #16]
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <parse_msg+0x50>)
 800164c:	625a      	str	r2, [r3, #36]	; 0x24
    return parse_options(&m->options[4], uip_datalen());
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <parse_msg+0x54>)
 8001650:	8819      	ldrh	r1, [r3, #0]
 8001652:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
 8001656:	f7ff ff1b 	bl	8001490 <parse_options>
 800165a:	e7e4      	b.n	8001626 <parse_msg+0xe>
  return 0;
 800165c:	2000      	movs	r0, #0
 800165e:	e7e2      	b.n	8001626 <parse_msg+0xe>
 8001660:	20000638 	.word	0x20000638
 8001664:	08005064 	.word	0x08005064
 8001668:	20000560 	.word	0x20000560
 800166c:	20000624 	.word	0x20000624

08001670 <dhcpc_request>:
  uip_sethostaddr(ipaddr);
 8001670:	4b02      	ldr	r3, [pc, #8]	; (800167c <dhcpc_request+0xc>)
 8001672:	2200      	movs	r2, #0
 8001674:	801a      	strh	r2, [r3, #0]
 8001676:	805a      	strh	r2, [r3, #2]
}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	200006b4 	.word	0x200006b4

08001680 <handle_dhcp>:
{
 8001680:	b538      	push	{r3, r4, r5, lr}
  PT_BEGIN(&s.pt);
 8001682:	4b98      	ldr	r3, [pc, #608]	; (80018e4 <handle_dhcp+0x264>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 800168a:	d015      	beq.n	80016b8 <handle_dhcp+0x38>
 800168c:	d859      	bhi.n	8001742 <handle_dhcp+0xc2>
 800168e:	f240 120f 	movw	r2, #271	; 0x10f
 8001692:	4293      	cmp	r3, r2
 8001694:	f000 809a 	beq.w	80017cc <handle_dhcp+0x14c>
 8001698:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800169c:	d347      	bcc.n	800172e <handle_dhcp+0xae>
 800169e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80016a2:	f000 8097 	beq.w	80017d4 <handle_dhcp+0x154>
 80016a6:	f240 1225 	movw	r2, #293	; 0x125
 80016aa:	4293      	cmp	r3, r2
 80016ac:	f040 8115 	bne.w	80018da <handle_dhcp+0x25a>
    PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));
 80016b0:	4b8c      	ldr	r3, [pc, #560]	; (80018e4 <handle_dhcp+0x264>)
 80016b2:	f44f 7293 	mov.w	r2, #294	; 0x126
 80016b6:	801a      	strh	r2, [r3, #0]
 80016b8:	4b8b      	ldr	r3, [pc, #556]	; (80018e8 <handle_dhcp+0x268>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	f013 0f02 	tst.w	r3, #2
 80016c0:	f000 80cb 	beq.w	800185a <handle_dhcp+0x1da>
    if (uip_newdata() && parse_msg() == DHCPACK)
 80016c4:	4b88      	ldr	r3, [pc, #544]	; (80018e8 <handle_dhcp+0x268>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	f013 0f02 	tst.w	r3, #2
 80016cc:	f040 80cd 	bne.w	800186a <handle_dhcp+0x1ea>
    if (s.ticks <= CLOCK_SECOND * 10)
 80016d0:	4b84      	ldr	r3, [pc, #528]	; (80018e4 <handle_dhcp+0x264>)
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80016d8:	4293      	cmp	r3, r2
 80016da:	f300 80cf 	bgt.w	800187c <handle_dhcp+0x1fc>
      s.ticks += CLOCK_SECOND;
 80016de:	4a81      	ldr	r2, [pc, #516]	; (80018e4 <handle_dhcp+0x264>)
 80016e0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80016e4:	6113      	str	r3, [r2, #16]
  while (s.state != STATE_CONFIG_RECEIVED);
 80016e6:	7893      	ldrb	r3, [r2, #2]
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	f040 80a9 	bne.w	8001840 <handle_dhcp+0x1c0>
  dhcpc_configured(&s);
 80016ee:	487d      	ldr	r0, [pc, #500]	; (80018e4 <handle_dhcp+0x264>)
 80016f0:	f7ff ff0c 	bl	800150c <dhcpc_configured>
    lease_renew_time  = ((unsigned long)(ntohs(s.lease_time[0])) << 16u);
 80016f4:	4d7b      	ldr	r5, [pc, #492]	; (80018e4 <handle_dhcp+0x264>)
 80016f6:	8c28      	ldrh	r0, [r5, #32]
 80016f8:	f000 f9bc 	bl	8001a74 <htons>
 80016fc:	0404      	lsls	r4, r0, #16
    lease_renew_time |= (ntohs(s.lease_time[1]));
 80016fe:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 8001700:	f000 f9b8 	bl	8001a74 <htons>
 8001704:	4320      	orrs	r0, r4
    lease_renew_time /= 2;
 8001706:	0840      	lsrs	r0, r0, #1
    if ((lease_renew_time * CLOCK_SECOND) <= INT_MAX)
 8001708:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800170c:	fb04 f000 	mul.w	r0, r4, r0
 8001710:	2800      	cmp	r0, #0
 8001712:	f2c0 80b7 	blt.w	8001884 <handle_dhcp+0x204>
      s.ticks = lease_renew_time * CLOCK_SECOND;
 8001716:	6128      	str	r0, [r5, #16]
    timer_set(&s.timer, s.ticks);
 8001718:	4c72      	ldr	r4, [pc, #456]	; (80018e4 <handle_dhcp+0x264>)
 800171a:	6921      	ldr	r1, [r4, #16]
 800171c:	f104 0008 	add.w	r0, r4, #8
 8001720:	f001 f9c4 	bl	8002aac <timer_set>
    PT_YIELD(&s.pt);
 8001724:	f240 1355 	movw	r3, #341	; 0x155
 8001728:	8023      	strh	r3, [r4, #0]
 800172a:	2003      	movs	r0, #3
 800172c:	e075      	b.n	800181a <handle_dhcp+0x19a>
  PT_BEGIN(&s.pt);
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 80d3 	bne.w	80018da <handle_dhcp+0x25a>
  s.state = STATE_SENDING;
 8001734:	4b6b      	ldr	r3, [pc, #428]	; (80018e4 <handle_dhcp+0x264>)
 8001736:	2201      	movs	r2, #1
 8001738:	709a      	strb	r2, [r3, #2]
  s.ticks = CLOCK_SECOND;
 800173a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800173e:	611a      	str	r2, [r3, #16]
 8001740:	e05f      	b.n	8001802 <handle_dhcp+0x182>
  PT_BEGIN(&s.pt);
 8001742:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8001746:	d03a      	beq.n	80017be <handle_dhcp+0x13e>
 8001748:	d930      	bls.n	80017ac <handle_dhcp+0x12c>
 800174a:	f5b3 7fb5 	cmp.w	r3, #362	; 0x16a
 800174e:	f000 80a7 	beq.w	80018a0 <handle_dhcp+0x220>
 8001752:	f240 126b 	movw	r2, #363	; 0x16b
 8001756:	4293      	cmp	r3, r2
 8001758:	f040 80bf 	bne.w	80018da <handle_dhcp+0x25a>
      PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));
 800175c:	4b62      	ldr	r3, [pc, #392]	; (80018e8 <handle_dhcp+0x268>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	f013 0f02 	tst.w	r3, #2
 8001764:	f000 80a1 	beq.w	80018aa <handle_dhcp+0x22a>
      if (uip_newdata() && parse_msg() == DHCPACK)
 8001768:	4b5f      	ldr	r3, [pc, #380]	; (80018e8 <handle_dhcp+0x268>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	f013 0f02 	tst.w	r3, #2
 8001770:	f040 80a3 	bne.w	80018ba <handle_dhcp+0x23a>
      if (s.ticks <= CLOCK_SECOND * 10)
 8001774:	4b5b      	ldr	r3, [pc, #364]	; (80018e4 <handle_dhcp+0x264>)
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	f242 7210 	movw	r2, #10000	; 0x2710
 800177c:	4293      	cmp	r3, r2
 800177e:	f300 80a8 	bgt.w	80018d2 <handle_dhcp+0x252>
        s.ticks += CLOCK_SECOND;
 8001782:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <handle_dhcp+0x264>)
 8001784:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001788:	6113      	str	r3, [r2, #16]
    while (s.state != STATE_CONFIG_RECEIVED);
 800178a:	7893      	ldrb	r3, [r2, #2]
 800178c:	2b03      	cmp	r3, #3
 800178e:	f000 809c 	beq.w	80018ca <handle_dhcp+0x24a>
      send_request();
 8001792:	f7ff ff27 	bl	80015e4 <send_request>
      timer_set(&s.timer, s.ticks);
 8001796:	4c53      	ldr	r4, [pc, #332]	; (80018e4 <handle_dhcp+0x264>)
 8001798:	6921      	ldr	r1, [r4, #16]
 800179a:	f104 0008 	add.w	r0, r4, #8
 800179e:	f001 f985 	bl	8002aac <timer_set>
      PT_YIELD(&s.pt);
 80017a2:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 80017a6:	8023      	strh	r3, [r4, #0]
 80017a8:	2003      	movs	r0, #3
 80017aa:	e036      	b.n	800181a <handle_dhcp+0x19a>
  PT_BEGIN(&s.pt);
 80017ac:	f240 1255 	movw	r2, #341	; 0x155
 80017b0:	4293      	cmp	r3, r2
 80017b2:	f040 8092 	bne.w	80018da <handle_dhcp+0x25a>
    PT_WAIT_UNTIL(&s.pt, timer_expired(&s.timer));
 80017b6:	4b4b      	ldr	r3, [pc, #300]	; (80018e4 <handle_dhcp+0x264>)
 80017b8:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80017bc:	801a      	strh	r2, [r3, #0]
 80017be:	484b      	ldr	r0, [pc, #300]	; (80018ec <handle_dhcp+0x26c>)
 80017c0:	f001 f97b 	bl	8002aba <timer_expired>
 80017c4:	2800      	cmp	r0, #0
 80017c6:	d162      	bne.n	800188e <handle_dhcp+0x20e>
 80017c8:	2000      	movs	r0, #0
 80017ca:	e026      	b.n	800181a <handle_dhcp+0x19a>
    PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));
 80017cc:	4b45      	ldr	r3, [pc, #276]	; (80018e4 <handle_dhcp+0x264>)
 80017ce:	f44f 7288 	mov.w	r2, #272	; 0x110
 80017d2:	801a      	strh	r2, [r3, #0]
 80017d4:	4b44      	ldr	r3, [pc, #272]	; (80018e8 <handle_dhcp+0x268>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	f013 0f02 	tst.w	r3, #2
 80017dc:	d01e      	beq.n	800181c <handle_dhcp+0x19c>
    if (uip_newdata() && parse_msg() == DHCPOFFER)
 80017de:	4b42      	ldr	r3, [pc, #264]	; (80018e8 <handle_dhcp+0x268>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	f013 0f02 	tst.w	r3, #2
 80017e6:	d120      	bne.n	800182a <handle_dhcp+0x1aa>
    if (s.ticks < CLOCK_SECOND * 60)
 80017e8:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <handle_dhcp+0x264>)
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80017f0:	4293      	cmp	r3, r2
 80017f2:	dc02      	bgt.n	80017fa <handle_dhcp+0x17a>
      s.ticks *= 2;
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4a3b      	ldr	r2, [pc, #236]	; (80018e4 <handle_dhcp+0x264>)
 80017f8:	6113      	str	r3, [r2, #16]
  while (s.state != STATE_OFFER_RECEIVED);
 80017fa:	4b3a      	ldr	r3, [pc, #232]	; (80018e4 <handle_dhcp+0x264>)
 80017fc:	789b      	ldrb	r3, [r3, #2]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d01a      	beq.n	8001838 <handle_dhcp+0x1b8>
    send_discover();
 8001802:	f7ff fed7 	bl	80015b4 <send_discover>
    timer_set(&s.timer, s.ticks);
 8001806:	4c37      	ldr	r4, [pc, #220]	; (80018e4 <handle_dhcp+0x264>)
 8001808:	6921      	ldr	r1, [r4, #16]
 800180a:	f104 0008 	add.w	r0, r4, #8
 800180e:	f001 f94d 	bl	8002aac <timer_set>
    PT_YIELD(&s.pt);
 8001812:	f240 130f 	movw	r3, #271	; 0x10f
 8001816:	8023      	strh	r3, [r4, #0]
 8001818:	2003      	movs	r0, #3
}
 800181a:	bd38      	pop	{r3, r4, r5, pc}
    PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));
 800181c:	4833      	ldr	r0, [pc, #204]	; (80018ec <handle_dhcp+0x26c>)
 800181e:	f001 f94c 	bl	8002aba <timer_expired>
 8001822:	2800      	cmp	r0, #0
 8001824:	d1db      	bne.n	80017de <handle_dhcp+0x15e>
 8001826:	2000      	movs	r0, #0
 8001828:	e7f7      	b.n	800181a <handle_dhcp+0x19a>
    if (uip_newdata() && parse_msg() == DHCPOFFER)
 800182a:	f7ff fef5 	bl	8001618 <parse_msg>
 800182e:	2802      	cmp	r0, #2
 8001830:	d1da      	bne.n	80017e8 <handle_dhcp+0x168>
      s.state = STATE_OFFER_RECEIVED;
 8001832:	4b2c      	ldr	r3, [pc, #176]	; (80018e4 <handle_dhcp+0x264>)
 8001834:	2202      	movs	r2, #2
 8001836:	709a      	strb	r2, [r3, #2]
  s.ticks = CLOCK_SECOND;
 8001838:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <handle_dhcp+0x264>)
 800183a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800183e:	611a      	str	r2, [r3, #16]
    send_request();
 8001840:	f7ff fed0 	bl	80015e4 <send_request>
    timer_set(&s.timer, s.ticks);
 8001844:	4c27      	ldr	r4, [pc, #156]	; (80018e4 <handle_dhcp+0x264>)
 8001846:	6921      	ldr	r1, [r4, #16]
 8001848:	f104 0008 	add.w	r0, r4, #8
 800184c:	f001 f92e 	bl	8002aac <timer_set>
    PT_YIELD(&s.pt);
 8001850:	f240 1325 	movw	r3, #293	; 0x125
 8001854:	8023      	strh	r3, [r4, #0]
 8001856:	2003      	movs	r0, #3
 8001858:	e7df      	b.n	800181a <handle_dhcp+0x19a>
    PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));
 800185a:	4824      	ldr	r0, [pc, #144]	; (80018ec <handle_dhcp+0x26c>)
 800185c:	f001 f92d 	bl	8002aba <timer_expired>
 8001860:	2800      	cmp	r0, #0
 8001862:	f47f af2f 	bne.w	80016c4 <handle_dhcp+0x44>
 8001866:	2000      	movs	r0, #0
 8001868:	e7d7      	b.n	800181a <handle_dhcp+0x19a>
    if (uip_newdata() && parse_msg() == DHCPACK)
 800186a:	f7ff fed5 	bl	8001618 <parse_msg>
 800186e:	2805      	cmp	r0, #5
 8001870:	f47f af2e 	bne.w	80016d0 <handle_dhcp+0x50>
      s.state = STATE_CONFIG_RECEIVED;
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <handle_dhcp+0x264>)
 8001876:	2203      	movs	r2, #3
 8001878:	709a      	strb	r2, [r3, #2]
      break;
 800187a:	e738      	b.n	80016ee <handle_dhcp+0x6e>
      PT_RESTART(&s.pt);
 800187c:	2000      	movs	r0, #0
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <handle_dhcp+0x264>)
 8001880:	8018      	strh	r0, [r3, #0]
 8001882:	e7ca      	b.n	800181a <handle_dhcp+0x19a>
      s.ticks = INT_MAX;
 8001884:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <handle_dhcp+0x264>)
 8001886:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800188a:	611a      	str	r2, [r3, #16]
 800188c:	e744      	b.n	8001718 <handle_dhcp+0x98>
    s.state = STATE_OFFER_RECEIVED;
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <handle_dhcp+0x264>)
 8001890:	2202      	movs	r2, #2
 8001892:	709a      	strb	r2, [r3, #2]
    s.ticks = CLOCK_SECOND;
 8001894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001898:	611a      	str	r2, [r3, #16]
    dhcpc_request();
 800189a:	f7ff fee9 	bl	8001670 <dhcpc_request>
 800189e:	e778      	b.n	8001792 <handle_dhcp+0x112>
      PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <handle_dhcp+0x264>)
 80018a2:	f240 126b 	movw	r2, #363	; 0x16b
 80018a6:	801a      	strh	r2, [r3, #0]
 80018a8:	e758      	b.n	800175c <handle_dhcp+0xdc>
 80018aa:	4810      	ldr	r0, [pc, #64]	; (80018ec <handle_dhcp+0x26c>)
 80018ac:	f001 f905 	bl	8002aba <timer_expired>
 80018b0:	2800      	cmp	r0, #0
 80018b2:	f47f af59 	bne.w	8001768 <handle_dhcp+0xe8>
 80018b6:	2000      	movs	r0, #0
 80018b8:	e7af      	b.n	800181a <handle_dhcp+0x19a>
      if (uip_newdata() && parse_msg() == DHCPACK)
 80018ba:	f7ff fead 	bl	8001618 <parse_msg>
 80018be:	2805      	cmp	r0, #5
 80018c0:	f47f af58 	bne.w	8001774 <handle_dhcp+0xf4>
        s.state = STATE_CONFIG_RECEIVED;
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <handle_dhcp+0x264>)
 80018c6:	2203      	movs	r2, #3
 80018c8:	709a      	strb	r2, [r3, #2]
    dhcpc_configured(&s);
 80018ca:	4806      	ldr	r0, [pc, #24]	; (80018e4 <handle_dhcp+0x264>)
 80018cc:	f7ff fe1e 	bl	800150c <dhcpc_configured>
    lease_renew_time  = ((unsigned long)(ntohs(s.lease_time[0])) << 16u);
 80018d0:	e710      	b.n	80016f4 <handle_dhcp+0x74>
        PT_RESTART(&s.pt);
 80018d2:	2000      	movs	r0, #0
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <handle_dhcp+0x264>)
 80018d6:	8018      	strh	r0, [r3, #0]
 80018d8:	e79f      	b.n	800181a <handle_dhcp+0x19a>
  PT_END(&s.pt);
 80018da:	4b02      	ldr	r3, [pc, #8]	; (80018e4 <handle_dhcp+0x264>)
 80018dc:	2200      	movs	r2, #0
 80018de:	801a      	strh	r2, [r3, #0]
 80018e0:	2002      	movs	r0, #2
 80018e2:	e79a      	b.n	800181a <handle_dhcp+0x19a>
 80018e4:	20000560 	.word	0x20000560
 80018e8:	20000630 	.word	0x20000630
 80018ec:	20000568 	.word	0x20000568

080018f0 <dhcpc_appcall>:
{
 80018f0:	b508      	push	{r3, lr}
  handle_dhcp();
 80018f2:	f7ff fec5 	bl	8001680 <handle_dhcp>
}
 80018f6:	bd08      	pop	{r3, pc}

080018f8 <chksum>:

#if ! UIP_ARCH_CHKSUM
/*---------------------------------------------------------------------------*/
static u16_t
chksum(u16_t sum, const u8_t *data, u16_t len)
{
 80018f8:	b410      	push	{r4}
  u16_t t;
  const u8_t *dataptr;
  const u8_t *last_byte;

  dataptr = data;
  last_byte = data + len - 1;
 80018fa:	3a01      	subs	r2, #1
 80018fc:	440a      	add	r2, r1

  while (dataptr < last_byte)  	/* At least two more bytes */
 80018fe:	e000      	b.n	8001902 <chksum+0xa>
    sum += t;
    if (sum < t)
    {
      sum++;		/* carry */
    }
    dataptr += 2;
 8001900:	3102      	adds	r1, #2
  while (dataptr < last_byte)  	/* At least two more bytes */
 8001902:	4291      	cmp	r1, r2
 8001904:	d20b      	bcs.n	800191e <chksum+0x26>
    t = (dataptr[0] << 8) + dataptr[1];
 8001906:	780c      	ldrb	r4, [r1, #0]
 8001908:	784b      	ldrb	r3, [r1, #1]
 800190a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 800190e:	b29b      	uxth	r3, r3
    sum += t;
 8001910:	4418      	add	r0, r3
 8001912:	b280      	uxth	r0, r0
    if (sum < t)
 8001914:	4283      	cmp	r3, r0
 8001916:	d9f3      	bls.n	8001900 <chksum+0x8>
      sum++;		/* carry */
 8001918:	3001      	adds	r0, #1
 800191a:	b280      	uxth	r0, r0
 800191c:	e7f0      	b.n	8001900 <chksum+0x8>
  }

  if (dataptr == last_byte)
 800191e:	d002      	beq.n	8001926 <chksum+0x2e>
    }
  }

  /* Return sum in host byte order. */
  return sum;
}
 8001920:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001924:	4770      	bx	lr
    t = (dataptr[0] << 8) + 0;
 8001926:	780b      	ldrb	r3, [r1, #0]
 8001928:	021b      	lsls	r3, r3, #8
    sum += t;
 800192a:	4418      	add	r0, r3
 800192c:	b280      	uxth	r0, r0
    if (sum < t)
 800192e:	4283      	cmp	r3, r0
 8001930:	d9f6      	bls.n	8001920 <chksum+0x28>
      sum++;		/* carry */
 8001932:	3001      	adds	r0, #1
 8001934:	b280      	uxth	r0, r0
 8001936:	e7f3      	b.n	8001920 <chksum+0x28>

08001938 <uip_add32>:
{
 8001938:	b470      	push	{r4, r5, r6}
  uip_acc32[3] = op32[3] + (op16 & 0xff);
 800193a:	78c5      	ldrb	r5, [r0, #3]
 800193c:	440d      	add	r5, r1
 800193e:	b2ed      	uxtb	r5, r5
 8001940:	4c13      	ldr	r4, [pc, #76]	; (8001990 <uip_add32+0x58>)
 8001942:	70e5      	strb	r5, [r4, #3]
  uip_acc32[2] = op32[2] + (op16 >> 8);
 8001944:	7883      	ldrb	r3, [r0, #2]
 8001946:	0a0e      	lsrs	r6, r1, #8
 8001948:	4433      	add	r3, r6
 800194a:	b2db      	uxtb	r3, r3
 800194c:	70a3      	strb	r3, [r4, #2]
  uip_acc32[1] = op32[1];
 800194e:	7842      	ldrb	r2, [r0, #1]
 8001950:	7062      	strb	r2, [r4, #1]
  uip_acc32[0] = op32[0];
 8001952:	7800      	ldrb	r0, [r0, #0]
 8001954:	7020      	strb	r0, [r4, #0]
  if (uip_acc32[2] < (op16 >> 8))
 8001956:	b29c      	uxth	r4, r3
 8001958:	42a6      	cmp	r6, r4
 800195a:	d906      	bls.n	800196a <uip_add32+0x32>
    ++uip_acc32[1];
 800195c:	3201      	adds	r2, #1
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	4c0b      	ldr	r4, [pc, #44]	; (8001990 <uip_add32+0x58>)
 8001962:	7062      	strb	r2, [r4, #1]
    if (uip_acc32[1] == 0)
 8001964:	b90a      	cbnz	r2, 800196a <uip_add32+0x32>
      ++uip_acc32[0];
 8001966:	3001      	adds	r0, #1
 8001968:	7020      	strb	r0, [r4, #0]
  if (uip_acc32[3] < (op16 & 0xff))
 800196a:	b2c9      	uxtb	r1, r1
 800196c:	428d      	cmp	r5, r1
 800196e:	da0c      	bge.n	800198a <uip_add32+0x52>
    ++uip_acc32[2];
 8001970:	3301      	adds	r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	4a06      	ldr	r2, [pc, #24]	; (8001990 <uip_add32+0x58>)
 8001976:	7093      	strb	r3, [r2, #2]
    if (uip_acc32[2] == 0)
 8001978:	b93b      	cbnz	r3, 800198a <uip_add32+0x52>
      ++uip_acc32[1];
 800197a:	7853      	ldrb	r3, [r2, #1]
 800197c:	3301      	adds	r3, #1
 800197e:	b2db      	uxtb	r3, r3
 8001980:	7053      	strb	r3, [r2, #1]
      if (uip_acc32[1] == 0)
 8001982:	b913      	cbnz	r3, 800198a <uip_add32+0x52>
        ++uip_acc32[0];
 8001984:	7813      	ldrb	r3, [r2, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	7013      	strb	r3, [r2, #0]
}
 800198a:	bc70      	pop	{r4, r5, r6}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	2000062c 	.word	0x2000062c

08001994 <uip_add_rcv_nxt>:
#endif /* UIP_REASSEMBLY */
/*---------------------------------------------------------------------------*/
#if UIP_TCP
static void
uip_add_rcv_nxt(u16_t n)
{
 8001994:	b510      	push	{r4, lr}
  uip_add32(uip_conn->rcv_nxt, n);
 8001996:	4c09      	ldr	r4, [pc, #36]	; (80019bc <uip_add_rcv_nxt+0x28>)
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	4601      	mov	r1, r0
 800199c:	f103 0008 	add.w	r0, r3, #8
 80019a0:	f7ff ffca 	bl	8001938 <uip_add32>
  uip_conn->rcv_nxt[0] = uip_acc32[0];
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <uip_add_rcv_nxt+0x2c>)
 80019a8:	7811      	ldrb	r1, [r2, #0]
 80019aa:	7219      	strb	r1, [r3, #8]
  uip_conn->rcv_nxt[1] = uip_acc32[1];
 80019ac:	7851      	ldrb	r1, [r2, #1]
 80019ae:	7259      	strb	r1, [r3, #9]
  uip_conn->rcv_nxt[2] = uip_acc32[2];
 80019b0:	7891      	ldrb	r1, [r2, #2]
 80019b2:	7299      	strb	r1, [r3, #10]
  uip_conn->rcv_nxt[3] = uip_acc32[3];
 80019b4:	78d2      	ldrb	r2, [r2, #3]
 80019b6:	72da      	strb	r2, [r3, #11]
}
 80019b8:	bd10      	pop	{r4, pc}
 80019ba:	bf00      	nop
 80019bc:	2000063c 	.word	0x2000063c
 80019c0:	2000062c 	.word	0x2000062c

080019c4 <uip_init>:
  for (c = 0; c < UIP_LISTENPORTS; ++c)
 80019c4:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <uip_init+0x6c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	e006      	b.n	80019da <uip_init+0x16>
    uip_listenports[c] = 0;
 80019cc:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <uip_init+0x70>)
 80019ce:	2100      	movs	r1, #0
 80019d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (c = 0; c < UIP_LISTENPORTS; ++c)
 80019d4:	3301      	adds	r3, #1
 80019d6:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <uip_init+0x6c>)
 80019d8:	7013      	strb	r3, [r2, #0]
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <uip_init+0x6c>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f4      	beq.n	80019cc <uip_init+0x8>
  for (c = 0; c < UIP_CONNS; ++c)
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <uip_init+0x6c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	e008      	b.n	80019fc <uip_init+0x38>
    uip_conns[c].tcpstateflags = UIP_CLOSED;
 80019ea:	4913      	ldr	r1, [pc, #76]	; (8001a38 <uip_init+0x74>)
 80019ec:	2268      	movs	r2, #104	; 0x68
 80019ee:	fb02 1203 	mla	r2, r2, r3, r1
 80019f2:	2100      	movs	r1, #0
 80019f4:	7651      	strb	r1, [r2, #25]
  for (c = 0; c < UIP_CONNS; ++c)
 80019f6:	3301      	adds	r3, #1
 80019f8:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <uip_init+0x6c>)
 80019fa:	7013      	strb	r3, [r2, #0]
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <uip_init+0x6c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f2      	beq.n	80019ea <uip_init+0x26>
  lastport = 1024;
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <uip_init+0x78>)
 8001a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a0a:	801a      	strh	r2, [r3, #0]
  for (c = 0; c < UIP_UDP_CONNS; ++c)
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <uip_init+0x6c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	e007      	b.n	8001a24 <uip_init+0x60>
    uip_udp_conns[c].lport = 0;
 8001a14:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <uip_init+0x7c>)
 8001a16:	eb02 1283 	add.w	r2, r2, r3, lsl #6
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	8091      	strh	r1, [r2, #4]
  for (c = 0; c < UIP_UDP_CONNS; ++c)
 8001a1e:	3301      	adds	r3, #1
 8001a20:	4a03      	ldr	r2, [pc, #12]	; (8001a30 <uip_init+0x6c>)
 8001a22:	7013      	strb	r3, [r2, #0]
 8001a24:	4b02      	ldr	r3, [pc, #8]	; (8001a30 <uip_init+0x6c>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f3      	beq.n	8001a14 <uip_init+0x50>
}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000594 	.word	0x20000594
 8001a34:	200006a8 	.word	0x200006a8
 8001a38:	20000640 	.word	0x20000640
 8001a3c:	2000059c 	.word	0x2000059c
 8001a40:	20000cfc 	.word	0x20000cfc

08001a44 <uip_listen>:
  for (c = 0; c < UIP_LISTENPORTS; ++c)
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <uip_listen+0x28>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <uip_listen+0x28>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	b963      	cbnz	r3, 8001a6a <uip_listen+0x26>
    if (uip_listenports[c] == 0)
 8001a50:	4619      	mov	r1, r3
 8001a52:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <uip_listen+0x2c>)
 8001a54:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a58:	b11a      	cbz	r2, 8001a62 <uip_listen+0x1e>
  for (c = 0; c < UIP_LISTENPORTS; ++c)
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	4a03      	ldr	r2, [pc, #12]	; (8001a6c <uip_listen+0x28>)
 8001a5e:	7013      	strb	r3, [r2, #0]
 8001a60:	e7f3      	b.n	8001a4a <uip_listen+0x6>
      uip_listenports[c] = port;
 8001a62:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <uip_listen+0x2c>)
 8001a64:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
      return;
 8001a68:	4770      	bx	lr
}
 8001a6a:	4770      	bx	lr
 8001a6c:	20000594 	.word	0x20000594
 8001a70:	200006a8 	.word	0x200006a8

08001a74 <htons>:
}
/*---------------------------------------------------------------------------*/
u16_t
htons(u16_t val)
{
  return HTONS(val);
 8001a74:	0a03      	lsrs	r3, r0, #8
 8001a76:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 8001a7a:	b280      	uxth	r0, r0
 8001a7c:	4770      	bx	lr
	...

08001a80 <uip_ipchksum>:
{
 8001a80:	b508      	push	{r3, lr}
  sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
 8001a82:	2214      	movs	r2, #20
 8001a84:	4905      	ldr	r1, [pc, #20]	; (8001a9c <uip_ipchksum+0x1c>)
 8001a86:	2000      	movs	r0, #0
 8001a88:	f7ff ff36 	bl	80018f8 <chksum>
  return (sum == 0) ? 0xffff : htons(sum);
 8001a8c:	b110      	cbz	r0, 8001a94 <uip_ipchksum+0x14>
 8001a8e:	f7ff fff1 	bl	8001a74 <htons>
}
 8001a92:	bd08      	pop	{r3, pc}
  return (sum == 0) ? 0xffff : htons(sum);
 8001a94:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a98:	e7fb      	b.n	8001a92 <uip_ipchksum+0x12>
 8001a9a:	bf00      	nop
 8001a9c:	200006c6 	.word	0x200006c6

08001aa0 <upper_layer_chksum>:
{
 8001aa0:	b538      	push	{r3, r4, r5, lr}
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
 8001aa2:	4d0d      	ldr	r5, [pc, #52]	; (8001ad8 <upper_layer_chksum+0x38>)
 8001aa4:	7c2b      	ldrb	r3, [r5, #16]
 8001aa6:	7c6c      	ldrb	r4, [r5, #17]
 8001aa8:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 8001aac:	b2a4      	uxth	r4, r4
 8001aae:	3c14      	subs	r4, #20
 8001ab0:	b2a4      	uxth	r4, r4
  sum = upper_layer_len + proto;
 8001ab2:	4420      	add	r0, r4
  sum = chksum(sum, (u8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	f105 011a 	add.w	r1, r5, #26
 8001aba:	b280      	uxth	r0, r0
 8001abc:	f7ff ff1c 	bl	80018f8 <chksum>
  sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN],
 8001ac0:	4622      	mov	r2, r4
 8001ac2:	f105 0122 	add.w	r1, r5, #34	; 0x22
 8001ac6:	f7ff ff17 	bl	80018f8 <chksum>
  return (sum == 0) ? 0xffff : htons(sum);
 8001aca:	b110      	cbz	r0, 8001ad2 <upper_layer_chksum+0x32>
 8001acc:	f7ff ffd2 	bl	8001a74 <htons>
}
 8001ad0:	bd38      	pop	{r3, r4, r5, pc}
  return (sum == 0) ? 0xffff : htons(sum);
 8001ad2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ad6:	e7fb      	b.n	8001ad0 <upper_layer_chksum+0x30>
 8001ad8:	200006b8 	.word	0x200006b8

08001adc <uip_tcpchksum>:
{
 8001adc:	b508      	push	{r3, lr}
  return upper_layer_chksum(UIP_PROTO_TCP);
 8001ade:	2006      	movs	r0, #6
 8001ae0:	f7ff ffde 	bl	8001aa0 <upper_layer_chksum>
}
 8001ae4:	bd08      	pop	{r3, pc}
	...

08001ae8 <uip_process>:
{
 8001ae8:	b570      	push	{r4, r5, r6, lr}
  register struct uip_conn *uip_connr = uip_conn;
 8001aea:	4bb2      	ldr	r3, [pc, #712]	; (8001db4 <uip_process+0x2cc>)
 8001aec:	681c      	ldr	r4, [r3, #0]
  if (flag == UIP_UDP_SEND_CONN)
 8001aee:	2804      	cmp	r0, #4
 8001af0:	f000 8196 	beq.w	8001e20 <uip_process+0x338>
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
 8001af4:	4bb0      	ldr	r3, [pc, #704]	; (8001db8 <uip_process+0x2d0>)
 8001af6:	4ab1      	ldr	r2, [pc, #708]	; (8001dbc <uip_process+0x2d4>)
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4ab1      	ldr	r2, [pc, #708]	; (8001dc0 <uip_process+0x2d8>)
 8001afc:	6013      	str	r3, [r2, #0]
  if (flag == UIP_POLL_REQUEST)
 8001afe:	2803      	cmp	r0, #3
 8001b00:	d059      	beq.n	8001bb6 <uip_process+0xce>
  else if (flag == UIP_TIMER)
 8001b02:	2802      	cmp	r0, #2
 8001b04:	f000 80c8 	beq.w	8001c98 <uip_process+0x1b0>
  if (flag == UIP_UDP_TIMER)
 8001b08:	2805      	cmp	r0, #5
 8001b0a:	f000 8172 	beq.w	8001df2 <uip_process+0x30a>
  if (BUF->vhl != 0x45)   /* IP version and header length. */
 8001b0e:	4bad      	ldr	r3, [pc, #692]	; (8001dc4 <uip_process+0x2dc>)
 8001b10:	7b9b      	ldrb	r3, [r3, #14]
 8001b12:	2b45      	cmp	r3, #69	; 0x45
 8001b14:	d154      	bne.n	8001bc0 <uip_process+0xd8>
  if ((BUF->len[0] << 8) + BUF->len[1] <= uip_len)
 8001b16:	4aab      	ldr	r2, [pc, #684]	; (8001dc4 <uip_process+0x2dc>)
 8001b18:	7c15      	ldrb	r5, [r2, #16]
 8001b1a:	7c53      	ldrb	r3, [r2, #17]
 8001b1c:	eb03 2105 	add.w	r1, r3, r5, lsl #8
 8001b20:	4aa9      	ldr	r2, [pc, #676]	; (8001dc8 <uip_process+0x2e0>)
 8001b22:	8812      	ldrh	r2, [r2, #0]
 8001b24:	4291      	cmp	r1, r2
 8001b26:	dc4b      	bgt.n	8001bc0 <uip_process+0xd8>
    uip_len = (BUF->len[0] << 8) + BUF->len[1];
 8001b28:	b28d      	uxth	r5, r1
 8001b2a:	4ba7      	ldr	r3, [pc, #668]	; (8001dc8 <uip_process+0x2e0>)
 8001b2c:	801d      	strh	r5, [r3, #0]
  if ((BUF->ipoffset[0] & 0x3f) != 0 ||
 8001b2e:	4ba5      	ldr	r3, [pc, #660]	; (8001dc4 <uip_process+0x2dc>)
 8001b30:	7d1b      	ldrb	r3, [r3, #20]
 8001b32:	f013 0f3f 	tst.w	r3, #63	; 0x3f
 8001b36:	d143      	bne.n	8001bc0 <uip_process+0xd8>
      BUF->ipoffset[1] != 0)
 8001b38:	4ba2      	ldr	r3, [pc, #648]	; (8001dc4 <uip_process+0x2dc>)
 8001b3a:	7d5b      	ldrb	r3, [r3, #21]
  if ((BUF->ipoffset[0] & 0x3f) != 0 ||
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d13f      	bne.n	8001bc0 <uip_process+0xd8>
  if (uip_ipaddr_cmp(uip_hostaddr, all_zeroes_addr))
 8001b40:	4ba2      	ldr	r3, [pc, #648]	; (8001dcc <uip_process+0x2e4>)
 8001b42:	881c      	ldrh	r4, [r3, #0]
 8001b44:	b90c      	cbnz	r4, 8001b4a <uip_process+0x62>
 8001b46:	885b      	ldrh	r3, [r3, #2]
 8001b48:	b14b      	cbz	r3, 8001b5e <uip_process+0x76>
    if (!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr))
 8001b4a:	4b9e      	ldr	r3, [pc, #632]	; (8001dc4 <uip_process+0x2dc>)
 8001b4c:	8bdb      	ldrh	r3, [r3, #30]
 8001b4e:	429c      	cmp	r4, r3
 8001b50:	d136      	bne.n	8001bc0 <uip_process+0xd8>
 8001b52:	4b9c      	ldr	r3, [pc, #624]	; (8001dc4 <uip_process+0x2dc>)
 8001b54:	8c1a      	ldrh	r2, [r3, #32]
 8001b56:	4b9d      	ldr	r3, [pc, #628]	; (8001dcc <uip_process+0x2e4>)
 8001b58:	885b      	ldrh	r3, [r3, #2]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d130      	bne.n	8001bc0 <uip_process+0xd8>
  if (uip_ipchksum() != 0xffff)
 8001b5e:	f7ff ff8f 	bl	8001a80 <uip_ipchksum>
 8001b62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b66:	4298      	cmp	r0, r3
 8001b68:	d12a      	bne.n	8001bc0 <uip_process+0xd8>
  if (BUF->proto == UIP_PROTO_TCP)
 8001b6a:	4b96      	ldr	r3, [pc, #600]	; (8001dc4 <uip_process+0x2dc>)
 8001b6c:	7ddb      	ldrb	r3, [r3, #23]
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	f000 81e9 	beq.w	8001f46 <uip_process+0x45e>
  if (BUF->proto == UIP_PROTO_UDP)
 8001b74:	2b11      	cmp	r3, #17
 8001b76:	f000 819f 	beq.w	8001eb8 <uip_process+0x3d0>
  if (BUF->proto != UIP_PROTO_ICMP)
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d120      	bne.n	8001bc0 <uip_process+0xd8>
  if (ICMPBUF->type != ICMP_ECHO)
 8001b7e:	4b91      	ldr	r3, [pc, #580]	; (8001dc4 <uip_process+0x2dc>)
 8001b80:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d11b      	bne.n	8001bc0 <uip_process+0xd8>
  ICMPBUF->type = ICMP_ECHO_REPLY;
 8001b88:	4b8e      	ldr	r3, [pc, #568]	; (8001dc4 <uip_process+0x2dc>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  if (ICMPBUF->icmpchksum >= HTONS(0xffff - (ICMP_ECHO << 8)))
 8001b90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b92:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 8001b96:	4293      	cmp	r3, r2
 8001b98:	f240 818a 	bls.w	8001eb0 <uip_process+0x3c8>
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8) + 1;
 8001b9c:	3309      	adds	r3, #9
 8001b9e:	4a89      	ldr	r2, [pc, #548]	; (8001dc4 <uip_process+0x2dc>)
 8001ba0:	8493      	strh	r3, [r2, #36]	; 0x24
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
 8001ba2:	4b88      	ldr	r3, [pc, #544]	; (8001dc4 <uip_process+0x2dc>)
 8001ba4:	8b5a      	ldrh	r2, [r3, #26]
 8001ba6:	83da      	strh	r2, [r3, #30]
 8001ba8:	8b9a      	ldrh	r2, [r3, #28]
 8001baa:	841a      	strh	r2, [r3, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 8001bac:	835c      	strh	r4, [r3, #26]
 8001bae:	4a87      	ldr	r2, [pc, #540]	; (8001dcc <uip_process+0x2e4>)
 8001bb0:	8852      	ldrh	r2, [r2, #2]
 8001bb2:	839a      	strh	r2, [r3, #28]
  goto send;
 8001bb4:	e178      	b.n	8001ea8 <uip_process+0x3c0>
    if ((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
 8001bb6:	7e63      	ldrb	r3, [r4, #25]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d005      	beq.n	8001bcc <uip_process+0xe4>
  uip_len = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	4a81      	ldr	r2, [pc, #516]	; (8001dc8 <uip_process+0x2e0>)
 8001bc4:	8013      	strh	r3, [r2, #0]
  uip_flags = 0;
 8001bc6:	4a82      	ldr	r2, [pc, #520]	; (8001dd0 <uip_process+0x2e8>)
 8001bc8:	7013      	strb	r3, [r2, #0]
}
 8001bca:	bd70      	pop	{r4, r5, r6, pc}
        !uip_outstanding(uip_connr))
 8001bcc:	8a23      	ldrh	r3, [r4, #16]
    if ((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f6      	bne.n	8001bc0 <uip_process+0xd8>
      uip_flags = UIP_POLL;
 8001bd2:	4b7f      	ldr	r3, [pc, #508]	; (8001dd0 <uip_process+0x2e8>)
 8001bd4:	2208      	movs	r2, #8
 8001bd6:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
 8001bd8:	f7ff f9d2 	bl	8000f80 <NetApp>
        if (uip_flags & UIP_ABORT)
 8001bdc:	4b7c      	ldr	r3, [pc, #496]	; (8001dd0 <uip_process+0x2e8>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	f013 0f20 	tst.w	r3, #32
 8001be4:	f000 84a4 	beq.w	8002530 <uip_process+0xa48>
          uip_slen = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	4a7a      	ldr	r2, [pc, #488]	; (8001dd4 <uip_process+0x2ec>)
 8001bec:	8013      	strh	r3, [r2, #0]
          uip_connr->tcpstateflags = UIP_CLOSED;
 8001bee:	7663      	strb	r3, [r4, #25]
          BUF->flags = TCP_RST | TCP_ACK;
 8001bf0:	4b74      	ldr	r3, [pc, #464]	; (8001dc4 <uip_process+0x2dc>)
 8001bf2:	2214      	movs	r2, #20
 8001bf4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  uip_len = UIP_IPTCPH_LEN;
 8001bf8:	4b73      	ldr	r3, [pc, #460]	; (8001dc8 <uip_process+0x2e0>)
 8001bfa:	2228      	movs	r2, #40	; 0x28
 8001bfc:	801a      	strh	r2, [r3, #0]
  BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
 8001bfe:	4b71      	ldr	r3, [pc, #452]	; (8001dc4 <uip_process+0x2dc>)
 8001c00:	2250      	movs	r2, #80	; 0x50
 8001c02:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  BUF->ackno[0] = uip_connr->rcv_nxt[0];
 8001c06:	7a22      	ldrb	r2, [r4, #8]
 8001c08:	4b6e      	ldr	r3, [pc, #440]	; (8001dc4 <uip_process+0x2dc>)
 8001c0a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  BUF->ackno[1] = uip_connr->rcv_nxt[1];
 8001c0e:	7a62      	ldrb	r2, [r4, #9]
 8001c10:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  BUF->ackno[2] = uip_connr->rcv_nxt[2];
 8001c14:	7aa2      	ldrb	r2, [r4, #10]
 8001c16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  BUF->ackno[3] = uip_connr->rcv_nxt[3];
 8001c1a:	7ae2      	ldrb	r2, [r4, #11]
 8001c1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  BUF->seqno[0] = uip_connr->snd_nxt[0];
 8001c20:	7b22      	ldrb	r2, [r4, #12]
 8001c22:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  BUF->seqno[1] = uip_connr->snd_nxt[1];
 8001c26:	7b62      	ldrb	r2, [r4, #13]
 8001c28:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  BUF->seqno[2] = uip_connr->snd_nxt[2];
 8001c2c:	7ba2      	ldrb	r2, [r4, #14]
 8001c2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  BUF->seqno[3] = uip_connr->snd_nxt[3];
 8001c32:	7be2      	ldrb	r2, [r4, #15]
 8001c34:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BUF->proto = UIP_PROTO_TCP;
 8001c38:	2206      	movs	r2, #6
 8001c3a:	75da      	strb	r2, [r3, #23]
  BUF->srcport  = uip_connr->lport;
 8001c3c:	88a2      	ldrh	r2, [r4, #4]
 8001c3e:	845a      	strh	r2, [r3, #34]	; 0x22
  BUF->destport = uip_connr->rport;
 8001c40:	88e2      	ldrh	r2, [r4, #6]
 8001c42:	849a      	strh	r2, [r3, #36]	; 0x24
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 8001c44:	4a61      	ldr	r2, [pc, #388]	; (8001dcc <uip_process+0x2e4>)
 8001c46:	8811      	ldrh	r1, [r2, #0]
 8001c48:	8359      	strh	r1, [r3, #26]
 8001c4a:	8852      	ldrh	r2, [r2, #2]
 8001c4c:	839a      	strh	r2, [r3, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_connr->ripaddr);
 8001c4e:	8822      	ldrh	r2, [r4, #0]
 8001c50:	83da      	strh	r2, [r3, #30]
 8001c52:	8862      	ldrh	r2, [r4, #2]
 8001c54:	841a      	strh	r2, [r3, #32]
  if (uip_connr->tcpstateflags & UIP_STOPPED)
 8001c56:	7e63      	ldrb	r3, [r4, #25]
 8001c58:	f013 0f10 	tst.w	r3, #16
 8001c5c:	f000 8534 	beq.w	80026c8 <uip_process+0xbe0>
    BUF->wnd[0] = BUF->wnd[1] = 0;
 8001c60:	4b58      	ldr	r3, [pc, #352]	; (8001dc4 <uip_process+0x2dc>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8001c68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  BUF->ttl = UIP_TTL;
 8001c6c:	4c55      	ldr	r4, [pc, #340]	; (8001dc4 <uip_process+0x2dc>)
 8001c6e:	2340      	movs	r3, #64	; 0x40
 8001c70:	75a3      	strb	r3, [r4, #22]
  BUF->len[0] = (uip_len >> 8);
 8001c72:	4b55      	ldr	r3, [pc, #340]	; (8001dc8 <uip_process+0x2e0>)
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	0a1a      	lsrs	r2, r3, #8
 8001c78:	7422      	strb	r2, [r4, #16]
  BUF->len[1] = (uip_len & 0xff);
 8001c7a:	7463      	strb	r3, [r4, #17]
  BUF->urgp[0] = BUF->urgp[1] = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8001c82:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  BUF->tcpchksum = 0;
 8001c86:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 8001c8a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  BUF->tcpchksum = ~(uip_tcpchksum());
 8001c8e:	f7ff ff25 	bl	8001adc <uip_tcpchksum>
 8001c92:	43c0      	mvns	r0, r0
 8001c94:	8660      	strh	r0, [r4, #50]	; 0x32
 8001c96:	e0f2      	b.n	8001e7e <uip_process+0x396>
    if (++iss[3] == 0)
 8001c98:	4a4f      	ldr	r2, [pc, #316]	; (8001dd8 <uip_process+0x2f0>)
 8001c9a:	78d3      	ldrb	r3, [r2, #3]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	70d3      	strb	r3, [r2, #3]
 8001ca2:	b963      	cbnz	r3, 8001cbe <uip_process+0x1d6>
      if (++iss[2] == 0)
 8001ca4:	7893      	ldrb	r3, [r2, #2]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	7093      	strb	r3, [r2, #2]
 8001cac:	b93b      	cbnz	r3, 8001cbe <uip_process+0x1d6>
        if (++iss[1] == 0)
 8001cae:	7853      	ldrb	r3, [r2, #1]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	7053      	strb	r3, [r2, #1]
 8001cb6:	b913      	cbnz	r3, 8001cbe <uip_process+0x1d6>
          ++iss[0];
 8001cb8:	7813      	ldrb	r3, [r2, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	7013      	strb	r3, [r2, #0]
    uip_len = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	4a41      	ldr	r2, [pc, #260]	; (8001dc8 <uip_process+0x2e0>)
 8001cc2:	8013      	strh	r3, [r2, #0]
    uip_slen = 0;
 8001cc4:	4a43      	ldr	r2, [pc, #268]	; (8001dd4 <uip_process+0x2ec>)
 8001cc6:	8013      	strh	r3, [r2, #0]
    if (uip_connr->tcpstateflags == UIP_TIME_WAIT ||
 8001cc8:	7e63      	ldrb	r3, [r4, #25]
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	bf18      	it	ne
 8001cce:	2b07      	cmpne	r3, #7
 8001cd0:	d109      	bne.n	8001ce6 <uip_process+0x1fe>
      ++(uip_connr->timer);
 8001cd2:	7ea3      	ldrb	r3, [r4, #26]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	76a3      	strb	r3, [r4, #26]
      if (uip_connr->timer == UIP_TIME_WAIT_TIMEOUT)
 8001cda:	2b78      	cmp	r3, #120	; 0x78
 8001cdc:	f47f af70 	bne.w	8001bc0 <uip_process+0xd8>
        uip_connr->tcpstateflags = UIP_CLOSED;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	7663      	strb	r3, [r4, #25]
 8001ce4:	e76c      	b.n	8001bc0 <uip_process+0xd8>
    else if (uip_connr->tcpstateflags != UIP_CLOSED)
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f43f af6a 	beq.w	8001bc0 <uip_process+0xd8>
      if (uip_outstanding(uip_connr))
 8001cec:	8a22      	ldrh	r2, [r4, #16]
 8001cee:	2a00      	cmp	r2, #0
 8001cf0:	d074      	beq.n	8001ddc <uip_process+0x2f4>
        if (uip_connr->timer-- == 0)
 8001cf2:	7ea2      	ldrb	r2, [r4, #26]
 8001cf4:	1e51      	subs	r1, r2, #1
 8001cf6:	76a1      	strb	r1, [r4, #26]
 8001cf8:	2a00      	cmp	r2, #0
 8001cfa:	f47f af61 	bne.w	8001bc0 <uip_process+0xd8>
          if (uip_connr->nrtx == UIP_MAXRTX ||
 8001cfe:	7ee2      	ldrb	r2, [r4, #27]
 8001d00:	2a08      	cmp	r2, #8
 8001d02:	d027      	beq.n	8001d54 <uip_process+0x26c>
              ((uip_connr->tcpstateflags == UIP_SYN_SENT ||
 8001d04:	1e59      	subs	r1, r3, #1
 8001d06:	b2c9      	uxtb	r1, r1
          if (uip_connr->nrtx == UIP_MAXRTX ||
 8001d08:	2901      	cmp	r1, #1
 8001d0a:	d921      	bls.n	8001d50 <uip_process+0x268>
                                         4:
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	2a04      	cmp	r2, #4
 8001d10:	bf28      	it	cs
 8001d12:	2004      	movcs	r0, #4
          uip_connr->timer = UIP_RTO << (uip_connr->nrtx > 4?
 8001d14:	2103      	movs	r1, #3
 8001d16:	4081      	lsls	r1, r0
 8001d18:	76a1      	strb	r1, [r4, #26]
          ++(uip_connr->nrtx);
 8001d1a:	3201      	adds	r2, #1
 8001d1c:	76e2      	strb	r2, [r4, #27]
          switch (uip_connr->tcpstateflags & UIP_TS_MASK)
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	3b01      	subs	r3, #1
 8001d24:	2b07      	cmp	r3, #7
 8001d26:	f63f af4b 	bhi.w	8001bc0 <uip_process+0xd8>
 8001d2a:	a201      	add	r2, pc, #4	; (adr r2, 8001d30 <uip_process+0x248>)
 8001d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d30:	080021f1 	.word	0x080021f1
 8001d34:	08001d6d 	.word	0x08001d6d
 8001d38:	08001da9 	.word	0x08001da9
 8001d3c:	080024a5 	.word	0x080024a5
 8001d40:	08001bc1 	.word	0x08001bc1
 8001d44:	080024a5 	.word	0x080024a5
 8001d48:	08001bc1 	.word	0x08001bc1
 8001d4c:	080024a5 	.word	0x080024a5
                uip_connr->tcpstateflags == UIP_SYN_RCVD) &&
 8001d50:	2a05      	cmp	r2, #5
 8001d52:	d1db      	bne.n	8001d0c <uip_process+0x224>
            uip_connr->tcpstateflags = UIP_CLOSED;
 8001d54:	2300      	movs	r3, #0
 8001d56:	7663      	strb	r3, [r4, #25]
            uip_flags = UIP_TIMEDOUT;
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <uip_process+0x2e8>)
 8001d5a:	2280      	movs	r2, #128	; 0x80
 8001d5c:	701a      	strb	r2, [r3, #0]
            UIP_APPCALL();
 8001d5e:	f7ff f90f 	bl	8000f80 <NetApp>
            BUF->flags = TCP_RST | TCP_ACK;
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <uip_process+0x2dc>)
 8001d64:	2214      	movs	r2, #20
 8001d66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            goto tcp_send_nodata;
 8001d6a:	e745      	b.n	8001bf8 <uip_process+0x110>
              BUF->flags = 0;
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <uip_process+0x2dc>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  BUF->flags |= TCP_SYN;
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <uip_process+0x2dc>)
 8001d76:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8001d7a:	f042 0202 	orr.w	r2, r2, #2
 8001d7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  BUF->optdata[0] = TCP_OPT_MSS;
 8001d82:	2202      	movs	r2, #2
 8001d84:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  BUF->optdata[1] = TCP_OPT_MSS_LEN;
 8001d88:	2204      	movs	r2, #4
 8001d8a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  BUF->optdata[2] = (UIP_TCP_MSS) / 256;
 8001d8e:	2206      	movs	r2, #6
 8001d90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  BUF->optdata[3] = (UIP_TCP_MSS) & 255;
 8001d94:	220a      	movs	r2, #10
 8001d96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
 8001d9a:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <uip_process+0x2e0>)
 8001d9c:	212c      	movs	r1, #44	; 0x2c
 8001d9e:	8011      	strh	r1, [r2, #0]
  BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
 8001da0:	2260      	movs	r2, #96	; 0x60
 8001da2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  goto tcp_send;
 8001da6:	e72e      	b.n	8001c06 <uip_process+0x11e>
              uip_flags = UIP_REXMIT;
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <uip_process+0x2e8>)
 8001daa:	2204      	movs	r2, #4
 8001dac:	701a      	strb	r2, [r3, #0]
              UIP_APPCALL();
 8001dae:	f7ff f8e7 	bl	8000f80 <NetApp>
              goto apprexmit;
 8001db2:	e3e2      	b.n	800257a <uip_process+0xa92>
 8001db4:	2000063c 	.word	0x2000063c
 8001db8:	200006ee 	.word	0x200006ee
 8001dbc:	20000638 	.word	0x20000638
 8001dc0:	20000628 	.word	0x20000628
 8001dc4:	200006b8 	.word	0x200006b8
 8001dc8:	20000624 	.word	0x20000624
 8001dcc:	200006b4 	.word	0x200006b4
 8001dd0:	20000630 	.word	0x20000630
 8001dd4:	20000cfa 	.word	0x20000cfa
 8001dd8:	20000598 	.word	0x20000598
      else if ((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED)
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	f47f aeed 	bne.w	8001bc0 <uip_process+0xd8>
        uip_flags = UIP_POLL;
 8001de6:	4bac      	ldr	r3, [pc, #688]	; (8002098 <uip_process+0x5b0>)
 8001de8:	2208      	movs	r2, #8
 8001dea:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
 8001dec:	f7ff f8c8 	bl	8000f80 <NetApp>
        goto appsend;
 8001df0:	e6f4      	b.n	8001bdc <uip_process+0xf4>
    if (uip_udp_conn->lport != 0)
 8001df2:	4baa      	ldr	r3, [pc, #680]	; (800209c <uip_process+0x5b4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	889b      	ldrh	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f43f aee1 	beq.w	8001bc0 <uip_process+0xd8>
      uip_conn = NULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	4aa7      	ldr	r2, [pc, #668]	; (80020a0 <uip_process+0x5b8>)
 8001e02:	6013      	str	r3, [r2, #0]
      uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
 8001e04:	4aa7      	ldr	r2, [pc, #668]	; (80020a4 <uip_process+0x5bc>)
 8001e06:	49a8      	ldr	r1, [pc, #672]	; (80020a8 <uip_process+0x5c0>)
 8001e08:	600a      	str	r2, [r1, #0]
 8001e0a:	49a8      	ldr	r1, [pc, #672]	; (80020ac <uip_process+0x5c4>)
 8001e0c:	600a      	str	r2, [r1, #0]
      uip_len = uip_slen = 0;
 8001e0e:	4aa8      	ldr	r2, [pc, #672]	; (80020b0 <uip_process+0x5c8>)
 8001e10:	8013      	strh	r3, [r2, #0]
 8001e12:	4aa8      	ldr	r2, [pc, #672]	; (80020b4 <uip_process+0x5cc>)
 8001e14:	8013      	strh	r3, [r2, #0]
      uip_flags = UIP_POLL;
 8001e16:	4ba0      	ldr	r3, [pc, #640]	; (8002098 <uip_process+0x5b0>)
 8001e18:	2208      	movs	r2, #8
 8001e1a:	701a      	strb	r2, [r3, #0]
      UIP_UDP_APPCALL();
 8001e1c:	f7ff fd68 	bl	80018f0 <dhcpc_appcall>
  if (uip_slen == 0)
 8001e20:	4ba3      	ldr	r3, [pc, #652]	; (80020b0 <uip_process+0x5c8>)
 8001e22:	881a      	ldrh	r2, [r3, #0]
 8001e24:	2a00      	cmp	r2, #0
 8001e26:	f43f aecb 	beq.w	8001bc0 <uip_process+0xd8>
  uip_len = uip_slen + UIP_IPUDPH_LEN;
 8001e2a:	f102 011c 	add.w	r1, r2, #28
 8001e2e:	b289      	uxth	r1, r1
 8001e30:	4ba0      	ldr	r3, [pc, #640]	; (80020b4 <uip_process+0x5cc>)
 8001e32:	8019      	strh	r1, [r3, #0]
  BUF->len[0] = (uip_len >> 8);
 8001e34:	4ba0      	ldr	r3, [pc, #640]	; (80020b8 <uip_process+0x5d0>)
 8001e36:	0a08      	lsrs	r0, r1, #8
 8001e38:	7418      	strb	r0, [r3, #16]
  BUF->len[1] = (uip_len & 0xff);
 8001e3a:	7459      	strb	r1, [r3, #17]
  BUF->ttl = uip_udp_conn->ttl;
 8001e3c:	4997      	ldr	r1, [pc, #604]	; (800209c <uip_process+0x5b4>)
 8001e3e:	6809      	ldr	r1, [r1, #0]
 8001e40:	7a08      	ldrb	r0, [r1, #8]
 8001e42:	7598      	strb	r0, [r3, #22]
  BUF->proto = UIP_PROTO_UDP;
 8001e44:	2011      	movs	r0, #17
 8001e46:	75d8      	strb	r0, [r3, #23]
  UDPBUF->udplen = HTONS(uip_slen + UIP_UDPH_LEN);
 8001e48:	3208      	adds	r2, #8
 8001e4a:	b292      	uxth	r2, r2
 8001e4c:	0a10      	lsrs	r0, r2, #8
 8001e4e:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
 8001e52:	84da      	strh	r2, [r3, #38]	; 0x26
  UDPBUF->udpchksum = 0;
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001e5a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BUF->srcport  = uip_udp_conn->lport;
 8001e5e:	888a      	ldrh	r2, [r1, #4]
 8001e60:	845a      	strh	r2, [r3, #34]	; 0x22
  BUF->destport = uip_udp_conn->rport;
 8001e62:	88ca      	ldrh	r2, [r1, #6]
 8001e64:	849a      	strh	r2, [r3, #36]	; 0x24
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 8001e66:	4a95      	ldr	r2, [pc, #596]	; (80020bc <uip_process+0x5d4>)
 8001e68:	8810      	ldrh	r0, [r2, #0]
 8001e6a:	8358      	strh	r0, [r3, #26]
 8001e6c:	8852      	ldrh	r2, [r2, #2]
 8001e6e:	839a      	strh	r2, [r3, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_udp_conn->ripaddr);
 8001e70:	880a      	ldrh	r2, [r1, #0]
 8001e72:	83da      	strh	r2, [r3, #30]
 8001e74:	884a      	ldrh	r2, [r1, #2]
 8001e76:	841a      	strh	r2, [r3, #32]
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPTCPH_LEN];
 8001e78:	3336      	adds	r3, #54	; 0x36
 8001e7a:	4a8b      	ldr	r2, [pc, #556]	; (80020a8 <uip_process+0x5c0>)
 8001e7c:	6013      	str	r3, [r2, #0]
  BUF->vhl = 0x45;
 8001e7e:	4c8e      	ldr	r4, [pc, #568]	; (80020b8 <uip_process+0x5d0>)
 8001e80:	2345      	movs	r3, #69	; 0x45
 8001e82:	73a3      	strb	r3, [r4, #14]
  BUF->tos = 0;
 8001e84:	2200      	movs	r2, #0
 8001e86:	73e2      	strb	r2, [r4, #15]
  BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
 8001e88:	7562      	strb	r2, [r4, #21]
 8001e8a:	7522      	strb	r2, [r4, #20]
  ++ipid;
 8001e8c:	498c      	ldr	r1, [pc, #560]	; (80020c0 <uip_process+0x5d8>)
 8001e8e:	880b      	ldrh	r3, [r1, #0]
 8001e90:	3301      	adds	r3, #1
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	800b      	strh	r3, [r1, #0]
  BUF->ipid[0] = ipid >> 8;
 8001e96:	0a19      	lsrs	r1, r3, #8
 8001e98:	74a1      	strb	r1, [r4, #18]
  BUF->ipid[1] = ipid & 0xff;
 8001e9a:	74e3      	strb	r3, [r4, #19]
  BUF->ipchksum = 0;
 8001e9c:	7622      	strb	r2, [r4, #24]
 8001e9e:	7662      	strb	r2, [r4, #25]
  BUF->ipchksum = ~(uip_ipchksum());
 8001ea0:	f7ff fdee 	bl	8001a80 <uip_ipchksum>
 8001ea4:	43c0      	mvns	r0, r0
 8001ea6:	8320      	strh	r0, [r4, #24]
  uip_flags = 0;
 8001ea8:	4b7b      	ldr	r3, [pc, #492]	; (8002098 <uip_process+0x5b0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
  return;
 8001eae:	e68c      	b.n	8001bca <uip_process+0xe2>
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8);
 8001eb0:	3308      	adds	r3, #8
 8001eb2:	4a81      	ldr	r2, [pc, #516]	; (80020b8 <uip_process+0x5d0>)
 8001eb4:	8493      	strh	r3, [r2, #36]	; 0x24
 8001eb6:	e674      	b.n	8001ba2 <uip_process+0xba>
  uip_len = uip_len - UIP_IPUDPH_LEN;
 8001eb8:	3d1c      	subs	r5, #28
 8001eba:	4b7e      	ldr	r3, [pc, #504]	; (80020b4 <uip_process+0x5cc>)
 8001ebc:	801d      	strh	r5, [r3, #0]
  for (uip_udp_conn = &uip_udp_conns[0];
 8001ebe:	4b77      	ldr	r3, [pc, #476]	; (800209c <uip_process+0x5b4>)
 8001ec0:	4a80      	ldr	r2, [pc, #512]	; (80020c4 <uip_process+0x5dc>)
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	e00e      	b.n	8001ee4 <uip_process+0x3fc>
        (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
 8001ec6:	881a      	ldrh	r2, [r3, #0]
         uip_udp_conn->rport == HTONS(69)) &&
 8001ec8:	b90a      	cbnz	r2, 8001ece <uip_process+0x3e6>
        (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
 8001eca:	8859      	ldrh	r1, [r3, #2]
 8001ecc:	b329      	cbz	r1, 8001f1a <uip_process+0x432>
 8001ece:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ed2:	428a      	cmp	r2, r1
 8001ed4:	d01e      	beq.n	8001f14 <uip_process+0x42c>
         uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr)))
 8001ed6:	4978      	ldr	r1, [pc, #480]	; (80020b8 <uip_process+0x5d0>)
 8001ed8:	8b49      	ldrh	r1, [r1, #26]
         uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
 8001eda:	428a      	cmp	r2, r1
 8001edc:	d02d      	beq.n	8001f3a <uip_process+0x452>
       ++uip_udp_conn)
 8001ede:	3340      	adds	r3, #64	; 0x40
 8001ee0:	4a6e      	ldr	r2, [pc, #440]	; (800209c <uip_process+0x5b4>)
 8001ee2:	6013      	str	r3, [r2, #0]
       uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
 8001ee4:	4b6d      	ldr	r3, [pc, #436]	; (800209c <uip_process+0x5b4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
  for (uip_udp_conn = &uip_udp_conns[0];
 8001ee8:	4a77      	ldr	r2, [pc, #476]	; (80020c8 <uip_process+0x5e0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	f4bf ae68 	bcs.w	8001bc0 <uip_process+0xd8>
    if (uip_udp_conn->lport != 0 &&
 8001ef0:	889a      	ldrh	r2, [r3, #4]
 8001ef2:	2a00      	cmp	r2, #0
 8001ef4:	d0f3      	beq.n	8001ede <uip_process+0x3f6>
        UDPBUF->destport == uip_udp_conn->lport &&
 8001ef6:	4970      	ldr	r1, [pc, #448]	; (80020b8 <uip_process+0x5d0>)
 8001ef8:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    if (uip_udp_conn->lport != 0 &&
 8001efa:	428a      	cmp	r2, r1
 8001efc:	d1ef      	bne.n	8001ede <uip_process+0x3f6>
        (uip_udp_conn->rport == 0 ||
 8001efe:	88da      	ldrh	r2, [r3, #6]
        UDPBUF->destport == uip_udp_conn->lport &&
 8001f00:	2a00      	cmp	r2, #0
 8001f02:	d0e0      	beq.n	8001ec6 <uip_process+0x3de>
         UDPBUF->srcport == uip_udp_conn->rport ||
 8001f04:	496c      	ldr	r1, [pc, #432]	; (80020b8 <uip_process+0x5d0>)
 8001f06:	8c49      	ldrh	r1, [r1, #34]	; 0x22
        (uip_udp_conn->rport == 0 ||
 8001f08:	428a      	cmp	r2, r1
 8001f0a:	d0dc      	beq.n	8001ec6 <uip_process+0x3de>
         UDPBUF->srcport == uip_udp_conn->rport ||
 8001f0c:	f5b2 4f8a 	cmp.w	r2, #17664	; 0x4500
 8001f10:	d1e5      	bne.n	8001ede <uip_process+0x3f6>
 8001f12:	e7d8      	b.n	8001ec6 <uip_process+0x3de>
         uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
 8001f14:	8858      	ldrh	r0, [r3, #2]
 8001f16:	4288      	cmp	r0, r1
 8001f18:	d1dd      	bne.n	8001ed6 <uip_process+0x3ee>
  uip_conn = NULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	4a60      	ldr	r2, [pc, #384]	; (80020a0 <uip_process+0x5b8>)
 8001f1e:	6013      	str	r3, [r2, #0]
  uip_flags = UIP_NEWDATA;
 8001f20:	4a5d      	ldr	r2, [pc, #372]	; (8002098 <uip_process+0x5b0>)
 8001f22:	2102      	movs	r1, #2
 8001f24:	7011      	strb	r1, [r2, #0]
  uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
 8001f26:	4a5f      	ldr	r2, [pc, #380]	; (80020a4 <uip_process+0x5bc>)
 8001f28:	495f      	ldr	r1, [pc, #380]	; (80020a8 <uip_process+0x5c0>)
 8001f2a:	600a      	str	r2, [r1, #0]
 8001f2c:	495f      	ldr	r1, [pc, #380]	; (80020ac <uip_process+0x5c4>)
 8001f2e:	600a      	str	r2, [r1, #0]
  uip_slen = 0;
 8001f30:	4a5f      	ldr	r2, [pc, #380]	; (80020b0 <uip_process+0x5c8>)
 8001f32:	8013      	strh	r3, [r2, #0]
  UIP_UDP_APPCALL();
 8001f34:	f7ff fcdc 	bl	80018f0 <dhcpc_appcall>
 8001f38:	e772      	b.n	8001e20 <uip_process+0x338>
         uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr)))
 8001f3a:	4a5f      	ldr	r2, [pc, #380]	; (80020b8 <uip_process+0x5d0>)
 8001f3c:	8b91      	ldrh	r1, [r2, #28]
 8001f3e:	885a      	ldrh	r2, [r3, #2]
 8001f40:	4291      	cmp	r1, r2
 8001f42:	d1cc      	bne.n	8001ede <uip_process+0x3f6>
udp_found:
 8001f44:	e7e9      	b.n	8001f1a <uip_process+0x432>
  if (uip_tcpchksum() != 0xffff)
 8001f46:	f7ff fdc9 	bl	8001adc <uip_tcpchksum>
 8001f4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f4e:	4298      	cmp	r0, r3
 8001f50:	f47f ae36 	bne.w	8001bc0 <uip_process+0xd8>
  for (uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
 8001f54:	4c5d      	ldr	r4, [pc, #372]	; (80020cc <uip_process+0x5e4>)
 8001f56:	4b5d      	ldr	r3, [pc, #372]	; (80020cc <uip_process+0x5e4>)
 8001f58:	429c      	cmp	r4, r3
 8001f5a:	d95a      	bls.n	8002012 <uip_process+0x52a>
  if ((BUF->flags & TCP_CTL) != TCP_SYN)
 8001f5c:	4b56      	ldr	r3, [pc, #344]	; (80020b8 <uip_process+0x5d0>)
 8001f5e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001f62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d07f      	beq.n	800206a <uip_process+0x582>
  if (BUF->flags & TCP_RST)
 8001f6a:	4b53      	ldr	r3, [pc, #332]	; (80020b8 <uip_process+0x5d0>)
 8001f6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001f70:	f013 0f04 	tst.w	r3, #4
 8001f74:	f47f ae24 	bne.w	8001bc0 <uip_process+0xd8>
  BUF->flags = TCP_RST | TCP_ACK;
 8001f78:	494f      	ldr	r1, [pc, #316]	; (80020b8 <uip_process+0x5d0>)
 8001f7a:	2314      	movs	r3, #20
 8001f7c:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
  uip_len = UIP_IPTCPH_LEN;
 8001f80:	4b4c      	ldr	r3, [pc, #304]	; (80020b4 <uip_process+0x5cc>)
 8001f82:	2228      	movs	r2, #40	; 0x28
 8001f84:	801a      	strh	r2, [r3, #0]
  BUF->tcpoffset = 5 << 4;
 8001f86:	2350      	movs	r3, #80	; 0x50
 8001f88:	f881 302e 	strb.w	r3, [r1, #46]	; 0x2e
  c = BUF->seqno[3];
 8001f8c:	f891 0029 	ldrb.w	r0, [r1, #41]	; 0x29
  BUF->seqno[3] = BUF->ackno[3];
 8001f90:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8001f94:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  c = BUF->seqno[2];
 8001f98:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
  BUF->seqno[2] = BUF->ackno[2];
 8001f9c:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8001fa0:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  BUF->ackno[2] = c;
 8001fa4:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
  c = BUF->seqno[1];
 8001fa8:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
  BUF->seqno[1] = BUF->ackno[1];
 8001fac:	f891 402b 	ldrb.w	r4, [r1, #43]	; 0x2b
 8001fb0:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  BUF->ackno[1] = c;
 8001fb4:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b
  c = BUF->seqno[0];
 8001fb8:	f891 4026 	ldrb.w	r4, [r1, #38]	; 0x26
 8001fbc:	4d44      	ldr	r5, [pc, #272]	; (80020d0 <uip_process+0x5e8>)
 8001fbe:	702c      	strb	r4, [r5, #0]
  BUF->seqno[0] = BUF->ackno[0];
 8001fc0:	f891 502a 	ldrb.w	r5, [r1, #42]	; 0x2a
 8001fc4:	f881 5026 	strb.w	r5, [r1, #38]	; 0x26
  BUF->ackno[0] = c;
 8001fc8:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
  if (++BUF->ackno[3] == 0)
 8001fcc:	3001      	adds	r0, #1
 8001fce:	b2c0      	uxtb	r0, r0
 8001fd0:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
 8001fd4:	b960      	cbnz	r0, 8001ff0 <uip_process+0x508>
    if (++BUF->ackno[2] == 0)
 8001fd6:	3201      	adds	r2, #1
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
 8001fde:	b93a      	cbnz	r2, 8001ff0 <uip_process+0x508>
      if (++BUF->ackno[1] == 0)
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b
 8001fe8:	b913      	cbnz	r3, 8001ff0 <uip_process+0x508>
        ++BUF->ackno[0];
 8001fea:	3401      	adds	r4, #1
 8001fec:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
  tmp16 = BUF->srcport;
 8001ff0:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <uip_process+0x5d0>)
 8001ff2:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001ff4:	4937      	ldr	r1, [pc, #220]	; (80020d4 <uip_process+0x5ec>)
 8001ff6:	800a      	strh	r2, [r1, #0]
  BUF->srcport = BUF->destport;
 8001ff8:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8001ffa:	8459      	strh	r1, [r3, #34]	; 0x22
  BUF->destport = tmp16;
 8001ffc:	849a      	strh	r2, [r3, #36]	; 0x24
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
 8001ffe:	8b5a      	ldrh	r2, [r3, #26]
 8002000:	83da      	strh	r2, [r3, #30]
 8002002:	8b9a      	ldrh	r2, [r3, #28]
 8002004:	841a      	strh	r2, [r3, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 8002006:	4a2d      	ldr	r2, [pc, #180]	; (80020bc <uip_process+0x5d4>)
 8002008:	8811      	ldrh	r1, [r2, #0]
 800200a:	8359      	strh	r1, [r3, #26]
 800200c:	8852      	ldrh	r2, [r2, #2]
 800200e:	839a      	strh	r2, [r3, #28]
  goto tcp_send_noconn;
 8002010:	e62c      	b.n	8001c6c <uip_process+0x184>
    if (uip_connr->tcpstateflags != UIP_CLOSED &&
 8002012:	7e61      	ldrb	r1, [r4, #25]
 8002014:	b121      	cbz	r1, 8002020 <uip_process+0x538>
        BUF->destport == uip_connr->lport &&
 8002016:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <uip_process+0x5d0>)
 8002018:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800201a:	88a3      	ldrh	r3, [r4, #4]
    if (uip_connr->tcpstateflags != UIP_CLOSED &&
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <uip_process+0x53c>
       ++uip_connr)
 8002020:	3468      	adds	r4, #104	; 0x68
 8002022:	e798      	b.n	8001f56 <uip_process+0x46e>
        BUF->srcport == uip_connr->rport &&
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <uip_process+0x5d0>)
 8002026:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8002028:	88e3      	ldrh	r3, [r4, #6]
        BUF->destport == uip_connr->lport &&
 800202a:	429a      	cmp	r2, r3
 800202c:	d1f8      	bne.n	8002020 <uip_process+0x538>
        uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr))
 800202e:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <uip_process+0x5d0>)
 8002030:	8b5a      	ldrh	r2, [r3, #26]
 8002032:	8823      	ldrh	r3, [r4, #0]
        BUF->srcport == uip_connr->rport &&
 8002034:	429a      	cmp	r2, r3
 8002036:	d1f3      	bne.n	8002020 <uip_process+0x538>
        uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr))
 8002038:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <uip_process+0x5d0>)
 800203a:	8b9a      	ldrh	r2, [r3, #28]
 800203c:	8863      	ldrh	r3, [r4, #2]
 800203e:	429a      	cmp	r2, r3
 8002040:	d1ee      	bne.n	8002020 <uip_process+0x538>
  uip_conn = uip_connr;
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <uip_process+0x5b8>)
 8002044:	601c      	str	r4, [r3, #0]
  uip_flags = 0;
 8002046:	4b14      	ldr	r3, [pc, #80]	; (8002098 <uip_process+0x5b0>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
  if (BUF->flags & TCP_RST)
 800204c:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <uip_process+0x5d0>)
 800204e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8002052:	f012 0f04 	tst.w	r2, #4
 8002056:	f000 80da 	beq.w	800220e <uip_process+0x726>
    uip_connr->tcpstateflags = UIP_CLOSED;
 800205a:	2300      	movs	r3, #0
 800205c:	7663      	strb	r3, [r4, #25]
    uip_flags = UIP_ABORT;
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <uip_process+0x5b0>)
 8002060:	2220      	movs	r2, #32
 8002062:	701a      	strb	r2, [r3, #0]
    UIP_APPCALL();
 8002064:	f7fe ff8c 	bl	8000f80 <NetApp>
    goto drop;
 8002068:	e5aa      	b.n	8001bc0 <uip_process+0xd8>
  tmp16 = BUF->destport;
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <uip_process+0x5d0>)
 800206c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800206e:	b299      	uxth	r1, r3
 8002070:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <uip_process+0x5ec>)
 8002072:	8013      	strh	r3, [r2, #0]
  for (c = 0; c < UIP_LISTENPORTS; ++c)
 8002074:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <uip_process+0x5e8>)
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <uip_process+0x5e8>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	f47f af73 	bne.w	8001f6a <uip_process+0x482>
    if (tmp16 == uip_listenports[c])
 8002084:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <uip_process+0x5f0>)
 8002086:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800208a:	4291      	cmp	r1, r2
 800208c:	d026      	beq.n	80020dc <uip_process+0x5f4>
  for (c = 0; c < UIP_LISTENPORTS; ++c)
 800208e:	3301      	adds	r3, #1
 8002090:	4a0f      	ldr	r2, [pc, #60]	; (80020d0 <uip_process+0x5e8>)
 8002092:	7013      	strb	r3, [r2, #0]
 8002094:	e7f1      	b.n	800207a <uip_process+0x592>
 8002096:	bf00      	nop
 8002098:	20000630 	.word	0x20000630
 800209c:	20000634 	.word	0x20000634
 80020a0:	2000063c 	.word	0x2000063c
 80020a4:	200006e2 	.word	0x200006e2
 80020a8:	20000638 	.word	0x20000638
 80020ac:	20000628 	.word	0x20000628
 80020b0:	20000cfa 	.word	0x20000cfa
 80020b4:	20000624 	.word	0x20000624
 80020b8:	200006b8 	.word	0x200006b8
 80020bc:	200006b4 	.word	0x200006b4
 80020c0:	20000596 	.word	0x20000596
 80020c4:	20000cfc 	.word	0x20000cfc
 80020c8:	20000d3c 	.word	0x20000d3c
 80020cc:	20000640 	.word	0x20000640
 80020d0:	20000594 	.word	0x20000594
 80020d4:	2000059e 	.word	0x2000059e
 80020d8:	200006a8 	.word	0x200006a8
  for (c = 0; c < UIP_CONNS; ++c)
 80020dc:	2400      	movs	r4, #0
 80020de:	4b9a      	ldr	r3, [pc, #616]	; (8002348 <uip_process+0x860>)
 80020e0:	701c      	strb	r4, [r3, #0]
 80020e2:	e00b      	b.n	80020fc <uip_process+0x614>
    if (uip_conns[c].tcpstateflags == UIP_CLOSED)
 80020e4:	4619      	mov	r1, r3
 80020e6:	4899      	ldr	r0, [pc, #612]	; (800234c <uip_process+0x864>)
 80020e8:	2268      	movs	r2, #104	; 0x68
 80020ea:	fb02 0203 	mla	r2, r2, r3, r0
 80020ee:	7e52      	ldrb	r2, [r2, #25]
 80020f0:	b14a      	cbz	r2, 8002106 <uip_process+0x61e>
    if (uip_conns[c].tcpstateflags == UIP_TIME_WAIT)
 80020f2:	2a07      	cmp	r2, #7
 80020f4:	d056      	beq.n	80021a4 <uip_process+0x6bc>
  for (c = 0; c < UIP_CONNS; ++c)
 80020f6:	3301      	adds	r3, #1
 80020f8:	4a93      	ldr	r2, [pc, #588]	; (8002348 <uip_process+0x860>)
 80020fa:	7013      	strb	r3, [r2, #0]
 80020fc:	4b92      	ldr	r3, [pc, #584]	; (8002348 <uip_process+0x860>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ef      	beq.n	80020e4 <uip_process+0x5fc>
 8002104:	e002      	b.n	800210c <uip_process+0x624>
      uip_connr = &uip_conns[c];
 8002106:	2468      	movs	r4, #104	; 0x68
 8002108:	fb04 0401 	mla	r4, r4, r1, r0
  if (uip_connr == 0)
 800210c:	2c00      	cmp	r4, #0
 800210e:	f43f ad57 	beq.w	8001bc0 <uip_process+0xd8>
  uip_conn = uip_connr;
 8002112:	4b8f      	ldr	r3, [pc, #572]	; (8002350 <uip_process+0x868>)
 8002114:	601c      	str	r4, [r3, #0]
  uip_connr->rto = uip_connr->timer = UIP_RTO;
 8002116:	2303      	movs	r3, #3
 8002118:	76a3      	strb	r3, [r4, #26]
 800211a:	7623      	strb	r3, [r4, #24]
  uip_connr->sa = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	75a3      	strb	r3, [r4, #22]
  uip_connr->sv = 4;
 8002120:	2204      	movs	r2, #4
 8002122:	75e2      	strb	r2, [r4, #23]
  uip_connr->nrtx = 0;
 8002124:	76e3      	strb	r3, [r4, #27]
  uip_connr->lport = BUF->destport;
 8002126:	4d8b      	ldr	r5, [pc, #556]	; (8002354 <uip_process+0x86c>)
 8002128:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800212a:	80a3      	strh	r3, [r4, #4]
  uip_connr->rport = BUF->srcport;
 800212c:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800212e:	80e3      	strh	r3, [r4, #6]
  uip_ipaddr_copy(uip_connr->ripaddr, BUF->srcipaddr);
 8002130:	8b6b      	ldrh	r3, [r5, #26]
 8002132:	8023      	strh	r3, [r4, #0]
 8002134:	8bab      	ldrh	r3, [r5, #28]
 8002136:	8063      	strh	r3, [r4, #2]
  uip_connr->tcpstateflags = UIP_SYN_RCVD;
 8002138:	2001      	movs	r0, #1
 800213a:	7660      	strb	r0, [r4, #25]
  uip_connr->snd_nxt[0] = iss[0];
 800213c:	4b86      	ldr	r3, [pc, #536]	; (8002358 <uip_process+0x870>)
 800213e:	781a      	ldrb	r2, [r3, #0]
 8002140:	7322      	strb	r2, [r4, #12]
  uip_connr->snd_nxt[1] = iss[1];
 8002142:	785a      	ldrb	r2, [r3, #1]
 8002144:	7362      	strb	r2, [r4, #13]
  uip_connr->snd_nxt[2] = iss[2];
 8002146:	789a      	ldrb	r2, [r3, #2]
 8002148:	73a2      	strb	r2, [r4, #14]
  uip_connr->snd_nxt[3] = iss[3];
 800214a:	78db      	ldrb	r3, [r3, #3]
 800214c:	73e3      	strb	r3, [r4, #15]
  uip_connr->len = 1;
 800214e:	8220      	strh	r0, [r4, #16]
  uip_connr->rcv_nxt[3] = BUF->seqno[3];
 8002150:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8002154:	72e3      	strb	r3, [r4, #11]
  uip_connr->rcv_nxt[2] = BUF->seqno[2];
 8002156:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800215a:	72a3      	strb	r3, [r4, #10]
  uip_connr->rcv_nxt[1] = BUF->seqno[1];
 800215c:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 8002160:	7263      	strb	r3, [r4, #9]
  uip_connr->rcv_nxt[0] = BUF->seqno[0];
 8002162:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 8002166:	7223      	strb	r3, [r4, #8]
  uip_add_rcv_nxt(1);
 8002168:	f7ff fc14 	bl	8001994 <uip_add_rcv_nxt>
  if ((BUF->tcpoffset & 0xf0) > 0x50)
 800216c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
 8002170:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8002174:	2b50      	cmp	r3, #80	; 0x50
 8002176:	d93b      	bls.n	80021f0 <uip_process+0x708>
    for (c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;)
 8002178:	4b73      	ldr	r3, [pc, #460]	; (8002348 <uip_process+0x860>)
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
 800217e:	4b72      	ldr	r3, [pc, #456]	; (8002348 <uip_process+0x860>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	0901      	lsrs	r1, r0, #4
 8002186:	3905      	subs	r1, #5
 8002188:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 800218c:	da30      	bge.n	80021f0 <uip_process+0x708>
      opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
 800218e:	f103 0136 	add.w	r1, r3, #54	; 0x36
 8002192:	4d70      	ldr	r5, [pc, #448]	; (8002354 <uip_process+0x86c>)
 8002194:	5c69      	ldrb	r1, [r5, r1]
      if (opt == TCP_OPT_END)
 8002196:	b359      	cbz	r1, 80021f0 <uip_process+0x708>
      else if (opt == TCP_OPT_NOOP)
 8002198:	2901      	cmp	r1, #1
 800219a:	d111      	bne.n	80021c0 <uip_process+0x6d8>
        ++c;
 800219c:	3301      	adds	r3, #1
 800219e:	4a6a      	ldr	r2, [pc, #424]	; (8002348 <uip_process+0x860>)
 80021a0:	7013      	strb	r3, [r2, #0]
 80021a2:	e7ec      	b.n	800217e <uip_process+0x696>
      if (uip_connr == 0 ||
 80021a4:	b13c      	cbz	r4, 80021b6 <uip_process+0x6ce>
          uip_conns[c].timer > uip_connr->timer)
 80021a6:	4969      	ldr	r1, [pc, #420]	; (800234c <uip_process+0x864>)
 80021a8:	2268      	movs	r2, #104	; 0x68
 80021aa:	fb02 1203 	mla	r2, r2, r3, r1
 80021ae:	7e91      	ldrb	r1, [r2, #26]
 80021b0:	7ea2      	ldrb	r2, [r4, #26]
      if (uip_connr == 0 ||
 80021b2:	4291      	cmp	r1, r2
 80021b4:	d99f      	bls.n	80020f6 <uip_process+0x60e>
        uip_connr = &uip_conns[c];
 80021b6:	2468      	movs	r4, #104	; 0x68
 80021b8:	4a64      	ldr	r2, [pc, #400]	; (800234c <uip_process+0x864>)
 80021ba:	fb04 2403 	mla	r4, r4, r3, r2
 80021be:	e79a      	b.n	80020f6 <uip_process+0x60e>
      else if (opt == TCP_OPT_MSS &&
 80021c0:	2902      	cmp	r1, #2
 80021c2:	d11a      	bne.n	80021fa <uip_process+0x712>
               uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN)
 80021c4:	f103 0137 	add.w	r1, r3, #55	; 0x37
 80021c8:	4d62      	ldr	r5, [pc, #392]	; (8002354 <uip_process+0x86c>)
 80021ca:	5c69      	ldrb	r1, [r5, r1]
      else if (opt == TCP_OPT_MSS &&
 80021cc:	2904      	cmp	r1, #4
 80021ce:	d114      	bne.n	80021fa <uip_process+0x712>
        tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 80021d0:	f102 0138 	add.w	r1, r2, #56	; 0x38
 80021d4:	5c69      	ldrb	r1, [r5, r1]
                (u16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
 80021d6:	3239      	adds	r2, #57	; 0x39
 80021d8:	5cab      	ldrb	r3, [r5, r2]
        tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 80021da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80021de:	4a5f      	ldr	r2, [pc, #380]	; (800235c <uip_process+0x874>)
 80021e0:	8013      	strh	r3, [r2, #0]
                                  tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
 80021e2:	f240 620a 	movw	r2, #1546	; 0x60a
 80021e6:	4293      	cmp	r3, r2
 80021e8:	bf28      	it	cs
 80021ea:	4613      	movcs	r3, r2
        uip_connr->initialmss = uip_connr->mss =
 80021ec:	8263      	strh	r3, [r4, #18]
 80021ee:	82a3      	strh	r3, [r4, #20]
  BUF->flags = TCP_ACK;
 80021f0:	4b58      	ldr	r3, [pc, #352]	; (8002354 <uip_process+0x86c>)
 80021f2:	2210      	movs	r2, #16
 80021f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80021f8:	e5bc      	b.n	8001d74 <uip_process+0x28c>
        if (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0)
 80021fa:	f103 0237 	add.w	r2, r3, #55	; 0x37
 80021fe:	4955      	ldr	r1, [pc, #340]	; (8002354 <uip_process+0x86c>)
 8002200:	5c8a      	ldrb	r2, [r1, r2]
 8002202:	2a00      	cmp	r2, #0
 8002204:	d0f4      	beq.n	80021f0 <uip_process+0x708>
        c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
 8002206:	4413      	add	r3, r2
 8002208:	4a4f      	ldr	r2, [pc, #316]	; (8002348 <uip_process+0x860>)
 800220a:	7013      	strb	r3, [r2, #0]
 800220c:	e7b7      	b.n	800217e <uip_process+0x696>
  c = (BUF->tcpoffset >> 4) << 2;
 800220e:	4b51      	ldr	r3, [pc, #324]	; (8002354 <uip_process+0x86c>)
 8002210:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	484b      	ldr	r0, [pc, #300]	; (8002348 <uip_process+0x860>)
 800221a:	7003      	strb	r3, [r0, #0]
  uip_len = uip_len - c - UIP_IPH_LEN;
 800221c:	1aeb      	subs	r3, r5, r3
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b14      	subs	r3, #20
 8002222:	b29b      	uxth	r3, r3
 8002224:	484e      	ldr	r0, [pc, #312]	; (8002360 <uip_process+0x878>)
 8002226:	8003      	strh	r3, [r0, #0]
  if (!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
 8002228:	f001 010f 	and.w	r1, r1, #15
 800222c:	2902      	cmp	r1, #2
 800222e:	d103      	bne.n	8002238 <uip_process+0x750>
 8002230:	f002 013f 	and.w	r1, r2, #63	; 0x3f
 8002234:	2912      	cmp	r1, #18
 8002236:	d00f      	beq.n	8002258 <uip_process+0x770>
    if ((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
 8002238:	b913      	cbnz	r3, 8002240 <uip_process+0x758>
 800223a:	f012 0f03 	tst.w	r2, #3
 800223e:	d00b      	beq.n	8002258 <uip_process+0x770>
        (BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
 8002240:	4b44      	ldr	r3, [pc, #272]	; (8002354 <uip_process+0x86c>)
 8002242:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 8002244:	8923      	ldrh	r3, [r4, #8]
    if ((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
 8002246:	4299      	cmp	r1, r3
 8002248:	f040 81e7 	bne.w	800261a <uip_process+0xb32>
         BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
 800224c:	4b41      	ldr	r3, [pc, #260]	; (8002354 <uip_process+0x86c>)
 800224e:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8002250:	8963      	ldrh	r3, [r4, #10]
 8002252:	4299      	cmp	r1, r3
 8002254:	f040 81e1 	bne.w	800261a <uip_process+0xb32>
  if ((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr))
 8002258:	f012 0f10 	tst.w	r2, #16
 800225c:	d047      	beq.n	80022ee <uip_process+0x806>
 800225e:	8a21      	ldrh	r1, [r4, #16]
 8002260:	2900      	cmp	r1, #0
 8002262:	d044      	beq.n	80022ee <uip_process+0x806>
    uip_add32(uip_connr->snd_nxt, uip_connr->len);
 8002264:	f104 000c 	add.w	r0, r4, #12
 8002268:	f7ff fb66 	bl	8001938 <uip_add32>
    if (BUF->ackno[0] == uip_acc32[0] &&
 800226c:	4b39      	ldr	r3, [pc, #228]	; (8002354 <uip_process+0x86c>)
 800226e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002272:	4a3c      	ldr	r2, [pc, #240]	; (8002364 <uip_process+0x87c>)
 8002274:	7810      	ldrb	r0, [r2, #0]
 8002276:	4283      	cmp	r3, r0
 8002278:	d139      	bne.n	80022ee <uip_process+0x806>
        BUF->ackno[1] == uip_acc32[1] &&
 800227a:	4b36      	ldr	r3, [pc, #216]	; (8002354 <uip_process+0x86c>)
 800227c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002280:	7851      	ldrb	r1, [r2, #1]
    if (BUF->ackno[0] == uip_acc32[0] &&
 8002282:	428b      	cmp	r3, r1
 8002284:	d133      	bne.n	80022ee <uip_process+0x806>
        BUF->ackno[2] == uip_acc32[2] &&
 8002286:	4b33      	ldr	r3, [pc, #204]	; (8002354 <uip_process+0x86c>)
 8002288:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800228c:	7892      	ldrb	r2, [r2, #2]
        BUF->ackno[1] == uip_acc32[1] &&
 800228e:	4293      	cmp	r3, r2
 8002290:	d12d      	bne.n	80022ee <uip_process+0x806>
        BUF->ackno[3] == uip_acc32[3])
 8002292:	4b30      	ldr	r3, [pc, #192]	; (8002354 <uip_process+0x86c>)
 8002294:	f893 502d 	ldrb.w	r5, [r3, #45]	; 0x2d
 8002298:	4b32      	ldr	r3, [pc, #200]	; (8002364 <uip_process+0x87c>)
 800229a:	78db      	ldrb	r3, [r3, #3]
        BUF->ackno[2] == uip_acc32[2] &&
 800229c:	429d      	cmp	r5, r3
 800229e:	d126      	bne.n	80022ee <uip_process+0x806>
      uip_connr->snd_nxt[0] = uip_acc32[0];
 80022a0:	7320      	strb	r0, [r4, #12]
      uip_connr->snd_nxt[1] = uip_acc32[1];
 80022a2:	7361      	strb	r1, [r4, #13]
      uip_connr->snd_nxt[2] = uip_acc32[2];
 80022a4:	73a2      	strb	r2, [r4, #14]
      uip_connr->snd_nxt[3] = uip_acc32[3];
 80022a6:	73e3      	strb	r3, [r4, #15]
      if (uip_connr->nrtx == 0)
 80022a8:	7ee3      	ldrb	r3, [r4, #27]
 80022aa:	b9cb      	cbnz	r3, 80022e0 <uip_process+0x7f8>
        m = uip_connr->rto - uip_connr->timer;
 80022ac:	7e23      	ldrb	r3, [r4, #24]
 80022ae:	7ea2      	ldrb	r2, [r4, #26]
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	b2db      	uxtb	r3, r3
        m = m - (uip_connr->sa >> 3);
 80022b4:	7da1      	ldrb	r1, [r4, #22]
 80022b6:	eba3 03d1 	sub.w	r3, r3, r1, lsr #3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	b25a      	sxtb	r2, r3
        uip_connr->sa += m;
 80022be:	4419      	add	r1, r3
 80022c0:	b2c9      	uxtb	r1, r1
 80022c2:	75a1      	strb	r1, [r4, #22]
        if (m < 0)
 80022c4:	2a00      	cmp	r2, #0
 80022c6:	da01      	bge.n	80022cc <uip_process+0x7e4>
          m = -m;
 80022c8:	425b      	negs	r3, r3
 80022ca:	b25a      	sxtb	r2, r3
        m = m - (uip_connr->sv >> 2);
 80022cc:	7de0      	ldrb	r0, [r4, #23]
 80022ce:	eba2 0390 	sub.w	r3, r2, r0, lsr #2
        uip_connr->sv += m;
 80022d2:	fa50 f383 	uxtab	r3, r0, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	75e3      	strb	r3, [r4, #23]
        uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;
 80022da:	eb03 03d1 	add.w	r3, r3, r1, lsr #3
 80022de:	7623      	strb	r3, [r4, #24]
      uip_flags = UIP_ACKDATA;
 80022e0:	4b21      	ldr	r3, [pc, #132]	; (8002368 <uip_process+0x880>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
      uip_connr->timer = uip_connr->rto;
 80022e6:	7e23      	ldrb	r3, [r4, #24]
 80022e8:	76a3      	strb	r3, [r4, #26]
      uip_connr->len = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	8223      	strh	r3, [r4, #16]
  switch (uip_connr->tcpstateflags & UIP_TS_MASK)
 80022ee:	7e61      	ldrb	r1, [r4, #25]
 80022f0:	f001 030f 	and.w	r3, r1, #15
 80022f4:	3b01      	subs	r3, #1
 80022f6:	2b07      	cmp	r3, #7
 80022f8:	f63f ac62 	bhi.w	8001bc0 <uip_process+0xd8>
 80022fc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002300:	00380008 	.word	0x00380008
 8002304:	017000ac 	.word	0x017000ac
 8002308:	01d801ba 	.word	0x01d801ba
 800230c:	0161018d 	.word	0x0161018d
      if (uip_flags & UIP_ACKDATA)
 8002310:	4b15      	ldr	r3, [pc, #84]	; (8002368 <uip_process+0x880>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	f013 0f01 	tst.w	r3, #1
 8002318:	f43f ac52 	beq.w	8001bc0 <uip_process+0xd8>
        uip_connr->tcpstateflags = UIP_ESTABLISHED;
 800231c:	2303      	movs	r3, #3
 800231e:	7663      	strb	r3, [r4, #25]
        uip_flags = UIP_CONNECTED;
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <uip_process+0x880>)
 8002322:	2240      	movs	r2, #64	; 0x40
 8002324:	701a      	strb	r2, [r3, #0]
        uip_connr->len = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	8223      	strh	r3, [r4, #16]
        if (uip_len > 0)
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <uip_process+0x878>)
 800232c:	8818      	ldrh	r0, [r3, #0]
 800232e:	b120      	cbz	r0, 800233a <uip_process+0x852>
          uip_flags |= UIP_NEWDATA;
 8002330:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <uip_process+0x880>)
 8002332:	2242      	movs	r2, #66	; 0x42
 8002334:	701a      	strb	r2, [r3, #0]
          uip_add_rcv_nxt(uip_len);
 8002336:	f7ff fb2d 	bl	8001994 <uip_add_rcv_nxt>
        uip_slen = 0;
 800233a:	4b0c      	ldr	r3, [pc, #48]	; (800236c <uip_process+0x884>)
 800233c:	2200      	movs	r2, #0
 800233e:	801a      	strh	r2, [r3, #0]
        UIP_APPCALL();
 8002340:	f7fe fe1e 	bl	8000f80 <NetApp>
        goto appsend;
 8002344:	e44a      	b.n	8001bdc <uip_process+0xf4>
 8002346:	bf00      	nop
 8002348:	20000594 	.word	0x20000594
 800234c:	20000640 	.word	0x20000640
 8002350:	2000063c 	.word	0x2000063c
 8002354:	200006b8 	.word	0x200006b8
 8002358:	20000598 	.word	0x20000598
 800235c:	2000059e 	.word	0x2000059e
 8002360:	20000624 	.word	0x20000624
 8002364:	2000062c 	.word	0x2000062c
 8002368:	20000630 	.word	0x20000630
 800236c:	20000cfa 	.word	0x20000cfa
      if ((uip_flags & UIP_ACKDATA) &&
 8002370:	4bad      	ldr	r3, [pc, #692]	; (8002628 <uip_process+0xb40>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	f013 0f01 	tst.w	r3, #1
 8002378:	d064      	beq.n	8002444 <uip_process+0x95c>
          (BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK))
 800237a:	4bac      	ldr	r3, [pc, #688]	; (800262c <uip_process+0xb44>)
 800237c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
      if ((uip_flags & UIP_ACKDATA) &&
 8002380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002384:	2b12      	cmp	r3, #18
 8002386:	d15d      	bne.n	8002444 <uip_process+0x95c>
        if ((BUF->tcpoffset & 0xf0) > 0x50)
 8002388:	4ba8      	ldr	r3, [pc, #672]	; (800262c <uip_process+0xb44>)
 800238a:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
 800238e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8002392:	2b50      	cmp	r3, #80	; 0x50
 8002394:	d92d      	bls.n	80023f2 <uip_process+0x90a>
          for (c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;)
 8002396:	4ba6      	ldr	r3, [pc, #664]	; (8002630 <uip_process+0xb48>)
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
 800239c:	4ba4      	ldr	r3, [pc, #656]	; (8002630 <uip_process+0xb48>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	0901      	lsrs	r1, r0, #4
 80023a4:	3905      	subs	r1, #5
 80023a6:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 80023aa:	da22      	bge.n	80023f2 <uip_process+0x90a>
            opt = uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + c];
 80023ac:	f103 0136 	add.w	r1, r3, #54	; 0x36
 80023b0:	4d9e      	ldr	r5, [pc, #632]	; (800262c <uip_process+0xb44>)
 80023b2:	5c69      	ldrb	r1, [r5, r1]
            if (opt == TCP_OPT_END)
 80023b4:	b1e9      	cbz	r1, 80023f2 <uip_process+0x90a>
            else if (opt == TCP_OPT_NOOP)
 80023b6:	2901      	cmp	r1, #1
 80023b8:	d103      	bne.n	80023c2 <uip_process+0x8da>
              ++c;
 80023ba:	3301      	adds	r3, #1
 80023bc:	4a9c      	ldr	r2, [pc, #624]	; (8002630 <uip_process+0xb48>)
 80023be:	7013      	strb	r3, [r2, #0]
 80023c0:	e7ec      	b.n	800239c <uip_process+0x8b4>
            else if (opt == TCP_OPT_MSS &&
 80023c2:	2902      	cmp	r1, #2
 80023c4:	d134      	bne.n	8002430 <uip_process+0x948>
                     uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN)
 80023c6:	f103 0137 	add.w	r1, r3, #55	; 0x37
 80023ca:	4d98      	ldr	r5, [pc, #608]	; (800262c <uip_process+0xb44>)
 80023cc:	5c69      	ldrb	r1, [r5, r1]
            else if (opt == TCP_OPT_MSS &&
 80023ce:	2904      	cmp	r1, #4
 80023d0:	d12e      	bne.n	8002430 <uip_process+0x948>
              tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 80023d2:	f102 0138 	add.w	r1, r2, #56	; 0x38
 80023d6:	5c69      	ldrb	r1, [r5, r1]
                      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
 80023d8:	3239      	adds	r2, #57	; 0x39
 80023da:	5cab      	ldrb	r3, [r5, r2]
              tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 80023dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80023e0:	4a94      	ldr	r2, [pc, #592]	; (8002634 <uip_process+0xb4c>)
 80023e2:	8013      	strh	r3, [r2, #0]
                uip_connr->mss = tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
 80023e4:	f240 620a 	movw	r2, #1546	; 0x60a
 80023e8:	4293      	cmp	r3, r2
 80023ea:	bf28      	it	cs
 80023ec:	4613      	movcs	r3, r2
 80023ee:	8263      	strh	r3, [r4, #18]
              uip_connr->initialmss =
 80023f0:	82a3      	strh	r3, [r4, #20]
        uip_connr->tcpstateflags = UIP_ESTABLISHED;
 80023f2:	2303      	movs	r3, #3
 80023f4:	7663      	strb	r3, [r4, #25]
        uip_connr->rcv_nxt[0] = BUF->seqno[0];
 80023f6:	4b8d      	ldr	r3, [pc, #564]	; (800262c <uip_process+0xb44>)
 80023f8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80023fc:	7222      	strb	r2, [r4, #8]
        uip_connr->rcv_nxt[1] = BUF->seqno[1];
 80023fe:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8002402:	7262      	strb	r2, [r4, #9]
        uip_connr->rcv_nxt[2] = BUF->seqno[2];
 8002404:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8002408:	72a2      	strb	r2, [r4, #10]
        uip_connr->rcv_nxt[3] = BUF->seqno[3];
 800240a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800240e:	72e3      	strb	r3, [r4, #11]
        uip_add_rcv_nxt(1);
 8002410:	2001      	movs	r0, #1
 8002412:	f7ff fabf 	bl	8001994 <uip_add_rcv_nxt>
        uip_flags = UIP_CONNECTED | UIP_NEWDATA;
 8002416:	4b84      	ldr	r3, [pc, #528]	; (8002628 <uip_process+0xb40>)
 8002418:	2242      	movs	r2, #66	; 0x42
 800241a:	701a      	strb	r2, [r3, #0]
        uip_connr->len = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	8223      	strh	r3, [r4, #16]
        uip_len = 0;
 8002420:	4a85      	ldr	r2, [pc, #532]	; (8002638 <uip_process+0xb50>)
 8002422:	8013      	strh	r3, [r2, #0]
        uip_slen = 0;
 8002424:	4a85      	ldr	r2, [pc, #532]	; (800263c <uip_process+0xb54>)
 8002426:	8013      	strh	r3, [r2, #0]
        UIP_APPCALL();
 8002428:	f7fe fdaa 	bl	8000f80 <NetApp>
        goto appsend;
 800242c:	f7ff bbd6 	b.w	8001bdc <uip_process+0xf4>
              if (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0)
 8002430:	f103 0237 	add.w	r2, r3, #55	; 0x37
 8002434:	497d      	ldr	r1, [pc, #500]	; (800262c <uip_process+0xb44>)
 8002436:	5c8a      	ldrb	r2, [r1, r2]
 8002438:	2a00      	cmp	r2, #0
 800243a:	d0da      	beq.n	80023f2 <uip_process+0x90a>
              c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
 800243c:	4413      	add	r3, r2
 800243e:	4a7c      	ldr	r2, [pc, #496]	; (8002630 <uip_process+0xb48>)
 8002440:	7013      	strb	r3, [r2, #0]
 8002442:	e7ab      	b.n	800239c <uip_process+0x8b4>
      uip_flags = UIP_ABORT;
 8002444:	4b78      	ldr	r3, [pc, #480]	; (8002628 <uip_process+0xb40>)
 8002446:	2220      	movs	r2, #32
 8002448:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
 800244a:	f7fe fd99 	bl	8000f80 <NetApp>
      uip_conn->tcpstateflags = UIP_CLOSED;
 800244e:	4b7c      	ldr	r3, [pc, #496]	; (8002640 <uip_process+0xb58>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2200      	movs	r2, #0
 8002454:	765a      	strb	r2, [r3, #25]
      goto reset;
 8002456:	e588      	b.n	8001f6a <uip_process+0x482>
      if (BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED))
 8002458:	4b74      	ldr	r3, [pc, #464]	; (800262c <uip_process+0xb44>)
 800245a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800245e:	f013 0f01 	tst.w	r3, #1
 8002462:	d025      	beq.n	80024b0 <uip_process+0x9c8>
 8002464:	f011 0f10 	tst.w	r1, #16
 8002468:	d122      	bne.n	80024b0 <uip_process+0x9c8>
        if (uip_outstanding(uip_connr))
 800246a:	8a23      	ldrh	r3, [r4, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	f47f aba7 	bne.w	8001bc0 <uip_process+0xd8>
        uip_add_rcv_nxt(1 + uip_len);
 8002472:	4d71      	ldr	r5, [pc, #452]	; (8002638 <uip_process+0xb50>)
 8002474:	8828      	ldrh	r0, [r5, #0]
 8002476:	3001      	adds	r0, #1
 8002478:	b280      	uxth	r0, r0
 800247a:	f7ff fa8b 	bl	8001994 <uip_add_rcv_nxt>
        uip_flags |= UIP_CLOSE;
 800247e:	4a6a      	ldr	r2, [pc, #424]	; (8002628 <uip_process+0xb40>)
 8002480:	7813      	ldrb	r3, [r2, #0]
 8002482:	f043 0310 	orr.w	r3, r3, #16
 8002486:	7013      	strb	r3, [r2, #0]
        if (uip_len > 0)
 8002488:	882a      	ldrh	r2, [r5, #0]
 800248a:	b11a      	cbz	r2, 8002494 <uip_process+0x9ac>
          uip_flags |= UIP_NEWDATA;
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	4a65      	ldr	r2, [pc, #404]	; (8002628 <uip_process+0xb40>)
 8002492:	7013      	strb	r3, [r2, #0]
        UIP_APPCALL();
 8002494:	f7fe fd74 	bl	8000f80 <NetApp>
        uip_connr->len = 1;
 8002498:	2301      	movs	r3, #1
 800249a:	8223      	strh	r3, [r4, #16]
        uip_connr->tcpstateflags = UIP_LAST_ACK;
 800249c:	2308      	movs	r3, #8
 800249e:	7663      	strb	r3, [r4, #25]
        uip_connr->nrtx = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	76e3      	strb	r3, [r4, #27]
        BUF->flags = TCP_FIN | TCP_ACK;
 80024a4:	4b61      	ldr	r3, [pc, #388]	; (800262c <uip_process+0xb44>)
 80024a6:	2211      	movs	r2, #17
 80024a8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        goto tcp_send_nodata;
 80024ac:	f7ff bba4 	b.w	8001bf8 <uip_process+0x110>
      if ((BUF->flags & TCP_URG) != 0)
 80024b0:	f013 0f20 	tst.w	r3, #32
 80024b4:	d00f      	beq.n	80024d6 <uip_process+0x9ee>
        uip_appdata = ((char *)uip_appdata) + ((BUF->urgp[0] << 8) | BUF->urgp[1]);
 80024b6:	485d      	ldr	r0, [pc, #372]	; (800262c <uip_process+0xb44>)
 80024b8:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80024bc:	021a      	lsls	r2, r3, #8
 80024be:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80024c2:	ea42 0603 	orr.w	r6, r2, r3
 80024c6:	4d5f      	ldr	r5, [pc, #380]	; (8002644 <uip_process+0xb5c>)
 80024c8:	6828      	ldr	r0, [r5, #0]
 80024ca:	4430      	add	r0, r6
 80024cc:	6028      	str	r0, [r5, #0]
        uip_len -= (BUF->urgp[0] << 8) | BUF->urgp[1];
 80024ce:	485a      	ldr	r0, [pc, #360]	; (8002638 <uip_process+0xb50>)
 80024d0:	8802      	ldrh	r2, [r0, #0]
 80024d2:	1b93      	subs	r3, r2, r6
 80024d4:	8003      	strh	r3, [r0, #0]
      if (uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED))
 80024d6:	4b58      	ldr	r3, [pc, #352]	; (8002638 <uip_process+0xb50>)
 80024d8:	8818      	ldrh	r0, [r3, #0]
 80024da:	b148      	cbz	r0, 80024f0 <uip_process+0xa08>
 80024dc:	f011 0f10 	tst.w	r1, #16
 80024e0:	d106      	bne.n	80024f0 <uip_process+0xa08>
        uip_flags |= UIP_NEWDATA;
 80024e2:	4a51      	ldr	r2, [pc, #324]	; (8002628 <uip_process+0xb40>)
 80024e4:	7813      	ldrb	r3, [r2, #0]
 80024e6:	f043 0302 	orr.w	r3, r3, #2
 80024ea:	7013      	strb	r3, [r2, #0]
        uip_add_rcv_nxt(uip_len);
 80024ec:	f7ff fa52 	bl	8001994 <uip_add_rcv_nxt>
      tmp16 = ((u16_t)BUF->wnd[0] << 8) + (u16_t)BUF->wnd[1];
 80024f0:	4b4e      	ldr	r3, [pc, #312]	; (800262c <uip_process+0xb44>)
 80024f2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80024f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80024fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80024fe:	b29b      	uxth	r3, r3
 8002500:	4a4c      	ldr	r2, [pc, #304]	; (8002634 <uip_process+0xb4c>)
 8002502:	8013      	strh	r3, [r2, #0]
      if (tmp16 > uip_connr->initialmss ||
 8002504:	8aa2      	ldrh	r2, [r4, #20]
 8002506:	4293      	cmp	r3, r2
 8002508:	d800      	bhi.n	800250c <uip_process+0xa24>
 800250a:	b90b      	cbnz	r3, 8002510 <uip_process+0xa28>
        tmp16 = uip_connr->initialmss;
 800250c:	4b49      	ldr	r3, [pc, #292]	; (8002634 <uip_process+0xb4c>)
 800250e:	801a      	strh	r2, [r3, #0]
      uip_connr->mss = tmp16;
 8002510:	4b48      	ldr	r3, [pc, #288]	; (8002634 <uip_process+0xb4c>)
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	8263      	strh	r3, [r4, #18]
      if (uip_flags & (UIP_NEWDATA | UIP_ACKDATA))
 8002516:	4b44      	ldr	r3, [pc, #272]	; (8002628 <uip_process+0xb40>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	f013 0f03 	tst.w	r3, #3
 800251e:	f43f ab4f 	beq.w	8001bc0 <uip_process+0xd8>
        uip_slen = 0;
 8002522:	4b46      	ldr	r3, [pc, #280]	; (800263c <uip_process+0xb54>)
 8002524:	2200      	movs	r2, #0
 8002526:	801a      	strh	r2, [r3, #0]
        UIP_APPCALL();
 8002528:	f7fe fd2a 	bl	8000f80 <NetApp>
 800252c:	f7ff bb56 	b.w	8001bdc <uip_process+0xf4>
        if (uip_flags & UIP_CLOSE)
 8002530:	f013 0f10 	tst.w	r3, #16
 8002534:	d00d      	beq.n	8002552 <uip_process+0xa6a>
          uip_slen = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	4a40      	ldr	r2, [pc, #256]	; (800263c <uip_process+0xb54>)
 800253a:	8013      	strh	r3, [r2, #0]
          uip_connr->len = 1;
 800253c:	2201      	movs	r2, #1
 800253e:	8222      	strh	r2, [r4, #16]
          uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
 8002540:	2204      	movs	r2, #4
 8002542:	7662      	strb	r2, [r4, #25]
          uip_connr->nrtx = 0;
 8002544:	76e3      	strb	r3, [r4, #27]
          BUF->flags = TCP_FIN | TCP_ACK;
 8002546:	4b39      	ldr	r3, [pc, #228]	; (800262c <uip_process+0xb44>)
 8002548:	2211      	movs	r2, #17
 800254a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          goto tcp_send_nodata;
 800254e:	f7ff bb53 	b.w	8001bf8 <uip_process+0x110>
        if (uip_slen > 0)
 8002552:	4a3a      	ldr	r2, [pc, #232]	; (800263c <uip_process+0xb54>)
 8002554:	8812      	ldrh	r2, [r2, #0]
 8002556:	b172      	cbz	r2, 8002576 <uip_process+0xa8e>
          if ((uip_flags & UIP_ACKDATA) != 0)
 8002558:	f013 0f01 	tst.w	r3, #1
 800255c:	d001      	beq.n	8002562 <uip_process+0xa7a>
            uip_connr->len = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	8223      	strh	r3, [r4, #16]
          if (uip_connr->len == 0)
 8002562:	8a23      	ldrh	r3, [r4, #16]
 8002564:	b9db      	cbnz	r3, 800259e <uip_process+0xab6>
            if (uip_slen > uip_connr->mss)
 8002566:	8a63      	ldrh	r3, [r4, #18]
 8002568:	429a      	cmp	r2, r3
 800256a:	d901      	bls.n	8002570 <uip_process+0xa88>
              uip_slen = uip_connr->mss;
 800256c:	4a33      	ldr	r2, [pc, #204]	; (800263c <uip_process+0xb54>)
 800256e:	8013      	strh	r3, [r2, #0]
            uip_connr->len = uip_slen;
 8002570:	4b32      	ldr	r3, [pc, #200]	; (800263c <uip_process+0xb54>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	8223      	strh	r3, [r4, #16]
        uip_connr->nrtx = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	76e3      	strb	r3, [r4, #27]
        uip_appdata = uip_sappdata;
 800257a:	4b33      	ldr	r3, [pc, #204]	; (8002648 <uip_process+0xb60>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4b31      	ldr	r3, [pc, #196]	; (8002644 <uip_process+0xb5c>)
 8002580:	601a      	str	r2, [r3, #0]
        if (uip_slen > 0 && uip_connr->len > 0)
 8002582:	4b2e      	ldr	r3, [pc, #184]	; (800263c <uip_process+0xb54>)
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	b16b      	cbz	r3, 80025a4 <uip_process+0xabc>
 8002588:	8a23      	ldrh	r3, [r4, #16]
 800258a:	b15b      	cbz	r3, 80025a4 <uip_process+0xabc>
          uip_len = uip_connr->len + UIP_TCPIP_HLEN;
 800258c:	3328      	adds	r3, #40	; 0x28
 800258e:	4a2a      	ldr	r2, [pc, #168]	; (8002638 <uip_process+0xb50>)
 8002590:	8013      	strh	r3, [r2, #0]
          BUF->flags = TCP_ACK | TCP_PSH;
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <uip_process+0xb44>)
 8002594:	2218      	movs	r2, #24
 8002596:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          goto tcp_send_noopts;
 800259a:	f7ff bb30 	b.w	8001bfe <uip_process+0x116>
            uip_slen = uip_connr->len;
 800259e:	4a27      	ldr	r2, [pc, #156]	; (800263c <uip_process+0xb54>)
 80025a0:	8013      	strh	r3, [r2, #0]
 80025a2:	e7e8      	b.n	8002576 <uip_process+0xa8e>
        if (uip_flags & UIP_NEWDATA)
 80025a4:	4b20      	ldr	r3, [pc, #128]	; (8002628 <uip_process+0xb40>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	f013 0f02 	tst.w	r3, #2
 80025ac:	f43f ab08 	beq.w	8001bc0 <uip_process+0xd8>
          uip_len = UIP_TCPIP_HLEN;
 80025b0:	4b21      	ldr	r3, [pc, #132]	; (8002638 <uip_process+0xb50>)
 80025b2:	2228      	movs	r2, #40	; 0x28
 80025b4:	801a      	strh	r2, [r3, #0]
          BUF->flags = TCP_ACK;
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <uip_process+0xb44>)
 80025b8:	2210      	movs	r2, #16
 80025ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          goto tcp_send_noopts;
 80025be:	f7ff bb1e 	b.w	8001bfe <uip_process+0x116>
      if (uip_flags & UIP_ACKDATA)
 80025c2:	4b19      	ldr	r3, [pc, #100]	; (8002628 <uip_process+0xb40>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	f013 0f01 	tst.w	r3, #1
 80025ca:	f43f aaf9 	beq.w	8001bc0 <uip_process+0xd8>
        uip_connr->tcpstateflags = UIP_CLOSED;
 80025ce:	2300      	movs	r3, #0
 80025d0:	7663      	strb	r3, [r4, #25]
        uip_flags = UIP_CLOSE;
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <uip_process+0xb40>)
 80025d4:	2210      	movs	r2, #16
 80025d6:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
 80025d8:	f7fe fcd2 	bl	8000f80 <NetApp>
 80025dc:	f7ff baf0 	b.w	8001bc0 <uip_process+0xd8>
      if (uip_len > 0)
 80025e0:	4b15      	ldr	r3, [pc, #84]	; (8002638 <uip_process+0xb50>)
 80025e2:	8818      	ldrh	r0, [r3, #0]
 80025e4:	b108      	cbz	r0, 80025ea <uip_process+0xb02>
        uip_add_rcv_nxt(uip_len);
 80025e6:	f7ff f9d5 	bl	8001994 <uip_add_rcv_nxt>
      if (BUF->flags & TCP_FIN)
 80025ea:	4b10      	ldr	r3, [pc, #64]	; (800262c <uip_process+0xb44>)
 80025ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80025f0:	f013 0f01 	tst.w	r3, #1
 80025f4:	d02d      	beq.n	8002652 <uip_process+0xb6a>
        if (uip_flags & UIP_ACKDATA)
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <uip_process+0xb40>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	f013 0f01 	tst.w	r3, #1
 80025fe:	d025      	beq.n	800264c <uip_process+0xb64>
          uip_connr->tcpstateflags = UIP_TIME_WAIT;
 8002600:	2307      	movs	r3, #7
 8002602:	7663      	strb	r3, [r4, #25]
          uip_connr->timer = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	76a3      	strb	r3, [r4, #26]
          uip_connr->len = 0;
 8002608:	8223      	strh	r3, [r4, #16]
        uip_add_rcv_nxt(1);
 800260a:	2001      	movs	r0, #1
 800260c:	f7ff f9c2 	bl	8001994 <uip_add_rcv_nxt>
        uip_flags = UIP_CLOSE;
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <uip_process+0xb40>)
 8002612:	2210      	movs	r2, #16
 8002614:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
 8002616:	f7fe fcb3 	bl	8000f80 <NetApp>
  BUF->flags = TCP_ACK;
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <uip_process+0xb44>)
 800261c:	2210      	movs	r2, #16
 800261e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8002622:	f7ff bae9 	b.w	8001bf8 <uip_process+0x110>
 8002626:	bf00      	nop
 8002628:	20000630 	.word	0x20000630
 800262c:	200006b8 	.word	0x200006b8
 8002630:	20000594 	.word	0x20000594
 8002634:	2000059e 	.word	0x2000059e
 8002638:	20000624 	.word	0x20000624
 800263c:	20000cfa 	.word	0x20000cfa
 8002640:	2000063c 	.word	0x2000063c
 8002644:	20000638 	.word	0x20000638
 8002648:	20000628 	.word	0x20000628
          uip_connr->tcpstateflags = UIP_CLOSING;
 800264c:	2306      	movs	r3, #6
 800264e:	7663      	strb	r3, [r4, #25]
 8002650:	e7db      	b.n	800260a <uip_process+0xb22>
      else if (uip_flags & UIP_ACKDATA)
 8002652:	4b22      	ldr	r3, [pc, #136]	; (80026dc <uip_process+0xbf4>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	f013 0f01 	tst.w	r3, #1
 800265a:	d005      	beq.n	8002668 <uip_process+0xb80>
        uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
 800265c:	2305      	movs	r3, #5
 800265e:	7663      	strb	r3, [r4, #25]
        uip_connr->len = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	8223      	strh	r3, [r4, #16]
        goto drop;
 8002664:	f7ff baac 	b.w	8001bc0 <uip_process+0xd8>
      if (uip_len > 0)
 8002668:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <uip_process+0xbf8>)
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1d4      	bne.n	800261a <uip_process+0xb32>
 8002670:	f7ff baa6 	b.w	8001bc0 <uip_process+0xd8>
      if (uip_len > 0)
 8002674:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <uip_process+0xbf8>)
 8002676:	8818      	ldrh	r0, [r3, #0]
 8002678:	b108      	cbz	r0, 800267e <uip_process+0xb96>
        uip_add_rcv_nxt(uip_len);
 800267a:	f7ff f98b 	bl	8001994 <uip_add_rcv_nxt>
      if (BUF->flags & TCP_FIN)
 800267e:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <uip_process+0xbfc>)
 8002680:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002684:	f013 0f01 	tst.w	r3, #1
 8002688:	d00c      	beq.n	80026a4 <uip_process+0xbbc>
        uip_connr->tcpstateflags = UIP_TIME_WAIT;
 800268a:	2307      	movs	r3, #7
 800268c:	7663      	strb	r3, [r4, #25]
        uip_connr->timer = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	76a3      	strb	r3, [r4, #26]
        uip_add_rcv_nxt(1);
 8002692:	2001      	movs	r0, #1
 8002694:	f7ff f97e 	bl	8001994 <uip_add_rcv_nxt>
        uip_flags = UIP_CLOSE;
 8002698:	4b10      	ldr	r3, [pc, #64]	; (80026dc <uip_process+0xbf4>)
 800269a:	2210      	movs	r2, #16
 800269c:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
 800269e:	f7fe fc6f 	bl	8000f80 <NetApp>
        goto tcp_send_ack;
 80026a2:	e7ba      	b.n	800261a <uip_process+0xb32>
      if (uip_len > 0)
 80026a4:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <uip_process+0xbf8>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1b6      	bne.n	800261a <uip_process+0xb32>
 80026ac:	f7ff ba88 	b.w	8001bc0 <uip_process+0xd8>
      if (uip_flags & UIP_ACKDATA)
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <uip_process+0xbf4>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	f013 0f01 	tst.w	r3, #1
 80026b8:	f43f aa82 	beq.w	8001bc0 <uip_process+0xd8>
        uip_connr->tcpstateflags = UIP_TIME_WAIT;
 80026bc:	2307      	movs	r3, #7
 80026be:	7663      	strb	r3, [r4, #25]
        uip_connr->timer = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	76a3      	strb	r3, [r4, #26]
 80026c4:	f7ff ba7c 	b.w	8001bc0 <uip_process+0xd8>
    BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <uip_process+0xbfc>)
 80026ca:	2206      	movs	r2, #6
 80026cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
 80026d0:	220a      	movs	r2, #10
 80026d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80026d6:	f7ff bac9 	b.w	8001c6c <uip_process+0x184>
 80026da:	bf00      	nop
 80026dc:	20000630 	.word	0x20000630
 80026e0:	20000624 	.word	0x20000624
 80026e4:	200006b8 	.word	0x200006b8

080026e8 <uip_send>:
/*---------------------------------------------------------------------------*/
void
uip_send(const void *data, int len)
{
  if (len > 0)
 80026e8:	2900      	cmp	r1, #0
 80026ea:	dd0c      	ble.n	8002706 <uip_send+0x1e>
{
 80026ec:	b508      	push	{r3, lr}
  {
    uip_slen = len;
 80026ee:	b28a      	uxth	r2, r1
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <uip_send+0x20>)
 80026f2:	801a      	strh	r2, [r3, #0]
    if (data != uip_sappdata)
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <uip_send+0x24>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4283      	cmp	r3, r0
 80026fa:	d003      	beq.n	8002704 <uip_send+0x1c>
 80026fc:	4601      	mov	r1, r0
    {
      memcpy(uip_sappdata, (data), uip_slen);
 80026fe:	4618      	mov	r0, r3
 8002700:	f002 fc13 	bl	8004f2a <memcpy>
    }
  }
}
 8002704:	bd08      	pop	{r3, pc}
 8002706:	4770      	bx	lr
 8002708:	20000cfa 	.word	0x20000cfa
 800270c:	20000628 	.word	0x20000628

08002710 <uip_arp_update>:

}
/*-----------------------------------------------------------------------------------*/
static void
uip_arp_update(u16_t *ipaddr, struct uip_eth_addr *ethaddr)
{
 8002710:	b4f0      	push	{r4, r5, r6, r7}
  register struct arp_entry *tabptr = arp_table;
  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 8002712:	4b3a      	ldr	r3, [pc, #232]	; (80027fc <uip_arp_update+0xec>)
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
  register struct arp_entry *tabptr = arp_table;
 8002718:	4e39      	ldr	r6, [pc, #228]	; (8002800 <uip_arp_update+0xf0>)
  for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 800271a:	e002      	b.n	8002722 <uip_arp_update+0x12>
 800271c:	3301      	adds	r3, #1
 800271e:	4a37      	ldr	r2, [pc, #220]	; (80027fc <uip_arp_update+0xec>)
 8002720:	7013      	strb	r3, [r2, #0]
 8002722:	4b36      	ldr	r3, [pc, #216]	; (80027fc <uip_arp_update+0xec>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b07      	cmp	r3, #7
 8002728:	d818      	bhi.n	800275c <uip_arp_update+0x4c>
  {

    tabptr = &arp_table[i];
 800272a:	4d35      	ldr	r5, [pc, #212]	; (8002800 <uip_arp_update+0xf0>)
 800272c:	005a      	lsls	r2, r3, #1
 800272e:	441a      	add	r2, r3
 8002730:	0094      	lsls	r4, r2, #2
 8002732:	192e      	adds	r6, r5, r4
    /* Only check those entries that are actually in use. */
    if (tabptr->ipaddr[0] != 0 &&
 8002734:	5b2a      	ldrh	r2, [r5, r4]
 8002736:	2a00      	cmp	r2, #0
 8002738:	d0f0      	beq.n	800271c <uip_arp_update+0xc>
        tabptr->ipaddr[1] != 0)
 800273a:	8874      	ldrh	r4, [r6, #2]
    if (tabptr->ipaddr[0] != 0 &&
 800273c:	2c00      	cmp	r4, #0
 800273e:	d0ed      	beq.n	800271c <uip_arp_update+0xc>
    {

      /* Check if the source IP address of the incoming packet matches
         the IP address in this ARP table entry. */
      if (ipaddr[0] == tabptr->ipaddr[0] &&
 8002740:	8805      	ldrh	r5, [r0, #0]
 8002742:	42aa      	cmp	r2, r5
 8002744:	d1ea      	bne.n	800271c <uip_arp_update+0xc>
          ipaddr[1] == tabptr->ipaddr[1])
 8002746:	8842      	ldrh	r2, [r0, #2]
      if (ipaddr[0] == tabptr->ipaddr[0] &&
 8002748:	4294      	cmp	r4, r2
 800274a:	d1e7      	bne.n	800271c <uip_arp_update+0xc>
      {

        /* An old entry found, update this and return. */
        memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 800274c:	680c      	ldr	r4, [r1, #0]
 800274e:	6074      	str	r4, [r6, #4]
 8002750:	8889      	ldrh	r1, [r1, #4]
 8002752:	8131      	strh	r1, [r6, #8]
        tabptr->time = arptime;
 8002754:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <uip_arp_update+0xf4>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	72b3      	strb	r3, [r6, #10]

        return;
 800275a:	e022      	b.n	80027a2 <uip_arp_update+0x92>

  /* If we get here, no existing ARP table entry was found, so we
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 800275c:	4b27      	ldr	r3, [pc, #156]	; (80027fc <uip_arp_update+0xec>)
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	e002      	b.n	800276a <uip_arp_update+0x5a>
 8002764:	3301      	adds	r3, #1
 8002766:	4a25      	ldr	r2, [pc, #148]	; (80027fc <uip_arp_update+0xec>)
 8002768:	7013      	strb	r3, [r2, #0]
 800276a:	4b24      	ldr	r3, [pc, #144]	; (80027fc <uip_arp_update+0xec>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b07      	cmp	r3, #7
 8002770:	d80a      	bhi.n	8002788 <uip_arp_update+0x78>
  {
    tabptr = &arp_table[i];
 8002772:	4d23      	ldr	r5, [pc, #140]	; (8002800 <uip_arp_update+0xf0>)
 8002774:	005a      	lsls	r2, r3, #1
 8002776:	441a      	add	r2, r3
 8002778:	0094      	lsls	r4, r2, #2
 800277a:	192e      	adds	r6, r5, r4
    if (tabptr->ipaddr[0] == 0 &&
 800277c:	5b2a      	ldrh	r2, [r5, r4]
 800277e:	2a00      	cmp	r2, #0
 8002780:	d1f0      	bne.n	8002764 <uip_arp_update+0x54>
        tabptr->ipaddr[1] == 0)
 8002782:	8872      	ldrh	r2, [r6, #2]
    if (tabptr->ipaddr[0] == 0 &&
 8002784:	2a00      	cmp	r2, #0
 8002786:	d1ed      	bne.n	8002764 <uip_arp_update+0x54>
    }
  }

  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if (i == UIP_ARPTAB_SIZE)
 8002788:	2b08      	cmp	r3, #8
 800278a:	d00c      	beq.n	80027a6 <uip_arp_update+0x96>
    tabptr = &arp_table[i];
  }

  /* Now, i is the ARP table entry which we will fill with the new
     information. */
  memcpy(tabptr->ipaddr, ipaddr, 4);
 800278c:	6802      	ldr	r2, [r0, #0]
 800278e:	4633      	mov	r3, r6
 8002790:	f843 2b04 	str.w	r2, [r3], #4
  memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 8002794:	680a      	ldr	r2, [r1, #0]
 8002796:	6072      	str	r2, [r6, #4]
 8002798:	888a      	ldrh	r2, [r1, #4]
 800279a:	809a      	strh	r2, [r3, #4]
  tabptr->time = arptime;
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <uip_arp_update+0xf4>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	72b3      	strb	r3, [r6, #10]
}
 80027a2:	bcf0      	pop	{r4, r5, r6, r7}
 80027a4:	4770      	bx	lr
    tmpage = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	4a17      	ldr	r2, [pc, #92]	; (8002808 <uip_arp_update+0xf8>)
 80027aa:	7013      	strb	r3, [r2, #0]
    c = 0;
 80027ac:	4a17      	ldr	r2, [pc, #92]	; (800280c <uip_arp_update+0xfc>)
 80027ae:	7013      	strb	r3, [r2, #0]
    for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 80027b0:	4a12      	ldr	r2, [pc, #72]	; (80027fc <uip_arp_update+0xec>)
 80027b2:	7013      	strb	r3, [r2, #0]
 80027b4:	e002      	b.n	80027bc <uip_arp_update+0xac>
 80027b6:	3301      	adds	r3, #1
 80027b8:	4a10      	ldr	r2, [pc, #64]	; (80027fc <uip_arp_update+0xec>)
 80027ba:	7013      	strb	r3, [r2, #0]
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <uip_arp_update+0xec>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b07      	cmp	r3, #7
 80027c2:	d811      	bhi.n	80027e8 <uip_arp_update+0xd8>
      if (arptime - tabptr->time > tmpage)
 80027c4:	4a0f      	ldr	r2, [pc, #60]	; (8002804 <uip_arp_update+0xf4>)
 80027c6:	7814      	ldrb	r4, [r2, #0]
 80027c8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80027cc:	0095      	lsls	r5, r2, #2
 80027ce:	4a0c      	ldr	r2, [pc, #48]	; (8002800 <uip_arp_update+0xf0>)
 80027d0:	442a      	add	r2, r5
 80027d2:	7a92      	ldrb	r2, [r2, #10]
 80027d4:	1aa6      	subs	r6, r4, r2
 80027d6:	4d0c      	ldr	r5, [pc, #48]	; (8002808 <uip_arp_update+0xf8>)
 80027d8:	782d      	ldrb	r5, [r5, #0]
 80027da:	42ae      	cmp	r6, r5
 80027dc:	ddeb      	ble.n	80027b6 <uip_arp_update+0xa6>
        tmpage = arptime - tabptr->time;
 80027de:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <uip_arp_update+0xf8>)
 80027e0:	7016      	strb	r6, [r2, #0]
        c = i;
 80027e2:	4a0a      	ldr	r2, [pc, #40]	; (800280c <uip_arp_update+0xfc>)
 80027e4:	7013      	strb	r3, [r2, #0]
 80027e6:	e7e6      	b.n	80027b6 <uip_arp_update+0xa6>
    i = c;
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <uip_arp_update+0xfc>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	4a03      	ldr	r2, [pc, #12]	; (80027fc <uip_arp_update+0xec>)
 80027ee:	7013      	strb	r3, [r2, #0]
    tabptr = &arp_table[i];
 80027f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80027f4:	009a      	lsls	r2, r3, #2
 80027f6:	4e02      	ldr	r6, [pc, #8]	; (8002800 <uip_arp_update+0xf0>)
 80027f8:	4416      	add	r6, r2
 80027fa:	e7c7      	b.n	800278c <uip_arp_update+0x7c>
 80027fc:	2000060a 	.word	0x2000060a
 8002800:	200005a8 	.word	0x200005a8
 8002804:	20000608 	.word	0x20000608
 8002808:	20000610 	.word	0x20000610
 800280c:	20000609 	.word	0x20000609

08002810 <uip_arp_timer>:
{
 8002810:	b410      	push	{r4}
  ++arptime;
 8002812:	4b16      	ldr	r3, [pc, #88]	; (800286c <uip_arp_timer+0x5c>)
 8002814:	781c      	ldrb	r4, [r3, #0]
 8002816:	3401      	adds	r4, #1
 8002818:	b2e4      	uxtb	r4, r4
 800281a:	701c      	strb	r4, [r3, #0]
  for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <uip_arp_timer+0x60>)
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	e002      	b.n	800282a <uip_arp_timer+0x1a>
 8002824:	3301      	adds	r3, #1
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <uip_arp_timer+0x60>)
 8002828:	7013      	strb	r3, [r2, #0]
 800282a:	4b11      	ldr	r3, [pc, #68]	; (8002870 <uip_arp_timer+0x60>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b07      	cmp	r3, #7
 8002830:	d818      	bhi.n	8002864 <uip_arp_timer+0x54>
    if ((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
 8002832:	4810      	ldr	r0, [pc, #64]	; (8002874 <uip_arp_timer+0x64>)
 8002834:	005a      	lsls	r2, r3, #1
 8002836:	441a      	add	r2, r3
 8002838:	0091      	lsls	r1, r2, #2
 800283a:	1842      	adds	r2, r0, r1
 800283c:	5a41      	ldrh	r1, [r0, r1]
 800283e:	8852      	ldrh	r2, [r2, #2]
 8002840:	430a      	orrs	r2, r1
 8002842:	d0ef      	beq.n	8002824 <uip_arp_timer+0x14>
        arptime - tabptr->time >= UIP_ARP_MAXAGE)
 8002844:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002848:	0091      	lsls	r1, r2, #2
 800284a:	4602      	mov	r2, r0
 800284c:	440a      	add	r2, r1
 800284e:	7a92      	ldrb	r2, [r2, #10]
 8002850:	1aa2      	subs	r2, r4, r2
    if ((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
 8002852:	2a77      	cmp	r2, #119	; 0x77
 8002854:	dde6      	ble.n	8002824 <uip_arp_timer+0x14>
      memset(tabptr->ipaddr, 0, 4);
 8002856:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800285a:	008a      	lsls	r2, r1, #2
 800285c:	4601      	mov	r1, r0
 800285e:	2000      	movs	r0, #0
 8002860:	5088      	str	r0, [r1, r2]
 8002862:	e7df      	b.n	8002824 <uip_arp_timer+0x14>
}
 8002864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000608 	.word	0x20000608
 8002870:	2000060a 	.word	0x2000060a
 8002874:	200005a8 	.word	0x200005a8

08002878 <uip_arp_arpin>:
/*-----------------------------------------------------------------------------------*/
void
uip_arp_arpin(void)
{

  if (uip_len < sizeof(struct arp_hdr))
 8002878:	4b32      	ldr	r3, [pc, #200]	; (8002944 <uip_arp_arpin+0xcc>)
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	2b29      	cmp	r3, #41	; 0x29
 800287e:	d90c      	bls.n	800289a <uip_arp_arpin+0x22>
{
 8002880:	b510      	push	{r4, lr}
  {
    uip_len = 0;
    return;
  }
  uip_len = 0;
 8002882:	4b30      	ldr	r3, [pc, #192]	; (8002944 <uip_arp_arpin+0xcc>)
 8002884:	2200      	movs	r2, #0
 8002886:	801a      	strh	r2, [r3, #0]

  switch (BUF->opcode)
 8002888:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <uip_arp_arpin+0xd0>)
 800288a:	8a9b      	ldrh	r3, [r3, #20]
 800288c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002890:	d007      	beq.n	80028a2 <uip_arp_arpin+0x2a>
 8002892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002896:	d043      	beq.n	8002920 <uip_arp_arpin+0xa8>
      }
      break;
  }

  return;
}
 8002898:	bd10      	pop	{r4, pc}
    uip_len = 0;
 800289a:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <uip_arp_arpin+0xcc>)
 800289c:	2200      	movs	r2, #0
 800289e:	801a      	strh	r2, [r3, #0]
 80028a0:	4770      	bx	lr
      if (uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr))
 80028a2:	4b29      	ldr	r3, [pc, #164]	; (8002948 <uip_arp_arpin+0xd0>)
 80028a4:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80028a6:	4b29      	ldr	r3, [pc, #164]	; (800294c <uip_arp_arpin+0xd4>)
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d1f4      	bne.n	8002898 <uip_arp_arpin+0x20>
 80028ae:	4b26      	ldr	r3, [pc, #152]	; (8002948 <uip_arp_arpin+0xd0>)
 80028b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80028b2:	4b26      	ldr	r3, [pc, #152]	; (800294c <uip_arp_arpin+0xd4>)
 80028b4:	885b      	ldrh	r3, [r3, #2]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d1ee      	bne.n	8002898 <uip_arp_arpin+0x20>
        uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 80028ba:	4c25      	ldr	r4, [pc, #148]	; (8002950 <uip_arp_arpin+0xd8>)
 80028bc:	4621      	mov	r1, r4
 80028be:	1da0      	adds	r0, r4, #6
 80028c0:	f7ff ff26 	bl	8002710 <uip_arp_update>
        BUF->opcode = HTONS(2);
 80028c4:	2200      	movs	r2, #0
 80028c6:	f804 2c02 	strb.w	r2, [r4, #-2]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f804 2c01 	strb.w	r2, [r4, #-1]
        memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
 80028d0:	6821      	ldr	r1, [r4, #0]
 80028d2:	f8c4 100a 	str.w	r1, [r4, #10]
 80028d6:	88a1      	ldrh	r1, [r4, #4]
 80028d8:	81e1      	strh	r1, [r4, #14]
        memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 80028da:	491e      	ldr	r1, [pc, #120]	; (8002954 <uip_arp_arpin+0xdc>)
 80028dc:	6808      	ldr	r0, [r1, #0]
 80028de:	6020      	str	r0, [r4, #0]
 80028e0:	8889      	ldrh	r1, [r1, #4]
 80028e2:	80a1      	strh	r1, [r4, #4]
        memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 80028e4:	f844 0c10 	str.w	r0, [r4, #-16]
 80028e8:	f824 1c0c 	strh.w	r1, [r4, #-12]
        memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
 80028ec:	f8d4 100a 	ldr.w	r1, [r4, #10]
 80028f0:	f844 1c16 	str.w	r1, [r4, #-22]
 80028f4:	89e2      	ldrh	r2, [r4, #14]
 80028f6:	f824 2c12 	strh.w	r2, [r4, #-18]
        BUF->dipaddr[0] = BUF->sipaddr[0];
 80028fa:	88e2      	ldrh	r2, [r4, #6]
 80028fc:	8222      	strh	r2, [r4, #16]
        BUF->dipaddr[1] = BUF->sipaddr[1];
 80028fe:	8922      	ldrh	r2, [r4, #8]
 8002900:	8262      	strh	r2, [r4, #18]
        BUF->sipaddr[0] = uip_hostaddr[0];
 8002902:	4a12      	ldr	r2, [pc, #72]	; (800294c <uip_arp_arpin+0xd4>)
 8002904:	8811      	ldrh	r1, [r2, #0]
 8002906:	80e1      	strh	r1, [r4, #6]
        BUF->sipaddr[1] = uip_hostaddr[1];
 8002908:	8852      	ldrh	r2, [r2, #2]
 800290a:	8122      	strh	r2, [r4, #8]
        BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 800290c:	2208      	movs	r2, #8
 800290e:	f804 2c0a 	strb.w	r2, [r4, #-10]
 8002912:	2206      	movs	r2, #6
 8002914:	f804 2c09 	strb.w	r2, [r4, #-9]
        uip_len = sizeof(struct arp_hdr);
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <uip_arp_arpin+0xcc>)
 800291a:	222a      	movs	r2, #42	; 0x2a
 800291c:	801a      	strh	r2, [r3, #0]
 800291e:	e7bb      	b.n	8002898 <uip_arp_arpin+0x20>
      if (uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr))
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <uip_arp_arpin+0xd0>)
 8002922:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <uip_arp_arpin+0xd4>)
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d1b5      	bne.n	8002898 <uip_arp_arpin+0x20>
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <uip_arp_arpin+0xd0>)
 800292e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <uip_arp_arpin+0xd4>)
 8002932:	885b      	ldrh	r3, [r3, #2]
 8002934:	429a      	cmp	r2, r3
 8002936:	d1af      	bne.n	8002898 <uip_arp_arpin+0x20>
        uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 8002938:	4805      	ldr	r0, [pc, #20]	; (8002950 <uip_arp_arpin+0xd8>)
 800293a:	4601      	mov	r1, r0
 800293c:	3006      	adds	r0, #6
 800293e:	f7ff fee7 	bl	8002710 <uip_arp_update>
 8002942:	e7a9      	b.n	8002898 <uip_arp_arpin+0x20>
 8002944:	20000624 	.word	0x20000624
 8002948:	200006b8 	.word	0x200006b8
 800294c:	200006b4 	.word	0x200006b4
 8002950:	200006ce 	.word	0x200006ce
 8002954:	200005a0 	.word	0x200005a0

08002958 <uip_arp_out>:
 * uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_out(void)
{
 8002958:	b430      	push	{r4, r5}

     If not ARP table entry is found, we overwrite the original IP
     packet with an ARP request for the IP address. */

  /* First check if destination is a local broadcast. */
  if (uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr))
 800295a:	4b49      	ldr	r3, [pc, #292]	; (8002a80 <uip_arp_out+0x128>)
 800295c:	8bda      	ldrh	r2, [r3, #30]
 800295e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002962:	429a      	cmp	r2, r3
 8002964:	d01a      	beq.n	800299c <uip_arp_out+0x44>
    memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
  }
  else
  {
    /* Check if the destination address is on the local network. */
    if (!uip_ipaddr_maskcmp(IPBUF->destipaddr, uip_hostaddr, uip_netmask))
 8002966:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <uip_arp_out+0x12c>)
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	4947      	ldr	r1, [pc, #284]	; (8002a88 <uip_arp_out+0x130>)
 800296c:	8809      	ldrh	r1, [r1, #0]
 800296e:	4053      	eors	r3, r2
 8002970:	4219      	tst	r1, r3
 8002972:	d108      	bne.n	8002986 <uip_arp_out+0x2e>
 8002974:	4b42      	ldr	r3, [pc, #264]	; (8002a80 <uip_arp_out+0x128>)
 8002976:	8c19      	ldrh	r1, [r3, #32]
 8002978:	4b42      	ldr	r3, [pc, #264]	; (8002a84 <uip_arp_out+0x12c>)
 800297a:	885b      	ldrh	r3, [r3, #2]
 800297c:	4842      	ldr	r0, [pc, #264]	; (8002a88 <uip_arp_out+0x130>)
 800297e:	8840      	ldrh	r0, [r0, #2]
 8002980:	404b      	eors	r3, r1
 8002982:	4218      	tst	r0, r3
 8002984:	d017      	beq.n	80029b6 <uip_arp_out+0x5e>
    {
      /* Destination address was not on the local network, so we need to
      use the default router's IP address instead of the destination
      address when determining the MAC address. */
      uip_ipaddr_copy(ipaddr, uip_draddr);
 8002986:	4b41      	ldr	r3, [pc, #260]	; (8002a8c <uip_arp_out+0x134>)
 8002988:	4a41      	ldr	r2, [pc, #260]	; (8002a90 <uip_arp_out+0x138>)
 800298a:	8811      	ldrh	r1, [r2, #0]
 800298c:	8019      	strh	r1, [r3, #0]
 800298e:	8852      	ldrh	r2, [r2, #2]
 8002990:	805a      	strh	r2, [r3, #2]
    {
      /* Else, we use the destination IP address. */
      uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
    }

    for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 8002992:	4b40      	ldr	r3, [pc, #256]	; (8002a94 <uip_arp_out+0x13c>)
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
  struct arp_entry *tabptr = arp_table;
 8002998:	4d3f      	ldr	r5, [pc, #252]	; (8002a98 <uip_arp_out+0x140>)
    for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 800299a:	e013      	b.n	80029c4 <uip_arp_out+0x6c>
  if (uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr))
 800299c:	4b38      	ldr	r3, [pc, #224]	; (8002a80 <uip_arp_out+0x128>)
 800299e:	8c19      	ldrh	r1, [r3, #32]
 80029a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029a4:	4299      	cmp	r1, r3
 80029a6:	d1de      	bne.n	8002966 <uip_arp_out+0xe>
    memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
 80029a8:	4b35      	ldr	r3, [pc, #212]	; (8002a80 <uip_arp_out+0x128>)
 80029aa:	4a3c      	ldr	r2, [pc, #240]	; (8002a9c <uip_arp_out+0x144>)
 80029ac:	6810      	ldr	r0, [r2, #0]
 80029ae:	6018      	str	r0, [r3, #0]
 80029b0:	8892      	ldrh	r2, [r2, #4]
 80029b2:	809a      	strh	r2, [r3, #4]
 80029b4:	e021      	b.n	80029fa <uip_arp_out+0xa2>
      uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
 80029b6:	4b35      	ldr	r3, [pc, #212]	; (8002a8c <uip_arp_out+0x134>)
 80029b8:	801a      	strh	r2, [r3, #0]
 80029ba:	8059      	strh	r1, [r3, #2]
 80029bc:	e7e9      	b.n	8002992 <uip_arp_out+0x3a>
    for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 80029be:	3301      	adds	r3, #1
 80029c0:	4a34      	ldr	r2, [pc, #208]	; (8002a94 <uip_arp_out+0x13c>)
 80029c2:	7013      	strb	r3, [r2, #0]
 80029c4:	4b33      	ldr	r3, [pc, #204]	; (8002a94 <uip_arp_out+0x13c>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b07      	cmp	r3, #7
 80029ca:	d80e      	bhi.n	80029ea <uip_arp_out+0x92>
    {
      tabptr = &arp_table[i];
 80029cc:	4832      	ldr	r0, [pc, #200]	; (8002a98 <uip_arp_out+0x140>)
 80029ce:	005a      	lsls	r2, r3, #1
 80029d0:	441a      	add	r2, r3
 80029d2:	0091      	lsls	r1, r2, #2
 80029d4:	1845      	adds	r5, r0, r1
      if (uip_ipaddr_cmp(ipaddr, tabptr->ipaddr))
 80029d6:	4a2d      	ldr	r2, [pc, #180]	; (8002a8c <uip_arp_out+0x134>)
 80029d8:	8814      	ldrh	r4, [r2, #0]
 80029da:	5a42      	ldrh	r2, [r0, r1]
 80029dc:	4294      	cmp	r4, r2
 80029de:	d1ee      	bne.n	80029be <uip_arp_out+0x66>
 80029e0:	4a2a      	ldr	r2, [pc, #168]	; (8002a8c <uip_arp_out+0x134>)
 80029e2:	8850      	ldrh	r0, [r2, #2]
 80029e4:	886a      	ldrh	r2, [r5, #2]
 80029e6:	4290      	cmp	r0, r2
 80029e8:	d1e9      	bne.n	80029be <uip_arp_out+0x66>
      {
        break;
      }
    }

    if (i == UIP_ARPTAB_SIZE)
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d016      	beq.n	8002a1c <uip_arp_out+0xc4>
      uip_len = sizeof(struct arp_hdr);
      return;
    }

    /* Build an ethernet header. */
    memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
 80029ee:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <uip_arp_out+0x128>)
 80029f0:	f855 2f04 	ldr.w	r2, [r5, #4]!
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	88aa      	ldrh	r2, [r5, #4]
 80029f8:	809a      	strh	r2, [r3, #4]
  }
  memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 80029fa:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <uip_arp_out+0x128>)
 80029fc:	4a28      	ldr	r2, [pc, #160]	; (8002aa0 <uip_arp_out+0x148>)
 80029fe:	6811      	ldr	r1, [r2, #0]
 8002a00:	f8c3 1006 	str.w	r1, [r3, #6]
 8002a04:	8892      	ldrh	r2, [r2, #4]
 8002a06:	815a      	strh	r2, [r3, #10]

  IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
 8002a08:	2208      	movs	r2, #8
 8002a0a:	731a      	strb	r2, [r3, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	735a      	strb	r2, [r3, #13]

  uip_len += sizeof(struct uip_eth_hdr);
 8002a10:	4a24      	ldr	r2, [pc, #144]	; (8002aa4 <uip_arp_out+0x14c>)
 8002a12:	8813      	ldrh	r3, [r2, #0]
 8002a14:	330e      	adds	r3, #14
 8002a16:	8013      	strh	r3, [r2, #0]
}
 8002a18:	bc30      	pop	{r4, r5}
 8002a1a:	4770      	bx	lr
      memset(BUF->ethhdr.dest.addr, 0xff, 6);
 8002a1c:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <uip_arp_out+0x128>)
 8002a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	809a      	strh	r2, [r3, #4]
      memset(BUF->dhwaddr.addr, 0x00, 6);
 8002a26:	2200      	movs	r2, #0
 8002a28:	621a      	str	r2, [r3, #32]
 8002a2a:	849a      	strh	r2, [r3, #36]	; 0x24
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 8002a2c:	491c      	ldr	r1, [pc, #112]	; (8002aa0 <uip_arp_out+0x148>)
 8002a2e:	6808      	ldr	r0, [r1, #0]
 8002a30:	f8c3 0006 	str.w	r0, [r3, #6]
 8002a34:	8889      	ldrh	r1, [r1, #4]
 8002a36:	8159      	strh	r1, [r3, #10]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 8002a38:	f8c3 0016 	str.w	r0, [r3, #22]
 8002a3c:	8359      	strh	r1, [r3, #26]
      uip_ipaddr_copy(BUF->dipaddr, ipaddr);
 8002a3e:	4913      	ldr	r1, [pc, #76]	; (8002a8c <uip_arp_out+0x134>)
 8002a40:	8808      	ldrh	r0, [r1, #0]
 8002a42:	84d8      	strh	r0, [r3, #38]	; 0x26
 8002a44:	8849      	ldrh	r1, [r1, #2]
 8002a46:	8519      	strh	r1, [r3, #40]	; 0x28
      uip_ipaddr_copy(BUF->sipaddr, uip_hostaddr);
 8002a48:	490e      	ldr	r1, [pc, #56]	; (8002a84 <uip_arp_out+0x12c>)
 8002a4a:	8808      	ldrh	r0, [r1, #0]
 8002a4c:	8398      	strh	r0, [r3, #28]
 8002a4e:	8849      	ldrh	r1, [r1, #2]
 8002a50:	83d9      	strh	r1, [r3, #30]
      BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
 8002a52:	751a      	strb	r2, [r3, #20]
 8002a54:	2101      	movs	r1, #1
 8002a56:	7559      	strb	r1, [r3, #21]
      BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
 8002a58:	739a      	strb	r2, [r3, #14]
 8002a5a:	73d9      	strb	r1, [r3, #15]
      BUF->protocol = HTONS(UIP_ETHTYPE_IP);
 8002a5c:	2108      	movs	r1, #8
 8002a5e:	7419      	strb	r1, [r3, #16]
 8002a60:	745a      	strb	r2, [r3, #17]
      BUF->hwlen = 6;
 8002a62:	2206      	movs	r2, #6
 8002a64:	749a      	strb	r2, [r3, #18]
      BUF->protolen = 4;
 8002a66:	2204      	movs	r2, #4
 8002a68:	74da      	strb	r2, [r3, #19]
      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 8002a6a:	7319      	strb	r1, [r3, #12]
 8002a6c:	2206      	movs	r2, #6
 8002a6e:	735a      	strb	r2, [r3, #13]
      uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
 8002a70:	3336      	adds	r3, #54	; 0x36
 8002a72:	4a0d      	ldr	r2, [pc, #52]	; (8002aa8 <uip_arp_out+0x150>)
 8002a74:	6013      	str	r3, [r2, #0]
      uip_len = sizeof(struct arp_hdr);
 8002a76:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <uip_arp_out+0x14c>)
 8002a78:	222a      	movs	r2, #42	; 0x2a
 8002a7a:	801a      	strh	r2, [r3, #0]
      return;
 8002a7c:	e7cc      	b.n	8002a18 <uip_arp_out+0xc0>
 8002a7e:	bf00      	nop
 8002a80:	200006b8 	.word	0x200006b8
 8002a84:	200006b4 	.word	0x200006b4
 8002a88:	200006b0 	.word	0x200006b0
 8002a8c:	2000060c 	.word	0x2000060c
 8002a90:	200006ac 	.word	0x200006ac
 8002a94:	2000060a 	.word	0x2000060a
 8002a98:	200005a8 	.word	0x200005a8
 8002a9c:	08005068 	.word	0x08005068
 8002aa0:	200005a0 	.word	0x200005a0
 8002aa4:	20000624 	.word	0x20000624
 8002aa8:	20000638 	.word	0x20000638

08002aac <timer_set>:
 * \param interval The interval before the timer expires.
 *
 */
void
timer_set(struct timer *t, clock_time_t interval)
{
 8002aac:	b510      	push	{r4, lr}
 8002aae:	4604      	mov	r4, r0
  t->interval = interval;
 8002ab0:	6041      	str	r1, [r0, #4]
  t->start = clock_time();
 8002ab2:	f002 f8f5 	bl	8004ca0 <clock_time>
 8002ab6:	6020      	str	r0, [r4, #0]
}
 8002ab8:	bd10      	pop	{r4, pc}

08002aba <timer_expired>:
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
int
timer_expired(struct timer *t)
{
 8002aba:	b510      	push	{r4, lr}
 8002abc:	4604      	mov	r4, r0
  return (clock_time_t)(clock_time() - t->start) >= (clock_time_t)t->interval;
 8002abe:	f002 f8ef 	bl	8004ca0 <clock_time>
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	1ac0      	subs	r0, r0, r3
 8002ac6:	6863      	ldr	r3, [r4, #4]
}
 8002ac8:	4298      	cmp	r0, r3
 8002aca:	bfb4      	ite	lt
 8002acc:	2000      	movlt	r0, #0
 8002ace:	2001      	movge	r0, #1
 8002ad0:	bd10      	pop	{r4, pc}
	...

08002ad4 <CpuUserProgramStartHook>:
** \return    BLT_TRUE if it is okay to start the user program, BLT_FALSE to keep
**            keep the bootloader active.
**
****************************************************************************************/
blt_bool CpuUserProgramStartHook(void)
{
 8002ad4:	b508      	push	{r3, lr}
  /* additional and optional backdoor entry through the pushbutton on the board. to
   * force the bootloader to stay active after reset, keep the pushbutton pressed while
   * resetting the microcontroller.
   */
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 8002ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ada:	4805      	ldr	r0, [pc, #20]	; (8002af0 <CpuUserProgramStartHook+0x1c>)
 8002adc:	f001 fa2c 	bl	8003f38 <HAL_GPIO_ReadPin>
 8002ae0:	2801      	cmp	r0, #1
 8002ae2:	d003      	beq.n	8002aec <CpuUserProgramStartHook+0x18>
     * bootloader active instead.
     */
    return BLT_FALSE;
  }
  /* clean up the LED driver */
  LedBlinkExit();
 8002ae4:	f000 f840 	bl	8002b68 <LedBlinkExit>
  /*  okay to start the user program.*/
  return BLT_TRUE;
 8002ae8:	2001      	movs	r0, #1
} /*** end of CpuUserProgramStartHook ***/
 8002aea:	bd08      	pop	{r3, pc}
    return BLT_FALSE;
 8002aec:	2000      	movs	r0, #0
 8002aee:	e7fc      	b.n	8002aea <CpuUserProgramStartHook+0x16>
 8002af0:	40020800 	.word	0x40020800

08002af4 <CopInitHook>:
**            watchdog.
** \return    none.
**
****************************************************************************************/
void CopInitHook(void)
{
 8002af4:	b508      	push	{r3, lr}
  /* this function is called upon initialization. might as well use it to initialize
   * the LED driver. It is kind of a visual watchdog anyways.
   */
  LedBlinkInit(100);
 8002af6:	2064      	movs	r0, #100	; 0x64
 8002af8:	f000 f806 	bl	8002b08 <LedBlinkInit>
} /*** end of CopInitHook ***/
 8002afc:	bd08      	pop	{r3, pc}

08002afe <CopServiceHook>:
**            the watchdog to prevent a watchdog reset.
** \return    none.
**
****************************************************************************************/
void CopServiceHook(void)
{
 8002afe:	b508      	push	{r3, lr}
  /* run the LED blink task. this is a better place to do it than in the main() program
   * loop. certain operations such as flash erase can take a long time, which would cause
   * a blink interval to be skipped. this function is also called during such operations,
   * so no blink intervals will be skipped when calling the LED blink task here.
   */
  LedBlinkTask();
 8002b00:	f000 f808 	bl	8002b14 <LedBlinkTask>
} /*** end of CopServiceHook ***/
 8002b04:	bd08      	pop	{r3, pc}
	...

08002b08 <LedBlinkInit>:
**
****************************************************************************************/
void LedBlinkInit(blt_int16u interval_ms)
{
  /* store the interval time between LED toggles */
  ledBlinkIntervalMs = interval_ms;
 8002b08:	4b01      	ldr	r3, [pc, #4]	; (8002b10 <LedBlinkInit+0x8>)
 8002b0a:	8018      	strh	r0, [r3, #0]
} /*** end of LedBlinkInit ***/
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20000612 	.word	0x20000612

08002b14 <LedBlinkTask>:
** \brief     Task function for blinking the LED as a fixed timer interval.
** \return    none.
**
****************************************************************************************/
void LedBlinkTask(void)
{
 8002b14:	b508      	push	{r3, lr}
  static blt_bool ledOn = BLT_FALSE;
  static blt_int32u nextBlinkEvent = 0;

  /* check for blink event */
  if (TimerGet() >= nextBlinkEvent)
 8002b16:	f7fe f80b 	bl	8000b30 <TimerGet>
 8002b1a:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <LedBlinkTask+0x44>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4298      	cmp	r0, r3
 8002b20:	d310      	bcc.n	8002b44 <LedBlinkTask+0x30>
  {
    /* toggle the LED state */
    if (ledOn == BLT_FALSE)
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <LedBlinkTask+0x48>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	b973      	cbnz	r3, 8002b46 <LedBlinkTask+0x32>
    {
      ledOn = BLT_TRUE;
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <LedBlinkTask+0x48>)
 8002b2c:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8002b2e:	2180      	movs	r1, #128	; 0x80
 8002b30:	480b      	ldr	r0, [pc, #44]	; (8002b60 <LedBlinkTask+0x4c>)
 8002b32:	f001 fa08 	bl	8003f46 <HAL_GPIO_WritePin>
    {
      ledOn = BLT_FALSE;
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
    }
    /* schedule the next blink event */
    nextBlinkEvent = TimerGet() + ledBlinkIntervalMs;
 8002b36:	f7fd fffb 	bl	8000b30 <TimerGet>
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <LedBlinkTask+0x50>)
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	4418      	add	r0, r3
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <LedBlinkTask+0x44>)
 8002b42:	6018      	str	r0, [r3, #0]
  }
} /*** end of LedBlinkTask ***/
 8002b44:	bd08      	pop	{r3, pc}
      ledOn = BLT_FALSE;
 8002b46:	2200      	movs	r2, #0
 8002b48:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <LedBlinkTask+0x48>)
 8002b4a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002b4c:	2180      	movs	r1, #128	; 0x80
 8002b4e:	4804      	ldr	r0, [pc, #16]	; (8002b60 <LedBlinkTask+0x4c>)
 8002b50:	f001 f9f9 	bl	8003f46 <HAL_GPIO_WritePin>
 8002b54:	e7ef      	b.n	8002b36 <LedBlinkTask+0x22>
 8002b56:	bf00      	nop
 8002b58:	20000618 	.word	0x20000618
 8002b5c:	20000614 	.word	0x20000614
 8002b60:	40020400 	.word	0x40020400
 8002b64:	20000612 	.word	0x20000612

08002b68 <LedBlinkExit>:
**            exit.
** \return    none.
**
****************************************************************************************/
void LedBlinkExit(void)
{
 8002b68:	b508      	push	{r3, lr}
  /* turn the LED off */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2180      	movs	r1, #128	; 0x80
 8002b6e:	4802      	ldr	r0, [pc, #8]	; (8002b78 <LedBlinkExit+0x10>)
 8002b70:	f001 f9e9 	bl	8003f46 <HAL_GPIO_WritePin>
} /*** end of LedBlinkExit ***/
 8002b74:	bd08      	pop	{r3, pc}
 8002b76:	bf00      	nop
 8002b78:	40020400 	.word	0x40020400

08002b7c <SystemClock_Config>:
**            subsystem.
** \return    none.
**
****************************************************************************************/
static void SystemClock_Config(void)
{
 8002b7c:	b500      	push	{lr}
 8002b7e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  /* Configure the main internal regulator output voltage. */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b80:	4b27      	ldr	r3, [pc, #156]	; (8002c20 <SystemClock_Config+0xa4>)
 8002b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b94:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <SystemClock_Config+0xa8>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	9b01      	ldr	r3, [sp, #4]

  /* Initializes the CPU, AHB and APB busses clocks. */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bb0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bb6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002bba:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002bc0:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8002bc4:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bc6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002bc8:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bca:	a807      	add	r0, sp, #28
 8002bcc:	f001 faaa 	bl	8004124 <HAL_RCC_OscConfig>
 8002bd0:	b9b0      	cbnz	r0, 8002c00 <SystemClock_Config+0x84>
     */
    ASSERT_RT(BLT_FALSE);
  }

  /* Activate the Over-Drive mode. */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002bd2:	f001 f9bf 	bl	8003f54 <HAL_PWREx_EnableOverDrive>
 8002bd6:	b9c0      	cbnz	r0, 8002c0a <SystemClock_Config+0x8e>
     */
    ASSERT_RT(BLT_FALSE);
  }

  /* Initializes the CPU, AHB and APB busses clocks. */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8002bd8:	230f      	movs	r3, #15
 8002bda:	9302      	str	r3, [sp, #8]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002be0:	2300      	movs	r3, #0
 8002be2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002be4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002be8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bee:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002bf0:	2107      	movs	r1, #7
 8002bf2:	a802      	add	r0, sp, #8
 8002bf4:	f001 fcec 	bl	80045d0 <HAL_RCC_ClockConfig>
 8002bf8:	b960      	cbnz	r0, 8002c14 <SystemClock_Config+0x98>
    /* Clock configuration incorrect or hardware failure. Hang the system to prevent
     * damage.
     */
    ASSERT_RT(BLT_FALSE);
  }
} /*** end of SystemClock_Config ***/
 8002bfa:	b015      	add	sp, #84	; 0x54
 8002bfc:	f85d fb04 	ldr.w	pc, [sp], #4
    ASSERT_RT(BLT_FALSE);
 8002c00:	2196      	movs	r1, #150	; 0x96
 8002c02:	4809      	ldr	r0, [pc, #36]	; (8002c28 <SystemClock_Config+0xac>)
 8002c04:	f7fd ffa1 	bl	8000b4a <AssertFailure>
 8002c08:	e7e3      	b.n	8002bd2 <SystemClock_Config+0x56>
    ASSERT_RT(BLT_FALSE);
 8002c0a:	219e      	movs	r1, #158	; 0x9e
 8002c0c:	4806      	ldr	r0, [pc, #24]	; (8002c28 <SystemClock_Config+0xac>)
 8002c0e:	f7fd ff9c 	bl	8000b4a <AssertFailure>
 8002c12:	e7e1      	b.n	8002bd8 <SystemClock_Config+0x5c>
    ASSERT_RT(BLT_FALSE);
 8002c14:	21ad      	movs	r1, #173	; 0xad
 8002c16:	4804      	ldr	r0, [pc, #16]	; (8002c28 <SystemClock_Config+0xac>)
 8002c18:	f7fd ff97 	bl	8000b4a <AssertFailure>
} /*** end of SystemClock_Config ***/
 8002c1c:	e7ed      	b.n	8002bfa <SystemClock_Config+0x7e>
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800
 8002c24:	40007000 	.word	0x40007000
 8002c28:	08005070 	.word	0x08005070

08002c2c <Init>:
{
 8002c2c:	b508      	push	{r3, lr}
  HAL_Init();
 8002c2e:	f000 f9b7 	bl	8002fa0 <HAL_Init>
  SystemClock_Config();
 8002c32:	f7ff ffa3 	bl	8002b7c <SystemClock_Config>
} /*** end of Init ***/
 8002c36:	bd08      	pop	{r3, pc}

08002c38 <main>:
{
 8002c38:	b500      	push	{lr}
 8002c3a:	b083      	sub	sp, #12
  blt_int8u deferredInitRequestFlag = 0;
 8002c3c:	2500      	movs	r5, #0
 8002c3e:	ac02      	add	r4, sp, #8
 8002c40:	f804 5d01 	strb.w	r5, [r4, #-1]!
  Init();
 8002c44:	f7ff fff2 	bl	8002c2c <Init>
  SharedParamsInit();
 8002c48:	f000 f914 	bl	8002e74 <SharedParamsInit>
  BootInit();
 8002c4c:	f7fd ffcc 	bl	8000be8 <BootInit>
  SharedParamsReadByIndex(0, &deferredInitRequestFlag);
 8002c50:	4621      	mov	r1, r4
 8002c52:	4628      	mov	r0, r5
 8002c54:	f000 f926 	bl	8002ea4 <SharedParamsReadByIndex>
  if (deferredInitRequestFlag == 1)
 8002c58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d002      	beq.n	8002c66 <main+0x2e>
    BootTask();
 8002c60:	f7fd ffd0 	bl	8000c04 <BootTask>
 8002c64:	e7fc      	b.n	8002c60 <main+0x28>
    ComDeferredInit();
 8002c66:	f7fe f847 	bl	8000cf8 <ComDeferredInit>
 8002c6a:	e7f9      	b.n	8002c60 <main+0x28>

08002c6c <HAL_MspInit>:
**            interrupt).
** \return    none.
**
****************************************************************************************/
void HAL_MspInit(void)
{
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Power and SYSCFG clock enable. */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c70:	4b39      	ldr	r3, [pc, #228]	; (8002d58 <HAL_MspInit+0xec>)
 8002c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
 8002c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c7c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002c80:	9201      	str	r2, [sp, #4]
 8002c82:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c8a:	645a      	str	r2, [r3, #68]	; 0x44
 8002c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c8e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002c92:	9202      	str	r2, [sp, #8]
 8002c94:	9a02      	ldr	r2, [sp, #8]
  /* GPIO ports clock enable. */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c98:	f042 0201 	orr.w	r2, r2, #1
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca0:	f002 0201 	and.w	r2, r2, #1
 8002ca4:	9203      	str	r2, [sp, #12]
 8002ca6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002caa:	f042 0202 	orr.w	r2, r2, #2
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
 8002cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb2:	f002 0202 	and.w	r2, r2, #2
 8002cb6:	9204      	str	r2, [sp, #16]
 8002cb8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cbc:	f042 0204 	orr.w	r2, r2, #4
 8002cc0:	631a      	str	r2, [r3, #48]	; 0x30
 8002cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc4:	f002 0204 	and.w	r2, r2, #4
 8002cc8:	9205      	str	r2, [sp, #20]
 8002cca:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cce:	f042 0208 	orr.w	r2, r2, #8
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8002cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd6:	f002 0208 	and.w	r2, r2, #8
 8002cda:	9206      	str	r2, [sp, #24]
 8002cdc:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002cec:	9207      	str	r2, [sp, #28]
 8002cee:	9a07      	ldr	r2, [sp, #28]

#if (BOOT_COM_RS232_ENABLE > 0)
  /* UART clock enable. */
  __HAL_RCC_USART3_CLK_ENABLE();
 8002cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfe:	9308      	str	r3, [sp, #32]
 8002d00:	9b08      	ldr	r3, [sp, #32]
#endif

  /* Configure GPIO pin for the LED. */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d02:	2680      	movs	r6, #128	; 0x80
 8002d04:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d06:	2301      	movs	r3, #1
 8002d08:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2400      	movs	r4, #0
 8002d0c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d10:	4d12      	ldr	r5, [pc, #72]	; (8002d5c <HAL_MspInit+0xf0>)
 8002d12:	a909      	add	r1, sp, #36	; 0x24
 8002d14:	4628      	mov	r0, r5
 8002d16:	f000 ff81 	bl	8003c1c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	4631      	mov	r1, r6
 8002d1e:	4628      	mov	r0, r5
 8002d20:	f001 f911 	bl	8003f46 <HAL_GPIO_WritePin>

  /* Configure GPIO pin for (optional) backdoor entry input. */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d28:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d2a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d2e:	a909      	add	r1, sp, #36	; 0x24
 8002d30:	480b      	ldr	r0, [pc, #44]	; (8002d60 <HAL_MspInit+0xf4>)
 8002d32:	f000 ff73 	bl	8003c1c <HAL_GPIO_Init>
#if (BOOT_COM_RS232_ENABLE > 0)
  /* UART TX and RX GPIO pin configuration. */
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8002d36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d3a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d42:	2303      	movs	r3, #3
 8002d44:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d46:	2307      	movs	r3, #7
 8002d48:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d4a:	a909      	add	r1, sp, #36	; 0x24
 8002d4c:	4805      	ldr	r0, [pc, #20]	; (8002d64 <HAL_MspInit+0xf8>)
 8002d4e:	f000 ff65 	bl	8003c1c <HAL_GPIO_Init>
#endif
} /*** end of HAL_MspInit ***/
 8002d52:	b00e      	add	sp, #56	; 0x38
 8002d54:	bd70      	pop	{r4, r5, r6, pc}
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40020400 	.word	0x40020400
 8002d60:	40020800 	.word	0x40020800
 8002d64:	40020c00 	.word	0x40020c00

08002d68 <HAL_MspDeInit>:
**            interrupt).
** \return    none.
**
****************************************************************************************/
void HAL_MspDeInit(void)
{
 8002d68:	b510      	push	{r4, lr}
  /* Reset the RCC clock configuration to the default reset state. */
  HAL_RCC_DeInit();
 8002d6a:	f001 f931 	bl	8003fd0 <HAL_RCC_DeInit>

  /* Reset GPIO pin for the LED to turn it off. */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002d6e:	4c1e      	ldr	r4, [pc, #120]	; (8002de8 <HAL_MspDeInit+0x80>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	2180      	movs	r1, #128	; 0x80
 8002d74:	4620      	mov	r0, r4
 8002d76:	f001 f8e6 	bl	8003f46 <HAL_GPIO_WritePin>

  /* Deinit used GPIOs. */
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002d7a:	2180      	movs	r1, #128	; 0x80
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f001 f83d 	bl	8003dfc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_13);
 8002d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d86:	4819      	ldr	r0, [pc, #100]	; (8002dec <HAL_MspDeInit+0x84>)
 8002d88:	f001 f838 	bl	8003dfc <HAL_GPIO_DeInit>

#if (BOOT_COM_RS232_ENABLE > 0)
  /* Deinit used GPIOs. */
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8);
 8002d8c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8002d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d94:	4620      	mov	r0, r4
 8002d96:	f001 f831 	bl	8003dfc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_9);
 8002d9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d9e:	4620      	mov	r0, r4
 8002da0:	f001 f82c 	bl	8003dfc <HAL_GPIO_DeInit>
  /* UART clock disable. */
  __HAL_RCC_USART3_CLK_DISABLE();
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_MspDeInit+0x88>)
 8002da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002da8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* GPIO ports clock disable. */
  __HAL_RCC_GPIOG_CLK_DISABLE();
 8002dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db4:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_DISABLE();
 8002db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002db8:	f022 0208 	bic.w	r2, r2, #8
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8002dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dc0:	f022 0204 	bic.w	r2, r2, #4
 8002dc4:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8002dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dc8:	f022 0202 	bic.w	r2, r2, #2
 8002dcc:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8002dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd0:	f022 0201 	bic.w	r2, r2, #1
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30

  /* SYSCFG and PWR clock disable. */
  __HAL_RCC_PWR_CLK_DISABLE();
 8002dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_DISABLE();
 8002dde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002de0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002de4:	645a      	str	r2, [r3, #68]	; 0x44
} /*** end of HAL_MspDeInit ***/
 8002de6:	bd10      	pop	{r4, pc}
 8002de8:	40020400 	.word	0x40020400
 8002dec:	40020800 	.word	0x40020800
 8002df0:	40023800 	.word	0x40023800

08002df4 <SharedParamsCalculateChecksum>:
{
  uint16_t result = 0;
  uint32_t byteIdx;

  /* Add the identifier bytes to the checksum. */
  result += (uint8_t)sharedParamsBuffer.identifier;
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <SharedParamsCalculateChecksum+0x30>)
 8002df6:	681b      	ldr	r3, [r3, #0]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 8u);
 8002df8:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8002dfc:	fa50 f283 	uxtab	r2, r0, r3
  result += (uint8_t)(sharedParamsBuffer.identifier >> 16u);
 8002e00:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8002e04:	4410      	add	r0, r2
  result += (uint8_t)(sharedParamsBuffer.identifier >> 24u);
 8002e06:	eb00 6013 	add.w	r0, r0, r3, lsr #24
  /* Loop through the parameter data array. */
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e005      	b.n	8002e1a <SharedParamsCalculateChecksum+0x26>
  {
    /* Add parameter data byte to the checksum. */
    result += (uint8_t)sharedParamsBuffer.data[byteIdx];
 8002e0e:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <SharedParamsCalculateChecksum+0x30>)
 8002e10:	441a      	add	r2, r3
 8002e12:	7912      	ldrb	r2, [r2, #4]
 8002e14:	4410      	add	r0, r2
 8002e16:	b280      	uxth	r0, r0
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8002e18:	3301      	adds	r3, #1
 8002e1a:	2b37      	cmp	r3, #55	; 0x37
 8002e1c:	d9f7      	bls.n	8002e0e <SharedParamsCalculateChecksum+0x1a>
  }
  /* Determine one's complement. */
  result = ~result;
  /* Determine two's complement. */
  result += 1;
 8002e1e:	4240      	negs	r0, r0
  /* Give the result back to the caller. */
  return result;
} /*** end of SharedParamsCalculateChecksum ***/
 8002e20:	b280      	uxth	r0, r0
 8002e22:	4770      	bx	lr
 8002e24:	20000000 	.word	0x20000000

08002e28 <SharedParamsVerifyChecksum>:
{
 8002e28:	b508      	push	{r3, lr}
  if (SharedParamsCalculateChecksum() == sharedParamsBuffer.checksum)
 8002e2a:	f7ff ffe3 	bl	8002df4 <SharedParamsCalculateChecksum>
 8002e2e:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <SharedParamsVerifyChecksum+0x18>)
 8002e30:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002e32:	4298      	cmp	r0, r3
 8002e34:	d001      	beq.n	8002e3a <SharedParamsVerifyChecksum+0x12>
  bool result = false;
 8002e36:	2000      	movs	r0, #0
} /*** end of SharedParamsVerifyChecksum ***/
 8002e38:	bd08      	pop	{r3, pc}
    result = true;
 8002e3a:	2001      	movs	r0, #1
 8002e3c:	e7fc      	b.n	8002e38 <SharedParamsVerifyChecksum+0x10>
 8002e3e:	bf00      	nop
 8002e40:	20000000 	.word	0x20000000

08002e44 <SharedParamsValidateBuffer>:
{
 8002e44:	b508      	push	{r3, lr}
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 8002e46:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <SharedParamsValidateBuffer+0x18>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <SharedParamsValidateBuffer+0x1c>)
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d001      	beq.n	8002e54 <SharedParamsValidateBuffer+0x10>
  bool result = false;
 8002e50:	2000      	movs	r0, #0
} /*** end of SharedParamsValitabeTable ***/
 8002e52:	bd08      	pop	{r3, pc}
       (SharedParamsVerifyChecksum()) )
 8002e54:	f7ff ffe8 	bl	8002e28 <SharedParamsVerifyChecksum>
 8002e58:	e7fb      	b.n	8002e52 <SharedParamsValidateBuffer+0xe>
 8002e5a:	bf00      	nop
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	ce42e7a2 	.word	0xce42e7a2

08002e64 <SharedParamsWriteChecksum>:
{
 8002e64:	b508      	push	{r3, lr}
  sharedParamsBuffer.checksum = SharedParamsCalculateChecksum();
 8002e66:	f7ff ffc5 	bl	8002df4 <SharedParamsCalculateChecksum>
 8002e6a:	4b01      	ldr	r3, [pc, #4]	; (8002e70 <SharedParamsWriteChecksum+0xc>)
 8002e6c:	8798      	strh	r0, [r3, #60]	; 0x3c
} /*** end of SharedParamsWriteChecksum ***/
 8002e6e:	bd08      	pop	{r3, pc}
 8002e70:	20000000 	.word	0x20000000

08002e74 <SharedParamsInit>:
{
 8002e74:	b508      	push	{r3, lr}
  if (!SharedParamsValidateBuffer())
 8002e76:	f7ff ffe5 	bl	8002e44 <SharedParamsValidateBuffer>
 8002e7a:	b968      	cbnz	r0, 8002e98 <SharedParamsInit+0x24>
    sharedParamsBuffer.identifier = SHARED_PARAMS_BUFFER_ID;
 8002e7c:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <SharedParamsInit+0x28>)
 8002e7e:	4a08      	ldr	r2, [pc, #32]	; (8002ea0 <SharedParamsInit+0x2c>)
 8002e80:	601a      	str	r2, [r3, #0]
    for (byteIdx=0; byteIdx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8002e82:	2300      	movs	r3, #0
 8002e84:	e004      	b.n	8002e90 <SharedParamsInit+0x1c>
      sharedParamsBuffer.data[byteIdx] = 0;
 8002e86:	4a05      	ldr	r2, [pc, #20]	; (8002e9c <SharedParamsInit+0x28>)
 8002e88:	441a      	add	r2, r3
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	7111      	strb	r1, [r2, #4]
    for (byteIdx=0; byteIdx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8002e8e:	3301      	adds	r3, #1
 8002e90:	2b37      	cmp	r3, #55	; 0x37
 8002e92:	d9f8      	bls.n	8002e86 <SharedParamsInit+0x12>
    SharedParamsWriteChecksum();
 8002e94:	f7ff ffe6 	bl	8002e64 <SharedParamsWriteChecksum>
} /*** end of SharedParamsInit ***/
 8002e98:	bd08      	pop	{r3, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000000 	.word	0x20000000
 8002ea0:	ce42e7a2 	.word	0xce42e7a2

08002ea4 <SharedParamsReadByIndex>:
{
 8002ea4:	b538      	push	{r3, r4, r5, lr}
 8002ea6:	4605      	mov	r5, r0
 8002ea8:	460c      	mov	r4, r1
  if ( (SharedParamsValidateBuffer()) &&
 8002eaa:	f7ff ffcb 	bl	8002e44 <SharedParamsValidateBuffer>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	b158      	cbz	r0, 8002eca <SharedParamsReadByIndex+0x26>
       (idx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN)  &&
 8002eb2:	2d37      	cmp	r5, #55	; 0x37
 8002eb4:	bf8c      	ite	hi
 8002eb6:	2300      	movhi	r3, #0
 8002eb8:	2301      	movls	r3, #1
 8002eba:	2c00      	cmp	r4, #0
 8002ebc:	bf08      	it	eq
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b11b      	cbz	r3, 8002eca <SharedParamsReadByIndex+0x26>
    *value = sharedParamsBuffer.data[idx];
 8002ec2:	4a03      	ldr	r2, [pc, #12]	; (8002ed0 <SharedParamsReadByIndex+0x2c>)
 8002ec4:	4415      	add	r5, r2
 8002ec6:	792a      	ldrb	r2, [r5, #4]
 8002ec8:	7022      	strb	r2, [r4, #0]
} /*** end of SharedParamsReadByIndex ***/
 8002eca:	4618      	mov	r0, r3
 8002ecc:	bd38      	pop	{r3, r4, r5, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000000 	.word	0x20000000

08002ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ed8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002eda:	e003      	b.n	8002ee4 <LoopCopyDataInit>

08002edc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ede:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ee0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ee2:	3104      	adds	r1, #4

08002ee4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ee4:	480b      	ldr	r0, [pc, #44]	; (8002f14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ee8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002eea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002eec:	d3f6      	bcc.n	8002edc <CopyDataInit>
  ldr  r2, =_sbss
 8002eee:	4a0b      	ldr	r2, [pc, #44]	; (8002f1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ef0:	e002      	b.n	8002ef8 <LoopFillZerobss>

08002ef2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ef2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ef4:	f842 3b04 	str.w	r3, [r2], #4

08002ef8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002efa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002efc:	d3f9      	bcc.n	8002ef2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002efe:	f001 fea7 	bl	8004c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f02:	f001 ffdf 	bl	8004ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f06:	f7ff fe97 	bl	8002c38 <main>
  bx  lr    
 8002f0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f0c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002f10:	080050a4 	.word	0x080050a4
  ldr  r0, =_sdata
 8002f14:	20000040 	.word	0x20000040
  ldr  r3, =_edata
 8002f18:	2000004c 	.word	0x2000004c
  ldr  r2, =_sbss
 8002f1c:	2000004c 	.word	0x2000004c
  ldr  r3, = _ebss
 8002f20:	20003e40 	.word	0x20003e40

08002f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f24:	e7fe      	b.n	8002f24 <ADC_IRQHandler>
	...

08002f28 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8002f28:	b510      	push	{r4, lr}
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_DeInit+0x28>)
 8002f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f30:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8002f32:	2400      	movs	r4, #0
 8002f34:	621c      	str	r4, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8002f38:	625c      	str	r4, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8002f3a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8002f3c:	611c      	str	r4, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8002f3e:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8002f40:	615c      	str	r4, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8002f42:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8002f44:	619c      	str	r4, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8002f46:	f7ff ff0f 	bl	8002d68 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
}
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	bd10      	pop	{r4, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800

08002f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f54:	b510      	push	{r4, lr}
 8002f56:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f58:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <HAL_InitTick+0x40>)
 8002f5a:	7818      	ldrb	r0, [r3, #0]
 8002f5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f60:	fbb3 f3f0 	udiv	r3, r3, r0
 8002f64:	4a0c      	ldr	r2, [pc, #48]	; (8002f98 <HAL_InitTick+0x44>)
 8002f66:	6810      	ldr	r0, [r2, #0]
 8002f68:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f6c:	f000 f87c 	bl	8003068 <HAL_SYSTICK_Config>
 8002f70:	b968      	cbnz	r0, 8002f8e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f72:	2c0f      	cmp	r4, #15
 8002f74:	d901      	bls.n	8002f7a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002f76:	2001      	movs	r0, #1
 8002f78:	e00a      	b.n	8002f90 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f82:	f000 f83f 	bl	8003004 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f86:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <HAL_InitTick+0x48>)
 8002f88:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	e000      	b.n	8002f90 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002f8e:	2001      	movs	r0, #1
}
 8002f90:	bd10      	pop	{r4, pc}
 8002f92:	bf00      	nop
 8002f94:	20000042 	.word	0x20000042
 8002f98:	20000048 	.word	0x20000048
 8002f9c:	20000044 	.word	0x20000044

08002fa0 <HAL_Init>:
{
 8002fa0:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa2:	2003      	movs	r0, #3
 8002fa4:	f000 f81c 	bl	8002fe0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f7ff ffd3 	bl	8002f54 <HAL_InitTick>
  HAL_MspInit();
 8002fae:	f7ff fe5d 	bl	8002c6c <HAL_MspInit>
}
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	bd08      	pop	{r3, pc}
	...

08002fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb8:	b538      	push	{r3, r4, r5, lr}
 8002fba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002fbc:	f7fd fdc0 	bl	8000b40 <HAL_GetTick>
 8002fc0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fc2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002fc6:	d002      	beq.n	8002fce <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fc8:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <HAL_Delay+0x24>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fce:	f7fd fdb7 	bl	8000b40 <HAL_GetTick>
 8002fd2:	1b40      	subs	r0, r0, r5
 8002fd4:	42a0      	cmp	r0, r4
 8002fd6:	d3fa      	bcc.n	8002fce <HAL_Delay+0x16>
  {
  }
}
 8002fd8:	bd38      	pop	{r3, r4, r5, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000042 	.word	0x20000042

08002fe0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe0:	4906      	ldr	r1, [pc, #24]	; (8002ffc <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8002fe2:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fe4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fe8:	041b      	lsls	r3, r3, #16
 8002fea:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002fec:	0200      	lsls	r0, r0, #8
 8002fee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002ff4:	4a02      	ldr	r2, [pc, #8]	; (8003000 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002ff6:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8002ff8:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002ffa:	4770      	bx	lr
 8002ffc:	e000ed00 	.word	0xe000ed00
 8003000:	05fa0000 	.word	0x05fa0000

08003004 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003004:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <HAL_NVIC_SetPriority+0x58>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800300e:	f1c3 0407 	rsb	r4, r3, #7
 8003012:	2c04      	cmp	r4, #4
 8003014:	bf28      	it	cs
 8003016:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003018:	1d1d      	adds	r5, r3, #4
 800301a:	2d06      	cmp	r5, #6
 800301c:	d914      	bls.n	8003048 <HAL_NVIC_SetPriority+0x44>
 800301e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003020:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003024:	fa05 f404 	lsl.w	r4, r5, r4
 8003028:	ea21 0104 	bic.w	r1, r1, r4
 800302c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800302e:	fa05 f303 	lsl.w	r3, r5, r3
 8003032:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003036:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8003038:	2800      	cmp	r0, #0
 800303a:	db07      	blt.n	800304c <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303c:	0109      	lsls	r1, r1, #4
 800303e:	b2c9      	uxtb	r1, r1
 8003040:	4b07      	ldr	r3, [pc, #28]	; (8003060 <HAL_NVIC_SetPriority+0x5c>)
 8003042:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003044:	bc30      	pop	{r4, r5}
 8003046:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003048:	2300      	movs	r3, #0
 800304a:	e7e9      	b.n	8003020 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304c:	f000 000f 	and.w	r0, r0, #15
 8003050:	0109      	lsls	r1, r1, #4
 8003052:	b2c9      	uxtb	r1, r1
 8003054:	4b03      	ldr	r3, [pc, #12]	; (8003064 <HAL_NVIC_SetPriority+0x60>)
 8003056:	5419      	strb	r1, [r3, r0]
 8003058:	e7f4      	b.n	8003044 <HAL_NVIC_SetPriority+0x40>
 800305a:	bf00      	nop
 800305c:	e000ed00 	.word	0xe000ed00
 8003060:	e000e400 	.word	0xe000e400
 8003064:	e000ed14 	.word	0xe000ed14

08003068 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003068:	3801      	subs	r0, #1
 800306a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800306e:	d20a      	bcs.n	8003086 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_SYSTICK_Config+0x24>)
 8003072:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003074:	4a06      	ldr	r2, [pc, #24]	; (8003090 <HAL_SYSTICK_Config+0x28>)
 8003076:	21f0      	movs	r1, #240	; 0xf0
 8003078:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800307c:	2000      	movs	r0, #0
 800307e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003080:	2207      	movs	r2, #7
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003086:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000e010 	.word	0xe000e010
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <ETH_MACAddressConfig>:
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003094:	7950      	ldrb	r0, [r2, #5]
 8003096:	7913      	ldrb	r3, [r2, #4]
 8003098:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800309c:	4807      	ldr	r0, [pc, #28]	; (80030bc <ETH_MACAddressConfig+0x28>)
 800309e:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80030a0:	78d0      	ldrb	r0, [r2, #3]
 80030a2:	7893      	ldrb	r3, [r2, #2]
 80030a4:	041b      	lsls	r3, r3, #16
 80030a6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80030aa:	7850      	ldrb	r0, [r2, #1]
 80030ac:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80030b0:	7812      	ldrb	r2, [r2, #0]
 80030b2:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80030b4:	4a02      	ldr	r2, [pc, #8]	; (80030c0 <ETH_MACAddressConfig+0x2c>)
 80030b6:	508b      	str	r3, [r1, r2]
}
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40028040 	.word	0x40028040
 80030c0:	40028044 	.word	0x40028044

080030c4 <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80030c4:	6801      	ldr	r1, [r0, #0]
 80030c6:	f241 0218 	movw	r2, #4120	; 0x1018
 80030ca:	588b      	ldr	r3, [r1, r2]
 80030cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030d0:	508b      	str	r3, [r1, r2]
}
 80030d2:	4770      	bx	lr

080030d4 <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80030d4:	6801      	ldr	r1, [r0, #0]
 80030d6:	f241 0218 	movw	r2, #4120	; 0x1018
 80030da:	588b      	ldr	r3, [r1, r2]
 80030dc:	f043 0302 	orr.w	r3, r3, #2
 80030e0:	508b      	str	r3, [r1, r2]
}
 80030e2:	4770      	bx	lr

080030e4 <ETH_MACDMAConfig>:
{
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	b09e      	sub	sp, #120	; 0x78
 80030e8:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80030ea:	b129      	cbz	r1, 80030f8 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80030ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030f0:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 80030f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030f6:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80030f8:	69e3      	ldr	r3, [r4, #28]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d168      	bne.n	80031d0 <ETH_MACDMAConfig+0xec>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80030fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003102:	9307      	str	r3, [sp, #28]
  tmpreg = (heth->Instance)->MACCR;
 8003104:	6821      	ldr	r1, [r4, #0]
 8003106:	680b      	ldr	r3, [r1, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003108:	4a37      	ldr	r2, [pc, #220]	; (80031e8 <ETH_MACDMAConfig+0x104>)
 800310a:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 800310c:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 800310e:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8003110:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8003112:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 8003114:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8003116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800311a:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800311c:	600b      	str	r3, [r1, #0]
  tmpreg = (heth->Instance)->MACCR;
 800311e:	6823      	ldr	r3, [r4, #0]
 8003120:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003122:	2001      	movs	r0, #1
 8003124:	f7ff ff48 	bl	8002fb8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8003128:	6823      	ldr	r3, [r4, #0]
 800312a:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	2240      	movs	r2, #64	; 0x40
 8003130:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003136:	2001      	movs	r0, #1
 8003138:	f7ff ff3e 	bl	8002fb8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003140:	6823      	ldr	r3, [r4, #0]
 8003142:	2500      	movs	r5, #0
 8003144:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800314a:	6822      	ldr	r2, [r4, #0]
 800314c:	6993      	ldr	r3, [r2, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800314e:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 8003152:	041b      	lsls	r3, r3, #16
 8003154:	0c1b      	lsrs	r3, r3, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800315a:	6193      	str	r3, [r2, #24]
   tmpreg = (heth->Instance)->MACFCR;
 800315c:	6823      	ldr	r3, [r4, #0]
 800315e:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003160:	2001      	movs	r0, #1
 8003162:	f7ff ff29 	bl	8002fb8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 800316e:	6823      	ldr	r3, [r4, #0]
 8003170:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003172:	2001      	movs	r0, #1
 8003174:	f7ff ff20 	bl	8002fb8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8003178:	6823      	ldr	r3, [r4, #0]
 800317a:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 800317c:	6821      	ldr	r1, [r4, #0]
 800317e:	f241 0518 	movw	r5, #4120	; 0x1018
 8003182:	594b      	ldr	r3, [r1, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003184:	4a19      	ldr	r2, [pc, #100]	; (80031ec <ETH_MACDMAConfig+0x108>)
 8003186:	401a      	ands	r2, r3
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003188:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <ETH_MACDMAConfig+0x10c>)
 800318a:	4313      	orrs	r3, r2
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800318c:	514b      	str	r3, [r1, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003192:	2001      	movs	r0, #1
 8003194:	f7ff ff10 	bl	8002fb8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031a2:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <ETH_MACDMAConfig+0x110>)
 80031a4:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ac:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80031ae:	2001      	movs	r0, #1
 80031b0:	f7ff ff02 	bl	8002fb8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80031b4:	6823      	ldr	r3, [r4, #0]
 80031b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ba:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80031bc:	69a3      	ldr	r3, [r4, #24]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d009      	beq.n	80031d6 <ETH_MACDMAConfig+0xf2>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80031c2:	6962      	ldr	r2, [r4, #20]
 80031c4:	2100      	movs	r1, #0
 80031c6:	4620      	mov	r0, r4
 80031c8:	f7ff ff64 	bl	8003094 <ETH_MACAddressConfig>
}
 80031cc:	b01e      	add	sp, #120	; 0x78
 80031ce:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	9307      	str	r3, [sp, #28]
 80031d4:	e796      	b.n	8003104 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80031d6:	6821      	ldr	r1, [r4, #0]
 80031d8:	f241 021c 	movw	r2, #4124	; 0x101c
 80031dc:	5888      	ldr	r0, [r1, r2]
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <ETH_MACDMAConfig+0x114>)
 80031e0:	4303      	orrs	r3, r0
 80031e2:	508b      	str	r3, [r1, r2]
 80031e4:	e7ed      	b.n	80031c2 <ETH_MACDMAConfig+0xde>
 80031e6:	bf00      	nop
 80031e8:	ff20810f 	.word	0xff20810f
 80031ec:	f8de3f23 	.word	0xf8de3f23
 80031f0:	02200004 	.word	0x02200004
 80031f4:	02c12080 	.word	0x02c12080
 80031f8:	00010040 	.word	0x00010040

080031fc <ETH_MACTransmissionEnable>:
{ 
 80031fc:	b510      	push	{r4, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003206:	6802      	ldr	r2, [r0, #0]
 8003208:	6813      	ldr	r3, [r2, #0]
 800320a:	f043 0308 	orr.w	r3, r3, #8
 800320e:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8003210:	6803      	ldr	r3, [r0, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003216:	2001      	movs	r0, #1
 8003218:	f7ff fece 	bl	8002fb8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	9a01      	ldr	r2, [sp, #4]
 8003220:	601a      	str	r2, [r3, #0]
}
 8003222:	b002      	add	sp, #8
 8003224:	bd10      	pop	{r4, pc}

08003226 <ETH_MACReceptionEnable>:
{ 
 8003226:	b510      	push	{r4, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003230:	6802      	ldr	r2, [r0, #0]
 8003232:	6813      	ldr	r3, [r2, #0]
 8003234:	f043 0304 	orr.w	r3, r3, #4
 8003238:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 800323a:	6803      	ldr	r3, [r0, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003240:	2001      	movs	r0, #1
 8003242:	f7ff feb9 	bl	8002fb8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	9a01      	ldr	r2, [sp, #4]
 800324a:	601a      	str	r2, [r3, #0]
}
 800324c:	b002      	add	sp, #8
 800324e:	bd10      	pop	{r4, pc}

08003250 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003250:	b530      	push	{r4, r5, lr}
 8003252:	b083      	sub	sp, #12
 8003254:	4605      	mov	r5, r0
  __IO uint32_t tmpreg = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	9301      	str	r3, [sp, #4]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800325a:	6802      	ldr	r2, [r0, #0]
 800325c:	f241 0418 	movw	r4, #4120	; 0x1018
 8003260:	5913      	ldr	r3, [r2, r4]
 8003262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003266:	5113      	str	r3, [r2, r4]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003268:	6803      	ldr	r3, [r0, #0]
 800326a:	591b      	ldr	r3, [r3, r4]
 800326c:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800326e:	2001      	movs	r0, #1
 8003270:	f7ff fea2 	bl	8002fb8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003274:	682b      	ldr	r3, [r5, #0]
 8003276:	9a01      	ldr	r2, [sp, #4]
 8003278:	511a      	str	r2, [r3, r4]
}
 800327a:	b003      	add	sp, #12
 800327c:	bd30      	pop	{r4, r5, pc}

0800327e <HAL_ETH_DMATxDescListInit>:
{
 800327e:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8003280:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8003284:	2c01      	cmp	r4, #1
 8003286:	d031      	beq.n	80032ec <HAL_ETH_DMATxDescListInit+0x6e>
 8003288:	2401      	movs	r4, #1
 800328a:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800328e:	2402      	movs	r4, #2
 8003290:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8003294:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 8003296:	2400      	movs	r4, #0
 8003298:	e001      	b.n	800329e <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800329a:	60f9      	str	r1, [r7, #12]
  for(i=0; i < TxBuffCount; i++)
 800329c:	3401      	adds	r4, #1
 800329e:	429c      	cmp	r4, r3
 80032a0:	d217      	bcs.n	80032d2 <HAL_ETH_DMATxDescListInit+0x54>
    dmatxdesc = DMATxDescTab + i;
 80032a2:	0165      	lsls	r5, r4, #5
 80032a4:	194f      	adds	r7, r1, r5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80032a6:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 80032aa:	514e      	str	r6, [r1, r5]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80032ac:	f240 56f4 	movw	r6, #1524	; 0x5f4
 80032b0:	fb06 2604 	mla	r6, r6, r4, r2
 80032b4:	60be      	str	r6, [r7, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80032b6:	69c6      	ldr	r6, [r0, #28]
 80032b8:	b91e      	cbnz	r6, 80032c2 <HAL_ETH_DMATxDescListInit+0x44>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80032ba:	594e      	ldr	r6, [r1, r5]
 80032bc:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 80032c0:	514e      	str	r6, [r1, r5]
    if(i < (TxBuffCount-1))
 80032c2:	1e5d      	subs	r5, r3, #1
 80032c4:	42a5      	cmp	r5, r4
 80032c6:	d9e8      	bls.n	800329a <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80032c8:	1c65      	adds	r5, r4, #1
 80032ca:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80032ce:	60fd      	str	r5, [r7, #12]
 80032d0:	e7e4      	b.n	800329c <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80032d2:	6802      	ldr	r2, [r0, #0]
 80032d4:	f241 0310 	movw	r3, #4112	; 0x1010
 80032d8:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80032da:	2301      	movs	r3, #1
 80032dc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80032e0:	2300      	movs	r3, #0
 80032e2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80032e6:	4618      	mov	r0, r3
}
 80032e8:	bcf0      	pop	{r4, r5, r6, r7}
 80032ea:	4770      	bx	lr
  __HAL_LOCK(heth);
 80032ec:	2002      	movs	r0, #2
 80032ee:	e7fb      	b.n	80032e8 <HAL_ETH_DMATxDescListInit+0x6a>

080032f0 <HAL_ETH_DMARxDescListInit>:
{
 80032f0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 80032f2:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80032f6:	2c01      	cmp	r4, #1
 80032f8:	d02e      	beq.n	8003358 <HAL_ETH_DMARxDescListInit+0x68>
 80032fa:	2401      	movs	r4, #1
 80032fc:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8003300:	2402      	movs	r4, #2
 8003302:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8003306:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 8003308:	2400      	movs	r4, #0
 800330a:	e001      	b.n	8003310 <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800330c:	60e9      	str	r1, [r5, #12]
  for(i=0; i < RxBuffCount; i++)
 800330e:	3401      	adds	r4, #1
 8003310:	429c      	cmp	r4, r3
 8003312:	d214      	bcs.n	800333e <HAL_ETH_DMARxDescListInit+0x4e>
    DMARxDesc = DMARxDescTab+i;
 8003314:	0166      	lsls	r6, r4, #5
 8003316:	198d      	adds	r5, r1, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003318:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800331c:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800331e:	f244 56f4 	movw	r6, #17908	; 0x45f4
 8003322:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003324:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8003328:	fb06 2604 	mla	r6, r6, r4, r2
 800332c:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1))
 800332e:	1e5e      	subs	r6, r3, #1
 8003330:	42a6      	cmp	r6, r4
 8003332:	d9eb      	bls.n	800330c <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8003334:	1c66      	adds	r6, r4, #1
 8003336:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 800333a:	60ee      	str	r6, [r5, #12]
 800333c:	e7e7      	b.n	800330e <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800333e:	6802      	ldr	r2, [r0, #0]
 8003340:	f241 030c 	movw	r3, #4108	; 0x100c
 8003344:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8003346:	2301      	movs	r3, #1
 8003348:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800334c:	2300      	movs	r3, #0
 800334e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8003352:	4618      	mov	r0, r3
}
 8003354:	bcf0      	pop	{r4, r5, r6, r7}
 8003356:	4770      	bx	lr
  __HAL_LOCK(heth);
 8003358:	2002      	movs	r0, #2
 800335a:	e7fb      	b.n	8003354 <HAL_ETH_DMARxDescListInit+0x64>

0800335c <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 800335c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8003360:	2b01      	cmp	r3, #1
 8003362:	f000 8085 	beq.w	8003470 <HAL_ETH_TransmitFrame+0x114>
 8003366:	2301      	movs	r3, #1
 8003368:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800336c:	2302      	movs	r3, #2
 800336e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0) 
 8003372:	b1b1      	cbz	r1, 80033a2 <HAL_ETH_TransmitFrame+0x46>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003374:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	2a00      	cmp	r2, #0
 800337a:	db1a      	blt.n	80033b2 <HAL_ETH_TransmitFrame+0x56>
{
 800337c:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 800337e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003382:	4291      	cmp	r1, r2
 8003384:	d91d      	bls.n	80033c2 <HAL_ETH_TransmitFrame+0x66>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003386:	4a3b      	ldr	r2, [pc, #236]	; (8003474 <HAL_ETH_TransmitFrame+0x118>)
 8003388:	fba2 4201 	umull	r4, r2, r2, r1
 800338c:	0a92      	lsrs	r2, r2, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800338e:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8003392:	fb04 1412 	mls	r4, r4, r2, r1
 8003396:	b104      	cbz	r4, 800339a <HAL_ETH_TransmitFrame+0x3e>
      bufcount++;
 8003398:	3201      	adds	r2, #1
  if (bufcount == 1)
 800339a:	2a01      	cmp	r2, #1
 800339c:	d011      	beq.n	80033c2 <HAL_ETH_TransmitFrame+0x66>
    for (i=0; i< bufcount; i++)
 800339e:	2300      	movs	r3, #0
 80033a0:	e047      	b.n	8003432 <HAL_ETH_TransmitFrame+0xd6>
    heth->State = HAL_ETH_STATE_READY;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80033a8:	2200      	movs	r2, #0
 80033aa:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 80033ae:	4618      	mov	r0, r3
 80033b0:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80033b2:	2312      	movs	r3, #18
 80033b4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80033b8:	2300      	movs	r3, #0
 80033ba:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 80033be:	2001      	movs	r0, #1
 80033c0:	4770      	bx	lr
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80033c8:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80033ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80033cc:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80033d0:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80033d2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80033d4:	6813      	ldr	r3, [r2, #0]
 80033d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033da:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80033dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80033e2:	6803      	ldr	r3, [r0, #0]
 80033e4:	f241 0214 	movw	r2, #4116	; 0x1014
 80033e8:	589a      	ldr	r2, [r3, r2]
 80033ea:	f012 0f04 	tst.w	r2, #4
 80033ee:	d008      	beq.n	8003402 <HAL_ETH_TransmitFrame+0xa6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80033f0:	f241 0214 	movw	r2, #4116	; 0x1014
 80033f4:	2104      	movs	r1, #4
 80033f6:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 80033f8:	6802      	ldr	r2, [r0, #0]
 80033fa:	f241 0304 	movw	r3, #4100	; 0x1004
 80033fe:	2100      	movs	r1, #0
 8003400:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 8003402:	2301      	movs	r3, #1
 8003404:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8003408:	2300      	movs	r3, #0
 800340a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800340e:	4618      	mov	r0, r3
}
 8003410:	bc30      	pop	{r4, r5}
 8003412:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003414:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8003416:	682c      	ldr	r4, [r5, #0]
 8003418:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800341c:	602c      	str	r4, [r5, #0]
 800341e:	e011      	b.n	8003444 <HAL_ETH_TransmitFrame+0xe8>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003420:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8003422:	682c      	ldr	r4, [r5, #0]
 8003424:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8003428:	602c      	str	r4, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800342a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800342c:	68e4      	ldr	r4, [r4, #12]
 800342e:	62c4      	str	r4, [r0, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8003430:	3301      	adds	r3, #1
 8003432:	429a      	cmp	r2, r3
 8003434:	d9d5      	bls.n	80033e2 <HAL_ETH_TransmitFrame+0x86>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003436:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8003438:	682c      	ldr	r4, [r5, #0]
 800343a:	f024 5440 	bic.w	r4, r4, #805306368	; 0x30000000
 800343e:	602c      	str	r4, [r5, #0]
      if (i == 0) 
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0e7      	beq.n	8003414 <HAL_ETH_TransmitFrame+0xb8>
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003444:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003446:	f240 55f4 	movw	r5, #1524	; 0x5f4
 800344a:	6065      	str	r5, [r4, #4]
      if (i == (bufcount-1))
 800344c:	1e54      	subs	r4, r2, #1
 800344e:	429c      	cmp	r4, r3
 8003450:	d1e6      	bne.n	8003420 <HAL_ETH_TransmitFrame+0xc4>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003452:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8003454:	682c      	ldr	r4, [r5, #0]
 8003456:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800345a:	602c      	str	r4, [r5, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800345c:	4c06      	ldr	r4, [pc, #24]	; (8003478 <HAL_ETH_TransmitFrame+0x11c>)
 800345e:	fb04 1402 	mla	r4, r4, r2, r1
 8003462:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003466:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8003468:	f3c4 040c 	ubfx	r4, r4, #0, #13
 800346c:	606c      	str	r4, [r5, #4]
 800346e:	e7d7      	b.n	8003420 <HAL_ETH_TransmitFrame+0xc4>
  __HAL_LOCK(heth);
 8003470:	2002      	movs	r0, #2
}
 8003472:	4770      	bx	lr
 8003474:	ac02b00b 	.word	0xac02b00b
 8003478:	fffffa0c 	.word	0xfffffa0c

0800347c <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 800347c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8003480:	2b01      	cmp	r3, #1
 8003482:	d040      	beq.n	8003506 <HAL_ETH_GetReceivedFrame+0x8a>
 8003484:	2301      	movs	r3, #1
 8003486:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800348a:	2302      	movs	r3, #2
 800348c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8003490:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	2a00      	cmp	r2, #0
 8003496:	db28      	blt.n	80034ea <HAL_ETH_GetReceivedFrame+0x6e>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800349e:	d019      	beq.n	80034d4 <HAL_ETH_GetReceivedFrame+0x58>
      (heth->RxFrameInfos).SegCount++;
 80034a0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80034a2:	3201      	adds	r2, #1
 80034a4:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos).SegCount == 1)
 80034a6:	2a01      	cmp	r2, #1
 80034a8:	d012      	beq.n	80034d0 <HAL_ETH_GetReceivedFrame+0x54>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80034aa:	6343      	str	r3, [r0, #52]	; 0x34
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	f3c2 420d 	ubfx	r2, r2, #16, #14
 80034b2:	3a04      	subs	r2, #4
      heth->RxFrameInfos.length = framelength;
 80034b4:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80034b6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80034b8:	6892      	ldr	r2, [r2, #8]
 80034ba:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80034c6:	2300      	movs	r3, #0
 80034c8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 80034cc:	4618      	mov	r0, r3
 80034ce:	4770      	bx	lr
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80034d0:	6303      	str	r3, [r0, #48]	; 0x30
 80034d2:	e7ea      	b.n	80034aa <HAL_ETH_GetReceivedFrame+0x2e>
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80034da:	d00e      	beq.n	80034fa <HAL_ETH_GetReceivedFrame+0x7e>
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80034dc:	6303      	str	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80034de:	2200      	movs	r2, #0
 80034e0:	6342      	str	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 80034e2:	2201      	movs	r2, #1
 80034e4:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	6283      	str	r3, [r0, #40]	; 0x28
  heth->State = HAL_ETH_STATE_READY;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80034f0:	2200      	movs	r2, #0
 80034f2:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 80034f6:	4618      	mov	r0, r3
 80034f8:	4770      	bx	lr
      (heth->RxFrameInfos).SegCount++;
 80034fa:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80034fc:	3201      	adds	r2, #1
 80034fe:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	6283      	str	r3, [r0, #40]	; 0x28
 8003504:	e7f1      	b.n	80034ea <HAL_ETH_GetReceivedFrame+0x6e>
  __HAL_LOCK(heth);
 8003506:	2002      	movs	r0, #2
}
 8003508:	4770      	bx	lr

0800350a <HAL_ETH_ReadPHYRegister>:
{
 800350a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800350c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b82      	cmp	r3, #130	; 0x82
 8003514:	d033      	beq.n	800357e <HAL_ETH_ReadPHYRegister+0x74>
 8003516:	4616      	mov	r6, r2
 8003518:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800351a:	2382      	movs	r3, #130	; 0x82
 800351c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8003520:	6802      	ldr	r2, [r0, #0]
 8003522:	6913      	ldr	r3, [r2, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003524:	f003 031c 	and.w	r3, r3, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003528:	8a04      	ldrh	r4, [r0, #16]
 800352a:	02e4      	lsls	r4, r4, #11
 800352c:	b2a4      	uxth	r4, r4
 800352e:	4323      	orrs	r3, r4
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003530:	018c      	lsls	r4, r1, #6
 8003532:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8003536:	431c      	orrs	r4, r3
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8003538:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 800353c:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 800353e:	f7fd faff 	bl	8000b40 <HAL_GetTick>
 8003542:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003544:	f014 0f01 	tst.w	r4, #1
 8003548:	d010      	beq.n	800356c <HAL_ETH_ReadPHYRegister+0x62>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800354a:	f7fd faf9 	bl	8000b40 <HAL_GetTick>
 800354e:	1bc0      	subs	r0, r0, r7
 8003550:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003554:	d202      	bcs.n	800355c <HAL_ETH_ReadPHYRegister+0x52>
    tmpreg = heth->Instance->MACMIIAR;
 8003556:	682b      	ldr	r3, [r5, #0]
 8003558:	691c      	ldr	r4, [r3, #16]
 800355a:	e7f3      	b.n	8003544 <HAL_ETH_ReadPHYRegister+0x3a>
      heth->State= HAL_ETH_STATE_READY;
 800355c:	2301      	movs	r3, #1
 800355e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8003562:	2300      	movs	r3, #0
 8003564:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8003568:	2003      	movs	r0, #3
 800356a:	e007      	b.n	800357c <HAL_ETH_ReadPHYRegister+0x72>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	b29b      	uxth	r3, r3
 8003572:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8003574:	2301      	movs	r3, #1
 8003576:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 800357a:	2000      	movs	r0, #0
}
 800357c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800357e:	2002      	movs	r0, #2
 8003580:	e7fc      	b.n	800357c <HAL_ETH_ReadPHYRegister+0x72>

08003582 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003582:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b42      	cmp	r3, #66	; 0x42
 800358a:	d032      	beq.n	80035f2 <HAL_ETH_WritePHYRegister+0x70>
{
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003590:	2342      	movs	r3, #66	; 0x42
 8003592:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8003596:	6800      	ldr	r0, [r0, #0]
 8003598:	6903      	ldr	r3, [r0, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800359a:	f003 031c 	and.w	r3, r3, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800359e:	8a2c      	ldrh	r4, [r5, #16]
 80035a0:	02e4      	lsls	r4, r4, #11
 80035a2:	b2a4      	uxth	r4, r4
 80035a4:	4323      	orrs	r3, r4
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80035a6:	018c      	lsls	r4, r1, #6
 80035a8:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 80035ac:	431c      	orrs	r4, r3
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80035ae:	f044 0403 	orr.w	r4, r4, #3
 80035b2:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80035b4:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg;
 80035b6:	682b      	ldr	r3, [r5, #0]
 80035b8:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 80035ba:	f7fd fac1 	bl	8000b40 <HAL_GetTick>
 80035be:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80035c0:	f014 0f01 	tst.w	r4, #1
 80035c4:	d010      	beq.n	80035e8 <HAL_ETH_WritePHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80035c6:	f7fd fabb 	bl	8000b40 <HAL_GetTick>
 80035ca:	1b80      	subs	r0, r0, r6
 80035cc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80035d0:	d202      	bcs.n	80035d8 <HAL_ETH_WritePHYRegister+0x56>
    tmpreg = heth->Instance->MACMIIAR;
 80035d2:	682b      	ldr	r3, [r5, #0]
 80035d4:	691c      	ldr	r4, [r3, #16]
 80035d6:	e7f3      	b.n	80035c0 <HAL_ETH_WritePHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 80035d8:	2301      	movs	r3, #1
 80035da:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80035de:	2300      	movs	r3, #0
 80035e0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80035e4:	2003      	movs	r0, #3
 80035e6:	e003      	b.n	80035f0 <HAL_ETH_WritePHYRegister+0x6e>
  heth->State = HAL_ETH_STATE_READY;
 80035e8:	2301      	movs	r3, #1
 80035ea:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 80035ee:	2000      	movs	r0, #0
}
 80035f0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80035f2:	2002      	movs	r0, #2
}
 80035f4:	4770      	bx	lr
	...

080035f8 <HAL_ETH_Init>:
{
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	b082      	sub	sp, #8
  uint32_t tempreg = 0, phyreg = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8003600:	2800      	cmp	r0, #0
 8003602:	f000 810c 	beq.w	800381e <HAL_ETH_Init+0x226>
 8003606:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8003608:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800360c:	2b00      	cmp	r3, #0
 800360e:	d032      	beq.n	8003676 <HAL_ETH_Init+0x7e>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003610:	4b84      	ldr	r3, [pc, #528]	; (8003824 <HAL_ETH_Init+0x22c>)
 8003612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003614:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003618:	645a      	str	r2, [r3, #68]	; 0x44
 800361a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003624:	4b80      	ldr	r3, [pc, #512]	; (8003828 <HAL_ETH_Init+0x230>)
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800362c:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	6a21      	ldr	r1, [r4, #32]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003644:	f7fd fa7c 	bl	8000b40 <HAL_GetTick>
 8003648:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	f012 0f01 	tst.w	r2, #1
 8003656:	d013      	beq.n	8003680 <HAL_ETH_Init+0x88>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003658:	f7fd fa72 	bl	8000b40 <HAL_GetTick>
 800365c:	1b40      	subs	r0, r0, r5
 800365e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8003662:	d9f2      	bls.n	800364a <HAL_ETH_Init+0x52>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003664:	2503      	movs	r5, #3
 8003666:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800366a:	2300      	movs	r3, #0
 800366c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8003670:	4628      	mov	r0, r5
 8003672:	b002      	add	sp, #8
 8003674:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 8003676:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800367a:	f001 fb15 	bl	8004ca8 <HAL_ETH_MspInit>
 800367e:	e7c7      	b.n	8003610 <HAL_ETH_Init+0x18>
  tempreg = (heth->Instance)->MACMIIAR;
 8003680:	691d      	ldr	r5, [r3, #16]
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003682:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8003686:	f001 f855 	bl	8004734 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 800368a:	4b68      	ldr	r3, [pc, #416]	; (800382c <HAL_ETH_Init+0x234>)
 800368c:	4403      	add	r3, r0
 800368e:	4a68      	ldr	r2, [pc, #416]	; (8003830 <HAL_ETH_Init+0x238>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d855      	bhi.n	8003740 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003694:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8003698:	6823      	ldr	r3, [r4, #0]
 800369a:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800369c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036a0:	2100      	movs	r1, #0
 80036a2:	4620      	mov	r0, r4
 80036a4:	f7ff ff6d 	bl	8003582 <HAL_ETH_WritePHYRegister>
 80036a8:	4605      	mov	r5, r0
 80036aa:	2800      	cmp	r0, #0
 80036ac:	d160      	bne.n	8003770 <HAL_ETH_Init+0x178>
  HAL_Delay(PHY_RESET_DELAY);
 80036ae:	20ff      	movs	r0, #255	; 0xff
 80036b0:	f7ff fc82 	bl	8002fb8 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80036b4:	6863      	ldr	r3, [r4, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8091 	beq.w	80037de <HAL_ETH_Init+0x1e6>
    tickstart = HAL_GetTick();
 80036bc:	f7fd fa40 	bl	8000b40 <HAL_GetTick>
 80036c0:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80036c2:	aa01      	add	r2, sp, #4
 80036c4:	2101      	movs	r1, #1
 80036c6:	4620      	mov	r0, r4
 80036c8:	f7ff ff1f 	bl	800350a <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80036cc:	f7fd fa38 	bl	8000b40 <HAL_GetTick>
 80036d0:	1b80      	subs	r0, r0, r6
 80036d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80036d6:	4298      	cmp	r0, r3
 80036d8:	d852      	bhi.n	8003780 <HAL_ETH_Init+0x188>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80036da:	9b01      	ldr	r3, [sp, #4]
 80036dc:	f013 0f04 	tst.w	r3, #4
 80036e0:	d0ef      	beq.n	80036c2 <HAL_ETH_Init+0xca>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80036e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036e6:	2100      	movs	r1, #0
 80036e8:	4620      	mov	r0, r4
 80036ea:	f7ff ff4a 	bl	8003582 <HAL_ETH_WritePHYRegister>
 80036ee:	2800      	cmp	r0, #0
 80036f0:	d152      	bne.n	8003798 <HAL_ETH_Init+0x1a0>
    tickstart = HAL_GetTick();
 80036f2:	f7fd fa25 	bl	8000b40 <HAL_GetTick>
 80036f6:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80036f8:	aa01      	add	r2, sp, #4
 80036fa:	2101      	movs	r1, #1
 80036fc:	4620      	mov	r0, r4
 80036fe:	f7ff ff04 	bl	800350a <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003702:	f7fd fa1d 	bl	8000b40 <HAL_GetTick>
 8003706:	1b80      	subs	r0, r0, r6
 8003708:	f241 3388 	movw	r3, #5000	; 0x1388
 800370c:	4298      	cmp	r0, r3
 800370e:	d84b      	bhi.n	80037a8 <HAL_ETH_Init+0x1b0>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003710:	9b01      	ldr	r3, [sp, #4]
 8003712:	f013 0f20 	tst.w	r3, #32
 8003716:	d0ef      	beq.n	80036f8 <HAL_ETH_Init+0x100>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003718:	aa01      	add	r2, sp, #4
 800371a:	2110      	movs	r1, #16
 800371c:	4620      	mov	r0, r4
 800371e:	f7ff fef4 	bl	800350a <HAL_ETH_ReadPHYRegister>
 8003722:	2800      	cmp	r0, #0
 8003724:	d14c      	bne.n	80037c0 <HAL_ETH_Init+0x1c8>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003726:	9b01      	ldr	r3, [sp, #4]
 8003728:	f013 0f04 	tst.w	r3, #4
 800372c:	d050      	beq.n	80037d0 <HAL_ETH_Init+0x1d8>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800372e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003732:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003734:	f013 0f02 	tst.w	r3, #2
 8003738:	d04d      	beq.n	80037d6 <HAL_ETH_Init+0x1de>
      (heth->Init).Speed = ETH_SPEED_10M; 
 800373a:	2300      	movs	r3, #0
 800373c:	60a3      	str	r3, [r4, #8]
 800373e:	e05e      	b.n	80037fe <HAL_ETH_Init+0x206>
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8003740:	4b3c      	ldr	r3, [pc, #240]	; (8003834 <HAL_ETH_Init+0x23c>)
 8003742:	4403      	add	r3, r0
 8003744:	4a3c      	ldr	r2, [pc, #240]	; (8003838 <HAL_ETH_Init+0x240>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d802      	bhi.n	8003750 <HAL_ETH_Init+0x158>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800374a:	f045 050c 	orr.w	r5, r5, #12
 800374e:	e7a3      	b.n	8003698 <HAL_ETH_Init+0xa0>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8003750:	4b3a      	ldr	r3, [pc, #232]	; (800383c <HAL_ETH_Init+0x244>)
 8003752:	4403      	add	r3, r0
 8003754:	4a3a      	ldr	r2, [pc, #232]	; (8003840 <HAL_ETH_Init+0x248>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d99e      	bls.n	8003698 <HAL_ETH_Init+0xa0>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800375a:	4b3a      	ldr	r3, [pc, #232]	; (8003844 <HAL_ETH_Init+0x24c>)
 800375c:	4403      	add	r3, r0
 800375e:	4a3a      	ldr	r2, [pc, #232]	; (8003848 <HAL_ETH_Init+0x250>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d802      	bhi.n	800376a <HAL_ETH_Init+0x172>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003764:	f045 0504 	orr.w	r5, r5, #4
 8003768:	e796      	b.n	8003698 <HAL_ETH_Init+0xa0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800376a:	f045 0510 	orr.w	r5, r5, #16
 800376e:	e793      	b.n	8003698 <HAL_ETH_Init+0xa0>
    ETH_MACDMAConfig(heth, err);
 8003770:	2101      	movs	r1, #1
 8003772:	4620      	mov	r0, r4
 8003774:	f7ff fcb6 	bl	80030e4 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 8003778:	2501      	movs	r5, #1
 800377a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 800377e:	e777      	b.n	8003670 <HAL_ETH_Init+0x78>
        ETH_MACDMAConfig(heth, err);
 8003780:	2101      	movs	r1, #1
 8003782:	4620      	mov	r0, r4
 8003784:	f7ff fcae 	bl	80030e4 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8003788:	2301      	movs	r3, #1
 800378a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800378e:	2300      	movs	r3, #0
 8003790:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8003794:	2503      	movs	r5, #3
 8003796:	e76b      	b.n	8003670 <HAL_ETH_Init+0x78>
      ETH_MACDMAConfig(heth, err);
 8003798:	2101      	movs	r1, #1
 800379a:	4620      	mov	r0, r4
 800379c:	f7ff fca2 	bl	80030e4 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80037a0:	2501      	movs	r5, #1
 80037a2:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 80037a6:	e763      	b.n	8003670 <HAL_ETH_Init+0x78>
        ETH_MACDMAConfig(heth, err);
 80037a8:	2101      	movs	r1, #1
 80037aa:	4620      	mov	r0, r4
 80037ac:	f7ff fc9a 	bl	80030e4 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 80037b0:	2301      	movs	r3, #1
 80037b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 80037b6:	2300      	movs	r3, #0
 80037b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 80037bc:	2503      	movs	r5, #3
 80037be:	e757      	b.n	8003670 <HAL_ETH_Init+0x78>
      ETH_MACDMAConfig(heth, err);
 80037c0:	2101      	movs	r1, #1
 80037c2:	4620      	mov	r0, r4
 80037c4:	f7ff fc8e 	bl	80030e4 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80037c8:	2501      	movs	r5, #1
 80037ca:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 80037ce:	e74f      	b.n	8003670 <HAL_ETH_Init+0x78>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80037d0:	2200      	movs	r2, #0
 80037d2:	60e2      	str	r2, [r4, #12]
 80037d4:	e7ae      	b.n	8003734 <HAL_ETH_Init+0x13c>
      (heth->Init).Speed = ETH_SPEED_100M;
 80037d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037da:	60a3      	str	r3, [r4, #8]
 80037dc:	e00f      	b.n	80037fe <HAL_ETH_Init+0x206>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80037de:	68e2      	ldr	r2, [r4, #12]
 80037e0:	f3c2 02cf 	ubfx	r2, r2, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80037e4:	68a3      	ldr	r3, [r4, #8]
 80037e6:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80037ea:	431a      	orrs	r2, r3
 80037ec:	2100      	movs	r1, #0
 80037ee:	4620      	mov	r0, r4
 80037f0:	f7ff fec7 	bl	8003582 <HAL_ETH_WritePHYRegister>
 80037f4:	b958      	cbnz	r0, 800380e <HAL_ETH_Init+0x216>
    HAL_Delay(PHY_CONFIG_DELAY);
 80037f6:	f640 70ff 	movw	r0, #4095	; 0xfff
 80037fa:	f7ff fbdd 	bl	8002fb8 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 80037fe:	2100      	movs	r1, #0
 8003800:	4620      	mov	r0, r4
 8003802:	f7ff fc6f 	bl	80030e4 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8003806:	2301      	movs	r3, #1
 8003808:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800380c:	e730      	b.n	8003670 <HAL_ETH_Init+0x78>
      ETH_MACDMAConfig(heth, err);
 800380e:	2101      	movs	r1, #1
 8003810:	4620      	mov	r0, r4
 8003812:	f7ff fc67 	bl	80030e4 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8003816:	2501      	movs	r5, #1
 8003818:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 800381c:	e728      	b.n	8003670 <HAL_ETH_Init+0x78>
    return HAL_ERROR;
 800381e:	2501      	movs	r5, #1
 8003820:	e726      	b.n	8003670 <HAL_ETH_Init+0x78>
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800
 8003828:	40013800 	.word	0x40013800
 800382c:	feced300 	.word	0xfeced300
 8003830:	00e4e1bf 	.word	0x00e4e1bf
 8003834:	fde9f140 	.word	0xfde9f140
 8003838:	017d783f 	.word	0x017d783f
 800383c:	fc6c7900 	.word	0xfc6c7900
 8003840:	026259ff 	.word	0x026259ff
 8003844:	fa0a1f00 	.word	0xfa0a1f00
 8003848:	02faf07f 	.word	0x02faf07f

0800384c <HAL_ETH_Start>:
{  
 800384c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 800384e:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8003852:	2b01      	cmp	r3, #1
 8003854:	d01a      	beq.n	800388c <HAL_ETH_Start+0x40>
 8003856:	4604      	mov	r4, r0
 8003858:	2501      	movs	r5, #1
 800385a:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800385e:	2302      	movs	r3, #2
 8003860:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 8003864:	f7ff fcca 	bl	80031fc <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 8003868:	4620      	mov	r0, r4
 800386a:	f7ff fcdc 	bl	8003226 <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 800386e:	4620      	mov	r0, r4
 8003870:	f7ff fcee 	bl	8003250 <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 8003874:	4620      	mov	r0, r4
 8003876:	f7ff fc25 	bl	80030c4 <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 800387a:	4620      	mov	r0, r4
 800387c:	f7ff fc2a 	bl	80030d4 <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 8003880:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8003884:	2000      	movs	r0, #0
 8003886:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
}
 800388a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(heth);
 800388c:	2002      	movs	r0, #2
 800388e:	e7fc      	b.n	800388a <HAL_ETH_Start+0x3e>

08003890 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003890:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8003892:	490a      	ldr	r1, [pc, #40]	; (80038bc <FLASH_Program_DoubleWord+0x2c>)
 8003894:	690c      	ldr	r4, [r1, #16]
 8003896:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800389a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800389c:	690c      	ldr	r4, [r1, #16]
 800389e:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80038a2:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80038a4:	690c      	ldr	r4, [r1, #16]
 80038a6:	f044 0401 	orr.w	r4, r4, #1
 80038aa:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80038ac:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80038ae:	6043      	str	r3, [r0, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80038b0:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80038b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40023c00 	.word	0x40023c00

080038c0 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80038c0:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <FLASH_Program_Word+0x24>)
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80038c8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	f042 0201 	orr.w	r2, r2, #1
 80038d8:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80038da:	6001      	str	r1, [r0, #0]
 80038dc:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40023c00 	.word	0x40023c00

080038e8 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80038e8:	4b08      	ldr	r3, [pc, #32]	; (800390c <FLASH_Program_HalfWord+0x24>)
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80038f0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038f8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	f042 0201 	orr.w	r2, r2, #1
 8003900:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8003902:	8001      	strh	r1, [r0, #0]
 8003904:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40023c00 	.word	0x40023c00

08003910 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8003910:	4b07      	ldr	r3, [pc, #28]	; (8003930 <FLASH_Program_Byte+0x20>)
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003918:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	f042 0201 	orr.w	r2, r2, #1
 8003924:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 8003926:	7001      	strb	r1, [r0, #0]
 8003928:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40023c00 	.word	0x40023c00

08003934 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003934:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <FLASH_SetErrorCode+0x6c>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f013 0f02 	tst.w	r3, #2
 800393c:	d004      	beq.n	8003948 <FLASH_SetErrorCode+0x14>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800393e:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <FLASH_SetErrorCode+0x70>)
 8003940:	6993      	ldr	r3, [r2, #24]
 8003942:	f043 0320 	orr.w	r3, r3, #32
 8003946:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003948:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <FLASH_SetErrorCode+0x6c>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f013 0f10 	tst.w	r3, #16
 8003950:	d004      	beq.n	800395c <FLASH_SetErrorCode+0x28>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003952:	4a14      	ldr	r2, [pc, #80]	; (80039a4 <FLASH_SetErrorCode+0x70>)
 8003954:	6993      	ldr	r3, [r2, #24]
 8003956:	f043 0310 	orr.w	r3, r3, #16
 800395a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800395c:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <FLASH_SetErrorCode+0x6c>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f013 0f20 	tst.w	r3, #32
 8003964:	d004      	beq.n	8003970 <FLASH_SetErrorCode+0x3c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003966:	4a0f      	ldr	r2, [pc, #60]	; (80039a4 <FLASH_SetErrorCode+0x70>)
 8003968:	6993      	ldr	r3, [r2, #24]
 800396a:	f043 0308 	orr.w	r3, r3, #8
 800396e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <FLASH_SetErrorCode+0x6c>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003978:	d004      	beq.n	8003984 <FLASH_SetErrorCode+0x50>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800397a:	4a0a      	ldr	r2, [pc, #40]	; (80039a4 <FLASH_SetErrorCode+0x70>)
 800397c:	6993      	ldr	r3, [r2, #24]
 800397e:	f043 0304 	orr.w	r3, r3, #4
 8003982:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <FLASH_SetErrorCode+0x6c>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f013 0f80 	tst.w	r3, #128	; 0x80
 800398c:	d004      	beq.n	8003998 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800398e:	4a05      	ldr	r2, [pc, #20]	; (80039a4 <FLASH_SetErrorCode+0x70>)
 8003990:	6993      	ldr	r3, [r2, #24]
 8003992:	f043 0302 	orr.w	r3, r3, #2
 8003996:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8003998:	4b01      	ldr	r3, [pc, #4]	; (80039a0 <FLASH_SetErrorCode+0x6c>)
 800399a:	22f2      	movs	r2, #242	; 0xf2
 800399c:	60da      	str	r2, [r3, #12]
}
 800399e:	4770      	bx	lr
 80039a0:	40023c00 	.word	0x40023c00
 80039a4:	20000d3c 	.word	0x20000d3c

080039a8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80039a8:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <HAL_FLASH_Unlock+0x28>)
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	db01      	blt.n	80039b4 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80039b0:	2000      	movs	r0, #0
 80039b2:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80039b4:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <HAL_FLASH_Unlock+0x28>)
 80039b6:	4a07      	ldr	r2, [pc, #28]	; (80039d4 <HAL_FLASH_Unlock+0x2c>)
 80039b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80039ba:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80039be:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	db01      	blt.n	80039ca <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80039c6:	2000      	movs	r0, #0
 80039c8:	4770      	bx	lr
      status = HAL_ERROR;
 80039ca:	2001      	movs	r0, #1
}
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40023c00 	.word	0x40023c00
 80039d4:	45670123 	.word	0x45670123

080039d8 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 80039d8:	4a03      	ldr	r2, [pc, #12]	; (80039e8 <HAL_FLASH_Lock+0x10>)
 80039da:	6913      	ldr	r3, [r2, #16]
 80039dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039e0:	6113      	str	r3, [r2, #16]
}
 80039e2:	2000      	movs	r0, #0
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40023c00 	.word	0x40023c00

080039ec <FLASH_WaitForLastOperation>:
{ 
 80039ec:	b538      	push	{r3, r4, r5, lr}
 80039ee:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039f0:	4b16      	ldr	r3, [pc, #88]	; (8003a4c <FLASH_WaitForLastOperation+0x60>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 80039f6:	f7fd f8a3 	bl	8000b40 <HAL_GetTick>
 80039fa:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80039fc:	4b14      	ldr	r3, [pc, #80]	; (8003a50 <FLASH_WaitForLastOperation+0x64>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003a04:	d00a      	beq.n	8003a1c <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8003a06:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003a0a:	d0f7      	beq.n	80039fc <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003a0c:	b1cc      	cbz	r4, 8003a42 <FLASH_WaitForLastOperation+0x56>
 8003a0e:	f7fd f897 	bl	8000b40 <HAL_GetTick>
 8003a12:	1b40      	subs	r0, r0, r5
 8003a14:	42a0      	cmp	r0, r4
 8003a16:	d9f1      	bls.n	80039fc <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 8003a18:	2003      	movs	r0, #3
 8003a1a:	e00d      	b.n	8003a38 <FLASH_WaitForLastOperation+0x4c>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <FLASH_WaitForLastOperation+0x64>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 8003a24:	d109      	bne.n	8003a3a <FLASH_WaitForLastOperation+0x4e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <FLASH_WaitForLastOperation+0x64>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f013 0f01 	tst.w	r3, #1
 8003a2e:	d00a      	beq.n	8003a46 <FLASH_WaitForLastOperation+0x5a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003a30:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <FLASH_WaitForLastOperation+0x64>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8003a36:	2000      	movs	r0, #0
}  
 8003a38:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 8003a3a:	f7ff ff7b 	bl	8003934 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003a3e:	2001      	movs	r0, #1
 8003a40:	e7fa      	b.n	8003a38 <FLASH_WaitForLastOperation+0x4c>
        return HAL_TIMEOUT;
 8003a42:	2003      	movs	r0, #3
 8003a44:	e7f8      	b.n	8003a38 <FLASH_WaitForLastOperation+0x4c>
  return HAL_OK;
 8003a46:	2000      	movs	r0, #0
 8003a48:	e7f6      	b.n	8003a38 <FLASH_WaitForLastOperation+0x4c>
 8003a4a:	bf00      	nop
 8003a4c:	20000d3c 	.word	0x20000d3c
 8003a50:	40023c00 	.word	0x40023c00

08003a54 <HAL_FLASH_Program>:
{
 8003a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8003a56:	4c1e      	ldr	r4, [pc, #120]	; (8003ad0 <HAL_FLASH_Program+0x7c>)
 8003a58:	7d24      	ldrb	r4, [r4, #20]
 8003a5a:	2c01      	cmp	r4, #1
 8003a5c:	d035      	beq.n	8003aca <HAL_FLASH_Program+0x76>
 8003a5e:	461f      	mov	r7, r3
 8003a60:	4616      	mov	r6, r2
 8003a62:	460d      	mov	r5, r1
 8003a64:	4604      	mov	r4, r0
 8003a66:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <HAL_FLASH_Program+0x7c>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	751a      	strb	r2, [r3, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a70:	f7ff ffbc 	bl	80039ec <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8003a74:	4601      	mov	r1, r0
 8003a76:	b998      	cbnz	r0, 8003aa0 <HAL_FLASH_Program+0x4c>
    switch(TypeProgram)
 8003a78:	2c03      	cmp	r4, #3
 8003a7a:	d807      	bhi.n	8003a8c <HAL_FLASH_Program+0x38>
 8003a7c:	e8df f004 	tbb	[pc, r4]
 8003a80:	1f1a1502 	.word	0x1f1a1502
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8003a84:	b2f1      	uxtb	r1, r6
 8003a86:	4628      	mov	r0, r5
 8003a88:	f7ff ff42 	bl	8003910 <FLASH_Program_Byte>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a90:	f7ff ffac 	bl	80039ec <FLASH_WaitForLastOperation>
 8003a94:	4601      	mov	r1, r0
    FLASH->CR &= (~FLASH_CR_PG);
 8003a96:	4a0f      	ldr	r2, [pc, #60]	; (8003ad4 <HAL_FLASH_Program+0x80>)
 8003a98:	6913      	ldr	r3, [r2, #16]
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_FLASH_Program+0x7c>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	751a      	strb	r2, [r3, #20]
}
 8003aa6:	4608      	mov	r0, r1
 8003aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003aaa:	b2b1      	uxth	r1, r6
 8003aac:	4628      	mov	r0, r5
 8003aae:	f7ff ff1b 	bl	80038e8 <FLASH_Program_HalfWord>
        break;
 8003ab2:	e7eb      	b.n	8003a8c <HAL_FLASH_Program+0x38>
        FLASH_Program_Word(Address, (uint32_t) Data);
 8003ab4:	4631      	mov	r1, r6
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	f7ff ff02 	bl	80038c0 <FLASH_Program_Word>
        break;
 8003abc:	e7e6      	b.n	8003a8c <HAL_FLASH_Program+0x38>
        FLASH_Program_DoubleWord(Address, Data);
 8003abe:	4632      	mov	r2, r6
 8003ac0:	463b      	mov	r3, r7
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	f7ff fee4 	bl	8003890 <FLASH_Program_DoubleWord>
        break;
 8003ac8:	e7e0      	b.n	8003a8c <HAL_FLASH_Program+0x38>
  __HAL_LOCK(&pFlash);
 8003aca:	2102      	movs	r1, #2
 8003acc:	e7eb      	b.n	8003aa6 <HAL_FLASH_Program+0x52>
 8003ace:	bf00      	nop
 8003ad0:	20000d3c 	.word	0x20000d3c
 8003ad4:	40023c00 	.word	0x40023c00

08003ad8 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8003ad8:	4a11      	ldr	r2, [pc, #68]	; (8003b20 <FLASH_MassErase+0x48>)
 8003ada:	6913      	ldr	r3, [r2, #16]
 8003adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae0:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8003ae2:	2903      	cmp	r1, #3
 8003ae4:	d010      	beq.n	8003b08 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
  }
  else if(Banks == FLASH_BANK_2)
 8003ae6:	2902      	cmp	r1, #2
 8003ae8:	d014      	beq.n	8003b14 <FLASH_MassErase+0x3c>
    FLASH->CR |= FLASH_CR_MER2;
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8003aea:	4a0d      	ldr	r2, [pc, #52]	; (8003b20 <FLASH_MassErase+0x48>)
 8003aec:	6913      	ldr	r3, [r2, #16]
 8003aee:	f043 0304 	orr.w	r3, r3, #4
 8003af2:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8003af4:	4a0a      	ldr	r2, [pc, #40]	; (8003b20 <FLASH_MassErase+0x48>)
 8003af6:	6913      	ldr	r3, [r2, #16]
 8003af8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8003afc:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003b00:	6110      	str	r0, [r2, #16]
 8003b02:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8003b06:	4770      	bx	lr
    FLASH->CR |= FLASH_MER_BIT;
 8003b08:	6911      	ldr	r1, [r2, #16]
 8003b0a:	f248 0304 	movw	r3, #32772	; 0x8004
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	6113      	str	r3, [r2, #16]
 8003b12:	e7ef      	b.n	8003af4 <FLASH_MassErase+0x1c>
    FLASH->CR |= FLASH_CR_MER2;
 8003b14:	4a02      	ldr	r2, [pc, #8]	; (8003b20 <FLASH_MassErase+0x48>)
 8003b16:	6913      	ldr	r3, [r2, #16]
 8003b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b1c:	6113      	str	r3, [r2, #16]
 8003b1e:	e7e9      	b.n	8003af4 <FLASH_MassErase+0x1c>
 8003b20:	40023c00 	.word	0x40023c00

08003b24 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003b24:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003b26:	b149      	cbz	r1, 8003b3c <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003b28:	2901      	cmp	r1, #1
 8003b2a:	d026      	beq.n	8003b7a <FLASH_Erase_Sector+0x56>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003b2c:	2902      	cmp	r1, #2
 8003b2e:	d002      	beq.n	8003b36 <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003b30:	f44f 7440 	mov.w	r4, #768	; 0x300
 8003b34:	e003      	b.n	8003b3e <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 8003b36:	f44f 7400 	mov.w	r4, #512	; 0x200
 8003b3a:	e000      	b.n	8003b3e <FLASH_Erase_Sector+0x1a>
     tmp_psize = FLASH_PSIZE_BYTE;
 8003b3c:	2400      	movs	r4, #0
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8003b3e:	280b      	cmp	r0, #11
 8003b40:	d900      	bls.n	8003b44 <FLASH_Erase_Sector+0x20>
  {
    Sector += 4;
 8003b42:	3004      	adds	r0, #4
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8003b44:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <FLASH_Erase_Sector+0x5c>)
 8003b46:	6919      	ldr	r1, [r3, #16]
 8003b48:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8003b4c:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	4322      	orrs	r2, r4
 8003b52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003b54:	691a      	ldr	r2, [r3, #16]
 8003b56:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003b5a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8003b62:	f040 0002 	orr.w	r0, r0, #2
 8003b66:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b6e:	611a      	str	r2, [r3, #16]
 8003b70:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8003b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b78:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003b7a:	f44f 7480 	mov.w	r4, #256	; 0x100
 8003b7e:	e7de      	b.n	8003b3e <FLASH_Erase_Sector+0x1a>
 8003b80:	40023c00 	.word	0x40023c00

08003b84 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8003b84:	4b22      	ldr	r3, [pc, #136]	; (8003c10 <HAL_FLASHEx_Erase+0x8c>)
 8003b86:	7d1b      	ldrb	r3, [r3, #20]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d03d      	beq.n	8003c08 <HAL_FLASHEx_Erase+0x84>
{
 8003b8c:	b570      	push	{r4, r5, r6, lr}
 8003b8e:	460e      	mov	r6, r1
 8003b90:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8003b92:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <HAL_FLASHEx_Erase+0x8c>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	751a      	strb	r2, [r3, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b9c:	f7ff ff26 	bl	80039ec <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	bb60      	cbnz	r0, 8003bfe <HAL_FLASHEx_Erase+0x7a>
    *SectorError = 0xFFFFFFFFU;
 8003ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ba8:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d016      	beq.n	8003bde <HAL_FLASHEx_Erase+0x5a>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003bb0:	68a5      	ldr	r5, [r4, #8]
 8003bb2:	68e3      	ldr	r3, [r4, #12]
 8003bb4:	68a1      	ldr	r1, [r4, #8]
 8003bb6:	440b      	add	r3, r1
 8003bb8:	42ab      	cmp	r3, r5
 8003bba:	d920      	bls.n	8003bfe <HAL_FLASHEx_Erase+0x7a>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003bbc:	7c21      	ldrb	r1, [r4, #16]
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	f7ff ffb0 	bl	8003b24 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003bc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bc8:	f7ff ff10 	bl	80039ec <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8003bcc:	4a11      	ldr	r2, [pc, #68]	; (8003c14 <HAL_FLASHEx_Erase+0x90>)
 8003bce:	6913      	ldr	r3, [r2, #16]
 8003bd0:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003bd4:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	b980      	cbnz	r0, 8003bfc <HAL_FLASHEx_Erase+0x78>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003bda:	3501      	adds	r5, #1
 8003bdc:	e7e9      	b.n	8003bb2 <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003bde:	6861      	ldr	r1, [r4, #4]
 8003be0:	7c20      	ldrb	r0, [r4, #16]
 8003be2:	f7ff ff79 	bl	8003ad8 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003be6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bea:	f7ff feff 	bl	80039ec <FLASH_WaitForLastOperation>
 8003bee:	4602      	mov	r2, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8003bf0:	4908      	ldr	r1, [pc, #32]	; (8003c14 <HAL_FLASHEx_Erase+0x90>)
 8003bf2:	6908      	ldr	r0, [r1, #16]
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <HAL_FLASHEx_Erase+0x94>)
 8003bf6:	4003      	ands	r3, r0
 8003bf8:	610b      	str	r3, [r1, #16]
 8003bfa:	e000      	b.n	8003bfe <HAL_FLASHEx_Erase+0x7a>
          *SectorError = index;
 8003bfc:	6035      	str	r5, [r6, #0]
  __HAL_UNLOCK(&pFlash);
 8003bfe:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <HAL_FLASHEx_Erase+0x8c>)
 8003c00:	2100      	movs	r1, #0
 8003c02:	7519      	strb	r1, [r3, #20]
}
 8003c04:	4610      	mov	r0, r2
 8003c06:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8003c08:	2202      	movs	r2, #2
}
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000d3c 	.word	0x20000d3c
 8003c14:	40023c00 	.word	0x40023c00
 8003c18:	ffff7ffb 	.word	0xffff7ffb

08003c1c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	2b0f      	cmp	r3, #15
 8003c20:	f200 80e2 	bhi.w	8003de8 <HAL_GPIO_Init+0x1cc>
{
 8003c24:	b4f0      	push	{r4, r5, r6, r7}
 8003c26:	b082      	sub	sp, #8
 8003c28:	e039      	b.n	8003c9e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c2a:	2209      	movs	r2, #9
 8003c2c:	e000      	b.n	8003c30 <HAL_GPIO_Init+0x14>
 8003c2e:	2200      	movs	r2, #0
 8003c30:	40b2      	lsls	r2, r6
 8003c32:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c34:	3402      	adds	r4, #2
 8003c36:	4e6d      	ldr	r6, [pc, #436]	; (8003dec <HAL_GPIO_Init+0x1d0>)
 8003c38:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c3c:	4a6c      	ldr	r2, [pc, #432]	; (8003df0 <HAL_GPIO_Init+0x1d4>)
 8003c3e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003c40:	43ea      	mvns	r2, r5
 8003c42:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c46:	684f      	ldr	r7, [r1, #4]
 8003c48:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8003c4c:	d001      	beq.n	8003c52 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8003c4e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8003c52:	4c67      	ldr	r4, [pc, #412]	; (8003df0 <HAL_GPIO_Init+0x1d4>)
 8003c54:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8003c56:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8003c58:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c5c:	684f      	ldr	r7, [r1, #4]
 8003c5e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003c62:	d001      	beq.n	8003c68 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8003c64:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8003c68:	4c61      	ldr	r4, [pc, #388]	; (8003df0 <HAL_GPIO_Init+0x1d4>)
 8003c6a:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c6c:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8003c6e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c72:	684f      	ldr	r7, [r1, #4]
 8003c74:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003c78:	d001      	beq.n	8003c7e <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8003c7a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8003c7e:	4c5c      	ldr	r4, [pc, #368]	; (8003df0 <HAL_GPIO_Init+0x1d4>)
 8003c80:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8003c82:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003c84:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c86:	684e      	ldr	r6, [r1, #4]
 8003c88:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8003c8c:	d001      	beq.n	8003c92 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8003c8e:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8003c92:	4c57      	ldr	r4, [pc, #348]	; (8003df0 <HAL_GPIO_Init+0x1d4>)
 8003c94:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c96:	3301      	adds	r3, #1
 8003c98:	2b0f      	cmp	r3, #15
 8003c9a:	f200 80a2 	bhi.w	8003de2 <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ca2:	680c      	ldr	r4, [r1, #0]
 8003ca4:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8003ca8:	42aa      	cmp	r2, r5
 8003caa:	d1f4      	bne.n	8003c96 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cac:	684c      	ldr	r4, [r1, #4]
 8003cae:	2c12      	cmp	r4, #18
 8003cb0:	bf18      	it	ne
 8003cb2:	2c02      	cmpne	r4, #2
 8003cb4:	d110      	bne.n	8003cd8 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8003cb6:	08de      	lsrs	r6, r3, #3
 8003cb8:	3608      	adds	r6, #8
 8003cba:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003cbe:	f003 0407 	and.w	r4, r3, #7
 8003cc2:	00a7      	lsls	r7, r4, #2
 8003cc4:	240f      	movs	r4, #15
 8003cc6:	40bc      	lsls	r4, r7
 8003cc8:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ccc:	690c      	ldr	r4, [r1, #16]
 8003cce:	40bc      	lsls	r4, r7
 8003cd0:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8003cd4:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8003cd8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003cda:	005f      	lsls	r7, r3, #1
 8003cdc:	2603      	movs	r6, #3
 8003cde:	40be      	lsls	r6, r7
 8003ce0:	43f6      	mvns	r6, r6
 8003ce2:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ce6:	684c      	ldr	r4, [r1, #4]
 8003ce8:	f004 0403 	and.w	r4, r4, #3
 8003cec:	40bc      	lsls	r4, r7
 8003cee:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003cf2:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cf4:	684c      	ldr	r4, [r1, #4]
 8003cf6:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8003cfa:	2c11      	cmp	r4, #17
 8003cfc:	bf18      	it	ne
 8003cfe:	f1bc 0f01 	cmpne.w	ip, #1
 8003d02:	d901      	bls.n	8003d08 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d04:	2c12      	cmp	r4, #18
 8003d06:	d111      	bne.n	8003d2c <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8003d08:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d0a:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d0e:	68cc      	ldr	r4, [r1, #12]
 8003d10:	40bc      	lsls	r4, r7
 8003d12:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8003d16:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003d18:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d1a:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003d1e:	684c      	ldr	r4, [r1, #4]
 8003d20:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8003d24:	409a      	lsls	r2, r3
 8003d26:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 8003d2a:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8003d2c:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d2e:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d30:	688a      	ldr	r2, [r1, #8]
 8003d32:	40ba      	lsls	r2, r7
 8003d34:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8003d36:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d38:	684a      	ldr	r2, [r1, #4]
 8003d3a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8003d3e:	d0aa      	beq.n	8003c96 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d40:	4a2c      	ldr	r2, [pc, #176]	; (8003df4 <HAL_GPIO_Init+0x1d8>)
 8003d42:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8003d44:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003d48:	6454      	str	r4, [r2, #68]	; 0x44
 8003d4a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d4c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003d50:	9201      	str	r2, [sp, #4]
 8003d52:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8003d54:	089c      	lsrs	r4, r3, #2
 8003d56:	1ca6      	adds	r6, r4, #2
 8003d58:	4a24      	ldr	r2, [pc, #144]	; (8003dec <HAL_GPIO_Init+0x1d0>)
 8003d5a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d5e:	f003 0203 	and.w	r2, r3, #3
 8003d62:	0096      	lsls	r6, r2, #2
 8003d64:	220f      	movs	r2, #15
 8003d66:	40b2      	lsls	r2, r6
 8003d68:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d6c:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <HAL_GPIO_Init+0x1dc>)
 8003d6e:	4290      	cmp	r0, r2
 8003d70:	f43f af5d 	beq.w	8003c2e <HAL_GPIO_Init+0x12>
 8003d74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d78:	4290      	cmp	r0, r2
 8003d7a:	d022      	beq.n	8003dc2 <HAL_GPIO_Init+0x1a6>
 8003d7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d80:	4290      	cmp	r0, r2
 8003d82:	d020      	beq.n	8003dc6 <HAL_GPIO_Init+0x1aa>
 8003d84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d88:	4290      	cmp	r0, r2
 8003d8a:	d01e      	beq.n	8003dca <HAL_GPIO_Init+0x1ae>
 8003d8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d90:	4290      	cmp	r0, r2
 8003d92:	d01c      	beq.n	8003dce <HAL_GPIO_Init+0x1b2>
 8003d94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d98:	4290      	cmp	r0, r2
 8003d9a:	d01a      	beq.n	8003dd2 <HAL_GPIO_Init+0x1b6>
 8003d9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003da0:	4290      	cmp	r0, r2
 8003da2:	d018      	beq.n	8003dd6 <HAL_GPIO_Init+0x1ba>
 8003da4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003da8:	4290      	cmp	r0, r2
 8003daa:	d016      	beq.n	8003dda <HAL_GPIO_Init+0x1be>
 8003dac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003db0:	4290      	cmp	r0, r2
 8003db2:	d014      	beq.n	8003dde <HAL_GPIO_Init+0x1c2>
 8003db4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003db8:	4290      	cmp	r0, r2
 8003dba:	f43f af36 	beq.w	8003c2a <HAL_GPIO_Init+0xe>
 8003dbe:	220a      	movs	r2, #10
 8003dc0:	e736      	b.n	8003c30 <HAL_GPIO_Init+0x14>
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	e734      	b.n	8003c30 <HAL_GPIO_Init+0x14>
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	e732      	b.n	8003c30 <HAL_GPIO_Init+0x14>
 8003dca:	2203      	movs	r2, #3
 8003dcc:	e730      	b.n	8003c30 <HAL_GPIO_Init+0x14>
 8003dce:	2204      	movs	r2, #4
 8003dd0:	e72e      	b.n	8003c30 <HAL_GPIO_Init+0x14>
 8003dd2:	2205      	movs	r2, #5
 8003dd4:	e72c      	b.n	8003c30 <HAL_GPIO_Init+0x14>
 8003dd6:	2206      	movs	r2, #6
 8003dd8:	e72a      	b.n	8003c30 <HAL_GPIO_Init+0x14>
 8003dda:	2207      	movs	r2, #7
 8003ddc:	e728      	b.n	8003c30 <HAL_GPIO_Init+0x14>
 8003dde:	2208      	movs	r2, #8
 8003de0:	e726      	b.n	8003c30 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8003de2:	b002      	add	sp, #8
 8003de4:	bcf0      	pop	{r4, r5, r6, r7}
 8003de6:	4770      	bx	lr
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40013800 	.word	0x40013800
 8003df0:	40013c00 	.word	0x40013c00
 8003df4:	40023800 	.word	0x40023800
 8003df8:	40020000 	.word	0x40020000

08003dfc <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	2b0f      	cmp	r3, #15
 8003e00:	f200 8092 	bhi.w	8003f28 <HAL_GPIO_DeInit+0x12c>
{
 8003e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e06:	e00a      	b.n	8003e1e <HAL_GPIO_DeInit+0x22>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003e08:	2509      	movs	r5, #9
 8003e0a:	e000      	b.n	8003e0e <HAL_GPIO_DeInit+0x12>
 8003e0c:	2500      	movs	r5, #0
 8003e0e:	fa05 f202 	lsl.w	r2, r5, r2
 8003e12:	42a2      	cmp	r2, r4
 8003e14:	d06f      	beq.n	8003ef6 <HAL_GPIO_DeInit+0xfa>
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e16:	3301      	adds	r3, #1
 8003e18:	2b0f      	cmp	r3, #15
 8003e1a:	f200 8084 	bhi.w	8003f26 <HAL_GPIO_DeInit+0x12a>
    ioposition = ((uint32_t)0x01) << position;
 8003e1e:	2201      	movs	r2, #1
 8003e20:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8003e22:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8003e26:	42b2      	cmp	r2, r6
 8003e28:	d1f5      	bne.n	8003e16 <HAL_GPIO_DeInit+0x1a>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e2a:	6805      	ldr	r5, [r0, #0]
 8003e2c:	005f      	lsls	r7, r3, #1
 8003e2e:	2403      	movs	r4, #3
 8003e30:	40bc      	lsls	r4, r7
 8003e32:	43e4      	mvns	r4, r4
 8003e34:	4025      	ands	r5, r4
 8003e36:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e38:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8003e3c:	f10c 0c08 	add.w	ip, ip, #8
 8003e40:	f850 e02c 	ldr.w	lr, [r0, ip, lsl #2]
 8003e44:	f003 0507 	and.w	r5, r3, #7
 8003e48:	00ad      	lsls	r5, r5, #2
 8003e4a:	270f      	movs	r7, #15
 8003e4c:	fa07 f505 	lsl.w	r5, r7, r5
 8003e50:	ea2e 0505 	bic.w	r5, lr, r5
 8003e54:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e58:	6885      	ldr	r5, [r0, #8]
 8003e5a:	4025      	ands	r5, r4
 8003e5c:	6085      	str	r5, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e5e:	6845      	ldr	r5, [r0, #4]
 8003e60:	ea25 0202 	bic.w	r2, r5, r2
 8003e64:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e66:	68c2      	ldr	r2, [r0, #12]
 8003e68:	4014      	ands	r4, r2
 8003e6a:	60c4      	str	r4, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8003e6c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003e70:	f10c 0402 	add.w	r4, ip, #2
 8003e74:	4a2d      	ldr	r2, [pc, #180]	; (8003f2c <HAL_GPIO_DeInit+0x130>)
 8003e76:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e7a:	f003 0203 	and.w	r2, r3, #3
 8003e7e:	0092      	lsls	r2, r2, #2
 8003e80:	4097      	lsls	r7, r2
 8003e82:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003e84:	4d2a      	ldr	r5, [pc, #168]	; (8003f30 <HAL_GPIO_DeInit+0x134>)
 8003e86:	42a8      	cmp	r0, r5
 8003e88:	d0c0      	beq.n	8003e0c <HAL_GPIO_DeInit+0x10>
 8003e8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e8e:	42a8      	cmp	r0, r5
 8003e90:	d021      	beq.n	8003ed6 <HAL_GPIO_DeInit+0xda>
 8003e92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e96:	42a8      	cmp	r0, r5
 8003e98:	d01f      	beq.n	8003eda <HAL_GPIO_DeInit+0xde>
 8003e9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e9e:	42a8      	cmp	r0, r5
 8003ea0:	d01d      	beq.n	8003ede <HAL_GPIO_DeInit+0xe2>
 8003ea2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ea6:	42a8      	cmp	r0, r5
 8003ea8:	d01b      	beq.n	8003ee2 <HAL_GPIO_DeInit+0xe6>
 8003eaa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003eae:	42a8      	cmp	r0, r5
 8003eb0:	d019      	beq.n	8003ee6 <HAL_GPIO_DeInit+0xea>
 8003eb2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003eb6:	42a8      	cmp	r0, r5
 8003eb8:	d017      	beq.n	8003eea <HAL_GPIO_DeInit+0xee>
 8003eba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ebe:	42a8      	cmp	r0, r5
 8003ec0:	d015      	beq.n	8003eee <HAL_GPIO_DeInit+0xf2>
 8003ec2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ec6:	42a8      	cmp	r0, r5
 8003ec8:	d013      	beq.n	8003ef2 <HAL_GPIO_DeInit+0xf6>
 8003eca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ece:	42a8      	cmp	r0, r5
 8003ed0:	d09a      	beq.n	8003e08 <HAL_GPIO_DeInit+0xc>
 8003ed2:	250a      	movs	r5, #10
 8003ed4:	e79b      	b.n	8003e0e <HAL_GPIO_DeInit+0x12>
 8003ed6:	2501      	movs	r5, #1
 8003ed8:	e799      	b.n	8003e0e <HAL_GPIO_DeInit+0x12>
 8003eda:	2502      	movs	r5, #2
 8003edc:	e797      	b.n	8003e0e <HAL_GPIO_DeInit+0x12>
 8003ede:	2503      	movs	r5, #3
 8003ee0:	e795      	b.n	8003e0e <HAL_GPIO_DeInit+0x12>
 8003ee2:	2504      	movs	r5, #4
 8003ee4:	e793      	b.n	8003e0e <HAL_GPIO_DeInit+0x12>
 8003ee6:	2505      	movs	r5, #5
 8003ee8:	e791      	b.n	8003e0e <HAL_GPIO_DeInit+0x12>
 8003eea:	2506      	movs	r5, #6
 8003eec:	e78f      	b.n	8003e0e <HAL_GPIO_DeInit+0x12>
 8003eee:	2507      	movs	r5, #7
 8003ef0:	e78d      	b.n	8003e0e <HAL_GPIO_DeInit+0x12>
 8003ef2:	2508      	movs	r5, #8
 8003ef4:	e78b      	b.n	8003e0e <HAL_GPIO_DeInit+0x12>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003ef6:	4d0d      	ldr	r5, [pc, #52]	; (8003f2c <HAL_GPIO_DeInit+0x130>)
 8003ef8:	f10c 0202 	add.w	r2, ip, #2
 8003efc:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
 8003f00:	ea24 0707 	bic.w	r7, r4, r7
 8003f04:	f845 7022 	str.w	r7, [r5, r2, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003f08:	4c0a      	ldr	r4, [pc, #40]	; (8003f34 <HAL_GPIO_DeInit+0x138>)
 8003f0a:	6825      	ldr	r5, [r4, #0]
 8003f0c:	43f2      	mvns	r2, r6
 8003f0e:	4015      	ands	r5, r2
 8003f10:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003f12:	6865      	ldr	r5, [r4, #4]
 8003f14:	4015      	ands	r5, r2
 8003f16:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003f18:	68a5      	ldr	r5, [r4, #8]
 8003f1a:	4015      	ands	r5, r2
 8003f1c:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003f1e:	68e5      	ldr	r5, [r4, #12]
 8003f20:	402a      	ands	r2, r5
 8003f22:	60e2      	str	r2, [r4, #12]
 8003f24:	e777      	b.n	8003e16 <HAL_GPIO_DeInit+0x1a>
	  }
    }
  }
}
 8003f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40013800 	.word	0x40013800
 8003f30:	40020000 	.word	0x40020000
 8003f34:	40013c00 	.word	0x40013c00

08003f38 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f38:	6903      	ldr	r3, [r0, #16]
 8003f3a:	4219      	tst	r1, r3
 8003f3c:	d101      	bne.n	8003f42 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f3e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003f40:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8003f42:	2001      	movs	r0, #1
 8003f44:	4770      	bx	lr

08003f46 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f46:	b912      	cbnz	r2, 8003f4e <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003f48:	0409      	lsls	r1, r1, #16
 8003f4a:	6181      	str	r1, [r0, #24]
  }
}
 8003f4c:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8003f4e:	6181      	str	r1, [r0, #24]
 8003f50:	4770      	bx	lr
	...

08003f54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f54:	b510      	push	{r4, lr}
 8003f56:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f58:	4b1b      	ldr	r3, [pc, #108]	; (8003fc8 <HAL_PWREx_EnableOverDrive+0x74>)
 8003f5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f68:	9301      	str	r3, [sp, #4]
 8003f6a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f6c:	4a17      	ldr	r2, [pc, #92]	; (8003fcc <HAL_PWREx_EnableOverDrive+0x78>)
 8003f6e:	6813      	ldr	r3, [r2, #0]
 8003f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f74:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f76:	f7fc fde3 	bl	8000b40 <HAL_GetTick>
 8003f7a:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f7c:	4b13      	ldr	r3, [pc, #76]	; (8003fcc <HAL_PWREx_EnableOverDrive+0x78>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003f84:	d108      	bne.n	8003f98 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f86:	f7fc fddb 	bl	8000b40 <HAL_GetTick>
 8003f8a:	1b00      	subs	r0, r0, r4
 8003f8c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003f90:	d9f4      	bls.n	8003f7c <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8003f92:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8003f94:	b002      	add	sp, #8
 8003f96:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f98:	4a0c      	ldr	r2, [pc, #48]	; (8003fcc <HAL_PWREx_EnableOverDrive+0x78>)
 8003f9a:	6813      	ldr	r3, [r2, #0]
 8003f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8003fa2:	f7fc fdcd 	bl	8000b40 <HAL_GetTick>
 8003fa6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fa8:	4b08      	ldr	r3, [pc, #32]	; (8003fcc <HAL_PWREx_EnableOverDrive+0x78>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003fb0:	d107      	bne.n	8003fc2 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003fb2:	f7fc fdc5 	bl	8000b40 <HAL_GetTick>
 8003fb6:	1b00      	subs	r0, r0, r4
 8003fb8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003fbc:	d9f4      	bls.n	8003fa8 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8003fbe:	2003      	movs	r0, #3
 8003fc0:	e7e8      	b.n	8003f94 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8003fc2:	2000      	movs	r0, #0
 8003fc4:	e7e6      	b.n	8003f94 <HAL_PWREx_EnableOverDrive+0x40>
 8003fc6:	bf00      	nop
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	40007000 	.word	0x40007000

08003fd0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003fd0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003fd2:	f7fc fdb5 	bl	8000b40 <HAL_GetTick>
 8003fd6:	4604      	mov	r4, r0

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003fd8:	4a4e      	ldr	r2, [pc, #312]	; (8004114 <HAL_RCC_DeInit+0x144>)
 8003fda:	6813      	ldr	r3, [r2, #0]
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003fe2:	4b4c      	ldr	r3, [pc, #304]	; (8004114 <HAL_RCC_DeInit+0x144>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f013 0f02 	tst.w	r3, #2
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fec:	f7fc fda8 	bl	8000b40 <HAL_GetTick>
 8003ff0:	1b00      	subs	r0, r0, r4
 8003ff2:	2802      	cmp	r0, #2
 8003ff4:	d9f5      	bls.n	8003fe2 <HAL_RCC_DeInit+0x12>
    {
      return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
  }
  else
  {
    return HAL_OK;
  }
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	bd38      	pop	{r3, r4, r5, pc}
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003ffc:	4d45      	ldr	r5, [pc, #276]	; (8004114 <HAL_RCC_DeInit+0x144>)
 8003ffe:	682b      	ldr	r3, [r5, #0]
 8004000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004004:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8004006:	f7fc fd9b 	bl	8000b40 <HAL_GetTick>
 800400a:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 800400c:	2300      	movs	r3, #0
 800400e:	60ab      	str	r3, [r5, #8]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004010:	4b40      	ldr	r3, [pc, #256]	; (8004114 <HAL_RCC_DeInit+0x144>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f013 0f0c 	tst.w	r3, #12
 8004018:	d008      	beq.n	800402c <HAL_RCC_DeInit+0x5c>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800401a:	f7fc fd91 	bl	8000b40 <HAL_GetTick>
 800401e:	1b00      	subs	r0, r0, r4
 8004020:	f241 3388 	movw	r3, #5000	; 0x1388
 8004024:	4298      	cmp	r0, r3
 8004026:	d9f3      	bls.n	8004010 <HAL_RCC_DeInit+0x40>
      return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e7e5      	b.n	8003ff8 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 800402c:	f7fc fd88 	bl	8000b40 <HAL_GetTick>
 8004030:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8004032:	4a38      	ldr	r2, [pc, #224]	; (8004114 <HAL_RCC_DeInit+0x144>)
 8004034:	6813      	ldr	r3, [r2, #0]
 8004036:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800403a:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800403c:	4b35      	ldr	r3, [pc, #212]	; (8004114 <HAL_RCC_DeInit+0x144>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004044:	d006      	beq.n	8004054 <HAL_RCC_DeInit+0x84>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004046:	f7fc fd7b 	bl	8000b40 <HAL_GetTick>
 800404a:	1b00      	subs	r0, r0, r4
 800404c:	2864      	cmp	r0, #100	; 0x64
 800404e:	d9f5      	bls.n	800403c <HAL_RCC_DeInit+0x6c>
      return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e7d1      	b.n	8003ff8 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8004054:	f7fc fd74 	bl	8000b40 <HAL_GetTick>
 8004058:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800405a:	4a2e      	ldr	r2, [pc, #184]	; (8004114 <HAL_RCC_DeInit+0x144>)
 800405c:	6813      	ldr	r3, [r2, #0]
 800405e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004062:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004064:	4b2b      	ldr	r3, [pc, #172]	; (8004114 <HAL_RCC_DeInit+0x144>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800406c:	d006      	beq.n	800407c <HAL_RCC_DeInit+0xac>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406e:	f7fc fd67 	bl	8000b40 <HAL_GetTick>
 8004072:	1b00      	subs	r0, r0, r4
 8004074:	2802      	cmp	r0, #2
 8004076:	d9f5      	bls.n	8004064 <HAL_RCC_DeInit+0x94>
      return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e7bd      	b.n	8003ff8 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 800407c:	f7fc fd60 	bl	8000b40 <HAL_GetTick>
 8004080:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8004082:	4a24      	ldr	r2, [pc, #144]	; (8004114 <HAL_RCC_DeInit+0x144>)
 8004084:	6813      	ldr	r3, [r2, #0]
 8004086:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800408a:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800408c:	4b21      	ldr	r3, [pc, #132]	; (8004114 <HAL_RCC_DeInit+0x144>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004094:	d006      	beq.n	80040a4 <HAL_RCC_DeInit+0xd4>
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004096:	f7fc fd53 	bl	8000b40 <HAL_GetTick>
 800409a:	1b00      	subs	r0, r0, r4
 800409c:	2864      	cmp	r0, #100	; 0x64
 800409e:	d9f5      	bls.n	800408c <HAL_RCC_DeInit+0xbc>
      return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e7a9      	b.n	8003ff8 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 80040a4:	f7fc fd4c 	bl	8000b40 <HAL_GetTick>
 80040a8:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80040aa:	4a1a      	ldr	r2, [pc, #104]	; (8004114 <HAL_RCC_DeInit+0x144>)
 80040ac:	6813      	ldr	r3, [r2, #0]
 80040ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b2:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80040b4:	4b17      	ldr	r3, [pc, #92]	; (8004114 <HAL_RCC_DeInit+0x144>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80040bc:	d006      	beq.n	80040cc <HAL_RCC_DeInit+0xfc>
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040be:	f7fc fd3f 	bl	8000b40 <HAL_GetTick>
 80040c2:	1b00      	subs	r0, r0, r4
 80040c4:	2864      	cmp	r0, #100	; 0x64
 80040c6:	d9f5      	bls.n	80040b4 <HAL_RCC_DeInit+0xe4>
      return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e795      	b.n	8003ff8 <HAL_RCC_DeInit+0x28>
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
 80040cc:	4b11      	ldr	r3, [pc, #68]	; (8004114 <HAL_RCC_DeInit+0x144>)
 80040ce:	4a12      	ldr	r2, [pc, #72]	; (8004118 <HAL_RCC_DeInit+0x148>)
 80040d0:	605a      	str	r2, [r3, #4]
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80040d2:	3a10      	subs	r2, #16
 80040d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | 0x20000000U;
 80040d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80040e2:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_PLLI2SRDYC | RCC_CIR_PLLSAIRDYC | RCC_CIR_CSSC);
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 80040ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80040ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	675a      	str	r2, [r3, #116]	; 0x74
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80040f4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80040f6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80040fa:	675a      	str	r2, [r3, #116]	; 0x74
  SystemCoreClock = HSI_VALUE;
 80040fc:	4b07      	ldr	r3, [pc, #28]	; (800411c <HAL_RCC_DeInit+0x14c>)
 80040fe:	4a08      	ldr	r2, [pc, #32]	; (8004120 <HAL_RCC_DeInit+0x150>)
 8004100:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004102:	2000      	movs	r0, #0
 8004104:	f7fe ff26 	bl	8002f54 <HAL_InitTick>
 8004108:	4603      	mov	r3, r0
 800410a:	2800      	cmp	r0, #0
 800410c:	f43f af74 	beq.w	8003ff8 <HAL_RCC_DeInit+0x28>
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e771      	b.n	8003ff8 <HAL_RCC_DeInit+0x28>
 8004114:	40023800 	.word	0x40023800
 8004118:	24003010 	.word	0x24003010
 800411c:	20000048 	.word	0x20000048
 8004120:	00f42400 	.word	0x00f42400

08004124 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004124:	2800      	cmp	r0, #0
 8004126:	f000 81dc 	beq.w	80044e2 <HAL_RCC_OscConfig+0x3be>
{
 800412a:	b570      	push	{r4, r5, r6, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004130:	6803      	ldr	r3, [r0, #0]
 8004132:	f013 0f01 	tst.w	r3, #1
 8004136:	d029      	beq.n	800418c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004138:	4ba2      	ldr	r3, [pc, #648]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 030c 	and.w	r3, r3, #12
 8004140:	2b04      	cmp	r3, #4
 8004142:	d01a      	beq.n	800417a <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004144:	4b9f      	ldr	r3, [pc, #636]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 030c 	and.w	r3, r3, #12
 800414c:	2b08      	cmp	r3, #8
 800414e:	d00f      	beq.n	8004170 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004150:	6863      	ldr	r3, [r4, #4]
 8004152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004156:	d040      	beq.n	80041da <HAL_RCC_OscConfig+0xb6>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d154      	bne.n	8004206 <HAL_RCC_OscConfig+0xe2>
 800415c:	4b99      	ldr	r3, [pc, #612]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	e039      	b.n	80041e4 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004170:	4b94      	ldr	r3, [pc, #592]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004178:	d0ea      	beq.n	8004150 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800417a:	4b92      	ldr	r3, [pc, #584]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004182:	d003      	beq.n	800418c <HAL_RCC_OscConfig+0x68>
 8004184:	6863      	ldr	r3, [r4, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 81ad 	beq.w	80044e6 <HAL_RCC_OscConfig+0x3c2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	f013 0f02 	tst.w	r3, #2
 8004192:	d075      	beq.n	8004280 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004194:	4b8b      	ldr	r3, [pc, #556]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f013 0f0c 	tst.w	r3, #12
 800419c:	d05e      	beq.n	800425c <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800419e:	4b89      	ldr	r3, [pc, #548]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d053      	beq.n	8004252 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041aa:	68e3      	ldr	r3, [r4, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 808a 	beq.w	80042c6 <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041b2:	4a84      	ldr	r2, [pc, #528]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 80041b4:	6813      	ldr	r3, [r2, #0]
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fc fcc0 	bl	8000b40 <HAL_GetTick>
 80041c0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c2:	4b80      	ldr	r3, [pc, #512]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f013 0f02 	tst.w	r3, #2
 80041ca:	d173      	bne.n	80042b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041cc:	f7fc fcb8 	bl	8000b40 <HAL_GetTick>
 80041d0:	1b40      	subs	r0, r0, r5
 80041d2:	2802      	cmp	r0, #2
 80041d4:	d9f5      	bls.n	80041c2 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80041d6:	2003      	movs	r0, #3
 80041d8:	e188      	b.n	80044ec <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041da:	4a7a      	ldr	r2, [pc, #488]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 80041dc:	6813      	ldr	r3, [r2, #0]
 80041de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e2:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041e4:	6863      	ldr	r3, [r4, #4]
 80041e6:	b32b      	cbz	r3, 8004234 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80041e8:	f7fc fcaa 	bl	8000b40 <HAL_GetTick>
 80041ec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ee:	4b75      	ldr	r3, [pc, #468]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80041f6:	d1c9      	bne.n	800418c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041f8:	f7fc fca2 	bl	8000b40 <HAL_GetTick>
 80041fc:	1b40      	subs	r0, r0, r5
 80041fe:	2864      	cmp	r0, #100	; 0x64
 8004200:	d9f5      	bls.n	80041ee <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8004202:	2003      	movs	r0, #3
 8004204:	e172      	b.n	80044ec <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004206:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800420a:	d009      	beq.n	8004220 <HAL_RCC_OscConfig+0xfc>
 800420c:	4b6d      	ldr	r3, [pc, #436]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	e7e1      	b.n	80041e4 <HAL_RCC_OscConfig+0xc0>
 8004220:	4b68      	ldr	r3, [pc, #416]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	e7d7      	b.n	80041e4 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8004234:	f7fc fc84 	bl	8000b40 <HAL_GetTick>
 8004238:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800423a:	4b62      	ldr	r3, [pc, #392]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004242:	d0a3      	beq.n	800418c <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004244:	f7fc fc7c 	bl	8000b40 <HAL_GetTick>
 8004248:	1b40      	subs	r0, r0, r5
 800424a:	2864      	cmp	r0, #100	; 0x64
 800424c:	d9f5      	bls.n	800423a <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800424e:	2003      	movs	r0, #3
 8004250:	e14c      	b.n	80044ec <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004252:	4b5c      	ldr	r3, [pc, #368]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800425a:	d1a6      	bne.n	80041aa <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800425c:	4b59      	ldr	r3, [pc, #356]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f013 0f02 	tst.w	r3, #2
 8004264:	d004      	beq.n	8004270 <HAL_RCC_OscConfig+0x14c>
 8004266:	68e3      	ldr	r3, [r4, #12]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d001      	beq.n	8004270 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 800426c:	2001      	movs	r0, #1
 800426e:	e13d      	b.n	80044ec <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004270:	4a54      	ldr	r2, [pc, #336]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 8004272:	6813      	ldr	r3, [r2, #0]
 8004274:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004278:	6921      	ldr	r1, [r4, #16]
 800427a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800427e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	f013 0f08 	tst.w	r3, #8
 8004286:	d046      	beq.n	8004316 <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004288:	6963      	ldr	r3, [r4, #20]
 800428a:	b383      	cbz	r3, 80042ee <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800428c:	4a4d      	ldr	r2, [pc, #308]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 800428e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004296:	f7fc fc53 	bl	8000b40 <HAL_GetTick>
 800429a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429c:	4b49      	ldr	r3, [pc, #292]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 800429e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042a0:	f013 0f02 	tst.w	r3, #2
 80042a4:	d137      	bne.n	8004316 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a6:	f7fc fc4b 	bl	8000b40 <HAL_GetTick>
 80042aa:	1b40      	subs	r0, r0, r5
 80042ac:	2802      	cmp	r0, #2
 80042ae:	d9f5      	bls.n	800429c <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 80042b0:	2003      	movs	r0, #3
 80042b2:	e11b      	b.n	80044ec <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b4:	4a43      	ldr	r2, [pc, #268]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 80042b6:	6813      	ldr	r3, [r2, #0]
 80042b8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80042bc:	6921      	ldr	r1, [r4, #16]
 80042be:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	e7dc      	b.n	8004280 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 80042c6:	4a3f      	ldr	r2, [pc, #252]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 80042c8:	6813      	ldr	r3, [r2, #0]
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80042d0:	f7fc fc36 	bl	8000b40 <HAL_GetTick>
 80042d4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d6:	4b3b      	ldr	r3, [pc, #236]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f013 0f02 	tst.w	r3, #2
 80042de:	d0cf      	beq.n	8004280 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e0:	f7fc fc2e 	bl	8000b40 <HAL_GetTick>
 80042e4:	1b40      	subs	r0, r0, r5
 80042e6:	2802      	cmp	r0, #2
 80042e8:	d9f5      	bls.n	80042d6 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 80042ea:	2003      	movs	r0, #3
 80042ec:	e0fe      	b.n	80044ec <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ee:	4a35      	ldr	r2, [pc, #212]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 80042f0:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80042f2:	f023 0301 	bic.w	r3, r3, #1
 80042f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f8:	f7fc fc22 	bl	8000b40 <HAL_GetTick>
 80042fc:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042fe:	4b31      	ldr	r3, [pc, #196]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 8004300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004302:	f013 0f02 	tst.w	r3, #2
 8004306:	d006      	beq.n	8004316 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004308:	f7fc fc1a 	bl	8000b40 <HAL_GetTick>
 800430c:	1b40      	subs	r0, r0, r5
 800430e:	2802      	cmp	r0, #2
 8004310:	d9f5      	bls.n	80042fe <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8004312:	2003      	movs	r0, #3
 8004314:	e0ea      	b.n	80044ec <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	f013 0f04 	tst.w	r3, #4
 800431c:	d07e      	beq.n	800441c <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800431e:	4b29      	ldr	r3, [pc, #164]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004326:	d11e      	bne.n	8004366 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004328:	4b26      	ldr	r3, [pc, #152]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 800432a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800432c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004330:	641a      	str	r2, [r3, #64]	; 0x40
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004338:	9301      	str	r3, [sp, #4]
 800433a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800433c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800433e:	4b22      	ldr	r3, [pc, #136]	; (80043c8 <HAL_RCC_OscConfig+0x2a4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004346:	d010      	beq.n	800436a <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004348:	68a3      	ldr	r3, [r4, #8]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d021      	beq.n	8004392 <HAL_RCC_OscConfig+0x26e>
 800434e:	2b00      	cmp	r3, #0
 8004350:	d13c      	bne.n	80043cc <HAL_RCC_OscConfig+0x2a8>
 8004352:	4b1c      	ldr	r3, [pc, #112]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 8004354:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004356:	f022 0201 	bic.w	r2, r2, #1
 800435a:	671a      	str	r2, [r3, #112]	; 0x70
 800435c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800435e:	f022 0204 	bic.w	r2, r2, #4
 8004362:	671a      	str	r2, [r3, #112]	; 0x70
 8004364:	e01a      	b.n	800439c <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 8004366:	2500      	movs	r5, #0
 8004368:	e7e9      	b.n	800433e <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 800436a:	4a17      	ldr	r2, [pc, #92]	; (80043c8 <HAL_RCC_OscConfig+0x2a4>)
 800436c:	6813      	ldr	r3, [r2, #0]
 800436e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004372:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004374:	f7fc fbe4 	bl	8000b40 <HAL_GetTick>
 8004378:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800437a:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <HAL_RCC_OscConfig+0x2a4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004382:	d1e1      	bne.n	8004348 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004384:	f7fc fbdc 	bl	8000b40 <HAL_GetTick>
 8004388:	1b80      	subs	r0, r0, r6
 800438a:	2864      	cmp	r0, #100	; 0x64
 800438c:	d9f5      	bls.n	800437a <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 800438e:	2003      	movs	r0, #3
 8004390:	e0ac      	b.n	80044ec <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004392:	4a0c      	ldr	r2, [pc, #48]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 8004394:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800439c:	68a3      	ldr	r3, [r4, #8]
 800439e:	b35b      	cbz	r3, 80043f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a0:	f7fc fbce 	bl	8000b40 <HAL_GetTick>
 80043a4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a6:	4b07      	ldr	r3, [pc, #28]	; (80043c4 <HAL_RCC_OscConfig+0x2a0>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	f013 0f02 	tst.w	r3, #2
 80043ae:	d134      	bne.n	800441a <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b0:	f7fc fbc6 	bl	8000b40 <HAL_GetTick>
 80043b4:	1b80      	subs	r0, r0, r6
 80043b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80043ba:	4298      	cmp	r0, r3
 80043bc:	d9f3      	bls.n	80043a6 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 80043be:	2003      	movs	r0, #3
 80043c0:	e094      	b.n	80044ec <HAL_RCC_OscConfig+0x3c8>
 80043c2:	bf00      	nop
 80043c4:	40023800 	.word	0x40023800
 80043c8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043cc:	2b05      	cmp	r3, #5
 80043ce:	d009      	beq.n	80043e4 <HAL_RCC_OscConfig+0x2c0>
 80043d0:	4b48      	ldr	r3, [pc, #288]	; (80044f4 <HAL_RCC_OscConfig+0x3d0>)
 80043d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043d4:	f022 0201 	bic.w	r2, r2, #1
 80043d8:	671a      	str	r2, [r3, #112]	; 0x70
 80043da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043dc:	f022 0204 	bic.w	r2, r2, #4
 80043e0:	671a      	str	r2, [r3, #112]	; 0x70
 80043e2:	e7db      	b.n	800439c <HAL_RCC_OscConfig+0x278>
 80043e4:	4b43      	ldr	r3, [pc, #268]	; (80044f4 <HAL_RCC_OscConfig+0x3d0>)
 80043e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043e8:	f042 0204 	orr.w	r2, r2, #4
 80043ec:	671a      	str	r2, [r3, #112]	; 0x70
 80043ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043f0:	f042 0201 	orr.w	r2, r2, #1
 80043f4:	671a      	str	r2, [r3, #112]	; 0x70
 80043f6:	e7d1      	b.n	800439c <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f8:	f7fc fba2 	bl	8000b40 <HAL_GetTick>
 80043fc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043fe:	4b3d      	ldr	r3, [pc, #244]	; (80044f4 <HAL_RCC_OscConfig+0x3d0>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	f013 0f02 	tst.w	r3, #2
 8004406:	d008      	beq.n	800441a <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004408:	f7fc fb9a 	bl	8000b40 <HAL_GetTick>
 800440c:	1b80      	subs	r0, r0, r6
 800440e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004412:	4298      	cmp	r0, r3
 8004414:	d9f3      	bls.n	80043fe <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8004416:	2003      	movs	r0, #3
 8004418:	e068      	b.n	80044ec <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800441a:	b9f5      	cbnz	r5, 800445a <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800441c:	69a3      	ldr	r3, [r4, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d063      	beq.n	80044ea <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004422:	4a34      	ldr	r2, [pc, #208]	; (80044f4 <HAL_RCC_OscConfig+0x3d0>)
 8004424:	6892      	ldr	r2, [r2, #8]
 8004426:	f002 020c 	and.w	r2, r2, #12
 800442a:	2a08      	cmp	r2, #8
 800442c:	d060      	beq.n	80044f0 <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800442e:	2b02      	cmp	r3, #2
 8004430:	d019      	beq.n	8004466 <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004432:	4a30      	ldr	r2, [pc, #192]	; (80044f4 <HAL_RCC_OscConfig+0x3d0>)
 8004434:	6813      	ldr	r3, [r2, #0]
 8004436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800443a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fc fb80 	bl	8000b40 <HAL_GetTick>
 8004440:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004442:	4b2c      	ldr	r3, [pc, #176]	; (80044f4 <HAL_RCC_OscConfig+0x3d0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800444a:	d048      	beq.n	80044de <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444c:	f7fc fb78 	bl	8000b40 <HAL_GetTick>
 8004450:	1b00      	subs	r0, r0, r4
 8004452:	2802      	cmp	r0, #2
 8004454:	d9f5      	bls.n	8004442 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8004456:	2003      	movs	r0, #3
 8004458:	e048      	b.n	80044ec <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 800445a:	4a26      	ldr	r2, [pc, #152]	; (80044f4 <HAL_RCC_OscConfig+0x3d0>)
 800445c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800445e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004462:	6413      	str	r3, [r2, #64]	; 0x40
 8004464:	e7da      	b.n	800441c <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8004466:	4a23      	ldr	r2, [pc, #140]	; (80044f4 <HAL_RCC_OscConfig+0x3d0>)
 8004468:	6813      	ldr	r3, [r2, #0]
 800446a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800446e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004470:	f7fc fb66 	bl	8000b40 <HAL_GetTick>
 8004474:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004476:	4b1f      	ldr	r3, [pc, #124]	; (80044f4 <HAL_RCC_OscConfig+0x3d0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800447e:	d006      	beq.n	800448e <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004480:	f7fc fb5e 	bl	8000b40 <HAL_GetTick>
 8004484:	1b40      	subs	r0, r0, r5
 8004486:	2802      	cmp	r0, #2
 8004488:	d9f5      	bls.n	8004476 <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 800448a:	2003      	movs	r0, #3
 800448c:	e02e      	b.n	80044ec <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800448e:	69e3      	ldr	r3, [r4, #28]
 8004490:	6a22      	ldr	r2, [r4, #32]
 8004492:	4313      	orrs	r3, r2
 8004494:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004496:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800449a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800449c:	0852      	lsrs	r2, r2, #1
 800449e:	3a01      	subs	r2, #1
 80044a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80044a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80044aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80044ac:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80044b0:	4a10      	ldr	r2, [pc, #64]	; (80044f4 <HAL_RCC_OscConfig+0x3d0>)
 80044b2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80044b4:	6813      	ldr	r3, [r2, #0]
 80044b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80044bc:	f7fc fb40 	bl	8000b40 <HAL_GetTick>
 80044c0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c2:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <HAL_RCC_OscConfig+0x3d0>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80044ca:	d106      	bne.n	80044da <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044cc:	f7fc fb38 	bl	8000b40 <HAL_GetTick>
 80044d0:	1b00      	subs	r0, r0, r4
 80044d2:	2802      	cmp	r0, #2
 80044d4:	d9f5      	bls.n	80044c2 <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 80044d6:	2003      	movs	r0, #3
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80044da:	2000      	movs	r0, #0
 80044dc:	e006      	b.n	80044ec <HAL_RCC_OscConfig+0x3c8>
 80044de:	2000      	movs	r0, #0
 80044e0:	e004      	b.n	80044ec <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 80044e2:	2001      	movs	r0, #1
}
 80044e4:	4770      	bx	lr
        return HAL_ERROR;
 80044e6:	2001      	movs	r0, #1
 80044e8:	e000      	b.n	80044ec <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 80044ea:	2000      	movs	r0, #0
}
 80044ec:	b002      	add	sp, #8
 80044ee:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80044f0:	2001      	movs	r0, #1
 80044f2:	e7fb      	b.n	80044ec <HAL_RCC_OscConfig+0x3c8>
 80044f4:	40023800 	.word	0x40023800

080044f8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044f8:	4b32      	ldr	r3, [pc, #200]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	2b04      	cmp	r3, #4
 8004502:	d05c      	beq.n	80045be <HAL_RCC_GetSysClockFreq+0xc6>
 8004504:	2b08      	cmp	r3, #8
 8004506:	d001      	beq.n	800450c <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004508:	482f      	ldr	r0, [pc, #188]	; (80045c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800450a:	4770      	bx	lr
{
 800450c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004510:	4b2c      	ldr	r3, [pc, #176]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800451e:	d02b      	beq.n	8004578 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004520:	4b28      	ldr	r3, [pc, #160]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004528:	461e      	mov	r6, r3
 800452a:	2700      	movs	r7, #0
 800452c:	015c      	lsls	r4, r3, #5
 800452e:	2500      	movs	r5, #0
 8004530:	1ae4      	subs	r4, r4, r3
 8004532:	eb65 0507 	sbc.w	r5, r5, r7
 8004536:	01a9      	lsls	r1, r5, #6
 8004538:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800453c:	01a0      	lsls	r0, r4, #6
 800453e:	1b00      	subs	r0, r0, r4
 8004540:	eb61 0105 	sbc.w	r1, r1, r5
 8004544:	00cb      	lsls	r3, r1, #3
 8004546:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800454a:	00c4      	lsls	r4, r0, #3
 800454c:	19a0      	adds	r0, r4, r6
 800454e:	eb43 0107 	adc.w	r1, r3, r7
 8004552:	024b      	lsls	r3, r1, #9
 8004554:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8004558:	0244      	lsls	r4, r0, #9
 800455a:	4620      	mov	r0, r4
 800455c:	4619      	mov	r1, r3
 800455e:	2300      	movs	r3, #0
 8004560:	f7fb fe6a 	bl	8000238 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004564:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800456c:	3301      	adds	r3, #1
 800456e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004570:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004574:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004578:	4b12      	ldr	r3, [pc, #72]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004580:	461e      	mov	r6, r3
 8004582:	2700      	movs	r7, #0
 8004584:	015c      	lsls	r4, r3, #5
 8004586:	2500      	movs	r5, #0
 8004588:	1ae4      	subs	r4, r4, r3
 800458a:	eb65 0507 	sbc.w	r5, r5, r7
 800458e:	01a9      	lsls	r1, r5, #6
 8004590:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004594:	01a0      	lsls	r0, r4, #6
 8004596:	1b00      	subs	r0, r0, r4
 8004598:	eb61 0105 	sbc.w	r1, r1, r5
 800459c:	00cb      	lsls	r3, r1, #3
 800459e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80045a2:	00c4      	lsls	r4, r0, #3
 80045a4:	19a0      	adds	r0, r4, r6
 80045a6:	eb43 0107 	adc.w	r1, r3, r7
 80045aa:	028b      	lsls	r3, r1, #10
 80045ac:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80045b0:	0284      	lsls	r4, r0, #10
 80045b2:	4620      	mov	r0, r4
 80045b4:	4619      	mov	r1, r3
 80045b6:	2300      	movs	r3, #0
 80045b8:	f7fb fe3e 	bl	8000238 <__aeabi_uldivmod>
 80045bc:	e7d2      	b.n	8004564 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 80045be:	4803      	ldr	r0, [pc, #12]	; (80045cc <HAL_RCC_GetSysClockFreq+0xd4>)
}
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800
 80045c8:	00f42400 	.word	0x00f42400
 80045cc:	007a1200 	.word	0x007a1200

080045d0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80045d0:	2800      	cmp	r0, #0
 80045d2:	f000 80a2 	beq.w	800471a <HAL_RCC_ClockConfig+0x14a>
{
 80045d6:	b570      	push	{r4, r5, r6, lr}
 80045d8:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045da:	4b52      	ldr	r3, [pc, #328]	; (8004724 <HAL_RCC_ClockConfig+0x154>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	428b      	cmp	r3, r1
 80045e4:	d20c      	bcs.n	8004600 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e6:	4a4f      	ldr	r2, [pc, #316]	; (8004724 <HAL_RCC_ClockConfig+0x154>)
 80045e8:	6813      	ldr	r3, [r2, #0]
 80045ea:	f023 030f 	bic.w	r3, r3, #15
 80045ee:	430b      	orrs	r3, r1
 80045f0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f2:	6813      	ldr	r3, [r2, #0]
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	428b      	cmp	r3, r1
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80045fc:	2001      	movs	r0, #1
}
 80045fe:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	f013 0f02 	tst.w	r3, #2
 8004606:	d017      	beq.n	8004638 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004608:	f013 0f04 	tst.w	r3, #4
 800460c:	d004      	beq.n	8004618 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800460e:	4a46      	ldr	r2, [pc, #280]	; (8004728 <HAL_RCC_ClockConfig+0x158>)
 8004610:	6893      	ldr	r3, [r2, #8]
 8004612:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004616:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004618:	6823      	ldr	r3, [r4, #0]
 800461a:	f013 0f08 	tst.w	r3, #8
 800461e:	d004      	beq.n	800462a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004620:	4a41      	ldr	r2, [pc, #260]	; (8004728 <HAL_RCC_ClockConfig+0x158>)
 8004622:	6893      	ldr	r3, [r2, #8]
 8004624:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004628:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800462a:	4a3f      	ldr	r2, [pc, #252]	; (8004728 <HAL_RCC_ClockConfig+0x158>)
 800462c:	6893      	ldr	r3, [r2, #8]
 800462e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004632:	68a0      	ldr	r0, [r4, #8]
 8004634:	4303      	orrs	r3, r0
 8004636:	6093      	str	r3, [r2, #8]
 8004638:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	f013 0f01 	tst.w	r3, #1
 8004640:	d031      	beq.n	80046a6 <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004642:	6863      	ldr	r3, [r4, #4]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d020      	beq.n	800468a <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004648:	2b02      	cmp	r3, #2
 800464a:	d025      	beq.n	8004698 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464c:	4a36      	ldr	r2, [pc, #216]	; (8004728 <HAL_RCC_ClockConfig+0x158>)
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	f012 0f02 	tst.w	r2, #2
 8004654:	d063      	beq.n	800471e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004656:	4934      	ldr	r1, [pc, #208]	; (8004728 <HAL_RCC_ClockConfig+0x158>)
 8004658:	688a      	ldr	r2, [r1, #8]
 800465a:	f022 0203 	bic.w	r2, r2, #3
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004662:	f7fc fa6d 	bl	8000b40 <HAL_GetTick>
 8004666:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004668:	4b2f      	ldr	r3, [pc, #188]	; (8004728 <HAL_RCC_ClockConfig+0x158>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 030c 	and.w	r3, r3, #12
 8004670:	6862      	ldr	r2, [r4, #4]
 8004672:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004676:	d016      	beq.n	80046a6 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004678:	f7fc fa62 	bl	8000b40 <HAL_GetTick>
 800467c:	1b80      	subs	r0, r0, r6
 800467e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004682:	4298      	cmp	r0, r3
 8004684:	d9f0      	bls.n	8004668 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8004686:	2003      	movs	r0, #3
 8004688:	e7b9      	b.n	80045fe <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468a:	4a27      	ldr	r2, [pc, #156]	; (8004728 <HAL_RCC_ClockConfig+0x158>)
 800468c:	6812      	ldr	r2, [r2, #0]
 800468e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004692:	d1e0      	bne.n	8004656 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8004694:	2001      	movs	r0, #1
 8004696:	e7b2      	b.n	80045fe <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004698:	4a23      	ldr	r2, [pc, #140]	; (8004728 <HAL_RCC_ClockConfig+0x158>)
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80046a0:	d1d9      	bne.n	8004656 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80046a2:	2001      	movs	r0, #1
 80046a4:	e7ab      	b.n	80045fe <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046a6:	4b1f      	ldr	r3, [pc, #124]	; (8004724 <HAL_RCC_ClockConfig+0x154>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	42ab      	cmp	r3, r5
 80046b0:	d90c      	bls.n	80046cc <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b2:	4a1c      	ldr	r2, [pc, #112]	; (8004724 <HAL_RCC_ClockConfig+0x154>)
 80046b4:	6813      	ldr	r3, [r2, #0]
 80046b6:	f023 030f 	bic.w	r3, r3, #15
 80046ba:	432b      	orrs	r3, r5
 80046bc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046be:	6813      	ldr	r3, [r2, #0]
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	42ab      	cmp	r3, r5
 80046c6:	d001      	beq.n	80046cc <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 80046c8:	2001      	movs	r0, #1
 80046ca:	e798      	b.n	80045fe <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	f013 0f04 	tst.w	r3, #4
 80046d2:	d006      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d4:	4a14      	ldr	r2, [pc, #80]	; (8004728 <HAL_RCC_ClockConfig+0x158>)
 80046d6:	6893      	ldr	r3, [r2, #8]
 80046d8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80046dc:	68e1      	ldr	r1, [r4, #12]
 80046de:	430b      	orrs	r3, r1
 80046e0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	f013 0f08 	tst.w	r3, #8
 80046e8:	d007      	beq.n	80046fa <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046ea:	4a0f      	ldr	r2, [pc, #60]	; (8004728 <HAL_RCC_ClockConfig+0x158>)
 80046ec:	6893      	ldr	r3, [r2, #8]
 80046ee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80046f2:	6921      	ldr	r1, [r4, #16]
 80046f4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80046f8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046fa:	f7ff fefd 	bl	80044f8 <HAL_RCC_GetSysClockFreq>
 80046fe:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <HAL_RCC_ClockConfig+0x158>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004706:	4a09      	ldr	r2, [pc, #36]	; (800472c <HAL_RCC_ClockConfig+0x15c>)
 8004708:	5cd3      	ldrb	r3, [r2, r3]
 800470a:	40d8      	lsrs	r0, r3
 800470c:	4b08      	ldr	r3, [pc, #32]	; (8004730 <HAL_RCC_ClockConfig+0x160>)
 800470e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004710:	2000      	movs	r0, #0
 8004712:	f7fe fc1f 	bl	8002f54 <HAL_InitTick>
  return HAL_OK;
 8004716:	2000      	movs	r0, #0
 8004718:	e771      	b.n	80045fe <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800471a:	2001      	movs	r0, #1
}
 800471c:	4770      	bx	lr
        return HAL_ERROR;
 800471e:	2001      	movs	r0, #1
 8004720:	e76d      	b.n	80045fe <HAL_RCC_ClockConfig+0x2e>
 8004722:	bf00      	nop
 8004724:	40023c00 	.word	0x40023c00
 8004728:	40023800 	.word	0x40023800
 800472c:	0800507c 	.word	0x0800507c
 8004730:	20000048 	.word	0x20000048

08004734 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004734:	4b01      	ldr	r3, [pc, #4]	; (800473c <HAL_RCC_GetHCLKFreq+0x8>)
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000048 	.word	0x20000048

08004740 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004740:	4b03      	ldr	r3, [pc, #12]	; (8004750 <RCC_GetHCLKClockFreq+0x10>)
 8004742:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004744:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004748:	4a02      	ldr	r2, [pc, #8]	; (8004754 <RCC_GetHCLKClockFreq+0x14>)
 800474a:	5cd3      	ldrb	r3, [r2, r3]
}
 800474c:	40d8      	lsrs	r0, r3
 800474e:	4770      	bx	lr
 8004750:	40023800 	.word	0x40023800
 8004754:	0800507c 	.word	0x0800507c

08004758 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004758:	4b03      	ldr	r3, [pc, #12]	; (8004768 <RCC_GetPCLK1ClockFreq+0x10>)
 800475a:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800475c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004760:	4a02      	ldr	r2, [pc, #8]	; (800476c <RCC_GetPCLK1ClockFreq+0x14>)
 8004762:	5cd3      	ldrb	r3, [r2, r3]
}
 8004764:	40d8      	lsrs	r0, r3
 8004766:	4770      	bx	lr
 8004768:	40023800 	.word	0x40023800
 800476c:	0800508c 	.word	0x0800508c

08004770 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004770:	4b03      	ldr	r3, [pc, #12]	; (8004780 <RCC_GetPCLK2ClockFreq+0x10>)
 8004772:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004774:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004778:	4a02      	ldr	r2, [pc, #8]	; (8004784 <RCC_GetPCLK2ClockFreq+0x14>)
 800477a:	5cd3      	ldrb	r3, [r2, r3]
}
 800477c:	40d8      	lsrs	r0, r3
 800477e:	4770      	bx	lr
 8004780:	40023800 	.word	0x40023800
 8004784:	0800508c 	.word	0x0800508c

08004788 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004788:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <RCC_PLL_GetFreqDomain_SYS+0x38>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8004790:	b90b      	cbnz	r3, 8004796 <RCC_PLL_GetFreqDomain_SYS+0xe>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004792:	480c      	ldr	r0, [pc, #48]	; (80047c4 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8004794:	e000      	b.n	8004798 <RCC_PLL_GetFreqDomain_SYS+0x10>
      break;

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004796:	480c      	ldr	r0, [pc, #48]	; (80047c8 <RCC_PLL_GetFreqDomain_SYS+0x40>)
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004798:	4a09      	ldr	r2, [pc, #36]	; (80047c0 <RCC_PLL_GetFreqDomain_SYS+0x38>)
 800479a:	6853      	ldr	r3, [r2, #4]
 800479c:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80047a0:	fbb0 f3f3 	udiv	r3, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80047a4:	6850      	ldr	r0, [r2, #4]
 80047a6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80047aa:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80047ae:	6853      	ldr	r3, [r2, #4]
 80047b0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80047b4:	3301      	adds	r3, #1
 80047b6:	005b      	lsls	r3, r3, #1
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 80047b8:	fbb0 f0f3 	udiv	r0, r0, r3
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40023800 	.word	0x40023800
 80047c4:	00f42400 	.word	0x00f42400
 80047c8:	007a1200 	.word	0x007a1200

080047cc <RCC_GetSystemClockFreq>:
{
 80047cc:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80047ce:	4b07      	ldr	r3, [pc, #28]	; (80047ec <RCC_GetSystemClockFreq+0x20>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d006      	beq.n	80047e8 <RCC_GetSystemClockFreq+0x1c>
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d001      	beq.n	80047e2 <RCC_GetSystemClockFreq+0x16>
      frequency = HSI_VALUE;
 80047de:	4804      	ldr	r0, [pc, #16]	; (80047f0 <RCC_GetSystemClockFreq+0x24>)
}
 80047e0:	bd08      	pop	{r3, pc}
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80047e2:	f7ff ffd1 	bl	8004788 <RCC_PLL_GetFreqDomain_SYS>
      break;
 80047e6:	e7fb      	b.n	80047e0 <RCC_GetSystemClockFreq+0x14>
      frequency = HSE_VALUE;
 80047e8:	4802      	ldr	r0, [pc, #8]	; (80047f4 <RCC_GetSystemClockFreq+0x28>)
  return frequency;
 80047ea:	e7f9      	b.n	80047e0 <RCC_GetSystemClockFreq+0x14>
 80047ec:	40023800 	.word	0x40023800
 80047f0:	00f42400 	.word	0x00f42400
 80047f4:	007a1200 	.word	0x007a1200

080047f8 <LL_RCC_GetUSARTClockFreq>:
{
 80047f8:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80047fa:	2803      	cmp	r0, #3
 80047fc:	d008      	beq.n	8004810 <LL_RCC_GetUSARTClockFreq+0x18>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80047fe:	280c      	cmp	r0, #12
 8004800:	d02d      	beq.n	800485e <LL_RCC_GetUSARTClockFreq+0x66>
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 8004802:	f5b0 6f40 	cmp.w	r0, #3072	; 0xc00
 8004806:	d051      	beq.n	80048ac <LL_RCC_GetUSARTClockFreq+0xb4>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8004808:	2830      	cmp	r0, #48	; 0x30
 800480a:	d077      	beq.n	80048fc <LL_RCC_GetUSARTClockFreq+0x104>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800480c:	2000      	movs	r0, #0
}
 800480e:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 8004810:	4b58      	ldr	r3, [pc, #352]	; (8004974 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004816:	4003      	ands	r3, r0
 8004818:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800481c:	4b56      	ldr	r3, [pc, #344]	; (8004978 <LL_RCC_GetUSARTClockFreq+0x180>)
 800481e:	4298      	cmp	r0, r3
 8004820:	d00f      	beq.n	8004842 <LL_RCC_GetUSARTClockFreq+0x4a>
 8004822:	f1b0 1f03 	cmp.w	r0, #196611	; 0x30003
 8004826:	d013      	beq.n	8004850 <LL_RCC_GetUSARTClockFreq+0x58>
 8004828:	3b01      	subs	r3, #1
 800482a:	4298      	cmp	r0, r3
 800482c:	d006      	beq.n	800483c <LL_RCC_GetUSARTClockFreq+0x44>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800482e:	f7ff ffcd 	bl	80047cc <RCC_GetSystemClockFreq>
 8004832:	f7ff ff85 	bl	8004740 <RCC_GetHCLKClockFreq>
 8004836:	f7ff ff9b 	bl	8004770 <RCC_GetPCLK2ClockFreq>
        break;
 800483a:	e7e8      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
        usart_frequency = RCC_GetSystemClockFreq();
 800483c:	f7ff ffc6 	bl	80047cc <RCC_GetSystemClockFreq>
        break;
 8004840:	e7e5      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004842:	4b4c      	ldr	r3, [pc, #304]	; (8004974 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8004844:	681b      	ldr	r3, [r3, #0]
        if (LL_RCC_HSI_IsReady())
 8004846:	f013 0f02 	tst.w	r3, #2
 800484a:	d17e      	bne.n	800494a <LL_RCC_GetUSARTClockFreq+0x152>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800484c:	2000      	movs	r0, #0
 800484e:	e7de      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8004850:	4b48      	ldr	r3, [pc, #288]	; (8004974 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        if (LL_RCC_LSE_IsReady())
 8004854:	f013 0f02 	tst.w	r3, #2
 8004858:	d179      	bne.n	800494e <LL_RCC_GetUSARTClockFreq+0x156>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800485a:	2000      	movs	r0, #0
 800485c:	e7d7      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 800485e:	4b45      	ldr	r3, [pc, #276]	; (8004974 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8004860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004864:	4003      	ands	r3, r0
 8004866:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800486a:	4b44      	ldr	r3, [pc, #272]	; (800497c <LL_RCC_GetUSARTClockFreq+0x184>)
 800486c:	4298      	cmp	r0, r3
 800486e:	d00f      	beq.n	8004890 <LL_RCC_GetUSARTClockFreq+0x98>
 8004870:	f1b0 1f0c 	cmp.w	r0, #786444	; 0xc000c
 8004874:	d013      	beq.n	800489e <LL_RCC_GetUSARTClockFreq+0xa6>
 8004876:	3b04      	subs	r3, #4
 8004878:	4298      	cmp	r0, r3
 800487a:	d006      	beq.n	800488a <LL_RCC_GetUSARTClockFreq+0x92>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800487c:	f7ff ffa6 	bl	80047cc <RCC_GetSystemClockFreq>
 8004880:	f7ff ff5e 	bl	8004740 <RCC_GetHCLKClockFreq>
 8004884:	f7ff ff68 	bl	8004758 <RCC_GetPCLK1ClockFreq>
        break;
 8004888:	e7c1      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
        usart_frequency = RCC_GetSystemClockFreq();
 800488a:	f7ff ff9f 	bl	80047cc <RCC_GetSystemClockFreq>
        break;
 800488e:	e7be      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004890:	4b38      	ldr	r3, [pc, #224]	; (8004974 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8004892:	681b      	ldr	r3, [r3, #0]
        if (LL_RCC_HSI_IsReady())
 8004894:	f013 0f02 	tst.w	r3, #2
 8004898:	d15c      	bne.n	8004954 <LL_RCC_GetUSARTClockFreq+0x15c>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800489a:	2000      	movs	r0, #0
 800489c:	e7b7      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800489e:	4b35      	ldr	r3, [pc, #212]	; (8004974 <LL_RCC_GetUSARTClockFreq+0x17c>)
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        if (LL_RCC_LSE_IsReady())
 80048a2:	f013 0f02 	tst.w	r3, #2
 80048a6:	d157      	bne.n	8004958 <LL_RCC_GetUSARTClockFreq+0x160>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80048a8:	2000      	movs	r0, #0
 80048aa:	e7b0      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 80048ac:	4b31      	ldr	r3, [pc, #196]	; (8004974 <LL_RCC_GetUSARTClockFreq+0x17c>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b2:	4003      	ands	r3, r0
 80048b4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80048b8:	4b31      	ldr	r3, [pc, #196]	; (8004980 <LL_RCC_GetUSARTClockFreq+0x188>)
 80048ba:	4298      	cmp	r0, r3
 80048bc:	d010      	beq.n	80048e0 <LL_RCC_GetUSARTClockFreq+0xe8>
 80048be:	f1b0 2f0c 	cmp.w	r0, #201329664	; 0xc000c00
 80048c2:	d014      	beq.n	80048ee <LL_RCC_GetUSARTClockFreq+0xf6>
 80048c4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80048c8:	4298      	cmp	r0, r3
 80048ca:	d006      	beq.n	80048da <LL_RCC_GetUSARTClockFreq+0xe2>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80048cc:	f7ff ff7e 	bl	80047cc <RCC_GetSystemClockFreq>
 80048d0:	f7ff ff36 	bl	8004740 <RCC_GetHCLKClockFreq>
 80048d4:	f7ff ff4c 	bl	8004770 <RCC_GetPCLK2ClockFreq>
        break;
 80048d8:	e799      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
        usart_frequency = RCC_GetSystemClockFreq();
 80048da:	f7ff ff77 	bl	80047cc <RCC_GetSystemClockFreq>
        break;
 80048de:	e796      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80048e0:	4b24      	ldr	r3, [pc, #144]	; (8004974 <LL_RCC_GetUSARTClockFreq+0x17c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
        if (LL_RCC_HSI_IsReady())
 80048e4:	f013 0f02 	tst.w	r3, #2
 80048e8:	d139      	bne.n	800495e <LL_RCC_GetUSARTClockFreq+0x166>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80048ea:	2000      	movs	r0, #0
 80048ec:	e78f      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80048ee:	4b21      	ldr	r3, [pc, #132]	; (8004974 <LL_RCC_GetUSARTClockFreq+0x17c>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        if (LL_RCC_LSE_IsReady())
 80048f2:	f013 0f02 	tst.w	r3, #2
 80048f6:	d134      	bne.n	8004962 <LL_RCC_GetUSARTClockFreq+0x16a>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80048f8:	2000      	movs	r0, #0
 80048fa:	e788      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 80048fc:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <LL_RCC_GetUSARTClockFreq+0x17c>)
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004902:	4003      	ands	r3, r0
 8004904:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004908:	4b1e      	ldr	r3, [pc, #120]	; (8004984 <LL_RCC_GetUSARTClockFreq+0x18c>)
 800490a:	4298      	cmp	r0, r3
 800490c:	d00f      	beq.n	800492e <LL_RCC_GetUSARTClockFreq+0x136>
 800490e:	f1b0 1f30 	cmp.w	r0, #3145776	; 0x300030
 8004912:	d013      	beq.n	800493c <LL_RCC_GetUSARTClockFreq+0x144>
 8004914:	3b10      	subs	r3, #16
 8004916:	4298      	cmp	r0, r3
 8004918:	d006      	beq.n	8004928 <LL_RCC_GetUSARTClockFreq+0x130>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800491a:	f7ff ff57 	bl	80047cc <RCC_GetSystemClockFreq>
 800491e:	f7ff ff0f 	bl	8004740 <RCC_GetHCLKClockFreq>
 8004922:	f7ff ff19 	bl	8004758 <RCC_GetPCLK1ClockFreq>
          break;
 8004926:	e772      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
          usart_frequency = RCC_GetSystemClockFreq();
 8004928:	f7ff ff50 	bl	80047cc <RCC_GetSystemClockFreq>
          break;
 800492c:	e76f      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800492e:	4b11      	ldr	r3, [pc, #68]	; (8004974 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8004930:	681b      	ldr	r3, [r3, #0]
          if (LL_RCC_HSI_IsReady())
 8004932:	f013 0f02 	tst.w	r3, #2
 8004936:	d117      	bne.n	8004968 <LL_RCC_GetUSARTClockFreq+0x170>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004938:	2000      	movs	r0, #0
 800493a:	e768      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800493c:	4b0d      	ldr	r3, [pc, #52]	; (8004974 <LL_RCC_GetUSARTClockFreq+0x17c>)
 800493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          if (LL_RCC_LSE_IsReady())
 8004940:	f013 0f02 	tst.w	r3, #2
 8004944:	d112      	bne.n	800496c <LL_RCC_GetUSARTClockFreq+0x174>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004946:	2000      	movs	r0, #0
 8004948:	e761      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
          usart_frequency = HSI_VALUE;
 800494a:	480f      	ldr	r0, [pc, #60]	; (8004988 <LL_RCC_GetUSARTClockFreq+0x190>)
 800494c:	e75f      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
          usart_frequency = LSE_VALUE;
 800494e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004952:	e75c      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
          usart_frequency = HSI_VALUE;
 8004954:	480c      	ldr	r0, [pc, #48]	; (8004988 <LL_RCC_GetUSARTClockFreq+0x190>)
 8004956:	e75a      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
          usart_frequency = LSE_VALUE;
 8004958:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800495c:	e757      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
          usart_frequency = HSI_VALUE;
 800495e:	480a      	ldr	r0, [pc, #40]	; (8004988 <LL_RCC_GetUSARTClockFreq+0x190>)
 8004960:	e755      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
          usart_frequency = LSE_VALUE;
 8004962:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004966:	e752      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
            usart_frequency = HSI_VALUE;
 8004968:	4807      	ldr	r0, [pc, #28]	; (8004988 <LL_RCC_GetUSARTClockFreq+0x190>)
 800496a:	e750      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
            usart_frequency = LSE_VALUE;
 800496c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return usart_frequency;
 8004970:	e74d      	b.n	800480e <LL_RCC_GetUSARTClockFreq+0x16>
 8004972:	bf00      	nop
 8004974:	40023800 	.word	0x40023800
 8004978:	00030002 	.word	0x00030002
 800497c:	000c0008 	.word	0x000c0008
 8004980:	0c000800 	.word	0x0c000800
 8004984:	00300020 	.word	0x00300020
 8004988:	00f42400 	.word	0x00f42400

0800498c <LL_RCC_GetUARTClockFreq>:
{
 800498c:	b508      	push	{r3, lr}
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800498e:	28c0      	cmp	r0, #192	; 0xc0
 8004990:	d00a      	beq.n	80049a8 <LL_RCC_GetUARTClockFreq+0x1c>
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8004992:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8004996:	d02f      	beq.n	80049f8 <LL_RCC_GetUARTClockFreq+0x6c>
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 8004998:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
 800499c:	d054      	beq.n	8004a48 <LL_RCC_GetUARTClockFreq+0xbc>
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 800499e:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80049a2:	d079      	beq.n	8004a98 <LL_RCC_GetUARTClockFreq+0x10c>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80049a4:	2000      	movs	r0, #0
}
 80049a6:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 80049a8:	4b59      	ldr	r3, [pc, #356]	; (8004b10 <LL_RCC_GetUARTClockFreq+0x184>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ae:	4003      	ands	r3, r0
 80049b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80049b4:	4b57      	ldr	r3, [pc, #348]	; (8004b14 <LL_RCC_GetUARTClockFreq+0x188>)
 80049b6:	4298      	cmp	r0, r3
 80049b8:	d00f      	beq.n	80049da <LL_RCC_GetUARTClockFreq+0x4e>
 80049ba:	f1b0 1fc0 	cmp.w	r0, #12583104	; 0xc000c0
 80049be:	d014      	beq.n	80049ea <LL_RCC_GetUARTClockFreq+0x5e>
 80049c0:	3b40      	subs	r3, #64	; 0x40
 80049c2:	4298      	cmp	r0, r3
 80049c4:	d006      	beq.n	80049d4 <LL_RCC_GetUARTClockFreq+0x48>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80049c6:	f7ff ff01 	bl	80047cc <RCC_GetSystemClockFreq>
 80049ca:	f7ff feb9 	bl	8004740 <RCC_GetHCLKClockFreq>
 80049ce:	f7ff fec3 	bl	8004758 <RCC_GetPCLK1ClockFreq>
        break;
 80049d2:	e7e8      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
        uart_frequency = RCC_GetSystemClockFreq();
 80049d4:	f7ff fefa 	bl	80047cc <RCC_GetSystemClockFreq>
        break;
 80049d8:	e7e5      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80049da:	4b4d      	ldr	r3, [pc, #308]	; (8004b10 <LL_RCC_GetUARTClockFreq+0x184>)
 80049dc:	681b      	ldr	r3, [r3, #0]
        if (LL_RCC_HSI_IsReady())
 80049de:	f013 0f02 	tst.w	r3, #2
 80049e2:	f040 8081 	bne.w	8004ae8 <LL_RCC_GetUARTClockFreq+0x15c>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80049e6:	2000      	movs	r0, #0
 80049e8:	e7dd      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80049ea:	4b49      	ldr	r3, [pc, #292]	; (8004b10 <LL_RCC_GetUARTClockFreq+0x184>)
 80049ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        if (LL_RCC_LSE_IsReady())
 80049ee:	f013 0f02 	tst.w	r3, #2
 80049f2:	d17b      	bne.n	8004aec <LL_RCC_GetUARTClockFreq+0x160>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80049f4:	2000      	movs	r0, #0
 80049f6:	e7d6      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 80049f8:	4b45      	ldr	r3, [pc, #276]	; (8004b10 <LL_RCC_GetUARTClockFreq+0x184>)
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fe:	4003      	ands	r3, r0
 8004a00:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004a04:	4b44      	ldr	r3, [pc, #272]	; (8004b18 <LL_RCC_GetUARTClockFreq+0x18c>)
 8004a06:	4298      	cmp	r0, r3
 8004a08:	d010      	beq.n	8004a2c <LL_RCC_GetUARTClockFreq+0xa0>
 8004a0a:	f1b0 2f03 	cmp.w	r0, #50332416	; 0x3000300
 8004a0e:	d014      	beq.n	8004a3a <LL_RCC_GetUARTClockFreq+0xae>
 8004a10:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a14:	4298      	cmp	r0, r3
 8004a16:	d006      	beq.n	8004a26 <LL_RCC_GetUARTClockFreq+0x9a>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004a18:	f7ff fed8 	bl	80047cc <RCC_GetSystemClockFreq>
 8004a1c:	f7ff fe90 	bl	8004740 <RCC_GetHCLKClockFreq>
 8004a20:	f7ff fe9a 	bl	8004758 <RCC_GetPCLK1ClockFreq>
        break;
 8004a24:	e7bf      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
        uart_frequency = RCC_GetSystemClockFreq();
 8004a26:	f7ff fed1 	bl	80047cc <RCC_GetSystemClockFreq>
        break;
 8004a2a:	e7bc      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004a2c:	4b38      	ldr	r3, [pc, #224]	; (8004b10 <LL_RCC_GetUARTClockFreq+0x184>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
        if (LL_RCC_HSI_IsReady())
 8004a30:	f013 0f02 	tst.w	r3, #2
 8004a34:	d15d      	bne.n	8004af2 <LL_RCC_GetUARTClockFreq+0x166>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004a36:	2000      	movs	r0, #0
 8004a38:	e7b5      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8004a3a:	4b35      	ldr	r3, [pc, #212]	; (8004b10 <LL_RCC_GetUARTClockFreq+0x184>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        if (LL_RCC_LSE_IsReady())
 8004a3e:	f013 0f02 	tst.w	r3, #2
 8004a42:	d158      	bne.n	8004af6 <LL_RCC_GetUARTClockFreq+0x16a>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004a44:	2000      	movs	r0, #0
 8004a46:	e7ae      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 8004a48:	4b31      	ldr	r3, [pc, #196]	; (8004b10 <LL_RCC_GetUARTClockFreq+0x184>)
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4e:	4003      	ands	r3, r0
 8004a50:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004a54:	4b31      	ldr	r3, [pc, #196]	; (8004b1c <LL_RCC_GetUARTClockFreq+0x190>)
 8004a56:	4298      	cmp	r0, r3
 8004a58:	d010      	beq.n	8004a7c <LL_RCC_GetUARTClockFreq+0xf0>
 8004a5a:	f1b0 2f30 	cmp.w	r0, #805318656	; 0x30003000
 8004a5e:	d014      	beq.n	8004a8a <LL_RCC_GetUARTClockFreq+0xfe>
 8004a60:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8004a64:	4298      	cmp	r0, r3
 8004a66:	d006      	beq.n	8004a76 <LL_RCC_GetUARTClockFreq+0xea>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004a68:	f7ff feb0 	bl	80047cc <RCC_GetSystemClockFreq>
 8004a6c:	f7ff fe68 	bl	8004740 <RCC_GetHCLKClockFreq>
 8004a70:	f7ff fe72 	bl	8004758 <RCC_GetPCLK1ClockFreq>
        break;
 8004a74:	e797      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
        uart_frequency = RCC_GetSystemClockFreq();
 8004a76:	f7ff fea9 	bl	80047cc <RCC_GetSystemClockFreq>
        break;
 8004a7a:	e794      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004a7c:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <LL_RCC_GetUARTClockFreq+0x184>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
        if (LL_RCC_HSI_IsReady())
 8004a80:	f013 0f02 	tst.w	r3, #2
 8004a84:	d13a      	bne.n	8004afc <LL_RCC_GetUARTClockFreq+0x170>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004a86:	2000      	movs	r0, #0
 8004a88:	e78d      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8004a8a:	4b21      	ldr	r3, [pc, #132]	; (8004b10 <LL_RCC_GetUARTClockFreq+0x184>)
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        if (LL_RCC_LSE_IsReady())
 8004a8e:	f013 0f02 	tst.w	r3, #2
 8004a92:	d135      	bne.n	8004b00 <LL_RCC_GetUARTClockFreq+0x174>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004a94:	2000      	movs	r0, #0
 8004a96:	e786      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 8004a98:	4b1d      	ldr	r3, [pc, #116]	; (8004b10 <LL_RCC_GetUARTClockFreq+0x184>)
 8004a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9e:	4003      	ands	r3, r0
 8004aa0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004aa4:	4b1e      	ldr	r3, [pc, #120]	; (8004b20 <LL_RCC_GetUARTClockFreq+0x194>)
 8004aa6:	4298      	cmp	r0, r3
 8004aa8:	d010      	beq.n	8004acc <LL_RCC_GetUARTClockFreq+0x140>
 8004aaa:	f1b0 2fc0 	cmp.w	r0, #3221274624	; 0xc000c000
 8004aae:	d014      	beq.n	8004ada <LL_RCC_GetUARTClockFreq+0x14e>
 8004ab0:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004ab4:	4298      	cmp	r0, r3
 8004ab6:	d006      	beq.n	8004ac6 <LL_RCC_GetUARTClockFreq+0x13a>
          uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004ab8:	f7ff fe88 	bl	80047cc <RCC_GetSystemClockFreq>
 8004abc:	f7ff fe40 	bl	8004740 <RCC_GetHCLKClockFreq>
 8004ac0:	f7ff fe4a 	bl	8004758 <RCC_GetPCLK1ClockFreq>
          break;
 8004ac4:	e76f      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
          uart_frequency = RCC_GetSystemClockFreq();
 8004ac6:	f7ff fe81 	bl	80047cc <RCC_GetSystemClockFreq>
          break;
 8004aca:	e76c      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004acc:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <LL_RCC_GetUARTClockFreq+0x184>)
 8004ace:	681b      	ldr	r3, [r3, #0]
          if (LL_RCC_HSI_IsReady())
 8004ad0:	f013 0f02 	tst.w	r3, #2
 8004ad4:	d117      	bne.n	8004b06 <LL_RCC_GetUARTClockFreq+0x17a>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	e765      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8004ada:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <LL_RCC_GetUARTClockFreq+0x184>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          if (LL_RCC_LSE_IsReady())
 8004ade:	f013 0f02 	tst.w	r3, #2
 8004ae2:	d112      	bne.n	8004b0a <LL_RCC_GetUARTClockFreq+0x17e>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	e75e      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
          uart_frequency = HSI_VALUE;
 8004ae8:	480e      	ldr	r0, [pc, #56]	; (8004b24 <LL_RCC_GetUARTClockFreq+0x198>)
 8004aea:	e75c      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
          uart_frequency = LSE_VALUE;
 8004aec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004af0:	e759      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
          uart_frequency = HSI_VALUE;
 8004af2:	480c      	ldr	r0, [pc, #48]	; (8004b24 <LL_RCC_GetUARTClockFreq+0x198>)
 8004af4:	e757      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
          uart_frequency = LSE_VALUE;
 8004af6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004afa:	e754      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
          uart_frequency = HSI_VALUE;
 8004afc:	4809      	ldr	r0, [pc, #36]	; (8004b24 <LL_RCC_GetUARTClockFreq+0x198>)
 8004afe:	e752      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
          uart_frequency = LSE_VALUE;
 8004b00:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004b04:	e74f      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
            uart_frequency = HSI_VALUE;
 8004b06:	4807      	ldr	r0, [pc, #28]	; (8004b24 <LL_RCC_GetUARTClockFreq+0x198>)
 8004b08:	e74d      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
            uart_frequency = LSE_VALUE;
 8004b0a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return uart_frequency;
 8004b0e:	e74a      	b.n	80049a6 <LL_RCC_GetUARTClockFreq+0x1a>
 8004b10:	40023800 	.word	0x40023800
 8004b14:	00c00080 	.word	0x00c00080
 8004b18:	03000200 	.word	0x03000200
 8004b1c:	30002000 	.word	0x30002000
 8004b20:	c0008000 	.word	0xc0008000
 8004b24:	00f42400 	.word	0x00f42400

08004b28 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004b28:	b538      	push	{r3, r4, r5, lr}
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004b2a:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004b2c:	f013 0f01 	tst.w	r3, #1
 8004b30:	d175      	bne.n	8004c1e <LL_USART_Init+0xf6>
 8004b32:	460d      	mov	r5, r1
 8004b34:	4604      	mov	r4, r0
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004b36:	6803      	ldr	r3, [r0, #0]
 8004b38:	4a3c      	ldr	r2, [pc, #240]	; (8004c2c <LL_USART_Init+0x104>)
 8004b3a:	401a      	ands	r2, r3
 8004b3c:	684b      	ldr	r3, [r1, #4]
 8004b3e:	68c9      	ldr	r1, [r1, #12]
 8004b40:	430b      	orrs	r3, r1
 8004b42:	6929      	ldr	r1, [r5, #16]
 8004b44:	430b      	orrs	r3, r1
 8004b46:	69a9      	ldr	r1, [r5, #24]
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	6003      	str	r3, [r0, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004b4e:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004b50:	6842      	ldr	r2, [r0, #4]
 8004b52:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004b56:	4313      	orrs	r3, r2
 8004b58:	6043      	str	r3, [r0, #4]

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004b5a:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004b5c:	6882      	ldr	r2, [r0, #8]
 8004b5e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b62:	4313      	orrs	r3, r2
 8004b64:	6083      	str	r3, [r0, #8]

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8004b66:	4b32      	ldr	r3, [pc, #200]	; (8004c30 <LL_USART_Init+0x108>)
 8004b68:	4298      	cmp	r0, r3
 8004b6a:	d016      	beq.n	8004b9a <LL_USART_Init+0x72>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 8004b6c:	4b31      	ldr	r3, [pc, #196]	; (8004c34 <LL_USART_Init+0x10c>)
 8004b6e:	4298      	cmp	r0, r3
 8004b70:	d027      	beq.n	8004bc2 <LL_USART_Init+0x9a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
    }
    else if (USARTx == USART3)
 8004b72:	4b31      	ldr	r3, [pc, #196]	; (8004c38 <LL_USART_Init+0x110>)
 8004b74:	4298      	cmp	r0, r3
 8004b76:	d028      	beq.n	8004bca <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
    }
    else if (USARTx == USART6)
 8004b78:	4b30      	ldr	r3, [pc, #192]	; (8004c3c <LL_USART_Init+0x114>)
 8004b7a:	4298      	cmp	r0, r3
 8004b7c:	d029      	beq.n	8004bd2 <LL_USART_Init+0xaa>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
    }
    else if (USARTx == UART4)
 8004b7e:	4b30      	ldr	r3, [pc, #192]	; (8004c40 <LL_USART_Init+0x118>)
 8004b80:	4298      	cmp	r0, r3
 8004b82:	d02b      	beq.n	8004bdc <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
    }
    else if (USARTx == UART5)
 8004b84:	4b2f      	ldr	r3, [pc, #188]	; (8004c44 <LL_USART_Init+0x11c>)
 8004b86:	4298      	cmp	r0, r3
 8004b88:	d02c      	beq.n	8004be4 <LL_USART_Init+0xbc>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
    }
    else if (USARTx == UART7)
 8004b8a:	4b2f      	ldr	r3, [pc, #188]	; (8004c48 <LL_USART_Init+0x120>)
 8004b8c:	4298      	cmp	r0, r3
 8004b8e:	d02e      	beq.n	8004bee <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
    }
    else if (USARTx == UART8)
 8004b90:	4b2e      	ldr	r3, [pc, #184]	; (8004c4c <LL_USART_Init+0x124>)
 8004b92:	4298      	cmp	r0, r3
 8004b94:	d030      	beq.n	8004bf8 <LL_USART_Init+0xd0>
  ErrorStatus status = ERROR;
 8004b96:	2000      	movs	r0, #0
 8004b98:	e042      	b.n	8004c20 <LL_USART_Init+0xf8>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8004b9a:	2003      	movs	r0, #3
 8004b9c:	f7ff fe2c 	bl	80047f8 <LL_RCC_GetUSARTClockFreq>

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d03e      	beq.n	8004c22 <LL_USART_Init+0xfa>
        && (USART_InitStruct->BaudRate != 0U))
 8004ba4:	682b      	ldr	r3, [r5, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d03d      	beq.n	8004c26 <LL_USART_Init+0xfe>
    {
      status = SUCCESS;
      LL_USART_SetBaudRate(USARTx,
 8004baa:	69aa      	ldr	r2, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004bac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004bb0:	d027      	beq.n	8004c02 <LL_USART_Init+0xda>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004bb2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004bb6:	fbb0 f0f3 	udiv	r0, r0, r3
 8004bba:	b280      	uxth	r0, r0
 8004bbc:	60e0      	str	r0, [r4, #12]
      status = SUCCESS;
 8004bbe:	2001      	movs	r0, #1
 8004bc0:	e02e      	b.n	8004c20 <LL_USART_Init+0xf8>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8004bc2:	200c      	movs	r0, #12
 8004bc4:	f7ff fe18 	bl	80047f8 <LL_RCC_GetUSARTClockFreq>
 8004bc8:	e7ea      	b.n	8004ba0 <LL_USART_Init+0x78>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8004bca:	2030      	movs	r0, #48	; 0x30
 8004bcc:	f7ff fe14 	bl	80047f8 <LL_RCC_GetUSARTClockFreq>
 8004bd0:	e7e6      	b.n	8004ba0 <LL_USART_Init+0x78>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 8004bd2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004bd6:	f7ff fe0f 	bl	80047f8 <LL_RCC_GetUSARTClockFreq>
 8004bda:	e7e1      	b.n	8004ba0 <LL_USART_Init+0x78>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8004bdc:	20c0      	movs	r0, #192	; 0xc0
 8004bde:	f7ff fed5 	bl	800498c <LL_RCC_GetUARTClockFreq>
 8004be2:	e7dd      	b.n	8004ba0 <LL_USART_Init+0x78>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8004be4:	f44f 7040 	mov.w	r0, #768	; 0x300
 8004be8:	f7ff fed0 	bl	800498c <LL_RCC_GetUARTClockFreq>
 8004bec:	e7d8      	b.n	8004ba0 <LL_USART_Init+0x78>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 8004bee:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8004bf2:	f7ff fecb 	bl	800498c <LL_RCC_GetUARTClockFreq>
 8004bf6:	e7d3      	b.n	8004ba0 <LL_USART_Init+0x78>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 8004bf8:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8004bfc:	f7ff fec6 	bl	800498c <LL_RCC_GetUARTClockFreq>
 8004c00:	e7ce      	b.n	8004ba0 <LL_USART_Init+0x78>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004c02:	085a      	lsrs	r2, r3, #1
 8004c04:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8004c08:	fbb0 f0f3 	udiv	r0, r0, r3
    brrtemp = usartdiv & 0xFFF0U;
 8004c0c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8004c10:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c12:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8004c16:	4318      	orrs	r0, r3
    USARTx->BRR = brrtemp;
 8004c18:	60e0      	str	r0, [r4, #12]
      status = SUCCESS;
 8004c1a:	2001      	movs	r0, #1
 8004c1c:	e000      	b.n	8004c20 <LL_USART_Init+0xf8>
  ErrorStatus status = ERROR;
 8004c1e:	2000      	movs	r0, #0
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8004c20:	bd38      	pop	{r3, r4, r5, pc}
  ErrorStatus status = ERROR;
 8004c22:	2000      	movs	r0, #0
 8004c24:	e7fc      	b.n	8004c20 <LL_USART_Init+0xf8>
 8004c26:	2000      	movs	r0, #0
 8004c28:	e7fa      	b.n	8004c20 <LL_USART_Init+0xf8>
 8004c2a:	bf00      	nop
 8004c2c:	efff69f3 	.word	0xefff69f3
 8004c30:	40011000 	.word	0x40011000
 8004c34:	40004400 	.word	0x40004400
 8004c38:	40004800 	.word	0x40004800
 8004c3c:	40011400 	.word	0x40011400
 8004c40:	40004c00 	.word	0x40004c00
 8004c44:	40005000 	.word	0x40005000
 8004c48:	40007800 	.word	0x40007800
 8004c4c:	40007c00 	.word	0x40007c00

08004c50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c50:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c52:	4a0f      	ldr	r2, [pc, #60]	; (8004c90 <SystemInit+0x40>)
 8004c54:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <SystemInit+0x44>)
 8004c62:	6819      	ldr	r1, [r3, #0]
 8004c64:	f041 0101 	orr.w	r1, r1, #1
 8004c68:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004c6e:	681c      	ldr	r4, [r3, #0]
 8004c70:	4909      	ldr	r1, [pc, #36]	; (8004c98 <SystemInit+0x48>)
 8004c72:	4021      	ands	r1, r4
 8004c74:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004c76:	4909      	ldr	r1, [pc, #36]	; (8004c9c <SystemInit+0x4c>)
 8004c78:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004c7a:	6819      	ldr	r1, [r3, #0]
 8004c7c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8004c80:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004c82:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004c84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c88:	6093      	str	r3, [r2, #8]
#endif
}
 8004c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	e000ed00 	.word	0xe000ed00
 8004c94:	40023800 	.word	0x40023800
 8004c98:	fef6ffff 	.word	0xfef6ffff
 8004c9c:	24003010 	.word	0x24003010

08004ca0 <clock_time>:
#include "boot.h"

/*---------------------------------------------------------------------------*/
clock_time_t
clock_time(void)
{
 8004ca0:	b508      	push	{r3, lr}
  return (clock_time_t)TimerGet();
 8004ca2:	f7fb ff45 	bl	8000b30 <TimerGet>
}
 8004ca6:	bd08      	pop	{r3, pc}

08004ca8 <HAL_ETH_MspInit>:
/*---------------------------------------------------------------------------*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  if (heth->Instance == ETH)
 8004ca8:	6802      	ldr	r2, [r0, #0]
 8004caa:	4b29      	ldr	r3, [pc, #164]	; (8004d50 <HAL_ETH_MspInit+0xa8>)
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d000      	beq.n	8004cb2 <HAL_ETH_MspInit+0xa>
 8004cb0:	4770      	bx	lr
{
 8004cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cb4:	b089      	sub	sp, #36	; 0x24
  {
    /* Ethernet clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004cb6:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8004cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cbc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30
 8004cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cc4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8004cc8:	9200      	str	r2, [sp, #0]
 8004cca:	9a00      	ldr	r2, [sp, #0]
 8004ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8004cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cd6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8004cda:	9201      	str	r2, [sp, #4]
 8004cdc:	9a01      	ldr	r2, [sp, #4]
 8004cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ce0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8004ce4:	631a      	str	r2, [r3, #48]	; 0x30
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cec:	9302      	str	r3, [sp, #8]
 8004cee:	9b02      	ldr	r3, [sp, #8]
     * PC5      ------> ETH_RXD1
     * PB13     ------> ETH_TXD1
     * PG11     ------> ETH_TX_EN
     * PG13     ------> ETH_TXD0
     */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8004cf0:	2332      	movs	r3, #50	; 0x32
 8004cf2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf4:	2702      	movs	r7, #2
 8004cf6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf8:	2600      	movs	r6, #0
 8004cfa:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cfc:	2503      	movs	r5, #3
 8004cfe:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d00:	240b      	movs	r4, #11
 8004d02:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d04:	a903      	add	r1, sp, #12
 8004d06:	4813      	ldr	r0, [pc, #76]	; (8004d54 <HAL_ETH_MspInit+0xac>)
 8004d08:	f7fe ff88 	bl	8003c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8004d0c:	2386      	movs	r3, #134	; 0x86
 8004d0e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d10:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d12:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d14:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d16:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d18:	a903      	add	r1, sp, #12
 8004d1a:	480f      	ldr	r0, [pc, #60]	; (8004d58 <HAL_ETH_MspInit+0xb0>)
 8004d1c:	f7fe ff7e 	bl	8003c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d24:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d26:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d28:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d2a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d2c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d2e:	a903      	add	r1, sp, #12
 8004d30:	480a      	ldr	r0, [pc, #40]	; (8004d5c <HAL_ETH_MspInit+0xb4>)
 8004d32:	f7fe ff73 	bl	8003c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8004d36:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004d3a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d3c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3e:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d40:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d42:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004d44:	a903      	add	r1, sp, #12
 8004d46:	4806      	ldr	r0, [pc, #24]	; (8004d60 <HAL_ETH_MspInit+0xb8>)
 8004d48:	f7fe ff68 	bl	8003c1c <HAL_GPIO_Init>
  }
}
 8004d4c:	b009      	add	sp, #36	; 0x24
 8004d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d50:	40028000 	.word	0x40028000
 8004d54:	40020800 	.word	0x40020800
 8004d58:	40020000 	.word	0x40020000
 8004d5c:	40020400 	.word	0x40020400
 8004d60:	40021800 	.word	0x40021800

08004d64 <netdev_init>:
}


/*---------------------------------------------------------------------------*/
void netdev_init(void)
{
 8004d64:	b510      	push	{r4, lr}
  /* Store the default MAC address. */
  macAddress.addr[0] = NETDEV_DEFAULT_MACADDR0;
 8004d66:	4a14      	ldr	r2, [pc, #80]	; (8004db8 <netdev_init+0x54>)
 8004d68:	2300      	movs	r3, #0
 8004d6a:	7013      	strb	r3, [r2, #0]
  macAddress.addr[1] = NETDEV_DEFAULT_MACADDR1;
 8004d6c:	2180      	movs	r1, #128	; 0x80
 8004d6e:	7051      	strb	r1, [r2, #1]
  macAddress.addr[2] = NETDEV_DEFAULT_MACADDR2;
 8004d70:	21e1      	movs	r1, #225	; 0xe1
 8004d72:	7091      	strb	r1, [r2, #2]
  macAddress.addr[3] = NETDEV_DEFAULT_MACADDR3;
 8004d74:	70d3      	strb	r3, [r2, #3]
  macAddress.addr[4] = NETDEV_DEFAULT_MACADDR4;
 8004d76:	7113      	strb	r3, [r2, #4]
  macAddress.addr[5] = NETDEV_DEFAULT_MACADDR5;
 8004d78:	7153      	strb	r3, [r2, #5]

  /* Initialize Ethernet. */
  heth.Instance = ETH;
 8004d7a:	4c10      	ldr	r4, [pc, #64]	; (8004dbc <netdev_init+0x58>)
 8004d7c:	4910      	ldr	r1, [pc, #64]	; (8004dc0 <netdev_init+0x5c>)
 8004d7e:	6021      	str	r1, [r4, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004d80:	2101      	movs	r1, #1
 8004d82:	6061      	str	r1, [r4, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004d84:	8223      	strh	r3, [r4, #16]
  heth.Init.MACAddr = &(macAddress.addr)[0];
 8004d86:	6162      	str	r2, [r4, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004d88:	61a3      	str	r3, [r4, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004d8a:	61e3      	str	r3, [r4, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004d8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004d90:	6223      	str	r3, [r4, #32]
  (void)HAL_ETH_Init(&heth);
 8004d92:	4620      	mov	r0, r4
 8004d94:	f7fe fc30 	bl	80035f8 <HAL_ETH_Init>

  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004d98:	2304      	movs	r3, #4
 8004d9a:	4a0a      	ldr	r2, [pc, #40]	; (8004dc4 <netdev_init+0x60>)
 8004d9c:	490a      	ldr	r1, [pc, #40]	; (8004dc8 <netdev_init+0x64>)
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f7fe fa6d 	bl	800327e <HAL_ETH_DMATxDescListInit>
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004da4:	2304      	movs	r3, #4
 8004da6:	4a09      	ldr	r2, [pc, #36]	; (8004dcc <netdev_init+0x68>)
 8004da8:	4909      	ldr	r1, [pc, #36]	; (8004dd0 <netdev_init+0x6c>)
 8004daa:	4620      	mov	r0, r4
 8004dac:	f7fe faa0 	bl	80032f0 <HAL_ETH_DMARxDescListInit>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004db0:	4620      	mov	r0, r4
 8004db2:	f7fe fd4b 	bl	800384c <HAL_ETH_Start>
}
 8004db6:	bd10      	pop	{r4, pc}
 8004db8:	2000061c 	.word	0x2000061c
 8004dbc:	20002628 	.word	0x20002628
 8004dc0:	40028000 	.word	0x40028000
 8004dc4:	20002670 	.word	0x20002670
 8004dc8:	20000d58 	.word	0x20000d58
 8004dcc:	20000dd8 	.word	0x20000dd8
 8004dd0:	200025a8 	.word	0x200025a8

08004dd4 <netdev_init_mac>:

/*---------------------------------------------------------------------------*/
void netdev_init_mac(void)
{
  /* Configure the MAC address */
  uip_setethaddr(macAddress);
 8004dd4:	4a07      	ldr	r2, [pc, #28]	; (8004df4 <netdev_init_mac+0x20>)
 8004dd6:	7811      	ldrb	r1, [r2, #0]
 8004dd8:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <netdev_init_mac+0x24>)
 8004dda:	7019      	strb	r1, [r3, #0]
 8004ddc:	7851      	ldrb	r1, [r2, #1]
 8004dde:	7059      	strb	r1, [r3, #1]
 8004de0:	7891      	ldrb	r1, [r2, #2]
 8004de2:	7099      	strb	r1, [r3, #2]
 8004de4:	78d1      	ldrb	r1, [r2, #3]
 8004de6:	70d9      	strb	r1, [r3, #3]
 8004de8:	7911      	ldrb	r1, [r2, #4]
 8004dea:	7119      	strb	r1, [r3, #4]
 8004dec:	7952      	ldrb	r2, [r2, #5]
 8004dee:	715a      	strb	r2, [r3, #5]
}
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	2000061c 	.word	0x2000061c
 8004df8:	200005a0 	.word	0x200005a0

08004dfc <netdev_read>:
}


/*---------------------------------------------------------------------------*/
unsigned int netdev_read(void)
{
 8004dfc:	b538      	push	{r3, r4, r5, lr}
  uint16_t  len = 0;
  uint8_t * buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;

  /* Check if a new frame was received. */
  if (HAL_ETH_GetReceivedFrame(&heth) == HAL_OK)
 8004dfe:	4812      	ldr	r0, [pc, #72]	; (8004e48 <netdev_read+0x4c>)
 8004e00:	f7fe fb3c 	bl	800347c <HAL_ETH_GetReceivedFrame>
 8004e04:	b110      	cbz	r0, 8004e0c <netdev_read+0x10>
  unsigned int result = 0;
 8004e06:	2400      	movs	r4, #0
    /* Update the result. */
    result = len;
  }
  /* Give the result back to the caller. */
  return result;
}
 8004e08:	4620      	mov	r0, r4
 8004e0a:	bd38      	pop	{r3, r4, r5, pc}
    len = heth.RxFrameInfos.length;
 8004e0c:	4d0e      	ldr	r5, [pc, #56]	; (8004e48 <netdev_read+0x4c>)
 8004e0e:	8fac      	ldrh	r4, [r5, #60]	; 0x3c
    memcpy(uip_buf, buffer, len);
 8004e10:	4622      	mov	r2, r4
 8004e12:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8004e14:	480d      	ldr	r0, [pc, #52]	; (8004e4c <netdev_read+0x50>)
 8004e16:	f000 f888 	bl	8004f2a <memcpy>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004e1a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004e1c:	6813      	ldr	r3, [r2, #0]
 8004e1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e22:	6013      	str	r3, [r2, #0]
    heth.RxFrameInfos.SegCount =0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	63ab      	str	r3, [r5, #56]	; 0x38
    if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004e28:	682b      	ldr	r3, [r5, #0]
 8004e2a:	f241 0214 	movw	r2, #4116	; 0x1014
 8004e2e:	589a      	ldr	r2, [r3, r2]
 8004e30:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004e34:	d0e8      	beq.n	8004e08 <netdev_read+0xc>
      heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004e36:	f241 0214 	movw	r2, #4116	; 0x1014
 8004e3a:	2180      	movs	r1, #128	; 0x80
 8004e3c:	5099      	str	r1, [r3, r2]
      heth.Instance->DMARPDR = 0;
 8004e3e:	f241 0208 	movw	r2, #4104	; 0x1008
 8004e42:	2100      	movs	r1, #0
 8004e44:	5099      	str	r1, [r3, r2]
 8004e46:	e7df      	b.n	8004e08 <netdev_read+0xc>
 8004e48:	20002628 	.word	0x20002628
 8004e4c:	200006b8 	.word	0x200006b8

08004e50 <netdev_send>:


/*---------------------------------------------------------------------------*/
void netdev_send(void)
{
 8004e50:	b538      	push	{r3, r4, r5, lr}
  uint32_t framelength;
  uint32_t timeout;
  ErrorStatus errorStatus = SUCCESS;

  /* Obtain pointer to the transmission DMA descriptor. */
  DmaTxDesc = heth.TxDesc;
 8004e52:	4b19      	ldr	r3, [pc, #100]	; (8004eb8 <netdev_send+0x68>)
 8004e54:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  /* Set timeout time to wait for the DMA buffer to become available. */
  timeout = TimerGet() + NETDEV_TX_PACKET_TIMEOUT_MS;
 8004e56:	f7fb fe6b 	bl	8000b30 <TimerGet>
 8004e5a:	f100 05fa 	add.w	r5, r0, #250	; 0xfa
  /* Only continue with packet transmission of the buffer is available. */
  while ((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	da07      	bge.n	8004e74 <netdev_send+0x24>
  {
    CopService();
 8004e64:	f7fb ff58 	bl	8000d18 <CopService>
    /* Break loop upon timeout. This would indicate a hardware failure. */
    if (TimerGet() > timeout)
 8004e68:	f7fb fe62 	bl	8000b30 <TimerGet>
 8004e6c:	42a8      	cmp	r0, r5
 8004e6e:	d9f6      	bls.n	8004e5e <netdev_send+0xe>
    {
      /* Update the error status. */
      errorStatus = ERROR;
 8004e70:	2300      	movs	r3, #0
 8004e72:	e000      	b.n	8004e76 <netdev_send+0x26>
  ErrorStatus errorStatus = SUCCESS;
 8004e74:	2301      	movs	r3, #1
      break;
    }
  }
  /* Only continue with transmission if not error was detected. */
  if (errorStatus == SUCCESS)
 8004e76:	b983      	cbnz	r3, 8004e9a <netdev_send+0x4a>
  }

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to
   * resume transmission.
   */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004e78:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <netdev_send+0x68>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f241 0214 	movw	r2, #4116	; 0x1014
 8004e80:	589a      	ldr	r2, [r3, r2]
 8004e82:	f012 0f20 	tst.w	r2, #32
 8004e86:	d007      	beq.n	8004e98 <netdev_send+0x48>
  {
    /* Clear TUS ETHERNET DMA flag. */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004e88:	f241 0214 	movw	r2, #4116	; 0x1014
 8004e8c:	2120      	movs	r1, #32
 8004e8e:	5099      	str	r1, [r3, r2]
    /* Resume DMA transmission. */
    heth.Instance->DMATPDR = 0;
 8004e90:	f241 0204 	movw	r2, #4100	; 0x1004
 8004e94:	2100      	movs	r1, #0
 8004e96:	5099      	str	r1, [r3, r2]
  }
}
 8004e98:	bd38      	pop	{r3, r4, r5, pc}
    framelength = uip_len;
 8004e9a:	4b08      	ldr	r3, [pc, #32]	; (8004ebc <netdev_send+0x6c>)
 8004e9c:	881d      	ldrh	r5, [r3, #0]
    buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004e9e:	4c06      	ldr	r4, [pc, #24]	; (8004eb8 <netdev_send+0x68>)
 8004ea0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    memcpy(buffer, uip_buf, framelength);
 8004ea2:	462a      	mov	r2, r5
 8004ea4:	4906      	ldr	r1, [pc, #24]	; (8004ec0 <netdev_send+0x70>)
 8004ea6:	6898      	ldr	r0, [r3, #8]
 8004ea8:	f000 f83f 	bl	8004f2a <memcpy>
    HAL_ETH_TransmitFrame(&heth, framelength);
 8004eac:	4629      	mov	r1, r5
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f7fe fa54 	bl	800335c <HAL_ETH_TransmitFrame>
 8004eb4:	e7e0      	b.n	8004e78 <netdev_send+0x28>
 8004eb6:	bf00      	nop
 8004eb8:	20002628 	.word	0x20002628
 8004ebc:	20000624 	.word	0x20000624
 8004ec0:	200006b8 	.word	0x200006b8

08004ec4 <__libc_init_array>:
 8004ec4:	b570      	push	{r4, r5, r6, lr}
 8004ec6:	4e0d      	ldr	r6, [pc, #52]	; (8004efc <__libc_init_array+0x38>)
 8004ec8:	4c0d      	ldr	r4, [pc, #52]	; (8004f00 <__libc_init_array+0x3c>)
 8004eca:	1ba4      	subs	r4, r4, r6
 8004ecc:	10a4      	asrs	r4, r4, #2
 8004ece:	2500      	movs	r5, #0
 8004ed0:	42a5      	cmp	r5, r4
 8004ed2:	d109      	bne.n	8004ee8 <__libc_init_array+0x24>
 8004ed4:	4e0b      	ldr	r6, [pc, #44]	; (8004f04 <__libc_init_array+0x40>)
 8004ed6:	4c0c      	ldr	r4, [pc, #48]	; (8004f08 <__libc_init_array+0x44>)
 8004ed8:	f000 f83a 	bl	8004f50 <_init>
 8004edc:	1ba4      	subs	r4, r4, r6
 8004ede:	10a4      	asrs	r4, r4, #2
 8004ee0:	2500      	movs	r5, #0
 8004ee2:	42a5      	cmp	r5, r4
 8004ee4:	d105      	bne.n	8004ef2 <__libc_init_array+0x2e>
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
 8004ee8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004eec:	4798      	blx	r3
 8004eee:	3501      	adds	r5, #1
 8004ef0:	e7ee      	b.n	8004ed0 <__libc_init_array+0xc>
 8004ef2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ef6:	4798      	blx	r3
 8004ef8:	3501      	adds	r5, #1
 8004efa:	e7f2      	b.n	8004ee2 <__libc_init_array+0x1e>
 8004efc:	0800509c 	.word	0x0800509c
 8004f00:	0800509c 	.word	0x0800509c
 8004f04:	0800509c 	.word	0x0800509c
 8004f08:	080050a0 	.word	0x080050a0

08004f0c <memcmp>:
 8004f0c:	b530      	push	{r4, r5, lr}
 8004f0e:	2400      	movs	r4, #0
 8004f10:	42a2      	cmp	r2, r4
 8004f12:	d101      	bne.n	8004f18 <memcmp+0xc>
 8004f14:	2000      	movs	r0, #0
 8004f16:	e007      	b.n	8004f28 <memcmp+0x1c>
 8004f18:	5d03      	ldrb	r3, [r0, r4]
 8004f1a:	3401      	adds	r4, #1
 8004f1c:	190d      	adds	r5, r1, r4
 8004f1e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8004f22:	42ab      	cmp	r3, r5
 8004f24:	d0f4      	beq.n	8004f10 <memcmp+0x4>
 8004f26:	1b58      	subs	r0, r3, r5
 8004f28:	bd30      	pop	{r4, r5, pc}

08004f2a <memcpy>:
 8004f2a:	b510      	push	{r4, lr}
 8004f2c:	1e43      	subs	r3, r0, #1
 8004f2e:	440a      	add	r2, r1
 8004f30:	4291      	cmp	r1, r2
 8004f32:	d100      	bne.n	8004f36 <memcpy+0xc>
 8004f34:	bd10      	pop	{r4, pc}
 8004f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f3e:	e7f7      	b.n	8004f30 <memcpy+0x6>

08004f40 <memset>:
 8004f40:	4402      	add	r2, r0
 8004f42:	4603      	mov	r3, r0
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d100      	bne.n	8004f4a <memset+0xa>
 8004f48:	4770      	bx	lr
 8004f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f4e:	e7f9      	b.n	8004f44 <memset+0x4>

08004f50 <_init>:
 8004f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f52:	bf00      	nop
 8004f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f56:	bc08      	pop	{r3}
 8004f58:	469e      	mov	lr, r3
 8004f5a:	4770      	bx	lr

08004f5c <_fini>:
 8004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5e:	bf00      	nop
 8004f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f62:	bc08      	pop	{r3}
 8004f64:	469e      	mov	lr, r3
 8004f66:	4770      	bx	lr
