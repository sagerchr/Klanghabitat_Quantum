
demoprog_stm32f767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .shared       00000040  20000000  20000000  00020000  2**2
                  ALLOC
  1 .isr_vector   000001fc  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003d5c  080081fc  080081fc  000081fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000028  0800bf58  0800bf58  0000bf58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0800bf80  0800bf80  0000bf80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0800bf88  0800bf88  0000bf88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800bf8c  0800bf8c  0000bf8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000000c  20000040  0800bf90  00010040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00003964  2000004c  0800bf9c  0001004c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200039b0  0800bf9c  000139b0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0001004c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00017396  00000000  00000000  0001007c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000031ab  00000000  00000000  00027412  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004511  00000000  00000000  0002a5bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000980  00000000  00000000  0002ead0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b0  00000000  00000000  0002f450  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029892  00000000  00000000  0002fd00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010763  00000000  00000000  00059592  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f44e2  00000000  00000000  00069cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015e1d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017c8  00000000  00000000  0015e254  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080081fc <__do_global_dtors_aux>:
 80081fc:	b510      	push	{r4, lr}
 80081fe:	4c05      	ldr	r4, [pc, #20]	; (8008214 <__do_global_dtors_aux+0x18>)
 8008200:	7823      	ldrb	r3, [r4, #0]
 8008202:	b933      	cbnz	r3, 8008212 <__do_global_dtors_aux+0x16>
 8008204:	4b04      	ldr	r3, [pc, #16]	; (8008218 <__do_global_dtors_aux+0x1c>)
 8008206:	b113      	cbz	r3, 800820e <__do_global_dtors_aux+0x12>
 8008208:	4804      	ldr	r0, [pc, #16]	; (800821c <__do_global_dtors_aux+0x20>)
 800820a:	f3af 8000 	nop.w
 800820e:	2301      	movs	r3, #1
 8008210:	7023      	strb	r3, [r4, #0]
 8008212:	bd10      	pop	{r4, pc}
 8008214:	2000004c 	.word	0x2000004c
 8008218:	00000000 	.word	0x00000000
 800821c:	0800bf40 	.word	0x0800bf40

08008220 <frame_dummy>:
 8008220:	b508      	push	{r3, lr}
 8008222:	4b03      	ldr	r3, [pc, #12]	; (8008230 <frame_dummy+0x10>)
 8008224:	b11b      	cbz	r3, 800822e <frame_dummy+0xe>
 8008226:	4903      	ldr	r1, [pc, #12]	; (8008234 <frame_dummy+0x14>)
 8008228:	4803      	ldr	r0, [pc, #12]	; (8008238 <frame_dummy+0x18>)
 800822a:	f3af 8000 	nop.w
 800822e:	bd08      	pop	{r3, pc}
 8008230:	00000000 	.word	0x00000000
 8008234:	20000050 	.word	0x20000050
 8008238:	0800bf40 	.word	0x0800bf40

0800823c <__aeabi_uldivmod>:
 800823c:	b953      	cbnz	r3, 8008254 <__aeabi_uldivmod+0x18>
 800823e:	b94a      	cbnz	r2, 8008254 <__aeabi_uldivmod+0x18>
 8008240:	2900      	cmp	r1, #0
 8008242:	bf08      	it	eq
 8008244:	2800      	cmpeq	r0, #0
 8008246:	bf1c      	itt	ne
 8008248:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800824c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008250:	f000 b972 	b.w	8008538 <__aeabi_idiv0>
 8008254:	f1ad 0c08 	sub.w	ip, sp, #8
 8008258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800825c:	f000 f806 	bl	800826c <__udivmoddi4>
 8008260:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008268:	b004      	add	sp, #16
 800826a:	4770      	bx	lr

0800826c <__udivmoddi4>:
 800826c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008270:	9e08      	ldr	r6, [sp, #32]
 8008272:	4604      	mov	r4, r0
 8008274:	4688      	mov	r8, r1
 8008276:	2b00      	cmp	r3, #0
 8008278:	d14b      	bne.n	8008312 <__udivmoddi4+0xa6>
 800827a:	428a      	cmp	r2, r1
 800827c:	4615      	mov	r5, r2
 800827e:	d967      	bls.n	8008350 <__udivmoddi4+0xe4>
 8008280:	fab2 f282 	clz	r2, r2
 8008284:	b14a      	cbz	r2, 800829a <__udivmoddi4+0x2e>
 8008286:	f1c2 0720 	rsb	r7, r2, #32
 800828a:	fa01 f302 	lsl.w	r3, r1, r2
 800828e:	fa20 f707 	lsr.w	r7, r0, r7
 8008292:	4095      	lsls	r5, r2
 8008294:	ea47 0803 	orr.w	r8, r7, r3
 8008298:	4094      	lsls	r4, r2
 800829a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800829e:	0c23      	lsrs	r3, r4, #16
 80082a0:	fbb8 f7fe 	udiv	r7, r8, lr
 80082a4:	fa1f fc85 	uxth.w	ip, r5
 80082a8:	fb0e 8817 	mls	r8, lr, r7, r8
 80082ac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80082b0:	fb07 f10c 	mul.w	r1, r7, ip
 80082b4:	4299      	cmp	r1, r3
 80082b6:	d909      	bls.n	80082cc <__udivmoddi4+0x60>
 80082b8:	18eb      	adds	r3, r5, r3
 80082ba:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80082be:	f080 811b 	bcs.w	80084f8 <__udivmoddi4+0x28c>
 80082c2:	4299      	cmp	r1, r3
 80082c4:	f240 8118 	bls.w	80084f8 <__udivmoddi4+0x28c>
 80082c8:	3f02      	subs	r7, #2
 80082ca:	442b      	add	r3, r5
 80082cc:	1a5b      	subs	r3, r3, r1
 80082ce:	b2a4      	uxth	r4, r4
 80082d0:	fbb3 f0fe 	udiv	r0, r3, lr
 80082d4:	fb0e 3310 	mls	r3, lr, r0, r3
 80082d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80082dc:	fb00 fc0c 	mul.w	ip, r0, ip
 80082e0:	45a4      	cmp	ip, r4
 80082e2:	d909      	bls.n	80082f8 <__udivmoddi4+0x8c>
 80082e4:	192c      	adds	r4, r5, r4
 80082e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80082ea:	f080 8107 	bcs.w	80084fc <__udivmoddi4+0x290>
 80082ee:	45a4      	cmp	ip, r4
 80082f0:	f240 8104 	bls.w	80084fc <__udivmoddi4+0x290>
 80082f4:	3802      	subs	r0, #2
 80082f6:	442c      	add	r4, r5
 80082f8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80082fc:	eba4 040c 	sub.w	r4, r4, ip
 8008300:	2700      	movs	r7, #0
 8008302:	b11e      	cbz	r6, 800830c <__udivmoddi4+0xa0>
 8008304:	40d4      	lsrs	r4, r2
 8008306:	2300      	movs	r3, #0
 8008308:	e9c6 4300 	strd	r4, r3, [r6]
 800830c:	4639      	mov	r1, r7
 800830e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008312:	428b      	cmp	r3, r1
 8008314:	d909      	bls.n	800832a <__udivmoddi4+0xbe>
 8008316:	2e00      	cmp	r6, #0
 8008318:	f000 80eb 	beq.w	80084f2 <__udivmoddi4+0x286>
 800831c:	2700      	movs	r7, #0
 800831e:	e9c6 0100 	strd	r0, r1, [r6]
 8008322:	4638      	mov	r0, r7
 8008324:	4639      	mov	r1, r7
 8008326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832a:	fab3 f783 	clz	r7, r3
 800832e:	2f00      	cmp	r7, #0
 8008330:	d147      	bne.n	80083c2 <__udivmoddi4+0x156>
 8008332:	428b      	cmp	r3, r1
 8008334:	d302      	bcc.n	800833c <__udivmoddi4+0xd0>
 8008336:	4282      	cmp	r2, r0
 8008338:	f200 80fa 	bhi.w	8008530 <__udivmoddi4+0x2c4>
 800833c:	1a84      	subs	r4, r0, r2
 800833e:	eb61 0303 	sbc.w	r3, r1, r3
 8008342:	2001      	movs	r0, #1
 8008344:	4698      	mov	r8, r3
 8008346:	2e00      	cmp	r6, #0
 8008348:	d0e0      	beq.n	800830c <__udivmoddi4+0xa0>
 800834a:	e9c6 4800 	strd	r4, r8, [r6]
 800834e:	e7dd      	b.n	800830c <__udivmoddi4+0xa0>
 8008350:	b902      	cbnz	r2, 8008354 <__udivmoddi4+0xe8>
 8008352:	deff      	udf	#255	; 0xff
 8008354:	fab2 f282 	clz	r2, r2
 8008358:	2a00      	cmp	r2, #0
 800835a:	f040 808f 	bne.w	800847c <__udivmoddi4+0x210>
 800835e:	1b49      	subs	r1, r1, r5
 8008360:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008364:	fa1f f885 	uxth.w	r8, r5
 8008368:	2701      	movs	r7, #1
 800836a:	fbb1 fcfe 	udiv	ip, r1, lr
 800836e:	0c23      	lsrs	r3, r4, #16
 8008370:	fb0e 111c 	mls	r1, lr, ip, r1
 8008374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008378:	fb08 f10c 	mul.w	r1, r8, ip
 800837c:	4299      	cmp	r1, r3
 800837e:	d907      	bls.n	8008390 <__udivmoddi4+0x124>
 8008380:	18eb      	adds	r3, r5, r3
 8008382:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8008386:	d202      	bcs.n	800838e <__udivmoddi4+0x122>
 8008388:	4299      	cmp	r1, r3
 800838a:	f200 80cd 	bhi.w	8008528 <__udivmoddi4+0x2bc>
 800838e:	4684      	mov	ip, r0
 8008390:	1a59      	subs	r1, r3, r1
 8008392:	b2a3      	uxth	r3, r4
 8008394:	fbb1 f0fe 	udiv	r0, r1, lr
 8008398:	fb0e 1410 	mls	r4, lr, r0, r1
 800839c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80083a0:	fb08 f800 	mul.w	r8, r8, r0
 80083a4:	45a0      	cmp	r8, r4
 80083a6:	d907      	bls.n	80083b8 <__udivmoddi4+0x14c>
 80083a8:	192c      	adds	r4, r5, r4
 80083aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80083ae:	d202      	bcs.n	80083b6 <__udivmoddi4+0x14a>
 80083b0:	45a0      	cmp	r8, r4
 80083b2:	f200 80b6 	bhi.w	8008522 <__udivmoddi4+0x2b6>
 80083b6:	4618      	mov	r0, r3
 80083b8:	eba4 0408 	sub.w	r4, r4, r8
 80083bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80083c0:	e79f      	b.n	8008302 <__udivmoddi4+0x96>
 80083c2:	f1c7 0c20 	rsb	ip, r7, #32
 80083c6:	40bb      	lsls	r3, r7
 80083c8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80083cc:	ea4e 0e03 	orr.w	lr, lr, r3
 80083d0:	fa01 f407 	lsl.w	r4, r1, r7
 80083d4:	fa20 f50c 	lsr.w	r5, r0, ip
 80083d8:	fa21 f30c 	lsr.w	r3, r1, ip
 80083dc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80083e0:	4325      	orrs	r5, r4
 80083e2:	fbb3 f9f8 	udiv	r9, r3, r8
 80083e6:	0c2c      	lsrs	r4, r5, #16
 80083e8:	fb08 3319 	mls	r3, r8, r9, r3
 80083ec:	fa1f fa8e 	uxth.w	sl, lr
 80083f0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80083f4:	fb09 f40a 	mul.w	r4, r9, sl
 80083f8:	429c      	cmp	r4, r3
 80083fa:	fa02 f207 	lsl.w	r2, r2, r7
 80083fe:	fa00 f107 	lsl.w	r1, r0, r7
 8008402:	d90b      	bls.n	800841c <__udivmoddi4+0x1b0>
 8008404:	eb1e 0303 	adds.w	r3, lr, r3
 8008408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800840c:	f080 8087 	bcs.w	800851e <__udivmoddi4+0x2b2>
 8008410:	429c      	cmp	r4, r3
 8008412:	f240 8084 	bls.w	800851e <__udivmoddi4+0x2b2>
 8008416:	f1a9 0902 	sub.w	r9, r9, #2
 800841a:	4473      	add	r3, lr
 800841c:	1b1b      	subs	r3, r3, r4
 800841e:	b2ad      	uxth	r5, r5
 8008420:	fbb3 f0f8 	udiv	r0, r3, r8
 8008424:	fb08 3310 	mls	r3, r8, r0, r3
 8008428:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800842c:	fb00 fa0a 	mul.w	sl, r0, sl
 8008430:	45a2      	cmp	sl, r4
 8008432:	d908      	bls.n	8008446 <__udivmoddi4+0x1da>
 8008434:	eb1e 0404 	adds.w	r4, lr, r4
 8008438:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800843c:	d26b      	bcs.n	8008516 <__udivmoddi4+0x2aa>
 800843e:	45a2      	cmp	sl, r4
 8008440:	d969      	bls.n	8008516 <__udivmoddi4+0x2aa>
 8008442:	3802      	subs	r0, #2
 8008444:	4474      	add	r4, lr
 8008446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800844a:	fba0 8902 	umull	r8, r9, r0, r2
 800844e:	eba4 040a 	sub.w	r4, r4, sl
 8008452:	454c      	cmp	r4, r9
 8008454:	46c2      	mov	sl, r8
 8008456:	464b      	mov	r3, r9
 8008458:	d354      	bcc.n	8008504 <__udivmoddi4+0x298>
 800845a:	d051      	beq.n	8008500 <__udivmoddi4+0x294>
 800845c:	2e00      	cmp	r6, #0
 800845e:	d069      	beq.n	8008534 <__udivmoddi4+0x2c8>
 8008460:	ebb1 050a 	subs.w	r5, r1, sl
 8008464:	eb64 0403 	sbc.w	r4, r4, r3
 8008468:	fa04 fc0c 	lsl.w	ip, r4, ip
 800846c:	40fd      	lsrs	r5, r7
 800846e:	40fc      	lsrs	r4, r7
 8008470:	ea4c 0505 	orr.w	r5, ip, r5
 8008474:	e9c6 5400 	strd	r5, r4, [r6]
 8008478:	2700      	movs	r7, #0
 800847a:	e747      	b.n	800830c <__udivmoddi4+0xa0>
 800847c:	f1c2 0320 	rsb	r3, r2, #32
 8008480:	fa20 f703 	lsr.w	r7, r0, r3
 8008484:	4095      	lsls	r5, r2
 8008486:	fa01 f002 	lsl.w	r0, r1, r2
 800848a:	fa21 f303 	lsr.w	r3, r1, r3
 800848e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008492:	4338      	orrs	r0, r7
 8008494:	0c01      	lsrs	r1, r0, #16
 8008496:	fbb3 f7fe 	udiv	r7, r3, lr
 800849a:	fa1f f885 	uxth.w	r8, r5
 800849e:	fb0e 3317 	mls	r3, lr, r7, r3
 80084a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80084a6:	fb07 f308 	mul.w	r3, r7, r8
 80084aa:	428b      	cmp	r3, r1
 80084ac:	fa04 f402 	lsl.w	r4, r4, r2
 80084b0:	d907      	bls.n	80084c2 <__udivmoddi4+0x256>
 80084b2:	1869      	adds	r1, r5, r1
 80084b4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80084b8:	d22f      	bcs.n	800851a <__udivmoddi4+0x2ae>
 80084ba:	428b      	cmp	r3, r1
 80084bc:	d92d      	bls.n	800851a <__udivmoddi4+0x2ae>
 80084be:	3f02      	subs	r7, #2
 80084c0:	4429      	add	r1, r5
 80084c2:	1acb      	subs	r3, r1, r3
 80084c4:	b281      	uxth	r1, r0
 80084c6:	fbb3 f0fe 	udiv	r0, r3, lr
 80084ca:	fb0e 3310 	mls	r3, lr, r0, r3
 80084ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80084d2:	fb00 f308 	mul.w	r3, r0, r8
 80084d6:	428b      	cmp	r3, r1
 80084d8:	d907      	bls.n	80084ea <__udivmoddi4+0x27e>
 80084da:	1869      	adds	r1, r5, r1
 80084dc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80084e0:	d217      	bcs.n	8008512 <__udivmoddi4+0x2a6>
 80084e2:	428b      	cmp	r3, r1
 80084e4:	d915      	bls.n	8008512 <__udivmoddi4+0x2a6>
 80084e6:	3802      	subs	r0, #2
 80084e8:	4429      	add	r1, r5
 80084ea:	1ac9      	subs	r1, r1, r3
 80084ec:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80084f0:	e73b      	b.n	800836a <__udivmoddi4+0xfe>
 80084f2:	4637      	mov	r7, r6
 80084f4:	4630      	mov	r0, r6
 80084f6:	e709      	b.n	800830c <__udivmoddi4+0xa0>
 80084f8:	4607      	mov	r7, r0
 80084fa:	e6e7      	b.n	80082cc <__udivmoddi4+0x60>
 80084fc:	4618      	mov	r0, r3
 80084fe:	e6fb      	b.n	80082f8 <__udivmoddi4+0x8c>
 8008500:	4541      	cmp	r1, r8
 8008502:	d2ab      	bcs.n	800845c <__udivmoddi4+0x1f0>
 8008504:	ebb8 0a02 	subs.w	sl, r8, r2
 8008508:	eb69 020e 	sbc.w	r2, r9, lr
 800850c:	3801      	subs	r0, #1
 800850e:	4613      	mov	r3, r2
 8008510:	e7a4      	b.n	800845c <__udivmoddi4+0x1f0>
 8008512:	4660      	mov	r0, ip
 8008514:	e7e9      	b.n	80084ea <__udivmoddi4+0x27e>
 8008516:	4618      	mov	r0, r3
 8008518:	e795      	b.n	8008446 <__udivmoddi4+0x1da>
 800851a:	4667      	mov	r7, ip
 800851c:	e7d1      	b.n	80084c2 <__udivmoddi4+0x256>
 800851e:	4681      	mov	r9, r0
 8008520:	e77c      	b.n	800841c <__udivmoddi4+0x1b0>
 8008522:	3802      	subs	r0, #2
 8008524:	442c      	add	r4, r5
 8008526:	e747      	b.n	80083b8 <__udivmoddi4+0x14c>
 8008528:	f1ac 0c02 	sub.w	ip, ip, #2
 800852c:	442b      	add	r3, r5
 800852e:	e72f      	b.n	8008390 <__udivmoddi4+0x124>
 8008530:	4638      	mov	r0, r7
 8008532:	e708      	b.n	8008346 <__udivmoddi4+0xda>
 8008534:	4637      	mov	r7, r6
 8008536:	e6e9      	b.n	800830c <__udivmoddi4+0xa0>

08008538 <__aeabi_idiv0>:
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop

0800853c <BootComRs232Init>:
** \brief     Initializes the UART communication interface.
** \return    none.
**
****************************************************************************************/
static void BootComRs232Init(void)
{
 800853c:	b508      	push	{r3, lr}
  /* Configure UART peripheral. */
  rs232Handle.Instance        = USART3;
 800853e:	4809      	ldr	r0, [pc, #36]	; (8008564 <BootComRs232Init+0x28>)
 8008540:	4b09      	ldr	r3, [pc, #36]	; (8008568 <BootComRs232Init+0x2c>)
 8008542:	6003      	str	r3, [r0, #0]
  rs232Handle.Init.BaudRate   = BOOT_COM_RS232_BAUDRATE;
 8008544:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8008548:	6043      	str	r3, [r0, #4]
  rs232Handle.Init.WordLength = UART_WORDLENGTH_8B;
 800854a:	2300      	movs	r3, #0
 800854c:	6083      	str	r3, [r0, #8]
  rs232Handle.Init.StopBits = UART_STOPBITS_1;
 800854e:	60c3      	str	r3, [r0, #12]
  rs232Handle.Init.Parity = UART_PARITY_NONE;
 8008550:	6103      	str	r3, [r0, #16]
  rs232Handle.Init.Mode = UART_MODE_TX_RX;
 8008552:	220c      	movs	r2, #12
 8008554:	6142      	str	r2, [r0, #20]
  rs232Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008556:	6183      	str	r3, [r0, #24]
  rs232Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8008558:	61c3      	str	r3, [r0, #28]
  rs232Handle.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800855a:	6203      	str	r3, [r0, #32]
  rs232Handle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800855c:	6243      	str	r3, [r0, #36]	; 0x24
  /* Initialize the UART peripheral. */
  HAL_UART_Init(&rs232Handle);
 800855e:	f001 ff6a 	bl	800a436 <HAL_UART_Init>
} /*** end of BootComRs232Init ***/
 8008562:	bd08      	pop	{r3, pc}
 8008564:	20000068 	.word	0x20000068
 8008568:	40004800 	.word	0x40004800

0800856c <Rs232ReceiveByte>:
** \param     data Pointer to byte where the data is to be stored.
** \return    1 if a byte was received, 0 otherwise.
**
****************************************************************************************/
static unsigned char Rs232ReceiveByte(unsigned char *data)
{
 800856c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef result;

  /* receive a byte in a non-blocking manner */
  result = HAL_UART_Receive(&rs232Handle, data, 1, 0);
 800856e:	2300      	movs	r3, #0
 8008570:	2201      	movs	r2, #1
 8008572:	4601      	mov	r1, r0
 8008574:	4803      	ldr	r0, [pc, #12]	; (8008584 <Rs232ReceiveByte+0x18>)
 8008576:	f001 fc9d 	bl	8009eb4 <HAL_UART_Receive>
  /* process the result */
  if (result == HAL_OK)
 800857a:	b108      	cbz	r0, 8008580 <Rs232ReceiveByte+0x14>
  {
    /* success */
    return 1;
  }
  /* error occurred */
  return 0;
 800857c:	2000      	movs	r0, #0
} /*** end of Rs232ReceiveByte ***/
 800857e:	bd08      	pop	{r3, pc}
    return 1;
 8008580:	2001      	movs	r0, #1
 8008582:	e7fc      	b.n	800857e <Rs232ReceiveByte+0x12>
 8008584:	20000068 	.word	0x20000068

08008588 <BootComInit>:
{
 8008588:	b508      	push	{r3, lr}
  BootComRs232Init();
 800858a:	f7ff ffd7 	bl	800853c <BootComRs232Init>
} /*** end of BootComInit ***/
 800858e:	bd08      	pop	{r3, pc}

08008590 <BootActivate>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008590:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008594:	4905      	ldr	r1, [pc, #20]	; (80085ac <BootActivate+0x1c>)
 8008596:	68ca      	ldr	r2, [r1, #12]
 8008598:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800859c:	4b04      	ldr	r3, [pc, #16]	; (80085b0 <BootActivate+0x20>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	60cb      	str	r3, [r1, #12]
 80085a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80085a6:	bf00      	nop
 80085a8:	e7fd      	b.n	80085a6 <BootActivate+0x16>
 80085aa:	bf00      	nop
 80085ac:	e000ed00 	.word	0xe000ed00
 80085b0:	05fa0004 	.word	0x05fa0004

080085b4 <BootComRs232CheckActivationRequest>:
{
 80085b4:	b508      	push	{r3, lr}
  if (xcpCtoRxInProgress == 0)
 80085b6:	4b21      	ldr	r3, [pc, #132]	; (800863c <BootComRs232CheckActivationRequest+0x88>)
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	b9b3      	cbnz	r3, 80085ea <BootComRs232CheckActivationRequest+0x36>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == 1)
 80085bc:	4820      	ldr	r0, [pc, #128]	; (8008640 <BootComRs232CheckActivationRequest+0x8c>)
 80085be:	f7ff ffd5 	bl	800856c <Rs232ReceiveByte>
 80085c2:	2801      	cmp	r0, #1
 80085c4:	d000      	beq.n	80085c8 <BootComRs232CheckActivationRequest+0x14>
} /*** end of BootComRs232CheckActivationRequest ***/
 80085c6:	bd08      	pop	{r3, pc}
      if ( (xcpCtoReqPacket[0] > 0) &&
 80085c8:	4b1d      	ldr	r3, [pc, #116]	; (8008640 <BootComRs232CheckActivationRequest+0x8c>)
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	3b01      	subs	r3, #1
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b3f      	cmp	r3, #63	; 0x3f
 80085d2:	d8f8      	bhi.n	80085c6 <BootComRs232CheckActivationRequest+0x12>
        xcpCtoRxStartTime = TimerGet();
 80085d4:	f000 fb0a 	bl	8008bec <TimerGet>
 80085d8:	4b1a      	ldr	r3, [pc, #104]	; (8008644 <BootComRs232CheckActivationRequest+0x90>)
 80085da:	6018      	str	r0, [r3, #0]
        xcpCtoRxInProgress = 1;
 80085dc:	4b17      	ldr	r3, [pc, #92]	; (800863c <BootComRs232CheckActivationRequest+0x88>)
 80085de:	2201      	movs	r2, #1
 80085e0:	701a      	strb	r2, [r3, #0]
        xcpCtoRxLength = 0;
 80085e2:	4b19      	ldr	r3, [pc, #100]	; (8008648 <BootComRs232CheckActivationRequest+0x94>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	701a      	strb	r2, [r3, #0]
 80085e8:	e7ed      	b.n	80085c6 <BootComRs232CheckActivationRequest+0x12>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == 1)
 80085ea:	4b17      	ldr	r3, [pc, #92]	; (8008648 <BootComRs232CheckActivationRequest+0x94>)
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	3301      	adds	r3, #1
 80085f0:	4813      	ldr	r0, [pc, #76]	; (8008640 <BootComRs232CheckActivationRequest+0x8c>)
 80085f2:	4418      	add	r0, r3
 80085f4:	f7ff ffba 	bl	800856c <Rs232ReceiveByte>
 80085f8:	2801      	cmp	r0, #1
 80085fa:	d113      	bne.n	8008624 <BootComRs232CheckActivationRequest+0x70>
      xcpCtoRxLength++;
 80085fc:	4a12      	ldr	r2, [pc, #72]	; (8008648 <BootComRs232CheckActivationRequest+0x94>)
 80085fe:	7813      	ldrb	r3, [r2, #0]
 8008600:	3301      	adds	r3, #1
 8008602:	b2db      	uxtb	r3, r3
 8008604:	7013      	strb	r3, [r2, #0]
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 8008606:	4a0e      	ldr	r2, [pc, #56]	; (8008640 <BootComRs232CheckActivationRequest+0x8c>)
 8008608:	7812      	ldrb	r2, [r2, #0]
 800860a:	4293      	cmp	r3, r2
 800860c:	d1db      	bne.n	80085c6 <BootComRs232CheckActivationRequest+0x12>
        xcpCtoRxInProgress = 0;
 800860e:	4a0b      	ldr	r2, [pc, #44]	; (800863c <BootComRs232CheckActivationRequest+0x88>)
 8008610:	2100      	movs	r1, #0
 8008612:	7011      	strb	r1, [r2, #0]
        if ((xcpCtoReqPacket[1] == 0xff) && (xcpCtoRxLength == 2))
 8008614:	4a0a      	ldr	r2, [pc, #40]	; (8008640 <BootComRs232CheckActivationRequest+0x8c>)
 8008616:	7852      	ldrb	r2, [r2, #1]
 8008618:	2aff      	cmp	r2, #255	; 0xff
 800861a:	d1d4      	bne.n	80085c6 <BootComRs232CheckActivationRequest+0x12>
 800861c:	2b02      	cmp	r3, #2
 800861e:	d1d2      	bne.n	80085c6 <BootComRs232CheckActivationRequest+0x12>
          BootActivate();
 8008620:	f7ff ffb6 	bl	8008590 <BootActivate>
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 8008624:	f000 fae2 	bl	8008bec <TimerGet>
 8008628:	4b06      	ldr	r3, [pc, #24]	; (8008644 <BootComRs232CheckActivationRequest+0x90>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3364      	adds	r3, #100	; 0x64
 800862e:	4298      	cmp	r0, r3
 8008630:	d9c9      	bls.n	80085c6 <BootComRs232CheckActivationRequest+0x12>
        xcpCtoRxInProgress = 0;
 8008632:	4b02      	ldr	r3, [pc, #8]	; (800863c <BootComRs232CheckActivationRequest+0x88>)
 8008634:	2200      	movs	r2, #0
 8008636:	701a      	strb	r2, [r3, #0]
} /*** end of BootComRs232CheckActivationRequest ***/
 8008638:	e7c5      	b.n	80085c6 <BootComRs232CheckActivationRequest+0x12>
 800863a:	bf00      	nop
 800863c:	20000119 	.word	0x20000119
 8008640:	200000d8 	.word	0x200000d8
 8008644:	2000011c 	.word	0x2000011c
 8008648:	2000011a 	.word	0x2000011a

0800864c <BootComCheckActivationRequest>:
{
 800864c:	b508      	push	{r3, lr}
  BootComRs232CheckActivationRequest();
 800864e:	f7ff ffb1 	bl	80085b4 <BootComRs232CheckActivationRequest>
} /*** end of BootComCheckActivationRequest ***/
 8008652:	bd08      	pop	{r3, pc}

08008654 <LedInit>:
** \brief     Initializes the LED. 
** \return    none.
**
****************************************************************************************/
void LedInit(void)
{
 8008654:	b508      	push	{r3, lr}
  /* Note that the initialization of the LED GPIO pin is done in HAL_MspInit(). All that
   * is left to do here is to make sure the LED is turned off after initialization.
   */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8008656:	2200      	movs	r2, #0
 8008658:	2180      	movs	r1, #128	; 0x80
 800865a:	4802      	ldr	r0, [pc, #8]	; (8008664 <LedInit+0x10>)
 800865c:	f001 f886 	bl	800976c <HAL_GPIO_WritePin>
} /*** end of LedInit ***/
 8008660:	bd08      	pop	{r3, pc}
 8008662:	bf00      	nop
 8008664:	40020400 	.word	0x40020400

08008668 <LedToggle>:
** \brief     Toggles the LED at a fixed time interval.
** \return    none.
**
****************************************************************************************/
void LedToggle(void)
{
 8008668:	b510      	push	{r4, lr}
  static unsigned char led_toggle_state = 0;
  static unsigned long timer_counter_last = 0;
  unsigned long timer_counter_now;

  /* check if toggle interval time passed */
  timer_counter_now = TimerGet();
 800866a:	f000 fabf 	bl	8008bec <TimerGet>
  if ( (timer_counter_now - timer_counter_last) < LED_TOGGLE_MS)
 800866e:	4b0d      	ldr	r3, [pc, #52]	; (80086a4 <LedToggle+0x3c>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	1ac3      	subs	r3, r0, r3
 8008674:	2b31      	cmp	r3, #49	; 0x31
 8008676:	d90c      	bls.n	8008692 <LedToggle+0x2a>
 8008678:	4604      	mov	r4, r0
    /* not yet time to toggle */
    return;
  }

  /* determine toggle action */
  if (led_toggle_state == 0)
 800867a:	4b0b      	ldr	r3, [pc, #44]	; (80086a8 <LedToggle+0x40>)
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	b94b      	cbnz	r3, 8008694 <LedToggle+0x2c>
  {
    led_toggle_state = 1;
 8008680:	2201      	movs	r2, #1
 8008682:	4b09      	ldr	r3, [pc, #36]	; (80086a8 <LedToggle+0x40>)
 8008684:	701a      	strb	r2, [r3, #0]
    /* turn the LED on */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008686:	2180      	movs	r1, #128	; 0x80
 8008688:	4808      	ldr	r0, [pc, #32]	; (80086ac <LedToggle+0x44>)
 800868a:	f001 f86f 	bl	800976c <HAL_GPIO_WritePin>
    /* turn the LED off */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
  }

  /* store toggle time to determine next toggle interval */
  timer_counter_last = timer_counter_now;
 800868e:	4b05      	ldr	r3, [pc, #20]	; (80086a4 <LedToggle+0x3c>)
 8008690:	601c      	str	r4, [r3, #0]
} /*** end of LedToggle ***/
 8008692:	bd10      	pop	{r4, pc}
    led_toggle_state = 0;
 8008694:	2200      	movs	r2, #0
 8008696:	4b04      	ldr	r3, [pc, #16]	; (80086a8 <LedToggle+0x40>)
 8008698:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800869a:	2180      	movs	r1, #128	; 0x80
 800869c:	4803      	ldr	r0, [pc, #12]	; (80086ac <LedToggle+0x44>)
 800869e:	f001 f865 	bl	800976c <HAL_GPIO_WritePin>
 80086a2:	e7f4      	b.n	800868e <LedToggle+0x26>
 80086a4:	20000124 	.word	0x20000124
 80086a8:	20000120 	.word	0x20000120
 80086ac:	40020400 	.word	0x40020400

080086b0 <VectorBase_Config>:
   * c-startup code.
   */
  extern const unsigned long g_pfnVectors[];

  /* Remap the vector table to where the vector table is located for this program. */
  SCB->VTOR = (unsigned long)&g_pfnVectors[0];
 80086b0:	4a01      	ldr	r2, [pc, #4]	; (80086b8 <VectorBase_Config+0x8>)
 80086b2:	4b02      	ldr	r3, [pc, #8]	; (80086bc <VectorBase_Config+0xc>)
 80086b4:	609a      	str	r2, [r3, #8]
} /*** end of VectorBase_Config ***/
 80086b6:	4770      	bx	lr
 80086b8:	08008000 	.word	0x08008000
 80086bc:	e000ed00 	.word	0xe000ed00

080086c0 <SystemClock_Config>:
**            the system clock.
** \return    none.
**
****************************************************************************************/
static void SystemClock_Config(void)
{
 80086c0:	b500      	push	{lr}
 80086c2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  /* Configure the main internal regulator output voltage. */
  __HAL_RCC_PWR_CLK_ENABLE();
 80086c4:	4b21      	ldr	r3, [pc, #132]	; (800874c <SystemClock_Config+0x8c>)
 80086c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80086cc:	641a      	str	r2, [r3, #64]	; 0x40
 80086ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086d4:	9300      	str	r3, [sp, #0]
 80086d6:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80086d8:	4b1d      	ldr	r3, [pc, #116]	; (8008750 <SystemClock_Config+0x90>)
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80086e8:	9301      	str	r3, [sp, #4]
 80086ea:	9b01      	ldr	r3, [sp, #4]

  /* Initializes the CPU, AHB and APB busses clocks. */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80086ec:	2301      	movs	r3, #1
 80086ee:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80086f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80086f4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80086f6:	2302      	movs	r3, #2
 80086f8:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80086fa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80086fe:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008700:	2208      	movs	r2, #8
 8008702:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8008704:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8008708:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800870a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800870c:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800870e:	a807      	add	r0, sp, #28
 8008710:	f001 f870 	bl	80097f4 <HAL_RCC_OscConfig>
 8008714:	b100      	cbz	r0, 8008718 <SystemClock_Config+0x58>
 8008716:	e7fe      	b.n	8008716 <SystemClock_Config+0x56>
     */
    while(1);
  }

  /* Activate the Over-Drive mode. */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008718:	f001 f82e 	bl	8009778 <HAL_PWREx_EnableOverDrive>
 800871c:	b100      	cbz	r0, 8008720 <SystemClock_Config+0x60>
 800871e:	e7fe      	b.n	800871e <SystemClock_Config+0x5e>
     */
    while(1);
  }

  /* Initializes the CPU, AHB and APB busses clocks. */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8008720:	230f      	movs	r3, #15
 8008722:	9302      	str	r3, [sp, #8]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008724:	2302      	movs	r3, #2
 8008726:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008728:	2300      	movs	r3, #0
 800872a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800872c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008730:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008736:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008738:	2107      	movs	r1, #7
 800873a:	a802      	add	r0, sp, #8
 800873c:	f001 fab0 	bl	8009ca0 <HAL_RCC_ClockConfig>
 8008740:	b100      	cbz	r0, 8008744 <SystemClock_Config+0x84>
 8008742:	e7fe      	b.n	8008742 <SystemClock_Config+0x82>
    /* Clock configuration incorrect or hardware failure. Hang the system to prevent
     * damage.
     */
    while(1);
  }
} /*** end of SystemClock_Config ***/
 8008744:	b015      	add	sp, #84	; 0x54
 8008746:	f85d fb04 	ldr.w	pc, [sp], #4
 800874a:	bf00      	nop
 800874c:	40023800 	.word	0x40023800
 8008750:	40007000 	.word	0x40007000

08008754 <Init>:
{
 8008754:	b508      	push	{r3, lr}
  VectorBase_Config();
 8008756:	f7ff ffab 	bl	80086b0 <VectorBase_Config>
  HAL_Init();
 800875a:	f000 fa77 	bl	8008c4c <HAL_Init>
  SystemClock_Config();
 800875e:	f7ff ffaf 	bl	80086c0 <SystemClock_Config>
  TimerInit();
 8008762:	f000 fa2d 	bl	8008bc0 <TimerInit>
  LedInit();
 8008766:	f7ff ff75 	bl	8008654 <LedInit>
} /*** end of Init ***/
 800876a:	bd08      	pop	{r3, pc}

0800876c <main>:
{
 800876c:	b508      	push	{r3, lr}
  Init();
 800876e:	f7ff fff1 	bl	8008754 <Init>
  SharedParamsInit();
 8008772:	f000 f9cf 	bl	8008b14 <SharedParamsInit>
  NetInit();
 8008776:	f000 f8a7 	bl	80088c8 <NetInit>
  BootComInit();
 800877a:	f7ff ff05 	bl	8008588 <BootComInit>
  SharedParamsWriteByIndex(0, 0);
 800877e:	2100      	movs	r1, #0
 8008780:	4608      	mov	r0, r1
 8008782:	f000 f9df 	bl	8008b44 <SharedParamsWriteByIndex>
    LedToggle();
 8008786:	f7ff ff6f 	bl	8008668 <LedToggle>
    NetTask();
 800878a:	f000 f8f7 	bl	800897c <NetTask>
    BootComCheckActivationRequest();
 800878e:	f7ff ff5d 	bl	800864c <BootComCheckActivationRequest>
 8008792:	e7f8      	b.n	8008786 <main+0x1a>

08008794 <HAL_MspInit>:
**            interrupt).
** \return    none.
**
****************************************************************************************/
void HAL_MspInit(void)
{
 8008794:	b510      	push	{r4, lr}
 8008796:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Power and SYSCFG clock enable. */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008798:	4b48      	ldr	r3, [pc, #288]	; (80088bc <HAL_MspInit+0x128>)
 800879a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800879c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80087a0:	641a      	str	r2, [r3, #64]	; 0x40
 80087a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087a4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80087a8:	9201      	str	r2, [sp, #4]
 80087aa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087b2:	645a      	str	r2, [r3, #68]	; 0x44
 80087b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087b6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80087ba:	9202      	str	r2, [sp, #8]
 80087bc:	9a02      	ldr	r2, [sp, #8]
  /* GPIO ports clock enable. */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80087be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087c0:	f042 0201 	orr.w	r2, r2, #1
 80087c4:	631a      	str	r2, [r3, #48]	; 0x30
 80087c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087c8:	f002 0201 	and.w	r2, r2, #1
 80087cc:	9203      	str	r2, [sp, #12]
 80087ce:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80087d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087d2:	f042 0202 	orr.w	r2, r2, #2
 80087d6:	631a      	str	r2, [r3, #48]	; 0x30
 80087d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087da:	f002 0202 	and.w	r2, r2, #2
 80087de:	9204      	str	r2, [sp, #16]
 80087e0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80087e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087e4:	f042 0204 	orr.w	r2, r2, #4
 80087e8:	631a      	str	r2, [r3, #48]	; 0x30
 80087ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087ec:	f002 0204 	and.w	r2, r2, #4
 80087f0:	9205      	str	r2, [sp, #20]
 80087f2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80087f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087f6:	f042 0208 	orr.w	r2, r2, #8
 80087fa:	631a      	str	r2, [r3, #48]	; 0x30
 80087fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087fe:	f002 0208 	and.w	r2, r2, #8
 8008802:	9206      	str	r2, [sp, #24]
 8008804:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800880c:	631a      	str	r2, [r3, #48]	; 0x30
 800880e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008810:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008814:	9207      	str	r2, [sp, #28]
 8008816:	9a07      	ldr	r2, [sp, #28]
#if (BOOT_COM_RS232_ENABLE > 0)
  /* Peripheral clock enable. */
  __HAL_RCC_USART3_CLK_ENABLE();
 8008818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800881a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800881e:	641a      	str	r2, [r3, #64]	; 0x40
 8008820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008826:	9308      	str	r3, [sp, #32]
 8008828:	9b08      	ldr	r3, [sp, #32]
#endif /* BOOT_COM_RS232_ENABLE > 0 */

  /* Set priority grouping. */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800882a:	2003      	movs	r0, #3
 800882c:	f000 fa40 	bl	8008cb0 <HAL_NVIC_SetPriorityGrouping>
  /* MemoryManagement_IRQn interrupt configuration. */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8008830:	2200      	movs	r2, #0
 8008832:	4611      	mov	r1, r2
 8008834:	f06f 000b 	mvn.w	r0, #11
 8008838:	f000 fa4c 	bl	8008cd4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration. */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800883c:	2200      	movs	r2, #0
 800883e:	4611      	mov	r1, r2
 8008840:	f06f 000a 	mvn.w	r0, #10
 8008844:	f000 fa46 	bl	8008cd4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration. */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8008848:	2200      	movs	r2, #0
 800884a:	4611      	mov	r1, r2
 800884c:	f06f 0009 	mvn.w	r0, #9
 8008850:	f000 fa40 	bl	8008cd4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration. */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8008854:	2200      	movs	r2, #0
 8008856:	4611      	mov	r1, r2
 8008858:	f06f 0004 	mvn.w	r0, #4
 800885c:	f000 fa3a 	bl	8008cd4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration. */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8008860:	2200      	movs	r2, #0
 8008862:	4611      	mov	r1, r2
 8008864:	f06f 0003 	mvn.w	r0, #3
 8008868:	f000 fa34 	bl	8008cd4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration. */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800886c:	2200      	movs	r2, #0
 800886e:	4611      	mov	r1, r2
 8008870:	f06f 0001 	mvn.w	r0, #1
 8008874:	f000 fa2e 	bl	8008cd4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration. */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8008878:	2200      	movs	r2, #0
 800887a:	4611      	mov	r1, r2
 800887c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008880:	f000 fa28 	bl	8008cd4 <HAL_NVIC_SetPriority>

  /* Configure the LED GPIO pin. */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008884:	2380      	movs	r3, #128	; 0x80
 8008886:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008888:	2301      	movs	r3, #1
 800888a:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800888c:	2400      	movs	r4, #0
 800888e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008890:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008892:	a909      	add	r1, sp, #36	; 0x24
 8008894:	480a      	ldr	r0, [pc, #40]	; (80088c0 <HAL_MspInit+0x12c>)
 8008896:	f000 fe79 	bl	800958c <HAL_GPIO_Init>
#if (BOOT_COM_RS232_ENABLE > 0)
  /* UART TX and RX GPIO pin configuration. */
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800889a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800889e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088a0:	2302      	movs	r3, #2
 80088a2:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088a4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088a6:	2303      	movs	r3, #3
 80088a8:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80088aa:	2307      	movs	r3, #7
 80088ac:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80088ae:	a909      	add	r1, sp, #36	; 0x24
 80088b0:	4804      	ldr	r0, [pc, #16]	; (80088c4 <HAL_MspInit+0x130>)
 80088b2:	f000 fe6b 	bl	800958c <HAL_GPIO_Init>
#endif /* BOOT_COM_RS232_ENABLE > 0 */
} /*** end of HAL_MspInit ***/
 80088b6:	b00e      	add	sp, #56	; 0x38
 80088b8:	bd10      	pop	{r4, pc}
 80088ba:	bf00      	nop
 80088bc:	40023800 	.word	0x40023800
 80088c0:	40020400 	.word	0x40020400
 80088c4:	40020c00 	.word	0x40020c00

080088c8 <NetInit>:
** \brief     Initializes the TCP/IP network communication interface.
** \return    none.
**
****************************************************************************************/
void NetInit(void)
{
 80088c8:	b510      	push	{r4, lr}
  uip_ipaddr_t ipaddr;

  /* initialize the network device */
  netdev_init();
 80088ca:	f001 fe71 	bl	800a5b0 <netdev_init>
  /* initialize the timer variables */
  periodicTimerTimeOut = TimerGet() + NET_UIP_PERIODIC_TIMER_MS;
 80088ce:	f000 f98d 	bl	8008bec <TimerGet>
 80088d2:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 80088d6:	4b13      	ldr	r3, [pc, #76]	; (8008924 <NetInit+0x5c>)
 80088d8:	6018      	str	r0, [r3, #0]
  ARPTimerTimeOut = TimerGet() + NET_UIP_ARP_TIMER_MS;
 80088da:	f000 f987 	bl	8008bec <TimerGet>
 80088de:	f242 7310 	movw	r3, #10000	; 0x2710
 80088e2:	4403      	add	r3, r0
 80088e4:	4a10      	ldr	r2, [pc, #64]	; (8008928 <NetInit+0x60>)
 80088e6:	6013      	str	r3, [r2, #0]
  /* initialize the uIP TCP/IP stack. */
  uip_init();
 80088e8:	f002 fa0c 	bl	800ad04 <uip_init>
             BOOT_COM_NET_GATEWAY3);
  uip_setdraddr(ipaddr);
#else
  /* set the IP address */
  uip_ipaddr(ipaddr, 0, 0, 0, 0);
  uip_sethostaddr(ipaddr);
 80088ec:	4a0f      	ldr	r2, [pc, #60]	; (800892c <NetInit+0x64>)
 80088ee:	2300      	movs	r3, #0
 80088f0:	8013      	strh	r3, [r2, #0]
 80088f2:	8053      	strh	r3, [r2, #2]
  /* set the network mask */
  uip_ipaddr(ipaddr, 0, 0, 0, 0);
  uip_setnetmask(ipaddr);
 80088f4:	4a0e      	ldr	r2, [pc, #56]	; (8008930 <NetInit+0x68>)
 80088f6:	8013      	strh	r3, [r2, #0]
 80088f8:	8053      	strh	r3, [r2, #2]
  /* set the gateway address */
  uip_ipaddr(ipaddr, 0, 0, 0, 0);
  uip_setdraddr(ipaddr);
 80088fa:	4a0e      	ldr	r2, [pc, #56]	; (8008934 <NetInit+0x6c>)
 80088fc:	8013      	strh	r3, [r2, #0]
 80088fe:	8053      	strh	r3, [r2, #2]
#endif
  /* start listening on the configured port for XCP transfers on TCP/IP */
  uip_listen(HTONS(BOOT_COM_NET_PORT));
 8008900:	f64e 0003 	movw	r0, #59395	; 0xe803
 8008904:	f002 fa3e 	bl	800ad84 <uip_listen>
  /* initialize the MAC and set the MAC address */
  netdev_init_mac();  
 8008908:	f001 fe8e 	bl	800a628 <netdev_init_mac>

#if (BOOT_COM_NET_DHCP_ENABLE > 0)
    /* initialize the DHCP client application and send the initial request. */
    netdev_get_mac(&macAddress.addr[0]);
 800890c:	4c0a      	ldr	r4, [pc, #40]	; (8008938 <NetInit+0x70>)
 800890e:	4620      	mov	r0, r4
 8008910:	f001 fe9e 	bl	800a650 <netdev_get_mac>
    dhcpc_init(&macAddress.addr[0], 6);
 8008914:	2106      	movs	r1, #6
 8008916:	4620      	mov	r0, r4
 8008918:	f002 f82c 	bl	800a974 <dhcpc_init>
    dhcpc_request();
 800891c:	f002 f848 	bl	800a9b0 <dhcpc_request>
#endif
} /*** end of NetInit ***/
 8008920:	bd10      	pop	{r4, pc}
 8008922:	bf00      	nop
 8008924:	20000134 	.word	0x20000134
 8008928:	20000128 	.word	0x20000128
 800892c:	20003328 	.word	0x20003328
 8008930:	20003324 	.word	0x20003324
 8008934:	20003320 	.word	0x20003320
 8008938:	2000012c 	.word	0x2000012c

0800893c <NetApp>:
**            be activated.
** \return    none.
**
****************************************************************************************/
void NetApp(void)
{
 800893c:	b508      	push	{r3, lr}
  unsigned char *newDataPtr;
  unsigned short newDataLen;

  if (uip_connected()) 
 800893e:	4b0c      	ldr	r3, [pc, #48]	; (8008970 <NetApp+0x34>)
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008946:	d109      	bne.n	800895c <NetApp+0x20>
  {
    return;
  }

  if (uip_newdata()) 
 8008948:	f013 0f02 	tst.w	r3, #2
 800894c:	d006      	beq.n	800895c <NetApp+0x20>
  {
    /* a new XCP command was received. check if this is the connect command and in this
     * case activate the bootloader. with XCP on TCP/IP the first 4 bytes contain a 
     * counter value in which we are not really interested.
     */
    newDataPtr = uip_appdata;
 800894e:	4b09      	ldr	r3, [pc, #36]	; (8008974 <NetApp+0x38>)
 8008950:	681b      	ldr	r3, [r3, #0]
    newDataPtr += 4;
    newDataLen = uip_datalen() - 4;
 8008952:	4a09      	ldr	r2, [pc, #36]	; (8008978 <NetApp+0x3c>)
 8008954:	8812      	ldrh	r2, [r2, #0]
    /* check if this was an XCP CONNECT command */
    if ((newDataPtr[0] == 0xff) && (newDataLen == 2))
 8008956:	791b      	ldrb	r3, [r3, #4]
 8008958:	2bff      	cmp	r3, #255	; 0xff
 800895a:	d000      	beq.n	800895e <NetApp+0x22>
      SharedParamsWriteByIndex(0, 1);
      /* connection request received so start the bootloader */
      BootActivate();
    }
  }
} /*** end of NetApp ***/
 800895c:	bd08      	pop	{r3, pc}
    if ((newDataPtr[0] == 0xff) && (newDataLen == 2))
 800895e:	2a06      	cmp	r2, #6
 8008960:	d1fc      	bne.n	800895c <NetApp+0x20>
      SharedParamsWriteByIndex(0, 1);
 8008962:	2101      	movs	r1, #1
 8008964:	2000      	movs	r0, #0
 8008966:	f000 f8ed 	bl	8008b44 <SharedParamsWriteByIndex>
      BootActivate();
 800896a:	f7ff fe11 	bl	8008590 <BootActivate>
 800896e:	e7f5      	b.n	800895c <NetApp+0x20>
 8008970:	200032ec 	.word	0x200032ec
 8008974:	200032f4 	.word	0x200032f4
 8008978:	200032e0 	.word	0x200032e0

0800897c <NetTask>:
** \brief     Runs the TCP/IP server task.
** \return    none.
**
****************************************************************************************/
void NetTask(void)
{
 800897c:	b510      	push	{r4, lr}
  unsigned long connection;
  unsigned long packetLen;
  
  /* check for an RX packet and read it. */
  packetLen = netdev_read();
 800897e:	f001 fe77 	bl	800a670 <netdev_read>
  if (packetLen > 0)
 8008982:	b9b0      	cbnz	r0, 80089b2 <NetTask+0x36>
      }
    }
  }

  /* process TCP/IP Periodic Timer here. */
  if (TimerGet() >= periodicTimerTimeOut)
 8008984:	f000 f932 	bl	8008bec <TimerGet>
 8008988:	4b3a      	ldr	r3, [pc, #232]	; (8008a74 <NetTask+0xf8>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4298      	cmp	r0, r3
 800898e:	d309      	bcc.n	80089a4 <NetTask+0x28>
  {
    periodicTimerTimeOut += NET_UIP_PERIODIC_TIMER_MS;
 8008990:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008994:	4a37      	ldr	r2, [pc, #220]	; (8008a74 <NetTask+0xf8>)
 8008996:	6013      	str	r3, [r2, #0]
    for (connection = 0; connection < UIP_CONNS; connection++)
 8008998:	2400      	movs	r4, #0
 800899a:	2c00      	cmp	r4, #0
 800899c:	d036      	beq.n	8008a0c <NetTask+0x90>
        uip_len = 0;
      }
    }

#if UIP_UDP
    for (connection = 0; connection < UIP_UDP_CONNS; connection++)
 800899e:	2400      	movs	r4, #0
 80089a0:	2c00      	cmp	r4, #0
 80089a2:	d04a      	beq.n	8008a3a <NetTask+0xbe>
    }
#endif
  }

  /* process ARP Timer here. */
  if (TimerGet() >= ARPTimerTimeOut)
 80089a4:	f000 f922 	bl	8008bec <TimerGet>
 80089a8:	4b33      	ldr	r3, [pc, #204]	; (8008a78 <NetTask+0xfc>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4298      	cmp	r0, r3
 80089ae:	d259      	bcs.n	8008a64 <NetTask+0xe8>
  {
    ARPTimerTimeOut += NET_UIP_ARP_TIMER_MS;
    uip_arp_timer();
  }
} /*** end of NetServerTask ***/
 80089b0:	bd10      	pop	{r4, pc}
    uip_len = (unsigned short)packetLen;
 80089b2:	4a32      	ldr	r2, [pc, #200]	; (8008a7c <NetTask+0x100>)
 80089b4:	8010      	strh	r0, [r2, #0]
    if (NET_UIP_HEADER_BUF->type == htons(UIP_ETHTYPE_IP))
 80089b6:	4b32      	ldr	r3, [pc, #200]	; (8008a80 <NetTask+0x104>)
 80089b8:	899c      	ldrh	r4, [r3, #12]
 80089ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80089be:	f002 f9f9 	bl	800adb4 <htons>
 80089c2:	4284      	cmp	r4, r0
 80089c4:	d013      	beq.n	80089ee <NetTask+0x72>
    else if (NET_UIP_HEADER_BUF->type == htons(UIP_ETHTYPE_ARP))
 80089c6:	4b2e      	ldr	r3, [pc, #184]	; (8008a80 <NetTask+0x104>)
 80089c8:	899c      	ldrh	r4, [r3, #12]
 80089ca:	f640 0006 	movw	r0, #2054	; 0x806
 80089ce:	f002 f9f1 	bl	800adb4 <htons>
 80089d2:	4284      	cmp	r4, r0
 80089d4:	d1d6      	bne.n	8008984 <NetTask+0x8>
      uip_arp_arpin();
 80089d6:	f003 f93f 	bl	800bc58 <uip_arp_arpin>
      if (uip_len > 0)
 80089da:	4b28      	ldr	r3, [pc, #160]	; (8008a7c <NetTask+0x100>)
 80089dc:	881b      	ldrh	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d0d0      	beq.n	8008984 <NetTask+0x8>
        netdev_send();
 80089e2:	f001 fe6f 	bl	800a6c4 <netdev_send>
        uip_len = 0;
 80089e6:	4b25      	ldr	r3, [pc, #148]	; (8008a7c <NetTask+0x100>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	801a      	strh	r2, [r3, #0]
 80089ec:	e7ca      	b.n	8008984 <NetTask+0x8>
      uip_input();
 80089ee:	2001      	movs	r0, #1
 80089f0:	f002 fa1a 	bl	800ae28 <uip_process>
      if (uip_len > 0)
 80089f4:	4b21      	ldr	r3, [pc, #132]	; (8008a7c <NetTask+0x100>)
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0c3      	beq.n	8008984 <NetTask+0x8>
        uip_arp_out();
 80089fc:	f003 f99c 	bl	800bd38 <uip_arp_out>
        netdev_send();
 8008a00:	f001 fe60 	bl	800a6c4 <netdev_send>
        uip_len = 0;
 8008a04:	4b1d      	ldr	r3, [pc, #116]	; (8008a7c <NetTask+0x100>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	801a      	strh	r2, [r3, #0]
 8008a0a:	e7bb      	b.n	8008984 <NetTask+0x8>
      uip_periodic(connection);
 8008a0c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
 8008a10:	0053      	lsls	r3, r2, #1
 8008a12:	4a1c      	ldr	r2, [pc, #112]	; (8008a84 <NetTask+0x108>)
 8008a14:	4413      	add	r3, r2
 8008a16:	4a1c      	ldr	r2, [pc, #112]	; (8008a88 <NetTask+0x10c>)
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	2002      	movs	r0, #2
 8008a1c:	f002 fa04 	bl	800ae28 <uip_process>
      if (uip_len > 0)
 8008a20:	4b16      	ldr	r3, [pc, #88]	; (8008a7c <NetTask+0x100>)
 8008a22:	881b      	ldrh	r3, [r3, #0]
 8008a24:	b90b      	cbnz	r3, 8008a2a <NetTask+0xae>
    for (connection = 0; connection < UIP_CONNS; connection++)
 8008a26:	3401      	adds	r4, #1
 8008a28:	e7b7      	b.n	800899a <NetTask+0x1e>
        uip_arp_out();
 8008a2a:	f003 f985 	bl	800bd38 <uip_arp_out>
        netdev_send();
 8008a2e:	f001 fe49 	bl	800a6c4 <netdev_send>
        uip_len = 0;
 8008a32:	4b12      	ldr	r3, [pc, #72]	; (8008a7c <NetTask+0x100>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	801a      	strh	r2, [r3, #0]
 8008a38:	e7f5      	b.n	8008a26 <NetTask+0xaa>
      uip_udp_periodic(connection);
 8008a3a:	4b14      	ldr	r3, [pc, #80]	; (8008a8c <NetTask+0x110>)
 8008a3c:	eb03 1384 	add.w	r3, r3, r4, lsl #6
 8008a40:	4a13      	ldr	r2, [pc, #76]	; (8008a90 <NetTask+0x114>)
 8008a42:	6013      	str	r3, [r2, #0]
 8008a44:	2005      	movs	r0, #5
 8008a46:	f002 f9ef 	bl	800ae28 <uip_process>
      if(uip_len > 0)
 8008a4a:	4b0c      	ldr	r3, [pc, #48]	; (8008a7c <NetTask+0x100>)
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	b90b      	cbnz	r3, 8008a54 <NetTask+0xd8>
    for (connection = 0; connection < UIP_UDP_CONNS; connection++)
 8008a50:	3401      	adds	r4, #1
 8008a52:	e7a5      	b.n	80089a0 <NetTask+0x24>
        uip_arp_out();
 8008a54:	f003 f970 	bl	800bd38 <uip_arp_out>
        netdev_send();
 8008a58:	f001 fe34 	bl	800a6c4 <netdev_send>
        uip_len = 0;
 8008a5c:	4b07      	ldr	r3, [pc, #28]	; (8008a7c <NetTask+0x100>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	801a      	strh	r2, [r3, #0]
 8008a62:	e7f5      	b.n	8008a50 <NetTask+0xd4>
    ARPTimerTimeOut += NET_UIP_ARP_TIMER_MS;
 8008a64:	f242 7210 	movw	r2, #10000	; 0x2710
 8008a68:	441a      	add	r2, r3
 8008a6a:	4b03      	ldr	r3, [pc, #12]	; (8008a78 <NetTask+0xfc>)
 8008a6c:	601a      	str	r2, [r3, #0]
    uip_arp_timer();
 8008a6e:	f003 f8bf 	bl	800bbf0 <uip_arp_timer>
} /*** end of NetServerTask ***/
 8008a72:	e79d      	b.n	80089b0 <NetTask+0x34>
 8008a74:	20000134 	.word	0x20000134
 8008a78:	20000128 	.word	0x20000128
 8008a7c:	200032e0 	.word	0x200032e0
 8008a80:	2000332c 	.word	0x2000332c
 8008a84:	200032fc 	.word	0x200032fc
 8008a88:	200032f8 	.word	0x200032f8
 8008a8c:	20003970 	.word	0x20003970
 8008a90:	200032f0 	.word	0x200032f0

08008a94 <SharedParamsCalculateChecksum>:
{
  uint16_t result = 0;
  uint32_t byteIdx;

  /* Add the identifier bytes to the checksum. */
  result += (uint8_t)sharedParamsBuffer.identifier;
 8008a94:	4b0b      	ldr	r3, [pc, #44]	; (8008ac4 <SharedParamsCalculateChecksum+0x30>)
 8008a96:	681b      	ldr	r3, [r3, #0]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 8u);
 8008a98:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8008a9c:	fa50 f283 	uxtab	r2, r0, r3
  result += (uint8_t)(sharedParamsBuffer.identifier >> 16u);
 8008aa0:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8008aa4:	4410      	add	r0, r2
  result += (uint8_t)(sharedParamsBuffer.identifier >> 24u);
 8008aa6:	eb00 6013 	add.w	r0, r0, r3, lsr #24
  /* Loop through the parameter data array. */
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8008aaa:	2300      	movs	r3, #0
 8008aac:	e005      	b.n	8008aba <SharedParamsCalculateChecksum+0x26>
  {
    /* Add parameter data byte to the checksum. */
    result += (uint8_t)sharedParamsBuffer.data[byteIdx];
 8008aae:	4a05      	ldr	r2, [pc, #20]	; (8008ac4 <SharedParamsCalculateChecksum+0x30>)
 8008ab0:	441a      	add	r2, r3
 8008ab2:	7912      	ldrb	r2, [r2, #4]
 8008ab4:	4410      	add	r0, r2
 8008ab6:	b280      	uxth	r0, r0
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8008ab8:	3301      	adds	r3, #1
 8008aba:	2b37      	cmp	r3, #55	; 0x37
 8008abc:	d9f7      	bls.n	8008aae <SharedParamsCalculateChecksum+0x1a>
  }
  /* Determine one's complement. */
  result = ~result;
  /* Determine two's complement. */
  result += 1;
 8008abe:	4240      	negs	r0, r0
  /* Give the result back to the caller. */
  return result;
} /*** end of SharedParamsCalculateChecksum ***/
 8008ac0:	b280      	uxth	r0, r0
 8008ac2:	4770      	bx	lr
 8008ac4:	20000000 	.word	0x20000000

08008ac8 <SharedParamsVerifyChecksum>:
{
 8008ac8:	b508      	push	{r3, lr}
  if (SharedParamsCalculateChecksum() == sharedParamsBuffer.checksum)
 8008aca:	f7ff ffe3 	bl	8008a94 <SharedParamsCalculateChecksum>
 8008ace:	4b04      	ldr	r3, [pc, #16]	; (8008ae0 <SharedParamsVerifyChecksum+0x18>)
 8008ad0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008ad2:	4298      	cmp	r0, r3
 8008ad4:	d001      	beq.n	8008ada <SharedParamsVerifyChecksum+0x12>
  bool result = false;
 8008ad6:	2000      	movs	r0, #0
} /*** end of SharedParamsVerifyChecksum ***/
 8008ad8:	bd08      	pop	{r3, pc}
    result = true;
 8008ada:	2001      	movs	r0, #1
 8008adc:	e7fc      	b.n	8008ad8 <SharedParamsVerifyChecksum+0x10>
 8008ade:	bf00      	nop
 8008ae0:	20000000 	.word	0x20000000

08008ae4 <SharedParamsValidateBuffer>:
{
 8008ae4:	b508      	push	{r3, lr}
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 8008ae6:	4b05      	ldr	r3, [pc, #20]	; (8008afc <SharedParamsValidateBuffer+0x18>)
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	4b05      	ldr	r3, [pc, #20]	; (8008b00 <SharedParamsValidateBuffer+0x1c>)
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d001      	beq.n	8008af4 <SharedParamsValidateBuffer+0x10>
  bool result = false;
 8008af0:	2000      	movs	r0, #0
} /*** end of SharedParamsValitabeTable ***/
 8008af2:	bd08      	pop	{r3, pc}
       (SharedParamsVerifyChecksum()) )
 8008af4:	f7ff ffe8 	bl	8008ac8 <SharedParamsVerifyChecksum>
 8008af8:	e7fb      	b.n	8008af2 <SharedParamsValidateBuffer+0xe>
 8008afa:	bf00      	nop
 8008afc:	20000000 	.word	0x20000000
 8008b00:	ce42e7a2 	.word	0xce42e7a2

08008b04 <SharedParamsWriteChecksum>:
{
 8008b04:	b508      	push	{r3, lr}
  sharedParamsBuffer.checksum = SharedParamsCalculateChecksum();
 8008b06:	f7ff ffc5 	bl	8008a94 <SharedParamsCalculateChecksum>
 8008b0a:	4b01      	ldr	r3, [pc, #4]	; (8008b10 <SharedParamsWriteChecksum+0xc>)
 8008b0c:	8798      	strh	r0, [r3, #60]	; 0x3c
} /*** end of SharedParamsWriteChecksum ***/
 8008b0e:	bd08      	pop	{r3, pc}
 8008b10:	20000000 	.word	0x20000000

08008b14 <SharedParamsInit>:
{
 8008b14:	b508      	push	{r3, lr}
  if (!SharedParamsValidateBuffer())
 8008b16:	f7ff ffe5 	bl	8008ae4 <SharedParamsValidateBuffer>
 8008b1a:	b968      	cbnz	r0, 8008b38 <SharedParamsInit+0x24>
    sharedParamsBuffer.identifier = SHARED_PARAMS_BUFFER_ID;
 8008b1c:	4b07      	ldr	r3, [pc, #28]	; (8008b3c <SharedParamsInit+0x28>)
 8008b1e:	4a08      	ldr	r2, [pc, #32]	; (8008b40 <SharedParamsInit+0x2c>)
 8008b20:	601a      	str	r2, [r3, #0]
    for (byteIdx=0; byteIdx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8008b22:	2300      	movs	r3, #0
 8008b24:	e004      	b.n	8008b30 <SharedParamsInit+0x1c>
      sharedParamsBuffer.data[byteIdx] = 0;
 8008b26:	4a05      	ldr	r2, [pc, #20]	; (8008b3c <SharedParamsInit+0x28>)
 8008b28:	441a      	add	r2, r3
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	7111      	strb	r1, [r2, #4]
    for (byteIdx=0; byteIdx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8008b2e:	3301      	adds	r3, #1
 8008b30:	2b37      	cmp	r3, #55	; 0x37
 8008b32:	d9f8      	bls.n	8008b26 <SharedParamsInit+0x12>
    SharedParamsWriteChecksum();
 8008b34:	f7ff ffe6 	bl	8008b04 <SharedParamsWriteChecksum>
} /*** end of SharedParamsInit ***/
 8008b38:	bd08      	pop	{r3, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20000000 	.word	0x20000000
 8008b40:	ce42e7a2 	.word	0xce42e7a2

08008b44 <SharedParamsWriteByIndex>:
{
 8008b44:	b570      	push	{r4, r5, r6, lr}
 8008b46:	4605      	mov	r5, r0
 8008b48:	460e      	mov	r6, r1
  if ( (SharedParamsValidateBuffer()) &&
 8008b4a:	f7ff ffcb 	bl	8008ae4 <SharedParamsValidateBuffer>
 8008b4e:	4604      	mov	r4, r0
 8008b50:	b110      	cbz	r0, 8008b58 <SharedParamsWriteByIndex+0x14>
 8008b52:	2d37      	cmp	r5, #55	; 0x37
 8008b54:	d902      	bls.n	8008b5c <SharedParamsWriteByIndex+0x18>
  bool result = false;
 8008b56:	2400      	movs	r4, #0
} /*** end of SharedParamsWriteByIndex ***/
 8008b58:	4620      	mov	r0, r4
 8008b5a:	bd70      	pop	{r4, r5, r6, pc}
    sharedParamsBuffer.data[idx] = value;
 8008b5c:	4b02      	ldr	r3, [pc, #8]	; (8008b68 <SharedParamsWriteByIndex+0x24>)
 8008b5e:	441d      	add	r5, r3
 8008b60:	712e      	strb	r6, [r5, #4]
    SharedParamsWriteChecksum();
 8008b62:	f7ff ffcf 	bl	8008b04 <SharedParamsWriteChecksum>
 8008b66:	e7f7      	b.n	8008b58 <SharedParamsWriteByIndex+0x14>
 8008b68:	20000000 	.word	0x20000000

08008b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008ba4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008b70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008b72:	e003      	b.n	8008b7c <LoopCopyDataInit>

08008b74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008b74:	4b0c      	ldr	r3, [pc, #48]	; (8008ba8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008b76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008b78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008b7a:	3104      	adds	r1, #4

08008b7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008b7c:	480b      	ldr	r0, [pc, #44]	; (8008bac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008b7e:	4b0c      	ldr	r3, [pc, #48]	; (8008bb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008b80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008b82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008b84:	d3f6      	bcc.n	8008b74 <CopyDataInit>
  ldr  r2, =_sbss
 8008b86:	4a0b      	ldr	r2, [pc, #44]	; (8008bb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008b88:	e002      	b.n	8008b90 <LoopFillZerobss>

08008b8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008b8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008b8c:	f842 3b04 	str.w	r3, [r2], #4

08008b90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008b90:	4b09      	ldr	r3, [pc, #36]	; (8008bb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008b92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008b94:	d3f9      	bcc.n	8008b8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008b96:	f001 fc81 	bl	800a49c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008b9a:	f003 f98b 	bl	800beb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008b9e:	f7ff fde5 	bl	800876c <main>
  bx  lr    
 8008ba2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008ba4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8008ba8:	0800bf90 	.word	0x0800bf90
  ldr  r0, =_sdata
 8008bac:	20000040 	.word	0x20000040
  ldr  r3, =_edata
 8008bb0:	2000004c 	.word	0x2000004c
  ldr  r2, =_sbss
 8008bb4:	2000004c 	.word	0x2000004c
  ldr  r3, = _ebss
 8008bb8:	200039b0 	.word	0x200039b0

08008bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008bbc:	e7fe      	b.n	8008bbc <ADC_IRQHandler>
	...

08008bc0 <TimerInit>:
** \brief     Initializes the timer.
** \return    none.
**
****************************************************************************************/
void TimerInit(void)
{
 8008bc0:	b508      	push	{r3, lr}
  /* Configure the Systick interrupt time for 1 millisecond. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8008bc2:	f001 f91f 	bl	8009e04 <HAL_RCC_GetHCLKFreq>
 8008bc6:	4b08      	ldr	r3, [pc, #32]	; (8008be8 <TimerInit+0x28>)
 8008bc8:	fba3 3000 	umull	r3, r0, r3, r0
 8008bcc:	0980      	lsrs	r0, r0, #6
 8008bce:	f000 f8b3 	bl	8008d38 <HAL_SYSTICK_Config>
  /* Configure the Systick. */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8008bd2:	2004      	movs	r0, #4
 8008bd4:	f000 f8c6 	bl	8008d64 <HAL_SYSTICK_CLKSourceConfig>
  /* SysTick_IRQn interrupt configuration. */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8008bd8:	2200      	movs	r2, #0
 8008bda:	4611      	mov	r1, r2
 8008bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008be0:	f000 f878 	bl	8008cd4 <HAL_NVIC_SetPriority>
} /*** end of TimerInit ***/
 8008be4:	bd08      	pop	{r3, pc}
 8008be6:	bf00      	nop
 8008be8:	10624dd3 	.word	0x10624dd3

08008bec <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
unsigned long TimerGet(void)
{
 8008bec:	b508      	push	{r3, lr}
  /* Read and return the tick counter value. */
  return HAL_GetTick();
 8008bee:	f000 f845 	bl	8008c7c <HAL_GetTick>
} /*** end of TimerGet ***/
 8008bf2:	bd08      	pop	{r3, pc}

08008bf4 <SysTick_Handler>:
** \brief     Interrupt service routine of the timer.
** \return    none.
**
****************************************************************************************/
void SysTick_Handler(void)
{
 8008bf4:	b508      	push	{r3, lr}
  /* Increment the tick counter. */
  HAL_IncTick();
 8008bf6:	f000 f835 	bl	8008c64 <HAL_IncTick>
  /* Invoke the system tick handler. */
  HAL_SYSTICK_IRQHandler();
 8008bfa:	f000 f8c4 	bl	8008d86 <HAL_SYSTICK_IRQHandler>
} /*** end of TimerISRHandler ***/
 8008bfe:	bd08      	pop	{r3, pc}

08008c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008c00:	b510      	push	{r4, lr}
 8008c02:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008c04:	4b0e      	ldr	r3, [pc, #56]	; (8008c40 <HAL_InitTick+0x40>)
 8008c06:	7818      	ldrb	r0, [r3, #0]
 8008c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008c0c:	fbb3 f3f0 	udiv	r3, r3, r0
 8008c10:	4a0c      	ldr	r2, [pc, #48]	; (8008c44 <HAL_InitTick+0x44>)
 8008c12:	6810      	ldr	r0, [r2, #0]
 8008c14:	fbb0 f0f3 	udiv	r0, r0, r3
 8008c18:	f000 f88e 	bl	8008d38 <HAL_SYSTICK_Config>
 8008c1c:	b968      	cbnz	r0, 8008c3a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008c1e:	2c0f      	cmp	r4, #15
 8008c20:	d901      	bls.n	8008c26 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8008c22:	2001      	movs	r0, #1
 8008c24:	e00a      	b.n	8008c3c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008c26:	2200      	movs	r2, #0
 8008c28:	4621      	mov	r1, r4
 8008c2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c2e:	f000 f851 	bl	8008cd4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008c32:	4b05      	ldr	r3, [pc, #20]	; (8008c48 <HAL_InitTick+0x48>)
 8008c34:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c36:	2000      	movs	r0, #0
 8008c38:	e000      	b.n	8008c3c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8008c3a:	2001      	movs	r0, #1
}
 8008c3c:	bd10      	pop	{r4, pc}
 8008c3e:	bf00      	nop
 8008c40:	20000040 	.word	0x20000040
 8008c44:	20000048 	.word	0x20000048
 8008c48:	20000044 	.word	0x20000044

08008c4c <HAL_Init>:
{
 8008c4c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008c4e:	2003      	movs	r0, #3
 8008c50:	f000 f82e 	bl	8008cb0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8008c54:	2000      	movs	r0, #0
 8008c56:	f7ff ffd3 	bl	8008c00 <HAL_InitTick>
  HAL_MspInit();
 8008c5a:	f7ff fd9b 	bl	8008794 <HAL_MspInit>
}
 8008c5e:	2000      	movs	r0, #0
 8008c60:	bd08      	pop	{r3, pc}
	...

08008c64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008c64:	4a03      	ldr	r2, [pc, #12]	; (8008c74 <HAL_IncTick+0x10>)
 8008c66:	6811      	ldr	r1, [r2, #0]
 8008c68:	4b03      	ldr	r3, [pc, #12]	; (8008c78 <HAL_IncTick+0x14>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	440b      	add	r3, r1
 8008c6e:	6013      	str	r3, [r2, #0]
}
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	200001f4 	.word	0x200001f4
 8008c78:	20000040 	.word	0x20000040

08008c7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008c7c:	4b01      	ldr	r3, [pc, #4]	; (8008c84 <HAL_GetTick+0x8>)
 8008c7e:	6818      	ldr	r0, [r3, #0]
}
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	200001f4 	.word	0x200001f4

08008c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008c8c:	f7ff fff6 	bl	8008c7c <HAL_GetTick>
 8008c90:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c92:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8008c96:	d002      	beq.n	8008c9e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8008c98:	4b04      	ldr	r3, [pc, #16]	; (8008cac <HAL_Delay+0x24>)
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008c9e:	f7ff ffed 	bl	8008c7c <HAL_GetTick>
 8008ca2:	1b40      	subs	r0, r0, r5
 8008ca4:	42a0      	cmp	r0, r4
 8008ca6:	d3fa      	bcc.n	8008c9e <HAL_Delay+0x16>
  {
  }
}
 8008ca8:	bd38      	pop	{r3, r4, r5, pc}
 8008caa:	bf00      	nop
 8008cac:	20000040 	.word	0x20000040

08008cb0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008cb0:	4906      	ldr	r1, [pc, #24]	; (8008ccc <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8008cb2:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008cb4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008cb8:	041b      	lsls	r3, r3, #16
 8008cba:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8008cbc:	0200      	lsls	r0, r0, #8
 8008cbe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008cc2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8008cc4:	4a02      	ldr	r2, [pc, #8]	; (8008cd0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008cc6:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8008cc8:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008cca:	4770      	bx	lr
 8008ccc:	e000ed00 	.word	0xe000ed00
 8008cd0:	05fa0000 	.word	0x05fa0000

08008cd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008cd4:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008cd6:	4b15      	ldr	r3, [pc, #84]	; (8008d2c <HAL_NVIC_SetPriority+0x58>)
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008cde:	f1c3 0407 	rsb	r4, r3, #7
 8008ce2:	2c04      	cmp	r4, #4
 8008ce4:	bf28      	it	cs
 8008ce6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ce8:	1d1d      	adds	r5, r3, #4
 8008cea:	2d06      	cmp	r5, #6
 8008cec:	d914      	bls.n	8008d18 <HAL_NVIC_SetPriority+0x44>
 8008cee:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cf0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008cf4:	fa05 f404 	lsl.w	r4, r5, r4
 8008cf8:	ea21 0104 	bic.w	r1, r1, r4
 8008cfc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008cfe:	fa05 f303 	lsl.w	r3, r5, r3
 8008d02:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d06:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	db07      	blt.n	8008d1c <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d0c:	0109      	lsls	r1, r1, #4
 8008d0e:	b2c9      	uxtb	r1, r1
 8008d10:	4b07      	ldr	r3, [pc, #28]	; (8008d30 <HAL_NVIC_SetPriority+0x5c>)
 8008d12:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008d14:	bc30      	pop	{r4, r5}
 8008d16:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d18:	2300      	movs	r3, #0
 8008d1a:	e7e9      	b.n	8008cf0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d1c:	f000 000f 	and.w	r0, r0, #15
 8008d20:	0109      	lsls	r1, r1, #4
 8008d22:	b2c9      	uxtb	r1, r1
 8008d24:	4b03      	ldr	r3, [pc, #12]	; (8008d34 <HAL_NVIC_SetPriority+0x60>)
 8008d26:	5419      	strb	r1, [r3, r0]
 8008d28:	e7f4      	b.n	8008d14 <HAL_NVIC_SetPriority+0x40>
 8008d2a:	bf00      	nop
 8008d2c:	e000ed00 	.word	0xe000ed00
 8008d30:	e000e400 	.word	0xe000e400
 8008d34:	e000ed14 	.word	0xe000ed14

08008d38 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d38:	3801      	subs	r0, #1
 8008d3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008d3e:	d20a      	bcs.n	8008d56 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d40:	4b06      	ldr	r3, [pc, #24]	; (8008d5c <HAL_SYSTICK_Config+0x24>)
 8008d42:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d44:	4a06      	ldr	r2, [pc, #24]	; (8008d60 <HAL_SYSTICK_Config+0x28>)
 8008d46:	21f0      	movs	r1, #240	; 0xf0
 8008d48:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d50:	2207      	movs	r2, #7
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008d56:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	e000e010 	.word	0xe000e010
 8008d60:	e000ed00 	.word	0xe000ed00

08008d64 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8008d64:	2804      	cmp	r0, #4
 8008d66:	d005      	beq.n	8008d74 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8008d68:	4a05      	ldr	r2, [pc, #20]	; (8008d80 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8008d6a:	6813      	ldr	r3, [r2, #0]
 8008d6c:	f023 0304 	bic.w	r3, r3, #4
 8008d70:	6013      	str	r3, [r2, #0]
  }
}
 8008d72:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8008d74:	4a02      	ldr	r2, [pc, #8]	; (8008d80 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8008d76:	6813      	ldr	r3, [r2, #0]
 8008d78:	f043 0304 	orr.w	r3, r3, #4
 8008d7c:	6013      	str	r3, [r2, #0]
 8008d7e:	4770      	bx	lr
 8008d80:	e000e010 	.word	0xe000e010

08008d84 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8008d84:	4770      	bx	lr

08008d86 <HAL_SYSTICK_IRQHandler>:
{
 8008d86:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8008d88:	f7ff fffc 	bl	8008d84 <HAL_SYSTICK_Callback>
}
 8008d8c:	bd08      	pop	{r3, pc}
	...

08008d90 <ETH_MACAddressConfig>:
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8008d90:	7950      	ldrb	r0, [r2, #5]
 8008d92:	7913      	ldrb	r3, [r2, #4]
 8008d94:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8008d98:	4807      	ldr	r0, [pc, #28]	; (8008db8 <ETH_MACAddressConfig+0x28>)
 8008d9a:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8008d9c:	78d0      	ldrb	r0, [r2, #3]
 8008d9e:	7893      	ldrb	r3, [r2, #2]
 8008da0:	041b      	lsls	r3, r3, #16
 8008da2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8008da6:	7850      	ldrb	r0, [r2, #1]
 8008da8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008dac:	7812      	ldrb	r2, [r2, #0]
 8008dae:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8008db0:	4a02      	ldr	r2, [pc, #8]	; (8008dbc <ETH_MACAddressConfig+0x2c>)
 8008db2:	508b      	str	r3, [r1, r2]
}
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	40028040 	.word	0x40028040
 8008dbc:	40028044 	.word	0x40028044

08008dc0 <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8008dc0:	6801      	ldr	r1, [r0, #0]
 8008dc2:	f241 0218 	movw	r2, #4120	; 0x1018
 8008dc6:	588b      	ldr	r3, [r1, r2]
 8008dc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008dcc:	508b      	str	r3, [r1, r2]
}
 8008dce:	4770      	bx	lr

08008dd0 <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8008dd0:	6801      	ldr	r1, [r0, #0]
 8008dd2:	f241 0218 	movw	r2, #4120	; 0x1018
 8008dd6:	588b      	ldr	r3, [r1, r2]
 8008dd8:	f043 0302 	orr.w	r3, r3, #2
 8008ddc:	508b      	str	r3, [r1, r2]
}
 8008dde:	4770      	bx	lr

08008de0 <ETH_MACDMAConfig>:
{
 8008de0:	b570      	push	{r4, r5, r6, lr}
 8008de2:	b09e      	sub	sp, #120	; 0x78
 8008de4:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8008de6:	b129      	cbz	r1, 8008df4 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8008de8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008dec:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8008dee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008df2:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8008df4:	69e3      	ldr	r3, [r4, #28]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d168      	bne.n	8008ecc <ETH_MACDMAConfig+0xec>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8008dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dfe:	9307      	str	r3, [sp, #28]
  tmpreg = (heth->Instance)->MACCR;
 8008e00:	6821      	ldr	r1, [r4, #0]
 8008e02:	680b      	ldr	r3, [r1, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8008e04:	4a37      	ldr	r2, [pc, #220]	; (8008ee4 <ETH_MACDMAConfig+0x104>)
 8008e06:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 8008e08:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 8008e0a:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8008e0c:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8008e0e:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 8008e10:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8008e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8008e16:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8008e18:	600b      	str	r3, [r1, #0]
  tmpreg = (heth->Instance)->MACCR;
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e1e:	2001      	movs	r0, #1
 8008e20:	f7ff ff32 	bl	8008c88 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	2240      	movs	r2, #64	; 0x40
 8008e2c:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e32:	2001      	movs	r0, #1
 8008e34:	f7ff ff28 	bl	8008c88 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	2500      	movs	r5, #0
 8008e40:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 8008e46:	6822      	ldr	r2, [r4, #0]
 8008e48:	6993      	ldr	r3, [r2, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8008e4a:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 8008e4e:	041b      	lsls	r3, r3, #16
 8008e50:	0c1b      	lsrs	r3, r3, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8008e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8008e56:	6193      	str	r3, [r2, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8008e58:	6823      	ldr	r3, [r4, #0]
 8008e5a:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e5c:	2001      	movs	r0, #1
 8008e5e:	f7ff ff13 	bl	8008c88 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e6e:	2001      	movs	r0, #1
 8008e70:	f7ff ff0a 	bl	8008c88 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8008e74:	6823      	ldr	r3, [r4, #0]
 8008e76:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 8008e78:	6821      	ldr	r1, [r4, #0]
 8008e7a:	f241 0518 	movw	r5, #4120	; 0x1018
 8008e7e:	594b      	ldr	r3, [r1, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8008e80:	4a19      	ldr	r2, [pc, #100]	; (8008ee8 <ETH_MACDMAConfig+0x108>)
 8008e82:	401a      	ands	r2, r3
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8008e84:	4b19      	ldr	r3, [pc, #100]	; (8008eec <ETH_MACDMAConfig+0x10c>)
 8008e86:	4313      	orrs	r3, r2
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8008e88:	514b      	str	r3, [r1, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 8008e8a:	6823      	ldr	r3, [r4, #0]
 8008e8c:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e8e:	2001      	movs	r0, #1
 8008e90:	f7ff fefa 	bl	8008c88 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8008e94:	6823      	ldr	r3, [r4, #0]
 8008e96:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8008e98:	6823      	ldr	r3, [r4, #0]
 8008e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e9e:	4a14      	ldr	r2, [pc, #80]	; (8008ef0 <ETH_MACDMAConfig+0x110>)
 8008ea0:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ea8:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008eaa:	2001      	movs	r0, #1
 8008eac:	f7ff feec 	bl	8008c88 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eb6:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8008eb8:	69a3      	ldr	r3, [r4, #24]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d009      	beq.n	8008ed2 <ETH_MACDMAConfig+0xf2>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8008ebe:	6962      	ldr	r2, [r4, #20]
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f7ff ff64 	bl	8008d90 <ETH_MACAddressConfig>
}
 8008ec8:	b01e      	add	sp, #120	; 0x78
 8008eca:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	9307      	str	r3, [sp, #28]
 8008ed0:	e796      	b.n	8008e00 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8008ed2:	6821      	ldr	r1, [r4, #0]
 8008ed4:	f241 021c 	movw	r2, #4124	; 0x101c
 8008ed8:	5888      	ldr	r0, [r1, r2]
 8008eda:	4b06      	ldr	r3, [pc, #24]	; (8008ef4 <ETH_MACDMAConfig+0x114>)
 8008edc:	4303      	orrs	r3, r0
 8008ede:	508b      	str	r3, [r1, r2]
 8008ee0:	e7ed      	b.n	8008ebe <ETH_MACDMAConfig+0xde>
 8008ee2:	bf00      	nop
 8008ee4:	ff20810f 	.word	0xff20810f
 8008ee8:	f8de3f23 	.word	0xf8de3f23
 8008eec:	02200004 	.word	0x02200004
 8008ef0:	02c12080 	.word	0x02c12080
 8008ef4:	00010040 	.word	0x00010040

08008ef8 <ETH_MACTransmissionEnable>:
{ 
 8008ef8:	b510      	push	{r4, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8008f02:	6802      	ldr	r2, [r0, #0]
 8008f04:	6813      	ldr	r3, [r2, #0]
 8008f06:	f043 0308 	orr.w	r3, r3, #8
 8008f0a:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8008f0c:	6803      	ldr	r3, [r0, #0]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008f12:	2001      	movs	r0, #1
 8008f14:	f7ff feb8 	bl	8008c88 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	9a01      	ldr	r2, [sp, #4]
 8008f1c:	601a      	str	r2, [r3, #0]
}
 8008f1e:	b002      	add	sp, #8
 8008f20:	bd10      	pop	{r4, pc}

08008f22 <ETH_MACReceptionEnable>:
{ 
 8008f22:	b510      	push	{r4, lr}
 8008f24:	b082      	sub	sp, #8
 8008f26:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8008f2c:	6802      	ldr	r2, [r0, #0]
 8008f2e:	6813      	ldr	r3, [r2, #0]
 8008f30:	f043 0304 	orr.w	r3, r3, #4
 8008f34:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8008f36:	6803      	ldr	r3, [r0, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008f3c:	2001      	movs	r0, #1
 8008f3e:	f7ff fea3 	bl	8008c88 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	9a01      	ldr	r2, [sp, #4]
 8008f46:	601a      	str	r2, [r3, #0]
}
 8008f48:	b002      	add	sp, #8
 8008f4a:	bd10      	pop	{r4, pc}

08008f4c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8008f4c:	b530      	push	{r4, r5, lr}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	4605      	mov	r5, r0
  __IO uint32_t tmpreg = 0;
 8008f52:	2300      	movs	r3, #0
 8008f54:	9301      	str	r3, [sp, #4]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8008f56:	6802      	ldr	r2, [r0, #0]
 8008f58:	f241 0418 	movw	r4, #4120	; 0x1018
 8008f5c:	5913      	ldr	r3, [r2, r4]
 8008f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f62:	5113      	str	r3, [r2, r4]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8008f64:	6803      	ldr	r3, [r0, #0]
 8008f66:	591b      	ldr	r3, [r3, r4]
 8008f68:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008f6a:	2001      	movs	r0, #1
 8008f6c:	f7ff fe8c 	bl	8008c88 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8008f70:	682b      	ldr	r3, [r5, #0]
 8008f72:	9a01      	ldr	r2, [sp, #4]
 8008f74:	511a      	str	r2, [r3, r4]
}
 8008f76:	b003      	add	sp, #12
 8008f78:	bd30      	pop	{r4, r5, pc}

08008f7a <HAL_ETH_DMATxDescListInit>:
{
 8008f7a:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8008f7c:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8008f80:	2c01      	cmp	r4, #1
 8008f82:	d031      	beq.n	8008fe8 <HAL_ETH_DMATxDescListInit+0x6e>
 8008f84:	2401      	movs	r4, #1
 8008f86:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8008f8a:	2402      	movs	r4, #2
 8008f8c:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8008f90:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 8008f92:	2400      	movs	r4, #0
 8008f94:	e001      	b.n	8008f9a <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8008f96:	60f9      	str	r1, [r7, #12]
  for(i=0; i < TxBuffCount; i++)
 8008f98:	3401      	adds	r4, #1
 8008f9a:	429c      	cmp	r4, r3
 8008f9c:	d217      	bcs.n	8008fce <HAL_ETH_DMATxDescListInit+0x54>
    dmatxdesc = DMATxDescTab + i;
 8008f9e:	0165      	lsls	r5, r4, #5
 8008fa0:	194f      	adds	r7, r1, r5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8008fa2:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8008fa6:	514e      	str	r6, [r1, r5]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8008fa8:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8008fac:	fb06 2604 	mla	r6, r6, r4, r2
 8008fb0:	60be      	str	r6, [r7, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8008fb2:	69c6      	ldr	r6, [r0, #28]
 8008fb4:	b91e      	cbnz	r6, 8008fbe <HAL_ETH_DMATxDescListInit+0x44>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8008fb6:	594e      	ldr	r6, [r1, r5]
 8008fb8:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8008fbc:	514e      	str	r6, [r1, r5]
    if(i < (TxBuffCount-1))
 8008fbe:	1e5d      	subs	r5, r3, #1
 8008fc0:	42a5      	cmp	r5, r4
 8008fc2:	d9e8      	bls.n	8008f96 <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8008fc4:	1c65      	adds	r5, r4, #1
 8008fc6:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8008fca:	60fd      	str	r5, [r7, #12]
 8008fcc:	e7e4      	b.n	8008f98 <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8008fce:	6802      	ldr	r2, [r0, #0]
 8008fd0:	f241 0310 	movw	r3, #4112	; 0x1010
 8008fd4:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8008fe2:	4618      	mov	r0, r3
}
 8008fe4:	bcf0      	pop	{r4, r5, r6, r7}
 8008fe6:	4770      	bx	lr
  __HAL_LOCK(heth);
 8008fe8:	2002      	movs	r0, #2
 8008fea:	e7fb      	b.n	8008fe4 <HAL_ETH_DMATxDescListInit+0x6a>

08008fec <HAL_ETH_DMARxDescListInit>:
{
 8008fec:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8008fee:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8008ff2:	2c01      	cmp	r4, #1
 8008ff4:	d02e      	beq.n	8009054 <HAL_ETH_DMARxDescListInit+0x68>
 8008ff6:	2401      	movs	r4, #1
 8008ff8:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8008ffc:	2402      	movs	r4, #2
 8008ffe:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8009002:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 8009004:	2400      	movs	r4, #0
 8009006:	e001      	b.n	800900c <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8009008:	60e9      	str	r1, [r5, #12]
  for(i=0; i < RxBuffCount; i++)
 800900a:	3401      	adds	r4, #1
 800900c:	429c      	cmp	r4, r3
 800900e:	d214      	bcs.n	800903a <HAL_ETH_DMARxDescListInit+0x4e>
    DMARxDesc = DMARxDescTab+i;
 8009010:	0166      	lsls	r6, r4, #5
 8009012:	198d      	adds	r5, r1, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8009014:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8009018:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800901a:	f244 56f4 	movw	r6, #17908	; 0x45f4
 800901e:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8009020:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8009024:	fb06 2604 	mla	r6, r6, r4, r2
 8009028:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1))
 800902a:	1e5e      	subs	r6, r3, #1
 800902c:	42a6      	cmp	r6, r4
 800902e:	d9eb      	bls.n	8009008 <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8009030:	1c66      	adds	r6, r4, #1
 8009032:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8009036:	60ee      	str	r6, [r5, #12]
 8009038:	e7e7      	b.n	800900a <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800903a:	6802      	ldr	r2, [r0, #0]
 800903c:	f241 030c 	movw	r3, #4108	; 0x100c
 8009040:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8009042:	2301      	movs	r3, #1
 8009044:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8009048:	2300      	movs	r3, #0
 800904a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800904e:	4618      	mov	r0, r3
}
 8009050:	bcf0      	pop	{r4, r5, r6, r7}
 8009052:	4770      	bx	lr
  __HAL_LOCK(heth);
 8009054:	2002      	movs	r0, #2
 8009056:	e7fb      	b.n	8009050 <HAL_ETH_DMARxDescListInit+0x64>

08009058 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8009058:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800905c:	2b01      	cmp	r3, #1
 800905e:	f000 8085 	beq.w	800916c <HAL_ETH_TransmitFrame+0x114>
 8009062:	2301      	movs	r3, #1
 8009064:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8009068:	2302      	movs	r3, #2
 800906a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0) 
 800906e:	b1b1      	cbz	r1, 800909e <HAL_ETH_TransmitFrame+0x46>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009070:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	2a00      	cmp	r2, #0
 8009076:	db1a      	blt.n	80090ae <HAL_ETH_TransmitFrame+0x56>
{
 8009078:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 800907a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800907e:	4291      	cmp	r1, r2
 8009080:	d91d      	bls.n	80090be <HAL_ETH_TransmitFrame+0x66>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8009082:	4a3b      	ldr	r2, [pc, #236]	; (8009170 <HAL_ETH_TransmitFrame+0x118>)
 8009084:	fba2 4201 	umull	r4, r2, r2, r1
 8009088:	0a92      	lsrs	r2, r2, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800908a:	f240 54f4 	movw	r4, #1524	; 0x5f4
 800908e:	fb04 1412 	mls	r4, r4, r2, r1
 8009092:	b104      	cbz	r4, 8009096 <HAL_ETH_TransmitFrame+0x3e>
      bufcount++;
 8009094:	3201      	adds	r2, #1
  if (bufcount == 1)
 8009096:	2a01      	cmp	r2, #1
 8009098:	d011      	beq.n	80090be <HAL_ETH_TransmitFrame+0x66>
    for (i=0; i< bufcount; i++)
 800909a:	2300      	movs	r3, #0
 800909c:	e047      	b.n	800912e <HAL_ETH_TransmitFrame+0xd6>
    heth->State = HAL_ETH_STATE_READY;
 800909e:	2301      	movs	r3, #1
 80090a0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80090a4:	2200      	movs	r2, #0
 80090a6:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 80090aa:	4618      	mov	r0, r3
 80090ac:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80090ae:	2312      	movs	r3, #18
 80090b0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80090b4:	2300      	movs	r3, #0
 80090b6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 80090ba:	2001      	movs	r0, #1
 80090bc:	4770      	bx	lr
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80090c4:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80090c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80090c8:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80090cc:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80090ce:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80090d0:	6813      	ldr	r3, [r2, #0]
 80090d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090d6:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80090d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80090de:	6803      	ldr	r3, [r0, #0]
 80090e0:	f241 0214 	movw	r2, #4116	; 0x1014
 80090e4:	589a      	ldr	r2, [r3, r2]
 80090e6:	f012 0f04 	tst.w	r2, #4
 80090ea:	d008      	beq.n	80090fe <HAL_ETH_TransmitFrame+0xa6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80090ec:	f241 0214 	movw	r2, #4116	; 0x1014
 80090f0:	2104      	movs	r1, #4
 80090f2:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 80090f4:	6802      	ldr	r2, [r0, #0]
 80090f6:	f241 0304 	movw	r3, #4100	; 0x1004
 80090fa:	2100      	movs	r1, #0
 80090fc:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 80090fe:	2301      	movs	r3, #1
 8009100:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8009104:	2300      	movs	r3, #0
 8009106:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800910a:	4618      	mov	r0, r3
}
 800910c:	bc30      	pop	{r4, r5}
 800910e:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8009110:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8009112:	682c      	ldr	r4, [r5, #0]
 8009114:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8009118:	602c      	str	r4, [r5, #0]
 800911a:	e011      	b.n	8009140 <HAL_ETH_TransmitFrame+0xe8>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800911c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 800911e:	682c      	ldr	r4, [r5, #0]
 8009120:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8009124:	602c      	str	r4, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8009126:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8009128:	68e4      	ldr	r4, [r4, #12]
 800912a:	62c4      	str	r4, [r0, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 800912c:	3301      	adds	r3, #1
 800912e:	429a      	cmp	r2, r3
 8009130:	d9d5      	bls.n	80090de <HAL_ETH_TransmitFrame+0x86>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8009132:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8009134:	682c      	ldr	r4, [r5, #0]
 8009136:	f024 5440 	bic.w	r4, r4, #805306368	; 0x30000000
 800913a:	602c      	str	r4, [r5, #0]
      if (i == 0) 
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0e7      	beq.n	8009110 <HAL_ETH_TransmitFrame+0xb8>
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8009140:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8009142:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8009146:	6065      	str	r5, [r4, #4]
      if (i == (bufcount-1))
 8009148:	1e54      	subs	r4, r2, #1
 800914a:	429c      	cmp	r4, r3
 800914c:	d1e6      	bne.n	800911c <HAL_ETH_TransmitFrame+0xc4>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800914e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8009150:	682c      	ldr	r4, [r5, #0]
 8009152:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8009156:	602c      	str	r4, [r5, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8009158:	4c06      	ldr	r4, [pc, #24]	; (8009174 <HAL_ETH_TransmitFrame+0x11c>)
 800915a:	fb04 1402 	mla	r4, r4, r2, r1
 800915e:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8009162:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8009164:	f3c4 040c 	ubfx	r4, r4, #0, #13
 8009168:	606c      	str	r4, [r5, #4]
 800916a:	e7d7      	b.n	800911c <HAL_ETH_TransmitFrame+0xc4>
  __HAL_LOCK(heth);
 800916c:	2002      	movs	r0, #2
}
 800916e:	4770      	bx	lr
 8009170:	ac02b00b 	.word	0xac02b00b
 8009174:	fffffa0c 	.word	0xfffffa0c

08009178 <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 8009178:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800917c:	2b01      	cmp	r3, #1
 800917e:	d040      	beq.n	8009202 <HAL_ETH_GetReceivedFrame+0x8a>
 8009180:	2301      	movs	r3, #1
 8009182:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8009186:	2302      	movs	r3, #2
 8009188:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800918c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	2a00      	cmp	r2, #0
 8009192:	db28      	blt.n	80091e6 <HAL_ETH_GetReceivedFrame+0x6e>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	f412 7f80 	tst.w	r2, #256	; 0x100
 800919a:	d019      	beq.n	80091d0 <HAL_ETH_GetReceivedFrame+0x58>
      (heth->RxFrameInfos).SegCount++;
 800919c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800919e:	3201      	adds	r2, #1
 80091a0:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos).SegCount == 1)
 80091a2:	2a01      	cmp	r2, #1
 80091a4:	d012      	beq.n	80091cc <HAL_ETH_GetReceivedFrame+0x54>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80091a6:	6343      	str	r3, [r0, #52]	; 0x34
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	f3c2 420d 	ubfx	r2, r2, #16, #14
 80091ae:	3a04      	subs	r2, #4
      heth->RxFrameInfos.length = framelength;
 80091b0:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80091b2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80091b4:	6892      	ldr	r2, [r2, #8]
 80091b6:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 80091bc:	2301      	movs	r3, #1
 80091be:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80091c2:	2300      	movs	r3, #0
 80091c4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 80091c8:	4618      	mov	r0, r3
 80091ca:	4770      	bx	lr
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80091cc:	6303      	str	r3, [r0, #48]	; 0x30
 80091ce:	e7ea      	b.n	80091a6 <HAL_ETH_GetReceivedFrame+0x2e>
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80091d6:	d00e      	beq.n	80091f6 <HAL_ETH_GetReceivedFrame+0x7e>
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80091d8:	6303      	str	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80091da:	2200      	movs	r2, #0
 80091dc:	6342      	str	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 80091de:	2201      	movs	r2, #1
 80091e0:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	6283      	str	r3, [r0, #40]	; 0x28
  heth->State = HAL_ETH_STATE_READY;
 80091e6:	2301      	movs	r3, #1
 80091e8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80091ec:	2200      	movs	r2, #0
 80091ee:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 80091f2:	4618      	mov	r0, r3
 80091f4:	4770      	bx	lr
      (heth->RxFrameInfos).SegCount++;
 80091f6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80091f8:	3201      	adds	r2, #1
 80091fa:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	6283      	str	r3, [r0, #40]	; 0x28
 8009200:	e7f1      	b.n	80091e6 <HAL_ETH_GetReceivedFrame+0x6e>
  __HAL_LOCK(heth);
 8009202:	2002      	movs	r0, #2
}
 8009204:	4770      	bx	lr

08009206 <HAL_ETH_ReadPHYRegister>:
{
 8009206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8009208:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b82      	cmp	r3, #130	; 0x82
 8009210:	d033      	beq.n	800927a <HAL_ETH_ReadPHYRegister+0x74>
 8009212:	4616      	mov	r6, r2
 8009214:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8009216:	2382      	movs	r3, #130	; 0x82
 8009218:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 800921c:	6802      	ldr	r2, [r0, #0]
 800921e:	6913      	ldr	r3, [r2, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8009220:	f003 031c 	and.w	r3, r3, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8009224:	8a04      	ldrh	r4, [r0, #16]
 8009226:	02e4      	lsls	r4, r4, #11
 8009228:	b2a4      	uxth	r4, r4
 800922a:	4323      	orrs	r3, r4
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800922c:	018c      	lsls	r4, r1, #6
 800922e:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8009232:	431c      	orrs	r4, r3
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8009234:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 8009238:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 800923a:	f7ff fd1f 	bl	8008c7c <HAL_GetTick>
 800923e:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009240:	f014 0f01 	tst.w	r4, #1
 8009244:	d010      	beq.n	8009268 <HAL_ETH_ReadPHYRegister+0x62>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8009246:	f7ff fd19 	bl	8008c7c <HAL_GetTick>
 800924a:	1bc0      	subs	r0, r0, r7
 800924c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8009250:	d202      	bcs.n	8009258 <HAL_ETH_ReadPHYRegister+0x52>
    tmpreg = heth->Instance->MACMIIAR;
 8009252:	682b      	ldr	r3, [r5, #0]
 8009254:	691c      	ldr	r4, [r3, #16]
 8009256:	e7f3      	b.n	8009240 <HAL_ETH_ReadPHYRegister+0x3a>
      heth->State= HAL_ETH_STATE_READY;
 8009258:	2301      	movs	r3, #1
 800925a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800925e:	2300      	movs	r3, #0
 8009260:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8009264:	2003      	movs	r0, #3
 8009266:	e007      	b.n	8009278 <HAL_ETH_ReadPHYRegister+0x72>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8009268:	682b      	ldr	r3, [r5, #0]
 800926a:	695b      	ldr	r3, [r3, #20]
 800926c:	b29b      	uxth	r3, r3
 800926e:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8009270:	2301      	movs	r3, #1
 8009272:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8009276:	2000      	movs	r0, #0
}
 8009278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800927a:	2002      	movs	r0, #2
 800927c:	e7fc      	b.n	8009278 <HAL_ETH_ReadPHYRegister+0x72>

0800927e <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800927e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8009282:	b2db      	uxtb	r3, r3
 8009284:	2b42      	cmp	r3, #66	; 0x42
 8009286:	d032      	beq.n	80092ee <HAL_ETH_WritePHYRegister+0x70>
{
 8009288:	b570      	push	{r4, r5, r6, lr}
 800928a:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800928c:	2342      	movs	r3, #66	; 0x42
 800928e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8009292:	6800      	ldr	r0, [r0, #0]
 8009294:	6903      	ldr	r3, [r0, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8009296:	f003 031c 	and.w	r3, r3, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800929a:	8a2c      	ldrh	r4, [r5, #16]
 800929c:	02e4      	lsls	r4, r4, #11
 800929e:	b2a4      	uxth	r4, r4
 80092a0:	4323      	orrs	r3, r4
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80092a2:	018c      	lsls	r4, r1, #6
 80092a4:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 80092a8:	431c      	orrs	r4, r3
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80092aa:	f044 0403 	orr.w	r4, r4, #3
 80092ae:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80092b0:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg;
 80092b2:	682b      	ldr	r3, [r5, #0]
 80092b4:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 80092b6:	f7ff fce1 	bl	8008c7c <HAL_GetTick>
 80092ba:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80092bc:	f014 0f01 	tst.w	r4, #1
 80092c0:	d010      	beq.n	80092e4 <HAL_ETH_WritePHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80092c2:	f7ff fcdb 	bl	8008c7c <HAL_GetTick>
 80092c6:	1b80      	subs	r0, r0, r6
 80092c8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80092cc:	d202      	bcs.n	80092d4 <HAL_ETH_WritePHYRegister+0x56>
    tmpreg = heth->Instance->MACMIIAR;
 80092ce:	682b      	ldr	r3, [r5, #0]
 80092d0:	691c      	ldr	r4, [r3, #16]
 80092d2:	e7f3      	b.n	80092bc <HAL_ETH_WritePHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 80092d4:	2301      	movs	r3, #1
 80092d6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80092da:	2300      	movs	r3, #0
 80092dc:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80092e0:	2003      	movs	r0, #3
 80092e2:	e003      	b.n	80092ec <HAL_ETH_WritePHYRegister+0x6e>
  heth->State = HAL_ETH_STATE_READY;
 80092e4:	2301      	movs	r3, #1
 80092e6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 80092ea:	2000      	movs	r0, #0
}
 80092ec:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80092ee:	2002      	movs	r0, #2
}
 80092f0:	4770      	bx	lr
	...

080092f4 <HAL_ETH_Init>:
{
 80092f4:	b570      	push	{r4, r5, r6, lr}
 80092f6:	b082      	sub	sp, #8
  uint32_t tempreg = 0, phyreg = 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 80092fc:	2800      	cmp	r0, #0
 80092fe:	f000 810c 	beq.w	800951a <HAL_ETH_Init+0x226>
 8009302:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8009304:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8009308:	2b00      	cmp	r3, #0
 800930a:	d032      	beq.n	8009372 <HAL_ETH_Init+0x7e>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800930c:	4b84      	ldr	r3, [pc, #528]	; (8009520 <HAL_ETH_Init+0x22c>)
 800930e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009310:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009314:	645a      	str	r2, [r3, #68]	; 0x44
 8009316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8009320:	4b80      	ldr	r3, [pc, #512]	; (8009524 <HAL_ETH_Init+0x230>)
 8009322:	685a      	ldr	r2, [r3, #4]
 8009324:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009328:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	6a21      	ldr	r1, [r4, #32]
 800932e:	430a      	orrs	r2, r1
 8009330:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	f042 0201 	orr.w	r2, r2, #1
 800933e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8009340:	f7ff fc9c 	bl	8008c7c <HAL_GetTick>
 8009344:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800934c:	6812      	ldr	r2, [r2, #0]
 800934e:	f012 0f01 	tst.w	r2, #1
 8009352:	d013      	beq.n	800937c <HAL_ETH_Init+0x88>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8009354:	f7ff fc92 	bl	8008c7c <HAL_GetTick>
 8009358:	1b40      	subs	r0, r0, r5
 800935a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800935e:	d9f2      	bls.n	8009346 <HAL_ETH_Init+0x52>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8009360:	2503      	movs	r5, #3
 8009362:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8009366:	2300      	movs	r3, #0
 8009368:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800936c:	4628      	mov	r0, r5
 800936e:	b002      	add	sp, #8
 8009370:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 8009372:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8009376:	f001 f8bd 	bl	800a4f4 <HAL_ETH_MspInit>
 800937a:	e7c7      	b.n	800930c <HAL_ETH_Init+0x18>
  tempreg = (heth->Instance)->MACMIIAR;
 800937c:	691d      	ldr	r5, [r3, #16]
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800937e:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8009382:	f000 fd3f 	bl	8009e04 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8009386:	4b68      	ldr	r3, [pc, #416]	; (8009528 <HAL_ETH_Init+0x234>)
 8009388:	4403      	add	r3, r0
 800938a:	4a68      	ldr	r2, [pc, #416]	; (800952c <HAL_ETH_Init+0x238>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d855      	bhi.n	800943c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8009390:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8009398:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800939c:	2100      	movs	r1, #0
 800939e:	4620      	mov	r0, r4
 80093a0:	f7ff ff6d 	bl	800927e <HAL_ETH_WritePHYRegister>
 80093a4:	4605      	mov	r5, r0
 80093a6:	2800      	cmp	r0, #0
 80093a8:	d160      	bne.n	800946c <HAL_ETH_Init+0x178>
  HAL_Delay(PHY_RESET_DELAY);
 80093aa:	20ff      	movs	r0, #255	; 0xff
 80093ac:	f7ff fc6c 	bl	8008c88 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80093b0:	6863      	ldr	r3, [r4, #4]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f000 8091 	beq.w	80094da <HAL_ETH_Init+0x1e6>
    tickstart = HAL_GetTick();
 80093b8:	f7ff fc60 	bl	8008c7c <HAL_GetTick>
 80093bc:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80093be:	aa01      	add	r2, sp, #4
 80093c0:	2101      	movs	r1, #1
 80093c2:	4620      	mov	r0, r4
 80093c4:	f7ff ff1f 	bl	8009206 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80093c8:	f7ff fc58 	bl	8008c7c <HAL_GetTick>
 80093cc:	1b80      	subs	r0, r0, r6
 80093ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80093d2:	4298      	cmp	r0, r3
 80093d4:	d852      	bhi.n	800947c <HAL_ETH_Init+0x188>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80093d6:	9b01      	ldr	r3, [sp, #4]
 80093d8:	f013 0f04 	tst.w	r3, #4
 80093dc:	d0ef      	beq.n	80093be <HAL_ETH_Init+0xca>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80093de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80093e2:	2100      	movs	r1, #0
 80093e4:	4620      	mov	r0, r4
 80093e6:	f7ff ff4a 	bl	800927e <HAL_ETH_WritePHYRegister>
 80093ea:	2800      	cmp	r0, #0
 80093ec:	d152      	bne.n	8009494 <HAL_ETH_Init+0x1a0>
    tickstart = HAL_GetTick();
 80093ee:	f7ff fc45 	bl	8008c7c <HAL_GetTick>
 80093f2:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80093f4:	aa01      	add	r2, sp, #4
 80093f6:	2101      	movs	r1, #1
 80093f8:	4620      	mov	r0, r4
 80093fa:	f7ff ff04 	bl	8009206 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80093fe:	f7ff fc3d 	bl	8008c7c <HAL_GetTick>
 8009402:	1b80      	subs	r0, r0, r6
 8009404:	f241 3388 	movw	r3, #5000	; 0x1388
 8009408:	4298      	cmp	r0, r3
 800940a:	d84b      	bhi.n	80094a4 <HAL_ETH_Init+0x1b0>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800940c:	9b01      	ldr	r3, [sp, #4]
 800940e:	f013 0f20 	tst.w	r3, #32
 8009412:	d0ef      	beq.n	80093f4 <HAL_ETH_Init+0x100>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8009414:	aa01      	add	r2, sp, #4
 8009416:	2110      	movs	r1, #16
 8009418:	4620      	mov	r0, r4
 800941a:	f7ff fef4 	bl	8009206 <HAL_ETH_ReadPHYRegister>
 800941e:	2800      	cmp	r0, #0
 8009420:	d14c      	bne.n	80094bc <HAL_ETH_Init+0x1c8>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8009422:	9b01      	ldr	r3, [sp, #4]
 8009424:	f013 0f04 	tst.w	r3, #4
 8009428:	d050      	beq.n	80094cc <HAL_ETH_Init+0x1d8>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800942a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800942e:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8009430:	f013 0f02 	tst.w	r3, #2
 8009434:	d04d      	beq.n	80094d2 <HAL_ETH_Init+0x1de>
      (heth->Init).Speed = ETH_SPEED_10M; 
 8009436:	2300      	movs	r3, #0
 8009438:	60a3      	str	r3, [r4, #8]
 800943a:	e05e      	b.n	80094fa <HAL_ETH_Init+0x206>
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800943c:	4b3c      	ldr	r3, [pc, #240]	; (8009530 <HAL_ETH_Init+0x23c>)
 800943e:	4403      	add	r3, r0
 8009440:	4a3c      	ldr	r2, [pc, #240]	; (8009534 <HAL_ETH_Init+0x240>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d802      	bhi.n	800944c <HAL_ETH_Init+0x158>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8009446:	f045 050c 	orr.w	r5, r5, #12
 800944a:	e7a3      	b.n	8009394 <HAL_ETH_Init+0xa0>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800944c:	4b3a      	ldr	r3, [pc, #232]	; (8009538 <HAL_ETH_Init+0x244>)
 800944e:	4403      	add	r3, r0
 8009450:	4a3a      	ldr	r2, [pc, #232]	; (800953c <HAL_ETH_Init+0x248>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d99e      	bls.n	8009394 <HAL_ETH_Init+0xa0>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8009456:	4b3a      	ldr	r3, [pc, #232]	; (8009540 <HAL_ETH_Init+0x24c>)
 8009458:	4403      	add	r3, r0
 800945a:	4a3a      	ldr	r2, [pc, #232]	; (8009544 <HAL_ETH_Init+0x250>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d802      	bhi.n	8009466 <HAL_ETH_Init+0x172>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8009460:	f045 0504 	orr.w	r5, r5, #4
 8009464:	e796      	b.n	8009394 <HAL_ETH_Init+0xa0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8009466:	f045 0510 	orr.w	r5, r5, #16
 800946a:	e793      	b.n	8009394 <HAL_ETH_Init+0xa0>
    ETH_MACDMAConfig(heth, err);
 800946c:	2101      	movs	r1, #1
 800946e:	4620      	mov	r0, r4
 8009470:	f7ff fcb6 	bl	8008de0 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 8009474:	2501      	movs	r5, #1
 8009476:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 800947a:	e777      	b.n	800936c <HAL_ETH_Init+0x78>
        ETH_MACDMAConfig(heth, err);
 800947c:	2101      	movs	r1, #1
 800947e:	4620      	mov	r0, r4
 8009480:	f7ff fcae 	bl	8008de0 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8009484:	2301      	movs	r3, #1
 8009486:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800948a:	2300      	movs	r3, #0
 800948c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8009490:	2503      	movs	r5, #3
 8009492:	e76b      	b.n	800936c <HAL_ETH_Init+0x78>
      ETH_MACDMAConfig(heth, err);
 8009494:	2101      	movs	r1, #1
 8009496:	4620      	mov	r0, r4
 8009498:	f7ff fca2 	bl	8008de0 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800949c:	2501      	movs	r5, #1
 800949e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 80094a2:	e763      	b.n	800936c <HAL_ETH_Init+0x78>
        ETH_MACDMAConfig(heth, err);
 80094a4:	2101      	movs	r1, #1
 80094a6:	4620      	mov	r0, r4
 80094a8:	f7ff fc9a 	bl	8008de0 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 80094ac:	2301      	movs	r3, #1
 80094ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 80094b2:	2300      	movs	r3, #0
 80094b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 80094b8:	2503      	movs	r5, #3
 80094ba:	e757      	b.n	800936c <HAL_ETH_Init+0x78>
      ETH_MACDMAConfig(heth, err);
 80094bc:	2101      	movs	r1, #1
 80094be:	4620      	mov	r0, r4
 80094c0:	f7ff fc8e 	bl	8008de0 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80094c4:	2501      	movs	r5, #1
 80094c6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 80094ca:	e74f      	b.n	800936c <HAL_ETH_Init+0x78>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80094cc:	2200      	movs	r2, #0
 80094ce:	60e2      	str	r2, [r4, #12]
 80094d0:	e7ae      	b.n	8009430 <HAL_ETH_Init+0x13c>
      (heth->Init).Speed = ETH_SPEED_100M;
 80094d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80094d6:	60a3      	str	r3, [r4, #8]
 80094d8:	e00f      	b.n	80094fa <HAL_ETH_Init+0x206>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80094da:	68e2      	ldr	r2, [r4, #12]
 80094dc:	f3c2 02cf 	ubfx	r2, r2, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80094e0:	68a3      	ldr	r3, [r4, #8]
 80094e2:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80094e6:	431a      	orrs	r2, r3
 80094e8:	2100      	movs	r1, #0
 80094ea:	4620      	mov	r0, r4
 80094ec:	f7ff fec7 	bl	800927e <HAL_ETH_WritePHYRegister>
 80094f0:	b958      	cbnz	r0, 800950a <HAL_ETH_Init+0x216>
    HAL_Delay(PHY_CONFIG_DELAY);
 80094f2:	f640 70ff 	movw	r0, #4095	; 0xfff
 80094f6:	f7ff fbc7 	bl	8008c88 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 80094fa:	2100      	movs	r1, #0
 80094fc:	4620      	mov	r0, r4
 80094fe:	f7ff fc6f 	bl	8008de0 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8009502:	2301      	movs	r3, #1
 8009504:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8009508:	e730      	b.n	800936c <HAL_ETH_Init+0x78>
      ETH_MACDMAConfig(heth, err);
 800950a:	2101      	movs	r1, #1
 800950c:	4620      	mov	r0, r4
 800950e:	f7ff fc67 	bl	8008de0 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8009512:	2501      	movs	r5, #1
 8009514:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8009518:	e728      	b.n	800936c <HAL_ETH_Init+0x78>
    return HAL_ERROR;
 800951a:	2501      	movs	r5, #1
 800951c:	e726      	b.n	800936c <HAL_ETH_Init+0x78>
 800951e:	bf00      	nop
 8009520:	40023800 	.word	0x40023800
 8009524:	40013800 	.word	0x40013800
 8009528:	feced300 	.word	0xfeced300
 800952c:	00e4e1bf 	.word	0x00e4e1bf
 8009530:	fde9f140 	.word	0xfde9f140
 8009534:	017d783f 	.word	0x017d783f
 8009538:	fc6c7900 	.word	0xfc6c7900
 800953c:	026259ff 	.word	0x026259ff
 8009540:	fa0a1f00 	.word	0xfa0a1f00
 8009544:	02faf07f 	.word	0x02faf07f

08009548 <HAL_ETH_Start>:
{  
 8009548:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 800954a:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800954e:	2b01      	cmp	r3, #1
 8009550:	d01a      	beq.n	8009588 <HAL_ETH_Start+0x40>
 8009552:	4604      	mov	r4, r0
 8009554:	2501      	movs	r5, #1
 8009556:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800955a:	2302      	movs	r3, #2
 800955c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 8009560:	f7ff fcca 	bl	8008ef8 <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 8009564:	4620      	mov	r0, r4
 8009566:	f7ff fcdc 	bl	8008f22 <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 800956a:	4620      	mov	r0, r4
 800956c:	f7ff fcee 	bl	8008f4c <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 8009570:	4620      	mov	r0, r4
 8009572:	f7ff fc25 	bl	8008dc0 <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 8009576:	4620      	mov	r0, r4
 8009578:	f7ff fc2a 	bl	8008dd0 <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 800957c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8009580:	2000      	movs	r0, #0
 8009582:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
}
 8009586:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(heth);
 8009588:	2002      	movs	r0, #2
 800958a:	e7fc      	b.n	8009586 <HAL_ETH_Start+0x3e>

0800958c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800958c:	2300      	movs	r3, #0
 800958e:	2b0f      	cmp	r3, #15
 8009590:	f200 80e2 	bhi.w	8009758 <HAL_GPIO_Init+0x1cc>
{
 8009594:	b4f0      	push	{r4, r5, r6, r7}
 8009596:	b082      	sub	sp, #8
 8009598:	e039      	b.n	800960e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800959a:	2209      	movs	r2, #9
 800959c:	e000      	b.n	80095a0 <HAL_GPIO_Init+0x14>
 800959e:	2200      	movs	r2, #0
 80095a0:	40b2      	lsls	r2, r6
 80095a2:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80095a4:	3402      	adds	r4, #2
 80095a6:	4e6d      	ldr	r6, [pc, #436]	; (800975c <HAL_GPIO_Init+0x1d0>)
 80095a8:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80095ac:	4a6c      	ldr	r2, [pc, #432]	; (8009760 <HAL_GPIO_Init+0x1d4>)
 80095ae:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80095b0:	43ea      	mvns	r2, r5
 80095b2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80095b6:	684f      	ldr	r7, [r1, #4]
 80095b8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80095bc:	d001      	beq.n	80095c2 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80095be:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80095c2:	4c67      	ldr	r4, [pc, #412]	; (8009760 <HAL_GPIO_Init+0x1d4>)
 80095c4:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80095c6:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80095c8:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80095cc:	684f      	ldr	r7, [r1, #4]
 80095ce:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80095d2:	d001      	beq.n	80095d8 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80095d4:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80095d8:	4c61      	ldr	r4, [pc, #388]	; (8009760 <HAL_GPIO_Init+0x1d4>)
 80095da:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80095dc:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80095de:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80095e2:	684f      	ldr	r7, [r1, #4]
 80095e4:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80095e8:	d001      	beq.n	80095ee <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80095ea:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80095ee:	4c5c      	ldr	r4, [pc, #368]	; (8009760 <HAL_GPIO_Init+0x1d4>)
 80095f0:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80095f2:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80095f4:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80095f6:	684e      	ldr	r6, [r1, #4]
 80095f8:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80095fc:	d001      	beq.n	8009602 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80095fe:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8009602:	4c57      	ldr	r4, [pc, #348]	; (8009760 <HAL_GPIO_Init+0x1d4>)
 8009604:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009606:	3301      	adds	r3, #1
 8009608:	2b0f      	cmp	r3, #15
 800960a:	f200 80a2 	bhi.w	8009752 <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 800960e:	2201      	movs	r2, #1
 8009610:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009612:	680c      	ldr	r4, [r1, #0]
 8009614:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8009618:	42aa      	cmp	r2, r5
 800961a:	d1f4      	bne.n	8009606 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800961c:	684c      	ldr	r4, [r1, #4]
 800961e:	2c12      	cmp	r4, #18
 8009620:	bf18      	it	ne
 8009622:	2c02      	cmpne	r4, #2
 8009624:	d110      	bne.n	8009648 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8009626:	08de      	lsrs	r6, r3, #3
 8009628:	3608      	adds	r6, #8
 800962a:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800962e:	f003 0407 	and.w	r4, r3, #7
 8009632:	00a7      	lsls	r7, r4, #2
 8009634:	240f      	movs	r4, #15
 8009636:	40bc      	lsls	r4, r7
 8009638:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800963c:	690c      	ldr	r4, [r1, #16]
 800963e:	40bc      	lsls	r4, r7
 8009640:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8009644:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8009648:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800964a:	005f      	lsls	r7, r3, #1
 800964c:	2603      	movs	r6, #3
 800964e:	40be      	lsls	r6, r7
 8009650:	43f6      	mvns	r6, r6
 8009652:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009656:	684c      	ldr	r4, [r1, #4]
 8009658:	f004 0403 	and.w	r4, r4, #3
 800965c:	40bc      	lsls	r4, r7
 800965e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8009662:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009664:	684c      	ldr	r4, [r1, #4]
 8009666:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800966a:	2c11      	cmp	r4, #17
 800966c:	bf18      	it	ne
 800966e:	f1bc 0f01 	cmpne.w	ip, #1
 8009672:	d901      	bls.n	8009678 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009674:	2c12      	cmp	r4, #18
 8009676:	d111      	bne.n	800969c <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8009678:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800967a:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 800967e:	68cc      	ldr	r4, [r1, #12]
 8009680:	40bc      	lsls	r4, r7
 8009682:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8009686:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8009688:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800968a:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800968e:	684c      	ldr	r4, [r1, #4]
 8009690:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8009694:	409a      	lsls	r2, r3
 8009696:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 800969a:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800969c:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800969e:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80096a0:	688a      	ldr	r2, [r1, #8]
 80096a2:	40ba      	lsls	r2, r7
 80096a4:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 80096a6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80096a8:	684a      	ldr	r2, [r1, #4]
 80096aa:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80096ae:	d0aa      	beq.n	8009606 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096b0:	4a2c      	ldr	r2, [pc, #176]	; (8009764 <HAL_GPIO_Init+0x1d8>)
 80096b2:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80096b4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80096b8:	6454      	str	r4, [r2, #68]	; 0x44
 80096ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80096bc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80096c0:	9201      	str	r2, [sp, #4]
 80096c2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80096c4:	089c      	lsrs	r4, r3, #2
 80096c6:	1ca6      	adds	r6, r4, #2
 80096c8:	4a24      	ldr	r2, [pc, #144]	; (800975c <HAL_GPIO_Init+0x1d0>)
 80096ca:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80096ce:	f003 0203 	and.w	r2, r3, #3
 80096d2:	0096      	lsls	r6, r2, #2
 80096d4:	220f      	movs	r2, #15
 80096d6:	40b2      	lsls	r2, r6
 80096d8:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80096dc:	4a22      	ldr	r2, [pc, #136]	; (8009768 <HAL_GPIO_Init+0x1dc>)
 80096de:	4290      	cmp	r0, r2
 80096e0:	f43f af5d 	beq.w	800959e <HAL_GPIO_Init+0x12>
 80096e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096e8:	4290      	cmp	r0, r2
 80096ea:	d022      	beq.n	8009732 <HAL_GPIO_Init+0x1a6>
 80096ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096f0:	4290      	cmp	r0, r2
 80096f2:	d020      	beq.n	8009736 <HAL_GPIO_Init+0x1aa>
 80096f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096f8:	4290      	cmp	r0, r2
 80096fa:	d01e      	beq.n	800973a <HAL_GPIO_Init+0x1ae>
 80096fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009700:	4290      	cmp	r0, r2
 8009702:	d01c      	beq.n	800973e <HAL_GPIO_Init+0x1b2>
 8009704:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009708:	4290      	cmp	r0, r2
 800970a:	d01a      	beq.n	8009742 <HAL_GPIO_Init+0x1b6>
 800970c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009710:	4290      	cmp	r0, r2
 8009712:	d018      	beq.n	8009746 <HAL_GPIO_Init+0x1ba>
 8009714:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009718:	4290      	cmp	r0, r2
 800971a:	d016      	beq.n	800974a <HAL_GPIO_Init+0x1be>
 800971c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009720:	4290      	cmp	r0, r2
 8009722:	d014      	beq.n	800974e <HAL_GPIO_Init+0x1c2>
 8009724:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009728:	4290      	cmp	r0, r2
 800972a:	f43f af36 	beq.w	800959a <HAL_GPIO_Init+0xe>
 800972e:	220a      	movs	r2, #10
 8009730:	e736      	b.n	80095a0 <HAL_GPIO_Init+0x14>
 8009732:	2201      	movs	r2, #1
 8009734:	e734      	b.n	80095a0 <HAL_GPIO_Init+0x14>
 8009736:	2202      	movs	r2, #2
 8009738:	e732      	b.n	80095a0 <HAL_GPIO_Init+0x14>
 800973a:	2203      	movs	r2, #3
 800973c:	e730      	b.n	80095a0 <HAL_GPIO_Init+0x14>
 800973e:	2204      	movs	r2, #4
 8009740:	e72e      	b.n	80095a0 <HAL_GPIO_Init+0x14>
 8009742:	2205      	movs	r2, #5
 8009744:	e72c      	b.n	80095a0 <HAL_GPIO_Init+0x14>
 8009746:	2206      	movs	r2, #6
 8009748:	e72a      	b.n	80095a0 <HAL_GPIO_Init+0x14>
 800974a:	2207      	movs	r2, #7
 800974c:	e728      	b.n	80095a0 <HAL_GPIO_Init+0x14>
 800974e:	2208      	movs	r2, #8
 8009750:	e726      	b.n	80095a0 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8009752:	b002      	add	sp, #8
 8009754:	bcf0      	pop	{r4, r5, r6, r7}
 8009756:	4770      	bx	lr
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	40013800 	.word	0x40013800
 8009760:	40013c00 	.word	0x40013c00
 8009764:	40023800 	.word	0x40023800
 8009768:	40020000 	.word	0x40020000

0800976c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800976c:	b912      	cbnz	r2, 8009774 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800976e:	0409      	lsls	r1, r1, #16
 8009770:	6181      	str	r1, [r0, #24]
  }
}
 8009772:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8009774:	6181      	str	r1, [r0, #24]
 8009776:	4770      	bx	lr

08009778 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009778:	b510      	push	{r4, lr}
 800977a:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800977c:	4b1b      	ldr	r3, [pc, #108]	; (80097ec <HAL_PWREx_EnableOverDrive+0x74>)
 800977e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009780:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009784:	641a      	str	r2, [r3, #64]	; 0x40
 8009786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800978c:	9301      	str	r3, [sp, #4]
 800978e:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009790:	4a17      	ldr	r2, [pc, #92]	; (80097f0 <HAL_PWREx_EnableOverDrive+0x78>)
 8009792:	6813      	ldr	r3, [r2, #0]
 8009794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009798:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800979a:	f7ff fa6f 	bl	8008c7c <HAL_GetTick>
 800979e:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80097a0:	4b13      	ldr	r3, [pc, #76]	; (80097f0 <HAL_PWREx_EnableOverDrive+0x78>)
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80097a8:	d108      	bne.n	80097bc <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80097aa:	f7ff fa67 	bl	8008c7c <HAL_GetTick>
 80097ae:	1b00      	subs	r0, r0, r4
 80097b0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80097b4:	d9f4      	bls.n	80097a0 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80097b6:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80097b8:	b002      	add	sp, #8
 80097ba:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80097bc:	4a0c      	ldr	r2, [pc, #48]	; (80097f0 <HAL_PWREx_EnableOverDrive+0x78>)
 80097be:	6813      	ldr	r3, [r2, #0]
 80097c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097c4:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80097c6:	f7ff fa59 	bl	8008c7c <HAL_GetTick>
 80097ca:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80097cc:	4b08      	ldr	r3, [pc, #32]	; (80097f0 <HAL_PWREx_EnableOverDrive+0x78>)
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80097d4:	d107      	bne.n	80097e6 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80097d6:	f7ff fa51 	bl	8008c7c <HAL_GetTick>
 80097da:	1b00      	subs	r0, r0, r4
 80097dc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80097e0:	d9f4      	bls.n	80097cc <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 80097e2:	2003      	movs	r0, #3
 80097e4:	e7e8      	b.n	80097b8 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 80097e6:	2000      	movs	r0, #0
 80097e8:	e7e6      	b.n	80097b8 <HAL_PWREx_EnableOverDrive+0x40>
 80097ea:	bf00      	nop
 80097ec:	40023800 	.word	0x40023800
 80097f0:	40007000 	.word	0x40007000

080097f4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80097f4:	2800      	cmp	r0, #0
 80097f6:	f000 81dc 	beq.w	8009bb2 <HAL_RCC_OscConfig+0x3be>
{
 80097fa:	b570      	push	{r4, r5, r6, lr}
 80097fc:	b082      	sub	sp, #8
 80097fe:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009800:	6803      	ldr	r3, [r0, #0]
 8009802:	f013 0f01 	tst.w	r3, #1
 8009806:	d029      	beq.n	800985c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009808:	4ba2      	ldr	r3, [pc, #648]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f003 030c 	and.w	r3, r3, #12
 8009810:	2b04      	cmp	r3, #4
 8009812:	d01a      	beq.n	800984a <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009814:	4b9f      	ldr	r3, [pc, #636]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f003 030c 	and.w	r3, r3, #12
 800981c:	2b08      	cmp	r3, #8
 800981e:	d00f      	beq.n	8009840 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009820:	6863      	ldr	r3, [r4, #4]
 8009822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009826:	d040      	beq.n	80098aa <HAL_RCC_OscConfig+0xb6>
 8009828:	2b00      	cmp	r3, #0
 800982a:	d154      	bne.n	80098d6 <HAL_RCC_OscConfig+0xe2>
 800982c:	4b99      	ldr	r3, [pc, #612]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009834:	601a      	str	r2, [r3, #0]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800983c:	601a      	str	r2, [r3, #0]
 800983e:	e039      	b.n	80098b4 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009840:	4b94      	ldr	r3, [pc, #592]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8009848:	d0ea      	beq.n	8009820 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800984a:	4b92      	ldr	r3, [pc, #584]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009852:	d003      	beq.n	800985c <HAL_RCC_OscConfig+0x68>
 8009854:	6863      	ldr	r3, [r4, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	f000 81ad 	beq.w	8009bb6 <HAL_RCC_OscConfig+0x3c2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800985c:	6823      	ldr	r3, [r4, #0]
 800985e:	f013 0f02 	tst.w	r3, #2
 8009862:	d075      	beq.n	8009950 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009864:	4b8b      	ldr	r3, [pc, #556]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	f013 0f0c 	tst.w	r3, #12
 800986c:	d05e      	beq.n	800992c <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800986e:	4b89      	ldr	r3, [pc, #548]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	f003 030c 	and.w	r3, r3, #12
 8009876:	2b08      	cmp	r3, #8
 8009878:	d053      	beq.n	8009922 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800987a:	68e3      	ldr	r3, [r4, #12]
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 808a 	beq.w	8009996 <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009882:	4a84      	ldr	r2, [pc, #528]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 8009884:	6813      	ldr	r3, [r2, #0]
 8009886:	f043 0301 	orr.w	r3, r3, #1
 800988a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800988c:	f7ff f9f6 	bl	8008c7c <HAL_GetTick>
 8009890:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009892:	4b80      	ldr	r3, [pc, #512]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f013 0f02 	tst.w	r3, #2
 800989a:	d173      	bne.n	8009984 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800989c:	f7ff f9ee 	bl	8008c7c <HAL_GetTick>
 80098a0:	1b40      	subs	r0, r0, r5
 80098a2:	2802      	cmp	r0, #2
 80098a4:	d9f5      	bls.n	8009892 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80098a6:	2003      	movs	r0, #3
 80098a8:	e188      	b.n	8009bbc <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098aa:	4a7a      	ldr	r2, [pc, #488]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 80098ac:	6813      	ldr	r3, [r2, #0]
 80098ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098b2:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098b4:	6863      	ldr	r3, [r4, #4]
 80098b6:	b32b      	cbz	r3, 8009904 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80098b8:	f7ff f9e0 	bl	8008c7c <HAL_GetTick>
 80098bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098be:	4b75      	ldr	r3, [pc, #468]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80098c6:	d1c9      	bne.n	800985c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80098c8:	f7ff f9d8 	bl	8008c7c <HAL_GetTick>
 80098cc:	1b40      	subs	r0, r0, r5
 80098ce:	2864      	cmp	r0, #100	; 0x64
 80098d0:	d9f5      	bls.n	80098be <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80098d2:	2003      	movs	r0, #3
 80098d4:	e172      	b.n	8009bbc <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098da:	d009      	beq.n	80098f0 <HAL_RCC_OscConfig+0xfc>
 80098dc:	4b6d      	ldr	r3, [pc, #436]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	e7e1      	b.n	80098b4 <HAL_RCC_OscConfig+0xc0>
 80098f0:	4b68      	ldr	r3, [pc, #416]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80098f8:	601a      	str	r2, [r3, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009900:	601a      	str	r2, [r3, #0]
 8009902:	e7d7      	b.n	80098b4 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8009904:	f7ff f9ba 	bl	8008c7c <HAL_GetTick>
 8009908:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800990a:	4b62      	ldr	r3, [pc, #392]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009912:	d0a3      	beq.n	800985c <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009914:	f7ff f9b2 	bl	8008c7c <HAL_GetTick>
 8009918:	1b40      	subs	r0, r0, r5
 800991a:	2864      	cmp	r0, #100	; 0x64
 800991c:	d9f5      	bls.n	800990a <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800991e:	2003      	movs	r0, #3
 8009920:	e14c      	b.n	8009bbc <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009922:	4b5c      	ldr	r3, [pc, #368]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800992a:	d1a6      	bne.n	800987a <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800992c:	4b59      	ldr	r3, [pc, #356]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f013 0f02 	tst.w	r3, #2
 8009934:	d004      	beq.n	8009940 <HAL_RCC_OscConfig+0x14c>
 8009936:	68e3      	ldr	r3, [r4, #12]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d001      	beq.n	8009940 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 800993c:	2001      	movs	r0, #1
 800993e:	e13d      	b.n	8009bbc <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009940:	4a54      	ldr	r2, [pc, #336]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 8009942:	6813      	ldr	r3, [r2, #0]
 8009944:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009948:	6921      	ldr	r1, [r4, #16]
 800994a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800994e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009950:	6823      	ldr	r3, [r4, #0]
 8009952:	f013 0f08 	tst.w	r3, #8
 8009956:	d046      	beq.n	80099e6 <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009958:	6963      	ldr	r3, [r4, #20]
 800995a:	b383      	cbz	r3, 80099be <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800995c:	4a4d      	ldr	r2, [pc, #308]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 800995e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8009960:	f043 0301 	orr.w	r3, r3, #1
 8009964:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009966:	f7ff f989 	bl	8008c7c <HAL_GetTick>
 800996a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800996c:	4b49      	ldr	r3, [pc, #292]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 800996e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009970:	f013 0f02 	tst.w	r3, #2
 8009974:	d137      	bne.n	80099e6 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009976:	f7ff f981 	bl	8008c7c <HAL_GetTick>
 800997a:	1b40      	subs	r0, r0, r5
 800997c:	2802      	cmp	r0, #2
 800997e:	d9f5      	bls.n	800996c <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8009980:	2003      	movs	r0, #3
 8009982:	e11b      	b.n	8009bbc <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009984:	4a43      	ldr	r2, [pc, #268]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 8009986:	6813      	ldr	r3, [r2, #0]
 8009988:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800998c:	6921      	ldr	r1, [r4, #16]
 800998e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009992:	6013      	str	r3, [r2, #0]
 8009994:	e7dc      	b.n	8009950 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8009996:	4a3f      	ldr	r2, [pc, #252]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 8009998:	6813      	ldr	r3, [r2, #0]
 800999a:	f023 0301 	bic.w	r3, r3, #1
 800999e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80099a0:	f7ff f96c 	bl	8008c7c <HAL_GetTick>
 80099a4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099a6:	4b3b      	ldr	r3, [pc, #236]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f013 0f02 	tst.w	r3, #2
 80099ae:	d0cf      	beq.n	8009950 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099b0:	f7ff f964 	bl	8008c7c <HAL_GetTick>
 80099b4:	1b40      	subs	r0, r0, r5
 80099b6:	2802      	cmp	r0, #2
 80099b8:	d9f5      	bls.n	80099a6 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 80099ba:	2003      	movs	r0, #3
 80099bc:	e0fe      	b.n	8009bbc <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80099be:	4a35      	ldr	r2, [pc, #212]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 80099c0:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80099c2:	f023 0301 	bic.w	r3, r3, #1
 80099c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099c8:	f7ff f958 	bl	8008c7c <HAL_GetTick>
 80099cc:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099ce:	4b31      	ldr	r3, [pc, #196]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 80099d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099d2:	f013 0f02 	tst.w	r3, #2
 80099d6:	d006      	beq.n	80099e6 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80099d8:	f7ff f950 	bl	8008c7c <HAL_GetTick>
 80099dc:	1b40      	subs	r0, r0, r5
 80099de:	2802      	cmp	r0, #2
 80099e0:	d9f5      	bls.n	80099ce <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 80099e2:	2003      	movs	r0, #3
 80099e4:	e0ea      	b.n	8009bbc <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	f013 0f04 	tst.w	r3, #4
 80099ec:	d07e      	beq.n	8009aec <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099ee:	4b29      	ldr	r3, [pc, #164]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 80099f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80099f6:	d11e      	bne.n	8009a36 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80099f8:	4b26      	ldr	r3, [pc, #152]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 80099fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009a00:	641a      	str	r2, [r3, #64]	; 0x40
 8009a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a08:	9301      	str	r3, [sp, #4]
 8009a0a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009a0c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009a0e:	4b22      	ldr	r3, [pc, #136]	; (8009a98 <HAL_RCC_OscConfig+0x2a4>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009a16:	d010      	beq.n	8009a3a <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a18:	68a3      	ldr	r3, [r4, #8]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d021      	beq.n	8009a62 <HAL_RCC_OscConfig+0x26e>
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d13c      	bne.n	8009a9c <HAL_RCC_OscConfig+0x2a8>
 8009a22:	4b1c      	ldr	r3, [pc, #112]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 8009a24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a26:	f022 0201 	bic.w	r2, r2, #1
 8009a2a:	671a      	str	r2, [r3, #112]	; 0x70
 8009a2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a2e:	f022 0204 	bic.w	r2, r2, #4
 8009a32:	671a      	str	r2, [r3, #112]	; 0x70
 8009a34:	e01a      	b.n	8009a6c <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 8009a36:	2500      	movs	r5, #0
 8009a38:	e7e9      	b.n	8009a0e <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8009a3a:	4a17      	ldr	r2, [pc, #92]	; (8009a98 <HAL_RCC_OscConfig+0x2a4>)
 8009a3c:	6813      	ldr	r3, [r2, #0]
 8009a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a42:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8009a44:	f7ff f91a 	bl	8008c7c <HAL_GetTick>
 8009a48:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009a4a:	4b13      	ldr	r3, [pc, #76]	; (8009a98 <HAL_RCC_OscConfig+0x2a4>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009a52:	d1e1      	bne.n	8009a18 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009a54:	f7ff f912 	bl	8008c7c <HAL_GetTick>
 8009a58:	1b80      	subs	r0, r0, r6
 8009a5a:	2864      	cmp	r0, #100	; 0x64
 8009a5c:	d9f5      	bls.n	8009a4a <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8009a5e:	2003      	movs	r0, #3
 8009a60:	e0ac      	b.n	8009bbc <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a62:	4a0c      	ldr	r2, [pc, #48]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 8009a64:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8009a66:	f043 0301 	orr.w	r3, r3, #1
 8009a6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a6c:	68a3      	ldr	r3, [r4, #8]
 8009a6e:	b35b      	cbz	r3, 8009ac8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a70:	f7ff f904 	bl	8008c7c <HAL_GetTick>
 8009a74:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a76:	4b07      	ldr	r3, [pc, #28]	; (8009a94 <HAL_RCC_OscConfig+0x2a0>)
 8009a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a7a:	f013 0f02 	tst.w	r3, #2
 8009a7e:	d134      	bne.n	8009aea <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a80:	f7ff f8fc 	bl	8008c7c <HAL_GetTick>
 8009a84:	1b80      	subs	r0, r0, r6
 8009a86:	f241 3388 	movw	r3, #5000	; 0x1388
 8009a8a:	4298      	cmp	r0, r3
 8009a8c:	d9f3      	bls.n	8009a76 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8009a8e:	2003      	movs	r0, #3
 8009a90:	e094      	b.n	8009bbc <HAL_RCC_OscConfig+0x3c8>
 8009a92:	bf00      	nop
 8009a94:	40023800 	.word	0x40023800
 8009a98:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a9c:	2b05      	cmp	r3, #5
 8009a9e:	d009      	beq.n	8009ab4 <HAL_RCC_OscConfig+0x2c0>
 8009aa0:	4b48      	ldr	r3, [pc, #288]	; (8009bc4 <HAL_RCC_OscConfig+0x3d0>)
 8009aa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009aa4:	f022 0201 	bic.w	r2, r2, #1
 8009aa8:	671a      	str	r2, [r3, #112]	; 0x70
 8009aaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009aac:	f022 0204 	bic.w	r2, r2, #4
 8009ab0:	671a      	str	r2, [r3, #112]	; 0x70
 8009ab2:	e7db      	b.n	8009a6c <HAL_RCC_OscConfig+0x278>
 8009ab4:	4b43      	ldr	r3, [pc, #268]	; (8009bc4 <HAL_RCC_OscConfig+0x3d0>)
 8009ab6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009ab8:	f042 0204 	orr.w	r2, r2, #4
 8009abc:	671a      	str	r2, [r3, #112]	; 0x70
 8009abe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009ac0:	f042 0201 	orr.w	r2, r2, #1
 8009ac4:	671a      	str	r2, [r3, #112]	; 0x70
 8009ac6:	e7d1      	b.n	8009a6c <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ac8:	f7ff f8d8 	bl	8008c7c <HAL_GetTick>
 8009acc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ace:	4b3d      	ldr	r3, [pc, #244]	; (8009bc4 <HAL_RCC_OscConfig+0x3d0>)
 8009ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ad2:	f013 0f02 	tst.w	r3, #2
 8009ad6:	d008      	beq.n	8009aea <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ad8:	f7ff f8d0 	bl	8008c7c <HAL_GetTick>
 8009adc:	1b80      	subs	r0, r0, r6
 8009ade:	f241 3388 	movw	r3, #5000	; 0x1388
 8009ae2:	4298      	cmp	r0, r3
 8009ae4:	d9f3      	bls.n	8009ace <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8009ae6:	2003      	movs	r0, #3
 8009ae8:	e068      	b.n	8009bbc <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009aea:	b9f5      	cbnz	r5, 8009b2a <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009aec:	69a3      	ldr	r3, [r4, #24]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d063      	beq.n	8009bba <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009af2:	4a34      	ldr	r2, [pc, #208]	; (8009bc4 <HAL_RCC_OscConfig+0x3d0>)
 8009af4:	6892      	ldr	r2, [r2, #8]
 8009af6:	f002 020c 	and.w	r2, r2, #12
 8009afa:	2a08      	cmp	r2, #8
 8009afc:	d060      	beq.n	8009bc0 <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d019      	beq.n	8009b36 <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b02:	4a30      	ldr	r2, [pc, #192]	; (8009bc4 <HAL_RCC_OscConfig+0x3d0>)
 8009b04:	6813      	ldr	r3, [r2, #0]
 8009b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b0c:	f7ff f8b6 	bl	8008c7c <HAL_GetTick>
 8009b10:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b12:	4b2c      	ldr	r3, [pc, #176]	; (8009bc4 <HAL_RCC_OscConfig+0x3d0>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009b1a:	d048      	beq.n	8009bae <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b1c:	f7ff f8ae 	bl	8008c7c <HAL_GetTick>
 8009b20:	1b00      	subs	r0, r0, r4
 8009b22:	2802      	cmp	r0, #2
 8009b24:	d9f5      	bls.n	8009b12 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8009b26:	2003      	movs	r0, #3
 8009b28:	e048      	b.n	8009bbc <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b2a:	4a26      	ldr	r2, [pc, #152]	; (8009bc4 <HAL_RCC_OscConfig+0x3d0>)
 8009b2c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b32:	6413      	str	r3, [r2, #64]	; 0x40
 8009b34:	e7da      	b.n	8009aec <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8009b36:	4a23      	ldr	r2, [pc, #140]	; (8009bc4 <HAL_RCC_OscConfig+0x3d0>)
 8009b38:	6813      	ldr	r3, [r2, #0]
 8009b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b3e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009b40:	f7ff f89c 	bl	8008c7c <HAL_GetTick>
 8009b44:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b46:	4b1f      	ldr	r3, [pc, #124]	; (8009bc4 <HAL_RCC_OscConfig+0x3d0>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009b4e:	d006      	beq.n	8009b5e <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b50:	f7ff f894 	bl	8008c7c <HAL_GetTick>
 8009b54:	1b40      	subs	r0, r0, r5
 8009b56:	2802      	cmp	r0, #2
 8009b58:	d9f5      	bls.n	8009b46 <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 8009b5a:	2003      	movs	r0, #3
 8009b5c:	e02e      	b.n	8009bbc <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b5e:	69e3      	ldr	r3, [r4, #28]
 8009b60:	6a22      	ldr	r2, [r4, #32]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009b66:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8009b6a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009b6c:	0852      	lsrs	r2, r2, #1
 8009b6e:	3a01      	subs	r2, #1
 8009b70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009b76:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009b7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009b7c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8009b80:	4a10      	ldr	r2, [pc, #64]	; (8009bc4 <HAL_RCC_OscConfig+0x3d0>)
 8009b82:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8009b84:	6813      	ldr	r3, [r2, #0]
 8009b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b8a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009b8c:	f7ff f876 	bl	8008c7c <HAL_GetTick>
 8009b90:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b92:	4b0c      	ldr	r3, [pc, #48]	; (8009bc4 <HAL_RCC_OscConfig+0x3d0>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009b9a:	d106      	bne.n	8009baa <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b9c:	f7ff f86e 	bl	8008c7c <HAL_GetTick>
 8009ba0:	1b00      	subs	r0, r0, r4
 8009ba2:	2802      	cmp	r0, #2
 8009ba4:	d9f5      	bls.n	8009b92 <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 8009ba6:	2003      	movs	r0, #3
 8009ba8:	e008      	b.n	8009bbc <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8009baa:	2000      	movs	r0, #0
 8009bac:	e006      	b.n	8009bbc <HAL_RCC_OscConfig+0x3c8>
 8009bae:	2000      	movs	r0, #0
 8009bb0:	e004      	b.n	8009bbc <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 8009bb2:	2001      	movs	r0, #1
}
 8009bb4:	4770      	bx	lr
        return HAL_ERROR;
 8009bb6:	2001      	movs	r0, #1
 8009bb8:	e000      	b.n	8009bbc <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 8009bba:	2000      	movs	r0, #0
}
 8009bbc:	b002      	add	sp, #8
 8009bbe:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8009bc0:	2001      	movs	r0, #1
 8009bc2:	e7fb      	b.n	8009bbc <HAL_RCC_OscConfig+0x3c8>
 8009bc4:	40023800 	.word	0x40023800

08009bc8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009bc8:	4b32      	ldr	r3, [pc, #200]	; (8009c94 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f003 030c 	and.w	r3, r3, #12
 8009bd0:	2b04      	cmp	r3, #4
 8009bd2:	d05c      	beq.n	8009c8e <HAL_RCC_GetSysClockFreq+0xc6>
 8009bd4:	2b08      	cmp	r3, #8
 8009bd6:	d001      	beq.n	8009bdc <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009bd8:	482f      	ldr	r0, [pc, #188]	; (8009c98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009bda:	4770      	bx	lr
{
 8009bdc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009be0:	4b2c      	ldr	r3, [pc, #176]	; (8009c94 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009be2:	685a      	ldr	r2, [r3, #4]
 8009be4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8009bee:	d02b      	beq.n	8009c48 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009bf0:	4b28      	ldr	r3, [pc, #160]	; (8009c94 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8009bf8:	461e      	mov	r6, r3
 8009bfa:	2700      	movs	r7, #0
 8009bfc:	015c      	lsls	r4, r3, #5
 8009bfe:	2500      	movs	r5, #0
 8009c00:	1ae4      	subs	r4, r4, r3
 8009c02:	eb65 0507 	sbc.w	r5, r5, r7
 8009c06:	01a9      	lsls	r1, r5, #6
 8009c08:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8009c0c:	01a0      	lsls	r0, r4, #6
 8009c0e:	1b00      	subs	r0, r0, r4
 8009c10:	eb61 0105 	sbc.w	r1, r1, r5
 8009c14:	00cb      	lsls	r3, r1, #3
 8009c16:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8009c1a:	00c4      	lsls	r4, r0, #3
 8009c1c:	19a0      	adds	r0, r4, r6
 8009c1e:	eb43 0107 	adc.w	r1, r3, r7
 8009c22:	024b      	lsls	r3, r1, #9
 8009c24:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8009c28:	0244      	lsls	r4, r0, #9
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	2300      	movs	r3, #0
 8009c30:	f7fe fb04 	bl	800823c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8009c34:	4b17      	ldr	r3, [pc, #92]	; (8009c94 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8009c40:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8009c44:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c48:	4b12      	ldr	r3, [pc, #72]	; (8009c94 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8009c50:	461e      	mov	r6, r3
 8009c52:	2700      	movs	r7, #0
 8009c54:	015c      	lsls	r4, r3, #5
 8009c56:	2500      	movs	r5, #0
 8009c58:	1ae4      	subs	r4, r4, r3
 8009c5a:	eb65 0507 	sbc.w	r5, r5, r7
 8009c5e:	01a9      	lsls	r1, r5, #6
 8009c60:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8009c64:	01a0      	lsls	r0, r4, #6
 8009c66:	1b00      	subs	r0, r0, r4
 8009c68:	eb61 0105 	sbc.w	r1, r1, r5
 8009c6c:	00cb      	lsls	r3, r1, #3
 8009c6e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8009c72:	00c4      	lsls	r4, r0, #3
 8009c74:	19a0      	adds	r0, r4, r6
 8009c76:	eb43 0107 	adc.w	r1, r3, r7
 8009c7a:	028b      	lsls	r3, r1, #10
 8009c7c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8009c80:	0284      	lsls	r4, r0, #10
 8009c82:	4620      	mov	r0, r4
 8009c84:	4619      	mov	r1, r3
 8009c86:	2300      	movs	r3, #0
 8009c88:	f7fe fad8 	bl	800823c <__aeabi_uldivmod>
 8009c8c:	e7d2      	b.n	8009c34 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8009c8e:	4803      	ldr	r0, [pc, #12]	; (8009c9c <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	40023800 	.word	0x40023800
 8009c98:	00f42400 	.word	0x00f42400
 8009c9c:	007a1200 	.word	0x007a1200

08009ca0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	f000 80a2 	beq.w	8009dea <HAL_RCC_ClockConfig+0x14a>
{
 8009ca6:	b570      	push	{r4, r5, r6, lr}
 8009ca8:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009caa:	4b52      	ldr	r3, [pc, #328]	; (8009df4 <HAL_RCC_ClockConfig+0x154>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 030f 	and.w	r3, r3, #15
 8009cb2:	428b      	cmp	r3, r1
 8009cb4:	d20c      	bcs.n	8009cd0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cb6:	4a4f      	ldr	r2, [pc, #316]	; (8009df4 <HAL_RCC_ClockConfig+0x154>)
 8009cb8:	6813      	ldr	r3, [r2, #0]
 8009cba:	f023 030f 	bic.w	r3, r3, #15
 8009cbe:	430b      	orrs	r3, r1
 8009cc0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cc2:	6813      	ldr	r3, [r2, #0]
 8009cc4:	f003 030f 	and.w	r3, r3, #15
 8009cc8:	428b      	cmp	r3, r1
 8009cca:	d001      	beq.n	8009cd0 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8009ccc:	2001      	movs	r0, #1
}
 8009cce:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cd0:	6823      	ldr	r3, [r4, #0]
 8009cd2:	f013 0f02 	tst.w	r3, #2
 8009cd6:	d017      	beq.n	8009d08 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009cd8:	f013 0f04 	tst.w	r3, #4
 8009cdc:	d004      	beq.n	8009ce8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009cde:	4a46      	ldr	r2, [pc, #280]	; (8009df8 <HAL_RCC_ClockConfig+0x158>)
 8009ce0:	6893      	ldr	r3, [r2, #8]
 8009ce2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009ce6:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	f013 0f08 	tst.w	r3, #8
 8009cee:	d004      	beq.n	8009cfa <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009cf0:	4a41      	ldr	r2, [pc, #260]	; (8009df8 <HAL_RCC_ClockConfig+0x158>)
 8009cf2:	6893      	ldr	r3, [r2, #8]
 8009cf4:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009cf8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009cfa:	4a3f      	ldr	r2, [pc, #252]	; (8009df8 <HAL_RCC_ClockConfig+0x158>)
 8009cfc:	6893      	ldr	r3, [r2, #8]
 8009cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d02:	68a0      	ldr	r0, [r4, #8]
 8009d04:	4303      	orrs	r3, r0
 8009d06:	6093      	str	r3, [r2, #8]
 8009d08:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d0a:	6823      	ldr	r3, [r4, #0]
 8009d0c:	f013 0f01 	tst.w	r3, #1
 8009d10:	d031      	beq.n	8009d76 <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d12:	6863      	ldr	r3, [r4, #4]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d020      	beq.n	8009d5a <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d025      	beq.n	8009d68 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d1c:	4a36      	ldr	r2, [pc, #216]	; (8009df8 <HAL_RCC_ClockConfig+0x158>)
 8009d1e:	6812      	ldr	r2, [r2, #0]
 8009d20:	f012 0f02 	tst.w	r2, #2
 8009d24:	d063      	beq.n	8009dee <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d26:	4934      	ldr	r1, [pc, #208]	; (8009df8 <HAL_RCC_ClockConfig+0x158>)
 8009d28:	688a      	ldr	r2, [r1, #8]
 8009d2a:	f022 0203 	bic.w	r2, r2, #3
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8009d32:	f7fe ffa3 	bl	8008c7c <HAL_GetTick>
 8009d36:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d38:	4b2f      	ldr	r3, [pc, #188]	; (8009df8 <HAL_RCC_ClockConfig+0x158>)
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	f003 030c 	and.w	r3, r3, #12
 8009d40:	6862      	ldr	r2, [r4, #4]
 8009d42:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009d46:	d016      	beq.n	8009d76 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d48:	f7fe ff98 	bl	8008c7c <HAL_GetTick>
 8009d4c:	1b80      	subs	r0, r0, r6
 8009d4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009d52:	4298      	cmp	r0, r3
 8009d54:	d9f0      	bls.n	8009d38 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8009d56:	2003      	movs	r0, #3
 8009d58:	e7b9      	b.n	8009cce <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d5a:	4a27      	ldr	r2, [pc, #156]	; (8009df8 <HAL_RCC_ClockConfig+0x158>)
 8009d5c:	6812      	ldr	r2, [r2, #0]
 8009d5e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8009d62:	d1e0      	bne.n	8009d26 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8009d64:	2001      	movs	r0, #1
 8009d66:	e7b2      	b.n	8009cce <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d68:	4a23      	ldr	r2, [pc, #140]	; (8009df8 <HAL_RCC_ClockConfig+0x158>)
 8009d6a:	6812      	ldr	r2, [r2, #0]
 8009d6c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8009d70:	d1d9      	bne.n	8009d26 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8009d72:	2001      	movs	r0, #1
 8009d74:	e7ab      	b.n	8009cce <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d76:	4b1f      	ldr	r3, [pc, #124]	; (8009df4 <HAL_RCC_ClockConfig+0x154>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f003 030f 	and.w	r3, r3, #15
 8009d7e:	42ab      	cmp	r3, r5
 8009d80:	d90c      	bls.n	8009d9c <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d82:	4a1c      	ldr	r2, [pc, #112]	; (8009df4 <HAL_RCC_ClockConfig+0x154>)
 8009d84:	6813      	ldr	r3, [r2, #0]
 8009d86:	f023 030f 	bic.w	r3, r3, #15
 8009d8a:	432b      	orrs	r3, r5
 8009d8c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d8e:	6813      	ldr	r3, [r2, #0]
 8009d90:	f003 030f 	and.w	r3, r3, #15
 8009d94:	42ab      	cmp	r3, r5
 8009d96:	d001      	beq.n	8009d9c <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8009d98:	2001      	movs	r0, #1
 8009d9a:	e798      	b.n	8009cce <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	f013 0f04 	tst.w	r3, #4
 8009da2:	d006      	beq.n	8009db2 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009da4:	4a14      	ldr	r2, [pc, #80]	; (8009df8 <HAL_RCC_ClockConfig+0x158>)
 8009da6:	6893      	ldr	r3, [r2, #8]
 8009da8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009dac:	68e1      	ldr	r1, [r4, #12]
 8009dae:	430b      	orrs	r3, r1
 8009db0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	f013 0f08 	tst.w	r3, #8
 8009db8:	d007      	beq.n	8009dca <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009dba:	4a0f      	ldr	r2, [pc, #60]	; (8009df8 <HAL_RCC_ClockConfig+0x158>)
 8009dbc:	6893      	ldr	r3, [r2, #8]
 8009dbe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009dc2:	6921      	ldr	r1, [r4, #16]
 8009dc4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009dc8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009dca:	f7ff fefd 	bl	8009bc8 <HAL_RCC_GetSysClockFreq>
 8009dce:	4b0a      	ldr	r3, [pc, #40]	; (8009df8 <HAL_RCC_ClockConfig+0x158>)
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009dd6:	4a09      	ldr	r2, [pc, #36]	; (8009dfc <HAL_RCC_ClockConfig+0x15c>)
 8009dd8:	5cd3      	ldrb	r3, [r2, r3]
 8009dda:	40d8      	lsrs	r0, r3
 8009ddc:	4b08      	ldr	r3, [pc, #32]	; (8009e00 <HAL_RCC_ClockConfig+0x160>)
 8009dde:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8009de0:	2000      	movs	r0, #0
 8009de2:	f7fe ff0d 	bl	8008c00 <HAL_InitTick>
  return HAL_OK;
 8009de6:	2000      	movs	r0, #0
 8009de8:	e771      	b.n	8009cce <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8009dea:	2001      	movs	r0, #1
}
 8009dec:	4770      	bx	lr
        return HAL_ERROR;
 8009dee:	2001      	movs	r0, #1
 8009df0:	e76d      	b.n	8009cce <HAL_RCC_ClockConfig+0x2e>
 8009df2:	bf00      	nop
 8009df4:	40023c00 	.word	0x40023c00
 8009df8:	40023800 	.word	0x40023800
 8009dfc:	0800bf58 	.word	0x0800bf58
 8009e00:	20000048 	.word	0x20000048

08009e04 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8009e04:	4b01      	ldr	r3, [pc, #4]	; (8009e0c <HAL_RCC_GetHCLKFreq+0x8>)
 8009e06:	6818      	ldr	r0, [r3, #0]
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	20000048 	.word	0x20000048

08009e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e10:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009e12:	f7ff fff7 	bl	8009e04 <HAL_RCC_GetHCLKFreq>
 8009e16:	4b04      	ldr	r3, [pc, #16]	; (8009e28 <HAL_RCC_GetPCLK1Freq+0x18>)
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8009e1e:	4a03      	ldr	r2, [pc, #12]	; (8009e2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009e20:	5cd3      	ldrb	r3, [r2, r3]
}
 8009e22:	40d8      	lsrs	r0, r3
 8009e24:	bd08      	pop	{r3, pc}
 8009e26:	bf00      	nop
 8009e28:	40023800 	.word	0x40023800
 8009e2c:	0800bf68 	.word	0x0800bf68

08009e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e30:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009e32:	f7ff ffe7 	bl	8009e04 <HAL_RCC_GetHCLKFreq>
 8009e36:	4b04      	ldr	r3, [pc, #16]	; (8009e48 <HAL_RCC_GetPCLK2Freq+0x18>)
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8009e3e:	4a03      	ldr	r2, [pc, #12]	; (8009e4c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009e40:	5cd3      	ldrb	r3, [r2, r3]
}
 8009e42:	40d8      	lsrs	r0, r3
 8009e44:	bd08      	pop	{r3, pc}
 8009e46:	bf00      	nop
 8009e48:	40023800 	.word	0x40023800
 8009e4c:	0800bf68 	.word	0x0800bf68

08009e50 <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009e50:	4770      	bx	lr

08009e52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e56:	4605      	mov	r5, r0
 8009e58:	460f      	mov	r7, r1
 8009e5a:	4616      	mov	r6, r2
 8009e5c:	4698      	mov	r8, r3
 8009e5e:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	69db      	ldr	r3, [r3, #28]
 8009e64:	ea37 0303 	bics.w	r3, r7, r3
 8009e68:	bf0c      	ite	eq
 8009e6a:	2301      	moveq	r3, #1
 8009e6c:	2300      	movne	r3, #0
 8009e6e:	42b3      	cmp	r3, r6
 8009e70:	d11d      	bne.n	8009eae <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009e72:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8009e76:	d0f3      	beq.n	8009e60 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8009e78:	b12c      	cbz	r4, 8009e86 <UART_WaitOnFlagUntilTimeout+0x34>
 8009e7a:	f7fe feff 	bl	8008c7c <HAL_GetTick>
 8009e7e:	eba0 0008 	sub.w	r0, r0, r8
 8009e82:	42a0      	cmp	r0, r4
 8009e84:	d3ec      	bcc.n	8009e60 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e86:	682a      	ldr	r2, [r5, #0]
 8009e88:	6813      	ldr	r3, [r2, #0]
 8009e8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009e8e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e90:	682a      	ldr	r2, [r5, #0]
 8009e92:	6893      	ldr	r3, [r2, #8]
 8009e94:	f023 0301 	bic.w	r3, r3, #1
 8009e98:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009e9a:	2320      	movs	r3, #32
 8009e9c:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8009ea0:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8009eaa:	2003      	movs	r0, #3
 8009eac:	e000      	b.n	8009eb0 <UART_WaitOnFlagUntilTimeout+0x5e>
      }
    }
  }
  return HAL_OK;
 8009eae:	2000      	movs	r0, #0
}
 8009eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009eb4 <HAL_UART_Receive>:
{
 8009eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb8:	b082      	sub	sp, #8
 8009eba:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8009ebc:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b20      	cmp	r3, #32
 8009ec4:	d175      	bne.n	8009fb2 <HAL_UART_Receive+0xfe>
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	460d      	mov	r5, r1
 8009eca:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8009ecc:	fab2 f382 	clz	r3, r2
 8009ed0:	095b      	lsrs	r3, r3, #5
 8009ed2:	2900      	cmp	r1, #0
 8009ed4:	bf08      	it	eq
 8009ed6:	2301      	moveq	r3, #1
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d16e      	bne.n	8009fba <HAL_UART_Receive+0x106>
    __HAL_LOCK(huart);
 8009edc:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d06c      	beq.n	8009fbe <HAL_UART_Receive+0x10a>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eea:	2300      	movs	r3, #0
 8009eec:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009eee:	2322      	movs	r3, #34	; 0x22
 8009ef0:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 8009ef4:	f7fe fec2 	bl	8008c7c <HAL_GetTick>
 8009ef8:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8009efa:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8009efe:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8009f02:	68a3      	ldr	r3, [r4, #8]
 8009f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f08:	d006      	beq.n	8009f18 <HAL_UART_Receive+0x64>
 8009f0a:	b9a3      	cbnz	r3, 8009f36 <HAL_UART_Receive+0x82>
 8009f0c:	6923      	ldr	r3, [r4, #16]
 8009f0e:	b973      	cbnz	r3, 8009f2e <HAL_UART_Receive+0x7a>
 8009f10:	23ff      	movs	r3, #255	; 0xff
 8009f12:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8009f16:	e011      	b.n	8009f3c <HAL_UART_Receive+0x88>
 8009f18:	6923      	ldr	r3, [r4, #16]
 8009f1a:	b923      	cbnz	r3, 8009f26 <HAL_UART_Receive+0x72>
 8009f1c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8009f20:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8009f24:	e00a      	b.n	8009f3c <HAL_UART_Receive+0x88>
 8009f26:	23ff      	movs	r3, #255	; 0xff
 8009f28:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8009f2c:	e006      	b.n	8009f3c <HAL_UART_Receive+0x88>
 8009f2e:	237f      	movs	r3, #127	; 0x7f
 8009f30:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8009f34:	e002      	b.n	8009f3c <HAL_UART_Receive+0x88>
 8009f36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f3a:	d002      	beq.n	8009f42 <HAL_UART_Receive+0x8e>
    uhMask = huart->Mask;
 8009f3c:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 8009f40:	e010      	b.n	8009f64 <HAL_UART_Receive+0xb0>
    UART_MASK_COMPUTATION(huart);
 8009f42:	6923      	ldr	r3, [r4, #16]
 8009f44:	b91b      	cbnz	r3, 8009f4e <HAL_UART_Receive+0x9a>
 8009f46:	237f      	movs	r3, #127	; 0x7f
 8009f48:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8009f4c:	e7f6      	b.n	8009f3c <HAL_UART_Receive+0x88>
 8009f4e:	233f      	movs	r3, #63	; 0x3f
 8009f50:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8009f54:	e7f2      	b.n	8009f3c <HAL_UART_Receive+0x88>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f5a:	fa5f f388 	uxtb.w	r3, r8
 8009f5e:	4013      	ands	r3, r2
 8009f60:	702b      	strb	r3, [r5, #0]
 8009f62:	3501      	adds	r5, #1
    while(huart->RxXferCount > 0U)
 8009f64:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	b1db      	cbz	r3, 8009fa4 <HAL_UART_Receive+0xf0>
      huart->RxXferCount--;
 8009f6c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8009f70:	3b01      	subs	r3, #1
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009f78:	9600      	str	r6, [sp, #0]
 8009f7a:	463b      	mov	r3, r7
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	2120      	movs	r1, #32
 8009f80:	4620      	mov	r0, r4
 8009f82:	f7ff ff66 	bl	8009e52 <UART_WaitOnFlagUntilTimeout>
 8009f86:	b9e0      	cbnz	r0, 8009fc2 <HAL_UART_Receive+0x10e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f88:	68a3      	ldr	r3, [r4, #8]
 8009f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f8e:	d1e2      	bne.n	8009f56 <HAL_UART_Receive+0xa2>
 8009f90:	6923      	ldr	r3, [r4, #16]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1df      	bne.n	8009f56 <HAL_UART_Receive+0xa2>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9a:	ea08 0303 	and.w	r3, r8, r3
 8009f9e:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8009fa2:	e7df      	b.n	8009f64 <HAL_UART_Receive+0xb0>
    huart->RxState = HAL_UART_STATE_READY;
 8009fa4:	2320      	movs	r3, #32
 8009fa6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8009faa:	2000      	movs	r0, #0
 8009fac:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8009fb0:	e000      	b.n	8009fb4 <HAL_UART_Receive+0x100>
    return HAL_BUSY;
 8009fb2:	2002      	movs	r0, #2
}
 8009fb4:	b002      	add	sp, #8
 8009fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8009fba:	2001      	movs	r0, #1
 8009fbc:	e7fa      	b.n	8009fb4 <HAL_UART_Receive+0x100>
    __HAL_LOCK(huart);
 8009fbe:	2002      	movs	r0, #2
 8009fc0:	e7f8      	b.n	8009fb4 <HAL_UART_Receive+0x100>
        return HAL_TIMEOUT;
 8009fc2:	2003      	movs	r0, #3
 8009fc4:	e7f6      	b.n	8009fb4 <HAL_UART_Receive+0x100>
	...

08009fc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fc8:	b510      	push	{r4, lr}
 8009fca:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009fcc:	6883      	ldr	r3, [r0, #8]
 8009fce:	6902      	ldr	r2, [r0, #16]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	6942      	ldr	r2, [r0, #20]
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	69c2      	ldr	r2, [r0, #28]
 8009fd8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8009fda:	6801      	ldr	r1, [r0, #0]
 8009fdc:	6808      	ldr	r0, [r1, #0]
 8009fde:	4a9d      	ldr	r2, [pc, #628]	; (800a254 <UART_SetConfig+0x28c>)
 8009fe0:	4002      	ands	r2, r0
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fe6:	6822      	ldr	r2, [r4, #0]
 8009fe8:	6853      	ldr	r3, [r2, #4]
 8009fea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009fee:	68e1      	ldr	r1, [r4, #12]
 8009ff0:	430b      	orrs	r3, r1
 8009ff2:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8009ff4:	69a3      	ldr	r3, [r4, #24]
 8009ff6:	6a22      	ldr	r2, [r4, #32]
 8009ff8:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8009ffa:	6821      	ldr	r1, [r4, #0]
 8009ffc:	688b      	ldr	r3, [r1, #8]
 8009ffe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a002:	4313      	orrs	r3, r2
 800a004:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a006:	6823      	ldr	r3, [r4, #0]
 800a008:	4a93      	ldr	r2, [pc, #588]	; (800a258 <UART_SetConfig+0x290>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d019      	beq.n	800a042 <UART_SetConfig+0x7a>
 800a00e:	4a93      	ldr	r2, [pc, #588]	; (800a25c <UART_SetConfig+0x294>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d02a      	beq.n	800a06a <UART_SetConfig+0xa2>
 800a014:	4a92      	ldr	r2, [pc, #584]	; (800a260 <UART_SetConfig+0x298>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d040      	beq.n	800a09c <UART_SetConfig+0xd4>
 800a01a:	4a92      	ldr	r2, [pc, #584]	; (800a264 <UART_SetConfig+0x29c>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d055      	beq.n	800a0cc <UART_SetConfig+0x104>
 800a020:	4a91      	ldr	r2, [pc, #580]	; (800a268 <UART_SetConfig+0x2a0>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d06a      	beq.n	800a0fc <UART_SetConfig+0x134>
 800a026:	4a91      	ldr	r2, [pc, #580]	; (800a26c <UART_SetConfig+0x2a4>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	f000 8082 	beq.w	800a132 <UART_SetConfig+0x16a>
 800a02e:	4a90      	ldr	r2, [pc, #576]	; (800a270 <UART_SetConfig+0x2a8>)
 800a030:	4293      	cmp	r3, r2
 800a032:	f000 8099 	beq.w	800a168 <UART_SetConfig+0x1a0>
 800a036:	4a8f      	ldr	r2, [pc, #572]	; (800a274 <UART_SetConfig+0x2ac>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	f000 80b0 	beq.w	800a19e <UART_SetConfig+0x1d6>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a03e:	2210      	movs	r2, #16
 800a040:	e0c9      	b.n	800a1d6 <UART_SetConfig+0x20e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a042:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800a046:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800a04a:	f002 0203 	and.w	r2, r2, #3
 800a04e:	2a03      	cmp	r2, #3
 800a050:	d803      	bhi.n	800a05a <UART_SetConfig+0x92>
 800a052:	e8df f002 	tbb	[pc, r2]
 800a056:	06bf      	.short	0x06bf
 800a058:	0804      	.short	0x0804
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a05a:	2210      	movs	r2, #16
 800a05c:	e0bb      	b.n	800a1d6 <UART_SetConfig+0x20e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a05e:	2202      	movs	r2, #2
 800a060:	e0b9      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a062:	2204      	movs	r2, #4
 800a064:	e0b7      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a066:	2208      	movs	r2, #8
 800a068:	e0b5      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a06a:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 800a06e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800a072:	f002 020c 	and.w	r2, r2, #12
 800a076:	2a0c      	cmp	r2, #12
 800a078:	d808      	bhi.n	800a08c <UART_SetConfig+0xc4>
 800a07a:	e8df f002 	tbb	[pc, r2]
 800a07e:	07ba      	.short	0x07ba
 800a080:	070b0707 	.word	0x070b0707
 800a084:	07090707 	.word	0x07090707
 800a088:	0707      	.short	0x0707
 800a08a:	0d          	.byte	0x0d
 800a08b:	00          	.byte	0x00
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a08c:	2210      	movs	r2, #16
 800a08e:	e0a2      	b.n	800a1d6 <UART_SetConfig+0x20e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a090:	2202      	movs	r2, #2
 800a092:	e0a0      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a094:	2204      	movs	r2, #4
 800a096:	e09e      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a098:	2208      	movs	r2, #8
 800a09a:	e09c      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a09c:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 800a0a0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800a0a4:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800a0a8:	2a10      	cmp	r2, #16
 800a0aa:	d00d      	beq.n	800a0c8 <UART_SetConfig+0x100>
 800a0ac:	d905      	bls.n	800a0ba <UART_SetConfig+0xf2>
 800a0ae:	2a20      	cmp	r2, #32
 800a0b0:	d008      	beq.n	800a0c4 <UART_SetConfig+0xfc>
 800a0b2:	2a30      	cmp	r2, #48	; 0x30
 800a0b4:	d104      	bne.n	800a0c0 <UART_SetConfig+0xf8>
 800a0b6:	2208      	movs	r2, #8
 800a0b8:	e08d      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a0ba:	b90a      	cbnz	r2, 800a0c0 <UART_SetConfig+0xf8>
 800a0bc:	2200      	movs	r2, #0
 800a0be:	e08a      	b.n	800a1d6 <UART_SetConfig+0x20e>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a0c0:	2210      	movs	r2, #16
 800a0c2:	e088      	b.n	800a1d6 <UART_SetConfig+0x20e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0c4:	2202      	movs	r2, #2
 800a0c6:	e086      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a0c8:	2204      	movs	r2, #4
 800a0ca:	e084      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a0cc:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 800a0d0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800a0d4:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800a0d8:	2a40      	cmp	r2, #64	; 0x40
 800a0da:	d00d      	beq.n	800a0f8 <UART_SetConfig+0x130>
 800a0dc:	d905      	bls.n	800a0ea <UART_SetConfig+0x122>
 800a0de:	2a80      	cmp	r2, #128	; 0x80
 800a0e0:	d008      	beq.n	800a0f4 <UART_SetConfig+0x12c>
 800a0e2:	2ac0      	cmp	r2, #192	; 0xc0
 800a0e4:	d104      	bne.n	800a0f0 <UART_SetConfig+0x128>
 800a0e6:	2208      	movs	r2, #8
 800a0e8:	e075      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a0ea:	b90a      	cbnz	r2, 800a0f0 <UART_SetConfig+0x128>
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	e072      	b.n	800a1d6 <UART_SetConfig+0x20e>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a0f0:	2210      	movs	r2, #16
 800a0f2:	e070      	b.n	800a1d6 <UART_SetConfig+0x20e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0f4:	2202      	movs	r2, #2
 800a0f6:	e06e      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a0f8:	2204      	movs	r2, #4
 800a0fa:	e06c      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a0fc:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 800a100:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800a104:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800a108:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a10c:	d00f      	beq.n	800a12e <UART_SetConfig+0x166>
 800a10e:	d907      	bls.n	800a120 <UART_SetConfig+0x158>
 800a110:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800a114:	d009      	beq.n	800a12a <UART_SetConfig+0x162>
 800a116:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800a11a:	d104      	bne.n	800a126 <UART_SetConfig+0x15e>
 800a11c:	2208      	movs	r2, #8
 800a11e:	e05a      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a120:	b90a      	cbnz	r2, 800a126 <UART_SetConfig+0x15e>
 800a122:	2200      	movs	r2, #0
 800a124:	e057      	b.n	800a1d6 <UART_SetConfig+0x20e>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a126:	2210      	movs	r2, #16
 800a128:	e055      	b.n	800a1d6 <UART_SetConfig+0x20e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a12a:	2202      	movs	r2, #2
 800a12c:	e053      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a12e:	2204      	movs	r2, #4
 800a130:	e051      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a132:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 800a136:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800a13a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800a13e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a142:	d00f      	beq.n	800a164 <UART_SetConfig+0x19c>
 800a144:	d907      	bls.n	800a156 <UART_SetConfig+0x18e>
 800a146:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800a14a:	d009      	beq.n	800a160 <UART_SetConfig+0x198>
 800a14c:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800a150:	d104      	bne.n	800a15c <UART_SetConfig+0x194>
 800a152:	2208      	movs	r2, #8
 800a154:	e03f      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a156:	b90a      	cbnz	r2, 800a15c <UART_SetConfig+0x194>
 800a158:	2201      	movs	r2, #1
 800a15a:	e03c      	b.n	800a1d6 <UART_SetConfig+0x20e>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a15c:	2210      	movs	r2, #16
 800a15e:	e03a      	b.n	800a1d6 <UART_SetConfig+0x20e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a160:	2202      	movs	r2, #2
 800a162:	e038      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a164:	2204      	movs	r2, #4
 800a166:	e036      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a168:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800a16c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800a170:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800a174:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800a178:	d00f      	beq.n	800a19a <UART_SetConfig+0x1d2>
 800a17a:	d907      	bls.n	800a18c <UART_SetConfig+0x1c4>
 800a17c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a180:	d009      	beq.n	800a196 <UART_SetConfig+0x1ce>
 800a182:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800a186:	d104      	bne.n	800a192 <UART_SetConfig+0x1ca>
 800a188:	2208      	movs	r2, #8
 800a18a:	e024      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a18c:	b90a      	cbnz	r2, 800a192 <UART_SetConfig+0x1ca>
 800a18e:	2200      	movs	r2, #0
 800a190:	e021      	b.n	800a1d6 <UART_SetConfig+0x20e>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a192:	2210      	movs	r2, #16
 800a194:	e01f      	b.n	800a1d6 <UART_SetConfig+0x20e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a196:	2202      	movs	r2, #2
 800a198:	e01d      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a19a:	2204      	movs	r2, #4
 800a19c:	e01b      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a19e:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 800a1a2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800a1a6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800a1aa:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800a1ae:	d00f      	beq.n	800a1d0 <UART_SetConfig+0x208>
 800a1b0:	d907      	bls.n	800a1c2 <UART_SetConfig+0x1fa>
 800a1b2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a1b6:	d009      	beq.n	800a1cc <UART_SetConfig+0x204>
 800a1b8:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 800a1bc:	d104      	bne.n	800a1c8 <UART_SetConfig+0x200>
 800a1be:	2208      	movs	r2, #8
 800a1c0:	e009      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a1c2:	b90a      	cbnz	r2, 800a1c8 <UART_SetConfig+0x200>
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	e006      	b.n	800a1d6 <UART_SetConfig+0x20e>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a1c8:	2210      	movs	r2, #16
 800a1ca:	e004      	b.n	800a1d6 <UART_SetConfig+0x20e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1cc:	2202      	movs	r2, #2
 800a1ce:	e002      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a1d0:	2204      	movs	r2, #4
 800a1d2:	e000      	b.n	800a1d6 <UART_SetConfig+0x20e>
 800a1d4:	2201      	movs	r2, #1

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1d6:	69e1      	ldr	r1, [r4, #28]
 800a1d8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a1dc:	d00b      	beq.n	800a1f6 <UART_SetConfig+0x22e>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 800a1de:	2a08      	cmp	r2, #8
 800a1e0:	f200 809b 	bhi.w	800a31a <UART_SetConfig+0x352>
 800a1e4:	e8df f002 	tbb	[pc, r2]
 800a1e8:	99796d61 	.word	0x99796d61
 800a1ec:	99999983 	.word	0x99999983
 800a1f0:	8f          	.byte	0x8f
 800a1f1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	e7ef      	b.n	800a1d6 <UART_SetConfig+0x20e>
    switch (clocksource)
 800a1f6:	2a08      	cmp	r2, #8
 800a1f8:	d854      	bhi.n	800a2a4 <UART_SetConfig+0x2dc>
 800a1fa:	e8df f002 	tbb	[pc, r2]
 800a1fe:	1705      	.short	0x1705
 800a200:	533f5322 	.word	0x533f5322
 800a204:	5353      	.short	0x5353
 800a206:	4a          	.byte	0x4a
 800a207:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a208:	f7ff fe02 	bl	8009e10 <HAL_RCC_GetPCLK1Freq>
 800a20c:	6862      	ldr	r2, [r4, #4]
 800a20e:	0853      	lsrs	r3, r2, #1
 800a210:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800a214:	fbb3 f3f2 	udiv	r3, r3, r2
 800a218:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800a21a:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 800a21c:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a220:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800a224:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 800a226:	6822      	ldr	r2, [r4, #0]
 800a228:	60d3      	str	r3, [r2, #12]
    }
  }

  return ret;

}
 800a22a:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a22c:	f7ff fe00 	bl	8009e30 <HAL_RCC_GetPCLK2Freq>
 800a230:	6862      	ldr	r2, [r4, #4]
 800a232:	0853      	lsrs	r3, r2, #1
 800a234:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800a238:	fbb3 f3f2 	udiv	r3, r3, r2
 800a23c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800a23e:	2000      	movs	r0, #0
      break;
 800a240:	e7ec      	b.n	800a21c <UART_SetConfig+0x254>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a242:	6862      	ldr	r2, [r4, #4]
 800a244:	4b0c      	ldr	r3, [pc, #48]	; (800a278 <UART_SetConfig+0x2b0>)
 800a246:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800a24a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a24e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800a250:	2000      	movs	r0, #0
      break;
 800a252:	e7e3      	b.n	800a21c <UART_SetConfig+0x254>
 800a254:	efff69f3 	.word	0xefff69f3
 800a258:	40011000 	.word	0x40011000
 800a25c:	40004400 	.word	0x40004400
 800a260:	40004800 	.word	0x40004800
 800a264:	40004c00 	.word	0x40004c00
 800a268:	40005000 	.word	0x40005000
 800a26c:	40011400 	.word	0x40011400
 800a270:	40007800 	.word	0x40007800
 800a274:	40007c00 	.word	0x40007c00
 800a278:	01e84800 	.word	0x01e84800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a27c:	f7ff fca4 	bl	8009bc8 <HAL_RCC_GetSysClockFreq>
 800a280:	6862      	ldr	r2, [r4, #4]
 800a282:	0853      	lsrs	r3, r2, #1
 800a284:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800a288:	fbb3 f3f2 	udiv	r3, r3, r2
 800a28c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800a28e:	2000      	movs	r0, #0
      break;
 800a290:	e7c4      	b.n	800a21c <UART_SetConfig+0x254>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a292:	6862      	ldr	r2, [r4, #4]
 800a294:	0853      	lsrs	r3, r2, #1
 800a296:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a29a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a29e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2a0:	2000      	movs	r0, #0
      break;
 800a2a2:	e7bb      	b.n	800a21c <UART_SetConfig+0x254>
        ret = HAL_ERROR;
 800a2a4:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	e7b8      	b.n	800a21c <UART_SetConfig+0x254>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a2aa:	f7ff fdb1 	bl	8009e10 <HAL_RCC_GetPCLK1Freq>
 800a2ae:	6863      	ldr	r3, [r4, #4]
 800a2b0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800a2b4:	fbb0 f0f3 	udiv	r0, r0, r3
 800a2b8:	6823      	ldr	r3, [r4, #0]
 800a2ba:	b280      	uxth	r0, r0
 800a2bc:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2be:	2000      	movs	r0, #0
      break;
 800a2c0:	e7b3      	b.n	800a22a <UART_SetConfig+0x262>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a2c2:	f7ff fdb5 	bl	8009e30 <HAL_RCC_GetPCLK2Freq>
 800a2c6:	6863      	ldr	r3, [r4, #4]
 800a2c8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800a2cc:	fbb0 f0f3 	udiv	r0, r0, r3
 800a2d0:	6823      	ldr	r3, [r4, #0]
 800a2d2:	b280      	uxth	r0, r0
 800a2d4:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2d6:	2000      	movs	r0, #0
      break;
 800a2d8:	e7a7      	b.n	800a22a <UART_SetConfig+0x262>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a2da:	6861      	ldr	r1, [r4, #4]
 800a2dc:	4a10      	ldr	r2, [pc, #64]	; (800a320 <UART_SetConfig+0x358>)
 800a2de:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800a2e2:	fbb2 f2f1 	udiv	r2, r2, r1
 800a2e6:	b292      	uxth	r2, r2
 800a2e8:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2ea:	2000      	movs	r0, #0
      break;
 800a2ec:	e79d      	b.n	800a22a <UART_SetConfig+0x262>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a2ee:	f7ff fc6b 	bl	8009bc8 <HAL_RCC_GetSysClockFreq>
 800a2f2:	6863      	ldr	r3, [r4, #4]
 800a2f4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800a2f8:	fbb0 f0f3 	udiv	r0, r0, r3
 800a2fc:	6823      	ldr	r3, [r4, #0]
 800a2fe:	b280      	uxth	r0, r0
 800a300:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a302:	2000      	movs	r0, #0
      break;
 800a304:	e791      	b.n	800a22a <UART_SetConfig+0x262>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a306:	6861      	ldr	r1, [r4, #4]
 800a308:	084a      	lsrs	r2, r1, #1
 800a30a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800a30e:	fbb2 f2f1 	udiv	r2, r2, r1
 800a312:	b292      	uxth	r2, r2
 800a314:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a316:	2000      	movs	r0, #0
      break;
 800a318:	e787      	b.n	800a22a <UART_SetConfig+0x262>
        ret = HAL_ERROR;
 800a31a:	2001      	movs	r0, #1
 800a31c:	e785      	b.n	800a22a <UART_SetConfig+0x262>
 800a31e:	bf00      	nop
 800a320:	00f42400 	.word	0x00f42400

0800a324 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a324:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a326:	f013 0f01 	tst.w	r3, #1
 800a32a:	d006      	beq.n	800a33a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a32c:	6802      	ldr	r2, [r0, #0]
 800a32e:	6853      	ldr	r3, [r2, #4]
 800a330:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a334:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a336:	430b      	orrs	r3, r1
 800a338:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a33a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a33c:	f013 0f02 	tst.w	r3, #2
 800a340:	d006      	beq.n	800a350 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a342:	6802      	ldr	r2, [r0, #0]
 800a344:	6853      	ldr	r3, [r2, #4]
 800a346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a34a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a34c:	430b      	orrs	r3, r1
 800a34e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a350:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a352:	f013 0f04 	tst.w	r3, #4
 800a356:	d006      	beq.n	800a366 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a358:	6802      	ldr	r2, [r0, #0]
 800a35a:	6853      	ldr	r3, [r2, #4]
 800a35c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a360:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800a362:	430b      	orrs	r3, r1
 800a364:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a366:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a368:	f013 0f08 	tst.w	r3, #8
 800a36c:	d006      	beq.n	800a37c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a36e:	6802      	ldr	r2, [r0, #0]
 800a370:	6853      	ldr	r3, [r2, #4]
 800a372:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a376:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800a378:	430b      	orrs	r3, r1
 800a37a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a37c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a37e:	f013 0f10 	tst.w	r3, #16
 800a382:	d006      	beq.n	800a392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a384:	6802      	ldr	r2, [r0, #0]
 800a386:	6893      	ldr	r3, [r2, #8]
 800a388:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a38c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a38e:	430b      	orrs	r3, r1
 800a390:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a392:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a394:	f013 0f20 	tst.w	r3, #32
 800a398:	d006      	beq.n	800a3a8 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a39a:	6802      	ldr	r2, [r0, #0]
 800a39c:	6893      	ldr	r3, [r2, #8]
 800a39e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3a2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800a3a4:	430b      	orrs	r3, r1
 800a3a6:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a3a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a3aa:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a3ae:	d00a      	beq.n	800a3c6 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a3b0:	6802      	ldr	r2, [r0, #0]
 800a3b2:	6853      	ldr	r3, [r2, #4]
 800a3b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a3b8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a3ba:	430b      	orrs	r3, r1
 800a3bc:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a3be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a3c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3c4:	d00b      	beq.n	800a3de <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a3c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a3c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a3cc:	d006      	beq.n	800a3dc <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a3ce:	6802      	ldr	r2, [r0, #0]
 800a3d0:	6853      	ldr	r3, [r2, #4]
 800a3d2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a3d6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800a3d8:	430b      	orrs	r3, r1
 800a3da:	6053      	str	r3, [r2, #4]
  }
}
 800a3dc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a3de:	6802      	ldr	r2, [r0, #0]
 800a3e0:	6853      	ldr	r3, [r2, #4]
 800a3e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a3e6:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800a3e8:	430b      	orrs	r3, r1
 800a3ea:	6053      	str	r3, [r2, #4]
 800a3ec:	e7eb      	b.n	800a3c6 <UART_AdvFeatureConfig+0xa2>

0800a3ee <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a3ee:	b510      	push	{r4, lr}
 800a3f0:	b082      	sub	sp, #8
 800a3f2:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a3f8:	f7fe fc40 	bl	8008c7c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3fc:	6822      	ldr	r2, [r4, #0]
 800a3fe:	6812      	ldr	r2, [r2, #0]
 800a400:	f012 0f08 	tst.w	r2, #8
 800a404:	d109      	bne.n	800a41a <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800a406:	2320      	movs	r3, #32
 800a408:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 800a40c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a410:	2000      	movs	r0, #0
 800a412:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return HAL_OK;
}
 800a416:	b002      	add	sp, #8
 800a418:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a41a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	4603      	mov	r3, r0
 800a422:	2200      	movs	r2, #0
 800a424:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a428:	4620      	mov	r0, r4
 800a42a:	f7ff fd12 	bl	8009e52 <UART_WaitOnFlagUntilTimeout>
 800a42e:	2800      	cmp	r0, #0
 800a430:	d0e9      	beq.n	800a406 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800a432:	2003      	movs	r0, #3
 800a434:	e7ef      	b.n	800a416 <UART_CheckIdleState+0x28>

0800a436 <HAL_UART_Init>:
  if(huart == NULL)
 800a436:	b378      	cbz	r0, 800a498 <HAL_UART_Init+0x62>
{
 800a438:	b510      	push	{r4, lr}
 800a43a:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 800a43c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800a440:	b30b      	cbz	r3, 800a486 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800a442:	2324      	movs	r3, #36	; 0x24
 800a444:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800a448:	6822      	ldr	r2, [r4, #0]
 800a44a:	6813      	ldr	r3, [r2, #0]
 800a44c:	f023 0301 	bic.w	r3, r3, #1
 800a450:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a452:	4620      	mov	r0, r4
 800a454:	f7ff fdb8 	bl	8009fc8 <UART_SetConfig>
 800a458:	2801      	cmp	r0, #1
 800a45a:	d013      	beq.n	800a484 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a45c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a45e:	b9bb      	cbnz	r3, 800a490 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a460:	6822      	ldr	r2, [r4, #0]
 800a462:	6853      	ldr	r3, [r2, #4]
 800a464:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800a468:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a46a:	6822      	ldr	r2, [r4, #0]
 800a46c:	6893      	ldr	r3, [r2, #8]
 800a46e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800a472:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800a474:	6822      	ldr	r2, [r4, #0]
 800a476:	6813      	ldr	r3, [r2, #0]
 800a478:	f043 0301 	orr.w	r3, r3, #1
 800a47c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800a47e:	4620      	mov	r0, r4
 800a480:	f7ff ffb5 	bl	800a3ee <UART_CheckIdleState>
}
 800a484:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800a486:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800a48a:	f7ff fce1 	bl	8009e50 <HAL_UART_MspInit>
 800a48e:	e7d8      	b.n	800a442 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800a490:	4620      	mov	r0, r4
 800a492:	f7ff ff47 	bl	800a324 <UART_AdvFeatureConfig>
 800a496:	e7e3      	b.n	800a460 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800a498:	2001      	movs	r0, #1
}
 800a49a:	4770      	bx	lr

0800a49c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a49c:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a49e:	4a0f      	ldr	r2, [pc, #60]	; (800a4dc <SystemInit+0x40>)
 800a4a0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a4a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a4a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a4ac:	4b0c      	ldr	r3, [pc, #48]	; (800a4e0 <SystemInit+0x44>)
 800a4ae:	6819      	ldr	r1, [r3, #0]
 800a4b0:	f041 0101 	orr.w	r1, r1, #1
 800a4b4:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a4ba:	681c      	ldr	r4, [r3, #0]
 800a4bc:	4909      	ldr	r1, [pc, #36]	; (800a4e4 <SystemInit+0x48>)
 800a4be:	4021      	ands	r1, r4
 800a4c0:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a4c2:	4909      	ldr	r1, [pc, #36]	; (800a4e8 <SystemInit+0x4c>)
 800a4c4:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a4c6:	6819      	ldr	r1, [r3, #0]
 800a4c8:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800a4cc:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a4ce:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a4d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a4d4:	6093      	str	r3, [r2, #8]
#endif
}
 800a4d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	e000ed00 	.word	0xe000ed00
 800a4e0:	40023800 	.word	0x40023800
 800a4e4:	fef6ffff 	.word	0xfef6ffff
 800a4e8:	24003010 	.word	0x24003010

0800a4ec <clock_time>:
#include "clock-arch.h"

/*---------------------------------------------------------------------------*/
clock_time_t
clock_time(void)
{
 800a4ec:	b508      	push	{r3, lr}
  return (clock_time_t)TimerGet();
 800a4ee:	f7fe fb7d 	bl	8008bec <TimerGet>
}
 800a4f2:	bd08      	pop	{r3, pc}

0800a4f4 <HAL_ETH_MspInit>:
/*---------------------------------------------------------------------------*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  if (heth->Instance == ETH)
 800a4f4:	6802      	ldr	r2, [r0, #0]
 800a4f6:	4b29      	ldr	r3, [pc, #164]	; (800a59c <HAL_ETH_MspInit+0xa8>)
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d000      	beq.n	800a4fe <HAL_ETH_MspInit+0xa>
 800a4fc:	4770      	bx	lr
{
 800a4fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a500:	b089      	sub	sp, #36	; 0x24
  {
    /* Ethernet clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a502:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800a506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a508:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800a50c:	631a      	str	r2, [r3, #48]	; 0x30
 800a50e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a510:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800a514:	9200      	str	r2, [sp, #0]
 800a516:	9a00      	ldr	r2, [sp, #0]
 800a518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a51a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a51e:	631a      	str	r2, [r3, #48]	; 0x30
 800a520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a522:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800a526:	9201      	str	r2, [sp, #4]
 800a528:	9a01      	ldr	r2, [sp, #4]
 800a52a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a52c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a530:	631a      	str	r2, [r3, #48]	; 0x30
 800a532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a538:	9302      	str	r3, [sp, #8]
 800a53a:	9b02      	ldr	r3, [sp, #8]
     * PC5      ------> ETH_RXD1
     * PB13     ------> ETH_TXD1
     * PG11     ------> ETH_TX_EN
     * PG13     ------> ETH_TXD0
     */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 800a53c:	2332      	movs	r3, #50	; 0x32
 800a53e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a540:	2702      	movs	r7, #2
 800a542:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a544:	2600      	movs	r6, #0
 800a546:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a548:	2503      	movs	r5, #3
 800a54a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a54c:	240b      	movs	r4, #11
 800a54e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a550:	a903      	add	r1, sp, #12
 800a552:	4813      	ldr	r0, [pc, #76]	; (800a5a0 <HAL_ETH_MspInit+0xac>)
 800a554:	f7ff f81a 	bl	800958c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 800a558:	2386      	movs	r3, #134	; 0x86
 800a55a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a55c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a55e:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a560:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a562:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a564:	a903      	add	r1, sp, #12
 800a566:	480f      	ldr	r0, [pc, #60]	; (800a5a4 <HAL_ETH_MspInit+0xb0>)
 800a568:	f7ff f810 	bl	800958c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a56c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a570:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a572:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a574:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a576:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a578:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a57a:	a903      	add	r1, sp, #12
 800a57c:	480a      	ldr	r0, [pc, #40]	; (800a5a8 <HAL_ETH_MspInit+0xb4>)
 800a57e:	f7ff f805 	bl	800958c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 800a582:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a586:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a588:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a58a:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a58c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a58e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a590:	a903      	add	r1, sp, #12
 800a592:	4806      	ldr	r0, [pc, #24]	; (800a5ac <HAL_ETH_MspInit+0xb8>)
 800a594:	f7fe fffa 	bl	800958c <HAL_GPIO_Init>
  }
}
 800a598:	b009      	add	sp, #36	; 0x24
 800a59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a59c:	40028000 	.word	0x40028000
 800a5a0:	40020800 	.word	0x40020800
 800a5a4:	40020000 	.word	0x40020000
 800a5a8:	40020400 	.word	0x40020400
 800a5ac:	40021800 	.word	0x40021800

0800a5b0 <netdev_init>:
}


/*---------------------------------------------------------------------------*/
void netdev_init(void)
{
 800a5b0:	b510      	push	{r4, lr}
  /* Store the default MAC address. */
  macAddress.addr[0] = NETDEV_DEFAULT_MACADDR0;
 800a5b2:	4b16      	ldr	r3, [pc, #88]	; (800a60c <netdev_init+0x5c>)
 800a5b4:	2208      	movs	r2, #8
 800a5b6:	701a      	strb	r2, [r3, #0]
  macAddress.addr[1] = NETDEV_DEFAULT_MACADDR1;
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	705a      	strb	r2, [r3, #1]
  macAddress.addr[2] = NETDEV_DEFAULT_MACADDR2;
 800a5bc:	2127      	movs	r1, #39	; 0x27
 800a5be:	7099      	strb	r1, [r3, #2]
  macAddress.addr[3] = NETDEV_DEFAULT_MACADDR3;
 800a5c0:	2169      	movs	r1, #105	; 0x69
 800a5c2:	70d9      	strb	r1, [r3, #3]
  macAddress.addr[4] = NETDEV_DEFAULT_MACADDR4;
 800a5c4:	215b      	movs	r1, #91	; 0x5b
 800a5c6:	7119      	strb	r1, [r3, #4]
  macAddress.addr[5] = NETDEV_DEFAULT_MACADDR5;
 800a5c8:	2145      	movs	r1, #69	; 0x45
 800a5ca:	7159      	strb	r1, [r3, #5]

  /* Initialize Ethernet. */
  heth.Instance = ETH;
 800a5cc:	4c10      	ldr	r4, [pc, #64]	; (800a610 <netdev_init+0x60>)
 800a5ce:	4911      	ldr	r1, [pc, #68]	; (800a614 <netdev_init+0x64>)
 800a5d0:	6021      	str	r1, [r4, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800a5d2:	2101      	movs	r1, #1
 800a5d4:	6061      	str	r1, [r4, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800a5d6:	8222      	strh	r2, [r4, #16]
  heth.Init.MACAddr = &(macAddress.addr)[0];
 800a5d8:	6163      	str	r3, [r4, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800a5da:	61a2      	str	r2, [r4, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800a5dc:	61e2      	str	r2, [r4, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a5de:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a5e2:	6223      	str	r3, [r4, #32]
  (void)HAL_ETH_Init(&heth);
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f7fe fe85 	bl	80092f4 <HAL_ETH_Init>

  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800a5ea:	2304      	movs	r3, #4
 800a5ec:	4a0a      	ldr	r2, [pc, #40]	; (800a618 <netdev_init+0x68>)
 800a5ee:	490b      	ldr	r1, [pc, #44]	; (800a61c <netdev_init+0x6c>)
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	f7fe fcc2 	bl	8008f7a <HAL_ETH_DMATxDescListInit>
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800a5f6:	2304      	movs	r3, #4
 800a5f8:	4a09      	ldr	r2, [pc, #36]	; (800a620 <netdev_init+0x70>)
 800a5fa:	490a      	ldr	r1, [pc, #40]	; (800a624 <netdev_init+0x74>)
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	f7fe fcf5 	bl	8008fec <HAL_ETH_DMARxDescListInit>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800a602:	4620      	mov	r0, r4
 800a604:	f7fe ffa0 	bl	8009548 <HAL_ETH_Start>
}
 800a608:	bd10      	pop	{r4, pc}
 800a60a:	bf00      	nop
 800a60c:	20000138 	.word	0x20000138
 800a610:	20001ac8 	.word	0x20001ac8
 800a614:	40028000 	.word	0x40028000
 800a618:	20001b10 	.word	0x20001b10
 800a61c:	200001f8 	.word	0x200001f8
 800a620:	20000278 	.word	0x20000278
 800a624:	20001a48 	.word	0x20001a48

0800a628 <netdev_init_mac>:

/*---------------------------------------------------------------------------*/
void netdev_init_mac(void)
{
  /* Configure the MAC address */
  uip_setethaddr(macAddress);
 800a628:	4a07      	ldr	r2, [pc, #28]	; (800a648 <netdev_init_mac+0x20>)
 800a62a:	7811      	ldrb	r1, [r2, #0]
 800a62c:	4b07      	ldr	r3, [pc, #28]	; (800a64c <netdev_init_mac+0x24>)
 800a62e:	7019      	strb	r1, [r3, #0]
 800a630:	7851      	ldrb	r1, [r2, #1]
 800a632:	7059      	strb	r1, [r3, #1]
 800a634:	7891      	ldrb	r1, [r2, #2]
 800a636:	7099      	strb	r1, [r3, #2]
 800a638:	78d1      	ldrb	r1, [r2, #3]
 800a63a:	70d9      	strb	r1, [r3, #3]
 800a63c:	7911      	ldrb	r1, [r2, #4]
 800a63e:	7119      	strb	r1, [r3, #4]
 800a640:	7952      	ldrb	r2, [r2, #5]
 800a642:	715a      	strb	r2, [r3, #5]
}
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	20000138 	.word	0x20000138
 800a64c:	20000180 	.word	0x20000180

0800a650 <netdev_get_mac>:


/*---------------------------------------------------------------------------*/
void netdev_get_mac(unsigned char * mac_addr)
{
  mac_addr[0] = macAddress.addr[0];
 800a650:	4b06      	ldr	r3, [pc, #24]	; (800a66c <netdev_get_mac+0x1c>)
 800a652:	781a      	ldrb	r2, [r3, #0]
 800a654:	7002      	strb	r2, [r0, #0]
  mac_addr[1] = macAddress.addr[1];
 800a656:	785a      	ldrb	r2, [r3, #1]
 800a658:	7042      	strb	r2, [r0, #1]
  mac_addr[2] = macAddress.addr[2];
 800a65a:	789a      	ldrb	r2, [r3, #2]
 800a65c:	7082      	strb	r2, [r0, #2]
  mac_addr[3] = macAddress.addr[3];
 800a65e:	78da      	ldrb	r2, [r3, #3]
 800a660:	70c2      	strb	r2, [r0, #3]
  mac_addr[4] = macAddress.addr[4];
 800a662:	791a      	ldrb	r2, [r3, #4]
 800a664:	7102      	strb	r2, [r0, #4]
  mac_addr[5] = macAddress.addr[5];
 800a666:	795b      	ldrb	r3, [r3, #5]
 800a668:	7143      	strb	r3, [r0, #5]
}
 800a66a:	4770      	bx	lr
 800a66c:	20000138 	.word	0x20000138

0800a670 <netdev_read>:


/*---------------------------------------------------------------------------*/
unsigned int netdev_read(void)
{
 800a670:	b538      	push	{r3, r4, r5, lr}
  uint16_t  len = 0;
  uint8_t * buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;

  /* Check if a new frame was received. */
  if (HAL_ETH_GetReceivedFrame(&heth) == HAL_OK)
 800a672:	4812      	ldr	r0, [pc, #72]	; (800a6bc <netdev_read+0x4c>)
 800a674:	f7fe fd80 	bl	8009178 <HAL_ETH_GetReceivedFrame>
 800a678:	b110      	cbz	r0, 800a680 <netdev_read+0x10>
  unsigned int result = 0;
 800a67a:	2400      	movs	r4, #0
    /* Update the result. */
    result = len;
  }
  /* Give the result back to the caller. */
  return result;
}
 800a67c:	4620      	mov	r0, r4
 800a67e:	bd38      	pop	{r3, r4, r5, pc}
    len = heth.RxFrameInfos.length;
 800a680:	4d0e      	ldr	r5, [pc, #56]	; (800a6bc <netdev_read+0x4c>)
 800a682:	8fac      	ldrh	r4, [r5, #60]	; 0x3c
    memcpy(uip_buf, buffer, len);
 800a684:	4622      	mov	r2, r4
 800a686:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800a688:	480d      	ldr	r0, [pc, #52]	; (800a6c0 <netdev_read+0x50>)
 800a68a:	f001 fc46 	bl	800bf1a <memcpy>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a68e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800a690:	6813      	ldr	r3, [r2, #0]
 800a692:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a696:	6013      	str	r3, [r2, #0]
    heth.RxFrameInfos.SegCount =0;
 800a698:	2300      	movs	r3, #0
 800a69a:	63ab      	str	r3, [r5, #56]	; 0x38
    if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800a69c:	682b      	ldr	r3, [r5, #0]
 800a69e:	f241 0214 	movw	r2, #4116	; 0x1014
 800a6a2:	589a      	ldr	r2, [r3, r2]
 800a6a4:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a6a8:	d0e8      	beq.n	800a67c <netdev_read+0xc>
      heth.Instance->DMASR = ETH_DMASR_RBUS;
 800a6aa:	f241 0214 	movw	r2, #4116	; 0x1014
 800a6ae:	2180      	movs	r1, #128	; 0x80
 800a6b0:	5099      	str	r1, [r3, r2]
      heth.Instance->DMARPDR = 0;
 800a6b2:	f241 0208 	movw	r2, #4104	; 0x1008
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	5099      	str	r1, [r3, r2]
 800a6ba:	e7df      	b.n	800a67c <netdev_read+0xc>
 800a6bc:	20001ac8 	.word	0x20001ac8
 800a6c0:	2000332c 	.word	0x2000332c

0800a6c4 <netdev_send>:


/*---------------------------------------------------------------------------*/
void netdev_send(void)
{
 800a6c4:	b538      	push	{r3, r4, r5, lr}
  uint32_t framelength;
  uint32_t timeout;
  ErrorStatus errorStatus = SUCCESS;

  /* Obtain pointer to the transmission DMA descriptor. */
  DmaTxDesc = heth.TxDesc;
 800a6c6:	4b18      	ldr	r3, [pc, #96]	; (800a728 <netdev_send+0x64>)
 800a6c8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  /* Set timeout time to wait for the DMA buffer to become available. */
  timeout = TimerGet() + NETDEV_TX_PACKET_TIMEOUT_MS;
 800a6ca:	f7fe fa8f 	bl	8008bec <TimerGet>
 800a6ce:	f100 05fa 	add.w	r5, r0, #250	; 0xfa
  /* Only continue with packet transmission of the buffer is available. */
  while ((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a6d2:	6823      	ldr	r3, [r4, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	da05      	bge.n	800a6e4 <netdev_send+0x20>
  {
    /* Break loop upon timeout. This would indicate a hardware failure. */
    if (TimerGet() > timeout)
 800a6d8:	f7fe fa88 	bl	8008bec <TimerGet>
 800a6dc:	42a8      	cmp	r0, r5
 800a6de:	d9f8      	bls.n	800a6d2 <netdev_send+0xe>
    {
      /* Update the error status. */
      errorStatus = ERROR;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	e000      	b.n	800a6e6 <netdev_send+0x22>
  ErrorStatus errorStatus = SUCCESS;
 800a6e4:	2301      	movs	r3, #1
      break;
    }
  }
  /* Only continue with transmission if not error was detected. */
  if (errorStatus == SUCCESS)
 800a6e6:	b983      	cbnz	r3, 800a70a <netdev_send+0x46>
  }

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to
   * resume transmission.
   */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800a6e8:	4b0f      	ldr	r3, [pc, #60]	; (800a728 <netdev_send+0x64>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f241 0214 	movw	r2, #4116	; 0x1014
 800a6f0:	589a      	ldr	r2, [r3, r2]
 800a6f2:	f012 0f20 	tst.w	r2, #32
 800a6f6:	d007      	beq.n	800a708 <netdev_send+0x44>
  {
    /* Clear TUS ETHERNET DMA flag. */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800a6f8:	f241 0214 	movw	r2, #4116	; 0x1014
 800a6fc:	2120      	movs	r1, #32
 800a6fe:	5099      	str	r1, [r3, r2]
    /* Resume DMA transmission. */
    heth.Instance->DMATPDR = 0;
 800a700:	f241 0204 	movw	r2, #4100	; 0x1004
 800a704:	2100      	movs	r1, #0
 800a706:	5099      	str	r1, [r3, r2]
  }
}
 800a708:	bd38      	pop	{r3, r4, r5, pc}
    framelength = uip_len;
 800a70a:	4b08      	ldr	r3, [pc, #32]	; (800a72c <netdev_send+0x68>)
 800a70c:	881d      	ldrh	r5, [r3, #0]
    buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a70e:	4c06      	ldr	r4, [pc, #24]	; (800a728 <netdev_send+0x64>)
 800a710:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    memcpy(buffer, uip_buf, framelength);
 800a712:	462a      	mov	r2, r5
 800a714:	4906      	ldr	r1, [pc, #24]	; (800a730 <netdev_send+0x6c>)
 800a716:	6898      	ldr	r0, [r3, #8]
 800a718:	f001 fbff 	bl	800bf1a <memcpy>
    HAL_ETH_TransmitFrame(&heth, framelength);
 800a71c:	4629      	mov	r1, r5
 800a71e:	4620      	mov	r0, r4
 800a720:	f7fe fc9a 	bl	8009058 <HAL_ETH_TransmitFrame>
 800a724:	e7e0      	b.n	800a6e8 <netdev_send+0x24>
 800a726:	bf00      	nop
 800a728:	20001ac8 	.word	0x20001ac8
 800a72c:	200032e0 	.word	0x200032e0
 800a730:	2000332c 	.word	0x2000332c

0800a734 <add_msg_type>:

/*---------------------------------------------------------------------------*/
static u8_t *
add_msg_type(u8_t *optptr, u8_t type)
{
  *optptr++ = DHCP_OPTION_MSG_TYPE;
 800a734:	2335      	movs	r3, #53	; 0x35
 800a736:	7003      	strb	r3, [r0, #0]
  *optptr++ = 1;
 800a738:	2301      	movs	r3, #1
 800a73a:	7043      	strb	r3, [r0, #1]
  *optptr++ = type;
 800a73c:	7081      	strb	r1, [r0, #2]
  return optptr;
}
 800a73e:	3003      	adds	r0, #3
 800a740:	4770      	bx	lr
	...

0800a744 <add_server_id>:
/*---------------------------------------------------------------------------*/
static u8_t *
add_server_id(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_SERVER_ID;
 800a744:	2336      	movs	r3, #54	; 0x36
 800a746:	7003      	strb	r3, [r0, #0]
  *optptr++ = 4;
 800a748:	2304      	movs	r3, #4
 800a74a:	7043      	strb	r3, [r0, #1]
  memcpy(optptr, s.serverid, 4);
 800a74c:	4b02      	ldr	r3, [pc, #8]	; (800a758 <add_server_id+0x14>)
 800a74e:	69db      	ldr	r3, [r3, #28]
 800a750:	f8c0 3002 	str.w	r3, [r0, #2]
  return optptr + 4;
}
 800a754:	3006      	adds	r0, #6
 800a756:	4770      	bx	lr
 800a758:	20000140 	.word	0x20000140

0800a75c <add_req_ipaddr>:
/*---------------------------------------------------------------------------*/
static u8_t *
add_req_ipaddr(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_REQ_IPADDR;
 800a75c:	2332      	movs	r3, #50	; 0x32
 800a75e:	7003      	strb	r3, [r0, #0]
  *optptr++ = 4;
 800a760:	2304      	movs	r3, #4
 800a762:	7043      	strb	r3, [r0, #1]
  memcpy(optptr, s.ipaddr, 4);
 800a764:	4b02      	ldr	r3, [pc, #8]	; (800a770 <add_req_ipaddr+0x14>)
 800a766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a768:	f8c0 3002 	str.w	r3, [r0, #2]
  return optptr + 4;
}
 800a76c:	3006      	adds	r0, #6
 800a76e:	4770      	bx	lr
 800a770:	20000140 	.word	0x20000140

0800a774 <add_req_options>:
/*---------------------------------------------------------------------------*/
static u8_t *
add_req_options(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_REQ_LIST;
 800a774:	2337      	movs	r3, #55	; 0x37
 800a776:	7003      	strb	r3, [r0, #0]
  *optptr++ = 3;
 800a778:	2303      	movs	r3, #3
 800a77a:	7043      	strb	r3, [r0, #1]
  *optptr++ = DHCP_OPTION_SUBNET_MASK;
 800a77c:	2201      	movs	r2, #1
 800a77e:	7082      	strb	r2, [r0, #2]
  *optptr++ = DHCP_OPTION_ROUTER;
 800a780:	70c3      	strb	r3, [r0, #3]
  *optptr++ = DHCP_OPTION_DNS_SERVER;
 800a782:	2306      	movs	r3, #6
 800a784:	7103      	strb	r3, [r0, #4]
  return optptr;
}
 800a786:	3005      	adds	r0, #5
 800a788:	4770      	bx	lr

0800a78a <add_end>:
/*---------------------------------------------------------------------------*/
static u8_t *
add_end(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_END;
 800a78a:	23ff      	movs	r3, #255	; 0xff
 800a78c:	7003      	strb	r3, [r0, #0]
  return optptr;
}
 800a78e:	3001      	adds	r0, #1
 800a790:	4770      	bx	lr
	...

0800a794 <parse_options>:
  uip_send(uip_appdata, end - (u8_t *)uip_appdata);
}
/*---------------------------------------------------------------------------*/
static u8_t
parse_options(u8_t *optptr, int len)
{
 800a794:	4603      	mov	r3, r0
  u8_t *end = optptr + len;
 800a796:	4401      	add	r1, r0
  u8_t type = 0;
 800a798:	2000      	movs	r0, #0

  while (optptr < end)
 800a79a:	428b      	cmp	r3, r1
 800a79c:	d234      	bcs.n	800a808 <parse_options+0x74>
{
 800a79e:	b410      	push	{r4}
 800a7a0:	e010      	b.n	800a7c4 <parse_options+0x30>
  {
    switch (*optptr)
 800a7a2:	2a36      	cmp	r2, #54	; 0x36
 800a7a4:	d023      	beq.n	800a7ee <parse_options+0x5a>
 800a7a6:	2aff      	cmp	r2, #255	; 0xff
 800a7a8:	d02b      	beq.n	800a802 <parse_options+0x6e>
 800a7aa:	2a35      	cmp	r2, #53	; 0x35
 800a7ac:	d105      	bne.n	800a7ba <parse_options+0x26>
        break;
      case DHCP_OPTION_DNS_SERVER:
        memcpy(s.dnsaddr, optptr + 2, 4);
        break;
      case DHCP_OPTION_MSG_TYPE:
        type = *(optptr + 2);
 800a7ae:	7898      	ldrb	r0, [r3, #2]
        break;
 800a7b0:	e003      	b.n	800a7ba <parse_options+0x26>
        memcpy(s.netmask, optptr + 2, 4);
 800a7b2:	f8d3 4002 	ldr.w	r4, [r3, #2]
 800a7b6:	4a15      	ldr	r2, [pc, #84]	; (800a80c <parse_options+0x78>)
 800a7b8:	6294      	str	r4, [r2, #40]	; 0x28
        break;
      case DHCP_OPTION_END:
        return type;
    }

    optptr += optptr[1] + 2;
 800a7ba:	785a      	ldrb	r2, [r3, #1]
 800a7bc:	3202      	adds	r2, #2
 800a7be:	4413      	add	r3, r2
  while (optptr < end)
 800a7c0:	428b      	cmp	r3, r1
 800a7c2:	d21e      	bcs.n	800a802 <parse_options+0x6e>
    switch (*optptr)
 800a7c4:	781a      	ldrb	r2, [r3, #0]
 800a7c6:	2a33      	cmp	r2, #51	; 0x33
 800a7c8:	d016      	beq.n	800a7f8 <parse_options+0x64>
 800a7ca:	d8ea      	bhi.n	800a7a2 <parse_options+0xe>
 800a7cc:	2a03      	cmp	r2, #3
 800a7ce:	d004      	beq.n	800a7da <parse_options+0x46>
 800a7d0:	2a06      	cmp	r2, #6
 800a7d2:	d007      	beq.n	800a7e4 <parse_options+0x50>
 800a7d4:	2a01      	cmp	r2, #1
 800a7d6:	d1f0      	bne.n	800a7ba <parse_options+0x26>
 800a7d8:	e7eb      	b.n	800a7b2 <parse_options+0x1e>
        memcpy(s.default_router, optptr + 2, 4);
 800a7da:	f8d3 4002 	ldr.w	r4, [r3, #2]
 800a7de:	4a0b      	ldr	r2, [pc, #44]	; (800a80c <parse_options+0x78>)
 800a7e0:	6314      	str	r4, [r2, #48]	; 0x30
        break;
 800a7e2:	e7ea      	b.n	800a7ba <parse_options+0x26>
        memcpy(s.dnsaddr, optptr + 2, 4);
 800a7e4:	f8d3 4002 	ldr.w	r4, [r3, #2]
 800a7e8:	4a08      	ldr	r2, [pc, #32]	; (800a80c <parse_options+0x78>)
 800a7ea:	62d4      	str	r4, [r2, #44]	; 0x2c
        break;
 800a7ec:	e7e5      	b.n	800a7ba <parse_options+0x26>
        memcpy(s.serverid, optptr + 2, 4);
 800a7ee:	f8d3 4002 	ldr.w	r4, [r3, #2]
 800a7f2:	4a06      	ldr	r2, [pc, #24]	; (800a80c <parse_options+0x78>)
 800a7f4:	61d4      	str	r4, [r2, #28]
        break;
 800a7f6:	e7e0      	b.n	800a7ba <parse_options+0x26>
        memcpy(s.lease_time, optptr + 2, 4);
 800a7f8:	f8d3 4002 	ldr.w	r4, [r3, #2]
 800a7fc:	4a03      	ldr	r2, [pc, #12]	; (800a80c <parse_options+0x78>)
 800a7fe:	6214      	str	r4, [r2, #32]
        break;
 800a800:	e7db      	b.n	800a7ba <parse_options+0x26>
  }
  return type;
}
 800a802:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a806:	4770      	bx	lr
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	20000140 	.word	0x20000140

0800a810 <dhcpc_configured>:
/*---------------------------------------------------------------------------*/
void
dhcpc_configured(const struct dhcpc_state *s)
{
  /* set the IP address received from the DHCP server. */
  uip_sethostaddr(&s->ipaddr);
 800a810:	4b07      	ldr	r3, [pc, #28]	; (800a830 <dhcpc_configured+0x20>)
 800a812:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 800a814:	801a      	strh	r2, [r3, #0]
 800a816:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 800a818:	805a      	strh	r2, [r3, #2]
  /* set the network mask received from the DHCP server. */
  uip_setnetmask(&s->netmask);
 800a81a:	4b06      	ldr	r3, [pc, #24]	; (800a834 <dhcpc_configured+0x24>)
 800a81c:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 800a81e:	801a      	strh	r2, [r3, #0]
 800a820:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800a822:	805a      	strh	r2, [r3, #2]
  /* set the gateway address received from the DHCP server. */
  uip_setdraddr(&s->default_router);
 800a824:	4b04      	ldr	r3, [pc, #16]	; (800a838 <dhcpc_configured+0x28>)
 800a826:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 800a828:	801a      	strh	r2, [r3, #0]
 800a82a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800a82c:	805a      	strh	r2, [r3, #2]
}
 800a82e:	4770      	bx	lr
 800a830:	20003328 	.word	0x20003328
 800a834:	20003324 	.word	0x20003324
 800a838:	20003320 	.word	0x20003320

0800a83c <create_msg>:
{
 800a83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83e:	4604      	mov	r4, r0
  m->op = DHCP_REQUEST;
 800a840:	2301      	movs	r3, #1
 800a842:	7003      	strb	r3, [r0, #0]
  m->htype = DHCP_HTYPE_ETHERNET;
 800a844:	7043      	strb	r3, [r0, #1]
  m->hlen = s.mac_len;
 800a846:	4b18      	ldr	r3, [pc, #96]	; (800a8a8 <create_msg+0x6c>)
 800a848:	699a      	ldr	r2, [r3, #24]
 800a84a:	7082      	strb	r2, [r0, #2]
  m->hops = 0;
 800a84c:	2500      	movs	r5, #0
 800a84e:	70c5      	strb	r5, [r0, #3]
  memcpy(m->xid, xid, sizeof(m->xid));
 800a850:	4a16      	ldr	r2, [pc, #88]	; (800a8ac <create_msg+0x70>)
 800a852:	6812      	ldr	r2, [r2, #0]
 800a854:	6042      	str	r2, [r0, #4]
  m->secs = 0;
 800a856:	8105      	strh	r5, [r0, #8]
  m->flags = HTONS(BOOTP_BROADCAST); /*  Broadcast bit. */
 800a858:	2780      	movs	r7, #128	; 0x80
 800a85a:	8147      	strh	r7, [r0, #10]
  memcpy(m->ciaddr, uip_hostaddr, sizeof(m->ciaddr));
 800a85c:	4a14      	ldr	r2, [pc, #80]	; (800a8b0 <create_msg+0x74>)
 800a85e:	6812      	ldr	r2, [r2, #0]
 800a860:	60c2      	str	r2, [r0, #12]
  memset(m->yiaddr, 0, sizeof(m->yiaddr));
 800a862:	6105      	str	r5, [r0, #16]
  memset(m->siaddr, 0, sizeof(m->siaddr));
 800a864:	6145      	str	r5, [r0, #20]
  memset(m->giaddr, 0, sizeof(m->giaddr));
 800a866:	6185      	str	r5, [r0, #24]
  memcpy(m->chaddr, s.mac_addr, s.mac_len);
 800a868:	699e      	ldr	r6, [r3, #24]
 800a86a:	4632      	mov	r2, r6
 800a86c:	6959      	ldr	r1, [r3, #20]
 800a86e:	301c      	adds	r0, #28
 800a870:	f001 fb53 	bl	800bf1a <memcpy>
  memset(&m->chaddr[s.mac_len], 0, sizeof(m->chaddr) - s.mac_len);
 800a874:	f106 0018 	add.w	r0, r6, #24
 800a878:	4420      	add	r0, r4
 800a87a:	f1c6 0210 	rsb	r2, r6, #16
 800a87e:	4629      	mov	r1, r5
 800a880:	3004      	adds	r0, #4
 800a882:	f001 fb55 	bl	800bf30 <memset>
  memset(m->sname, 0, sizeof(m->sname));
 800a886:	2240      	movs	r2, #64	; 0x40
 800a888:	4629      	mov	r1, r5
 800a88a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800a88e:	f001 fb4f 	bl	800bf30 <memset>
  memset(m->file, 0, sizeof(m->file));
 800a892:	463a      	mov	r2, r7
 800a894:	4629      	mov	r1, r5
 800a896:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 800a89a:	f001 fb49 	bl	800bf30 <memset>
  memcpy(m->options, magic_cookie, sizeof(magic_cookie));
 800a89e:	4b05      	ldr	r3, [pc, #20]	; (800a8b4 <create_msg+0x78>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
 800a8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8a8:	20000140 	.word	0x20000140
 800a8ac:	0800bf74 	.word	0x0800bf74
 800a8b0:	20003328 	.word	0x20003328
 800a8b4:	0800bf70 	.word	0x0800bf70

0800a8b8 <send_discover>:
{
 800a8b8:	b538      	push	{r3, r4, r5, lr}
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
 800a8ba:	4c0a      	ldr	r4, [pc, #40]	; (800a8e4 <send_discover+0x2c>)
 800a8bc:	6825      	ldr	r5, [r4, #0]
  create_msg(m);
 800a8be:	4628      	mov	r0, r5
 800a8c0:	f7ff ffbc 	bl	800a83c <create_msg>
  end = add_msg_type(&m->options[4], DHCPDISCOVER);
 800a8c4:	2101      	movs	r1, #1
 800a8c6:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
 800a8ca:	f7ff ff33 	bl	800a734 <add_msg_type>
  end = add_req_options(end);
 800a8ce:	f7ff ff51 	bl	800a774 <add_req_options>
  end = add_end(end);
 800a8d2:	f7ff ff5a 	bl	800a78a <add_end>
  uip_send(uip_appdata, end - (u8_t *)uip_appdata);
 800a8d6:	6823      	ldr	r3, [r4, #0]
 800a8d8:	1ac1      	subs	r1, r0, r3
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f001 f8f4 	bl	800bac8 <uip_send>
}
 800a8e0:	bd38      	pop	{r3, r4, r5, pc}
 800a8e2:	bf00      	nop
 800a8e4:	200032f4 	.word	0x200032f4

0800a8e8 <send_request>:
{
 800a8e8:	b538      	push	{r3, r4, r5, lr}
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
 800a8ea:	4c0b      	ldr	r4, [pc, #44]	; (800a918 <send_request+0x30>)
 800a8ec:	6825      	ldr	r5, [r4, #0]
  create_msg(m);
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	f7ff ffa4 	bl	800a83c <create_msg>
  end = add_msg_type(&m->options[4], DHCPREQUEST);
 800a8f4:	2103      	movs	r1, #3
 800a8f6:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
 800a8fa:	f7ff ff1b 	bl	800a734 <add_msg_type>
  end = add_server_id(end);
 800a8fe:	f7ff ff21 	bl	800a744 <add_server_id>
  end = add_req_ipaddr(end);
 800a902:	f7ff ff2b 	bl	800a75c <add_req_ipaddr>
  end = add_end(end);
 800a906:	f7ff ff40 	bl	800a78a <add_end>
  uip_send(uip_appdata, end - (u8_t *)uip_appdata);
 800a90a:	6823      	ldr	r3, [r4, #0]
 800a90c:	1ac1      	subs	r1, r0, r3
 800a90e:	4618      	mov	r0, r3
 800a910:	f001 f8da 	bl	800bac8 <uip_send>
}
 800a914:	bd38      	pop	{r3, r4, r5, pc}
 800a916:	bf00      	nop
 800a918:	200032f4 	.word	0x200032f4

0800a91c <parse_msg>:
{
 800a91c:	b510      	push	{r4, lr}
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
 800a91e:	4b11      	ldr	r3, [pc, #68]	; (800a964 <parse_msg+0x48>)
 800a920:	681c      	ldr	r4, [r3, #0]
  if (m->op == DHCP_REPLY &&
 800a922:	7823      	ldrb	r3, [r4, #0]
 800a924:	2b02      	cmp	r3, #2
 800a926:	d001      	beq.n	800a92c <parse_msg+0x10>
  return 0;
 800a928:	2000      	movs	r0, #0
}
 800a92a:	bd10      	pop	{r4, pc}
      memcmp(m->xid, xid, sizeof(xid)) == 0 &&
 800a92c:	2204      	movs	r2, #4
 800a92e:	490e      	ldr	r1, [pc, #56]	; (800a968 <parse_msg+0x4c>)
 800a930:	18a0      	adds	r0, r4, r2
 800a932:	f001 fae3 	bl	800befc <memcmp>
  if (m->op == DHCP_REPLY &&
 800a936:	b998      	cbnz	r0, 800a960 <parse_msg+0x44>
      memcmp(m->chaddr, s.mac_addr, s.mac_len) == 0)
 800a938:	4b0c      	ldr	r3, [pc, #48]	; (800a96c <parse_msg+0x50>)
 800a93a:	699a      	ldr	r2, [r3, #24]
 800a93c:	6959      	ldr	r1, [r3, #20]
 800a93e:	f104 001c 	add.w	r0, r4, #28
 800a942:	f001 fadb 	bl	800befc <memcmp>
      memcmp(m->xid, xid, sizeof(xid)) == 0 &&
 800a946:	b108      	cbz	r0, 800a94c <parse_msg+0x30>
  return 0;
 800a948:	2000      	movs	r0, #0
 800a94a:	e7ee      	b.n	800a92a <parse_msg+0xe>
    memcpy(s.ipaddr, m->yiaddr, 4);
 800a94c:	6922      	ldr	r2, [r4, #16]
 800a94e:	4b07      	ldr	r3, [pc, #28]	; (800a96c <parse_msg+0x50>)
 800a950:	625a      	str	r2, [r3, #36]	; 0x24
    return parse_options(&m->options[4], uip_datalen());
 800a952:	4b07      	ldr	r3, [pc, #28]	; (800a970 <parse_msg+0x54>)
 800a954:	8819      	ldrh	r1, [r3, #0]
 800a956:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
 800a95a:	f7ff ff1b 	bl	800a794 <parse_options>
 800a95e:	e7e4      	b.n	800a92a <parse_msg+0xe>
  return 0;
 800a960:	2000      	movs	r0, #0
 800a962:	e7e2      	b.n	800a92a <parse_msg+0xe>
 800a964:	200032f4 	.word	0x200032f4
 800a968:	0800bf74 	.word	0x0800bf74
 800a96c:	20000140 	.word	0x20000140
 800a970:	200032e0 	.word	0x200032e0

0800a974 <dhcpc_init>:
{
 800a974:	b510      	push	{r4, lr}
 800a976:	b082      	sub	sp, #8
  s.mac_addr = mac_addr;
 800a978:	4c0c      	ldr	r4, [pc, #48]	; (800a9ac <dhcpc_init+0x38>)
 800a97a:	6160      	str	r0, [r4, #20]
  s.mac_len  = mac_len;
 800a97c:	61a1      	str	r1, [r4, #24]
  s.state = STATE_INITIAL;
 800a97e:	2300      	movs	r3, #0
 800a980:	70a3      	strb	r3, [r4, #2]
  uip_ipaddr(addr, 255,255,255,255);
 800a982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a986:	f8ad 3004 	strh.w	r3, [sp, #4]
 800a98a:	f8ad 3006 	strh.w	r3, [sp, #6]
  s.conn = uip_udp_new(&addr, HTONS(DHCPC_SERVER_PORT));
 800a98e:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 800a992:	a801      	add	r0, sp, #4
 800a994:	f001 f848 	bl	800ba28 <uip_udp_new>
 800a998:	6060      	str	r0, [r4, #4]
  if (s.conn != NULL)
 800a99a:	b110      	cbz	r0, 800a9a2 <dhcpc_init+0x2e>
    uip_udp_bind(s.conn, HTONS(DHCPC_CLIENT_PORT));
 800a99c:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800a9a0:	8083      	strh	r3, [r0, #4]
  PT_INIT(&s.pt);
 800a9a2:	4b02      	ldr	r3, [pc, #8]	; (800a9ac <dhcpc_init+0x38>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	801a      	strh	r2, [r3, #0]
}
 800a9a8:	b002      	add	sp, #8
 800a9aa:	bd10      	pop	{r4, pc}
 800a9ac:	20000140 	.word	0x20000140

0800a9b0 <dhcpc_request>:
  uip_sethostaddr(ipaddr);
 800a9b0:	4b02      	ldr	r3, [pc, #8]	; (800a9bc <dhcpc_request+0xc>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	801a      	strh	r2, [r3, #0]
 800a9b6:	805a      	strh	r2, [r3, #2]
}
 800a9b8:	4770      	bx	lr
 800a9ba:	bf00      	nop
 800a9bc:	20003328 	.word	0x20003328

0800a9c0 <handle_dhcp>:
{
 800a9c0:	b538      	push	{r3, r4, r5, lr}
  PT_BEGIN(&s.pt);
 800a9c2:	4b98      	ldr	r3, [pc, #608]	; (800ac24 <handle_dhcp+0x264>)
 800a9c4:	881b      	ldrh	r3, [r3, #0]
 800a9c6:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 800a9ca:	d015      	beq.n	800a9f8 <handle_dhcp+0x38>
 800a9cc:	d859      	bhi.n	800aa82 <handle_dhcp+0xc2>
 800a9ce:	f240 120f 	movw	r2, #271	; 0x10f
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	f000 809a 	beq.w	800ab0c <handle_dhcp+0x14c>
 800a9d8:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800a9dc:	d347      	bcc.n	800aa6e <handle_dhcp+0xae>
 800a9de:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800a9e2:	f000 8097 	beq.w	800ab14 <handle_dhcp+0x154>
 800a9e6:	f240 1225 	movw	r2, #293	; 0x125
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	f040 8115 	bne.w	800ac1a <handle_dhcp+0x25a>
    PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));
 800a9f0:	4b8c      	ldr	r3, [pc, #560]	; (800ac24 <handle_dhcp+0x264>)
 800a9f2:	f44f 7293 	mov.w	r2, #294	; 0x126
 800a9f6:	801a      	strh	r2, [r3, #0]
 800a9f8:	4b8b      	ldr	r3, [pc, #556]	; (800ac28 <handle_dhcp+0x268>)
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	f013 0f02 	tst.w	r3, #2
 800aa00:	f000 80cb 	beq.w	800ab9a <handle_dhcp+0x1da>
    if (uip_newdata() && parse_msg() == DHCPACK)
 800aa04:	4b88      	ldr	r3, [pc, #544]	; (800ac28 <handle_dhcp+0x268>)
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	f013 0f02 	tst.w	r3, #2
 800aa0c:	f040 80cd 	bne.w	800abaa <handle_dhcp+0x1ea>
    if (s.ticks <= CLOCK_SECOND * 10)
 800aa10:	4b84      	ldr	r3, [pc, #528]	; (800ac24 <handle_dhcp+0x264>)
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	f242 7210 	movw	r2, #10000	; 0x2710
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	f300 80cf 	bgt.w	800abbc <handle_dhcp+0x1fc>
      s.ticks += CLOCK_SECOND;
 800aa1e:	4a81      	ldr	r2, [pc, #516]	; (800ac24 <handle_dhcp+0x264>)
 800aa20:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800aa24:	6113      	str	r3, [r2, #16]
  while (s.state != STATE_CONFIG_RECEIVED);
 800aa26:	7893      	ldrb	r3, [r2, #2]
 800aa28:	2b03      	cmp	r3, #3
 800aa2a:	f040 80a9 	bne.w	800ab80 <handle_dhcp+0x1c0>
  dhcpc_configured(&s);
 800aa2e:	487d      	ldr	r0, [pc, #500]	; (800ac24 <handle_dhcp+0x264>)
 800aa30:	f7ff feee 	bl	800a810 <dhcpc_configured>
    lease_renew_time  = ((unsigned long)(ntohs(s.lease_time[0])) << 16u);
 800aa34:	4d7b      	ldr	r5, [pc, #492]	; (800ac24 <handle_dhcp+0x264>)
 800aa36:	8c28      	ldrh	r0, [r5, #32]
 800aa38:	f000 f9bc 	bl	800adb4 <htons>
 800aa3c:	0404      	lsls	r4, r0, #16
    lease_renew_time |= (ntohs(s.lease_time[1]));
 800aa3e:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 800aa40:	f000 f9b8 	bl	800adb4 <htons>
 800aa44:	4320      	orrs	r0, r4
    lease_renew_time /= 2;
 800aa46:	0840      	lsrs	r0, r0, #1
    if ((lease_renew_time * CLOCK_SECOND) <= INT_MAX)
 800aa48:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800aa4c:	fb04 f000 	mul.w	r0, r4, r0
 800aa50:	2800      	cmp	r0, #0
 800aa52:	f2c0 80b7 	blt.w	800abc4 <handle_dhcp+0x204>
      s.ticks = lease_renew_time * CLOCK_SECOND;
 800aa56:	6128      	str	r0, [r5, #16]
    timer_set(&s.timer, s.ticks);
 800aa58:	4c72      	ldr	r4, [pc, #456]	; (800ac24 <handle_dhcp+0x264>)
 800aa5a:	6921      	ldr	r1, [r4, #16]
 800aa5c:	f104 0008 	add.w	r0, r4, #8
 800aa60:	f001 fa14 	bl	800be8c <timer_set>
    PT_YIELD(&s.pt);
 800aa64:	f240 1355 	movw	r3, #341	; 0x155
 800aa68:	8023      	strh	r3, [r4, #0]
 800aa6a:	2003      	movs	r0, #3
 800aa6c:	e075      	b.n	800ab5a <handle_dhcp+0x19a>
  PT_BEGIN(&s.pt);
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f040 80d3 	bne.w	800ac1a <handle_dhcp+0x25a>
  s.state = STATE_SENDING;
 800aa74:	4b6b      	ldr	r3, [pc, #428]	; (800ac24 <handle_dhcp+0x264>)
 800aa76:	2201      	movs	r2, #1
 800aa78:	709a      	strb	r2, [r3, #2]
  s.ticks = CLOCK_SECOND;
 800aa7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa7e:	611a      	str	r2, [r3, #16]
 800aa80:	e05f      	b.n	800ab42 <handle_dhcp+0x182>
  PT_BEGIN(&s.pt);
 800aa82:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 800aa86:	d03a      	beq.n	800aafe <handle_dhcp+0x13e>
 800aa88:	d930      	bls.n	800aaec <handle_dhcp+0x12c>
 800aa8a:	f5b3 7fb5 	cmp.w	r3, #362	; 0x16a
 800aa8e:	f000 80a7 	beq.w	800abe0 <handle_dhcp+0x220>
 800aa92:	f240 126b 	movw	r2, #363	; 0x16b
 800aa96:	4293      	cmp	r3, r2
 800aa98:	f040 80bf 	bne.w	800ac1a <handle_dhcp+0x25a>
      PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));
 800aa9c:	4b62      	ldr	r3, [pc, #392]	; (800ac28 <handle_dhcp+0x268>)
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	f013 0f02 	tst.w	r3, #2
 800aaa4:	f000 80a1 	beq.w	800abea <handle_dhcp+0x22a>
      if (uip_newdata() && parse_msg() == DHCPACK)
 800aaa8:	4b5f      	ldr	r3, [pc, #380]	; (800ac28 <handle_dhcp+0x268>)
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	f013 0f02 	tst.w	r3, #2
 800aab0:	f040 80a3 	bne.w	800abfa <handle_dhcp+0x23a>
      if (s.ticks <= CLOCK_SECOND * 10)
 800aab4:	4b5b      	ldr	r3, [pc, #364]	; (800ac24 <handle_dhcp+0x264>)
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	f242 7210 	movw	r2, #10000	; 0x2710
 800aabc:	4293      	cmp	r3, r2
 800aabe:	f300 80a8 	bgt.w	800ac12 <handle_dhcp+0x252>
        s.ticks += CLOCK_SECOND;
 800aac2:	4a58      	ldr	r2, [pc, #352]	; (800ac24 <handle_dhcp+0x264>)
 800aac4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800aac8:	6113      	str	r3, [r2, #16]
    while (s.state != STATE_CONFIG_RECEIVED);
 800aaca:	7893      	ldrb	r3, [r2, #2]
 800aacc:	2b03      	cmp	r3, #3
 800aace:	f000 809c 	beq.w	800ac0a <handle_dhcp+0x24a>
      send_request();
 800aad2:	f7ff ff09 	bl	800a8e8 <send_request>
      timer_set(&s.timer, s.ticks);
 800aad6:	4c53      	ldr	r4, [pc, #332]	; (800ac24 <handle_dhcp+0x264>)
 800aad8:	6921      	ldr	r1, [r4, #16]
 800aada:	f104 0008 	add.w	r0, r4, #8
 800aade:	f001 f9d5 	bl	800be8c <timer_set>
      PT_YIELD(&s.pt);
 800aae2:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 800aae6:	8023      	strh	r3, [r4, #0]
 800aae8:	2003      	movs	r0, #3
 800aaea:	e036      	b.n	800ab5a <handle_dhcp+0x19a>
  PT_BEGIN(&s.pt);
 800aaec:	f240 1255 	movw	r2, #341	; 0x155
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	f040 8092 	bne.w	800ac1a <handle_dhcp+0x25a>
    PT_WAIT_UNTIL(&s.pt, timer_expired(&s.timer));
 800aaf6:	4b4b      	ldr	r3, [pc, #300]	; (800ac24 <handle_dhcp+0x264>)
 800aaf8:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800aafc:	801a      	strh	r2, [r3, #0]
 800aafe:	484b      	ldr	r0, [pc, #300]	; (800ac2c <handle_dhcp+0x26c>)
 800ab00:	f001 f9cb 	bl	800be9a <timer_expired>
 800ab04:	2800      	cmp	r0, #0
 800ab06:	d162      	bne.n	800abce <handle_dhcp+0x20e>
 800ab08:	2000      	movs	r0, #0
 800ab0a:	e026      	b.n	800ab5a <handle_dhcp+0x19a>
    PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));
 800ab0c:	4b45      	ldr	r3, [pc, #276]	; (800ac24 <handle_dhcp+0x264>)
 800ab0e:	f44f 7288 	mov.w	r2, #272	; 0x110
 800ab12:	801a      	strh	r2, [r3, #0]
 800ab14:	4b44      	ldr	r3, [pc, #272]	; (800ac28 <handle_dhcp+0x268>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	f013 0f02 	tst.w	r3, #2
 800ab1c:	d01e      	beq.n	800ab5c <handle_dhcp+0x19c>
    if (uip_newdata() && parse_msg() == DHCPOFFER)
 800ab1e:	4b42      	ldr	r3, [pc, #264]	; (800ac28 <handle_dhcp+0x268>)
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	f013 0f02 	tst.w	r3, #2
 800ab26:	d120      	bne.n	800ab6a <handle_dhcp+0x1aa>
    if (s.ticks < CLOCK_SECOND * 60)
 800ab28:	4b3e      	ldr	r3, [pc, #248]	; (800ac24 <handle_dhcp+0x264>)
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800ab30:	4293      	cmp	r3, r2
 800ab32:	dc02      	bgt.n	800ab3a <handle_dhcp+0x17a>
      s.ticks *= 2;
 800ab34:	005b      	lsls	r3, r3, #1
 800ab36:	4a3b      	ldr	r2, [pc, #236]	; (800ac24 <handle_dhcp+0x264>)
 800ab38:	6113      	str	r3, [r2, #16]
  while (s.state != STATE_OFFER_RECEIVED);
 800ab3a:	4b3a      	ldr	r3, [pc, #232]	; (800ac24 <handle_dhcp+0x264>)
 800ab3c:	789b      	ldrb	r3, [r3, #2]
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d01a      	beq.n	800ab78 <handle_dhcp+0x1b8>
    send_discover();
 800ab42:	f7ff feb9 	bl	800a8b8 <send_discover>
    timer_set(&s.timer, s.ticks);
 800ab46:	4c37      	ldr	r4, [pc, #220]	; (800ac24 <handle_dhcp+0x264>)
 800ab48:	6921      	ldr	r1, [r4, #16]
 800ab4a:	f104 0008 	add.w	r0, r4, #8
 800ab4e:	f001 f99d 	bl	800be8c <timer_set>
    PT_YIELD(&s.pt);
 800ab52:	f240 130f 	movw	r3, #271	; 0x10f
 800ab56:	8023      	strh	r3, [r4, #0]
 800ab58:	2003      	movs	r0, #3
}
 800ab5a:	bd38      	pop	{r3, r4, r5, pc}
    PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));
 800ab5c:	4833      	ldr	r0, [pc, #204]	; (800ac2c <handle_dhcp+0x26c>)
 800ab5e:	f001 f99c 	bl	800be9a <timer_expired>
 800ab62:	2800      	cmp	r0, #0
 800ab64:	d1db      	bne.n	800ab1e <handle_dhcp+0x15e>
 800ab66:	2000      	movs	r0, #0
 800ab68:	e7f7      	b.n	800ab5a <handle_dhcp+0x19a>
    if (uip_newdata() && parse_msg() == DHCPOFFER)
 800ab6a:	f7ff fed7 	bl	800a91c <parse_msg>
 800ab6e:	2802      	cmp	r0, #2
 800ab70:	d1da      	bne.n	800ab28 <handle_dhcp+0x168>
      s.state = STATE_OFFER_RECEIVED;
 800ab72:	4b2c      	ldr	r3, [pc, #176]	; (800ac24 <handle_dhcp+0x264>)
 800ab74:	2202      	movs	r2, #2
 800ab76:	709a      	strb	r2, [r3, #2]
  s.ticks = CLOCK_SECOND;
 800ab78:	4b2a      	ldr	r3, [pc, #168]	; (800ac24 <handle_dhcp+0x264>)
 800ab7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ab7e:	611a      	str	r2, [r3, #16]
    send_request();
 800ab80:	f7ff feb2 	bl	800a8e8 <send_request>
    timer_set(&s.timer, s.ticks);
 800ab84:	4c27      	ldr	r4, [pc, #156]	; (800ac24 <handle_dhcp+0x264>)
 800ab86:	6921      	ldr	r1, [r4, #16]
 800ab88:	f104 0008 	add.w	r0, r4, #8
 800ab8c:	f001 f97e 	bl	800be8c <timer_set>
    PT_YIELD(&s.pt);
 800ab90:	f240 1325 	movw	r3, #293	; 0x125
 800ab94:	8023      	strh	r3, [r4, #0]
 800ab96:	2003      	movs	r0, #3
 800ab98:	e7df      	b.n	800ab5a <handle_dhcp+0x19a>
    PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));
 800ab9a:	4824      	ldr	r0, [pc, #144]	; (800ac2c <handle_dhcp+0x26c>)
 800ab9c:	f001 f97d 	bl	800be9a <timer_expired>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	f47f af2f 	bne.w	800aa04 <handle_dhcp+0x44>
 800aba6:	2000      	movs	r0, #0
 800aba8:	e7d7      	b.n	800ab5a <handle_dhcp+0x19a>
    if (uip_newdata() && parse_msg() == DHCPACK)
 800abaa:	f7ff feb7 	bl	800a91c <parse_msg>
 800abae:	2805      	cmp	r0, #5
 800abb0:	f47f af2e 	bne.w	800aa10 <handle_dhcp+0x50>
      s.state = STATE_CONFIG_RECEIVED;
 800abb4:	4b1b      	ldr	r3, [pc, #108]	; (800ac24 <handle_dhcp+0x264>)
 800abb6:	2203      	movs	r2, #3
 800abb8:	709a      	strb	r2, [r3, #2]
      break;
 800abba:	e738      	b.n	800aa2e <handle_dhcp+0x6e>
      PT_RESTART(&s.pt);
 800abbc:	2000      	movs	r0, #0
 800abbe:	4b19      	ldr	r3, [pc, #100]	; (800ac24 <handle_dhcp+0x264>)
 800abc0:	8018      	strh	r0, [r3, #0]
 800abc2:	e7ca      	b.n	800ab5a <handle_dhcp+0x19a>
      s.ticks = INT_MAX;
 800abc4:	4b17      	ldr	r3, [pc, #92]	; (800ac24 <handle_dhcp+0x264>)
 800abc6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800abca:	611a      	str	r2, [r3, #16]
 800abcc:	e744      	b.n	800aa58 <handle_dhcp+0x98>
    s.state = STATE_OFFER_RECEIVED;
 800abce:	4b15      	ldr	r3, [pc, #84]	; (800ac24 <handle_dhcp+0x264>)
 800abd0:	2202      	movs	r2, #2
 800abd2:	709a      	strb	r2, [r3, #2]
    s.ticks = CLOCK_SECOND;
 800abd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800abd8:	611a      	str	r2, [r3, #16]
    dhcpc_request();
 800abda:	f7ff fee9 	bl	800a9b0 <dhcpc_request>
 800abde:	e778      	b.n	800aad2 <handle_dhcp+0x112>
      PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));
 800abe0:	4b10      	ldr	r3, [pc, #64]	; (800ac24 <handle_dhcp+0x264>)
 800abe2:	f240 126b 	movw	r2, #363	; 0x16b
 800abe6:	801a      	strh	r2, [r3, #0]
 800abe8:	e758      	b.n	800aa9c <handle_dhcp+0xdc>
 800abea:	4810      	ldr	r0, [pc, #64]	; (800ac2c <handle_dhcp+0x26c>)
 800abec:	f001 f955 	bl	800be9a <timer_expired>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	f47f af59 	bne.w	800aaa8 <handle_dhcp+0xe8>
 800abf6:	2000      	movs	r0, #0
 800abf8:	e7af      	b.n	800ab5a <handle_dhcp+0x19a>
      if (uip_newdata() && parse_msg() == DHCPACK)
 800abfa:	f7ff fe8f 	bl	800a91c <parse_msg>
 800abfe:	2805      	cmp	r0, #5
 800ac00:	f47f af58 	bne.w	800aab4 <handle_dhcp+0xf4>
        s.state = STATE_CONFIG_RECEIVED;
 800ac04:	4b07      	ldr	r3, [pc, #28]	; (800ac24 <handle_dhcp+0x264>)
 800ac06:	2203      	movs	r2, #3
 800ac08:	709a      	strb	r2, [r3, #2]
    dhcpc_configured(&s);
 800ac0a:	4806      	ldr	r0, [pc, #24]	; (800ac24 <handle_dhcp+0x264>)
 800ac0c:	f7ff fe00 	bl	800a810 <dhcpc_configured>
    lease_renew_time  = ((unsigned long)(ntohs(s.lease_time[0])) << 16u);
 800ac10:	e710      	b.n	800aa34 <handle_dhcp+0x74>
        PT_RESTART(&s.pt);
 800ac12:	2000      	movs	r0, #0
 800ac14:	4b03      	ldr	r3, [pc, #12]	; (800ac24 <handle_dhcp+0x264>)
 800ac16:	8018      	strh	r0, [r3, #0]
 800ac18:	e79f      	b.n	800ab5a <handle_dhcp+0x19a>
  PT_END(&s.pt);
 800ac1a:	4b02      	ldr	r3, [pc, #8]	; (800ac24 <handle_dhcp+0x264>)
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	801a      	strh	r2, [r3, #0]
 800ac20:	2002      	movs	r0, #2
 800ac22:	e79a      	b.n	800ab5a <handle_dhcp+0x19a>
 800ac24:	20000140 	.word	0x20000140
 800ac28:	200032ec 	.word	0x200032ec
 800ac2c:	20000148 	.word	0x20000148

0800ac30 <dhcpc_appcall>:
{
 800ac30:	b508      	push	{r3, lr}
  handle_dhcp();
 800ac32:	f7ff fec5 	bl	800a9c0 <handle_dhcp>
}
 800ac36:	bd08      	pop	{r3, pc}

0800ac38 <chksum>:

#if ! UIP_ARCH_CHKSUM
/*---------------------------------------------------------------------------*/
static u16_t
chksum(u16_t sum, const u8_t *data, u16_t len)
{
 800ac38:	b410      	push	{r4}
  u16_t t;
  const u8_t *dataptr;
  const u8_t *last_byte;

  dataptr = data;
  last_byte = data + len - 1;
 800ac3a:	3a01      	subs	r2, #1
 800ac3c:	440a      	add	r2, r1

  while (dataptr < last_byte)  	/* At least two more bytes */
 800ac3e:	e000      	b.n	800ac42 <chksum+0xa>
    sum += t;
    if (sum < t)
    {
      sum++;		/* carry */
    }
    dataptr += 2;
 800ac40:	3102      	adds	r1, #2
  while (dataptr < last_byte)  	/* At least two more bytes */
 800ac42:	4291      	cmp	r1, r2
 800ac44:	d20b      	bcs.n	800ac5e <chksum+0x26>
    t = (dataptr[0] << 8) + dataptr[1];
 800ac46:	780c      	ldrb	r4, [r1, #0]
 800ac48:	784b      	ldrb	r3, [r1, #1]
 800ac4a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 800ac4e:	b29b      	uxth	r3, r3
    sum += t;
 800ac50:	4418      	add	r0, r3
 800ac52:	b280      	uxth	r0, r0
    if (sum < t)
 800ac54:	4283      	cmp	r3, r0
 800ac56:	d9f3      	bls.n	800ac40 <chksum+0x8>
      sum++;		/* carry */
 800ac58:	3001      	adds	r0, #1
 800ac5a:	b280      	uxth	r0, r0
 800ac5c:	e7f0      	b.n	800ac40 <chksum+0x8>
  }

  if (dataptr == last_byte)
 800ac5e:	d002      	beq.n	800ac66 <chksum+0x2e>
    }
  }

  /* Return sum in host byte order. */
  return sum;
}
 800ac60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac64:	4770      	bx	lr
    t = (dataptr[0] << 8) + 0;
 800ac66:	780b      	ldrb	r3, [r1, #0]
 800ac68:	021b      	lsls	r3, r3, #8
    sum += t;
 800ac6a:	4418      	add	r0, r3
 800ac6c:	b280      	uxth	r0, r0
    if (sum < t)
 800ac6e:	4283      	cmp	r3, r0
 800ac70:	d9f6      	bls.n	800ac60 <chksum+0x28>
      sum++;		/* carry */
 800ac72:	3001      	adds	r0, #1
 800ac74:	b280      	uxth	r0, r0
 800ac76:	e7f3      	b.n	800ac60 <chksum+0x28>

0800ac78 <uip_add32>:
{
 800ac78:	b470      	push	{r4, r5, r6}
  uip_acc32[3] = op32[3] + (op16 & 0xff);
 800ac7a:	78c5      	ldrb	r5, [r0, #3]
 800ac7c:	440d      	add	r5, r1
 800ac7e:	b2ed      	uxtb	r5, r5
 800ac80:	4c13      	ldr	r4, [pc, #76]	; (800acd0 <uip_add32+0x58>)
 800ac82:	70e5      	strb	r5, [r4, #3]
  uip_acc32[2] = op32[2] + (op16 >> 8);
 800ac84:	7883      	ldrb	r3, [r0, #2]
 800ac86:	0a0e      	lsrs	r6, r1, #8
 800ac88:	4433      	add	r3, r6
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	70a3      	strb	r3, [r4, #2]
  uip_acc32[1] = op32[1];
 800ac8e:	7842      	ldrb	r2, [r0, #1]
 800ac90:	7062      	strb	r2, [r4, #1]
  uip_acc32[0] = op32[0];
 800ac92:	7800      	ldrb	r0, [r0, #0]
 800ac94:	7020      	strb	r0, [r4, #0]
  if (uip_acc32[2] < (op16 >> 8))
 800ac96:	b29c      	uxth	r4, r3
 800ac98:	42a6      	cmp	r6, r4
 800ac9a:	d906      	bls.n	800acaa <uip_add32+0x32>
    ++uip_acc32[1];
 800ac9c:	3201      	adds	r2, #1
 800ac9e:	b2d2      	uxtb	r2, r2
 800aca0:	4c0b      	ldr	r4, [pc, #44]	; (800acd0 <uip_add32+0x58>)
 800aca2:	7062      	strb	r2, [r4, #1]
    if (uip_acc32[1] == 0)
 800aca4:	b90a      	cbnz	r2, 800acaa <uip_add32+0x32>
      ++uip_acc32[0];
 800aca6:	3001      	adds	r0, #1
 800aca8:	7020      	strb	r0, [r4, #0]
  if (uip_acc32[3] < (op16 & 0xff))
 800acaa:	b2c9      	uxtb	r1, r1
 800acac:	428d      	cmp	r5, r1
 800acae:	da0c      	bge.n	800acca <uip_add32+0x52>
    ++uip_acc32[2];
 800acb0:	3301      	adds	r3, #1
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	4a06      	ldr	r2, [pc, #24]	; (800acd0 <uip_add32+0x58>)
 800acb6:	7093      	strb	r3, [r2, #2]
    if (uip_acc32[2] == 0)
 800acb8:	b93b      	cbnz	r3, 800acca <uip_add32+0x52>
      ++uip_acc32[1];
 800acba:	7853      	ldrb	r3, [r2, #1]
 800acbc:	3301      	adds	r3, #1
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	7053      	strb	r3, [r2, #1]
      if (uip_acc32[1] == 0)
 800acc2:	b913      	cbnz	r3, 800acca <uip_add32+0x52>
        ++uip_acc32[0];
 800acc4:	7813      	ldrb	r3, [r2, #0]
 800acc6:	3301      	adds	r3, #1
 800acc8:	7013      	strb	r3, [r2, #0]
}
 800acca:	bc70      	pop	{r4, r5, r6}
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	200032e8 	.word	0x200032e8

0800acd4 <uip_add_rcv_nxt>:
#endif /* UIP_REASSEMBLY */
/*---------------------------------------------------------------------------*/
#if UIP_TCP
static void
uip_add_rcv_nxt(u16_t n)
{
 800acd4:	b510      	push	{r4, lr}
  uip_add32(uip_conn->rcv_nxt, n);
 800acd6:	4c09      	ldr	r4, [pc, #36]	; (800acfc <uip_add_rcv_nxt+0x28>)
 800acd8:	6823      	ldr	r3, [r4, #0]
 800acda:	4601      	mov	r1, r0
 800acdc:	f103 0008 	add.w	r0, r3, #8
 800ace0:	f7ff ffca 	bl	800ac78 <uip_add32>
  uip_conn->rcv_nxt[0] = uip_acc32[0];
 800ace4:	6823      	ldr	r3, [r4, #0]
 800ace6:	4a06      	ldr	r2, [pc, #24]	; (800ad00 <uip_add_rcv_nxt+0x2c>)
 800ace8:	7811      	ldrb	r1, [r2, #0]
 800acea:	7219      	strb	r1, [r3, #8]
  uip_conn->rcv_nxt[1] = uip_acc32[1];
 800acec:	7851      	ldrb	r1, [r2, #1]
 800acee:	7259      	strb	r1, [r3, #9]
  uip_conn->rcv_nxt[2] = uip_acc32[2];
 800acf0:	7891      	ldrb	r1, [r2, #2]
 800acf2:	7299      	strb	r1, [r3, #10]
  uip_conn->rcv_nxt[3] = uip_acc32[3];
 800acf4:	78d2      	ldrb	r2, [r2, #3]
 800acf6:	72da      	strb	r2, [r3, #11]
}
 800acf8:	bd10      	pop	{r4, pc}
 800acfa:	bf00      	nop
 800acfc:	200032f8 	.word	0x200032f8
 800ad00:	200032e8 	.word	0x200032e8

0800ad04 <uip_init>:
  for (c = 0; c < UIP_LISTENPORTS; ++c)
 800ad04:	4b1a      	ldr	r3, [pc, #104]	; (800ad70 <uip_init+0x6c>)
 800ad06:	2200      	movs	r2, #0
 800ad08:	701a      	strb	r2, [r3, #0]
 800ad0a:	e006      	b.n	800ad1a <uip_init+0x16>
    uip_listenports[c] = 0;
 800ad0c:	4a19      	ldr	r2, [pc, #100]	; (800ad74 <uip_init+0x70>)
 800ad0e:	2100      	movs	r1, #0
 800ad10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (c = 0; c < UIP_LISTENPORTS; ++c)
 800ad14:	3301      	adds	r3, #1
 800ad16:	4a16      	ldr	r2, [pc, #88]	; (800ad70 <uip_init+0x6c>)
 800ad18:	7013      	strb	r3, [r2, #0]
 800ad1a:	4b15      	ldr	r3, [pc, #84]	; (800ad70 <uip_init+0x6c>)
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d0f4      	beq.n	800ad0c <uip_init+0x8>
  for (c = 0; c < UIP_CONNS; ++c)
 800ad22:	4b13      	ldr	r3, [pc, #76]	; (800ad70 <uip_init+0x6c>)
 800ad24:	2200      	movs	r2, #0
 800ad26:	701a      	strb	r2, [r3, #0]
 800ad28:	e009      	b.n	800ad3e <uip_init+0x3a>
    uip_conns[c].tcpstateflags = UIP_CLOSED;
 800ad2a:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 800ad2e:	0051      	lsls	r1, r2, #1
 800ad30:	4a11      	ldr	r2, [pc, #68]	; (800ad78 <uip_init+0x74>)
 800ad32:	440a      	add	r2, r1
 800ad34:	2100      	movs	r1, #0
 800ad36:	7651      	strb	r1, [r2, #25]
  for (c = 0; c < UIP_CONNS; ++c)
 800ad38:	3301      	adds	r3, #1
 800ad3a:	4a0d      	ldr	r2, [pc, #52]	; (800ad70 <uip_init+0x6c>)
 800ad3c:	7013      	strb	r3, [r2, #0]
 800ad3e:	4b0c      	ldr	r3, [pc, #48]	; (800ad70 <uip_init+0x6c>)
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d0f1      	beq.n	800ad2a <uip_init+0x26>
  lastport = 1024;
 800ad46:	4b0d      	ldr	r3, [pc, #52]	; (800ad7c <uip_init+0x78>)
 800ad48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad4c:	801a      	strh	r2, [r3, #0]
  for (c = 0; c < UIP_UDP_CONNS; ++c)
 800ad4e:	4b08      	ldr	r3, [pc, #32]	; (800ad70 <uip_init+0x6c>)
 800ad50:	2200      	movs	r2, #0
 800ad52:	701a      	strb	r2, [r3, #0]
 800ad54:	e007      	b.n	800ad66 <uip_init+0x62>
    uip_udp_conns[c].lport = 0;
 800ad56:	4a0a      	ldr	r2, [pc, #40]	; (800ad80 <uip_init+0x7c>)
 800ad58:	eb02 1283 	add.w	r2, r2, r3, lsl #6
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	8091      	strh	r1, [r2, #4]
  for (c = 0; c < UIP_UDP_CONNS; ++c)
 800ad60:	3301      	adds	r3, #1
 800ad62:	4a03      	ldr	r2, [pc, #12]	; (800ad70 <uip_init+0x6c>)
 800ad64:	7013      	strb	r3, [r2, #0]
 800ad66:	4b02      	ldr	r3, [pc, #8]	; (800ad70 <uip_init+0x6c>)
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d0f3      	beq.n	800ad56 <uip_init+0x52>
}
 800ad6e:	4770      	bx	lr
 800ad70:	20000174 	.word	0x20000174
 800ad74:	2000331c 	.word	0x2000331c
 800ad78:	200032fc 	.word	0x200032fc
 800ad7c:	2000017c 	.word	0x2000017c
 800ad80:	20003970 	.word	0x20003970

0800ad84 <uip_listen>:
  for (c = 0; c < UIP_LISTENPORTS; ++c)
 800ad84:	4b09      	ldr	r3, [pc, #36]	; (800adac <uip_listen+0x28>)
 800ad86:	2200      	movs	r2, #0
 800ad88:	701a      	strb	r2, [r3, #0]
 800ad8a:	4b08      	ldr	r3, [pc, #32]	; (800adac <uip_listen+0x28>)
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	b963      	cbnz	r3, 800adaa <uip_listen+0x26>
    if (uip_listenports[c] == 0)
 800ad90:	4619      	mov	r1, r3
 800ad92:	4a07      	ldr	r2, [pc, #28]	; (800adb0 <uip_listen+0x2c>)
 800ad94:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ad98:	b11a      	cbz	r2, 800ada2 <uip_listen+0x1e>
  for (c = 0; c < UIP_LISTENPORTS; ++c)
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	4a03      	ldr	r2, [pc, #12]	; (800adac <uip_listen+0x28>)
 800ad9e:	7013      	strb	r3, [r2, #0]
 800ada0:	e7f3      	b.n	800ad8a <uip_listen+0x6>
      uip_listenports[c] = port;
 800ada2:	4b03      	ldr	r3, [pc, #12]	; (800adb0 <uip_listen+0x2c>)
 800ada4:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
      return;
 800ada8:	4770      	bx	lr
}
 800adaa:	4770      	bx	lr
 800adac:	20000174 	.word	0x20000174
 800adb0:	2000331c 	.word	0x2000331c

0800adb4 <htons>:
}
/*---------------------------------------------------------------------------*/
u16_t
htons(u16_t val)
{
  return HTONS(val);
 800adb4:	0a03      	lsrs	r3, r0, #8
 800adb6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 800adba:	b280      	uxth	r0, r0
 800adbc:	4770      	bx	lr
	...

0800adc0 <uip_ipchksum>:
{
 800adc0:	b508      	push	{r3, lr}
  sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
 800adc2:	2214      	movs	r2, #20
 800adc4:	4905      	ldr	r1, [pc, #20]	; (800addc <uip_ipchksum+0x1c>)
 800adc6:	2000      	movs	r0, #0
 800adc8:	f7ff ff36 	bl	800ac38 <chksum>
  return (sum == 0) ? 0xffff : htons(sum);
 800adcc:	b110      	cbz	r0, 800add4 <uip_ipchksum+0x14>
 800adce:	f7ff fff1 	bl	800adb4 <htons>
}
 800add2:	bd08      	pop	{r3, pc}
  return (sum == 0) ? 0xffff : htons(sum);
 800add4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800add8:	e7fb      	b.n	800add2 <uip_ipchksum+0x12>
 800adda:	bf00      	nop
 800addc:	2000333a 	.word	0x2000333a

0800ade0 <upper_layer_chksum>:
{
 800ade0:	b538      	push	{r3, r4, r5, lr}
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
 800ade2:	4d0d      	ldr	r5, [pc, #52]	; (800ae18 <upper_layer_chksum+0x38>)
 800ade4:	7c2b      	ldrb	r3, [r5, #16]
 800ade6:	7c6c      	ldrb	r4, [r5, #17]
 800ade8:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 800adec:	b2a4      	uxth	r4, r4
 800adee:	3c14      	subs	r4, #20
 800adf0:	b2a4      	uxth	r4, r4
  sum = upper_layer_len + proto;
 800adf2:	4420      	add	r0, r4
  sum = chksum(sum, (u8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
 800adf4:	2208      	movs	r2, #8
 800adf6:	f105 011a 	add.w	r1, r5, #26
 800adfa:	b280      	uxth	r0, r0
 800adfc:	f7ff ff1c 	bl	800ac38 <chksum>
  sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN],
 800ae00:	4622      	mov	r2, r4
 800ae02:	f105 0122 	add.w	r1, r5, #34	; 0x22
 800ae06:	f7ff ff17 	bl	800ac38 <chksum>
  return (sum == 0) ? 0xffff : htons(sum);
 800ae0a:	b110      	cbz	r0, 800ae12 <upper_layer_chksum+0x32>
 800ae0c:	f7ff ffd2 	bl	800adb4 <htons>
}
 800ae10:	bd38      	pop	{r3, r4, r5, pc}
  return (sum == 0) ? 0xffff : htons(sum);
 800ae12:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ae16:	e7fb      	b.n	800ae10 <upper_layer_chksum+0x30>
 800ae18:	2000332c 	.word	0x2000332c

0800ae1c <uip_tcpchksum>:
{
 800ae1c:	b508      	push	{r3, lr}
  return upper_layer_chksum(UIP_PROTO_TCP);
 800ae1e:	2006      	movs	r0, #6
 800ae20:	f7ff ffde 	bl	800ade0 <upper_layer_chksum>
}
 800ae24:	bd08      	pop	{r3, pc}
	...

0800ae28 <uip_process>:
{
 800ae28:	b570      	push	{r4, r5, r6, lr}
  register struct uip_conn *uip_connr = uip_conn;
 800ae2a:	4bb2      	ldr	r3, [pc, #712]	; (800b0f4 <uip_process+0x2cc>)
 800ae2c:	681c      	ldr	r4, [r3, #0]
  if (flag == UIP_UDP_SEND_CONN)
 800ae2e:	2804      	cmp	r0, #4
 800ae30:	f000 8196 	beq.w	800b160 <uip_process+0x338>
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
 800ae34:	4bb0      	ldr	r3, [pc, #704]	; (800b0f8 <uip_process+0x2d0>)
 800ae36:	4ab1      	ldr	r2, [pc, #708]	; (800b0fc <uip_process+0x2d4>)
 800ae38:	6013      	str	r3, [r2, #0]
 800ae3a:	4ab1      	ldr	r2, [pc, #708]	; (800b100 <uip_process+0x2d8>)
 800ae3c:	6013      	str	r3, [r2, #0]
  if (flag == UIP_POLL_REQUEST)
 800ae3e:	2803      	cmp	r0, #3
 800ae40:	d059      	beq.n	800aef6 <uip_process+0xce>
  else if (flag == UIP_TIMER)
 800ae42:	2802      	cmp	r0, #2
 800ae44:	f000 80c8 	beq.w	800afd8 <uip_process+0x1b0>
  if (flag == UIP_UDP_TIMER)
 800ae48:	2805      	cmp	r0, #5
 800ae4a:	f000 8172 	beq.w	800b132 <uip_process+0x30a>
  if (BUF->vhl != 0x45)   /* IP version and header length. */
 800ae4e:	4bad      	ldr	r3, [pc, #692]	; (800b104 <uip_process+0x2dc>)
 800ae50:	7b9b      	ldrb	r3, [r3, #14]
 800ae52:	2b45      	cmp	r3, #69	; 0x45
 800ae54:	d154      	bne.n	800af00 <uip_process+0xd8>
  if ((BUF->len[0] << 8) + BUF->len[1] <= uip_len)
 800ae56:	4aab      	ldr	r2, [pc, #684]	; (800b104 <uip_process+0x2dc>)
 800ae58:	7c15      	ldrb	r5, [r2, #16]
 800ae5a:	7c53      	ldrb	r3, [r2, #17]
 800ae5c:	eb03 2105 	add.w	r1, r3, r5, lsl #8
 800ae60:	4aa9      	ldr	r2, [pc, #676]	; (800b108 <uip_process+0x2e0>)
 800ae62:	8812      	ldrh	r2, [r2, #0]
 800ae64:	4291      	cmp	r1, r2
 800ae66:	dc4b      	bgt.n	800af00 <uip_process+0xd8>
    uip_len = (BUF->len[0] << 8) + BUF->len[1];
 800ae68:	b28d      	uxth	r5, r1
 800ae6a:	4ba7      	ldr	r3, [pc, #668]	; (800b108 <uip_process+0x2e0>)
 800ae6c:	801d      	strh	r5, [r3, #0]
  if ((BUF->ipoffset[0] & 0x3f) != 0 ||
 800ae6e:	4ba5      	ldr	r3, [pc, #660]	; (800b104 <uip_process+0x2dc>)
 800ae70:	7d1b      	ldrb	r3, [r3, #20]
 800ae72:	f013 0f3f 	tst.w	r3, #63	; 0x3f
 800ae76:	d143      	bne.n	800af00 <uip_process+0xd8>
      BUF->ipoffset[1] != 0)
 800ae78:	4ba2      	ldr	r3, [pc, #648]	; (800b104 <uip_process+0x2dc>)
 800ae7a:	7d5b      	ldrb	r3, [r3, #21]
  if ((BUF->ipoffset[0] & 0x3f) != 0 ||
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d13f      	bne.n	800af00 <uip_process+0xd8>
  if (uip_ipaddr_cmp(uip_hostaddr, all_zeroes_addr))
 800ae80:	4ba2      	ldr	r3, [pc, #648]	; (800b10c <uip_process+0x2e4>)
 800ae82:	881c      	ldrh	r4, [r3, #0]
 800ae84:	b90c      	cbnz	r4, 800ae8a <uip_process+0x62>
 800ae86:	885b      	ldrh	r3, [r3, #2]
 800ae88:	b14b      	cbz	r3, 800ae9e <uip_process+0x76>
    if (!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr))
 800ae8a:	4b9e      	ldr	r3, [pc, #632]	; (800b104 <uip_process+0x2dc>)
 800ae8c:	8bdb      	ldrh	r3, [r3, #30]
 800ae8e:	429c      	cmp	r4, r3
 800ae90:	d136      	bne.n	800af00 <uip_process+0xd8>
 800ae92:	4b9c      	ldr	r3, [pc, #624]	; (800b104 <uip_process+0x2dc>)
 800ae94:	8c1a      	ldrh	r2, [r3, #32]
 800ae96:	4b9d      	ldr	r3, [pc, #628]	; (800b10c <uip_process+0x2e4>)
 800ae98:	885b      	ldrh	r3, [r3, #2]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d130      	bne.n	800af00 <uip_process+0xd8>
  if (uip_ipchksum() != 0xffff)
 800ae9e:	f7ff ff8f 	bl	800adc0 <uip_ipchksum>
 800aea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aea6:	4298      	cmp	r0, r3
 800aea8:	d12a      	bne.n	800af00 <uip_process+0xd8>
  if (BUF->proto == UIP_PROTO_TCP)
 800aeaa:	4b96      	ldr	r3, [pc, #600]	; (800b104 <uip_process+0x2dc>)
 800aeac:	7ddb      	ldrb	r3, [r3, #23]
 800aeae:	2b06      	cmp	r3, #6
 800aeb0:	f000 81e9 	beq.w	800b286 <uip_process+0x45e>
  if (BUF->proto == UIP_PROTO_UDP)
 800aeb4:	2b11      	cmp	r3, #17
 800aeb6:	f000 819f 	beq.w	800b1f8 <uip_process+0x3d0>
  if (BUF->proto != UIP_PROTO_ICMP)
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d120      	bne.n	800af00 <uip_process+0xd8>
  if (ICMPBUF->type != ICMP_ECHO)
 800aebe:	4b91      	ldr	r3, [pc, #580]	; (800b104 <uip_process+0x2dc>)
 800aec0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800aec4:	2b08      	cmp	r3, #8
 800aec6:	d11b      	bne.n	800af00 <uip_process+0xd8>
  ICMPBUF->type = ICMP_ECHO_REPLY;
 800aec8:	4b8e      	ldr	r3, [pc, #568]	; (800b104 <uip_process+0x2dc>)
 800aeca:	2200      	movs	r2, #0
 800aecc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  if (ICMPBUF->icmpchksum >= HTONS(0xffff - (ICMP_ECHO << 8)))
 800aed0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aed2:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800aed6:	4293      	cmp	r3, r2
 800aed8:	f240 818a 	bls.w	800b1f0 <uip_process+0x3c8>
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8) + 1;
 800aedc:	3309      	adds	r3, #9
 800aede:	4a89      	ldr	r2, [pc, #548]	; (800b104 <uip_process+0x2dc>)
 800aee0:	8493      	strh	r3, [r2, #36]	; 0x24
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
 800aee2:	4b88      	ldr	r3, [pc, #544]	; (800b104 <uip_process+0x2dc>)
 800aee4:	8b5a      	ldrh	r2, [r3, #26]
 800aee6:	83da      	strh	r2, [r3, #30]
 800aee8:	8b9a      	ldrh	r2, [r3, #28]
 800aeea:	841a      	strh	r2, [r3, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 800aeec:	835c      	strh	r4, [r3, #26]
 800aeee:	4a87      	ldr	r2, [pc, #540]	; (800b10c <uip_process+0x2e4>)
 800aef0:	8852      	ldrh	r2, [r2, #2]
 800aef2:	839a      	strh	r2, [r3, #28]
  goto send;
 800aef4:	e178      	b.n	800b1e8 <uip_process+0x3c0>
    if ((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
 800aef6:	7e63      	ldrb	r3, [r4, #25]
 800aef8:	f003 030f 	and.w	r3, r3, #15
 800aefc:	2b03      	cmp	r3, #3
 800aefe:	d005      	beq.n	800af0c <uip_process+0xe4>
  uip_len = 0;
 800af00:	2300      	movs	r3, #0
 800af02:	4a81      	ldr	r2, [pc, #516]	; (800b108 <uip_process+0x2e0>)
 800af04:	8013      	strh	r3, [r2, #0]
  uip_flags = 0;
 800af06:	4a82      	ldr	r2, [pc, #520]	; (800b110 <uip_process+0x2e8>)
 800af08:	7013      	strb	r3, [r2, #0]
}
 800af0a:	bd70      	pop	{r4, r5, r6, pc}
        !uip_outstanding(uip_connr))
 800af0c:	8a23      	ldrh	r3, [r4, #16]
    if ((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1f6      	bne.n	800af00 <uip_process+0xd8>
      uip_flags = UIP_POLL;
 800af12:	4b7f      	ldr	r3, [pc, #508]	; (800b110 <uip_process+0x2e8>)
 800af14:	2208      	movs	r2, #8
 800af16:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
 800af18:	f7fd fd10 	bl	800893c <NetApp>
        if (uip_flags & UIP_ABORT)
 800af1c:	4b7c      	ldr	r3, [pc, #496]	; (800b110 <uip_process+0x2e8>)
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	f013 0f20 	tst.w	r3, #32
 800af24:	f000 84a4 	beq.w	800b870 <uip_process+0xa48>
          uip_slen = 0;
 800af28:	2300      	movs	r3, #0
 800af2a:	4a7a      	ldr	r2, [pc, #488]	; (800b114 <uip_process+0x2ec>)
 800af2c:	8013      	strh	r3, [r2, #0]
          uip_connr->tcpstateflags = UIP_CLOSED;
 800af2e:	7663      	strb	r3, [r4, #25]
          BUF->flags = TCP_RST | TCP_ACK;
 800af30:	4b74      	ldr	r3, [pc, #464]	; (800b104 <uip_process+0x2dc>)
 800af32:	2214      	movs	r2, #20
 800af34:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  uip_len = UIP_IPTCPH_LEN;
 800af38:	4b73      	ldr	r3, [pc, #460]	; (800b108 <uip_process+0x2e0>)
 800af3a:	2228      	movs	r2, #40	; 0x28
 800af3c:	801a      	strh	r2, [r3, #0]
  BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
 800af3e:	4b71      	ldr	r3, [pc, #452]	; (800b104 <uip_process+0x2dc>)
 800af40:	2250      	movs	r2, #80	; 0x50
 800af42:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  BUF->ackno[0] = uip_connr->rcv_nxt[0];
 800af46:	7a22      	ldrb	r2, [r4, #8]
 800af48:	4b6e      	ldr	r3, [pc, #440]	; (800b104 <uip_process+0x2dc>)
 800af4a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  BUF->ackno[1] = uip_connr->rcv_nxt[1];
 800af4e:	7a62      	ldrb	r2, [r4, #9]
 800af50:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  BUF->ackno[2] = uip_connr->rcv_nxt[2];
 800af54:	7aa2      	ldrb	r2, [r4, #10]
 800af56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  BUF->ackno[3] = uip_connr->rcv_nxt[3];
 800af5a:	7ae2      	ldrb	r2, [r4, #11]
 800af5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  BUF->seqno[0] = uip_connr->snd_nxt[0];
 800af60:	7b22      	ldrb	r2, [r4, #12]
 800af62:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  BUF->seqno[1] = uip_connr->snd_nxt[1];
 800af66:	7b62      	ldrb	r2, [r4, #13]
 800af68:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  BUF->seqno[2] = uip_connr->snd_nxt[2];
 800af6c:	7ba2      	ldrb	r2, [r4, #14]
 800af6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  BUF->seqno[3] = uip_connr->snd_nxt[3];
 800af72:	7be2      	ldrb	r2, [r4, #15]
 800af74:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BUF->proto = UIP_PROTO_TCP;
 800af78:	2206      	movs	r2, #6
 800af7a:	75da      	strb	r2, [r3, #23]
  BUF->srcport  = uip_connr->lport;
 800af7c:	88a2      	ldrh	r2, [r4, #4]
 800af7e:	845a      	strh	r2, [r3, #34]	; 0x22
  BUF->destport = uip_connr->rport;
 800af80:	88e2      	ldrh	r2, [r4, #6]
 800af82:	849a      	strh	r2, [r3, #36]	; 0x24
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 800af84:	4a61      	ldr	r2, [pc, #388]	; (800b10c <uip_process+0x2e4>)
 800af86:	8811      	ldrh	r1, [r2, #0]
 800af88:	8359      	strh	r1, [r3, #26]
 800af8a:	8852      	ldrh	r2, [r2, #2]
 800af8c:	839a      	strh	r2, [r3, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_connr->ripaddr);
 800af8e:	8822      	ldrh	r2, [r4, #0]
 800af90:	83da      	strh	r2, [r3, #30]
 800af92:	8862      	ldrh	r2, [r4, #2]
 800af94:	841a      	strh	r2, [r3, #32]
  if (uip_connr->tcpstateflags & UIP_STOPPED)
 800af96:	7e63      	ldrb	r3, [r4, #25]
 800af98:	f013 0f10 	tst.w	r3, #16
 800af9c:	f000 8534 	beq.w	800ba08 <uip_process+0xbe0>
    BUF->wnd[0] = BUF->wnd[1] = 0;
 800afa0:	4b58      	ldr	r3, [pc, #352]	; (800b104 <uip_process+0x2dc>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800afa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  BUF->ttl = UIP_TTL;
 800afac:	4c55      	ldr	r4, [pc, #340]	; (800b104 <uip_process+0x2dc>)
 800afae:	2340      	movs	r3, #64	; 0x40
 800afb0:	75a3      	strb	r3, [r4, #22]
  BUF->len[0] = (uip_len >> 8);
 800afb2:	4b55      	ldr	r3, [pc, #340]	; (800b108 <uip_process+0x2e0>)
 800afb4:	881b      	ldrh	r3, [r3, #0]
 800afb6:	0a1a      	lsrs	r2, r3, #8
 800afb8:	7422      	strb	r2, [r4, #16]
  BUF->len[1] = (uip_len & 0xff);
 800afba:	7463      	strb	r3, [r4, #17]
  BUF->urgp[0] = BUF->urgp[1] = 0;
 800afbc:	2300      	movs	r3, #0
 800afbe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800afc2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  BUF->tcpchksum = 0;
 800afc6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 800afca:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  BUF->tcpchksum = ~(uip_tcpchksum());
 800afce:	f7ff ff25 	bl	800ae1c <uip_tcpchksum>
 800afd2:	43c0      	mvns	r0, r0
 800afd4:	8660      	strh	r0, [r4, #50]	; 0x32
 800afd6:	e0f2      	b.n	800b1be <uip_process+0x396>
    if (++iss[3] == 0)
 800afd8:	4a4f      	ldr	r2, [pc, #316]	; (800b118 <uip_process+0x2f0>)
 800afda:	78d3      	ldrb	r3, [r2, #3]
 800afdc:	3301      	adds	r3, #1
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	70d3      	strb	r3, [r2, #3]
 800afe2:	b963      	cbnz	r3, 800affe <uip_process+0x1d6>
      if (++iss[2] == 0)
 800afe4:	7893      	ldrb	r3, [r2, #2]
 800afe6:	3301      	adds	r3, #1
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	7093      	strb	r3, [r2, #2]
 800afec:	b93b      	cbnz	r3, 800affe <uip_process+0x1d6>
        if (++iss[1] == 0)
 800afee:	7853      	ldrb	r3, [r2, #1]
 800aff0:	3301      	adds	r3, #1
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	7053      	strb	r3, [r2, #1]
 800aff6:	b913      	cbnz	r3, 800affe <uip_process+0x1d6>
          ++iss[0];
 800aff8:	7813      	ldrb	r3, [r2, #0]
 800affa:	3301      	adds	r3, #1
 800affc:	7013      	strb	r3, [r2, #0]
    uip_len = 0;
 800affe:	2300      	movs	r3, #0
 800b000:	4a41      	ldr	r2, [pc, #260]	; (800b108 <uip_process+0x2e0>)
 800b002:	8013      	strh	r3, [r2, #0]
    uip_slen = 0;
 800b004:	4a43      	ldr	r2, [pc, #268]	; (800b114 <uip_process+0x2ec>)
 800b006:	8013      	strh	r3, [r2, #0]
    if (uip_connr->tcpstateflags == UIP_TIME_WAIT ||
 800b008:	7e63      	ldrb	r3, [r4, #25]
 800b00a:	2b05      	cmp	r3, #5
 800b00c:	bf18      	it	ne
 800b00e:	2b07      	cmpne	r3, #7
 800b010:	d109      	bne.n	800b026 <uip_process+0x1fe>
      ++(uip_connr->timer);
 800b012:	7ea3      	ldrb	r3, [r4, #26]
 800b014:	3301      	adds	r3, #1
 800b016:	b2db      	uxtb	r3, r3
 800b018:	76a3      	strb	r3, [r4, #26]
      if (uip_connr->timer == UIP_TIME_WAIT_TIMEOUT)
 800b01a:	2b78      	cmp	r3, #120	; 0x78
 800b01c:	f47f af70 	bne.w	800af00 <uip_process+0xd8>
        uip_connr->tcpstateflags = UIP_CLOSED;
 800b020:	2300      	movs	r3, #0
 800b022:	7663      	strb	r3, [r4, #25]
 800b024:	e76c      	b.n	800af00 <uip_process+0xd8>
    else if (uip_connr->tcpstateflags != UIP_CLOSED)
 800b026:	2b00      	cmp	r3, #0
 800b028:	f43f af6a 	beq.w	800af00 <uip_process+0xd8>
      if (uip_outstanding(uip_connr))
 800b02c:	8a22      	ldrh	r2, [r4, #16]
 800b02e:	2a00      	cmp	r2, #0
 800b030:	d074      	beq.n	800b11c <uip_process+0x2f4>
        if (uip_connr->timer-- == 0)
 800b032:	7ea2      	ldrb	r2, [r4, #26]
 800b034:	1e51      	subs	r1, r2, #1
 800b036:	76a1      	strb	r1, [r4, #26]
 800b038:	2a00      	cmp	r2, #0
 800b03a:	f47f af61 	bne.w	800af00 <uip_process+0xd8>
          if (uip_connr->nrtx == UIP_MAXRTX ||
 800b03e:	7ee2      	ldrb	r2, [r4, #27]
 800b040:	2a08      	cmp	r2, #8
 800b042:	d027      	beq.n	800b094 <uip_process+0x26c>
              ((uip_connr->tcpstateflags == UIP_SYN_SENT ||
 800b044:	1e59      	subs	r1, r3, #1
 800b046:	b2c9      	uxtb	r1, r1
          if (uip_connr->nrtx == UIP_MAXRTX ||
 800b048:	2901      	cmp	r1, #1
 800b04a:	d921      	bls.n	800b090 <uip_process+0x268>
                                         4:
 800b04c:	4610      	mov	r0, r2
 800b04e:	2a04      	cmp	r2, #4
 800b050:	bf28      	it	cs
 800b052:	2004      	movcs	r0, #4
          uip_connr->timer = UIP_RTO << (uip_connr->nrtx > 4?
 800b054:	2103      	movs	r1, #3
 800b056:	4081      	lsls	r1, r0
 800b058:	76a1      	strb	r1, [r4, #26]
          ++(uip_connr->nrtx);
 800b05a:	3201      	adds	r2, #1
 800b05c:	76e2      	strb	r2, [r4, #27]
          switch (uip_connr->tcpstateflags & UIP_TS_MASK)
 800b05e:	f003 030f 	and.w	r3, r3, #15
 800b062:	3b01      	subs	r3, #1
 800b064:	2b07      	cmp	r3, #7
 800b066:	f63f af4b 	bhi.w	800af00 <uip_process+0xd8>
 800b06a:	a201      	add	r2, pc, #4	; (adr r2, 800b070 <uip_process+0x248>)
 800b06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b070:	0800b531 	.word	0x0800b531
 800b074:	0800b0ad 	.word	0x0800b0ad
 800b078:	0800b0e9 	.word	0x0800b0e9
 800b07c:	0800b7e5 	.word	0x0800b7e5
 800b080:	0800af01 	.word	0x0800af01
 800b084:	0800b7e5 	.word	0x0800b7e5
 800b088:	0800af01 	.word	0x0800af01
 800b08c:	0800b7e5 	.word	0x0800b7e5
                uip_connr->tcpstateflags == UIP_SYN_RCVD) &&
 800b090:	2a05      	cmp	r2, #5
 800b092:	d1db      	bne.n	800b04c <uip_process+0x224>
            uip_connr->tcpstateflags = UIP_CLOSED;
 800b094:	2300      	movs	r3, #0
 800b096:	7663      	strb	r3, [r4, #25]
            uip_flags = UIP_TIMEDOUT;
 800b098:	4b1d      	ldr	r3, [pc, #116]	; (800b110 <uip_process+0x2e8>)
 800b09a:	2280      	movs	r2, #128	; 0x80
 800b09c:	701a      	strb	r2, [r3, #0]
            UIP_APPCALL();
 800b09e:	f7fd fc4d 	bl	800893c <NetApp>
            BUF->flags = TCP_RST | TCP_ACK;
 800b0a2:	4b18      	ldr	r3, [pc, #96]	; (800b104 <uip_process+0x2dc>)
 800b0a4:	2214      	movs	r2, #20
 800b0a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            goto tcp_send_nodata;
 800b0aa:	e745      	b.n	800af38 <uip_process+0x110>
              BUF->flags = 0;
 800b0ac:	4b15      	ldr	r3, [pc, #84]	; (800b104 <uip_process+0x2dc>)
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  BUF->flags |= TCP_SYN;
 800b0b4:	4b13      	ldr	r3, [pc, #76]	; (800b104 <uip_process+0x2dc>)
 800b0b6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b0ba:	f042 0202 	orr.w	r2, r2, #2
 800b0be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  BUF->optdata[0] = TCP_OPT_MSS;
 800b0c2:	2202      	movs	r2, #2
 800b0c4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  BUF->optdata[1] = TCP_OPT_MSS_LEN;
 800b0c8:	2204      	movs	r2, #4
 800b0ca:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  BUF->optdata[2] = (UIP_TCP_MSS) / 256;
 800b0ce:	2206      	movs	r2, #6
 800b0d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  BUF->optdata[3] = (UIP_TCP_MSS) & 255;
 800b0d4:	220a      	movs	r2, #10
 800b0d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
 800b0da:	4a0b      	ldr	r2, [pc, #44]	; (800b108 <uip_process+0x2e0>)
 800b0dc:	212c      	movs	r1, #44	; 0x2c
 800b0de:	8011      	strh	r1, [r2, #0]
  BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
 800b0e0:	2260      	movs	r2, #96	; 0x60
 800b0e2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  goto tcp_send;
 800b0e6:	e72e      	b.n	800af46 <uip_process+0x11e>
              uip_flags = UIP_REXMIT;
 800b0e8:	4b09      	ldr	r3, [pc, #36]	; (800b110 <uip_process+0x2e8>)
 800b0ea:	2204      	movs	r2, #4
 800b0ec:	701a      	strb	r2, [r3, #0]
              UIP_APPCALL();
 800b0ee:	f7fd fc25 	bl	800893c <NetApp>
              goto apprexmit;
 800b0f2:	e3e2      	b.n	800b8ba <uip_process+0xa92>
 800b0f4:	200032f8 	.word	0x200032f8
 800b0f8:	20003362 	.word	0x20003362
 800b0fc:	200032f4 	.word	0x200032f4
 800b100:	200032e4 	.word	0x200032e4
 800b104:	2000332c 	.word	0x2000332c
 800b108:	200032e0 	.word	0x200032e0
 800b10c:	20003328 	.word	0x20003328
 800b110:	200032ec 	.word	0x200032ec
 800b114:	2000396e 	.word	0x2000396e
 800b118:	20000178 	.word	0x20000178
      else if ((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED)
 800b11c:	f003 030f 	and.w	r3, r3, #15
 800b120:	2b03      	cmp	r3, #3
 800b122:	f47f aeed 	bne.w	800af00 <uip_process+0xd8>
        uip_flags = UIP_POLL;
 800b126:	4bac      	ldr	r3, [pc, #688]	; (800b3d8 <uip_process+0x5b0>)
 800b128:	2208      	movs	r2, #8
 800b12a:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
 800b12c:	f7fd fc06 	bl	800893c <NetApp>
        goto appsend;
 800b130:	e6f4      	b.n	800af1c <uip_process+0xf4>
    if (uip_udp_conn->lport != 0)
 800b132:	4baa      	ldr	r3, [pc, #680]	; (800b3dc <uip_process+0x5b4>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	889b      	ldrh	r3, [r3, #4]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f43f aee1 	beq.w	800af00 <uip_process+0xd8>
      uip_conn = NULL;
 800b13e:	2300      	movs	r3, #0
 800b140:	4aa7      	ldr	r2, [pc, #668]	; (800b3e0 <uip_process+0x5b8>)
 800b142:	6013      	str	r3, [r2, #0]
      uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
 800b144:	4aa7      	ldr	r2, [pc, #668]	; (800b3e4 <uip_process+0x5bc>)
 800b146:	49a8      	ldr	r1, [pc, #672]	; (800b3e8 <uip_process+0x5c0>)
 800b148:	600a      	str	r2, [r1, #0]
 800b14a:	49a8      	ldr	r1, [pc, #672]	; (800b3ec <uip_process+0x5c4>)
 800b14c:	600a      	str	r2, [r1, #0]
      uip_len = uip_slen = 0;
 800b14e:	4aa8      	ldr	r2, [pc, #672]	; (800b3f0 <uip_process+0x5c8>)
 800b150:	8013      	strh	r3, [r2, #0]
 800b152:	4aa8      	ldr	r2, [pc, #672]	; (800b3f4 <uip_process+0x5cc>)
 800b154:	8013      	strh	r3, [r2, #0]
      uip_flags = UIP_POLL;
 800b156:	4ba0      	ldr	r3, [pc, #640]	; (800b3d8 <uip_process+0x5b0>)
 800b158:	2208      	movs	r2, #8
 800b15a:	701a      	strb	r2, [r3, #0]
      UIP_UDP_APPCALL();
 800b15c:	f7ff fd68 	bl	800ac30 <dhcpc_appcall>
  if (uip_slen == 0)
 800b160:	4ba3      	ldr	r3, [pc, #652]	; (800b3f0 <uip_process+0x5c8>)
 800b162:	881a      	ldrh	r2, [r3, #0]
 800b164:	2a00      	cmp	r2, #0
 800b166:	f43f aecb 	beq.w	800af00 <uip_process+0xd8>
  uip_len = uip_slen + UIP_IPUDPH_LEN;
 800b16a:	f102 011c 	add.w	r1, r2, #28
 800b16e:	b289      	uxth	r1, r1
 800b170:	4ba0      	ldr	r3, [pc, #640]	; (800b3f4 <uip_process+0x5cc>)
 800b172:	8019      	strh	r1, [r3, #0]
  BUF->len[0] = (uip_len >> 8);
 800b174:	4ba0      	ldr	r3, [pc, #640]	; (800b3f8 <uip_process+0x5d0>)
 800b176:	0a08      	lsrs	r0, r1, #8
 800b178:	7418      	strb	r0, [r3, #16]
  BUF->len[1] = (uip_len & 0xff);
 800b17a:	7459      	strb	r1, [r3, #17]
  BUF->ttl = uip_udp_conn->ttl;
 800b17c:	4997      	ldr	r1, [pc, #604]	; (800b3dc <uip_process+0x5b4>)
 800b17e:	6809      	ldr	r1, [r1, #0]
 800b180:	7a08      	ldrb	r0, [r1, #8]
 800b182:	7598      	strb	r0, [r3, #22]
  BUF->proto = UIP_PROTO_UDP;
 800b184:	2011      	movs	r0, #17
 800b186:	75d8      	strb	r0, [r3, #23]
  UDPBUF->udplen = HTONS(uip_slen + UIP_UDPH_LEN);
 800b188:	3208      	adds	r2, #8
 800b18a:	b292      	uxth	r2, r2
 800b18c:	0a10      	lsrs	r0, r2, #8
 800b18e:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
 800b192:	84da      	strh	r2, [r3, #38]	; 0x26
  UDPBUF->udpchksum = 0;
 800b194:	2200      	movs	r2, #0
 800b196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b19a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BUF->srcport  = uip_udp_conn->lport;
 800b19e:	888a      	ldrh	r2, [r1, #4]
 800b1a0:	845a      	strh	r2, [r3, #34]	; 0x22
  BUF->destport = uip_udp_conn->rport;
 800b1a2:	88ca      	ldrh	r2, [r1, #6]
 800b1a4:	849a      	strh	r2, [r3, #36]	; 0x24
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 800b1a6:	4a95      	ldr	r2, [pc, #596]	; (800b3fc <uip_process+0x5d4>)
 800b1a8:	8810      	ldrh	r0, [r2, #0]
 800b1aa:	8358      	strh	r0, [r3, #26]
 800b1ac:	8852      	ldrh	r2, [r2, #2]
 800b1ae:	839a      	strh	r2, [r3, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_udp_conn->ripaddr);
 800b1b0:	880a      	ldrh	r2, [r1, #0]
 800b1b2:	83da      	strh	r2, [r3, #30]
 800b1b4:	884a      	ldrh	r2, [r1, #2]
 800b1b6:	841a      	strh	r2, [r3, #32]
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPTCPH_LEN];
 800b1b8:	3336      	adds	r3, #54	; 0x36
 800b1ba:	4a8b      	ldr	r2, [pc, #556]	; (800b3e8 <uip_process+0x5c0>)
 800b1bc:	6013      	str	r3, [r2, #0]
  BUF->vhl = 0x45;
 800b1be:	4c8e      	ldr	r4, [pc, #568]	; (800b3f8 <uip_process+0x5d0>)
 800b1c0:	2345      	movs	r3, #69	; 0x45
 800b1c2:	73a3      	strb	r3, [r4, #14]
  BUF->tos = 0;
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	73e2      	strb	r2, [r4, #15]
  BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
 800b1c8:	7562      	strb	r2, [r4, #21]
 800b1ca:	7522      	strb	r2, [r4, #20]
  ++ipid;
 800b1cc:	498c      	ldr	r1, [pc, #560]	; (800b400 <uip_process+0x5d8>)
 800b1ce:	880b      	ldrh	r3, [r1, #0]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	800b      	strh	r3, [r1, #0]
  BUF->ipid[0] = ipid >> 8;
 800b1d6:	0a19      	lsrs	r1, r3, #8
 800b1d8:	74a1      	strb	r1, [r4, #18]
  BUF->ipid[1] = ipid & 0xff;
 800b1da:	74e3      	strb	r3, [r4, #19]
  BUF->ipchksum = 0;
 800b1dc:	7622      	strb	r2, [r4, #24]
 800b1de:	7662      	strb	r2, [r4, #25]
  BUF->ipchksum = ~(uip_ipchksum());
 800b1e0:	f7ff fdee 	bl	800adc0 <uip_ipchksum>
 800b1e4:	43c0      	mvns	r0, r0
 800b1e6:	8320      	strh	r0, [r4, #24]
  uip_flags = 0;
 800b1e8:	4b7b      	ldr	r3, [pc, #492]	; (800b3d8 <uip_process+0x5b0>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	701a      	strb	r2, [r3, #0]
  return;
 800b1ee:	e68c      	b.n	800af0a <uip_process+0xe2>
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8);
 800b1f0:	3308      	adds	r3, #8
 800b1f2:	4a81      	ldr	r2, [pc, #516]	; (800b3f8 <uip_process+0x5d0>)
 800b1f4:	8493      	strh	r3, [r2, #36]	; 0x24
 800b1f6:	e674      	b.n	800aee2 <uip_process+0xba>
  uip_len = uip_len - UIP_IPUDPH_LEN;
 800b1f8:	3d1c      	subs	r5, #28
 800b1fa:	4b7e      	ldr	r3, [pc, #504]	; (800b3f4 <uip_process+0x5cc>)
 800b1fc:	801d      	strh	r5, [r3, #0]
  for (uip_udp_conn = &uip_udp_conns[0];
 800b1fe:	4b77      	ldr	r3, [pc, #476]	; (800b3dc <uip_process+0x5b4>)
 800b200:	4a80      	ldr	r2, [pc, #512]	; (800b404 <uip_process+0x5dc>)
 800b202:	601a      	str	r2, [r3, #0]
 800b204:	e00e      	b.n	800b224 <uip_process+0x3fc>
        (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
 800b206:	881a      	ldrh	r2, [r3, #0]
         uip_udp_conn->rport == HTONS(69)) &&
 800b208:	b90a      	cbnz	r2, 800b20e <uip_process+0x3e6>
        (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
 800b20a:	8859      	ldrh	r1, [r3, #2]
 800b20c:	b329      	cbz	r1, 800b25a <uip_process+0x432>
 800b20e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b212:	428a      	cmp	r2, r1
 800b214:	d01e      	beq.n	800b254 <uip_process+0x42c>
         uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr)))
 800b216:	4978      	ldr	r1, [pc, #480]	; (800b3f8 <uip_process+0x5d0>)
 800b218:	8b49      	ldrh	r1, [r1, #26]
         uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
 800b21a:	428a      	cmp	r2, r1
 800b21c:	d02d      	beq.n	800b27a <uip_process+0x452>
       ++uip_udp_conn)
 800b21e:	3340      	adds	r3, #64	; 0x40
 800b220:	4a6e      	ldr	r2, [pc, #440]	; (800b3dc <uip_process+0x5b4>)
 800b222:	6013      	str	r3, [r2, #0]
       uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
 800b224:	4b6d      	ldr	r3, [pc, #436]	; (800b3dc <uip_process+0x5b4>)
 800b226:	681b      	ldr	r3, [r3, #0]
  for (uip_udp_conn = &uip_udp_conns[0];
 800b228:	4a77      	ldr	r2, [pc, #476]	; (800b408 <uip_process+0x5e0>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	f4bf ae68 	bcs.w	800af00 <uip_process+0xd8>
    if (uip_udp_conn->lport != 0 &&
 800b230:	889a      	ldrh	r2, [r3, #4]
 800b232:	2a00      	cmp	r2, #0
 800b234:	d0f3      	beq.n	800b21e <uip_process+0x3f6>
        UDPBUF->destport == uip_udp_conn->lport &&
 800b236:	4970      	ldr	r1, [pc, #448]	; (800b3f8 <uip_process+0x5d0>)
 800b238:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    if (uip_udp_conn->lport != 0 &&
 800b23a:	428a      	cmp	r2, r1
 800b23c:	d1ef      	bne.n	800b21e <uip_process+0x3f6>
        (uip_udp_conn->rport == 0 ||
 800b23e:	88da      	ldrh	r2, [r3, #6]
        UDPBUF->destport == uip_udp_conn->lport &&
 800b240:	2a00      	cmp	r2, #0
 800b242:	d0e0      	beq.n	800b206 <uip_process+0x3de>
         UDPBUF->srcport == uip_udp_conn->rport ||
 800b244:	496c      	ldr	r1, [pc, #432]	; (800b3f8 <uip_process+0x5d0>)
 800b246:	8c49      	ldrh	r1, [r1, #34]	; 0x22
        (uip_udp_conn->rport == 0 ||
 800b248:	428a      	cmp	r2, r1
 800b24a:	d0dc      	beq.n	800b206 <uip_process+0x3de>
         UDPBUF->srcport == uip_udp_conn->rport ||
 800b24c:	f5b2 4f8a 	cmp.w	r2, #17664	; 0x4500
 800b250:	d1e5      	bne.n	800b21e <uip_process+0x3f6>
 800b252:	e7d8      	b.n	800b206 <uip_process+0x3de>
         uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
 800b254:	8858      	ldrh	r0, [r3, #2]
 800b256:	4288      	cmp	r0, r1
 800b258:	d1dd      	bne.n	800b216 <uip_process+0x3ee>
  uip_conn = NULL;
 800b25a:	2300      	movs	r3, #0
 800b25c:	4a60      	ldr	r2, [pc, #384]	; (800b3e0 <uip_process+0x5b8>)
 800b25e:	6013      	str	r3, [r2, #0]
  uip_flags = UIP_NEWDATA;
 800b260:	4a5d      	ldr	r2, [pc, #372]	; (800b3d8 <uip_process+0x5b0>)
 800b262:	2102      	movs	r1, #2
 800b264:	7011      	strb	r1, [r2, #0]
  uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
 800b266:	4a5f      	ldr	r2, [pc, #380]	; (800b3e4 <uip_process+0x5bc>)
 800b268:	495f      	ldr	r1, [pc, #380]	; (800b3e8 <uip_process+0x5c0>)
 800b26a:	600a      	str	r2, [r1, #0]
 800b26c:	495f      	ldr	r1, [pc, #380]	; (800b3ec <uip_process+0x5c4>)
 800b26e:	600a      	str	r2, [r1, #0]
  uip_slen = 0;
 800b270:	4a5f      	ldr	r2, [pc, #380]	; (800b3f0 <uip_process+0x5c8>)
 800b272:	8013      	strh	r3, [r2, #0]
  UIP_UDP_APPCALL();
 800b274:	f7ff fcdc 	bl	800ac30 <dhcpc_appcall>
 800b278:	e772      	b.n	800b160 <uip_process+0x338>
         uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr)))
 800b27a:	4a5f      	ldr	r2, [pc, #380]	; (800b3f8 <uip_process+0x5d0>)
 800b27c:	8b91      	ldrh	r1, [r2, #28]
 800b27e:	885a      	ldrh	r2, [r3, #2]
 800b280:	4291      	cmp	r1, r2
 800b282:	d1cc      	bne.n	800b21e <uip_process+0x3f6>
udp_found:
 800b284:	e7e9      	b.n	800b25a <uip_process+0x432>
  if (uip_tcpchksum() != 0xffff)
 800b286:	f7ff fdc9 	bl	800ae1c <uip_tcpchksum>
 800b28a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b28e:	4298      	cmp	r0, r3
 800b290:	f47f ae36 	bne.w	800af00 <uip_process+0xd8>
  for (uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
 800b294:	4c5d      	ldr	r4, [pc, #372]	; (800b40c <uip_process+0x5e4>)
 800b296:	4b5d      	ldr	r3, [pc, #372]	; (800b40c <uip_process+0x5e4>)
 800b298:	429c      	cmp	r4, r3
 800b29a:	d95a      	bls.n	800b352 <uip_process+0x52a>
  if ((BUF->flags & TCP_CTL) != TCP_SYN)
 800b29c:	4b56      	ldr	r3, [pc, #344]	; (800b3f8 <uip_process+0x5d0>)
 800b29e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b2a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d07f      	beq.n	800b3aa <uip_process+0x582>
  if (BUF->flags & TCP_RST)
 800b2aa:	4b53      	ldr	r3, [pc, #332]	; (800b3f8 <uip_process+0x5d0>)
 800b2ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b2b0:	f013 0f04 	tst.w	r3, #4
 800b2b4:	f47f ae24 	bne.w	800af00 <uip_process+0xd8>
  BUF->flags = TCP_RST | TCP_ACK;
 800b2b8:	494f      	ldr	r1, [pc, #316]	; (800b3f8 <uip_process+0x5d0>)
 800b2ba:	2314      	movs	r3, #20
 800b2bc:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
  uip_len = UIP_IPTCPH_LEN;
 800b2c0:	4b4c      	ldr	r3, [pc, #304]	; (800b3f4 <uip_process+0x5cc>)
 800b2c2:	2228      	movs	r2, #40	; 0x28
 800b2c4:	801a      	strh	r2, [r3, #0]
  BUF->tcpoffset = 5 << 4;
 800b2c6:	2350      	movs	r3, #80	; 0x50
 800b2c8:	f881 302e 	strb.w	r3, [r1, #46]	; 0x2e
  c = BUF->seqno[3];
 800b2cc:	f891 0029 	ldrb.w	r0, [r1, #41]	; 0x29
  BUF->seqno[3] = BUF->ackno[3];
 800b2d0:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 800b2d4:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  c = BUF->seqno[2];
 800b2d8:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
  BUF->seqno[2] = BUF->ackno[2];
 800b2dc:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 800b2e0:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  BUF->ackno[2] = c;
 800b2e4:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
  c = BUF->seqno[1];
 800b2e8:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
  BUF->seqno[1] = BUF->ackno[1];
 800b2ec:	f891 402b 	ldrb.w	r4, [r1, #43]	; 0x2b
 800b2f0:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  BUF->ackno[1] = c;
 800b2f4:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b
  c = BUF->seqno[0];
 800b2f8:	f891 4026 	ldrb.w	r4, [r1, #38]	; 0x26
 800b2fc:	4d44      	ldr	r5, [pc, #272]	; (800b410 <uip_process+0x5e8>)
 800b2fe:	702c      	strb	r4, [r5, #0]
  BUF->seqno[0] = BUF->ackno[0];
 800b300:	f891 502a 	ldrb.w	r5, [r1, #42]	; 0x2a
 800b304:	f881 5026 	strb.w	r5, [r1, #38]	; 0x26
  BUF->ackno[0] = c;
 800b308:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
  if (++BUF->ackno[3] == 0)
 800b30c:	3001      	adds	r0, #1
 800b30e:	b2c0      	uxtb	r0, r0
 800b310:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
 800b314:	b960      	cbnz	r0, 800b330 <uip_process+0x508>
    if (++BUF->ackno[2] == 0)
 800b316:	3201      	adds	r2, #1
 800b318:	b2d2      	uxtb	r2, r2
 800b31a:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
 800b31e:	b93a      	cbnz	r2, 800b330 <uip_process+0x508>
      if (++BUF->ackno[1] == 0)
 800b320:	3301      	adds	r3, #1
 800b322:	b2db      	uxtb	r3, r3
 800b324:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b
 800b328:	b913      	cbnz	r3, 800b330 <uip_process+0x508>
        ++BUF->ackno[0];
 800b32a:	3401      	adds	r4, #1
 800b32c:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
  tmp16 = BUF->srcport;
 800b330:	4b31      	ldr	r3, [pc, #196]	; (800b3f8 <uip_process+0x5d0>)
 800b332:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800b334:	4937      	ldr	r1, [pc, #220]	; (800b414 <uip_process+0x5ec>)
 800b336:	800a      	strh	r2, [r1, #0]
  BUF->srcport = BUF->destport;
 800b338:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800b33a:	8459      	strh	r1, [r3, #34]	; 0x22
  BUF->destport = tmp16;
 800b33c:	849a      	strh	r2, [r3, #36]	; 0x24
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
 800b33e:	8b5a      	ldrh	r2, [r3, #26]
 800b340:	83da      	strh	r2, [r3, #30]
 800b342:	8b9a      	ldrh	r2, [r3, #28]
 800b344:	841a      	strh	r2, [r3, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 800b346:	4a2d      	ldr	r2, [pc, #180]	; (800b3fc <uip_process+0x5d4>)
 800b348:	8811      	ldrh	r1, [r2, #0]
 800b34a:	8359      	strh	r1, [r3, #26]
 800b34c:	8852      	ldrh	r2, [r2, #2]
 800b34e:	839a      	strh	r2, [r3, #28]
  goto tcp_send_noconn;
 800b350:	e62c      	b.n	800afac <uip_process+0x184>
    if (uip_connr->tcpstateflags != UIP_CLOSED &&
 800b352:	7e61      	ldrb	r1, [r4, #25]
 800b354:	b121      	cbz	r1, 800b360 <uip_process+0x538>
        BUF->destport == uip_connr->lport &&
 800b356:	4b28      	ldr	r3, [pc, #160]	; (800b3f8 <uip_process+0x5d0>)
 800b358:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800b35a:	88a3      	ldrh	r3, [r4, #4]
    if (uip_connr->tcpstateflags != UIP_CLOSED &&
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d001      	beq.n	800b364 <uip_process+0x53c>
       ++uip_connr)
 800b360:	341e      	adds	r4, #30
 800b362:	e798      	b.n	800b296 <uip_process+0x46e>
        BUF->srcport == uip_connr->rport &&
 800b364:	4b24      	ldr	r3, [pc, #144]	; (800b3f8 <uip_process+0x5d0>)
 800b366:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800b368:	88e3      	ldrh	r3, [r4, #6]
        BUF->destport == uip_connr->lport &&
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d1f8      	bne.n	800b360 <uip_process+0x538>
        uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr))
 800b36e:	4b22      	ldr	r3, [pc, #136]	; (800b3f8 <uip_process+0x5d0>)
 800b370:	8b5a      	ldrh	r2, [r3, #26]
 800b372:	8823      	ldrh	r3, [r4, #0]
        BUF->srcport == uip_connr->rport &&
 800b374:	429a      	cmp	r2, r3
 800b376:	d1f3      	bne.n	800b360 <uip_process+0x538>
        uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr))
 800b378:	4b1f      	ldr	r3, [pc, #124]	; (800b3f8 <uip_process+0x5d0>)
 800b37a:	8b9a      	ldrh	r2, [r3, #28]
 800b37c:	8863      	ldrh	r3, [r4, #2]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d1ee      	bne.n	800b360 <uip_process+0x538>
  uip_conn = uip_connr;
 800b382:	4b17      	ldr	r3, [pc, #92]	; (800b3e0 <uip_process+0x5b8>)
 800b384:	601c      	str	r4, [r3, #0]
  uip_flags = 0;
 800b386:	4b14      	ldr	r3, [pc, #80]	; (800b3d8 <uip_process+0x5b0>)
 800b388:	2200      	movs	r2, #0
 800b38a:	701a      	strb	r2, [r3, #0]
  if (BUF->flags & TCP_RST)
 800b38c:	4b1a      	ldr	r3, [pc, #104]	; (800b3f8 <uip_process+0x5d0>)
 800b38e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b392:	f012 0f04 	tst.w	r2, #4
 800b396:	f000 80da 	beq.w	800b54e <uip_process+0x726>
    uip_connr->tcpstateflags = UIP_CLOSED;
 800b39a:	2300      	movs	r3, #0
 800b39c:	7663      	strb	r3, [r4, #25]
    uip_flags = UIP_ABORT;
 800b39e:	4b0e      	ldr	r3, [pc, #56]	; (800b3d8 <uip_process+0x5b0>)
 800b3a0:	2220      	movs	r2, #32
 800b3a2:	701a      	strb	r2, [r3, #0]
    UIP_APPCALL();
 800b3a4:	f7fd faca 	bl	800893c <NetApp>
    goto drop;
 800b3a8:	e5aa      	b.n	800af00 <uip_process+0xd8>
  tmp16 = BUF->destport;
 800b3aa:	4b13      	ldr	r3, [pc, #76]	; (800b3f8 <uip_process+0x5d0>)
 800b3ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b3ae:	b299      	uxth	r1, r3
 800b3b0:	4a18      	ldr	r2, [pc, #96]	; (800b414 <uip_process+0x5ec>)
 800b3b2:	8013      	strh	r3, [r2, #0]
  for (c = 0; c < UIP_LISTENPORTS; ++c)
 800b3b4:	4b16      	ldr	r3, [pc, #88]	; (800b410 <uip_process+0x5e8>)
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	701a      	strb	r2, [r3, #0]
 800b3ba:	4b15      	ldr	r3, [pc, #84]	; (800b410 <uip_process+0x5e8>)
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f47f af73 	bne.w	800b2aa <uip_process+0x482>
    if (tmp16 == uip_listenports[c])
 800b3c4:	4a14      	ldr	r2, [pc, #80]	; (800b418 <uip_process+0x5f0>)
 800b3c6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800b3ca:	4291      	cmp	r1, r2
 800b3cc:	d026      	beq.n	800b41c <uip_process+0x5f4>
  for (c = 0; c < UIP_LISTENPORTS; ++c)
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	4a0f      	ldr	r2, [pc, #60]	; (800b410 <uip_process+0x5e8>)
 800b3d2:	7013      	strb	r3, [r2, #0]
 800b3d4:	e7f1      	b.n	800b3ba <uip_process+0x592>
 800b3d6:	bf00      	nop
 800b3d8:	200032ec 	.word	0x200032ec
 800b3dc:	200032f0 	.word	0x200032f0
 800b3e0:	200032f8 	.word	0x200032f8
 800b3e4:	20003356 	.word	0x20003356
 800b3e8:	200032f4 	.word	0x200032f4
 800b3ec:	200032e4 	.word	0x200032e4
 800b3f0:	2000396e 	.word	0x2000396e
 800b3f4:	200032e0 	.word	0x200032e0
 800b3f8:	2000332c 	.word	0x2000332c
 800b3fc:	20003328 	.word	0x20003328
 800b400:	20000176 	.word	0x20000176
 800b404:	20003970 	.word	0x20003970
 800b408:	200039b0 	.word	0x200039b0
 800b40c:	200032fc 	.word	0x200032fc
 800b410:	20000174 	.word	0x20000174
 800b414:	2000017e 	.word	0x2000017e
 800b418:	2000331c 	.word	0x2000331c
  for (c = 0; c < UIP_CONNS; ++c)
 800b41c:	2400      	movs	r4, #0
 800b41e:	4b9a      	ldr	r3, [pc, #616]	; (800b688 <uip_process+0x860>)
 800b420:	701c      	strb	r4, [r3, #0]
 800b422:	e00b      	b.n	800b43c <uip_process+0x614>
    if (uip_conns[c].tcpstateflags == UIP_CLOSED)
 800b424:	4619      	mov	r1, r3
 800b426:	4899      	ldr	r0, [pc, #612]	; (800b68c <uip_process+0x864>)
 800b428:	221e      	movs	r2, #30
 800b42a:	fb02 0203 	mla	r2, r2, r3, r0
 800b42e:	7e52      	ldrb	r2, [r2, #25]
 800b430:	b14a      	cbz	r2, 800b446 <uip_process+0x61e>
    if (uip_conns[c].tcpstateflags == UIP_TIME_WAIT)
 800b432:	2a07      	cmp	r2, #7
 800b434:	d056      	beq.n	800b4e4 <uip_process+0x6bc>
  for (c = 0; c < UIP_CONNS; ++c)
 800b436:	3301      	adds	r3, #1
 800b438:	4a93      	ldr	r2, [pc, #588]	; (800b688 <uip_process+0x860>)
 800b43a:	7013      	strb	r3, [r2, #0]
 800b43c:	4b92      	ldr	r3, [pc, #584]	; (800b688 <uip_process+0x860>)
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d0ef      	beq.n	800b424 <uip_process+0x5fc>
 800b444:	e002      	b.n	800b44c <uip_process+0x624>
      uip_connr = &uip_conns[c];
 800b446:	241e      	movs	r4, #30
 800b448:	fb04 0401 	mla	r4, r4, r1, r0
  if (uip_connr == 0)
 800b44c:	2c00      	cmp	r4, #0
 800b44e:	f43f ad57 	beq.w	800af00 <uip_process+0xd8>
  uip_conn = uip_connr;
 800b452:	4b8f      	ldr	r3, [pc, #572]	; (800b690 <uip_process+0x868>)
 800b454:	601c      	str	r4, [r3, #0]
  uip_connr->rto = uip_connr->timer = UIP_RTO;
 800b456:	2303      	movs	r3, #3
 800b458:	76a3      	strb	r3, [r4, #26]
 800b45a:	7623      	strb	r3, [r4, #24]
  uip_connr->sa = 0;
 800b45c:	2300      	movs	r3, #0
 800b45e:	75a3      	strb	r3, [r4, #22]
  uip_connr->sv = 4;
 800b460:	2204      	movs	r2, #4
 800b462:	75e2      	strb	r2, [r4, #23]
  uip_connr->nrtx = 0;
 800b464:	76e3      	strb	r3, [r4, #27]
  uip_connr->lport = BUF->destport;
 800b466:	4d8b      	ldr	r5, [pc, #556]	; (800b694 <uip_process+0x86c>)
 800b468:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800b46a:	80a3      	strh	r3, [r4, #4]
  uip_connr->rport = BUF->srcport;
 800b46c:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800b46e:	80e3      	strh	r3, [r4, #6]
  uip_ipaddr_copy(uip_connr->ripaddr, BUF->srcipaddr);
 800b470:	8b6b      	ldrh	r3, [r5, #26]
 800b472:	8023      	strh	r3, [r4, #0]
 800b474:	8bab      	ldrh	r3, [r5, #28]
 800b476:	8063      	strh	r3, [r4, #2]
  uip_connr->tcpstateflags = UIP_SYN_RCVD;
 800b478:	2001      	movs	r0, #1
 800b47a:	7660      	strb	r0, [r4, #25]
  uip_connr->snd_nxt[0] = iss[0];
 800b47c:	4b86      	ldr	r3, [pc, #536]	; (800b698 <uip_process+0x870>)
 800b47e:	781a      	ldrb	r2, [r3, #0]
 800b480:	7322      	strb	r2, [r4, #12]
  uip_connr->snd_nxt[1] = iss[1];
 800b482:	785a      	ldrb	r2, [r3, #1]
 800b484:	7362      	strb	r2, [r4, #13]
  uip_connr->snd_nxt[2] = iss[2];
 800b486:	789a      	ldrb	r2, [r3, #2]
 800b488:	73a2      	strb	r2, [r4, #14]
  uip_connr->snd_nxt[3] = iss[3];
 800b48a:	78db      	ldrb	r3, [r3, #3]
 800b48c:	73e3      	strb	r3, [r4, #15]
  uip_connr->len = 1;
 800b48e:	8220      	strh	r0, [r4, #16]
  uip_connr->rcv_nxt[3] = BUF->seqno[3];
 800b490:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800b494:	72e3      	strb	r3, [r4, #11]
  uip_connr->rcv_nxt[2] = BUF->seqno[2];
 800b496:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800b49a:	72a3      	strb	r3, [r4, #10]
  uip_connr->rcv_nxt[1] = BUF->seqno[1];
 800b49c:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 800b4a0:	7263      	strb	r3, [r4, #9]
  uip_connr->rcv_nxt[0] = BUF->seqno[0];
 800b4a2:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 800b4a6:	7223      	strb	r3, [r4, #8]
  uip_add_rcv_nxt(1);
 800b4a8:	f7ff fc14 	bl	800acd4 <uip_add_rcv_nxt>
  if ((BUF->tcpoffset & 0xf0) > 0x50)
 800b4ac:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
 800b4b0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800b4b4:	2b50      	cmp	r3, #80	; 0x50
 800b4b6:	d93b      	bls.n	800b530 <uip_process+0x708>
    for (c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;)
 800b4b8:	4b73      	ldr	r3, [pc, #460]	; (800b688 <uip_process+0x860>)
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	701a      	strb	r2, [r3, #0]
 800b4be:	4b72      	ldr	r3, [pc, #456]	; (800b688 <uip_process+0x860>)
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	0901      	lsrs	r1, r0, #4
 800b4c6:	3905      	subs	r1, #5
 800b4c8:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 800b4cc:	da30      	bge.n	800b530 <uip_process+0x708>
      opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
 800b4ce:	f103 0136 	add.w	r1, r3, #54	; 0x36
 800b4d2:	4d70      	ldr	r5, [pc, #448]	; (800b694 <uip_process+0x86c>)
 800b4d4:	5c69      	ldrb	r1, [r5, r1]
      if (opt == TCP_OPT_END)
 800b4d6:	b359      	cbz	r1, 800b530 <uip_process+0x708>
      else if (opt == TCP_OPT_NOOP)
 800b4d8:	2901      	cmp	r1, #1
 800b4da:	d111      	bne.n	800b500 <uip_process+0x6d8>
        ++c;
 800b4dc:	3301      	adds	r3, #1
 800b4de:	4a6a      	ldr	r2, [pc, #424]	; (800b688 <uip_process+0x860>)
 800b4e0:	7013      	strb	r3, [r2, #0]
 800b4e2:	e7ec      	b.n	800b4be <uip_process+0x696>
      if (uip_connr == 0 ||
 800b4e4:	b13c      	cbz	r4, 800b4f6 <uip_process+0x6ce>
          uip_conns[c].timer > uip_connr->timer)
 800b4e6:	4969      	ldr	r1, [pc, #420]	; (800b68c <uip_process+0x864>)
 800b4e8:	221e      	movs	r2, #30
 800b4ea:	fb02 1203 	mla	r2, r2, r3, r1
 800b4ee:	7e91      	ldrb	r1, [r2, #26]
 800b4f0:	7ea2      	ldrb	r2, [r4, #26]
      if (uip_connr == 0 ||
 800b4f2:	4291      	cmp	r1, r2
 800b4f4:	d99f      	bls.n	800b436 <uip_process+0x60e>
        uip_connr = &uip_conns[c];
 800b4f6:	241e      	movs	r4, #30
 800b4f8:	4a64      	ldr	r2, [pc, #400]	; (800b68c <uip_process+0x864>)
 800b4fa:	fb04 2403 	mla	r4, r4, r3, r2
 800b4fe:	e79a      	b.n	800b436 <uip_process+0x60e>
      else if (opt == TCP_OPT_MSS &&
 800b500:	2902      	cmp	r1, #2
 800b502:	d11a      	bne.n	800b53a <uip_process+0x712>
               uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN)
 800b504:	f103 0137 	add.w	r1, r3, #55	; 0x37
 800b508:	4d62      	ldr	r5, [pc, #392]	; (800b694 <uip_process+0x86c>)
 800b50a:	5c69      	ldrb	r1, [r5, r1]
      else if (opt == TCP_OPT_MSS &&
 800b50c:	2904      	cmp	r1, #4
 800b50e:	d114      	bne.n	800b53a <uip_process+0x712>
        tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 800b510:	f102 0138 	add.w	r1, r2, #56	; 0x38
 800b514:	5c69      	ldrb	r1, [r5, r1]
                (u16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
 800b516:	3239      	adds	r2, #57	; 0x39
 800b518:	5cab      	ldrb	r3, [r5, r2]
        tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 800b51a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b51e:	4a5f      	ldr	r2, [pc, #380]	; (800b69c <uip_process+0x874>)
 800b520:	8013      	strh	r3, [r2, #0]
                                  tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
 800b522:	f240 620a 	movw	r2, #1546	; 0x60a
 800b526:	4293      	cmp	r3, r2
 800b528:	bf28      	it	cs
 800b52a:	4613      	movcs	r3, r2
        uip_connr->initialmss = uip_connr->mss =
 800b52c:	8263      	strh	r3, [r4, #18]
 800b52e:	82a3      	strh	r3, [r4, #20]
  BUF->flags = TCP_ACK;
 800b530:	4b58      	ldr	r3, [pc, #352]	; (800b694 <uip_process+0x86c>)
 800b532:	2210      	movs	r2, #16
 800b534:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800b538:	e5bc      	b.n	800b0b4 <uip_process+0x28c>
        if (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0)
 800b53a:	f103 0237 	add.w	r2, r3, #55	; 0x37
 800b53e:	4955      	ldr	r1, [pc, #340]	; (800b694 <uip_process+0x86c>)
 800b540:	5c8a      	ldrb	r2, [r1, r2]
 800b542:	2a00      	cmp	r2, #0
 800b544:	d0f4      	beq.n	800b530 <uip_process+0x708>
        c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
 800b546:	4413      	add	r3, r2
 800b548:	4a4f      	ldr	r2, [pc, #316]	; (800b688 <uip_process+0x860>)
 800b54a:	7013      	strb	r3, [r2, #0]
 800b54c:	e7b7      	b.n	800b4be <uip_process+0x696>
  c = (BUF->tcpoffset >> 4) << 2;
 800b54e:	4b51      	ldr	r3, [pc, #324]	; (800b694 <uip_process+0x86c>)
 800b550:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b554:	091b      	lsrs	r3, r3, #4
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	484b      	ldr	r0, [pc, #300]	; (800b688 <uip_process+0x860>)
 800b55a:	7003      	strb	r3, [r0, #0]
  uip_len = uip_len - c - UIP_IPH_LEN;
 800b55c:	1aeb      	subs	r3, r5, r3
 800b55e:	b29b      	uxth	r3, r3
 800b560:	3b14      	subs	r3, #20
 800b562:	b29b      	uxth	r3, r3
 800b564:	484e      	ldr	r0, [pc, #312]	; (800b6a0 <uip_process+0x878>)
 800b566:	8003      	strh	r3, [r0, #0]
  if (!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
 800b568:	f001 010f 	and.w	r1, r1, #15
 800b56c:	2902      	cmp	r1, #2
 800b56e:	d103      	bne.n	800b578 <uip_process+0x750>
 800b570:	f002 013f 	and.w	r1, r2, #63	; 0x3f
 800b574:	2912      	cmp	r1, #18
 800b576:	d00f      	beq.n	800b598 <uip_process+0x770>
    if ((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
 800b578:	b913      	cbnz	r3, 800b580 <uip_process+0x758>
 800b57a:	f012 0f03 	tst.w	r2, #3
 800b57e:	d00b      	beq.n	800b598 <uip_process+0x770>
        (BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
 800b580:	4b44      	ldr	r3, [pc, #272]	; (800b694 <uip_process+0x86c>)
 800b582:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 800b584:	8923      	ldrh	r3, [r4, #8]
    if ((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
 800b586:	4299      	cmp	r1, r3
 800b588:	f040 81e7 	bne.w	800b95a <uip_process+0xb32>
         BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
 800b58c:	4b41      	ldr	r3, [pc, #260]	; (800b694 <uip_process+0x86c>)
 800b58e:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 800b590:	8963      	ldrh	r3, [r4, #10]
 800b592:	4299      	cmp	r1, r3
 800b594:	f040 81e1 	bne.w	800b95a <uip_process+0xb32>
  if ((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr))
 800b598:	f012 0f10 	tst.w	r2, #16
 800b59c:	d047      	beq.n	800b62e <uip_process+0x806>
 800b59e:	8a21      	ldrh	r1, [r4, #16]
 800b5a0:	2900      	cmp	r1, #0
 800b5a2:	d044      	beq.n	800b62e <uip_process+0x806>
    uip_add32(uip_connr->snd_nxt, uip_connr->len);
 800b5a4:	f104 000c 	add.w	r0, r4, #12
 800b5a8:	f7ff fb66 	bl	800ac78 <uip_add32>
    if (BUF->ackno[0] == uip_acc32[0] &&
 800b5ac:	4b39      	ldr	r3, [pc, #228]	; (800b694 <uip_process+0x86c>)
 800b5ae:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b5b2:	4a3c      	ldr	r2, [pc, #240]	; (800b6a4 <uip_process+0x87c>)
 800b5b4:	7810      	ldrb	r0, [r2, #0]
 800b5b6:	4283      	cmp	r3, r0
 800b5b8:	d139      	bne.n	800b62e <uip_process+0x806>
        BUF->ackno[1] == uip_acc32[1] &&
 800b5ba:	4b36      	ldr	r3, [pc, #216]	; (800b694 <uip_process+0x86c>)
 800b5bc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b5c0:	7851      	ldrb	r1, [r2, #1]
    if (BUF->ackno[0] == uip_acc32[0] &&
 800b5c2:	428b      	cmp	r3, r1
 800b5c4:	d133      	bne.n	800b62e <uip_process+0x806>
        BUF->ackno[2] == uip_acc32[2] &&
 800b5c6:	4b33      	ldr	r3, [pc, #204]	; (800b694 <uip_process+0x86c>)
 800b5c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b5cc:	7892      	ldrb	r2, [r2, #2]
        BUF->ackno[1] == uip_acc32[1] &&
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d12d      	bne.n	800b62e <uip_process+0x806>
        BUF->ackno[3] == uip_acc32[3])
 800b5d2:	4b30      	ldr	r3, [pc, #192]	; (800b694 <uip_process+0x86c>)
 800b5d4:	f893 502d 	ldrb.w	r5, [r3, #45]	; 0x2d
 800b5d8:	4b32      	ldr	r3, [pc, #200]	; (800b6a4 <uip_process+0x87c>)
 800b5da:	78db      	ldrb	r3, [r3, #3]
        BUF->ackno[2] == uip_acc32[2] &&
 800b5dc:	429d      	cmp	r5, r3
 800b5de:	d126      	bne.n	800b62e <uip_process+0x806>
      uip_connr->snd_nxt[0] = uip_acc32[0];
 800b5e0:	7320      	strb	r0, [r4, #12]
      uip_connr->snd_nxt[1] = uip_acc32[1];
 800b5e2:	7361      	strb	r1, [r4, #13]
      uip_connr->snd_nxt[2] = uip_acc32[2];
 800b5e4:	73a2      	strb	r2, [r4, #14]
      uip_connr->snd_nxt[3] = uip_acc32[3];
 800b5e6:	73e3      	strb	r3, [r4, #15]
      if (uip_connr->nrtx == 0)
 800b5e8:	7ee3      	ldrb	r3, [r4, #27]
 800b5ea:	b9cb      	cbnz	r3, 800b620 <uip_process+0x7f8>
        m = uip_connr->rto - uip_connr->timer;
 800b5ec:	7e23      	ldrb	r3, [r4, #24]
 800b5ee:	7ea2      	ldrb	r2, [r4, #26]
 800b5f0:	1a9b      	subs	r3, r3, r2
 800b5f2:	b2db      	uxtb	r3, r3
        m = m - (uip_connr->sa >> 3);
 800b5f4:	7da1      	ldrb	r1, [r4, #22]
 800b5f6:	eba3 03d1 	sub.w	r3, r3, r1, lsr #3
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	b25a      	sxtb	r2, r3
        uip_connr->sa += m;
 800b5fe:	4419      	add	r1, r3
 800b600:	b2c9      	uxtb	r1, r1
 800b602:	75a1      	strb	r1, [r4, #22]
        if (m < 0)
 800b604:	2a00      	cmp	r2, #0
 800b606:	da01      	bge.n	800b60c <uip_process+0x7e4>
          m = -m;
 800b608:	425b      	negs	r3, r3
 800b60a:	b25a      	sxtb	r2, r3
        m = m - (uip_connr->sv >> 2);
 800b60c:	7de0      	ldrb	r0, [r4, #23]
 800b60e:	eba2 0390 	sub.w	r3, r2, r0, lsr #2
        uip_connr->sv += m;
 800b612:	fa50 f383 	uxtab	r3, r0, r3
 800b616:	b2db      	uxtb	r3, r3
 800b618:	75e3      	strb	r3, [r4, #23]
        uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;
 800b61a:	eb03 03d1 	add.w	r3, r3, r1, lsr #3
 800b61e:	7623      	strb	r3, [r4, #24]
      uip_flags = UIP_ACKDATA;
 800b620:	4b21      	ldr	r3, [pc, #132]	; (800b6a8 <uip_process+0x880>)
 800b622:	2201      	movs	r2, #1
 800b624:	701a      	strb	r2, [r3, #0]
      uip_connr->timer = uip_connr->rto;
 800b626:	7e23      	ldrb	r3, [r4, #24]
 800b628:	76a3      	strb	r3, [r4, #26]
      uip_connr->len = 0;
 800b62a:	2300      	movs	r3, #0
 800b62c:	8223      	strh	r3, [r4, #16]
  switch (uip_connr->tcpstateflags & UIP_TS_MASK)
 800b62e:	7e61      	ldrb	r1, [r4, #25]
 800b630:	f001 030f 	and.w	r3, r1, #15
 800b634:	3b01      	subs	r3, #1
 800b636:	2b07      	cmp	r3, #7
 800b638:	f63f ac62 	bhi.w	800af00 <uip_process+0xd8>
 800b63c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b640:	00380008 	.word	0x00380008
 800b644:	017000ac 	.word	0x017000ac
 800b648:	01d801ba 	.word	0x01d801ba
 800b64c:	0161018d 	.word	0x0161018d
      if (uip_flags & UIP_ACKDATA)
 800b650:	4b15      	ldr	r3, [pc, #84]	; (800b6a8 <uip_process+0x880>)
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	f013 0f01 	tst.w	r3, #1
 800b658:	f43f ac52 	beq.w	800af00 <uip_process+0xd8>
        uip_connr->tcpstateflags = UIP_ESTABLISHED;
 800b65c:	2303      	movs	r3, #3
 800b65e:	7663      	strb	r3, [r4, #25]
        uip_flags = UIP_CONNECTED;
 800b660:	4b11      	ldr	r3, [pc, #68]	; (800b6a8 <uip_process+0x880>)
 800b662:	2240      	movs	r2, #64	; 0x40
 800b664:	701a      	strb	r2, [r3, #0]
        uip_connr->len = 0;
 800b666:	2300      	movs	r3, #0
 800b668:	8223      	strh	r3, [r4, #16]
        if (uip_len > 0)
 800b66a:	4b0d      	ldr	r3, [pc, #52]	; (800b6a0 <uip_process+0x878>)
 800b66c:	8818      	ldrh	r0, [r3, #0]
 800b66e:	b120      	cbz	r0, 800b67a <uip_process+0x852>
          uip_flags |= UIP_NEWDATA;
 800b670:	4b0d      	ldr	r3, [pc, #52]	; (800b6a8 <uip_process+0x880>)
 800b672:	2242      	movs	r2, #66	; 0x42
 800b674:	701a      	strb	r2, [r3, #0]
          uip_add_rcv_nxt(uip_len);
 800b676:	f7ff fb2d 	bl	800acd4 <uip_add_rcv_nxt>
        uip_slen = 0;
 800b67a:	4b0c      	ldr	r3, [pc, #48]	; (800b6ac <uip_process+0x884>)
 800b67c:	2200      	movs	r2, #0
 800b67e:	801a      	strh	r2, [r3, #0]
        UIP_APPCALL();
 800b680:	f7fd f95c 	bl	800893c <NetApp>
        goto appsend;
 800b684:	e44a      	b.n	800af1c <uip_process+0xf4>
 800b686:	bf00      	nop
 800b688:	20000174 	.word	0x20000174
 800b68c:	200032fc 	.word	0x200032fc
 800b690:	200032f8 	.word	0x200032f8
 800b694:	2000332c 	.word	0x2000332c
 800b698:	20000178 	.word	0x20000178
 800b69c:	2000017e 	.word	0x2000017e
 800b6a0:	200032e0 	.word	0x200032e0
 800b6a4:	200032e8 	.word	0x200032e8
 800b6a8:	200032ec 	.word	0x200032ec
 800b6ac:	2000396e 	.word	0x2000396e
      if ((uip_flags & UIP_ACKDATA) &&
 800b6b0:	4bad      	ldr	r3, [pc, #692]	; (800b968 <uip_process+0xb40>)
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	f013 0f01 	tst.w	r3, #1
 800b6b8:	d064      	beq.n	800b784 <uip_process+0x95c>
          (BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK))
 800b6ba:	4bac      	ldr	r3, [pc, #688]	; (800b96c <uip_process+0xb44>)
 800b6bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
      if ((uip_flags & UIP_ACKDATA) &&
 800b6c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6c4:	2b12      	cmp	r3, #18
 800b6c6:	d15d      	bne.n	800b784 <uip_process+0x95c>
        if ((BUF->tcpoffset & 0xf0) > 0x50)
 800b6c8:	4ba8      	ldr	r3, [pc, #672]	; (800b96c <uip_process+0xb44>)
 800b6ca:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
 800b6ce:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800b6d2:	2b50      	cmp	r3, #80	; 0x50
 800b6d4:	d92d      	bls.n	800b732 <uip_process+0x90a>
          for (c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;)
 800b6d6:	4ba6      	ldr	r3, [pc, #664]	; (800b970 <uip_process+0xb48>)
 800b6d8:	2200      	movs	r2, #0
 800b6da:	701a      	strb	r2, [r3, #0]
 800b6dc:	4ba4      	ldr	r3, [pc, #656]	; (800b970 <uip_process+0xb48>)
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	0901      	lsrs	r1, r0, #4
 800b6e4:	3905      	subs	r1, #5
 800b6e6:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 800b6ea:	da22      	bge.n	800b732 <uip_process+0x90a>
            opt = uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + c];
 800b6ec:	f103 0136 	add.w	r1, r3, #54	; 0x36
 800b6f0:	4d9e      	ldr	r5, [pc, #632]	; (800b96c <uip_process+0xb44>)
 800b6f2:	5c69      	ldrb	r1, [r5, r1]
            if (opt == TCP_OPT_END)
 800b6f4:	b1e9      	cbz	r1, 800b732 <uip_process+0x90a>
            else if (opt == TCP_OPT_NOOP)
 800b6f6:	2901      	cmp	r1, #1
 800b6f8:	d103      	bne.n	800b702 <uip_process+0x8da>
              ++c;
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	4a9c      	ldr	r2, [pc, #624]	; (800b970 <uip_process+0xb48>)
 800b6fe:	7013      	strb	r3, [r2, #0]
 800b700:	e7ec      	b.n	800b6dc <uip_process+0x8b4>
            else if (opt == TCP_OPT_MSS &&
 800b702:	2902      	cmp	r1, #2
 800b704:	d134      	bne.n	800b770 <uip_process+0x948>
                     uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN)
 800b706:	f103 0137 	add.w	r1, r3, #55	; 0x37
 800b70a:	4d98      	ldr	r5, [pc, #608]	; (800b96c <uip_process+0xb44>)
 800b70c:	5c69      	ldrb	r1, [r5, r1]
            else if (opt == TCP_OPT_MSS &&
 800b70e:	2904      	cmp	r1, #4
 800b710:	d12e      	bne.n	800b770 <uip_process+0x948>
              tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 800b712:	f102 0138 	add.w	r1, r2, #56	; 0x38
 800b716:	5c69      	ldrb	r1, [r5, r1]
                      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
 800b718:	3239      	adds	r2, #57	; 0x39
 800b71a:	5cab      	ldrb	r3, [r5, r2]
              tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 800b71c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b720:	4a94      	ldr	r2, [pc, #592]	; (800b974 <uip_process+0xb4c>)
 800b722:	8013      	strh	r3, [r2, #0]
                uip_connr->mss = tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
 800b724:	f240 620a 	movw	r2, #1546	; 0x60a
 800b728:	4293      	cmp	r3, r2
 800b72a:	bf28      	it	cs
 800b72c:	4613      	movcs	r3, r2
 800b72e:	8263      	strh	r3, [r4, #18]
              uip_connr->initialmss =
 800b730:	82a3      	strh	r3, [r4, #20]
        uip_connr->tcpstateflags = UIP_ESTABLISHED;
 800b732:	2303      	movs	r3, #3
 800b734:	7663      	strb	r3, [r4, #25]
        uip_connr->rcv_nxt[0] = BUF->seqno[0];
 800b736:	4b8d      	ldr	r3, [pc, #564]	; (800b96c <uip_process+0xb44>)
 800b738:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800b73c:	7222      	strb	r2, [r4, #8]
        uip_connr->rcv_nxt[1] = BUF->seqno[1];
 800b73e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800b742:	7262      	strb	r2, [r4, #9]
        uip_connr->rcv_nxt[2] = BUF->seqno[2];
 800b744:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800b748:	72a2      	strb	r2, [r4, #10]
        uip_connr->rcv_nxt[3] = BUF->seqno[3];
 800b74a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b74e:	72e3      	strb	r3, [r4, #11]
        uip_add_rcv_nxt(1);
 800b750:	2001      	movs	r0, #1
 800b752:	f7ff fabf 	bl	800acd4 <uip_add_rcv_nxt>
        uip_flags = UIP_CONNECTED | UIP_NEWDATA;
 800b756:	4b84      	ldr	r3, [pc, #528]	; (800b968 <uip_process+0xb40>)
 800b758:	2242      	movs	r2, #66	; 0x42
 800b75a:	701a      	strb	r2, [r3, #0]
        uip_connr->len = 0;
 800b75c:	2300      	movs	r3, #0
 800b75e:	8223      	strh	r3, [r4, #16]
        uip_len = 0;
 800b760:	4a85      	ldr	r2, [pc, #532]	; (800b978 <uip_process+0xb50>)
 800b762:	8013      	strh	r3, [r2, #0]
        uip_slen = 0;
 800b764:	4a85      	ldr	r2, [pc, #532]	; (800b97c <uip_process+0xb54>)
 800b766:	8013      	strh	r3, [r2, #0]
        UIP_APPCALL();
 800b768:	f7fd f8e8 	bl	800893c <NetApp>
        goto appsend;
 800b76c:	f7ff bbd6 	b.w	800af1c <uip_process+0xf4>
              if (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0)
 800b770:	f103 0237 	add.w	r2, r3, #55	; 0x37
 800b774:	497d      	ldr	r1, [pc, #500]	; (800b96c <uip_process+0xb44>)
 800b776:	5c8a      	ldrb	r2, [r1, r2]
 800b778:	2a00      	cmp	r2, #0
 800b77a:	d0da      	beq.n	800b732 <uip_process+0x90a>
              c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
 800b77c:	4413      	add	r3, r2
 800b77e:	4a7c      	ldr	r2, [pc, #496]	; (800b970 <uip_process+0xb48>)
 800b780:	7013      	strb	r3, [r2, #0]
 800b782:	e7ab      	b.n	800b6dc <uip_process+0x8b4>
      uip_flags = UIP_ABORT;
 800b784:	4b78      	ldr	r3, [pc, #480]	; (800b968 <uip_process+0xb40>)
 800b786:	2220      	movs	r2, #32
 800b788:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
 800b78a:	f7fd f8d7 	bl	800893c <NetApp>
      uip_conn->tcpstateflags = UIP_CLOSED;
 800b78e:	4b7c      	ldr	r3, [pc, #496]	; (800b980 <uip_process+0xb58>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2200      	movs	r2, #0
 800b794:	765a      	strb	r2, [r3, #25]
      goto reset;
 800b796:	e588      	b.n	800b2aa <uip_process+0x482>
      if (BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED))
 800b798:	4b74      	ldr	r3, [pc, #464]	; (800b96c <uip_process+0xb44>)
 800b79a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b79e:	f013 0f01 	tst.w	r3, #1
 800b7a2:	d025      	beq.n	800b7f0 <uip_process+0x9c8>
 800b7a4:	f011 0f10 	tst.w	r1, #16
 800b7a8:	d122      	bne.n	800b7f0 <uip_process+0x9c8>
        if (uip_outstanding(uip_connr))
 800b7aa:	8a23      	ldrh	r3, [r4, #16]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f47f aba7 	bne.w	800af00 <uip_process+0xd8>
        uip_add_rcv_nxt(1 + uip_len);
 800b7b2:	4d71      	ldr	r5, [pc, #452]	; (800b978 <uip_process+0xb50>)
 800b7b4:	8828      	ldrh	r0, [r5, #0]
 800b7b6:	3001      	adds	r0, #1
 800b7b8:	b280      	uxth	r0, r0
 800b7ba:	f7ff fa8b 	bl	800acd4 <uip_add_rcv_nxt>
        uip_flags |= UIP_CLOSE;
 800b7be:	4a6a      	ldr	r2, [pc, #424]	; (800b968 <uip_process+0xb40>)
 800b7c0:	7813      	ldrb	r3, [r2, #0]
 800b7c2:	f043 0310 	orr.w	r3, r3, #16
 800b7c6:	7013      	strb	r3, [r2, #0]
        if (uip_len > 0)
 800b7c8:	882a      	ldrh	r2, [r5, #0]
 800b7ca:	b11a      	cbz	r2, 800b7d4 <uip_process+0x9ac>
          uip_flags |= UIP_NEWDATA;
 800b7cc:	f043 0302 	orr.w	r3, r3, #2
 800b7d0:	4a65      	ldr	r2, [pc, #404]	; (800b968 <uip_process+0xb40>)
 800b7d2:	7013      	strb	r3, [r2, #0]
        UIP_APPCALL();
 800b7d4:	f7fd f8b2 	bl	800893c <NetApp>
        uip_connr->len = 1;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	8223      	strh	r3, [r4, #16]
        uip_connr->tcpstateflags = UIP_LAST_ACK;
 800b7dc:	2308      	movs	r3, #8
 800b7de:	7663      	strb	r3, [r4, #25]
        uip_connr->nrtx = 0;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	76e3      	strb	r3, [r4, #27]
        BUF->flags = TCP_FIN | TCP_ACK;
 800b7e4:	4b61      	ldr	r3, [pc, #388]	; (800b96c <uip_process+0xb44>)
 800b7e6:	2211      	movs	r2, #17
 800b7e8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        goto tcp_send_nodata;
 800b7ec:	f7ff bba4 	b.w	800af38 <uip_process+0x110>
      if ((BUF->flags & TCP_URG) != 0)
 800b7f0:	f013 0f20 	tst.w	r3, #32
 800b7f4:	d00f      	beq.n	800b816 <uip_process+0x9ee>
        uip_appdata = ((char *)uip_appdata) + ((BUF->urgp[0] << 8) | BUF->urgp[1]);
 800b7f6:	485d      	ldr	r0, [pc, #372]	; (800b96c <uip_process+0xb44>)
 800b7f8:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800b7fc:	021a      	lsls	r2, r3, #8
 800b7fe:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800b802:	ea42 0603 	orr.w	r6, r2, r3
 800b806:	4d5f      	ldr	r5, [pc, #380]	; (800b984 <uip_process+0xb5c>)
 800b808:	6828      	ldr	r0, [r5, #0]
 800b80a:	4430      	add	r0, r6
 800b80c:	6028      	str	r0, [r5, #0]
        uip_len -= (BUF->urgp[0] << 8) | BUF->urgp[1];
 800b80e:	485a      	ldr	r0, [pc, #360]	; (800b978 <uip_process+0xb50>)
 800b810:	8802      	ldrh	r2, [r0, #0]
 800b812:	1b93      	subs	r3, r2, r6
 800b814:	8003      	strh	r3, [r0, #0]
      if (uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED))
 800b816:	4b58      	ldr	r3, [pc, #352]	; (800b978 <uip_process+0xb50>)
 800b818:	8818      	ldrh	r0, [r3, #0]
 800b81a:	b148      	cbz	r0, 800b830 <uip_process+0xa08>
 800b81c:	f011 0f10 	tst.w	r1, #16
 800b820:	d106      	bne.n	800b830 <uip_process+0xa08>
        uip_flags |= UIP_NEWDATA;
 800b822:	4a51      	ldr	r2, [pc, #324]	; (800b968 <uip_process+0xb40>)
 800b824:	7813      	ldrb	r3, [r2, #0]
 800b826:	f043 0302 	orr.w	r3, r3, #2
 800b82a:	7013      	strb	r3, [r2, #0]
        uip_add_rcv_nxt(uip_len);
 800b82c:	f7ff fa52 	bl	800acd4 <uip_add_rcv_nxt>
      tmp16 = ((u16_t)BUF->wnd[0] << 8) + (u16_t)BUF->wnd[1];
 800b830:	4b4e      	ldr	r3, [pc, #312]	; (800b96c <uip_process+0xb44>)
 800b832:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b836:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b83a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b83e:	b29b      	uxth	r3, r3
 800b840:	4a4c      	ldr	r2, [pc, #304]	; (800b974 <uip_process+0xb4c>)
 800b842:	8013      	strh	r3, [r2, #0]
      if (tmp16 > uip_connr->initialmss ||
 800b844:	8aa2      	ldrh	r2, [r4, #20]
 800b846:	4293      	cmp	r3, r2
 800b848:	d800      	bhi.n	800b84c <uip_process+0xa24>
 800b84a:	b90b      	cbnz	r3, 800b850 <uip_process+0xa28>
        tmp16 = uip_connr->initialmss;
 800b84c:	4b49      	ldr	r3, [pc, #292]	; (800b974 <uip_process+0xb4c>)
 800b84e:	801a      	strh	r2, [r3, #0]
      uip_connr->mss = tmp16;
 800b850:	4b48      	ldr	r3, [pc, #288]	; (800b974 <uip_process+0xb4c>)
 800b852:	881b      	ldrh	r3, [r3, #0]
 800b854:	8263      	strh	r3, [r4, #18]
      if (uip_flags & (UIP_NEWDATA | UIP_ACKDATA))
 800b856:	4b44      	ldr	r3, [pc, #272]	; (800b968 <uip_process+0xb40>)
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	f013 0f03 	tst.w	r3, #3
 800b85e:	f43f ab4f 	beq.w	800af00 <uip_process+0xd8>
        uip_slen = 0;
 800b862:	4b46      	ldr	r3, [pc, #280]	; (800b97c <uip_process+0xb54>)
 800b864:	2200      	movs	r2, #0
 800b866:	801a      	strh	r2, [r3, #0]
        UIP_APPCALL();
 800b868:	f7fd f868 	bl	800893c <NetApp>
 800b86c:	f7ff bb56 	b.w	800af1c <uip_process+0xf4>
        if (uip_flags & UIP_CLOSE)
 800b870:	f013 0f10 	tst.w	r3, #16
 800b874:	d00d      	beq.n	800b892 <uip_process+0xa6a>
          uip_slen = 0;
 800b876:	2300      	movs	r3, #0
 800b878:	4a40      	ldr	r2, [pc, #256]	; (800b97c <uip_process+0xb54>)
 800b87a:	8013      	strh	r3, [r2, #0]
          uip_connr->len = 1;
 800b87c:	2201      	movs	r2, #1
 800b87e:	8222      	strh	r2, [r4, #16]
          uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
 800b880:	2204      	movs	r2, #4
 800b882:	7662      	strb	r2, [r4, #25]
          uip_connr->nrtx = 0;
 800b884:	76e3      	strb	r3, [r4, #27]
          BUF->flags = TCP_FIN | TCP_ACK;
 800b886:	4b39      	ldr	r3, [pc, #228]	; (800b96c <uip_process+0xb44>)
 800b888:	2211      	movs	r2, #17
 800b88a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          goto tcp_send_nodata;
 800b88e:	f7ff bb53 	b.w	800af38 <uip_process+0x110>
        if (uip_slen > 0)
 800b892:	4a3a      	ldr	r2, [pc, #232]	; (800b97c <uip_process+0xb54>)
 800b894:	8812      	ldrh	r2, [r2, #0]
 800b896:	b172      	cbz	r2, 800b8b6 <uip_process+0xa8e>
          if ((uip_flags & UIP_ACKDATA) != 0)
 800b898:	f013 0f01 	tst.w	r3, #1
 800b89c:	d001      	beq.n	800b8a2 <uip_process+0xa7a>
            uip_connr->len = 0;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	8223      	strh	r3, [r4, #16]
          if (uip_connr->len == 0)
 800b8a2:	8a23      	ldrh	r3, [r4, #16]
 800b8a4:	b9db      	cbnz	r3, 800b8de <uip_process+0xab6>
            if (uip_slen > uip_connr->mss)
 800b8a6:	8a63      	ldrh	r3, [r4, #18]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d901      	bls.n	800b8b0 <uip_process+0xa88>
              uip_slen = uip_connr->mss;
 800b8ac:	4a33      	ldr	r2, [pc, #204]	; (800b97c <uip_process+0xb54>)
 800b8ae:	8013      	strh	r3, [r2, #0]
            uip_connr->len = uip_slen;
 800b8b0:	4b32      	ldr	r3, [pc, #200]	; (800b97c <uip_process+0xb54>)
 800b8b2:	881b      	ldrh	r3, [r3, #0]
 800b8b4:	8223      	strh	r3, [r4, #16]
        uip_connr->nrtx = 0;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	76e3      	strb	r3, [r4, #27]
        uip_appdata = uip_sappdata;
 800b8ba:	4b33      	ldr	r3, [pc, #204]	; (800b988 <uip_process+0xb60>)
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	4b31      	ldr	r3, [pc, #196]	; (800b984 <uip_process+0xb5c>)
 800b8c0:	601a      	str	r2, [r3, #0]
        if (uip_slen > 0 && uip_connr->len > 0)
 800b8c2:	4b2e      	ldr	r3, [pc, #184]	; (800b97c <uip_process+0xb54>)
 800b8c4:	881b      	ldrh	r3, [r3, #0]
 800b8c6:	b16b      	cbz	r3, 800b8e4 <uip_process+0xabc>
 800b8c8:	8a23      	ldrh	r3, [r4, #16]
 800b8ca:	b15b      	cbz	r3, 800b8e4 <uip_process+0xabc>
          uip_len = uip_connr->len + UIP_TCPIP_HLEN;
 800b8cc:	3328      	adds	r3, #40	; 0x28
 800b8ce:	4a2a      	ldr	r2, [pc, #168]	; (800b978 <uip_process+0xb50>)
 800b8d0:	8013      	strh	r3, [r2, #0]
          BUF->flags = TCP_ACK | TCP_PSH;
 800b8d2:	4b26      	ldr	r3, [pc, #152]	; (800b96c <uip_process+0xb44>)
 800b8d4:	2218      	movs	r2, #24
 800b8d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          goto tcp_send_noopts;
 800b8da:	f7ff bb30 	b.w	800af3e <uip_process+0x116>
            uip_slen = uip_connr->len;
 800b8de:	4a27      	ldr	r2, [pc, #156]	; (800b97c <uip_process+0xb54>)
 800b8e0:	8013      	strh	r3, [r2, #0]
 800b8e2:	e7e8      	b.n	800b8b6 <uip_process+0xa8e>
        if (uip_flags & UIP_NEWDATA)
 800b8e4:	4b20      	ldr	r3, [pc, #128]	; (800b968 <uip_process+0xb40>)
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	f013 0f02 	tst.w	r3, #2
 800b8ec:	f43f ab08 	beq.w	800af00 <uip_process+0xd8>
          uip_len = UIP_TCPIP_HLEN;
 800b8f0:	4b21      	ldr	r3, [pc, #132]	; (800b978 <uip_process+0xb50>)
 800b8f2:	2228      	movs	r2, #40	; 0x28
 800b8f4:	801a      	strh	r2, [r3, #0]
          BUF->flags = TCP_ACK;
 800b8f6:	4b1d      	ldr	r3, [pc, #116]	; (800b96c <uip_process+0xb44>)
 800b8f8:	2210      	movs	r2, #16
 800b8fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          goto tcp_send_noopts;
 800b8fe:	f7ff bb1e 	b.w	800af3e <uip_process+0x116>
      if (uip_flags & UIP_ACKDATA)
 800b902:	4b19      	ldr	r3, [pc, #100]	; (800b968 <uip_process+0xb40>)
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	f013 0f01 	tst.w	r3, #1
 800b90a:	f43f aaf9 	beq.w	800af00 <uip_process+0xd8>
        uip_connr->tcpstateflags = UIP_CLOSED;
 800b90e:	2300      	movs	r3, #0
 800b910:	7663      	strb	r3, [r4, #25]
        uip_flags = UIP_CLOSE;
 800b912:	4b15      	ldr	r3, [pc, #84]	; (800b968 <uip_process+0xb40>)
 800b914:	2210      	movs	r2, #16
 800b916:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
 800b918:	f7fd f810 	bl	800893c <NetApp>
 800b91c:	f7ff baf0 	b.w	800af00 <uip_process+0xd8>
      if (uip_len > 0)
 800b920:	4b15      	ldr	r3, [pc, #84]	; (800b978 <uip_process+0xb50>)
 800b922:	8818      	ldrh	r0, [r3, #0]
 800b924:	b108      	cbz	r0, 800b92a <uip_process+0xb02>
        uip_add_rcv_nxt(uip_len);
 800b926:	f7ff f9d5 	bl	800acd4 <uip_add_rcv_nxt>
      if (BUF->flags & TCP_FIN)
 800b92a:	4b10      	ldr	r3, [pc, #64]	; (800b96c <uip_process+0xb44>)
 800b92c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b930:	f013 0f01 	tst.w	r3, #1
 800b934:	d02d      	beq.n	800b992 <uip_process+0xb6a>
        if (uip_flags & UIP_ACKDATA)
 800b936:	4b0c      	ldr	r3, [pc, #48]	; (800b968 <uip_process+0xb40>)
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	f013 0f01 	tst.w	r3, #1
 800b93e:	d025      	beq.n	800b98c <uip_process+0xb64>
          uip_connr->tcpstateflags = UIP_TIME_WAIT;
 800b940:	2307      	movs	r3, #7
 800b942:	7663      	strb	r3, [r4, #25]
          uip_connr->timer = 0;
 800b944:	2300      	movs	r3, #0
 800b946:	76a3      	strb	r3, [r4, #26]
          uip_connr->len = 0;
 800b948:	8223      	strh	r3, [r4, #16]
        uip_add_rcv_nxt(1);
 800b94a:	2001      	movs	r0, #1
 800b94c:	f7ff f9c2 	bl	800acd4 <uip_add_rcv_nxt>
        uip_flags = UIP_CLOSE;
 800b950:	4b05      	ldr	r3, [pc, #20]	; (800b968 <uip_process+0xb40>)
 800b952:	2210      	movs	r2, #16
 800b954:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
 800b956:	f7fc fff1 	bl	800893c <NetApp>
  BUF->flags = TCP_ACK;
 800b95a:	4b04      	ldr	r3, [pc, #16]	; (800b96c <uip_process+0xb44>)
 800b95c:	2210      	movs	r2, #16
 800b95e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800b962:	f7ff bae9 	b.w	800af38 <uip_process+0x110>
 800b966:	bf00      	nop
 800b968:	200032ec 	.word	0x200032ec
 800b96c:	2000332c 	.word	0x2000332c
 800b970:	20000174 	.word	0x20000174
 800b974:	2000017e 	.word	0x2000017e
 800b978:	200032e0 	.word	0x200032e0
 800b97c:	2000396e 	.word	0x2000396e
 800b980:	200032f8 	.word	0x200032f8
 800b984:	200032f4 	.word	0x200032f4
 800b988:	200032e4 	.word	0x200032e4
          uip_connr->tcpstateflags = UIP_CLOSING;
 800b98c:	2306      	movs	r3, #6
 800b98e:	7663      	strb	r3, [r4, #25]
 800b990:	e7db      	b.n	800b94a <uip_process+0xb22>
      else if (uip_flags & UIP_ACKDATA)
 800b992:	4b22      	ldr	r3, [pc, #136]	; (800ba1c <uip_process+0xbf4>)
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	f013 0f01 	tst.w	r3, #1
 800b99a:	d005      	beq.n	800b9a8 <uip_process+0xb80>
        uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
 800b99c:	2305      	movs	r3, #5
 800b99e:	7663      	strb	r3, [r4, #25]
        uip_connr->len = 0;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	8223      	strh	r3, [r4, #16]
        goto drop;
 800b9a4:	f7ff baac 	b.w	800af00 <uip_process+0xd8>
      if (uip_len > 0)
 800b9a8:	4b1d      	ldr	r3, [pc, #116]	; (800ba20 <uip_process+0xbf8>)
 800b9aa:	881b      	ldrh	r3, [r3, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1d4      	bne.n	800b95a <uip_process+0xb32>
 800b9b0:	f7ff baa6 	b.w	800af00 <uip_process+0xd8>
      if (uip_len > 0)
 800b9b4:	4b1a      	ldr	r3, [pc, #104]	; (800ba20 <uip_process+0xbf8>)
 800b9b6:	8818      	ldrh	r0, [r3, #0]
 800b9b8:	b108      	cbz	r0, 800b9be <uip_process+0xb96>
        uip_add_rcv_nxt(uip_len);
 800b9ba:	f7ff f98b 	bl	800acd4 <uip_add_rcv_nxt>
      if (BUF->flags & TCP_FIN)
 800b9be:	4b19      	ldr	r3, [pc, #100]	; (800ba24 <uip_process+0xbfc>)
 800b9c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b9c4:	f013 0f01 	tst.w	r3, #1
 800b9c8:	d00c      	beq.n	800b9e4 <uip_process+0xbbc>
        uip_connr->tcpstateflags = UIP_TIME_WAIT;
 800b9ca:	2307      	movs	r3, #7
 800b9cc:	7663      	strb	r3, [r4, #25]
        uip_connr->timer = 0;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	76a3      	strb	r3, [r4, #26]
        uip_add_rcv_nxt(1);
 800b9d2:	2001      	movs	r0, #1
 800b9d4:	f7ff f97e 	bl	800acd4 <uip_add_rcv_nxt>
        uip_flags = UIP_CLOSE;
 800b9d8:	4b10      	ldr	r3, [pc, #64]	; (800ba1c <uip_process+0xbf4>)
 800b9da:	2210      	movs	r2, #16
 800b9dc:	701a      	strb	r2, [r3, #0]
        UIP_APPCALL();
 800b9de:	f7fc ffad 	bl	800893c <NetApp>
        goto tcp_send_ack;
 800b9e2:	e7ba      	b.n	800b95a <uip_process+0xb32>
      if (uip_len > 0)
 800b9e4:	4b0e      	ldr	r3, [pc, #56]	; (800ba20 <uip_process+0xbf8>)
 800b9e6:	881b      	ldrh	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d1b6      	bne.n	800b95a <uip_process+0xb32>
 800b9ec:	f7ff ba88 	b.w	800af00 <uip_process+0xd8>
      if (uip_flags & UIP_ACKDATA)
 800b9f0:	4b0a      	ldr	r3, [pc, #40]	; (800ba1c <uip_process+0xbf4>)
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	f013 0f01 	tst.w	r3, #1
 800b9f8:	f43f aa82 	beq.w	800af00 <uip_process+0xd8>
        uip_connr->tcpstateflags = UIP_TIME_WAIT;
 800b9fc:	2307      	movs	r3, #7
 800b9fe:	7663      	strb	r3, [r4, #25]
        uip_connr->timer = 0;
 800ba00:	2300      	movs	r3, #0
 800ba02:	76a3      	strb	r3, [r4, #26]
 800ba04:	f7ff ba7c 	b.w	800af00 <uip_process+0xd8>
    BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
 800ba08:	4b06      	ldr	r3, [pc, #24]	; (800ba24 <uip_process+0xbfc>)
 800ba0a:	2206      	movs	r2, #6
 800ba0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
 800ba10:	220a      	movs	r2, #10
 800ba12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ba16:	f7ff bac9 	b.w	800afac <uip_process+0x184>
 800ba1a:	bf00      	nop
 800ba1c:	200032ec 	.word	0x200032ec
 800ba20:	200032e0 	.word	0x200032e0
 800ba24:	2000332c 	.word	0x2000332c

0800ba28 <uip_udp_new>:
{
 800ba28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2a:	4605      	mov	r5, r0
 800ba2c:	460e      	mov	r6, r1
  ++lastport;
 800ba2e:	4a23      	ldr	r2, [pc, #140]	; (800babc <uip_udp_new+0x94>)
 800ba30:	8813      	ldrh	r3, [r2, #0]
 800ba32:	3301      	adds	r3, #1
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	8013      	strh	r3, [r2, #0]
  if (lastport >= 32000)
 800ba38:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800ba3c:	d303      	bcc.n	800ba46 <uip_udp_new+0x1e>
    lastport = 4096;
 800ba3e:	4613      	mov	r3, r2
 800ba40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ba44:	801a      	strh	r2, [r3, #0]
  for (c = 0; c < UIP_UDP_CONNS; ++c)
 800ba46:	4b1e      	ldr	r3, [pc, #120]	; (800bac0 <uip_udp_new+0x98>)
 800ba48:	2200      	movs	r2, #0
 800ba4a:	701a      	strb	r2, [r3, #0]
 800ba4c:	4b1c      	ldr	r3, [pc, #112]	; (800bac0 <uip_udp_new+0x98>)
 800ba4e:	781c      	ldrb	r4, [r3, #0]
 800ba50:	b96c      	cbnz	r4, 800ba6e <uip_udp_new+0x46>
    if (uip_udp_conns[c].lport == htons(lastport))
 800ba52:	4b1c      	ldr	r3, [pc, #112]	; (800bac4 <uip_udp_new+0x9c>)
 800ba54:	eb03 1384 	add.w	r3, r3, r4, lsl #6
 800ba58:	889f      	ldrh	r7, [r3, #4]
 800ba5a:	4b18      	ldr	r3, [pc, #96]	; (800babc <uip_udp_new+0x94>)
 800ba5c:	8818      	ldrh	r0, [r3, #0]
 800ba5e:	f7ff f9a9 	bl	800adb4 <htons>
 800ba62:	4287      	cmp	r7, r0
 800ba64:	d0e3      	beq.n	800ba2e <uip_udp_new+0x6>
  for (c = 0; c < UIP_UDP_CONNS; ++c)
 800ba66:	3401      	adds	r4, #1
 800ba68:	4b15      	ldr	r3, [pc, #84]	; (800bac0 <uip_udp_new+0x98>)
 800ba6a:	701c      	strb	r4, [r3, #0]
 800ba6c:	e7ee      	b.n	800ba4c <uip_udp_new+0x24>
  for (c = 0; c < UIP_UDP_CONNS; ++c)
 800ba6e:	2200      	movs	r2, #0
 800ba70:	701a      	strb	r2, [r3, #0]
 800ba72:	4b13      	ldr	r3, [pc, #76]	; (800bac0 <uip_udp_new+0x98>)
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	b963      	cbnz	r3, 800ba92 <uip_udp_new+0x6a>
    if (uip_udp_conns[c].lport == 0)
 800ba78:	4a12      	ldr	r2, [pc, #72]	; (800bac4 <uip_udp_new+0x9c>)
 800ba7a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
 800ba7e:	8892      	ldrh	r2, [r2, #4]
 800ba80:	b11a      	cbz	r2, 800ba8a <uip_udp_new+0x62>
  for (c = 0; c < UIP_UDP_CONNS; ++c)
 800ba82:	3301      	adds	r3, #1
 800ba84:	4a0e      	ldr	r2, [pc, #56]	; (800bac0 <uip_udp_new+0x98>)
 800ba86:	7013      	strb	r3, [r2, #0]
 800ba88:	e7f3      	b.n	800ba72 <uip_udp_new+0x4a>
      conn = &uip_udp_conns[c];
 800ba8a:	480e      	ldr	r0, [pc, #56]	; (800bac4 <uip_udp_new+0x9c>)
 800ba8c:	eb00 1083 	add.w	r0, r0, r3, lsl #6
      break;
 800ba90:	e000      	b.n	800ba94 <uip_udp_new+0x6c>
  conn = 0;
 800ba92:	2000      	movs	r0, #0
  if (conn == 0)
 800ba94:	b168      	cbz	r0, 800bab2 <uip_udp_new+0x8a>
  conn->lport = HTONS(lastport);
 800ba96:	4b09      	ldr	r3, [pc, #36]	; (800babc <uip_udp_new+0x94>)
 800ba98:	881a      	ldrh	r2, [r3, #0]
 800ba9a:	0a13      	lsrs	r3, r2, #8
 800ba9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800baa0:	8083      	strh	r3, [r0, #4]
  conn->rport = rport;
 800baa2:	80c6      	strh	r6, [r0, #6]
  if (ripaddr == NULL)
 800baa4:	b135      	cbz	r5, 800bab4 <uip_udp_new+0x8c>
    uip_ipaddr_copy(&conn->ripaddr, ripaddr);
 800baa6:	882b      	ldrh	r3, [r5, #0]
 800baa8:	8003      	strh	r3, [r0, #0]
 800baaa:	886b      	ldrh	r3, [r5, #2]
 800baac:	8043      	strh	r3, [r0, #2]
  conn->ttl = UIP_TTL;
 800baae:	2340      	movs	r3, #64	; 0x40
 800bab0:	7203      	strb	r3, [r0, #8]
}
 800bab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset(conn->ripaddr, 0, sizeof(uip_ipaddr_t));
 800bab4:	2300      	movs	r3, #0
 800bab6:	6003      	str	r3, [r0, #0]
 800bab8:	e7f9      	b.n	800baae <uip_udp_new+0x86>
 800baba:	bf00      	nop
 800babc:	2000017c 	.word	0x2000017c
 800bac0:	20000174 	.word	0x20000174
 800bac4:	20003970 	.word	0x20003970

0800bac8 <uip_send>:
/*---------------------------------------------------------------------------*/
void
uip_send(const void *data, int len)
{
  if (len > 0)
 800bac8:	2900      	cmp	r1, #0
 800baca:	dd0c      	ble.n	800bae6 <uip_send+0x1e>
{
 800bacc:	b508      	push	{r3, lr}
  {
    uip_slen = len;
 800bace:	b28a      	uxth	r2, r1
 800bad0:	4b05      	ldr	r3, [pc, #20]	; (800bae8 <uip_send+0x20>)
 800bad2:	801a      	strh	r2, [r3, #0]
    if (data != uip_sappdata)
 800bad4:	4b05      	ldr	r3, [pc, #20]	; (800baec <uip_send+0x24>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4283      	cmp	r3, r0
 800bada:	d003      	beq.n	800bae4 <uip_send+0x1c>
 800badc:	4601      	mov	r1, r0
    {
      memcpy(uip_sappdata, (data), uip_slen);
 800bade:	4618      	mov	r0, r3
 800bae0:	f000 fa1b 	bl	800bf1a <memcpy>
    }
  }
}
 800bae4:	bd08      	pop	{r3, pc}
 800bae6:	4770      	bx	lr
 800bae8:	2000396e 	.word	0x2000396e
 800baec:	200032e4 	.word	0x200032e4

0800baf0 <uip_arp_update>:

}
/*-----------------------------------------------------------------------------------*/
static void
uip_arp_update(u16_t *ipaddr, struct uip_eth_addr *ethaddr)
{
 800baf0:	b4f0      	push	{r4, r5, r6, r7}
  register struct arp_entry *tabptr = arp_table;
  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 800baf2:	4b3a      	ldr	r3, [pc, #232]	; (800bbdc <uip_arp_update+0xec>)
 800baf4:	2200      	movs	r2, #0
 800baf6:	701a      	strb	r2, [r3, #0]
  register struct arp_entry *tabptr = arp_table;
 800baf8:	4e39      	ldr	r6, [pc, #228]	; (800bbe0 <uip_arp_update+0xf0>)
  for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 800bafa:	e002      	b.n	800bb02 <uip_arp_update+0x12>
 800bafc:	3301      	adds	r3, #1
 800bafe:	4a37      	ldr	r2, [pc, #220]	; (800bbdc <uip_arp_update+0xec>)
 800bb00:	7013      	strb	r3, [r2, #0]
 800bb02:	4b36      	ldr	r3, [pc, #216]	; (800bbdc <uip_arp_update+0xec>)
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	2b07      	cmp	r3, #7
 800bb08:	d818      	bhi.n	800bb3c <uip_arp_update+0x4c>
  {

    tabptr = &arp_table[i];
 800bb0a:	4d35      	ldr	r5, [pc, #212]	; (800bbe0 <uip_arp_update+0xf0>)
 800bb0c:	005a      	lsls	r2, r3, #1
 800bb0e:	441a      	add	r2, r3
 800bb10:	0094      	lsls	r4, r2, #2
 800bb12:	192e      	adds	r6, r5, r4
    /* Only check those entries that are actually in use. */
    if (tabptr->ipaddr[0] != 0 &&
 800bb14:	5b2a      	ldrh	r2, [r5, r4]
 800bb16:	2a00      	cmp	r2, #0
 800bb18:	d0f0      	beq.n	800bafc <uip_arp_update+0xc>
        tabptr->ipaddr[1] != 0)
 800bb1a:	8874      	ldrh	r4, [r6, #2]
    if (tabptr->ipaddr[0] != 0 &&
 800bb1c:	2c00      	cmp	r4, #0
 800bb1e:	d0ed      	beq.n	800bafc <uip_arp_update+0xc>
    {

      /* Check if the source IP address of the incoming packet matches
         the IP address in this ARP table entry. */
      if (ipaddr[0] == tabptr->ipaddr[0] &&
 800bb20:	8805      	ldrh	r5, [r0, #0]
 800bb22:	42aa      	cmp	r2, r5
 800bb24:	d1ea      	bne.n	800bafc <uip_arp_update+0xc>
          ipaddr[1] == tabptr->ipaddr[1])
 800bb26:	8842      	ldrh	r2, [r0, #2]
      if (ipaddr[0] == tabptr->ipaddr[0] &&
 800bb28:	4294      	cmp	r4, r2
 800bb2a:	d1e7      	bne.n	800bafc <uip_arp_update+0xc>
      {

        /* An old entry found, update this and return. */
        memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 800bb2c:	680c      	ldr	r4, [r1, #0]
 800bb2e:	6074      	str	r4, [r6, #4]
 800bb30:	8889      	ldrh	r1, [r1, #4]
 800bb32:	8131      	strh	r1, [r6, #8]
        tabptr->time = arptime;
 800bb34:	4b2b      	ldr	r3, [pc, #172]	; (800bbe4 <uip_arp_update+0xf4>)
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	72b3      	strb	r3, [r6, #10]

        return;
 800bb3a:	e022      	b.n	800bb82 <uip_arp_update+0x92>

  /* If we get here, no existing ARP table entry was found, so we
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 800bb3c:	4b27      	ldr	r3, [pc, #156]	; (800bbdc <uip_arp_update+0xec>)
 800bb3e:	2200      	movs	r2, #0
 800bb40:	701a      	strb	r2, [r3, #0]
 800bb42:	e002      	b.n	800bb4a <uip_arp_update+0x5a>
 800bb44:	3301      	adds	r3, #1
 800bb46:	4a25      	ldr	r2, [pc, #148]	; (800bbdc <uip_arp_update+0xec>)
 800bb48:	7013      	strb	r3, [r2, #0]
 800bb4a:	4b24      	ldr	r3, [pc, #144]	; (800bbdc <uip_arp_update+0xec>)
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	2b07      	cmp	r3, #7
 800bb50:	d80a      	bhi.n	800bb68 <uip_arp_update+0x78>
  {
    tabptr = &arp_table[i];
 800bb52:	4d23      	ldr	r5, [pc, #140]	; (800bbe0 <uip_arp_update+0xf0>)
 800bb54:	005a      	lsls	r2, r3, #1
 800bb56:	441a      	add	r2, r3
 800bb58:	0094      	lsls	r4, r2, #2
 800bb5a:	192e      	adds	r6, r5, r4
    if (tabptr->ipaddr[0] == 0 &&
 800bb5c:	5b2a      	ldrh	r2, [r5, r4]
 800bb5e:	2a00      	cmp	r2, #0
 800bb60:	d1f0      	bne.n	800bb44 <uip_arp_update+0x54>
        tabptr->ipaddr[1] == 0)
 800bb62:	8872      	ldrh	r2, [r6, #2]
    if (tabptr->ipaddr[0] == 0 &&
 800bb64:	2a00      	cmp	r2, #0
 800bb66:	d1ed      	bne.n	800bb44 <uip_arp_update+0x54>
    }
  }

  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if (i == UIP_ARPTAB_SIZE)
 800bb68:	2b08      	cmp	r3, #8
 800bb6a:	d00c      	beq.n	800bb86 <uip_arp_update+0x96>
    tabptr = &arp_table[i];
  }

  /* Now, i is the ARP table entry which we will fill with the new
     information. */
  memcpy(tabptr->ipaddr, ipaddr, 4);
 800bb6c:	6802      	ldr	r2, [r0, #0]
 800bb6e:	4633      	mov	r3, r6
 800bb70:	f843 2b04 	str.w	r2, [r3], #4
  memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 800bb74:	680a      	ldr	r2, [r1, #0]
 800bb76:	6072      	str	r2, [r6, #4]
 800bb78:	888a      	ldrh	r2, [r1, #4]
 800bb7a:	809a      	strh	r2, [r3, #4]
  tabptr->time = arptime;
 800bb7c:	4b19      	ldr	r3, [pc, #100]	; (800bbe4 <uip_arp_update+0xf4>)
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	72b3      	strb	r3, [r6, #10]
}
 800bb82:	bcf0      	pop	{r4, r5, r6, r7}
 800bb84:	4770      	bx	lr
    tmpage = 0;
 800bb86:	2300      	movs	r3, #0
 800bb88:	4a17      	ldr	r2, [pc, #92]	; (800bbe8 <uip_arp_update+0xf8>)
 800bb8a:	7013      	strb	r3, [r2, #0]
    c = 0;
 800bb8c:	4a17      	ldr	r2, [pc, #92]	; (800bbec <uip_arp_update+0xfc>)
 800bb8e:	7013      	strb	r3, [r2, #0]
    for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 800bb90:	4a12      	ldr	r2, [pc, #72]	; (800bbdc <uip_arp_update+0xec>)
 800bb92:	7013      	strb	r3, [r2, #0]
 800bb94:	e002      	b.n	800bb9c <uip_arp_update+0xac>
 800bb96:	3301      	adds	r3, #1
 800bb98:	4a10      	ldr	r2, [pc, #64]	; (800bbdc <uip_arp_update+0xec>)
 800bb9a:	7013      	strb	r3, [r2, #0]
 800bb9c:	4b0f      	ldr	r3, [pc, #60]	; (800bbdc <uip_arp_update+0xec>)
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	2b07      	cmp	r3, #7
 800bba2:	d811      	bhi.n	800bbc8 <uip_arp_update+0xd8>
      if (arptime - tabptr->time > tmpage)
 800bba4:	4a0f      	ldr	r2, [pc, #60]	; (800bbe4 <uip_arp_update+0xf4>)
 800bba6:	7814      	ldrb	r4, [r2, #0]
 800bba8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800bbac:	0095      	lsls	r5, r2, #2
 800bbae:	4a0c      	ldr	r2, [pc, #48]	; (800bbe0 <uip_arp_update+0xf0>)
 800bbb0:	442a      	add	r2, r5
 800bbb2:	7a92      	ldrb	r2, [r2, #10]
 800bbb4:	1aa6      	subs	r6, r4, r2
 800bbb6:	4d0c      	ldr	r5, [pc, #48]	; (800bbe8 <uip_arp_update+0xf8>)
 800bbb8:	782d      	ldrb	r5, [r5, #0]
 800bbba:	42ae      	cmp	r6, r5
 800bbbc:	ddeb      	ble.n	800bb96 <uip_arp_update+0xa6>
        tmpage = arptime - tabptr->time;
 800bbbe:	4a0a      	ldr	r2, [pc, #40]	; (800bbe8 <uip_arp_update+0xf8>)
 800bbc0:	7016      	strb	r6, [r2, #0]
        c = i;
 800bbc2:	4a0a      	ldr	r2, [pc, #40]	; (800bbec <uip_arp_update+0xfc>)
 800bbc4:	7013      	strb	r3, [r2, #0]
 800bbc6:	e7e6      	b.n	800bb96 <uip_arp_update+0xa6>
    i = c;
 800bbc8:	4b08      	ldr	r3, [pc, #32]	; (800bbec <uip_arp_update+0xfc>)
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	4a03      	ldr	r2, [pc, #12]	; (800bbdc <uip_arp_update+0xec>)
 800bbce:	7013      	strb	r3, [r2, #0]
    tabptr = &arp_table[i];
 800bbd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bbd4:	009a      	lsls	r2, r3, #2
 800bbd6:	4e02      	ldr	r6, [pc, #8]	; (800bbe0 <uip_arp_update+0xf0>)
 800bbd8:	4416      	add	r6, r2
 800bbda:	e7c7      	b.n	800bb6c <uip_arp_update+0x7c>
 800bbdc:	200001ea 	.word	0x200001ea
 800bbe0:	20000188 	.word	0x20000188
 800bbe4:	200001e8 	.word	0x200001e8
 800bbe8:	200001f0 	.word	0x200001f0
 800bbec:	200001e9 	.word	0x200001e9

0800bbf0 <uip_arp_timer>:
{
 800bbf0:	b410      	push	{r4}
  ++arptime;
 800bbf2:	4b16      	ldr	r3, [pc, #88]	; (800bc4c <uip_arp_timer+0x5c>)
 800bbf4:	781c      	ldrb	r4, [r3, #0]
 800bbf6:	3401      	adds	r4, #1
 800bbf8:	b2e4      	uxtb	r4, r4
 800bbfa:	701c      	strb	r4, [r3, #0]
  for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 800bbfc:	4b14      	ldr	r3, [pc, #80]	; (800bc50 <uip_arp_timer+0x60>)
 800bbfe:	2200      	movs	r2, #0
 800bc00:	701a      	strb	r2, [r3, #0]
 800bc02:	e002      	b.n	800bc0a <uip_arp_timer+0x1a>
 800bc04:	3301      	adds	r3, #1
 800bc06:	4a12      	ldr	r2, [pc, #72]	; (800bc50 <uip_arp_timer+0x60>)
 800bc08:	7013      	strb	r3, [r2, #0]
 800bc0a:	4b11      	ldr	r3, [pc, #68]	; (800bc50 <uip_arp_timer+0x60>)
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	2b07      	cmp	r3, #7
 800bc10:	d818      	bhi.n	800bc44 <uip_arp_timer+0x54>
    if ((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
 800bc12:	4810      	ldr	r0, [pc, #64]	; (800bc54 <uip_arp_timer+0x64>)
 800bc14:	005a      	lsls	r2, r3, #1
 800bc16:	441a      	add	r2, r3
 800bc18:	0091      	lsls	r1, r2, #2
 800bc1a:	1842      	adds	r2, r0, r1
 800bc1c:	5a41      	ldrh	r1, [r0, r1]
 800bc1e:	8852      	ldrh	r2, [r2, #2]
 800bc20:	430a      	orrs	r2, r1
 800bc22:	d0ef      	beq.n	800bc04 <uip_arp_timer+0x14>
        arptime - tabptr->time >= UIP_ARP_MAXAGE)
 800bc24:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800bc28:	0091      	lsls	r1, r2, #2
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	440a      	add	r2, r1
 800bc2e:	7a92      	ldrb	r2, [r2, #10]
 800bc30:	1aa2      	subs	r2, r4, r2
    if ((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
 800bc32:	2a77      	cmp	r2, #119	; 0x77
 800bc34:	dde6      	ble.n	800bc04 <uip_arp_timer+0x14>
      memset(tabptr->ipaddr, 0, 4);
 800bc36:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800bc3a:	008a      	lsls	r2, r1, #2
 800bc3c:	4601      	mov	r1, r0
 800bc3e:	2000      	movs	r0, #0
 800bc40:	5088      	str	r0, [r1, r2]
 800bc42:	e7df      	b.n	800bc04 <uip_arp_timer+0x14>
}
 800bc44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	200001e8 	.word	0x200001e8
 800bc50:	200001ea 	.word	0x200001ea
 800bc54:	20000188 	.word	0x20000188

0800bc58 <uip_arp_arpin>:
/*-----------------------------------------------------------------------------------*/
void
uip_arp_arpin(void)
{

  if (uip_len < sizeof(struct arp_hdr))
 800bc58:	4b32      	ldr	r3, [pc, #200]	; (800bd24 <uip_arp_arpin+0xcc>)
 800bc5a:	881b      	ldrh	r3, [r3, #0]
 800bc5c:	2b29      	cmp	r3, #41	; 0x29
 800bc5e:	d90c      	bls.n	800bc7a <uip_arp_arpin+0x22>
{
 800bc60:	b510      	push	{r4, lr}
  {
    uip_len = 0;
    return;
  }
  uip_len = 0;
 800bc62:	4b30      	ldr	r3, [pc, #192]	; (800bd24 <uip_arp_arpin+0xcc>)
 800bc64:	2200      	movs	r2, #0
 800bc66:	801a      	strh	r2, [r3, #0]

  switch (BUF->opcode)
 800bc68:	4b2f      	ldr	r3, [pc, #188]	; (800bd28 <uip_arp_arpin+0xd0>)
 800bc6a:	8a9b      	ldrh	r3, [r3, #20]
 800bc6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc70:	d007      	beq.n	800bc82 <uip_arp_arpin+0x2a>
 800bc72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc76:	d043      	beq.n	800bd00 <uip_arp_arpin+0xa8>
      }
      break;
  }

  return;
}
 800bc78:	bd10      	pop	{r4, pc}
    uip_len = 0;
 800bc7a:	4b2a      	ldr	r3, [pc, #168]	; (800bd24 <uip_arp_arpin+0xcc>)
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	801a      	strh	r2, [r3, #0]
 800bc80:	4770      	bx	lr
      if (uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr))
 800bc82:	4b29      	ldr	r3, [pc, #164]	; (800bd28 <uip_arp_arpin+0xd0>)
 800bc84:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800bc86:	4b29      	ldr	r3, [pc, #164]	; (800bd2c <uip_arp_arpin+0xd4>)
 800bc88:	881b      	ldrh	r3, [r3, #0]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d1f4      	bne.n	800bc78 <uip_arp_arpin+0x20>
 800bc8e:	4b26      	ldr	r3, [pc, #152]	; (800bd28 <uip_arp_arpin+0xd0>)
 800bc90:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bc92:	4b26      	ldr	r3, [pc, #152]	; (800bd2c <uip_arp_arpin+0xd4>)
 800bc94:	885b      	ldrh	r3, [r3, #2]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d1ee      	bne.n	800bc78 <uip_arp_arpin+0x20>
        uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 800bc9a:	4c25      	ldr	r4, [pc, #148]	; (800bd30 <uip_arp_arpin+0xd8>)
 800bc9c:	4621      	mov	r1, r4
 800bc9e:	1da0      	adds	r0, r4, #6
 800bca0:	f7ff ff26 	bl	800baf0 <uip_arp_update>
        BUF->opcode = HTONS(2);
 800bca4:	2200      	movs	r2, #0
 800bca6:	f804 2c02 	strb.w	r2, [r4, #-2]
 800bcaa:	2202      	movs	r2, #2
 800bcac:	f804 2c01 	strb.w	r2, [r4, #-1]
        memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
 800bcb0:	6821      	ldr	r1, [r4, #0]
 800bcb2:	f8c4 100a 	str.w	r1, [r4, #10]
 800bcb6:	88a1      	ldrh	r1, [r4, #4]
 800bcb8:	81e1      	strh	r1, [r4, #14]
        memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 800bcba:	491e      	ldr	r1, [pc, #120]	; (800bd34 <uip_arp_arpin+0xdc>)
 800bcbc:	6808      	ldr	r0, [r1, #0]
 800bcbe:	6020      	str	r0, [r4, #0]
 800bcc0:	8889      	ldrh	r1, [r1, #4]
 800bcc2:	80a1      	strh	r1, [r4, #4]
        memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 800bcc4:	f844 0c10 	str.w	r0, [r4, #-16]
 800bcc8:	f824 1c0c 	strh.w	r1, [r4, #-12]
        memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
 800bccc:	f8d4 100a 	ldr.w	r1, [r4, #10]
 800bcd0:	f844 1c16 	str.w	r1, [r4, #-22]
 800bcd4:	89e2      	ldrh	r2, [r4, #14]
 800bcd6:	f824 2c12 	strh.w	r2, [r4, #-18]
        BUF->dipaddr[0] = BUF->sipaddr[0];
 800bcda:	88e2      	ldrh	r2, [r4, #6]
 800bcdc:	8222      	strh	r2, [r4, #16]
        BUF->dipaddr[1] = BUF->sipaddr[1];
 800bcde:	8922      	ldrh	r2, [r4, #8]
 800bce0:	8262      	strh	r2, [r4, #18]
        BUF->sipaddr[0] = uip_hostaddr[0];
 800bce2:	4a12      	ldr	r2, [pc, #72]	; (800bd2c <uip_arp_arpin+0xd4>)
 800bce4:	8811      	ldrh	r1, [r2, #0]
 800bce6:	80e1      	strh	r1, [r4, #6]
        BUF->sipaddr[1] = uip_hostaddr[1];
 800bce8:	8852      	ldrh	r2, [r2, #2]
 800bcea:	8122      	strh	r2, [r4, #8]
        BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 800bcec:	2208      	movs	r2, #8
 800bcee:	f804 2c0a 	strb.w	r2, [r4, #-10]
 800bcf2:	2206      	movs	r2, #6
 800bcf4:	f804 2c09 	strb.w	r2, [r4, #-9]
        uip_len = sizeof(struct arp_hdr);
 800bcf8:	4b0a      	ldr	r3, [pc, #40]	; (800bd24 <uip_arp_arpin+0xcc>)
 800bcfa:	222a      	movs	r2, #42	; 0x2a
 800bcfc:	801a      	strh	r2, [r3, #0]
 800bcfe:	e7bb      	b.n	800bc78 <uip_arp_arpin+0x20>
      if (uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr))
 800bd00:	4b09      	ldr	r3, [pc, #36]	; (800bd28 <uip_arp_arpin+0xd0>)
 800bd02:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800bd04:	4b09      	ldr	r3, [pc, #36]	; (800bd2c <uip_arp_arpin+0xd4>)
 800bd06:	881b      	ldrh	r3, [r3, #0]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d1b5      	bne.n	800bc78 <uip_arp_arpin+0x20>
 800bd0c:	4b06      	ldr	r3, [pc, #24]	; (800bd28 <uip_arp_arpin+0xd0>)
 800bd0e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bd10:	4b06      	ldr	r3, [pc, #24]	; (800bd2c <uip_arp_arpin+0xd4>)
 800bd12:	885b      	ldrh	r3, [r3, #2]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d1af      	bne.n	800bc78 <uip_arp_arpin+0x20>
        uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 800bd18:	4805      	ldr	r0, [pc, #20]	; (800bd30 <uip_arp_arpin+0xd8>)
 800bd1a:	4601      	mov	r1, r0
 800bd1c:	3006      	adds	r0, #6
 800bd1e:	f7ff fee7 	bl	800baf0 <uip_arp_update>
 800bd22:	e7a9      	b.n	800bc78 <uip_arp_arpin+0x20>
 800bd24:	200032e0 	.word	0x200032e0
 800bd28:	2000332c 	.word	0x2000332c
 800bd2c:	20003328 	.word	0x20003328
 800bd30:	20003342 	.word	0x20003342
 800bd34:	20000180 	.word	0x20000180

0800bd38 <uip_arp_out>:
 * uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_out(void)
{
 800bd38:	b430      	push	{r4, r5}

     If not ARP table entry is found, we overwrite the original IP
     packet with an ARP request for the IP address. */

  /* First check if destination is a local broadcast. */
  if (uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr))
 800bd3a:	4b49      	ldr	r3, [pc, #292]	; (800be60 <uip_arp_out+0x128>)
 800bd3c:	8bda      	ldrh	r2, [r3, #30]
 800bd3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d01a      	beq.n	800bd7c <uip_arp_out+0x44>
    memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
  }
  else
  {
    /* Check if the destination address is on the local network. */
    if (!uip_ipaddr_maskcmp(IPBUF->destipaddr, uip_hostaddr, uip_netmask))
 800bd46:	4b47      	ldr	r3, [pc, #284]	; (800be64 <uip_arp_out+0x12c>)
 800bd48:	881b      	ldrh	r3, [r3, #0]
 800bd4a:	4947      	ldr	r1, [pc, #284]	; (800be68 <uip_arp_out+0x130>)
 800bd4c:	8809      	ldrh	r1, [r1, #0]
 800bd4e:	4053      	eors	r3, r2
 800bd50:	4219      	tst	r1, r3
 800bd52:	d108      	bne.n	800bd66 <uip_arp_out+0x2e>
 800bd54:	4b42      	ldr	r3, [pc, #264]	; (800be60 <uip_arp_out+0x128>)
 800bd56:	8c19      	ldrh	r1, [r3, #32]
 800bd58:	4b42      	ldr	r3, [pc, #264]	; (800be64 <uip_arp_out+0x12c>)
 800bd5a:	885b      	ldrh	r3, [r3, #2]
 800bd5c:	4842      	ldr	r0, [pc, #264]	; (800be68 <uip_arp_out+0x130>)
 800bd5e:	8840      	ldrh	r0, [r0, #2]
 800bd60:	404b      	eors	r3, r1
 800bd62:	4218      	tst	r0, r3
 800bd64:	d017      	beq.n	800bd96 <uip_arp_out+0x5e>
    {
      /* Destination address was not on the local network, so we need to
      use the default router's IP address instead of the destination
      address when determining the MAC address. */
      uip_ipaddr_copy(ipaddr, uip_draddr);
 800bd66:	4b41      	ldr	r3, [pc, #260]	; (800be6c <uip_arp_out+0x134>)
 800bd68:	4a41      	ldr	r2, [pc, #260]	; (800be70 <uip_arp_out+0x138>)
 800bd6a:	8811      	ldrh	r1, [r2, #0]
 800bd6c:	8019      	strh	r1, [r3, #0]
 800bd6e:	8852      	ldrh	r2, [r2, #2]
 800bd70:	805a      	strh	r2, [r3, #2]
    {
      /* Else, we use the destination IP address. */
      uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
    }

    for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 800bd72:	4b40      	ldr	r3, [pc, #256]	; (800be74 <uip_arp_out+0x13c>)
 800bd74:	2200      	movs	r2, #0
 800bd76:	701a      	strb	r2, [r3, #0]
  struct arp_entry *tabptr = arp_table;
 800bd78:	4d3f      	ldr	r5, [pc, #252]	; (800be78 <uip_arp_out+0x140>)
    for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 800bd7a:	e013      	b.n	800bda4 <uip_arp_out+0x6c>
  if (uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr))
 800bd7c:	4b38      	ldr	r3, [pc, #224]	; (800be60 <uip_arp_out+0x128>)
 800bd7e:	8c19      	ldrh	r1, [r3, #32]
 800bd80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd84:	4299      	cmp	r1, r3
 800bd86:	d1de      	bne.n	800bd46 <uip_arp_out+0xe>
    memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
 800bd88:	4b35      	ldr	r3, [pc, #212]	; (800be60 <uip_arp_out+0x128>)
 800bd8a:	4a3c      	ldr	r2, [pc, #240]	; (800be7c <uip_arp_out+0x144>)
 800bd8c:	6810      	ldr	r0, [r2, #0]
 800bd8e:	6018      	str	r0, [r3, #0]
 800bd90:	8892      	ldrh	r2, [r2, #4]
 800bd92:	809a      	strh	r2, [r3, #4]
 800bd94:	e021      	b.n	800bdda <uip_arp_out+0xa2>
      uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
 800bd96:	4b35      	ldr	r3, [pc, #212]	; (800be6c <uip_arp_out+0x134>)
 800bd98:	801a      	strh	r2, [r3, #0]
 800bd9a:	8059      	strh	r1, [r3, #2]
 800bd9c:	e7e9      	b.n	800bd72 <uip_arp_out+0x3a>
    for (i = 0; i < UIP_ARPTAB_SIZE; ++i)
 800bd9e:	3301      	adds	r3, #1
 800bda0:	4a34      	ldr	r2, [pc, #208]	; (800be74 <uip_arp_out+0x13c>)
 800bda2:	7013      	strb	r3, [r2, #0]
 800bda4:	4b33      	ldr	r3, [pc, #204]	; (800be74 <uip_arp_out+0x13c>)
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	2b07      	cmp	r3, #7
 800bdaa:	d80e      	bhi.n	800bdca <uip_arp_out+0x92>
    {
      tabptr = &arp_table[i];
 800bdac:	4832      	ldr	r0, [pc, #200]	; (800be78 <uip_arp_out+0x140>)
 800bdae:	005a      	lsls	r2, r3, #1
 800bdb0:	441a      	add	r2, r3
 800bdb2:	0091      	lsls	r1, r2, #2
 800bdb4:	1845      	adds	r5, r0, r1
      if (uip_ipaddr_cmp(ipaddr, tabptr->ipaddr))
 800bdb6:	4a2d      	ldr	r2, [pc, #180]	; (800be6c <uip_arp_out+0x134>)
 800bdb8:	8814      	ldrh	r4, [r2, #0]
 800bdba:	5a42      	ldrh	r2, [r0, r1]
 800bdbc:	4294      	cmp	r4, r2
 800bdbe:	d1ee      	bne.n	800bd9e <uip_arp_out+0x66>
 800bdc0:	4a2a      	ldr	r2, [pc, #168]	; (800be6c <uip_arp_out+0x134>)
 800bdc2:	8850      	ldrh	r0, [r2, #2]
 800bdc4:	886a      	ldrh	r2, [r5, #2]
 800bdc6:	4290      	cmp	r0, r2
 800bdc8:	d1e9      	bne.n	800bd9e <uip_arp_out+0x66>
      {
        break;
      }
    }

    if (i == UIP_ARPTAB_SIZE)
 800bdca:	2b08      	cmp	r3, #8
 800bdcc:	d016      	beq.n	800bdfc <uip_arp_out+0xc4>
      uip_len = sizeof(struct arp_hdr);
      return;
    }

    /* Build an ethernet header. */
    memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
 800bdce:	4b24      	ldr	r3, [pc, #144]	; (800be60 <uip_arp_out+0x128>)
 800bdd0:	f855 2f04 	ldr.w	r2, [r5, #4]!
 800bdd4:	601a      	str	r2, [r3, #0]
 800bdd6:	88aa      	ldrh	r2, [r5, #4]
 800bdd8:	809a      	strh	r2, [r3, #4]
  }
  memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 800bdda:	4b21      	ldr	r3, [pc, #132]	; (800be60 <uip_arp_out+0x128>)
 800bddc:	4a28      	ldr	r2, [pc, #160]	; (800be80 <uip_arp_out+0x148>)
 800bdde:	6811      	ldr	r1, [r2, #0]
 800bde0:	f8c3 1006 	str.w	r1, [r3, #6]
 800bde4:	8892      	ldrh	r2, [r2, #4]
 800bde6:	815a      	strh	r2, [r3, #10]

  IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
 800bde8:	2208      	movs	r2, #8
 800bdea:	731a      	strb	r2, [r3, #12]
 800bdec:	2200      	movs	r2, #0
 800bdee:	735a      	strb	r2, [r3, #13]

  uip_len += sizeof(struct uip_eth_hdr);
 800bdf0:	4a24      	ldr	r2, [pc, #144]	; (800be84 <uip_arp_out+0x14c>)
 800bdf2:	8813      	ldrh	r3, [r2, #0]
 800bdf4:	330e      	adds	r3, #14
 800bdf6:	8013      	strh	r3, [r2, #0]
}
 800bdf8:	bc30      	pop	{r4, r5}
 800bdfa:	4770      	bx	lr
      memset(BUF->ethhdr.dest.addr, 0xff, 6);
 800bdfc:	4b18      	ldr	r3, [pc, #96]	; (800be60 <uip_arp_out+0x128>)
 800bdfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be02:	601a      	str	r2, [r3, #0]
 800be04:	809a      	strh	r2, [r3, #4]
      memset(BUF->dhwaddr.addr, 0x00, 6);
 800be06:	2200      	movs	r2, #0
 800be08:	621a      	str	r2, [r3, #32]
 800be0a:	849a      	strh	r2, [r3, #36]	; 0x24
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 800be0c:	491c      	ldr	r1, [pc, #112]	; (800be80 <uip_arp_out+0x148>)
 800be0e:	6808      	ldr	r0, [r1, #0]
 800be10:	f8c3 0006 	str.w	r0, [r3, #6]
 800be14:	8889      	ldrh	r1, [r1, #4]
 800be16:	8159      	strh	r1, [r3, #10]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 800be18:	f8c3 0016 	str.w	r0, [r3, #22]
 800be1c:	8359      	strh	r1, [r3, #26]
      uip_ipaddr_copy(BUF->dipaddr, ipaddr);
 800be1e:	4913      	ldr	r1, [pc, #76]	; (800be6c <uip_arp_out+0x134>)
 800be20:	8808      	ldrh	r0, [r1, #0]
 800be22:	84d8      	strh	r0, [r3, #38]	; 0x26
 800be24:	8849      	ldrh	r1, [r1, #2]
 800be26:	8519      	strh	r1, [r3, #40]	; 0x28
      uip_ipaddr_copy(BUF->sipaddr, uip_hostaddr);
 800be28:	490e      	ldr	r1, [pc, #56]	; (800be64 <uip_arp_out+0x12c>)
 800be2a:	8808      	ldrh	r0, [r1, #0]
 800be2c:	8398      	strh	r0, [r3, #28]
 800be2e:	8849      	ldrh	r1, [r1, #2]
 800be30:	83d9      	strh	r1, [r3, #30]
      BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
 800be32:	751a      	strb	r2, [r3, #20]
 800be34:	2101      	movs	r1, #1
 800be36:	7559      	strb	r1, [r3, #21]
      BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
 800be38:	739a      	strb	r2, [r3, #14]
 800be3a:	73d9      	strb	r1, [r3, #15]
      BUF->protocol = HTONS(UIP_ETHTYPE_IP);
 800be3c:	2108      	movs	r1, #8
 800be3e:	7419      	strb	r1, [r3, #16]
 800be40:	745a      	strb	r2, [r3, #17]
      BUF->hwlen = 6;
 800be42:	2206      	movs	r2, #6
 800be44:	749a      	strb	r2, [r3, #18]
      BUF->protolen = 4;
 800be46:	2204      	movs	r2, #4
 800be48:	74da      	strb	r2, [r3, #19]
      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 800be4a:	7319      	strb	r1, [r3, #12]
 800be4c:	2206      	movs	r2, #6
 800be4e:	735a      	strb	r2, [r3, #13]
      uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
 800be50:	3336      	adds	r3, #54	; 0x36
 800be52:	4a0d      	ldr	r2, [pc, #52]	; (800be88 <uip_arp_out+0x150>)
 800be54:	6013      	str	r3, [r2, #0]
      uip_len = sizeof(struct arp_hdr);
 800be56:	4b0b      	ldr	r3, [pc, #44]	; (800be84 <uip_arp_out+0x14c>)
 800be58:	222a      	movs	r2, #42	; 0x2a
 800be5a:	801a      	strh	r2, [r3, #0]
      return;
 800be5c:	e7cc      	b.n	800bdf8 <uip_arp_out+0xc0>
 800be5e:	bf00      	nop
 800be60:	2000332c 	.word	0x2000332c
 800be64:	20003328 	.word	0x20003328
 800be68:	20003324 	.word	0x20003324
 800be6c:	200001ec 	.word	0x200001ec
 800be70:	20003320 	.word	0x20003320
 800be74:	200001ea 	.word	0x200001ea
 800be78:	20000188 	.word	0x20000188
 800be7c:	0800bf78 	.word	0x0800bf78
 800be80:	20000180 	.word	0x20000180
 800be84:	200032e0 	.word	0x200032e0
 800be88:	200032f4 	.word	0x200032f4

0800be8c <timer_set>:
 * \param interval The interval before the timer expires.
 *
 */
void
timer_set(struct timer *t, clock_time_t interval)
{
 800be8c:	b510      	push	{r4, lr}
 800be8e:	4604      	mov	r4, r0
  t->interval = interval;
 800be90:	6041      	str	r1, [r0, #4]
  t->start = clock_time();
 800be92:	f7fe fb2b 	bl	800a4ec <clock_time>
 800be96:	6020      	str	r0, [r4, #0]
}
 800be98:	bd10      	pop	{r4, pc}

0800be9a <timer_expired>:
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
int
timer_expired(struct timer *t)
{
 800be9a:	b510      	push	{r4, lr}
 800be9c:	4604      	mov	r4, r0
  return (clock_time_t)(clock_time() - t->start) >= (clock_time_t)t->interval;
 800be9e:	f7fe fb25 	bl	800a4ec <clock_time>
 800bea2:	6823      	ldr	r3, [r4, #0]
 800bea4:	1ac0      	subs	r0, r0, r3
 800bea6:	6863      	ldr	r3, [r4, #4]
}
 800bea8:	4298      	cmp	r0, r3
 800beaa:	bfb4      	ite	lt
 800beac:	2000      	movlt	r0, #0
 800beae:	2001      	movge	r0, #1
 800beb0:	bd10      	pop	{r4, pc}
	...

0800beb4 <__libc_init_array>:
 800beb4:	b570      	push	{r4, r5, r6, lr}
 800beb6:	4e0d      	ldr	r6, [pc, #52]	; (800beec <__libc_init_array+0x38>)
 800beb8:	4c0d      	ldr	r4, [pc, #52]	; (800bef0 <__libc_init_array+0x3c>)
 800beba:	1ba4      	subs	r4, r4, r6
 800bebc:	10a4      	asrs	r4, r4, #2
 800bebe:	2500      	movs	r5, #0
 800bec0:	42a5      	cmp	r5, r4
 800bec2:	d109      	bne.n	800bed8 <__libc_init_array+0x24>
 800bec4:	4e0b      	ldr	r6, [pc, #44]	; (800bef4 <__libc_init_array+0x40>)
 800bec6:	4c0c      	ldr	r4, [pc, #48]	; (800bef8 <__libc_init_array+0x44>)
 800bec8:	f000 f83a 	bl	800bf40 <_init>
 800becc:	1ba4      	subs	r4, r4, r6
 800bece:	10a4      	asrs	r4, r4, #2
 800bed0:	2500      	movs	r5, #0
 800bed2:	42a5      	cmp	r5, r4
 800bed4:	d105      	bne.n	800bee2 <__libc_init_array+0x2e>
 800bed6:	bd70      	pop	{r4, r5, r6, pc}
 800bed8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bedc:	4798      	blx	r3
 800bede:	3501      	adds	r5, #1
 800bee0:	e7ee      	b.n	800bec0 <__libc_init_array+0xc>
 800bee2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bee6:	4798      	blx	r3
 800bee8:	3501      	adds	r5, #1
 800beea:	e7f2      	b.n	800bed2 <__libc_init_array+0x1e>
 800beec:	0800bf88 	.word	0x0800bf88
 800bef0:	0800bf88 	.word	0x0800bf88
 800bef4:	0800bf88 	.word	0x0800bf88
 800bef8:	0800bf8c 	.word	0x0800bf8c

0800befc <memcmp>:
 800befc:	b530      	push	{r4, r5, lr}
 800befe:	2400      	movs	r4, #0
 800bf00:	42a2      	cmp	r2, r4
 800bf02:	d101      	bne.n	800bf08 <memcmp+0xc>
 800bf04:	2000      	movs	r0, #0
 800bf06:	e007      	b.n	800bf18 <memcmp+0x1c>
 800bf08:	5d03      	ldrb	r3, [r0, r4]
 800bf0a:	3401      	adds	r4, #1
 800bf0c:	190d      	adds	r5, r1, r4
 800bf0e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800bf12:	42ab      	cmp	r3, r5
 800bf14:	d0f4      	beq.n	800bf00 <memcmp+0x4>
 800bf16:	1b58      	subs	r0, r3, r5
 800bf18:	bd30      	pop	{r4, r5, pc}

0800bf1a <memcpy>:
 800bf1a:	b510      	push	{r4, lr}
 800bf1c:	1e43      	subs	r3, r0, #1
 800bf1e:	440a      	add	r2, r1
 800bf20:	4291      	cmp	r1, r2
 800bf22:	d100      	bne.n	800bf26 <memcpy+0xc>
 800bf24:	bd10      	pop	{r4, pc}
 800bf26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf2e:	e7f7      	b.n	800bf20 <memcpy+0x6>

0800bf30 <memset>:
 800bf30:	4402      	add	r2, r0
 800bf32:	4603      	mov	r3, r0
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d100      	bne.n	800bf3a <memset+0xa>
 800bf38:	4770      	bx	lr
 800bf3a:	f803 1b01 	strb.w	r1, [r3], #1
 800bf3e:	e7f9      	b.n	800bf34 <memset+0x4>

0800bf40 <_init>:
 800bf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf42:	bf00      	nop
 800bf44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf46:	bc08      	pop	{r3}
 800bf48:	469e      	mov	lr, r3
 800bf4a:	4770      	bx	lr

0800bf4c <_fini>:
 800bf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf4e:	bf00      	nop
 800bf50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf52:	bc08      	pop	{r3}
 800bf54:	469e      	mov	lr, r3
 800bf56:	4770      	bx	lr
