
MainEngine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .shared       00000040  20000000  20000000  00050000  2**2
                  ALLOC
  1 .isr_vector   000001fc  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00016d5c  08008200  08008200  00008200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00013a98  0801ef5c  0801ef5c  0001ef5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  080329f4  080329f4  000329f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  080329fc  080329fc  000329fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08032a00  08032a00  00032a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000080  20000040  08032a04  00040040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000b46c  200000c0  08032a84  000400c0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000b52c  08032a84  0004b52c  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00046928  00000000  00000000  000400ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008723  00000000  00000000  00086a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002640  00000000  00000000  0008f140  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002418  00000000  00000000  00091780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00013a33  00000000  00000000  00093b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0002fd5f  00000000  00000000  000a75cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00123574  00000000  00000000  000d732a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  001fa89e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a2f4  00000000  00000000  001fa91c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008200 <__do_global_dtors_aux>:
 8008200:	b510      	push	{r4, lr}
 8008202:	4c05      	ldr	r4, [pc, #20]	; (8008218 <__do_global_dtors_aux+0x18>)
 8008204:	7823      	ldrb	r3, [r4, #0]
 8008206:	b933      	cbnz	r3, 8008216 <__do_global_dtors_aux+0x16>
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <__do_global_dtors_aux+0x1c>)
 800820a:	b113      	cbz	r3, 8008212 <__do_global_dtors_aux+0x12>
 800820c:	4804      	ldr	r0, [pc, #16]	; (8008220 <__do_global_dtors_aux+0x20>)
 800820e:	f3af 8000 	nop.w
 8008212:	2301      	movs	r3, #1
 8008214:	7023      	strb	r3, [r4, #0]
 8008216:	bd10      	pop	{r4, pc}
 8008218:	200000c0 	.word	0x200000c0
 800821c:	00000000 	.word	0x00000000
 8008220:	0801ef44 	.word	0x0801ef44

08008224 <frame_dummy>:
 8008224:	b508      	push	{r3, lr}
 8008226:	4b03      	ldr	r3, [pc, #12]	; (8008234 <frame_dummy+0x10>)
 8008228:	b11b      	cbz	r3, 8008232 <frame_dummy+0xe>
 800822a:	4903      	ldr	r1, [pc, #12]	; (8008238 <frame_dummy+0x14>)
 800822c:	4803      	ldr	r0, [pc, #12]	; (800823c <frame_dummy+0x18>)
 800822e:	f3af 8000 	nop.w
 8008232:	bd08      	pop	{r3, pc}
 8008234:	00000000 	.word	0x00000000
 8008238:	200000c4 	.word	0x200000c4
 800823c:	0801ef44 	.word	0x0801ef44

08008240 <strcmp>:
 8008240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008248:	2a01      	cmp	r2, #1
 800824a:	bf28      	it	cs
 800824c:	429a      	cmpcs	r2, r3
 800824e:	d0f7      	beq.n	8008240 <strcmp>
 8008250:	1ad0      	subs	r0, r2, r3
 8008252:	4770      	bx	lr

08008254 <strlen>:
 8008254:	4603      	mov	r3, r0
 8008256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800825a:	2a00      	cmp	r2, #0
 800825c:	d1fb      	bne.n	8008256 <strlen+0x2>
 800825e:	1a18      	subs	r0, r3, r0
 8008260:	3801      	subs	r0, #1
 8008262:	4770      	bx	lr
	...

08008270 <memchr>:
 8008270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008274:	2a10      	cmp	r2, #16
 8008276:	db2b      	blt.n	80082d0 <memchr+0x60>
 8008278:	f010 0f07 	tst.w	r0, #7
 800827c:	d008      	beq.n	8008290 <memchr+0x20>
 800827e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008282:	3a01      	subs	r2, #1
 8008284:	428b      	cmp	r3, r1
 8008286:	d02d      	beq.n	80082e4 <memchr+0x74>
 8008288:	f010 0f07 	tst.w	r0, #7
 800828c:	b342      	cbz	r2, 80082e0 <memchr+0x70>
 800828e:	d1f6      	bne.n	800827e <memchr+0xe>
 8008290:	b4f0      	push	{r4, r5, r6, r7}
 8008292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800829a:	f022 0407 	bic.w	r4, r2, #7
 800829e:	f07f 0700 	mvns.w	r7, #0
 80082a2:	2300      	movs	r3, #0
 80082a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80082a8:	3c08      	subs	r4, #8
 80082aa:	ea85 0501 	eor.w	r5, r5, r1
 80082ae:	ea86 0601 	eor.w	r6, r6, r1
 80082b2:	fa85 f547 	uadd8	r5, r5, r7
 80082b6:	faa3 f587 	sel	r5, r3, r7
 80082ba:	fa86 f647 	uadd8	r6, r6, r7
 80082be:	faa5 f687 	sel	r6, r5, r7
 80082c2:	b98e      	cbnz	r6, 80082e8 <memchr+0x78>
 80082c4:	d1ee      	bne.n	80082a4 <memchr+0x34>
 80082c6:	bcf0      	pop	{r4, r5, r6, r7}
 80082c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80082cc:	f002 0207 	and.w	r2, r2, #7
 80082d0:	b132      	cbz	r2, 80082e0 <memchr+0x70>
 80082d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80082d6:	3a01      	subs	r2, #1
 80082d8:	ea83 0301 	eor.w	r3, r3, r1
 80082dc:	b113      	cbz	r3, 80082e4 <memchr+0x74>
 80082de:	d1f8      	bne.n	80082d2 <memchr+0x62>
 80082e0:	2000      	movs	r0, #0
 80082e2:	4770      	bx	lr
 80082e4:	3801      	subs	r0, #1
 80082e6:	4770      	bx	lr
 80082e8:	2d00      	cmp	r5, #0
 80082ea:	bf06      	itte	eq
 80082ec:	4635      	moveq	r5, r6
 80082ee:	3803      	subeq	r0, #3
 80082f0:	3807      	subne	r0, #7
 80082f2:	f015 0f01 	tst.w	r5, #1
 80082f6:	d107      	bne.n	8008308 <memchr+0x98>
 80082f8:	3001      	adds	r0, #1
 80082fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80082fe:	bf02      	ittt	eq
 8008300:	3001      	addeq	r0, #1
 8008302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008306:	3001      	addeq	r0, #1
 8008308:	bcf0      	pop	{r4, r5, r6, r7}
 800830a:	3801      	subs	r0, #1
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop

08008310 <__aeabi_uldivmod>:
 8008310:	b953      	cbnz	r3, 8008328 <__aeabi_uldivmod+0x18>
 8008312:	b94a      	cbnz	r2, 8008328 <__aeabi_uldivmod+0x18>
 8008314:	2900      	cmp	r1, #0
 8008316:	bf08      	it	eq
 8008318:	2800      	cmpeq	r0, #0
 800831a:	bf1c      	itt	ne
 800831c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8008320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008324:	f000 b972 	b.w	800860c <__aeabi_idiv0>
 8008328:	f1ad 0c08 	sub.w	ip, sp, #8
 800832c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008330:	f000 f806 	bl	8008340 <__udivmoddi4>
 8008334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800833c:	b004      	add	sp, #16
 800833e:	4770      	bx	lr

08008340 <__udivmoddi4>:
 8008340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008344:	9e08      	ldr	r6, [sp, #32]
 8008346:	4604      	mov	r4, r0
 8008348:	4688      	mov	r8, r1
 800834a:	2b00      	cmp	r3, #0
 800834c:	d14b      	bne.n	80083e6 <__udivmoddi4+0xa6>
 800834e:	428a      	cmp	r2, r1
 8008350:	4615      	mov	r5, r2
 8008352:	d967      	bls.n	8008424 <__udivmoddi4+0xe4>
 8008354:	fab2 f282 	clz	r2, r2
 8008358:	b14a      	cbz	r2, 800836e <__udivmoddi4+0x2e>
 800835a:	f1c2 0720 	rsb	r7, r2, #32
 800835e:	fa01 f302 	lsl.w	r3, r1, r2
 8008362:	fa20 f707 	lsr.w	r7, r0, r7
 8008366:	4095      	lsls	r5, r2
 8008368:	ea47 0803 	orr.w	r8, r7, r3
 800836c:	4094      	lsls	r4, r2
 800836e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008372:	0c23      	lsrs	r3, r4, #16
 8008374:	fbb8 f7fe 	udiv	r7, r8, lr
 8008378:	fa1f fc85 	uxth.w	ip, r5
 800837c:	fb0e 8817 	mls	r8, lr, r7, r8
 8008380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008384:	fb07 f10c 	mul.w	r1, r7, ip
 8008388:	4299      	cmp	r1, r3
 800838a:	d909      	bls.n	80083a0 <__udivmoddi4+0x60>
 800838c:	18eb      	adds	r3, r5, r3
 800838e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8008392:	f080 811b 	bcs.w	80085cc <__udivmoddi4+0x28c>
 8008396:	4299      	cmp	r1, r3
 8008398:	f240 8118 	bls.w	80085cc <__udivmoddi4+0x28c>
 800839c:	3f02      	subs	r7, #2
 800839e:	442b      	add	r3, r5
 80083a0:	1a5b      	subs	r3, r3, r1
 80083a2:	b2a4      	uxth	r4, r4
 80083a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80083a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80083ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80083b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80083b4:	45a4      	cmp	ip, r4
 80083b6:	d909      	bls.n	80083cc <__udivmoddi4+0x8c>
 80083b8:	192c      	adds	r4, r5, r4
 80083ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80083be:	f080 8107 	bcs.w	80085d0 <__udivmoddi4+0x290>
 80083c2:	45a4      	cmp	ip, r4
 80083c4:	f240 8104 	bls.w	80085d0 <__udivmoddi4+0x290>
 80083c8:	3802      	subs	r0, #2
 80083ca:	442c      	add	r4, r5
 80083cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80083d0:	eba4 040c 	sub.w	r4, r4, ip
 80083d4:	2700      	movs	r7, #0
 80083d6:	b11e      	cbz	r6, 80083e0 <__udivmoddi4+0xa0>
 80083d8:	40d4      	lsrs	r4, r2
 80083da:	2300      	movs	r3, #0
 80083dc:	e9c6 4300 	strd	r4, r3, [r6]
 80083e0:	4639      	mov	r1, r7
 80083e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e6:	428b      	cmp	r3, r1
 80083e8:	d909      	bls.n	80083fe <__udivmoddi4+0xbe>
 80083ea:	2e00      	cmp	r6, #0
 80083ec:	f000 80eb 	beq.w	80085c6 <__udivmoddi4+0x286>
 80083f0:	2700      	movs	r7, #0
 80083f2:	e9c6 0100 	strd	r0, r1, [r6]
 80083f6:	4638      	mov	r0, r7
 80083f8:	4639      	mov	r1, r7
 80083fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083fe:	fab3 f783 	clz	r7, r3
 8008402:	2f00      	cmp	r7, #0
 8008404:	d147      	bne.n	8008496 <__udivmoddi4+0x156>
 8008406:	428b      	cmp	r3, r1
 8008408:	d302      	bcc.n	8008410 <__udivmoddi4+0xd0>
 800840a:	4282      	cmp	r2, r0
 800840c:	f200 80fa 	bhi.w	8008604 <__udivmoddi4+0x2c4>
 8008410:	1a84      	subs	r4, r0, r2
 8008412:	eb61 0303 	sbc.w	r3, r1, r3
 8008416:	2001      	movs	r0, #1
 8008418:	4698      	mov	r8, r3
 800841a:	2e00      	cmp	r6, #0
 800841c:	d0e0      	beq.n	80083e0 <__udivmoddi4+0xa0>
 800841e:	e9c6 4800 	strd	r4, r8, [r6]
 8008422:	e7dd      	b.n	80083e0 <__udivmoddi4+0xa0>
 8008424:	b902      	cbnz	r2, 8008428 <__udivmoddi4+0xe8>
 8008426:	deff      	udf	#255	; 0xff
 8008428:	fab2 f282 	clz	r2, r2
 800842c:	2a00      	cmp	r2, #0
 800842e:	f040 808f 	bne.w	8008550 <__udivmoddi4+0x210>
 8008432:	1b49      	subs	r1, r1, r5
 8008434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008438:	fa1f f885 	uxth.w	r8, r5
 800843c:	2701      	movs	r7, #1
 800843e:	fbb1 fcfe 	udiv	ip, r1, lr
 8008442:	0c23      	lsrs	r3, r4, #16
 8008444:	fb0e 111c 	mls	r1, lr, ip, r1
 8008448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800844c:	fb08 f10c 	mul.w	r1, r8, ip
 8008450:	4299      	cmp	r1, r3
 8008452:	d907      	bls.n	8008464 <__udivmoddi4+0x124>
 8008454:	18eb      	adds	r3, r5, r3
 8008456:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800845a:	d202      	bcs.n	8008462 <__udivmoddi4+0x122>
 800845c:	4299      	cmp	r1, r3
 800845e:	f200 80cd 	bhi.w	80085fc <__udivmoddi4+0x2bc>
 8008462:	4684      	mov	ip, r0
 8008464:	1a59      	subs	r1, r3, r1
 8008466:	b2a3      	uxth	r3, r4
 8008468:	fbb1 f0fe 	udiv	r0, r1, lr
 800846c:	fb0e 1410 	mls	r4, lr, r0, r1
 8008470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008474:	fb08 f800 	mul.w	r8, r8, r0
 8008478:	45a0      	cmp	r8, r4
 800847a:	d907      	bls.n	800848c <__udivmoddi4+0x14c>
 800847c:	192c      	adds	r4, r5, r4
 800847e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008482:	d202      	bcs.n	800848a <__udivmoddi4+0x14a>
 8008484:	45a0      	cmp	r8, r4
 8008486:	f200 80b6 	bhi.w	80085f6 <__udivmoddi4+0x2b6>
 800848a:	4618      	mov	r0, r3
 800848c:	eba4 0408 	sub.w	r4, r4, r8
 8008490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008494:	e79f      	b.n	80083d6 <__udivmoddi4+0x96>
 8008496:	f1c7 0c20 	rsb	ip, r7, #32
 800849a:	40bb      	lsls	r3, r7
 800849c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80084a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80084a4:	fa01 f407 	lsl.w	r4, r1, r7
 80084a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80084ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80084b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80084b4:	4325      	orrs	r5, r4
 80084b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80084ba:	0c2c      	lsrs	r4, r5, #16
 80084bc:	fb08 3319 	mls	r3, r8, r9, r3
 80084c0:	fa1f fa8e 	uxth.w	sl, lr
 80084c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80084c8:	fb09 f40a 	mul.w	r4, r9, sl
 80084cc:	429c      	cmp	r4, r3
 80084ce:	fa02 f207 	lsl.w	r2, r2, r7
 80084d2:	fa00 f107 	lsl.w	r1, r0, r7
 80084d6:	d90b      	bls.n	80084f0 <__udivmoddi4+0x1b0>
 80084d8:	eb1e 0303 	adds.w	r3, lr, r3
 80084dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80084e0:	f080 8087 	bcs.w	80085f2 <__udivmoddi4+0x2b2>
 80084e4:	429c      	cmp	r4, r3
 80084e6:	f240 8084 	bls.w	80085f2 <__udivmoddi4+0x2b2>
 80084ea:	f1a9 0902 	sub.w	r9, r9, #2
 80084ee:	4473      	add	r3, lr
 80084f0:	1b1b      	subs	r3, r3, r4
 80084f2:	b2ad      	uxth	r5, r5
 80084f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80084f8:	fb08 3310 	mls	r3, r8, r0, r3
 80084fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008500:	fb00 fa0a 	mul.w	sl, r0, sl
 8008504:	45a2      	cmp	sl, r4
 8008506:	d908      	bls.n	800851a <__udivmoddi4+0x1da>
 8008508:	eb1e 0404 	adds.w	r4, lr, r4
 800850c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008510:	d26b      	bcs.n	80085ea <__udivmoddi4+0x2aa>
 8008512:	45a2      	cmp	sl, r4
 8008514:	d969      	bls.n	80085ea <__udivmoddi4+0x2aa>
 8008516:	3802      	subs	r0, #2
 8008518:	4474      	add	r4, lr
 800851a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800851e:	fba0 8902 	umull	r8, r9, r0, r2
 8008522:	eba4 040a 	sub.w	r4, r4, sl
 8008526:	454c      	cmp	r4, r9
 8008528:	46c2      	mov	sl, r8
 800852a:	464b      	mov	r3, r9
 800852c:	d354      	bcc.n	80085d8 <__udivmoddi4+0x298>
 800852e:	d051      	beq.n	80085d4 <__udivmoddi4+0x294>
 8008530:	2e00      	cmp	r6, #0
 8008532:	d069      	beq.n	8008608 <__udivmoddi4+0x2c8>
 8008534:	ebb1 050a 	subs.w	r5, r1, sl
 8008538:	eb64 0403 	sbc.w	r4, r4, r3
 800853c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008540:	40fd      	lsrs	r5, r7
 8008542:	40fc      	lsrs	r4, r7
 8008544:	ea4c 0505 	orr.w	r5, ip, r5
 8008548:	e9c6 5400 	strd	r5, r4, [r6]
 800854c:	2700      	movs	r7, #0
 800854e:	e747      	b.n	80083e0 <__udivmoddi4+0xa0>
 8008550:	f1c2 0320 	rsb	r3, r2, #32
 8008554:	fa20 f703 	lsr.w	r7, r0, r3
 8008558:	4095      	lsls	r5, r2
 800855a:	fa01 f002 	lsl.w	r0, r1, r2
 800855e:	fa21 f303 	lsr.w	r3, r1, r3
 8008562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008566:	4338      	orrs	r0, r7
 8008568:	0c01      	lsrs	r1, r0, #16
 800856a:	fbb3 f7fe 	udiv	r7, r3, lr
 800856e:	fa1f f885 	uxth.w	r8, r5
 8008572:	fb0e 3317 	mls	r3, lr, r7, r3
 8008576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800857a:	fb07 f308 	mul.w	r3, r7, r8
 800857e:	428b      	cmp	r3, r1
 8008580:	fa04 f402 	lsl.w	r4, r4, r2
 8008584:	d907      	bls.n	8008596 <__udivmoddi4+0x256>
 8008586:	1869      	adds	r1, r5, r1
 8008588:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800858c:	d22f      	bcs.n	80085ee <__udivmoddi4+0x2ae>
 800858e:	428b      	cmp	r3, r1
 8008590:	d92d      	bls.n	80085ee <__udivmoddi4+0x2ae>
 8008592:	3f02      	subs	r7, #2
 8008594:	4429      	add	r1, r5
 8008596:	1acb      	subs	r3, r1, r3
 8008598:	b281      	uxth	r1, r0
 800859a:	fbb3 f0fe 	udiv	r0, r3, lr
 800859e:	fb0e 3310 	mls	r3, lr, r0, r3
 80085a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80085a6:	fb00 f308 	mul.w	r3, r0, r8
 80085aa:	428b      	cmp	r3, r1
 80085ac:	d907      	bls.n	80085be <__udivmoddi4+0x27e>
 80085ae:	1869      	adds	r1, r5, r1
 80085b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80085b4:	d217      	bcs.n	80085e6 <__udivmoddi4+0x2a6>
 80085b6:	428b      	cmp	r3, r1
 80085b8:	d915      	bls.n	80085e6 <__udivmoddi4+0x2a6>
 80085ba:	3802      	subs	r0, #2
 80085bc:	4429      	add	r1, r5
 80085be:	1ac9      	subs	r1, r1, r3
 80085c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80085c4:	e73b      	b.n	800843e <__udivmoddi4+0xfe>
 80085c6:	4637      	mov	r7, r6
 80085c8:	4630      	mov	r0, r6
 80085ca:	e709      	b.n	80083e0 <__udivmoddi4+0xa0>
 80085cc:	4607      	mov	r7, r0
 80085ce:	e6e7      	b.n	80083a0 <__udivmoddi4+0x60>
 80085d0:	4618      	mov	r0, r3
 80085d2:	e6fb      	b.n	80083cc <__udivmoddi4+0x8c>
 80085d4:	4541      	cmp	r1, r8
 80085d6:	d2ab      	bcs.n	8008530 <__udivmoddi4+0x1f0>
 80085d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80085dc:	eb69 020e 	sbc.w	r2, r9, lr
 80085e0:	3801      	subs	r0, #1
 80085e2:	4613      	mov	r3, r2
 80085e4:	e7a4      	b.n	8008530 <__udivmoddi4+0x1f0>
 80085e6:	4660      	mov	r0, ip
 80085e8:	e7e9      	b.n	80085be <__udivmoddi4+0x27e>
 80085ea:	4618      	mov	r0, r3
 80085ec:	e795      	b.n	800851a <__udivmoddi4+0x1da>
 80085ee:	4667      	mov	r7, ip
 80085f0:	e7d1      	b.n	8008596 <__udivmoddi4+0x256>
 80085f2:	4681      	mov	r9, r0
 80085f4:	e77c      	b.n	80084f0 <__udivmoddi4+0x1b0>
 80085f6:	3802      	subs	r0, #2
 80085f8:	442c      	add	r4, r5
 80085fa:	e747      	b.n	800848c <__udivmoddi4+0x14c>
 80085fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8008600:	442b      	add	r3, r5
 8008602:	e72f      	b.n	8008464 <__udivmoddi4+0x124>
 8008604:	4638      	mov	r0, r7
 8008606:	e708      	b.n	800841a <__udivmoddi4+0xda>
 8008608:	4637      	mov	r7, r6
 800860a:	e6e9      	b.n	80083e0 <__udivmoddi4+0xa0>

0800860c <__aeabi_idiv0>:
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop

08008610 <UartBridge_init>:



void
UartBridge_init(void)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
  echo_pcb = tcp_new();
 8008616:	f00e f947 	bl	80168a8 <tcp_new>
 800861a:	4602      	mov	r2, r0
 800861c:	4b12      	ldr	r3, [pc, #72]	; (8008668 <UartBridge_init+0x58>)
 800861e:	601a      	str	r2, [r3, #0]
  if (echo_pcb != NULL)
 8008620:	4b11      	ldr	r3, [pc, #68]	; (8008668 <UartBridge_init+0x58>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01b      	beq.n	8008660 <UartBridge_init+0x50>
  {
    err_t err;

    err = tcp_bind(echo_pcb, IP_ADDR_ANY, 7);
 8008628:	4b0f      	ldr	r3, [pc, #60]	; (8008668 <UartBridge_init+0x58>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2207      	movs	r2, #7
 800862e:	490f      	ldr	r1, [pc, #60]	; (800866c <UartBridge_init+0x5c>)
 8008630:	4618      	mov	r0, r3
 8008632:	f00d f899 	bl	8015768 <tcp_bind>
 8008636:	4603      	mov	r3, r0
 8008638:	71fb      	strb	r3, [r7, #7]
    if (err == ERR_OK)
 800863a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10e      	bne.n	8008660 <UartBridge_init+0x50>
    {
      echo_pcb = tcp_listen(echo_pcb);
 8008642:	4b09      	ldr	r3, [pc, #36]	; (8008668 <UartBridge_init+0x58>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	21ff      	movs	r1, #255	; 0xff
 8008648:	4618      	mov	r0, r3
 800864a:	f00d f945 	bl	80158d8 <tcp_listen_with_backlog>
 800864e:	4602      	mov	r2, r0
 8008650:	4b05      	ldr	r3, [pc, #20]	; (8008668 <UartBridge_init+0x58>)
 8008652:	601a      	str	r2, [r3, #0]
      tcp_accept(echo_pcb, echo_accept);
 8008654:	4b04      	ldr	r3, [pc, #16]	; (8008668 <UartBridge_init+0x58>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4905      	ldr	r1, [pc, #20]	; (8008670 <UartBridge_init+0x60>)
 800865a:	4618      	mov	r0, r3
 800865c:	f00e f9b2 	bl	80169c4 <tcp_accept>
  }
  else
  {
    /* abort? output diagnostic? */
  }
}
 8008660:	bf00      	nop
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	200000dc 	.word	0x200000dc
 800866c:	08032940 	.word	0x08032940
 8008670:	08008675 	.word	0x08008675

08008674 <echo_accept>:
uint32_t count = 0;

err_t
echo_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	4613      	mov	r3, r2
 8008680:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* commonly observed practive to call tcp_setprio(), why? */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8008682:	2101      	movs	r1, #1
 8008684:	68b8      	ldr	r0, [r7, #8]
 8008686:	f00d ff1d 	bl	80164c4 <tcp_setprio>

  es = (struct echo_state *)mem_malloc(sizeof(struct echo_state));
 800868a:	200c      	movs	r0, #12
 800868c:	f00b fa60 	bl	8013b50 <mem_malloc>
 8008690:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d019      	beq.n	80086cc <echo_accept+0x58>
  {
    es->state = ES_ACCEPTED;
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	2201      	movs	r2, #1
 800869c:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	2200      	movs	r2, #0
 80086a8:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	2200      	movs	r2, #0
 80086ae:	609a      	str	r2, [r3, #8]
    /* pass newly allocated es to our callbacks */
    tcp_arg(newpcb, es);
 80086b0:	6939      	ldr	r1, [r7, #16]
 80086b2:	68b8      	ldr	r0, [r7, #8]
 80086b4:	f00e f90e 	bl	80168d4 <tcp_arg>
    tcp_recv(newpcb, echo_recv);
 80086b8:	4908      	ldr	r1, [pc, #32]	; (80086dc <echo_accept+0x68>)
 80086ba:	68b8      	ldr	r0, [r7, #8]
 80086bc:	f00e f91c 	bl	80168f8 <tcp_recv>
    count = 0;
 80086c0:	4b07      	ldr	r3, [pc, #28]	; (80086e0 <echo_accept+0x6c>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	601a      	str	r2, [r3, #0]
    ret_err = ERR_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	75fb      	strb	r3, [r7, #23]
 80086ca:	e001      	b.n	80086d0 <echo_accept+0x5c>

  }
  else
  {
    ret_err = ERR_MEM;
 80086cc:	23ff      	movs	r3, #255	; 0xff
 80086ce:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 80086d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	080086e5 	.word	0x080086e5
 80086e0:	200000e0 	.word	0x200000e0

080086e4 <echo_recv>:

err_t
echo_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80086e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086e6:	b08d      	sub	sp, #52	; 0x34
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
 80086f0:	70fb      	strb	r3, [r7, #3]
 80086f2:	466b      	mov	r3, sp
 80086f4:	461d      	mov	r5, r3


	if (!p) {
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10a      	bne.n	8008712 <echo_recv+0x2e>
        tcp_close(tpcb);
 80086fc:	68b8      	ldr	r0, [r7, #8]
 80086fe:	f00c ff3d 	bl	801557c <tcp_close>
        tcp_recv(tpcb, NULL);
 8008702:	2100      	movs	r1, #0
 8008704:	68b8      	ldr	r0, [r7, #8]
 8008706:	f00e f8f7 	bl	80168f8 <tcp_recv>
        HAL_FLASH_Lock();
 800870a:	f002 fed3 	bl	800b4b4 <HAL_FLASH_Lock>
        return ERR_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	e0ce      	b.n	80088b0 <echo_recv+0x1cc>
    }


	char buffer[p->len];
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	8958      	ldrh	r0, [r3, #10]
 8008716:	4603      	mov	r3, r0
 8008718:	3b01      	subs	r3, #1
 800871a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800871c:	b281      	uxth	r1, r0
 800871e:	f04f 0200 	mov.w	r2, #0
 8008722:	f04f 0300 	mov.w	r3, #0
 8008726:	f04f 0400 	mov.w	r4, #0
 800872a:	00d4      	lsls	r4, r2, #3
 800872c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008730:	00cb      	lsls	r3, r1, #3
 8008732:	b281      	uxth	r1, r0
 8008734:	f04f 0200 	mov.w	r2, #0
 8008738:	f04f 0300 	mov.w	r3, #0
 800873c:	f04f 0400 	mov.w	r4, #0
 8008740:	00d4      	lsls	r4, r2, #3
 8008742:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008746:	00cb      	lsls	r3, r1, #3
 8008748:	4603      	mov	r3, r0
 800874a:	3307      	adds	r3, #7
 800874c:	08db      	lsrs	r3, r3, #3
 800874e:	00db      	lsls	r3, r3, #3
 8008750:	ebad 0d03 	sub.w	sp, sp, r3
 8008754:	466b      	mov	r3, sp
 8008756:	3300      	adds	r3, #0
 8008758:	627b      	str	r3, [r7, #36]	; 0x24
	char buffer2[p->len];
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	8958      	ldrh	r0, [r3, #10]
 800875e:	4603      	mov	r3, r0
 8008760:	3b01      	subs	r3, #1
 8008762:	623b      	str	r3, [r7, #32]
 8008764:	b281      	uxth	r1, r0
 8008766:	f04f 0200 	mov.w	r2, #0
 800876a:	f04f 0300 	mov.w	r3, #0
 800876e:	f04f 0400 	mov.w	r4, #0
 8008772:	00d4      	lsls	r4, r2, #3
 8008774:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008778:	00cb      	lsls	r3, r1, #3
 800877a:	b281      	uxth	r1, r0
 800877c:	f04f 0200 	mov.w	r2, #0
 8008780:	f04f 0300 	mov.w	r3, #0
 8008784:	f04f 0400 	mov.w	r4, #0
 8008788:	00d4      	lsls	r4, r2, #3
 800878a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800878e:	00cb      	lsls	r3, r1, #3
 8008790:	4603      	mov	r3, r0
 8008792:	3307      	adds	r3, #7
 8008794:	08db      	lsrs	r3, r3, #3
 8008796:	00db      	lsls	r3, r3, #3
 8008798:	ebad 0d03 	sub.w	sp, sp, r3
 800879c:	466b      	mov	r3, sp
 800879e:	3300      	adds	r3, #0
 80087a0:	61fb      	str	r3, [r7, #28]
    /* indicate that the packet has been received */
    tcp_recved(tpcb, p->len);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	895b      	ldrh	r3, [r3, #10]
 80087a6:	4619      	mov	r1, r3
 80087a8:	68b8      	ldr	r0, [r7, #8]
 80087aa:	f00d f9ab 	bl	8015b04 <tcp_recved>
    /* in this case, we assume that the payload is < TCP_SND_BUF */

    //err = tcp_write(tpcb, p->payload, p->len, 1);
    /* free the received pbuf */

    pbuf_free(p);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f00c fa42 	bl	8014c38 <pbuf_free>
    //MY_FLASH_WriteN(count, p->payload, p->len, DATA_TYPE_8);
    count = count + p->len;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	895b      	ldrh	r3, [r3, #10]
 80087b8:	461a      	mov	r2, r3
 80087ba:	4b40      	ldr	r3, [pc, #256]	; (80088bc <echo_recv+0x1d8>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4413      	add	r3, r2
 80087c0:	4a3e      	ldr	r2, [pc, #248]	; (80088bc <echo_recv+0x1d8>)
 80087c2:	6013      	str	r3, [r2, #0]

    for(int i=0;i<100;i++){
 80087c4:	2300      	movs	r3, #0
 80087c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80087c8:	e007      	b.n	80087da <echo_recv+0xf6>
    	pData[i]=0x00;
 80087ca:	4a3d      	ldr	r2, [pc, #244]	; (80088c0 <echo_recv+0x1dc>)
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	4413      	add	r3, r2
 80087d0:	2200      	movs	r2, #0
 80087d2:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<100;i++){
 80087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d6:	3301      	adds	r3, #1
 80087d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80087da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087dc:	2b63      	cmp	r3, #99	; 0x63
 80087de:	ddf4      	ble.n	80087ca <echo_recv+0xe6>
    }
    HAL_UART_DMAStop(&huart1);
 80087e0:	4838      	ldr	r0, [pc, #224]	; (80088c4 <echo_recv+0x1e0>)
 80087e2:	f005 f875 	bl	800d8d0 <HAL_UART_DMAStop>
    huart1.hdmarx->Instance->NDTR = 100;
 80087e6:	4b37      	ldr	r3, [pc, #220]	; (80088c4 <echo_recv+0x1e0>)
 80087e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2264      	movs	r2, #100	; 0x64
 80087ee:	605a      	str	r2, [r3, #4]
    HAL_UART_Receive_DMA(&huart1, pData, 100);
 80087f0:	2264      	movs	r2, #100	; 0x64
 80087f2:	4933      	ldr	r1, [pc, #204]	; (80088c0 <echo_recv+0x1dc>)
 80087f4:	4833      	ldr	r0, [pc, #204]	; (80088c4 <echo_recv+0x1e0>)
 80087f6:	f004 ffe7 	bl	800d7c8 <HAL_UART_Receive_DMA>


    HAL_UART_Transmit(&huart1, p->payload, p->len, 10);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6859      	ldr	r1, [r3, #4]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	895a      	ldrh	r2, [r3, #10]
 8008802:	230a      	movs	r3, #10
 8008804:	482f      	ldr	r0, [pc, #188]	; (80088c4 <echo_recv+0x1e0>)
 8008806:	f004 ff4d 	bl	800d6a4 <HAL_UART_Transmit>
    char cmd[p->len];
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	8958      	ldrh	r0, [r3, #10]
 800880e:	466b      	mov	r3, sp
 8008810:	461e      	mov	r6, r3
 8008812:	4603      	mov	r3, r0
 8008814:	3b01      	subs	r3, #1
 8008816:	61bb      	str	r3, [r7, #24]
 8008818:	b281      	uxth	r1, r0
 800881a:	f04f 0200 	mov.w	r2, #0
 800881e:	f04f 0300 	mov.w	r3, #0
 8008822:	f04f 0400 	mov.w	r4, #0
 8008826:	00d4      	lsls	r4, r2, #3
 8008828:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800882c:	00cb      	lsls	r3, r1, #3
 800882e:	b281      	uxth	r1, r0
 8008830:	f04f 0200 	mov.w	r2, #0
 8008834:	f04f 0300 	mov.w	r3, #0
 8008838:	f04f 0400 	mov.w	r4, #0
 800883c:	00d4      	lsls	r4, r2, #3
 800883e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008842:	00cb      	lsls	r3, r1, #3
 8008844:	4603      	mov	r3, r0
 8008846:	3307      	adds	r3, #7
 8008848:	08db      	lsrs	r3, r3, #3
 800884a:	00db      	lsls	r3, r3, #3
 800884c:	ebad 0d03 	sub.w	sp, sp, r3
 8008850:	466b      	mov	r3, sp
 8008852:	3300      	adds	r3, #0
 8008854:	617b      	str	r3, [r7, #20]
    memcpy(cmd, p->payload,p->len);
 8008856:	6978      	ldr	r0, [r7, #20]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6859      	ldr	r1, [r3, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	895b      	ldrh	r3, [r3, #10]
 8008860:	461a      	mov	r2, r3
 8008862:	f015 fc1c 	bl	801e09e <memcpy>

    if((cmd[1] == 0xD1)||(cmd[1] == 0xD0)||(cmd[1] == 0xF6)||(cmd[1] == 0x0F)){
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	785b      	ldrb	r3, [r3, #1]
 800886a:	2bd1      	cmp	r3, #209	; 0xd1
 800886c:	d00b      	beq.n	8008886 <echo_recv+0x1a2>
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	785b      	ldrb	r3, [r3, #1]
 8008872:	2bd0      	cmp	r3, #208	; 0xd0
 8008874:	d007      	beq.n	8008886 <echo_recv+0x1a2>
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	785b      	ldrb	r3, [r3, #1]
 800887a:	2bf6      	cmp	r3, #246	; 0xf6
 800887c:	d003      	beq.n	8008886 <echo_recv+0x1a2>
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	785b      	ldrb	r3, [r3, #1]
 8008882:	2b0f      	cmp	r3, #15
 8008884:	d105      	bne.n	8008892 <echo_recv+0x1ae>
        while(pData[1] == 0x00){
 8008886:	bf00      	nop
 8008888:	4b0d      	ldr	r3, [pc, #52]	; (80088c0 <echo_recv+0x1dc>)
 800888a:	785b      	ldrb	r3, [r3, #1]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d0fb      	beq.n	8008888 <echo_recv+0x1a4>
    if((cmd[1] == 0xD1)||(cmd[1] == 0xD0)||(cmd[1] == 0xF6)||(cmd[1] == 0x0F)){
 8008890:	e002      	b.n	8008898 <echo_recv+0x1b4>
        }
    }
    else
    {

        	HAL_Delay(10);
 8008892:	200a      	movs	r0, #10
 8008894:	f000 ff40 	bl	8009718 <HAL_Delay>

    }

   tcp_write(tpcb, pData, pData[0]+1, 1);
 8008898:	4b09      	ldr	r3, [pc, #36]	; (80088c0 <echo_recv+0x1dc>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	b29b      	uxth	r3, r3
 800889e:	3301      	adds	r3, #1
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	2301      	movs	r3, #1
 80088a4:	4906      	ldr	r1, [pc, #24]	; (80088c0 <echo_recv+0x1dc>)
 80088a6:	68b8      	ldr	r0, [r7, #8]
 80088a8:	f010 ff50 	bl	801974c <tcp_write>

    return ERR_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	46b5      	mov	sp, r6
 80088b0:	46ad      	mov	sp, r5
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3734      	adds	r7, #52	; 0x34
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ba:	bf00      	nop
 80088bc:	200000e0 	.word	0x200000e0
 80088c0:	2000466c 	.word	0x2000466c
 80088c4:	20004c2c 	.word	0x20004c2c

080088c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80088c8:	b480      	push	{r7}
 80088ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80088cc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80088d0:	4b05      	ldr	r3, [pc, #20]	; (80088e8 <__NVIC_SystemReset+0x20>)
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80088d8:	4903      	ldr	r1, [pc, #12]	; (80088e8 <__NVIC_SystemReset+0x20>)
 80088da:	4b04      	ldr	r3, [pc, #16]	; (80088ec <__NVIC_SystemReset+0x24>)
 80088dc:	4313      	orrs	r3, r2
 80088de:	60cb      	str	r3, [r1, #12]
 80088e0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80088e4:	bf00      	nop
 80088e6:	e7fd      	b.n	80088e4 <__NVIC_SystemReset+0x1c>
 80088e8:	e000ed00 	.word	0xe000ed00
 80088ec:	05fa0004 	.word	0x05fa0004

080088f0 <BootActivate>:
** \brief     Bootloader activation function.
** \return    none.
**
****************************************************************************************/
void BootActivate(void)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	af00      	add	r7, sp, #0
  /* perform software reset to activate the bootoader again */
  NVIC_SystemReset();
 80088f4:	f7ff ffe8 	bl	80088c8 <__NVIC_SystemReset>

080088f8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	4a07      	ldr	r2, [pc, #28]	; (8008924 <vApplicationGetIdleTaskMemory+0x2c>)
 8008908:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	4a06      	ldr	r2, [pc, #24]	; (8008928 <vApplicationGetIdleTaskMemory+0x30>)
 800890e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2280      	movs	r2, #128	; 0x80
 8008914:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8008916:	bf00      	nop
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	200000e4 	.word	0x200000e4
 8008928:	20000138 	.word	0x20000138

0800892c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800892c:	b5b0      	push	{r4, r5, r7, lr}
 800892e:	b08a      	sub	sp, #40	; 0x28
 8008930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	VectorBase_Config();
 8008932:	f000 fa8d 	bl	8008e50 <VectorBase_Config>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008936:	f000 fe92 	bl	800965e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800893a:	f000 f853 	bl	80089e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800893e:	f000 f9e5 	bl	8008d0c <MX_GPIO_Init>
  MX_DMA_Init();
 8008942:	f000 f9c5 	bl	8008cd0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8008946:	f000 f965 	bl	8008c14 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800894a:	f000 f993 	bl	8008c74 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800894e:	f000 f8e1 	bl	8008b14 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8008952:	f000 f92f 	bl	8008bb4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SharedParamsWriteByIndex(0, 0);
 8008956:	2100      	movs	r1, #0
 8008958:	2000      	movs	r0, #0
 800895a:	f000 fb2b 	bl	8008fb4 <SharedParamsWriteByIndex>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 800895e:	4b1e      	ldr	r3, [pc, #120]	; (80089d8 <main+0xac>)
 8008960:	1d3c      	adds	r4, r7, #4
 8008962:	461d      	mov	r5, r3
 8008964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008968:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800896c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8008970:	1d3b      	adds	r3, r7, #4
 8008972:	2100      	movs	r1, #0
 8008974:	4618      	mov	r0, r3
 8008976:	f006 fee4 	bl	800f742 <osThreadCreate>
 800897a:	4602      	mov	r2, r0
 800897c:	4b17      	ldr	r3, [pc, #92]	; (80089dc <main+0xb0>)
 800897e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8008980:	f006 fec8 	bl	800f714 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for(int i= 0; i <10 ; i++){
 8008984:	2300      	movs	r3, #0
 8008986:	627b      	str	r3, [r7, #36]	; 0x24
 8008988:	e00b      	b.n	80089a2 <main+0x76>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 800898a:	f244 0181 	movw	r1, #16513	; 0x4081
 800898e:	4814      	ldr	r0, [pc, #80]	; (80089e0 <main+0xb4>)
 8008990:	f002 ff63 	bl	800b85a <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8008994:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008998:	f000 febe 	bl	8009718 <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	3301      	adds	r3, #1
 80089a0:	627b      	str	r3, [r7, #36]	; 0x24
 80089a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a4:	2b09      	cmp	r3, #9
 80089a6:	ddf0      	ble.n	800898a <main+0x5e>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i= 0; i <10 ; i++){
 80089a8:	2300      	movs	r3, #0
 80089aa:	623b      	str	r3, [r7, #32]
 80089ac:	e00a      	b.n	80089c4 <main+0x98>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 80089ae:	f244 0181 	movw	r1, #16513	; 0x4081
 80089b2:	480b      	ldr	r0, [pc, #44]	; (80089e0 <main+0xb4>)
 80089b4:	f002 ff51 	bl	800b85a <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 80089b8:	2032      	movs	r0, #50	; 0x32
 80089ba:	f000 fead 	bl	8009718 <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	3301      	adds	r3, #1
 80089c2:	623b      	str	r3, [r7, #32]
 80089c4:	6a3b      	ldr	r3, [r7, #32]
 80089c6:	2b09      	cmp	r3, #9
 80089c8:	ddf1      	ble.n	80089ae <main+0x82>
	  }
      SharedParamsWriteByIndex(0, 1);
 80089ca:	2101      	movs	r1, #1
 80089cc:	2000      	movs	r0, #0
 80089ce:	f000 faf1 	bl	8008fb4 <SharedParamsWriteByIndex>
      /* connection request received so start the bootloader */
      BootActivate();
 80089d2:	f7ff ff8d 	bl	80088f0 <BootActivate>
	  for(int i= 0; i <10 ; i++){
 80089d6:	e7d5      	b.n	8008984 <main+0x58>
 80089d8:	0801ef68 	.word	0x0801ef68
 80089dc:	20004704 	.word	0x20004704
 80089e0:	40020400 	.word	0x40020400

080089e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b0b8      	sub	sp, #224	; 0xe0
 80089e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80089ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80089ee:	2234      	movs	r2, #52	; 0x34
 80089f0:	2100      	movs	r1, #0
 80089f2:	4618      	mov	r0, r3
 80089f4:	f015 fb5e 	bl	801e0b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80089f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80089fc:	2200      	movs	r2, #0
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	605a      	str	r2, [r3, #4]
 8008a02:	609a      	str	r2, [r3, #8]
 8008a04:	60da      	str	r2, [r3, #12]
 8008a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008a08:	f107 0308 	add.w	r3, r7, #8
 8008a0c:	2290      	movs	r2, #144	; 0x90
 8008a0e:	2100      	movs	r1, #0
 8008a10:	4618      	mov	r0, r3
 8008a12:	f015 fb4f 	bl	801e0b4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8008a16:	f003 f883 	bl	800bb20 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008a1a:	4b3b      	ldr	r3, [pc, #236]	; (8008b08 <SystemClock_Config+0x124>)
 8008a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1e:	4a3a      	ldr	r2, [pc, #232]	; (8008b08 <SystemClock_Config+0x124>)
 8008a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a24:	6413      	str	r3, [r2, #64]	; 0x40
 8008a26:	4b38      	ldr	r3, [pc, #224]	; (8008b08 <SystemClock_Config+0x124>)
 8008a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a2e:	607b      	str	r3, [r7, #4]
 8008a30:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a32:	4b36      	ldr	r3, [pc, #216]	; (8008b0c <SystemClock_Config+0x128>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a35      	ldr	r2, [pc, #212]	; (8008b0c <SystemClock_Config+0x128>)
 8008a38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a3c:	6013      	str	r3, [r2, #0]
 8008a3e:	4b33      	ldr	r3, [pc, #204]	; (8008b0c <SystemClock_Config+0x128>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008a46:	603b      	str	r3, [r7, #0]
 8008a48:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8008a50:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8008a54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008a58:	2302      	movs	r3, #2
 8008a5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008a5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008a62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008a66:	2304      	movs	r3, #4
 8008a68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8008a6c:	23d8      	movs	r3, #216	; 0xd8
 8008a6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008a72:	2302      	movs	r3, #2
 8008a74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8008a78:	2309      	movs	r3, #9
 8008a7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008a7e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008a82:	4618      	mov	r0, r3
 8008a84:	f003 f8ac 	bl	800bbe0 <HAL_RCC_OscConfig>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d001      	beq.n	8008a92 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8008a8e:	f000 fa89 	bl	8008fa4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008a92:	f003 f855 	bl	800bb40 <HAL_PWREx_EnableOverDrive>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8008a9c:	f000 fa82 	bl	8008fa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008aa0:	230f      	movs	r3, #15
 8008aa2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008aa6:	2302      	movs	r3, #2
 8008aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008aac:	2300      	movs	r3, #0
 8008aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008ab2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008abe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008ac2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008ac6:	2107      	movs	r1, #7
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f003 fb37 	bl	800c13c <HAL_RCC_ClockConfig>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8008ad4:	f000 fa66 	bl	8008fa4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8008ad8:	4b0d      	ldr	r3, [pc, #52]	; (8008b10 <SystemClock_Config+0x12c>)
 8008ada:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008adc:	2300      	movs	r3, #0
 8008ade:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008aea:	f107 0308 	add.w	r3, r7, #8
 8008aee:	4618      	mov	r0, r3
 8008af0:	f003 fd1c 	bl	800c52c <HAL_RCCEx_PeriphCLKConfig>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8008afa:	f000 fa53 	bl	8008fa4 <Error_Handler>
  }
}
 8008afe:	bf00      	nop
 8008b00:	37e0      	adds	r7, #224	; 0xe0
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	40023800 	.word	0x40023800
 8008b0c:	40007000 	.word	0x40007000
 8008b10:	00200140 	.word	0x00200140

08008b14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008b1a:	f107 0310 	add.w	r3, r7, #16
 8008b1e:	2200      	movs	r2, #0
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	605a      	str	r2, [r3, #4]
 8008b24:	609a      	str	r2, [r3, #8]
 8008b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b28:	1d3b      	adds	r3, r7, #4
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	605a      	str	r2, [r3, #4]
 8008b30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008b32:	4b1d      	ldr	r3, [pc, #116]	; (8008ba8 <MX_TIM3_Init+0x94>)
 8008b34:	4a1d      	ldr	r2, [pc, #116]	; (8008bac <MX_TIM3_Init+0x98>)
 8008b36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 216;
 8008b38:	4b1b      	ldr	r3, [pc, #108]	; (8008ba8 <MX_TIM3_Init+0x94>)
 8008b3a:	22d8      	movs	r2, #216	; 0xd8
 8008b3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b3e:	4b1a      	ldr	r3, [pc, #104]	; (8008ba8 <MX_TIM3_Init+0x94>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100000;
 8008b44:	4b18      	ldr	r3, [pc, #96]	; (8008ba8 <MX_TIM3_Init+0x94>)
 8008b46:	4a1a      	ldr	r2, [pc, #104]	; (8008bb0 <MX_TIM3_Init+0x9c>)
 8008b48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b4a:	4b17      	ldr	r3, [pc, #92]	; (8008ba8 <MX_TIM3_Init+0x94>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b50:	4b15      	ldr	r3, [pc, #84]	; (8008ba8 <MX_TIM3_Init+0x94>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008b56:	4814      	ldr	r0, [pc, #80]	; (8008ba8 <MX_TIM3_Init+0x94>)
 8008b58:	f004 f90e 	bl	800cd78 <HAL_TIM_Base_Init>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8008b62:	f000 fa1f 	bl	8008fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008b6c:	f107 0310 	add.w	r3, r7, #16
 8008b70:	4619      	mov	r1, r3
 8008b72:	480d      	ldr	r0, [pc, #52]	; (8008ba8 <MX_TIM3_Init+0x94>)
 8008b74:	f004 fa76 	bl	800d064 <HAL_TIM_ConfigClockSource>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8008b7e:	f000 fa11 	bl	8008fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b82:	2300      	movs	r3, #0
 8008b84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b86:	2300      	movs	r3, #0
 8008b88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008b8a:	1d3b      	adds	r3, r7, #4
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4806      	ldr	r0, [pc, #24]	; (8008ba8 <MX_TIM3_Init+0x94>)
 8008b90:	f004 fc8e 	bl	800d4b0 <HAL_TIMEx_MasterConfigSynchronization>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d001      	beq.n	8008b9e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8008b9a:	f000 fa03 	bl	8008fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8008b9e:	bf00      	nop
 8008ba0:	3720      	adds	r7, #32
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20004b8c 	.word	0x20004b8c
 8008bac:	40000400 	.word	0x40000400
 8008bb0:	000186a0 	.word	0x000186a0

08008bb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008bb8:	4b14      	ldr	r3, [pc, #80]	; (8008c0c <MX_USART1_UART_Init+0x58>)
 8008bba:	4a15      	ldr	r2, [pc, #84]	; (8008c10 <MX_USART1_UART_Init+0x5c>)
 8008bbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8008bbe:	4b13      	ldr	r3, [pc, #76]	; (8008c0c <MX_USART1_UART_Init+0x58>)
 8008bc0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8008bc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008bc6:	4b11      	ldr	r3, [pc, #68]	; (8008c0c <MX_USART1_UART_Init+0x58>)
 8008bc8:	2200      	movs	r2, #0
 8008bca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008bcc:	4b0f      	ldr	r3, [pc, #60]	; (8008c0c <MX_USART1_UART_Init+0x58>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008bd2:	4b0e      	ldr	r3, [pc, #56]	; (8008c0c <MX_USART1_UART_Init+0x58>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008bd8:	4b0c      	ldr	r3, [pc, #48]	; (8008c0c <MX_USART1_UART_Init+0x58>)
 8008bda:	220c      	movs	r2, #12
 8008bdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008bde:	4b0b      	ldr	r3, [pc, #44]	; (8008c0c <MX_USART1_UART_Init+0x58>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008be4:	4b09      	ldr	r3, [pc, #36]	; (8008c0c <MX_USART1_UART_Init+0x58>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008bea:	4b08      	ldr	r3, [pc, #32]	; (8008c0c <MX_USART1_UART_Init+0x58>)
 8008bec:	2200      	movs	r2, #0
 8008bee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008bf0:	4b06      	ldr	r3, [pc, #24]	; (8008c0c <MX_USART1_UART_Init+0x58>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008bf6:	4805      	ldr	r0, [pc, #20]	; (8008c0c <MX_USART1_UART_Init+0x58>)
 8008bf8:	f004 fd06 	bl	800d608 <HAL_UART_Init>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d001      	beq.n	8008c06 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8008c02:	f000 f9cf 	bl	8008fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008c06:	bf00      	nop
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	20004c2c 	.word	0x20004c2c
 8008c10:	40011000 	.word	0x40011000

08008c14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008c18:	4b14      	ldr	r3, [pc, #80]	; (8008c6c <MX_USART3_UART_Init+0x58>)
 8008c1a:	4a15      	ldr	r2, [pc, #84]	; (8008c70 <MX_USART3_UART_Init+0x5c>)
 8008c1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008c1e:	4b13      	ldr	r3, [pc, #76]	; (8008c6c <MX_USART3_UART_Init+0x58>)
 8008c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008c24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008c26:	4b11      	ldr	r3, [pc, #68]	; (8008c6c <MX_USART3_UART_Init+0x58>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008c2c:	4b0f      	ldr	r3, [pc, #60]	; (8008c6c <MX_USART3_UART_Init+0x58>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008c32:	4b0e      	ldr	r3, [pc, #56]	; (8008c6c <MX_USART3_UART_Init+0x58>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008c38:	4b0c      	ldr	r3, [pc, #48]	; (8008c6c <MX_USART3_UART_Init+0x58>)
 8008c3a:	220c      	movs	r2, #12
 8008c3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c3e:	4b0b      	ldr	r3, [pc, #44]	; (8008c6c <MX_USART3_UART_Init+0x58>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008c44:	4b09      	ldr	r3, [pc, #36]	; (8008c6c <MX_USART3_UART_Init+0x58>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008c4a:	4b08      	ldr	r3, [pc, #32]	; (8008c6c <MX_USART3_UART_Init+0x58>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008c50:	4b06      	ldr	r3, [pc, #24]	; (8008c6c <MX_USART3_UART_Init+0x58>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008c56:	4805      	ldr	r0, [pc, #20]	; (8008c6c <MX_USART3_UART_Init+0x58>)
 8008c58:	f004 fcd6 	bl	800d608 <HAL_UART_Init>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8008c62:	f000 f99f 	bl	8008fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008c66:	bf00      	nop
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	20004708 	.word	0x20004708
 8008c70:	40004800 	.word	0x40004800

08008c74 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c78:	4b14      	ldr	r3, [pc, #80]	; (8008ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008c7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008c80:	4b12      	ldr	r3, [pc, #72]	; (8008ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008c82:	2206      	movs	r2, #6
 8008c84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008c86:	4b11      	ldr	r3, [pc, #68]	; (8008ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008c88:	2202      	movs	r2, #2
 8008c8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c8c:	4b0f      	ldr	r3, [pc, #60]	; (8008ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008c8e:	2200      	movs	r2, #0
 8008c90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c92:	4b0e      	ldr	r3, [pc, #56]	; (8008ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008c94:	2202      	movs	r2, #2
 8008c96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008c98:	4b0c      	ldr	r3, [pc, #48]	; (8008ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c9e:	4b0b      	ldr	r3, [pc, #44]	; (8008ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ca4:	4b09      	ldr	r3, [pc, #36]	; (8008ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008caa:	4b08      	ldr	r3, [pc, #32]	; (8008ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008cac:	2201      	movs	r2, #1
 8008cae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008cb0:	4b06      	ldr	r3, [pc, #24]	; (8008ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008cb6:	4805      	ldr	r0, [pc, #20]	; (8008ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008cb8:	f002 fde9 	bl	800b88e <HAL_PCD_Init>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8008cc2:	f000 f96f 	bl	8008fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8008cc6:	bf00      	nop
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	20004788 	.word	0x20004788

08008cd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008cd6:	4b0c      	ldr	r3, [pc, #48]	; (8008d08 <MX_DMA_Init+0x38>)
 8008cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cda:	4a0b      	ldr	r2, [pc, #44]	; (8008d08 <MX_DMA_Init+0x38>)
 8008cdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ce2:	4b09      	ldr	r3, [pc, #36]	; (8008d08 <MX_DMA_Init+0x38>)
 8008ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cea:	607b      	str	r3, [r7, #4]
 8008cec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8008cee:	2200      	movs	r2, #0
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	203a      	movs	r0, #58	; 0x3a
 8008cf4:	f000 fe0d 	bl	8009912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8008cf8:	203a      	movs	r0, #58	; 0x3a
 8008cfa:	f000 fe26 	bl	800994a <HAL_NVIC_EnableIRQ>

}
 8008cfe:	bf00      	nop
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	40023800 	.word	0x40023800

08008d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b08c      	sub	sp, #48	; 0x30
 8008d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d12:	f107 031c 	add.w	r3, r7, #28
 8008d16:	2200      	movs	r2, #0
 8008d18:	601a      	str	r2, [r3, #0]
 8008d1a:	605a      	str	r2, [r3, #4]
 8008d1c:	609a      	str	r2, [r3, #8]
 8008d1e:	60da      	str	r2, [r3, #12]
 8008d20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d22:	4b46      	ldr	r3, [pc, #280]	; (8008e3c <MX_GPIO_Init+0x130>)
 8008d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d26:	4a45      	ldr	r2, [pc, #276]	; (8008e3c <MX_GPIO_Init+0x130>)
 8008d28:	f043 0304 	orr.w	r3, r3, #4
 8008d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d2e:	4b43      	ldr	r3, [pc, #268]	; (8008e3c <MX_GPIO_Init+0x130>)
 8008d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d32:	f003 0304 	and.w	r3, r3, #4
 8008d36:	61bb      	str	r3, [r7, #24]
 8008d38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008d3a:	4b40      	ldr	r3, [pc, #256]	; (8008e3c <MX_GPIO_Init+0x130>)
 8008d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3e:	4a3f      	ldr	r2, [pc, #252]	; (8008e3c <MX_GPIO_Init+0x130>)
 8008d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d44:	6313      	str	r3, [r2, #48]	; 0x30
 8008d46:	4b3d      	ldr	r3, [pc, #244]	; (8008e3c <MX_GPIO_Init+0x130>)
 8008d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d4e:	617b      	str	r3, [r7, #20]
 8008d50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d52:	4b3a      	ldr	r3, [pc, #232]	; (8008e3c <MX_GPIO_Init+0x130>)
 8008d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d56:	4a39      	ldr	r2, [pc, #228]	; (8008e3c <MX_GPIO_Init+0x130>)
 8008d58:	f043 0301 	orr.w	r3, r3, #1
 8008d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d5e:	4b37      	ldr	r3, [pc, #220]	; (8008e3c <MX_GPIO_Init+0x130>)
 8008d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d62:	f003 0301 	and.w	r3, r3, #1
 8008d66:	613b      	str	r3, [r7, #16]
 8008d68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d6a:	4b34      	ldr	r3, [pc, #208]	; (8008e3c <MX_GPIO_Init+0x130>)
 8008d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6e:	4a33      	ldr	r2, [pc, #204]	; (8008e3c <MX_GPIO_Init+0x130>)
 8008d70:	f043 0302 	orr.w	r3, r3, #2
 8008d74:	6313      	str	r3, [r2, #48]	; 0x30
 8008d76:	4b31      	ldr	r3, [pc, #196]	; (8008e3c <MX_GPIO_Init+0x130>)
 8008d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7a:	f003 0302 	and.w	r3, r3, #2
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008d82:	4b2e      	ldr	r3, [pc, #184]	; (8008e3c <MX_GPIO_Init+0x130>)
 8008d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d86:	4a2d      	ldr	r2, [pc, #180]	; (8008e3c <MX_GPIO_Init+0x130>)
 8008d88:	f043 0308 	orr.w	r3, r3, #8
 8008d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d8e:	4b2b      	ldr	r3, [pc, #172]	; (8008e3c <MX_GPIO_Init+0x130>)
 8008d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d92:	f003 0308 	and.w	r3, r3, #8
 8008d96:	60bb      	str	r3, [r7, #8]
 8008d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008d9a:	4b28      	ldr	r3, [pc, #160]	; (8008e3c <MX_GPIO_Init+0x130>)
 8008d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9e:	4a27      	ldr	r2, [pc, #156]	; (8008e3c <MX_GPIO_Init+0x130>)
 8008da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008da4:	6313      	str	r3, [r2, #48]	; 0x30
 8008da6:	4b25      	ldr	r3, [pc, #148]	; (8008e3c <MX_GPIO_Init+0x130>)
 8008da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dae:	607b      	str	r3, [r7, #4]
 8008db0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8008db2:	2200      	movs	r2, #0
 8008db4:	f244 0181 	movw	r1, #16513	; 0x4081
 8008db8:	4821      	ldr	r0, [pc, #132]	; (8008e40 <MX_GPIO_Init+0x134>)
 8008dba:	f002 fd35 	bl	800b828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	2140      	movs	r1, #64	; 0x40
 8008dc2:	4820      	ldr	r0, [pc, #128]	; (8008e44 <MX_GPIO_Init+0x138>)
 8008dc4:	f002 fd30 	bl	800b828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8008dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008dce:	4b1e      	ldr	r3, [pc, #120]	; (8008e48 <MX_GPIO_Init+0x13c>)
 8008dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8008dd6:	f107 031c 	add.w	r3, r7, #28
 8008dda:	4619      	mov	r1, r3
 8008ddc:	481b      	ldr	r0, [pc, #108]	; (8008e4c <MX_GPIO_Init+0x140>)
 8008dde:	f002 fb79 	bl	800b4d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8008de2:	f244 0381 	movw	r3, #16513	; 0x4081
 8008de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008de8:	2301      	movs	r3, #1
 8008dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dec:	2300      	movs	r3, #0
 8008dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008df0:	2300      	movs	r3, #0
 8008df2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008df4:	f107 031c 	add.w	r3, r7, #28
 8008df8:	4619      	mov	r1, r3
 8008dfa:	4811      	ldr	r0, [pc, #68]	; (8008e40 <MX_GPIO_Init+0x134>)
 8008dfc:	f002 fb6a 	bl	800b4d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8008e00:	2340      	movs	r3, #64	; 0x40
 8008e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e04:	2301      	movs	r3, #1
 8008e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8008e10:	f107 031c 	add.w	r3, r7, #28
 8008e14:	4619      	mov	r1, r3
 8008e16:	480b      	ldr	r0, [pc, #44]	; (8008e44 <MX_GPIO_Init+0x138>)
 8008e18:	f002 fb5c 	bl	800b4d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8008e1c:	2380      	movs	r3, #128	; 0x80
 8008e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e20:	2300      	movs	r3, #0
 8008e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e24:	2300      	movs	r3, #0
 8008e26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008e28:	f107 031c 	add.w	r3, r7, #28
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	4805      	ldr	r0, [pc, #20]	; (8008e44 <MX_GPIO_Init+0x138>)
 8008e30:	f002 fb50 	bl	800b4d4 <HAL_GPIO_Init>

}
 8008e34:	bf00      	nop
 8008e36:	3730      	adds	r7, #48	; 0x30
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	40023800 	.word	0x40023800
 8008e40:	40020400 	.word	0x40020400
 8008e44:	40021800 	.word	0x40021800
 8008e48:	10110000 	.word	0x10110000
 8008e4c:	40020800 	.word	0x40020800

08008e50 <VectorBase_Config>:

/* USER CODE BEGIN 4 */
static void VectorBase_Config(void)
{
 8008e50:	b480      	push	{r7}
 8008e52:	af00      	add	r7, sp, #0
   * c-startup code.
   */
  extern const unsigned long g_pfnVectors[];

  /* Remap the vector table to where the vector table is located for this program. */
  SCB->VTOR = (unsigned long)&g_pfnVectors[0];
 8008e54:	4b03      	ldr	r3, [pc, #12]	; (8008e64 <VectorBase_Config+0x14>)
 8008e56:	4a04      	ldr	r2, [pc, #16]	; (8008e68 <VectorBase_Config+0x18>)
 8008e58:	609a      	str	r2, [r3, #8]
}
 8008e5a:	bf00      	nop
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	e000ed00 	.word	0xe000ed00
 8008e68:	08008000 	.word	0x08008000

08008e6c <recv_callback>:
//https://www.xilinx.com/video/soc/networking-with-lwip-focused-free-rtos.html
//When we recive something we come here to accept the connection wish or not
err_t err;

err_t
recv_callback(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err){
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b092      	sub	sp, #72	; 0x48
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
 8008e78:	70fb      	strb	r3, [r7, #3]

	char recived[50];

	tcp_recved(tpcb, p->len);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	895b      	ldrh	r3, [r3, #10]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	68b8      	ldr	r0, [r7, #8]
 8008e82:	f00c fe3f 	bl	8015b04 <tcp_recved>

	memcpy(recived, p -> payload, p -> len); //put the incoming udp data to UDP_RECIVE
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6859      	ldr	r1, [r3, #4]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	895b      	ldrh	r3, [r3, #10]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f107 0314 	add.w	r3, r7, #20
 8008e94:	4618      	mov	r0, r3
 8008e96:	f015 f902 	bl	801e09e <memcpy>

	pbuf_free(p);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f00b fecc 	bl	8014c38 <pbuf_free>
}
 8008ea0:	bf00      	nop
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3748      	adds	r7, #72	; 0x48
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
	...

08008eac <accept_callback>:




err_t
accept_callback(void *arg, struct tcp_pcb *newpcb, err_t err){
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	71fb      	strb	r3, [r7, #7]


	tcp_arg(newpcb,NULL);
 8008eba:	2100      	movs	r1, #0
 8008ebc:	68b8      	ldr	r0, [r7, #8]
 8008ebe:	f00d fd09 	bl	80168d4 <tcp_arg>
	tcp_recv(newpcb, recv_callback);
 8008ec2:	4907      	ldr	r1, [pc, #28]	; (8008ee0 <accept_callback+0x34>)
 8008ec4:	68b8      	ldr	r0, [r7, #8]
 8008ec6:	f00d fd17 	bl	80168f8 <tcp_recv>

	//Fire the Bootloader
	SharedParamsWriteByIndex(0, 1);
 8008eca:	2101      	movs	r1, #1
 8008ecc:	2000      	movs	r0, #0
 8008ece:	f000 f871 	bl	8008fb4 <SharedParamsWriteByIndex>
	BootActivate();
 8008ed2:	f7ff fd0d 	bl	80088f0 <BootActivate>
}
 8008ed6:	bf00      	nop
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	08008e6d 	.word	0x08008e6d

08008ee4 <StartDefaultTask>:



/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8008eec:	f005 fe70 	bl	800ebd0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  httpd_init();
 8008ef0:	f00a faa4 	bl	801343c <httpd_init>
  HAL_TIM_Base_Start_IT(&htim3);
 8008ef4:	4826      	ldr	r0, [pc, #152]	; (8008f90 <StartDefaultTask+0xac>)
 8008ef6:	f003 ff6b 	bl	800cdd0 <HAL_TIM_Base_Start_IT>

  UartBridge_init();
 8008efa:	f7ff fb89 	bl	8008610 <UartBridge_init>
  static struct tcp_pcb *pcb;
  err_t err;
  pcb = tcp_new();
 8008efe:	f00d fcd3 	bl	80168a8 <tcp_new>
 8008f02:	4602      	mov	r2, r0
 8008f04:	4b23      	ldr	r3, [pc, #140]	; (8008f94 <StartDefaultTask+0xb0>)
 8008f06:	601a      	str	r2, [r3, #0]
  err = tcp_bind(pcb, IP_ADDR_ANY, 1000);
 8008f08:	4b22      	ldr	r3, [pc, #136]	; (8008f94 <StartDefaultTask+0xb0>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f10:	4921      	ldr	r1, [pc, #132]	; (8008f98 <StartDefaultTask+0xb4>)
 8008f12:	4618      	mov	r0, r3
 8008f14:	f00c fc28 	bl	8015768 <tcp_bind>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73fb      	strb	r3, [r7, #15]
  tcp_arg(pcb,NULL);
 8008f1c:	4b1d      	ldr	r3, [pc, #116]	; (8008f94 <StartDefaultTask+0xb0>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2100      	movs	r1, #0
 8008f22:	4618      	mov	r0, r3
 8008f24:	f00d fcd6 	bl	80168d4 <tcp_arg>
  pcb = tcp_listen(pcb);
 8008f28:	4b1a      	ldr	r3, [pc, #104]	; (8008f94 <StartDefaultTask+0xb0>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	21ff      	movs	r1, #255	; 0xff
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f00c fcd2 	bl	80158d8 <tcp_listen_with_backlog>
 8008f34:	4602      	mov	r2, r0
 8008f36:	4b17      	ldr	r3, [pc, #92]	; (8008f94 <StartDefaultTask+0xb0>)
 8008f38:	601a      	str	r2, [r3, #0]
  tcp_accept(pcb, accept_callback);
 8008f3a:	4b16      	ldr	r3, [pc, #88]	; (8008f94 <StartDefaultTask+0xb0>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4917      	ldr	r1, [pc, #92]	; (8008f9c <StartDefaultTask+0xb8>)
 8008f40:	4618      	mov	r0, r3
 8008f42:	f00d fd3f 	bl	80169c4 <tcp_accept>


  /* Infinite loop */
  for(;;)
  {
	  for(int i= 0; i <30; i++){
 8008f46:	2300      	movs	r3, #0
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	e009      	b.n	8008f60 <StartDefaultTask+0x7c>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8008f4c:	2101      	movs	r1, #1
 8008f4e:	4814      	ldr	r0, [pc, #80]	; (8008fa0 <StartDefaultTask+0xbc>)
 8008f50:	f002 fc83 	bl	800b85a <HAL_GPIO_TogglePin>
		  HAL_Delay(250);
 8008f54:	20fa      	movs	r0, #250	; 0xfa
 8008f56:	f000 fbdf 	bl	8009718 <HAL_Delay>
	  for(int i= 0; i <30; i++){
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	617b      	str	r3, [r7, #20]
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	2b1d      	cmp	r3, #29
 8008f64:	ddf2      	ble.n	8008f4c <StartDefaultTask+0x68>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i= 0; i <10 ; i++){
 8008f66:	2300      	movs	r3, #0
 8008f68:	613b      	str	r3, [r7, #16]
 8008f6a:	e00d      	b.n	8008f88 <StartDefaultTask+0xa4>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8008f6c:	2101      	movs	r1, #1
 8008f6e:	480c      	ldr	r0, [pc, #48]	; (8008fa0 <StartDefaultTask+0xbc>)
 8008f70:	f002 fc73 	bl	800b85a <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8008f74:	2180      	movs	r1, #128	; 0x80
 8008f76:	480a      	ldr	r0, [pc, #40]	; (8008fa0 <StartDefaultTask+0xbc>)
 8008f78:	f002 fc6f 	bl	800b85a <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 8008f7c:	2032      	movs	r0, #50	; 0x32
 8008f7e:	f000 fbcb 	bl	8009718 <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	3301      	adds	r3, #1
 8008f86:	613b      	str	r3, [r7, #16]
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	2b09      	cmp	r3, #9
 8008f8c:	ddee      	ble.n	8008f6c <StartDefaultTask+0x88>
	  for(int i= 0; i <30; i++){
 8008f8e:	e7da      	b.n	8008f46 <StartDefaultTask+0x62>
 8008f90:	20004b8c 	.word	0x20004b8c
 8008f94:	20000338 	.word	0x20000338
 8008f98:	08032940 	.word	0x08032940
 8008f9c:	08008ead 	.word	0x08008ead
 8008fa0:	40020400 	.word	0x40020400

08008fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008fa8:	bf00      	nop
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
	...

08008fb4 <SharedParamsWriteByIndex>:
** \param     value Value to write.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
bool SharedParamsWriteByIndex(uint32_t idx, uint8_t value)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	70fb      	strb	r3, [r7, #3]
  bool result = false;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	73fb      	strb	r3, [r7, #15]

  /* Only continue if the buffer and the specified parameters are valid. */
  if ( (SharedParamsValidateBuffer()) &&
 8008fc4:	f000 f818 	bl	8008ff8 <SharedParamsValidateBuffer>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00c      	beq.n	8008fe8 <SharedParamsWriteByIndex+0x34>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b37      	cmp	r3, #55	; 0x37
 8008fd2:	d809      	bhi.n	8008fe8 <SharedParamsWriteByIndex+0x34>
       (idx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN) )
  {
    /* Write the value. */
    sharedParamsBuffer.data[idx] = value;
 8008fd4:	4a07      	ldr	r2, [pc, #28]	; (8008ff4 <SharedParamsWriteByIndex+0x40>)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4413      	add	r3, r2
 8008fda:	3304      	adds	r3, #4
 8008fdc:	78fa      	ldrb	r2, [r7, #3]
 8008fde:	701a      	strb	r2, [r3, #0]
    /* Update the checksum since the contents were just changed. */
    SharedParamsWriteChecksum();
 8008fe0:	f000 f824 	bl	800902c <SharedParamsWriteChecksum>
    /* Update the result. */
    result = true;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	73fb      	strb	r3, [r7, #15]
  }
  /* Give the result back to the caller. */
  return result;
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of SharedParamsWriteByIndex ***/
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	20000000 	.word	0x20000000

08008ff8 <SharedParamsValidateBuffer>:
**            identifier and verifying its checksum.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
static bool SharedParamsValidateBuffer(void)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
  bool result = false;
 8008ffe:	2300      	movs	r3, #0
 8009000:	71fb      	strb	r3, [r7, #7]

  /* Perform validation. */
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 8009002:	4b08      	ldr	r3, [pc, #32]	; (8009024 <SharedParamsValidateBuffer+0x2c>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a08      	ldr	r2, [pc, #32]	; (8009028 <SharedParamsValidateBuffer+0x30>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d106      	bne.n	800901a <SharedParamsValidateBuffer+0x22>
       (SharedParamsVerifyChecksum()) )
 800900c:	f000 f81a 	bl	8009044 <SharedParamsVerifyChecksum>
 8009010:	4603      	mov	r3, r0
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <SharedParamsValidateBuffer+0x22>
  {
    /* The shared parameter buffer is valid, so update the result value. */
    result = true;
 8009016:	2301      	movs	r3, #1
 8009018:	71fb      	strb	r3, [r7, #7]
  }
  /* Give the result back to the caller. */
  return result;
 800901a:	79fb      	ldrb	r3, [r7, #7]
} /*** end of SharedParamsValitabeTable ***/
 800901c:	4618      	mov	r0, r3
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	20000000 	.word	0x20000000
 8009028:	ce42e7a2 	.word	0xce42e7a2

0800902c <SharedParamsWriteChecksum>:
** \brief     Calculates and writes the checksum into the buffer.
** \return    none.
**
****************************************************************************************/
static void SharedParamsWriteChecksum(void)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	af00      	add	r7, sp, #0
  /* Calculate and write the checksum. */
  sharedParamsBuffer.checksum = SharedParamsCalculateChecksum();
 8009030:	f000 f81e 	bl	8009070 <SharedParamsCalculateChecksum>
 8009034:	4603      	mov	r3, r0
 8009036:	461a      	mov	r2, r3
 8009038:	4b01      	ldr	r3, [pc, #4]	; (8009040 <SharedParamsWriteChecksum+0x14>)
 800903a:	879a      	strh	r2, [r3, #60]	; 0x3c
} /*** end of SharedParamsWriteChecksum ***/
 800903c:	bf00      	nop
 800903e:	bd80      	pop	{r7, pc}
 8009040:	20000000 	.word	0x20000000

08009044 <SharedParamsVerifyChecksum>:
**            buffer.
** \return    True is the checksum is correct, false otherwise.
**
****************************************************************************************/
static bool SharedParamsVerifyChecksum(void)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
  bool result = false;
 800904a:	2300      	movs	r3, #0
 800904c:	71fb      	strb	r3, [r7, #7]

  /* Calculate and verify the checksum. */
  if (SharedParamsCalculateChecksum() == sharedParamsBuffer.checksum)
 800904e:	f000 f80f 	bl	8009070 <SharedParamsCalculateChecksum>
 8009052:	4603      	mov	r3, r0
 8009054:	461a      	mov	r2, r3
 8009056:	4b05      	ldr	r3, [pc, #20]	; (800906c <SharedParamsVerifyChecksum+0x28>)
 8009058:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800905a:	429a      	cmp	r2, r3
 800905c:	d101      	bne.n	8009062 <SharedParamsVerifyChecksum+0x1e>
  {
    /* Checksum is correct, so update the result value. */
    result = true;
 800905e:	2301      	movs	r3, #1
 8009060:	71fb      	strb	r3, [r7, #7]
  }
  /* Give the result back to the caller. */
  return result;
 8009062:	79fb      	ldrb	r3, [r7, #7]
} /*** end of SharedParamsVerifyChecksum ***/
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	20000000 	.word	0x20000000

08009070 <SharedParamsCalculateChecksum>:
**            two's complement value of it.
** \return    The calculated checksum value.
**
****************************************************************************************/
static uint16_t SharedParamsCalculateChecksum(void)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
  uint16_t result = 0;
 8009076:	2300      	movs	r3, #0
 8009078:	80fb      	strh	r3, [r7, #6]
  uint32_t byteIdx;

  /* Add the identifier bytes to the checksum. */
  result += (uint8_t)sharedParamsBuffer.identifier;
 800907a:	4b1f      	ldr	r3, [pc, #124]	; (80090f8 <SharedParamsCalculateChecksum+0x88>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	b2db      	uxtb	r3, r3
 8009080:	b29a      	uxth	r2, r3
 8009082:	88fb      	ldrh	r3, [r7, #6]
 8009084:	4413      	add	r3, r2
 8009086:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 8u);
 8009088:	4b1b      	ldr	r3, [pc, #108]	; (80090f8 <SharedParamsCalculateChecksum+0x88>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	0a1b      	lsrs	r3, r3, #8
 800908e:	b2db      	uxtb	r3, r3
 8009090:	b29a      	uxth	r2, r3
 8009092:	88fb      	ldrh	r3, [r7, #6]
 8009094:	4413      	add	r3, r2
 8009096:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 16u);
 8009098:	4b17      	ldr	r3, [pc, #92]	; (80090f8 <SharedParamsCalculateChecksum+0x88>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	0c1b      	lsrs	r3, r3, #16
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	88fb      	ldrh	r3, [r7, #6]
 80090a4:	4413      	add	r3, r2
 80090a6:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 24u);
 80090a8:	4b13      	ldr	r3, [pc, #76]	; (80090f8 <SharedParamsCalculateChecksum+0x88>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	0e1b      	lsrs	r3, r3, #24
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	88fb      	ldrh	r3, [r7, #6]
 80090b4:	4413      	add	r3, r2
 80090b6:	80fb      	strh	r3, [r7, #6]
  /* Loop through the parameter data array. */
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 80090b8:	2300      	movs	r3, #0
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	e00b      	b.n	80090d6 <SharedParamsCalculateChecksum+0x66>
  {
    /* Add parameter data byte to the checksum. */
    result += (uint8_t)sharedParamsBuffer.data[byteIdx];
 80090be:	4a0e      	ldr	r2, [pc, #56]	; (80090f8 <SharedParamsCalculateChecksum+0x88>)
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	4413      	add	r3, r2
 80090c4:	3304      	adds	r3, #4
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	88fb      	ldrh	r3, [r7, #6]
 80090cc:	4413      	add	r3, r2
 80090ce:	80fb      	strh	r3, [r7, #6]
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	3301      	adds	r3, #1
 80090d4:	603b      	str	r3, [r7, #0]
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b37      	cmp	r3, #55	; 0x37
 80090da:	d9f0      	bls.n	80090be <SharedParamsCalculateChecksum+0x4e>
  }
  /* Determine one's complement. */
  result = ~result;
 80090dc:	88fb      	ldrh	r3, [r7, #6]
 80090de:	43db      	mvns	r3, r3
 80090e0:	80fb      	strh	r3, [r7, #6]
  /* Determine two's complement. */
  result += 1;
 80090e2:	88fb      	ldrh	r3, [r7, #6]
 80090e4:	3301      	adds	r3, #1
 80090e6:	80fb      	strh	r3, [r7, #6]
  /* Give the result back to the caller. */
  return result;
 80090e8:	88fb      	ldrh	r3, [r7, #6]
} /*** end of SharedParamsCalculateChecksum ***/
 80090ea:	4618      	mov	r0, r3
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	20000000 	.word	0x20000000

080090fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009102:	4b1d      	ldr	r3, [pc, #116]	; (8009178 <HAL_MspInit+0x7c>)
 8009104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009106:	4a1c      	ldr	r2, [pc, #112]	; (8009178 <HAL_MspInit+0x7c>)
 8009108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800910c:	6413      	str	r3, [r2, #64]	; 0x40
 800910e:	4b1a      	ldr	r3, [pc, #104]	; (8009178 <HAL_MspInit+0x7c>)
 8009110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009116:	607b      	str	r3, [r7, #4]
 8009118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800911a:	4b17      	ldr	r3, [pc, #92]	; (8009178 <HAL_MspInit+0x7c>)
 800911c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800911e:	4a16      	ldr	r2, [pc, #88]	; (8009178 <HAL_MspInit+0x7c>)
 8009120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009124:	6453      	str	r3, [r2, #68]	; 0x44
 8009126:	4b14      	ldr	r3, [pc, #80]	; (8009178 <HAL_MspInit+0x7c>)
 8009128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800912a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800912e:	603b      	str	r3, [r7, #0]
 8009130:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 10, 0);
 8009132:	2200      	movs	r2, #0
 8009134:	210a      	movs	r1, #10
 8009136:	f06f 000b 	mvn.w	r0, #11
 800913a:	f000 fbea 	bl	8009912 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 10, 0);
 800913e:	2200      	movs	r2, #0
 8009140:	210a      	movs	r1, #10
 8009142:	f06f 000a 	mvn.w	r0, #10
 8009146:	f000 fbe4 	bl	8009912 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 10, 0);
 800914a:	2200      	movs	r2, #0
 800914c:	210a      	movs	r1, #10
 800914e:	f06f 0009 	mvn.w	r0, #9
 8009152:	f000 fbde 	bl	8009912 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 10, 0);
 8009156:	2200      	movs	r2, #0
 8009158:	210a      	movs	r1, #10
 800915a:	f06f 0003 	mvn.w	r0, #3
 800915e:	f000 fbd8 	bl	8009912 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009162:	2200      	movs	r2, #0
 8009164:	210f      	movs	r1, #15
 8009166:	f06f 0001 	mvn.w	r0, #1
 800916a:	f000 fbd2 	bl	8009912 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800916e:	bf00      	nop
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	40023800 	.word	0x40023800

0800917c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a0d      	ldr	r2, [pc, #52]	; (80091c0 <HAL_TIM_Base_MspInit+0x44>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d113      	bne.n	80091b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800918e:	4b0d      	ldr	r3, [pc, #52]	; (80091c4 <HAL_TIM_Base_MspInit+0x48>)
 8009190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009192:	4a0c      	ldr	r2, [pc, #48]	; (80091c4 <HAL_TIM_Base_MspInit+0x48>)
 8009194:	f043 0302 	orr.w	r3, r3, #2
 8009198:	6413      	str	r3, [r2, #64]	; 0x40
 800919a:	4b0a      	ldr	r3, [pc, #40]	; (80091c4 <HAL_TIM_Base_MspInit+0x48>)
 800919c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919e:	f003 0302 	and.w	r3, r3, #2
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80091a6:	2200      	movs	r2, #0
 80091a8:	2103      	movs	r1, #3
 80091aa:	201d      	movs	r0, #29
 80091ac:	f000 fbb1 	bl	8009912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80091b0:	201d      	movs	r0, #29
 80091b2:	f000 fbca 	bl	800994a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80091b6:	bf00      	nop
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	40000400 	.word	0x40000400
 80091c4:	40023800 	.word	0x40023800

080091c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b08c      	sub	sp, #48	; 0x30
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091d0:	f107 031c 	add.w	r3, r7, #28
 80091d4:	2200      	movs	r2, #0
 80091d6:	601a      	str	r2, [r3, #0]
 80091d8:	605a      	str	r2, [r3, #4]
 80091da:	609a      	str	r2, [r3, #8]
 80091dc:	60da      	str	r2, [r3, #12]
 80091de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a52      	ldr	r2, [pc, #328]	; (8009330 <HAL_UART_MspInit+0x168>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d170      	bne.n	80092cc <HAL_UART_MspInit+0x104>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80091ea:	4b52      	ldr	r3, [pc, #328]	; (8009334 <HAL_UART_MspInit+0x16c>)
 80091ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ee:	4a51      	ldr	r2, [pc, #324]	; (8009334 <HAL_UART_MspInit+0x16c>)
 80091f0:	f043 0310 	orr.w	r3, r3, #16
 80091f4:	6453      	str	r3, [r2, #68]	; 0x44
 80091f6:	4b4f      	ldr	r3, [pc, #316]	; (8009334 <HAL_UART_MspInit+0x16c>)
 80091f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fa:	f003 0310 	and.w	r3, r3, #16
 80091fe:	61bb      	str	r3, [r7, #24]
 8009200:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009202:	4b4c      	ldr	r3, [pc, #304]	; (8009334 <HAL_UART_MspInit+0x16c>)
 8009204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009206:	4a4b      	ldr	r2, [pc, #300]	; (8009334 <HAL_UART_MspInit+0x16c>)
 8009208:	f043 0302 	orr.w	r3, r3, #2
 800920c:	6313      	str	r3, [r2, #48]	; 0x30
 800920e:	4b49      	ldr	r3, [pc, #292]	; (8009334 <HAL_UART_MspInit+0x16c>)
 8009210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009212:	f003 0302 	and.w	r3, r3, #2
 8009216:	617b      	str	r3, [r7, #20]
 8009218:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800921a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800921e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009220:	2302      	movs	r3, #2
 8009222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009224:	2300      	movs	r3, #0
 8009226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009228:	2303      	movs	r3, #3
 800922a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800922c:	2304      	movs	r3, #4
 800922e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009230:	f107 031c 	add.w	r3, r7, #28
 8009234:	4619      	mov	r1, r3
 8009236:	4840      	ldr	r0, [pc, #256]	; (8009338 <HAL_UART_MspInit+0x170>)
 8009238:	f002 f94c 	bl	800b4d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800923c:	2340      	movs	r3, #64	; 0x40
 800923e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009240:	2302      	movs	r3, #2
 8009242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009244:	2300      	movs	r3, #0
 8009246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009248:	2303      	movs	r3, #3
 800924a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800924c:	2307      	movs	r3, #7
 800924e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009250:	f107 031c 	add.w	r3, r7, #28
 8009254:	4619      	mov	r1, r3
 8009256:	4838      	ldr	r0, [pc, #224]	; (8009338 <HAL_UART_MspInit+0x170>)
 8009258:	f002 f93c 	bl	800b4d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800925c:	4b37      	ldr	r3, [pc, #220]	; (800933c <HAL_UART_MspInit+0x174>)
 800925e:	4a38      	ldr	r2, [pc, #224]	; (8009340 <HAL_UART_MspInit+0x178>)
 8009260:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8009262:	4b36      	ldr	r3, [pc, #216]	; (800933c <HAL_UART_MspInit+0x174>)
 8009264:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009268:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800926a:	4b34      	ldr	r3, [pc, #208]	; (800933c <HAL_UART_MspInit+0x174>)
 800926c:	2200      	movs	r2, #0
 800926e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009270:	4b32      	ldr	r3, [pc, #200]	; (800933c <HAL_UART_MspInit+0x174>)
 8009272:	2200      	movs	r2, #0
 8009274:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009276:	4b31      	ldr	r3, [pc, #196]	; (800933c <HAL_UART_MspInit+0x174>)
 8009278:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800927c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800927e:	4b2f      	ldr	r3, [pc, #188]	; (800933c <HAL_UART_MspInit+0x174>)
 8009280:	2200      	movs	r2, #0
 8009282:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009284:	4b2d      	ldr	r3, [pc, #180]	; (800933c <HAL_UART_MspInit+0x174>)
 8009286:	2200      	movs	r2, #0
 8009288:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800928a:	4b2c      	ldr	r3, [pc, #176]	; (800933c <HAL_UART_MspInit+0x174>)
 800928c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009290:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009292:	4b2a      	ldr	r3, [pc, #168]	; (800933c <HAL_UART_MspInit+0x174>)
 8009294:	2200      	movs	r2, #0
 8009296:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009298:	4b28      	ldr	r3, [pc, #160]	; (800933c <HAL_UART_MspInit+0x174>)
 800929a:	2200      	movs	r2, #0
 800929c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800929e:	4827      	ldr	r0, [pc, #156]	; (800933c <HAL_UART_MspInit+0x174>)
 80092a0:	f000 fb6e 	bl	8009980 <HAL_DMA_Init>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80092aa:	f7ff fe7b 	bl	8008fa4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a22      	ldr	r2, [pc, #136]	; (800933c <HAL_UART_MspInit+0x174>)
 80092b2:	66da      	str	r2, [r3, #108]	; 0x6c
 80092b4:	4a21      	ldr	r2, [pc, #132]	; (800933c <HAL_UART_MspInit+0x174>)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80092ba:	2200      	movs	r2, #0
 80092bc:	2100      	movs	r1, #0
 80092be:	2025      	movs	r0, #37	; 0x25
 80092c0:	f000 fb27 	bl	8009912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80092c4:	2025      	movs	r0, #37	; 0x25
 80092c6:	f000 fb40 	bl	800994a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80092ca:	e02d      	b.n	8009328 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a1c      	ldr	r2, [pc, #112]	; (8009344 <HAL_UART_MspInit+0x17c>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d128      	bne.n	8009328 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 80092d6:	4b17      	ldr	r3, [pc, #92]	; (8009334 <HAL_UART_MspInit+0x16c>)
 80092d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092da:	4a16      	ldr	r2, [pc, #88]	; (8009334 <HAL_UART_MspInit+0x16c>)
 80092dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092e0:	6413      	str	r3, [r2, #64]	; 0x40
 80092e2:	4b14      	ldr	r3, [pc, #80]	; (8009334 <HAL_UART_MspInit+0x16c>)
 80092e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092ea:	613b      	str	r3, [r7, #16]
 80092ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80092ee:	4b11      	ldr	r3, [pc, #68]	; (8009334 <HAL_UART_MspInit+0x16c>)
 80092f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f2:	4a10      	ldr	r2, [pc, #64]	; (8009334 <HAL_UART_MspInit+0x16c>)
 80092f4:	f043 0308 	orr.w	r3, r3, #8
 80092f8:	6313      	str	r3, [r2, #48]	; 0x30
 80092fa:	4b0e      	ldr	r3, [pc, #56]	; (8009334 <HAL_UART_MspInit+0x16c>)
 80092fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092fe:	f003 0308 	and.w	r3, r3, #8
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8009306:	f44f 7340 	mov.w	r3, #768	; 0x300
 800930a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800930c:	2302      	movs	r3, #2
 800930e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009310:	2300      	movs	r3, #0
 8009312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009314:	2303      	movs	r3, #3
 8009316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009318:	2307      	movs	r3, #7
 800931a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800931c:	f107 031c 	add.w	r3, r7, #28
 8009320:	4619      	mov	r1, r3
 8009322:	4809      	ldr	r0, [pc, #36]	; (8009348 <HAL_UART_MspInit+0x180>)
 8009324:	f002 f8d6 	bl	800b4d4 <HAL_GPIO_Init>
}
 8009328:	bf00      	nop
 800932a:	3730      	adds	r7, #48	; 0x30
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	40011000 	.word	0x40011000
 8009334:	40023800 	.word	0x40023800
 8009338:	40020400 	.word	0x40020400
 800933c:	20004bcc 	.word	0x20004bcc
 8009340:	40026440 	.word	0x40026440
 8009344:	40004800 	.word	0x40004800
 8009348:	40020c00 	.word	0x40020c00

0800934c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08a      	sub	sp, #40	; 0x28
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009354:	f107 0314 	add.w	r3, r7, #20
 8009358:	2200      	movs	r2, #0
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	605a      	str	r2, [r3, #4]
 800935e:	609a      	str	r2, [r3, #8]
 8009360:	60da      	str	r2, [r3, #12]
 8009362:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800936c:	d141      	bne.n	80093f2 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800936e:	4b23      	ldr	r3, [pc, #140]	; (80093fc <HAL_PCD_MspInit+0xb0>)
 8009370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009372:	4a22      	ldr	r2, [pc, #136]	; (80093fc <HAL_PCD_MspInit+0xb0>)
 8009374:	f043 0301 	orr.w	r3, r3, #1
 8009378:	6313      	str	r3, [r2, #48]	; 0x30
 800937a:	4b20      	ldr	r3, [pc, #128]	; (80093fc <HAL_PCD_MspInit+0xb0>)
 800937c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	613b      	str	r3, [r7, #16]
 8009384:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8009386:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800938a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800938c:	2302      	movs	r3, #2
 800938e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009390:	2300      	movs	r3, #0
 8009392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009394:	2303      	movs	r3, #3
 8009396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009398:	230a      	movs	r3, #10
 800939a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800939c:	f107 0314 	add.w	r3, r7, #20
 80093a0:	4619      	mov	r1, r3
 80093a2:	4817      	ldr	r0, [pc, #92]	; (8009400 <HAL_PCD_MspInit+0xb4>)
 80093a4:	f002 f896 	bl	800b4d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80093a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80093ae:	2300      	movs	r3, #0
 80093b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093b2:	2300      	movs	r3, #0
 80093b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80093b6:	f107 0314 	add.w	r3, r7, #20
 80093ba:	4619      	mov	r1, r3
 80093bc:	4810      	ldr	r0, [pc, #64]	; (8009400 <HAL_PCD_MspInit+0xb4>)
 80093be:	f002 f889 	bl	800b4d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80093c2:	4b0e      	ldr	r3, [pc, #56]	; (80093fc <HAL_PCD_MspInit+0xb0>)
 80093c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c6:	4a0d      	ldr	r2, [pc, #52]	; (80093fc <HAL_PCD_MspInit+0xb0>)
 80093c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093cc:	6353      	str	r3, [r2, #52]	; 0x34
 80093ce:	4b0b      	ldr	r3, [pc, #44]	; (80093fc <HAL_PCD_MspInit+0xb0>)
 80093d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d6:	60fb      	str	r3, [r7, #12]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4b08      	ldr	r3, [pc, #32]	; (80093fc <HAL_PCD_MspInit+0xb0>)
 80093dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093de:	4a07      	ldr	r2, [pc, #28]	; (80093fc <HAL_PCD_MspInit+0xb0>)
 80093e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093e4:	6453      	str	r3, [r2, #68]	; 0x44
 80093e6:	4b05      	ldr	r3, [pc, #20]	; (80093fc <HAL_PCD_MspInit+0xb0>)
 80093e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093ee:	60bb      	str	r3, [r7, #8]
 80093f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80093f2:	bf00      	nop
 80093f4:	3728      	adds	r7, #40	; 0x28
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	40023800 	.word	0x40023800
 8009400:	40020000 	.word	0x40020000

08009404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009404:	b480      	push	{r7}
 8009406:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009408:	bf00      	nop
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009412:	b480      	push	{r7}
 8009414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009416:	e7fe      	b.n	8009416 <HardFault_Handler+0x4>

08009418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009418:	b480      	push	{r7}
 800941a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800941c:	e7fe      	b.n	800941c <MemManage_Handler+0x4>

0800941e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800941e:	b480      	push	{r7}
 8009420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009422:	e7fe      	b.n	8009422 <BusFault_Handler+0x4>

08009424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009424:	b480      	push	{r7}
 8009426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009428:	e7fe      	b.n	8009428 <UsageFault_Handler+0x4>

0800942a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800942a:	b480      	push	{r7}
 800942c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800942e:	bf00      	nop
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  HAL_IncTick();
 800943c:	f000 f94c 	bl	80096d8 <HAL_IncTick>
	#if (INCLUDE_xTaskGetSchedulerState == 1 )
	  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8009440:	f008 fa1e 	bl	8011880 <xTaskGetSchedulerState>
 8009444:	4603      	mov	r3, r0
 8009446:	2b01      	cmp	r3, #1
 8009448:	d001      	beq.n	800944e <SysTick_Handler+0x16>
	  {
	#endif /* INCLUDE_xTaskGetSchedulerState */
	  xPortSysTickHandler();
 800944a:	f008 fded 	bl	8012028 <xPortSysTickHandler>

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800944e:	bf00      	nop
 8009450:	bd80      	pop	{r7, pc}
	...

08009454 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009458:	4804      	ldr	r0, [pc, #16]	; (800946c <TIM3_IRQHandler+0x18>)
 800945a:	f003 fce3 	bl	800ce24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 800945e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009462:	4803      	ldr	r0, [pc, #12]	; (8009470 <TIM3_IRQHandler+0x1c>)
 8009464:	f002 f9f9 	bl	800b85a <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 8009468:	bf00      	nop
 800946a:	bd80      	pop	{r7, pc}
 800946c:	20004b8c 	.word	0x20004b8c
 8009470:	40020400 	.word	0x40020400

08009474 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009478:	4802      	ldr	r0, [pc, #8]	; (8009484 <USART1_IRQHandler+0x10>)
 800947a:	f004 fa95 	bl	800d9a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800947e:	bf00      	nop
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20004c2c 	.word	0x20004c2c

08009488 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800948c:	4802      	ldr	r0, [pc, #8]	; (8009498 <DMA2_Stream2_IRQHandler+0x10>)
 800948e:	f000 fc17 	bl	8009cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8009492:	bf00      	nop
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	20004bcc 	.word	0x20004bcc

0800949c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80094a0:	4802      	ldr	r0, [pc, #8]	; (80094ac <ETH_IRQHandler+0x10>)
 80094a2:	f001 fa65 	bl	800a970 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80094a6:	bf00      	nop
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	200065d8 	.word	0x200065d8

080094b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094bc:	2300      	movs	r3, #0
 80094be:	617b      	str	r3, [r7, #20]
 80094c0:	e00a      	b.n	80094d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80094c2:	f3af 8000 	nop.w
 80094c6:	4601      	mov	r1, r0
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	1c5a      	adds	r2, r3, #1
 80094cc:	60ba      	str	r2, [r7, #8]
 80094ce:	b2ca      	uxtb	r2, r1
 80094d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	3301      	adds	r3, #1
 80094d6:	617b      	str	r3, [r7, #20]
 80094d8:	697a      	ldr	r2, [r7, #20]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	429a      	cmp	r2, r3
 80094de:	dbf0      	blt.n	80094c2 <_read+0x12>
	}

return len;
 80094e0:	687b      	ldr	r3, [r7, #4]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3718      	adds	r7, #24
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b086      	sub	sp, #24
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	60f8      	str	r0, [r7, #12]
 80094f2:	60b9      	str	r1, [r7, #8]
 80094f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094f6:	2300      	movs	r3, #0
 80094f8:	617b      	str	r3, [r7, #20]
 80094fa:	e009      	b.n	8009510 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	60ba      	str	r2, [r7, #8]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	4618      	mov	r0, r3
 8009506:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	3301      	adds	r3, #1
 800950e:	617b      	str	r3, [r7, #20]
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	429a      	cmp	r2, r3
 8009516:	dbf1      	blt.n	80094fc <_write+0x12>
	}
	return len;
 8009518:	687b      	ldr	r3, [r7, #4]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3718      	adds	r7, #24
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <_close>:

int _close(int file)
{
 8009522:	b480      	push	{r7}
 8009524:	b083      	sub	sp, #12
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
	return -1;
 800952a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800952e:	4618      	mov	r0, r3
 8009530:	370c      	adds	r7, #12
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr

0800953a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800953a:	b480      	push	{r7}
 800953c:	b083      	sub	sp, #12
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800954a:	605a      	str	r2, [r3, #4]
	return 0;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <_isatty>:

int _isatty(int file)
{
 800955a:	b480      	push	{r7}
 800955c:	b083      	sub	sp, #12
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
	return 1;
 8009562:	2301      	movs	r3, #1
}
 8009564:	4618      	mov	r0, r3
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009570:	b480      	push	{r7}
 8009572:	b085      	sub	sp, #20
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
	return 0;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3714      	adds	r7, #20
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
	...

0800958c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009594:	4b11      	ldr	r3, [pc, #68]	; (80095dc <_sbrk+0x50>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d102      	bne.n	80095a2 <_sbrk+0x16>
		heap_end = &end;
 800959c:	4b0f      	ldr	r3, [pc, #60]	; (80095dc <_sbrk+0x50>)
 800959e:	4a10      	ldr	r2, [pc, #64]	; (80095e0 <_sbrk+0x54>)
 80095a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80095a2:	4b0e      	ldr	r3, [pc, #56]	; (80095dc <_sbrk+0x50>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80095a8:	4b0c      	ldr	r3, [pc, #48]	; (80095dc <_sbrk+0x50>)
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4413      	add	r3, r2
 80095b0:	466a      	mov	r2, sp
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d905      	bls.n	80095c2 <_sbrk+0x36>
	{
		errno = ENOMEM;
 80095b6:	4b0b      	ldr	r3, [pc, #44]	; (80095e4 <_sbrk+0x58>)
 80095b8:	220c      	movs	r2, #12
 80095ba:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80095bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095c0:	e006      	b.n	80095d0 <_sbrk+0x44>
	}

	heap_end += incr;
 80095c2:	4b06      	ldr	r3, [pc, #24]	; (80095dc <_sbrk+0x50>)
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4413      	add	r3, r2
 80095ca:	4a04      	ldr	r2, [pc, #16]	; (80095dc <_sbrk+0x50>)
 80095cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80095ce:	68fb      	ldr	r3, [r7, #12]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr
 80095dc:	2000033c 	.word	0x2000033c
 80095e0:	2000b52c 	.word	0x2000b52c
 80095e4:	2000b524 	.word	0x2000b524

080095e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80095e8:	b480      	push	{r7}
 80095ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80095ec:	4b06      	ldr	r3, [pc, #24]	; (8009608 <SystemInit+0x20>)
 80095ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f2:	4a05      	ldr	r2, [pc, #20]	; (8009608 <SystemInit+0x20>)
 80095f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  //SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 80095fc:	bf00      	nop
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	e000ed00 	.word	0xe000ed00

0800960c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800960c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009644 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009610:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009612:	e003      	b.n	800961c <LoopCopyDataInit>

08009614 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009614:	4b0c      	ldr	r3, [pc, #48]	; (8009648 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009616:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009618:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800961a:	3104      	adds	r1, #4

0800961c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800961c:	480b      	ldr	r0, [pc, #44]	; (800964c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800961e:	4b0c      	ldr	r3, [pc, #48]	; (8009650 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009620:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009622:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009624:	d3f6      	bcc.n	8009614 <CopyDataInit>
  ldr  r2, =_sbss
 8009626:	4a0b      	ldr	r2, [pc, #44]	; (8009654 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009628:	e002      	b.n	8009630 <LoopFillZerobss>

0800962a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800962a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800962c:	f842 3b04 	str.w	r3, [r2], #4

08009630 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009630:	4b09      	ldr	r3, [pc, #36]	; (8009658 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009632:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009634:	d3f9      	bcc.n	800962a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009636:	f7ff ffd7 	bl	80095e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800963a:	f014 fcfd 	bl	801e038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800963e:	f7ff f975 	bl	800892c <main>
  bx  lr    
 8009642:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009644:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8009648:	08032a04 	.word	0x08032a04
  ldr  r0, =_sdata
 800964c:	20000040 	.word	0x20000040
  ldr  r3, =_edata
 8009650:	200000c0 	.word	0x200000c0
  ldr  r2, =_sbss
 8009654:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 8009658:	2000b52c 	.word	0x2000b52c

0800965c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800965c:	e7fe      	b.n	800965c <ADC_IRQHandler>

0800965e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009662:	2003      	movs	r0, #3
 8009664:	f000 f94a 	bl	80098fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009668:	200f      	movs	r0, #15
 800966a:	f000 f805 	bl	8009678 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800966e:	f7ff fd45 	bl	80090fc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	bd80      	pop	{r7, pc}

08009678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009680:	4b12      	ldr	r3, [pc, #72]	; (80096cc <HAL_InitTick+0x54>)
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	4b12      	ldr	r3, [pc, #72]	; (80096d0 <HAL_InitTick+0x58>)
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	4619      	mov	r1, r3
 800968a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800968e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009692:	fbb2 f3f3 	udiv	r3, r2, r3
 8009696:	4618      	mov	r0, r3
 8009698:	f000 f965 	bl	8009966 <HAL_SYSTICK_Config>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e00e      	b.n	80096c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b0f      	cmp	r3, #15
 80096aa:	d80a      	bhi.n	80096c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80096ac:	2200      	movs	r2, #0
 80096ae:	6879      	ldr	r1, [r7, #4]
 80096b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096b4:	f000 f92d 	bl	8009912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80096b8:	4a06      	ldr	r2, [pc, #24]	; (80096d4 <HAL_InitTick+0x5c>)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	e000      	b.n	80096c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	20000040 	.word	0x20000040
 80096d0:	20000048 	.word	0x20000048
 80096d4:	20000044 	.word	0x20000044

080096d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80096d8:	b480      	push	{r7}
 80096da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80096dc:	4b06      	ldr	r3, [pc, #24]	; (80096f8 <HAL_IncTick+0x20>)
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	461a      	mov	r2, r3
 80096e2:	4b06      	ldr	r3, [pc, #24]	; (80096fc <HAL_IncTick+0x24>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4413      	add	r3, r2
 80096e8:	4a04      	ldr	r2, [pc, #16]	; (80096fc <HAL_IncTick+0x24>)
 80096ea:	6013      	str	r3, [r2, #0]
}
 80096ec:	bf00      	nop
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	20000048 	.word	0x20000048
 80096fc:	20004cb0 	.word	0x20004cb0

08009700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009700:	b480      	push	{r7}
 8009702:	af00      	add	r7, sp, #0
  return uwTick;
 8009704:	4b03      	ldr	r3, [pc, #12]	; (8009714 <HAL_GetTick+0x14>)
 8009706:	681b      	ldr	r3, [r3, #0]
}
 8009708:	4618      	mov	r0, r3
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	20004cb0 	.word	0x20004cb0

08009718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009720:	f7ff ffee 	bl	8009700 <HAL_GetTick>
 8009724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009730:	d005      	beq.n	800973e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009732:	4b09      	ldr	r3, [pc, #36]	; (8009758 <HAL_Delay+0x40>)
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	4413      	add	r3, r2
 800973c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800973e:	bf00      	nop
 8009740:	f7ff ffde 	bl	8009700 <HAL_GetTick>
 8009744:	4602      	mov	r2, r0
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	429a      	cmp	r2, r3
 800974e:	d8f7      	bhi.n	8009740 <HAL_Delay+0x28>
  {
  }
}
 8009750:	bf00      	nop
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	20000048 	.word	0x20000048

0800975c <__NVIC_SetPriorityGrouping>:
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f003 0307 	and.w	r3, r3, #7
 800976a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800976c:	4b0b      	ldr	r3, [pc, #44]	; (800979c <__NVIC_SetPriorityGrouping+0x40>)
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009778:	4013      	ands	r3, r2
 800977a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009784:	4b06      	ldr	r3, [pc, #24]	; (80097a0 <__NVIC_SetPriorityGrouping+0x44>)
 8009786:	4313      	orrs	r3, r2
 8009788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800978a:	4a04      	ldr	r2, [pc, #16]	; (800979c <__NVIC_SetPriorityGrouping+0x40>)
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	60d3      	str	r3, [r2, #12]
}
 8009790:	bf00      	nop
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	e000ed00 	.word	0xe000ed00
 80097a0:	05fa0000 	.word	0x05fa0000

080097a4 <__NVIC_GetPriorityGrouping>:
{
 80097a4:	b480      	push	{r7}
 80097a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80097a8:	4b04      	ldr	r3, [pc, #16]	; (80097bc <__NVIC_GetPriorityGrouping+0x18>)
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	0a1b      	lsrs	r3, r3, #8
 80097ae:	f003 0307 	and.w	r3, r3, #7
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr
 80097bc:	e000ed00 	.word	0xe000ed00

080097c0 <__NVIC_EnableIRQ>:
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	4603      	mov	r3, r0
 80097c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80097ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	db0b      	blt.n	80097ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80097d2:	79fb      	ldrb	r3, [r7, #7]
 80097d4:	f003 021f 	and.w	r2, r3, #31
 80097d8:	4907      	ldr	r1, [pc, #28]	; (80097f8 <__NVIC_EnableIRQ+0x38>)
 80097da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097de:	095b      	lsrs	r3, r3, #5
 80097e0:	2001      	movs	r0, #1
 80097e2:	fa00 f202 	lsl.w	r2, r0, r2
 80097e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80097ea:	bf00      	nop
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	e000e100 	.word	0xe000e100

080097fc <__NVIC_SetPriority>:
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	4603      	mov	r3, r0
 8009804:	6039      	str	r1, [r7, #0]
 8009806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800980c:	2b00      	cmp	r3, #0
 800980e:	db0a      	blt.n	8009826 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	b2da      	uxtb	r2, r3
 8009814:	490c      	ldr	r1, [pc, #48]	; (8009848 <__NVIC_SetPriority+0x4c>)
 8009816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800981a:	0112      	lsls	r2, r2, #4
 800981c:	b2d2      	uxtb	r2, r2
 800981e:	440b      	add	r3, r1
 8009820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009824:	e00a      	b.n	800983c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	b2da      	uxtb	r2, r3
 800982a:	4908      	ldr	r1, [pc, #32]	; (800984c <__NVIC_SetPriority+0x50>)
 800982c:	79fb      	ldrb	r3, [r7, #7]
 800982e:	f003 030f 	and.w	r3, r3, #15
 8009832:	3b04      	subs	r3, #4
 8009834:	0112      	lsls	r2, r2, #4
 8009836:	b2d2      	uxtb	r2, r2
 8009838:	440b      	add	r3, r1
 800983a:	761a      	strb	r2, [r3, #24]
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr
 8009848:	e000e100 	.word	0xe000e100
 800984c:	e000ed00 	.word	0xe000ed00

08009850 <NVIC_EncodePriority>:
{
 8009850:	b480      	push	{r7}
 8009852:	b089      	sub	sp, #36	; 0x24
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f003 0307 	and.w	r3, r3, #7
 8009862:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	f1c3 0307 	rsb	r3, r3, #7
 800986a:	2b04      	cmp	r3, #4
 800986c:	bf28      	it	cs
 800986e:	2304      	movcs	r3, #4
 8009870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	3304      	adds	r3, #4
 8009876:	2b06      	cmp	r3, #6
 8009878:	d902      	bls.n	8009880 <NVIC_EncodePriority+0x30>
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	3b03      	subs	r3, #3
 800987e:	e000      	b.n	8009882 <NVIC_EncodePriority+0x32>
 8009880:	2300      	movs	r3, #0
 8009882:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	fa02 f303 	lsl.w	r3, r2, r3
 800988e:	43da      	mvns	r2, r3
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	401a      	ands	r2, r3
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009898:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	fa01 f303 	lsl.w	r3, r1, r3
 80098a2:	43d9      	mvns	r1, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80098a8:	4313      	orrs	r3, r2
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3724      	adds	r7, #36	; 0x24
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
	...

080098b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	3b01      	subs	r3, #1
 80098c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80098c8:	d301      	bcc.n	80098ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80098ca:	2301      	movs	r3, #1
 80098cc:	e00f      	b.n	80098ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80098ce:	4a0a      	ldr	r2, [pc, #40]	; (80098f8 <SysTick_Config+0x40>)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	3b01      	subs	r3, #1
 80098d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80098d6:	210f      	movs	r1, #15
 80098d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098dc:	f7ff ff8e 	bl	80097fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80098e0:	4b05      	ldr	r3, [pc, #20]	; (80098f8 <SysTick_Config+0x40>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80098e6:	4b04      	ldr	r3, [pc, #16]	; (80098f8 <SysTick_Config+0x40>)
 80098e8:	2207      	movs	r2, #7
 80098ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	e000e010 	.word	0xe000e010

080098fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f7ff ff29 	bl	800975c <__NVIC_SetPriorityGrouping>
}
 800990a:	bf00      	nop
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009912:	b580      	push	{r7, lr}
 8009914:	b086      	sub	sp, #24
 8009916:	af00      	add	r7, sp, #0
 8009918:	4603      	mov	r3, r0
 800991a:	60b9      	str	r1, [r7, #8]
 800991c:	607a      	str	r2, [r7, #4]
 800991e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009920:	2300      	movs	r3, #0
 8009922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009924:	f7ff ff3e 	bl	80097a4 <__NVIC_GetPriorityGrouping>
 8009928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	68b9      	ldr	r1, [r7, #8]
 800992e:	6978      	ldr	r0, [r7, #20]
 8009930:	f7ff ff8e 	bl	8009850 <NVIC_EncodePriority>
 8009934:	4602      	mov	r2, r0
 8009936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800993a:	4611      	mov	r1, r2
 800993c:	4618      	mov	r0, r3
 800993e:	f7ff ff5d 	bl	80097fc <__NVIC_SetPriority>
}
 8009942:	bf00      	nop
 8009944:	3718      	adds	r7, #24
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b082      	sub	sp, #8
 800994e:	af00      	add	r7, sp, #0
 8009950:	4603      	mov	r3, r0
 8009952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009958:	4618      	mov	r0, r3
 800995a:	f7ff ff31 	bl	80097c0 <__NVIC_EnableIRQ>
}
 800995e:	bf00      	nop
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b082      	sub	sp, #8
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f7ff ffa2 	bl	80098b8 <SysTick_Config>
 8009974:	4603      	mov	r3, r0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
	...

08009980 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009988:	2300      	movs	r3, #0
 800998a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800998c:	f7ff feb8 	bl	8009700 <HAL_GetTick>
 8009990:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d101      	bne.n	800999c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e099      	b.n	8009ad0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2202      	movs	r2, #2
 80099a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f022 0201 	bic.w	r2, r2, #1
 80099ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80099bc:	e00f      	b.n	80099de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80099be:	f7ff fe9f 	bl	8009700 <HAL_GetTick>
 80099c2:	4602      	mov	r2, r0
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	2b05      	cmp	r3, #5
 80099ca:	d908      	bls.n	80099de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2220      	movs	r2, #32
 80099d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2203      	movs	r2, #3
 80099d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80099da:	2303      	movs	r3, #3
 80099dc:	e078      	b.n	8009ad0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 0301 	and.w	r3, r3, #1
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1e8      	bne.n	80099be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80099f4:	697a      	ldr	r2, [r7, #20]
 80099f6:	4b38      	ldr	r3, [pc, #224]	; (8009ad8 <HAL_DMA_Init+0x158>)
 80099f8:	4013      	ands	r3, r2
 80099fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a1b      	ldr	r3, [r3, #32]
 8009a28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	2b04      	cmp	r3, #4
 8009a36:	d107      	bne.n	8009a48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a40:	4313      	orrs	r3, r2
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	697a      	ldr	r2, [r7, #20]
 8009a4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	f023 0307 	bic.w	r3, r3, #7
 8009a5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a64:	697a      	ldr	r2, [r7, #20]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6e:	2b04      	cmp	r3, #4
 8009a70:	d117      	bne.n	8009aa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a76:	697a      	ldr	r2, [r7, #20]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00e      	beq.n	8009aa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fb15 	bl	800a0b4 <DMA_CheckFifoParam>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d008      	beq.n	8009aa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2240      	movs	r2, #64	; 0x40
 8009a94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e016      	b.n	8009ad0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 facc 	bl	800a048 <DMA_CalcBaseAndBitshift>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ab8:	223f      	movs	r2, #63	; 0x3f
 8009aba:	409a      	lsls	r2, r3
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3718      	adds	r7, #24
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	e010803f 	.word	0xe010803f

08009adc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
 8009ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d101      	bne.n	8009b02 <HAL_DMA_Start_IT+0x26>
 8009afe:	2302      	movs	r3, #2
 8009b00:	e048      	b.n	8009b94 <HAL_DMA_Start_IT+0xb8>
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d137      	bne.n	8009b86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2202      	movs	r2, #2
 8009b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	68b9      	ldr	r1, [r7, #8]
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f000 fa5e 	bl	8009fec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b34:	223f      	movs	r2, #63	; 0x3f
 8009b36:	409a      	lsls	r2, r3
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f042 0216 	orr.w	r2, r2, #22
 8009b4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	695a      	ldr	r2, [r3, #20]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009b5a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d007      	beq.n	8009b74 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f042 0208 	orr.w	r2, r2, #8
 8009b72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f042 0201 	orr.w	r2, r2, #1
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	e005      	b.n	8009b92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009b8e:	2302      	movs	r3, #2
 8009b90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3718      	adds	r7, #24
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009baa:	f7ff fda9 	bl	8009700 <HAL_GetTick>
 8009bae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d008      	beq.n	8009bce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2280      	movs	r2, #128	; 0x80
 8009bc0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e052      	b.n	8009c74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f022 0216 	bic.w	r2, r2, #22
 8009bdc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	695a      	ldr	r2, [r3, #20]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009bec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d103      	bne.n	8009bfe <HAL_DMA_Abort+0x62>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d007      	beq.n	8009c0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f022 0208 	bic.w	r2, r2, #8
 8009c0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f022 0201 	bic.w	r2, r2, #1
 8009c1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009c1e:	e013      	b.n	8009c48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009c20:	f7ff fd6e 	bl	8009700 <HAL_GetTick>
 8009c24:	4602      	mov	r2, r0
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	2b05      	cmp	r3, #5
 8009c2c:	d90c      	bls.n	8009c48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2220      	movs	r2, #32
 8009c32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2203      	movs	r2, #3
 8009c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8009c44:	2303      	movs	r3, #3
 8009c46:	e015      	b.n	8009c74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1e4      	bne.n	8009c20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c5a:	223f      	movs	r2, #63	; 0x3f
 8009c5c:	409a      	lsls	r2, r3
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d004      	beq.n	8009c9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2280      	movs	r2, #128	; 0x80
 8009c94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e00c      	b.n	8009cb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2205      	movs	r2, #5
 8009c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f022 0201 	bic.w	r2, r2, #1
 8009cb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b086      	sub	sp, #24
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8009ccc:	4b92      	ldr	r3, [pc, #584]	; (8009f18 <HAL_DMA_IRQHandler+0x258>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a92      	ldr	r2, [pc, #584]	; (8009f1c <HAL_DMA_IRQHandler+0x25c>)
 8009cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd6:	0a9b      	lsrs	r3, r3, #10
 8009cd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cea:	2208      	movs	r2, #8
 8009cec:	409a      	lsls	r2, r3
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d01a      	beq.n	8009d2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f003 0304 	and.w	r3, r3, #4
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d013      	beq.n	8009d2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f022 0204 	bic.w	r2, r2, #4
 8009d12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d18:	2208      	movs	r2, #8
 8009d1a:	409a      	lsls	r2, r3
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d24:	f043 0201 	orr.w	r2, r3, #1
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d30:	2201      	movs	r2, #1
 8009d32:	409a      	lsls	r2, r3
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	4013      	ands	r3, r2
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d012      	beq.n	8009d62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	695b      	ldr	r3, [r3, #20]
 8009d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00b      	beq.n	8009d62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d4e:	2201      	movs	r2, #1
 8009d50:	409a      	lsls	r2, r3
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d5a:	f043 0202 	orr.w	r2, r3, #2
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d66:	2204      	movs	r2, #4
 8009d68:	409a      	lsls	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d012      	beq.n	8009d98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 0302 	and.w	r3, r3, #2
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00b      	beq.n	8009d98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d84:	2204      	movs	r2, #4
 8009d86:	409a      	lsls	r2, r3
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d90:	f043 0204 	orr.w	r2, r3, #4
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d9c:	2210      	movs	r2, #16
 8009d9e:	409a      	lsls	r2, r3
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4013      	ands	r3, r2
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d043      	beq.n	8009e30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 0308 	and.w	r3, r3, #8
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d03c      	beq.n	8009e30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dba:	2210      	movs	r2, #16
 8009dbc:	409a      	lsls	r2, r3
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d018      	beq.n	8009e02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d108      	bne.n	8009df0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d024      	beq.n	8009e30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	4798      	blx	r3
 8009dee:	e01f      	b.n	8009e30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d01b      	beq.n	8009e30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	4798      	blx	r3
 8009e00:	e016      	b.n	8009e30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d107      	bne.n	8009e20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f022 0208 	bic.w	r2, r2, #8
 8009e1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d003      	beq.n	8009e30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e34:	2220      	movs	r2, #32
 8009e36:	409a      	lsls	r2, r3
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f000 808e 	beq.w	8009f5e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f003 0310 	and.w	r3, r3, #16
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f000 8086 	beq.w	8009f5e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e56:	2220      	movs	r2, #32
 8009e58:	409a      	lsls	r2, r3
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	2b05      	cmp	r3, #5
 8009e68:	d136      	bne.n	8009ed8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f022 0216 	bic.w	r2, r2, #22
 8009e78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	695a      	ldr	r2, [r3, #20]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d103      	bne.n	8009e9a <HAL_DMA_IRQHandler+0x1da>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d007      	beq.n	8009eaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f022 0208 	bic.w	r2, r2, #8
 8009ea8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eae:	223f      	movs	r2, #63	; 0x3f
 8009eb0:	409a      	lsls	r2, r3
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d07d      	beq.n	8009fca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	4798      	blx	r3
        }
        return;
 8009ed6:	e078      	b.n	8009fca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d01c      	beq.n	8009f20 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d108      	bne.n	8009f06 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d030      	beq.n	8009f5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	4798      	blx	r3
 8009f04:	e02b      	b.n	8009f5e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d027      	beq.n	8009f5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	4798      	blx	r3
 8009f16:	e022      	b.n	8009f5e <HAL_DMA_IRQHandler+0x29e>
 8009f18:	20000040 	.word	0x20000040
 8009f1c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10f      	bne.n	8009f4e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f022 0210 	bic.w	r2, r2, #16
 8009f3c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d003      	beq.n	8009f5e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d032      	beq.n	8009fcc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d022      	beq.n	8009fb8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2205      	movs	r2, #5
 8009f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f022 0201 	bic.w	r2, r2, #1
 8009f88:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	60bb      	str	r3, [r7, #8]
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d307      	bcc.n	8009fa6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f003 0301 	and.w	r3, r3, #1
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1f2      	bne.n	8009f8a <HAL_DMA_IRQHandler+0x2ca>
 8009fa4:	e000      	b.n	8009fa8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009fa6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d005      	beq.n	8009fcc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	4798      	blx	r3
 8009fc8:	e000      	b.n	8009fcc <HAL_DMA_IRQHandler+0x30c>
        return;
 8009fca:	bf00      	nop
    }
  }
}
 8009fcc:	3718      	adds	r7, #24
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop

08009fd4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	607a      	str	r2, [r7, #4]
 8009ff8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a008:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	2b40      	cmp	r3, #64	; 0x40
 800a018:	d108      	bne.n	800a02c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a02a:	e007      	b.n	800a03c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	60da      	str	r2, [r3, #12]
}
 800a03c:	bf00      	nop
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	b2db      	uxtb	r3, r3
 800a056:	3b10      	subs	r3, #16
 800a058:	4a13      	ldr	r2, [pc, #76]	; (800a0a8 <DMA_CalcBaseAndBitshift+0x60>)
 800a05a:	fba2 2303 	umull	r2, r3, r2, r3
 800a05e:	091b      	lsrs	r3, r3, #4
 800a060:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a062:	4a12      	ldr	r2, [pc, #72]	; (800a0ac <DMA_CalcBaseAndBitshift+0x64>)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	4413      	add	r3, r2
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2b03      	cmp	r3, #3
 800a074:	d908      	bls.n	800a088 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	461a      	mov	r2, r3
 800a07c:	4b0c      	ldr	r3, [pc, #48]	; (800a0b0 <DMA_CalcBaseAndBitshift+0x68>)
 800a07e:	4013      	ands	r3, r2
 800a080:	1d1a      	adds	r2, r3, #4
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	659a      	str	r2, [r3, #88]	; 0x58
 800a086:	e006      	b.n	800a096 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	461a      	mov	r2, r3
 800a08e:	4b08      	ldr	r3, [pc, #32]	; (800a0b0 <DMA_CalcBaseAndBitshift+0x68>)
 800a090:	4013      	ands	r3, r2
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	aaaaaaab 	.word	0xaaaaaaab
 800a0ac:	08021ce8 	.word	0x08021ce8
 800a0b0:	fffffc00 	.word	0xfffffc00

0800a0b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d11f      	bne.n	800a10e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	d855      	bhi.n	800a180 <DMA_CheckFifoParam+0xcc>
 800a0d4:	a201      	add	r2, pc, #4	; (adr r2, 800a0dc <DMA_CheckFifoParam+0x28>)
 800a0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0da:	bf00      	nop
 800a0dc:	0800a0ed 	.word	0x0800a0ed
 800a0e0:	0800a0ff 	.word	0x0800a0ff
 800a0e4:	0800a0ed 	.word	0x0800a0ed
 800a0e8:	0800a181 	.word	0x0800a181
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d045      	beq.n	800a184 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0fc:	e042      	b.n	800a184 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a102:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a106:	d13f      	bne.n	800a188 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a10c:	e03c      	b.n	800a188 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	699b      	ldr	r3, [r3, #24]
 800a112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a116:	d121      	bne.n	800a15c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	2b03      	cmp	r3, #3
 800a11c:	d836      	bhi.n	800a18c <DMA_CheckFifoParam+0xd8>
 800a11e:	a201      	add	r2, pc, #4	; (adr r2, 800a124 <DMA_CheckFifoParam+0x70>)
 800a120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a124:	0800a135 	.word	0x0800a135
 800a128:	0800a13b 	.word	0x0800a13b
 800a12c:	0800a135 	.word	0x0800a135
 800a130:	0800a14d 	.word	0x0800a14d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	73fb      	strb	r3, [r7, #15]
      break;
 800a138:	e02f      	b.n	800a19a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a142:	2b00      	cmp	r3, #0
 800a144:	d024      	beq.n	800a190 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a14a:	e021      	b.n	800a190 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a150:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a154:	d11e      	bne.n	800a194 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a15a:	e01b      	b.n	800a194 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d902      	bls.n	800a168 <DMA_CheckFifoParam+0xb4>
 800a162:	2b03      	cmp	r3, #3
 800a164:	d003      	beq.n	800a16e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a166:	e018      	b.n	800a19a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	73fb      	strb	r3, [r7, #15]
      break;
 800a16c:	e015      	b.n	800a19a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a172:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00e      	beq.n	800a198 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	73fb      	strb	r3, [r7, #15]
      break;
 800a17e:	e00b      	b.n	800a198 <DMA_CheckFifoParam+0xe4>
      break;
 800a180:	bf00      	nop
 800a182:	e00a      	b.n	800a19a <DMA_CheckFifoParam+0xe6>
      break;
 800a184:	bf00      	nop
 800a186:	e008      	b.n	800a19a <DMA_CheckFifoParam+0xe6>
      break;
 800a188:	bf00      	nop
 800a18a:	e006      	b.n	800a19a <DMA_CheckFifoParam+0xe6>
      break;
 800a18c:	bf00      	nop
 800a18e:	e004      	b.n	800a19a <DMA_CheckFifoParam+0xe6>
      break;
 800a190:	bf00      	nop
 800a192:	e002      	b.n	800a19a <DMA_CheckFifoParam+0xe6>
      break;   
 800a194:	bf00      	nop
 800a196:	e000      	b.n	800a19a <DMA_CheckFifoParam+0xe6>
      break;
 800a198:	bf00      	nop
    }
  } 
  
  return status; 
 800a19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3714      	adds	r7, #20
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b088      	sub	sp, #32
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	61fb      	str	r3, [r7, #28]
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800a1b8:	4ba9      	ldr	r3, [pc, #676]	; (800a460 <HAL_ETH_Init+0x2b8>)
 800a1ba:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e183      	b.n	800a4d6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d106      	bne.n	800a1e8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f004 fe52 	bl	800ee8c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1e8:	4b9e      	ldr	r3, [pc, #632]	; (800a464 <HAL_ETH_Init+0x2bc>)
 800a1ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ec:	4a9d      	ldr	r2, [pc, #628]	; (800a464 <HAL_ETH_Init+0x2bc>)
 800a1ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a1f2:	6453      	str	r3, [r2, #68]	; 0x44
 800a1f4:	4b9b      	ldr	r3, [pc, #620]	; (800a464 <HAL_ETH_Init+0x2bc>)
 800a1f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1fc:	60bb      	str	r3, [r7, #8]
 800a1fe:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a200:	4b99      	ldr	r3, [pc, #612]	; (800a468 <HAL_ETH_Init+0x2c0>)
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	4a98      	ldr	r2, [pc, #608]	; (800a468 <HAL_ETH_Init+0x2c0>)
 800a206:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a20a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800a20c:	4b96      	ldr	r3, [pc, #600]	; (800a468 <HAL_ETH_Init+0x2c0>)
 800a20e:	685a      	ldr	r2, [r3, #4]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a1b      	ldr	r3, [r3, #32]
 800a214:	4994      	ldr	r1, [pc, #592]	; (800a468 <HAL_ETH_Init+0x2c0>)
 800a216:	4313      	orrs	r3, r2
 800a218:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f042 0201 	orr.w	r2, r2, #1
 800a22c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a230:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800a232:	f7ff fa65 	bl	8009700 <HAL_GetTick>
 800a236:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800a238:	e011      	b.n	800a25e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800a23a:	f7ff fa61 	bl	8009700 <HAL_GetTick>
 800a23e:	4602      	mov	r2, r0
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	1ad3      	subs	r3, r2, r3
 800a244:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a248:	d909      	bls.n	800a25e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2203      	movs	r2, #3
 800a24e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800a25a:	2303      	movs	r3, #3
 800a25c:	e13b      	b.n	800a4d6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 0301 	and.w	r3, r3, #1
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1e4      	bne.n	800a23a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	f023 031c 	bic.w	r3, r3, #28
 800a27e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800a280:	f002 f920 	bl	800c4c4 <HAL_RCC_GetHCLKFreq>
 800a284:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	4a78      	ldr	r2, [pc, #480]	; (800a46c <HAL_ETH_Init+0x2c4>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d908      	bls.n	800a2a0 <HAL_ETH_Init+0xf8>
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	4a77      	ldr	r2, [pc, #476]	; (800a470 <HAL_ETH_Init+0x2c8>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d804      	bhi.n	800a2a0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	f043 0308 	orr.w	r3, r3, #8
 800a29c:	61fb      	str	r3, [r7, #28]
 800a29e:	e027      	b.n	800a2f0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	4a73      	ldr	r2, [pc, #460]	; (800a470 <HAL_ETH_Init+0x2c8>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d908      	bls.n	800a2ba <HAL_ETH_Init+0x112>
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	4a72      	ldr	r2, [pc, #456]	; (800a474 <HAL_ETH_Init+0x2cc>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d804      	bhi.n	800a2ba <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	f043 030c 	orr.w	r3, r3, #12
 800a2b6:	61fb      	str	r3, [r7, #28]
 800a2b8:	e01a      	b.n	800a2f0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	4a6d      	ldr	r2, [pc, #436]	; (800a474 <HAL_ETH_Init+0x2cc>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d903      	bls.n	800a2ca <HAL_ETH_Init+0x122>
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	4a6c      	ldr	r2, [pc, #432]	; (800a478 <HAL_ETH_Init+0x2d0>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d911      	bls.n	800a2ee <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	4a6a      	ldr	r2, [pc, #424]	; (800a478 <HAL_ETH_Init+0x2d0>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d908      	bls.n	800a2e4 <HAL_ETH_Init+0x13c>
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	4a69      	ldr	r2, [pc, #420]	; (800a47c <HAL_ETH_Init+0x2d4>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d804      	bhi.n	800a2e4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	f043 0304 	orr.w	r3, r3, #4
 800a2e0:	61fb      	str	r3, [r7, #28]
 800a2e2:	e005      	b.n	800a2f0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	f043 0310 	orr.w	r3, r3, #16
 800a2ea:	61fb      	str	r3, [r7, #28]
 800a2ec:	e000      	b.n	800a2f0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800a2ee:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	69fa      	ldr	r2, [r7, #28]
 800a2f6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800a2f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fc19 	bl	800ab36 <HAL_ETH_WritePHYRegister>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d00b      	beq.n	800a322 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800a30e:	6939      	ldr	r1, [r7, #16]
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 fdcf 	bl	800aeb4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2201      	movs	r2, #1
 800a31a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	e0d9      	b.n	800a4d6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800a322:	20ff      	movs	r0, #255	; 0xff
 800a324:	f7ff f9f8 	bl	8009718 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f000 80a7 	beq.w	800a480 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800a332:	f7ff f9e5 	bl	8009700 <HAL_GetTick>
 800a336:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800a338:	f107 030c 	add.w	r3, r7, #12
 800a33c:	461a      	mov	r2, r3
 800a33e:	2101      	movs	r1, #1
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fb90 	bl	800aa66 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800a346:	f7ff f9db 	bl	8009700 <HAL_GetTick>
 800a34a:	4602      	mov	r2, r0
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	1ad3      	subs	r3, r2, r3
 800a350:	f241 3288 	movw	r2, #5000	; 0x1388
 800a354:	4293      	cmp	r3, r2
 800a356:	d90f      	bls.n	800a378 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800a35c:	6939      	ldr	r1, [r7, #16]
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fda8 	bl	800aeb4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800a374:	2303      	movs	r3, #3
 800a376:	e0ae      	b.n	800a4d6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f003 0304 	and.w	r3, r3, #4
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d0da      	beq.n	800a338 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800a382:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a386:	2100      	movs	r1, #0
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fbd4 	bl	800ab36 <HAL_ETH_WritePHYRegister>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00b      	beq.n	800a3ac <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800a398:	6939      	ldr	r1, [r7, #16]
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 fd8a 	bl	800aeb4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e094      	b.n	800a4d6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800a3ac:	f7ff f9a8 	bl	8009700 <HAL_GetTick>
 800a3b0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800a3b2:	f107 030c 	add.w	r3, r7, #12
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	2101      	movs	r1, #1
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fb53 	bl	800aa66 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800a3c0:	f7ff f99e 	bl	8009700 <HAL_GetTick>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d90f      	bls.n	800a3f2 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800a3d6:	6939      	ldr	r1, [r7, #16]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fd6b 	bl	800aeb4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	e071      	b.n	800a4d6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f003 0320 	and.w	r3, r3, #32
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d0da      	beq.n	800a3b2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800a3fc:	f107 030c 	add.w	r3, r7, #12
 800a400:	461a      	mov	r2, r3
 800a402:	211f      	movs	r1, #31
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 fb2e 	bl	800aa66 <HAL_ETH_ReadPHYRegister>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00b      	beq.n	800a428 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800a414:	6939      	ldr	r1, [r7, #16]
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 fd4c 	bl	800aeb4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800a424:	2301      	movs	r3, #1
 800a426:	e056      	b.n	800a4d6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f003 0310 	and.w	r3, r3, #16
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d004      	beq.n	800a43c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a438:	60da      	str	r2, [r3, #12]
 800a43a:	e002      	b.n	800a442 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f003 0304 	and.w	r3, r3, #4
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d003      	beq.n	800a454 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	609a      	str	r2, [r3, #8]
 800a452:	e037      	b.n	800a4c4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a45a:	609a      	str	r2, [r3, #8]
 800a45c:	e032      	b.n	800a4c4 <HAL_ETH_Init+0x31c>
 800a45e:	bf00      	nop
 800a460:	03938700 	.word	0x03938700
 800a464:	40023800 	.word	0x40023800
 800a468:	40013800 	.word	0x40013800
 800a46c:	01312cff 	.word	0x01312cff
 800a470:	02160ebf 	.word	0x02160ebf
 800a474:	039386ff 	.word	0x039386ff
 800a478:	05f5e0ff 	.word	0x05f5e0ff
 800a47c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	08db      	lsrs	r3, r3, #3
 800a486:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	085b      	lsrs	r3, r3, #1
 800a48e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800a490:	4313      	orrs	r3, r2
 800a492:	b29b      	uxth	r3, r3
 800a494:	461a      	mov	r2, r3
 800a496:	2100      	movs	r1, #0
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 fb4c 	bl	800ab36 <HAL_ETH_WritePHYRegister>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00b      	beq.n	800a4bc <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800a4a8:	6939      	ldr	r1, [r7, #16]
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 fd02 	bl	800aeb4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e00c      	b.n	800a4d6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800a4bc:	f640 70ff 	movw	r0, #4095	; 0xfff
 800a4c0:	f7ff f92a 	bl	8009718 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800a4c4:	6939      	ldr	r1, [r7, #16]
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fcf4 	bl	800aeb4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3720      	adds	r7, #32
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop

0800a4e0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b087      	sub	sp, #28
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
 800a4ec:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d101      	bne.n	800a500 <HAL_ETH_DMATxDescListInit+0x20>
 800a4fc:	2302      	movs	r3, #2
 800a4fe:	e052      	b.n	800a5a6 <HAL_ETH_DMATxDescListInit+0xc6>
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2201      	movs	r2, #1
 800a504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2202      	movs	r2, #2
 800a50c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	68ba      	ldr	r2, [r7, #8]
 800a514:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800a516:	2300      	movs	r3, #0
 800a518:	617b      	str	r3, [r7, #20]
 800a51a:	e030      	b.n	800a57e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	015b      	lsls	r3, r3, #5
 800a520:	68ba      	ldr	r2, [r7, #8]
 800a522:	4413      	add	r3, r2
 800a524:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a52c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a534:	fb02 f303 	mul.w	r3, r2, r3
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	4413      	add	r3, r2
 800a53c:	461a      	mov	r2, r3
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	69db      	ldr	r3, [r3, #28]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d105      	bne.n	800a556 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	3b01      	subs	r3, #1
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d208      	bcs.n	800a572 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	3301      	adds	r3, #1
 800a564:	015b      	lsls	r3, r3, #5
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	4413      	add	r3, r2
 800a56a:	461a      	mov	r2, r3
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	60da      	str	r2, [r3, #12]
 800a570:	e002      	b.n	800a578 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800a572:	68ba      	ldr	r2, [r7, #8]
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	3301      	adds	r3, #1
 800a57c:	617b      	str	r3, [r7, #20]
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	429a      	cmp	r2, r3
 800a584:	d3ca      	bcc.n	800a51c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6819      	ldr	r1, [r3, #0]
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	f241 0310 	movw	r3, #4112	; 0x1010
 800a590:	440b      	add	r3, r1
 800a592:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	371c      	adds	r7, #28
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b087      	sub	sp, #28
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	60f8      	str	r0, [r7, #12]
 800a5ba:	60b9      	str	r1, [r7, #8]
 800a5bc:	607a      	str	r2, [r7, #4]
 800a5be:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d101      	bne.n	800a5d2 <HAL_ETH_DMARxDescListInit+0x20>
 800a5ce:	2302      	movs	r3, #2
 800a5d0:	e056      	b.n	800a680 <HAL_ETH_DMARxDescListInit+0xce>
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2202      	movs	r2, #2
 800a5de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	617b      	str	r3, [r7, #20]
 800a5ec:	e034      	b.n	800a658 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	015b      	lsls	r3, r3, #5
 800a5f2:	68ba      	ldr	r2, [r7, #8]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a5fe:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800a606:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a60e:	fb02 f303 	mul.w	r3, r2, r3
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	4413      	add	r3, r2
 800a616:	461a      	mov	r2, r3
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	699b      	ldr	r3, [r3, #24]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d105      	bne.n	800a630 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	3b01      	subs	r3, #1
 800a634:	697a      	ldr	r2, [r7, #20]
 800a636:	429a      	cmp	r2, r3
 800a638:	d208      	bcs.n	800a64c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	3301      	adds	r3, #1
 800a63e:	015b      	lsls	r3, r3, #5
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	4413      	add	r3, r2
 800a644:	461a      	mov	r2, r3
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	60da      	str	r2, [r3, #12]
 800a64a:	e002      	b.n	800a652 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	3301      	adds	r3, #1
 800a656:	617b      	str	r3, [r7, #20]
 800a658:	697a      	ldr	r2, [r7, #20]
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d3c6      	bcc.n	800a5ee <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6819      	ldr	r1, [r3, #0]
 800a664:	68ba      	ldr	r2, [r7, #8]
 800a666:	f241 030c 	movw	r3, #4108	; 0x100c
 800a66a:	440b      	add	r3, r1
 800a66c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2201      	movs	r2, #1
 800a672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	371c      	adds	r7, #28
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b087      	sub	sp, #28
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	617b      	str	r3, [r7, #20]
 800a69a:	2300      	movs	r3, #0
 800a69c:	60fb      	str	r3, [r7, #12]
 800a69e:	2300      	movs	r3, #0
 800a6a0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d101      	bne.n	800a6b0 <HAL_ETH_TransmitFrame+0x24>
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	e0cd      	b.n	800a84c <HAL_ETH_TransmitFrame+0x1c0>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2202      	movs	r2, #2
 800a6bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d109      	bne.n	800a6da <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e0b8      	b.n	800a84c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	da09      	bge.n	800a6f8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2212      	movs	r2, #18
 800a6e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e0a9      	b.n	800a84c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d915      	bls.n	800a72e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	4a54      	ldr	r2, [pc, #336]	; (800a858 <HAL_ETH_TransmitFrame+0x1cc>)
 800a706:	fba2 2303 	umull	r2, r3, r2, r3
 800a70a:	0a9b      	lsrs	r3, r3, #10
 800a70c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	4b51      	ldr	r3, [pc, #324]	; (800a858 <HAL_ETH_TransmitFrame+0x1cc>)
 800a712:	fba3 1302 	umull	r1, r3, r3, r2
 800a716:	0a9b      	lsrs	r3, r3, #10
 800a718:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800a71c:	fb01 f303 	mul.w	r3, r1, r3
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	2b00      	cmp	r3, #0
 800a724:	d005      	beq.n	800a732 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	3301      	adds	r3, #1
 800a72a:	617b      	str	r3, [r7, #20]
 800a72c:	e001      	b.n	800a732 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800a72e:	2301      	movs	r3, #1
 800a730:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	2b01      	cmp	r3, #1
 800a736:	d11c      	bne.n	800a772 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a742:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800a746:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74c:	683a      	ldr	r2, [r7, #0]
 800a74e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800a752:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800a762:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	461a      	mov	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	62da      	str	r2, [r3, #44]	; 0x2c
 800a770:	e04b      	b.n	800a80a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800a772:	2300      	movs	r3, #0
 800a774:	613b      	str	r3, [r7, #16]
 800a776:	e044      	b.n	800a802 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a782:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a786:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d107      	bne.n	800a79e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a798:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a79c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a7a6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	693a      	ldr	r2, [r7, #16]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d116      	bne.n	800a7e0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7bc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800a7c0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	4a25      	ldr	r2, [pc, #148]	; (800a85c <HAL_ETH_TransmitFrame+0x1d0>)
 800a7c6:	fb02 f203 	mul.w	r2, r2, r3
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a7d2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800a7de:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800a7ee:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	3301      	adds	r3, #1
 800a800:	613b      	str	r3, [r7, #16]
 800a802:	693a      	ldr	r2, [r7, #16]
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	429a      	cmp	r2, r3
 800a808:	d3b6      	bcc.n	800a778 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	f241 0314 	movw	r3, #4116	; 0x1014
 800a812:	4413      	add	r3, r2
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 0304 	and.w	r3, r3, #4
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00d      	beq.n	800a83a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	f241 0314 	movw	r3, #4116	; 0x1014
 800a826:	4413      	add	r3, r2
 800a828:	2204      	movs	r2, #4
 800a82a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	f241 0304 	movw	r3, #4100	; 0x1004
 800a834:	4413      	add	r3, r2
 800a836:	2200      	movs	r2, #0
 800a838:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2201      	movs	r2, #1
 800a83e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	371c      	adds	r7, #28
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr
 800a858:	ac02b00b 	.word	0xac02b00b
 800a85c:	fffffa0c 	.word	0xfffffa0c

0800a860 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800a860:	b480      	push	{r7}
 800a862:	b085      	sub	sp, #20
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 800a868:	2300      	movs	r3, #0
 800a86a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a872:	2b01      	cmp	r3, #1
 800a874:	d101      	bne.n	800a87a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800a876:	2302      	movs	r3, #2
 800a878:	e074      	b.n	800a964 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2202      	movs	r2, #2
 800a886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800a88a:	e05a      	b.n	800a942 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	3301      	adds	r3, #1
 800a890:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a89c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8a0:	d10d      	bne.n	800a8be <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	629a      	str	r2, [r3, #40]	; 0x28
 800a8bc:	e041      	b.n	800a942 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10b      	bne.n	800a8e4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d0:	1c5a      	adds	r2, r3, #1
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	461a      	mov	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	629a      	str	r2, [r3, #40]	; 0x28
 800a8e2:	e02e      	b.n	800a942 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f0:	1c5a      	adds	r2, r3, #1
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d103      	bne.n	800a906 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	0c1b      	lsrs	r3, r3, #16
 800a90e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a912:	1f1a      	subs	r2, r3, #4
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a91c:	689a      	ldr	r2, [r3, #8]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	461a      	mov	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800a93e:	2300      	movs	r3, #0
 800a940:	e010      	b.n	800a964 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	db02      	blt.n	800a952 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2b03      	cmp	r3, #3
 800a950:	d99c      	bls.n	800a88c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800a962:	2301      	movs	r3, #1
}
 800a964:	4618      	mov	r0, r3
 800a966:	3714      	adds	r7, #20
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	f241 0314 	movw	r3, #4116	; 0x1014
 800a980:	4413      	add	r3, r2
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a988:	2b40      	cmp	r3, #64	; 0x40
 800a98a:	d112      	bne.n	800a9b2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f004 fb3d 	bl	800f00c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	f241 0314 	movw	r3, #4116	; 0x1014
 800a99a:	4413      	add	r3, r2
 800a99c:	2240      	movs	r2, #64	; 0x40
 800a99e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9b0:	e01b      	b.n	800a9ea <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	f241 0314 	movw	r3, #4116	; 0x1014
 800a9ba:	4413      	add	r3, r2
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f003 0301 	and.w	r3, r3, #1
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d111      	bne.n	800a9ea <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 f839 	bl	800aa3e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	f241 0314 	movw	r3, #4116	; 0x1014
 800a9d4:	4413      	add	r3, r2
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	f241 0314 	movw	r3, #4116	; 0x1014
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a9f8:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	f241 0314 	movw	r3, #4116	; 0x1014
 800aa02:	4413      	add	r3, r2
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa0e:	d112      	bne.n	800aa36 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 f81e 	bl	800aa52 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	f241 0314 	movw	r3, #4116	; 0x1014
 800aa1e:	4413      	add	r3, r2
 800aa20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800aa24:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800aa36:	bf00      	nop
 800aa38:	3708      	adds	r7, #8
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b083      	sub	sp, #12
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800aa46:	bf00      	nop
 800aa48:	370c      	adds	r7, #12
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr

0800aa52 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800aa52:	b480      	push	{r7}
 800aa54:	b083      	sub	sp, #12
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 800aa5a:	bf00      	nop
 800aa5c:	370c      	adds	r7, #12
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b086      	sub	sp, #24
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	60f8      	str	r0, [r7, #12]
 800aa6e:	460b      	mov	r3, r1
 800aa70:	607a      	str	r2, [r7, #4]
 800aa72:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800aa74:	2300      	movs	r3, #0
 800aa76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	2b82      	cmp	r3, #130	; 0x82
 800aa86:	d101      	bne.n	800aa8c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800aa88:	2302      	movs	r3, #2
 800aa8a:	e050      	b.n	800ab2e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2282      	movs	r2, #130	; 0x82
 800aa90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	f003 031c 	and.w	r3, r3, #28
 800aaa2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	8a1b      	ldrh	r3, [r3, #16]
 800aaa8:	02db      	lsls	r3, r3, #11
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	697a      	ldr	r2, [r7, #20]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800aab2:	897b      	ldrh	r3, [r7, #10]
 800aab4:	019b      	lsls	r3, r3, #6
 800aab6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800aaba:	697a      	ldr	r2, [r7, #20]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	f023 0302 	bic.w	r3, r3, #2
 800aac6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f043 0301 	orr.w	r3, r3, #1
 800aace:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	697a      	ldr	r2, [r7, #20]
 800aad6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800aad8:	f7fe fe12 	bl	8009700 <HAL_GetTick>
 800aadc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800aade:	e015      	b.n	800ab0c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800aae0:	f7fe fe0e 	bl	8009700 <HAL_GetTick>
 800aae4:	4602      	mov	r2, r0
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	1ad3      	subs	r3, r2, r3
 800aaea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaee:	d309      	bcc.n	800ab04 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800ab00:	2303      	movs	r3, #3
 800ab02:	e014      	b.n	800ab2e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	f003 0301 	and.w	r3, r3, #1
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1e4      	bne.n	800aae0 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	695b      	ldr	r3, [r3, #20]
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	461a      	mov	r2, r3
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3718      	adds	r7, #24
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b086      	sub	sp, #24
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	60f8      	str	r0, [r7, #12]
 800ab3e:	460b      	mov	r3, r1
 800ab40:	607a      	str	r2, [r7, #4]
 800ab42:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800ab44:	2300      	movs	r3, #0
 800ab46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	2b42      	cmp	r3, #66	; 0x42
 800ab56:	d101      	bne.n	800ab5c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800ab58:	2302      	movs	r3, #2
 800ab5a:	e04e      	b.n	800abfa <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2242      	movs	r2, #66	; 0x42
 800ab60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	f003 031c 	and.w	r3, r3, #28
 800ab72:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	8a1b      	ldrh	r3, [r3, #16]
 800ab78:	02db      	lsls	r3, r3, #11
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	697a      	ldr	r2, [r7, #20]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800ab82:	897b      	ldrh	r3, [r7, #10]
 800ab84:	019b      	lsls	r3, r3, #6
 800ab86:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800ab8a:	697a      	ldr	r2, [r7, #20]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	f043 0302 	orr.w	r3, r3, #2
 800ab96:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	f043 0301 	orr.w	r3, r3, #1
 800ab9e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	697a      	ldr	r2, [r7, #20]
 800abb0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800abb2:	f7fe fda5 	bl	8009700 <HAL_GetTick>
 800abb6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800abb8:	e015      	b.n	800abe6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800abba:	f7fe fda1 	bl	8009700 <HAL_GetTick>
 800abbe:	4602      	mov	r2, r0
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	1ad3      	subs	r3, r2, r3
 800abc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abc8:	d309      	bcc.n	800abde <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2201      	movs	r2, #1
 800abce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800abda:	2303      	movs	r3, #3
 800abdc:	e00d      	b.n	800abfa <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	691b      	ldr	r3, [r3, #16]
 800abe4:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	f003 0301 	and.w	r3, r3, #1
 800abec:	2b00      	cmp	r3, #0
 800abee:	d1e4      	bne.n	800abba <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3718      	adds	r7, #24
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b082      	sub	sp, #8
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d101      	bne.n	800ac18 <HAL_ETH_Start+0x16>
 800ac14:	2302      	movs	r3, #2
 800ac16:	e01f      	b.n	800ac58 <HAL_ETH_Start+0x56>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2202      	movs	r2, #2
 800ac24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 fb45 	bl	800b2b8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 fb7c 	bl	800b32c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 fc13 	bl	800b460 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fbb0 	bl	800b3a0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 fbdd 	bl	800b400 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3708      	adds	r7, #8
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d101      	bne.n	800ac76 <HAL_ETH_Stop+0x16>
 800ac72:	2302      	movs	r3, #2
 800ac74:	e01f      	b.n	800acb6 <HAL_ETH_Stop+0x56>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2202      	movs	r2, #2
 800ac82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 fba2 	bl	800b3d0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fbcf 	bl	800b430 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 fb67 	bl	800b366 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fbe1 	bl	800b460 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 fb27 	bl	800b2f2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2201      	movs	r2, #1
 800aca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3708      	adds	r7, #8
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
	...

0800acc0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800acca:	2300      	movs	r3, #0
 800accc:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d101      	bne.n	800acdc <HAL_ETH_ConfigMAC+0x1c>
 800acd8:	2302      	movs	r3, #2
 800acda:	e0e4      	b.n	800aea6 <HAL_ETH_ConfigMAC+0x1e6>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2202      	movs	r2, #2
 800ace8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	f000 80b1 	beq.w	800ae56 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	4b6c      	ldr	r3, [pc, #432]	; (800aeb0 <HAL_ETH_ConfigMAC+0x1f0>)
 800ad00:	4013      	ands	r3, r2
 800ad02:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800ad0c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800ad12:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800ad18:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800ad1e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800ad24:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800ad2a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800ad30:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800ad36:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800ad3c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800ad42:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800ad48:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800ad4e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800ad66:	2001      	movs	r0, #1
 800ad68:	f7fe fcd6 	bl	8009718 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800ad7c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800ad82:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800ad88:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800ad8e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800ad94:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800ad9a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800ada6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800ada8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800adb2:	2001      	movs	r0, #1
 800adb4:	f7fe fcb0 	bl	8009718 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800adc8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	683a      	ldr	r2, [r7, #0]
 800add0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800add2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	699b      	ldr	r3, [r3, #24]
 800adda:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	f64f 7341 	movw	r3, #65345	; 0xff41
 800ade2:	4013      	ands	r3, r2
 800ade4:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adea:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800adf0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800adf6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800adfc:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800ae02:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800ae08:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800ae20:	2001      	movs	r0, #1
 800ae22:	f7fe fc79 	bl	8009718 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	430a      	orrs	r2, r1
 800ae3c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	69db      	ldr	r3, [r3, #28]
 800ae44:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800ae46:	2001      	movs	r0, #1
 800ae48:	f7fe fc66 	bl	8009718 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	61da      	str	r2, [r3, #28]
 800ae54:	e01e      	b.n	800ae94 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800ae64:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	689a      	ldr	r2, [r3, #8]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	68fa      	ldr	r2, [r7, #12]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800ae86:	2001      	movs	r0, #1
 800ae88:	f7fe fc46 	bl	8009718 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	ff20810f 	.word	0xff20810f

0800aeb4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b0b0      	sub	sp, #192	; 0xc0
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800aebe:	2300      	movs	r3, #0
 800aec0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d007      	beq.n	800aeda <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aed0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800aed8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800aeda:	2300      	movs	r3, #0
 800aedc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800aede:	2300      	movs	r3, #0
 800aee0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800aee2:	2300      	movs	r3, #0
 800aee4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800aee6:	2300      	movs	r3, #0
 800aee8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800aeea:	2300      	movs	r3, #0
 800aeec:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800aeee:	2300      	movs	r3, #0
 800aef0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	69db      	ldr	r3, [r3, #28]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d103      	bne.n	800af02 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800aefa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aefe:	663b      	str	r3, [r7, #96]	; 0x60
 800af00:	e001      	b.n	800af06 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800af02:	2300      	movs	r3, #0
 800af04:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800af06:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af0a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800af0c:	2300      	movs	r3, #0
 800af0e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800af10:	2300      	movs	r3, #0
 800af12:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800af14:	2300      	movs	r3, #0
 800af16:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800af18:	2300      	movs	r3, #0
 800af1a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800af1c:	2300      	movs	r3, #0
 800af1e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800af20:	2340      	movs	r3, #64	; 0x40
 800af22:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800af24:	2300      	movs	r3, #0
 800af26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800af2a:	2300      	movs	r3, #0
 800af2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800af30:	2300      	movs	r3, #0
 800af32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800af36:	2300      	movs	r3, #0
 800af38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800af3c:	2300      	movs	r3, #0
 800af3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800af42:	2300      	movs	r3, #0
 800af44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800af48:	2300      	movs	r3, #0
 800af4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800af4e:	2300      	movs	r3, #0
 800af50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800af54:	2380      	movs	r3, #128	; 0x80
 800af56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800af5a:	2300      	movs	r3, #0
 800af5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800af60:	2300      	movs	r3, #0
 800af62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800af66:	2300      	movs	r3, #0
 800af68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800af6c:	2300      	movs	r3, #0
 800af6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800af72:	2300      	movs	r3, #0
 800af74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800af78:	2300      	movs	r3, #0
 800af7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800af88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800af8c:	4bab      	ldr	r3, [pc, #684]	; (800b23c <ETH_MACDMAConfig+0x388>)
 800af8e:	4013      	ands	r3, r2
 800af90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800af94:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800af96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800af98:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800af9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800af9c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800af9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800afa0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800afa6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800afa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800afaa:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800afac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800afae:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800afb4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800afb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800afb8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800afba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800afbc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800afbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800afc0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800afc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800afc4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800afc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800afc8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800afca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800afce:	4313      	orrs	r3, r2
 800afd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800afdc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800afe8:	2001      	movs	r0, #1
 800afea:	f7fe fb95 	bl	8009718 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800aff6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800aff8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800affa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800affc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800affe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800b000:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800b002:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800b006:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800b008:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800b00c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800b00e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800b012:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800b014:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800b018:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800b01c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800b024:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b026:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b032:	2001      	movs	r0, #1
 800b034:	f7fe fb70 	bl	8009718 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b040:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b04a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b054:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	699b      	ldr	r3, [r3, #24]
 800b05c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800b060:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b064:	f64f 7341 	movw	r3, #65345	; 0xff41
 800b068:	4013      	ands	r3, r2
 800b06a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800b06e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b072:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800b074:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800b078:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800b07a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800b07e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800b080:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800b084:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800b086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800b08a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800b08c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800b090:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800b092:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b096:	4313      	orrs	r3, r2
 800b098:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b0a4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	699b      	ldr	r3, [r3, #24]
 800b0ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b0b0:	2001      	movs	r0, #1
 800b0b2:	f7fe fb31 	bl	8009718 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b0be:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800b0c0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800b0c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	430a      	orrs	r2, r1
 800b0ce:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	69db      	ldr	r3, [r3, #28]
 800b0d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b0da:	2001      	movs	r0, #1
 800b0dc:	f7fe fb1c 	bl	8009718 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b0e8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800b0ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0f2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800b0f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b0fc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800b0fe:	2300      	movs	r3, #0
 800b100:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800b102:	2300      	movs	r3, #0
 800b104:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800b106:	2300      	movs	r3, #0
 800b108:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800b10a:	2300      	movs	r3, #0
 800b10c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800b10e:	2304      	movs	r3, #4
 800b110:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800b112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b116:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800b118:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b11c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800b11e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b122:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800b124:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b128:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800b12a:	2380      	movs	r3, #128	; 0x80
 800b12c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800b12e:	2300      	movs	r3, #0
 800b130:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800b132:	2300      	movs	r3, #0
 800b134:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	f241 0318 	movw	r3, #4120	; 0x1018
 800b13e:	4413      	add	r3, r2
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800b146:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b14a:	4b3d      	ldr	r3, [pc, #244]	; (800b240 <ETH_MACDMAConfig+0x38c>)
 800b14c:	4013      	ands	r3, r2
 800b14e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800b152:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800b154:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800b156:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800b158:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800b15a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800b15c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800b15e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800b160:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800b162:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800b164:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800b166:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800b168:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800b16a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800b16e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800b170:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800b172:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800b174:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b178:	4313      	orrs	r3, r2
 800b17a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	f241 0318 	movw	r3, #4120	; 0x1018
 800b186:	4413      	add	r3, r2
 800b188:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b18c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	f241 0318 	movw	r3, #4120	; 0x1018
 800b196:	4413      	add	r3, r2
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b19e:	2001      	movs	r0, #1
 800b1a0:	f7fe faba 	bl	8009718 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	f241 0318 	movw	r3, #4120	; 0x1018
 800b1ac:	4413      	add	r3, r2
 800b1ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b1b2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800b1b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800b1b8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800b1ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800b1bc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800b1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800b1c0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800b1c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800b1c4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800b1c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1c8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800b1ca:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800b1cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800b1ce:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b1d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1dc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b1ec:	2001      	movs	r0, #1
 800b1ee:	f7fe fa93 	bl	8009718 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b1fe:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	699b      	ldr	r3, [r3, #24]
 800b204:	2b01      	cmp	r3, #1
 800b206:	d10d      	bne.n	800b224 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	f241 031c 	movw	r3, #4124	; 0x101c
 800b210:	4413      	add	r3, r2
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	6811      	ldr	r1, [r2, #0]
 800b218:	4a0a      	ldr	r2, [pc, #40]	; (800b244 <ETH_MACDMAConfig+0x390>)
 800b21a:	431a      	orrs	r2, r3
 800b21c:	f241 031c 	movw	r3, #4124	; 0x101c
 800b220:	440b      	add	r3, r1
 800b222:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	695b      	ldr	r3, [r3, #20]
 800b228:	461a      	mov	r2, r3
 800b22a:	2100      	movs	r1, #0
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 f80b 	bl	800b248 <ETH_MACAddressConfig>
}
 800b232:	bf00      	nop
 800b234:	37c0      	adds	r7, #192	; 0xc0
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	ff20810f 	.word	0xff20810f
 800b240:	f8de3f23 	.word	0xf8de3f23
 800b244:	00010040 	.word	0x00010040

0800b248 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800b248:	b480      	push	{r7}
 800b24a:	b087      	sub	sp, #28
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	3305      	adds	r3, #5
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	021b      	lsls	r3, r3, #8
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	3204      	adds	r2, #4
 800b260:	7812      	ldrb	r2, [r2, #0]
 800b262:	4313      	orrs	r3, r2
 800b264:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800b266:	68ba      	ldr	r2, [r7, #8]
 800b268:	4b11      	ldr	r3, [pc, #68]	; (800b2b0 <ETH_MACAddressConfig+0x68>)
 800b26a:	4413      	add	r3, r2
 800b26c:	461a      	mov	r2, r3
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	3303      	adds	r3, #3
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	061a      	lsls	r2, r3, #24
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	3302      	adds	r3, #2
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	041b      	lsls	r3, r3, #16
 800b282:	431a      	orrs	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	3301      	adds	r3, #1
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	021b      	lsls	r3, r3, #8
 800b28c:	4313      	orrs	r3, r2
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	7812      	ldrb	r2, [r2, #0]
 800b292:	4313      	orrs	r3, r2
 800b294:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800b296:	68ba      	ldr	r2, [r7, #8]
 800b298:	4b06      	ldr	r3, [pc, #24]	; (800b2b4 <ETH_MACAddressConfig+0x6c>)
 800b29a:	4413      	add	r3, r2
 800b29c:	461a      	mov	r2, r3
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	6013      	str	r3, [r2, #0]
}
 800b2a2:	bf00      	nop
 800b2a4:	371c      	adds	r7, #28
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	40028040 	.word	0x40028040
 800b2b4:	40028044 	.word	0x40028044

0800b2b8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f042 0208 	orr.w	r2, r2, #8
 800b2d2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b2dc:	2001      	movs	r0, #1
 800b2de:	f7fe fa1b 	bl	8009718 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	601a      	str	r2, [r3, #0]
}
 800b2ea:	bf00      	nop
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b084      	sub	sp, #16
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f022 0208 	bic.w	r2, r2, #8
 800b30c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b316:	2001      	movs	r0, #1
 800b318:	f7fe f9fe 	bl	8009718 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	601a      	str	r2, [r3, #0]
}
 800b324:	bf00      	nop
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800b334:	2300      	movs	r3, #0
 800b336:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f042 0204 	orr.w	r2, r2, #4
 800b346:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b350:	2001      	movs	r0, #1
 800b352:	f7fe f9e1 	bl	8009718 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	601a      	str	r2, [r3, #0]
}
 800b35e:	bf00      	nop
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800b366:	b580      	push	{r7, lr}
 800b368:	b084      	sub	sp, #16
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800b36e:	2300      	movs	r3, #0
 800b370:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f022 0204 	bic.w	r2, r2, #4
 800b380:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b38a:	2001      	movs	r0, #1
 800b38c:	f7fe f9c4 	bl	8009718 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	601a      	str	r2, [r3, #0]
}
 800b398:	bf00      	nop
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	f241 0318 	movw	r3, #4120	; 0x1018
 800b3b0:	4413      	add	r3, r2
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	6811      	ldr	r1, [r2, #0]
 800b3b8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800b3bc:	f241 0318 	movw	r3, #4120	; 0x1018
 800b3c0:	440b      	add	r3, r1
 800b3c2:	601a      	str	r2, [r3, #0]
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	f241 0318 	movw	r3, #4120	; 0x1018
 800b3e0:	4413      	add	r3, r2
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	6811      	ldr	r1, [r2, #0]
 800b3e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b3ec:	f241 0318 	movw	r3, #4120	; 0x1018
 800b3f0:	440b      	add	r3, r1
 800b3f2:	601a      	str	r2, [r3, #0]
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	f241 0318 	movw	r3, #4120	; 0x1018
 800b410:	4413      	add	r3, r2
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	6811      	ldr	r1, [r2, #0]
 800b418:	f043 0202 	orr.w	r2, r3, #2
 800b41c:	f241 0318 	movw	r3, #4120	; 0x1018
 800b420:	440b      	add	r3, r1
 800b422:	601a      	str	r2, [r3, #0]
}
 800b424:	bf00      	nop
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	f241 0318 	movw	r3, #4120	; 0x1018
 800b440:	4413      	add	r3, r2
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	6811      	ldr	r1, [r2, #0]
 800b448:	f023 0202 	bic.w	r2, r3, #2
 800b44c:	f241 0318 	movw	r3, #4120	; 0x1018
 800b450:	440b      	add	r3, r1
 800b452:	601a      	str	r2, [r3, #0]
}
 800b454:	bf00      	nop
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800b468:	2300      	movs	r3, #0
 800b46a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	f241 0318 	movw	r3, #4120	; 0x1018
 800b474:	4413      	add	r3, r2
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	6811      	ldr	r1, [r2, #0]
 800b47c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b480:	f241 0318 	movw	r3, #4120	; 0x1018
 800b484:	440b      	add	r3, r1
 800b486:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	f241 0318 	movw	r3, #4120	; 0x1018
 800b490:	4413      	add	r3, r2
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b496:	2001      	movs	r0, #1
 800b498:	f7fe f93e 	bl	8009718 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6819      	ldr	r1, [r3, #0]
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	f241 0318 	movw	r3, #4120	; 0x1018
 800b4a6:	440b      	add	r3, r1
 800b4a8:	601a      	str	r2, [r3, #0]
}
 800b4aa:	bf00      	nop
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
	...

0800b4b4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800b4b8:	4b05      	ldr	r3, [pc, #20]	; (800b4d0 <HAL_FLASH_Lock+0x1c>)
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	4a04      	ldr	r2, [pc, #16]	; (800b4d0 <HAL_FLASH_Lock+0x1c>)
 800b4be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b4c2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	40023c00 	.word	0x40023c00

0800b4d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b089      	sub	sp, #36	; 0x24
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	61fb      	str	r3, [r7, #28]
 800b4f2:	e175      	b.n	800b7e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b4fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	697a      	ldr	r2, [r7, #20]
 800b504:	4013      	ands	r3, r2
 800b506:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	f040 8164 	bne.w	800b7da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	2b01      	cmp	r3, #1
 800b518:	d00b      	beq.n	800b532 <HAL_GPIO_Init+0x5e>
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	2b02      	cmp	r3, #2
 800b520:	d007      	beq.n	800b532 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b526:	2b11      	cmp	r3, #17
 800b528:	d003      	beq.n	800b532 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	2b12      	cmp	r3, #18
 800b530:	d130      	bne.n	800b594 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b538:	69fb      	ldr	r3, [r7, #28]
 800b53a:	005b      	lsls	r3, r3, #1
 800b53c:	2203      	movs	r2, #3
 800b53e:	fa02 f303 	lsl.w	r3, r2, r3
 800b542:	43db      	mvns	r3, r3
 800b544:	69ba      	ldr	r2, [r7, #24]
 800b546:	4013      	ands	r3, r2
 800b548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	68da      	ldr	r2, [r3, #12]
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	005b      	lsls	r3, r3, #1
 800b552:	fa02 f303 	lsl.w	r3, r2, r3
 800b556:	69ba      	ldr	r2, [r7, #24]
 800b558:	4313      	orrs	r3, r2
 800b55a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	69ba      	ldr	r2, [r7, #24]
 800b560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b568:	2201      	movs	r2, #1
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	fa02 f303 	lsl.w	r3, r2, r3
 800b570:	43db      	mvns	r3, r3
 800b572:	69ba      	ldr	r2, [r7, #24]
 800b574:	4013      	ands	r3, r2
 800b576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	091b      	lsrs	r3, r3, #4
 800b57e:	f003 0201 	and.w	r2, r3, #1
 800b582:	69fb      	ldr	r3, [r7, #28]
 800b584:	fa02 f303 	lsl.w	r3, r2, r3
 800b588:	69ba      	ldr	r2, [r7, #24]
 800b58a:	4313      	orrs	r3, r2
 800b58c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	69ba      	ldr	r2, [r7, #24]
 800b592:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	005b      	lsls	r3, r3, #1
 800b59e:	2203      	movs	r2, #3
 800b5a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b5a4:	43db      	mvns	r3, r3
 800b5a6:	69ba      	ldr	r2, [r7, #24]
 800b5a8:	4013      	ands	r3, r2
 800b5aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	689a      	ldr	r2, [r3, #8]
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	005b      	lsls	r3, r3, #1
 800b5b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5b8:	69ba      	ldr	r2, [r7, #24]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	69ba      	ldr	r2, [r7, #24]
 800b5c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d003      	beq.n	800b5d4 <HAL_GPIO_Init+0x100>
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	2b12      	cmp	r3, #18
 800b5d2:	d123      	bne.n	800b61c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	08da      	lsrs	r2, r3, #3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	3208      	adds	r2, #8
 800b5dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	f003 0307 	and.w	r3, r3, #7
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	220f      	movs	r2, #15
 800b5ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b5f0:	43db      	mvns	r3, r3
 800b5f2:	69ba      	ldr	r2, [r7, #24]
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	691a      	ldr	r2, [r3, #16]
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	f003 0307 	and.w	r3, r3, #7
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	fa02 f303 	lsl.w	r3, r2, r3
 800b608:	69ba      	ldr	r2, [r7, #24]
 800b60a:	4313      	orrs	r3, r2
 800b60c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	08da      	lsrs	r2, r3, #3
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	3208      	adds	r2, #8
 800b616:	69b9      	ldr	r1, [r7, #24]
 800b618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	005b      	lsls	r3, r3, #1
 800b626:	2203      	movs	r2, #3
 800b628:	fa02 f303 	lsl.w	r3, r2, r3
 800b62c:	43db      	mvns	r3, r3
 800b62e:	69ba      	ldr	r2, [r7, #24]
 800b630:	4013      	ands	r3, r2
 800b632:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	f003 0203 	and.w	r2, r3, #3
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	005b      	lsls	r3, r3, #1
 800b640:	fa02 f303 	lsl.w	r3, r2, r3
 800b644:	69ba      	ldr	r2, [r7, #24]
 800b646:	4313      	orrs	r3, r2
 800b648:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	69ba      	ldr	r2, [r7, #24]
 800b64e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b658:	2b00      	cmp	r3, #0
 800b65a:	f000 80be 	beq.w	800b7da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b65e:	4b65      	ldr	r3, [pc, #404]	; (800b7f4 <HAL_GPIO_Init+0x320>)
 800b660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b662:	4a64      	ldr	r2, [pc, #400]	; (800b7f4 <HAL_GPIO_Init+0x320>)
 800b664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b668:	6453      	str	r3, [r2, #68]	; 0x44
 800b66a:	4b62      	ldr	r3, [pc, #392]	; (800b7f4 <HAL_GPIO_Init+0x320>)
 800b66c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b66e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b672:	60fb      	str	r3, [r7, #12]
 800b674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800b676:	4a60      	ldr	r2, [pc, #384]	; (800b7f8 <HAL_GPIO_Init+0x324>)
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	089b      	lsrs	r3, r3, #2
 800b67c:	3302      	adds	r3, #2
 800b67e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b682:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	f003 0303 	and.w	r3, r3, #3
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	220f      	movs	r2, #15
 800b68e:	fa02 f303 	lsl.w	r3, r2, r3
 800b692:	43db      	mvns	r3, r3
 800b694:	69ba      	ldr	r2, [r7, #24]
 800b696:	4013      	ands	r3, r2
 800b698:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4a57      	ldr	r2, [pc, #348]	; (800b7fc <HAL_GPIO_Init+0x328>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d037      	beq.n	800b712 <HAL_GPIO_Init+0x23e>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a56      	ldr	r2, [pc, #344]	; (800b800 <HAL_GPIO_Init+0x32c>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d031      	beq.n	800b70e <HAL_GPIO_Init+0x23a>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a55      	ldr	r2, [pc, #340]	; (800b804 <HAL_GPIO_Init+0x330>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d02b      	beq.n	800b70a <HAL_GPIO_Init+0x236>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4a54      	ldr	r2, [pc, #336]	; (800b808 <HAL_GPIO_Init+0x334>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d025      	beq.n	800b706 <HAL_GPIO_Init+0x232>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a53      	ldr	r2, [pc, #332]	; (800b80c <HAL_GPIO_Init+0x338>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d01f      	beq.n	800b702 <HAL_GPIO_Init+0x22e>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a52      	ldr	r2, [pc, #328]	; (800b810 <HAL_GPIO_Init+0x33c>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d019      	beq.n	800b6fe <HAL_GPIO_Init+0x22a>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a51      	ldr	r2, [pc, #324]	; (800b814 <HAL_GPIO_Init+0x340>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d013      	beq.n	800b6fa <HAL_GPIO_Init+0x226>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a50      	ldr	r2, [pc, #320]	; (800b818 <HAL_GPIO_Init+0x344>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d00d      	beq.n	800b6f6 <HAL_GPIO_Init+0x222>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4a4f      	ldr	r2, [pc, #316]	; (800b81c <HAL_GPIO_Init+0x348>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d007      	beq.n	800b6f2 <HAL_GPIO_Init+0x21e>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4a4e      	ldr	r2, [pc, #312]	; (800b820 <HAL_GPIO_Init+0x34c>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d101      	bne.n	800b6ee <HAL_GPIO_Init+0x21a>
 800b6ea:	2309      	movs	r3, #9
 800b6ec:	e012      	b.n	800b714 <HAL_GPIO_Init+0x240>
 800b6ee:	230a      	movs	r3, #10
 800b6f0:	e010      	b.n	800b714 <HAL_GPIO_Init+0x240>
 800b6f2:	2308      	movs	r3, #8
 800b6f4:	e00e      	b.n	800b714 <HAL_GPIO_Init+0x240>
 800b6f6:	2307      	movs	r3, #7
 800b6f8:	e00c      	b.n	800b714 <HAL_GPIO_Init+0x240>
 800b6fa:	2306      	movs	r3, #6
 800b6fc:	e00a      	b.n	800b714 <HAL_GPIO_Init+0x240>
 800b6fe:	2305      	movs	r3, #5
 800b700:	e008      	b.n	800b714 <HAL_GPIO_Init+0x240>
 800b702:	2304      	movs	r3, #4
 800b704:	e006      	b.n	800b714 <HAL_GPIO_Init+0x240>
 800b706:	2303      	movs	r3, #3
 800b708:	e004      	b.n	800b714 <HAL_GPIO_Init+0x240>
 800b70a:	2302      	movs	r3, #2
 800b70c:	e002      	b.n	800b714 <HAL_GPIO_Init+0x240>
 800b70e:	2301      	movs	r3, #1
 800b710:	e000      	b.n	800b714 <HAL_GPIO_Init+0x240>
 800b712:	2300      	movs	r3, #0
 800b714:	69fa      	ldr	r2, [r7, #28]
 800b716:	f002 0203 	and.w	r2, r2, #3
 800b71a:	0092      	lsls	r2, r2, #2
 800b71c:	4093      	lsls	r3, r2
 800b71e:	69ba      	ldr	r2, [r7, #24]
 800b720:	4313      	orrs	r3, r2
 800b722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800b724:	4934      	ldr	r1, [pc, #208]	; (800b7f8 <HAL_GPIO_Init+0x324>)
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	089b      	lsrs	r3, r3, #2
 800b72a:	3302      	adds	r3, #2
 800b72c:	69ba      	ldr	r2, [r7, #24]
 800b72e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b732:	4b3c      	ldr	r3, [pc, #240]	; (800b824 <HAL_GPIO_Init+0x350>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	43db      	mvns	r3, r3
 800b73c:	69ba      	ldr	r2, [r7, #24]
 800b73e:	4013      	ands	r3, r2
 800b740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d003      	beq.n	800b756 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b74e:	69ba      	ldr	r2, [r7, #24]
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	4313      	orrs	r3, r2
 800b754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b756:	4a33      	ldr	r2, [pc, #204]	; (800b824 <HAL_GPIO_Init+0x350>)
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b75c:	4b31      	ldr	r3, [pc, #196]	; (800b824 <HAL_GPIO_Init+0x350>)
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	43db      	mvns	r3, r3
 800b766:	69ba      	ldr	r2, [r7, #24]
 800b768:	4013      	ands	r3, r2
 800b76a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b774:	2b00      	cmp	r3, #0
 800b776:	d003      	beq.n	800b780 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b778:	69ba      	ldr	r2, [r7, #24]
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	4313      	orrs	r3, r2
 800b77e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b780:	4a28      	ldr	r2, [pc, #160]	; (800b824 <HAL_GPIO_Init+0x350>)
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b786:	4b27      	ldr	r3, [pc, #156]	; (800b824 <HAL_GPIO_Init+0x350>)
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	43db      	mvns	r3, r3
 800b790:	69ba      	ldr	r2, [r7, #24]
 800b792:	4013      	ands	r3, r2
 800b794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d003      	beq.n	800b7aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b7a2:	69ba      	ldr	r2, [r7, #24]
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b7aa:	4a1e      	ldr	r2, [pc, #120]	; (800b824 <HAL_GPIO_Init+0x350>)
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b7b0:	4b1c      	ldr	r3, [pc, #112]	; (800b824 <HAL_GPIO_Init+0x350>)
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	43db      	mvns	r3, r3
 800b7ba:	69ba      	ldr	r2, [r7, #24]
 800b7bc:	4013      	ands	r3, r2
 800b7be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d003      	beq.n	800b7d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b7cc:	69ba      	ldr	r2, [r7, #24]
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b7d4:	4a13      	ldr	r2, [pc, #76]	; (800b824 <HAL_GPIO_Init+0x350>)
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	61fb      	str	r3, [r7, #28]
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	2b0f      	cmp	r3, #15
 800b7e4:	f67f ae86 	bls.w	800b4f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800b7e8:	bf00      	nop
 800b7ea:	3724      	adds	r7, #36	; 0x24
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr
 800b7f4:	40023800 	.word	0x40023800
 800b7f8:	40013800 	.word	0x40013800
 800b7fc:	40020000 	.word	0x40020000
 800b800:	40020400 	.word	0x40020400
 800b804:	40020800 	.word	0x40020800
 800b808:	40020c00 	.word	0x40020c00
 800b80c:	40021000 	.word	0x40021000
 800b810:	40021400 	.word	0x40021400
 800b814:	40021800 	.word	0x40021800
 800b818:	40021c00 	.word	0x40021c00
 800b81c:	40022000 	.word	0x40022000
 800b820:	40022400 	.word	0x40022400
 800b824:	40013c00 	.word	0x40013c00

0800b828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	460b      	mov	r3, r1
 800b832:	807b      	strh	r3, [r7, #2]
 800b834:	4613      	mov	r3, r2
 800b836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b838:	787b      	ldrb	r3, [r7, #1]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d003      	beq.n	800b846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b83e:	887a      	ldrh	r2, [r7, #2]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800b844:	e003      	b.n	800b84e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b846:	887b      	ldrh	r3, [r7, #2]
 800b848:	041a      	lsls	r2, r3, #16
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	619a      	str	r2, [r3, #24]
}
 800b84e:	bf00      	nop
 800b850:	370c      	adds	r7, #12
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b85a:	b480      	push	{r7}
 800b85c:	b083      	sub	sp, #12
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
 800b862:	460b      	mov	r3, r1
 800b864:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	695a      	ldr	r2, [r3, #20]
 800b86a:	887b      	ldrh	r3, [r7, #2]
 800b86c:	4013      	ands	r3, r2
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d004      	beq.n	800b87c <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b872:	887b      	ldrh	r3, [r7, #2]
 800b874:	041a      	lsls	r2, r3, #16
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800b87a:	e002      	b.n	800b882 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b87c:	887a      	ldrh	r2, [r7, #2]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	619a      	str	r2, [r3, #24]
}
 800b882:	bf00      	nop
 800b884:	370c      	adds	r7, #12
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr

0800b88e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b88e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b890:	b08f      	sub	sp, #60	; 0x3c
 800b892:	af0a      	add	r7, sp, #40	; 0x28
 800b894:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d101      	bne.n	800b8a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b89c:	2301      	movs	r3, #1
 800b89e:	e116      	b.n	800bace <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d106      	bne.n	800b8c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f7fd fd46 	bl	800934c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2203      	movs	r2, #3
 800b8c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d102      	bne.n	800b8da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f002 ff1e 	bl	800e720 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	603b      	str	r3, [r7, #0]
 800b8ea:	687e      	ldr	r6, [r7, #4]
 800b8ec:	466d      	mov	r5, sp
 800b8ee:	f106 0410 	add.w	r4, r6, #16
 800b8f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b8f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b8f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b8f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b8fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b8fe:	e885 0003 	stmia.w	r5, {r0, r1}
 800b902:	1d33      	adds	r3, r6, #4
 800b904:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b906:	6838      	ldr	r0, [r7, #0]
 800b908:	f002 feb2 	bl	800e670 <USB_CoreInit>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d005      	beq.n	800b91e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2202      	movs	r2, #2
 800b916:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	e0d7      	b.n	800bace <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2100      	movs	r1, #0
 800b924:	4618      	mov	r0, r3
 800b926:	f002 ff0c 	bl	800e742 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b92a:	2300      	movs	r3, #0
 800b92c:	73fb      	strb	r3, [r7, #15]
 800b92e:	e04a      	b.n	800b9c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b930:	7bfa      	ldrb	r2, [r7, #15]
 800b932:	6879      	ldr	r1, [r7, #4]
 800b934:	4613      	mov	r3, r2
 800b936:	00db      	lsls	r3, r3, #3
 800b938:	1a9b      	subs	r3, r3, r2
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	440b      	add	r3, r1
 800b93e:	333d      	adds	r3, #61	; 0x3d
 800b940:	2201      	movs	r2, #1
 800b942:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b944:	7bfa      	ldrb	r2, [r7, #15]
 800b946:	6879      	ldr	r1, [r7, #4]
 800b948:	4613      	mov	r3, r2
 800b94a:	00db      	lsls	r3, r3, #3
 800b94c:	1a9b      	subs	r3, r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	440b      	add	r3, r1
 800b952:	333c      	adds	r3, #60	; 0x3c
 800b954:	7bfa      	ldrb	r2, [r7, #15]
 800b956:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b958:	7bfa      	ldrb	r2, [r7, #15]
 800b95a:	7bfb      	ldrb	r3, [r7, #15]
 800b95c:	b298      	uxth	r0, r3
 800b95e:	6879      	ldr	r1, [r7, #4]
 800b960:	4613      	mov	r3, r2
 800b962:	00db      	lsls	r3, r3, #3
 800b964:	1a9b      	subs	r3, r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	440b      	add	r3, r1
 800b96a:	3342      	adds	r3, #66	; 0x42
 800b96c:	4602      	mov	r2, r0
 800b96e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b970:	7bfa      	ldrb	r2, [r7, #15]
 800b972:	6879      	ldr	r1, [r7, #4]
 800b974:	4613      	mov	r3, r2
 800b976:	00db      	lsls	r3, r3, #3
 800b978:	1a9b      	subs	r3, r3, r2
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	440b      	add	r3, r1
 800b97e:	333f      	adds	r3, #63	; 0x3f
 800b980:	2200      	movs	r2, #0
 800b982:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b984:	7bfa      	ldrb	r2, [r7, #15]
 800b986:	6879      	ldr	r1, [r7, #4]
 800b988:	4613      	mov	r3, r2
 800b98a:	00db      	lsls	r3, r3, #3
 800b98c:	1a9b      	subs	r3, r3, r2
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	440b      	add	r3, r1
 800b992:	3344      	adds	r3, #68	; 0x44
 800b994:	2200      	movs	r2, #0
 800b996:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b998:	7bfa      	ldrb	r2, [r7, #15]
 800b99a:	6879      	ldr	r1, [r7, #4]
 800b99c:	4613      	mov	r3, r2
 800b99e:	00db      	lsls	r3, r3, #3
 800b9a0:	1a9b      	subs	r3, r3, r2
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	440b      	add	r3, r1
 800b9a6:	3348      	adds	r3, #72	; 0x48
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b9ac:	7bfa      	ldrb	r2, [r7, #15]
 800b9ae:	6879      	ldr	r1, [r7, #4]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	00db      	lsls	r3, r3, #3
 800b9b4:	1a9b      	subs	r3, r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	440b      	add	r3, r1
 800b9ba:	3350      	adds	r3, #80	; 0x50
 800b9bc:	2200      	movs	r2, #0
 800b9be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b9c0:	7bfb      	ldrb	r3, [r7, #15]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	73fb      	strb	r3, [r7, #15]
 800b9c6:	7bfa      	ldrb	r2, [r7, #15]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d3af      	bcc.n	800b930 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	73fb      	strb	r3, [r7, #15]
 800b9d4:	e044      	b.n	800ba60 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b9d6:	7bfa      	ldrb	r2, [r7, #15]
 800b9d8:	6879      	ldr	r1, [r7, #4]
 800b9da:	4613      	mov	r3, r2
 800b9dc:	00db      	lsls	r3, r3, #3
 800b9de:	1a9b      	subs	r3, r3, r2
 800b9e0:	009b      	lsls	r3, r3, #2
 800b9e2:	440b      	add	r3, r1
 800b9e4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b9ec:	7bfa      	ldrb	r2, [r7, #15]
 800b9ee:	6879      	ldr	r1, [r7, #4]
 800b9f0:	4613      	mov	r3, r2
 800b9f2:	00db      	lsls	r3, r3, #3
 800b9f4:	1a9b      	subs	r3, r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	440b      	add	r3, r1
 800b9fa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b9fe:	7bfa      	ldrb	r2, [r7, #15]
 800ba00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ba02:	7bfa      	ldrb	r2, [r7, #15]
 800ba04:	6879      	ldr	r1, [r7, #4]
 800ba06:	4613      	mov	r3, r2
 800ba08:	00db      	lsls	r3, r3, #3
 800ba0a:	1a9b      	subs	r3, r3, r2
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	440b      	add	r3, r1
 800ba10:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ba14:	2200      	movs	r2, #0
 800ba16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ba18:	7bfa      	ldrb	r2, [r7, #15]
 800ba1a:	6879      	ldr	r1, [r7, #4]
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	00db      	lsls	r3, r3, #3
 800ba20:	1a9b      	subs	r3, r3, r2
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	440b      	add	r3, r1
 800ba26:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ba2e:	7bfa      	ldrb	r2, [r7, #15]
 800ba30:	6879      	ldr	r1, [r7, #4]
 800ba32:	4613      	mov	r3, r2
 800ba34:	00db      	lsls	r3, r3, #3
 800ba36:	1a9b      	subs	r3, r3, r2
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	440b      	add	r3, r1
 800ba3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ba40:	2200      	movs	r2, #0
 800ba42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ba44:	7bfa      	ldrb	r2, [r7, #15]
 800ba46:	6879      	ldr	r1, [r7, #4]
 800ba48:	4613      	mov	r3, r2
 800ba4a:	00db      	lsls	r3, r3, #3
 800ba4c:	1a9b      	subs	r3, r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	440b      	add	r3, r1
 800ba52:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ba56:	2200      	movs	r2, #0
 800ba58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ba5a:	7bfb      	ldrb	r3, [r7, #15]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	73fb      	strb	r3, [r7, #15]
 800ba60:	7bfa      	ldrb	r2, [r7, #15]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d3b5      	bcc.n	800b9d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	603b      	str	r3, [r7, #0]
 800ba70:	687e      	ldr	r6, [r7, #4]
 800ba72:	466d      	mov	r5, sp
 800ba74:	f106 0410 	add.w	r4, r6, #16
 800ba78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ba7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ba80:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ba84:	e885 0003 	stmia.w	r5, {r0, r1}
 800ba88:	1d33      	adds	r3, r6, #4
 800ba8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ba8c:	6838      	ldr	r0, [r7, #0]
 800ba8e:	f002 fe83 	bl	800e798 <USB_DevInit>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d005      	beq.n	800baa4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2202      	movs	r2, #2
 800ba9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	e014      	b.n	800bace <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d102      	bne.n	800bac2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 f80b 	bl	800bad8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4618      	mov	r0, r3
 800bac8:	f003 f835 	bl	800eb36 <USB_DevDisconnect>

  return HAL_OK;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3714      	adds	r7, #20
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800bad8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2201      	movs	r2, #1
 800baea:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	699b      	ldr	r3, [r3, #24]
 800bafa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb06:	4b05      	ldr	r3, [pc, #20]	; (800bb1c <HAL_PCDEx_ActivateLPM+0x44>)
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3714      	adds	r7, #20
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr
 800bb1c:	10000003 	.word	0x10000003

0800bb20 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bb20:	b480      	push	{r7}
 800bb22:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bb24:	4b05      	ldr	r3, [pc, #20]	; (800bb3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a04      	ldr	r2, [pc, #16]	; (800bb3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bb2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb2e:	6013      	str	r3, [r2, #0]
}
 800bb30:	bf00      	nop
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	40007000 	.word	0x40007000

0800bb40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800bb46:	2300      	movs	r3, #0
 800bb48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800bb4a:	4b23      	ldr	r3, [pc, #140]	; (800bbd8 <HAL_PWREx_EnableOverDrive+0x98>)
 800bb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4e:	4a22      	ldr	r2, [pc, #136]	; (800bbd8 <HAL_PWREx_EnableOverDrive+0x98>)
 800bb50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb54:	6413      	str	r3, [r2, #64]	; 0x40
 800bb56:	4b20      	ldr	r3, [pc, #128]	; (800bbd8 <HAL_PWREx_EnableOverDrive+0x98>)
 800bb58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb5e:	603b      	str	r3, [r7, #0]
 800bb60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800bb62:	4b1e      	ldr	r3, [pc, #120]	; (800bbdc <HAL_PWREx_EnableOverDrive+0x9c>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a1d      	ldr	r2, [pc, #116]	; (800bbdc <HAL_PWREx_EnableOverDrive+0x9c>)
 800bb68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb6c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bb6e:	f7fd fdc7 	bl	8009700 <HAL_GetTick>
 800bb72:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bb74:	e009      	b.n	800bb8a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bb76:	f7fd fdc3 	bl	8009700 <HAL_GetTick>
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	1ad3      	subs	r3, r2, r3
 800bb80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb84:	d901      	bls.n	800bb8a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800bb86:	2303      	movs	r3, #3
 800bb88:	e022      	b.n	800bbd0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bb8a:	4b14      	ldr	r3, [pc, #80]	; (800bbdc <HAL_PWREx_EnableOverDrive+0x9c>)
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb96:	d1ee      	bne.n	800bb76 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800bb98:	4b10      	ldr	r3, [pc, #64]	; (800bbdc <HAL_PWREx_EnableOverDrive+0x9c>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4a0f      	ldr	r2, [pc, #60]	; (800bbdc <HAL_PWREx_EnableOverDrive+0x9c>)
 800bb9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bba2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bba4:	f7fd fdac 	bl	8009700 <HAL_GetTick>
 800bba8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bbaa:	e009      	b.n	800bbc0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bbac:	f7fd fda8 	bl	8009700 <HAL_GetTick>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	1ad3      	subs	r3, r2, r3
 800bbb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bbba:	d901      	bls.n	800bbc0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800bbbc:	2303      	movs	r3, #3
 800bbbe:	e007      	b.n	800bbd0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bbc0:	4b06      	ldr	r3, [pc, #24]	; (800bbdc <HAL_PWREx_EnableOverDrive+0x9c>)
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbcc:	d1ee      	bne.n	800bbac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	40023800 	.word	0x40023800
 800bbdc:	40007000 	.word	0x40007000

0800bbe0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b086      	sub	sp, #24
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d101      	bne.n	800bbf6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e29b      	b.n	800c12e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f003 0301 	and.w	r3, r3, #1
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	f000 8087 	beq.w	800bd12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bc04:	4b96      	ldr	r3, [pc, #600]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	f003 030c 	and.w	r3, r3, #12
 800bc0c:	2b04      	cmp	r3, #4
 800bc0e:	d00c      	beq.n	800bc2a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bc10:	4b93      	ldr	r3, [pc, #588]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	f003 030c 	and.w	r3, r3, #12
 800bc18:	2b08      	cmp	r3, #8
 800bc1a:	d112      	bne.n	800bc42 <HAL_RCC_OscConfig+0x62>
 800bc1c:	4b90      	ldr	r3, [pc, #576]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc28:	d10b      	bne.n	800bc42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc2a:	4b8d      	ldr	r3, [pc, #564]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d06c      	beq.n	800bd10 <HAL_RCC_OscConfig+0x130>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d168      	bne.n	800bd10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	e275      	b.n	800c12e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc4a:	d106      	bne.n	800bc5a <HAL_RCC_OscConfig+0x7a>
 800bc4c:	4b84      	ldr	r3, [pc, #528]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a83      	ldr	r2, [pc, #524]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bc52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc56:	6013      	str	r3, [r2, #0]
 800bc58:	e02e      	b.n	800bcb8 <HAL_RCC_OscConfig+0xd8>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10c      	bne.n	800bc7c <HAL_RCC_OscConfig+0x9c>
 800bc62:	4b7f      	ldr	r3, [pc, #508]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4a7e      	ldr	r2, [pc, #504]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bc68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc6c:	6013      	str	r3, [r2, #0]
 800bc6e:	4b7c      	ldr	r3, [pc, #496]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a7b      	ldr	r2, [pc, #492]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bc74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc78:	6013      	str	r3, [r2, #0]
 800bc7a:	e01d      	b.n	800bcb8 <HAL_RCC_OscConfig+0xd8>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bc84:	d10c      	bne.n	800bca0 <HAL_RCC_OscConfig+0xc0>
 800bc86:	4b76      	ldr	r3, [pc, #472]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a75      	ldr	r2, [pc, #468]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bc8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bc90:	6013      	str	r3, [r2, #0]
 800bc92:	4b73      	ldr	r3, [pc, #460]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a72      	ldr	r2, [pc, #456]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bc98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc9c:	6013      	str	r3, [r2, #0]
 800bc9e:	e00b      	b.n	800bcb8 <HAL_RCC_OscConfig+0xd8>
 800bca0:	4b6f      	ldr	r3, [pc, #444]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a6e      	ldr	r2, [pc, #440]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcaa:	6013      	str	r3, [r2, #0]
 800bcac:	4b6c      	ldr	r3, [pc, #432]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a6b      	ldr	r2, [pc, #428]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bcb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bcb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d013      	beq.n	800bce8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcc0:	f7fd fd1e 	bl	8009700 <HAL_GetTick>
 800bcc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bcc6:	e008      	b.n	800bcda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bcc8:	f7fd fd1a 	bl	8009700 <HAL_GetTick>
 800bccc:	4602      	mov	r2, r0
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	2b64      	cmp	r3, #100	; 0x64
 800bcd4:	d901      	bls.n	800bcda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bcd6:	2303      	movs	r3, #3
 800bcd8:	e229      	b.n	800c12e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bcda:	4b61      	ldr	r3, [pc, #388]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d0f0      	beq.n	800bcc8 <HAL_RCC_OscConfig+0xe8>
 800bce6:	e014      	b.n	800bd12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bce8:	f7fd fd0a 	bl	8009700 <HAL_GetTick>
 800bcec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bcee:	e008      	b.n	800bd02 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bcf0:	f7fd fd06 	bl	8009700 <HAL_GetTick>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	1ad3      	subs	r3, r2, r3
 800bcfa:	2b64      	cmp	r3, #100	; 0x64
 800bcfc:	d901      	bls.n	800bd02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800bcfe:	2303      	movs	r3, #3
 800bd00:	e215      	b.n	800c12e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bd02:	4b57      	ldr	r3, [pc, #348]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1f0      	bne.n	800bcf0 <HAL_RCC_OscConfig+0x110>
 800bd0e:	e000      	b.n	800bd12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f003 0302 	and.w	r3, r3, #2
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d069      	beq.n	800bdf2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bd1e:	4b50      	ldr	r3, [pc, #320]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	f003 030c 	and.w	r3, r3, #12
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00b      	beq.n	800bd42 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bd2a:	4b4d      	ldr	r3, [pc, #308]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	f003 030c 	and.w	r3, r3, #12
 800bd32:	2b08      	cmp	r3, #8
 800bd34:	d11c      	bne.n	800bd70 <HAL_RCC_OscConfig+0x190>
 800bd36:	4b4a      	ldr	r3, [pc, #296]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d116      	bne.n	800bd70 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bd42:	4b47      	ldr	r3, [pc, #284]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f003 0302 	and.w	r3, r3, #2
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d005      	beq.n	800bd5a <HAL_RCC_OscConfig+0x17a>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d001      	beq.n	800bd5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	e1e9      	b.n	800c12e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd5a:	4b41      	ldr	r3, [pc, #260]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	00db      	lsls	r3, r3, #3
 800bd68:	493d      	ldr	r1, [pc, #244]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bd6e:	e040      	b.n	800bdf2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d023      	beq.n	800bdc0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bd78:	4b39      	ldr	r3, [pc, #228]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a38      	ldr	r2, [pc, #224]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bd7e:	f043 0301 	orr.w	r3, r3, #1
 800bd82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd84:	f7fd fcbc 	bl	8009700 <HAL_GetTick>
 800bd88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd8a:	e008      	b.n	800bd9e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bd8c:	f7fd fcb8 	bl	8009700 <HAL_GetTick>
 800bd90:	4602      	mov	r2, r0
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	1ad3      	subs	r3, r2, r3
 800bd96:	2b02      	cmp	r3, #2
 800bd98:	d901      	bls.n	800bd9e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800bd9a:	2303      	movs	r3, #3
 800bd9c:	e1c7      	b.n	800c12e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd9e:	4b30      	ldr	r3, [pc, #192]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f003 0302 	and.w	r3, r3, #2
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d0f0      	beq.n	800bd8c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bdaa:	4b2d      	ldr	r3, [pc, #180]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	691b      	ldr	r3, [r3, #16]
 800bdb6:	00db      	lsls	r3, r3, #3
 800bdb8:	4929      	ldr	r1, [pc, #164]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	600b      	str	r3, [r1, #0]
 800bdbe:	e018      	b.n	800bdf2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bdc0:	4b27      	ldr	r3, [pc, #156]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4a26      	ldr	r2, [pc, #152]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bdc6:	f023 0301 	bic.w	r3, r3, #1
 800bdca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdcc:	f7fd fc98 	bl	8009700 <HAL_GetTick>
 800bdd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bdd2:	e008      	b.n	800bde6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bdd4:	f7fd fc94 	bl	8009700 <HAL_GetTick>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	1ad3      	subs	r3, r2, r3
 800bdde:	2b02      	cmp	r3, #2
 800bde0:	d901      	bls.n	800bde6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800bde2:	2303      	movs	r3, #3
 800bde4:	e1a3      	b.n	800c12e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bde6:	4b1e      	ldr	r3, [pc, #120]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f003 0302 	and.w	r3, r3, #2
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1f0      	bne.n	800bdd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f003 0308 	and.w	r3, r3, #8
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d038      	beq.n	800be70 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	695b      	ldr	r3, [r3, #20]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d019      	beq.n	800be3a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800be06:	4b16      	ldr	r3, [pc, #88]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800be08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be0a:	4a15      	ldr	r2, [pc, #84]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800be0c:	f043 0301 	orr.w	r3, r3, #1
 800be10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be12:	f7fd fc75 	bl	8009700 <HAL_GetTick>
 800be16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800be18:	e008      	b.n	800be2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800be1a:	f7fd fc71 	bl	8009700 <HAL_GetTick>
 800be1e:	4602      	mov	r2, r0
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	1ad3      	subs	r3, r2, r3
 800be24:	2b02      	cmp	r3, #2
 800be26:	d901      	bls.n	800be2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800be28:	2303      	movs	r3, #3
 800be2a:	e180      	b.n	800c12e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800be2c:	4b0c      	ldr	r3, [pc, #48]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800be2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be30:	f003 0302 	and.w	r3, r3, #2
 800be34:	2b00      	cmp	r3, #0
 800be36:	d0f0      	beq.n	800be1a <HAL_RCC_OscConfig+0x23a>
 800be38:	e01a      	b.n	800be70 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800be3a:	4b09      	ldr	r3, [pc, #36]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800be3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be3e:	4a08      	ldr	r2, [pc, #32]	; (800be60 <HAL_RCC_OscConfig+0x280>)
 800be40:	f023 0301 	bic.w	r3, r3, #1
 800be44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be46:	f7fd fc5b 	bl	8009700 <HAL_GetTick>
 800be4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800be4c:	e00a      	b.n	800be64 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800be4e:	f7fd fc57 	bl	8009700 <HAL_GetTick>
 800be52:	4602      	mov	r2, r0
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	1ad3      	subs	r3, r2, r3
 800be58:	2b02      	cmp	r3, #2
 800be5a:	d903      	bls.n	800be64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800be5c:	2303      	movs	r3, #3
 800be5e:	e166      	b.n	800c12e <HAL_RCC_OscConfig+0x54e>
 800be60:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800be64:	4b92      	ldr	r3, [pc, #584]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800be66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be68:	f003 0302 	and.w	r3, r3, #2
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d1ee      	bne.n	800be4e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f003 0304 	and.w	r3, r3, #4
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f000 80a4 	beq.w	800bfc6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800be7e:	4b8c      	ldr	r3, [pc, #560]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800be80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10d      	bne.n	800bea6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800be8a:	4b89      	ldr	r3, [pc, #548]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800be8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8e:	4a88      	ldr	r2, [pc, #544]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800be90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be94:	6413      	str	r3, [r2, #64]	; 0x40
 800be96:	4b86      	ldr	r3, [pc, #536]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800be98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be9e:	60bb      	str	r3, [r7, #8]
 800bea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bea2:	2301      	movs	r3, #1
 800bea4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bea6:	4b83      	ldr	r3, [pc, #524]	; (800c0b4 <HAL_RCC_OscConfig+0x4d4>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d118      	bne.n	800bee4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800beb2:	4b80      	ldr	r3, [pc, #512]	; (800c0b4 <HAL_RCC_OscConfig+0x4d4>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4a7f      	ldr	r2, [pc, #508]	; (800c0b4 <HAL_RCC_OscConfig+0x4d4>)
 800beb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bebe:	f7fd fc1f 	bl	8009700 <HAL_GetTick>
 800bec2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bec4:	e008      	b.n	800bed8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bec6:	f7fd fc1b 	bl	8009700 <HAL_GetTick>
 800beca:	4602      	mov	r2, r0
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	1ad3      	subs	r3, r2, r3
 800bed0:	2b64      	cmp	r3, #100	; 0x64
 800bed2:	d901      	bls.n	800bed8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800bed4:	2303      	movs	r3, #3
 800bed6:	e12a      	b.n	800c12e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bed8:	4b76      	ldr	r3, [pc, #472]	; (800c0b4 <HAL_RCC_OscConfig+0x4d4>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d0f0      	beq.n	800bec6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d106      	bne.n	800befa <HAL_RCC_OscConfig+0x31a>
 800beec:	4b70      	ldr	r3, [pc, #448]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800beee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bef0:	4a6f      	ldr	r2, [pc, #444]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bef2:	f043 0301 	orr.w	r3, r3, #1
 800bef6:	6713      	str	r3, [r2, #112]	; 0x70
 800bef8:	e02d      	b.n	800bf56 <HAL_RCC_OscConfig+0x376>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	689b      	ldr	r3, [r3, #8]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d10c      	bne.n	800bf1c <HAL_RCC_OscConfig+0x33c>
 800bf02:	4b6b      	ldr	r3, [pc, #428]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bf04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf06:	4a6a      	ldr	r2, [pc, #424]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bf08:	f023 0301 	bic.w	r3, r3, #1
 800bf0c:	6713      	str	r3, [r2, #112]	; 0x70
 800bf0e:	4b68      	ldr	r3, [pc, #416]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bf10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf12:	4a67      	ldr	r2, [pc, #412]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bf14:	f023 0304 	bic.w	r3, r3, #4
 800bf18:	6713      	str	r3, [r2, #112]	; 0x70
 800bf1a:	e01c      	b.n	800bf56 <HAL_RCC_OscConfig+0x376>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	2b05      	cmp	r3, #5
 800bf22:	d10c      	bne.n	800bf3e <HAL_RCC_OscConfig+0x35e>
 800bf24:	4b62      	ldr	r3, [pc, #392]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bf26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf28:	4a61      	ldr	r2, [pc, #388]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bf2a:	f043 0304 	orr.w	r3, r3, #4
 800bf2e:	6713      	str	r3, [r2, #112]	; 0x70
 800bf30:	4b5f      	ldr	r3, [pc, #380]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bf32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf34:	4a5e      	ldr	r2, [pc, #376]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bf36:	f043 0301 	orr.w	r3, r3, #1
 800bf3a:	6713      	str	r3, [r2, #112]	; 0x70
 800bf3c:	e00b      	b.n	800bf56 <HAL_RCC_OscConfig+0x376>
 800bf3e:	4b5c      	ldr	r3, [pc, #368]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bf40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf42:	4a5b      	ldr	r2, [pc, #364]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bf44:	f023 0301 	bic.w	r3, r3, #1
 800bf48:	6713      	str	r3, [r2, #112]	; 0x70
 800bf4a:	4b59      	ldr	r3, [pc, #356]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bf4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf4e:	4a58      	ldr	r2, [pc, #352]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bf50:	f023 0304 	bic.w	r3, r3, #4
 800bf54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d015      	beq.n	800bf8a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf5e:	f7fd fbcf 	bl	8009700 <HAL_GetTick>
 800bf62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bf64:	e00a      	b.n	800bf7c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf66:	f7fd fbcb 	bl	8009700 <HAL_GetTick>
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	1ad3      	subs	r3, r2, r3
 800bf70:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d901      	bls.n	800bf7c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800bf78:	2303      	movs	r3, #3
 800bf7a:	e0d8      	b.n	800c12e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bf7c:	4b4c      	ldr	r3, [pc, #304]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bf7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf80:	f003 0302 	and.w	r3, r3, #2
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d0ee      	beq.n	800bf66 <HAL_RCC_OscConfig+0x386>
 800bf88:	e014      	b.n	800bfb4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf8a:	f7fd fbb9 	bl	8009700 <HAL_GetTick>
 800bf8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bf90:	e00a      	b.n	800bfa8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf92:	f7fd fbb5 	bl	8009700 <HAL_GetTick>
 800bf96:	4602      	mov	r2, r0
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	1ad3      	subs	r3, r2, r3
 800bf9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d901      	bls.n	800bfa8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800bfa4:	2303      	movs	r3, #3
 800bfa6:	e0c2      	b.n	800c12e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bfa8:	4b41      	ldr	r3, [pc, #260]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bfaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfac:	f003 0302 	and.w	r3, r3, #2
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d1ee      	bne.n	800bf92 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bfb4:	7dfb      	ldrb	r3, [r7, #23]
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d105      	bne.n	800bfc6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bfba:	4b3d      	ldr	r3, [pc, #244]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bfbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfbe:	4a3c      	ldr	r2, [pc, #240]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bfc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bfc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	699b      	ldr	r3, [r3, #24]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f000 80ae 	beq.w	800c12c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bfd0:	4b37      	ldr	r3, [pc, #220]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	f003 030c 	and.w	r3, r3, #12
 800bfd8:	2b08      	cmp	r3, #8
 800bfda:	d06d      	beq.n	800c0b8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	699b      	ldr	r3, [r3, #24]
 800bfe0:	2b02      	cmp	r3, #2
 800bfe2:	d14b      	bne.n	800c07c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bfe4:	4b32      	ldr	r3, [pc, #200]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a31      	ldr	r2, [pc, #196]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800bfea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bfee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bff0:	f7fd fb86 	bl	8009700 <HAL_GetTick>
 800bff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bff6:	e008      	b.n	800c00a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bff8:	f7fd fb82 	bl	8009700 <HAL_GetTick>
 800bffc:	4602      	mov	r2, r0
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	1ad3      	subs	r3, r2, r3
 800c002:	2b02      	cmp	r3, #2
 800c004:	d901      	bls.n	800c00a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c006:	2303      	movs	r3, #3
 800c008:	e091      	b.n	800c12e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c00a:	4b29      	ldr	r3, [pc, #164]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c012:	2b00      	cmp	r3, #0
 800c014:	d1f0      	bne.n	800bff8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	69da      	ldr	r2, [r3, #28]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6a1b      	ldr	r3, [r3, #32]
 800c01e:	431a      	orrs	r2, r3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c024:	019b      	lsls	r3, r3, #6
 800c026:	431a      	orrs	r2, r3
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c02c:	085b      	lsrs	r3, r3, #1
 800c02e:	3b01      	subs	r3, #1
 800c030:	041b      	lsls	r3, r3, #16
 800c032:	431a      	orrs	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c038:	061b      	lsls	r3, r3, #24
 800c03a:	431a      	orrs	r2, r3
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c040:	071b      	lsls	r3, r3, #28
 800c042:	491b      	ldr	r1, [pc, #108]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800c044:	4313      	orrs	r3, r2
 800c046:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c048:	4b19      	ldr	r3, [pc, #100]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a18      	ldr	r2, [pc, #96]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800c04e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c054:	f7fd fb54 	bl	8009700 <HAL_GetTick>
 800c058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c05a:	e008      	b.n	800c06e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c05c:	f7fd fb50 	bl	8009700 <HAL_GetTick>
 800c060:	4602      	mov	r2, r0
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	1ad3      	subs	r3, r2, r3
 800c066:	2b02      	cmp	r3, #2
 800c068:	d901      	bls.n	800c06e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800c06a:	2303      	movs	r3, #3
 800c06c:	e05f      	b.n	800c12e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c06e:	4b10      	ldr	r3, [pc, #64]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c076:	2b00      	cmp	r3, #0
 800c078:	d0f0      	beq.n	800c05c <HAL_RCC_OscConfig+0x47c>
 800c07a:	e057      	b.n	800c12c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c07c:	4b0c      	ldr	r3, [pc, #48]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a0b      	ldr	r2, [pc, #44]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800c082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c088:	f7fd fb3a 	bl	8009700 <HAL_GetTick>
 800c08c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c08e:	e008      	b.n	800c0a2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c090:	f7fd fb36 	bl	8009700 <HAL_GetTick>
 800c094:	4602      	mov	r2, r0
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	1ad3      	subs	r3, r2, r3
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	d901      	bls.n	800c0a2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800c09e:	2303      	movs	r3, #3
 800c0a0:	e045      	b.n	800c12e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c0a2:	4b03      	ldr	r3, [pc, #12]	; (800c0b0 <HAL_RCC_OscConfig+0x4d0>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d1f0      	bne.n	800c090 <HAL_RCC_OscConfig+0x4b0>
 800c0ae:	e03d      	b.n	800c12c <HAL_RCC_OscConfig+0x54c>
 800c0b0:	40023800 	.word	0x40023800
 800c0b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c0b8:	4b1f      	ldr	r3, [pc, #124]	; (800c138 <HAL_RCC_OscConfig+0x558>)
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	699b      	ldr	r3, [r3, #24]
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d030      	beq.n	800c128 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d129      	bne.n	800c128 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d122      	bne.n	800c128 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c0e2:	68fa      	ldr	r2, [r7, #12]
 800c0e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c0e8:	4013      	ands	r3, r2
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c0ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d119      	bne.n	800c128 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0fe:	085b      	lsrs	r3, r3, #1
 800c100:	3b01      	subs	r3, #1
 800c102:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c104:	429a      	cmp	r2, r3
 800c106:	d10f      	bne.n	800c128 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c112:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c114:	429a      	cmp	r2, r3
 800c116:	d107      	bne.n	800c128 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c122:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c124:	429a      	cmp	r2, r3
 800c126:	d001      	beq.n	800c12c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800c128:	2301      	movs	r3, #1
 800c12a:	e000      	b.n	800c12e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3718      	adds	r7, #24
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	40023800 	.word	0x40023800

0800c13c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c146:	2300      	movs	r3, #0
 800c148:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d101      	bne.n	800c154 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c150:	2301      	movs	r3, #1
 800c152:	e0d0      	b.n	800c2f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c154:	4b6a      	ldr	r3, [pc, #424]	; (800c300 <HAL_RCC_ClockConfig+0x1c4>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f003 030f 	and.w	r3, r3, #15
 800c15c:	683a      	ldr	r2, [r7, #0]
 800c15e:	429a      	cmp	r2, r3
 800c160:	d910      	bls.n	800c184 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c162:	4b67      	ldr	r3, [pc, #412]	; (800c300 <HAL_RCC_ClockConfig+0x1c4>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f023 020f 	bic.w	r2, r3, #15
 800c16a:	4965      	ldr	r1, [pc, #404]	; (800c300 <HAL_RCC_ClockConfig+0x1c4>)
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	4313      	orrs	r3, r2
 800c170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c172:	4b63      	ldr	r3, [pc, #396]	; (800c300 <HAL_RCC_ClockConfig+0x1c4>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f003 030f 	and.w	r3, r3, #15
 800c17a:	683a      	ldr	r2, [r7, #0]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d001      	beq.n	800c184 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c180:	2301      	movs	r3, #1
 800c182:	e0b8      	b.n	800c2f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f003 0302 	and.w	r3, r3, #2
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d020      	beq.n	800c1d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f003 0304 	and.w	r3, r3, #4
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d005      	beq.n	800c1a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c19c:	4b59      	ldr	r3, [pc, #356]	; (800c304 <HAL_RCC_ClockConfig+0x1c8>)
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	4a58      	ldr	r2, [pc, #352]	; (800c304 <HAL_RCC_ClockConfig+0x1c8>)
 800c1a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c1a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f003 0308 	and.w	r3, r3, #8
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d005      	beq.n	800c1c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c1b4:	4b53      	ldr	r3, [pc, #332]	; (800c304 <HAL_RCC_ClockConfig+0x1c8>)
 800c1b6:	689b      	ldr	r3, [r3, #8]
 800c1b8:	4a52      	ldr	r2, [pc, #328]	; (800c304 <HAL_RCC_ClockConfig+0x1c8>)
 800c1ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c1be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c1c0:	4b50      	ldr	r3, [pc, #320]	; (800c304 <HAL_RCC_ClockConfig+0x1c8>)
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	494d      	ldr	r1, [pc, #308]	; (800c304 <HAL_RCC_ClockConfig+0x1c8>)
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f003 0301 	and.w	r3, r3, #1
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d040      	beq.n	800c260 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d107      	bne.n	800c1f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c1e6:	4b47      	ldr	r3, [pc, #284]	; (800c304 <HAL_RCC_ClockConfig+0x1c8>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d115      	bne.n	800c21e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e07f      	b.n	800c2f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	d107      	bne.n	800c20e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c1fe:	4b41      	ldr	r3, [pc, #260]	; (800c304 <HAL_RCC_ClockConfig+0x1c8>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c206:	2b00      	cmp	r3, #0
 800c208:	d109      	bne.n	800c21e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c20a:	2301      	movs	r3, #1
 800c20c:	e073      	b.n	800c2f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c20e:	4b3d      	ldr	r3, [pc, #244]	; (800c304 <HAL_RCC_ClockConfig+0x1c8>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f003 0302 	and.w	r3, r3, #2
 800c216:	2b00      	cmp	r3, #0
 800c218:	d101      	bne.n	800c21e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c21a:	2301      	movs	r3, #1
 800c21c:	e06b      	b.n	800c2f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c21e:	4b39      	ldr	r3, [pc, #228]	; (800c304 <HAL_RCC_ClockConfig+0x1c8>)
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	f023 0203 	bic.w	r2, r3, #3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	4936      	ldr	r1, [pc, #216]	; (800c304 <HAL_RCC_ClockConfig+0x1c8>)
 800c22c:	4313      	orrs	r3, r2
 800c22e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c230:	f7fd fa66 	bl	8009700 <HAL_GetTick>
 800c234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c236:	e00a      	b.n	800c24e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c238:	f7fd fa62 	bl	8009700 <HAL_GetTick>
 800c23c:	4602      	mov	r2, r0
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	1ad3      	subs	r3, r2, r3
 800c242:	f241 3288 	movw	r2, #5000	; 0x1388
 800c246:	4293      	cmp	r3, r2
 800c248:	d901      	bls.n	800c24e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800c24a:	2303      	movs	r3, #3
 800c24c:	e053      	b.n	800c2f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c24e:	4b2d      	ldr	r3, [pc, #180]	; (800c304 <HAL_RCC_ClockConfig+0x1c8>)
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	f003 020c 	and.w	r2, r3, #12
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d1eb      	bne.n	800c238 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c260:	4b27      	ldr	r3, [pc, #156]	; (800c300 <HAL_RCC_ClockConfig+0x1c4>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f003 030f 	and.w	r3, r3, #15
 800c268:	683a      	ldr	r2, [r7, #0]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d210      	bcs.n	800c290 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c26e:	4b24      	ldr	r3, [pc, #144]	; (800c300 <HAL_RCC_ClockConfig+0x1c4>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f023 020f 	bic.w	r2, r3, #15
 800c276:	4922      	ldr	r1, [pc, #136]	; (800c300 <HAL_RCC_ClockConfig+0x1c4>)
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	4313      	orrs	r3, r2
 800c27c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c27e:	4b20      	ldr	r3, [pc, #128]	; (800c300 <HAL_RCC_ClockConfig+0x1c4>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f003 030f 	and.w	r3, r3, #15
 800c286:	683a      	ldr	r2, [r7, #0]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d001      	beq.n	800c290 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	e032      	b.n	800c2f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 0304 	and.w	r3, r3, #4
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d008      	beq.n	800c2ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c29c:	4b19      	ldr	r3, [pc, #100]	; (800c304 <HAL_RCC_ClockConfig+0x1c8>)
 800c29e:	689b      	ldr	r3, [r3, #8]
 800c2a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	4916      	ldr	r1, [pc, #88]	; (800c304 <HAL_RCC_ClockConfig+0x1c8>)
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f003 0308 	and.w	r3, r3, #8
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d009      	beq.n	800c2ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c2ba:	4b12      	ldr	r3, [pc, #72]	; (800c304 <HAL_RCC_ClockConfig+0x1c8>)
 800c2bc:	689b      	ldr	r3, [r3, #8]
 800c2be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	00db      	lsls	r3, r3, #3
 800c2c8:	490e      	ldr	r1, [pc, #56]	; (800c304 <HAL_RCC_ClockConfig+0x1c8>)
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c2ce:	f000 f821 	bl	800c314 <HAL_RCC_GetSysClockFreq>
 800c2d2:	4601      	mov	r1, r0
 800c2d4:	4b0b      	ldr	r3, [pc, #44]	; (800c304 <HAL_RCC_ClockConfig+0x1c8>)
 800c2d6:	689b      	ldr	r3, [r3, #8]
 800c2d8:	091b      	lsrs	r3, r3, #4
 800c2da:	f003 030f 	and.w	r3, r3, #15
 800c2de:	4a0a      	ldr	r2, [pc, #40]	; (800c308 <HAL_RCC_ClockConfig+0x1cc>)
 800c2e0:	5cd3      	ldrb	r3, [r2, r3]
 800c2e2:	fa21 f303 	lsr.w	r3, r1, r3
 800c2e6:	4a09      	ldr	r2, [pc, #36]	; (800c30c <HAL_RCC_ClockConfig+0x1d0>)
 800c2e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c2ea:	4b09      	ldr	r3, [pc, #36]	; (800c310 <HAL_RCC_ClockConfig+0x1d4>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fd f9c2 	bl	8009678 <HAL_InitTick>

  return HAL_OK;
 800c2f4:	2300      	movs	r3, #0
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3710      	adds	r7, #16
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	40023c00 	.word	0x40023c00
 800c304:	40023800 	.word	0x40023800
 800c308:	08021cd0 	.word	0x08021cd0
 800c30c:	20000040 	.word	0x20000040
 800c310:	20000044 	.word	0x20000044

0800c314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c316:	b085      	sub	sp, #20
 800c318:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800c31a:	2300      	movs	r3, #0
 800c31c:	607b      	str	r3, [r7, #4]
 800c31e:	2300      	movs	r3, #0
 800c320:	60fb      	str	r3, [r7, #12]
 800c322:	2300      	movs	r3, #0
 800c324:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800c326:	2300      	movs	r3, #0
 800c328:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c32a:	4b63      	ldr	r3, [pc, #396]	; (800c4b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	f003 030c 	and.w	r3, r3, #12
 800c332:	2b04      	cmp	r3, #4
 800c334:	d007      	beq.n	800c346 <HAL_RCC_GetSysClockFreq+0x32>
 800c336:	2b08      	cmp	r3, #8
 800c338:	d008      	beq.n	800c34c <HAL_RCC_GetSysClockFreq+0x38>
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	f040 80b4 	bne.w	800c4a8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c340:	4b5e      	ldr	r3, [pc, #376]	; (800c4bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c342:	60bb      	str	r3, [r7, #8]
      break;
 800c344:	e0b3      	b.n	800c4ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c346:	4b5e      	ldr	r3, [pc, #376]	; (800c4c0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800c348:	60bb      	str	r3, [r7, #8]
      break;
 800c34a:	e0b0      	b.n	800c4ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c34c:	4b5a      	ldr	r3, [pc, #360]	; (800c4b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c354:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c356:	4b58      	ldr	r3, [pc, #352]	; (800c4b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d04a      	beq.n	800c3f8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c362:	4b55      	ldr	r3, [pc, #340]	; (800c4b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	099b      	lsrs	r3, r3, #6
 800c368:	f04f 0400 	mov.w	r4, #0
 800c36c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c370:	f04f 0200 	mov.w	r2, #0
 800c374:	ea03 0501 	and.w	r5, r3, r1
 800c378:	ea04 0602 	and.w	r6, r4, r2
 800c37c:	4629      	mov	r1, r5
 800c37e:	4632      	mov	r2, r6
 800c380:	f04f 0300 	mov.w	r3, #0
 800c384:	f04f 0400 	mov.w	r4, #0
 800c388:	0154      	lsls	r4, r2, #5
 800c38a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c38e:	014b      	lsls	r3, r1, #5
 800c390:	4619      	mov	r1, r3
 800c392:	4622      	mov	r2, r4
 800c394:	1b49      	subs	r1, r1, r5
 800c396:	eb62 0206 	sbc.w	r2, r2, r6
 800c39a:	f04f 0300 	mov.w	r3, #0
 800c39e:	f04f 0400 	mov.w	r4, #0
 800c3a2:	0194      	lsls	r4, r2, #6
 800c3a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c3a8:	018b      	lsls	r3, r1, #6
 800c3aa:	1a5b      	subs	r3, r3, r1
 800c3ac:	eb64 0402 	sbc.w	r4, r4, r2
 800c3b0:	f04f 0100 	mov.w	r1, #0
 800c3b4:	f04f 0200 	mov.w	r2, #0
 800c3b8:	00e2      	lsls	r2, r4, #3
 800c3ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c3be:	00d9      	lsls	r1, r3, #3
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	4614      	mov	r4, r2
 800c3c4:	195b      	adds	r3, r3, r5
 800c3c6:	eb44 0406 	adc.w	r4, r4, r6
 800c3ca:	f04f 0100 	mov.w	r1, #0
 800c3ce:	f04f 0200 	mov.w	r2, #0
 800c3d2:	0262      	lsls	r2, r4, #9
 800c3d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800c3d8:	0259      	lsls	r1, r3, #9
 800c3da:	460b      	mov	r3, r1
 800c3dc:	4614      	mov	r4, r2
 800c3de:	4618      	mov	r0, r3
 800c3e0:	4621      	mov	r1, r4
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f04f 0400 	mov.w	r4, #0
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	4623      	mov	r3, r4
 800c3ec:	f7fb ff90 	bl	8008310 <__aeabi_uldivmod>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	460c      	mov	r4, r1
 800c3f4:	60fb      	str	r3, [r7, #12]
 800c3f6:	e049      	b.n	800c48c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c3f8:	4b2f      	ldr	r3, [pc, #188]	; (800c4b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	099b      	lsrs	r3, r3, #6
 800c3fe:	f04f 0400 	mov.w	r4, #0
 800c402:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c406:	f04f 0200 	mov.w	r2, #0
 800c40a:	ea03 0501 	and.w	r5, r3, r1
 800c40e:	ea04 0602 	and.w	r6, r4, r2
 800c412:	4629      	mov	r1, r5
 800c414:	4632      	mov	r2, r6
 800c416:	f04f 0300 	mov.w	r3, #0
 800c41a:	f04f 0400 	mov.w	r4, #0
 800c41e:	0154      	lsls	r4, r2, #5
 800c420:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c424:	014b      	lsls	r3, r1, #5
 800c426:	4619      	mov	r1, r3
 800c428:	4622      	mov	r2, r4
 800c42a:	1b49      	subs	r1, r1, r5
 800c42c:	eb62 0206 	sbc.w	r2, r2, r6
 800c430:	f04f 0300 	mov.w	r3, #0
 800c434:	f04f 0400 	mov.w	r4, #0
 800c438:	0194      	lsls	r4, r2, #6
 800c43a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c43e:	018b      	lsls	r3, r1, #6
 800c440:	1a5b      	subs	r3, r3, r1
 800c442:	eb64 0402 	sbc.w	r4, r4, r2
 800c446:	f04f 0100 	mov.w	r1, #0
 800c44a:	f04f 0200 	mov.w	r2, #0
 800c44e:	00e2      	lsls	r2, r4, #3
 800c450:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c454:	00d9      	lsls	r1, r3, #3
 800c456:	460b      	mov	r3, r1
 800c458:	4614      	mov	r4, r2
 800c45a:	195b      	adds	r3, r3, r5
 800c45c:	eb44 0406 	adc.w	r4, r4, r6
 800c460:	f04f 0100 	mov.w	r1, #0
 800c464:	f04f 0200 	mov.w	r2, #0
 800c468:	02a2      	lsls	r2, r4, #10
 800c46a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c46e:	0299      	lsls	r1, r3, #10
 800c470:	460b      	mov	r3, r1
 800c472:	4614      	mov	r4, r2
 800c474:	4618      	mov	r0, r3
 800c476:	4621      	mov	r1, r4
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f04f 0400 	mov.w	r4, #0
 800c47e:	461a      	mov	r2, r3
 800c480:	4623      	mov	r3, r4
 800c482:	f7fb ff45 	bl	8008310 <__aeabi_uldivmod>
 800c486:	4603      	mov	r3, r0
 800c488:	460c      	mov	r4, r1
 800c48a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c48c:	4b0a      	ldr	r3, [pc, #40]	; (800c4b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	0c1b      	lsrs	r3, r3, #16
 800c492:	f003 0303 	and.w	r3, r3, #3
 800c496:	3301      	adds	r3, #1
 800c498:	005b      	lsls	r3, r3, #1
 800c49a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4a4:	60bb      	str	r3, [r7, #8]
      break;
 800c4a6:	e002      	b.n	800c4ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c4a8:	4b04      	ldr	r3, [pc, #16]	; (800c4bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c4aa:	60bb      	str	r3, [r7, #8]
      break;
 800c4ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c4ae:	68bb      	ldr	r3, [r7, #8]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3714      	adds	r7, #20
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4b8:	40023800 	.word	0x40023800
 800c4bc:	00f42400 	.word	0x00f42400
 800c4c0:	007a1200 	.word	0x007a1200

0800c4c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c4c8:	4b03      	ldr	r3, [pc, #12]	; (800c4d8 <HAL_RCC_GetHCLKFreq+0x14>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr
 800c4d6:	bf00      	nop
 800c4d8:	20000040 	.word	0x20000040

0800c4dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c4e0:	f7ff fff0 	bl	800c4c4 <HAL_RCC_GetHCLKFreq>
 800c4e4:	4601      	mov	r1, r0
 800c4e6:	4b05      	ldr	r3, [pc, #20]	; (800c4fc <HAL_RCC_GetPCLK1Freq+0x20>)
 800c4e8:	689b      	ldr	r3, [r3, #8]
 800c4ea:	0a9b      	lsrs	r3, r3, #10
 800c4ec:	f003 0307 	and.w	r3, r3, #7
 800c4f0:	4a03      	ldr	r2, [pc, #12]	; (800c500 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c4f2:	5cd3      	ldrb	r3, [r2, r3]
 800c4f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	40023800 	.word	0x40023800
 800c500:	08021ce0 	.word	0x08021ce0

0800c504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c508:	f7ff ffdc 	bl	800c4c4 <HAL_RCC_GetHCLKFreq>
 800c50c:	4601      	mov	r1, r0
 800c50e:	4b05      	ldr	r3, [pc, #20]	; (800c524 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	0b5b      	lsrs	r3, r3, #13
 800c514:	f003 0307 	and.w	r3, r3, #7
 800c518:	4a03      	ldr	r2, [pc, #12]	; (800c528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c51a:	5cd3      	ldrb	r3, [r2, r3]
 800c51c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c520:	4618      	mov	r0, r3
 800c522:	bd80      	pop	{r7, pc}
 800c524:	40023800 	.word	0x40023800
 800c528:	08021ce0 	.word	0x08021ce0

0800c52c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b088      	sub	sp, #32
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c534:	2300      	movs	r3, #0
 800c536:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800c538:	2300      	movs	r3, #0
 800c53a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800c53c:	2300      	movs	r3, #0
 800c53e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800c540:	2300      	movs	r3, #0
 800c542:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800c544:	2300      	movs	r3, #0
 800c546:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f003 0301 	and.w	r3, r3, #1
 800c550:	2b00      	cmp	r3, #0
 800c552:	d012      	beq.n	800c57a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c554:	4b69      	ldr	r3, [pc, #420]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	4a68      	ldr	r2, [pc, #416]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c55a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c55e:	6093      	str	r3, [r2, #8]
 800c560:	4b66      	ldr	r3, [pc, #408]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c562:	689a      	ldr	r2, [r3, #8]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c568:	4964      	ldr	r1, [pc, #400]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c56a:	4313      	orrs	r3, r2
 800c56c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c572:	2b00      	cmp	r3, #0
 800c574:	d101      	bne.n	800c57a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800c576:	2301      	movs	r3, #1
 800c578:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c582:	2b00      	cmp	r3, #0
 800c584:	d017      	beq.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c586:	4b5d      	ldr	r3, [pc, #372]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c58c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c594:	4959      	ldr	r1, [pc, #356]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c596:	4313      	orrs	r3, r2
 800c598:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5a4:	d101      	bne.n	800c5aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d101      	bne.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d017      	beq.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c5c2:	4b4e      	ldr	r3, [pc, #312]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c5c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5d0:	494a      	ldr	r1, [pc, #296]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5e0:	d101      	bne.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d101      	bne.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d001      	beq.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800c5fe:	2301      	movs	r3, #1
 800c600:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f003 0320 	and.w	r3, r3, #32
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f000 808b 	beq.w	800c726 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c610:	4b3a      	ldr	r3, [pc, #232]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c614:	4a39      	ldr	r2, [pc, #228]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c61a:	6413      	str	r3, [r2, #64]	; 0x40
 800c61c:	4b37      	ldr	r3, [pc, #220]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c61e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c624:	60bb      	str	r3, [r7, #8]
 800c626:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c628:	4b35      	ldr	r3, [pc, #212]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a34      	ldr	r2, [pc, #208]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c62e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c634:	f7fd f864 	bl	8009700 <HAL_GetTick>
 800c638:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c63a:	e008      	b.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c63c:	f7fd f860 	bl	8009700 <HAL_GetTick>
 800c640:	4602      	mov	r2, r0
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	1ad3      	subs	r3, r2, r3
 800c646:	2b64      	cmp	r3, #100	; 0x64
 800c648:	d901      	bls.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800c64a:	2303      	movs	r3, #3
 800c64c:	e38d      	b.n	800cd6a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c64e:	4b2c      	ldr	r3, [pc, #176]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c656:	2b00      	cmp	r3, #0
 800c658:	d0f0      	beq.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c65a:	4b28      	ldr	r3, [pc, #160]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c65c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c65e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c662:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d035      	beq.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c66e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c672:	693a      	ldr	r2, [r7, #16]
 800c674:	429a      	cmp	r2, r3
 800c676:	d02e      	beq.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c678:	4b20      	ldr	r3, [pc, #128]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c67a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c67c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c680:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c682:	4b1e      	ldr	r3, [pc, #120]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c686:	4a1d      	ldr	r2, [pc, #116]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c68c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c68e:	4b1b      	ldr	r3, [pc, #108]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c692:	4a1a      	ldr	r2, [pc, #104]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c698:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c69a:	4a18      	ldr	r2, [pc, #96]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c6a0:	4b16      	ldr	r3, [pc, #88]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c6a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6a4:	f003 0301 	and.w	r3, r3, #1
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d114      	bne.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6ac:	f7fd f828 	bl	8009700 <HAL_GetTick>
 800c6b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c6b2:	e00a      	b.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c6b4:	f7fd f824 	bl	8009700 <HAL_GetTick>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	1ad3      	subs	r3, r2, r3
 800c6be:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d901      	bls.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800c6c6:	2303      	movs	r3, #3
 800c6c8:	e34f      	b.n	800cd6a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c6ca:	4b0c      	ldr	r3, [pc, #48]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c6cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ce:	f003 0302 	and.w	r3, r3, #2
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d0ee      	beq.n	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6e2:	d111      	bne.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800c6e4:	4b05      	ldr	r3, [pc, #20]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c6f0:	4b04      	ldr	r3, [pc, #16]	; (800c704 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c6f2:	400b      	ands	r3, r1
 800c6f4:	4901      	ldr	r1, [pc, #4]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	608b      	str	r3, [r1, #8]
 800c6fa:	e00b      	b.n	800c714 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800c6fc:	40023800 	.word	0x40023800
 800c700:	40007000 	.word	0x40007000
 800c704:	0ffffcff 	.word	0x0ffffcff
 800c708:	4bb3      	ldr	r3, [pc, #716]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	4ab2      	ldr	r2, [pc, #712]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c70e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c712:	6093      	str	r3, [r2, #8]
 800c714:	4bb0      	ldr	r3, [pc, #704]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c716:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c71c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c720:	49ad      	ldr	r1, [pc, #692]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c722:	4313      	orrs	r3, r2
 800c724:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f003 0310 	and.w	r3, r3, #16
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d010      	beq.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c732:	4ba9      	ldr	r3, [pc, #676]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c738:	4aa7      	ldr	r2, [pc, #668]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c73a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c73e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800c742:	4ba5      	ldr	r3, [pc, #660]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c744:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c74c:	49a2      	ldr	r1, [pc, #648]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c74e:	4313      	orrs	r3, r2
 800c750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d00a      	beq.n	800c776 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c760:	4b9d      	ldr	r3, [pc, #628]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c766:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c76e:	499a      	ldr	r1, [pc, #616]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c770:	4313      	orrs	r3, r2
 800c772:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d00a      	beq.n	800c798 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c782:	4b95      	ldr	r3, [pc, #596]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c788:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c790:	4991      	ldr	r1, [pc, #580]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c792:	4313      	orrs	r3, r2
 800c794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d00a      	beq.n	800c7ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c7a4:	4b8c      	ldr	r3, [pc, #560]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c7a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7b2:	4989      	ldr	r1, [pc, #548]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d00a      	beq.n	800c7dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c7c6:	4b84      	ldr	r3, [pc, #528]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c7c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7d4:	4980      	ldr	r1, [pc, #512]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00a      	beq.n	800c7fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c7e8:	4b7b      	ldr	r3, [pc, #492]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c7ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7ee:	f023 0203 	bic.w	r2, r3, #3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7f6:	4978      	ldr	r1, [pc, #480]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c806:	2b00      	cmp	r3, #0
 800c808:	d00a      	beq.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c80a:	4b73      	ldr	r3, [pc, #460]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c80c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c810:	f023 020c 	bic.w	r2, r3, #12
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c818:	496f      	ldr	r1, [pc, #444]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c81a:	4313      	orrs	r3, r2
 800c81c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00a      	beq.n	800c842 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c82c:	4b6a      	ldr	r3, [pc, #424]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c82e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c832:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c83a:	4967      	ldr	r1, [pc, #412]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c83c:	4313      	orrs	r3, r2
 800c83e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00a      	beq.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c84e:	4b62      	ldr	r3, [pc, #392]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c854:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c85c:	495e      	ldr	r1, [pc, #376]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c85e:	4313      	orrs	r3, r2
 800c860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00a      	beq.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c870:	4b59      	ldr	r3, [pc, #356]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c876:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c87e:	4956      	ldr	r1, [pc, #344]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c880:	4313      	orrs	r3, r2
 800c882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00a      	beq.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c892:	4b51      	ldr	r3, [pc, #324]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c898:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8a0:	494d      	ldr	r1, [pc, #308]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00a      	beq.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c8b4:	4b48      	ldr	r3, [pc, #288]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c8b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8c2:	4945      	ldr	r1, [pc, #276]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00a      	beq.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c8d6:	4b40      	ldr	r3, [pc, #256]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c8d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8e4:	493c      	ldr	r1, [pc, #240]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d00a      	beq.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c8f8:	4b37      	ldr	r3, [pc, #220]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c8fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c906:	4934      	ldr	r1, [pc, #208]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c908:	4313      	orrs	r3, r2
 800c90a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c916:	2b00      	cmp	r3, #0
 800c918:	d011      	beq.n	800c93e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c91a:	4b2f      	ldr	r3, [pc, #188]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c91c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c920:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c928:	492b      	ldr	r1, [pc, #172]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c92a:	4313      	orrs	r3, r2
 800c92c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c934:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c938:	d101      	bne.n	800c93e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c93a:	2301      	movs	r3, #1
 800c93c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f003 0308 	and.w	r3, r3, #8
 800c946:	2b00      	cmp	r3, #0
 800c948:	d001      	beq.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c94a:	2301      	movs	r3, #1
 800c94c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00a      	beq.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c95a:	4b1f      	ldr	r3, [pc, #124]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c95c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c960:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c968:	491b      	ldr	r1, [pc, #108]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c96a:	4313      	orrs	r3, r2
 800c96c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00b      	beq.n	800c994 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c97c:	4b16      	ldr	r3, [pc, #88]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c97e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c982:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c98c:	4912      	ldr	r1, [pc, #72]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c98e:	4313      	orrs	r3, r2
 800c990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00b      	beq.n	800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800c9a0:	4b0d      	ldr	r3, [pc, #52]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c9a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9b0:	4909      	ldr	r1, [pc, #36]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00f      	beq.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c9c4:	4b04      	ldr	r3, [pc, #16]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c9c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9d4:	e002      	b.n	800c9dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800c9d6:	bf00      	nop
 800c9d8:	40023800 	.word	0x40023800
 800c9dc:	4985      	ldr	r1, [pc, #532]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d00b      	beq.n	800ca08 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800c9f0:	4b80      	ldr	r3, [pc, #512]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c9f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca00:	497c      	ldr	r1, [pc, #496]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ca02:	4313      	orrs	r3, r2
 800ca04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d005      	beq.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca16:	f040 80d6 	bne.w	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ca1a:	4b76      	ldr	r3, [pc, #472]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4a75      	ldr	r2, [pc, #468]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ca20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ca24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca26:	f7fc fe6b 	bl	8009700 <HAL_GetTick>
 800ca2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ca2c:	e008      	b.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ca2e:	f7fc fe67 	bl	8009700 <HAL_GetTick>
 800ca32:	4602      	mov	r2, r0
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	1ad3      	subs	r3, r2, r3
 800ca38:	2b64      	cmp	r3, #100	; 0x64
 800ca3a:	d901      	bls.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ca3c:	2303      	movs	r3, #3
 800ca3e:	e194      	b.n	800cd6a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ca40:	4b6c      	ldr	r3, [pc, #432]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d1f0      	bne.n	800ca2e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f003 0301 	and.w	r3, r3, #1
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d021      	beq.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x570>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d11d      	bne.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ca60:	4b64      	ldr	r3, [pc, #400]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ca62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca66:	0c1b      	lsrs	r3, r3, #16
 800ca68:	f003 0303 	and.w	r3, r3, #3
 800ca6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ca6e:	4b61      	ldr	r3, [pc, #388]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ca70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca74:	0e1b      	lsrs	r3, r3, #24
 800ca76:	f003 030f 	and.w	r3, r3, #15
 800ca7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	019a      	lsls	r2, r3, #6
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	041b      	lsls	r3, r3, #16
 800ca86:	431a      	orrs	r2, r3
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	061b      	lsls	r3, r3, #24
 800ca8c:	431a      	orrs	r2, r3
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	689b      	ldr	r3, [r3, #8]
 800ca92:	071b      	lsls	r3, r3, #28
 800ca94:	4957      	ldr	r1, [pc, #348]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ca96:	4313      	orrs	r3, r2
 800ca98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d004      	beq.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cab0:	d00a      	beq.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d02e      	beq.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cac6:	d129      	bne.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800cac8:	4b4a      	ldr	r3, [pc, #296]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800caca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cace:	0c1b      	lsrs	r3, r3, #16
 800cad0:	f003 0303 	and.w	r3, r3, #3
 800cad4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800cad6:	4b47      	ldr	r3, [pc, #284]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cadc:	0f1b      	lsrs	r3, r3, #28
 800cade:	f003 0307 	and.w	r3, r3, #7
 800cae2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	019a      	lsls	r2, r3, #6
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	041b      	lsls	r3, r3, #16
 800caee:	431a      	orrs	r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	68db      	ldr	r3, [r3, #12]
 800caf4:	061b      	lsls	r3, r3, #24
 800caf6:	431a      	orrs	r2, r3
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	071b      	lsls	r3, r3, #28
 800cafc:	493d      	ldr	r1, [pc, #244]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cafe:	4313      	orrs	r3, r2
 800cb00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800cb04:	4b3b      	ldr	r3, [pc, #236]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cb06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb0a:	f023 021f 	bic.w	r2, r3, #31
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb12:	3b01      	subs	r3, #1
 800cb14:	4937      	ldr	r1, [pc, #220]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cb16:	4313      	orrs	r3, r2
 800cb18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d01d      	beq.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800cb28:	4b32      	ldr	r3, [pc, #200]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cb2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb2e:	0e1b      	lsrs	r3, r3, #24
 800cb30:	f003 030f 	and.w	r3, r3, #15
 800cb34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800cb36:	4b2f      	ldr	r3, [pc, #188]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cb38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb3c:	0f1b      	lsrs	r3, r3, #28
 800cb3e:	f003 0307 	and.w	r3, r3, #7
 800cb42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	019a      	lsls	r2, r3, #6
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	691b      	ldr	r3, [r3, #16]
 800cb4e:	041b      	lsls	r3, r3, #16
 800cb50:	431a      	orrs	r2, r3
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	061b      	lsls	r3, r3, #24
 800cb56:	431a      	orrs	r2, r3
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	071b      	lsls	r3, r3, #28
 800cb5c:	4925      	ldr	r1, [pc, #148]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d011      	beq.n	800cb94 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	019a      	lsls	r2, r3, #6
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	691b      	ldr	r3, [r3, #16]
 800cb7a:	041b      	lsls	r3, r3, #16
 800cb7c:	431a      	orrs	r2, r3
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	68db      	ldr	r3, [r3, #12]
 800cb82:	061b      	lsls	r3, r3, #24
 800cb84:	431a      	orrs	r2, r3
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	071b      	lsls	r3, r3, #28
 800cb8c:	4919      	ldr	r1, [pc, #100]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800cb94:	4b17      	ldr	r3, [pc, #92]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a16      	ldr	r2, [pc, #88]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cb9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cb9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cba0:	f7fc fdae 	bl	8009700 <HAL_GetTick>
 800cba4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cba6:	e008      	b.n	800cbba <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800cba8:	f7fc fdaa 	bl	8009700 <HAL_GetTick>
 800cbac:	4602      	mov	r2, r0
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	1ad3      	subs	r3, r2, r3
 800cbb2:	2b64      	cmp	r3, #100	; 0x64
 800cbb4:	d901      	bls.n	800cbba <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cbb6:	2303      	movs	r3, #3
 800cbb8:	e0d7      	b.n	800cd6a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cbba:	4b0e      	ldr	r3, [pc, #56]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d0f0      	beq.n	800cba8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	f040 80cd 	bne.w	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800cbce:	4b09      	ldr	r3, [pc, #36]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a08      	ldr	r2, [pc, #32]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cbd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cbd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbda:	f7fc fd91 	bl	8009700 <HAL_GetTick>
 800cbde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800cbe0:	e00a      	b.n	800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800cbe2:	f7fc fd8d 	bl	8009700 <HAL_GetTick>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	1ad3      	subs	r3, r2, r3
 800cbec:	2b64      	cmp	r3, #100	; 0x64
 800cbee:	d903      	bls.n	800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cbf0:	2303      	movs	r3, #3
 800cbf2:	e0ba      	b.n	800cd6a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800cbf4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800cbf8:	4b5e      	ldr	r3, [pc, #376]	; (800cd74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc04:	d0ed      	beq.n	800cbe2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d003      	beq.n	800cc1a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d009      	beq.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d02e      	beq.n	800cc84 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d12a      	bne.n	800cc84 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800cc2e:	4b51      	ldr	r3, [pc, #324]	; (800cd74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cc30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc34:	0c1b      	lsrs	r3, r3, #16
 800cc36:	f003 0303 	and.w	r3, r3, #3
 800cc3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cc3c:	4b4d      	ldr	r3, [pc, #308]	; (800cd74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cc3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc42:	0f1b      	lsrs	r3, r3, #28
 800cc44:	f003 0307 	and.w	r3, r3, #7
 800cc48:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	695b      	ldr	r3, [r3, #20]
 800cc4e:	019a      	lsls	r2, r3, #6
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	041b      	lsls	r3, r3, #16
 800cc54:	431a      	orrs	r2, r3
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	699b      	ldr	r3, [r3, #24]
 800cc5a:	061b      	lsls	r3, r3, #24
 800cc5c:	431a      	orrs	r2, r3
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	071b      	lsls	r3, r3, #28
 800cc62:	4944      	ldr	r1, [pc, #272]	; (800cd74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cc64:	4313      	orrs	r3, r2
 800cc66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800cc6a:	4b42      	ldr	r3, [pc, #264]	; (800cd74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cc6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc70:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc78:	3b01      	subs	r3, #1
 800cc7a:	021b      	lsls	r3, r3, #8
 800cc7c:	493d      	ldr	r1, [pc, #244]	; (800cd74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d022      	beq.n	800ccd6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc98:	d11d      	bne.n	800ccd6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cc9a:	4b36      	ldr	r3, [pc, #216]	; (800cd74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cc9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cca0:	0e1b      	lsrs	r3, r3, #24
 800cca2:	f003 030f 	and.w	r3, r3, #15
 800cca6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cca8:	4b32      	ldr	r3, [pc, #200]	; (800cd74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ccaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccae:	0f1b      	lsrs	r3, r3, #28
 800ccb0:	f003 0307 	and.w	r3, r3, #7
 800ccb4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	695b      	ldr	r3, [r3, #20]
 800ccba:	019a      	lsls	r2, r3, #6
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6a1b      	ldr	r3, [r3, #32]
 800ccc0:	041b      	lsls	r3, r3, #16
 800ccc2:	431a      	orrs	r2, r3
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	061b      	lsls	r3, r3, #24
 800ccc8:	431a      	orrs	r2, r3
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	071b      	lsls	r3, r3, #28
 800ccce:	4929      	ldr	r1, [pc, #164]	; (800cd74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f003 0308 	and.w	r3, r3, #8
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d028      	beq.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cce2:	4b24      	ldr	r3, [pc, #144]	; (800cd74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cce8:	0e1b      	lsrs	r3, r3, #24
 800ccea:	f003 030f 	and.w	r3, r3, #15
 800ccee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ccf0:	4b20      	ldr	r3, [pc, #128]	; (800cd74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ccf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccf6:	0c1b      	lsrs	r3, r3, #16
 800ccf8:	f003 0303 	and.w	r3, r3, #3
 800ccfc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	695b      	ldr	r3, [r3, #20]
 800cd02:	019a      	lsls	r2, r3, #6
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	041b      	lsls	r3, r3, #16
 800cd08:	431a      	orrs	r2, r3
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	061b      	lsls	r3, r3, #24
 800cd0e:	431a      	orrs	r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	69db      	ldr	r3, [r3, #28]
 800cd14:	071b      	lsls	r3, r3, #28
 800cd16:	4917      	ldr	r1, [pc, #92]	; (800cd74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800cd1e:	4b15      	ldr	r3, [pc, #84]	; (800cd74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cd20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd2c:	4911      	ldr	r1, [pc, #68]	; (800cd74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800cd34:	4b0f      	ldr	r3, [pc, #60]	; (800cd74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a0e      	ldr	r2, [pc, #56]	; (800cd74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cd3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd40:	f7fc fcde 	bl	8009700 <HAL_GetTick>
 800cd44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cd46:	e008      	b.n	800cd5a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800cd48:	f7fc fcda 	bl	8009700 <HAL_GetTick>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	1ad3      	subs	r3, r2, r3
 800cd52:	2b64      	cmp	r3, #100	; 0x64
 800cd54:	d901      	bls.n	800cd5a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cd56:	2303      	movs	r3, #3
 800cd58:	e007      	b.n	800cd6a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cd5a:	4b06      	ldr	r3, [pc, #24]	; (800cd74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd66:	d1ef      	bne.n	800cd48 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800cd68:	2300      	movs	r3, #0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3720      	adds	r7, #32
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	40023800 	.word	0x40023800

0800cd78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d101      	bne.n	800cd8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cd86:	2301      	movs	r3, #1
 800cd88:	e01d      	b.n	800cdc6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d106      	bne.n	800cda4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f7fc f9ec 	bl	800917c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2202      	movs	r2, #2
 800cda8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681a      	ldr	r2, [r3, #0]
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	3304      	adds	r3, #4
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	4610      	mov	r0, r2
 800cdb8:	f000 fa40 	bl	800d23c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cdc4:	2300      	movs	r3, #0
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3708      	adds	r7, #8
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
	...

0800cdd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b085      	sub	sp, #20
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	68da      	ldr	r2, [r3, #12]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f042 0201 	orr.w	r2, r2, #1
 800cde6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	689a      	ldr	r2, [r3, #8]
 800cdee:	4b0c      	ldr	r3, [pc, #48]	; (800ce20 <HAL_TIM_Base_Start_IT+0x50>)
 800cdf0:	4013      	ands	r3, r2
 800cdf2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2b06      	cmp	r3, #6
 800cdf8:	d00b      	beq.n	800ce12 <HAL_TIM_Base_Start_IT+0x42>
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce00:	d007      	beq.n	800ce12 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f042 0201 	orr.w	r2, r2, #1
 800ce10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ce12:	2300      	movs	r3, #0
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3714      	adds	r7, #20
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr
 800ce20:	00010007 	.word	0x00010007

0800ce24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	691b      	ldr	r3, [r3, #16]
 800ce32:	f003 0302 	and.w	r3, r3, #2
 800ce36:	2b02      	cmp	r3, #2
 800ce38:	d122      	bne.n	800ce80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	f003 0302 	and.w	r3, r3, #2
 800ce44:	2b02      	cmp	r3, #2
 800ce46:	d11b      	bne.n	800ce80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f06f 0202 	mvn.w	r2, #2
 800ce50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2201      	movs	r2, #1
 800ce56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	699b      	ldr	r3, [r3, #24]
 800ce5e:	f003 0303 	and.w	r3, r3, #3
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d003      	beq.n	800ce6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f000 f9ca 	bl	800d200 <HAL_TIM_IC_CaptureCallback>
 800ce6c:	e005      	b.n	800ce7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 f9bc 	bl	800d1ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 f9cd 	bl	800d214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	f003 0304 	and.w	r3, r3, #4
 800ce8a:	2b04      	cmp	r3, #4
 800ce8c:	d122      	bne.n	800ced4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	f003 0304 	and.w	r3, r3, #4
 800ce98:	2b04      	cmp	r3, #4
 800ce9a:	d11b      	bne.n	800ced4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f06f 0204 	mvn.w	r2, #4
 800cea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2202      	movs	r2, #2
 800ceaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	699b      	ldr	r3, [r3, #24]
 800ceb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d003      	beq.n	800cec2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f000 f9a0 	bl	800d200 <HAL_TIM_IC_CaptureCallback>
 800cec0:	e005      	b.n	800cece <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 f992 	bl	800d1ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 f9a3 	bl	800d214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2200      	movs	r2, #0
 800ced2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	691b      	ldr	r3, [r3, #16]
 800ceda:	f003 0308 	and.w	r3, r3, #8
 800cede:	2b08      	cmp	r3, #8
 800cee0:	d122      	bne.n	800cf28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	f003 0308 	and.w	r3, r3, #8
 800ceec:	2b08      	cmp	r3, #8
 800ceee:	d11b      	bne.n	800cf28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f06f 0208 	mvn.w	r2, #8
 800cef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2204      	movs	r2, #4
 800cefe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	69db      	ldr	r3, [r3, #28]
 800cf06:	f003 0303 	and.w	r3, r3, #3
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d003      	beq.n	800cf16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 f976 	bl	800d200 <HAL_TIM_IC_CaptureCallback>
 800cf14:	e005      	b.n	800cf22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 f968 	bl	800d1ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f000 f979 	bl	800d214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	691b      	ldr	r3, [r3, #16]
 800cf2e:	f003 0310 	and.w	r3, r3, #16
 800cf32:	2b10      	cmp	r3, #16
 800cf34:	d122      	bne.n	800cf7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	68db      	ldr	r3, [r3, #12]
 800cf3c:	f003 0310 	and.w	r3, r3, #16
 800cf40:	2b10      	cmp	r3, #16
 800cf42:	d11b      	bne.n	800cf7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f06f 0210 	mvn.w	r2, #16
 800cf4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2208      	movs	r2, #8
 800cf52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	69db      	ldr	r3, [r3, #28]
 800cf5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d003      	beq.n	800cf6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f000 f94c 	bl	800d200 <HAL_TIM_IC_CaptureCallback>
 800cf68:	e005      	b.n	800cf76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f000 f93e 	bl	800d1ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 f94f 	bl	800d214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	691b      	ldr	r3, [r3, #16]
 800cf82:	f003 0301 	and.w	r3, r3, #1
 800cf86:	2b01      	cmp	r3, #1
 800cf88:	d10e      	bne.n	800cfa8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	f003 0301 	and.w	r3, r3, #1
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d107      	bne.n	800cfa8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f06f 0201 	mvn.w	r2, #1
 800cfa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 f918 	bl	800d1d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	691b      	ldr	r3, [r3, #16]
 800cfae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfb2:	2b80      	cmp	r3, #128	; 0x80
 800cfb4:	d10e      	bne.n	800cfd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfc0:	2b80      	cmp	r3, #128	; 0x80
 800cfc2:	d107      	bne.n	800cfd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cfcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 fb06 	bl	800d5e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	691b      	ldr	r3, [r3, #16]
 800cfda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfe2:	d10e      	bne.n	800d002 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfee:	2b80      	cmp	r3, #128	; 0x80
 800cff0:	d107      	bne.n	800d002 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f000 faf9 	bl	800d5f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	691b      	ldr	r3, [r3, #16]
 800d008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d00c:	2b40      	cmp	r3, #64	; 0x40
 800d00e:	d10e      	bne.n	800d02e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	68db      	ldr	r3, [r3, #12]
 800d016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d01a:	2b40      	cmp	r3, #64	; 0x40
 800d01c:	d107      	bne.n	800d02e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 f8fd 	bl	800d228 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	691b      	ldr	r3, [r3, #16]
 800d034:	f003 0320 	and.w	r3, r3, #32
 800d038:	2b20      	cmp	r3, #32
 800d03a:	d10e      	bne.n	800d05a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	68db      	ldr	r3, [r3, #12]
 800d042:	f003 0320 	and.w	r3, r3, #32
 800d046:	2b20      	cmp	r3, #32
 800d048:	d107      	bne.n	800d05a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f06f 0220 	mvn.w	r2, #32
 800d052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f000 fab9 	bl	800d5cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d05a:	bf00      	nop
 800d05c:	3708      	adds	r7, #8
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
	...

0800d064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d074:	2b01      	cmp	r3, #1
 800d076:	d101      	bne.n	800d07c <HAL_TIM_ConfigClockSource+0x18>
 800d078:	2302      	movs	r3, #2
 800d07a:	e0a6      	b.n	800d1ca <HAL_TIM_ConfigClockSource+0x166>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2201      	movs	r2, #1
 800d080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2202      	movs	r2, #2
 800d088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d094:	68fa      	ldr	r2, [r7, #12]
 800d096:	4b4f      	ldr	r3, [pc, #316]	; (800d1d4 <HAL_TIM_ConfigClockSource+0x170>)
 800d098:	4013      	ands	r3, r2
 800d09a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d0a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	68fa      	ldr	r2, [r7, #12]
 800d0aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2b40      	cmp	r3, #64	; 0x40
 800d0b2:	d067      	beq.n	800d184 <HAL_TIM_ConfigClockSource+0x120>
 800d0b4:	2b40      	cmp	r3, #64	; 0x40
 800d0b6:	d80b      	bhi.n	800d0d0 <HAL_TIM_ConfigClockSource+0x6c>
 800d0b8:	2b10      	cmp	r3, #16
 800d0ba:	d073      	beq.n	800d1a4 <HAL_TIM_ConfigClockSource+0x140>
 800d0bc:	2b10      	cmp	r3, #16
 800d0be:	d802      	bhi.n	800d0c6 <HAL_TIM_ConfigClockSource+0x62>
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d06f      	beq.n	800d1a4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d0c4:	e078      	b.n	800d1b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d0c6:	2b20      	cmp	r3, #32
 800d0c8:	d06c      	beq.n	800d1a4 <HAL_TIM_ConfigClockSource+0x140>
 800d0ca:	2b30      	cmp	r3, #48	; 0x30
 800d0cc:	d06a      	beq.n	800d1a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800d0ce:	e073      	b.n	800d1b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d0d0:	2b70      	cmp	r3, #112	; 0x70
 800d0d2:	d00d      	beq.n	800d0f0 <HAL_TIM_ConfigClockSource+0x8c>
 800d0d4:	2b70      	cmp	r3, #112	; 0x70
 800d0d6:	d804      	bhi.n	800d0e2 <HAL_TIM_ConfigClockSource+0x7e>
 800d0d8:	2b50      	cmp	r3, #80	; 0x50
 800d0da:	d033      	beq.n	800d144 <HAL_TIM_ConfigClockSource+0xe0>
 800d0dc:	2b60      	cmp	r3, #96	; 0x60
 800d0de:	d041      	beq.n	800d164 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800d0e0:	e06a      	b.n	800d1b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d0e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0e6:	d066      	beq.n	800d1b6 <HAL_TIM_ConfigClockSource+0x152>
 800d0e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0ec:	d017      	beq.n	800d11e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800d0ee:	e063      	b.n	800d1b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6818      	ldr	r0, [r3, #0]
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	6899      	ldr	r1, [r3, #8]
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	685a      	ldr	r2, [r3, #4]
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	f000 f9b6 	bl	800d470 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	689b      	ldr	r3, [r3, #8]
 800d10a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d112:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	68fa      	ldr	r2, [r7, #12]
 800d11a:	609a      	str	r2, [r3, #8]
      break;
 800d11c:	e04c      	b.n	800d1b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6818      	ldr	r0, [r3, #0]
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	6899      	ldr	r1, [r3, #8]
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	685a      	ldr	r2, [r3, #4]
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	f000 f99f 	bl	800d470 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	689a      	ldr	r2, [r3, #8]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d140:	609a      	str	r2, [r3, #8]
      break;
 800d142:	e039      	b.n	800d1b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6818      	ldr	r0, [r3, #0]
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	6859      	ldr	r1, [r3, #4]
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	461a      	mov	r2, r3
 800d152:	f000 f913 	bl	800d37c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2150      	movs	r1, #80	; 0x50
 800d15c:	4618      	mov	r0, r3
 800d15e:	f000 f96c 	bl	800d43a <TIM_ITRx_SetConfig>
      break;
 800d162:	e029      	b.n	800d1b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6818      	ldr	r0, [r3, #0]
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	6859      	ldr	r1, [r3, #4]
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	461a      	mov	r2, r3
 800d172:	f000 f932 	bl	800d3da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2160      	movs	r1, #96	; 0x60
 800d17c:	4618      	mov	r0, r3
 800d17e:	f000 f95c 	bl	800d43a <TIM_ITRx_SetConfig>
      break;
 800d182:	e019      	b.n	800d1b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6818      	ldr	r0, [r3, #0]
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	6859      	ldr	r1, [r3, #4]
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	461a      	mov	r2, r3
 800d192:	f000 f8f3 	bl	800d37c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	2140      	movs	r1, #64	; 0x40
 800d19c:	4618      	mov	r0, r3
 800d19e:	f000 f94c 	bl	800d43a <TIM_ITRx_SetConfig>
      break;
 800d1a2:	e009      	b.n	800d1b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	4610      	mov	r0, r2
 800d1b0:	f000 f943 	bl	800d43a <TIM_ITRx_SetConfig>
      break;
 800d1b4:	e000      	b.n	800d1b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800d1b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d1c8:	2300      	movs	r3, #0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3710      	adds	r7, #16
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	fffeff88 	.word	0xfffeff88

0800d1d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d1e0:	bf00      	nop
 800d1e2:	370c      	adds	r7, #12
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr

0800d1ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b083      	sub	sp, #12
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d1f4:	bf00      	nop
 800d1f6:	370c      	adds	r7, #12
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr

0800d200 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d200:	b480      	push	{r7}
 800d202:	b083      	sub	sp, #12
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d208:	bf00      	nop
 800d20a:	370c      	adds	r7, #12
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr

0800d214 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d214:	b480      	push	{r7}
 800d216:	b083      	sub	sp, #12
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d21c:	bf00      	nop
 800d21e:	370c      	adds	r7, #12
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr

0800d228 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d230:	bf00      	nop
 800d232:	370c      	adds	r7, #12
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b085      	sub	sp, #20
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	4a40      	ldr	r2, [pc, #256]	; (800d350 <TIM_Base_SetConfig+0x114>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d013      	beq.n	800d27c <TIM_Base_SetConfig+0x40>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d25a:	d00f      	beq.n	800d27c <TIM_Base_SetConfig+0x40>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	4a3d      	ldr	r2, [pc, #244]	; (800d354 <TIM_Base_SetConfig+0x118>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d00b      	beq.n	800d27c <TIM_Base_SetConfig+0x40>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	4a3c      	ldr	r2, [pc, #240]	; (800d358 <TIM_Base_SetConfig+0x11c>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d007      	beq.n	800d27c <TIM_Base_SetConfig+0x40>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	4a3b      	ldr	r2, [pc, #236]	; (800d35c <TIM_Base_SetConfig+0x120>)
 800d270:	4293      	cmp	r3, r2
 800d272:	d003      	beq.n	800d27c <TIM_Base_SetConfig+0x40>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	4a3a      	ldr	r2, [pc, #232]	; (800d360 <TIM_Base_SetConfig+0x124>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d108      	bne.n	800d28e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	68fa      	ldr	r2, [r7, #12]
 800d28a:	4313      	orrs	r3, r2
 800d28c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	4a2f      	ldr	r2, [pc, #188]	; (800d350 <TIM_Base_SetConfig+0x114>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d02b      	beq.n	800d2ee <TIM_Base_SetConfig+0xb2>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d29c:	d027      	beq.n	800d2ee <TIM_Base_SetConfig+0xb2>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4a2c      	ldr	r2, [pc, #176]	; (800d354 <TIM_Base_SetConfig+0x118>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d023      	beq.n	800d2ee <TIM_Base_SetConfig+0xb2>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4a2b      	ldr	r2, [pc, #172]	; (800d358 <TIM_Base_SetConfig+0x11c>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d01f      	beq.n	800d2ee <TIM_Base_SetConfig+0xb2>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	4a2a      	ldr	r2, [pc, #168]	; (800d35c <TIM_Base_SetConfig+0x120>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d01b      	beq.n	800d2ee <TIM_Base_SetConfig+0xb2>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	4a29      	ldr	r2, [pc, #164]	; (800d360 <TIM_Base_SetConfig+0x124>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d017      	beq.n	800d2ee <TIM_Base_SetConfig+0xb2>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	4a28      	ldr	r2, [pc, #160]	; (800d364 <TIM_Base_SetConfig+0x128>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d013      	beq.n	800d2ee <TIM_Base_SetConfig+0xb2>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	4a27      	ldr	r2, [pc, #156]	; (800d368 <TIM_Base_SetConfig+0x12c>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d00f      	beq.n	800d2ee <TIM_Base_SetConfig+0xb2>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	4a26      	ldr	r2, [pc, #152]	; (800d36c <TIM_Base_SetConfig+0x130>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d00b      	beq.n	800d2ee <TIM_Base_SetConfig+0xb2>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	4a25      	ldr	r2, [pc, #148]	; (800d370 <TIM_Base_SetConfig+0x134>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d007      	beq.n	800d2ee <TIM_Base_SetConfig+0xb2>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	4a24      	ldr	r2, [pc, #144]	; (800d374 <TIM_Base_SetConfig+0x138>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d003      	beq.n	800d2ee <TIM_Base_SetConfig+0xb2>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	4a23      	ldr	r2, [pc, #140]	; (800d378 <TIM_Base_SetConfig+0x13c>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d108      	bne.n	800d300 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d2f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	68db      	ldr	r3, [r3, #12]
 800d2fa:	68fa      	ldr	r2, [r7, #12]
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	695b      	ldr	r3, [r3, #20]
 800d30a:	4313      	orrs	r3, r2
 800d30c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	68fa      	ldr	r2, [r7, #12]
 800d312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	689a      	ldr	r2, [r3, #8]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	681a      	ldr	r2, [r3, #0]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	4a0a      	ldr	r2, [pc, #40]	; (800d350 <TIM_Base_SetConfig+0x114>)
 800d328:	4293      	cmp	r3, r2
 800d32a:	d003      	beq.n	800d334 <TIM_Base_SetConfig+0xf8>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	4a0c      	ldr	r2, [pc, #48]	; (800d360 <TIM_Base_SetConfig+0x124>)
 800d330:	4293      	cmp	r3, r2
 800d332:	d103      	bne.n	800d33c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	691a      	ldr	r2, [r3, #16]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2201      	movs	r2, #1
 800d340:	615a      	str	r2, [r3, #20]
}
 800d342:	bf00      	nop
 800d344:	3714      	adds	r7, #20
 800d346:	46bd      	mov	sp, r7
 800d348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34c:	4770      	bx	lr
 800d34e:	bf00      	nop
 800d350:	40010000 	.word	0x40010000
 800d354:	40000400 	.word	0x40000400
 800d358:	40000800 	.word	0x40000800
 800d35c:	40000c00 	.word	0x40000c00
 800d360:	40010400 	.word	0x40010400
 800d364:	40014000 	.word	0x40014000
 800d368:	40014400 	.word	0x40014400
 800d36c:	40014800 	.word	0x40014800
 800d370:	40001800 	.word	0x40001800
 800d374:	40001c00 	.word	0x40001c00
 800d378:	40002000 	.word	0x40002000

0800d37c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b087      	sub	sp, #28
 800d380:	af00      	add	r7, sp, #0
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	60b9      	str	r1, [r7, #8]
 800d386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	6a1b      	ldr	r3, [r3, #32]
 800d38c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	6a1b      	ldr	r3, [r3, #32]
 800d392:	f023 0201 	bic.w	r2, r3, #1
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	699b      	ldr	r3, [r3, #24]
 800d39e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d3a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	011b      	lsls	r3, r3, #4
 800d3ac:	693a      	ldr	r2, [r7, #16]
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	f023 030a 	bic.w	r3, r3, #10
 800d3b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d3ba:	697a      	ldr	r2, [r7, #20]
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	693a      	ldr	r2, [r7, #16]
 800d3c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	697a      	ldr	r2, [r7, #20]
 800d3cc:	621a      	str	r2, [r3, #32]
}
 800d3ce:	bf00      	nop
 800d3d0:	371c      	adds	r7, #28
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr

0800d3da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d3da:	b480      	push	{r7}
 800d3dc:	b087      	sub	sp, #28
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	60f8      	str	r0, [r7, #12]
 800d3e2:	60b9      	str	r1, [r7, #8]
 800d3e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6a1b      	ldr	r3, [r3, #32]
 800d3ea:	f023 0210 	bic.w	r2, r3, #16
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	699b      	ldr	r3, [r3, #24]
 800d3f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	6a1b      	ldr	r3, [r3, #32]
 800d3fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d404:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	031b      	lsls	r3, r3, #12
 800d40a:	697a      	ldr	r2, [r7, #20]
 800d40c:	4313      	orrs	r3, r2
 800d40e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d416:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	011b      	lsls	r3, r3, #4
 800d41c:	693a      	ldr	r2, [r7, #16]
 800d41e:	4313      	orrs	r3, r2
 800d420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	697a      	ldr	r2, [r7, #20]
 800d426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	693a      	ldr	r2, [r7, #16]
 800d42c:	621a      	str	r2, [r3, #32]
}
 800d42e:	bf00      	nop
 800d430:	371c      	adds	r7, #28
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr

0800d43a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d43a:	b480      	push	{r7}
 800d43c:	b085      	sub	sp, #20
 800d43e:	af00      	add	r7, sp, #0
 800d440:	6078      	str	r0, [r7, #4]
 800d442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d452:	683a      	ldr	r2, [r7, #0]
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	4313      	orrs	r3, r2
 800d458:	f043 0307 	orr.w	r3, r3, #7
 800d45c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	68fa      	ldr	r2, [r7, #12]
 800d462:	609a      	str	r2, [r3, #8]
}
 800d464:	bf00      	nop
 800d466:	3714      	adds	r7, #20
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d470:	b480      	push	{r7}
 800d472:	b087      	sub	sp, #28
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	607a      	str	r2, [r7, #4]
 800d47c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	689b      	ldr	r3, [r3, #8]
 800d482:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d48a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	021a      	lsls	r2, r3, #8
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	431a      	orrs	r2, r3
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	4313      	orrs	r3, r2
 800d498:	697a      	ldr	r2, [r7, #20]
 800d49a:	4313      	orrs	r3, r2
 800d49c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	697a      	ldr	r2, [r7, #20]
 800d4a2:	609a      	str	r2, [r3, #8]
}
 800d4a4:	bf00      	nop
 800d4a6:	371c      	adds	r7, #28
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b085      	sub	sp, #20
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d101      	bne.n	800d4c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d4c4:	2302      	movs	r3, #2
 800d4c6:	e06d      	b.n	800d5a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2202      	movs	r2, #2
 800d4d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	689b      	ldr	r3, [r3, #8]
 800d4e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4a30      	ldr	r2, [pc, #192]	; (800d5b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d004      	beq.n	800d4fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4a2f      	ldr	r2, [pc, #188]	; (800d5b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d108      	bne.n	800d50e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d502:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	4313      	orrs	r3, r2
 800d50c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d514:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	68fa      	ldr	r2, [r7, #12]
 800d51c:	4313      	orrs	r3, r2
 800d51e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4a20      	ldr	r2, [pc, #128]	; (800d5b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d022      	beq.n	800d578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d53a:	d01d      	beq.n	800d578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4a1d      	ldr	r2, [pc, #116]	; (800d5b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d018      	beq.n	800d578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4a1c      	ldr	r2, [pc, #112]	; (800d5bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d013      	beq.n	800d578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a1a      	ldr	r2, [pc, #104]	; (800d5c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d00e      	beq.n	800d578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	4a15      	ldr	r2, [pc, #84]	; (800d5b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d009      	beq.n	800d578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a16      	ldr	r2, [pc, #88]	; (800d5c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d004      	beq.n	800d578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4a15      	ldr	r2, [pc, #84]	; (800d5c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d10c      	bne.n	800d592 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d57e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	689b      	ldr	r3, [r3, #8]
 800d584:	68ba      	ldr	r2, [r7, #8]
 800d586:	4313      	orrs	r3, r2
 800d588:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	68ba      	ldr	r2, [r7, #8]
 800d590:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2201      	movs	r2, #1
 800d596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2200      	movs	r2, #0
 800d59e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d5a2:	2300      	movs	r3, #0
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3714      	adds	r7, #20
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr
 800d5b0:	40010000 	.word	0x40010000
 800d5b4:	40010400 	.word	0x40010400
 800d5b8:	40000400 	.word	0x40000400
 800d5bc:	40000800 	.word	0x40000800
 800d5c0:	40000c00 	.word	0x40000c00
 800d5c4:	40014000 	.word	0x40014000
 800d5c8:	40001800 	.word	0x40001800

0800d5cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d5d4:	bf00      	nop
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr

0800d5e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b083      	sub	sp, #12
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d5e8:	bf00      	nop
 800d5ea:	370c      	adds	r7, #12
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f2:	4770      	bx	lr

0800d5f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d5fc:	bf00      	nop
 800d5fe:	370c      	adds	r7, #12
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr

0800d608 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d101      	bne.n	800d61a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d616:	2301      	movs	r3, #1
 800d618:	e040      	b.n	800d69c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d106      	bne.n	800d630 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2200      	movs	r2, #0
 800d626:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f7fb fdcc 	bl	80091c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2224      	movs	r2, #36	; 0x24
 800d634:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f022 0201 	bic.w	r2, r2, #1
 800d644:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 fb26 	bl	800dc98 <UART_SetConfig>
 800d64c:	4603      	mov	r3, r0
 800d64e:	2b01      	cmp	r3, #1
 800d650:	d101      	bne.n	800d656 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d652:	2301      	movs	r3, #1
 800d654:	e022      	b.n	800d69c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d002      	beq.n	800d664 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 fdc4 	bl	800e1ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	685a      	ldr	r2, [r3, #4]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d672:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	689a      	ldr	r2, [r3, #8]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d682:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f042 0201 	orr.w	r2, r2, #1
 800d692:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 fe4b 	bl	800e330 <UART_CheckIdleState>
 800d69a:	4603      	mov	r3, r0
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3708      	adds	r7, #8
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b08a      	sub	sp, #40	; 0x28
 800d6a8:	af02      	add	r7, sp, #8
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	60b9      	str	r1, [r7, #8]
 800d6ae:	603b      	str	r3, [r7, #0]
 800d6b0:	4613      	mov	r3, r2
 800d6b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6b8:	2b20      	cmp	r3, #32
 800d6ba:	d17f      	bne.n	800d7bc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d002      	beq.n	800d6c8 <HAL_UART_Transmit+0x24>
 800d6c2:	88fb      	ldrh	r3, [r7, #6]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d101      	bne.n	800d6cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	e078      	b.n	800d7be <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d101      	bne.n	800d6da <HAL_UART_Transmit+0x36>
 800d6d6:	2302      	movs	r3, #2
 800d6d8:	e071      	b.n	800d7be <HAL_UART_Transmit+0x11a>
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2201      	movs	r2, #1
 800d6de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2221      	movs	r2, #33	; 0x21
 800d6ec:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800d6ee:	f7fc f807 	bl	8009700 <HAL_GetTick>
 800d6f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	88fa      	ldrh	r2, [r7, #6]
 800d6f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	88fa      	ldrh	r2, [r7, #6]
 800d700:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	689b      	ldr	r3, [r3, #8]
 800d708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d70c:	d108      	bne.n	800d720 <HAL_UART_Transmit+0x7c>
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	691b      	ldr	r3, [r3, #16]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d104      	bne.n	800d720 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800d716:	2300      	movs	r3, #0
 800d718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	61bb      	str	r3, [r7, #24]
 800d71e:	e003      	b.n	800d728 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d724:	2300      	movs	r3, #0
 800d726:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2200      	movs	r2, #0
 800d72c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800d730:	e02c      	b.n	800d78c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	9300      	str	r3, [sp, #0]
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	2200      	movs	r2, #0
 800d73a:	2180      	movs	r1, #128	; 0x80
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	f000 fe3c 	bl	800e3ba <UART_WaitOnFlagUntilTimeout>
 800d742:	4603      	mov	r3, r0
 800d744:	2b00      	cmp	r3, #0
 800d746:	d001      	beq.n	800d74c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800d748:	2303      	movs	r3, #3
 800d74a:	e038      	b.n	800d7be <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d10b      	bne.n	800d76a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d752:	69bb      	ldr	r3, [r7, #24]
 800d754:	881b      	ldrh	r3, [r3, #0]
 800d756:	461a      	mov	r2, r3
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d760:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d762:	69bb      	ldr	r3, [r7, #24]
 800d764:	3302      	adds	r3, #2
 800d766:	61bb      	str	r3, [r7, #24]
 800d768:	e007      	b.n	800d77a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d76a:	69fb      	ldr	r3, [r7, #28]
 800d76c:	781a      	ldrb	r2, [r3, #0]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	3301      	adds	r3, #1
 800d778:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d780:	b29b      	uxth	r3, r3
 800d782:	3b01      	subs	r3, #1
 800d784:	b29a      	uxth	r2, r3
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d792:	b29b      	uxth	r3, r3
 800d794:	2b00      	cmp	r3, #0
 800d796:	d1cc      	bne.n	800d732 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	9300      	str	r3, [sp, #0]
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	2140      	movs	r1, #64	; 0x40
 800d7a2:	68f8      	ldr	r0, [r7, #12]
 800d7a4:	f000 fe09 	bl	800e3ba <UART_WaitOnFlagUntilTimeout>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d001      	beq.n	800d7b2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d7ae:	2303      	movs	r3, #3
 800d7b0:	e005      	b.n	800d7be <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2220      	movs	r2, #32
 800d7b6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	e000      	b.n	800d7be <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800d7bc:	2302      	movs	r3, #2
  }
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3720      	adds	r7, #32
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
	...

0800d7c8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	60f8      	str	r0, [r7, #12]
 800d7d0:	60b9      	str	r1, [r7, #8]
 800d7d2:	4613      	mov	r3, r2
 800d7d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7da:	2b20      	cmp	r3, #32
 800d7dc:	d16c      	bne.n	800d8b8 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d002      	beq.n	800d7ea <HAL_UART_Receive_DMA+0x22>
 800d7e4:	88fb      	ldrh	r3, [r7, #6]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d101      	bne.n	800d7ee <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	e065      	b.n	800d8ba <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d101      	bne.n	800d7fc <HAL_UART_Receive_DMA+0x34>
 800d7f8:	2302      	movs	r3, #2
 800d7fa:	e05e      	b.n	800d8ba <HAL_UART_Receive_DMA+0xf2>
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2201      	movs	r2, #1
 800d800:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	68ba      	ldr	r2, [r7, #8]
 800d808:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	88fa      	ldrh	r2, [r7, #6]
 800d80e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2200      	movs	r2, #0
 800d816:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2222      	movs	r2, #34	; 0x22
 800d81c:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d822:	2b00      	cmp	r3, #0
 800d824:	d02a      	beq.n	800d87c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d82a:	4a26      	ldr	r2, [pc, #152]	; (800d8c4 <HAL_UART_Receive_DMA+0xfc>)
 800d82c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d832:	4a25      	ldr	r2, [pc, #148]	; (800d8c8 <HAL_UART_Receive_DMA+0x100>)
 800d834:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d83a:	4a24      	ldr	r2, [pc, #144]	; (800d8cc <HAL_UART_Receive_DMA+0x104>)
 800d83c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d842:	2200      	movs	r2, #0
 800d844:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	3324      	adds	r3, #36	; 0x24
 800d850:	4619      	mov	r1, r3
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d856:	461a      	mov	r2, r3
 800d858:	88fb      	ldrh	r3, [r7, #6]
 800d85a:	f7fc f93f 	bl	8009adc <HAL_DMA_Start_IT>
 800d85e:	4603      	mov	r3, r0
 800d860:	2b00      	cmp	r3, #0
 800d862:	d00b      	beq.n	800d87c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2210      	movs	r2, #16
 800d868:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2200      	movs	r2, #0
 800d86e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2220      	movs	r2, #32
 800d876:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800d878:	2301      	movs	r3, #1
 800d87a:	e01e      	b.n	800d8ba <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2200      	movs	r2, #0
 800d880:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d892:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	689a      	ldr	r2, [r3, #8]
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f042 0201 	orr.w	r2, r2, #1
 800d8a2:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	689a      	ldr	r2, [r3, #8]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8b2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	e000      	b.n	800d8ba <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800d8b8:	2302      	movs	r3, #2
  }
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3710      	adds	r7, #16
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	0800e51b 	.word	0x0800e51b
 800d8c8:	0800e57f 	.word	0x0800e57f
 800d8cc:	0800e59b 	.word	0x0800e59b

0800d8d0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8dc:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8e2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8ee:	2b80      	cmp	r3, #128	; 0x80
 800d8f0:	d126      	bne.n	800d940 <HAL_UART_DMAStop+0x70>
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	2b21      	cmp	r3, #33	; 0x21
 800d8f6:	d123      	bne.n	800d940 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	689a      	ldr	r2, [r3, #8]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d906:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d014      	beq.n	800d93a <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d914:	4618      	mov	r0, r3
 800d916:	f7fc f941 	bl	8009b9c <HAL_DMA_Abort>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d00c      	beq.n	800d93a <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d924:	4618      	mov	r0, r3
 800d926:	f7fc fb55 	bl	8009fd4 <HAL_DMA_GetError>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b20      	cmp	r3, #32
 800d92e:	d104      	bne.n	800d93a <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2210      	movs	r2, #16
 800d934:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800d936:	2303      	movs	r3, #3
 800d938:	e031      	b.n	800d99e <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f000 fdb8 	bl	800e4b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d94a:	2b40      	cmp	r3, #64	; 0x40
 800d94c:	d126      	bne.n	800d99c <HAL_UART_DMAStop+0xcc>
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	2b22      	cmp	r3, #34	; 0x22
 800d952:	d123      	bne.n	800d99c <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	689a      	ldr	r2, [r3, #8]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d962:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d014      	beq.n	800d996 <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d970:	4618      	mov	r0, r3
 800d972:	f7fc f913 	bl	8009b9c <HAL_DMA_Abort>
 800d976:	4603      	mov	r3, r0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d00c      	beq.n	800d996 <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d980:	4618      	mov	r0, r3
 800d982:	f7fc fb27 	bl	8009fd4 <HAL_DMA_GetError>
 800d986:	4603      	mov	r3, r0
 800d988:	2b20      	cmp	r3, #32
 800d98a:	d104      	bne.n	800d996 <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2210      	movs	r2, #16
 800d990:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800d992:	2303      	movs	r3, #3
 800d994:	e003      	b.n	800d99e <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f000 fd9f 	bl	800e4da <UART_EndRxTransfer>
  }

  return HAL_OK;
 800d99c:	2300      	movs	r3, #0
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3710      	adds	r7, #16
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
	...

0800d9a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b088      	sub	sp, #32
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	69db      	ldr	r3, [r3, #28]
 800d9b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d9c8:	69fa      	ldr	r2, [r7, #28]
 800d9ca:	f640 030f 	movw	r3, #2063	; 0x80f
 800d9ce:	4013      	ands	r3, r2
 800d9d0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d113      	bne.n	800da00 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	f003 0320 	and.w	r3, r3, #32
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d00e      	beq.n	800da00 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d9e2:	69bb      	ldr	r3, [r7, #24]
 800d9e4:	f003 0320 	and.w	r3, r3, #32
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d009      	beq.n	800da00 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	f000 8114 	beq.w	800dc1e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	4798      	blx	r3
      }
      return;
 800d9fe:	e10e      	b.n	800dc1e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	2b00      	cmp	r3, #0
 800da04:	f000 80d6 	beq.w	800dbb4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	f003 0301 	and.w	r3, r3, #1
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d105      	bne.n	800da1e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800da18:	2b00      	cmp	r3, #0
 800da1a:	f000 80cb 	beq.w	800dbb4 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800da1e:	69fb      	ldr	r3, [r7, #28]
 800da20:	f003 0301 	and.w	r3, r3, #1
 800da24:	2b00      	cmp	r3, #0
 800da26:	d00e      	beq.n	800da46 <HAL_UART_IRQHandler+0x9e>
 800da28:	69bb      	ldr	r3, [r7, #24]
 800da2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d009      	beq.n	800da46 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	2201      	movs	r2, #1
 800da38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da3e:	f043 0201 	orr.w	r2, r3, #1
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da46:	69fb      	ldr	r3, [r7, #28]
 800da48:	f003 0302 	and.w	r3, r3, #2
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d00e      	beq.n	800da6e <HAL_UART_IRQHandler+0xc6>
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	f003 0301 	and.w	r3, r3, #1
 800da56:	2b00      	cmp	r3, #0
 800da58:	d009      	beq.n	800da6e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	2202      	movs	r2, #2
 800da60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da66:	f043 0204 	orr.w	r2, r3, #4
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da6e:	69fb      	ldr	r3, [r7, #28]
 800da70:	f003 0304 	and.w	r3, r3, #4
 800da74:	2b00      	cmp	r3, #0
 800da76:	d00e      	beq.n	800da96 <HAL_UART_IRQHandler+0xee>
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	f003 0301 	and.w	r3, r3, #1
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d009      	beq.n	800da96 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2204      	movs	r2, #4
 800da88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da8e:	f043 0202 	orr.w	r2, r3, #2
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800da96:	69fb      	ldr	r3, [r7, #28]
 800da98:	f003 0308 	and.w	r3, r3, #8
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d013      	beq.n	800dac8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800daa0:	69bb      	ldr	r3, [r7, #24]
 800daa2:	f003 0320 	and.w	r3, r3, #32
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d104      	bne.n	800dab4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d009      	beq.n	800dac8 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	2208      	movs	r2, #8
 800daba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dac0:	f043 0208 	orr.w	r2, r3, #8
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d00f      	beq.n	800daf2 <HAL_UART_IRQHandler+0x14a>
 800dad2:	69bb      	ldr	r3, [r7, #24]
 800dad4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d00a      	beq.n	800daf2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dae4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daea:	f043 0220 	orr.w	r2, r3, #32
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	f000 8093 	beq.w	800dc22 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800dafc:	69fb      	ldr	r3, [r7, #28]
 800dafe:	f003 0320 	and.w	r3, r3, #32
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00c      	beq.n	800db20 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	f003 0320 	and.w	r3, r3, #32
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d007      	beq.n	800db20 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db14:	2b00      	cmp	r3, #0
 800db16:	d003      	beq.n	800db20 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db24:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	689b      	ldr	r3, [r3, #8]
 800db2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db30:	2b40      	cmp	r3, #64	; 0x40
 800db32:	d004      	beq.n	800db3e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d031      	beq.n	800dba2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 fccb 	bl	800e4da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	689b      	ldr	r3, [r3, #8]
 800db4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db4e:	2b40      	cmp	r3, #64	; 0x40
 800db50:	d123      	bne.n	800db9a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	689a      	ldr	r2, [r3, #8]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db60:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db66:	2b00      	cmp	r3, #0
 800db68:	d013      	beq.n	800db92 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db6e:	4a30      	ldr	r2, [pc, #192]	; (800dc30 <HAL_UART_IRQHandler+0x288>)
 800db70:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db76:	4618      	mov	r0, r3
 800db78:	f7fc f880 	bl	8009c7c <HAL_DMA_Abort_IT>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d016      	beq.n	800dbb0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800db8c:	4610      	mov	r0, r2
 800db8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db90:	e00e      	b.n	800dbb0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 f86c 	bl	800dc70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db98:	e00a      	b.n	800dbb0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f000 f868 	bl	800dc70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dba0:	e006      	b.n	800dbb0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f000 f864 	bl	800dc70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800dbae:	e038      	b.n	800dc22 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbb0:	bf00      	nop
    return;
 800dbb2:	e036      	b.n	800dc22 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00d      	beq.n	800dbda <HAL_UART_IRQHandler+0x232>
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d008      	beq.n	800dbda <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dbd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f000 f856 	bl	800dc84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dbd8:	e026      	b.n	800dc28 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d00d      	beq.n	800dc00 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800dbe4:	69bb      	ldr	r3, [r7, #24]
 800dbe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d008      	beq.n	800dc00 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d017      	beq.n	800dc26 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	4798      	blx	r3
    }
    return;
 800dbfe:	e012      	b.n	800dc26 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d00e      	beq.n	800dc28 <HAL_UART_IRQHandler+0x280>
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d009      	beq.n	800dc28 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 fd12 	bl	800e63e <UART_EndTransmit_IT>
    return;
 800dc1a:	bf00      	nop
 800dc1c:	e004      	b.n	800dc28 <HAL_UART_IRQHandler+0x280>
      return;
 800dc1e:	bf00      	nop
 800dc20:	e002      	b.n	800dc28 <HAL_UART_IRQHandler+0x280>
    return;
 800dc22:	bf00      	nop
 800dc24:	e000      	b.n	800dc28 <HAL_UART_IRQHandler+0x280>
    return;
 800dc26:	bf00      	nop
  }

}
 800dc28:	3720      	adds	r7, #32
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	0800e613 	.word	0x0800e613

0800dc34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b083      	sub	sp, #12
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dc3c:	bf00      	nop
 800dc3e:	370c      	adds	r7, #12
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr

0800dc48 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800dc50:	bf00      	nop
 800dc52:	370c      	adds	r7, #12
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr

0800dc5c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b083      	sub	sp, #12
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800dc64:	bf00      	nop
 800dc66:	370c      	adds	r7, #12
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr

0800dc70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b083      	sub	sp, #12
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dc78:	bf00      	nop
 800dc7a:	370c      	adds	r7, #12
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr

0800dc84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dc8c:	bf00      	nop
 800dc8e:	370c      	adds	r7, #12
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr

0800dc98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b088      	sub	sp, #32
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800dca0:	2300      	movs	r3, #0
 800dca2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800dca4:	2300      	movs	r3, #0
 800dca6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	689a      	ldr	r2, [r3, #8]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	691b      	ldr	r3, [r3, #16]
 800dcb0:	431a      	orrs	r2, r3
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	695b      	ldr	r3, [r3, #20]
 800dcb6:	431a      	orrs	r2, r3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	69db      	ldr	r3, [r3, #28]
 800dcbc:	4313      	orrs	r3, r2
 800dcbe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	4bb1      	ldr	r3, [pc, #708]	; (800df8c <UART_SetConfig+0x2f4>)
 800dcc8:	4013      	ands	r3, r2
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	6812      	ldr	r2, [r2, #0]
 800dcce:	6939      	ldr	r1, [r7, #16]
 800dcd0:	430b      	orrs	r3, r1
 800dcd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	68da      	ldr	r2, [r3, #12]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	430a      	orrs	r2, r1
 800dce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	699b      	ldr	r3, [r3, #24]
 800dcee:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6a1b      	ldr	r3, [r3, #32]
 800dcf4:	693a      	ldr	r2, [r7, #16]
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	689b      	ldr	r3, [r3, #8]
 800dd00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	693a      	ldr	r2, [r7, #16]
 800dd0a:	430a      	orrs	r2, r1
 800dd0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	4a9f      	ldr	r2, [pc, #636]	; (800df90 <UART_SetConfig+0x2f8>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d121      	bne.n	800dd5c <UART_SetConfig+0xc4>
 800dd18:	4b9e      	ldr	r3, [pc, #632]	; (800df94 <UART_SetConfig+0x2fc>)
 800dd1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd1e:	f003 0303 	and.w	r3, r3, #3
 800dd22:	2b03      	cmp	r3, #3
 800dd24:	d816      	bhi.n	800dd54 <UART_SetConfig+0xbc>
 800dd26:	a201      	add	r2, pc, #4	; (adr r2, 800dd2c <UART_SetConfig+0x94>)
 800dd28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd2c:	0800dd3d 	.word	0x0800dd3d
 800dd30:	0800dd49 	.word	0x0800dd49
 800dd34:	0800dd43 	.word	0x0800dd43
 800dd38:	0800dd4f 	.word	0x0800dd4f
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	77fb      	strb	r3, [r7, #31]
 800dd40:	e151      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800dd42:	2302      	movs	r3, #2
 800dd44:	77fb      	strb	r3, [r7, #31]
 800dd46:	e14e      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800dd48:	2304      	movs	r3, #4
 800dd4a:	77fb      	strb	r3, [r7, #31]
 800dd4c:	e14b      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800dd4e:	2308      	movs	r3, #8
 800dd50:	77fb      	strb	r3, [r7, #31]
 800dd52:	e148      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800dd54:	2310      	movs	r3, #16
 800dd56:	77fb      	strb	r3, [r7, #31]
 800dd58:	bf00      	nop
 800dd5a:	e144      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a8d      	ldr	r2, [pc, #564]	; (800df98 <UART_SetConfig+0x300>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d134      	bne.n	800ddd0 <UART_SetConfig+0x138>
 800dd66:	4b8b      	ldr	r3, [pc, #556]	; (800df94 <UART_SetConfig+0x2fc>)
 800dd68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd6c:	f003 030c 	and.w	r3, r3, #12
 800dd70:	2b0c      	cmp	r3, #12
 800dd72:	d829      	bhi.n	800ddc8 <UART_SetConfig+0x130>
 800dd74:	a201      	add	r2, pc, #4	; (adr r2, 800dd7c <UART_SetConfig+0xe4>)
 800dd76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd7a:	bf00      	nop
 800dd7c:	0800ddb1 	.word	0x0800ddb1
 800dd80:	0800ddc9 	.word	0x0800ddc9
 800dd84:	0800ddc9 	.word	0x0800ddc9
 800dd88:	0800ddc9 	.word	0x0800ddc9
 800dd8c:	0800ddbd 	.word	0x0800ddbd
 800dd90:	0800ddc9 	.word	0x0800ddc9
 800dd94:	0800ddc9 	.word	0x0800ddc9
 800dd98:	0800ddc9 	.word	0x0800ddc9
 800dd9c:	0800ddb7 	.word	0x0800ddb7
 800dda0:	0800ddc9 	.word	0x0800ddc9
 800dda4:	0800ddc9 	.word	0x0800ddc9
 800dda8:	0800ddc9 	.word	0x0800ddc9
 800ddac:	0800ddc3 	.word	0x0800ddc3
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	77fb      	strb	r3, [r7, #31]
 800ddb4:	e117      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800ddb6:	2302      	movs	r3, #2
 800ddb8:	77fb      	strb	r3, [r7, #31]
 800ddba:	e114      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800ddbc:	2304      	movs	r3, #4
 800ddbe:	77fb      	strb	r3, [r7, #31]
 800ddc0:	e111      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800ddc2:	2308      	movs	r3, #8
 800ddc4:	77fb      	strb	r3, [r7, #31]
 800ddc6:	e10e      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800ddc8:	2310      	movs	r3, #16
 800ddca:	77fb      	strb	r3, [r7, #31]
 800ddcc:	bf00      	nop
 800ddce:	e10a      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4a71      	ldr	r2, [pc, #452]	; (800df9c <UART_SetConfig+0x304>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d120      	bne.n	800de1c <UART_SetConfig+0x184>
 800ddda:	4b6e      	ldr	r3, [pc, #440]	; (800df94 <UART_SetConfig+0x2fc>)
 800dddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dde0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800dde4:	2b10      	cmp	r3, #16
 800dde6:	d00f      	beq.n	800de08 <UART_SetConfig+0x170>
 800dde8:	2b10      	cmp	r3, #16
 800ddea:	d802      	bhi.n	800ddf2 <UART_SetConfig+0x15a>
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d005      	beq.n	800ddfc <UART_SetConfig+0x164>
 800ddf0:	e010      	b.n	800de14 <UART_SetConfig+0x17c>
 800ddf2:	2b20      	cmp	r3, #32
 800ddf4:	d005      	beq.n	800de02 <UART_SetConfig+0x16a>
 800ddf6:	2b30      	cmp	r3, #48	; 0x30
 800ddf8:	d009      	beq.n	800de0e <UART_SetConfig+0x176>
 800ddfa:	e00b      	b.n	800de14 <UART_SetConfig+0x17c>
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	77fb      	strb	r3, [r7, #31]
 800de00:	e0f1      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800de02:	2302      	movs	r3, #2
 800de04:	77fb      	strb	r3, [r7, #31]
 800de06:	e0ee      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800de08:	2304      	movs	r3, #4
 800de0a:	77fb      	strb	r3, [r7, #31]
 800de0c:	e0eb      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800de0e:	2308      	movs	r3, #8
 800de10:	77fb      	strb	r3, [r7, #31]
 800de12:	e0e8      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800de14:	2310      	movs	r3, #16
 800de16:	77fb      	strb	r3, [r7, #31]
 800de18:	bf00      	nop
 800de1a:	e0e4      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4a5f      	ldr	r2, [pc, #380]	; (800dfa0 <UART_SetConfig+0x308>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d120      	bne.n	800de68 <UART_SetConfig+0x1d0>
 800de26:	4b5b      	ldr	r3, [pc, #364]	; (800df94 <UART_SetConfig+0x2fc>)
 800de28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800de30:	2b40      	cmp	r3, #64	; 0x40
 800de32:	d00f      	beq.n	800de54 <UART_SetConfig+0x1bc>
 800de34:	2b40      	cmp	r3, #64	; 0x40
 800de36:	d802      	bhi.n	800de3e <UART_SetConfig+0x1a6>
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d005      	beq.n	800de48 <UART_SetConfig+0x1b0>
 800de3c:	e010      	b.n	800de60 <UART_SetConfig+0x1c8>
 800de3e:	2b80      	cmp	r3, #128	; 0x80
 800de40:	d005      	beq.n	800de4e <UART_SetConfig+0x1b6>
 800de42:	2bc0      	cmp	r3, #192	; 0xc0
 800de44:	d009      	beq.n	800de5a <UART_SetConfig+0x1c2>
 800de46:	e00b      	b.n	800de60 <UART_SetConfig+0x1c8>
 800de48:	2300      	movs	r3, #0
 800de4a:	77fb      	strb	r3, [r7, #31]
 800de4c:	e0cb      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800de4e:	2302      	movs	r3, #2
 800de50:	77fb      	strb	r3, [r7, #31]
 800de52:	e0c8      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800de54:	2304      	movs	r3, #4
 800de56:	77fb      	strb	r3, [r7, #31]
 800de58:	e0c5      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800de5a:	2308      	movs	r3, #8
 800de5c:	77fb      	strb	r3, [r7, #31]
 800de5e:	e0c2      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800de60:	2310      	movs	r3, #16
 800de62:	77fb      	strb	r3, [r7, #31]
 800de64:	bf00      	nop
 800de66:	e0be      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a4d      	ldr	r2, [pc, #308]	; (800dfa4 <UART_SetConfig+0x30c>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d124      	bne.n	800debc <UART_SetConfig+0x224>
 800de72:	4b48      	ldr	r3, [pc, #288]	; (800df94 <UART_SetConfig+0x2fc>)
 800de74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de80:	d012      	beq.n	800dea8 <UART_SetConfig+0x210>
 800de82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de86:	d802      	bhi.n	800de8e <UART_SetConfig+0x1f6>
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d007      	beq.n	800de9c <UART_SetConfig+0x204>
 800de8c:	e012      	b.n	800deb4 <UART_SetConfig+0x21c>
 800de8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de92:	d006      	beq.n	800dea2 <UART_SetConfig+0x20a>
 800de94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800de98:	d009      	beq.n	800deae <UART_SetConfig+0x216>
 800de9a:	e00b      	b.n	800deb4 <UART_SetConfig+0x21c>
 800de9c:	2300      	movs	r3, #0
 800de9e:	77fb      	strb	r3, [r7, #31]
 800dea0:	e0a1      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800dea2:	2302      	movs	r3, #2
 800dea4:	77fb      	strb	r3, [r7, #31]
 800dea6:	e09e      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800dea8:	2304      	movs	r3, #4
 800deaa:	77fb      	strb	r3, [r7, #31]
 800deac:	e09b      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800deae:	2308      	movs	r3, #8
 800deb0:	77fb      	strb	r3, [r7, #31]
 800deb2:	e098      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800deb4:	2310      	movs	r3, #16
 800deb6:	77fb      	strb	r3, [r7, #31]
 800deb8:	bf00      	nop
 800deba:	e094      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4a39      	ldr	r2, [pc, #228]	; (800dfa8 <UART_SetConfig+0x310>)
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d124      	bne.n	800df10 <UART_SetConfig+0x278>
 800dec6:	4b33      	ldr	r3, [pc, #204]	; (800df94 <UART_SetConfig+0x2fc>)
 800dec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800decc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ded0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ded4:	d012      	beq.n	800defc <UART_SetConfig+0x264>
 800ded6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800deda:	d802      	bhi.n	800dee2 <UART_SetConfig+0x24a>
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d007      	beq.n	800def0 <UART_SetConfig+0x258>
 800dee0:	e012      	b.n	800df08 <UART_SetConfig+0x270>
 800dee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dee6:	d006      	beq.n	800def6 <UART_SetConfig+0x25e>
 800dee8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800deec:	d009      	beq.n	800df02 <UART_SetConfig+0x26a>
 800deee:	e00b      	b.n	800df08 <UART_SetConfig+0x270>
 800def0:	2301      	movs	r3, #1
 800def2:	77fb      	strb	r3, [r7, #31]
 800def4:	e077      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800def6:	2302      	movs	r3, #2
 800def8:	77fb      	strb	r3, [r7, #31]
 800defa:	e074      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800defc:	2304      	movs	r3, #4
 800defe:	77fb      	strb	r3, [r7, #31]
 800df00:	e071      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800df02:	2308      	movs	r3, #8
 800df04:	77fb      	strb	r3, [r7, #31]
 800df06:	e06e      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800df08:	2310      	movs	r3, #16
 800df0a:	77fb      	strb	r3, [r7, #31]
 800df0c:	bf00      	nop
 800df0e:	e06a      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4a25      	ldr	r2, [pc, #148]	; (800dfac <UART_SetConfig+0x314>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d124      	bne.n	800df64 <UART_SetConfig+0x2cc>
 800df1a:	4b1e      	ldr	r3, [pc, #120]	; (800df94 <UART_SetConfig+0x2fc>)
 800df1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df20:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800df24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df28:	d012      	beq.n	800df50 <UART_SetConfig+0x2b8>
 800df2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df2e:	d802      	bhi.n	800df36 <UART_SetConfig+0x29e>
 800df30:	2b00      	cmp	r3, #0
 800df32:	d007      	beq.n	800df44 <UART_SetConfig+0x2ac>
 800df34:	e012      	b.n	800df5c <UART_SetConfig+0x2c4>
 800df36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df3a:	d006      	beq.n	800df4a <UART_SetConfig+0x2b2>
 800df3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800df40:	d009      	beq.n	800df56 <UART_SetConfig+0x2be>
 800df42:	e00b      	b.n	800df5c <UART_SetConfig+0x2c4>
 800df44:	2300      	movs	r3, #0
 800df46:	77fb      	strb	r3, [r7, #31]
 800df48:	e04d      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800df4a:	2302      	movs	r3, #2
 800df4c:	77fb      	strb	r3, [r7, #31]
 800df4e:	e04a      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800df50:	2304      	movs	r3, #4
 800df52:	77fb      	strb	r3, [r7, #31]
 800df54:	e047      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800df56:	2308      	movs	r3, #8
 800df58:	77fb      	strb	r3, [r7, #31]
 800df5a:	e044      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800df5c:	2310      	movs	r3, #16
 800df5e:	77fb      	strb	r3, [r7, #31]
 800df60:	bf00      	nop
 800df62:	e040      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4a11      	ldr	r2, [pc, #68]	; (800dfb0 <UART_SetConfig+0x318>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d139      	bne.n	800dfe2 <UART_SetConfig+0x34a>
 800df6e:	4b09      	ldr	r3, [pc, #36]	; (800df94 <UART_SetConfig+0x2fc>)
 800df70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800df78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800df7c:	d027      	beq.n	800dfce <UART_SetConfig+0x336>
 800df7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800df82:	d817      	bhi.n	800dfb4 <UART_SetConfig+0x31c>
 800df84:	2b00      	cmp	r3, #0
 800df86:	d01c      	beq.n	800dfc2 <UART_SetConfig+0x32a>
 800df88:	e027      	b.n	800dfda <UART_SetConfig+0x342>
 800df8a:	bf00      	nop
 800df8c:	efff69f3 	.word	0xefff69f3
 800df90:	40011000 	.word	0x40011000
 800df94:	40023800 	.word	0x40023800
 800df98:	40004400 	.word	0x40004400
 800df9c:	40004800 	.word	0x40004800
 800dfa0:	40004c00 	.word	0x40004c00
 800dfa4:	40005000 	.word	0x40005000
 800dfa8:	40011400 	.word	0x40011400
 800dfac:	40007800 	.word	0x40007800
 800dfb0:	40007c00 	.word	0x40007c00
 800dfb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfb8:	d006      	beq.n	800dfc8 <UART_SetConfig+0x330>
 800dfba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800dfbe:	d009      	beq.n	800dfd4 <UART_SetConfig+0x33c>
 800dfc0:	e00b      	b.n	800dfda <UART_SetConfig+0x342>
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	77fb      	strb	r3, [r7, #31]
 800dfc6:	e00e      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800dfc8:	2302      	movs	r3, #2
 800dfca:	77fb      	strb	r3, [r7, #31]
 800dfcc:	e00b      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800dfce:	2304      	movs	r3, #4
 800dfd0:	77fb      	strb	r3, [r7, #31]
 800dfd2:	e008      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800dfd4:	2308      	movs	r3, #8
 800dfd6:	77fb      	strb	r3, [r7, #31]
 800dfd8:	e005      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800dfda:	2310      	movs	r3, #16
 800dfdc:	77fb      	strb	r3, [r7, #31]
 800dfde:	bf00      	nop
 800dfe0:	e001      	b.n	800dfe6 <UART_SetConfig+0x34e>
 800dfe2:	2310      	movs	r3, #16
 800dfe4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	69db      	ldr	r3, [r3, #28]
 800dfea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfee:	d17f      	bne.n	800e0f0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800dff0:	7ffb      	ldrb	r3, [r7, #31]
 800dff2:	2b08      	cmp	r3, #8
 800dff4:	d85c      	bhi.n	800e0b0 <UART_SetConfig+0x418>
 800dff6:	a201      	add	r2, pc, #4	; (adr r2, 800dffc <UART_SetConfig+0x364>)
 800dff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dffc:	0800e021 	.word	0x0800e021
 800e000:	0800e041 	.word	0x0800e041
 800e004:	0800e061 	.word	0x0800e061
 800e008:	0800e0b1 	.word	0x0800e0b1
 800e00c:	0800e079 	.word	0x0800e079
 800e010:	0800e0b1 	.word	0x0800e0b1
 800e014:	0800e0b1 	.word	0x0800e0b1
 800e018:	0800e0b1 	.word	0x0800e0b1
 800e01c:	0800e099 	.word	0x0800e099
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e020:	f7fe fa5c 	bl	800c4dc <HAL_RCC_GetPCLK1Freq>
 800e024:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	005a      	lsls	r2, r3, #1
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	085b      	lsrs	r3, r3, #1
 800e030:	441a      	add	r2, r3
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	fbb2 f3f3 	udiv	r3, r2, r3
 800e03a:	b29b      	uxth	r3, r3
 800e03c:	61bb      	str	r3, [r7, #24]
        break;
 800e03e:	e03a      	b.n	800e0b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e040:	f7fe fa60 	bl	800c504 <HAL_RCC_GetPCLK2Freq>
 800e044:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	005a      	lsls	r2, r3, #1
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	085b      	lsrs	r3, r3, #1
 800e050:	441a      	add	r2, r3
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	fbb2 f3f3 	udiv	r3, r2, r3
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	61bb      	str	r3, [r7, #24]
        break;
 800e05e:	e02a      	b.n	800e0b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	085a      	lsrs	r2, r3, #1
 800e066:	4b5f      	ldr	r3, [pc, #380]	; (800e1e4 <UART_SetConfig+0x54c>)
 800e068:	4413      	add	r3, r2
 800e06a:	687a      	ldr	r2, [r7, #4]
 800e06c:	6852      	ldr	r2, [r2, #4]
 800e06e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e072:	b29b      	uxth	r3, r3
 800e074:	61bb      	str	r3, [r7, #24]
        break;
 800e076:	e01e      	b.n	800e0b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e078:	f7fe f94c 	bl	800c314 <HAL_RCC_GetSysClockFreq>
 800e07c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	005a      	lsls	r2, r3, #1
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	085b      	lsrs	r3, r3, #1
 800e088:	441a      	add	r2, r3
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e092:	b29b      	uxth	r3, r3
 800e094:	61bb      	str	r3, [r7, #24]
        break;
 800e096:	e00e      	b.n	800e0b6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	685b      	ldr	r3, [r3, #4]
 800e09c:	085b      	lsrs	r3, r3, #1
 800e09e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0aa:	b29b      	uxth	r3, r3
 800e0ac:	61bb      	str	r3, [r7, #24]
        break;
 800e0ae:	e002      	b.n	800e0b6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	75fb      	strb	r3, [r7, #23]
        break;
 800e0b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e0b6:	69bb      	ldr	r3, [r7, #24]
 800e0b8:	2b0f      	cmp	r3, #15
 800e0ba:	d916      	bls.n	800e0ea <UART_SetConfig+0x452>
 800e0bc:	69bb      	ldr	r3, [r7, #24]
 800e0be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0c2:	d212      	bcs.n	800e0ea <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e0c4:	69bb      	ldr	r3, [r7, #24]
 800e0c6:	b29b      	uxth	r3, r3
 800e0c8:	f023 030f 	bic.w	r3, r3, #15
 800e0cc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e0ce:	69bb      	ldr	r3, [r7, #24]
 800e0d0:	085b      	lsrs	r3, r3, #1
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	f003 0307 	and.w	r3, r3, #7
 800e0d8:	b29a      	uxth	r2, r3
 800e0da:	897b      	ldrh	r3, [r7, #10]
 800e0dc:	4313      	orrs	r3, r2
 800e0de:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	897a      	ldrh	r2, [r7, #10]
 800e0e6:	60da      	str	r2, [r3, #12]
 800e0e8:	e070      	b.n	800e1cc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	75fb      	strb	r3, [r7, #23]
 800e0ee:	e06d      	b.n	800e1cc <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800e0f0:	7ffb      	ldrb	r3, [r7, #31]
 800e0f2:	2b08      	cmp	r3, #8
 800e0f4:	d859      	bhi.n	800e1aa <UART_SetConfig+0x512>
 800e0f6:	a201      	add	r2, pc, #4	; (adr r2, 800e0fc <UART_SetConfig+0x464>)
 800e0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0fc:	0800e121 	.word	0x0800e121
 800e100:	0800e13f 	.word	0x0800e13f
 800e104:	0800e15d 	.word	0x0800e15d
 800e108:	0800e1ab 	.word	0x0800e1ab
 800e10c:	0800e175 	.word	0x0800e175
 800e110:	0800e1ab 	.word	0x0800e1ab
 800e114:	0800e1ab 	.word	0x0800e1ab
 800e118:	0800e1ab 	.word	0x0800e1ab
 800e11c:	0800e193 	.word	0x0800e193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e120:	f7fe f9dc 	bl	800c4dc <HAL_RCC_GetPCLK1Freq>
 800e124:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	085a      	lsrs	r2, r3, #1
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	441a      	add	r2, r3
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	fbb2 f3f3 	udiv	r3, r2, r3
 800e138:	b29b      	uxth	r3, r3
 800e13a:	61bb      	str	r3, [r7, #24]
        break;
 800e13c:	e038      	b.n	800e1b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e13e:	f7fe f9e1 	bl	800c504 <HAL_RCC_GetPCLK2Freq>
 800e142:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	085a      	lsrs	r2, r3, #1
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	441a      	add	r2, r3
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	fbb2 f3f3 	udiv	r3, r2, r3
 800e156:	b29b      	uxth	r3, r3
 800e158:	61bb      	str	r3, [r7, #24]
        break;
 800e15a:	e029      	b.n	800e1b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	085a      	lsrs	r2, r3, #1
 800e162:	4b21      	ldr	r3, [pc, #132]	; (800e1e8 <UART_SetConfig+0x550>)
 800e164:	4413      	add	r3, r2
 800e166:	687a      	ldr	r2, [r7, #4]
 800e168:	6852      	ldr	r2, [r2, #4]
 800e16a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e16e:	b29b      	uxth	r3, r3
 800e170:	61bb      	str	r3, [r7, #24]
        break;
 800e172:	e01d      	b.n	800e1b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e174:	f7fe f8ce 	bl	800c314 <HAL_RCC_GetSysClockFreq>
 800e178:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	085a      	lsrs	r2, r3, #1
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	441a      	add	r2, r3
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	fbb2 f3f3 	udiv	r3, r2, r3
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	61bb      	str	r3, [r7, #24]
        break;
 800e190:	e00e      	b.n	800e1b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	685b      	ldr	r3, [r3, #4]
 800e196:	085b      	lsrs	r3, r3, #1
 800e198:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	61bb      	str	r3, [r7, #24]
        break;
 800e1a8:	e002      	b.n	800e1b0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	75fb      	strb	r3, [r7, #23]
        break;
 800e1ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e1b0:	69bb      	ldr	r3, [r7, #24]
 800e1b2:	2b0f      	cmp	r3, #15
 800e1b4:	d908      	bls.n	800e1c8 <UART_SetConfig+0x530>
 800e1b6:	69bb      	ldr	r3, [r7, #24]
 800e1b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1bc:	d204      	bcs.n	800e1c8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	69ba      	ldr	r2, [r7, #24]
 800e1c4:	60da      	str	r2, [r3, #12]
 800e1c6:	e001      	b.n	800e1cc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800e1d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3720      	adds	r7, #32
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}
 800e1e2:	bf00      	nop
 800e1e4:	01e84800 	.word	0x01e84800
 800e1e8:	00f42400 	.word	0x00f42400

0800e1ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1f8:	f003 0301 	and.w	r3, r3, #1
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d00a      	beq.n	800e216 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	430a      	orrs	r2, r1
 800e214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e21a:	f003 0302 	and.w	r3, r3, #2
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d00a      	beq.n	800e238 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	430a      	orrs	r2, r1
 800e236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e23c:	f003 0304 	and.w	r3, r3, #4
 800e240:	2b00      	cmp	r3, #0
 800e242:	d00a      	beq.n	800e25a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	685b      	ldr	r3, [r3, #4]
 800e24a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	430a      	orrs	r2, r1
 800e258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e25e:	f003 0308 	and.w	r3, r3, #8
 800e262:	2b00      	cmp	r3, #0
 800e264:	d00a      	beq.n	800e27c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	430a      	orrs	r2, r1
 800e27a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e280:	f003 0310 	and.w	r3, r3, #16
 800e284:	2b00      	cmp	r3, #0
 800e286:	d00a      	beq.n	800e29e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	689b      	ldr	r3, [r3, #8]
 800e28e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	430a      	orrs	r2, r1
 800e29c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a2:	f003 0320 	and.w	r3, r3, #32
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00a      	beq.n	800e2c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	689b      	ldr	r3, [r3, #8]
 800e2b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	430a      	orrs	r2, r1
 800e2be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d01a      	beq.n	800e302 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	430a      	orrs	r2, r1
 800e2e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2ea:	d10a      	bne.n	800e302 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	430a      	orrs	r2, r1
 800e300:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d00a      	beq.n	800e324 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	685b      	ldr	r3, [r3, #4]
 800e314:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	430a      	orrs	r2, r1
 800e322:	605a      	str	r2, [r3, #4]
  }
}
 800e324:	bf00      	nop
 800e326:	370c      	adds	r7, #12
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr

0800e330 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b086      	sub	sp, #24
 800e334:	af02      	add	r7, sp, #8
 800e336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2200      	movs	r2, #0
 800e33c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800e33e:	f7fb f9df 	bl	8009700 <HAL_GetTick>
 800e342:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f003 0308 	and.w	r3, r3, #8
 800e34e:	2b08      	cmp	r3, #8
 800e350:	d10e      	bne.n	800e370 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e352:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e356:	9300      	str	r3, [sp, #0]
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	2200      	movs	r2, #0
 800e35c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f000 f82a 	bl	800e3ba <UART_WaitOnFlagUntilTimeout>
 800e366:	4603      	mov	r3, r0
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d001      	beq.n	800e370 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e36c:	2303      	movs	r3, #3
 800e36e:	e020      	b.n	800e3b2 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f003 0304 	and.w	r3, r3, #4
 800e37a:	2b04      	cmp	r3, #4
 800e37c:	d10e      	bne.n	800e39c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e37e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e382:	9300      	str	r3, [sp, #0]
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2200      	movs	r2, #0
 800e388:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f000 f814 	bl	800e3ba <UART_WaitOnFlagUntilTimeout>
 800e392:	4603      	mov	r3, r0
 800e394:	2b00      	cmp	r3, #0
 800e396:	d001      	beq.n	800e39c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e398:	2303      	movs	r3, #3
 800e39a:	e00a      	b.n	800e3b2 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2220      	movs	r2, #32
 800e3a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2220      	movs	r2, #32
 800e3a6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800e3b0:	2300      	movs	r3, #0
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3710      	adds	r7, #16
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}

0800e3ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b084      	sub	sp, #16
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	60f8      	str	r0, [r7, #12]
 800e3c2:	60b9      	str	r1, [r7, #8]
 800e3c4:	603b      	str	r3, [r7, #0]
 800e3c6:	4613      	mov	r3, r2
 800e3c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e3ca:	e05d      	b.n	800e488 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e3cc:	69bb      	ldr	r3, [r7, #24]
 800e3ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3d2:	d059      	beq.n	800e488 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3d4:	f7fb f994 	bl	8009700 <HAL_GetTick>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	1ad3      	subs	r3, r2, r3
 800e3de:	69ba      	ldr	r2, [r7, #24]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d302      	bcc.n	800e3ea <UART_WaitOnFlagUntilTimeout+0x30>
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d11b      	bne.n	800e422 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	681a      	ldr	r2, [r3, #0]
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e3f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	689a      	ldr	r2, [r3, #8]
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f022 0201 	bic.w	r2, r2, #1
 800e408:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2220      	movs	r2, #32
 800e40e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2220      	movs	r2, #32
 800e414:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2200      	movs	r2, #0
 800e41a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800e41e:	2303      	movs	r3, #3
 800e420:	e042      	b.n	800e4a8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f003 0304 	and.w	r3, r3, #4
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d02b      	beq.n	800e488 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	69db      	ldr	r3, [r3, #28]
 800e436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e43a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e43e:	d123      	bne.n	800e488 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e448:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	681a      	ldr	r2, [r3, #0]
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e458:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	689a      	ldr	r2, [r3, #8]
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f022 0201 	bic.w	r2, r2, #1
 800e468:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	2220      	movs	r2, #32
 800e46e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2220      	movs	r2, #32
 800e474:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	2220      	movs	r2, #32
 800e47a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2200      	movs	r2, #0
 800e480:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800e484:	2303      	movs	r3, #3
 800e486:	e00f      	b.n	800e4a8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	69da      	ldr	r2, [r3, #28]
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	4013      	ands	r3, r2
 800e492:	68ba      	ldr	r2, [r7, #8]
 800e494:	429a      	cmp	r2, r3
 800e496:	bf0c      	ite	eq
 800e498:	2301      	moveq	r3, #1
 800e49a:	2300      	movne	r3, #0
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	461a      	mov	r2, r3
 800e4a0:	79fb      	ldrb	r3, [r7, #7]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d092      	beq.n	800e3cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e4a6:	2300      	movs	r3, #0
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3710      	adds	r7, #16
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	681a      	ldr	r2, [r3, #0]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e4c6:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2220      	movs	r2, #32
 800e4cc:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e4ce:	bf00      	nop
 800e4d0:	370c      	adds	r7, #12
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr

0800e4da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e4da:	b480      	push	{r7}
 800e4dc:	b083      	sub	sp, #12
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	681a      	ldr	r2, [r3, #0]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e4f0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	689a      	ldr	r2, [r3, #8]
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f022 0201 	bic.w	r2, r2, #1
 800e500:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2220      	movs	r2, #32
 800e506:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2200      	movs	r2, #0
 800e50c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800e50e:	bf00      	nop
 800e510:	370c      	adds	r7, #12
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr

0800e51a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e51a:	b580      	push	{r7, lr}
 800e51c:	b084      	sub	sp, #16
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e526:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	69db      	ldr	r3, [r3, #28]
 800e52c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e530:	d01e      	beq.n	800e570 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2200      	movs	r2, #0
 800e536:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	681a      	ldr	r2, [r3, #0]
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e548:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	689a      	ldr	r2, [r3, #8]
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f022 0201 	bic.w	r2, r2, #1
 800e558:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	689a      	ldr	r2, [r3, #8]
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e568:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2220      	movs	r2, #32
 800e56e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800e570:	68f8      	ldr	r0, [r7, #12]
 800e572:	f7ff fb69 	bl	800dc48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e576:	bf00      	nop
 800e578:	3710      	adds	r7, #16
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}

0800e57e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e57e:	b580      	push	{r7, lr}
 800e580:	b084      	sub	sp, #16
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e58a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800e58c:	68f8      	ldr	r0, [r7, #12]
 800e58e:	f7ff fb65 	bl	800dc5c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e592:	bf00      	nop
 800e594:	3710      	adds	r7, #16
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}

0800e59a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e59a:	b580      	push	{r7, lr}
 800e59c:	b086      	sub	sp, #24
 800e59e:	af00      	add	r7, sp, #0
 800e5a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5a6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5ac:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5b2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	689b      	ldr	r3, [r3, #8]
 800e5ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5be:	2b80      	cmp	r3, #128	; 0x80
 800e5c0:	d109      	bne.n	800e5d6 <UART_DMAError+0x3c>
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	2b21      	cmp	r3, #33	; 0x21
 800e5c6:	d106      	bne.n	800e5d6 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800e5d0:	6978      	ldr	r0, [r7, #20]
 800e5d2:	f7ff ff6d 	bl	800e4b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	689b      	ldr	r3, [r3, #8]
 800e5dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5e0:	2b40      	cmp	r3, #64	; 0x40
 800e5e2:	d109      	bne.n	800e5f8 <UART_DMAError+0x5e>
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2b22      	cmp	r3, #34	; 0x22
 800e5e8:	d106      	bne.n	800e5f8 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800e5f2:	6978      	ldr	r0, [r7, #20]
 800e5f4:	f7ff ff71 	bl	800e4da <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5fc:	f043 0210 	orr.w	r2, r3, #16
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e604:	6978      	ldr	r0, [r7, #20]
 800e606:	f7ff fb33 	bl	800dc70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e60a:	bf00      	nop
 800e60c:	3718      	adds	r7, #24
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e612:	b580      	push	{r7, lr}
 800e614:	b084      	sub	sp, #16
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e61e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	2200      	movs	r2, #0
 800e624:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2200      	movs	r2, #0
 800e62c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e630:	68f8      	ldr	r0, [r7, #12]
 800e632:	f7ff fb1d 	bl	800dc70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e636:	bf00      	nop
 800e638:	3710      	adds	r7, #16
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}

0800e63e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e63e:	b580      	push	{r7, lr}
 800e640:	b082      	sub	sp, #8
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e654:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2220      	movs	r2, #32
 800e65a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2200      	movs	r2, #0
 800e660:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f7ff fae6 	bl	800dc34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e668:	bf00      	nop
 800e66a:	3708      	adds	r7, #8
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e670:	b084      	sub	sp, #16
 800e672:	b580      	push	{r7, lr}
 800e674:	b084      	sub	sp, #16
 800e676:	af00      	add	r7, sp, #0
 800e678:	6078      	str	r0, [r7, #4]
 800e67a:	f107 001c 	add.w	r0, r7, #28
 800e67e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e684:	2b01      	cmp	r3, #1
 800e686:	d120      	bne.n	800e6ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e68c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	68da      	ldr	r2, [r3, #12]
 800e698:	4b20      	ldr	r3, [pc, #128]	; (800e71c <USB_CoreInit+0xac>)
 800e69a:	4013      	ands	r3, r2
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	68db      	ldr	r3, [r3, #12]
 800e6a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e6ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6ae:	2b01      	cmp	r3, #1
 800e6b0:	d105      	bne.n	800e6be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	68db      	ldr	r3, [r3, #12]
 800e6b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f000 fa52 	bl	800eb68 <USB_CoreReset>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	73fb      	strb	r3, [r7, #15]
 800e6c8:	e010      	b.n	800e6ec <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f000 fa46 	bl	800eb68 <USB_CoreReset>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800e6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ee:	2b01      	cmp	r3, #1
 800e6f0:	d10b      	bne.n	800e70a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	689b      	ldr	r3, [r3, #8]
 800e6f6:	f043 0206 	orr.w	r2, r3, #6
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	689b      	ldr	r3, [r3, #8]
 800e702:	f043 0220 	orr.w	r2, r3, #32
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3710      	adds	r7, #16
 800e710:	46bd      	mov	sp, r7
 800e712:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e716:	b004      	add	sp, #16
 800e718:	4770      	bx	lr
 800e71a:	bf00      	nop
 800e71c:	ffbdffbf 	.word	0xffbdffbf

0800e720 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e720:	b480      	push	{r7}
 800e722:	b083      	sub	sp, #12
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	689b      	ldr	r3, [r3, #8]
 800e72c:	f023 0201 	bic.w	r2, r3, #1
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e734:	2300      	movs	r3, #0
}
 800e736:	4618      	mov	r0, r3
 800e738:	370c      	adds	r7, #12
 800e73a:	46bd      	mov	sp, r7
 800e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e740:	4770      	bx	lr

0800e742 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e742:	b580      	push	{r7, lr}
 800e744:	b082      	sub	sp, #8
 800e746:	af00      	add	r7, sp, #0
 800e748:	6078      	str	r0, [r7, #4]
 800e74a:	460b      	mov	r3, r1
 800e74c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	68db      	ldr	r3, [r3, #12]
 800e752:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e75a:	78fb      	ldrb	r3, [r7, #3]
 800e75c:	2b01      	cmp	r3, #1
 800e75e:	d106      	bne.n	800e76e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	68db      	ldr	r3, [r3, #12]
 800e764:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	60da      	str	r2, [r3, #12]
 800e76c:	e00b      	b.n	800e786 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e76e:	78fb      	ldrb	r3, [r7, #3]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d106      	bne.n	800e782 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	60da      	str	r2, [r3, #12]
 800e780:	e001      	b.n	800e786 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e782:	2301      	movs	r3, #1
 800e784:	e003      	b.n	800e78e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e786:	2032      	movs	r0, #50	; 0x32
 800e788:	f7fa ffc6 	bl	8009718 <HAL_Delay>

  return HAL_OK;
 800e78c:	2300      	movs	r3, #0
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3708      	adds	r7, #8
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
	...

0800e798 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e798:	b084      	sub	sp, #16
 800e79a:	b580      	push	{r7, lr}
 800e79c:	b086      	sub	sp, #24
 800e79e:	af00      	add	r7, sp, #0
 800e7a0:	6078      	str	r0, [r7, #4]
 800e7a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e7a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	613b      	str	r3, [r7, #16]
 800e7b6:	e009      	b.n	800e7cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e7b8:	687a      	ldr	r2, [r7, #4]
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	3340      	adds	r3, #64	; 0x40
 800e7be:	009b      	lsls	r3, r3, #2
 800e7c0:	4413      	add	r3, r2
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	3301      	adds	r3, #1
 800e7ca:	613b      	str	r3, [r7, #16]
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	2b0e      	cmp	r3, #14
 800e7d0:	d9f2      	bls.n	800e7b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e7d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d11c      	bne.n	800e812 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	68fa      	ldr	r2, [r7, #12]
 800e7e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e7e6:	f043 0302 	orr.w	r3, r3, #2
 800e7ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	601a      	str	r2, [r3, #0]
 800e810:	e005      	b.n	800e81e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e816:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e824:	461a      	mov	r2, r3
 800e826:	2300      	movs	r3, #0
 800e828:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e830:	4619      	mov	r1, r3
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e838:	461a      	mov	r2, r3
 800e83a:	680b      	ldr	r3, [r1, #0]
 800e83c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e840:	2b01      	cmp	r3, #1
 800e842:	d10c      	bne.n	800e85e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e846:	2b00      	cmp	r3, #0
 800e848:	d104      	bne.n	800e854 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e84a:	2100      	movs	r1, #0
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f000 f959 	bl	800eb04 <USB_SetDevSpeed>
 800e852:	e018      	b.n	800e886 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e854:	2101      	movs	r1, #1
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f000 f954 	bl	800eb04 <USB_SetDevSpeed>
 800e85c:	e013      	b.n	800e886 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800e85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e860:	2b03      	cmp	r3, #3
 800e862:	d10c      	bne.n	800e87e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e866:	2b00      	cmp	r3, #0
 800e868:	d104      	bne.n	800e874 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e86a:	2100      	movs	r1, #0
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f000 f949 	bl	800eb04 <USB_SetDevSpeed>
 800e872:	e008      	b.n	800e886 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e874:	2101      	movs	r1, #1
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 f944 	bl	800eb04 <USB_SetDevSpeed>
 800e87c:	e003      	b.n	800e886 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e87e:	2103      	movs	r1, #3
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f000 f93f 	bl	800eb04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e886:	2110      	movs	r1, #16
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f000 f8f3 	bl	800ea74 <USB_FlushTxFifo>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d001      	beq.n	800e898 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800e894:	2301      	movs	r3, #1
 800e896:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f000 f911 	bl	800eac0 <USB_FlushRxFifo>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d001      	beq.n	800e8a8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800e8a4:	2301      	movs	r3, #1
 800e8a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	2300      	movs	r3, #0
 800e8be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8c6:	461a      	mov	r2, r3
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	613b      	str	r3, [r7, #16]
 800e8d0:	e043      	b.n	800e95a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	015a      	lsls	r2, r3, #5
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	4413      	add	r3, r2
 800e8da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e8e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e8e8:	d118      	bne.n	800e91c <USB_DevInit+0x184>
    {
      if (i == 0U)
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d10a      	bne.n	800e906 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	015a      	lsls	r2, r3, #5
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	4413      	add	r3, r2
 800e8f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e902:	6013      	str	r3, [r2, #0]
 800e904:	e013      	b.n	800e92e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	015a      	lsls	r2, r3, #5
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	4413      	add	r3, r2
 800e90e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e912:	461a      	mov	r2, r3
 800e914:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e918:	6013      	str	r3, [r2, #0]
 800e91a:	e008      	b.n	800e92e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	015a      	lsls	r2, r3, #5
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	4413      	add	r3, r2
 800e924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e928:	461a      	mov	r2, r3
 800e92a:	2300      	movs	r3, #0
 800e92c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	015a      	lsls	r2, r3, #5
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	4413      	add	r3, r2
 800e936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e93a:	461a      	mov	r2, r3
 800e93c:	2300      	movs	r3, #0
 800e93e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	015a      	lsls	r2, r3, #5
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	4413      	add	r3, r2
 800e948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e94c:	461a      	mov	r2, r3
 800e94e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e952:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	3301      	adds	r3, #1
 800e958:	613b      	str	r3, [r7, #16]
 800e95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95c:	693a      	ldr	r2, [r7, #16]
 800e95e:	429a      	cmp	r2, r3
 800e960:	d3b7      	bcc.n	800e8d2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e962:	2300      	movs	r3, #0
 800e964:	613b      	str	r3, [r7, #16]
 800e966:	e043      	b.n	800e9f0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	015a      	lsls	r2, r3, #5
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	4413      	add	r3, r2
 800e970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e97a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e97e:	d118      	bne.n	800e9b2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d10a      	bne.n	800e99c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	015a      	lsls	r2, r3, #5
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	4413      	add	r3, r2
 800e98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e992:	461a      	mov	r2, r3
 800e994:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e998:	6013      	str	r3, [r2, #0]
 800e99a:	e013      	b.n	800e9c4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	015a      	lsls	r2, r3, #5
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	4413      	add	r3, r2
 800e9a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e9ae:	6013      	str	r3, [r2, #0]
 800e9b0:	e008      	b.n	800e9c4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	015a      	lsls	r2, r3, #5
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9be:	461a      	mov	r2, r3
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	015a      	lsls	r2, r3, #5
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	4413      	add	r3, r2
 800e9cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9d0:	461a      	mov	r2, r3
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	015a      	lsls	r2, r3, #5
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	4413      	add	r3, r2
 800e9de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9e2:	461a      	mov	r2, r3
 800e9e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e9e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	613b      	str	r3, [r7, #16]
 800e9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f2:	693a      	ldr	r2, [r7, #16]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d3b7      	bcc.n	800e968 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9fe:	691b      	ldr	r3, [r3, #16]
 800ea00:	68fa      	ldr	r2, [r7, #12]
 800ea02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ea18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ea1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d105      	bne.n	800ea2c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	699b      	ldr	r3, [r3, #24]
 800ea24:	f043 0210 	orr.w	r2, r3, #16
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	699a      	ldr	r2, [r3, #24]
 800ea30:	4b0e      	ldr	r3, [pc, #56]	; (800ea6c <USB_DevInit+0x2d4>)
 800ea32:	4313      	orrs	r3, r2
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ea38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d005      	beq.n	800ea4a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	699b      	ldr	r3, [r3, #24]
 800ea42:	f043 0208 	orr.w	r2, r3, #8
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ea4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea4c:	2b01      	cmp	r3, #1
 800ea4e:	d105      	bne.n	800ea5c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	699a      	ldr	r2, [r3, #24]
 800ea54:	4b06      	ldr	r3, [pc, #24]	; (800ea70 <USB_DevInit+0x2d8>)
 800ea56:	4313      	orrs	r3, r2
 800ea58:	687a      	ldr	r2, [r7, #4]
 800ea5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ea5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3718      	adds	r7, #24
 800ea62:	46bd      	mov	sp, r7
 800ea64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ea68:	b004      	add	sp, #16
 800ea6a:	4770      	bx	lr
 800ea6c:	803c3800 	.word	0x803c3800
 800ea70:	40000004 	.word	0x40000004

0800ea74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b085      	sub	sp, #20
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	019b      	lsls	r3, r3, #6
 800ea86:	f043 0220 	orr.w	r2, r3, #32
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	3301      	adds	r3, #1
 800ea92:	60fb      	str	r3, [r7, #12]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	4a09      	ldr	r2, [pc, #36]	; (800eabc <USB_FlushTxFifo+0x48>)
 800ea98:	4293      	cmp	r3, r2
 800ea9a:	d901      	bls.n	800eaa0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ea9c:	2303      	movs	r3, #3
 800ea9e:	e006      	b.n	800eaae <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	691b      	ldr	r3, [r3, #16]
 800eaa4:	f003 0320 	and.w	r3, r3, #32
 800eaa8:	2b20      	cmp	r3, #32
 800eaaa:	d0f0      	beq.n	800ea8e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800eaac:	2300      	movs	r3, #0
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	3714      	adds	r7, #20
 800eab2:	46bd      	mov	sp, r7
 800eab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab8:	4770      	bx	lr
 800eaba:	bf00      	nop
 800eabc:	00030d40 	.word	0x00030d40

0800eac0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800eac0:	b480      	push	{r7}
 800eac2:	b085      	sub	sp, #20
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800eac8:	2300      	movs	r3, #0
 800eaca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2210      	movs	r2, #16
 800ead0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	3301      	adds	r3, #1
 800ead6:	60fb      	str	r3, [r7, #12]
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	4a09      	ldr	r2, [pc, #36]	; (800eb00 <USB_FlushRxFifo+0x40>)
 800eadc:	4293      	cmp	r3, r2
 800eade:	d901      	bls.n	800eae4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800eae0:	2303      	movs	r3, #3
 800eae2:	e006      	b.n	800eaf2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	691b      	ldr	r3, [r3, #16]
 800eae8:	f003 0310 	and.w	r3, r3, #16
 800eaec:	2b10      	cmp	r3, #16
 800eaee:	d0f0      	beq.n	800ead2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800eaf0:	2300      	movs	r3, #0
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3714      	adds	r7, #20
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafc:	4770      	bx	lr
 800eafe:	bf00      	nop
 800eb00:	00030d40 	.word	0x00030d40

0800eb04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b085      	sub	sp, #20
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	78fb      	ldrb	r3, [r7, #3]
 800eb1e:	68f9      	ldr	r1, [r7, #12]
 800eb20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eb24:	4313      	orrs	r3, r2
 800eb26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800eb28:	2300      	movs	r3, #0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3714      	adds	r7, #20
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr

0800eb36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800eb36:	b580      	push	{r7, lr}
 800eb38:	b084      	sub	sp, #16
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	68fa      	ldr	r2, [r7, #12]
 800eb4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb50:	f043 0302 	orr.w	r3, r3, #2
 800eb54:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800eb56:	2003      	movs	r0, #3
 800eb58:	f7fa fdde 	bl	8009718 <HAL_Delay>

  return HAL_OK;
 800eb5c:	2300      	movs	r3, #0
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3710      	adds	r7, #16
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
	...

0800eb68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b085      	sub	sp, #20
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800eb70:	2300      	movs	r3, #0
 800eb72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	3301      	adds	r3, #1
 800eb78:	60fb      	str	r3, [r7, #12]
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	4a13      	ldr	r2, [pc, #76]	; (800ebcc <USB_CoreReset+0x64>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d901      	bls.n	800eb86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800eb82:	2303      	movs	r3, #3
 800eb84:	e01b      	b.n	800ebbe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	691b      	ldr	r3, [r3, #16]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	daf2      	bge.n	800eb74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	691b      	ldr	r3, [r3, #16]
 800eb96:	f043 0201 	orr.w	r2, r3, #1
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	3301      	adds	r3, #1
 800eba2:	60fb      	str	r3, [r7, #12]
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	4a09      	ldr	r2, [pc, #36]	; (800ebcc <USB_CoreReset+0x64>)
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	d901      	bls.n	800ebb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ebac:	2303      	movs	r3, #3
 800ebae:	e006      	b.n	800ebbe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	691b      	ldr	r3, [r3, #16]
 800ebb4:	f003 0301 	and.w	r3, r3, #1
 800ebb8:	2b01      	cmp	r3, #1
 800ebba:	d0f0      	beq.n	800eb9e <USB_CoreReset+0x36>

  return HAL_OK;
 800ebbc:	2300      	movs	r3, #0
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3714      	adds	r7, #20
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr
 800ebca:	bf00      	nop
 800ebcc:	00030d40 	.word	0x00030d40

0800ebd0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ebd0:	b5b0      	push	{r4, r5, r7, lr}
 800ebd2:	b08e      	sub	sp, #56	; 0x38
 800ebd4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800ebd6:	4ba0      	ldr	r3, [pc, #640]	; (800ee58 <MX_LWIP_Init+0x288>)
 800ebd8:	22c0      	movs	r2, #192	; 0xc0
 800ebda:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800ebdc:	4b9e      	ldr	r3, [pc, #632]	; (800ee58 <MX_LWIP_Init+0x288>)
 800ebde:	22a8      	movs	r2, #168	; 0xa8
 800ebe0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800ebe2:	4b9d      	ldr	r3, [pc, #628]	; (800ee58 <MX_LWIP_Init+0x288>)
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 70;
 800ebe8:	4b9b      	ldr	r3, [pc, #620]	; (800ee58 <MX_LWIP_Init+0x288>)
 800ebea:	2246      	movs	r2, #70	; 0x46
 800ebec:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ebee:	4b9b      	ldr	r3, [pc, #620]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ebf0:	22ff      	movs	r2, #255	; 0xff
 800ebf2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ebf4:	4b99      	ldr	r3, [pc, #612]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ebf6:	22ff      	movs	r2, #255	; 0xff
 800ebf8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800ebfa:	4b98      	ldr	r3, [pc, #608]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ebfc:	22ff      	movs	r2, #255	; 0xff
 800ebfe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ec00:	4b96      	ldr	r3, [pc, #600]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ec02:	2200      	movs	r2, #0
 800ec04:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800ec06:	4b96      	ldr	r3, [pc, #600]	; (800ee60 <MX_LWIP_Init+0x290>)
 800ec08:	2200      	movs	r2, #0
 800ec0a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800ec0c:	4b94      	ldr	r3, [pc, #592]	; (800ee60 <MX_LWIP_Init+0x290>)
 800ec0e:	2200      	movs	r2, #0
 800ec10:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800ec12:	4b93      	ldr	r3, [pc, #588]	; (800ee60 <MX_LWIP_Init+0x290>)
 800ec14:	2200      	movs	r2, #0
 800ec16:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800ec18:	4b91      	ldr	r3, [pc, #580]	; (800ee60 <MX_LWIP_Init+0x290>)
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800ec1e:	2100      	movs	r1, #0
 800ec20:	2000      	movs	r0, #0
 800ec22:	f003 fdc7 	bl	80127b4 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800ec26:	4b8c      	ldr	r3, [pc, #560]	; (800ee58 <MX_LWIP_Init+0x288>)
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	061a      	lsls	r2, r3, #24
 800ec2c:	4b8a      	ldr	r3, [pc, #552]	; (800ee58 <MX_LWIP_Init+0x288>)
 800ec2e:	785b      	ldrb	r3, [r3, #1]
 800ec30:	041b      	lsls	r3, r3, #16
 800ec32:	431a      	orrs	r2, r3
 800ec34:	4b88      	ldr	r3, [pc, #544]	; (800ee58 <MX_LWIP_Init+0x288>)
 800ec36:	789b      	ldrb	r3, [r3, #2]
 800ec38:	021b      	lsls	r3, r3, #8
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	4a86      	ldr	r2, [pc, #536]	; (800ee58 <MX_LWIP_Init+0x288>)
 800ec3e:	78d2      	ldrb	r2, [r2, #3]
 800ec40:	4313      	orrs	r3, r2
 800ec42:	061a      	lsls	r2, r3, #24
 800ec44:	4b84      	ldr	r3, [pc, #528]	; (800ee58 <MX_LWIP_Init+0x288>)
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	0619      	lsls	r1, r3, #24
 800ec4a:	4b83      	ldr	r3, [pc, #524]	; (800ee58 <MX_LWIP_Init+0x288>)
 800ec4c:	785b      	ldrb	r3, [r3, #1]
 800ec4e:	041b      	lsls	r3, r3, #16
 800ec50:	4319      	orrs	r1, r3
 800ec52:	4b81      	ldr	r3, [pc, #516]	; (800ee58 <MX_LWIP_Init+0x288>)
 800ec54:	789b      	ldrb	r3, [r3, #2]
 800ec56:	021b      	lsls	r3, r3, #8
 800ec58:	430b      	orrs	r3, r1
 800ec5a:	497f      	ldr	r1, [pc, #508]	; (800ee58 <MX_LWIP_Init+0x288>)
 800ec5c:	78c9      	ldrb	r1, [r1, #3]
 800ec5e:	430b      	orrs	r3, r1
 800ec60:	021b      	lsls	r3, r3, #8
 800ec62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ec66:	431a      	orrs	r2, r3
 800ec68:	4b7b      	ldr	r3, [pc, #492]	; (800ee58 <MX_LWIP_Init+0x288>)
 800ec6a:	781b      	ldrb	r3, [r3, #0]
 800ec6c:	0619      	lsls	r1, r3, #24
 800ec6e:	4b7a      	ldr	r3, [pc, #488]	; (800ee58 <MX_LWIP_Init+0x288>)
 800ec70:	785b      	ldrb	r3, [r3, #1]
 800ec72:	041b      	lsls	r3, r3, #16
 800ec74:	4319      	orrs	r1, r3
 800ec76:	4b78      	ldr	r3, [pc, #480]	; (800ee58 <MX_LWIP_Init+0x288>)
 800ec78:	789b      	ldrb	r3, [r3, #2]
 800ec7a:	021b      	lsls	r3, r3, #8
 800ec7c:	430b      	orrs	r3, r1
 800ec7e:	4976      	ldr	r1, [pc, #472]	; (800ee58 <MX_LWIP_Init+0x288>)
 800ec80:	78c9      	ldrb	r1, [r1, #3]
 800ec82:	430b      	orrs	r3, r1
 800ec84:	0a1b      	lsrs	r3, r3, #8
 800ec86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ec8a:	431a      	orrs	r2, r3
 800ec8c:	4b72      	ldr	r3, [pc, #456]	; (800ee58 <MX_LWIP_Init+0x288>)
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	0619      	lsls	r1, r3, #24
 800ec92:	4b71      	ldr	r3, [pc, #452]	; (800ee58 <MX_LWIP_Init+0x288>)
 800ec94:	785b      	ldrb	r3, [r3, #1]
 800ec96:	041b      	lsls	r3, r3, #16
 800ec98:	4319      	orrs	r1, r3
 800ec9a:	4b6f      	ldr	r3, [pc, #444]	; (800ee58 <MX_LWIP_Init+0x288>)
 800ec9c:	789b      	ldrb	r3, [r3, #2]
 800ec9e:	021b      	lsls	r3, r3, #8
 800eca0:	430b      	orrs	r3, r1
 800eca2:	496d      	ldr	r1, [pc, #436]	; (800ee58 <MX_LWIP_Init+0x288>)
 800eca4:	78c9      	ldrb	r1, [r1, #3]
 800eca6:	430b      	orrs	r3, r1
 800eca8:	0e1b      	lsrs	r3, r3, #24
 800ecaa:	4313      	orrs	r3, r2
 800ecac:	4a6d      	ldr	r2, [pc, #436]	; (800ee64 <MX_LWIP_Init+0x294>)
 800ecae:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800ecb0:	4b6a      	ldr	r3, [pc, #424]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ecb2:	781b      	ldrb	r3, [r3, #0]
 800ecb4:	061a      	lsls	r2, r3, #24
 800ecb6:	4b69      	ldr	r3, [pc, #420]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ecb8:	785b      	ldrb	r3, [r3, #1]
 800ecba:	041b      	lsls	r3, r3, #16
 800ecbc:	431a      	orrs	r2, r3
 800ecbe:	4b67      	ldr	r3, [pc, #412]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ecc0:	789b      	ldrb	r3, [r3, #2]
 800ecc2:	021b      	lsls	r3, r3, #8
 800ecc4:	4313      	orrs	r3, r2
 800ecc6:	4a65      	ldr	r2, [pc, #404]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ecc8:	78d2      	ldrb	r2, [r2, #3]
 800ecca:	4313      	orrs	r3, r2
 800eccc:	061a      	lsls	r2, r3, #24
 800ecce:	4b63      	ldr	r3, [pc, #396]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ecd0:	781b      	ldrb	r3, [r3, #0]
 800ecd2:	0619      	lsls	r1, r3, #24
 800ecd4:	4b61      	ldr	r3, [pc, #388]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ecd6:	785b      	ldrb	r3, [r3, #1]
 800ecd8:	041b      	lsls	r3, r3, #16
 800ecda:	4319      	orrs	r1, r3
 800ecdc:	4b5f      	ldr	r3, [pc, #380]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ecde:	789b      	ldrb	r3, [r3, #2]
 800ece0:	021b      	lsls	r3, r3, #8
 800ece2:	430b      	orrs	r3, r1
 800ece4:	495d      	ldr	r1, [pc, #372]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ece6:	78c9      	ldrb	r1, [r1, #3]
 800ece8:	430b      	orrs	r3, r1
 800ecea:	021b      	lsls	r3, r3, #8
 800ecec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ecf0:	431a      	orrs	r2, r3
 800ecf2:	4b5a      	ldr	r3, [pc, #360]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	0619      	lsls	r1, r3, #24
 800ecf8:	4b58      	ldr	r3, [pc, #352]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ecfa:	785b      	ldrb	r3, [r3, #1]
 800ecfc:	041b      	lsls	r3, r3, #16
 800ecfe:	4319      	orrs	r1, r3
 800ed00:	4b56      	ldr	r3, [pc, #344]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ed02:	789b      	ldrb	r3, [r3, #2]
 800ed04:	021b      	lsls	r3, r3, #8
 800ed06:	430b      	orrs	r3, r1
 800ed08:	4954      	ldr	r1, [pc, #336]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ed0a:	78c9      	ldrb	r1, [r1, #3]
 800ed0c:	430b      	orrs	r3, r1
 800ed0e:	0a1b      	lsrs	r3, r3, #8
 800ed10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ed14:	431a      	orrs	r2, r3
 800ed16:	4b51      	ldr	r3, [pc, #324]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	0619      	lsls	r1, r3, #24
 800ed1c:	4b4f      	ldr	r3, [pc, #316]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ed1e:	785b      	ldrb	r3, [r3, #1]
 800ed20:	041b      	lsls	r3, r3, #16
 800ed22:	4319      	orrs	r1, r3
 800ed24:	4b4d      	ldr	r3, [pc, #308]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ed26:	789b      	ldrb	r3, [r3, #2]
 800ed28:	021b      	lsls	r3, r3, #8
 800ed2a:	430b      	orrs	r3, r1
 800ed2c:	494b      	ldr	r1, [pc, #300]	; (800ee5c <MX_LWIP_Init+0x28c>)
 800ed2e:	78c9      	ldrb	r1, [r1, #3]
 800ed30:	430b      	orrs	r3, r1
 800ed32:	0e1b      	lsrs	r3, r3, #24
 800ed34:	4313      	orrs	r3, r2
 800ed36:	4a4c      	ldr	r2, [pc, #304]	; (800ee68 <MX_LWIP_Init+0x298>)
 800ed38:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800ed3a:	4b49      	ldr	r3, [pc, #292]	; (800ee60 <MX_LWIP_Init+0x290>)
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	061a      	lsls	r2, r3, #24
 800ed40:	4b47      	ldr	r3, [pc, #284]	; (800ee60 <MX_LWIP_Init+0x290>)
 800ed42:	785b      	ldrb	r3, [r3, #1]
 800ed44:	041b      	lsls	r3, r3, #16
 800ed46:	431a      	orrs	r2, r3
 800ed48:	4b45      	ldr	r3, [pc, #276]	; (800ee60 <MX_LWIP_Init+0x290>)
 800ed4a:	789b      	ldrb	r3, [r3, #2]
 800ed4c:	021b      	lsls	r3, r3, #8
 800ed4e:	4313      	orrs	r3, r2
 800ed50:	4a43      	ldr	r2, [pc, #268]	; (800ee60 <MX_LWIP_Init+0x290>)
 800ed52:	78d2      	ldrb	r2, [r2, #3]
 800ed54:	4313      	orrs	r3, r2
 800ed56:	061a      	lsls	r2, r3, #24
 800ed58:	4b41      	ldr	r3, [pc, #260]	; (800ee60 <MX_LWIP_Init+0x290>)
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	0619      	lsls	r1, r3, #24
 800ed5e:	4b40      	ldr	r3, [pc, #256]	; (800ee60 <MX_LWIP_Init+0x290>)
 800ed60:	785b      	ldrb	r3, [r3, #1]
 800ed62:	041b      	lsls	r3, r3, #16
 800ed64:	4319      	orrs	r1, r3
 800ed66:	4b3e      	ldr	r3, [pc, #248]	; (800ee60 <MX_LWIP_Init+0x290>)
 800ed68:	789b      	ldrb	r3, [r3, #2]
 800ed6a:	021b      	lsls	r3, r3, #8
 800ed6c:	430b      	orrs	r3, r1
 800ed6e:	493c      	ldr	r1, [pc, #240]	; (800ee60 <MX_LWIP_Init+0x290>)
 800ed70:	78c9      	ldrb	r1, [r1, #3]
 800ed72:	430b      	orrs	r3, r1
 800ed74:	021b      	lsls	r3, r3, #8
 800ed76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ed7a:	431a      	orrs	r2, r3
 800ed7c:	4b38      	ldr	r3, [pc, #224]	; (800ee60 <MX_LWIP_Init+0x290>)
 800ed7e:	781b      	ldrb	r3, [r3, #0]
 800ed80:	0619      	lsls	r1, r3, #24
 800ed82:	4b37      	ldr	r3, [pc, #220]	; (800ee60 <MX_LWIP_Init+0x290>)
 800ed84:	785b      	ldrb	r3, [r3, #1]
 800ed86:	041b      	lsls	r3, r3, #16
 800ed88:	4319      	orrs	r1, r3
 800ed8a:	4b35      	ldr	r3, [pc, #212]	; (800ee60 <MX_LWIP_Init+0x290>)
 800ed8c:	789b      	ldrb	r3, [r3, #2]
 800ed8e:	021b      	lsls	r3, r3, #8
 800ed90:	430b      	orrs	r3, r1
 800ed92:	4933      	ldr	r1, [pc, #204]	; (800ee60 <MX_LWIP_Init+0x290>)
 800ed94:	78c9      	ldrb	r1, [r1, #3]
 800ed96:	430b      	orrs	r3, r1
 800ed98:	0a1b      	lsrs	r3, r3, #8
 800ed9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ed9e:	431a      	orrs	r2, r3
 800eda0:	4b2f      	ldr	r3, [pc, #188]	; (800ee60 <MX_LWIP_Init+0x290>)
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	0619      	lsls	r1, r3, #24
 800eda6:	4b2e      	ldr	r3, [pc, #184]	; (800ee60 <MX_LWIP_Init+0x290>)
 800eda8:	785b      	ldrb	r3, [r3, #1]
 800edaa:	041b      	lsls	r3, r3, #16
 800edac:	4319      	orrs	r1, r3
 800edae:	4b2c      	ldr	r3, [pc, #176]	; (800ee60 <MX_LWIP_Init+0x290>)
 800edb0:	789b      	ldrb	r3, [r3, #2]
 800edb2:	021b      	lsls	r3, r3, #8
 800edb4:	430b      	orrs	r3, r1
 800edb6:	492a      	ldr	r1, [pc, #168]	; (800ee60 <MX_LWIP_Init+0x290>)
 800edb8:	78c9      	ldrb	r1, [r1, #3]
 800edba:	430b      	orrs	r3, r1
 800edbc:	0e1b      	lsrs	r3, r3, #24
 800edbe:	4313      	orrs	r3, r2
 800edc0:	4a2a      	ldr	r2, [pc, #168]	; (800ee6c <MX_LWIP_Init+0x29c>)
 800edc2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800edc4:	4b2a      	ldr	r3, [pc, #168]	; (800ee70 <MX_LWIP_Init+0x2a0>)
 800edc6:	9302      	str	r3, [sp, #8]
 800edc8:	4b2a      	ldr	r3, [pc, #168]	; (800ee74 <MX_LWIP_Init+0x2a4>)
 800edca:	9301      	str	r3, [sp, #4]
 800edcc:	2300      	movs	r3, #0
 800edce:	9300      	str	r3, [sp, #0]
 800edd0:	4b26      	ldr	r3, [pc, #152]	; (800ee6c <MX_LWIP_Init+0x29c>)
 800edd2:	4a25      	ldr	r2, [pc, #148]	; (800ee68 <MX_LWIP_Init+0x298>)
 800edd4:	4923      	ldr	r1, [pc, #140]	; (800ee64 <MX_LWIP_Init+0x294>)
 800edd6:	4828      	ldr	r0, [pc, #160]	; (800ee78 <MX_LWIP_Init+0x2a8>)
 800edd8:	f005 f8c0 	bl	8013f5c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800eddc:	4826      	ldr	r0, [pc, #152]	; (800ee78 <MX_LWIP_Init+0x2a8>)
 800edde:	f005 fa6f 	bl	80142c0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800ede2:	4b25      	ldr	r3, [pc, #148]	; (800ee78 <MX_LWIP_Init+0x2a8>)
 800ede4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ede8:	089b      	lsrs	r3, r3, #2
 800edea:	f003 0301 	and.w	r3, r3, #1
 800edee:	b2db      	uxtb	r3, r3
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d003      	beq.n	800edfc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800edf4:	4820      	ldr	r0, [pc, #128]	; (800ee78 <MX_LWIP_Init+0x2a8>)
 800edf6:	f005 fa73 	bl	80142e0 <netif_set_up>
 800edfa:	e002      	b.n	800ee02 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800edfc:	481e      	ldr	r0, [pc, #120]	; (800ee78 <MX_LWIP_Init+0x2a8>)
 800edfe:	f005 fadb 	bl	80143b8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800ee02:	491e      	ldr	r1, [pc, #120]	; (800ee7c <MX_LWIP_Init+0x2ac>)
 800ee04:	481c      	ldr	r0, [pc, #112]	; (800ee78 <MX_LWIP_Init+0x2a8>)
 800ee06:	f005 fb6d 	bl	80144e4 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	623b      	str	r3, [r7, #32]
 800ee0e:	2300      	movs	r3, #0
 800ee10:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800ee12:	f107 0320 	add.w	r3, r7, #32
 800ee16:	2101      	movs	r1, #1
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f000 fd8f 	bl	800f93c <osSemaphoreCreate>
 800ee1e:	4602      	mov	r2, r0
 800ee20:	4b17      	ldr	r3, [pc, #92]	; (800ee80 <MX_LWIP_Init+0x2b0>)
 800ee22:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 800ee24:	4b17      	ldr	r3, [pc, #92]	; (800ee84 <MX_LWIP_Init+0x2b4>)
 800ee26:	4a14      	ldr	r2, [pc, #80]	; (800ee78 <MX_LWIP_Init+0x2a8>)
 800ee28:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800ee2a:	4b15      	ldr	r3, [pc, #84]	; (800ee80 <MX_LWIP_Init+0x2b0>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	4a15      	ldr	r2, [pc, #84]	; (800ee84 <MX_LWIP_Init+0x2b4>)
 800ee30:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800ee32:	4b15      	ldr	r3, [pc, #84]	; (800ee88 <MX_LWIP_Init+0x2b8>)
 800ee34:	1d3c      	adds	r4, r7, #4
 800ee36:	461d      	mov	r5, r3
 800ee38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ee40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 800ee44:	1d3b      	adds	r3, r7, #4
 800ee46:	490f      	ldr	r1, [pc, #60]	; (800ee84 <MX_LWIP_Init+0x2b4>)
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f000 fc7a 	bl	800f742 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800ee4e:	bf00      	nop
 800ee50:	3728      	adds	r7, #40	; 0x28
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bdb0      	pop	{r4, r5, r7, pc}
 800ee56:	bf00      	nop
 800ee58:	20004cfc 	.word	0x20004cfc
 800ee5c:	20004cf8 	.word	0x20004cf8
 800ee60:	20004cbc 	.word	0x20004cbc
 800ee64:	20004cf4 	.word	0x20004cf4
 800ee68:	20004d00 	.word	0x20004d00
 800ee6c:	20004d04 	.word	0x20004d04
 800ee70:	080126f1 	.word	0x080126f1
 800ee74:	0800f4d1 	.word	0x0800f4d1
 800ee78:	20004cc0 	.word	0x20004cc0
 800ee7c:	0800f5b5 	.word	0x0800f5b5
 800ee80:	20000340 	.word	0x20000340
 800ee84:	20004cb4 	.word	0x20004cb4
 800ee88:	0801ef8c 	.word	0x0801ef8c

0800ee8c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b08e      	sub	sp, #56	; 0x38
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee98:	2200      	movs	r2, #0
 800ee9a:	601a      	str	r2, [r3, #0]
 800ee9c:	605a      	str	r2, [r3, #4]
 800ee9e:	609a      	str	r2, [r3, #8]
 800eea0:	60da      	str	r2, [r3, #12]
 800eea2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4a52      	ldr	r2, [pc, #328]	; (800eff4 <HAL_ETH_MspInit+0x168>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	f040 809e 	bne.w	800efec <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800eeb0:	4b51      	ldr	r3, [pc, #324]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800eeb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eeb4:	4a50      	ldr	r2, [pc, #320]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800eeb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800eeba:	6313      	str	r3, [r2, #48]	; 0x30
 800eebc:	4b4e      	ldr	r3, [pc, #312]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800eebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eec4:	623b      	str	r3, [r7, #32]
 800eec6:	6a3b      	ldr	r3, [r7, #32]
 800eec8:	4b4b      	ldr	r3, [pc, #300]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800eeca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eecc:	4a4a      	ldr	r2, [pc, #296]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800eece:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800eed2:	6313      	str	r3, [r2, #48]	; 0x30
 800eed4:	4b48      	ldr	r3, [pc, #288]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800eed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eed8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800eedc:	61fb      	str	r3, [r7, #28]
 800eede:	69fb      	ldr	r3, [r7, #28]
 800eee0:	4b45      	ldr	r3, [pc, #276]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800eee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eee4:	4a44      	ldr	r2, [pc, #272]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800eee6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800eeea:	6313      	str	r3, [r2, #48]	; 0x30
 800eeec:	4b42      	ldr	r3, [pc, #264]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800eeee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eef4:	61bb      	str	r3, [r7, #24]
 800eef6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800eef8:	4b3f      	ldr	r3, [pc, #252]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800eefa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eefc:	4a3e      	ldr	r2, [pc, #248]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800eefe:	f043 0304 	orr.w	r3, r3, #4
 800ef02:	6313      	str	r3, [r2, #48]	; 0x30
 800ef04:	4b3c      	ldr	r3, [pc, #240]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800ef06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef08:	f003 0304 	and.w	r3, r3, #4
 800ef0c:	617b      	str	r3, [r7, #20]
 800ef0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ef10:	4b39      	ldr	r3, [pc, #228]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800ef12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef14:	4a38      	ldr	r2, [pc, #224]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800ef16:	f043 0301 	orr.w	r3, r3, #1
 800ef1a:	6313      	str	r3, [r2, #48]	; 0x30
 800ef1c:	4b36      	ldr	r3, [pc, #216]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800ef1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef20:	f003 0301 	and.w	r3, r3, #1
 800ef24:	613b      	str	r3, [r7, #16]
 800ef26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ef28:	4b33      	ldr	r3, [pc, #204]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800ef2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef2c:	4a32      	ldr	r2, [pc, #200]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800ef2e:	f043 0302 	orr.w	r3, r3, #2
 800ef32:	6313      	str	r3, [r2, #48]	; 0x30
 800ef34:	4b30      	ldr	r3, [pc, #192]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800ef36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef38:	f003 0302 	and.w	r3, r3, #2
 800ef3c:	60fb      	str	r3, [r7, #12]
 800ef3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ef40:	4b2d      	ldr	r3, [pc, #180]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800ef42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef44:	4a2c      	ldr	r2, [pc, #176]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800ef46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef4a:	6313      	str	r3, [r2, #48]	; 0x30
 800ef4c:	4b2a      	ldr	r3, [pc, #168]	; (800eff8 <HAL_ETH_MspInit+0x16c>)
 800ef4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef54:	60bb      	str	r3, [r7, #8]
 800ef56:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800ef58:	2332      	movs	r3, #50	; 0x32
 800ef5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef5c:	2302      	movs	r3, #2
 800ef5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef60:	2300      	movs	r3, #0
 800ef62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ef64:	2303      	movs	r3, #3
 800ef66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ef68:	230b      	movs	r3, #11
 800ef6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ef6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef70:	4619      	mov	r1, r3
 800ef72:	4822      	ldr	r0, [pc, #136]	; (800effc <HAL_ETH_MspInit+0x170>)
 800ef74:	f7fc faae 	bl	800b4d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800ef78:	2386      	movs	r3, #134	; 0x86
 800ef7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef7c:	2302      	movs	r3, #2
 800ef7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef80:	2300      	movs	r3, #0
 800ef82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ef84:	2303      	movs	r3, #3
 800ef86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ef88:	230b      	movs	r3, #11
 800ef8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef90:	4619      	mov	r1, r3
 800ef92:	481b      	ldr	r0, [pc, #108]	; (800f000 <HAL_ETH_MspInit+0x174>)
 800ef94:	f7fc fa9e 	bl	800b4d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800ef98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ef9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef9e:	2302      	movs	r3, #2
 800efa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800efa2:	2300      	movs	r3, #0
 800efa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800efa6:	2303      	movs	r3, #3
 800efa8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800efaa:	230b      	movs	r3, #11
 800efac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800efae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800efb2:	4619      	mov	r1, r3
 800efb4:	4813      	ldr	r0, [pc, #76]	; (800f004 <HAL_ETH_MspInit+0x178>)
 800efb6:	f7fc fa8d 	bl	800b4d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800efba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800efbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800efc0:	2302      	movs	r3, #2
 800efc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800efc4:	2300      	movs	r3, #0
 800efc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800efc8:	2303      	movs	r3, #3
 800efca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800efcc:	230b      	movs	r3, #11
 800efce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800efd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800efd4:	4619      	mov	r1, r3
 800efd6:	480c      	ldr	r0, [pc, #48]	; (800f008 <HAL_ETH_MspInit+0x17c>)
 800efd8:	f7fc fa7c 	bl	800b4d4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800efdc:	2200      	movs	r2, #0
 800efde:	2105      	movs	r1, #5
 800efe0:	203d      	movs	r0, #61	; 0x3d
 800efe2:	f7fa fc96 	bl	8009912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800efe6:	203d      	movs	r0, #61	; 0x3d
 800efe8:	f7fa fcaf 	bl	800994a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800efec:	bf00      	nop
 800efee:	3738      	adds	r7, #56	; 0x38
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	40028000 	.word	0x40028000
 800eff8:	40023800 	.word	0x40023800
 800effc:	40020800 	.word	0x40020800
 800f000:	40020000 	.word	0x40020000
 800f004:	40020400 	.word	0x40020400
 800f008:	40021800 	.word	0x40021800

0800f00c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b082      	sub	sp, #8
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800f014:	4b04      	ldr	r3, [pc, #16]	; (800f028 <HAL_ETH_RxCpltCallback+0x1c>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4618      	mov	r0, r3
 800f01a:	f000 fd11 	bl	800fa40 <osSemaphoreRelease>
}
 800f01e:	bf00      	nop
 800f020:	3708      	adds	r7, #8
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}
 800f026:	bf00      	nop
 800f028:	20000344 	.word	0x20000344

0800f02c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800f02c:	b5b0      	push	{r4, r5, r7, lr}
 800f02e:	b090      	sub	sp, #64	; 0x40
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800f034:	2300      	movs	r3, #0
 800f036:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800f038:	4b5c      	ldr	r3, [pc, #368]	; (800f1ac <low_level_init+0x180>)
 800f03a:	4a5d      	ldr	r2, [pc, #372]	; (800f1b0 <low_level_init+0x184>)
 800f03c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800f03e:	4b5b      	ldr	r3, [pc, #364]	; (800f1ac <low_level_init+0x180>)
 800f040:	2201      	movs	r2, #1
 800f042:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800f044:	4b59      	ldr	r3, [pc, #356]	; (800f1ac <low_level_init+0x180>)
 800f046:	2200      	movs	r2, #0
 800f048:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800f04a:	2300      	movs	r3, #0
 800f04c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800f050:	2380      	movs	r3, #128	; 0x80
 800f052:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800f056:	23e1      	movs	r3, #225	; 0xe1
 800f058:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800f05c:	2300      	movs	r3, #0
 800f05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800f062:	2300      	movs	r3, #0
 800f064:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800f068:	2300      	movs	r3, #0
 800f06a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800f06e:	4a4f      	ldr	r2, [pc, #316]	; (800f1ac <low_level_init+0x180>)
 800f070:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f074:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800f076:	4b4d      	ldr	r3, [pc, #308]	; (800f1ac <low_level_init+0x180>)
 800f078:	2201      	movs	r2, #1
 800f07a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800f07c:	4b4b      	ldr	r3, [pc, #300]	; (800f1ac <low_level_init+0x180>)
 800f07e:	2200      	movs	r2, #0
 800f080:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800f082:	4b4a      	ldr	r3, [pc, #296]	; (800f1ac <low_level_init+0x180>)
 800f084:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800f088:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f08a:	4848      	ldr	r0, [pc, #288]	; (800f1ac <low_level_init+0x180>)
 800f08c:	f7fb f88c 	bl	800a1a8 <HAL_ETH_Init>
 800f090:	4603      	mov	r3, r0
 800f092:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800f096:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d108      	bne.n	800f0b0 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f0a4:	f043 0304 	orr.w	r3, r3, #4
 800f0a8:	b2da      	uxtb	r2, r3
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800f0b0:	2304      	movs	r3, #4
 800f0b2:	4a40      	ldr	r2, [pc, #256]	; (800f1b4 <low_level_init+0x188>)
 800f0b4:	4940      	ldr	r1, [pc, #256]	; (800f1b8 <low_level_init+0x18c>)
 800f0b6:	483d      	ldr	r0, [pc, #244]	; (800f1ac <low_level_init+0x180>)
 800f0b8:	f7fb fa12 	bl	800a4e0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800f0bc:	2304      	movs	r3, #4
 800f0be:	4a3f      	ldr	r2, [pc, #252]	; (800f1bc <low_level_init+0x190>)
 800f0c0:	493f      	ldr	r1, [pc, #252]	; (800f1c0 <low_level_init+0x194>)
 800f0c2:	483a      	ldr	r0, [pc, #232]	; (800f1ac <low_level_init+0x180>)
 800f0c4:	f7fb fa75 	bl	800a5b2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2206      	movs	r2, #6
 800f0cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f0d0:	4b36      	ldr	r3, [pc, #216]	; (800f1ac <low_level_init+0x180>)
 800f0d2:	695b      	ldr	r3, [r3, #20]
 800f0d4:	781a      	ldrb	r2, [r3, #0]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800f0dc:	4b33      	ldr	r3, [pc, #204]	; (800f1ac <low_level_init+0x180>)
 800f0de:	695b      	ldr	r3, [r3, #20]
 800f0e0:	785a      	ldrb	r2, [r3, #1]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800f0e8:	4b30      	ldr	r3, [pc, #192]	; (800f1ac <low_level_init+0x180>)
 800f0ea:	695b      	ldr	r3, [r3, #20]
 800f0ec:	789a      	ldrb	r2, [r3, #2]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f0f4:	4b2d      	ldr	r3, [pc, #180]	; (800f1ac <low_level_init+0x180>)
 800f0f6:	695b      	ldr	r3, [r3, #20]
 800f0f8:	78da      	ldrb	r2, [r3, #3]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800f100:	4b2a      	ldr	r3, [pc, #168]	; (800f1ac <low_level_init+0x180>)
 800f102:	695b      	ldr	r3, [r3, #20]
 800f104:	791a      	ldrb	r2, [r3, #4]
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f10c:	4b27      	ldr	r3, [pc, #156]	; (800f1ac <low_level_init+0x180>)
 800f10e:	695b      	ldr	r3, [r3, #20]
 800f110:	795a      	ldrb	r2, [r3, #5]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f11e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f126:	f043 030a 	orr.w	r3, r3, #10
 800f12a:	b2da      	uxtb	r2, r3
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800f132:	2300      	movs	r3, #0
 800f134:	62bb      	str	r3, [r7, #40]	; 0x28
 800f136:	2300      	movs	r3, #0
 800f138:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800f13a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f13e:	2101      	movs	r1, #1
 800f140:	4618      	mov	r0, r3
 800f142:	f000 fbfb 	bl	800f93c <osSemaphoreCreate>
 800f146:	4602      	mov	r2, r0
 800f148:	4b1e      	ldr	r3, [pc, #120]	; (800f1c4 <low_level_init+0x198>)
 800f14a:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800f14c:	4b1e      	ldr	r3, [pc, #120]	; (800f1c8 <low_level_init+0x19c>)
 800f14e:	f107 040c 	add.w	r4, r7, #12
 800f152:	461d      	mov	r5, r3
 800f154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f158:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f15c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800f160:	f107 030c 	add.w	r3, r7, #12
 800f164:	6879      	ldr	r1, [r7, #4]
 800f166:	4618      	mov	r0, r3
 800f168:	f000 faeb 	bl	800f742 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800f16c:	480f      	ldr	r0, [pc, #60]	; (800f1ac <low_level_init+0x180>)
 800f16e:	f7fb fd48 	bl	800ac02 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */
    
/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800f172:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f176:	461a      	mov	r2, r3
 800f178:	211d      	movs	r1, #29
 800f17a:	480c      	ldr	r0, [pc, #48]	; (800f1ac <low_level_init+0x180>)
 800f17c:	f7fb fc73 	bl	800aa66 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800f180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f182:	f043 030b 	orr.w	r3, r3, #11
 800f186:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800f188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f18a:	461a      	mov	r2, r3
 800f18c:	211d      	movs	r1, #29
 800f18e:	4807      	ldr	r0, [pc, #28]	; (800f1ac <low_level_init+0x180>)
 800f190:	f7fb fcd1 	bl	800ab36 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800f194:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f198:	461a      	mov	r2, r3
 800f19a:	211d      	movs	r1, #29
 800f19c:	4803      	ldr	r0, [pc, #12]	; (800f1ac <low_level_init+0x180>)
 800f19e:	f7fb fc62 	bl	800aa66 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800f1a2:	bf00      	nop
 800f1a4:	3740      	adds	r7, #64	; 0x40
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bdb0      	pop	{r4, r5, r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	200065d8 	.word	0x200065d8
 800f1b0:	40028000 	.word	0x40028000
 800f1b4:	20006620 	.word	0x20006620
 800f1b8:	20004d08 	.word	0x20004d08
 800f1bc:	20004d88 	.word	0x20004d88
 800f1c0:	20006558 	.word	0x20006558
 800f1c4:	20000344 	.word	0x20000344
 800f1c8:	0801efb0 	.word	0x0801efb0

0800f1cc <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b08a      	sub	sp, #40	; 0x28
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800f1d6:	4b4b      	ldr	r3, [pc, #300]	; (800f304 <low_level_output+0x138>)
 800f1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1da:	689b      	ldr	r3, [r3, #8]
 800f1dc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800f1ee:	4b45      	ldr	r3, [pc, #276]	; (800f304 <low_level_output+0x138>)
 800f1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	623b      	str	r3, [r7, #32]
 800f1fc:	e05a      	b.n	800f2b4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800f1fe:	69bb      	ldr	r3, [r7, #24]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	2b00      	cmp	r3, #0
 800f204:	da03      	bge.n	800f20e <low_level_output+0x42>
      {
        errval = ERR_USE;
 800f206:	23f8      	movs	r3, #248	; 0xf8
 800f208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800f20c:	e05c      	b.n	800f2c8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800f20e:	6a3b      	ldr	r3, [r7, #32]
 800f210:	895b      	ldrh	r3, [r3, #10]
 800f212:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800f214:	2300      	movs	r3, #0
 800f216:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800f218:	e02f      	b.n	800f27a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800f21a:	69fa      	ldr	r2, [r7, #28]
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	18d0      	adds	r0, r2, r3
 800f220:	6a3b      	ldr	r3, [r7, #32]
 800f222:	685a      	ldr	r2, [r3, #4]
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	18d1      	adds	r1, r2, r3
 800f228:	693a      	ldr	r2, [r7, #16]
 800f22a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800f22e:	1a9b      	subs	r3, r3, r2
 800f230:	461a      	mov	r2, r3
 800f232:	f00e ff34 	bl	801e09e <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800f236:	69bb      	ldr	r3, [r7, #24]
 800f238:	68db      	ldr	r3, [r3, #12]
 800f23a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800f23c:	69bb      	ldr	r3, [r7, #24]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	da03      	bge.n	800f24c <low_level_output+0x80>
        {
          errval = ERR_USE;
 800f244:	23f8      	movs	r3, #248	; 0xf8
 800f246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800f24a:	e03d      	b.n	800f2c8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800f24c:	69bb      	ldr	r3, [r7, #24]
 800f24e:	689b      	ldr	r3, [r3, #8]
 800f250:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800f252:	693a      	ldr	r2, [r7, #16]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	4413      	add	r3, r2
 800f258:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800f25c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800f25e:	68ba      	ldr	r2, [r7, #8]
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	1ad3      	subs	r3, r2, r3
 800f264:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800f268:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800f26a:	697a      	ldr	r2, [r7, #20]
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	1ad3      	subs	r3, r2, r3
 800f270:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800f274:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800f276:	2300      	movs	r3, #0
 800f278:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800f27a:	68fa      	ldr	r2, [r7, #12]
 800f27c:	693b      	ldr	r3, [r7, #16]
 800f27e:	4413      	add	r3, r2
 800f280:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800f284:	4293      	cmp	r3, r2
 800f286:	d8c8      	bhi.n	800f21a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800f288:	69fa      	ldr	r2, [r7, #28]
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	18d0      	adds	r0, r2, r3
 800f28e:	6a3b      	ldr	r3, [r7, #32]
 800f290:	685a      	ldr	r2, [r3, #4]
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	4413      	add	r3, r2
 800f296:	68fa      	ldr	r2, [r7, #12]
 800f298:	4619      	mov	r1, r3
 800f29a:	f00e ff00 	bl	801e09e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800f29e:	693a      	ldr	r2, [r7, #16]
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	4413      	add	r3, r2
 800f2a4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800f2a6:	697a      	ldr	r2, [r7, #20]
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	4413      	add	r3, r2
 800f2ac:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800f2ae:	6a3b      	ldr	r3, [r7, #32]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	623b      	str	r3, [r7, #32]
 800f2b4:	6a3b      	ldr	r3, [r7, #32]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d1a1      	bne.n	800f1fe <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800f2ba:	6979      	ldr	r1, [r7, #20]
 800f2bc:	4811      	ldr	r0, [pc, #68]	; (800f304 <low_level_output+0x138>)
 800f2be:	f7fb f9e5 	bl	800a68c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800f2c8:	4b0e      	ldr	r3, [pc, #56]	; (800f304 <low_level_output+0x138>)
 800f2ca:	681a      	ldr	r2, [r3, #0]
 800f2cc:	f241 0314 	movw	r3, #4116	; 0x1014
 800f2d0:	4413      	add	r3, r2
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f003 0320 	and.w	r3, r3, #32
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d00d      	beq.n	800f2f8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800f2dc:	4b09      	ldr	r3, [pc, #36]	; (800f304 <low_level_output+0x138>)
 800f2de:	681a      	ldr	r2, [r3, #0]
 800f2e0:	f241 0314 	movw	r3, #4116	; 0x1014
 800f2e4:	4413      	add	r3, r2
 800f2e6:	2220      	movs	r2, #32
 800f2e8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800f2ea:	4b06      	ldr	r3, [pc, #24]	; (800f304 <low_level_output+0x138>)
 800f2ec:	681a      	ldr	r2, [r3, #0]
 800f2ee:	f241 0304 	movw	r3, #4100	; 0x1004
 800f2f2:	4413      	add	r3, r2
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800f2f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3728      	adds	r7, #40	; 0x28
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}
 800f304:	200065d8 	.word	0x200065d8

0800f308 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b08c      	sub	sp, #48	; 0x30
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800f310:	2300      	movs	r3, #0
 800f312:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800f314:	2300      	movs	r3, #0
 800f316:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800f318:	2300      	movs	r3, #0
 800f31a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800f31c:	2300      	movs	r3, #0
 800f31e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800f320:	2300      	movs	r3, #0
 800f322:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800f324:	2300      	movs	r3, #0
 800f326:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800f328:	2300      	movs	r3, #0
 800f32a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800f32c:	484f      	ldr	r0, [pc, #316]	; (800f46c <low_level_input+0x164>)
 800f32e:	f7fb fa97 	bl	800a860 <HAL_ETH_GetReceivedFrame_IT>
 800f332:	4603      	mov	r3, r0
 800f334:	2b00      	cmp	r3, #0
 800f336:	d001      	beq.n	800f33c <low_level_input+0x34>

    return NULL;
 800f338:	2300      	movs	r3, #0
 800f33a:	e092      	b.n	800f462 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800f33c:	4b4b      	ldr	r3, [pc, #300]	; (800f46c <low_level_input+0x164>)
 800f33e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f340:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800f342:	4b4a      	ldr	r3, [pc, #296]	; (800f46c <low_level_input+0x164>)
 800f344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f346:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800f348:	89fb      	ldrh	r3, [r7, #14]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d007      	beq.n	800f35e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800f34e:	89fb      	ldrh	r3, [r7, #14]
 800f350:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800f354:	4619      	mov	r1, r3
 800f356:	2000      	movs	r0, #0
 800f358:	f005 f98e 	bl	8014678 <pbuf_alloc>
 800f35c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800f35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f360:	2b00      	cmp	r3, #0
 800f362:	d04b      	beq.n	800f3fc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800f364:	4b41      	ldr	r3, [pc, #260]	; (800f46c <low_level_input+0x164>)
 800f366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f368:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800f36a:	2300      	movs	r3, #0
 800f36c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800f36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f370:	62bb      	str	r3, [r7, #40]	; 0x28
 800f372:	e040      	b.n	800f3f6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800f374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f376:	895b      	ldrh	r3, [r3, #10]
 800f378:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800f37a:	2300      	movs	r3, #0
 800f37c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800f37e:	e021      	b.n	800f3c4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800f380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f382:	685a      	ldr	r2, [r3, #4]
 800f384:	69bb      	ldr	r3, [r7, #24]
 800f386:	18d0      	adds	r0, r2, r3
 800f388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	18d1      	adds	r1, r2, r3
 800f38e:	69fa      	ldr	r2, [r7, #28]
 800f390:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800f394:	1a9b      	subs	r3, r3, r2
 800f396:	461a      	mov	r2, r3
 800f398:	f00e fe81 	bl	801e09e <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800f39c:	6a3b      	ldr	r3, [r7, #32]
 800f39e:	68db      	ldr	r3, [r3, #12]
 800f3a0:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800f3a2:	6a3b      	ldr	r3, [r7, #32]
 800f3a4:	689b      	ldr	r3, [r3, #8]
 800f3a6:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800f3a8:	69fa      	ldr	r2, [r7, #28]
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	4413      	add	r3, r2
 800f3ae:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800f3b2:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800f3b4:	69ba      	ldr	r2, [r7, #24]
 800f3b6:	69fb      	ldr	r3, [r7, #28]
 800f3b8:	1ad3      	subs	r3, r2, r3
 800f3ba:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800f3be:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800f3c4:	697a      	ldr	r2, [r7, #20]
 800f3c6:	69fb      	ldr	r3, [r7, #28]
 800f3c8:	4413      	add	r3, r2
 800f3ca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	d8d6      	bhi.n	800f380 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800f3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d4:	685a      	ldr	r2, [r3, #4]
 800f3d6:	69bb      	ldr	r3, [r7, #24]
 800f3d8:	18d0      	adds	r0, r2, r3
 800f3da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3dc:	69fb      	ldr	r3, [r7, #28]
 800f3de:	4413      	add	r3, r2
 800f3e0:	697a      	ldr	r2, [r7, #20]
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	f00e fe5b 	bl	801e09e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800f3e8:	69fa      	ldr	r2, [r7, #28]
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	4413      	add	r3, r2
 800f3ee:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800f3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d1bb      	bne.n	800f374 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800f3fc:	4b1b      	ldr	r3, [pc, #108]	; (800f46c <low_level_input+0x164>)
 800f3fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f400:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800f402:	2300      	movs	r3, #0
 800f404:	613b      	str	r3, [r7, #16]
 800f406:	e00b      	b.n	800f420 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800f408:	6a3b      	ldr	r3, [r7, #32]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800f410:	6a3b      	ldr	r3, [r7, #32]
 800f412:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800f414:	6a3b      	ldr	r3, [r7, #32]
 800f416:	68db      	ldr	r3, [r3, #12]
 800f418:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800f41a:	693b      	ldr	r3, [r7, #16]
 800f41c:	3301      	adds	r3, #1
 800f41e:	613b      	str	r3, [r7, #16]
 800f420:	4b12      	ldr	r3, [pc, #72]	; (800f46c <low_level_input+0x164>)
 800f422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f424:	693a      	ldr	r2, [r7, #16]
 800f426:	429a      	cmp	r2, r3
 800f428:	d3ee      	bcc.n	800f408 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800f42a:	4b10      	ldr	r3, [pc, #64]	; (800f46c <low_level_input+0x164>)
 800f42c:	2200      	movs	r2, #0
 800f42e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800f430:	4b0e      	ldr	r3, [pc, #56]	; (800f46c <low_level_input+0x164>)
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	f241 0314 	movw	r3, #4116	; 0x1014
 800f438:	4413      	add	r3, r2
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f440:	2b00      	cmp	r3, #0
 800f442:	d00d      	beq.n	800f460 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800f444:	4b09      	ldr	r3, [pc, #36]	; (800f46c <low_level_input+0x164>)
 800f446:	681a      	ldr	r2, [r3, #0]
 800f448:	f241 0314 	movw	r3, #4116	; 0x1014
 800f44c:	4413      	add	r3, r2
 800f44e:	2280      	movs	r2, #128	; 0x80
 800f450:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800f452:	4b06      	ldr	r3, [pc, #24]	; (800f46c <low_level_input+0x164>)
 800f454:	681a      	ldr	r2, [r3, #0]
 800f456:	f241 0308 	movw	r3, #4104	; 0x1008
 800f45a:	4413      	add	r3, r2
 800f45c:	2200      	movs	r2, #0
 800f45e:	601a      	str	r2, [r3, #0]
  }
  return p;
 800f460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f462:	4618      	mov	r0, r3
 800f464:	3730      	adds	r7, #48	; 0x30
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}
 800f46a:	bf00      	nop
 800f46c:	200065d8 	.word	0x200065d8

0800f470 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b084      	sub	sp, #16
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800f47c:	4b12      	ldr	r3, [pc, #72]	; (800f4c8 <ethernetif_input+0x58>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f484:	4618      	mov	r0, r3
 800f486:	f000 fa8d 	bl	800f9a4 <osSemaphoreWait>
 800f48a:	4603      	mov	r3, r0
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d1f5      	bne.n	800f47c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800f490:	480e      	ldr	r0, [pc, #56]	; (800f4cc <ethernetif_input+0x5c>)
 800f492:	f00e fd71 	bl	801df78 <sys_mutex_lock>
        p = low_level_input( netif );
 800f496:	68f8      	ldr	r0, [r7, #12]
 800f498:	f7ff ff36 	bl	800f308 <low_level_input>
 800f49c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d00a      	beq.n	800f4ba <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	691b      	ldr	r3, [r3, #16]
 800f4a8:	68f9      	ldr	r1, [r7, #12]
 800f4aa:	68b8      	ldr	r0, [r7, #8]
 800f4ac:	4798      	blx	r3
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d002      	beq.n	800f4ba <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800f4b4:	68b8      	ldr	r0, [r7, #8]
 800f4b6:	f005 fbbf 	bl	8014c38 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800f4ba:	4804      	ldr	r0, [pc, #16]	; (800f4cc <ethernetif_input+0x5c>)
 800f4bc:	f00e fd6b 	bl	801df96 <sys_mutex_unlock>
      } while(p!=NULL);
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d1e4      	bne.n	800f490 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800f4c6:	e7d9      	b.n	800f47c <ethernetif_input+0xc>
 800f4c8:	20000344 	.word	0x20000344
 800f4cc:	20007df0 	.word	0x20007df0

0800f4d0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d106      	bne.n	800f4ec <ethernetif_init+0x1c>
 800f4de:	4b0e      	ldr	r3, [pc, #56]	; (800f518 <ethernetif_init+0x48>)
 800f4e0:	f240 2233 	movw	r2, #563	; 0x233
 800f4e4:	490d      	ldr	r1, [pc, #52]	; (800f51c <ethernetif_init+0x4c>)
 800f4e6:	480e      	ldr	r0, [pc, #56]	; (800f520 <ethernetif_init+0x50>)
 800f4e8:	f00e fdec 	bl	801e0c4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2273      	movs	r2, #115	; 0x73
 800f4f0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2274      	movs	r2, #116	; 0x74
 800f4f8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	4a09      	ldr	r2, [pc, #36]	; (800f524 <ethernetif_init+0x54>)
 800f500:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	4a08      	ldr	r2, [pc, #32]	; (800f528 <ethernetif_init+0x58>)
 800f506:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f7ff fd8f 	bl	800f02c <low_level_init>

  return ERR_OK;
 800f50e:	2300      	movs	r3, #0
}
 800f510:	4618      	mov	r0, r3
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}
 800f518:	0801efcc 	.word	0x0801efcc
 800f51c:	0801efe8 	.word	0x0801efe8
 800f520:	0801eff8 	.word	0x0801eff8
 800f524:	0801c131 	.word	0x0801c131
 800f528:	0800f1cd 	.word	0x0800f1cd

0800f52c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f530:	f7fa f8e6 	bl	8009700 <HAL_GetTick>
 800f534:	4603      	mov	r3, r0
}
 800f536:	4618      	mov	r0, r3
 800f538:	bd80      	pop	{r7, pc}
	...

0800f53c <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b084      	sub	sp, #16
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800f544:	2300      	movs	r3, #0
 800f546:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800f54c:	f107 0308 	add.w	r3, r7, #8
 800f550:	461a      	mov	r2, r3
 800f552:	2101      	movs	r1, #1
 800f554:	4816      	ldr	r0, [pc, #88]	; (800f5b0 <ethernetif_set_link+0x74>)
 800f556:	f7fb fa86 	bl	800aa66 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	f003 0304 	and.w	r3, r3, #4
 800f560:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f56a:	f003 0304 	and.w	r3, r3, #4
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d108      	bne.n	800f584 <ethernetif_set_link+0x48>
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d005      	beq.n	800f584 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	4618      	mov	r0, r3
 800f57e:	f004 ff4d 	bl	801441c <netif_set_link_up>
 800f582:	e011      	b.n	800f5a8 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f58c:	089b      	lsrs	r3, r3, #2
 800f58e:	f003 0301 	and.w	r3, r3, #1
 800f592:	b2db      	uxtb	r3, r3
 800f594:	2b00      	cmp	r3, #0
 800f596:	d007      	beq.n	800f5a8 <ethernetif_set_link+0x6c>
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d104      	bne.n	800f5a8 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f004 ff6e 	bl	8014484 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800f5a8:	20c8      	movs	r0, #200	; 0xc8
 800f5aa:	f000 f916 	bl	800f7da <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800f5ae:	e7cd      	b.n	800f54c <ethernetif_set_link+0x10>
 800f5b0:	200065d8 	.word	0x200065d8

0800f5b4 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b084      	sub	sp, #16
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f5ca:	089b      	lsrs	r3, r3, #2
 800f5cc:	f003 0301 	and.w	r3, r3, #1
 800f5d0:	b2db      	uxtb	r3, r3
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d05d      	beq.n	800f692 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800f5d6:	4b34      	ldr	r3, [pc, #208]	; (800f6a8 <ethernetif_update_config+0xf4>)
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d03f      	beq.n	800f65e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800f5de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f5e2:	2100      	movs	r1, #0
 800f5e4:	4830      	ldr	r0, [pc, #192]	; (800f6a8 <ethernetif_update_config+0xf4>)
 800f5e6:	f7fb faa6 	bl	800ab36 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800f5ea:	f7fa f889 	bl	8009700 <HAL_GetTick>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800f5f2:	f107 0308 	add.w	r3, r7, #8
 800f5f6:	461a      	mov	r2, r3
 800f5f8:	2101      	movs	r1, #1
 800f5fa:	482b      	ldr	r0, [pc, #172]	; (800f6a8 <ethernetif_update_config+0xf4>)
 800f5fc:	f7fb fa33 	bl	800aa66 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800f600:	f7fa f87e 	bl	8009700 <HAL_GetTick>
 800f604:	4602      	mov	r2, r0
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	1ad3      	subs	r3, r2, r3
 800f60a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f60e:	d828      	bhi.n	800f662 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	f003 0320 	and.w	r3, r3, #32
 800f616:	2b00      	cmp	r3, #0
 800f618:	d0eb      	beq.n	800f5f2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800f61a:	f107 0308 	add.w	r3, r7, #8
 800f61e:	461a      	mov	r2, r3
 800f620:	211f      	movs	r1, #31
 800f622:	4821      	ldr	r0, [pc, #132]	; (800f6a8 <ethernetif_update_config+0xf4>)
 800f624:	f7fb fa1f 	bl	800aa66 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	f003 0310 	and.w	r3, r3, #16
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d004      	beq.n	800f63c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800f632:	4b1d      	ldr	r3, [pc, #116]	; (800f6a8 <ethernetif_update_config+0xf4>)
 800f634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f638:	60da      	str	r2, [r3, #12]
 800f63a:	e002      	b.n	800f642 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800f63c:	4b1a      	ldr	r3, [pc, #104]	; (800f6a8 <ethernetif_update_config+0xf4>)
 800f63e:	2200      	movs	r2, #0
 800f640:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	f003 0304 	and.w	r3, r3, #4
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d003      	beq.n	800f654 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800f64c:	4b16      	ldr	r3, [pc, #88]	; (800f6a8 <ethernetif_update_config+0xf4>)
 800f64e:	2200      	movs	r2, #0
 800f650:	609a      	str	r2, [r3, #8]
 800f652:	e016      	b.n	800f682 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800f654:	4b14      	ldr	r3, [pc, #80]	; (800f6a8 <ethernetif_update_config+0xf4>)
 800f656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f65a:	609a      	str	r2, [r3, #8]
 800f65c:	e011      	b.n	800f682 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800f65e:	bf00      	nop
 800f660:	e000      	b.n	800f664 <ethernetif_update_config+0xb0>
          goto error;
 800f662:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800f664:	4b10      	ldr	r3, [pc, #64]	; (800f6a8 <ethernetif_update_config+0xf4>)
 800f666:	68db      	ldr	r3, [r3, #12]
 800f668:	08db      	lsrs	r3, r3, #3
 800f66a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800f66c:	4b0e      	ldr	r3, [pc, #56]	; (800f6a8 <ethernetif_update_config+0xf4>)
 800f66e:	689b      	ldr	r3, [r3, #8]
 800f670:	085b      	lsrs	r3, r3, #1
 800f672:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800f674:	4313      	orrs	r3, r2
 800f676:	b29b      	uxth	r3, r3
 800f678:	461a      	mov	r2, r3
 800f67a:	2100      	movs	r1, #0
 800f67c:	480a      	ldr	r0, [pc, #40]	; (800f6a8 <ethernetif_update_config+0xf4>)
 800f67e:	f7fb fa5a 	bl	800ab36 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800f682:	2100      	movs	r1, #0
 800f684:	4808      	ldr	r0, [pc, #32]	; (800f6a8 <ethernetif_update_config+0xf4>)
 800f686:	f7fb fb1b 	bl	800acc0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800f68a:	4807      	ldr	r0, [pc, #28]	; (800f6a8 <ethernetif_update_config+0xf4>)
 800f68c:	f7fb fab9 	bl	800ac02 <HAL_ETH_Start>
 800f690:	e002      	b.n	800f698 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800f692:	4805      	ldr	r0, [pc, #20]	; (800f6a8 <ethernetif_update_config+0xf4>)
 800f694:	f7fb fae4 	bl	800ac60 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f000 f807 	bl	800f6ac <ethernetif_notify_conn_changed>
}
 800f69e:	bf00      	nop
 800f6a0:	3710      	adds	r7, #16
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	bf00      	nop
 800f6a8:	200065d8 	.word	0x200065d8

0800f6ac <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file 
            when the callback is needed,
  */

}
 800f6b4:	bf00      	nop
 800f6b6:	370c      	adds	r7, #12
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr

0800f6c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b085      	sub	sp, #20
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f6ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f6d2:	2b84      	cmp	r3, #132	; 0x84
 800f6d4:	d005      	beq.n	800f6e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f6d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	4413      	add	r3, r2
 800f6de:	3303      	adds	r3, #3
 800f6e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3714      	adds	r7, #20
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr

0800f6f0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b083      	sub	sp, #12
 800f6f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6f6:	f3ef 8305 	mrs	r3, IPSR
 800f6fa:	607b      	str	r3, [r7, #4]
  return(result);
 800f6fc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	bf14      	ite	ne
 800f702:	2301      	movne	r3, #1
 800f704:	2300      	moveq	r3, #0
 800f706:	b2db      	uxtb	r3, r3
}
 800f708:	4618      	mov	r0, r3
 800f70a:	370c      	adds	r7, #12
 800f70c:	46bd      	mov	sp, r7
 800f70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f712:	4770      	bx	lr

0800f714 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f718:	f001 fc88 	bl	801102c <vTaskStartScheduler>
  
  return osOK;
 800f71c:	2300      	movs	r3, #0
}
 800f71e:	4618      	mov	r0, r3
 800f720:	bd80      	pop	{r7, pc}

0800f722 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800f722:	b580      	push	{r7, lr}
 800f724:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800f726:	f7ff ffe3 	bl	800f6f0 <inHandlerMode>
 800f72a:	4603      	mov	r3, r0
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d003      	beq.n	800f738 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800f730:	f001 fd9a 	bl	8011268 <xTaskGetTickCountFromISR>
 800f734:	4603      	mov	r3, r0
 800f736:	e002      	b.n	800f73e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800f738:	f001 fd86 	bl	8011248 <xTaskGetTickCount>
 800f73c:	4603      	mov	r3, r0
  }
}
 800f73e:	4618      	mov	r0, r3
 800f740:	bd80      	pop	{r7, pc}

0800f742 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f742:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f744:	b089      	sub	sp, #36	; 0x24
 800f746:	af04      	add	r7, sp, #16
 800f748:	6078      	str	r0, [r7, #4]
 800f74a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	695b      	ldr	r3, [r3, #20]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d020      	beq.n	800f796 <osThreadCreate+0x54>
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	699b      	ldr	r3, [r3, #24]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d01c      	beq.n	800f796 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	685c      	ldr	r4, [r3, #4]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681d      	ldr	r5, [r3, #0]
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	691e      	ldr	r6, [r3, #16]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f76e:	4618      	mov	r0, r3
 800f770:	f7ff ffa6 	bl	800f6c0 <makeFreeRtosPriority>
 800f774:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	695b      	ldr	r3, [r3, #20]
 800f77a:	687a      	ldr	r2, [r7, #4]
 800f77c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f77e:	9202      	str	r2, [sp, #8]
 800f780:	9301      	str	r3, [sp, #4]
 800f782:	9100      	str	r1, [sp, #0]
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	4632      	mov	r2, r6
 800f788:	4629      	mov	r1, r5
 800f78a:	4620      	mov	r0, r4
 800f78c:	f001 fa81 	bl	8010c92 <xTaskCreateStatic>
 800f790:	4603      	mov	r3, r0
 800f792:	60fb      	str	r3, [r7, #12]
 800f794:	e01c      	b.n	800f7d0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	685c      	ldr	r4, [r3, #4]
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f7a2:	b29e      	uxth	r6, r3
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7ff ff88 	bl	800f6c0 <makeFreeRtosPriority>
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	f107 030c 	add.w	r3, r7, #12
 800f7b6:	9301      	str	r3, [sp, #4]
 800f7b8:	9200      	str	r2, [sp, #0]
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	4632      	mov	r2, r6
 800f7be:	4629      	mov	r1, r5
 800f7c0:	4620      	mov	r0, r4
 800f7c2:	f001 fac6 	bl	8010d52 <xTaskCreate>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	2b01      	cmp	r3, #1
 800f7ca:	d001      	beq.n	800f7d0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	e000      	b.n	800f7d2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3714      	adds	r7, #20
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f7da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f7da:	b580      	push	{r7, lr}
 800f7dc:	b084      	sub	sp, #16
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d001      	beq.n	800f7f0 <osDelay+0x16>
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	e000      	b.n	800f7f2 <osDelay+0x18>
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f001 fbe4 	bl	8010fc0 <vTaskDelay>
  
  return osOK;
 800f7f8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3710      	adds	r7, #16
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}

0800f802 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800f802:	b580      	push	{r7, lr}
 800f804:	b082      	sub	sp, #8
 800f806:	af00      	add	r7, sp, #0
 800f808:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	685b      	ldr	r3, [r3, #4]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d007      	beq.n	800f822 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	4619      	mov	r1, r3
 800f818:	2001      	movs	r0, #1
 800f81a:	f000 fc52 	bl	80100c2 <xQueueCreateMutexStatic>
 800f81e:	4603      	mov	r3, r0
 800f820:	e003      	b.n	800f82a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800f822:	2001      	movs	r0, #1
 800f824:	f000 fc35 	bl	8010092 <xQueueCreateMutex>
 800f828:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3708      	adds	r7, #8
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
	...

0800f834 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b084      	sub	sp, #16
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f83e:	2300      	movs	r3, #0
 800f840:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d101      	bne.n	800f84c <osMutexWait+0x18>
    return osErrorParameter;
 800f848:	2380      	movs	r3, #128	; 0x80
 800f84a:	e03a      	b.n	800f8c2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800f84c:	2300      	movs	r3, #0
 800f84e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f856:	d103      	bne.n	800f860 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800f858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f85c:	60fb      	str	r3, [r7, #12]
 800f85e:	e009      	b.n	800f874 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d006      	beq.n	800f874 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d101      	bne.n	800f874 <osMutexWait+0x40>
      ticks = 1;
 800f870:	2301      	movs	r3, #1
 800f872:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f874:	f7ff ff3c 	bl	800f6f0 <inHandlerMode>
 800f878:	4603      	mov	r3, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d017      	beq.n	800f8ae <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f87e:	f107 0308 	add.w	r3, r7, #8
 800f882:	461a      	mov	r2, r3
 800f884:	2100      	movs	r1, #0
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f001 f858 	bl	801093c <xQueueReceiveFromISR>
 800f88c:	4603      	mov	r3, r0
 800f88e:	2b01      	cmp	r3, #1
 800f890:	d001      	beq.n	800f896 <osMutexWait+0x62>
      return osErrorOS;
 800f892:	23ff      	movs	r3, #255	; 0xff
 800f894:	e015      	b.n	800f8c2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d011      	beq.n	800f8c0 <osMutexWait+0x8c>
 800f89c:	4b0b      	ldr	r3, [pc, #44]	; (800f8cc <osMutexWait+0x98>)
 800f89e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8a2:	601a      	str	r2, [r3, #0]
 800f8a4:	f3bf 8f4f 	dsb	sy
 800f8a8:	f3bf 8f6f 	isb	sy
 800f8ac:	e008      	b.n	800f8c0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800f8ae:	68f9      	ldr	r1, [r7, #12]
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f000 ff33 	bl	801071c <xQueueSemaphoreTake>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	d001      	beq.n	800f8c0 <osMutexWait+0x8c>
    return osErrorOS;
 800f8bc:	23ff      	movs	r3, #255	; 0xff
 800f8be:	e000      	b.n	800f8c2 <osMutexWait+0x8e>
  }
  
  return osOK;
 800f8c0:	2300      	movs	r3, #0
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3710      	adds	r7, #16
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	e000ed04 	.word	0xe000ed04

0800f8d0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b084      	sub	sp, #16
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f8dc:	2300      	movs	r3, #0
 800f8de:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800f8e0:	f7ff ff06 	bl	800f6f0 <inHandlerMode>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d016      	beq.n	800f918 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f8ea:	f107 0308 	add.w	r3, r7, #8
 800f8ee:	4619      	mov	r1, r3
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f000 fd9f 	bl	8010434 <xQueueGiveFromISR>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	2b01      	cmp	r3, #1
 800f8fa:	d001      	beq.n	800f900 <osMutexRelease+0x30>
      return osErrorOS;
 800f8fc:	23ff      	movs	r3, #255	; 0xff
 800f8fe:	e017      	b.n	800f930 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d013      	beq.n	800f92e <osMutexRelease+0x5e>
 800f906:	4b0c      	ldr	r3, [pc, #48]	; (800f938 <osMutexRelease+0x68>)
 800f908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f90c:	601a      	str	r2, [r3, #0]
 800f90e:	f3bf 8f4f 	dsb	sy
 800f912:	f3bf 8f6f 	isb	sy
 800f916:	e00a      	b.n	800f92e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800f918:	2300      	movs	r3, #0
 800f91a:	2200      	movs	r2, #0
 800f91c:	2100      	movs	r1, #0
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 fbea 	bl	80100f8 <xQueueGenericSend>
 800f924:	4603      	mov	r3, r0
 800f926:	2b01      	cmp	r3, #1
 800f928:	d001      	beq.n	800f92e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800f92a:	23ff      	movs	r3, #255	; 0xff
 800f92c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800f92e:	68fb      	ldr	r3, [r7, #12]
}
 800f930:	4618      	mov	r0, r3
 800f932:	3710      	adds	r7, #16
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}
 800f938:	e000ed04 	.word	0xe000ed04

0800f93c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b086      	sub	sp, #24
 800f940:	af02      	add	r7, sp, #8
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d010      	beq.n	800f970 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	2b01      	cmp	r3, #1
 800f952:	d10b      	bne.n	800f96c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	685a      	ldr	r2, [r3, #4]
 800f958:	2303      	movs	r3, #3
 800f95a:	9300      	str	r3, [sp, #0]
 800f95c:	4613      	mov	r3, r2
 800f95e:	2200      	movs	r2, #0
 800f960:	2100      	movs	r1, #0
 800f962:	2001      	movs	r0, #1
 800f964:	f000 fa9e 	bl	800fea4 <xQueueGenericCreateStatic>
 800f968:	4603      	mov	r3, r0
 800f96a:	e016      	b.n	800f99a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800f96c:	2300      	movs	r3, #0
 800f96e:	e014      	b.n	800f99a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	2b01      	cmp	r3, #1
 800f974:	d110      	bne.n	800f998 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800f976:	2203      	movs	r2, #3
 800f978:	2100      	movs	r1, #0
 800f97a:	2001      	movs	r0, #1
 800f97c:	f000 fb0f 	bl	800ff9e <xQueueGenericCreate>
 800f980:	60f8      	str	r0, [r7, #12]
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d005      	beq.n	800f994 <osSemaphoreCreate+0x58>
 800f988:	2300      	movs	r3, #0
 800f98a:	2200      	movs	r2, #0
 800f98c:	2100      	movs	r1, #0
 800f98e:	68f8      	ldr	r0, [r7, #12]
 800f990:	f000 fbb2 	bl	80100f8 <xQueueGenericSend>
      return sema;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	e000      	b.n	800f99a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800f998:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3710      	adds	r7, #16
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
	...

0800f9a4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d101      	bne.n	800f9bc <osSemaphoreWait+0x18>
    return osErrorParameter;
 800f9b8:	2380      	movs	r3, #128	; 0x80
 800f9ba:	e03a      	b.n	800fa32 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9c6:	d103      	bne.n	800f9d0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800f9c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f9cc:	60fb      	str	r3, [r7, #12]
 800f9ce:	e009      	b.n	800f9e4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d006      	beq.n	800f9e4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d101      	bne.n	800f9e4 <osSemaphoreWait+0x40>
      ticks = 1;
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f9e4:	f7ff fe84 	bl	800f6f0 <inHandlerMode>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d017      	beq.n	800fa1e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f9ee:	f107 0308 	add.w	r3, r7, #8
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	2100      	movs	r1, #0
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f000 ffa0 	bl	801093c <xQueueReceiveFromISR>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	2b01      	cmp	r3, #1
 800fa00:	d001      	beq.n	800fa06 <osSemaphoreWait+0x62>
      return osErrorOS;
 800fa02:	23ff      	movs	r3, #255	; 0xff
 800fa04:	e015      	b.n	800fa32 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d011      	beq.n	800fa30 <osSemaphoreWait+0x8c>
 800fa0c:	4b0b      	ldr	r3, [pc, #44]	; (800fa3c <osSemaphoreWait+0x98>)
 800fa0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa12:	601a      	str	r2, [r3, #0]
 800fa14:	f3bf 8f4f 	dsb	sy
 800fa18:	f3bf 8f6f 	isb	sy
 800fa1c:	e008      	b.n	800fa30 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800fa1e:	68f9      	ldr	r1, [r7, #12]
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f000 fe7b 	bl	801071c <xQueueSemaphoreTake>
 800fa26:	4603      	mov	r3, r0
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d001      	beq.n	800fa30 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800fa2c:	23ff      	movs	r3, #255	; 0xff
 800fa2e:	e000      	b.n	800fa32 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800fa30:	2300      	movs	r3, #0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3710      	adds	r7, #16
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
 800fa3a:	bf00      	nop
 800fa3c:	e000ed04 	.word	0xe000ed04

0800fa40 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b084      	sub	sp, #16
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800fa50:	f7ff fe4e 	bl	800f6f0 <inHandlerMode>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d016      	beq.n	800fa88 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fa5a:	f107 0308 	add.w	r3, r7, #8
 800fa5e:	4619      	mov	r1, r3
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f000 fce7 	bl	8010434 <xQueueGiveFromISR>
 800fa66:	4603      	mov	r3, r0
 800fa68:	2b01      	cmp	r3, #1
 800fa6a:	d001      	beq.n	800fa70 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800fa6c:	23ff      	movs	r3, #255	; 0xff
 800fa6e:	e017      	b.n	800faa0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d013      	beq.n	800fa9e <osSemaphoreRelease+0x5e>
 800fa76:	4b0c      	ldr	r3, [pc, #48]	; (800faa8 <osSemaphoreRelease+0x68>)
 800fa78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa7c:	601a      	str	r2, [r3, #0]
 800fa7e:	f3bf 8f4f 	dsb	sy
 800fa82:	f3bf 8f6f 	isb	sy
 800fa86:	e00a      	b.n	800fa9e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800fa88:	2300      	movs	r3, #0
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	2100      	movs	r1, #0
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f000 fb32 	bl	80100f8 <xQueueGenericSend>
 800fa94:	4603      	mov	r3, r0
 800fa96:	2b01      	cmp	r3, #1
 800fa98:	d001      	beq.n	800fa9e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800fa9a:	23ff      	movs	r3, #255	; 0xff
 800fa9c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3710      	adds	r7, #16
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}
 800faa8:	e000ed04 	.word	0xe000ed04

0800faac <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800faac:	b590      	push	{r4, r7, lr}
 800faae:	b085      	sub	sp, #20
 800fab0:	af02      	add	r7, sp, #8
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	689b      	ldr	r3, [r3, #8]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d012      	beq.n	800fae4 <osMessageCreate+0x38>
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	68db      	ldr	r3, [r3, #12]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d00e      	beq.n	800fae4 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6818      	ldr	r0, [r3, #0]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6859      	ldr	r1, [r3, #4]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	689a      	ldr	r2, [r3, #8]
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	68dc      	ldr	r4, [r3, #12]
 800fad6:	2300      	movs	r3, #0
 800fad8:	9300      	str	r3, [sp, #0]
 800fada:	4623      	mov	r3, r4
 800fadc:	f000 f9e2 	bl	800fea4 <xQueueGenericCreateStatic>
 800fae0:	4603      	mov	r3, r0
 800fae2:	e008      	b.n	800faf6 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6818      	ldr	r0, [r3, #0]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	685b      	ldr	r3, [r3, #4]
 800faec:	2200      	movs	r2, #0
 800faee:	4619      	mov	r1, r3
 800faf0:	f000 fa55 	bl	800ff9e <xQueueGenericCreate>
 800faf4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	370c      	adds	r7, #12
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd90      	pop	{r4, r7, pc}
	...

0800fb00 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b086      	sub	sp, #24
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	60f8      	str	r0, [r7, #12]
 800fb08:	60b9      	str	r1, [r7, #8]
 800fb0a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d101      	bne.n	800fb1e <osMessagePut+0x1e>
    ticks = 1;
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800fb1e:	f7ff fde7 	bl	800f6f0 <inHandlerMode>
 800fb22:	4603      	mov	r3, r0
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d018      	beq.n	800fb5a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800fb28:	f107 0210 	add.w	r2, r7, #16
 800fb2c:	f107 0108 	add.w	r1, r7, #8
 800fb30:	2300      	movs	r3, #0
 800fb32:	68f8      	ldr	r0, [r7, #12]
 800fb34:	f000 fbe2 	bl	80102fc <xQueueGenericSendFromISR>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b01      	cmp	r3, #1
 800fb3c:	d001      	beq.n	800fb42 <osMessagePut+0x42>
      return osErrorOS;
 800fb3e:	23ff      	movs	r3, #255	; 0xff
 800fb40:	e018      	b.n	800fb74 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fb42:	693b      	ldr	r3, [r7, #16]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d014      	beq.n	800fb72 <osMessagePut+0x72>
 800fb48:	4b0c      	ldr	r3, [pc, #48]	; (800fb7c <osMessagePut+0x7c>)
 800fb4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb4e:	601a      	str	r2, [r3, #0]
 800fb50:	f3bf 8f4f 	dsb	sy
 800fb54:	f3bf 8f6f 	isb	sy
 800fb58:	e00b      	b.n	800fb72 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800fb5a:	f107 0108 	add.w	r1, r7, #8
 800fb5e:	2300      	movs	r3, #0
 800fb60:	697a      	ldr	r2, [r7, #20]
 800fb62:	68f8      	ldr	r0, [r7, #12]
 800fb64:	f000 fac8 	bl	80100f8 <xQueueGenericSend>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	2b01      	cmp	r3, #1
 800fb6c:	d001      	beq.n	800fb72 <osMessagePut+0x72>
      return osErrorOS;
 800fb6e:	23ff      	movs	r3, #255	; 0xff
 800fb70:	e000      	b.n	800fb74 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800fb72:	2300      	movs	r3, #0
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3718      	adds	r7, #24
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}
 800fb7c:	e000ed04 	.word	0xe000ed04

0800fb80 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800fb80:	b590      	push	{r4, r7, lr}
 800fb82:	b08b      	sub	sp, #44	; 0x2c
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	60f8      	str	r0, [r7, #12]
 800fb88:	60b9      	str	r1, [r7, #8]
 800fb8a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800fb90:	2300      	movs	r3, #0
 800fb92:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d10a      	bne.n	800fbb0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800fb9a:	2380      	movs	r3, #128	; 0x80
 800fb9c:	617b      	str	r3, [r7, #20]
    return event;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	461c      	mov	r4, r3
 800fba2:	f107 0314 	add.w	r3, r7, #20
 800fba6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fbaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fbae:	e054      	b.n	800fc5a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fbbe:	d103      	bne.n	800fbc8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800fbc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fbc4:	627b      	str	r3, [r7, #36]	; 0x24
 800fbc6:	e009      	b.n	800fbdc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d006      	beq.n	800fbdc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800fbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d101      	bne.n	800fbdc <osMessageGet+0x5c>
      ticks = 1;
 800fbd8:	2301      	movs	r3, #1
 800fbda:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800fbdc:	f7ff fd88 	bl	800f6f0 <inHandlerMode>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d01c      	beq.n	800fc20 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800fbe6:	f107 0220 	add.w	r2, r7, #32
 800fbea:	f107 0314 	add.w	r3, r7, #20
 800fbee:	3304      	adds	r3, #4
 800fbf0:	4619      	mov	r1, r3
 800fbf2:	68b8      	ldr	r0, [r7, #8]
 800fbf4:	f000 fea2 	bl	801093c <xQueueReceiveFromISR>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	2b01      	cmp	r3, #1
 800fbfc:	d102      	bne.n	800fc04 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800fbfe:	2310      	movs	r3, #16
 800fc00:	617b      	str	r3, [r7, #20]
 800fc02:	e001      	b.n	800fc08 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800fc04:	2300      	movs	r3, #0
 800fc06:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fc08:	6a3b      	ldr	r3, [r7, #32]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d01d      	beq.n	800fc4a <osMessageGet+0xca>
 800fc0e:	4b15      	ldr	r3, [pc, #84]	; (800fc64 <osMessageGet+0xe4>)
 800fc10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc14:	601a      	str	r2, [r3, #0]
 800fc16:	f3bf 8f4f 	dsb	sy
 800fc1a:	f3bf 8f6f 	isb	sy
 800fc1e:	e014      	b.n	800fc4a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800fc20:	f107 0314 	add.w	r3, r7, #20
 800fc24:	3304      	adds	r3, #4
 800fc26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc28:	4619      	mov	r1, r3
 800fc2a:	68b8      	ldr	r0, [r7, #8]
 800fc2c:	f000 fc94 	bl	8010558 <xQueueReceive>
 800fc30:	4603      	mov	r3, r0
 800fc32:	2b01      	cmp	r3, #1
 800fc34:	d102      	bne.n	800fc3c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800fc36:	2310      	movs	r3, #16
 800fc38:	617b      	str	r3, [r7, #20]
 800fc3a:	e006      	b.n	800fc4a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800fc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d101      	bne.n	800fc46 <osMessageGet+0xc6>
 800fc42:	2300      	movs	r3, #0
 800fc44:	e000      	b.n	800fc48 <osMessageGet+0xc8>
 800fc46:	2340      	movs	r3, #64	; 0x40
 800fc48:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	461c      	mov	r4, r3
 800fc4e:	f107 0314 	add.w	r3, r7, #20
 800fc52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fc56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fc5a:	68f8      	ldr	r0, [r7, #12]
 800fc5c:	372c      	adds	r7, #44	; 0x2c
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd90      	pop	{r4, r7, pc}
 800fc62:	bf00      	nop
 800fc64:	e000ed04 	.word	0xe000ed04

0800fc68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b083      	sub	sp, #12
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f103 0208 	add.w	r2, r3, #8
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f103 0208 	add.w	r2, r3, #8
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f103 0208 	add.w	r2, r3, #8
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2200      	movs	r2, #0
 800fc9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fc9c:	bf00      	nop
 800fc9e:	370c      	adds	r7, #12
 800fca0:	46bd      	mov	sp, r7
 800fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca6:	4770      	bx	lr

0800fca8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fca8:	b480      	push	{r7}
 800fcaa:	b083      	sub	sp, #12
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fcb6:	bf00      	nop
 800fcb8:	370c      	adds	r7, #12
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr

0800fcc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fcc2:	b480      	push	{r7}
 800fcc4:	b085      	sub	sp, #20
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	6078      	str	r0, [r7, #4]
 800fcca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	685b      	ldr	r3, [r3, #4]
 800fcd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	68fa      	ldr	r2, [r7, #12]
 800fcd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	689a      	ldr	r2, [r3, #8]
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	689b      	ldr	r3, [r3, #8]
 800fce4:	683a      	ldr	r2, [r7, #0]
 800fce6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	683a      	ldr	r2, [r7, #0]
 800fcec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	687a      	ldr	r2, [r7, #4]
 800fcf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	1c5a      	adds	r2, r3, #1
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	601a      	str	r2, [r3, #0]
}
 800fcfe:	bf00      	nop
 800fd00:	3714      	adds	r7, #20
 800fd02:	46bd      	mov	sp, r7
 800fd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd08:	4770      	bx	lr

0800fd0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fd0a:	b480      	push	{r7}
 800fd0c:	b085      	sub	sp, #20
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	6078      	str	r0, [r7, #4]
 800fd12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd20:	d103      	bne.n	800fd2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	691b      	ldr	r3, [r3, #16]
 800fd26:	60fb      	str	r3, [r7, #12]
 800fd28:	e00c      	b.n	800fd44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	3308      	adds	r3, #8
 800fd2e:	60fb      	str	r3, [r7, #12]
 800fd30:	e002      	b.n	800fd38 <vListInsert+0x2e>
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	685b      	ldr	r3, [r3, #4]
 800fd36:	60fb      	str	r3, [r7, #12]
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	68ba      	ldr	r2, [r7, #8]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d2f6      	bcs.n	800fd32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	685a      	ldr	r2, [r3, #4]
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	683a      	ldr	r2, [r7, #0]
 800fd52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	68fa      	ldr	r2, [r7, #12]
 800fd58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	683a      	ldr	r2, [r7, #0]
 800fd5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	687a      	ldr	r2, [r7, #4]
 800fd64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	1c5a      	adds	r2, r3, #1
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	601a      	str	r2, [r3, #0]
}
 800fd70:	bf00      	nop
 800fd72:	3714      	adds	r7, #20
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr

0800fd7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b085      	sub	sp, #20
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	691b      	ldr	r3, [r3, #16]
 800fd88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	685b      	ldr	r3, [r3, #4]
 800fd8e:	687a      	ldr	r2, [r7, #4]
 800fd90:	6892      	ldr	r2, [r2, #8]
 800fd92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	689b      	ldr	r3, [r3, #8]
 800fd98:	687a      	ldr	r2, [r7, #4]
 800fd9a:	6852      	ldr	r2, [r2, #4]
 800fd9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	685b      	ldr	r3, [r3, #4]
 800fda2:	687a      	ldr	r2, [r7, #4]
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d103      	bne.n	800fdb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	689a      	ldr	r2, [r3, #8]
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	1e5a      	subs	r2, r3, #1
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	681b      	ldr	r3, [r3, #0]
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3714      	adds	r7, #20
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr

0800fdd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b084      	sub	sp, #16
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
 800fdd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d10b      	bne.n	800fdfc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde8:	b672      	cpsid	i
 800fdea:	f383 8811 	msr	BASEPRI, r3
 800fdee:	f3bf 8f6f 	isb	sy
 800fdf2:	f3bf 8f4f 	dsb	sy
 800fdf6:	b662      	cpsie	i
 800fdf8:	60bb      	str	r3, [r7, #8]
 800fdfa:	e7fe      	b.n	800fdfa <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800fdfc:	f002 f884 	bl	8011f08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	681a      	ldr	r2, [r3, #0]
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe08:	68f9      	ldr	r1, [r7, #12]
 800fe0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fe0c:	fb01 f303 	mul.w	r3, r1, r3
 800fe10:	441a      	add	r2, r3
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681a      	ldr	r2, [r3, #0]
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	681a      	ldr	r2, [r3, #0]
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe2c:	3b01      	subs	r3, #1
 800fe2e:	68f9      	ldr	r1, [r7, #12]
 800fe30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fe32:	fb01 f303 	mul.w	r3, r1, r3
 800fe36:	441a      	add	r2, r3
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	22ff      	movs	r2, #255	; 0xff
 800fe40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	22ff      	movs	r2, #255	; 0xff
 800fe48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d114      	bne.n	800fe7c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	691b      	ldr	r3, [r3, #16]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d01a      	beq.n	800fe90 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	3310      	adds	r3, #16
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f001 fb50 	bl	8011504 <xTaskRemoveFromEventList>
 800fe64:	4603      	mov	r3, r0
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d012      	beq.n	800fe90 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fe6a:	4b0d      	ldr	r3, [pc, #52]	; (800fea0 <xQueueGenericReset+0xd0>)
 800fe6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe70:	601a      	str	r2, [r3, #0]
 800fe72:	f3bf 8f4f 	dsb	sy
 800fe76:	f3bf 8f6f 	isb	sy
 800fe7a:	e009      	b.n	800fe90 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	3310      	adds	r3, #16
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7ff fef1 	bl	800fc68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	3324      	adds	r3, #36	; 0x24
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f7ff feec 	bl	800fc68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fe90:	f002 f86c 	bl	8011f6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fe94:	2301      	movs	r3, #1
}
 800fe96:	4618      	mov	r0, r3
 800fe98:	3710      	adds	r7, #16
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}
 800fe9e:	bf00      	nop
 800fea0:	e000ed04 	.word	0xe000ed04

0800fea4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b08e      	sub	sp, #56	; 0x38
 800fea8:	af02      	add	r7, sp, #8
 800feaa:	60f8      	str	r0, [r7, #12]
 800feac:	60b9      	str	r1, [r7, #8]
 800feae:	607a      	str	r2, [r7, #4]
 800feb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d10b      	bne.n	800fed0 <xQueueGenericCreateStatic+0x2c>
 800feb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800febc:	b672      	cpsid	i
 800febe:	f383 8811 	msr	BASEPRI, r3
 800fec2:	f3bf 8f6f 	isb	sy
 800fec6:	f3bf 8f4f 	dsb	sy
 800feca:	b662      	cpsie	i
 800fecc:	62bb      	str	r3, [r7, #40]	; 0x28
 800fece:	e7fe      	b.n	800fece <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d10b      	bne.n	800feee <xQueueGenericCreateStatic+0x4a>
 800fed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feda:	b672      	cpsid	i
 800fedc:	f383 8811 	msr	BASEPRI, r3
 800fee0:	f3bf 8f6f 	isb	sy
 800fee4:	f3bf 8f4f 	dsb	sy
 800fee8:	b662      	cpsie	i
 800feea:	627b      	str	r3, [r7, #36]	; 0x24
 800feec:	e7fe      	b.n	800feec <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d002      	beq.n	800fefa <xQueueGenericCreateStatic+0x56>
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d001      	beq.n	800fefe <xQueueGenericCreateStatic+0x5a>
 800fefa:	2301      	movs	r3, #1
 800fefc:	e000      	b.n	800ff00 <xQueueGenericCreateStatic+0x5c>
 800fefe:	2300      	movs	r3, #0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d10b      	bne.n	800ff1c <xQueueGenericCreateStatic+0x78>
 800ff04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff08:	b672      	cpsid	i
 800ff0a:	f383 8811 	msr	BASEPRI, r3
 800ff0e:	f3bf 8f6f 	isb	sy
 800ff12:	f3bf 8f4f 	dsb	sy
 800ff16:	b662      	cpsie	i
 800ff18:	623b      	str	r3, [r7, #32]
 800ff1a:	e7fe      	b.n	800ff1a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d102      	bne.n	800ff28 <xQueueGenericCreateStatic+0x84>
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d101      	bne.n	800ff2c <xQueueGenericCreateStatic+0x88>
 800ff28:	2301      	movs	r3, #1
 800ff2a:	e000      	b.n	800ff2e <xQueueGenericCreateStatic+0x8a>
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d10b      	bne.n	800ff4a <xQueueGenericCreateStatic+0xa6>
 800ff32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff36:	b672      	cpsid	i
 800ff38:	f383 8811 	msr	BASEPRI, r3
 800ff3c:	f3bf 8f6f 	isb	sy
 800ff40:	f3bf 8f4f 	dsb	sy
 800ff44:	b662      	cpsie	i
 800ff46:	61fb      	str	r3, [r7, #28]
 800ff48:	e7fe      	b.n	800ff48 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ff4a:	2348      	movs	r3, #72	; 0x48
 800ff4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	2b48      	cmp	r3, #72	; 0x48
 800ff52:	d00b      	beq.n	800ff6c <xQueueGenericCreateStatic+0xc8>
 800ff54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff58:	b672      	cpsid	i
 800ff5a:	f383 8811 	msr	BASEPRI, r3
 800ff5e:	f3bf 8f6f 	isb	sy
 800ff62:	f3bf 8f4f 	dsb	sy
 800ff66:	b662      	cpsie	i
 800ff68:	61bb      	str	r3, [r7, #24]
 800ff6a:	e7fe      	b.n	800ff6a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ff6c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ff72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d00d      	beq.n	800ff94 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ff78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ff80:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ff84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff86:	9300      	str	r3, [sp, #0]
 800ff88:	4613      	mov	r3, r2
 800ff8a:	687a      	ldr	r2, [r7, #4]
 800ff8c:	68b9      	ldr	r1, [r7, #8]
 800ff8e:	68f8      	ldr	r0, [r7, #12]
 800ff90:	f000 f846 	bl	8010020 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ff94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3730      	adds	r7, #48	; 0x30
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ff9e:	b580      	push	{r7, lr}
 800ffa0:	b08a      	sub	sp, #40	; 0x28
 800ffa2:	af02      	add	r7, sp, #8
 800ffa4:	60f8      	str	r0, [r7, #12]
 800ffa6:	60b9      	str	r1, [r7, #8]
 800ffa8:	4613      	mov	r3, r2
 800ffaa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d10b      	bne.n	800ffca <xQueueGenericCreate+0x2c>
 800ffb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffb6:	b672      	cpsid	i
 800ffb8:	f383 8811 	msr	BASEPRI, r3
 800ffbc:	f3bf 8f6f 	isb	sy
 800ffc0:	f3bf 8f4f 	dsb	sy
 800ffc4:	b662      	cpsie	i
 800ffc6:	613b      	str	r3, [r7, #16]
 800ffc8:	e7fe      	b.n	800ffc8 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d102      	bne.n	800ffd6 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	61fb      	str	r3, [r7, #28]
 800ffd4:	e004      	b.n	800ffe0 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	68ba      	ldr	r2, [r7, #8]
 800ffda:	fb02 f303 	mul.w	r3, r2, r3
 800ffde:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ffe0:	69fb      	ldr	r3, [r7, #28]
 800ffe2:	3348      	adds	r3, #72	; 0x48
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f002 f8b1 	bl	801214c <pvPortMalloc>
 800ffea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ffec:	69bb      	ldr	r3, [r7, #24]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d011      	beq.n	8010016 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fff2:	69bb      	ldr	r3, [r7, #24]
 800fff4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	3348      	adds	r3, #72	; 0x48
 800fffa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fffc:	69bb      	ldr	r3, [r7, #24]
 800fffe:	2200      	movs	r2, #0
 8010000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010004:	79fa      	ldrb	r2, [r7, #7]
 8010006:	69bb      	ldr	r3, [r7, #24]
 8010008:	9300      	str	r3, [sp, #0]
 801000a:	4613      	mov	r3, r2
 801000c:	697a      	ldr	r2, [r7, #20]
 801000e:	68b9      	ldr	r1, [r7, #8]
 8010010:	68f8      	ldr	r0, [r7, #12]
 8010012:	f000 f805 	bl	8010020 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010016:	69bb      	ldr	r3, [r7, #24]
	}
 8010018:	4618      	mov	r0, r3
 801001a:	3720      	adds	r7, #32
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}

08010020 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b084      	sub	sp, #16
 8010024:	af00      	add	r7, sp, #0
 8010026:	60f8      	str	r0, [r7, #12]
 8010028:	60b9      	str	r1, [r7, #8]
 801002a:	607a      	str	r2, [r7, #4]
 801002c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d103      	bne.n	801003c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010034:	69bb      	ldr	r3, [r7, #24]
 8010036:	69ba      	ldr	r2, [r7, #24]
 8010038:	601a      	str	r2, [r3, #0]
 801003a:	e002      	b.n	8010042 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801003c:	69bb      	ldr	r3, [r7, #24]
 801003e:	687a      	ldr	r2, [r7, #4]
 8010040:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010042:	69bb      	ldr	r3, [r7, #24]
 8010044:	68fa      	ldr	r2, [r7, #12]
 8010046:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010048:	69bb      	ldr	r3, [r7, #24]
 801004a:	68ba      	ldr	r2, [r7, #8]
 801004c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801004e:	2101      	movs	r1, #1
 8010050:	69b8      	ldr	r0, [r7, #24]
 8010052:	f7ff febd 	bl	800fdd0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010056:	bf00      	nop
 8010058:	3710      	adds	r7, #16
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}

0801005e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801005e:	b580      	push	{r7, lr}
 8010060:	b082      	sub	sp, #8
 8010062:	af00      	add	r7, sp, #0
 8010064:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d00e      	beq.n	801008a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2200      	movs	r2, #0
 8010070:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2200      	movs	r2, #0
 8010076:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2200      	movs	r2, #0
 801007c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801007e:	2300      	movs	r3, #0
 8010080:	2200      	movs	r2, #0
 8010082:	2100      	movs	r1, #0
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f000 f837 	bl	80100f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801008a:	bf00      	nop
 801008c:	3708      	adds	r7, #8
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}

08010092 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010092:	b580      	push	{r7, lr}
 8010094:	b086      	sub	sp, #24
 8010096:	af00      	add	r7, sp, #0
 8010098:	4603      	mov	r3, r0
 801009a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801009c:	2301      	movs	r3, #1
 801009e:	617b      	str	r3, [r7, #20]
 80100a0:	2300      	movs	r3, #0
 80100a2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80100a4:	79fb      	ldrb	r3, [r7, #7]
 80100a6:	461a      	mov	r2, r3
 80100a8:	6939      	ldr	r1, [r7, #16]
 80100aa:	6978      	ldr	r0, [r7, #20]
 80100ac:	f7ff ff77 	bl	800ff9e <xQueueGenericCreate>
 80100b0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80100b2:	68f8      	ldr	r0, [r7, #12]
 80100b4:	f7ff ffd3 	bl	801005e <prvInitialiseMutex>

		return xNewQueue;
 80100b8:	68fb      	ldr	r3, [r7, #12]
	}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3718      	adds	r7, #24
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}

080100c2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80100c2:	b580      	push	{r7, lr}
 80100c4:	b088      	sub	sp, #32
 80100c6:	af02      	add	r7, sp, #8
 80100c8:	4603      	mov	r3, r0
 80100ca:	6039      	str	r1, [r7, #0]
 80100cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80100ce:	2301      	movs	r3, #1
 80100d0:	617b      	str	r3, [r7, #20]
 80100d2:	2300      	movs	r3, #0
 80100d4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80100d6:	79fb      	ldrb	r3, [r7, #7]
 80100d8:	9300      	str	r3, [sp, #0]
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	2200      	movs	r2, #0
 80100de:	6939      	ldr	r1, [r7, #16]
 80100e0:	6978      	ldr	r0, [r7, #20]
 80100e2:	f7ff fedf 	bl	800fea4 <xQueueGenericCreateStatic>
 80100e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80100e8:	68f8      	ldr	r0, [r7, #12]
 80100ea:	f7ff ffb8 	bl	801005e <prvInitialiseMutex>

		return xNewQueue;
 80100ee:	68fb      	ldr	r3, [r7, #12]
	}
 80100f0:	4618      	mov	r0, r3
 80100f2:	3718      	adds	r7, #24
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}

080100f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b08e      	sub	sp, #56	; 0x38
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	60f8      	str	r0, [r7, #12]
 8010100:	60b9      	str	r1, [r7, #8]
 8010102:	607a      	str	r2, [r7, #4]
 8010104:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010106:	2300      	movs	r3, #0
 8010108:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801010e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010110:	2b00      	cmp	r3, #0
 8010112:	d10b      	bne.n	801012c <xQueueGenericSend+0x34>
 8010114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010118:	b672      	cpsid	i
 801011a:	f383 8811 	msr	BASEPRI, r3
 801011e:	f3bf 8f6f 	isb	sy
 8010122:	f3bf 8f4f 	dsb	sy
 8010126:	b662      	cpsie	i
 8010128:	62bb      	str	r3, [r7, #40]	; 0x28
 801012a:	e7fe      	b.n	801012a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d103      	bne.n	801013a <xQueueGenericSend+0x42>
 8010132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010136:	2b00      	cmp	r3, #0
 8010138:	d101      	bne.n	801013e <xQueueGenericSend+0x46>
 801013a:	2301      	movs	r3, #1
 801013c:	e000      	b.n	8010140 <xQueueGenericSend+0x48>
 801013e:	2300      	movs	r3, #0
 8010140:	2b00      	cmp	r3, #0
 8010142:	d10b      	bne.n	801015c <xQueueGenericSend+0x64>
 8010144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010148:	b672      	cpsid	i
 801014a:	f383 8811 	msr	BASEPRI, r3
 801014e:	f3bf 8f6f 	isb	sy
 8010152:	f3bf 8f4f 	dsb	sy
 8010156:	b662      	cpsie	i
 8010158:	627b      	str	r3, [r7, #36]	; 0x24
 801015a:	e7fe      	b.n	801015a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	2b02      	cmp	r3, #2
 8010160:	d103      	bne.n	801016a <xQueueGenericSend+0x72>
 8010162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010166:	2b01      	cmp	r3, #1
 8010168:	d101      	bne.n	801016e <xQueueGenericSend+0x76>
 801016a:	2301      	movs	r3, #1
 801016c:	e000      	b.n	8010170 <xQueueGenericSend+0x78>
 801016e:	2300      	movs	r3, #0
 8010170:	2b00      	cmp	r3, #0
 8010172:	d10b      	bne.n	801018c <xQueueGenericSend+0x94>
 8010174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010178:	b672      	cpsid	i
 801017a:	f383 8811 	msr	BASEPRI, r3
 801017e:	f3bf 8f6f 	isb	sy
 8010182:	f3bf 8f4f 	dsb	sy
 8010186:	b662      	cpsie	i
 8010188:	623b      	str	r3, [r7, #32]
 801018a:	e7fe      	b.n	801018a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801018c:	f001 fb78 	bl	8011880 <xTaskGetSchedulerState>
 8010190:	4603      	mov	r3, r0
 8010192:	2b00      	cmp	r3, #0
 8010194:	d102      	bne.n	801019c <xQueueGenericSend+0xa4>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d101      	bne.n	80101a0 <xQueueGenericSend+0xa8>
 801019c:	2301      	movs	r3, #1
 801019e:	e000      	b.n	80101a2 <xQueueGenericSend+0xaa>
 80101a0:	2300      	movs	r3, #0
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d10b      	bne.n	80101be <xQueueGenericSend+0xc6>
 80101a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101aa:	b672      	cpsid	i
 80101ac:	f383 8811 	msr	BASEPRI, r3
 80101b0:	f3bf 8f6f 	isb	sy
 80101b4:	f3bf 8f4f 	dsb	sy
 80101b8:	b662      	cpsie	i
 80101ba:	61fb      	str	r3, [r7, #28]
 80101bc:	e7fe      	b.n	80101bc <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80101be:	f001 fea3 	bl	8011f08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80101c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101ca:	429a      	cmp	r2, r3
 80101cc:	d302      	bcc.n	80101d4 <xQueueGenericSend+0xdc>
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	2b02      	cmp	r3, #2
 80101d2:	d129      	bne.n	8010228 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80101d4:	683a      	ldr	r2, [r7, #0]
 80101d6:	68b9      	ldr	r1, [r7, #8]
 80101d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101da:	f000 fc4a 	bl	8010a72 <prvCopyDataToQueue>
 80101de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80101e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d010      	beq.n	801020a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80101e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ea:	3324      	adds	r3, #36	; 0x24
 80101ec:	4618      	mov	r0, r3
 80101ee:	f001 f989 	bl	8011504 <xTaskRemoveFromEventList>
 80101f2:	4603      	mov	r3, r0
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d013      	beq.n	8010220 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80101f8:	4b3f      	ldr	r3, [pc, #252]	; (80102f8 <xQueueGenericSend+0x200>)
 80101fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101fe:	601a      	str	r2, [r3, #0]
 8010200:	f3bf 8f4f 	dsb	sy
 8010204:	f3bf 8f6f 	isb	sy
 8010208:	e00a      	b.n	8010220 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801020a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801020c:	2b00      	cmp	r3, #0
 801020e:	d007      	beq.n	8010220 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010210:	4b39      	ldr	r3, [pc, #228]	; (80102f8 <xQueueGenericSend+0x200>)
 8010212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010216:	601a      	str	r2, [r3, #0]
 8010218:	f3bf 8f4f 	dsb	sy
 801021c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010220:	f001 fea4 	bl	8011f6c <vPortExitCritical>
				return pdPASS;
 8010224:	2301      	movs	r3, #1
 8010226:	e063      	b.n	80102f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d103      	bne.n	8010236 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801022e:	f001 fe9d 	bl	8011f6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010232:	2300      	movs	r3, #0
 8010234:	e05c      	b.n	80102f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010238:	2b00      	cmp	r3, #0
 801023a:	d106      	bne.n	801024a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801023c:	f107 0314 	add.w	r3, r7, #20
 8010240:	4618      	mov	r0, r3
 8010242:	f001 f9c3 	bl	80115cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010246:	2301      	movs	r3, #1
 8010248:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801024a:	f001 fe8f 	bl	8011f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801024e:	f000 ff4f 	bl	80110f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010252:	f001 fe59 	bl	8011f08 <vPortEnterCritical>
 8010256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010258:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801025c:	b25b      	sxtb	r3, r3
 801025e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010262:	d103      	bne.n	801026c <xQueueGenericSend+0x174>
 8010264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010266:	2200      	movs	r2, #0
 8010268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801026c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801026e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010272:	b25b      	sxtb	r3, r3
 8010274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010278:	d103      	bne.n	8010282 <xQueueGenericSend+0x18a>
 801027a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801027c:	2200      	movs	r2, #0
 801027e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010282:	f001 fe73 	bl	8011f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010286:	1d3a      	adds	r2, r7, #4
 8010288:	f107 0314 	add.w	r3, r7, #20
 801028c:	4611      	mov	r1, r2
 801028e:	4618      	mov	r0, r3
 8010290:	f001 f9b2 	bl	80115f8 <xTaskCheckForTimeOut>
 8010294:	4603      	mov	r3, r0
 8010296:	2b00      	cmp	r3, #0
 8010298:	d124      	bne.n	80102e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801029a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801029c:	f000 fce1 	bl	8010c62 <prvIsQueueFull>
 80102a0:	4603      	mov	r3, r0
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d018      	beq.n	80102d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80102a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a8:	3310      	adds	r3, #16
 80102aa:	687a      	ldr	r2, [r7, #4]
 80102ac:	4611      	mov	r1, r2
 80102ae:	4618      	mov	r0, r3
 80102b0:	f001 f902 	bl	80114b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80102b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102b6:	f000 fc6c 	bl	8010b92 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80102ba:	f000 ff27 	bl	801110c <xTaskResumeAll>
 80102be:	4603      	mov	r3, r0
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	f47f af7c 	bne.w	80101be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80102c6:	4b0c      	ldr	r3, [pc, #48]	; (80102f8 <xQueueGenericSend+0x200>)
 80102c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102cc:	601a      	str	r2, [r3, #0]
 80102ce:	f3bf 8f4f 	dsb	sy
 80102d2:	f3bf 8f6f 	isb	sy
 80102d6:	e772      	b.n	80101be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80102d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102da:	f000 fc5a 	bl	8010b92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80102de:	f000 ff15 	bl	801110c <xTaskResumeAll>
 80102e2:	e76c      	b.n	80101be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80102e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102e6:	f000 fc54 	bl	8010b92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80102ea:	f000 ff0f 	bl	801110c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80102ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80102f0:	4618      	mov	r0, r3
 80102f2:	3738      	adds	r7, #56	; 0x38
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}
 80102f8:	e000ed04 	.word	0xe000ed04

080102fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b08e      	sub	sp, #56	; 0x38
 8010300:	af00      	add	r7, sp, #0
 8010302:	60f8      	str	r0, [r7, #12]
 8010304:	60b9      	str	r1, [r7, #8]
 8010306:	607a      	str	r2, [r7, #4]
 8010308:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801030e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010310:	2b00      	cmp	r3, #0
 8010312:	d10b      	bne.n	801032c <xQueueGenericSendFromISR+0x30>
 8010314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010318:	b672      	cpsid	i
 801031a:	f383 8811 	msr	BASEPRI, r3
 801031e:	f3bf 8f6f 	isb	sy
 8010322:	f3bf 8f4f 	dsb	sy
 8010326:	b662      	cpsie	i
 8010328:	627b      	str	r3, [r7, #36]	; 0x24
 801032a:	e7fe      	b.n	801032a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d103      	bne.n	801033a <xQueueGenericSendFromISR+0x3e>
 8010332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010336:	2b00      	cmp	r3, #0
 8010338:	d101      	bne.n	801033e <xQueueGenericSendFromISR+0x42>
 801033a:	2301      	movs	r3, #1
 801033c:	e000      	b.n	8010340 <xQueueGenericSendFromISR+0x44>
 801033e:	2300      	movs	r3, #0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d10b      	bne.n	801035c <xQueueGenericSendFromISR+0x60>
 8010344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010348:	b672      	cpsid	i
 801034a:	f383 8811 	msr	BASEPRI, r3
 801034e:	f3bf 8f6f 	isb	sy
 8010352:	f3bf 8f4f 	dsb	sy
 8010356:	b662      	cpsie	i
 8010358:	623b      	str	r3, [r7, #32]
 801035a:	e7fe      	b.n	801035a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	2b02      	cmp	r3, #2
 8010360:	d103      	bne.n	801036a <xQueueGenericSendFromISR+0x6e>
 8010362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010366:	2b01      	cmp	r3, #1
 8010368:	d101      	bne.n	801036e <xQueueGenericSendFromISR+0x72>
 801036a:	2301      	movs	r3, #1
 801036c:	e000      	b.n	8010370 <xQueueGenericSendFromISR+0x74>
 801036e:	2300      	movs	r3, #0
 8010370:	2b00      	cmp	r3, #0
 8010372:	d10b      	bne.n	801038c <xQueueGenericSendFromISR+0x90>
 8010374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010378:	b672      	cpsid	i
 801037a:	f383 8811 	msr	BASEPRI, r3
 801037e:	f3bf 8f6f 	isb	sy
 8010382:	f3bf 8f4f 	dsb	sy
 8010386:	b662      	cpsie	i
 8010388:	61fb      	str	r3, [r7, #28]
 801038a:	e7fe      	b.n	801038a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801038c:	f001 fe9c 	bl	80120c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010390:	f3ef 8211 	mrs	r2, BASEPRI
 8010394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010398:	b672      	cpsid	i
 801039a:	f383 8811 	msr	BASEPRI, r3
 801039e:	f3bf 8f6f 	isb	sy
 80103a2:	f3bf 8f4f 	dsb	sy
 80103a6:	b662      	cpsie	i
 80103a8:	61ba      	str	r2, [r7, #24]
 80103aa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80103ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80103ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80103b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80103b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103b8:	429a      	cmp	r2, r3
 80103ba:	d302      	bcc.n	80103c2 <xQueueGenericSendFromISR+0xc6>
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	2b02      	cmp	r3, #2
 80103c0:	d12c      	bne.n	801041c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80103c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80103c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80103cc:	683a      	ldr	r2, [r7, #0]
 80103ce:	68b9      	ldr	r1, [r7, #8]
 80103d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103d2:	f000 fb4e 	bl	8010a72 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80103d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80103da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80103de:	d112      	bne.n	8010406 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80103e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d016      	beq.n	8010416 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80103e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ea:	3324      	adds	r3, #36	; 0x24
 80103ec:	4618      	mov	r0, r3
 80103ee:	f001 f889 	bl	8011504 <xTaskRemoveFromEventList>
 80103f2:	4603      	mov	r3, r0
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d00e      	beq.n	8010416 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d00b      	beq.n	8010416 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2201      	movs	r2, #1
 8010402:	601a      	str	r2, [r3, #0]
 8010404:	e007      	b.n	8010416 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010406:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801040a:	3301      	adds	r3, #1
 801040c:	b2db      	uxtb	r3, r3
 801040e:	b25a      	sxtb	r2, r3
 8010410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010416:	2301      	movs	r3, #1
 8010418:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801041a:	e001      	b.n	8010420 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801041c:	2300      	movs	r3, #0
 801041e:	637b      	str	r3, [r7, #52]	; 0x34
 8010420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010422:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010424:	693b      	ldr	r3, [r7, #16]
 8010426:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801042a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801042c:	4618      	mov	r0, r3
 801042e:	3738      	adds	r7, #56	; 0x38
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}

08010434 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b08e      	sub	sp, #56	; 0x38
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010444:	2b00      	cmp	r3, #0
 8010446:	d10b      	bne.n	8010460 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8010448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801044c:	b672      	cpsid	i
 801044e:	f383 8811 	msr	BASEPRI, r3
 8010452:	f3bf 8f6f 	isb	sy
 8010456:	f3bf 8f4f 	dsb	sy
 801045a:	b662      	cpsie	i
 801045c:	623b      	str	r3, [r7, #32]
 801045e:	e7fe      	b.n	801045e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010464:	2b00      	cmp	r3, #0
 8010466:	d00b      	beq.n	8010480 <xQueueGiveFromISR+0x4c>
 8010468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801046c:	b672      	cpsid	i
 801046e:	f383 8811 	msr	BASEPRI, r3
 8010472:	f3bf 8f6f 	isb	sy
 8010476:	f3bf 8f4f 	dsb	sy
 801047a:	b662      	cpsie	i
 801047c:	61fb      	str	r3, [r7, #28]
 801047e:	e7fe      	b.n	801047e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d103      	bne.n	8010490 <xQueueGiveFromISR+0x5c>
 8010488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801048a:	689b      	ldr	r3, [r3, #8]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d101      	bne.n	8010494 <xQueueGiveFromISR+0x60>
 8010490:	2301      	movs	r3, #1
 8010492:	e000      	b.n	8010496 <xQueueGiveFromISR+0x62>
 8010494:	2300      	movs	r3, #0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d10b      	bne.n	80104b2 <xQueueGiveFromISR+0x7e>
 801049a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801049e:	b672      	cpsid	i
 80104a0:	f383 8811 	msr	BASEPRI, r3
 80104a4:	f3bf 8f6f 	isb	sy
 80104a8:	f3bf 8f4f 	dsb	sy
 80104ac:	b662      	cpsie	i
 80104ae:	61bb      	str	r3, [r7, #24]
 80104b0:	e7fe      	b.n	80104b0 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80104b2:	f001 fe09 	bl	80120c8 <vPortValidateInterruptPriority>
	__asm volatile
 80104b6:	f3ef 8211 	mrs	r2, BASEPRI
 80104ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104be:	b672      	cpsid	i
 80104c0:	f383 8811 	msr	BASEPRI, r3
 80104c4:	f3bf 8f6f 	isb	sy
 80104c8:	f3bf 8f4f 	dsb	sy
 80104cc:	b662      	cpsie	i
 80104ce:	617a      	str	r2, [r7, #20]
 80104d0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80104d2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80104d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80104d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80104dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d22b      	bcs.n	801053e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80104e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80104f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f2:	1c5a      	adds	r2, r3, #1
 80104f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80104f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80104fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010500:	d112      	bne.n	8010528 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010506:	2b00      	cmp	r3, #0
 8010508:	d016      	beq.n	8010538 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801050a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801050c:	3324      	adds	r3, #36	; 0x24
 801050e:	4618      	mov	r0, r3
 8010510:	f000 fff8 	bl	8011504 <xTaskRemoveFromEventList>
 8010514:	4603      	mov	r3, r0
 8010516:	2b00      	cmp	r3, #0
 8010518:	d00e      	beq.n	8010538 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d00b      	beq.n	8010538 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	2201      	movs	r2, #1
 8010524:	601a      	str	r2, [r3, #0]
 8010526:	e007      	b.n	8010538 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801052c:	3301      	adds	r3, #1
 801052e:	b2db      	uxtb	r3, r3
 8010530:	b25a      	sxtb	r2, r3
 8010532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010538:	2301      	movs	r3, #1
 801053a:	637b      	str	r3, [r7, #52]	; 0x34
 801053c:	e001      	b.n	8010542 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801053e:	2300      	movs	r3, #0
 8010540:	637b      	str	r3, [r7, #52]	; 0x34
 8010542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010544:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801054c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801054e:	4618      	mov	r0, r3
 8010550:	3738      	adds	r7, #56	; 0x38
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
	...

08010558 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b08c      	sub	sp, #48	; 0x30
 801055c:	af00      	add	r7, sp, #0
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010564:	2300      	movs	r3, #0
 8010566:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801056c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801056e:	2b00      	cmp	r3, #0
 8010570:	d10b      	bne.n	801058a <xQueueReceive+0x32>
	__asm volatile
 8010572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010576:	b672      	cpsid	i
 8010578:	f383 8811 	msr	BASEPRI, r3
 801057c:	f3bf 8f6f 	isb	sy
 8010580:	f3bf 8f4f 	dsb	sy
 8010584:	b662      	cpsie	i
 8010586:	623b      	str	r3, [r7, #32]
 8010588:	e7fe      	b.n	8010588 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d103      	bne.n	8010598 <xQueueReceive+0x40>
 8010590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010594:	2b00      	cmp	r3, #0
 8010596:	d101      	bne.n	801059c <xQueueReceive+0x44>
 8010598:	2301      	movs	r3, #1
 801059a:	e000      	b.n	801059e <xQueueReceive+0x46>
 801059c:	2300      	movs	r3, #0
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d10b      	bne.n	80105ba <xQueueReceive+0x62>
 80105a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a6:	b672      	cpsid	i
 80105a8:	f383 8811 	msr	BASEPRI, r3
 80105ac:	f3bf 8f6f 	isb	sy
 80105b0:	f3bf 8f4f 	dsb	sy
 80105b4:	b662      	cpsie	i
 80105b6:	61fb      	str	r3, [r7, #28]
 80105b8:	e7fe      	b.n	80105b8 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80105ba:	f001 f961 	bl	8011880 <xTaskGetSchedulerState>
 80105be:	4603      	mov	r3, r0
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d102      	bne.n	80105ca <xQueueReceive+0x72>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d101      	bne.n	80105ce <xQueueReceive+0x76>
 80105ca:	2301      	movs	r3, #1
 80105cc:	e000      	b.n	80105d0 <xQueueReceive+0x78>
 80105ce:	2300      	movs	r3, #0
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d10b      	bne.n	80105ec <xQueueReceive+0x94>
 80105d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d8:	b672      	cpsid	i
 80105da:	f383 8811 	msr	BASEPRI, r3
 80105de:	f3bf 8f6f 	isb	sy
 80105e2:	f3bf 8f4f 	dsb	sy
 80105e6:	b662      	cpsie	i
 80105e8:	61bb      	str	r3, [r7, #24]
 80105ea:	e7fe      	b.n	80105ea <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80105ec:	f001 fc8c 	bl	8011f08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80105f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105f4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80105f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d01f      	beq.n	801063c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80105fc:	68b9      	ldr	r1, [r7, #8]
 80105fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010600:	f000 faa1 	bl	8010b46 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010606:	1e5a      	subs	r2, r3, #1
 8010608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801060a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801060c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801060e:	691b      	ldr	r3, [r3, #16]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d00f      	beq.n	8010634 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010616:	3310      	adds	r3, #16
 8010618:	4618      	mov	r0, r3
 801061a:	f000 ff73 	bl	8011504 <xTaskRemoveFromEventList>
 801061e:	4603      	mov	r3, r0
 8010620:	2b00      	cmp	r3, #0
 8010622:	d007      	beq.n	8010634 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010624:	4b3c      	ldr	r3, [pc, #240]	; (8010718 <xQueueReceive+0x1c0>)
 8010626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801062a:	601a      	str	r2, [r3, #0]
 801062c:	f3bf 8f4f 	dsb	sy
 8010630:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010634:	f001 fc9a 	bl	8011f6c <vPortExitCritical>
				return pdPASS;
 8010638:	2301      	movs	r3, #1
 801063a:	e069      	b.n	8010710 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d103      	bne.n	801064a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010642:	f001 fc93 	bl	8011f6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010646:	2300      	movs	r3, #0
 8010648:	e062      	b.n	8010710 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801064a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064c:	2b00      	cmp	r3, #0
 801064e:	d106      	bne.n	801065e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010650:	f107 0310 	add.w	r3, r7, #16
 8010654:	4618      	mov	r0, r3
 8010656:	f000 ffb9 	bl	80115cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801065a:	2301      	movs	r3, #1
 801065c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801065e:	f001 fc85 	bl	8011f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010662:	f000 fd45 	bl	80110f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010666:	f001 fc4f 	bl	8011f08 <vPortEnterCritical>
 801066a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010670:	b25b      	sxtb	r3, r3
 8010672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010676:	d103      	bne.n	8010680 <xQueueReceive+0x128>
 8010678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801067a:	2200      	movs	r2, #0
 801067c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010686:	b25b      	sxtb	r3, r3
 8010688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801068c:	d103      	bne.n	8010696 <xQueueReceive+0x13e>
 801068e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010690:	2200      	movs	r2, #0
 8010692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010696:	f001 fc69 	bl	8011f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801069a:	1d3a      	adds	r2, r7, #4
 801069c:	f107 0310 	add.w	r3, r7, #16
 80106a0:	4611      	mov	r1, r2
 80106a2:	4618      	mov	r0, r3
 80106a4:	f000 ffa8 	bl	80115f8 <xTaskCheckForTimeOut>
 80106a8:	4603      	mov	r3, r0
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d123      	bne.n	80106f6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80106ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106b0:	f000 fac1 	bl	8010c36 <prvIsQueueEmpty>
 80106b4:	4603      	mov	r3, r0
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d017      	beq.n	80106ea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80106ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106bc:	3324      	adds	r3, #36	; 0x24
 80106be:	687a      	ldr	r2, [r7, #4]
 80106c0:	4611      	mov	r1, r2
 80106c2:	4618      	mov	r0, r3
 80106c4:	f000 fef8 	bl	80114b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80106c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106ca:	f000 fa62 	bl	8010b92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80106ce:	f000 fd1d 	bl	801110c <xTaskResumeAll>
 80106d2:	4603      	mov	r3, r0
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d189      	bne.n	80105ec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80106d8:	4b0f      	ldr	r3, [pc, #60]	; (8010718 <xQueueReceive+0x1c0>)
 80106da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106de:	601a      	str	r2, [r3, #0]
 80106e0:	f3bf 8f4f 	dsb	sy
 80106e4:	f3bf 8f6f 	isb	sy
 80106e8:	e780      	b.n	80105ec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80106ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106ec:	f000 fa51 	bl	8010b92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80106f0:	f000 fd0c 	bl	801110c <xTaskResumeAll>
 80106f4:	e77a      	b.n	80105ec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80106f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106f8:	f000 fa4b 	bl	8010b92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80106fc:	f000 fd06 	bl	801110c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010702:	f000 fa98 	bl	8010c36 <prvIsQueueEmpty>
 8010706:	4603      	mov	r3, r0
 8010708:	2b00      	cmp	r3, #0
 801070a:	f43f af6f 	beq.w	80105ec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801070e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010710:	4618      	mov	r0, r3
 8010712:	3730      	adds	r7, #48	; 0x30
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}
 8010718:	e000ed04 	.word	0xe000ed04

0801071c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b08e      	sub	sp, #56	; 0x38
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010726:	2300      	movs	r3, #0
 8010728:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801072e:	2300      	movs	r3, #0
 8010730:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010734:	2b00      	cmp	r3, #0
 8010736:	d10b      	bne.n	8010750 <xQueueSemaphoreTake+0x34>
 8010738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801073c:	b672      	cpsid	i
 801073e:	f383 8811 	msr	BASEPRI, r3
 8010742:	f3bf 8f6f 	isb	sy
 8010746:	f3bf 8f4f 	dsb	sy
 801074a:	b662      	cpsie	i
 801074c:	623b      	str	r3, [r7, #32]
 801074e:	e7fe      	b.n	801074e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010754:	2b00      	cmp	r3, #0
 8010756:	d00b      	beq.n	8010770 <xQueueSemaphoreTake+0x54>
 8010758:	f04f 0350 	mov.w	r3, #80	; 0x50
 801075c:	b672      	cpsid	i
 801075e:	f383 8811 	msr	BASEPRI, r3
 8010762:	f3bf 8f6f 	isb	sy
 8010766:	f3bf 8f4f 	dsb	sy
 801076a:	b662      	cpsie	i
 801076c:	61fb      	str	r3, [r7, #28]
 801076e:	e7fe      	b.n	801076e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010770:	f001 f886 	bl	8011880 <xTaskGetSchedulerState>
 8010774:	4603      	mov	r3, r0
 8010776:	2b00      	cmp	r3, #0
 8010778:	d102      	bne.n	8010780 <xQueueSemaphoreTake+0x64>
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d101      	bne.n	8010784 <xQueueSemaphoreTake+0x68>
 8010780:	2301      	movs	r3, #1
 8010782:	e000      	b.n	8010786 <xQueueSemaphoreTake+0x6a>
 8010784:	2300      	movs	r3, #0
 8010786:	2b00      	cmp	r3, #0
 8010788:	d10b      	bne.n	80107a2 <xQueueSemaphoreTake+0x86>
 801078a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801078e:	b672      	cpsid	i
 8010790:	f383 8811 	msr	BASEPRI, r3
 8010794:	f3bf 8f6f 	isb	sy
 8010798:	f3bf 8f4f 	dsb	sy
 801079c:	b662      	cpsie	i
 801079e:	61bb      	str	r3, [r7, #24]
 80107a0:	e7fe      	b.n	80107a0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80107a2:	f001 fbb1 	bl	8011f08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80107a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107aa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80107ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d024      	beq.n	80107fc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80107b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b4:	1e5a      	subs	r2, r3, #1
 80107b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107b8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80107ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d104      	bne.n	80107cc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80107c2:	f001 fa1f 	bl	8011c04 <pvTaskIncrementMutexHeldCount>
 80107c6:	4602      	mov	r2, r0
 80107c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ce:	691b      	ldr	r3, [r3, #16]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d00f      	beq.n	80107f4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d6:	3310      	adds	r3, #16
 80107d8:	4618      	mov	r0, r3
 80107da:	f000 fe93 	bl	8011504 <xTaskRemoveFromEventList>
 80107de:	4603      	mov	r3, r0
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d007      	beq.n	80107f4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80107e4:	4b54      	ldr	r3, [pc, #336]	; (8010938 <xQueueSemaphoreTake+0x21c>)
 80107e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107ea:	601a      	str	r2, [r3, #0]
 80107ec:	f3bf 8f4f 	dsb	sy
 80107f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80107f4:	f001 fbba 	bl	8011f6c <vPortExitCritical>
				return pdPASS;
 80107f8:	2301      	movs	r3, #1
 80107fa:	e098      	b.n	801092e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d112      	bne.n	8010828 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010804:	2b00      	cmp	r3, #0
 8010806:	d00b      	beq.n	8010820 <xQueueSemaphoreTake+0x104>
 8010808:	f04f 0350 	mov.w	r3, #80	; 0x50
 801080c:	b672      	cpsid	i
 801080e:	f383 8811 	msr	BASEPRI, r3
 8010812:	f3bf 8f6f 	isb	sy
 8010816:	f3bf 8f4f 	dsb	sy
 801081a:	b662      	cpsie	i
 801081c:	617b      	str	r3, [r7, #20]
 801081e:	e7fe      	b.n	801081e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010820:	f001 fba4 	bl	8011f6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010824:	2300      	movs	r3, #0
 8010826:	e082      	b.n	801092e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801082a:	2b00      	cmp	r3, #0
 801082c:	d106      	bne.n	801083c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801082e:	f107 030c 	add.w	r3, r7, #12
 8010832:	4618      	mov	r0, r3
 8010834:	f000 feca 	bl	80115cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010838:	2301      	movs	r3, #1
 801083a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801083c:	f001 fb96 	bl	8011f6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010840:	f000 fc56 	bl	80110f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010844:	f001 fb60 	bl	8011f08 <vPortEnterCritical>
 8010848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801084a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801084e:	b25b      	sxtb	r3, r3
 8010850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010854:	d103      	bne.n	801085e <xQueueSemaphoreTake+0x142>
 8010856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010858:	2200      	movs	r2, #0
 801085a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801085e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010864:	b25b      	sxtb	r3, r3
 8010866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801086a:	d103      	bne.n	8010874 <xQueueSemaphoreTake+0x158>
 801086c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801086e:	2200      	movs	r2, #0
 8010870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010874:	f001 fb7a 	bl	8011f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010878:	463a      	mov	r2, r7
 801087a:	f107 030c 	add.w	r3, r7, #12
 801087e:	4611      	mov	r1, r2
 8010880:	4618      	mov	r0, r3
 8010882:	f000 feb9 	bl	80115f8 <xTaskCheckForTimeOut>
 8010886:	4603      	mov	r3, r0
 8010888:	2b00      	cmp	r3, #0
 801088a:	d132      	bne.n	80108f2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801088c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801088e:	f000 f9d2 	bl	8010c36 <prvIsQueueEmpty>
 8010892:	4603      	mov	r3, r0
 8010894:	2b00      	cmp	r3, #0
 8010896:	d026      	beq.n	80108e6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d109      	bne.n	80108b4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80108a0:	f001 fb32 	bl	8011f08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80108a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a6:	689b      	ldr	r3, [r3, #8]
 80108a8:	4618      	mov	r0, r3
 80108aa:	f001 f807 	bl	80118bc <xTaskPriorityInherit>
 80108ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80108b0:	f001 fb5c 	bl	8011f6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80108b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108b6:	3324      	adds	r3, #36	; 0x24
 80108b8:	683a      	ldr	r2, [r7, #0]
 80108ba:	4611      	mov	r1, r2
 80108bc:	4618      	mov	r0, r3
 80108be:	f000 fdfb 	bl	80114b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80108c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108c4:	f000 f965 	bl	8010b92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80108c8:	f000 fc20 	bl	801110c <xTaskResumeAll>
 80108cc:	4603      	mov	r3, r0
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	f47f af67 	bne.w	80107a2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80108d4:	4b18      	ldr	r3, [pc, #96]	; (8010938 <xQueueSemaphoreTake+0x21c>)
 80108d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108da:	601a      	str	r2, [r3, #0]
 80108dc:	f3bf 8f4f 	dsb	sy
 80108e0:	f3bf 8f6f 	isb	sy
 80108e4:	e75d      	b.n	80107a2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80108e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108e8:	f000 f953 	bl	8010b92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80108ec:	f000 fc0e 	bl	801110c <xTaskResumeAll>
 80108f0:	e757      	b.n	80107a2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80108f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108f4:	f000 f94d 	bl	8010b92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80108f8:	f000 fc08 	bl	801110c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80108fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108fe:	f000 f99a 	bl	8010c36 <prvIsQueueEmpty>
 8010902:	4603      	mov	r3, r0
 8010904:	2b00      	cmp	r3, #0
 8010906:	f43f af4c 	beq.w	80107a2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801090a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801090c:	2b00      	cmp	r3, #0
 801090e:	d00d      	beq.n	801092c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8010910:	f001 fafa 	bl	8011f08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010914:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010916:	f000 f894 	bl	8010a42 <prvGetDisinheritPriorityAfterTimeout>
 801091a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801091c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801091e:	689b      	ldr	r3, [r3, #8]
 8010920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010922:	4618      	mov	r0, r3
 8010924:	f001 f8d2 	bl	8011acc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010928:	f001 fb20 	bl	8011f6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801092c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801092e:	4618      	mov	r0, r3
 8010930:	3738      	adds	r7, #56	; 0x38
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	e000ed04 	.word	0xe000ed04

0801093c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b08e      	sub	sp, #56	; 0x38
 8010940:	af00      	add	r7, sp, #0
 8010942:	60f8      	str	r0, [r7, #12]
 8010944:	60b9      	str	r1, [r7, #8]
 8010946:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801094c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801094e:	2b00      	cmp	r3, #0
 8010950:	d10b      	bne.n	801096a <xQueueReceiveFromISR+0x2e>
 8010952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010956:	b672      	cpsid	i
 8010958:	f383 8811 	msr	BASEPRI, r3
 801095c:	f3bf 8f6f 	isb	sy
 8010960:	f3bf 8f4f 	dsb	sy
 8010964:	b662      	cpsie	i
 8010966:	623b      	str	r3, [r7, #32]
 8010968:	e7fe      	b.n	8010968 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d103      	bne.n	8010978 <xQueueReceiveFromISR+0x3c>
 8010970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010974:	2b00      	cmp	r3, #0
 8010976:	d101      	bne.n	801097c <xQueueReceiveFromISR+0x40>
 8010978:	2301      	movs	r3, #1
 801097a:	e000      	b.n	801097e <xQueueReceiveFromISR+0x42>
 801097c:	2300      	movs	r3, #0
 801097e:	2b00      	cmp	r3, #0
 8010980:	d10b      	bne.n	801099a <xQueueReceiveFromISR+0x5e>
 8010982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010986:	b672      	cpsid	i
 8010988:	f383 8811 	msr	BASEPRI, r3
 801098c:	f3bf 8f6f 	isb	sy
 8010990:	f3bf 8f4f 	dsb	sy
 8010994:	b662      	cpsie	i
 8010996:	61fb      	str	r3, [r7, #28]
 8010998:	e7fe      	b.n	8010998 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801099a:	f001 fb95 	bl	80120c8 <vPortValidateInterruptPriority>
	__asm volatile
 801099e:	f3ef 8211 	mrs	r2, BASEPRI
 80109a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109a6:	b672      	cpsid	i
 80109a8:	f383 8811 	msr	BASEPRI, r3
 80109ac:	f3bf 8f6f 	isb	sy
 80109b0:	f3bf 8f4f 	dsb	sy
 80109b4:	b662      	cpsie	i
 80109b6:	61ba      	str	r2, [r7, #24]
 80109b8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80109ba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80109bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80109be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80109c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d02f      	beq.n	8010a2a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80109ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80109d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80109d4:	68b9      	ldr	r1, [r7, #8]
 80109d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109d8:	f000 f8b5 	bl	8010b46 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80109dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109de:	1e5a      	subs	r2, r3, #1
 80109e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80109e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80109e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80109ec:	d112      	bne.n	8010a14 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80109ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f0:	691b      	ldr	r3, [r3, #16]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d016      	beq.n	8010a24 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80109f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f8:	3310      	adds	r3, #16
 80109fa:	4618      	mov	r0, r3
 80109fc:	f000 fd82 	bl	8011504 <xTaskRemoveFromEventList>
 8010a00:	4603      	mov	r3, r0
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d00e      	beq.n	8010a24 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d00b      	beq.n	8010a24 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2201      	movs	r2, #1
 8010a10:	601a      	str	r2, [r3, #0]
 8010a12:	e007      	b.n	8010a24 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a18:	3301      	adds	r3, #1
 8010a1a:	b2db      	uxtb	r3, r3
 8010a1c:	b25a      	sxtb	r2, r3
 8010a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010a24:	2301      	movs	r3, #1
 8010a26:	637b      	str	r3, [r7, #52]	; 0x34
 8010a28:	e001      	b.n	8010a2e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8010a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a30:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010a32:	693b      	ldr	r3, [r7, #16]
 8010a34:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3738      	adds	r7, #56	; 0x38
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}

08010a42 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010a42:	b480      	push	{r7}
 8010a44:	b085      	sub	sp, #20
 8010a46:	af00      	add	r7, sp, #0
 8010a48:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d006      	beq.n	8010a60 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f1c3 0307 	rsb	r3, r3, #7
 8010a5c:	60fb      	str	r3, [r7, #12]
 8010a5e:	e001      	b.n	8010a64 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010a60:	2300      	movs	r3, #0
 8010a62:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010a64:	68fb      	ldr	r3, [r7, #12]
	}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3714      	adds	r7, #20
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a70:	4770      	bx	lr

08010a72 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010a72:	b580      	push	{r7, lr}
 8010a74:	b086      	sub	sp, #24
 8010a76:	af00      	add	r7, sp, #0
 8010a78:	60f8      	str	r0, [r7, #12]
 8010a7a:	60b9      	str	r1, [r7, #8]
 8010a7c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a86:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d10d      	bne.n	8010aac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d14d      	bne.n	8010b34 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	689b      	ldr	r3, [r3, #8]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f000 ff8d 	bl	80119bc <xTaskPriorityDisinherit>
 8010aa2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	609a      	str	r2, [r3, #8]
 8010aaa:	e043      	b.n	8010b34 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d119      	bne.n	8010ae6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	6858      	ldr	r0, [r3, #4]
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aba:	461a      	mov	r2, r3
 8010abc:	68b9      	ldr	r1, [r7, #8]
 8010abe:	f00d faee 	bl	801e09e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	685a      	ldr	r2, [r3, #4]
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aca:	441a      	add	r2, r3
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	685a      	ldr	r2, [r3, #4]
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	689b      	ldr	r3, [r3, #8]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d32b      	bcc.n	8010b34 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	681a      	ldr	r2, [r3, #0]
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	605a      	str	r2, [r3, #4]
 8010ae4:	e026      	b.n	8010b34 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	68d8      	ldr	r0, [r3, #12]
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aee:	461a      	mov	r2, r3
 8010af0:	68b9      	ldr	r1, [r7, #8]
 8010af2:	f00d fad4 	bl	801e09e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	68da      	ldr	r2, [r3, #12]
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010afe:	425b      	negs	r3, r3
 8010b00:	441a      	add	r2, r3
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	68da      	ldr	r2, [r3, #12]
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d207      	bcs.n	8010b22 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	689a      	ldr	r2, [r3, #8]
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b1a:	425b      	negs	r3, r3
 8010b1c:	441a      	add	r2, r3
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2b02      	cmp	r3, #2
 8010b26:	d105      	bne.n	8010b34 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b28:	693b      	ldr	r3, [r7, #16]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d002      	beq.n	8010b34 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	3b01      	subs	r3, #1
 8010b32:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010b34:	693b      	ldr	r3, [r7, #16]
 8010b36:	1c5a      	adds	r2, r3, #1
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010b3c:	697b      	ldr	r3, [r7, #20]
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3718      	adds	r7, #24
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}

08010b46 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010b46:	b580      	push	{r7, lr}
 8010b48:	b082      	sub	sp, #8
 8010b4a:	af00      	add	r7, sp, #0
 8010b4c:	6078      	str	r0, [r7, #4]
 8010b4e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d018      	beq.n	8010b8a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	68da      	ldr	r2, [r3, #12]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b60:	441a      	add	r2, r3
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	68da      	ldr	r2, [r3, #12]
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	689b      	ldr	r3, [r3, #8]
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d303      	bcc.n	8010b7a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681a      	ldr	r2, [r3, #0]
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	68d9      	ldr	r1, [r3, #12]
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b82:	461a      	mov	r2, r3
 8010b84:	6838      	ldr	r0, [r7, #0]
 8010b86:	f00d fa8a 	bl	801e09e <memcpy>
	}
}
 8010b8a:	bf00      	nop
 8010b8c:	3708      	adds	r7, #8
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}

08010b92 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010b92:	b580      	push	{r7, lr}
 8010b94:	b084      	sub	sp, #16
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010b9a:	f001 f9b5 	bl	8011f08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ba4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010ba6:	e011      	b.n	8010bcc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d012      	beq.n	8010bd6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	3324      	adds	r3, #36	; 0x24
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f000 fca5 	bl	8011504 <xTaskRemoveFromEventList>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d001      	beq.n	8010bc4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010bc0:	f000 fd7e 	bl	80116c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010bc4:	7bfb      	ldrb	r3, [r7, #15]
 8010bc6:	3b01      	subs	r3, #1
 8010bc8:	b2db      	uxtb	r3, r3
 8010bca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	dce9      	bgt.n	8010ba8 <prvUnlockQueue+0x16>
 8010bd4:	e000      	b.n	8010bd8 <prvUnlockQueue+0x46>
					break;
 8010bd6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	22ff      	movs	r2, #255	; 0xff
 8010bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010be0:	f001 f9c4 	bl	8011f6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010be4:	f001 f990 	bl	8011f08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010bee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010bf0:	e011      	b.n	8010c16 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	691b      	ldr	r3, [r3, #16]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d012      	beq.n	8010c20 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	3310      	adds	r3, #16
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f000 fc80 	bl	8011504 <xTaskRemoveFromEventList>
 8010c04:	4603      	mov	r3, r0
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d001      	beq.n	8010c0e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010c0a:	f000 fd59 	bl	80116c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010c0e:	7bbb      	ldrb	r3, [r7, #14]
 8010c10:	3b01      	subs	r3, #1
 8010c12:	b2db      	uxtb	r3, r3
 8010c14:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010c16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	dce9      	bgt.n	8010bf2 <prvUnlockQueue+0x60>
 8010c1e:	e000      	b.n	8010c22 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010c20:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	22ff      	movs	r2, #255	; 0xff
 8010c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010c2a:	f001 f99f 	bl	8011f6c <vPortExitCritical>
}
 8010c2e:	bf00      	nop
 8010c30:	3710      	adds	r7, #16
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd80      	pop	{r7, pc}

08010c36 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010c36:	b580      	push	{r7, lr}
 8010c38:	b084      	sub	sp, #16
 8010c3a:	af00      	add	r7, sp, #0
 8010c3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010c3e:	f001 f963 	bl	8011f08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d102      	bne.n	8010c50 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	60fb      	str	r3, [r7, #12]
 8010c4e:	e001      	b.n	8010c54 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010c50:	2300      	movs	r3, #0
 8010c52:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010c54:	f001 f98a 	bl	8011f6c <vPortExitCritical>

	return xReturn;
 8010c58:	68fb      	ldr	r3, [r7, #12]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3710      	adds	r7, #16
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}

08010c62 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010c62:	b580      	push	{r7, lr}
 8010c64:	b084      	sub	sp, #16
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010c6a:	f001 f94d 	bl	8011f08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d102      	bne.n	8010c80 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	60fb      	str	r3, [r7, #12]
 8010c7e:	e001      	b.n	8010c84 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010c80:	2300      	movs	r3, #0
 8010c82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010c84:	f001 f972 	bl	8011f6c <vPortExitCritical>

	return xReturn;
 8010c88:	68fb      	ldr	r3, [r7, #12]
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	3710      	adds	r7, #16
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}

08010c92 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010c92:	b580      	push	{r7, lr}
 8010c94:	b08e      	sub	sp, #56	; 0x38
 8010c96:	af04      	add	r7, sp, #16
 8010c98:	60f8      	str	r0, [r7, #12]
 8010c9a:	60b9      	str	r1, [r7, #8]
 8010c9c:	607a      	str	r2, [r7, #4]
 8010c9e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d10b      	bne.n	8010cbe <xTaskCreateStatic+0x2c>
	__asm volatile
 8010ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010caa:	b672      	cpsid	i
 8010cac:	f383 8811 	msr	BASEPRI, r3
 8010cb0:	f3bf 8f6f 	isb	sy
 8010cb4:	f3bf 8f4f 	dsb	sy
 8010cb8:	b662      	cpsie	i
 8010cba:	623b      	str	r3, [r7, #32]
 8010cbc:	e7fe      	b.n	8010cbc <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8010cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d10b      	bne.n	8010cdc <xTaskCreateStatic+0x4a>
 8010cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc8:	b672      	cpsid	i
 8010cca:	f383 8811 	msr	BASEPRI, r3
 8010cce:	f3bf 8f6f 	isb	sy
 8010cd2:	f3bf 8f4f 	dsb	sy
 8010cd6:	b662      	cpsie	i
 8010cd8:	61fb      	str	r3, [r7, #28]
 8010cda:	e7fe      	b.n	8010cda <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010cdc:	2354      	movs	r3, #84	; 0x54
 8010cde:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	2b54      	cmp	r3, #84	; 0x54
 8010ce4:	d00b      	beq.n	8010cfe <xTaskCreateStatic+0x6c>
 8010ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cea:	b672      	cpsid	i
 8010cec:	f383 8811 	msr	BASEPRI, r3
 8010cf0:	f3bf 8f6f 	isb	sy
 8010cf4:	f3bf 8f4f 	dsb	sy
 8010cf8:	b662      	cpsie	i
 8010cfa:	61bb      	str	r3, [r7, #24]
 8010cfc:	e7fe      	b.n	8010cfc <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010cfe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d01e      	beq.n	8010d44 <xTaskCreateStatic+0xb2>
 8010d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d01b      	beq.n	8010d44 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d18:	2202      	movs	r2, #2
 8010d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010d1e:	2300      	movs	r3, #0
 8010d20:	9303      	str	r3, [sp, #12]
 8010d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d24:	9302      	str	r3, [sp, #8]
 8010d26:	f107 0314 	add.w	r3, r7, #20
 8010d2a:	9301      	str	r3, [sp, #4]
 8010d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d2e:	9300      	str	r3, [sp, #0]
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	687a      	ldr	r2, [r7, #4]
 8010d34:	68b9      	ldr	r1, [r7, #8]
 8010d36:	68f8      	ldr	r0, [r7, #12]
 8010d38:	f000 f850 	bl	8010ddc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d3e:	f000 f8d5 	bl	8010eec <prvAddNewTaskToReadyList>
 8010d42:	e001      	b.n	8010d48 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010d44:	2300      	movs	r3, #0
 8010d46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010d48:	697b      	ldr	r3, [r7, #20]
	}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	3728      	adds	r7, #40	; 0x28
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}

08010d52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010d52:	b580      	push	{r7, lr}
 8010d54:	b08c      	sub	sp, #48	; 0x30
 8010d56:	af04      	add	r7, sp, #16
 8010d58:	60f8      	str	r0, [r7, #12]
 8010d5a:	60b9      	str	r1, [r7, #8]
 8010d5c:	603b      	str	r3, [r7, #0]
 8010d5e:	4613      	mov	r3, r2
 8010d60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010d62:	88fb      	ldrh	r3, [r7, #6]
 8010d64:	009b      	lsls	r3, r3, #2
 8010d66:	4618      	mov	r0, r3
 8010d68:	f001 f9f0 	bl	801214c <pvPortMalloc>
 8010d6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d00e      	beq.n	8010d92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010d74:	2054      	movs	r0, #84	; 0x54
 8010d76:	f001 f9e9 	bl	801214c <pvPortMalloc>
 8010d7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010d7c:	69fb      	ldr	r3, [r7, #28]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d003      	beq.n	8010d8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010d82:	69fb      	ldr	r3, [r7, #28]
 8010d84:	697a      	ldr	r2, [r7, #20]
 8010d86:	631a      	str	r2, [r3, #48]	; 0x30
 8010d88:	e005      	b.n	8010d96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010d8a:	6978      	ldr	r0, [r7, #20]
 8010d8c:	f001 faa6 	bl	80122dc <vPortFree>
 8010d90:	e001      	b.n	8010d96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010d92:	2300      	movs	r3, #0
 8010d94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010d96:	69fb      	ldr	r3, [r7, #28]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d017      	beq.n	8010dcc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010d9c:	69fb      	ldr	r3, [r7, #28]
 8010d9e:	2200      	movs	r2, #0
 8010da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010da4:	88fa      	ldrh	r2, [r7, #6]
 8010da6:	2300      	movs	r3, #0
 8010da8:	9303      	str	r3, [sp, #12]
 8010daa:	69fb      	ldr	r3, [r7, #28]
 8010dac:	9302      	str	r3, [sp, #8]
 8010dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db0:	9301      	str	r3, [sp, #4]
 8010db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db4:	9300      	str	r3, [sp, #0]
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	68b9      	ldr	r1, [r7, #8]
 8010dba:	68f8      	ldr	r0, [r7, #12]
 8010dbc:	f000 f80e 	bl	8010ddc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010dc0:	69f8      	ldr	r0, [r7, #28]
 8010dc2:	f000 f893 	bl	8010eec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010dc6:	2301      	movs	r3, #1
 8010dc8:	61bb      	str	r3, [r7, #24]
 8010dca:	e002      	b.n	8010dd2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010dd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010dd2:	69bb      	ldr	r3, [r7, #24]
	}
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	3720      	adds	r7, #32
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bd80      	pop	{r7, pc}

08010ddc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b088      	sub	sp, #32
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	60f8      	str	r0, [r7, #12]
 8010de4:	60b9      	str	r1, [r7, #8]
 8010de6:	607a      	str	r2, [r7, #4]
 8010de8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010dee:	6879      	ldr	r1, [r7, #4]
 8010df0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010df4:	440b      	add	r3, r1
 8010df6:	009b      	lsls	r3, r3, #2
 8010df8:	4413      	add	r3, r2
 8010dfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010dfc:	69bb      	ldr	r3, [r7, #24]
 8010dfe:	f023 0307 	bic.w	r3, r3, #7
 8010e02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010e04:	69bb      	ldr	r3, [r7, #24]
 8010e06:	f003 0307 	and.w	r3, r3, #7
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d00b      	beq.n	8010e26 <prvInitialiseNewTask+0x4a>
 8010e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e12:	b672      	cpsid	i
 8010e14:	f383 8811 	msr	BASEPRI, r3
 8010e18:	f3bf 8f6f 	isb	sy
 8010e1c:	f3bf 8f4f 	dsb	sy
 8010e20:	b662      	cpsie	i
 8010e22:	617b      	str	r3, [r7, #20]
 8010e24:	e7fe      	b.n	8010e24 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d01f      	beq.n	8010e6c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	61fb      	str	r3, [r7, #28]
 8010e30:	e012      	b.n	8010e58 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010e32:	68ba      	ldr	r2, [r7, #8]
 8010e34:	69fb      	ldr	r3, [r7, #28]
 8010e36:	4413      	add	r3, r2
 8010e38:	7819      	ldrb	r1, [r3, #0]
 8010e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e3c:	69fb      	ldr	r3, [r7, #28]
 8010e3e:	4413      	add	r3, r2
 8010e40:	3334      	adds	r3, #52	; 0x34
 8010e42:	460a      	mov	r2, r1
 8010e44:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010e46:	68ba      	ldr	r2, [r7, #8]
 8010e48:	69fb      	ldr	r3, [r7, #28]
 8010e4a:	4413      	add	r3, r2
 8010e4c:	781b      	ldrb	r3, [r3, #0]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d006      	beq.n	8010e60 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e52:	69fb      	ldr	r3, [r7, #28]
 8010e54:	3301      	adds	r3, #1
 8010e56:	61fb      	str	r3, [r7, #28]
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	2b0f      	cmp	r3, #15
 8010e5c:	d9e9      	bls.n	8010e32 <prvInitialiseNewTask+0x56>
 8010e5e:	e000      	b.n	8010e62 <prvInitialiseNewTask+0x86>
			{
				break;
 8010e60:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e64:	2200      	movs	r2, #0
 8010e66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010e6a:	e003      	b.n	8010e74 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e6e:	2200      	movs	r2, #0
 8010e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e76:	2b06      	cmp	r3, #6
 8010e78:	d901      	bls.n	8010e7e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010e7a:	2306      	movs	r3, #6
 8010e7c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e82:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e88:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e92:	3304      	adds	r3, #4
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7fe ff07 	bl	800fca8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9c:	3318      	adds	r3, #24
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7fe ff02 	bl	800fca8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ea8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eac:	f1c3 0207 	rsb	r2, r3, #7
 8010eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010eb8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010ec8:	683a      	ldr	r2, [r7, #0]
 8010eca:	68f9      	ldr	r1, [r7, #12]
 8010ecc:	69b8      	ldr	r0, [r7, #24]
 8010ece:	f000 ff13 	bl	8011cf8 <pxPortInitialiseStack>
 8010ed2:	4602      	mov	r2, r0
 8010ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ed6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d002      	beq.n	8010ee4 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ee2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010ee4:	bf00      	nop
 8010ee6:	3720      	adds	r7, #32
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}

08010eec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b082      	sub	sp, #8
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010ef4:	f001 f808 	bl	8011f08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010ef8:	4b2a      	ldr	r3, [pc, #168]	; (8010fa4 <prvAddNewTaskToReadyList+0xb8>)
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	3301      	adds	r3, #1
 8010efe:	4a29      	ldr	r2, [pc, #164]	; (8010fa4 <prvAddNewTaskToReadyList+0xb8>)
 8010f00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010f02:	4b29      	ldr	r3, [pc, #164]	; (8010fa8 <prvAddNewTaskToReadyList+0xbc>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d109      	bne.n	8010f1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010f0a:	4a27      	ldr	r2, [pc, #156]	; (8010fa8 <prvAddNewTaskToReadyList+0xbc>)
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010f10:	4b24      	ldr	r3, [pc, #144]	; (8010fa4 <prvAddNewTaskToReadyList+0xb8>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	2b01      	cmp	r3, #1
 8010f16:	d110      	bne.n	8010f3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010f18:	f000 fbf6 	bl	8011708 <prvInitialiseTaskLists>
 8010f1c:	e00d      	b.n	8010f3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010f1e:	4b23      	ldr	r3, [pc, #140]	; (8010fac <prvAddNewTaskToReadyList+0xc0>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d109      	bne.n	8010f3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010f26:	4b20      	ldr	r3, [pc, #128]	; (8010fa8 <prvAddNewTaskToReadyList+0xbc>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f30:	429a      	cmp	r2, r3
 8010f32:	d802      	bhi.n	8010f3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010f34:	4a1c      	ldr	r2, [pc, #112]	; (8010fa8 <prvAddNewTaskToReadyList+0xbc>)
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010f3a:	4b1d      	ldr	r3, [pc, #116]	; (8010fb0 <prvAddNewTaskToReadyList+0xc4>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	3301      	adds	r3, #1
 8010f40:	4a1b      	ldr	r2, [pc, #108]	; (8010fb0 <prvAddNewTaskToReadyList+0xc4>)
 8010f42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f48:	2201      	movs	r2, #1
 8010f4a:	409a      	lsls	r2, r3
 8010f4c:	4b19      	ldr	r3, [pc, #100]	; (8010fb4 <prvAddNewTaskToReadyList+0xc8>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	4313      	orrs	r3, r2
 8010f52:	4a18      	ldr	r2, [pc, #96]	; (8010fb4 <prvAddNewTaskToReadyList+0xc8>)
 8010f54:	6013      	str	r3, [r2, #0]
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f5a:	4613      	mov	r3, r2
 8010f5c:	009b      	lsls	r3, r3, #2
 8010f5e:	4413      	add	r3, r2
 8010f60:	009b      	lsls	r3, r3, #2
 8010f62:	4a15      	ldr	r2, [pc, #84]	; (8010fb8 <prvAddNewTaskToReadyList+0xcc>)
 8010f64:	441a      	add	r2, r3
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	3304      	adds	r3, #4
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	4610      	mov	r0, r2
 8010f6e:	f7fe fea8 	bl	800fcc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010f72:	f000 fffb 	bl	8011f6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010f76:	4b0d      	ldr	r3, [pc, #52]	; (8010fac <prvAddNewTaskToReadyList+0xc0>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d00e      	beq.n	8010f9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010f7e:	4b0a      	ldr	r3, [pc, #40]	; (8010fa8 <prvAddNewTaskToReadyList+0xbc>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	d207      	bcs.n	8010f9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010f8c:	4b0b      	ldr	r3, [pc, #44]	; (8010fbc <prvAddNewTaskToReadyList+0xd0>)
 8010f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f92:	601a      	str	r2, [r3, #0]
 8010f94:	f3bf 8f4f 	dsb	sy
 8010f98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f9c:	bf00      	nop
 8010f9e:	3708      	adds	r7, #8
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}
 8010fa4:	20000448 	.word	0x20000448
 8010fa8:	20000348 	.word	0x20000348
 8010fac:	20000454 	.word	0x20000454
 8010fb0:	20000464 	.word	0x20000464
 8010fb4:	20000450 	.word	0x20000450
 8010fb8:	2000034c 	.word	0x2000034c
 8010fbc:	e000ed04 	.word	0xe000ed04

08010fc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b084      	sub	sp, #16
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010fc8:	2300      	movs	r3, #0
 8010fca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d018      	beq.n	8011004 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010fd2:	4b14      	ldr	r3, [pc, #80]	; (8011024 <vTaskDelay+0x64>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d00b      	beq.n	8010ff2 <vTaskDelay+0x32>
 8010fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fde:	b672      	cpsid	i
 8010fe0:	f383 8811 	msr	BASEPRI, r3
 8010fe4:	f3bf 8f6f 	isb	sy
 8010fe8:	f3bf 8f4f 	dsb	sy
 8010fec:	b662      	cpsie	i
 8010fee:	60bb      	str	r3, [r7, #8]
 8010ff0:	e7fe      	b.n	8010ff0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8010ff2:	f000 f87d 	bl	80110f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010ff6:	2100      	movs	r1, #0
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f000 fe17 	bl	8011c2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010ffe:	f000 f885 	bl	801110c <xTaskResumeAll>
 8011002:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d107      	bne.n	801101a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801100a:	4b07      	ldr	r3, [pc, #28]	; (8011028 <vTaskDelay+0x68>)
 801100c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011010:	601a      	str	r2, [r3, #0]
 8011012:	f3bf 8f4f 	dsb	sy
 8011016:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801101a:	bf00      	nop
 801101c:	3710      	adds	r7, #16
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}
 8011022:	bf00      	nop
 8011024:	20000470 	.word	0x20000470
 8011028:	e000ed04 	.word	0xe000ed04

0801102c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b08a      	sub	sp, #40	; 0x28
 8011030:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011032:	2300      	movs	r3, #0
 8011034:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011036:	2300      	movs	r3, #0
 8011038:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801103a:	463a      	mov	r2, r7
 801103c:	1d39      	adds	r1, r7, #4
 801103e:	f107 0308 	add.w	r3, r7, #8
 8011042:	4618      	mov	r0, r3
 8011044:	f7f7 fc58 	bl	80088f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011048:	6839      	ldr	r1, [r7, #0]
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	68ba      	ldr	r2, [r7, #8]
 801104e:	9202      	str	r2, [sp, #8]
 8011050:	9301      	str	r3, [sp, #4]
 8011052:	2300      	movs	r3, #0
 8011054:	9300      	str	r3, [sp, #0]
 8011056:	2300      	movs	r3, #0
 8011058:	460a      	mov	r2, r1
 801105a:	491f      	ldr	r1, [pc, #124]	; (80110d8 <vTaskStartScheduler+0xac>)
 801105c:	481f      	ldr	r0, [pc, #124]	; (80110dc <vTaskStartScheduler+0xb0>)
 801105e:	f7ff fe18 	bl	8010c92 <xTaskCreateStatic>
 8011062:	4602      	mov	r2, r0
 8011064:	4b1e      	ldr	r3, [pc, #120]	; (80110e0 <vTaskStartScheduler+0xb4>)
 8011066:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011068:	4b1d      	ldr	r3, [pc, #116]	; (80110e0 <vTaskStartScheduler+0xb4>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d002      	beq.n	8011076 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011070:	2301      	movs	r3, #1
 8011072:	617b      	str	r3, [r7, #20]
 8011074:	e001      	b.n	801107a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011076:	2300      	movs	r3, #0
 8011078:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	2b01      	cmp	r3, #1
 801107e:	d117      	bne.n	80110b0 <vTaskStartScheduler+0x84>
 8011080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011084:	b672      	cpsid	i
 8011086:	f383 8811 	msr	BASEPRI, r3
 801108a:	f3bf 8f6f 	isb	sy
 801108e:	f3bf 8f4f 	dsb	sy
 8011092:	b662      	cpsie	i
 8011094:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011096:	4b13      	ldr	r3, [pc, #76]	; (80110e4 <vTaskStartScheduler+0xb8>)
 8011098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801109c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801109e:	4b12      	ldr	r3, [pc, #72]	; (80110e8 <vTaskStartScheduler+0xbc>)
 80110a0:	2201      	movs	r2, #1
 80110a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80110a4:	4b11      	ldr	r3, [pc, #68]	; (80110ec <vTaskStartScheduler+0xc0>)
 80110a6:	2200      	movs	r2, #0
 80110a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80110aa:	f000 feb1 	bl	8011e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80110ae:	e00f      	b.n	80110d0 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110b6:	d10b      	bne.n	80110d0 <vTaskStartScheduler+0xa4>
 80110b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110bc:	b672      	cpsid	i
 80110be:	f383 8811 	msr	BASEPRI, r3
 80110c2:	f3bf 8f6f 	isb	sy
 80110c6:	f3bf 8f4f 	dsb	sy
 80110ca:	b662      	cpsie	i
 80110cc:	60fb      	str	r3, [r7, #12]
 80110ce:	e7fe      	b.n	80110ce <vTaskStartScheduler+0xa2>
}
 80110d0:	bf00      	nop
 80110d2:	3718      	adds	r7, #24
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	0801f020 	.word	0x0801f020
 80110dc:	080116d9 	.word	0x080116d9
 80110e0:	2000046c 	.word	0x2000046c
 80110e4:	20000468 	.word	0x20000468
 80110e8:	20000454 	.word	0x20000454
 80110ec:	2000044c 	.word	0x2000044c

080110f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80110f0:	b480      	push	{r7}
 80110f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80110f4:	4b04      	ldr	r3, [pc, #16]	; (8011108 <vTaskSuspendAll+0x18>)
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	3301      	adds	r3, #1
 80110fa:	4a03      	ldr	r2, [pc, #12]	; (8011108 <vTaskSuspendAll+0x18>)
 80110fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80110fe:	bf00      	nop
 8011100:	46bd      	mov	sp, r7
 8011102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011106:	4770      	bx	lr
 8011108:	20000470 	.word	0x20000470

0801110c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b084      	sub	sp, #16
 8011110:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011112:	2300      	movs	r3, #0
 8011114:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011116:	2300      	movs	r3, #0
 8011118:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801111a:	4b42      	ldr	r3, [pc, #264]	; (8011224 <xTaskResumeAll+0x118>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d10b      	bne.n	801113a <xTaskResumeAll+0x2e>
 8011122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011126:	b672      	cpsid	i
 8011128:	f383 8811 	msr	BASEPRI, r3
 801112c:	f3bf 8f6f 	isb	sy
 8011130:	f3bf 8f4f 	dsb	sy
 8011134:	b662      	cpsie	i
 8011136:	603b      	str	r3, [r7, #0]
 8011138:	e7fe      	b.n	8011138 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801113a:	f000 fee5 	bl	8011f08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801113e:	4b39      	ldr	r3, [pc, #228]	; (8011224 <xTaskResumeAll+0x118>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	3b01      	subs	r3, #1
 8011144:	4a37      	ldr	r2, [pc, #220]	; (8011224 <xTaskResumeAll+0x118>)
 8011146:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011148:	4b36      	ldr	r3, [pc, #216]	; (8011224 <xTaskResumeAll+0x118>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d161      	bne.n	8011214 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011150:	4b35      	ldr	r3, [pc, #212]	; (8011228 <xTaskResumeAll+0x11c>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d05d      	beq.n	8011214 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011158:	e02e      	b.n	80111b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801115a:	4b34      	ldr	r3, [pc, #208]	; (801122c <xTaskResumeAll+0x120>)
 801115c:	68db      	ldr	r3, [r3, #12]
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	3318      	adds	r3, #24
 8011166:	4618      	mov	r0, r3
 8011168:	f7fe fe08 	bl	800fd7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	3304      	adds	r3, #4
 8011170:	4618      	mov	r0, r3
 8011172:	f7fe fe03 	bl	800fd7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801117a:	2201      	movs	r2, #1
 801117c:	409a      	lsls	r2, r3
 801117e:	4b2c      	ldr	r3, [pc, #176]	; (8011230 <xTaskResumeAll+0x124>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	4313      	orrs	r3, r2
 8011184:	4a2a      	ldr	r2, [pc, #168]	; (8011230 <xTaskResumeAll+0x124>)
 8011186:	6013      	str	r3, [r2, #0]
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801118c:	4613      	mov	r3, r2
 801118e:	009b      	lsls	r3, r3, #2
 8011190:	4413      	add	r3, r2
 8011192:	009b      	lsls	r3, r3, #2
 8011194:	4a27      	ldr	r2, [pc, #156]	; (8011234 <xTaskResumeAll+0x128>)
 8011196:	441a      	add	r2, r3
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	3304      	adds	r3, #4
 801119c:	4619      	mov	r1, r3
 801119e:	4610      	mov	r0, r2
 80111a0:	f7fe fd8f 	bl	800fcc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111a8:	4b23      	ldr	r3, [pc, #140]	; (8011238 <xTaskResumeAll+0x12c>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111ae:	429a      	cmp	r2, r3
 80111b0:	d302      	bcc.n	80111b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80111b2:	4b22      	ldr	r3, [pc, #136]	; (801123c <xTaskResumeAll+0x130>)
 80111b4:	2201      	movs	r2, #1
 80111b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80111b8:	4b1c      	ldr	r3, [pc, #112]	; (801122c <xTaskResumeAll+0x120>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d1cc      	bne.n	801115a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d001      	beq.n	80111ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80111c6:	f000 fb3b 	bl	8011840 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80111ca:	4b1d      	ldr	r3, [pc, #116]	; (8011240 <xTaskResumeAll+0x134>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d010      	beq.n	80111f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80111d6:	f000 f859 	bl	801128c <xTaskIncrementTick>
 80111da:	4603      	mov	r3, r0
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d002      	beq.n	80111e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80111e0:	4b16      	ldr	r3, [pc, #88]	; (801123c <xTaskResumeAll+0x130>)
 80111e2:	2201      	movs	r2, #1
 80111e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	3b01      	subs	r3, #1
 80111ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d1f1      	bne.n	80111d6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80111f2:	4b13      	ldr	r3, [pc, #76]	; (8011240 <xTaskResumeAll+0x134>)
 80111f4:	2200      	movs	r2, #0
 80111f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80111f8:	4b10      	ldr	r3, [pc, #64]	; (801123c <xTaskResumeAll+0x130>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d009      	beq.n	8011214 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011200:	2301      	movs	r3, #1
 8011202:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011204:	4b0f      	ldr	r3, [pc, #60]	; (8011244 <xTaskResumeAll+0x138>)
 8011206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801120a:	601a      	str	r2, [r3, #0]
 801120c:	f3bf 8f4f 	dsb	sy
 8011210:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011214:	f000 feaa 	bl	8011f6c <vPortExitCritical>

	return xAlreadyYielded;
 8011218:	68bb      	ldr	r3, [r7, #8]
}
 801121a:	4618      	mov	r0, r3
 801121c:	3710      	adds	r7, #16
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}
 8011222:	bf00      	nop
 8011224:	20000470 	.word	0x20000470
 8011228:	20000448 	.word	0x20000448
 801122c:	20000408 	.word	0x20000408
 8011230:	20000450 	.word	0x20000450
 8011234:	2000034c 	.word	0x2000034c
 8011238:	20000348 	.word	0x20000348
 801123c:	2000045c 	.word	0x2000045c
 8011240:	20000458 	.word	0x20000458
 8011244:	e000ed04 	.word	0xe000ed04

08011248 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011248:	b480      	push	{r7}
 801124a:	b083      	sub	sp, #12
 801124c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801124e:	4b05      	ldr	r3, [pc, #20]	; (8011264 <xTaskGetTickCount+0x1c>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011254:	687b      	ldr	r3, [r7, #4]
}
 8011256:	4618      	mov	r0, r3
 8011258:	370c      	adds	r7, #12
 801125a:	46bd      	mov	sp, r7
 801125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011260:	4770      	bx	lr
 8011262:	bf00      	nop
 8011264:	2000044c 	.word	0x2000044c

08011268 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b082      	sub	sp, #8
 801126c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801126e:	f000 ff2b 	bl	80120c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011272:	2300      	movs	r3, #0
 8011274:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011276:	4b04      	ldr	r3, [pc, #16]	; (8011288 <xTaskGetTickCountFromISR+0x20>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801127c:	683b      	ldr	r3, [r7, #0]
}
 801127e:	4618      	mov	r0, r3
 8011280:	3708      	adds	r7, #8
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	2000044c 	.word	0x2000044c

0801128c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b086      	sub	sp, #24
 8011290:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011292:	2300      	movs	r3, #0
 8011294:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011296:	4b4f      	ldr	r3, [pc, #316]	; (80113d4 <xTaskIncrementTick+0x148>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	2b00      	cmp	r3, #0
 801129c:	f040 8089 	bne.w	80113b2 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80112a0:	4b4d      	ldr	r3, [pc, #308]	; (80113d8 <xTaskIncrementTick+0x14c>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	3301      	adds	r3, #1
 80112a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80112a8:	4a4b      	ldr	r2, [pc, #300]	; (80113d8 <xTaskIncrementTick+0x14c>)
 80112aa:	693b      	ldr	r3, [r7, #16]
 80112ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80112ae:	693b      	ldr	r3, [r7, #16]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d121      	bne.n	80112f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80112b4:	4b49      	ldr	r3, [pc, #292]	; (80113dc <xTaskIncrementTick+0x150>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d00b      	beq.n	80112d6 <xTaskIncrementTick+0x4a>
 80112be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c2:	b672      	cpsid	i
 80112c4:	f383 8811 	msr	BASEPRI, r3
 80112c8:	f3bf 8f6f 	isb	sy
 80112cc:	f3bf 8f4f 	dsb	sy
 80112d0:	b662      	cpsie	i
 80112d2:	603b      	str	r3, [r7, #0]
 80112d4:	e7fe      	b.n	80112d4 <xTaskIncrementTick+0x48>
 80112d6:	4b41      	ldr	r3, [pc, #260]	; (80113dc <xTaskIncrementTick+0x150>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	60fb      	str	r3, [r7, #12]
 80112dc:	4b40      	ldr	r3, [pc, #256]	; (80113e0 <xTaskIncrementTick+0x154>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	4a3e      	ldr	r2, [pc, #248]	; (80113dc <xTaskIncrementTick+0x150>)
 80112e2:	6013      	str	r3, [r2, #0]
 80112e4:	4a3e      	ldr	r2, [pc, #248]	; (80113e0 <xTaskIncrementTick+0x154>)
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	6013      	str	r3, [r2, #0]
 80112ea:	4b3e      	ldr	r3, [pc, #248]	; (80113e4 <xTaskIncrementTick+0x158>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	3301      	adds	r3, #1
 80112f0:	4a3c      	ldr	r2, [pc, #240]	; (80113e4 <xTaskIncrementTick+0x158>)
 80112f2:	6013      	str	r3, [r2, #0]
 80112f4:	f000 faa4 	bl	8011840 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80112f8:	4b3b      	ldr	r3, [pc, #236]	; (80113e8 <xTaskIncrementTick+0x15c>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	693a      	ldr	r2, [r7, #16]
 80112fe:	429a      	cmp	r2, r3
 8011300:	d348      	bcc.n	8011394 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011302:	4b36      	ldr	r3, [pc, #216]	; (80113dc <xTaskIncrementTick+0x150>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d104      	bne.n	8011316 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801130c:	4b36      	ldr	r3, [pc, #216]	; (80113e8 <xTaskIncrementTick+0x15c>)
 801130e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011312:	601a      	str	r2, [r3, #0]
					break;
 8011314:	e03e      	b.n	8011394 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011316:	4b31      	ldr	r3, [pc, #196]	; (80113dc <xTaskIncrementTick+0x150>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	68db      	ldr	r3, [r3, #12]
 801131c:	68db      	ldr	r3, [r3, #12]
 801131e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	685b      	ldr	r3, [r3, #4]
 8011324:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011326:	693a      	ldr	r2, [r7, #16]
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	429a      	cmp	r2, r3
 801132c:	d203      	bcs.n	8011336 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801132e:	4a2e      	ldr	r2, [pc, #184]	; (80113e8 <xTaskIncrementTick+0x15c>)
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011334:	e02e      	b.n	8011394 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011336:	68bb      	ldr	r3, [r7, #8]
 8011338:	3304      	adds	r3, #4
 801133a:	4618      	mov	r0, r3
 801133c:	f7fe fd1e 	bl	800fd7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011344:	2b00      	cmp	r3, #0
 8011346:	d004      	beq.n	8011352 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	3318      	adds	r3, #24
 801134c:	4618      	mov	r0, r3
 801134e:	f7fe fd15 	bl	800fd7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011356:	2201      	movs	r2, #1
 8011358:	409a      	lsls	r2, r3
 801135a:	4b24      	ldr	r3, [pc, #144]	; (80113ec <xTaskIncrementTick+0x160>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	4313      	orrs	r3, r2
 8011360:	4a22      	ldr	r2, [pc, #136]	; (80113ec <xTaskIncrementTick+0x160>)
 8011362:	6013      	str	r3, [r2, #0]
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011368:	4613      	mov	r3, r2
 801136a:	009b      	lsls	r3, r3, #2
 801136c:	4413      	add	r3, r2
 801136e:	009b      	lsls	r3, r3, #2
 8011370:	4a1f      	ldr	r2, [pc, #124]	; (80113f0 <xTaskIncrementTick+0x164>)
 8011372:	441a      	add	r2, r3
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	3304      	adds	r3, #4
 8011378:	4619      	mov	r1, r3
 801137a:	4610      	mov	r0, r2
 801137c:	f7fe fca1 	bl	800fcc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011384:	4b1b      	ldr	r3, [pc, #108]	; (80113f4 <xTaskIncrementTick+0x168>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801138a:	429a      	cmp	r2, r3
 801138c:	d3b9      	bcc.n	8011302 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801138e:	2301      	movs	r3, #1
 8011390:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011392:	e7b6      	b.n	8011302 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011394:	4b17      	ldr	r3, [pc, #92]	; (80113f4 <xTaskIncrementTick+0x168>)
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801139a:	4915      	ldr	r1, [pc, #84]	; (80113f0 <xTaskIncrementTick+0x164>)
 801139c:	4613      	mov	r3, r2
 801139e:	009b      	lsls	r3, r3, #2
 80113a0:	4413      	add	r3, r2
 80113a2:	009b      	lsls	r3, r3, #2
 80113a4:	440b      	add	r3, r1
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	2b01      	cmp	r3, #1
 80113aa:	d907      	bls.n	80113bc <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80113ac:	2301      	movs	r3, #1
 80113ae:	617b      	str	r3, [r7, #20]
 80113b0:	e004      	b.n	80113bc <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80113b2:	4b11      	ldr	r3, [pc, #68]	; (80113f8 <xTaskIncrementTick+0x16c>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	3301      	adds	r3, #1
 80113b8:	4a0f      	ldr	r2, [pc, #60]	; (80113f8 <xTaskIncrementTick+0x16c>)
 80113ba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80113bc:	4b0f      	ldr	r3, [pc, #60]	; (80113fc <xTaskIncrementTick+0x170>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d001      	beq.n	80113c8 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 80113c4:	2301      	movs	r3, #1
 80113c6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80113c8:	697b      	ldr	r3, [r7, #20]
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	3718      	adds	r7, #24
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}
 80113d2:	bf00      	nop
 80113d4:	20000470 	.word	0x20000470
 80113d8:	2000044c 	.word	0x2000044c
 80113dc:	20000400 	.word	0x20000400
 80113e0:	20000404 	.word	0x20000404
 80113e4:	20000460 	.word	0x20000460
 80113e8:	20000468 	.word	0x20000468
 80113ec:	20000450 	.word	0x20000450
 80113f0:	2000034c 	.word	0x2000034c
 80113f4:	20000348 	.word	0x20000348
 80113f8:	20000458 	.word	0x20000458
 80113fc:	2000045c 	.word	0x2000045c

08011400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011400:	b480      	push	{r7}
 8011402:	b087      	sub	sp, #28
 8011404:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011406:	4b27      	ldr	r3, [pc, #156]	; (80114a4 <vTaskSwitchContext+0xa4>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d003      	beq.n	8011416 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801140e:	4b26      	ldr	r3, [pc, #152]	; (80114a8 <vTaskSwitchContext+0xa8>)
 8011410:	2201      	movs	r2, #1
 8011412:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011414:	e040      	b.n	8011498 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8011416:	4b24      	ldr	r3, [pc, #144]	; (80114a8 <vTaskSwitchContext+0xa8>)
 8011418:	2200      	movs	r2, #0
 801141a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801141c:	4b23      	ldr	r3, [pc, #140]	; (80114ac <vTaskSwitchContext+0xac>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	fab3 f383 	clz	r3, r3
 8011428:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801142a:	7afb      	ldrb	r3, [r7, #11]
 801142c:	f1c3 031f 	rsb	r3, r3, #31
 8011430:	617b      	str	r3, [r7, #20]
 8011432:	491f      	ldr	r1, [pc, #124]	; (80114b0 <vTaskSwitchContext+0xb0>)
 8011434:	697a      	ldr	r2, [r7, #20]
 8011436:	4613      	mov	r3, r2
 8011438:	009b      	lsls	r3, r3, #2
 801143a:	4413      	add	r3, r2
 801143c:	009b      	lsls	r3, r3, #2
 801143e:	440b      	add	r3, r1
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d10b      	bne.n	801145e <vTaskSwitchContext+0x5e>
	__asm volatile
 8011446:	f04f 0350 	mov.w	r3, #80	; 0x50
 801144a:	b672      	cpsid	i
 801144c:	f383 8811 	msr	BASEPRI, r3
 8011450:	f3bf 8f6f 	isb	sy
 8011454:	f3bf 8f4f 	dsb	sy
 8011458:	b662      	cpsie	i
 801145a:	607b      	str	r3, [r7, #4]
 801145c:	e7fe      	b.n	801145c <vTaskSwitchContext+0x5c>
 801145e:	697a      	ldr	r2, [r7, #20]
 8011460:	4613      	mov	r3, r2
 8011462:	009b      	lsls	r3, r3, #2
 8011464:	4413      	add	r3, r2
 8011466:	009b      	lsls	r3, r3, #2
 8011468:	4a11      	ldr	r2, [pc, #68]	; (80114b0 <vTaskSwitchContext+0xb0>)
 801146a:	4413      	add	r3, r2
 801146c:	613b      	str	r3, [r7, #16]
 801146e:	693b      	ldr	r3, [r7, #16]
 8011470:	685b      	ldr	r3, [r3, #4]
 8011472:	685a      	ldr	r2, [r3, #4]
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	605a      	str	r2, [r3, #4]
 8011478:	693b      	ldr	r3, [r7, #16]
 801147a:	685a      	ldr	r2, [r3, #4]
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	3308      	adds	r3, #8
 8011480:	429a      	cmp	r2, r3
 8011482:	d104      	bne.n	801148e <vTaskSwitchContext+0x8e>
 8011484:	693b      	ldr	r3, [r7, #16]
 8011486:	685b      	ldr	r3, [r3, #4]
 8011488:	685a      	ldr	r2, [r3, #4]
 801148a:	693b      	ldr	r3, [r7, #16]
 801148c:	605a      	str	r2, [r3, #4]
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	685b      	ldr	r3, [r3, #4]
 8011492:	68db      	ldr	r3, [r3, #12]
 8011494:	4a07      	ldr	r2, [pc, #28]	; (80114b4 <vTaskSwitchContext+0xb4>)
 8011496:	6013      	str	r3, [r2, #0]
}
 8011498:	bf00      	nop
 801149a:	371c      	adds	r7, #28
 801149c:	46bd      	mov	sp, r7
 801149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a2:	4770      	bx	lr
 80114a4:	20000470 	.word	0x20000470
 80114a8:	2000045c 	.word	0x2000045c
 80114ac:	20000450 	.word	0x20000450
 80114b0:	2000034c 	.word	0x2000034c
 80114b4:	20000348 	.word	0x20000348

080114b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b084      	sub	sp, #16
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d10b      	bne.n	80114e0 <vTaskPlaceOnEventList+0x28>
 80114c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114cc:	b672      	cpsid	i
 80114ce:	f383 8811 	msr	BASEPRI, r3
 80114d2:	f3bf 8f6f 	isb	sy
 80114d6:	f3bf 8f4f 	dsb	sy
 80114da:	b662      	cpsie	i
 80114dc:	60fb      	str	r3, [r7, #12]
 80114de:	e7fe      	b.n	80114de <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80114e0:	4b07      	ldr	r3, [pc, #28]	; (8011500 <vTaskPlaceOnEventList+0x48>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	3318      	adds	r3, #24
 80114e6:	4619      	mov	r1, r3
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	f7fe fc0e 	bl	800fd0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80114ee:	2101      	movs	r1, #1
 80114f0:	6838      	ldr	r0, [r7, #0]
 80114f2:	f000 fb9b 	bl	8011c2c <prvAddCurrentTaskToDelayedList>
}
 80114f6:	bf00      	nop
 80114f8:	3710      	adds	r7, #16
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	20000348 	.word	0x20000348

08011504 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b086      	sub	sp, #24
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	68db      	ldr	r3, [r3, #12]
 8011512:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011514:	693b      	ldr	r3, [r7, #16]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d10b      	bne.n	8011532 <xTaskRemoveFromEventList+0x2e>
 801151a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801151e:	b672      	cpsid	i
 8011520:	f383 8811 	msr	BASEPRI, r3
 8011524:	f3bf 8f6f 	isb	sy
 8011528:	f3bf 8f4f 	dsb	sy
 801152c:	b662      	cpsie	i
 801152e:	60fb      	str	r3, [r7, #12]
 8011530:	e7fe      	b.n	8011530 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011532:	693b      	ldr	r3, [r7, #16]
 8011534:	3318      	adds	r3, #24
 8011536:	4618      	mov	r0, r3
 8011538:	f7fe fc20 	bl	800fd7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801153c:	4b1d      	ldr	r3, [pc, #116]	; (80115b4 <xTaskRemoveFromEventList+0xb0>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d11c      	bne.n	801157e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	3304      	adds	r3, #4
 8011548:	4618      	mov	r0, r3
 801154a:	f7fe fc17 	bl	800fd7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011552:	2201      	movs	r2, #1
 8011554:	409a      	lsls	r2, r3
 8011556:	4b18      	ldr	r3, [pc, #96]	; (80115b8 <xTaskRemoveFromEventList+0xb4>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	4313      	orrs	r3, r2
 801155c:	4a16      	ldr	r2, [pc, #88]	; (80115b8 <xTaskRemoveFromEventList+0xb4>)
 801155e:	6013      	str	r3, [r2, #0]
 8011560:	693b      	ldr	r3, [r7, #16]
 8011562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011564:	4613      	mov	r3, r2
 8011566:	009b      	lsls	r3, r3, #2
 8011568:	4413      	add	r3, r2
 801156a:	009b      	lsls	r3, r3, #2
 801156c:	4a13      	ldr	r2, [pc, #76]	; (80115bc <xTaskRemoveFromEventList+0xb8>)
 801156e:	441a      	add	r2, r3
 8011570:	693b      	ldr	r3, [r7, #16]
 8011572:	3304      	adds	r3, #4
 8011574:	4619      	mov	r1, r3
 8011576:	4610      	mov	r0, r2
 8011578:	f7fe fba3 	bl	800fcc2 <vListInsertEnd>
 801157c:	e005      	b.n	801158a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801157e:	693b      	ldr	r3, [r7, #16]
 8011580:	3318      	adds	r3, #24
 8011582:	4619      	mov	r1, r3
 8011584:	480e      	ldr	r0, [pc, #56]	; (80115c0 <xTaskRemoveFromEventList+0xbc>)
 8011586:	f7fe fb9c 	bl	800fcc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801158a:	693b      	ldr	r3, [r7, #16]
 801158c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801158e:	4b0d      	ldr	r3, [pc, #52]	; (80115c4 <xTaskRemoveFromEventList+0xc0>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011594:	429a      	cmp	r2, r3
 8011596:	d905      	bls.n	80115a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011598:	2301      	movs	r3, #1
 801159a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801159c:	4b0a      	ldr	r3, [pc, #40]	; (80115c8 <xTaskRemoveFromEventList+0xc4>)
 801159e:	2201      	movs	r2, #1
 80115a0:	601a      	str	r2, [r3, #0]
 80115a2:	e001      	b.n	80115a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80115a4:	2300      	movs	r3, #0
 80115a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80115a8:	697b      	ldr	r3, [r7, #20]
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	3718      	adds	r7, #24
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}
 80115b2:	bf00      	nop
 80115b4:	20000470 	.word	0x20000470
 80115b8:	20000450 	.word	0x20000450
 80115bc:	2000034c 	.word	0x2000034c
 80115c0:	20000408 	.word	0x20000408
 80115c4:	20000348 	.word	0x20000348
 80115c8:	2000045c 	.word	0x2000045c

080115cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80115cc:	b480      	push	{r7}
 80115ce:	b083      	sub	sp, #12
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80115d4:	4b06      	ldr	r3, [pc, #24]	; (80115f0 <vTaskInternalSetTimeOutState+0x24>)
 80115d6:	681a      	ldr	r2, [r3, #0]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80115dc:	4b05      	ldr	r3, [pc, #20]	; (80115f4 <vTaskInternalSetTimeOutState+0x28>)
 80115de:	681a      	ldr	r2, [r3, #0]
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	605a      	str	r2, [r3, #4]
}
 80115e4:	bf00      	nop
 80115e6:	370c      	adds	r7, #12
 80115e8:	46bd      	mov	sp, r7
 80115ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ee:	4770      	bx	lr
 80115f0:	20000460 	.word	0x20000460
 80115f4:	2000044c 	.word	0x2000044c

080115f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b088      	sub	sp, #32
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
 8011600:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d10b      	bne.n	8011620 <xTaskCheckForTimeOut+0x28>
 8011608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801160c:	b672      	cpsid	i
 801160e:	f383 8811 	msr	BASEPRI, r3
 8011612:	f3bf 8f6f 	isb	sy
 8011616:	f3bf 8f4f 	dsb	sy
 801161a:	b662      	cpsie	i
 801161c:	613b      	str	r3, [r7, #16]
 801161e:	e7fe      	b.n	801161e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d10b      	bne.n	801163e <xTaskCheckForTimeOut+0x46>
 8011626:	f04f 0350 	mov.w	r3, #80	; 0x50
 801162a:	b672      	cpsid	i
 801162c:	f383 8811 	msr	BASEPRI, r3
 8011630:	f3bf 8f6f 	isb	sy
 8011634:	f3bf 8f4f 	dsb	sy
 8011638:	b662      	cpsie	i
 801163a:	60fb      	str	r3, [r7, #12]
 801163c:	e7fe      	b.n	801163c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 801163e:	f000 fc63 	bl	8011f08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011642:	4b1d      	ldr	r3, [pc, #116]	; (80116b8 <xTaskCheckForTimeOut+0xc0>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	685b      	ldr	r3, [r3, #4]
 801164c:	69ba      	ldr	r2, [r7, #24]
 801164e:	1ad3      	subs	r3, r2, r3
 8011650:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801165a:	d102      	bne.n	8011662 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801165c:	2300      	movs	r3, #0
 801165e:	61fb      	str	r3, [r7, #28]
 8011660:	e023      	b.n	80116aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	681a      	ldr	r2, [r3, #0]
 8011666:	4b15      	ldr	r3, [pc, #84]	; (80116bc <xTaskCheckForTimeOut+0xc4>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	429a      	cmp	r2, r3
 801166c:	d007      	beq.n	801167e <xTaskCheckForTimeOut+0x86>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	685b      	ldr	r3, [r3, #4]
 8011672:	69ba      	ldr	r2, [r7, #24]
 8011674:	429a      	cmp	r2, r3
 8011676:	d302      	bcc.n	801167e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011678:	2301      	movs	r3, #1
 801167a:	61fb      	str	r3, [r7, #28]
 801167c:	e015      	b.n	80116aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	697a      	ldr	r2, [r7, #20]
 8011684:	429a      	cmp	r2, r3
 8011686:	d20b      	bcs.n	80116a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	1ad2      	subs	r2, r2, r3
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f7ff ff99 	bl	80115cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801169a:	2300      	movs	r3, #0
 801169c:	61fb      	str	r3, [r7, #28]
 801169e:	e004      	b.n	80116aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	2200      	movs	r2, #0
 80116a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80116a6:	2301      	movs	r3, #1
 80116a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80116aa:	f000 fc5f 	bl	8011f6c <vPortExitCritical>

	return xReturn;
 80116ae:	69fb      	ldr	r3, [r7, #28]
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3720      	adds	r7, #32
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}
 80116b8:	2000044c 	.word	0x2000044c
 80116bc:	20000460 	.word	0x20000460

080116c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80116c0:	b480      	push	{r7}
 80116c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80116c4:	4b03      	ldr	r3, [pc, #12]	; (80116d4 <vTaskMissedYield+0x14>)
 80116c6:	2201      	movs	r2, #1
 80116c8:	601a      	str	r2, [r3, #0]
}
 80116ca:	bf00      	nop
 80116cc:	46bd      	mov	sp, r7
 80116ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d2:	4770      	bx	lr
 80116d4:	2000045c 	.word	0x2000045c

080116d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b082      	sub	sp, #8
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80116e0:	f000 f852 	bl	8011788 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80116e4:	4b06      	ldr	r3, [pc, #24]	; (8011700 <prvIdleTask+0x28>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	2b01      	cmp	r3, #1
 80116ea:	d9f9      	bls.n	80116e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80116ec:	4b05      	ldr	r3, [pc, #20]	; (8011704 <prvIdleTask+0x2c>)
 80116ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116f2:	601a      	str	r2, [r3, #0]
 80116f4:	f3bf 8f4f 	dsb	sy
 80116f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80116fc:	e7f0      	b.n	80116e0 <prvIdleTask+0x8>
 80116fe:	bf00      	nop
 8011700:	2000034c 	.word	0x2000034c
 8011704:	e000ed04 	.word	0xe000ed04

08011708 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801170e:	2300      	movs	r3, #0
 8011710:	607b      	str	r3, [r7, #4]
 8011712:	e00c      	b.n	801172e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011714:	687a      	ldr	r2, [r7, #4]
 8011716:	4613      	mov	r3, r2
 8011718:	009b      	lsls	r3, r3, #2
 801171a:	4413      	add	r3, r2
 801171c:	009b      	lsls	r3, r3, #2
 801171e:	4a12      	ldr	r2, [pc, #72]	; (8011768 <prvInitialiseTaskLists+0x60>)
 8011720:	4413      	add	r3, r2
 8011722:	4618      	mov	r0, r3
 8011724:	f7fe faa0 	bl	800fc68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	3301      	adds	r3, #1
 801172c:	607b      	str	r3, [r7, #4]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	2b06      	cmp	r3, #6
 8011732:	d9ef      	bls.n	8011714 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011734:	480d      	ldr	r0, [pc, #52]	; (801176c <prvInitialiseTaskLists+0x64>)
 8011736:	f7fe fa97 	bl	800fc68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801173a:	480d      	ldr	r0, [pc, #52]	; (8011770 <prvInitialiseTaskLists+0x68>)
 801173c:	f7fe fa94 	bl	800fc68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011740:	480c      	ldr	r0, [pc, #48]	; (8011774 <prvInitialiseTaskLists+0x6c>)
 8011742:	f7fe fa91 	bl	800fc68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011746:	480c      	ldr	r0, [pc, #48]	; (8011778 <prvInitialiseTaskLists+0x70>)
 8011748:	f7fe fa8e 	bl	800fc68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801174c:	480b      	ldr	r0, [pc, #44]	; (801177c <prvInitialiseTaskLists+0x74>)
 801174e:	f7fe fa8b 	bl	800fc68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011752:	4b0b      	ldr	r3, [pc, #44]	; (8011780 <prvInitialiseTaskLists+0x78>)
 8011754:	4a05      	ldr	r2, [pc, #20]	; (801176c <prvInitialiseTaskLists+0x64>)
 8011756:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011758:	4b0a      	ldr	r3, [pc, #40]	; (8011784 <prvInitialiseTaskLists+0x7c>)
 801175a:	4a05      	ldr	r2, [pc, #20]	; (8011770 <prvInitialiseTaskLists+0x68>)
 801175c:	601a      	str	r2, [r3, #0]
}
 801175e:	bf00      	nop
 8011760:	3708      	adds	r7, #8
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	2000034c 	.word	0x2000034c
 801176c:	200003d8 	.word	0x200003d8
 8011770:	200003ec 	.word	0x200003ec
 8011774:	20000408 	.word	0x20000408
 8011778:	2000041c 	.word	0x2000041c
 801177c:	20000434 	.word	0x20000434
 8011780:	20000400 	.word	0x20000400
 8011784:	20000404 	.word	0x20000404

08011788 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b082      	sub	sp, #8
 801178c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801178e:	e019      	b.n	80117c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011790:	f000 fbba 	bl	8011f08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011794:	4b0f      	ldr	r3, [pc, #60]	; (80117d4 <prvCheckTasksWaitingTermination+0x4c>)
 8011796:	68db      	ldr	r3, [r3, #12]
 8011798:	68db      	ldr	r3, [r3, #12]
 801179a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	3304      	adds	r3, #4
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7fe faeb 	bl	800fd7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80117a6:	4b0c      	ldr	r3, [pc, #48]	; (80117d8 <prvCheckTasksWaitingTermination+0x50>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	3b01      	subs	r3, #1
 80117ac:	4a0a      	ldr	r2, [pc, #40]	; (80117d8 <prvCheckTasksWaitingTermination+0x50>)
 80117ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80117b0:	4b0a      	ldr	r3, [pc, #40]	; (80117dc <prvCheckTasksWaitingTermination+0x54>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	3b01      	subs	r3, #1
 80117b6:	4a09      	ldr	r2, [pc, #36]	; (80117dc <prvCheckTasksWaitingTermination+0x54>)
 80117b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80117ba:	f000 fbd7 	bl	8011f6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f000 f80e 	bl	80117e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80117c4:	4b05      	ldr	r3, [pc, #20]	; (80117dc <prvCheckTasksWaitingTermination+0x54>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d1e1      	bne.n	8011790 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80117cc:	bf00      	nop
 80117ce:	3708      	adds	r7, #8
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}
 80117d4:	2000041c 	.word	0x2000041c
 80117d8:	20000448 	.word	0x20000448
 80117dc:	20000430 	.word	0x20000430

080117e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b084      	sub	sp, #16
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d108      	bne.n	8011804 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117f6:	4618      	mov	r0, r3
 80117f8:	f000 fd70 	bl	80122dc <vPortFree>
				vPortFree( pxTCB );
 80117fc:	6878      	ldr	r0, [r7, #4]
 80117fe:	f000 fd6d 	bl	80122dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011802:	e019      	b.n	8011838 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801180a:	2b01      	cmp	r3, #1
 801180c:	d103      	bne.n	8011816 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f000 fd64 	bl	80122dc <vPortFree>
	}
 8011814:	e010      	b.n	8011838 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801181c:	2b02      	cmp	r3, #2
 801181e:	d00b      	beq.n	8011838 <prvDeleteTCB+0x58>
 8011820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011824:	b672      	cpsid	i
 8011826:	f383 8811 	msr	BASEPRI, r3
 801182a:	f3bf 8f6f 	isb	sy
 801182e:	f3bf 8f4f 	dsb	sy
 8011832:	b662      	cpsie	i
 8011834:	60fb      	str	r3, [r7, #12]
 8011836:	e7fe      	b.n	8011836 <prvDeleteTCB+0x56>
	}
 8011838:	bf00      	nop
 801183a:	3710      	adds	r7, #16
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}

08011840 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011840:	b480      	push	{r7}
 8011842:	b083      	sub	sp, #12
 8011844:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011846:	4b0c      	ldr	r3, [pc, #48]	; (8011878 <prvResetNextTaskUnblockTime+0x38>)
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d104      	bne.n	801185a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011850:	4b0a      	ldr	r3, [pc, #40]	; (801187c <prvResetNextTaskUnblockTime+0x3c>)
 8011852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011856:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011858:	e008      	b.n	801186c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801185a:	4b07      	ldr	r3, [pc, #28]	; (8011878 <prvResetNextTaskUnblockTime+0x38>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	68db      	ldr	r3, [r3, #12]
 8011860:	68db      	ldr	r3, [r3, #12]
 8011862:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	685b      	ldr	r3, [r3, #4]
 8011868:	4a04      	ldr	r2, [pc, #16]	; (801187c <prvResetNextTaskUnblockTime+0x3c>)
 801186a:	6013      	str	r3, [r2, #0]
}
 801186c:	bf00      	nop
 801186e:	370c      	adds	r7, #12
 8011870:	46bd      	mov	sp, r7
 8011872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011876:	4770      	bx	lr
 8011878:	20000400 	.word	0x20000400
 801187c:	20000468 	.word	0x20000468

08011880 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011880:	b480      	push	{r7}
 8011882:	b083      	sub	sp, #12
 8011884:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011886:	4b0b      	ldr	r3, [pc, #44]	; (80118b4 <xTaskGetSchedulerState+0x34>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d102      	bne.n	8011894 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801188e:	2301      	movs	r3, #1
 8011890:	607b      	str	r3, [r7, #4]
 8011892:	e008      	b.n	80118a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011894:	4b08      	ldr	r3, [pc, #32]	; (80118b8 <xTaskGetSchedulerState+0x38>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d102      	bne.n	80118a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801189c:	2302      	movs	r3, #2
 801189e:	607b      	str	r3, [r7, #4]
 80118a0:	e001      	b.n	80118a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80118a2:	2300      	movs	r3, #0
 80118a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80118a6:	687b      	ldr	r3, [r7, #4]
	}
 80118a8:	4618      	mov	r0, r3
 80118aa:	370c      	adds	r7, #12
 80118ac:	46bd      	mov	sp, r7
 80118ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b2:	4770      	bx	lr
 80118b4:	20000454 	.word	0x20000454
 80118b8:	20000470 	.word	0x20000470

080118bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b084      	sub	sp, #16
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80118c8:	2300      	movs	r3, #0
 80118ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d069      	beq.n	80119a6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118d6:	4b36      	ldr	r3, [pc, #216]	; (80119b0 <xTaskPriorityInherit+0xf4>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118dc:	429a      	cmp	r2, r3
 80118de:	d259      	bcs.n	8011994 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80118e0:	68bb      	ldr	r3, [r7, #8]
 80118e2:	699b      	ldr	r3, [r3, #24]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	db06      	blt.n	80118f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118e8:	4b31      	ldr	r3, [pc, #196]	; (80119b0 <xTaskPriorityInherit+0xf4>)
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ee:	f1c3 0207 	rsb	r2, r3, #7
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	6959      	ldr	r1, [r3, #20]
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118fe:	4613      	mov	r3, r2
 8011900:	009b      	lsls	r3, r3, #2
 8011902:	4413      	add	r3, r2
 8011904:	009b      	lsls	r3, r3, #2
 8011906:	4a2b      	ldr	r2, [pc, #172]	; (80119b4 <xTaskPriorityInherit+0xf8>)
 8011908:	4413      	add	r3, r2
 801190a:	4299      	cmp	r1, r3
 801190c:	d13a      	bne.n	8011984 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801190e:	68bb      	ldr	r3, [r7, #8]
 8011910:	3304      	adds	r3, #4
 8011912:	4618      	mov	r0, r3
 8011914:	f7fe fa32 	bl	800fd7c <uxListRemove>
 8011918:	4603      	mov	r3, r0
 801191a:	2b00      	cmp	r3, #0
 801191c:	d115      	bne.n	801194a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011922:	4924      	ldr	r1, [pc, #144]	; (80119b4 <xTaskPriorityInherit+0xf8>)
 8011924:	4613      	mov	r3, r2
 8011926:	009b      	lsls	r3, r3, #2
 8011928:	4413      	add	r3, r2
 801192a:	009b      	lsls	r3, r3, #2
 801192c:	440b      	add	r3, r1
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d10a      	bne.n	801194a <xTaskPriorityInherit+0x8e>
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011938:	2201      	movs	r2, #1
 801193a:	fa02 f303 	lsl.w	r3, r2, r3
 801193e:	43da      	mvns	r2, r3
 8011940:	4b1d      	ldr	r3, [pc, #116]	; (80119b8 <xTaskPriorityInherit+0xfc>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	4013      	ands	r3, r2
 8011946:	4a1c      	ldr	r2, [pc, #112]	; (80119b8 <xTaskPriorityInherit+0xfc>)
 8011948:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801194a:	4b19      	ldr	r3, [pc, #100]	; (80119b0 <xTaskPriorityInherit+0xf4>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011950:	68bb      	ldr	r3, [r7, #8]
 8011952:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011958:	2201      	movs	r2, #1
 801195a:	409a      	lsls	r2, r3
 801195c:	4b16      	ldr	r3, [pc, #88]	; (80119b8 <xTaskPriorityInherit+0xfc>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	4313      	orrs	r3, r2
 8011962:	4a15      	ldr	r2, [pc, #84]	; (80119b8 <xTaskPriorityInherit+0xfc>)
 8011964:	6013      	str	r3, [r2, #0]
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801196a:	4613      	mov	r3, r2
 801196c:	009b      	lsls	r3, r3, #2
 801196e:	4413      	add	r3, r2
 8011970:	009b      	lsls	r3, r3, #2
 8011972:	4a10      	ldr	r2, [pc, #64]	; (80119b4 <xTaskPriorityInherit+0xf8>)
 8011974:	441a      	add	r2, r3
 8011976:	68bb      	ldr	r3, [r7, #8]
 8011978:	3304      	adds	r3, #4
 801197a:	4619      	mov	r1, r3
 801197c:	4610      	mov	r0, r2
 801197e:	f7fe f9a0 	bl	800fcc2 <vListInsertEnd>
 8011982:	e004      	b.n	801198e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011984:	4b0a      	ldr	r3, [pc, #40]	; (80119b0 <xTaskPriorityInherit+0xf4>)
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801198a:	68bb      	ldr	r3, [r7, #8]
 801198c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801198e:	2301      	movs	r3, #1
 8011990:	60fb      	str	r3, [r7, #12]
 8011992:	e008      	b.n	80119a6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011998:	4b05      	ldr	r3, [pc, #20]	; (80119b0 <xTaskPriorityInherit+0xf4>)
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801199e:	429a      	cmp	r2, r3
 80119a0:	d201      	bcs.n	80119a6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80119a2:	2301      	movs	r3, #1
 80119a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80119a6:	68fb      	ldr	r3, [r7, #12]
	}
 80119a8:	4618      	mov	r0, r3
 80119aa:	3710      	adds	r7, #16
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}
 80119b0:	20000348 	.word	0x20000348
 80119b4:	2000034c 	.word	0x2000034c
 80119b8:	20000450 	.word	0x20000450

080119bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b086      	sub	sp, #24
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80119c8:	2300      	movs	r3, #0
 80119ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d070      	beq.n	8011ab4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80119d2:	4b3b      	ldr	r3, [pc, #236]	; (8011ac0 <xTaskPriorityDisinherit+0x104>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	693a      	ldr	r2, [r7, #16]
 80119d8:	429a      	cmp	r2, r3
 80119da:	d00b      	beq.n	80119f4 <xTaskPriorityDisinherit+0x38>
 80119dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119e0:	b672      	cpsid	i
 80119e2:	f383 8811 	msr	BASEPRI, r3
 80119e6:	f3bf 8f6f 	isb	sy
 80119ea:	f3bf 8f4f 	dsb	sy
 80119ee:	b662      	cpsie	i
 80119f0:	60fb      	str	r3, [r7, #12]
 80119f2:	e7fe      	b.n	80119f2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80119f4:	693b      	ldr	r3, [r7, #16]
 80119f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d10b      	bne.n	8011a14 <xTaskPriorityDisinherit+0x58>
 80119fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a00:	b672      	cpsid	i
 8011a02:	f383 8811 	msr	BASEPRI, r3
 8011a06:	f3bf 8f6f 	isb	sy
 8011a0a:	f3bf 8f4f 	dsb	sy
 8011a0e:	b662      	cpsie	i
 8011a10:	60bb      	str	r3, [r7, #8]
 8011a12:	e7fe      	b.n	8011a12 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a18:	1e5a      	subs	r2, r3, #1
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011a1e:	693b      	ldr	r3, [r7, #16]
 8011a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a26:	429a      	cmp	r2, r3
 8011a28:	d044      	beq.n	8011ab4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d140      	bne.n	8011ab4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	3304      	adds	r3, #4
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7fe f9a0 	bl	800fd7c <uxListRemove>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d115      	bne.n	8011a6e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011a42:	693b      	ldr	r3, [r7, #16]
 8011a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a46:	491f      	ldr	r1, [pc, #124]	; (8011ac4 <xTaskPriorityDisinherit+0x108>)
 8011a48:	4613      	mov	r3, r2
 8011a4a:	009b      	lsls	r3, r3, #2
 8011a4c:	4413      	add	r3, r2
 8011a4e:	009b      	lsls	r3, r3, #2
 8011a50:	440b      	add	r3, r1
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d10a      	bne.n	8011a6e <xTaskPriorityDisinherit+0xb2>
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a5c:	2201      	movs	r2, #1
 8011a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8011a62:	43da      	mvns	r2, r3
 8011a64:	4b18      	ldr	r3, [pc, #96]	; (8011ac8 <xTaskPriorityDisinherit+0x10c>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	4013      	ands	r3, r2
 8011a6a:	4a17      	ldr	r2, [pc, #92]	; (8011ac8 <xTaskPriorityDisinherit+0x10c>)
 8011a6c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011a6e:	693b      	ldr	r3, [r7, #16]
 8011a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a76:	693b      	ldr	r3, [r7, #16]
 8011a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a7a:	f1c3 0207 	rsb	r2, r3, #7
 8011a7e:	693b      	ldr	r3, [r7, #16]
 8011a80:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011a82:	693b      	ldr	r3, [r7, #16]
 8011a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a86:	2201      	movs	r2, #1
 8011a88:	409a      	lsls	r2, r3
 8011a8a:	4b0f      	ldr	r3, [pc, #60]	; (8011ac8 <xTaskPriorityDisinherit+0x10c>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	4313      	orrs	r3, r2
 8011a90:	4a0d      	ldr	r2, [pc, #52]	; (8011ac8 <xTaskPriorityDisinherit+0x10c>)
 8011a92:	6013      	str	r3, [r2, #0]
 8011a94:	693b      	ldr	r3, [r7, #16]
 8011a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a98:	4613      	mov	r3, r2
 8011a9a:	009b      	lsls	r3, r3, #2
 8011a9c:	4413      	add	r3, r2
 8011a9e:	009b      	lsls	r3, r3, #2
 8011aa0:	4a08      	ldr	r2, [pc, #32]	; (8011ac4 <xTaskPriorityDisinherit+0x108>)
 8011aa2:	441a      	add	r2, r3
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	3304      	adds	r3, #4
 8011aa8:	4619      	mov	r1, r3
 8011aaa:	4610      	mov	r0, r2
 8011aac:	f7fe f909 	bl	800fcc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011ab0:	2301      	movs	r3, #1
 8011ab2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011ab4:	697b      	ldr	r3, [r7, #20]
	}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	3718      	adds	r7, #24
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
 8011abe:	bf00      	nop
 8011ac0:	20000348 	.word	0x20000348
 8011ac4:	2000034c 	.word	0x2000034c
 8011ac8:	20000450 	.word	0x20000450

08011acc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b088      	sub	sp, #32
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
 8011ad4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011ada:	2301      	movs	r3, #1
 8011adc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	f000 8085 	beq.w	8011bf0 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011ae6:	69bb      	ldr	r3, [r7, #24]
 8011ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d10b      	bne.n	8011b06 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8011aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011af2:	b672      	cpsid	i
 8011af4:	f383 8811 	msr	BASEPRI, r3
 8011af8:	f3bf 8f6f 	isb	sy
 8011afc:	f3bf 8f4f 	dsb	sy
 8011b00:	b662      	cpsie	i
 8011b02:	60fb      	str	r3, [r7, #12]
 8011b04:	e7fe      	b.n	8011b04 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011b06:	69bb      	ldr	r3, [r7, #24]
 8011b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b0a:	683a      	ldr	r2, [r7, #0]
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	d902      	bls.n	8011b16 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	61fb      	str	r3, [r7, #28]
 8011b14:	e002      	b.n	8011b1c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011b16:	69bb      	ldr	r3, [r7, #24]
 8011b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b1a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011b1c:	69bb      	ldr	r3, [r7, #24]
 8011b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b20:	69fa      	ldr	r2, [r7, #28]
 8011b22:	429a      	cmp	r2, r3
 8011b24:	d064      	beq.n	8011bf0 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011b26:	69bb      	ldr	r3, [r7, #24]
 8011b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b2a:	697a      	ldr	r2, [r7, #20]
 8011b2c:	429a      	cmp	r2, r3
 8011b2e:	d15f      	bne.n	8011bf0 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011b30:	4b31      	ldr	r3, [pc, #196]	; (8011bf8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	69ba      	ldr	r2, [r7, #24]
 8011b36:	429a      	cmp	r2, r3
 8011b38:	d10b      	bne.n	8011b52 <vTaskPriorityDisinheritAfterTimeout+0x86>
 8011b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b3e:	b672      	cpsid	i
 8011b40:	f383 8811 	msr	BASEPRI, r3
 8011b44:	f3bf 8f6f 	isb	sy
 8011b48:	f3bf 8f4f 	dsb	sy
 8011b4c:	b662      	cpsie	i
 8011b4e:	60bb      	str	r3, [r7, #8]
 8011b50:	e7fe      	b.n	8011b50 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011b52:	69bb      	ldr	r3, [r7, #24]
 8011b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b56:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011b58:	69bb      	ldr	r3, [r7, #24]
 8011b5a:	69fa      	ldr	r2, [r7, #28]
 8011b5c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011b5e:	69bb      	ldr	r3, [r7, #24]
 8011b60:	699b      	ldr	r3, [r3, #24]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	db04      	blt.n	8011b70 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b66:	69fb      	ldr	r3, [r7, #28]
 8011b68:	f1c3 0207 	rsb	r2, r3, #7
 8011b6c:	69bb      	ldr	r3, [r7, #24]
 8011b6e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011b70:	69bb      	ldr	r3, [r7, #24]
 8011b72:	6959      	ldr	r1, [r3, #20]
 8011b74:	693a      	ldr	r2, [r7, #16]
 8011b76:	4613      	mov	r3, r2
 8011b78:	009b      	lsls	r3, r3, #2
 8011b7a:	4413      	add	r3, r2
 8011b7c:	009b      	lsls	r3, r3, #2
 8011b7e:	4a1f      	ldr	r2, [pc, #124]	; (8011bfc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8011b80:	4413      	add	r3, r2
 8011b82:	4299      	cmp	r1, r3
 8011b84:	d134      	bne.n	8011bf0 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b86:	69bb      	ldr	r3, [r7, #24]
 8011b88:	3304      	adds	r3, #4
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	f7fe f8f6 	bl	800fd7c <uxListRemove>
 8011b90:	4603      	mov	r3, r0
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d115      	bne.n	8011bc2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011b96:	69bb      	ldr	r3, [r7, #24]
 8011b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b9a:	4918      	ldr	r1, [pc, #96]	; (8011bfc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8011b9c:	4613      	mov	r3, r2
 8011b9e:	009b      	lsls	r3, r3, #2
 8011ba0:	4413      	add	r3, r2
 8011ba2:	009b      	lsls	r3, r3, #2
 8011ba4:	440b      	add	r3, r1
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d10a      	bne.n	8011bc2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8011bac:	69bb      	ldr	r3, [r7, #24]
 8011bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bb0:	2201      	movs	r2, #1
 8011bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8011bb6:	43da      	mvns	r2, r3
 8011bb8:	4b11      	ldr	r3, [pc, #68]	; (8011c00 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	4013      	ands	r3, r2
 8011bbe:	4a10      	ldr	r2, [pc, #64]	; (8011c00 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011bc0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011bc2:	69bb      	ldr	r3, [r7, #24]
 8011bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bc6:	2201      	movs	r2, #1
 8011bc8:	409a      	lsls	r2, r3
 8011bca:	4b0d      	ldr	r3, [pc, #52]	; (8011c00 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	4313      	orrs	r3, r2
 8011bd0:	4a0b      	ldr	r2, [pc, #44]	; (8011c00 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011bd2:	6013      	str	r3, [r2, #0]
 8011bd4:	69bb      	ldr	r3, [r7, #24]
 8011bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bd8:	4613      	mov	r3, r2
 8011bda:	009b      	lsls	r3, r3, #2
 8011bdc:	4413      	add	r3, r2
 8011bde:	009b      	lsls	r3, r3, #2
 8011be0:	4a06      	ldr	r2, [pc, #24]	; (8011bfc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8011be2:	441a      	add	r2, r3
 8011be4:	69bb      	ldr	r3, [r7, #24]
 8011be6:	3304      	adds	r3, #4
 8011be8:	4619      	mov	r1, r3
 8011bea:	4610      	mov	r0, r2
 8011bec:	f7fe f869 	bl	800fcc2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011bf0:	bf00      	nop
 8011bf2:	3720      	adds	r7, #32
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}
 8011bf8:	20000348 	.word	0x20000348
 8011bfc:	2000034c 	.word	0x2000034c
 8011c00:	20000450 	.word	0x20000450

08011c04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011c04:	b480      	push	{r7}
 8011c06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011c08:	4b07      	ldr	r3, [pc, #28]	; (8011c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d004      	beq.n	8011c1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011c10:	4b05      	ldr	r3, [pc, #20]	; (8011c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011c16:	3201      	adds	r2, #1
 8011c18:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011c1a:	4b03      	ldr	r3, [pc, #12]	; (8011c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
	}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	46bd      	mov	sp, r7
 8011c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c26:	4770      	bx	lr
 8011c28:	20000348 	.word	0x20000348

08011c2c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b084      	sub	sp, #16
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011c36:	4b29      	ldr	r3, [pc, #164]	; (8011cdc <prvAddCurrentTaskToDelayedList+0xb0>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c3c:	4b28      	ldr	r3, [pc, #160]	; (8011ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	3304      	adds	r3, #4
 8011c42:	4618      	mov	r0, r3
 8011c44:	f7fe f89a 	bl	800fd7c <uxListRemove>
 8011c48:	4603      	mov	r3, r0
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d10b      	bne.n	8011c66 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011c4e:	4b24      	ldr	r3, [pc, #144]	; (8011ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c54:	2201      	movs	r2, #1
 8011c56:	fa02 f303 	lsl.w	r3, r2, r3
 8011c5a:	43da      	mvns	r2, r3
 8011c5c:	4b21      	ldr	r3, [pc, #132]	; (8011ce4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	4013      	ands	r3, r2
 8011c62:	4a20      	ldr	r2, [pc, #128]	; (8011ce4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011c64:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c6c:	d10a      	bne.n	8011c84 <prvAddCurrentTaskToDelayedList+0x58>
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d007      	beq.n	8011c84 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c74:	4b1a      	ldr	r3, [pc, #104]	; (8011ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	3304      	adds	r3, #4
 8011c7a:	4619      	mov	r1, r3
 8011c7c:	481a      	ldr	r0, [pc, #104]	; (8011ce8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011c7e:	f7fe f820 	bl	800fcc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011c82:	e026      	b.n	8011cd2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011c84:	68fa      	ldr	r2, [r7, #12]
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	4413      	add	r3, r2
 8011c8a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011c8c:	4b14      	ldr	r3, [pc, #80]	; (8011ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	68ba      	ldr	r2, [r7, #8]
 8011c92:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011c94:	68ba      	ldr	r2, [r7, #8]
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	429a      	cmp	r2, r3
 8011c9a:	d209      	bcs.n	8011cb0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c9c:	4b13      	ldr	r3, [pc, #76]	; (8011cec <prvAddCurrentTaskToDelayedList+0xc0>)
 8011c9e:	681a      	ldr	r2, [r3, #0]
 8011ca0:	4b0f      	ldr	r3, [pc, #60]	; (8011ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	3304      	adds	r3, #4
 8011ca6:	4619      	mov	r1, r3
 8011ca8:	4610      	mov	r0, r2
 8011caa:	f7fe f82e 	bl	800fd0a <vListInsert>
}
 8011cae:	e010      	b.n	8011cd2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011cb0:	4b0f      	ldr	r3, [pc, #60]	; (8011cf0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011cb2:	681a      	ldr	r2, [r3, #0]
 8011cb4:	4b0a      	ldr	r3, [pc, #40]	; (8011ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	3304      	adds	r3, #4
 8011cba:	4619      	mov	r1, r3
 8011cbc:	4610      	mov	r0, r2
 8011cbe:	f7fe f824 	bl	800fd0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011cc2:	4b0c      	ldr	r3, [pc, #48]	; (8011cf4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	68ba      	ldr	r2, [r7, #8]
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	d202      	bcs.n	8011cd2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011ccc:	4a09      	ldr	r2, [pc, #36]	; (8011cf4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011cce:	68bb      	ldr	r3, [r7, #8]
 8011cd0:	6013      	str	r3, [r2, #0]
}
 8011cd2:	bf00      	nop
 8011cd4:	3710      	adds	r7, #16
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}
 8011cda:	bf00      	nop
 8011cdc:	2000044c 	.word	0x2000044c
 8011ce0:	20000348 	.word	0x20000348
 8011ce4:	20000450 	.word	0x20000450
 8011ce8:	20000434 	.word	0x20000434
 8011cec:	20000404 	.word	0x20000404
 8011cf0:	20000400 	.word	0x20000400
 8011cf4:	20000468 	.word	0x20000468

08011cf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b085      	sub	sp, #20
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	60f8      	str	r0, [r7, #12]
 8011d00:	60b9      	str	r1, [r7, #8]
 8011d02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	3b04      	subs	r3, #4
 8011d08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	3b04      	subs	r3, #4
 8011d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	f023 0201 	bic.w	r2, r3, #1
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	3b04      	subs	r3, #4
 8011d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011d28:	4a0c      	ldr	r2, [pc, #48]	; (8011d5c <pxPortInitialiseStack+0x64>)
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	3b14      	subs	r3, #20
 8011d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011d34:	687a      	ldr	r2, [r7, #4]
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	3b04      	subs	r3, #4
 8011d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	f06f 0202 	mvn.w	r2, #2
 8011d46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	3b20      	subs	r3, #32
 8011d4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011d4e:	68fb      	ldr	r3, [r7, #12]
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3714      	adds	r7, #20
 8011d54:	46bd      	mov	sp, r7
 8011d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5a:	4770      	bx	lr
 8011d5c:	08011d61 	.word	0x08011d61

08011d60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011d60:	b480      	push	{r7}
 8011d62:	b085      	sub	sp, #20
 8011d64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011d66:	2300      	movs	r3, #0
 8011d68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011d6a:	4b13      	ldr	r3, [pc, #76]	; (8011db8 <prvTaskExitError+0x58>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d72:	d00b      	beq.n	8011d8c <prvTaskExitError+0x2c>
 8011d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d78:	b672      	cpsid	i
 8011d7a:	f383 8811 	msr	BASEPRI, r3
 8011d7e:	f3bf 8f6f 	isb	sy
 8011d82:	f3bf 8f4f 	dsb	sy
 8011d86:	b662      	cpsie	i
 8011d88:	60fb      	str	r3, [r7, #12]
 8011d8a:	e7fe      	b.n	8011d8a <prvTaskExitError+0x2a>
 8011d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d90:	b672      	cpsid	i
 8011d92:	f383 8811 	msr	BASEPRI, r3
 8011d96:	f3bf 8f6f 	isb	sy
 8011d9a:	f3bf 8f4f 	dsb	sy
 8011d9e:	b662      	cpsie	i
 8011da0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011da2:	bf00      	nop
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d0fc      	beq.n	8011da4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011daa:	bf00      	nop
 8011dac:	3714      	adds	r7, #20
 8011dae:	46bd      	mov	sp, r7
 8011db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db4:	4770      	bx	lr
 8011db6:	bf00      	nop
 8011db8:	2000004c 	.word	0x2000004c
 8011dbc:	00000000 	.word	0x00000000

08011dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011dc0:	4b07      	ldr	r3, [pc, #28]	; (8011de0 <pxCurrentTCBConst2>)
 8011dc2:	6819      	ldr	r1, [r3, #0]
 8011dc4:	6808      	ldr	r0, [r1, #0]
 8011dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dca:	f380 8809 	msr	PSP, r0
 8011dce:	f3bf 8f6f 	isb	sy
 8011dd2:	f04f 0000 	mov.w	r0, #0
 8011dd6:	f380 8811 	msr	BASEPRI, r0
 8011dda:	4770      	bx	lr
 8011ddc:	f3af 8000 	nop.w

08011de0 <pxCurrentTCBConst2>:
 8011de0:	20000348 	.word	0x20000348
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011de4:	bf00      	nop
 8011de6:	bf00      	nop

08011de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011de8:	4808      	ldr	r0, [pc, #32]	; (8011e0c <prvPortStartFirstTask+0x24>)
 8011dea:	6800      	ldr	r0, [r0, #0]
 8011dec:	6800      	ldr	r0, [r0, #0]
 8011dee:	f380 8808 	msr	MSP, r0
 8011df2:	f04f 0000 	mov.w	r0, #0
 8011df6:	f380 8814 	msr	CONTROL, r0
 8011dfa:	b662      	cpsie	i
 8011dfc:	b661      	cpsie	f
 8011dfe:	f3bf 8f4f 	dsb	sy
 8011e02:	f3bf 8f6f 	isb	sy
 8011e06:	df00      	svc	0
 8011e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011e0a:	bf00      	nop
 8011e0c:	e000ed08 	.word	0xe000ed08

08011e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b084      	sub	sp, #16
 8011e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011e16:	4b36      	ldr	r3, [pc, #216]	; (8011ef0 <xPortStartScheduler+0xe0>)
 8011e18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	781b      	ldrb	r3, [r3, #0]
 8011e1e:	b2db      	uxtb	r3, r3
 8011e20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	22ff      	movs	r2, #255	; 0xff
 8011e26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	781b      	ldrb	r3, [r3, #0]
 8011e2c:	b2db      	uxtb	r3, r3
 8011e2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011e30:	78fb      	ldrb	r3, [r7, #3]
 8011e32:	b2db      	uxtb	r3, r3
 8011e34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011e38:	b2da      	uxtb	r2, r3
 8011e3a:	4b2e      	ldr	r3, [pc, #184]	; (8011ef4 <xPortStartScheduler+0xe4>)
 8011e3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011e3e:	4b2e      	ldr	r3, [pc, #184]	; (8011ef8 <xPortStartScheduler+0xe8>)
 8011e40:	2207      	movs	r2, #7
 8011e42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011e44:	e009      	b.n	8011e5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011e46:	4b2c      	ldr	r3, [pc, #176]	; (8011ef8 <xPortStartScheduler+0xe8>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	3b01      	subs	r3, #1
 8011e4c:	4a2a      	ldr	r2, [pc, #168]	; (8011ef8 <xPortStartScheduler+0xe8>)
 8011e4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011e50:	78fb      	ldrb	r3, [r7, #3]
 8011e52:	b2db      	uxtb	r3, r3
 8011e54:	005b      	lsls	r3, r3, #1
 8011e56:	b2db      	uxtb	r3, r3
 8011e58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011e5a:	78fb      	ldrb	r3, [r7, #3]
 8011e5c:	b2db      	uxtb	r3, r3
 8011e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e62:	2b80      	cmp	r3, #128	; 0x80
 8011e64:	d0ef      	beq.n	8011e46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011e66:	4b24      	ldr	r3, [pc, #144]	; (8011ef8 <xPortStartScheduler+0xe8>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	f1c3 0307 	rsb	r3, r3, #7
 8011e6e:	2b04      	cmp	r3, #4
 8011e70:	d00b      	beq.n	8011e8a <xPortStartScheduler+0x7a>
 8011e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e76:	b672      	cpsid	i
 8011e78:	f383 8811 	msr	BASEPRI, r3
 8011e7c:	f3bf 8f6f 	isb	sy
 8011e80:	f3bf 8f4f 	dsb	sy
 8011e84:	b662      	cpsie	i
 8011e86:	60bb      	str	r3, [r7, #8]
 8011e88:	e7fe      	b.n	8011e88 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011e8a:	4b1b      	ldr	r3, [pc, #108]	; (8011ef8 <xPortStartScheduler+0xe8>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	021b      	lsls	r3, r3, #8
 8011e90:	4a19      	ldr	r2, [pc, #100]	; (8011ef8 <xPortStartScheduler+0xe8>)
 8011e92:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011e94:	4b18      	ldr	r3, [pc, #96]	; (8011ef8 <xPortStartScheduler+0xe8>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011e9c:	4a16      	ldr	r2, [pc, #88]	; (8011ef8 <xPortStartScheduler+0xe8>)
 8011e9e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	b2da      	uxtb	r2, r3
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011ea8:	4b14      	ldr	r3, [pc, #80]	; (8011efc <xPortStartScheduler+0xec>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	4a13      	ldr	r2, [pc, #76]	; (8011efc <xPortStartScheduler+0xec>)
 8011eae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011eb2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011eb4:	4b11      	ldr	r3, [pc, #68]	; (8011efc <xPortStartScheduler+0xec>)
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	4a10      	ldr	r2, [pc, #64]	; (8011efc <xPortStartScheduler+0xec>)
 8011eba:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011ebe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011ec0:	f000 f8d4 	bl	801206c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011ec4:	4b0e      	ldr	r3, [pc, #56]	; (8011f00 <xPortStartScheduler+0xf0>)
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011eca:	f000 f8f3 	bl	80120b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011ece:	4b0d      	ldr	r3, [pc, #52]	; (8011f04 <xPortStartScheduler+0xf4>)
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	4a0c      	ldr	r2, [pc, #48]	; (8011f04 <xPortStartScheduler+0xf4>)
 8011ed4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011ed8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011eda:	f7ff ff85 	bl	8011de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011ede:	f7ff fa8f 	bl	8011400 <vTaskSwitchContext>
	prvTaskExitError();
 8011ee2:	f7ff ff3d 	bl	8011d60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011ee6:	2300      	movs	r3, #0
}
 8011ee8:	4618      	mov	r0, r3
 8011eea:	3710      	adds	r7, #16
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd80      	pop	{r7, pc}
 8011ef0:	e000e400 	.word	0xe000e400
 8011ef4:	20000474 	.word	0x20000474
 8011ef8:	20000478 	.word	0x20000478
 8011efc:	e000ed20 	.word	0xe000ed20
 8011f00:	2000004c 	.word	0x2000004c
 8011f04:	e000ef34 	.word	0xe000ef34

08011f08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b083      	sub	sp, #12
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f12:	b672      	cpsid	i
 8011f14:	f383 8811 	msr	BASEPRI, r3
 8011f18:	f3bf 8f6f 	isb	sy
 8011f1c:	f3bf 8f4f 	dsb	sy
 8011f20:	b662      	cpsie	i
 8011f22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011f24:	4b0f      	ldr	r3, [pc, #60]	; (8011f64 <vPortEnterCritical+0x5c>)
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	3301      	adds	r3, #1
 8011f2a:	4a0e      	ldr	r2, [pc, #56]	; (8011f64 <vPortEnterCritical+0x5c>)
 8011f2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011f2e:	4b0d      	ldr	r3, [pc, #52]	; (8011f64 <vPortEnterCritical+0x5c>)
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	2b01      	cmp	r3, #1
 8011f34:	d110      	bne.n	8011f58 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011f36:	4b0c      	ldr	r3, [pc, #48]	; (8011f68 <vPortEnterCritical+0x60>)
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	b2db      	uxtb	r3, r3
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d00b      	beq.n	8011f58 <vPortEnterCritical+0x50>
 8011f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f44:	b672      	cpsid	i
 8011f46:	f383 8811 	msr	BASEPRI, r3
 8011f4a:	f3bf 8f6f 	isb	sy
 8011f4e:	f3bf 8f4f 	dsb	sy
 8011f52:	b662      	cpsie	i
 8011f54:	603b      	str	r3, [r7, #0]
 8011f56:	e7fe      	b.n	8011f56 <vPortEnterCritical+0x4e>
	}
}
 8011f58:	bf00      	nop
 8011f5a:	370c      	adds	r7, #12
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f62:	4770      	bx	lr
 8011f64:	2000004c 	.word	0x2000004c
 8011f68:	e000ed04 	.word	0xe000ed04

08011f6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b083      	sub	sp, #12
 8011f70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011f72:	4b12      	ldr	r3, [pc, #72]	; (8011fbc <vPortExitCritical+0x50>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d10b      	bne.n	8011f92 <vPortExitCritical+0x26>
 8011f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f7e:	b672      	cpsid	i
 8011f80:	f383 8811 	msr	BASEPRI, r3
 8011f84:	f3bf 8f6f 	isb	sy
 8011f88:	f3bf 8f4f 	dsb	sy
 8011f8c:	b662      	cpsie	i
 8011f8e:	607b      	str	r3, [r7, #4]
 8011f90:	e7fe      	b.n	8011f90 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8011f92:	4b0a      	ldr	r3, [pc, #40]	; (8011fbc <vPortExitCritical+0x50>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	3b01      	subs	r3, #1
 8011f98:	4a08      	ldr	r2, [pc, #32]	; (8011fbc <vPortExitCritical+0x50>)
 8011f9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011f9c:	4b07      	ldr	r3, [pc, #28]	; (8011fbc <vPortExitCritical+0x50>)
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d104      	bne.n	8011fae <vPortExitCritical+0x42>
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011fa8:	683b      	ldr	r3, [r7, #0]
 8011faa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011fae:	bf00      	nop
 8011fb0:	370c      	adds	r7, #12
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb8:	4770      	bx	lr
 8011fba:	bf00      	nop
 8011fbc:	2000004c 	.word	0x2000004c

08011fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011fc0:	f3ef 8009 	mrs	r0, PSP
 8011fc4:	f3bf 8f6f 	isb	sy
 8011fc8:	4b15      	ldr	r3, [pc, #84]	; (8012020 <pxCurrentTCBConst>)
 8011fca:	681a      	ldr	r2, [r3, #0]
 8011fcc:	f01e 0f10 	tst.w	lr, #16
 8011fd0:	bf08      	it	eq
 8011fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fda:	6010      	str	r0, [r2, #0]
 8011fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011fe4:	b672      	cpsid	i
 8011fe6:	f380 8811 	msr	BASEPRI, r0
 8011fea:	f3bf 8f4f 	dsb	sy
 8011fee:	f3bf 8f6f 	isb	sy
 8011ff2:	b662      	cpsie	i
 8011ff4:	f7ff fa04 	bl	8011400 <vTaskSwitchContext>
 8011ff8:	f04f 0000 	mov.w	r0, #0
 8011ffc:	f380 8811 	msr	BASEPRI, r0
 8012000:	bc09      	pop	{r0, r3}
 8012002:	6819      	ldr	r1, [r3, #0]
 8012004:	6808      	ldr	r0, [r1, #0]
 8012006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801200a:	f01e 0f10 	tst.w	lr, #16
 801200e:	bf08      	it	eq
 8012010:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012014:	f380 8809 	msr	PSP, r0
 8012018:	f3bf 8f6f 	isb	sy
 801201c:	4770      	bx	lr
 801201e:	bf00      	nop

08012020 <pxCurrentTCBConst>:
 8012020:	20000348 	.word	0x20000348
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012024:	bf00      	nop
 8012026:	bf00      	nop

08012028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b082      	sub	sp, #8
 801202c:	af00      	add	r7, sp, #0
	__asm volatile
 801202e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012032:	b672      	cpsid	i
 8012034:	f383 8811 	msr	BASEPRI, r3
 8012038:	f3bf 8f6f 	isb	sy
 801203c:	f3bf 8f4f 	dsb	sy
 8012040:	b662      	cpsie	i
 8012042:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012044:	f7ff f922 	bl	801128c <xTaskIncrementTick>
 8012048:	4603      	mov	r3, r0
 801204a:	2b00      	cmp	r3, #0
 801204c:	d003      	beq.n	8012056 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801204e:	4b06      	ldr	r3, [pc, #24]	; (8012068 <xPortSysTickHandler+0x40>)
 8012050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012054:	601a      	str	r2, [r3, #0]
 8012056:	2300      	movs	r3, #0
 8012058:	603b      	str	r3, [r7, #0]
	__asm volatile
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8012060:	bf00      	nop
 8012062:	3708      	adds	r7, #8
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}
 8012068:	e000ed04 	.word	0xe000ed04

0801206c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801206c:	b480      	push	{r7}
 801206e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012070:	4b0b      	ldr	r3, [pc, #44]	; (80120a0 <vPortSetupTimerInterrupt+0x34>)
 8012072:	2200      	movs	r2, #0
 8012074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012076:	4b0b      	ldr	r3, [pc, #44]	; (80120a4 <vPortSetupTimerInterrupt+0x38>)
 8012078:	2200      	movs	r2, #0
 801207a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801207c:	4b0a      	ldr	r3, [pc, #40]	; (80120a8 <vPortSetupTimerInterrupt+0x3c>)
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	4a0a      	ldr	r2, [pc, #40]	; (80120ac <vPortSetupTimerInterrupt+0x40>)
 8012082:	fba2 2303 	umull	r2, r3, r2, r3
 8012086:	099b      	lsrs	r3, r3, #6
 8012088:	4a09      	ldr	r2, [pc, #36]	; (80120b0 <vPortSetupTimerInterrupt+0x44>)
 801208a:	3b01      	subs	r3, #1
 801208c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801208e:	4b04      	ldr	r3, [pc, #16]	; (80120a0 <vPortSetupTimerInterrupt+0x34>)
 8012090:	2207      	movs	r2, #7
 8012092:	601a      	str	r2, [r3, #0]
}
 8012094:	bf00      	nop
 8012096:	46bd      	mov	sp, r7
 8012098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop
 80120a0:	e000e010 	.word	0xe000e010
 80120a4:	e000e018 	.word	0xe000e018
 80120a8:	20000040 	.word	0x20000040
 80120ac:	10624dd3 	.word	0x10624dd3
 80120b0:	e000e014 	.word	0xe000e014

080120b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80120b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80120c4 <vPortEnableVFP+0x10>
 80120b8:	6801      	ldr	r1, [r0, #0]
 80120ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80120be:	6001      	str	r1, [r0, #0]
 80120c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80120c2:	bf00      	nop
 80120c4:	e000ed88 	.word	0xe000ed88

080120c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80120c8:	b480      	push	{r7}
 80120ca:	b085      	sub	sp, #20
 80120cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80120ce:	f3ef 8305 	mrs	r3, IPSR
 80120d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	2b0f      	cmp	r3, #15
 80120d8:	d915      	bls.n	8012106 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80120da:	4a18      	ldr	r2, [pc, #96]	; (801213c <vPortValidateInterruptPriority+0x74>)
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	4413      	add	r3, r2
 80120e0:	781b      	ldrb	r3, [r3, #0]
 80120e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80120e4:	4b16      	ldr	r3, [pc, #88]	; (8012140 <vPortValidateInterruptPriority+0x78>)
 80120e6:	781b      	ldrb	r3, [r3, #0]
 80120e8:	7afa      	ldrb	r2, [r7, #11]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d20b      	bcs.n	8012106 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80120ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120f2:	b672      	cpsid	i
 80120f4:	f383 8811 	msr	BASEPRI, r3
 80120f8:	f3bf 8f6f 	isb	sy
 80120fc:	f3bf 8f4f 	dsb	sy
 8012100:	b662      	cpsie	i
 8012102:	607b      	str	r3, [r7, #4]
 8012104:	e7fe      	b.n	8012104 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012106:	4b0f      	ldr	r3, [pc, #60]	; (8012144 <vPortValidateInterruptPriority+0x7c>)
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801210e:	4b0e      	ldr	r3, [pc, #56]	; (8012148 <vPortValidateInterruptPriority+0x80>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	429a      	cmp	r2, r3
 8012114:	d90b      	bls.n	801212e <vPortValidateInterruptPriority+0x66>
 8012116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801211a:	b672      	cpsid	i
 801211c:	f383 8811 	msr	BASEPRI, r3
 8012120:	f3bf 8f6f 	isb	sy
 8012124:	f3bf 8f4f 	dsb	sy
 8012128:	b662      	cpsie	i
 801212a:	603b      	str	r3, [r7, #0]
 801212c:	e7fe      	b.n	801212c <vPortValidateInterruptPriority+0x64>
	}
 801212e:	bf00      	nop
 8012130:	3714      	adds	r7, #20
 8012132:	46bd      	mov	sp, r7
 8012134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012138:	4770      	bx	lr
 801213a:	bf00      	nop
 801213c:	e000e3f0 	.word	0xe000e3f0
 8012140:	20000474 	.word	0x20000474
 8012144:	e000ed0c 	.word	0xe000ed0c
 8012148:	20000478 	.word	0x20000478

0801214c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b08a      	sub	sp, #40	; 0x28
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012154:	2300      	movs	r3, #0
 8012156:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012158:	f7fe ffca 	bl	80110f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801215c:	4b5a      	ldr	r3, [pc, #360]	; (80122c8 <pvPortMalloc+0x17c>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d101      	bne.n	8012168 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012164:	f000 f916 	bl	8012394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012168:	4b58      	ldr	r3, [pc, #352]	; (80122cc <pvPortMalloc+0x180>)
 801216a:	681a      	ldr	r2, [r3, #0]
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	4013      	ands	r3, r2
 8012170:	2b00      	cmp	r3, #0
 8012172:	f040 8090 	bne.w	8012296 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d01e      	beq.n	80121ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801217c:	2208      	movs	r2, #8
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	4413      	add	r3, r2
 8012182:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f003 0307 	and.w	r3, r3, #7
 801218a:	2b00      	cmp	r3, #0
 801218c:	d015      	beq.n	80121ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f023 0307 	bic.w	r3, r3, #7
 8012194:	3308      	adds	r3, #8
 8012196:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f003 0307 	and.w	r3, r3, #7
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d00b      	beq.n	80121ba <pvPortMalloc+0x6e>
 80121a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a6:	b672      	cpsid	i
 80121a8:	f383 8811 	msr	BASEPRI, r3
 80121ac:	f3bf 8f6f 	isb	sy
 80121b0:	f3bf 8f4f 	dsb	sy
 80121b4:	b662      	cpsie	i
 80121b6:	617b      	str	r3, [r7, #20]
 80121b8:	e7fe      	b.n	80121b8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d06a      	beq.n	8012296 <pvPortMalloc+0x14a>
 80121c0:	4b43      	ldr	r3, [pc, #268]	; (80122d0 <pvPortMalloc+0x184>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	687a      	ldr	r2, [r7, #4]
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d865      	bhi.n	8012296 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80121ca:	4b42      	ldr	r3, [pc, #264]	; (80122d4 <pvPortMalloc+0x188>)
 80121cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80121ce:	4b41      	ldr	r3, [pc, #260]	; (80122d4 <pvPortMalloc+0x188>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80121d4:	e004      	b.n	80121e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80121d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80121da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80121e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e2:	685b      	ldr	r3, [r3, #4]
 80121e4:	687a      	ldr	r2, [r7, #4]
 80121e6:	429a      	cmp	r2, r3
 80121e8:	d903      	bls.n	80121f2 <pvPortMalloc+0xa6>
 80121ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d1f1      	bne.n	80121d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80121f2:	4b35      	ldr	r3, [pc, #212]	; (80122c8 <pvPortMalloc+0x17c>)
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121f8:	429a      	cmp	r2, r3
 80121fa:	d04c      	beq.n	8012296 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80121fc:	6a3b      	ldr	r3, [r7, #32]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	2208      	movs	r2, #8
 8012202:	4413      	add	r3, r2
 8012204:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012208:	681a      	ldr	r2, [r3, #0]
 801220a:	6a3b      	ldr	r3, [r7, #32]
 801220c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012210:	685a      	ldr	r2, [r3, #4]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	1ad2      	subs	r2, r2, r3
 8012216:	2308      	movs	r3, #8
 8012218:	005b      	lsls	r3, r3, #1
 801221a:	429a      	cmp	r2, r3
 801221c:	d920      	bls.n	8012260 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801221e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	4413      	add	r3, r2
 8012224:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012226:	69bb      	ldr	r3, [r7, #24]
 8012228:	f003 0307 	and.w	r3, r3, #7
 801222c:	2b00      	cmp	r3, #0
 801222e:	d00b      	beq.n	8012248 <pvPortMalloc+0xfc>
 8012230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012234:	b672      	cpsid	i
 8012236:	f383 8811 	msr	BASEPRI, r3
 801223a:	f3bf 8f6f 	isb	sy
 801223e:	f3bf 8f4f 	dsb	sy
 8012242:	b662      	cpsie	i
 8012244:	613b      	str	r3, [r7, #16]
 8012246:	e7fe      	b.n	8012246 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801224a:	685a      	ldr	r2, [r3, #4]
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	1ad2      	subs	r2, r2, r3
 8012250:	69bb      	ldr	r3, [r7, #24]
 8012252:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012256:	687a      	ldr	r2, [r7, #4]
 8012258:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801225a:	69b8      	ldr	r0, [r7, #24]
 801225c:	f000 f8fc 	bl	8012458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012260:	4b1b      	ldr	r3, [pc, #108]	; (80122d0 <pvPortMalloc+0x184>)
 8012262:	681a      	ldr	r2, [r3, #0]
 8012264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012266:	685b      	ldr	r3, [r3, #4]
 8012268:	1ad3      	subs	r3, r2, r3
 801226a:	4a19      	ldr	r2, [pc, #100]	; (80122d0 <pvPortMalloc+0x184>)
 801226c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801226e:	4b18      	ldr	r3, [pc, #96]	; (80122d0 <pvPortMalloc+0x184>)
 8012270:	681a      	ldr	r2, [r3, #0]
 8012272:	4b19      	ldr	r3, [pc, #100]	; (80122d8 <pvPortMalloc+0x18c>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	429a      	cmp	r2, r3
 8012278:	d203      	bcs.n	8012282 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801227a:	4b15      	ldr	r3, [pc, #84]	; (80122d0 <pvPortMalloc+0x184>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	4a16      	ldr	r2, [pc, #88]	; (80122d8 <pvPortMalloc+0x18c>)
 8012280:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012284:	685a      	ldr	r2, [r3, #4]
 8012286:	4b11      	ldr	r3, [pc, #68]	; (80122cc <pvPortMalloc+0x180>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	431a      	orrs	r2, r3
 801228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801228e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012292:	2200      	movs	r2, #0
 8012294:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012296:	f7fe ff39 	bl	801110c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801229a:	69fb      	ldr	r3, [r7, #28]
 801229c:	f003 0307 	and.w	r3, r3, #7
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d00b      	beq.n	80122bc <pvPortMalloc+0x170>
 80122a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122a8:	b672      	cpsid	i
 80122aa:	f383 8811 	msr	BASEPRI, r3
 80122ae:	f3bf 8f6f 	isb	sy
 80122b2:	f3bf 8f4f 	dsb	sy
 80122b6:	b662      	cpsie	i
 80122b8:	60fb      	str	r3, [r7, #12]
 80122ba:	e7fe      	b.n	80122ba <pvPortMalloc+0x16e>
	return pvReturn;
 80122bc:	69fb      	ldr	r3, [r7, #28]
}
 80122be:	4618      	mov	r0, r3
 80122c0:	3728      	adds	r7, #40	; 0x28
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}
 80122c6:	bf00      	nop
 80122c8:	20004084 	.word	0x20004084
 80122cc:	20004090 	.word	0x20004090
 80122d0:	20004088 	.word	0x20004088
 80122d4:	2000407c 	.word	0x2000407c
 80122d8:	2000408c 	.word	0x2000408c

080122dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b086      	sub	sp, #24
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d04a      	beq.n	8012384 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80122ee:	2308      	movs	r3, #8
 80122f0:	425b      	negs	r3, r3
 80122f2:	697a      	ldr	r2, [r7, #20]
 80122f4:	4413      	add	r3, r2
 80122f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80122f8:	697b      	ldr	r3, [r7, #20]
 80122fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80122fc:	693b      	ldr	r3, [r7, #16]
 80122fe:	685a      	ldr	r2, [r3, #4]
 8012300:	4b22      	ldr	r3, [pc, #136]	; (801238c <vPortFree+0xb0>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	4013      	ands	r3, r2
 8012306:	2b00      	cmp	r3, #0
 8012308:	d10b      	bne.n	8012322 <vPortFree+0x46>
 801230a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801230e:	b672      	cpsid	i
 8012310:	f383 8811 	msr	BASEPRI, r3
 8012314:	f3bf 8f6f 	isb	sy
 8012318:	f3bf 8f4f 	dsb	sy
 801231c:	b662      	cpsie	i
 801231e:	60fb      	str	r3, [r7, #12]
 8012320:	e7fe      	b.n	8012320 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012322:	693b      	ldr	r3, [r7, #16]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d00b      	beq.n	8012342 <vPortFree+0x66>
 801232a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801232e:	b672      	cpsid	i
 8012330:	f383 8811 	msr	BASEPRI, r3
 8012334:	f3bf 8f6f 	isb	sy
 8012338:	f3bf 8f4f 	dsb	sy
 801233c:	b662      	cpsie	i
 801233e:	60bb      	str	r3, [r7, #8]
 8012340:	e7fe      	b.n	8012340 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	685a      	ldr	r2, [r3, #4]
 8012346:	4b11      	ldr	r3, [pc, #68]	; (801238c <vPortFree+0xb0>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	4013      	ands	r3, r2
 801234c:	2b00      	cmp	r3, #0
 801234e:	d019      	beq.n	8012384 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012350:	693b      	ldr	r3, [r7, #16]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d115      	bne.n	8012384 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012358:	693b      	ldr	r3, [r7, #16]
 801235a:	685a      	ldr	r2, [r3, #4]
 801235c:	4b0b      	ldr	r3, [pc, #44]	; (801238c <vPortFree+0xb0>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	43db      	mvns	r3, r3
 8012362:	401a      	ands	r2, r3
 8012364:	693b      	ldr	r3, [r7, #16]
 8012366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012368:	f7fe fec2 	bl	80110f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801236c:	693b      	ldr	r3, [r7, #16]
 801236e:	685a      	ldr	r2, [r3, #4]
 8012370:	4b07      	ldr	r3, [pc, #28]	; (8012390 <vPortFree+0xb4>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	4413      	add	r3, r2
 8012376:	4a06      	ldr	r2, [pc, #24]	; (8012390 <vPortFree+0xb4>)
 8012378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801237a:	6938      	ldr	r0, [r7, #16]
 801237c:	f000 f86c 	bl	8012458 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012380:	f7fe fec4 	bl	801110c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012384:	bf00      	nop
 8012386:	3718      	adds	r7, #24
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}
 801238c:	20004090 	.word	0x20004090
 8012390:	20004088 	.word	0x20004088

08012394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012394:	b480      	push	{r7}
 8012396:	b085      	sub	sp, #20
 8012398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801239a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801239e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80123a0:	4b27      	ldr	r3, [pc, #156]	; (8012440 <prvHeapInit+0xac>)
 80123a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	f003 0307 	and.w	r3, r3, #7
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d00c      	beq.n	80123c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	3307      	adds	r3, #7
 80123b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	f023 0307 	bic.w	r3, r3, #7
 80123ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80123bc:	68ba      	ldr	r2, [r7, #8]
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	1ad3      	subs	r3, r2, r3
 80123c2:	4a1f      	ldr	r2, [pc, #124]	; (8012440 <prvHeapInit+0xac>)
 80123c4:	4413      	add	r3, r2
 80123c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80123cc:	4a1d      	ldr	r2, [pc, #116]	; (8012444 <prvHeapInit+0xb0>)
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80123d2:	4b1c      	ldr	r3, [pc, #112]	; (8012444 <prvHeapInit+0xb0>)
 80123d4:	2200      	movs	r2, #0
 80123d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	68ba      	ldr	r2, [r7, #8]
 80123dc:	4413      	add	r3, r2
 80123de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80123e0:	2208      	movs	r2, #8
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	1a9b      	subs	r3, r3, r2
 80123e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	f023 0307 	bic.w	r3, r3, #7
 80123ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	4a15      	ldr	r2, [pc, #84]	; (8012448 <prvHeapInit+0xb4>)
 80123f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80123f6:	4b14      	ldr	r3, [pc, #80]	; (8012448 <prvHeapInit+0xb4>)
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	2200      	movs	r2, #0
 80123fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80123fe:	4b12      	ldr	r3, [pc, #72]	; (8012448 <prvHeapInit+0xb4>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	2200      	movs	r2, #0
 8012404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	68fa      	ldr	r2, [r7, #12]
 801240e:	1ad2      	subs	r2, r2, r3
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012414:	4b0c      	ldr	r3, [pc, #48]	; (8012448 <prvHeapInit+0xb4>)
 8012416:	681a      	ldr	r2, [r3, #0]
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	685b      	ldr	r3, [r3, #4]
 8012420:	4a0a      	ldr	r2, [pc, #40]	; (801244c <prvHeapInit+0xb8>)
 8012422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	685b      	ldr	r3, [r3, #4]
 8012428:	4a09      	ldr	r2, [pc, #36]	; (8012450 <prvHeapInit+0xbc>)
 801242a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801242c:	4b09      	ldr	r3, [pc, #36]	; (8012454 <prvHeapInit+0xc0>)
 801242e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012432:	601a      	str	r2, [r3, #0]
}
 8012434:	bf00      	nop
 8012436:	3714      	adds	r7, #20
 8012438:	46bd      	mov	sp, r7
 801243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243e:	4770      	bx	lr
 8012440:	2000047c 	.word	0x2000047c
 8012444:	2000407c 	.word	0x2000407c
 8012448:	20004084 	.word	0x20004084
 801244c:	2000408c 	.word	0x2000408c
 8012450:	20004088 	.word	0x20004088
 8012454:	20004090 	.word	0x20004090

08012458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012458:	b480      	push	{r7}
 801245a:	b085      	sub	sp, #20
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012460:	4b28      	ldr	r3, [pc, #160]	; (8012504 <prvInsertBlockIntoFreeList+0xac>)
 8012462:	60fb      	str	r3, [r7, #12]
 8012464:	e002      	b.n	801246c <prvInsertBlockIntoFreeList+0x14>
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	60fb      	str	r3, [r7, #12]
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	687a      	ldr	r2, [r7, #4]
 8012472:	429a      	cmp	r2, r3
 8012474:	d8f7      	bhi.n	8012466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	685b      	ldr	r3, [r3, #4]
 801247e:	68ba      	ldr	r2, [r7, #8]
 8012480:	4413      	add	r3, r2
 8012482:	687a      	ldr	r2, [r7, #4]
 8012484:	429a      	cmp	r2, r3
 8012486:	d108      	bne.n	801249a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	685a      	ldr	r2, [r3, #4]
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	685b      	ldr	r3, [r3, #4]
 8012490:	441a      	add	r2, r3
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	685b      	ldr	r3, [r3, #4]
 80124a2:	68ba      	ldr	r2, [r7, #8]
 80124a4:	441a      	add	r2, r3
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d118      	bne.n	80124e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	681a      	ldr	r2, [r3, #0]
 80124b2:	4b15      	ldr	r3, [pc, #84]	; (8012508 <prvInsertBlockIntoFreeList+0xb0>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d00d      	beq.n	80124d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	685a      	ldr	r2, [r3, #4]
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	685b      	ldr	r3, [r3, #4]
 80124c4:	441a      	add	r2, r3
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	681a      	ldr	r2, [r3, #0]
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	601a      	str	r2, [r3, #0]
 80124d4:	e008      	b.n	80124e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80124d6:	4b0c      	ldr	r3, [pc, #48]	; (8012508 <prvInsertBlockIntoFreeList+0xb0>)
 80124d8:	681a      	ldr	r2, [r3, #0]
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	601a      	str	r2, [r3, #0]
 80124de:	e003      	b.n	80124e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	681a      	ldr	r2, [r3, #0]
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80124e8:	68fa      	ldr	r2, [r7, #12]
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	429a      	cmp	r2, r3
 80124ee:	d002      	beq.n	80124f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	687a      	ldr	r2, [r7, #4]
 80124f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80124f6:	bf00      	nop
 80124f8:	3714      	adds	r7, #20
 80124fa:	46bd      	mov	sp, r7
 80124fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012500:	4770      	bx	lr
 8012502:	bf00      	nop
 8012504:	2000407c 	.word	0x2000407c
 8012508:	20004084 	.word	0x20004084

0801250c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b084      	sub	sp, #16
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
 8012514:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012516:	f008 ffcd 	bl	801b4b4 <sys_timeouts_sleeptime>
 801251a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012522:	d10b      	bne.n	801253c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012524:	4813      	ldr	r0, [pc, #76]	; (8012574 <tcpip_timeouts_mbox_fetch+0x68>)
 8012526:	f00b fd36 	bl	801df96 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801252a:	2200      	movs	r2, #0
 801252c:	6839      	ldr	r1, [r7, #0]
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f00b fca8 	bl	801de84 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012534:	480f      	ldr	r0, [pc, #60]	; (8012574 <tcpip_timeouts_mbox_fetch+0x68>)
 8012536:	f00b fd1f 	bl	801df78 <sys_mutex_lock>
    return;
 801253a:	e018      	b.n	801256e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d102      	bne.n	8012548 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012542:	f008 ff7d 	bl	801b440 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012546:	e7e6      	b.n	8012516 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012548:	480a      	ldr	r0, [pc, #40]	; (8012574 <tcpip_timeouts_mbox_fetch+0x68>)
 801254a:	f00b fd24 	bl	801df96 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801254e:	68fa      	ldr	r2, [r7, #12]
 8012550:	6839      	ldr	r1, [r7, #0]
 8012552:	6878      	ldr	r0, [r7, #4]
 8012554:	f00b fc96 	bl	801de84 <sys_arch_mbox_fetch>
 8012558:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801255a:	4806      	ldr	r0, [pc, #24]	; (8012574 <tcpip_timeouts_mbox_fetch+0x68>)
 801255c:	f00b fd0c 	bl	801df78 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012560:	68bb      	ldr	r3, [r7, #8]
 8012562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012566:	d102      	bne.n	801256e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012568:	f008 ff6a 	bl	801b440 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801256c:	e7d3      	b.n	8012516 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801256e:	3710      	adds	r7, #16
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}
 8012574:	20007df0 	.word	0x20007df0

08012578 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b084      	sub	sp, #16
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012580:	4810      	ldr	r0, [pc, #64]	; (80125c4 <tcpip_thread+0x4c>)
 8012582:	f00b fcf9 	bl	801df78 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012586:	4b10      	ldr	r3, [pc, #64]	; (80125c8 <tcpip_thread+0x50>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d005      	beq.n	801259a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801258e:	4b0e      	ldr	r3, [pc, #56]	; (80125c8 <tcpip_thread+0x50>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	4a0e      	ldr	r2, [pc, #56]	; (80125cc <tcpip_thread+0x54>)
 8012594:	6812      	ldr	r2, [r2, #0]
 8012596:	4610      	mov	r0, r2
 8012598:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801259a:	f107 030c 	add.w	r3, r7, #12
 801259e:	4619      	mov	r1, r3
 80125a0:	480b      	ldr	r0, [pc, #44]	; (80125d0 <tcpip_thread+0x58>)
 80125a2:	f7ff ffb3 	bl	801250c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d106      	bne.n	80125ba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80125ac:	4b09      	ldr	r3, [pc, #36]	; (80125d4 <tcpip_thread+0x5c>)
 80125ae:	2291      	movs	r2, #145	; 0x91
 80125b0:	4909      	ldr	r1, [pc, #36]	; (80125d8 <tcpip_thread+0x60>)
 80125b2:	480a      	ldr	r0, [pc, #40]	; (80125dc <tcpip_thread+0x64>)
 80125b4:	f00b fd86 	bl	801e0c4 <iprintf>
      continue;
 80125b8:	e003      	b.n	80125c2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	4618      	mov	r0, r3
 80125be:	f000 f80f 	bl	80125e0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80125c2:	e7ea      	b.n	801259a <tcpip_thread+0x22>
 80125c4:	20007df0 	.word	0x20007df0
 80125c8:	20004094 	.word	0x20004094
 80125cc:	20004098 	.word	0x20004098
 80125d0:	2000409c 	.word	0x2000409c
 80125d4:	0801f028 	.word	0x0801f028
 80125d8:	0801f058 	.word	0x0801f058
 80125dc:	0801f078 	.word	0x0801f078

080125e0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b082      	sub	sp, #8
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	781b      	ldrb	r3, [r3, #0]
 80125ec:	2b01      	cmp	r3, #1
 80125ee:	d018      	beq.n	8012622 <tcpip_thread_handle_msg+0x42>
 80125f0:	2b02      	cmp	r3, #2
 80125f2:	d021      	beq.n	8012638 <tcpip_thread_handle_msg+0x58>
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d126      	bne.n	8012646 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	68db      	ldr	r3, [r3, #12]
 80125fc:	687a      	ldr	r2, [r7, #4]
 80125fe:	6850      	ldr	r0, [r2, #4]
 8012600:	687a      	ldr	r2, [r7, #4]
 8012602:	6892      	ldr	r2, [r2, #8]
 8012604:	4611      	mov	r1, r2
 8012606:	4798      	blx	r3
 8012608:	4603      	mov	r3, r0
 801260a:	2b00      	cmp	r3, #0
 801260c:	d004      	beq.n	8012618 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	4618      	mov	r0, r3
 8012614:	f002 fb10 	bl	8014c38 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012618:	6879      	ldr	r1, [r7, #4]
 801261a:	2009      	movs	r0, #9
 801261c:	f001 fc6c 	bl	8013ef8 <memp_free>
      break;
 8012620:	e018      	b.n	8012654 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	685b      	ldr	r3, [r3, #4]
 8012626:	687a      	ldr	r2, [r7, #4]
 8012628:	6892      	ldr	r2, [r2, #8]
 801262a:	4610      	mov	r0, r2
 801262c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801262e:	6879      	ldr	r1, [r7, #4]
 8012630:	2008      	movs	r0, #8
 8012632:	f001 fc61 	bl	8013ef8 <memp_free>
      break;
 8012636:	e00d      	b.n	8012654 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	685b      	ldr	r3, [r3, #4]
 801263c:	687a      	ldr	r2, [r7, #4]
 801263e:	6892      	ldr	r2, [r2, #8]
 8012640:	4610      	mov	r0, r2
 8012642:	4798      	blx	r3
      break;
 8012644:	e006      	b.n	8012654 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012646:	4b05      	ldr	r3, [pc, #20]	; (801265c <tcpip_thread_handle_msg+0x7c>)
 8012648:	22cf      	movs	r2, #207	; 0xcf
 801264a:	4905      	ldr	r1, [pc, #20]	; (8012660 <tcpip_thread_handle_msg+0x80>)
 801264c:	4805      	ldr	r0, [pc, #20]	; (8012664 <tcpip_thread_handle_msg+0x84>)
 801264e:	f00b fd39 	bl	801e0c4 <iprintf>
      break;
 8012652:	bf00      	nop
  }
}
 8012654:	bf00      	nop
 8012656:	3708      	adds	r7, #8
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}
 801265c:	0801f028 	.word	0x0801f028
 8012660:	0801f058 	.word	0x0801f058
 8012664:	0801f078 	.word	0x0801f078

08012668 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b086      	sub	sp, #24
 801266c:	af00      	add	r7, sp, #0
 801266e:	60f8      	str	r0, [r7, #12]
 8012670:	60b9      	str	r1, [r7, #8]
 8012672:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012674:	481a      	ldr	r0, [pc, #104]	; (80126e0 <tcpip_inpkt+0x78>)
 8012676:	f00b fc44 	bl	801df02 <sys_mbox_valid>
 801267a:	4603      	mov	r3, r0
 801267c:	2b00      	cmp	r3, #0
 801267e:	d105      	bne.n	801268c <tcpip_inpkt+0x24>
 8012680:	4b18      	ldr	r3, [pc, #96]	; (80126e4 <tcpip_inpkt+0x7c>)
 8012682:	22fc      	movs	r2, #252	; 0xfc
 8012684:	4918      	ldr	r1, [pc, #96]	; (80126e8 <tcpip_inpkt+0x80>)
 8012686:	4819      	ldr	r0, [pc, #100]	; (80126ec <tcpip_inpkt+0x84>)
 8012688:	f00b fd1c 	bl	801e0c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801268c:	2009      	movs	r0, #9
 801268e:	f001 fbe1 	bl	8013e54 <memp_malloc>
 8012692:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012694:	697b      	ldr	r3, [r7, #20]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d102      	bne.n	80126a0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801269a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801269e:	e01a      	b.n	80126d6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80126a0:	697b      	ldr	r3, [r7, #20]
 80126a2:	2200      	movs	r2, #0
 80126a4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	68fa      	ldr	r2, [r7, #12]
 80126aa:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	68ba      	ldr	r2, [r7, #8]
 80126b0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80126b2:	697b      	ldr	r3, [r7, #20]
 80126b4:	687a      	ldr	r2, [r7, #4]
 80126b6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80126b8:	6979      	ldr	r1, [r7, #20]
 80126ba:	4809      	ldr	r0, [pc, #36]	; (80126e0 <tcpip_inpkt+0x78>)
 80126bc:	f00b fbc8 	bl	801de50 <sys_mbox_trypost>
 80126c0:	4603      	mov	r3, r0
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d006      	beq.n	80126d4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80126c6:	6979      	ldr	r1, [r7, #20]
 80126c8:	2009      	movs	r0, #9
 80126ca:	f001 fc15 	bl	8013ef8 <memp_free>
    return ERR_MEM;
 80126ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80126d2:	e000      	b.n	80126d6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80126d4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80126d6:	4618      	mov	r0, r3
 80126d8:	3718      	adds	r7, #24
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}
 80126de:	bf00      	nop
 80126e0:	2000409c 	.word	0x2000409c
 80126e4:	0801f028 	.word	0x0801f028
 80126e8:	0801f0a0 	.word	0x0801f0a0
 80126ec:	0801f078 	.word	0x0801f078

080126f0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b082      	sub	sp, #8
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
 80126f8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012700:	f003 0318 	and.w	r3, r3, #24
 8012704:	2b00      	cmp	r3, #0
 8012706:	d006      	beq.n	8012716 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012708:	4a08      	ldr	r2, [pc, #32]	; (801272c <tcpip_input+0x3c>)
 801270a:	6839      	ldr	r1, [r7, #0]
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f7ff ffab 	bl	8012668 <tcpip_inpkt>
 8012712:	4603      	mov	r3, r0
 8012714:	e005      	b.n	8012722 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8012716:	4a06      	ldr	r2, [pc, #24]	; (8012730 <tcpip_input+0x40>)
 8012718:	6839      	ldr	r1, [r7, #0]
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f7ff ffa4 	bl	8012668 <tcpip_inpkt>
 8012720:	4603      	mov	r3, r0
}
 8012722:	4618      	mov	r0, r3
 8012724:	3708      	adds	r7, #8
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}
 801272a:	bf00      	nop
 801272c:	0801dc61 	.word	0x0801dc61
 8012730:	0801cb81 	.word	0x0801cb81

08012734 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b084      	sub	sp, #16
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
 801273c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801273e:	4819      	ldr	r0, [pc, #100]	; (80127a4 <tcpip_try_callback+0x70>)
 8012740:	f00b fbdf 	bl	801df02 <sys_mbox_valid>
 8012744:	4603      	mov	r3, r0
 8012746:	2b00      	cmp	r3, #0
 8012748:	d106      	bne.n	8012758 <tcpip_try_callback+0x24>
 801274a:	4b17      	ldr	r3, [pc, #92]	; (80127a8 <tcpip_try_callback+0x74>)
 801274c:	f240 125d 	movw	r2, #349	; 0x15d
 8012750:	4916      	ldr	r1, [pc, #88]	; (80127ac <tcpip_try_callback+0x78>)
 8012752:	4817      	ldr	r0, [pc, #92]	; (80127b0 <tcpip_try_callback+0x7c>)
 8012754:	f00b fcb6 	bl	801e0c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012758:	2008      	movs	r0, #8
 801275a:	f001 fb7b 	bl	8013e54 <memp_malloc>
 801275e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d102      	bne.n	801276c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801276a:	e017      	b.n	801279c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	2201      	movs	r2, #1
 8012770:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	687a      	ldr	r2, [r7, #4]
 8012776:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	683a      	ldr	r2, [r7, #0]
 801277c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801277e:	68f9      	ldr	r1, [r7, #12]
 8012780:	4808      	ldr	r0, [pc, #32]	; (80127a4 <tcpip_try_callback+0x70>)
 8012782:	f00b fb65 	bl	801de50 <sys_mbox_trypost>
 8012786:	4603      	mov	r3, r0
 8012788:	2b00      	cmp	r3, #0
 801278a:	d006      	beq.n	801279a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801278c:	68f9      	ldr	r1, [r7, #12]
 801278e:	2008      	movs	r0, #8
 8012790:	f001 fbb2 	bl	8013ef8 <memp_free>
    return ERR_MEM;
 8012794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012798:	e000      	b.n	801279c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801279a:	2300      	movs	r3, #0
}
 801279c:	4618      	mov	r0, r3
 801279e:	3710      	adds	r7, #16
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd80      	pop	{r7, pc}
 80127a4:	2000409c 	.word	0x2000409c
 80127a8:	0801f028 	.word	0x0801f028
 80127ac:	0801f0a0 	.word	0x0801f0a0
 80127b0:	0801f078 	.word	0x0801f078

080127b4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b084      	sub	sp, #16
 80127b8:	af02      	add	r7, sp, #8
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	6039      	str	r1, [r7, #0]
  lwip_init();
 80127be:	f000 fec1 	bl	8013544 <lwip_init>

  tcpip_init_done = initfunc;
 80127c2:	4a17      	ldr	r2, [pc, #92]	; (8012820 <tcpip_init+0x6c>)
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80127c8:	4a16      	ldr	r2, [pc, #88]	; (8012824 <tcpip_init+0x70>)
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80127ce:	2106      	movs	r1, #6
 80127d0:	4815      	ldr	r0, [pc, #84]	; (8012828 <tcpip_init+0x74>)
 80127d2:	f00b fb1b 	bl	801de0c <sys_mbox_new>
 80127d6:	4603      	mov	r3, r0
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d006      	beq.n	80127ea <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80127dc:	4b13      	ldr	r3, [pc, #76]	; (801282c <tcpip_init+0x78>)
 80127de:	f240 2261 	movw	r2, #609	; 0x261
 80127e2:	4913      	ldr	r1, [pc, #76]	; (8012830 <tcpip_init+0x7c>)
 80127e4:	4813      	ldr	r0, [pc, #76]	; (8012834 <tcpip_init+0x80>)
 80127e6:	f00b fc6d 	bl	801e0c4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80127ea:	4813      	ldr	r0, [pc, #76]	; (8012838 <tcpip_init+0x84>)
 80127ec:	f00b fba8 	bl	801df40 <sys_mutex_new>
 80127f0:	4603      	mov	r3, r0
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d006      	beq.n	8012804 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80127f6:	4b0d      	ldr	r3, [pc, #52]	; (801282c <tcpip_init+0x78>)
 80127f8:	f240 2265 	movw	r2, #613	; 0x265
 80127fc:	490f      	ldr	r1, [pc, #60]	; (801283c <tcpip_init+0x88>)
 80127fe:	480d      	ldr	r0, [pc, #52]	; (8012834 <tcpip_init+0x80>)
 8012800:	f00b fc60 	bl	801e0c4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012804:	2300      	movs	r3, #0
 8012806:	9300      	str	r3, [sp, #0]
 8012808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801280c:	2200      	movs	r2, #0
 801280e:	490c      	ldr	r1, [pc, #48]	; (8012840 <tcpip_init+0x8c>)
 8012810:	480c      	ldr	r0, [pc, #48]	; (8012844 <tcpip_init+0x90>)
 8012812:	f00b fbcd 	bl	801dfb0 <sys_thread_new>
}
 8012816:	bf00      	nop
 8012818:	3708      	adds	r7, #8
 801281a:	46bd      	mov	sp, r7
 801281c:	bd80      	pop	{r7, pc}
 801281e:	bf00      	nop
 8012820:	20004094 	.word	0x20004094
 8012824:	20004098 	.word	0x20004098
 8012828:	2000409c 	.word	0x2000409c
 801282c:	0801f028 	.word	0x0801f028
 8012830:	0801f0b0 	.word	0x0801f0b0
 8012834:	0801f078 	.word	0x0801f078
 8012838:	20007df0 	.word	0x20007df0
 801283c:	0801f0d4 	.word	0x0801f0d4
 8012840:	08012579 	.word	0x08012579
 8012844:	0801f0f8 	.word	0x0801f0f8

08012848 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b084      	sub	sp, #16
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
 8012850:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d002      	beq.n	801285e <fs_open+0x16>
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d102      	bne.n	8012864 <fs_open+0x1c>
    return ERR_ARG;
 801285e:	f06f 030f 	mvn.w	r3, #15
 8012862:	e028      	b.n	80128b6 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8012864:	4b16      	ldr	r3, [pc, #88]	; (80128c0 <fs_open+0x78>)
 8012866:	60fb      	str	r3, [r7, #12]
 8012868:	e020      	b.n	80128ac <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	685b      	ldr	r3, [r3, #4]
 801286e:	4619      	mov	r1, r3
 8012870:	6838      	ldr	r0, [r7, #0]
 8012872:	f7f5 fce5 	bl	8008240 <strcmp>
 8012876:	4603      	mov	r3, r0
 8012878:	2b00      	cmp	r3, #0
 801287a:	d114      	bne.n	80128a6 <fs_open+0x5e>
      file->data = (const char *)f->data;
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	689a      	ldr	r2, [r3, #8]
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	68da      	ldr	r2, [r3, #12]
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	68da      	ldr	r2, [r3, #12]
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2200      	movs	r2, #0
 8012898:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	7c1a      	ldrb	r2, [r3, #16]
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80128a2:	2300      	movs	r3, #0
 80128a4:	e007      	b.n	80128b6 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	60fb      	str	r3, [r7, #12]
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d1db      	bne.n	801286a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 80128b2:	f06f 0305 	mvn.w	r3, #5
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	3710      	adds	r7, #16
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}
 80128be:	bf00      	nop
 80128c0:	080327f4 	.word	0x080327f4

080128c4 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80128c4:	b480      	push	{r7}
 80128c6:	b083      	sub	sp, #12
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80128cc:	bf00      	nop
 80128ce:	370c      	adds	r7, #12
 80128d0:	46bd      	mov	sp, r7
 80128d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d6:	4770      	bx	lr

080128d8 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 80128d8:	b480      	push	{r7}
 80128da:	b083      	sub	sp, #12
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	685a      	ldr	r2, [r3, #4]
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	689b      	ldr	r3, [r3, #8]
 80128e8:	1ad3      	subs	r3, r2, r3
}
 80128ea:	4618      	mov	r0, r3
 80128ec:	370c      	adds	r7, #12
 80128ee:	46bd      	mov	sp, r7
 80128f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f4:	4770      	bx	lr

080128f6 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 80128f6:	b580      	push	{r7, lr}
 80128f8:	b082      	sub	sp, #8
 80128fa:	af00      	add	r7, sp, #0
 80128fc:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 80128fe:	222c      	movs	r2, #44	; 0x2c
 8012900:	2100      	movs	r1, #0
 8012902:	6878      	ldr	r0, [r7, #4]
 8012904:	f00b fbd6 	bl	801e0b4 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8012908:	bf00      	nop
 801290a:	3708      	adds	r7, #8
 801290c:	46bd      	mov	sp, r7
 801290e:	bd80      	pop	{r7, pc}

08012910 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b082      	sub	sp, #8
 8012914:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8012916:	202c      	movs	r0, #44	; 0x2c
 8012918:	f001 f91a 	bl	8013b50 <mem_malloc>
 801291c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d002      	beq.n	801292a <http_state_alloc+0x1a>
    http_state_init(ret);
 8012924:	6878      	ldr	r0, [r7, #4]
 8012926:	f7ff ffe6 	bl	80128f6 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 801292a:	687b      	ldr	r3, [r7, #4]
}
 801292c:	4618      	mov	r0, r3
 801292e:	3708      	adds	r7, #8
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}

08012934 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b082      	sub	sp, #8
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	695b      	ldr	r3, [r3, #20]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d007      	beq.n	8012954 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	695b      	ldr	r3, [r3, #20]
 8012948:	4618      	mov	r0, r3
 801294a:	f7ff ffbb 	bl	80128c4 <fs_close>
    hs->handle = NULL;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2200      	movs	r2, #0
 8012952:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	6a1b      	ldr	r3, [r3, #32]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d007      	beq.n	801296c <http_state_eof+0x38>
    pbuf_free(hs->req);
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	6a1b      	ldr	r3, [r3, #32]
 8012960:	4618      	mov	r0, r3
 8012962:	f002 f969 	bl	8014c38 <pbuf_free>
    hs->req = NULL;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	2200      	movs	r2, #0
 801296a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 801296c:	bf00      	nop
 801296e:	3708      	adds	r7, #8
 8012970:	46bd      	mov	sp, r7
 8012972:	bd80      	pop	{r7, pc}

08012974 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8012974:	b580      	push	{r7, lr}
 8012976:	b082      	sub	sp, #8
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d005      	beq.n	801298e <http_state_free+0x1a>
    http_state_eof(hs);
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f7ff ffd6 	bl	8012934 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f000 ff47 	bl	801381c <mem_free>
  }
}
 801298e:	bf00      	nop
 8012990:	3708      	adds	r7, #8
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}
	...

08012998 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b086      	sub	sp, #24
 801299c:	af00      	add	r7, sp, #0
 801299e:	60f8      	str	r0, [r7, #12]
 80129a0:	60b9      	str	r1, [r7, #8]
 80129a2:	607a      	str	r2, [r7, #4]
 80129a4:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d106      	bne.n	80129ba <http_write+0x22>
 80129ac:	4b2c      	ldr	r3, [pc, #176]	; (8012a60 <http_write+0xc8>)
 80129ae:	f240 2219 	movw	r2, #537	; 0x219
 80129b2:	492c      	ldr	r1, [pc, #176]	; (8012a64 <http_write+0xcc>)
 80129b4:	482c      	ldr	r0, [pc, #176]	; (8012a68 <http_write+0xd0>)
 80129b6:	f00b fb85 	bl	801e0c4 <iprintf>
  len = *length;
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	881b      	ldrh	r3, [r3, #0]
 80129be:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 80129c0:	8afb      	ldrh	r3, [r7, #22]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d101      	bne.n	80129ca <http_write+0x32>
    return ERR_OK;
 80129c6:	2300      	movs	r3, #0
 80129c8:	e045      	b.n	8012a56 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80129d0:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 80129d2:	8aba      	ldrh	r2, [r7, #20]
 80129d4:	8afb      	ldrh	r3, [r7, #22]
 80129d6:	429a      	cmp	r2, r3
 80129d8:	d201      	bcs.n	80129de <http_write+0x46>
    len = max_len;
 80129da:	8abb      	ldrh	r3, [r7, #20]
 80129dc:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129e2:	005b      	lsls	r3, r3, #1
 80129e4:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 80129e6:	8afa      	ldrh	r2, [r7, #22]
 80129e8:	8abb      	ldrh	r3, [r7, #20]
 80129ea:	429a      	cmp	r2, r3
 80129ec:	d901      	bls.n	80129f2 <http_write+0x5a>
    len = max_len;
 80129ee:	8abb      	ldrh	r3, [r7, #20]
 80129f0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80129f2:	78fb      	ldrb	r3, [r7, #3]
 80129f4:	8afa      	ldrh	r2, [r7, #22]
 80129f6:	68b9      	ldr	r1, [r7, #8]
 80129f8:	68f8      	ldr	r0, [r7, #12]
 80129fa:	f006 fea7 	bl	801974c <tcp_write>
 80129fe:	4603      	mov	r3, r0
 8012a00:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8012a02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012a0a:	d10f      	bne.n	8012a2c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d004      	beq.n	8012a20 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8012a1c:	2b08      	cmp	r3, #8
 8012a1e:	d902      	bls.n	8012a26 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8012a20:	2301      	movs	r3, #1
 8012a22:	82fb      	strh	r3, [r7, #22]
 8012a24:	e002      	b.n	8012a2c <http_write+0x94>
      } else {
        len /= 2;
 8012a26:	8afb      	ldrh	r3, [r7, #22]
 8012a28:	085b      	lsrs	r3, r3, #1
 8012a2a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8012a2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012a34:	d102      	bne.n	8012a3c <http_write+0xa4>
 8012a36:	8afb      	ldrh	r3, [r7, #22]
 8012a38:	2b01      	cmp	r3, #1
 8012a3a:	d8da      	bhi.n	80129f2 <http_write+0x5a>

  if (err == ERR_OK) {
 8012a3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d103      	bne.n	8012a4c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	8afa      	ldrh	r2, [r7, #22]
 8012a48:	801a      	strh	r2, [r3, #0]
 8012a4a:	e002      	b.n	8012a52 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	2200      	movs	r2, #0
 8012a50:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8012a52:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	3718      	adds	r7, #24
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}
 8012a5e:	bf00      	nop
 8012a60:	0801f148 	.word	0x0801f148
 8012a64:	0801f180 	.word	0x0801f180
 8012a68:	0801f190 	.word	0x0801f190

08012a6c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b086      	sub	sp, #24
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	60f8      	str	r0, [r7, #12]
 8012a74:	60b9      	str	r1, [r7, #8]
 8012a76:	4613      	mov	r3, r2
 8012a78:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8012a7a:	2100      	movs	r1, #0
 8012a7c:	68f8      	ldr	r0, [r7, #12]
 8012a7e:	f003 ff29 	bl	80168d4 <tcp_arg>
  altcp_recv(pcb, NULL);
 8012a82:	2100      	movs	r1, #0
 8012a84:	68f8      	ldr	r0, [r7, #12]
 8012a86:	f003 ff37 	bl	80168f8 <tcp_recv>
  altcp_err(pcb, NULL);
 8012a8a:	2100      	movs	r1, #0
 8012a8c:	68f8      	ldr	r0, [r7, #12]
 8012a8e:	f003 ff77 	bl	8016980 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8012a92:	2200      	movs	r2, #0
 8012a94:	2100      	movs	r1, #0
 8012a96:	68f8      	ldr	r0, [r7, #12]
 8012a98:	f003 ffac 	bl	80169f4 <tcp_poll>
  altcp_sent(pcb, NULL);
 8012a9c:	2100      	movs	r1, #0
 8012a9e:	68f8      	ldr	r0, [r7, #12]
 8012aa0:	f003 ff4c 	bl	801693c <tcp_sent>
  if (hs != NULL) {
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d002      	beq.n	8012ab0 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8012aaa:	68b8      	ldr	r0, [r7, #8]
 8012aac:	f7ff ff62 	bl	8012974 <http_state_free>
  }

  if (abort_conn) {
 8012ab0:	79fb      	ldrb	r3, [r7, #7]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d004      	beq.n	8012ac0 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8012ab6:	68f8      	ldr	r0, [r7, #12]
 8012ab8:	f002 fe4a 	bl	8015750 <tcp_abort>
    return ERR_OK;
 8012abc:	2300      	movs	r3, #0
 8012abe:	e00f      	b.n	8012ae0 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8012ac0:	68f8      	ldr	r0, [r7, #12]
 8012ac2:	f002 fd5b 	bl	801557c <tcp_close>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8012aca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d004      	beq.n	8012adc <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8012ad2:	2204      	movs	r2, #4
 8012ad4:	4904      	ldr	r1, [pc, #16]	; (8012ae8 <http_close_or_abort_conn+0x7c>)
 8012ad6:	68f8      	ldr	r0, [r7, #12]
 8012ad8:	f003 ff8c 	bl	80169f4 <tcp_poll>
  }
  return err;
 8012adc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	3718      	adds	r7, #24
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}
 8012ae8:	080131af 	.word	0x080131af

08012aec <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b082      	sub	sp, #8
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8012af6:	2200      	movs	r2, #0
 8012af8:	6839      	ldr	r1, [r7, #0]
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f7ff ffb6 	bl	8012a6c <http_close_or_abort_conn>
 8012b00:	4603      	mov	r3, r0
}
 8012b02:	4618      	mov	r0, r3
 8012b04:	3708      	adds	r7, #8
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}

08012b0a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8012b0a:	b580      	push	{r7, lr}
 8012b0c:	b082      	sub	sp, #8
 8012b0e:	af00      	add	r7, sp, #0
 8012b10:	6078      	str	r0, [r7, #4]
 8012b12:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8012b14:	6839      	ldr	r1, [r7, #0]
 8012b16:	6878      	ldr	r0, [r7, #4]
 8012b18:	f7ff ffe8 	bl	8012aec <http_close_conn>
  }
}
 8012b1c:	bf00      	nop
 8012b1e:	3708      	adds	r7, #8
 8012b20:	46bd      	mov	sp, r7
 8012b22:	bd80      	pop	{r7, pc}

08012b24 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b084      	sub	sp, #16
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
 8012b2c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	695b      	ldr	r3, [r3, #20]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d105      	bne.n	8012b42 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8012b36:	6839      	ldr	r1, [r7, #0]
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f7ff ffe6 	bl	8012b0a <http_eof>
    return 0;
 8012b3e:	2300      	movs	r3, #0
 8012b40:	e016      	b.n	8012b70 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	695b      	ldr	r3, [r3, #20]
 8012b46:	4618      	mov	r0, r3
 8012b48:	f7ff fec6 	bl	80128d8 <fs_bytes_left>
 8012b4c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	dc05      	bgt.n	8012b60 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8012b54:	6839      	ldr	r1, [r7, #0]
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f7ff ffd7 	bl	8012b0a <http_eof>
    return 0;
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	e007      	b.n	8012b70 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8012b60:	4b05      	ldr	r3, [pc, #20]	; (8012b78 <http_check_eof+0x54>)
 8012b62:	f240 429d 	movw	r2, #1181	; 0x49d
 8012b66:	4905      	ldr	r1, [pc, #20]	; (8012b7c <http_check_eof+0x58>)
 8012b68:	4805      	ldr	r0, [pc, #20]	; (8012b80 <http_check_eof+0x5c>)
 8012b6a:	f00b faab 	bl	801e0c4 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8012b6e:	2301      	movs	r3, #1
}
 8012b70:	4618      	mov	r0, r3
 8012b72:	3710      	adds	r7, #16
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}
 8012b78:	0801f148 	.word	0x0801f148
 8012b7c:	0801f1b8 	.word	0x0801f1b8
 8012b80:	0801f190 	.word	0x0801f190

08012b84 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b084      	sub	sp, #16
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
 8012b8c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b96:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012b9a:	4293      	cmp	r3, r2
 8012b9c:	d803      	bhi.n	8012ba6 <http_send_data_nonssi+0x22>
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ba2:	b29b      	uxth	r3, r3
 8012ba4:	e001      	b.n	8012baa <http_send_data_nonssi+0x26>
 8012ba6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012baa:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	6999      	ldr	r1, [r3, #24]
 8012bb0:	f107 020c 	add.w	r2, r7, #12
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	6878      	ldr	r0, [r7, #4]
 8012bb8:	f7ff feee 	bl	8012998 <http_write>
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8012bc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d10d      	bne.n	8012be4 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8012bc8:	2301      	movs	r3, #1
 8012bca:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	699b      	ldr	r3, [r3, #24]
 8012bd0:	89ba      	ldrh	r2, [r7, #12]
 8012bd2:	441a      	add	r2, r3
 8012bd4:	683b      	ldr	r3, [r7, #0]
 8012bd6:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bdc:	89ba      	ldrh	r2, [r7, #12]
 8012bde:	1a9a      	subs	r2, r3, r2
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8012be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012be6:	4618      	mov	r0, r3
 8012be8:	3710      	adds	r7, #16
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}

08012bee <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8012bee:	b580      	push	{r7, lr}
 8012bf0:	b084      	sub	sp, #16
 8012bf2:	af00      	add	r7, sp, #0
 8012bf4:	6078      	str	r0, [r7, #4]
 8012bf6:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d101      	bne.n	8012c06 <http_send+0x18>
    return 0;
 8012c02:	2300      	movs	r3, #0
 8012c04:	e025      	b.n	8012c52 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d108      	bne.n	8012c20 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8012c0e:	6839      	ldr	r1, [r7, #0]
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f7ff ff87 	bl	8012b24 <http_check_eof>
 8012c16:	4603      	mov	r3, r0
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d101      	bne.n	8012c20 <http_send+0x32>
      return 0;
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	e018      	b.n	8012c52 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8012c20:	6839      	ldr	r1, [r7, #0]
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	f7ff ffae 	bl	8012b84 <http_send_data_nonssi>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d10d      	bne.n	8012c50 <http_send+0x62>
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	695b      	ldr	r3, [r3, #20]
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7ff fe4d 	bl	80128d8 <fs_bytes_left>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	dc05      	bgt.n	8012c50 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8012c44:	6839      	ldr	r1, [r7, #0]
 8012c46:	6878      	ldr	r0, [r7, #4]
 8012c48:	f7ff ff5f 	bl	8012b0a <http_eof>
    return 0;
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	e000      	b.n	8012c52 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8012c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c52:	4618      	mov	r0, r3
 8012c54:	3710      	adds	r7, #16
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd80      	pop	{r7, pc}
	...

08012c5c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b084      	sub	sp, #16
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	4a1c      	ldr	r2, [pc, #112]	; (8012cdc <http_get_404_file+0x80>)
 8012c6a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8012c6c:	687a      	ldr	r2, [r7, #4]
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	4619      	mov	r1, r3
 8012c74:	4610      	mov	r0, r2
 8012c76:	f7ff fde7 	bl	8012848 <fs_open>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d024      	beq.n	8012cd0 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	4a15      	ldr	r2, [pc, #84]	; (8012ce0 <http_get_404_file+0x84>)
 8012c8a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8012c8c:	687a      	ldr	r2, [r7, #4]
 8012c8e:	683b      	ldr	r3, [r7, #0]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	4619      	mov	r1, r3
 8012c94:	4610      	mov	r0, r2
 8012c96:	f7ff fdd7 	bl	8012848 <fs_open>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d014      	beq.n	8012cd0 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	4a0e      	ldr	r2, [pc, #56]	; (8012ce4 <http_get_404_file+0x88>)
 8012caa:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8012cac:	687a      	ldr	r2, [r7, #4]
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	4619      	mov	r1, r3
 8012cb4:	4610      	mov	r0, r2
 8012cb6:	f7ff fdc7 	bl	8012848 <fs_open>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8012cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d004      	beq.n	8012cd0 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8012cc6:	683b      	ldr	r3, [r7, #0]
 8012cc8:	2200      	movs	r2, #0
 8012cca:	601a      	str	r2, [r3, #0]
        return NULL;
 8012ccc:	2300      	movs	r3, #0
 8012cce:	e000      	b.n	8012cd2 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8012cd0:	687b      	ldr	r3, [r7, #4]
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3710      	adds	r7, #16
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}
 8012cda:	bf00      	nop
 8012cdc:	0801f1f0 	.word	0x0801f1f0
 8012ce0:	0801f1fc 	.word	0x0801f1fc
 8012ce4:	0801f208 	.word	0x0801f208

08012ce8 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b08e      	sub	sp, #56	; 0x38
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	60f8      	str	r0, [r7, #12]
 8012cf0:	60b9      	str	r1, [r7, #8]
 8012cf2:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8012cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d106      	bne.n	8012d0c <http_parse_request+0x24>
 8012cfe:	4b65      	ldr	r3, [pc, #404]	; (8012e94 <http_parse_request+0x1ac>)
 8012d00:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8012d04:	4964      	ldr	r1, [pc, #400]	; (8012e98 <http_parse_request+0x1b0>)
 8012d06:	4865      	ldr	r0, [pc, #404]	; (8012e9c <http_parse_request+0x1b4>)
 8012d08:	f00b f9dc 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8012d0c:	68bb      	ldr	r3, [r7, #8]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d106      	bne.n	8012d20 <http_parse_request+0x38>
 8012d12:	4b60      	ldr	r3, [pc, #384]	; (8012e94 <http_parse_request+0x1ac>)
 8012d14:	f240 72af 	movw	r2, #1967	; 0x7af
 8012d18:	4961      	ldr	r1, [pc, #388]	; (8012ea0 <http_parse_request+0x1b8>)
 8012d1a:	4860      	ldr	r0, [pc, #384]	; (8012e9c <http_parse_request+0x1b4>)
 8012d1c:	f00b f9d2 	bl	801e0c4 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8012d20:	68bb      	ldr	r3, [r7, #8]
 8012d22:	695b      	ldr	r3, [r3, #20]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d103      	bne.n	8012d30 <http_parse_request+0x48>
 8012d28:	68bb      	ldr	r3, [r7, #8]
 8012d2a:	699b      	ldr	r3, [r3, #24]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d002      	beq.n	8012d36 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8012d30:	f06f 0307 	mvn.w	r3, #7
 8012d34:	e0aa      	b.n	8012e8c <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	6a1b      	ldr	r3, [r3, #32]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d103      	bne.n	8012d46 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d42:	621a      	str	r2, [r3, #32]
 8012d44:	e005      	b.n	8012d52 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8012d46:	68bb      	ldr	r3, [r7, #8]
 8012d48:	6a1b      	ldr	r3, [r3, #32]
 8012d4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f002 f841 	bl	8014dd4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8012d52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d54:	f002 f816 	bl	8014d84 <pbuf_ref>

  if (hs->req->next != NULL) {
 8012d58:	68bb      	ldr	r3, [r7, #8]
 8012d5a:	6a1b      	ldr	r3, [r3, #32]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d012      	beq.n	8012d88 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8012d62:	68bb      	ldr	r3, [r7, #8]
 8012d64:	6a1b      	ldr	r3, [r3, #32]
 8012d66:	891b      	ldrh	r3, [r3, #8]
 8012d68:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8012d6c:	4293      	cmp	r3, r2
 8012d6e:	bf28      	it	cs
 8012d70:	4613      	movcs	r3, r2
 8012d72:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8012d74:	68bb      	ldr	r3, [r7, #8]
 8012d76:	6a18      	ldr	r0, [r3, #32]
 8012d78:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	4949      	ldr	r1, [pc, #292]	; (8012ea4 <http_parse_request+0x1bc>)
 8012d7e:	f002 f951 	bl	8015024 <pbuf_copy_partial>
    data = httpd_req_buf;
 8012d82:	4b48      	ldr	r3, [pc, #288]	; (8012ea4 <http_parse_request+0x1bc>)
 8012d84:	637b      	str	r3, [r7, #52]	; 0x34
 8012d86:	e005      	b.n	8012d94 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8012d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d8a:	685b      	ldr	r3, [r3, #4]
 8012d8c:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8012d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d90:	895b      	ldrh	r3, [r3, #10]
 8012d92:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8012d94:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012d96:	2b06      	cmp	r3, #6
 8012d98:	d963      	bls.n	8012e62 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8012d9a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012d9c:	461a      	mov	r2, r3
 8012d9e:	4942      	ldr	r1, [pc, #264]	; (8012ea8 <http_parse_request+0x1c0>)
 8012da0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012da2:	f000 fb99 	bl	80134d8 <lwip_strnstr>
 8012da6:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8012da8:	6a3b      	ldr	r3, [r7, #32]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d059      	beq.n	8012e62 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8012dae:	2300      	movs	r3, #0
 8012db0:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8012db2:	2204      	movs	r2, #4
 8012db4:	493d      	ldr	r1, [pc, #244]	; (8012eac <http_parse_request+0x1c4>)
 8012db6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012db8:	f00b f9dd 	bl	801e176 <strncmp>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d117      	bne.n	8012df2 <http_parse_request+0x10a>
        sp1 = data + 3;
 8012dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dc4:	3303      	adds	r3, #3
 8012dc6:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8012dc8:	69fb      	ldr	r3, [r7, #28]
 8012dca:	3301      	adds	r3, #1
 8012dcc:	461a      	mov	r2, r3
 8012dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dd0:	1ad3      	subs	r3, r2, r3
 8012dd2:	b29b      	uxth	r3, r3
 8012dd4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8012dd6:	1ad3      	subs	r3, r2, r3
 8012dd8:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8012dda:	69fb      	ldr	r3, [r7, #28]
 8012ddc:	3301      	adds	r3, #1
 8012dde:	8b7a      	ldrh	r2, [r7, #26]
 8012de0:	4933      	ldr	r1, [pc, #204]	; (8012eb0 <http_parse_request+0x1c8>)
 8012de2:	4618      	mov	r0, r3
 8012de4:	f000 fb78 	bl	80134d8 <lwip_strnstr>
 8012de8:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8012dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d111      	bne.n	8012e14 <http_parse_request+0x12c>
 8012df0:	e006      	b.n	8012e00 <http_parse_request+0x118>
        data[4] = 0;
 8012df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012df4:	3304      	adds	r3, #4
 8012df6:	2200      	movs	r2, #0
 8012df8:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8012dfa:	f06f 030f 	mvn.w	r3, #15
 8012dfe:	e045      	b.n	8012e8c <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8012e00:	69fb      	ldr	r3, [r7, #28]
 8012e02:	3301      	adds	r3, #1
 8012e04:	8b7a      	ldrh	r2, [r7, #26]
 8012e06:	4928      	ldr	r1, [pc, #160]	; (8012ea8 <http_parse_request+0x1c0>)
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f000 fb65 	bl	80134d8 <lwip_strnstr>
 8012e0e:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8012e10:	2301      	movs	r3, #1
 8012e12:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8012e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e16:	69fa      	ldr	r2, [r7, #28]
 8012e18:	3201      	adds	r2, #1
 8012e1a:	1a9b      	subs	r3, r3, r2
 8012e1c:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8012e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d01e      	beq.n	8012e62 <http_parse_request+0x17a>
 8012e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e26:	69fb      	ldr	r3, [r7, #28]
 8012e28:	429a      	cmp	r2, r3
 8012e2a:	d91a      	bls.n	8012e62 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8012e2c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012e2e:	461a      	mov	r2, r3
 8012e30:	4920      	ldr	r1, [pc, #128]	; (8012eb4 <http_parse_request+0x1cc>)
 8012e32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012e34:	f000 fb50 	bl	80134d8 <lwip_strnstr>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d011      	beq.n	8012e62 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 8012e3e:	69fb      	ldr	r3, [r7, #28]
 8012e40:	3301      	adds	r3, #1
 8012e42:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8012e44:	69fb      	ldr	r3, [r7, #28]
 8012e46:	2200      	movs	r2, #0
 8012e48:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8012e4a:	8b3b      	ldrh	r3, [r7, #24]
 8012e4c:	697a      	ldr	r2, [r7, #20]
 8012e4e:	4413      	add	r3, r2
 8012e50:	2200      	movs	r2, #0
 8012e52:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8012e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e56:	6979      	ldr	r1, [r7, #20]
 8012e58:	68b8      	ldr	r0, [r7, #8]
 8012e5a:	f000 f82d 	bl	8012eb8 <http_find_file>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	e014      	b.n	8012e8c <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8012e62:	68bb      	ldr	r3, [r7, #8]
 8012e64:	6a1b      	ldr	r3, [r3, #32]
 8012e66:	4618      	mov	r0, r3
 8012e68:	f001 ff74 	bl	8014d54 <pbuf_clen>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	6a1b      	ldr	r3, [r3, #32]
 8012e74:	891b      	ldrh	r3, [r3, #8]
 8012e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012e7a:	d205      	bcs.n	8012e88 <http_parse_request+0x1a0>
 8012e7c:	8a7b      	ldrh	r3, [r7, #18]
 8012e7e:	2b05      	cmp	r3, #5
 8012e80:	d802      	bhi.n	8012e88 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8012e82:	f06f 0304 	mvn.w	r3, #4
 8012e86:	e001      	b.n	8012e8c <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8012e88:	f06f 030f 	mvn.w	r3, #15
  }
}
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	3738      	adds	r7, #56	; 0x38
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bd80      	pop	{r7, pc}
 8012e94:	0801f148 	.word	0x0801f148
 8012e98:	0801f214 	.word	0x0801f214
 8012e9c:	0801f190 	.word	0x0801f190
 8012ea0:	0801f220 	.word	0x0801f220
 8012ea4:	200040a0 	.word	0x200040a0
 8012ea8:	0801f22c 	.word	0x0801f22c
 8012eac:	0801f230 	.word	0x0801f230
 8012eb0:	0801f238 	.word	0x0801f238
 8012eb4:	0801f23c 	.word	0x0801f23c

08012eb8 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b092      	sub	sp, #72	; 0x48
 8012ebc:	af02      	add	r7, sp, #8
 8012ebe:	60f8      	str	r0, [r7, #12]
 8012ec0:	60b9      	str	r1, [r7, #8]
 8012ec2:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8012ed2:	68bb      	ldr	r3, [r7, #8]
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f7f5 f9bd 	bl	8008254 <strlen>
 8012eda:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8012edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d06b      	beq.n	8012fba <http_find_file+0x102>
 8012ee2:	68ba      	ldr	r2, [r7, #8]
 8012ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee6:	3b01      	subs	r3, #1
 8012ee8:	4413      	add	r3, r2
 8012eea:	781b      	ldrb	r3, [r3, #0]
 8012eec:	2b2f      	cmp	r3, #47	; 0x2f
 8012eee:	d164      	bne.n	8012fba <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8012ef0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8012ef2:	4a53      	ldr	r2, [pc, #332]	; (8013040 <http_find_file+0x188>)
 8012ef4:	4293      	cmp	r3, r2
 8012ef6:	d102      	bne.n	8012efe <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8012ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012efa:	2b01      	cmp	r3, #1
 8012efc:	d15d      	bne.n	8012fba <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8012efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f00:	3b01      	subs	r3, #1
 8012f02:	2b3f      	cmp	r3, #63	; 0x3f
 8012f04:	bf28      	it	cs
 8012f06:	233f      	movcs	r3, #63	; 0x3f
 8012f08:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 8012f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d00a      	beq.n	8012f26 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f14:	4619      	mov	r1, r3
 8012f16:	484a      	ldr	r0, [pc, #296]	; (8013040 <http_find_file+0x188>)
 8012f18:	f00b f8c1 	bl	801e09e <memcpy>
      http_uri_buf[copy_len] = 0;
 8012f1c:	4a48      	ldr	r2, [pc, #288]	; (8013040 <http_find_file+0x188>)
 8012f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f20:	4413      	add	r3, r2
 8012f22:	2200      	movs	r2, #0
 8012f24:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8012f26:	2300      	movs	r3, #0
 8012f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012f2a:	e043      	b.n	8012fb4 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8012f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d028      	beq.n	8012f84 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8012f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f34:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8012f38:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 8012f3a:	6a3b      	ldr	r3, [r7, #32]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d01e      	beq.n	8012f7e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8012f40:	4a40      	ldr	r2, [pc, #256]	; (8013044 <http_find_file+0x18c>)
 8012f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f7f5 f983 	bl	8008254 <strlen>
 8012f4e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8012f50:	69fa      	ldr	r2, [r7, #28]
 8012f52:	6a3b      	ldr	r3, [r7, #32]
 8012f54:	4293      	cmp	r3, r2
 8012f56:	bf28      	it	cs
 8012f58:	4613      	movcs	r3, r2
 8012f5a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8012f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5e:	4a38      	ldr	r2, [pc, #224]	; (8013040 <http_find_file+0x188>)
 8012f60:	1898      	adds	r0, r3, r2
 8012f62:	4a38      	ldr	r2, [pc, #224]	; (8013044 <http_find_file+0x18c>)
 8012f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f66:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012f6a:	69ba      	ldr	r2, [r7, #24]
 8012f6c:	4619      	mov	r1, r3
 8012f6e:	f00b f896 	bl	801e09e <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8012f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f74:	69bb      	ldr	r3, [r7, #24]
 8012f76:	4413      	add	r3, r2
 8012f78:	4a31      	ldr	r2, [pc, #196]	; (8013040 <http_find_file+0x188>)
 8012f7a:	2100      	movs	r1, #0
 8012f7c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8012f7e:	4b30      	ldr	r3, [pc, #192]	; (8013040 <http_find_file+0x188>)
 8012f80:	633b      	str	r3, [r7, #48]	; 0x30
 8012f82:	e004      	b.n	8012f8e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8012f84:	4a2f      	ldr	r2, [pc, #188]	; (8013044 <http_find_file+0x18c>)
 8012f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012f8c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012f92:	4618      	mov	r0, r3
 8012f94:	f7ff fc58 	bl	8012848 <fs_open>
 8012f98:	4603      	mov	r3, r0
 8012f9a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 8012f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d104      	bne.n	8012fae <http_find_file+0xf6>
        uri = file_name;
 8012fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fa6:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8012fac:	e005      	b.n	8012fba <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8012fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fb0:	3301      	adds	r3, #1
 8012fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fb6:	2b04      	cmp	r3, #4
 8012fb8:	d9b8      	bls.n	8012f2c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8012fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d124      	bne.n	801300a <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	213f      	movs	r1, #63	; 0x3f
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f00b f8c9 	bl	801e15c <strchr>
 8012fca:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8012fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d005      	beq.n	8012fde <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8012fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	701a      	strb	r2, [r3, #0]
      params++;
 8012fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fda:	3301      	adds	r3, #1
 8012fdc:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	68ba      	ldr	r2, [r7, #8]
 8012fe2:	4611      	mov	r1, r2
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7ff fc2f 	bl	8012848 <fs_open>
 8012fea:	4603      	mov	r3, r0
 8012fec:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8012fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d102      	bne.n	8012ffc <http_find_file+0x144>
      file = &hs->file_handle;
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8012ffa:	e006      	b.n	801300a <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 8012ffc:	f107 0308 	add.w	r3, r7, #8
 8013000:	4619      	mov	r1, r3
 8013002:	68f8      	ldr	r0, [r7, #12]
 8013004:	f7ff fe2a 	bl	8012c5c <http_get_404_file>
 8013008:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 801300a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801300c:	2b00      	cmp	r3, #0
 801300e:	d106      	bne.n	801301e <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8013010:	f107 0308 	add.w	r3, r7, #8
 8013014:	4619      	mov	r1, r3
 8013016:	68f8      	ldr	r0, [r7, #12]
 8013018:	f7ff fe20 	bl	8012c5c <http_get_404_file>
 801301c:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 801301e:	68ba      	ldr	r2, [r7, #8]
 8013020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013022:	9301      	str	r3, [sp, #4]
 8013024:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013028:	9300      	str	r3, [sp, #0]
 801302a:	4613      	mov	r3, r2
 801302c:	687a      	ldr	r2, [r7, #4]
 801302e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013030:	68f8      	ldr	r0, [r7, #12]
 8013032:	f000 f809 	bl	8013048 <http_init_file>
 8013036:	4603      	mov	r3, r0
}
 8013038:	4618      	mov	r0, r3
 801303a:	3740      	adds	r7, #64	; 0x40
 801303c:	46bd      	mov	sp, r7
 801303e:	bd80      	pop	{r7, pc}
 8013040:	200044a0 	.word	0x200044a0
 8013044:	08032808 	.word	0x08032808

08013048 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8013048:	b580      	push	{r7, lr}
 801304a:	b086      	sub	sp, #24
 801304c:	af00      	add	r7, sp, #0
 801304e:	60f8      	str	r0, [r7, #12]
 8013050:	60b9      	str	r1, [r7, #8]
 8013052:	607a      	str	r2, [r7, #4]
 8013054:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8013056:	68bb      	ldr	r3, [r7, #8]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d05d      	beq.n	8013118 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d106      	bne.n	8013072 <http_init_file+0x2a>
 8013064:	4b35      	ldr	r3, [pc, #212]	; (801313c <http_init_file+0xf4>)
 8013066:	f640 120b 	movw	r2, #2315	; 0x90b
 801306a:	4935      	ldr	r1, [pc, #212]	; (8013140 <http_init_file+0xf8>)
 801306c:	4835      	ldr	r0, [pc, #212]	; (8013144 <http_init_file+0xfc>)
 801306e:	f00b f829 	bl	801e0c4 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	68ba      	ldr	r2, [r7, #8]
 8013076:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8013078:	68bb      	ldr	r3, [r7, #8]
 801307a:	681a      	ldr	r2, [r3, #0]
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8013080:	68bb      	ldr	r3, [r7, #8]
 8013082:	685b      	ldr	r3, [r3, #4]
 8013084:	2b00      	cmp	r3, #0
 8013086:	da06      	bge.n	8013096 <http_init_file+0x4e>
 8013088:	4b2c      	ldr	r3, [pc, #176]	; (801313c <http_init_file+0xf4>)
 801308a:	f640 1234 	movw	r2, #2356	; 0x934
 801308e:	492e      	ldr	r1, [pc, #184]	; (8013148 <http_init_file+0x100>)
 8013090:	482c      	ldr	r0, [pc, #176]	; (8013144 <http_init_file+0xfc>)
 8013092:	f00b f817 	bl	801e0c4 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8013096:	68bb      	ldr	r3, [r7, #8]
 8013098:	685b      	ldr	r3, [r3, #4]
 801309a:	461a      	mov	r2, r3
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	2200      	movs	r2, #0
 80130a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	695b      	ldr	r3, [r3, #20]
 80130ac:	7c1b      	ldrb	r3, [r3, #16]
 80130ae:	f003 0301 	and.w	r3, r3, #1
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d106      	bne.n	80130c4 <http_init_file+0x7c>
 80130b6:	4b21      	ldr	r3, [pc, #132]	; (801313c <http_init_file+0xf4>)
 80130b8:	f640 1244 	movw	r2, #2372	; 0x944
 80130bc:	4923      	ldr	r1, [pc, #140]	; (801314c <http_init_file+0x104>)
 80130be:	4821      	ldr	r0, [pc, #132]	; (8013144 <http_init_file+0xfc>)
 80130c0:	f00b f800 	bl	801e0c4 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d033      	beq.n	8013132 <http_init_file+0xea>
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	695b      	ldr	r3, [r3, #20]
 80130ce:	7c1b      	ldrb	r3, [r3, #16]
 80130d0:	f003 0301 	and.w	r3, r3, #1
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d02c      	beq.n	8013132 <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	6998      	ldr	r0, [r3, #24]
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130e0:	461a      	mov	r2, r3
 80130e2:	491b      	ldr	r1, [pc, #108]	; (8013150 <http_init_file+0x108>)
 80130e4:	f000 f9f8 	bl	80134d8 <lwip_strnstr>
 80130e8:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 80130ea:	697b      	ldr	r3, [r7, #20]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d020      	beq.n	8013132 <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 80130f0:	697b      	ldr	r3, [r7, #20]
 80130f2:	3304      	adds	r3, #4
 80130f4:	461a      	mov	r2, r3
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	699b      	ldr	r3, [r3, #24]
 80130fa:	1ad3      	subs	r3, r2, r3
 80130fc:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	699a      	ldr	r2, [r3, #24]
 8013102:	693b      	ldr	r3, [r7, #16]
 8013104:	441a      	add	r2, r3
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801310e:	693b      	ldr	r3, [r7, #16]
 8013110:	1ad2      	subs	r2, r2, r3
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	625a      	str	r2, [r3, #36]	; 0x24
 8013116:	e00c      	b.n	8013132 <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	2200      	movs	r2, #0
 801311c:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	2200      	movs	r2, #0
 8013122:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	2200      	movs	r2, #0
 8013128:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	2200      	movs	r2, #0
 801312e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8013132:	2300      	movs	r3, #0
}
 8013134:	4618      	mov	r0, r3
 8013136:	3718      	adds	r7, #24
 8013138:	46bd      	mov	sp, r7
 801313a:	bd80      	pop	{r7, pc}
 801313c:	0801f148 	.word	0x0801f148
 8013140:	0801f244 	.word	0x0801f244
 8013144:	0801f190 	.word	0x0801f190
 8013148:	0801f258 	.word	0x0801f258
 801314c:	0801f278 	.word	0x0801f278
 8013150:	0801f23c 	.word	0x0801f23c

08013154 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b084      	sub	sp, #16
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
 801315c:	460b      	mov	r3, r1
 801315e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d002      	beq.n	8013170 <http_err+0x1c>
    http_state_free(hs);
 801316a:	68f8      	ldr	r0, [r7, #12]
 801316c:	f7ff fc02 	bl	8012974 <http_state_free>
  }
}
 8013170:	bf00      	nop
 8013172:	3710      	adds	r7, #16
 8013174:	46bd      	mov	sp, r7
 8013176:	bd80      	pop	{r7, pc}

08013178 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b086      	sub	sp, #24
 801317c:	af00      	add	r7, sp, #0
 801317e:	60f8      	str	r0, [r7, #12]
 8013180:	60b9      	str	r1, [r7, #8]
 8013182:	4613      	mov	r3, r2
 8013184:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d101      	bne.n	8013194 <http_sent+0x1c>
    return ERR_OK;
 8013190:	2300      	movs	r3, #0
 8013192:	e008      	b.n	80131a6 <http_sent+0x2e>
  }

  hs->retries = 0;
 8013194:	697b      	ldr	r3, [r7, #20]
 8013196:	2200      	movs	r2, #0
 8013198:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 801319c:	6979      	ldr	r1, [r7, #20]
 801319e:	68b8      	ldr	r0, [r7, #8]
 80131a0:	f7ff fd25 	bl	8012bee <http_send>

  return ERR_OK;
 80131a4:	2300      	movs	r3, #0
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	3718      	adds	r7, #24
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}

080131ae <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 80131ae:	b580      	push	{r7, lr}
 80131b0:	b084      	sub	sp, #16
 80131b2:	af00      	add	r7, sp, #0
 80131b4:	6078      	str	r0, [r7, #4]
 80131b6:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d107      	bne.n	80131d2 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 80131c2:	2100      	movs	r1, #0
 80131c4:	6838      	ldr	r0, [r7, #0]
 80131c6:	f7ff fc91 	bl	8012aec <http_close_conn>
 80131ca:	4603      	mov	r3, r0
 80131cc:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 80131ce:	2300      	movs	r3, #0
 80131d0:	e021      	b.n	8013216 <http_poll+0x68>
  } else {
    hs->retries++;
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131d8:	3301      	adds	r3, #1
 80131da:	b2da      	uxtb	r2, r3
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131e8:	2b04      	cmp	r3, #4
 80131ea:	d105      	bne.n	80131f8 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 80131ec:	68f9      	ldr	r1, [r7, #12]
 80131ee:	6838      	ldr	r0, [r7, #0]
 80131f0:	f7ff fc7c 	bl	8012aec <http_close_conn>
      return ERR_OK;
 80131f4:	2300      	movs	r3, #0
 80131f6:	e00e      	b.n	8013216 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	695b      	ldr	r3, [r3, #20]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d009      	beq.n	8013214 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8013200:	68f9      	ldr	r1, [r7, #12]
 8013202:	6838      	ldr	r0, [r7, #0]
 8013204:	f7ff fcf3 	bl	8012bee <http_send>
 8013208:	4603      	mov	r3, r0
 801320a:	2b00      	cmp	r3, #0
 801320c:	d002      	beq.n	8013214 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 801320e:	6838      	ldr	r0, [r7, #0]
 8013210:	f007 f888 	bl	801a324 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8013214:	2300      	movs	r3, #0
}
 8013216:	4618      	mov	r0, r3
 8013218:	3710      	adds	r7, #16
 801321a:	46bd      	mov	sp, r7
 801321c:	bd80      	pop	{r7, pc}
	...

08013220 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b086      	sub	sp, #24
 8013224:	af00      	add	r7, sp, #0
 8013226:	60f8      	str	r0, [r7, #12]
 8013228:	60b9      	str	r1, [r7, #8]
 801322a:	607a      	str	r2, [r7, #4]
 801322c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8013232:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d105      	bne.n	8013246 <http_recv+0x26>
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d002      	beq.n	8013246 <http_recv+0x26>
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d111      	bne.n	801326a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d008      	beq.n	801325e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	891b      	ldrh	r3, [r3, #8]
 8013250:	4619      	mov	r1, r3
 8013252:	68b8      	ldr	r0, [r7, #8]
 8013254:	f002 fc56 	bl	8015b04 <tcp_recved>
      pbuf_free(p);
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	f001 fced 	bl	8014c38 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 801325e:	6979      	ldr	r1, [r7, #20]
 8013260:	68b8      	ldr	r0, [r7, #8]
 8013262:	f7ff fc43 	bl	8012aec <http_close_conn>
    return ERR_OK;
 8013266:	2300      	movs	r3, #0
 8013268:	e055      	b.n	8013316 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	891b      	ldrh	r3, [r3, #8]
 801326e:	4619      	mov	r1, r3
 8013270:	68b8      	ldr	r0, [r7, #8]
 8013272:	f002 fc47 	bl	8015b04 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8013276:	697b      	ldr	r3, [r7, #20]
 8013278:	695b      	ldr	r3, [r3, #20]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d147      	bne.n	801330e <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 801327e:	68ba      	ldr	r2, [r7, #8]
 8013280:	6979      	ldr	r1, [r7, #20]
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f7ff fd30 	bl	8012ce8 <http_parse_request>
 8013288:	4603      	mov	r3, r0
 801328a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 801328c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d015      	beq.n	80132c0 <http_recv+0xa0>
 8013294:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013298:	f113 0f05 	cmn.w	r3, #5
 801329c:	d010      	beq.n	80132c0 <http_recv+0xa0>
 801329e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80132a2:	f113 0f10 	cmn.w	r3, #16
 80132a6:	d00b      	beq.n	80132c0 <http_recv+0xa0>
 80132a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80132ac:	f113 0f08 	cmn.w	r3, #8
 80132b0:	d006      	beq.n	80132c0 <http_recv+0xa0>
 80132b2:	4b1b      	ldr	r3, [pc, #108]	; (8013320 <http_recv+0x100>)
 80132b4:	f640 2205 	movw	r2, #2565	; 0xa05
 80132b8:	491a      	ldr	r1, [pc, #104]	; (8013324 <http_recv+0x104>)
 80132ba:	481b      	ldr	r0, [pc, #108]	; (8013328 <http_recv+0x108>)
 80132bc:	f00a ff02 	bl	801e0c4 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80132c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80132c4:	f113 0f05 	cmn.w	r3, #5
 80132c8:	d00b      	beq.n	80132e2 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 80132ca:	697b      	ldr	r3, [r7, #20]
 80132cc:	6a1b      	ldr	r3, [r3, #32]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d007      	beq.n	80132e2 <http_recv+0xc2>
          pbuf_free(hs->req);
 80132d2:	697b      	ldr	r3, [r7, #20]
 80132d4:	6a1b      	ldr	r3, [r3, #32]
 80132d6:	4618      	mov	r0, r3
 80132d8:	f001 fcae 	bl	8014c38 <pbuf_free>
          hs->req = NULL;
 80132dc:	697b      	ldr	r3, [r7, #20]
 80132de:	2200      	movs	r2, #0
 80132e0:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80132e2:	6878      	ldr	r0, [r7, #4]
 80132e4:	f001 fca8 	bl	8014c38 <pbuf_free>
      if (parsed == ERR_OK) {
 80132e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d104      	bne.n	80132fa <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 80132f0:	6979      	ldr	r1, [r7, #20]
 80132f2:	68b8      	ldr	r0, [r7, #8]
 80132f4:	f7ff fc7b 	bl	8012bee <http_send>
 80132f8:	e00c      	b.n	8013314 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 80132fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80132fe:	f113 0f10 	cmn.w	r3, #16
 8013302:	d107      	bne.n	8013314 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8013304:	6979      	ldr	r1, [r7, #20]
 8013306:	68b8      	ldr	r0, [r7, #8]
 8013308:	f7ff fbf0 	bl	8012aec <http_close_conn>
 801330c:	e002      	b.n	8013314 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 801330e:	6878      	ldr	r0, [r7, #4]
 8013310:	f001 fc92 	bl	8014c38 <pbuf_free>
    }
  }
  return ERR_OK;
 8013314:	2300      	movs	r3, #0
}
 8013316:	4618      	mov	r0, r3
 8013318:	3718      	adds	r7, #24
 801331a:	46bd      	mov	sp, r7
 801331c:	bd80      	pop	{r7, pc}
 801331e:	bf00      	nop
 8013320:	0801f148 	.word	0x0801f148
 8013324:	0801f2a4 	.word	0x0801f2a4
 8013328:	0801f190 	.word	0x0801f190

0801332c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b086      	sub	sp, #24
 8013330:	af00      	add	r7, sp, #0
 8013332:	60f8      	str	r0, [r7, #12]
 8013334:	60b9      	str	r1, [r7, #8]
 8013336:	4613      	mov	r3, r2
 8013338:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 801333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d102      	bne.n	8013348 <http_accept+0x1c>
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d102      	bne.n	801334e <http_accept+0x22>
    return ERR_VAL;
 8013348:	f06f 0305 	mvn.w	r3, #5
 801334c:	e025      	b.n	801339a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 801334e:	2101      	movs	r1, #1
 8013350:	68b8      	ldr	r0, [r7, #8]
 8013352:	f003 f8b7 	bl	80164c4 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8013356:	f7ff fadb 	bl	8012910 <http_state_alloc>
 801335a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 801335c:	697b      	ldr	r3, [r7, #20]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d102      	bne.n	8013368 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8013362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013366:	e018      	b.n	801339a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8013368:	697b      	ldr	r3, [r7, #20]
 801336a:	68ba      	ldr	r2, [r7, #8]
 801336c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 801336e:	6979      	ldr	r1, [r7, #20]
 8013370:	68b8      	ldr	r0, [r7, #8]
 8013372:	f003 faaf 	bl	80168d4 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8013376:	490b      	ldr	r1, [pc, #44]	; (80133a4 <http_accept+0x78>)
 8013378:	68b8      	ldr	r0, [r7, #8]
 801337a:	f003 fabd 	bl	80168f8 <tcp_recv>
  altcp_err(pcb, http_err);
 801337e:	490a      	ldr	r1, [pc, #40]	; (80133a8 <http_accept+0x7c>)
 8013380:	68b8      	ldr	r0, [r7, #8]
 8013382:	f003 fafd 	bl	8016980 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8013386:	2204      	movs	r2, #4
 8013388:	4908      	ldr	r1, [pc, #32]	; (80133ac <http_accept+0x80>)
 801338a:	68b8      	ldr	r0, [r7, #8]
 801338c:	f003 fb32 	bl	80169f4 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8013390:	4907      	ldr	r1, [pc, #28]	; (80133b0 <http_accept+0x84>)
 8013392:	68b8      	ldr	r0, [r7, #8]
 8013394:	f003 fad2 	bl	801693c <tcp_sent>

  return ERR_OK;
 8013398:	2300      	movs	r3, #0
}
 801339a:	4618      	mov	r0, r3
 801339c:	3718      	adds	r7, #24
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}
 80133a2:	bf00      	nop
 80133a4:	08013221 	.word	0x08013221
 80133a8:	08013155 	.word	0x08013155
 80133ac:	080131af 	.word	0x080131af
 80133b0:	08013179 	.word	0x08013179

080133b4 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b084      	sub	sp, #16
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	460b      	mov	r3, r1
 80133be:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d029      	beq.n	801341a <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80133c6:	2101      	movs	r1, #1
 80133c8:	6878      	ldr	r0, [r7, #4]
 80133ca:	f003 f87b 	bl	80164c4 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 80133ce:	887b      	ldrh	r3, [r7, #2]
 80133d0:	461a      	mov	r2, r3
 80133d2:	4914      	ldr	r1, [pc, #80]	; (8013424 <httpd_init_pcb+0x70>)
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f002 f9c7 	bl	8015768 <tcp_bind>
 80133da:	4603      	mov	r3, r0
 80133dc:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80133de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d006      	beq.n	80133f4 <httpd_init_pcb+0x40>
 80133e6:	4b10      	ldr	r3, [pc, #64]	; (8013428 <httpd_init_pcb+0x74>)
 80133e8:	f640 2257 	movw	r2, #2647	; 0xa57
 80133ec:	490f      	ldr	r1, [pc, #60]	; (801342c <httpd_init_pcb+0x78>)
 80133ee:	4810      	ldr	r0, [pc, #64]	; (8013430 <httpd_init_pcb+0x7c>)
 80133f0:	f00a fe68 	bl	801e0c4 <iprintf>
    pcb = altcp_listen(pcb);
 80133f4:	21ff      	movs	r1, #255	; 0xff
 80133f6:	6878      	ldr	r0, [r7, #4]
 80133f8:	f002 fa6e 	bl	80158d8 <tcp_listen_with_backlog>
 80133fc:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d106      	bne.n	8013412 <httpd_init_pcb+0x5e>
 8013404:	4b08      	ldr	r3, [pc, #32]	; (8013428 <httpd_init_pcb+0x74>)
 8013406:	f640 2259 	movw	r2, #2649	; 0xa59
 801340a:	490a      	ldr	r1, [pc, #40]	; (8013434 <httpd_init_pcb+0x80>)
 801340c:	4808      	ldr	r0, [pc, #32]	; (8013430 <httpd_init_pcb+0x7c>)
 801340e:	f00a fe59 	bl	801e0c4 <iprintf>
    altcp_accept(pcb, http_accept);
 8013412:	4909      	ldr	r1, [pc, #36]	; (8013438 <httpd_init_pcb+0x84>)
 8013414:	6878      	ldr	r0, [r7, #4]
 8013416:	f003 fad5 	bl	80169c4 <tcp_accept>
  }
}
 801341a:	bf00      	nop
 801341c:	3710      	adds	r7, #16
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}
 8013422:	bf00      	nop
 8013424:	08032940 	.word	0x08032940
 8013428:	0801f148 	.word	0x0801f148
 801342c:	0801f2d0 	.word	0x0801f2d0
 8013430:	0801f190 	.word	0x0801f190
 8013434:	0801f2ec 	.word	0x0801f2ec
 8013438:	0801332d 	.word	0x0801332d

0801343c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b082      	sub	sp, #8
 8013440:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8013442:	202e      	movs	r0, #46	; 0x2e
 8013444:	f003 fa38 	bl	80168b8 <tcp_new_ip_type>
 8013448:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d106      	bne.n	801345e <httpd_init+0x22>
 8013450:	4b07      	ldr	r3, [pc, #28]	; (8013470 <httpd_init+0x34>)
 8013452:	f640 2272 	movw	r2, #2674	; 0xa72
 8013456:	4907      	ldr	r1, [pc, #28]	; (8013474 <httpd_init+0x38>)
 8013458:	4807      	ldr	r0, [pc, #28]	; (8013478 <httpd_init+0x3c>)
 801345a:	f00a fe33 	bl	801e0c4 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 801345e:	2150      	movs	r1, #80	; 0x50
 8013460:	6878      	ldr	r0, [r7, #4]
 8013462:	f7ff ffa7 	bl	80133b4 <httpd_init_pcb>
}
 8013466:	bf00      	nop
 8013468:	3708      	adds	r7, #8
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}
 801346e:	bf00      	nop
 8013470:	0801f148 	.word	0x0801f148
 8013474:	0801f30c 	.word	0x0801f30c
 8013478:	0801f190 	.word	0x0801f190

0801347c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801347c:	b480      	push	{r7}
 801347e:	b083      	sub	sp, #12
 8013480:	af00      	add	r7, sp, #0
 8013482:	4603      	mov	r3, r0
 8013484:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8013486:	88fb      	ldrh	r3, [r7, #6]
 8013488:	021b      	lsls	r3, r3, #8
 801348a:	b21a      	sxth	r2, r3
 801348c:	88fb      	ldrh	r3, [r7, #6]
 801348e:	0a1b      	lsrs	r3, r3, #8
 8013490:	b29b      	uxth	r3, r3
 8013492:	b21b      	sxth	r3, r3
 8013494:	4313      	orrs	r3, r2
 8013496:	b21b      	sxth	r3, r3
 8013498:	b29b      	uxth	r3, r3
}
 801349a:	4618      	mov	r0, r3
 801349c:	370c      	adds	r7, #12
 801349e:	46bd      	mov	sp, r7
 80134a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a4:	4770      	bx	lr

080134a6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80134a6:	b480      	push	{r7}
 80134a8:	b083      	sub	sp, #12
 80134aa:	af00      	add	r7, sp, #0
 80134ac:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	061a      	lsls	r2, r3, #24
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	021b      	lsls	r3, r3, #8
 80134b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80134ba:	431a      	orrs	r2, r3
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	0a1b      	lsrs	r3, r3, #8
 80134c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80134c4:	431a      	orrs	r2, r3
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	0e1b      	lsrs	r3, r3, #24
 80134ca:	4313      	orrs	r3, r2
}
 80134cc:	4618      	mov	r0, r3
 80134ce:	370c      	adds	r7, #12
 80134d0:	46bd      	mov	sp, r7
 80134d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d6:	4770      	bx	lr

080134d8 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b086      	sub	sp, #24
 80134dc:	af00      	add	r7, sp, #0
 80134de:	60f8      	str	r0, [r7, #12]
 80134e0:	60b9      	str	r1, [r7, #8]
 80134e2:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 80134e4:	68b8      	ldr	r0, [r7, #8]
 80134e6:	f7f4 feb5 	bl	8008254 <strlen>
 80134ea:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 80134ec:	693b      	ldr	r3, [r7, #16]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d101      	bne.n	80134f6 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	e022      	b.n	801353c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	617b      	str	r3, [r7, #20]
 80134fa:	e012      	b.n	8013522 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	781a      	ldrb	r2, [r3, #0]
 8013500:	68bb      	ldr	r3, [r7, #8]
 8013502:	781b      	ldrb	r3, [r3, #0]
 8013504:	429a      	cmp	r2, r3
 8013506:	d109      	bne.n	801351c <lwip_strnstr+0x44>
 8013508:	693a      	ldr	r2, [r7, #16]
 801350a:	68b9      	ldr	r1, [r7, #8]
 801350c:	6978      	ldr	r0, [r7, #20]
 801350e:	f00a fe32 	bl	801e176 <strncmp>
 8013512:	4603      	mov	r3, r0
 8013514:	2b00      	cmp	r3, #0
 8013516:	d101      	bne.n	801351c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8013518:	697b      	ldr	r3, [r7, #20]
 801351a:	e00f      	b.n	801353c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801351c:	697b      	ldr	r3, [r7, #20]
 801351e:	3301      	adds	r3, #1
 8013520:	617b      	str	r3, [r7, #20]
 8013522:	697b      	ldr	r3, [r7, #20]
 8013524:	781b      	ldrb	r3, [r3, #0]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d007      	beq.n	801353a <lwip_strnstr+0x62>
 801352a:	697a      	ldr	r2, [r7, #20]
 801352c:	693b      	ldr	r3, [r7, #16]
 801352e:	441a      	add	r2, r3
 8013530:	68f9      	ldr	r1, [r7, #12]
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	440b      	add	r3, r1
 8013536:	429a      	cmp	r2, r3
 8013538:	d9e0      	bls.n	80134fc <lwip_strnstr+0x24>
    }
  }
  return NULL;
 801353a:	2300      	movs	r3, #0
}
 801353c:	4618      	mov	r0, r3
 801353e:	3718      	adds	r7, #24
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}

08013544 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b082      	sub	sp, #8
 8013548:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801354a:	2300      	movs	r3, #0
 801354c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801354e:	f00a fce9 	bl	801df24 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8013552:	f000 f8d5 	bl	8013700 <mem_init>
  memp_init();
 8013556:	f000 fc31 	bl	8013dbc <memp_init>
  pbuf_init();
  netif_init();
 801355a:	f000 fcf7 	bl	8013f4c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801355e:	f007 ffe1 	bl	801b524 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8013562:	f001 fe03 	bl	801516c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8013566:	f007 ff25 	bl	801b3b4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801356a:	bf00      	nop
 801356c:	3708      	adds	r7, #8
 801356e:	46bd      	mov	sp, r7
 8013570:	bd80      	pop	{r7, pc}
	...

08013574 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8013574:	b480      	push	{r7}
 8013576:	b083      	sub	sp, #12
 8013578:	af00      	add	r7, sp, #0
 801357a:	4603      	mov	r3, r0
 801357c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801357e:	4b05      	ldr	r3, [pc, #20]	; (8013594 <ptr_to_mem+0x20>)
 8013580:	681a      	ldr	r2, [r3, #0]
 8013582:	88fb      	ldrh	r3, [r7, #6]
 8013584:	4413      	add	r3, r2
}
 8013586:	4618      	mov	r0, r3
 8013588:	370c      	adds	r7, #12
 801358a:	46bd      	mov	sp, r7
 801358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013590:	4770      	bx	lr
 8013592:	bf00      	nop
 8013594:	200044e0 	.word	0x200044e0

08013598 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8013598:	b480      	push	{r7}
 801359a:	b083      	sub	sp, #12
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	4a05      	ldr	r2, [pc, #20]	; (80135b8 <mem_to_ptr+0x20>)
 80135a4:	6812      	ldr	r2, [r2, #0]
 80135a6:	1a9b      	subs	r3, r3, r2
 80135a8:	b29b      	uxth	r3, r3
}
 80135aa:	4618      	mov	r0, r3
 80135ac:	370c      	adds	r7, #12
 80135ae:	46bd      	mov	sp, r7
 80135b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b4:	4770      	bx	lr
 80135b6:	bf00      	nop
 80135b8:	200044e0 	.word	0x200044e0

080135bc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80135bc:	b590      	push	{r4, r7, lr}
 80135be:	b085      	sub	sp, #20
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80135c4:	4b45      	ldr	r3, [pc, #276]	; (80136dc <plug_holes+0x120>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	687a      	ldr	r2, [r7, #4]
 80135ca:	429a      	cmp	r2, r3
 80135cc:	d206      	bcs.n	80135dc <plug_holes+0x20>
 80135ce:	4b44      	ldr	r3, [pc, #272]	; (80136e0 <plug_holes+0x124>)
 80135d0:	f240 12df 	movw	r2, #479	; 0x1df
 80135d4:	4943      	ldr	r1, [pc, #268]	; (80136e4 <plug_holes+0x128>)
 80135d6:	4844      	ldr	r0, [pc, #272]	; (80136e8 <plug_holes+0x12c>)
 80135d8:	f00a fd74 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80135dc:	4b43      	ldr	r3, [pc, #268]	; (80136ec <plug_holes+0x130>)
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	687a      	ldr	r2, [r7, #4]
 80135e2:	429a      	cmp	r2, r3
 80135e4:	d306      	bcc.n	80135f4 <plug_holes+0x38>
 80135e6:	4b3e      	ldr	r3, [pc, #248]	; (80136e0 <plug_holes+0x124>)
 80135e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80135ec:	4940      	ldr	r1, [pc, #256]	; (80136f0 <plug_holes+0x134>)
 80135ee:	483e      	ldr	r0, [pc, #248]	; (80136e8 <plug_holes+0x12c>)
 80135f0:	f00a fd68 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	791b      	ldrb	r3, [r3, #4]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d006      	beq.n	801360a <plug_holes+0x4e>
 80135fc:	4b38      	ldr	r3, [pc, #224]	; (80136e0 <plug_holes+0x124>)
 80135fe:	f240 12e1 	movw	r2, #481	; 0x1e1
 8013602:	493c      	ldr	r1, [pc, #240]	; (80136f4 <plug_holes+0x138>)
 8013604:	4838      	ldr	r0, [pc, #224]	; (80136e8 <plug_holes+0x12c>)
 8013606:	f00a fd5d 	bl	801e0c4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	881b      	ldrh	r3, [r3, #0]
 801360e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013612:	d906      	bls.n	8013622 <plug_holes+0x66>
 8013614:	4b32      	ldr	r3, [pc, #200]	; (80136e0 <plug_holes+0x124>)
 8013616:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801361a:	4937      	ldr	r1, [pc, #220]	; (80136f8 <plug_holes+0x13c>)
 801361c:	4832      	ldr	r0, [pc, #200]	; (80136e8 <plug_holes+0x12c>)
 801361e:	f00a fd51 	bl	801e0c4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	881b      	ldrh	r3, [r3, #0]
 8013626:	4618      	mov	r0, r3
 8013628:	f7ff ffa4 	bl	8013574 <ptr_to_mem>
 801362c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801362e:	687a      	ldr	r2, [r7, #4]
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	429a      	cmp	r2, r3
 8013634:	d024      	beq.n	8013680 <plug_holes+0xc4>
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	791b      	ldrb	r3, [r3, #4]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d120      	bne.n	8013680 <plug_holes+0xc4>
 801363e:	4b2b      	ldr	r3, [pc, #172]	; (80136ec <plug_holes+0x130>)
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	68fa      	ldr	r2, [r7, #12]
 8013644:	429a      	cmp	r2, r3
 8013646:	d01b      	beq.n	8013680 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8013648:	4b2c      	ldr	r3, [pc, #176]	; (80136fc <plug_holes+0x140>)
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	68fa      	ldr	r2, [r7, #12]
 801364e:	429a      	cmp	r2, r3
 8013650:	d102      	bne.n	8013658 <plug_holes+0x9c>
      lfree = mem;
 8013652:	4a2a      	ldr	r2, [pc, #168]	; (80136fc <plug_holes+0x140>)
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	881a      	ldrh	r2, [r3, #0]
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	881b      	ldrh	r3, [r3, #0]
 8013664:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013668:	d00a      	beq.n	8013680 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	881b      	ldrh	r3, [r3, #0]
 801366e:	4618      	mov	r0, r3
 8013670:	f7ff ff80 	bl	8013574 <ptr_to_mem>
 8013674:	4604      	mov	r4, r0
 8013676:	6878      	ldr	r0, [r7, #4]
 8013678:	f7ff ff8e 	bl	8013598 <mem_to_ptr>
 801367c:	4603      	mov	r3, r0
 801367e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	885b      	ldrh	r3, [r3, #2]
 8013684:	4618      	mov	r0, r3
 8013686:	f7ff ff75 	bl	8013574 <ptr_to_mem>
 801368a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801368c:	68ba      	ldr	r2, [r7, #8]
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	429a      	cmp	r2, r3
 8013692:	d01f      	beq.n	80136d4 <plug_holes+0x118>
 8013694:	68bb      	ldr	r3, [r7, #8]
 8013696:	791b      	ldrb	r3, [r3, #4]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d11b      	bne.n	80136d4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801369c:	4b17      	ldr	r3, [pc, #92]	; (80136fc <plug_holes+0x140>)
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	687a      	ldr	r2, [r7, #4]
 80136a2:	429a      	cmp	r2, r3
 80136a4:	d102      	bne.n	80136ac <plug_holes+0xf0>
      lfree = pmem;
 80136a6:	4a15      	ldr	r2, [pc, #84]	; (80136fc <plug_holes+0x140>)
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	881a      	ldrh	r2, [r3, #0]
 80136b0:	68bb      	ldr	r3, [r7, #8]
 80136b2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	881b      	ldrh	r3, [r3, #0]
 80136b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80136bc:	d00a      	beq.n	80136d4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	881b      	ldrh	r3, [r3, #0]
 80136c2:	4618      	mov	r0, r3
 80136c4:	f7ff ff56 	bl	8013574 <ptr_to_mem>
 80136c8:	4604      	mov	r4, r0
 80136ca:	68b8      	ldr	r0, [r7, #8]
 80136cc:	f7ff ff64 	bl	8013598 <mem_to_ptr>
 80136d0:	4603      	mov	r3, r0
 80136d2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80136d4:	bf00      	nop
 80136d6:	3714      	adds	r7, #20
 80136d8:	46bd      	mov	sp, r7
 80136da:	bd90      	pop	{r4, r7, pc}
 80136dc:	200044e0 	.word	0x200044e0
 80136e0:	0801f328 	.word	0x0801f328
 80136e4:	0801f358 	.word	0x0801f358
 80136e8:	0801f370 	.word	0x0801f370
 80136ec:	200044e4 	.word	0x200044e4
 80136f0:	0801f398 	.word	0x0801f398
 80136f4:	0801f3b4 	.word	0x0801f3b4
 80136f8:	0801f3d0 	.word	0x0801f3d0
 80136fc:	200044ec 	.word	0x200044ec

08013700 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b082      	sub	sp, #8
 8013704:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013706:	4b1f      	ldr	r3, [pc, #124]	; (8013784 <mem_init+0x84>)
 8013708:	3303      	adds	r3, #3
 801370a:	f023 0303 	bic.w	r3, r3, #3
 801370e:	461a      	mov	r2, r3
 8013710:	4b1d      	ldr	r3, [pc, #116]	; (8013788 <mem_init+0x88>)
 8013712:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8013714:	4b1c      	ldr	r3, [pc, #112]	; (8013788 <mem_init+0x88>)
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8013720:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	2200      	movs	r2, #0
 8013726:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2200      	movs	r2, #0
 801372c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801372e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8013732:	f7ff ff1f 	bl	8013574 <ptr_to_mem>
 8013736:	4602      	mov	r2, r0
 8013738:	4b14      	ldr	r3, [pc, #80]	; (801378c <mem_init+0x8c>)
 801373a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 801373c:	4b13      	ldr	r3, [pc, #76]	; (801378c <mem_init+0x8c>)
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	2201      	movs	r2, #1
 8013742:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013744:	4b11      	ldr	r3, [pc, #68]	; (801378c <mem_init+0x8c>)
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801374c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801374e:	4b0f      	ldr	r3, [pc, #60]	; (801378c <mem_init+0x8c>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8013756:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8013758:	4b0b      	ldr	r3, [pc, #44]	; (8013788 <mem_init+0x88>)
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	4a0c      	ldr	r2, [pc, #48]	; (8013790 <mem_init+0x90>)
 801375e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8013760:	480c      	ldr	r0, [pc, #48]	; (8013794 <mem_init+0x94>)
 8013762:	f00a fbed 	bl	801df40 <sys_mutex_new>
 8013766:	4603      	mov	r3, r0
 8013768:	2b00      	cmp	r3, #0
 801376a:	d006      	beq.n	801377a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801376c:	4b0a      	ldr	r3, [pc, #40]	; (8013798 <mem_init+0x98>)
 801376e:	f240 221f 	movw	r2, #543	; 0x21f
 8013772:	490a      	ldr	r1, [pc, #40]	; (801379c <mem_init+0x9c>)
 8013774:	480a      	ldr	r0, [pc, #40]	; (80137a0 <mem_init+0xa0>)
 8013776:	f00a fca5 	bl	801e0c4 <iprintf>
  }
}
 801377a:	bf00      	nop
 801377c:	3708      	adds	r7, #8
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}
 8013782:	bf00      	nop
 8013784:	20007e0c 	.word	0x20007e0c
 8013788:	200044e0 	.word	0x200044e0
 801378c:	200044e4 	.word	0x200044e4
 8013790:	200044ec 	.word	0x200044ec
 8013794:	200044e8 	.word	0x200044e8
 8013798:	0801f328 	.word	0x0801f328
 801379c:	0801f3fc 	.word	0x0801f3fc
 80137a0:	0801f370 	.word	0x0801f370

080137a4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b086      	sub	sp, #24
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80137ac:	6878      	ldr	r0, [r7, #4]
 80137ae:	f7ff fef3 	bl	8013598 <mem_to_ptr>
 80137b2:	4603      	mov	r3, r0
 80137b4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	881b      	ldrh	r3, [r3, #0]
 80137ba:	4618      	mov	r0, r3
 80137bc:	f7ff feda 	bl	8013574 <ptr_to_mem>
 80137c0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	885b      	ldrh	r3, [r3, #2]
 80137c6:	4618      	mov	r0, r3
 80137c8:	f7ff fed4 	bl	8013574 <ptr_to_mem>
 80137cc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	881b      	ldrh	r3, [r3, #0]
 80137d2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80137d6:	d818      	bhi.n	801380a <mem_link_valid+0x66>
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	885b      	ldrh	r3, [r3, #2]
 80137dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80137e0:	d813      	bhi.n	801380a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80137e6:	8afa      	ldrh	r2, [r7, #22]
 80137e8:	429a      	cmp	r2, r3
 80137ea:	d004      	beq.n	80137f6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	881b      	ldrh	r3, [r3, #0]
 80137f0:	8afa      	ldrh	r2, [r7, #22]
 80137f2:	429a      	cmp	r2, r3
 80137f4:	d109      	bne.n	801380a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80137f6:	4b08      	ldr	r3, [pc, #32]	; (8013818 <mem_link_valid+0x74>)
 80137f8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80137fa:	693a      	ldr	r2, [r7, #16]
 80137fc:	429a      	cmp	r2, r3
 80137fe:	d006      	beq.n	801380e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013800:	693b      	ldr	r3, [r7, #16]
 8013802:	885b      	ldrh	r3, [r3, #2]
 8013804:	8afa      	ldrh	r2, [r7, #22]
 8013806:	429a      	cmp	r2, r3
 8013808:	d001      	beq.n	801380e <mem_link_valid+0x6a>
    return 0;
 801380a:	2300      	movs	r3, #0
 801380c:	e000      	b.n	8013810 <mem_link_valid+0x6c>
  }
  return 1;
 801380e:	2301      	movs	r3, #1
}
 8013810:	4618      	mov	r0, r3
 8013812:	3718      	adds	r7, #24
 8013814:	46bd      	mov	sp, r7
 8013816:	bd80      	pop	{r7, pc}
 8013818:	200044e4 	.word	0x200044e4

0801381c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801381c:	b580      	push	{r7, lr}
 801381e:	b088      	sub	sp, #32
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d070      	beq.n	801390c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	f003 0303 	and.w	r3, r3, #3
 8013830:	2b00      	cmp	r3, #0
 8013832:	d00d      	beq.n	8013850 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013834:	4b37      	ldr	r3, [pc, #220]	; (8013914 <mem_free+0xf8>)
 8013836:	f240 2273 	movw	r2, #627	; 0x273
 801383a:	4937      	ldr	r1, [pc, #220]	; (8013918 <mem_free+0xfc>)
 801383c:	4837      	ldr	r0, [pc, #220]	; (801391c <mem_free+0x100>)
 801383e:	f00a fc41 	bl	801e0c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013842:	f00a fbdb 	bl	801dffc <sys_arch_protect>
 8013846:	60f8      	str	r0, [r7, #12]
 8013848:	68f8      	ldr	r0, [r7, #12]
 801384a:	f00a fbe5 	bl	801e018 <sys_arch_unprotect>
    return;
 801384e:	e05e      	b.n	801390e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	3b08      	subs	r3, #8
 8013854:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013856:	4b32      	ldr	r3, [pc, #200]	; (8013920 <mem_free+0x104>)
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	69fa      	ldr	r2, [r7, #28]
 801385c:	429a      	cmp	r2, r3
 801385e:	d306      	bcc.n	801386e <mem_free+0x52>
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	f103 020c 	add.w	r2, r3, #12
 8013866:	4b2f      	ldr	r3, [pc, #188]	; (8013924 <mem_free+0x108>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	429a      	cmp	r2, r3
 801386c:	d90d      	bls.n	801388a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801386e:	4b29      	ldr	r3, [pc, #164]	; (8013914 <mem_free+0xf8>)
 8013870:	f240 227f 	movw	r2, #639	; 0x27f
 8013874:	492c      	ldr	r1, [pc, #176]	; (8013928 <mem_free+0x10c>)
 8013876:	4829      	ldr	r0, [pc, #164]	; (801391c <mem_free+0x100>)
 8013878:	f00a fc24 	bl	801e0c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801387c:	f00a fbbe 	bl	801dffc <sys_arch_protect>
 8013880:	6138      	str	r0, [r7, #16]
 8013882:	6938      	ldr	r0, [r7, #16]
 8013884:	f00a fbc8 	bl	801e018 <sys_arch_unprotect>
    return;
 8013888:	e041      	b.n	801390e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801388a:	4828      	ldr	r0, [pc, #160]	; (801392c <mem_free+0x110>)
 801388c:	f00a fb74 	bl	801df78 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8013890:	69fb      	ldr	r3, [r7, #28]
 8013892:	791b      	ldrb	r3, [r3, #4]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d110      	bne.n	80138ba <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8013898:	4b1e      	ldr	r3, [pc, #120]	; (8013914 <mem_free+0xf8>)
 801389a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801389e:	4924      	ldr	r1, [pc, #144]	; (8013930 <mem_free+0x114>)
 80138a0:	481e      	ldr	r0, [pc, #120]	; (801391c <mem_free+0x100>)
 80138a2:	f00a fc0f 	bl	801e0c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80138a6:	4821      	ldr	r0, [pc, #132]	; (801392c <mem_free+0x110>)
 80138a8:	f00a fb75 	bl	801df96 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80138ac:	f00a fba6 	bl	801dffc <sys_arch_protect>
 80138b0:	6178      	str	r0, [r7, #20]
 80138b2:	6978      	ldr	r0, [r7, #20]
 80138b4:	f00a fbb0 	bl	801e018 <sys_arch_unprotect>
    return;
 80138b8:	e029      	b.n	801390e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80138ba:	69f8      	ldr	r0, [r7, #28]
 80138bc:	f7ff ff72 	bl	80137a4 <mem_link_valid>
 80138c0:	4603      	mov	r3, r0
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d110      	bne.n	80138e8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80138c6:	4b13      	ldr	r3, [pc, #76]	; (8013914 <mem_free+0xf8>)
 80138c8:	f240 2295 	movw	r2, #661	; 0x295
 80138cc:	4919      	ldr	r1, [pc, #100]	; (8013934 <mem_free+0x118>)
 80138ce:	4813      	ldr	r0, [pc, #76]	; (801391c <mem_free+0x100>)
 80138d0:	f00a fbf8 	bl	801e0c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80138d4:	4815      	ldr	r0, [pc, #84]	; (801392c <mem_free+0x110>)
 80138d6:	f00a fb5e 	bl	801df96 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80138da:	f00a fb8f 	bl	801dffc <sys_arch_protect>
 80138de:	61b8      	str	r0, [r7, #24]
 80138e0:	69b8      	ldr	r0, [r7, #24]
 80138e2:	f00a fb99 	bl	801e018 <sys_arch_unprotect>
    return;
 80138e6:	e012      	b.n	801390e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80138e8:	69fb      	ldr	r3, [r7, #28]
 80138ea:	2200      	movs	r2, #0
 80138ec:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80138ee:	4b12      	ldr	r3, [pc, #72]	; (8013938 <mem_free+0x11c>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	69fa      	ldr	r2, [r7, #28]
 80138f4:	429a      	cmp	r2, r3
 80138f6:	d202      	bcs.n	80138fe <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80138f8:	4a0f      	ldr	r2, [pc, #60]	; (8013938 <mem_free+0x11c>)
 80138fa:	69fb      	ldr	r3, [r7, #28]
 80138fc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80138fe:	69f8      	ldr	r0, [r7, #28]
 8013900:	f7ff fe5c 	bl	80135bc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013904:	4809      	ldr	r0, [pc, #36]	; (801392c <mem_free+0x110>)
 8013906:	f00a fb46 	bl	801df96 <sys_mutex_unlock>
 801390a:	e000      	b.n	801390e <mem_free+0xf2>
    return;
 801390c:	bf00      	nop
}
 801390e:	3720      	adds	r7, #32
 8013910:	46bd      	mov	sp, r7
 8013912:	bd80      	pop	{r7, pc}
 8013914:	0801f328 	.word	0x0801f328
 8013918:	0801f418 	.word	0x0801f418
 801391c:	0801f370 	.word	0x0801f370
 8013920:	200044e0 	.word	0x200044e0
 8013924:	200044e4 	.word	0x200044e4
 8013928:	0801f43c 	.word	0x0801f43c
 801392c:	200044e8 	.word	0x200044e8
 8013930:	0801f458 	.word	0x0801f458
 8013934:	0801f480 	.word	0x0801f480
 8013938:	200044ec 	.word	0x200044ec

0801393c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b088      	sub	sp, #32
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
 8013944:	460b      	mov	r3, r1
 8013946:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8013948:	887b      	ldrh	r3, [r7, #2]
 801394a:	3303      	adds	r3, #3
 801394c:	b29b      	uxth	r3, r3
 801394e:	f023 0303 	bic.w	r3, r3, #3
 8013952:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8013954:	8bfb      	ldrh	r3, [r7, #30]
 8013956:	2b0b      	cmp	r3, #11
 8013958:	d801      	bhi.n	801395e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801395a:	230c      	movs	r3, #12
 801395c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801395e:	8bfb      	ldrh	r3, [r7, #30]
 8013960:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013964:	d803      	bhi.n	801396e <mem_trim+0x32>
 8013966:	8bfa      	ldrh	r2, [r7, #30]
 8013968:	887b      	ldrh	r3, [r7, #2]
 801396a:	429a      	cmp	r2, r3
 801396c:	d201      	bcs.n	8013972 <mem_trim+0x36>
    return NULL;
 801396e:	2300      	movs	r3, #0
 8013970:	e0d8      	b.n	8013b24 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013972:	4b6e      	ldr	r3, [pc, #440]	; (8013b2c <mem_trim+0x1f0>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	687a      	ldr	r2, [r7, #4]
 8013978:	429a      	cmp	r2, r3
 801397a:	d304      	bcc.n	8013986 <mem_trim+0x4a>
 801397c:	4b6c      	ldr	r3, [pc, #432]	; (8013b30 <mem_trim+0x1f4>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	687a      	ldr	r2, [r7, #4]
 8013982:	429a      	cmp	r2, r3
 8013984:	d306      	bcc.n	8013994 <mem_trim+0x58>
 8013986:	4b6b      	ldr	r3, [pc, #428]	; (8013b34 <mem_trim+0x1f8>)
 8013988:	f240 22d2 	movw	r2, #722	; 0x2d2
 801398c:	496a      	ldr	r1, [pc, #424]	; (8013b38 <mem_trim+0x1fc>)
 801398e:	486b      	ldr	r0, [pc, #428]	; (8013b3c <mem_trim+0x200>)
 8013990:	f00a fb98 	bl	801e0c4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013994:	4b65      	ldr	r3, [pc, #404]	; (8013b2c <mem_trim+0x1f0>)
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	687a      	ldr	r2, [r7, #4]
 801399a:	429a      	cmp	r2, r3
 801399c:	d304      	bcc.n	80139a8 <mem_trim+0x6c>
 801399e:	4b64      	ldr	r3, [pc, #400]	; (8013b30 <mem_trim+0x1f4>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	687a      	ldr	r2, [r7, #4]
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d307      	bcc.n	80139b8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80139a8:	f00a fb28 	bl	801dffc <sys_arch_protect>
 80139ac:	60b8      	str	r0, [r7, #8]
 80139ae:	68b8      	ldr	r0, [r7, #8]
 80139b0:	f00a fb32 	bl	801e018 <sys_arch_unprotect>
    return rmem;
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	e0b5      	b.n	8013b24 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	3b08      	subs	r3, #8
 80139bc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80139be:	69b8      	ldr	r0, [r7, #24]
 80139c0:	f7ff fdea 	bl	8013598 <mem_to_ptr>
 80139c4:	4603      	mov	r3, r0
 80139c6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80139c8:	69bb      	ldr	r3, [r7, #24]
 80139ca:	881a      	ldrh	r2, [r3, #0]
 80139cc:	8afb      	ldrh	r3, [r7, #22]
 80139ce:	1ad3      	subs	r3, r2, r3
 80139d0:	b29b      	uxth	r3, r3
 80139d2:	3b08      	subs	r3, #8
 80139d4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80139d6:	8bfa      	ldrh	r2, [r7, #30]
 80139d8:	8abb      	ldrh	r3, [r7, #20]
 80139da:	429a      	cmp	r2, r3
 80139dc:	d906      	bls.n	80139ec <mem_trim+0xb0>
 80139de:	4b55      	ldr	r3, [pc, #340]	; (8013b34 <mem_trim+0x1f8>)
 80139e0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80139e4:	4956      	ldr	r1, [pc, #344]	; (8013b40 <mem_trim+0x204>)
 80139e6:	4855      	ldr	r0, [pc, #340]	; (8013b3c <mem_trim+0x200>)
 80139e8:	f00a fb6c 	bl	801e0c4 <iprintf>
  if (newsize > size) {
 80139ec:	8bfa      	ldrh	r2, [r7, #30]
 80139ee:	8abb      	ldrh	r3, [r7, #20]
 80139f0:	429a      	cmp	r2, r3
 80139f2:	d901      	bls.n	80139f8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80139f4:	2300      	movs	r3, #0
 80139f6:	e095      	b.n	8013b24 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80139f8:	8bfa      	ldrh	r2, [r7, #30]
 80139fa:	8abb      	ldrh	r3, [r7, #20]
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d101      	bne.n	8013a04 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	e08f      	b.n	8013b24 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013a04:	484f      	ldr	r0, [pc, #316]	; (8013b44 <mem_trim+0x208>)
 8013a06:	f00a fab7 	bl	801df78 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8013a0a:	69bb      	ldr	r3, [r7, #24]
 8013a0c:	881b      	ldrh	r3, [r3, #0]
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f7ff fdb0 	bl	8013574 <ptr_to_mem>
 8013a14:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8013a16:	693b      	ldr	r3, [r7, #16]
 8013a18:	791b      	ldrb	r3, [r3, #4]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d13f      	bne.n	8013a9e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013a1e:	69bb      	ldr	r3, [r7, #24]
 8013a20:	881b      	ldrh	r3, [r3, #0]
 8013a22:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013a26:	d106      	bne.n	8013a36 <mem_trim+0xfa>
 8013a28:	4b42      	ldr	r3, [pc, #264]	; (8013b34 <mem_trim+0x1f8>)
 8013a2a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8013a2e:	4946      	ldr	r1, [pc, #280]	; (8013b48 <mem_trim+0x20c>)
 8013a30:	4842      	ldr	r0, [pc, #264]	; (8013b3c <mem_trim+0x200>)
 8013a32:	f00a fb47 	bl	801e0c4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	881b      	ldrh	r3, [r3, #0]
 8013a3a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013a3c:	8afa      	ldrh	r2, [r7, #22]
 8013a3e:	8bfb      	ldrh	r3, [r7, #30]
 8013a40:	4413      	add	r3, r2
 8013a42:	b29b      	uxth	r3, r3
 8013a44:	3308      	adds	r3, #8
 8013a46:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8013a48:	4b40      	ldr	r3, [pc, #256]	; (8013b4c <mem_trim+0x210>)
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	693a      	ldr	r2, [r7, #16]
 8013a4e:	429a      	cmp	r2, r3
 8013a50:	d106      	bne.n	8013a60 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8013a52:	89fb      	ldrh	r3, [r7, #14]
 8013a54:	4618      	mov	r0, r3
 8013a56:	f7ff fd8d 	bl	8013574 <ptr_to_mem>
 8013a5a:	4602      	mov	r2, r0
 8013a5c:	4b3b      	ldr	r3, [pc, #236]	; (8013b4c <mem_trim+0x210>)
 8013a5e:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8013a60:	89fb      	ldrh	r3, [r7, #14]
 8013a62:	4618      	mov	r0, r3
 8013a64:	f7ff fd86 	bl	8013574 <ptr_to_mem>
 8013a68:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8013a70:	693b      	ldr	r3, [r7, #16]
 8013a72:	89ba      	ldrh	r2, [r7, #12]
 8013a74:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013a76:	693b      	ldr	r3, [r7, #16]
 8013a78:	8afa      	ldrh	r2, [r7, #22]
 8013a7a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013a7c:	69bb      	ldr	r3, [r7, #24]
 8013a7e:	89fa      	ldrh	r2, [r7, #14]
 8013a80:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013a82:	693b      	ldr	r3, [r7, #16]
 8013a84:	881b      	ldrh	r3, [r3, #0]
 8013a86:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013a8a:	d047      	beq.n	8013b1c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013a8c:	693b      	ldr	r3, [r7, #16]
 8013a8e:	881b      	ldrh	r3, [r3, #0]
 8013a90:	4618      	mov	r0, r3
 8013a92:	f7ff fd6f 	bl	8013574 <ptr_to_mem>
 8013a96:	4602      	mov	r2, r0
 8013a98:	89fb      	ldrh	r3, [r7, #14]
 8013a9a:	8053      	strh	r3, [r2, #2]
 8013a9c:	e03e      	b.n	8013b1c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8013a9e:	8bfb      	ldrh	r3, [r7, #30]
 8013aa0:	f103 0214 	add.w	r2, r3, #20
 8013aa4:	8abb      	ldrh	r3, [r7, #20]
 8013aa6:	429a      	cmp	r2, r3
 8013aa8:	d838      	bhi.n	8013b1c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013aaa:	8afa      	ldrh	r2, [r7, #22]
 8013aac:	8bfb      	ldrh	r3, [r7, #30]
 8013aae:	4413      	add	r3, r2
 8013ab0:	b29b      	uxth	r3, r3
 8013ab2:	3308      	adds	r3, #8
 8013ab4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013ab6:	69bb      	ldr	r3, [r7, #24]
 8013ab8:	881b      	ldrh	r3, [r3, #0]
 8013aba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013abe:	d106      	bne.n	8013ace <mem_trim+0x192>
 8013ac0:	4b1c      	ldr	r3, [pc, #112]	; (8013b34 <mem_trim+0x1f8>)
 8013ac2:	f240 3216 	movw	r2, #790	; 0x316
 8013ac6:	4920      	ldr	r1, [pc, #128]	; (8013b48 <mem_trim+0x20c>)
 8013ac8:	481c      	ldr	r0, [pc, #112]	; (8013b3c <mem_trim+0x200>)
 8013aca:	f00a fafb 	bl	801e0c4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8013ace:	89fb      	ldrh	r3, [r7, #14]
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f7ff fd4f 	bl	8013574 <ptr_to_mem>
 8013ad6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013ad8:	4b1c      	ldr	r3, [pc, #112]	; (8013b4c <mem_trim+0x210>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	693a      	ldr	r2, [r7, #16]
 8013ade:	429a      	cmp	r2, r3
 8013ae0:	d202      	bcs.n	8013ae8 <mem_trim+0x1ac>
      lfree = mem2;
 8013ae2:	4a1a      	ldr	r2, [pc, #104]	; (8013b4c <mem_trim+0x210>)
 8013ae4:	693b      	ldr	r3, [r7, #16]
 8013ae6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013ae8:	693b      	ldr	r3, [r7, #16]
 8013aea:	2200      	movs	r2, #0
 8013aec:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8013aee:	69bb      	ldr	r3, [r7, #24]
 8013af0:	881a      	ldrh	r2, [r3, #0]
 8013af2:	693b      	ldr	r3, [r7, #16]
 8013af4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	8afa      	ldrh	r2, [r7, #22]
 8013afa:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8013afc:	69bb      	ldr	r3, [r7, #24]
 8013afe:	89fa      	ldrh	r2, [r7, #14]
 8013b00:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013b02:	693b      	ldr	r3, [r7, #16]
 8013b04:	881b      	ldrh	r3, [r3, #0]
 8013b06:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013b0a:	d007      	beq.n	8013b1c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013b0c:	693b      	ldr	r3, [r7, #16]
 8013b0e:	881b      	ldrh	r3, [r3, #0]
 8013b10:	4618      	mov	r0, r3
 8013b12:	f7ff fd2f 	bl	8013574 <ptr_to_mem>
 8013b16:	4602      	mov	r2, r0
 8013b18:	89fb      	ldrh	r3, [r7, #14]
 8013b1a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013b1c:	4809      	ldr	r0, [pc, #36]	; (8013b44 <mem_trim+0x208>)
 8013b1e:	f00a fa3a 	bl	801df96 <sys_mutex_unlock>
  return rmem;
 8013b22:	687b      	ldr	r3, [r7, #4]
}
 8013b24:	4618      	mov	r0, r3
 8013b26:	3720      	adds	r7, #32
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bd80      	pop	{r7, pc}
 8013b2c:	200044e0 	.word	0x200044e0
 8013b30:	200044e4 	.word	0x200044e4
 8013b34:	0801f328 	.word	0x0801f328
 8013b38:	0801f4b4 	.word	0x0801f4b4
 8013b3c:	0801f370 	.word	0x0801f370
 8013b40:	0801f4cc 	.word	0x0801f4cc
 8013b44:	200044e8 	.word	0x200044e8
 8013b48:	0801f4ec 	.word	0x0801f4ec
 8013b4c:	200044ec 	.word	0x200044ec

08013b50 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b088      	sub	sp, #32
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	4603      	mov	r3, r0
 8013b58:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013b5a:	88fb      	ldrh	r3, [r7, #6]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d101      	bne.n	8013b64 <mem_malloc+0x14>
    return NULL;
 8013b60:	2300      	movs	r3, #0
 8013b62:	e0e2      	b.n	8013d2a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013b64:	88fb      	ldrh	r3, [r7, #6]
 8013b66:	3303      	adds	r3, #3
 8013b68:	b29b      	uxth	r3, r3
 8013b6a:	f023 0303 	bic.w	r3, r3, #3
 8013b6e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013b70:	8bbb      	ldrh	r3, [r7, #28]
 8013b72:	2b0b      	cmp	r3, #11
 8013b74:	d801      	bhi.n	8013b7a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013b76:	230c      	movs	r3, #12
 8013b78:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013b7a:	8bbb      	ldrh	r3, [r7, #28]
 8013b7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013b80:	d803      	bhi.n	8013b8a <mem_malloc+0x3a>
 8013b82:	8bba      	ldrh	r2, [r7, #28]
 8013b84:	88fb      	ldrh	r3, [r7, #6]
 8013b86:	429a      	cmp	r2, r3
 8013b88:	d201      	bcs.n	8013b8e <mem_malloc+0x3e>
    return NULL;
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	e0cd      	b.n	8013d2a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013b8e:	4869      	ldr	r0, [pc, #420]	; (8013d34 <mem_malloc+0x1e4>)
 8013b90:	f00a f9f2 	bl	801df78 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013b94:	4b68      	ldr	r3, [pc, #416]	; (8013d38 <mem_malloc+0x1e8>)
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f7ff fcfd 	bl	8013598 <mem_to_ptr>
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	83fb      	strh	r3, [r7, #30]
 8013ba2:	e0b7      	b.n	8013d14 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013ba4:	8bfb      	ldrh	r3, [r7, #30]
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f7ff fce4 	bl	8013574 <ptr_to_mem>
 8013bac:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8013bae:	697b      	ldr	r3, [r7, #20]
 8013bb0:	791b      	ldrb	r3, [r3, #4]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	f040 80a7 	bne.w	8013d06 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013bb8:	697b      	ldr	r3, [r7, #20]
 8013bba:	881b      	ldrh	r3, [r3, #0]
 8013bbc:	461a      	mov	r2, r3
 8013bbe:	8bfb      	ldrh	r3, [r7, #30]
 8013bc0:	1ad3      	subs	r3, r2, r3
 8013bc2:	f1a3 0208 	sub.w	r2, r3, #8
 8013bc6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013bc8:	429a      	cmp	r2, r3
 8013bca:	f0c0 809c 	bcc.w	8013d06 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8013bce:	697b      	ldr	r3, [r7, #20]
 8013bd0:	881b      	ldrh	r3, [r3, #0]
 8013bd2:	461a      	mov	r2, r3
 8013bd4:	8bfb      	ldrh	r3, [r7, #30]
 8013bd6:	1ad3      	subs	r3, r2, r3
 8013bd8:	f1a3 0208 	sub.w	r2, r3, #8
 8013bdc:	8bbb      	ldrh	r3, [r7, #28]
 8013bde:	3314      	adds	r3, #20
 8013be0:	429a      	cmp	r2, r3
 8013be2:	d333      	bcc.n	8013c4c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013be4:	8bfa      	ldrh	r2, [r7, #30]
 8013be6:	8bbb      	ldrh	r3, [r7, #28]
 8013be8:	4413      	add	r3, r2
 8013bea:	b29b      	uxth	r3, r3
 8013bec:	3308      	adds	r3, #8
 8013bee:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013bf0:	8a7b      	ldrh	r3, [r7, #18]
 8013bf2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013bf6:	d106      	bne.n	8013c06 <mem_malloc+0xb6>
 8013bf8:	4b50      	ldr	r3, [pc, #320]	; (8013d3c <mem_malloc+0x1ec>)
 8013bfa:	f240 3287 	movw	r2, #903	; 0x387
 8013bfe:	4950      	ldr	r1, [pc, #320]	; (8013d40 <mem_malloc+0x1f0>)
 8013c00:	4850      	ldr	r0, [pc, #320]	; (8013d44 <mem_malloc+0x1f4>)
 8013c02:	f00a fa5f 	bl	801e0c4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013c06:	8a7b      	ldrh	r3, [r7, #18]
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f7ff fcb3 	bl	8013574 <ptr_to_mem>
 8013c0e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	2200      	movs	r2, #0
 8013c14:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013c16:	697b      	ldr	r3, [r7, #20]
 8013c18:	881a      	ldrh	r2, [r3, #0]
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	8bfa      	ldrh	r2, [r7, #30]
 8013c22:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013c24:	697b      	ldr	r3, [r7, #20]
 8013c26:	8a7a      	ldrh	r2, [r7, #18]
 8013c28:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8013c2a:	697b      	ldr	r3, [r7, #20]
 8013c2c:	2201      	movs	r2, #1
 8013c2e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	881b      	ldrh	r3, [r3, #0]
 8013c34:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013c38:	d00b      	beq.n	8013c52 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	881b      	ldrh	r3, [r3, #0]
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f7ff fc98 	bl	8013574 <ptr_to_mem>
 8013c44:	4602      	mov	r2, r0
 8013c46:	8a7b      	ldrh	r3, [r7, #18]
 8013c48:	8053      	strh	r3, [r2, #2]
 8013c4a:	e002      	b.n	8013c52 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013c4c:	697b      	ldr	r3, [r7, #20]
 8013c4e:	2201      	movs	r2, #1
 8013c50:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013c52:	4b39      	ldr	r3, [pc, #228]	; (8013d38 <mem_malloc+0x1e8>)
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	697a      	ldr	r2, [r7, #20]
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d127      	bne.n	8013cac <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8013c5c:	4b36      	ldr	r3, [pc, #216]	; (8013d38 <mem_malloc+0x1e8>)
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013c62:	e005      	b.n	8013c70 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013c64:	69bb      	ldr	r3, [r7, #24]
 8013c66:	881b      	ldrh	r3, [r3, #0]
 8013c68:	4618      	mov	r0, r3
 8013c6a:	f7ff fc83 	bl	8013574 <ptr_to_mem>
 8013c6e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013c70:	69bb      	ldr	r3, [r7, #24]
 8013c72:	791b      	ldrb	r3, [r3, #4]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d004      	beq.n	8013c82 <mem_malloc+0x132>
 8013c78:	4b33      	ldr	r3, [pc, #204]	; (8013d48 <mem_malloc+0x1f8>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	69ba      	ldr	r2, [r7, #24]
 8013c7e:	429a      	cmp	r2, r3
 8013c80:	d1f0      	bne.n	8013c64 <mem_malloc+0x114>
          }
          lfree = cur;
 8013c82:	4a2d      	ldr	r2, [pc, #180]	; (8013d38 <mem_malloc+0x1e8>)
 8013c84:	69bb      	ldr	r3, [r7, #24]
 8013c86:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013c88:	4b2b      	ldr	r3, [pc, #172]	; (8013d38 <mem_malloc+0x1e8>)
 8013c8a:	681a      	ldr	r2, [r3, #0]
 8013c8c:	4b2e      	ldr	r3, [pc, #184]	; (8013d48 <mem_malloc+0x1f8>)
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	429a      	cmp	r2, r3
 8013c92:	d00b      	beq.n	8013cac <mem_malloc+0x15c>
 8013c94:	4b28      	ldr	r3, [pc, #160]	; (8013d38 <mem_malloc+0x1e8>)
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	791b      	ldrb	r3, [r3, #4]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d006      	beq.n	8013cac <mem_malloc+0x15c>
 8013c9e:	4b27      	ldr	r3, [pc, #156]	; (8013d3c <mem_malloc+0x1ec>)
 8013ca0:	f240 32b5 	movw	r2, #949	; 0x3b5
 8013ca4:	4929      	ldr	r1, [pc, #164]	; (8013d4c <mem_malloc+0x1fc>)
 8013ca6:	4827      	ldr	r0, [pc, #156]	; (8013d44 <mem_malloc+0x1f4>)
 8013ca8:	f00a fa0c 	bl	801e0c4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013cac:	4821      	ldr	r0, [pc, #132]	; (8013d34 <mem_malloc+0x1e4>)
 8013cae:	f00a f972 	bl	801df96 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013cb2:	8bba      	ldrh	r2, [r7, #28]
 8013cb4:	697b      	ldr	r3, [r7, #20]
 8013cb6:	4413      	add	r3, r2
 8013cb8:	3308      	adds	r3, #8
 8013cba:	4a23      	ldr	r2, [pc, #140]	; (8013d48 <mem_malloc+0x1f8>)
 8013cbc:	6812      	ldr	r2, [r2, #0]
 8013cbe:	4293      	cmp	r3, r2
 8013cc0:	d906      	bls.n	8013cd0 <mem_malloc+0x180>
 8013cc2:	4b1e      	ldr	r3, [pc, #120]	; (8013d3c <mem_malloc+0x1ec>)
 8013cc4:	f240 32ba 	movw	r2, #954	; 0x3ba
 8013cc8:	4921      	ldr	r1, [pc, #132]	; (8013d50 <mem_malloc+0x200>)
 8013cca:	481e      	ldr	r0, [pc, #120]	; (8013d44 <mem_malloc+0x1f4>)
 8013ccc:	f00a f9fa 	bl	801e0c4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	f003 0303 	and.w	r3, r3, #3
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d006      	beq.n	8013ce8 <mem_malloc+0x198>
 8013cda:	4b18      	ldr	r3, [pc, #96]	; (8013d3c <mem_malloc+0x1ec>)
 8013cdc:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8013ce0:	491c      	ldr	r1, [pc, #112]	; (8013d54 <mem_malloc+0x204>)
 8013ce2:	4818      	ldr	r0, [pc, #96]	; (8013d44 <mem_malloc+0x1f4>)
 8013ce4:	f00a f9ee 	bl	801e0c4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013ce8:	697b      	ldr	r3, [r7, #20]
 8013cea:	f003 0303 	and.w	r3, r3, #3
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d006      	beq.n	8013d00 <mem_malloc+0x1b0>
 8013cf2:	4b12      	ldr	r3, [pc, #72]	; (8013d3c <mem_malloc+0x1ec>)
 8013cf4:	f240 32be 	movw	r2, #958	; 0x3be
 8013cf8:	4917      	ldr	r1, [pc, #92]	; (8013d58 <mem_malloc+0x208>)
 8013cfa:	4812      	ldr	r0, [pc, #72]	; (8013d44 <mem_malloc+0x1f4>)
 8013cfc:	f00a f9e2 	bl	801e0c4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013d00:	697b      	ldr	r3, [r7, #20]
 8013d02:	3308      	adds	r3, #8
 8013d04:	e011      	b.n	8013d2a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8013d06:	8bfb      	ldrh	r3, [r7, #30]
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f7ff fc33 	bl	8013574 <ptr_to_mem>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	881b      	ldrh	r3, [r3, #0]
 8013d12:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013d14:	8bfa      	ldrh	r2, [r7, #30]
 8013d16:	8bbb      	ldrh	r3, [r7, #28]
 8013d18:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8013d1c:	429a      	cmp	r2, r3
 8013d1e:	f4ff af41 	bcc.w	8013ba4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013d22:	4804      	ldr	r0, [pc, #16]	; (8013d34 <mem_malloc+0x1e4>)
 8013d24:	f00a f937 	bl	801df96 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013d28:	2300      	movs	r3, #0
}
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	3720      	adds	r7, #32
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	bd80      	pop	{r7, pc}
 8013d32:	bf00      	nop
 8013d34:	200044e8 	.word	0x200044e8
 8013d38:	200044ec 	.word	0x200044ec
 8013d3c:	0801f328 	.word	0x0801f328
 8013d40:	0801f4ec 	.word	0x0801f4ec
 8013d44:	0801f370 	.word	0x0801f370
 8013d48:	200044e4 	.word	0x200044e4
 8013d4c:	0801f500 	.word	0x0801f500
 8013d50:	0801f51c 	.word	0x0801f51c
 8013d54:	0801f54c 	.word	0x0801f54c
 8013d58:	0801f57c 	.word	0x0801f57c

08013d5c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013d5c:	b480      	push	{r7}
 8013d5e:	b085      	sub	sp, #20
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	689b      	ldr	r3, [r3, #8]
 8013d68:	2200      	movs	r2, #0
 8013d6a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	685b      	ldr	r3, [r3, #4]
 8013d70:	3303      	adds	r3, #3
 8013d72:	f023 0303 	bic.w	r3, r3, #3
 8013d76:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013d78:	2300      	movs	r3, #0
 8013d7a:	60fb      	str	r3, [r7, #12]
 8013d7c:	e011      	b.n	8013da2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	689b      	ldr	r3, [r3, #8]
 8013d82:	681a      	ldr	r2, [r3, #0]
 8013d84:	68bb      	ldr	r3, [r7, #8]
 8013d86:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	689b      	ldr	r3, [r3, #8]
 8013d8c:	68ba      	ldr	r2, [r7, #8]
 8013d8e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	881b      	ldrh	r3, [r3, #0]
 8013d94:	461a      	mov	r2, r3
 8013d96:	68bb      	ldr	r3, [r7, #8]
 8013d98:	4413      	add	r3, r2
 8013d9a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	3301      	adds	r3, #1
 8013da0:	60fb      	str	r3, [r7, #12]
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	885b      	ldrh	r3, [r3, #2]
 8013da6:	461a      	mov	r2, r3
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	4293      	cmp	r3, r2
 8013dac:	dbe7      	blt.n	8013d7e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013dae:	bf00      	nop
 8013db0:	3714      	adds	r7, #20
 8013db2:	46bd      	mov	sp, r7
 8013db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db8:	4770      	bx	lr
	...

08013dbc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b082      	sub	sp, #8
 8013dc0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	80fb      	strh	r3, [r7, #6]
 8013dc6:	e009      	b.n	8013ddc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8013dc8:	88fb      	ldrh	r3, [r7, #6]
 8013dca:	4a08      	ldr	r2, [pc, #32]	; (8013dec <memp_init+0x30>)
 8013dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	f7ff ffc3 	bl	8013d5c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013dd6:	88fb      	ldrh	r3, [r7, #6]
 8013dd8:	3301      	adds	r3, #1
 8013dda:	80fb      	strh	r3, [r7, #6]
 8013ddc:	88fb      	ldrh	r3, [r7, #6]
 8013dde:	2b0c      	cmp	r3, #12
 8013de0:	d9f2      	bls.n	8013dc8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013de2:	bf00      	nop
 8013de4:	3708      	adds	r7, #8
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}
 8013dea:	bf00      	nop
 8013dec:	080328cc 	.word	0x080328cc

08013df0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b084      	sub	sp, #16
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013df8:	f00a f900 	bl	801dffc <sys_arch_protect>
 8013dfc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	689b      	ldr	r3, [r3, #8]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013e06:	68bb      	ldr	r3, [r7, #8]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d015      	beq.n	8013e38 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	689b      	ldr	r3, [r3, #8]
 8013e10:	68ba      	ldr	r2, [r7, #8]
 8013e12:	6812      	ldr	r2, [r2, #0]
 8013e14:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	f003 0303 	and.w	r3, r3, #3
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d006      	beq.n	8013e2e <do_memp_malloc_pool+0x3e>
 8013e20:	4b09      	ldr	r3, [pc, #36]	; (8013e48 <do_memp_malloc_pool+0x58>)
 8013e22:	f240 1219 	movw	r2, #281	; 0x119
 8013e26:	4909      	ldr	r1, [pc, #36]	; (8013e4c <do_memp_malloc_pool+0x5c>)
 8013e28:	4809      	ldr	r0, [pc, #36]	; (8013e50 <do_memp_malloc_pool+0x60>)
 8013e2a:	f00a f94b 	bl	801e0c4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013e2e:	68f8      	ldr	r0, [r7, #12]
 8013e30:	f00a f8f2 	bl	801e018 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013e34:	68bb      	ldr	r3, [r7, #8]
 8013e36:	e003      	b.n	8013e40 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013e38:	68f8      	ldr	r0, [r7, #12]
 8013e3a:	f00a f8ed 	bl	801e018 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8013e3e:	2300      	movs	r3, #0
}
 8013e40:	4618      	mov	r0, r3
 8013e42:	3710      	adds	r7, #16
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}
 8013e48:	0801f5a0 	.word	0x0801f5a0
 8013e4c:	0801f5d0 	.word	0x0801f5d0
 8013e50:	0801f5f4 	.word	0x0801f5f4

08013e54 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b084      	sub	sp, #16
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013e5e:	79fb      	ldrb	r3, [r7, #7]
 8013e60:	2b0c      	cmp	r3, #12
 8013e62:	d908      	bls.n	8013e76 <memp_malloc+0x22>
 8013e64:	4b0a      	ldr	r3, [pc, #40]	; (8013e90 <memp_malloc+0x3c>)
 8013e66:	f240 1257 	movw	r2, #343	; 0x157
 8013e6a:	490a      	ldr	r1, [pc, #40]	; (8013e94 <memp_malloc+0x40>)
 8013e6c:	480a      	ldr	r0, [pc, #40]	; (8013e98 <memp_malloc+0x44>)
 8013e6e:	f00a f929 	bl	801e0c4 <iprintf>
 8013e72:	2300      	movs	r3, #0
 8013e74:	e008      	b.n	8013e88 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013e76:	79fb      	ldrb	r3, [r7, #7]
 8013e78:	4a08      	ldr	r2, [pc, #32]	; (8013e9c <memp_malloc+0x48>)
 8013e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f7ff ffb6 	bl	8013df0 <do_memp_malloc_pool>
 8013e84:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013e86:	68fb      	ldr	r3, [r7, #12]
}
 8013e88:	4618      	mov	r0, r3
 8013e8a:	3710      	adds	r7, #16
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bd80      	pop	{r7, pc}
 8013e90:	0801f5a0 	.word	0x0801f5a0
 8013e94:	0801f630 	.word	0x0801f630
 8013e98:	0801f5f4 	.word	0x0801f5f4
 8013e9c:	080328cc 	.word	0x080328cc

08013ea0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b084      	sub	sp, #16
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
 8013ea8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013eaa:	683b      	ldr	r3, [r7, #0]
 8013eac:	f003 0303 	and.w	r3, r3, #3
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d006      	beq.n	8013ec2 <do_memp_free_pool+0x22>
 8013eb4:	4b0d      	ldr	r3, [pc, #52]	; (8013eec <do_memp_free_pool+0x4c>)
 8013eb6:	f240 126d 	movw	r2, #365	; 0x16d
 8013eba:	490d      	ldr	r1, [pc, #52]	; (8013ef0 <do_memp_free_pool+0x50>)
 8013ebc:	480d      	ldr	r0, [pc, #52]	; (8013ef4 <do_memp_free_pool+0x54>)
 8013ebe:	f00a f901 	bl	801e0c4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013ec2:	683b      	ldr	r3, [r7, #0]
 8013ec4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8013ec6:	f00a f899 	bl	801dffc <sys_arch_protect>
 8013eca:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	689b      	ldr	r3, [r3, #8]
 8013ed0:	681a      	ldr	r2, [r3, #0]
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	689b      	ldr	r3, [r3, #8]
 8013eda:	68fa      	ldr	r2, [r7, #12]
 8013edc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8013ede:	68b8      	ldr	r0, [r7, #8]
 8013ee0:	f00a f89a 	bl	801e018 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013ee4:	bf00      	nop
 8013ee6:	3710      	adds	r7, #16
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	bd80      	pop	{r7, pc}
 8013eec:	0801f5a0 	.word	0x0801f5a0
 8013ef0:	0801f650 	.word	0x0801f650
 8013ef4:	0801f5f4 	.word	0x0801f5f4

08013ef8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b082      	sub	sp, #8
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	4603      	mov	r3, r0
 8013f00:	6039      	str	r1, [r7, #0]
 8013f02:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013f04:	79fb      	ldrb	r3, [r7, #7]
 8013f06:	2b0c      	cmp	r3, #12
 8013f08:	d907      	bls.n	8013f1a <memp_free+0x22>
 8013f0a:	4b0c      	ldr	r3, [pc, #48]	; (8013f3c <memp_free+0x44>)
 8013f0c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8013f10:	490b      	ldr	r1, [pc, #44]	; (8013f40 <memp_free+0x48>)
 8013f12:	480c      	ldr	r0, [pc, #48]	; (8013f44 <memp_free+0x4c>)
 8013f14:	f00a f8d6 	bl	801e0c4 <iprintf>
 8013f18:	e00c      	b.n	8013f34 <memp_free+0x3c>

  if (mem == NULL) {
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d008      	beq.n	8013f32 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013f20:	79fb      	ldrb	r3, [r7, #7]
 8013f22:	4a09      	ldr	r2, [pc, #36]	; (8013f48 <memp_free+0x50>)
 8013f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f28:	6839      	ldr	r1, [r7, #0]
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	f7ff ffb8 	bl	8013ea0 <do_memp_free_pool>
 8013f30:	e000      	b.n	8013f34 <memp_free+0x3c>
    return;
 8013f32:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013f34:	3708      	adds	r7, #8
 8013f36:	46bd      	mov	sp, r7
 8013f38:	bd80      	pop	{r7, pc}
 8013f3a:	bf00      	nop
 8013f3c:	0801f5a0 	.word	0x0801f5a0
 8013f40:	0801f670 	.word	0x0801f670
 8013f44:	0801f5f4 	.word	0x0801f5f4
 8013f48:	080328cc 	.word	0x080328cc

08013f4c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013f4c:	b480      	push	{r7}
 8013f4e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013f50:	bf00      	nop
 8013f52:	46bd      	mov	sp, r7
 8013f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f58:	4770      	bx	lr
	...

08013f5c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b086      	sub	sp, #24
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	60f8      	str	r0, [r7, #12]
 8013f64:	60b9      	str	r1, [r7, #8]
 8013f66:	607a      	str	r2, [r7, #4]
 8013f68:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d108      	bne.n	8013f82 <netif_add+0x26>
 8013f70:	4b57      	ldr	r3, [pc, #348]	; (80140d0 <netif_add+0x174>)
 8013f72:	f240 1227 	movw	r2, #295	; 0x127
 8013f76:	4957      	ldr	r1, [pc, #348]	; (80140d4 <netif_add+0x178>)
 8013f78:	4857      	ldr	r0, [pc, #348]	; (80140d8 <netif_add+0x17c>)
 8013f7a:	f00a f8a3 	bl	801e0c4 <iprintf>
 8013f7e:	2300      	movs	r3, #0
 8013f80:	e0a2      	b.n	80140c8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8013f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d108      	bne.n	8013f9a <netif_add+0x3e>
 8013f88:	4b51      	ldr	r3, [pc, #324]	; (80140d0 <netif_add+0x174>)
 8013f8a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8013f8e:	4953      	ldr	r1, [pc, #332]	; (80140dc <netif_add+0x180>)
 8013f90:	4851      	ldr	r0, [pc, #324]	; (80140d8 <netif_add+0x17c>)
 8013f92:	f00a f897 	bl	801e0c4 <iprintf>
 8013f96:	2300      	movs	r3, #0
 8013f98:	e096      	b.n	80140c8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013f9a:	68bb      	ldr	r3, [r7, #8]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d101      	bne.n	8013fa4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8013fa0:	4b4f      	ldr	r3, [pc, #316]	; (80140e0 <netif_add+0x184>)
 8013fa2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d101      	bne.n	8013fae <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013faa:	4b4d      	ldr	r3, [pc, #308]	; (80140e0 <netif_add+0x184>)
 8013fac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013fae:	683b      	ldr	r3, [r7, #0]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d101      	bne.n	8013fb8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013fb4:	4b4a      	ldr	r3, [pc, #296]	; (80140e0 <netif_add+0x184>)
 8013fb6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	2200      	movs	r2, #0
 8013fbc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	4a45      	ldr	r2, [pc, #276]	; (80140e4 <netif_add+0x188>)
 8013fce:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	2200      	movs	r2, #0
 8013fda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	6a3a      	ldr	r2, [r7, #32]
 8013fe8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013fea:	4b3f      	ldr	r3, [pc, #252]	; (80140e8 <netif_add+0x18c>)
 8013fec:	781a      	ldrb	r2, [r3, #0]
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ff8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	687a      	ldr	r2, [r7, #4]
 8013ffe:	68b9      	ldr	r1, [r7, #8]
 8014000:	68f8      	ldr	r0, [r7, #12]
 8014002:	f000 f913 	bl	801422c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8014006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014008:	68f8      	ldr	r0, [r7, #12]
 801400a:	4798      	blx	r3
 801400c:	4603      	mov	r3, r0
 801400e:	2b00      	cmp	r3, #0
 8014010:	d001      	beq.n	8014016 <netif_add+0xba>
    return NULL;
 8014012:	2300      	movs	r3, #0
 8014014:	e058      	b.n	80140c8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801401c:	2bff      	cmp	r3, #255	; 0xff
 801401e:	d103      	bne.n	8014028 <netif_add+0xcc>
        netif->num = 0;
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	2200      	movs	r2, #0
 8014024:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8014028:	2300      	movs	r3, #0
 801402a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801402c:	4b2f      	ldr	r3, [pc, #188]	; (80140ec <netif_add+0x190>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	617b      	str	r3, [r7, #20]
 8014032:	e02b      	b.n	801408c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8014034:	697a      	ldr	r2, [r7, #20]
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	429a      	cmp	r2, r3
 801403a:	d106      	bne.n	801404a <netif_add+0xee>
 801403c:	4b24      	ldr	r3, [pc, #144]	; (80140d0 <netif_add+0x174>)
 801403e:	f240 128b 	movw	r2, #395	; 0x18b
 8014042:	492b      	ldr	r1, [pc, #172]	; (80140f0 <netif_add+0x194>)
 8014044:	4824      	ldr	r0, [pc, #144]	; (80140d8 <netif_add+0x17c>)
 8014046:	f00a f83d 	bl	801e0c4 <iprintf>
        num_netifs++;
 801404a:	693b      	ldr	r3, [r7, #16]
 801404c:	3301      	adds	r3, #1
 801404e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8014050:	693b      	ldr	r3, [r7, #16]
 8014052:	2bff      	cmp	r3, #255	; 0xff
 8014054:	dd06      	ble.n	8014064 <netif_add+0x108>
 8014056:	4b1e      	ldr	r3, [pc, #120]	; (80140d0 <netif_add+0x174>)
 8014058:	f240 128d 	movw	r2, #397	; 0x18d
 801405c:	4925      	ldr	r1, [pc, #148]	; (80140f4 <netif_add+0x198>)
 801405e:	481e      	ldr	r0, [pc, #120]	; (80140d8 <netif_add+0x17c>)
 8014060:	f00a f830 	bl	801e0c4 <iprintf>
        if (netif2->num == netif->num) {
 8014064:	697b      	ldr	r3, [r7, #20]
 8014066:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014070:	429a      	cmp	r2, r3
 8014072:	d108      	bne.n	8014086 <netif_add+0x12a>
          netif->num++;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801407a:	3301      	adds	r3, #1
 801407c:	b2da      	uxtb	r2, r3
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8014084:	e005      	b.n	8014092 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014086:	697b      	ldr	r3, [r7, #20]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	617b      	str	r3, [r7, #20]
 801408c:	697b      	ldr	r3, [r7, #20]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d1d0      	bne.n	8014034 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8014092:	697b      	ldr	r3, [r7, #20]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d1be      	bne.n	8014016 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801409e:	2bfe      	cmp	r3, #254	; 0xfe
 80140a0:	d103      	bne.n	80140aa <netif_add+0x14e>
    netif_num = 0;
 80140a2:	4b11      	ldr	r3, [pc, #68]	; (80140e8 <netif_add+0x18c>)
 80140a4:	2200      	movs	r2, #0
 80140a6:	701a      	strb	r2, [r3, #0]
 80140a8:	e006      	b.n	80140b8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80140b0:	3301      	adds	r3, #1
 80140b2:	b2da      	uxtb	r2, r3
 80140b4:	4b0c      	ldr	r3, [pc, #48]	; (80140e8 <netif_add+0x18c>)
 80140b6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80140b8:	4b0c      	ldr	r3, [pc, #48]	; (80140ec <netif_add+0x190>)
 80140ba:	681a      	ldr	r2, [r3, #0]
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80140c0:	4a0a      	ldr	r2, [pc, #40]	; (80140ec <netif_add+0x190>)
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80140c6:	68fb      	ldr	r3, [r7, #12]
}
 80140c8:	4618      	mov	r0, r3
 80140ca:	3718      	adds	r7, #24
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}
 80140d0:	0801f68c 	.word	0x0801f68c
 80140d4:	0801f720 	.word	0x0801f720
 80140d8:	0801f6dc 	.word	0x0801f6dc
 80140dc:	0801f73c 	.word	0x0801f73c
 80140e0:	08032940 	.word	0x08032940
 80140e4:	08014507 	.word	0x08014507
 80140e8:	20004524 	.word	0x20004524
 80140ec:	2000b4f8 	.word	0x2000b4f8
 80140f0:	0801f760 	.word	0x0801f760
 80140f4:	0801f774 	.word	0x0801f774

080140f8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b082      	sub	sp, #8
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
 8014100:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8014102:	6839      	ldr	r1, [r7, #0]
 8014104:	6878      	ldr	r0, [r7, #4]
 8014106:	f002 fe1b 	bl	8016d40 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801410a:	6839      	ldr	r1, [r7, #0]
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	f007 fb93 	bl	801b838 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8014112:	bf00      	nop
 8014114:	3708      	adds	r7, #8
 8014116:	46bd      	mov	sp, r7
 8014118:	bd80      	pop	{r7, pc}
	...

0801411c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b086      	sub	sp, #24
 8014120:	af00      	add	r7, sp, #0
 8014122:	60f8      	str	r0, [r7, #12]
 8014124:	60b9      	str	r1, [r7, #8]
 8014126:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d106      	bne.n	801413c <netif_do_set_ipaddr+0x20>
 801412e:	4b1d      	ldr	r3, [pc, #116]	; (80141a4 <netif_do_set_ipaddr+0x88>)
 8014130:	f240 12cb 	movw	r2, #459	; 0x1cb
 8014134:	491c      	ldr	r1, [pc, #112]	; (80141a8 <netif_do_set_ipaddr+0x8c>)
 8014136:	481d      	ldr	r0, [pc, #116]	; (80141ac <netif_do_set_ipaddr+0x90>)
 8014138:	f009 ffc4 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d106      	bne.n	8014150 <netif_do_set_ipaddr+0x34>
 8014142:	4b18      	ldr	r3, [pc, #96]	; (80141a4 <netif_do_set_ipaddr+0x88>)
 8014144:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8014148:	4917      	ldr	r1, [pc, #92]	; (80141a8 <netif_do_set_ipaddr+0x8c>)
 801414a:	4818      	ldr	r0, [pc, #96]	; (80141ac <netif_do_set_ipaddr+0x90>)
 801414c:	f009 ffba 	bl	801e0c4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	681a      	ldr	r2, [r3, #0]
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	3304      	adds	r3, #4
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	429a      	cmp	r2, r3
 801415c:	d01c      	beq.n	8014198 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801415e:	68bb      	ldr	r3, [r7, #8]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	3304      	adds	r3, #4
 8014168:	681a      	ldr	r2, [r3, #0]
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801416e:	f107 0314 	add.w	r3, r7, #20
 8014172:	4619      	mov	r1, r3
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f7ff ffbf 	bl	80140f8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801417a:	68bb      	ldr	r3, [r7, #8]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d002      	beq.n	8014186 <netif_do_set_ipaddr+0x6a>
 8014180:	68bb      	ldr	r3, [r7, #8]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	e000      	b.n	8014188 <netif_do_set_ipaddr+0x6c>
 8014186:	2300      	movs	r3, #0
 8014188:	68fa      	ldr	r2, [r7, #12]
 801418a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801418c:	2101      	movs	r1, #1
 801418e:	68f8      	ldr	r0, [r7, #12]
 8014190:	f000 f8d2 	bl	8014338 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8014194:	2301      	movs	r3, #1
 8014196:	e000      	b.n	801419a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8014198:	2300      	movs	r3, #0
}
 801419a:	4618      	mov	r0, r3
 801419c:	3718      	adds	r7, #24
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}
 80141a2:	bf00      	nop
 80141a4:	0801f68c 	.word	0x0801f68c
 80141a8:	0801f7a4 	.word	0x0801f7a4
 80141ac:	0801f6dc 	.word	0x0801f6dc

080141b0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80141b0:	b480      	push	{r7}
 80141b2:	b085      	sub	sp, #20
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	60f8      	str	r0, [r7, #12]
 80141b8:	60b9      	str	r1, [r7, #8]
 80141ba:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80141bc:	68bb      	ldr	r3, [r7, #8]
 80141be:	681a      	ldr	r2, [r3, #0]
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	3308      	adds	r3, #8
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	429a      	cmp	r2, r3
 80141c8:	d00a      	beq.n	80141e0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d002      	beq.n	80141d6 <netif_do_set_netmask+0x26>
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	e000      	b.n	80141d8 <netif_do_set_netmask+0x28>
 80141d6:	2300      	movs	r3, #0
 80141d8:	68fa      	ldr	r2, [r7, #12]
 80141da:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80141dc:	2301      	movs	r3, #1
 80141de:	e000      	b.n	80141e2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80141e0:	2300      	movs	r3, #0
}
 80141e2:	4618      	mov	r0, r3
 80141e4:	3714      	adds	r7, #20
 80141e6:	46bd      	mov	sp, r7
 80141e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ec:	4770      	bx	lr

080141ee <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80141ee:	b480      	push	{r7}
 80141f0:	b085      	sub	sp, #20
 80141f2:	af00      	add	r7, sp, #0
 80141f4:	60f8      	str	r0, [r7, #12]
 80141f6:	60b9      	str	r1, [r7, #8]
 80141f8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	681a      	ldr	r2, [r3, #0]
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	330c      	adds	r3, #12
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	429a      	cmp	r2, r3
 8014206:	d00a      	beq.n	801421e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d002      	beq.n	8014214 <netif_do_set_gw+0x26>
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	e000      	b.n	8014216 <netif_do_set_gw+0x28>
 8014214:	2300      	movs	r3, #0
 8014216:	68fa      	ldr	r2, [r7, #12]
 8014218:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801421a:	2301      	movs	r3, #1
 801421c:	e000      	b.n	8014220 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801421e:	2300      	movs	r3, #0
}
 8014220:	4618      	mov	r0, r3
 8014222:	3714      	adds	r7, #20
 8014224:	46bd      	mov	sp, r7
 8014226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422a:	4770      	bx	lr

0801422c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b088      	sub	sp, #32
 8014230:	af00      	add	r7, sp, #0
 8014232:	60f8      	str	r0, [r7, #12]
 8014234:	60b9      	str	r1, [r7, #8]
 8014236:	607a      	str	r2, [r7, #4]
 8014238:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801423a:	2300      	movs	r3, #0
 801423c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801423e:	2300      	movs	r3, #0
 8014240:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014242:	68bb      	ldr	r3, [r7, #8]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d101      	bne.n	801424c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8014248:	4b1c      	ldr	r3, [pc, #112]	; (80142bc <netif_set_addr+0x90>)
 801424a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d101      	bne.n	8014256 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8014252:	4b1a      	ldr	r3, [pc, #104]	; (80142bc <netif_set_addr+0x90>)
 8014254:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8014256:	683b      	ldr	r3, [r7, #0]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d101      	bne.n	8014260 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801425c:	4b17      	ldr	r3, [pc, #92]	; (80142bc <netif_set_addr+0x90>)
 801425e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d003      	beq.n	801426e <netif_set_addr+0x42>
 8014266:	68bb      	ldr	r3, [r7, #8]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d101      	bne.n	8014272 <netif_set_addr+0x46>
 801426e:	2301      	movs	r3, #1
 8014270:	e000      	b.n	8014274 <netif_set_addr+0x48>
 8014272:	2300      	movs	r3, #0
 8014274:	617b      	str	r3, [r7, #20]
  if (remove) {
 8014276:	697b      	ldr	r3, [r7, #20]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d006      	beq.n	801428a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801427c:	f107 0310 	add.w	r3, r7, #16
 8014280:	461a      	mov	r2, r3
 8014282:	68b9      	ldr	r1, [r7, #8]
 8014284:	68f8      	ldr	r0, [r7, #12]
 8014286:	f7ff ff49 	bl	801411c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801428a:	69fa      	ldr	r2, [r7, #28]
 801428c:	6879      	ldr	r1, [r7, #4]
 801428e:	68f8      	ldr	r0, [r7, #12]
 8014290:	f7ff ff8e 	bl	80141b0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8014294:	69ba      	ldr	r2, [r7, #24]
 8014296:	6839      	ldr	r1, [r7, #0]
 8014298:	68f8      	ldr	r0, [r7, #12]
 801429a:	f7ff ffa8 	bl	80141ee <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801429e:	697b      	ldr	r3, [r7, #20]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d106      	bne.n	80142b2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80142a4:	f107 0310 	add.w	r3, r7, #16
 80142a8:	461a      	mov	r2, r3
 80142aa:	68b9      	ldr	r1, [r7, #8]
 80142ac:	68f8      	ldr	r0, [r7, #12]
 80142ae:	f7ff ff35 	bl	801411c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80142b2:	bf00      	nop
 80142b4:	3720      	adds	r7, #32
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}
 80142ba:	bf00      	nop
 80142bc:	08032940 	.word	0x08032940

080142c0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80142c0:	b480      	push	{r7}
 80142c2:	b083      	sub	sp, #12
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80142c8:	4a04      	ldr	r2, [pc, #16]	; (80142dc <netif_set_default+0x1c>)
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80142ce:	bf00      	nop
 80142d0:	370c      	adds	r7, #12
 80142d2:	46bd      	mov	sp, r7
 80142d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d8:	4770      	bx	lr
 80142da:	bf00      	nop
 80142dc:	2000b4fc 	.word	0x2000b4fc

080142e0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b082      	sub	sp, #8
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d107      	bne.n	80142fe <netif_set_up+0x1e>
 80142ee:	4b0f      	ldr	r3, [pc, #60]	; (801432c <netif_set_up+0x4c>)
 80142f0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80142f4:	490e      	ldr	r1, [pc, #56]	; (8014330 <netif_set_up+0x50>)
 80142f6:	480f      	ldr	r0, [pc, #60]	; (8014334 <netif_set_up+0x54>)
 80142f8:	f009 fee4 	bl	801e0c4 <iprintf>
 80142fc:	e013      	b.n	8014326 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014304:	f003 0301 	and.w	r3, r3, #1
 8014308:	2b00      	cmp	r3, #0
 801430a:	d10c      	bne.n	8014326 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014312:	f043 0301 	orr.w	r3, r3, #1
 8014316:	b2da      	uxtb	r2, r3
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801431e:	2103      	movs	r1, #3
 8014320:	6878      	ldr	r0, [r7, #4]
 8014322:	f000 f809 	bl	8014338 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8014326:	3708      	adds	r7, #8
 8014328:	46bd      	mov	sp, r7
 801432a:	bd80      	pop	{r7, pc}
 801432c:	0801f68c 	.word	0x0801f68c
 8014330:	0801f814 	.word	0x0801f814
 8014334:	0801f6dc 	.word	0x0801f6dc

08014338 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b082      	sub	sp, #8
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
 8014340:	460b      	mov	r3, r1
 8014342:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d106      	bne.n	8014358 <netif_issue_reports+0x20>
 801434a:	4b18      	ldr	r3, [pc, #96]	; (80143ac <netif_issue_reports+0x74>)
 801434c:	f240 326d 	movw	r2, #877	; 0x36d
 8014350:	4917      	ldr	r1, [pc, #92]	; (80143b0 <netif_issue_reports+0x78>)
 8014352:	4818      	ldr	r0, [pc, #96]	; (80143b4 <netif_issue_reports+0x7c>)
 8014354:	f009 feb6 	bl	801e0c4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801435e:	f003 0304 	and.w	r3, r3, #4
 8014362:	2b00      	cmp	r3, #0
 8014364:	d01e      	beq.n	80143a4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801436c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014370:	2b00      	cmp	r3, #0
 8014372:	d017      	beq.n	80143a4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014374:	78fb      	ldrb	r3, [r7, #3]
 8014376:	f003 0301 	and.w	r3, r3, #1
 801437a:	2b00      	cmp	r3, #0
 801437c:	d013      	beq.n	80143a6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	3304      	adds	r3, #4
 8014382:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014384:	2b00      	cmp	r3, #0
 8014386:	d00e      	beq.n	80143a6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801438e:	f003 0308 	and.w	r3, r3, #8
 8014392:	2b00      	cmp	r3, #0
 8014394:	d007      	beq.n	80143a6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	3304      	adds	r3, #4
 801439a:	4619      	mov	r1, r3
 801439c:	6878      	ldr	r0, [r7, #4]
 801439e:	f008 f9b5 	bl	801c70c <etharp_request>
 80143a2:	e000      	b.n	80143a6 <netif_issue_reports+0x6e>
    return;
 80143a4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80143a6:	3708      	adds	r7, #8
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bd80      	pop	{r7, pc}
 80143ac:	0801f68c 	.word	0x0801f68c
 80143b0:	0801f830 	.word	0x0801f830
 80143b4:	0801f6dc 	.word	0x0801f6dc

080143b8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b082      	sub	sp, #8
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d107      	bne.n	80143d6 <netif_set_down+0x1e>
 80143c6:	4b12      	ldr	r3, [pc, #72]	; (8014410 <netif_set_down+0x58>)
 80143c8:	f240 329b 	movw	r2, #923	; 0x39b
 80143cc:	4911      	ldr	r1, [pc, #68]	; (8014414 <netif_set_down+0x5c>)
 80143ce:	4812      	ldr	r0, [pc, #72]	; (8014418 <netif_set_down+0x60>)
 80143d0:	f009 fe78 	bl	801e0c4 <iprintf>
 80143d4:	e019      	b.n	801440a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143dc:	f003 0301 	and.w	r3, r3, #1
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d012      	beq.n	801440a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143ea:	f023 0301 	bic.w	r3, r3, #1
 80143ee:	b2da      	uxtb	r2, r3
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143fc:	f003 0308 	and.w	r3, r3, #8
 8014400:	2b00      	cmp	r3, #0
 8014402:	d002      	beq.n	801440a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f007 fd3f 	bl	801be88 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801440a:	3708      	adds	r7, #8
 801440c:	46bd      	mov	sp, r7
 801440e:	bd80      	pop	{r7, pc}
 8014410:	0801f68c 	.word	0x0801f68c
 8014414:	0801f854 	.word	0x0801f854
 8014418:	0801f6dc 	.word	0x0801f6dc

0801441c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b082      	sub	sp, #8
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d107      	bne.n	801443a <netif_set_link_up+0x1e>
 801442a:	4b13      	ldr	r3, [pc, #76]	; (8014478 <netif_set_link_up+0x5c>)
 801442c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8014430:	4912      	ldr	r1, [pc, #72]	; (801447c <netif_set_link_up+0x60>)
 8014432:	4813      	ldr	r0, [pc, #76]	; (8014480 <netif_set_link_up+0x64>)
 8014434:	f009 fe46 	bl	801e0c4 <iprintf>
 8014438:	e01b      	b.n	8014472 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014440:	f003 0304 	and.w	r3, r3, #4
 8014444:	2b00      	cmp	r3, #0
 8014446:	d114      	bne.n	8014472 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801444e:	f043 0304 	orr.w	r3, r3, #4
 8014452:	b2da      	uxtb	r2, r3
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801445a:	2103      	movs	r1, #3
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f7ff ff6b 	bl	8014338 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	69db      	ldr	r3, [r3, #28]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d003      	beq.n	8014472 <netif_set_link_up+0x56>
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	69db      	ldr	r3, [r3, #28]
 801446e:	6878      	ldr	r0, [r7, #4]
 8014470:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8014472:	3708      	adds	r7, #8
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}
 8014478:	0801f68c 	.word	0x0801f68c
 801447c:	0801f874 	.word	0x0801f874
 8014480:	0801f6dc 	.word	0x0801f6dc

08014484 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b082      	sub	sp, #8
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d107      	bne.n	80144a2 <netif_set_link_down+0x1e>
 8014492:	4b11      	ldr	r3, [pc, #68]	; (80144d8 <netif_set_link_down+0x54>)
 8014494:	f240 4206 	movw	r2, #1030	; 0x406
 8014498:	4910      	ldr	r1, [pc, #64]	; (80144dc <netif_set_link_down+0x58>)
 801449a:	4811      	ldr	r0, [pc, #68]	; (80144e0 <netif_set_link_down+0x5c>)
 801449c:	f009 fe12 	bl	801e0c4 <iprintf>
 80144a0:	e017      	b.n	80144d2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80144a8:	f003 0304 	and.w	r3, r3, #4
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d010      	beq.n	80144d2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80144b6:	f023 0304 	bic.w	r3, r3, #4
 80144ba:	b2da      	uxtb	r2, r3
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	69db      	ldr	r3, [r3, #28]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d003      	beq.n	80144d2 <netif_set_link_down+0x4e>
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	69db      	ldr	r3, [r3, #28]
 80144ce:	6878      	ldr	r0, [r7, #4]
 80144d0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80144d2:	3708      	adds	r7, #8
 80144d4:	46bd      	mov	sp, r7
 80144d6:	bd80      	pop	{r7, pc}
 80144d8:	0801f68c 	.word	0x0801f68c
 80144dc:	0801f898 	.word	0x0801f898
 80144e0:	0801f6dc 	.word	0x0801f6dc

080144e4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80144e4:	b480      	push	{r7}
 80144e6:	b083      	sub	sp, #12
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
 80144ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d002      	beq.n	80144fa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	683a      	ldr	r2, [r7, #0]
 80144f8:	61da      	str	r2, [r3, #28]
  }
}
 80144fa:	bf00      	nop
 80144fc:	370c      	adds	r7, #12
 80144fe:	46bd      	mov	sp, r7
 8014500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014504:	4770      	bx	lr

08014506 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8014506:	b480      	push	{r7}
 8014508:	b085      	sub	sp, #20
 801450a:	af00      	add	r7, sp, #0
 801450c:	60f8      	str	r0, [r7, #12]
 801450e:	60b9      	str	r1, [r7, #8]
 8014510:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8014512:	f06f 030b 	mvn.w	r3, #11
}
 8014516:	4618      	mov	r0, r3
 8014518:	3714      	adds	r7, #20
 801451a:	46bd      	mov	sp, r7
 801451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014520:	4770      	bx	lr
	...

08014524 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8014524:	b480      	push	{r7}
 8014526:	b085      	sub	sp, #20
 8014528:	af00      	add	r7, sp, #0
 801452a:	4603      	mov	r3, r0
 801452c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801452e:	79fb      	ldrb	r3, [r7, #7]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d013      	beq.n	801455c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8014534:	4b0d      	ldr	r3, [pc, #52]	; (801456c <netif_get_by_index+0x48>)
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	60fb      	str	r3, [r7, #12]
 801453a:	e00c      	b.n	8014556 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014542:	3301      	adds	r3, #1
 8014544:	b2db      	uxtb	r3, r3
 8014546:	79fa      	ldrb	r2, [r7, #7]
 8014548:	429a      	cmp	r2, r3
 801454a:	d101      	bne.n	8014550 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	e006      	b.n	801455e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	60fb      	str	r3, [r7, #12]
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d1ef      	bne.n	801453c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801455c:	2300      	movs	r3, #0
}
 801455e:	4618      	mov	r0, r3
 8014560:	3714      	adds	r7, #20
 8014562:	46bd      	mov	sp, r7
 8014564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014568:	4770      	bx	lr
 801456a:	bf00      	nop
 801456c:	2000b4f8 	.word	0x2000b4f8

08014570 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b082      	sub	sp, #8
 8014574:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8014576:	f009 fd41 	bl	801dffc <sys_arch_protect>
 801457a:	6038      	str	r0, [r7, #0]
 801457c:	4b0d      	ldr	r3, [pc, #52]	; (80145b4 <pbuf_free_ooseq+0x44>)
 801457e:	2200      	movs	r2, #0
 8014580:	701a      	strb	r2, [r3, #0]
 8014582:	6838      	ldr	r0, [r7, #0]
 8014584:	f009 fd48 	bl	801e018 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014588:	4b0b      	ldr	r3, [pc, #44]	; (80145b8 <pbuf_free_ooseq+0x48>)
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	607b      	str	r3, [r7, #4]
 801458e:	e00a      	b.n	80145a6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014594:	2b00      	cmp	r3, #0
 8014596:	d003      	beq.n	80145a0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8014598:	6878      	ldr	r0, [r7, #4]
 801459a:	f002 fc0f 	bl	8016dbc <tcp_free_ooseq>
      return;
 801459e:	e005      	b.n	80145ac <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	68db      	ldr	r3, [r3, #12]
 80145a4:	607b      	str	r3, [r7, #4]
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d1f1      	bne.n	8014590 <pbuf_free_ooseq+0x20>
    }
  }
}
 80145ac:	3708      	adds	r7, #8
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}
 80145b2:	bf00      	nop
 80145b4:	2000b500 	.word	0x2000b500
 80145b8:	2000b508 	.word	0x2000b508

080145bc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b082      	sub	sp, #8
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80145c4:	f7ff ffd4 	bl	8014570 <pbuf_free_ooseq>
}
 80145c8:	bf00      	nop
 80145ca:	3708      	adds	r7, #8
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}

080145d0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b082      	sub	sp, #8
 80145d4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80145d6:	f009 fd11 	bl	801dffc <sys_arch_protect>
 80145da:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80145dc:	4b0f      	ldr	r3, [pc, #60]	; (801461c <pbuf_pool_is_empty+0x4c>)
 80145de:	781b      	ldrb	r3, [r3, #0]
 80145e0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80145e2:	4b0e      	ldr	r3, [pc, #56]	; (801461c <pbuf_pool_is_empty+0x4c>)
 80145e4:	2201      	movs	r2, #1
 80145e6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80145e8:	6878      	ldr	r0, [r7, #4]
 80145ea:	f009 fd15 	bl	801e018 <sys_arch_unprotect>

  if (!queued) {
 80145ee:	78fb      	ldrb	r3, [r7, #3]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d10f      	bne.n	8014614 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80145f4:	2100      	movs	r1, #0
 80145f6:	480a      	ldr	r0, [pc, #40]	; (8014620 <pbuf_pool_is_empty+0x50>)
 80145f8:	f7fe f89c 	bl	8012734 <tcpip_try_callback>
 80145fc:	4603      	mov	r3, r0
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d008      	beq.n	8014614 <pbuf_pool_is_empty+0x44>
 8014602:	f009 fcfb 	bl	801dffc <sys_arch_protect>
 8014606:	6078      	str	r0, [r7, #4]
 8014608:	4b04      	ldr	r3, [pc, #16]	; (801461c <pbuf_pool_is_empty+0x4c>)
 801460a:	2200      	movs	r2, #0
 801460c:	701a      	strb	r2, [r3, #0]
 801460e:	6878      	ldr	r0, [r7, #4]
 8014610:	f009 fd02 	bl	801e018 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8014614:	bf00      	nop
 8014616:	3708      	adds	r7, #8
 8014618:	46bd      	mov	sp, r7
 801461a:	bd80      	pop	{r7, pc}
 801461c:	2000b500 	.word	0x2000b500
 8014620:	080145bd 	.word	0x080145bd

08014624 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8014624:	b480      	push	{r7}
 8014626:	b085      	sub	sp, #20
 8014628:	af00      	add	r7, sp, #0
 801462a:	60f8      	str	r0, [r7, #12]
 801462c:	60b9      	str	r1, [r7, #8]
 801462e:	4611      	mov	r1, r2
 8014630:	461a      	mov	r2, r3
 8014632:	460b      	mov	r3, r1
 8014634:	80fb      	strh	r3, [r7, #6]
 8014636:	4613      	mov	r3, r2
 8014638:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	2200      	movs	r2, #0
 801463e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	68ba      	ldr	r2, [r7, #8]
 8014644:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	88fa      	ldrh	r2, [r7, #6]
 801464a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	88ba      	ldrh	r2, [r7, #4]
 8014650:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8014652:	8b3b      	ldrh	r3, [r7, #24]
 8014654:	b2da      	uxtb	r2, r3
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	7f3a      	ldrb	r2, [r7, #28]
 801465e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	2201      	movs	r2, #1
 8014664:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	2200      	movs	r2, #0
 801466a:	73da      	strb	r2, [r3, #15]
}
 801466c:	bf00      	nop
 801466e:	3714      	adds	r7, #20
 8014670:	46bd      	mov	sp, r7
 8014672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014676:	4770      	bx	lr

08014678 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8014678:	b580      	push	{r7, lr}
 801467a:	b08c      	sub	sp, #48	; 0x30
 801467c:	af02      	add	r7, sp, #8
 801467e:	4603      	mov	r3, r0
 8014680:	71fb      	strb	r3, [r7, #7]
 8014682:	460b      	mov	r3, r1
 8014684:	80bb      	strh	r3, [r7, #4]
 8014686:	4613      	mov	r3, r2
 8014688:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801468a:	79fb      	ldrb	r3, [r7, #7]
 801468c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801468e:	887b      	ldrh	r3, [r7, #2]
 8014690:	2b41      	cmp	r3, #65	; 0x41
 8014692:	d00b      	beq.n	80146ac <pbuf_alloc+0x34>
 8014694:	2b41      	cmp	r3, #65	; 0x41
 8014696:	dc02      	bgt.n	801469e <pbuf_alloc+0x26>
 8014698:	2b01      	cmp	r3, #1
 801469a:	d007      	beq.n	80146ac <pbuf_alloc+0x34>
 801469c:	e0c2      	b.n	8014824 <pbuf_alloc+0x1ac>
 801469e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80146a2:	d00b      	beq.n	80146bc <pbuf_alloc+0x44>
 80146a4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80146a8:	d070      	beq.n	801478c <pbuf_alloc+0x114>
 80146aa:	e0bb      	b.n	8014824 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80146ac:	887a      	ldrh	r2, [r7, #2]
 80146ae:	88bb      	ldrh	r3, [r7, #4]
 80146b0:	4619      	mov	r1, r3
 80146b2:	2000      	movs	r0, #0
 80146b4:	f000 f8d2 	bl	801485c <pbuf_alloc_reference>
 80146b8:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80146ba:	e0bd      	b.n	8014838 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80146bc:	2300      	movs	r3, #0
 80146be:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80146c0:	2300      	movs	r3, #0
 80146c2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80146c4:	88bb      	ldrh	r3, [r7, #4]
 80146c6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80146c8:	200c      	movs	r0, #12
 80146ca:	f7ff fbc3 	bl	8013e54 <memp_malloc>
 80146ce:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80146d0:	693b      	ldr	r3, [r7, #16]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d109      	bne.n	80146ea <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 80146d6:	f7ff ff7b 	bl	80145d0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80146da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d002      	beq.n	80146e6 <pbuf_alloc+0x6e>
            pbuf_free(p);
 80146e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80146e2:	f000 faa9 	bl	8014c38 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80146e6:	2300      	movs	r3, #0
 80146e8:	e0a7      	b.n	801483a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80146ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80146ec:	3303      	adds	r3, #3
 80146ee:	b29b      	uxth	r3, r3
 80146f0:	f023 0303 	bic.w	r3, r3, #3
 80146f4:	b29b      	uxth	r3, r3
 80146f6:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80146fa:	b29b      	uxth	r3, r3
 80146fc:	8b7a      	ldrh	r2, [r7, #26]
 80146fe:	4293      	cmp	r3, r2
 8014700:	bf28      	it	cs
 8014702:	4613      	movcs	r3, r2
 8014704:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8014706:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014708:	3310      	adds	r3, #16
 801470a:	693a      	ldr	r2, [r7, #16]
 801470c:	4413      	add	r3, r2
 801470e:	3303      	adds	r3, #3
 8014710:	f023 0303 	bic.w	r3, r3, #3
 8014714:	4618      	mov	r0, r3
 8014716:	89f9      	ldrh	r1, [r7, #14]
 8014718:	8b7a      	ldrh	r2, [r7, #26]
 801471a:	2300      	movs	r3, #0
 801471c:	9301      	str	r3, [sp, #4]
 801471e:	887b      	ldrh	r3, [r7, #2]
 8014720:	9300      	str	r3, [sp, #0]
 8014722:	460b      	mov	r3, r1
 8014724:	4601      	mov	r1, r0
 8014726:	6938      	ldr	r0, [r7, #16]
 8014728:	f7ff ff7c 	bl	8014624 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801472c:	693b      	ldr	r3, [r7, #16]
 801472e:	685b      	ldr	r3, [r3, #4]
 8014730:	f003 0303 	and.w	r3, r3, #3
 8014734:	2b00      	cmp	r3, #0
 8014736:	d006      	beq.n	8014746 <pbuf_alloc+0xce>
 8014738:	4b42      	ldr	r3, [pc, #264]	; (8014844 <pbuf_alloc+0x1cc>)
 801473a:	f240 1201 	movw	r2, #257	; 0x101
 801473e:	4942      	ldr	r1, [pc, #264]	; (8014848 <pbuf_alloc+0x1d0>)
 8014740:	4842      	ldr	r0, [pc, #264]	; (801484c <pbuf_alloc+0x1d4>)
 8014742:	f009 fcbf 	bl	801e0c4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8014746:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014748:	3303      	adds	r3, #3
 801474a:	f023 0303 	bic.w	r3, r3, #3
 801474e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8014752:	d106      	bne.n	8014762 <pbuf_alloc+0xea>
 8014754:	4b3b      	ldr	r3, [pc, #236]	; (8014844 <pbuf_alloc+0x1cc>)
 8014756:	f240 1203 	movw	r2, #259	; 0x103
 801475a:	493d      	ldr	r1, [pc, #244]	; (8014850 <pbuf_alloc+0x1d8>)
 801475c:	483b      	ldr	r0, [pc, #236]	; (801484c <pbuf_alloc+0x1d4>)
 801475e:	f009 fcb1 	bl	801e0c4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014764:	2b00      	cmp	r3, #0
 8014766:	d102      	bne.n	801476e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8014768:	693b      	ldr	r3, [r7, #16]
 801476a:	627b      	str	r3, [r7, #36]	; 0x24
 801476c:	e002      	b.n	8014774 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801476e:	69fb      	ldr	r3, [r7, #28]
 8014770:	693a      	ldr	r2, [r7, #16]
 8014772:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8014774:	693b      	ldr	r3, [r7, #16]
 8014776:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8014778:	8b7a      	ldrh	r2, [r7, #26]
 801477a:	89fb      	ldrh	r3, [r7, #14]
 801477c:	1ad3      	subs	r3, r2, r3
 801477e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014780:	2300      	movs	r3, #0
 8014782:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8014784:	8b7b      	ldrh	r3, [r7, #26]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d19e      	bne.n	80146c8 <pbuf_alloc+0x50>
      break;
 801478a:	e055      	b.n	8014838 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801478c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801478e:	3303      	adds	r3, #3
 8014790:	b29b      	uxth	r3, r3
 8014792:	f023 0303 	bic.w	r3, r3, #3
 8014796:	b29a      	uxth	r2, r3
 8014798:	88bb      	ldrh	r3, [r7, #4]
 801479a:	3303      	adds	r3, #3
 801479c:	b29b      	uxth	r3, r3
 801479e:	f023 0303 	bic.w	r3, r3, #3
 80147a2:	b29b      	uxth	r3, r3
 80147a4:	4413      	add	r3, r2
 80147a6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80147a8:	8b3b      	ldrh	r3, [r7, #24]
 80147aa:	3310      	adds	r3, #16
 80147ac:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80147ae:	8b3a      	ldrh	r2, [r7, #24]
 80147b0:	88bb      	ldrh	r3, [r7, #4]
 80147b2:	3303      	adds	r3, #3
 80147b4:	f023 0303 	bic.w	r3, r3, #3
 80147b8:	429a      	cmp	r2, r3
 80147ba:	d306      	bcc.n	80147ca <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80147bc:	8afa      	ldrh	r2, [r7, #22]
 80147be:	88bb      	ldrh	r3, [r7, #4]
 80147c0:	3303      	adds	r3, #3
 80147c2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80147c6:	429a      	cmp	r2, r3
 80147c8:	d201      	bcs.n	80147ce <pbuf_alloc+0x156>
        return NULL;
 80147ca:	2300      	movs	r3, #0
 80147cc:	e035      	b.n	801483a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80147ce:	8afb      	ldrh	r3, [r7, #22]
 80147d0:	4618      	mov	r0, r3
 80147d2:	f7ff f9bd 	bl	8013b50 <mem_malloc>
 80147d6:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80147d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d101      	bne.n	80147e2 <pbuf_alloc+0x16a>
        return NULL;
 80147de:	2300      	movs	r3, #0
 80147e0:	e02b      	b.n	801483a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80147e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80147e4:	3310      	adds	r3, #16
 80147e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147e8:	4413      	add	r3, r2
 80147ea:	3303      	adds	r3, #3
 80147ec:	f023 0303 	bic.w	r3, r3, #3
 80147f0:	4618      	mov	r0, r3
 80147f2:	88b9      	ldrh	r1, [r7, #4]
 80147f4:	88ba      	ldrh	r2, [r7, #4]
 80147f6:	2300      	movs	r3, #0
 80147f8:	9301      	str	r3, [sp, #4]
 80147fa:	887b      	ldrh	r3, [r7, #2]
 80147fc:	9300      	str	r3, [sp, #0]
 80147fe:	460b      	mov	r3, r1
 8014800:	4601      	mov	r1, r0
 8014802:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014804:	f7ff ff0e 	bl	8014624 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8014808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801480a:	685b      	ldr	r3, [r3, #4]
 801480c:	f003 0303 	and.w	r3, r3, #3
 8014810:	2b00      	cmp	r3, #0
 8014812:	d010      	beq.n	8014836 <pbuf_alloc+0x1be>
 8014814:	4b0b      	ldr	r3, [pc, #44]	; (8014844 <pbuf_alloc+0x1cc>)
 8014816:	f240 1223 	movw	r2, #291	; 0x123
 801481a:	490e      	ldr	r1, [pc, #56]	; (8014854 <pbuf_alloc+0x1dc>)
 801481c:	480b      	ldr	r0, [pc, #44]	; (801484c <pbuf_alloc+0x1d4>)
 801481e:	f009 fc51 	bl	801e0c4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8014822:	e008      	b.n	8014836 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8014824:	4b07      	ldr	r3, [pc, #28]	; (8014844 <pbuf_alloc+0x1cc>)
 8014826:	f240 1227 	movw	r2, #295	; 0x127
 801482a:	490b      	ldr	r1, [pc, #44]	; (8014858 <pbuf_alloc+0x1e0>)
 801482c:	4807      	ldr	r0, [pc, #28]	; (801484c <pbuf_alloc+0x1d4>)
 801482e:	f009 fc49 	bl	801e0c4 <iprintf>
      return NULL;
 8014832:	2300      	movs	r3, #0
 8014834:	e001      	b.n	801483a <pbuf_alloc+0x1c2>
      break;
 8014836:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8014838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801483a:	4618      	mov	r0, r3
 801483c:	3728      	adds	r7, #40	; 0x28
 801483e:	46bd      	mov	sp, r7
 8014840:	bd80      	pop	{r7, pc}
 8014842:	bf00      	nop
 8014844:	0801f8bc 	.word	0x0801f8bc
 8014848:	0801f8ec 	.word	0x0801f8ec
 801484c:	0801f91c 	.word	0x0801f91c
 8014850:	0801f944 	.word	0x0801f944
 8014854:	0801f978 	.word	0x0801f978
 8014858:	0801f9a4 	.word	0x0801f9a4

0801485c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b086      	sub	sp, #24
 8014860:	af02      	add	r7, sp, #8
 8014862:	6078      	str	r0, [r7, #4]
 8014864:	460b      	mov	r3, r1
 8014866:	807b      	strh	r3, [r7, #2]
 8014868:	4613      	mov	r3, r2
 801486a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801486c:	883b      	ldrh	r3, [r7, #0]
 801486e:	2b41      	cmp	r3, #65	; 0x41
 8014870:	d009      	beq.n	8014886 <pbuf_alloc_reference+0x2a>
 8014872:	883b      	ldrh	r3, [r7, #0]
 8014874:	2b01      	cmp	r3, #1
 8014876:	d006      	beq.n	8014886 <pbuf_alloc_reference+0x2a>
 8014878:	4b0f      	ldr	r3, [pc, #60]	; (80148b8 <pbuf_alloc_reference+0x5c>)
 801487a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801487e:	490f      	ldr	r1, [pc, #60]	; (80148bc <pbuf_alloc_reference+0x60>)
 8014880:	480f      	ldr	r0, [pc, #60]	; (80148c0 <pbuf_alloc_reference+0x64>)
 8014882:	f009 fc1f 	bl	801e0c4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8014886:	200b      	movs	r0, #11
 8014888:	f7ff fae4 	bl	8013e54 <memp_malloc>
 801488c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d101      	bne.n	8014898 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8014894:	2300      	movs	r3, #0
 8014896:	e00b      	b.n	80148b0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8014898:	8879      	ldrh	r1, [r7, #2]
 801489a:	887a      	ldrh	r2, [r7, #2]
 801489c:	2300      	movs	r3, #0
 801489e:	9301      	str	r3, [sp, #4]
 80148a0:	883b      	ldrh	r3, [r7, #0]
 80148a2:	9300      	str	r3, [sp, #0]
 80148a4:	460b      	mov	r3, r1
 80148a6:	6879      	ldr	r1, [r7, #4]
 80148a8:	68f8      	ldr	r0, [r7, #12]
 80148aa:	f7ff febb 	bl	8014624 <pbuf_init_alloced_pbuf>
  return p;
 80148ae:	68fb      	ldr	r3, [r7, #12]
}
 80148b0:	4618      	mov	r0, r3
 80148b2:	3710      	adds	r7, #16
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bd80      	pop	{r7, pc}
 80148b8:	0801f8bc 	.word	0x0801f8bc
 80148bc:	0801f9c0 	.word	0x0801f9c0
 80148c0:	0801f91c 	.word	0x0801f91c

080148c4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b088      	sub	sp, #32
 80148c8:	af02      	add	r7, sp, #8
 80148ca:	607b      	str	r3, [r7, #4]
 80148cc:	4603      	mov	r3, r0
 80148ce:	73fb      	strb	r3, [r7, #15]
 80148d0:	460b      	mov	r3, r1
 80148d2:	81bb      	strh	r3, [r7, #12]
 80148d4:	4613      	mov	r3, r2
 80148d6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80148d8:	7bfb      	ldrb	r3, [r7, #15]
 80148da:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80148dc:	8a7b      	ldrh	r3, [r7, #18]
 80148de:	3303      	adds	r3, #3
 80148e0:	f023 0203 	bic.w	r2, r3, #3
 80148e4:	89bb      	ldrh	r3, [r7, #12]
 80148e6:	441a      	add	r2, r3
 80148e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148ea:	429a      	cmp	r2, r3
 80148ec:	d901      	bls.n	80148f2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80148ee:	2300      	movs	r3, #0
 80148f0:	e018      	b.n	8014924 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80148f2:	6a3b      	ldr	r3, [r7, #32]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d007      	beq.n	8014908 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80148f8:	8a7b      	ldrh	r3, [r7, #18]
 80148fa:	3303      	adds	r3, #3
 80148fc:	f023 0303 	bic.w	r3, r3, #3
 8014900:	6a3a      	ldr	r2, [r7, #32]
 8014902:	4413      	add	r3, r2
 8014904:	617b      	str	r3, [r7, #20]
 8014906:	e001      	b.n	801490c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8014908:	2300      	movs	r3, #0
 801490a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	89b9      	ldrh	r1, [r7, #12]
 8014910:	89ba      	ldrh	r2, [r7, #12]
 8014912:	2302      	movs	r3, #2
 8014914:	9301      	str	r3, [sp, #4]
 8014916:	897b      	ldrh	r3, [r7, #10]
 8014918:	9300      	str	r3, [sp, #0]
 801491a:	460b      	mov	r3, r1
 801491c:	6979      	ldr	r1, [r7, #20]
 801491e:	f7ff fe81 	bl	8014624 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8014922:	687b      	ldr	r3, [r7, #4]
}
 8014924:	4618      	mov	r0, r3
 8014926:	3718      	adds	r7, #24
 8014928:	46bd      	mov	sp, r7
 801492a:	bd80      	pop	{r7, pc}

0801492c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b084      	sub	sp, #16
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
 8014934:	460b      	mov	r3, r1
 8014936:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d106      	bne.n	801494c <pbuf_realloc+0x20>
 801493e:	4b3a      	ldr	r3, [pc, #232]	; (8014a28 <pbuf_realloc+0xfc>)
 8014940:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8014944:	4939      	ldr	r1, [pc, #228]	; (8014a2c <pbuf_realloc+0x100>)
 8014946:	483a      	ldr	r0, [pc, #232]	; (8014a30 <pbuf_realloc+0x104>)
 8014948:	f009 fbbc 	bl	801e0c4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	891b      	ldrh	r3, [r3, #8]
 8014950:	887a      	ldrh	r2, [r7, #2]
 8014952:	429a      	cmp	r2, r3
 8014954:	d264      	bcs.n	8014a20 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	891a      	ldrh	r2, [r3, #8]
 801495a:	887b      	ldrh	r3, [r7, #2]
 801495c:	1ad3      	subs	r3, r2, r3
 801495e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014960:	887b      	ldrh	r3, [r7, #2]
 8014962:	817b      	strh	r3, [r7, #10]
  q = p;
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014968:	e018      	b.n	801499c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	895b      	ldrh	r3, [r3, #10]
 801496e:	897a      	ldrh	r2, [r7, #10]
 8014970:	1ad3      	subs	r3, r2, r3
 8014972:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	891a      	ldrh	r2, [r3, #8]
 8014978:	893b      	ldrh	r3, [r7, #8]
 801497a:	1ad3      	subs	r3, r2, r3
 801497c:	b29a      	uxth	r2, r3
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d106      	bne.n	801499c <pbuf_realloc+0x70>
 801498e:	4b26      	ldr	r3, [pc, #152]	; (8014a28 <pbuf_realloc+0xfc>)
 8014990:	f240 12af 	movw	r2, #431	; 0x1af
 8014994:	4927      	ldr	r1, [pc, #156]	; (8014a34 <pbuf_realloc+0x108>)
 8014996:	4826      	ldr	r0, [pc, #152]	; (8014a30 <pbuf_realloc+0x104>)
 8014998:	f009 fb94 	bl	801e0c4 <iprintf>
  while (rem_len > q->len) {
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	895b      	ldrh	r3, [r3, #10]
 80149a0:	897a      	ldrh	r2, [r7, #10]
 80149a2:	429a      	cmp	r2, r3
 80149a4:	d8e1      	bhi.n	801496a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	7b1b      	ldrb	r3, [r3, #12]
 80149aa:	f003 030f 	and.w	r3, r3, #15
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d122      	bne.n	80149f8 <pbuf_realloc+0xcc>
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	895b      	ldrh	r3, [r3, #10]
 80149b6:	897a      	ldrh	r2, [r7, #10]
 80149b8:	429a      	cmp	r2, r3
 80149ba:	d01d      	beq.n	80149f8 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	7b5b      	ldrb	r3, [r3, #13]
 80149c0:	f003 0302 	and.w	r3, r3, #2
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d117      	bne.n	80149f8 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	685b      	ldr	r3, [r3, #4]
 80149cc:	461a      	mov	r2, r3
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	1ad3      	subs	r3, r2, r3
 80149d2:	b29a      	uxth	r2, r3
 80149d4:	897b      	ldrh	r3, [r7, #10]
 80149d6:	4413      	add	r3, r2
 80149d8:	b29b      	uxth	r3, r3
 80149da:	4619      	mov	r1, r3
 80149dc:	68f8      	ldr	r0, [r7, #12]
 80149de:	f7fe ffad 	bl	801393c <mem_trim>
 80149e2:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d106      	bne.n	80149f8 <pbuf_realloc+0xcc>
 80149ea:	4b0f      	ldr	r3, [pc, #60]	; (8014a28 <pbuf_realloc+0xfc>)
 80149ec:	f240 12bd 	movw	r2, #445	; 0x1bd
 80149f0:	4911      	ldr	r1, [pc, #68]	; (8014a38 <pbuf_realloc+0x10c>)
 80149f2:	480f      	ldr	r0, [pc, #60]	; (8014a30 <pbuf_realloc+0x104>)
 80149f4:	f009 fb66 	bl	801e0c4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	897a      	ldrh	r2, [r7, #10]
 80149fc:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	895a      	ldrh	r2, [r3, #10]
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d004      	beq.n	8014a18 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	4618      	mov	r0, r3
 8014a14:	f000 f910 	bl	8014c38 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	601a      	str	r2, [r3, #0]
 8014a1e:	e000      	b.n	8014a22 <pbuf_realloc+0xf6>
    return;
 8014a20:	bf00      	nop

}
 8014a22:	3710      	adds	r7, #16
 8014a24:	46bd      	mov	sp, r7
 8014a26:	bd80      	pop	{r7, pc}
 8014a28:	0801f8bc 	.word	0x0801f8bc
 8014a2c:	0801f9d4 	.word	0x0801f9d4
 8014a30:	0801f91c 	.word	0x0801f91c
 8014a34:	0801f9ec 	.word	0x0801f9ec
 8014a38:	0801fa04 	.word	0x0801fa04

08014a3c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b086      	sub	sp, #24
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	60f8      	str	r0, [r7, #12]
 8014a44:	60b9      	str	r1, [r7, #8]
 8014a46:	4613      	mov	r3, r2
 8014a48:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d106      	bne.n	8014a5e <pbuf_add_header_impl+0x22>
 8014a50:	4b2b      	ldr	r3, [pc, #172]	; (8014b00 <pbuf_add_header_impl+0xc4>)
 8014a52:	f240 12df 	movw	r2, #479	; 0x1df
 8014a56:	492b      	ldr	r1, [pc, #172]	; (8014b04 <pbuf_add_header_impl+0xc8>)
 8014a58:	482b      	ldr	r0, [pc, #172]	; (8014b08 <pbuf_add_header_impl+0xcc>)
 8014a5a:	f009 fb33 	bl	801e0c4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d003      	beq.n	8014a6c <pbuf_add_header_impl+0x30>
 8014a64:	68bb      	ldr	r3, [r7, #8]
 8014a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014a6a:	d301      	bcc.n	8014a70 <pbuf_add_header_impl+0x34>
    return 1;
 8014a6c:	2301      	movs	r3, #1
 8014a6e:	e043      	b.n	8014af8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8014a70:	68bb      	ldr	r3, [r7, #8]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d101      	bne.n	8014a7a <pbuf_add_header_impl+0x3e>
    return 0;
 8014a76:	2300      	movs	r3, #0
 8014a78:	e03e      	b.n	8014af8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	891a      	ldrh	r2, [r3, #8]
 8014a82:	8a7b      	ldrh	r3, [r7, #18]
 8014a84:	4413      	add	r3, r2
 8014a86:	b29b      	uxth	r3, r3
 8014a88:	8a7a      	ldrh	r2, [r7, #18]
 8014a8a:	429a      	cmp	r2, r3
 8014a8c:	d901      	bls.n	8014a92 <pbuf_add_header_impl+0x56>
    return 1;
 8014a8e:	2301      	movs	r3, #1
 8014a90:	e032      	b.n	8014af8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	7b1b      	ldrb	r3, [r3, #12]
 8014a96:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014a98:	8a3b      	ldrh	r3, [r7, #16]
 8014a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d00c      	beq.n	8014abc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	685a      	ldr	r2, [r3, #4]
 8014aa6:	68bb      	ldr	r3, [r7, #8]
 8014aa8:	425b      	negs	r3, r3
 8014aaa:	4413      	add	r3, r2
 8014aac:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	3310      	adds	r3, #16
 8014ab2:	697a      	ldr	r2, [r7, #20]
 8014ab4:	429a      	cmp	r2, r3
 8014ab6:	d20d      	bcs.n	8014ad4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014ab8:	2301      	movs	r3, #1
 8014aba:	e01d      	b.n	8014af8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014abc:	79fb      	ldrb	r3, [r7, #7]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d006      	beq.n	8014ad0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	685a      	ldr	r2, [r3, #4]
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	425b      	negs	r3, r3
 8014aca:	4413      	add	r3, r2
 8014acc:	617b      	str	r3, [r7, #20]
 8014ace:	e001      	b.n	8014ad4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014ad0:	2301      	movs	r3, #1
 8014ad2:	e011      	b.n	8014af8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	697a      	ldr	r2, [r7, #20]
 8014ad8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	895a      	ldrh	r2, [r3, #10]
 8014ade:	8a7b      	ldrh	r3, [r7, #18]
 8014ae0:	4413      	add	r3, r2
 8014ae2:	b29a      	uxth	r2, r3
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	891a      	ldrh	r2, [r3, #8]
 8014aec:	8a7b      	ldrh	r3, [r7, #18]
 8014aee:	4413      	add	r3, r2
 8014af0:	b29a      	uxth	r2, r3
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	811a      	strh	r2, [r3, #8]


  return 0;
 8014af6:	2300      	movs	r3, #0
}
 8014af8:	4618      	mov	r0, r3
 8014afa:	3718      	adds	r7, #24
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bd80      	pop	{r7, pc}
 8014b00:	0801f8bc 	.word	0x0801f8bc
 8014b04:	0801fa20 	.word	0x0801fa20
 8014b08:	0801f91c 	.word	0x0801f91c

08014b0c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b082      	sub	sp, #8
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
 8014b14:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014b16:	2200      	movs	r2, #0
 8014b18:	6839      	ldr	r1, [r7, #0]
 8014b1a:	6878      	ldr	r0, [r7, #4]
 8014b1c:	f7ff ff8e 	bl	8014a3c <pbuf_add_header_impl>
 8014b20:	4603      	mov	r3, r0
}
 8014b22:	4618      	mov	r0, r3
 8014b24:	3708      	adds	r7, #8
 8014b26:	46bd      	mov	sp, r7
 8014b28:	bd80      	pop	{r7, pc}
	...

08014b2c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b084      	sub	sp, #16
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
 8014b34:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d106      	bne.n	8014b4a <pbuf_remove_header+0x1e>
 8014b3c:	4b20      	ldr	r3, [pc, #128]	; (8014bc0 <pbuf_remove_header+0x94>)
 8014b3e:	f240 224b 	movw	r2, #587	; 0x24b
 8014b42:	4920      	ldr	r1, [pc, #128]	; (8014bc4 <pbuf_remove_header+0x98>)
 8014b44:	4820      	ldr	r0, [pc, #128]	; (8014bc8 <pbuf_remove_header+0x9c>)
 8014b46:	f009 fabd 	bl	801e0c4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d003      	beq.n	8014b58 <pbuf_remove_header+0x2c>
 8014b50:	683b      	ldr	r3, [r7, #0]
 8014b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014b56:	d301      	bcc.n	8014b5c <pbuf_remove_header+0x30>
    return 1;
 8014b58:	2301      	movs	r3, #1
 8014b5a:	e02c      	b.n	8014bb6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014b5c:	683b      	ldr	r3, [r7, #0]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d101      	bne.n	8014b66 <pbuf_remove_header+0x3a>
    return 0;
 8014b62:	2300      	movs	r3, #0
 8014b64:	e027      	b.n	8014bb6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	895b      	ldrh	r3, [r3, #10]
 8014b6e:	89fa      	ldrh	r2, [r7, #14]
 8014b70:	429a      	cmp	r2, r3
 8014b72:	d908      	bls.n	8014b86 <pbuf_remove_header+0x5a>
 8014b74:	4b12      	ldr	r3, [pc, #72]	; (8014bc0 <pbuf_remove_header+0x94>)
 8014b76:	f240 2255 	movw	r2, #597	; 0x255
 8014b7a:	4914      	ldr	r1, [pc, #80]	; (8014bcc <pbuf_remove_header+0xa0>)
 8014b7c:	4812      	ldr	r0, [pc, #72]	; (8014bc8 <pbuf_remove_header+0x9c>)
 8014b7e:	f009 faa1 	bl	801e0c4 <iprintf>
 8014b82:	2301      	movs	r3, #1
 8014b84:	e017      	b.n	8014bb6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	685b      	ldr	r3, [r3, #4]
 8014b8a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	685a      	ldr	r2, [r3, #4]
 8014b90:	683b      	ldr	r3, [r7, #0]
 8014b92:	441a      	add	r2, r3
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	895a      	ldrh	r2, [r3, #10]
 8014b9c:	89fb      	ldrh	r3, [r7, #14]
 8014b9e:	1ad3      	subs	r3, r2, r3
 8014ba0:	b29a      	uxth	r2, r3
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	891a      	ldrh	r2, [r3, #8]
 8014baa:	89fb      	ldrh	r3, [r7, #14]
 8014bac:	1ad3      	subs	r3, r2, r3
 8014bae:	b29a      	uxth	r2, r3
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014bb4:	2300      	movs	r3, #0
}
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	3710      	adds	r7, #16
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	bd80      	pop	{r7, pc}
 8014bbe:	bf00      	nop
 8014bc0:	0801f8bc 	.word	0x0801f8bc
 8014bc4:	0801fa20 	.word	0x0801fa20
 8014bc8:	0801f91c 	.word	0x0801f91c
 8014bcc:	0801fa2c 	.word	0x0801fa2c

08014bd0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b082      	sub	sp, #8
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
 8014bd8:	460b      	mov	r3, r1
 8014bda:	807b      	strh	r3, [r7, #2]
 8014bdc:	4613      	mov	r3, r2
 8014bde:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014be0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	da08      	bge.n	8014bfa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014be8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014bec:	425b      	negs	r3, r3
 8014bee:	4619      	mov	r1, r3
 8014bf0:	6878      	ldr	r0, [r7, #4]
 8014bf2:	f7ff ff9b 	bl	8014b2c <pbuf_remove_header>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	e007      	b.n	8014c0a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8014bfa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014bfe:	787a      	ldrb	r2, [r7, #1]
 8014c00:	4619      	mov	r1, r3
 8014c02:	6878      	ldr	r0, [r7, #4]
 8014c04:	f7ff ff1a 	bl	8014a3c <pbuf_add_header_impl>
 8014c08:	4603      	mov	r3, r0
  }
}
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	3708      	adds	r7, #8
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	bd80      	pop	{r7, pc}

08014c12 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014c12:	b580      	push	{r7, lr}
 8014c14:	b082      	sub	sp, #8
 8014c16:	af00      	add	r7, sp, #0
 8014c18:	6078      	str	r0, [r7, #4]
 8014c1a:	460b      	mov	r3, r1
 8014c1c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014c1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014c22:	2201      	movs	r2, #1
 8014c24:	4619      	mov	r1, r3
 8014c26:	6878      	ldr	r0, [r7, #4]
 8014c28:	f7ff ffd2 	bl	8014bd0 <pbuf_header_impl>
 8014c2c:	4603      	mov	r3, r0
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	3708      	adds	r7, #8
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}
	...

08014c38 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b088      	sub	sp, #32
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d10b      	bne.n	8014c5e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d106      	bne.n	8014c5a <pbuf_free+0x22>
 8014c4c:	4b3b      	ldr	r3, [pc, #236]	; (8014d3c <pbuf_free+0x104>)
 8014c4e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8014c52:	493b      	ldr	r1, [pc, #236]	; (8014d40 <pbuf_free+0x108>)
 8014c54:	483b      	ldr	r0, [pc, #236]	; (8014d44 <pbuf_free+0x10c>)
 8014c56:	f009 fa35 	bl	801e0c4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	e069      	b.n	8014d32 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014c62:	e062      	b.n	8014d2a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014c64:	f009 f9ca 	bl	801dffc <sys_arch_protect>
 8014c68:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	7b9b      	ldrb	r3, [r3, #14]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d106      	bne.n	8014c80 <pbuf_free+0x48>
 8014c72:	4b32      	ldr	r3, [pc, #200]	; (8014d3c <pbuf_free+0x104>)
 8014c74:	f240 22f1 	movw	r2, #753	; 0x2f1
 8014c78:	4933      	ldr	r1, [pc, #204]	; (8014d48 <pbuf_free+0x110>)
 8014c7a:	4832      	ldr	r0, [pc, #200]	; (8014d44 <pbuf_free+0x10c>)
 8014c7c:	f009 fa22 	bl	801e0c4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	7b9b      	ldrb	r3, [r3, #14]
 8014c84:	3b01      	subs	r3, #1
 8014c86:	b2da      	uxtb	r2, r3
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	739a      	strb	r2, [r3, #14]
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	7b9b      	ldrb	r3, [r3, #14]
 8014c90:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014c92:	69b8      	ldr	r0, [r7, #24]
 8014c94:	f009 f9c0 	bl	801e018 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014c98:	7dfb      	ldrb	r3, [r7, #23]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d143      	bne.n	8014d26 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	7b1b      	ldrb	r3, [r3, #12]
 8014ca8:	f003 030f 	and.w	r3, r3, #15
 8014cac:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	7b5b      	ldrb	r3, [r3, #13]
 8014cb2:	f003 0302 	and.w	r3, r3, #2
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d011      	beq.n	8014cde <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	691b      	ldr	r3, [r3, #16]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d106      	bne.n	8014cd4 <pbuf_free+0x9c>
 8014cc6:	4b1d      	ldr	r3, [pc, #116]	; (8014d3c <pbuf_free+0x104>)
 8014cc8:	f240 22ff 	movw	r2, #767	; 0x2ff
 8014ccc:	491f      	ldr	r1, [pc, #124]	; (8014d4c <pbuf_free+0x114>)
 8014cce:	481d      	ldr	r0, [pc, #116]	; (8014d44 <pbuf_free+0x10c>)
 8014cd0:	f009 f9f8 	bl	801e0c4 <iprintf>
        pc->custom_free_function(p);
 8014cd4:	68bb      	ldr	r3, [r7, #8]
 8014cd6:	691b      	ldr	r3, [r3, #16]
 8014cd8:	6878      	ldr	r0, [r7, #4]
 8014cda:	4798      	blx	r3
 8014cdc:	e01d      	b.n	8014d1a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014cde:	7bfb      	ldrb	r3, [r7, #15]
 8014ce0:	2b02      	cmp	r3, #2
 8014ce2:	d104      	bne.n	8014cee <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014ce4:	6879      	ldr	r1, [r7, #4]
 8014ce6:	200c      	movs	r0, #12
 8014ce8:	f7ff f906 	bl	8013ef8 <memp_free>
 8014cec:	e015      	b.n	8014d1a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014cee:	7bfb      	ldrb	r3, [r7, #15]
 8014cf0:	2b01      	cmp	r3, #1
 8014cf2:	d104      	bne.n	8014cfe <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014cf4:	6879      	ldr	r1, [r7, #4]
 8014cf6:	200b      	movs	r0, #11
 8014cf8:	f7ff f8fe 	bl	8013ef8 <memp_free>
 8014cfc:	e00d      	b.n	8014d1a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014cfe:	7bfb      	ldrb	r3, [r7, #15]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d103      	bne.n	8014d0c <pbuf_free+0xd4>
          mem_free(p);
 8014d04:	6878      	ldr	r0, [r7, #4]
 8014d06:	f7fe fd89 	bl	801381c <mem_free>
 8014d0a:	e006      	b.n	8014d1a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014d0c:	4b0b      	ldr	r3, [pc, #44]	; (8014d3c <pbuf_free+0x104>)
 8014d0e:	f240 320f 	movw	r2, #783	; 0x30f
 8014d12:	490f      	ldr	r1, [pc, #60]	; (8014d50 <pbuf_free+0x118>)
 8014d14:	480b      	ldr	r0, [pc, #44]	; (8014d44 <pbuf_free+0x10c>)
 8014d16:	f009 f9d5 	bl	801e0c4 <iprintf>
        }
      }
      count++;
 8014d1a:	7ffb      	ldrb	r3, [r7, #31]
 8014d1c:	3301      	adds	r3, #1
 8014d1e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014d20:	693b      	ldr	r3, [r7, #16]
 8014d22:	607b      	str	r3, [r7, #4]
 8014d24:	e001      	b.n	8014d2a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8014d26:	2300      	movs	r3, #0
 8014d28:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d199      	bne.n	8014c64 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014d30:	7ffb      	ldrb	r3, [r7, #31]
}
 8014d32:	4618      	mov	r0, r3
 8014d34:	3720      	adds	r7, #32
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}
 8014d3a:	bf00      	nop
 8014d3c:	0801f8bc 	.word	0x0801f8bc
 8014d40:	0801fa20 	.word	0x0801fa20
 8014d44:	0801f91c 	.word	0x0801f91c
 8014d48:	0801fa4c 	.word	0x0801fa4c
 8014d4c:	0801fa64 	.word	0x0801fa64
 8014d50:	0801fa88 	.word	0x0801fa88

08014d54 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014d54:	b480      	push	{r7}
 8014d56:	b085      	sub	sp, #20
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014d60:	e005      	b.n	8014d6e <pbuf_clen+0x1a>
    ++len;
 8014d62:	89fb      	ldrh	r3, [r7, #14]
 8014d64:	3301      	adds	r3, #1
 8014d66:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d1f6      	bne.n	8014d62 <pbuf_clen+0xe>
  }
  return len;
 8014d74:	89fb      	ldrh	r3, [r7, #14]
}
 8014d76:	4618      	mov	r0, r3
 8014d78:	3714      	adds	r7, #20
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d80:	4770      	bx	lr
	...

08014d84 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b084      	sub	sp, #16
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d016      	beq.n	8014dc0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014d92:	f009 f933 	bl	801dffc <sys_arch_protect>
 8014d96:	60f8      	str	r0, [r7, #12]
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	7b9b      	ldrb	r3, [r3, #14]
 8014d9c:	3301      	adds	r3, #1
 8014d9e:	b2da      	uxtb	r2, r3
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	739a      	strb	r2, [r3, #14]
 8014da4:	68f8      	ldr	r0, [r7, #12]
 8014da6:	f009 f937 	bl	801e018 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	7b9b      	ldrb	r3, [r3, #14]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d106      	bne.n	8014dc0 <pbuf_ref+0x3c>
 8014db2:	4b05      	ldr	r3, [pc, #20]	; (8014dc8 <pbuf_ref+0x44>)
 8014db4:	f240 3242 	movw	r2, #834	; 0x342
 8014db8:	4904      	ldr	r1, [pc, #16]	; (8014dcc <pbuf_ref+0x48>)
 8014dba:	4805      	ldr	r0, [pc, #20]	; (8014dd0 <pbuf_ref+0x4c>)
 8014dbc:	f009 f982 	bl	801e0c4 <iprintf>
  }
}
 8014dc0:	bf00      	nop
 8014dc2:	3710      	adds	r7, #16
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd80      	pop	{r7, pc}
 8014dc8:	0801f8bc 	.word	0x0801f8bc
 8014dcc:	0801fa9c 	.word	0x0801fa9c
 8014dd0:	0801f91c 	.word	0x0801f91c

08014dd4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b084      	sub	sp, #16
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
 8014ddc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d002      	beq.n	8014dea <pbuf_cat+0x16>
 8014de4:	683b      	ldr	r3, [r7, #0]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d107      	bne.n	8014dfa <pbuf_cat+0x26>
 8014dea:	4b20      	ldr	r3, [pc, #128]	; (8014e6c <pbuf_cat+0x98>)
 8014dec:	f240 325a 	movw	r2, #858	; 0x35a
 8014df0:	491f      	ldr	r1, [pc, #124]	; (8014e70 <pbuf_cat+0x9c>)
 8014df2:	4820      	ldr	r0, [pc, #128]	; (8014e74 <pbuf_cat+0xa0>)
 8014df4:	f009 f966 	bl	801e0c4 <iprintf>
 8014df8:	e034      	b.n	8014e64 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	60fb      	str	r3, [r7, #12]
 8014dfe:	e00a      	b.n	8014e16 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	891a      	ldrh	r2, [r3, #8]
 8014e04:	683b      	ldr	r3, [r7, #0]
 8014e06:	891b      	ldrh	r3, [r3, #8]
 8014e08:	4413      	add	r3, r2
 8014e0a:	b29a      	uxth	r2, r3
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	60fb      	str	r3, [r7, #12]
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d1f0      	bne.n	8014e00 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	891a      	ldrh	r2, [r3, #8]
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	895b      	ldrh	r3, [r3, #10]
 8014e26:	429a      	cmp	r2, r3
 8014e28:	d006      	beq.n	8014e38 <pbuf_cat+0x64>
 8014e2a:	4b10      	ldr	r3, [pc, #64]	; (8014e6c <pbuf_cat+0x98>)
 8014e2c:	f240 3262 	movw	r2, #866	; 0x362
 8014e30:	4911      	ldr	r1, [pc, #68]	; (8014e78 <pbuf_cat+0xa4>)
 8014e32:	4810      	ldr	r0, [pc, #64]	; (8014e74 <pbuf_cat+0xa0>)
 8014e34:	f009 f946 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d006      	beq.n	8014e4e <pbuf_cat+0x7a>
 8014e40:	4b0a      	ldr	r3, [pc, #40]	; (8014e6c <pbuf_cat+0x98>)
 8014e42:	f240 3263 	movw	r2, #867	; 0x363
 8014e46:	490d      	ldr	r1, [pc, #52]	; (8014e7c <pbuf_cat+0xa8>)
 8014e48:	480a      	ldr	r0, [pc, #40]	; (8014e74 <pbuf_cat+0xa0>)
 8014e4a:	f009 f93b 	bl	801e0c4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	891a      	ldrh	r2, [r3, #8]
 8014e52:	683b      	ldr	r3, [r7, #0]
 8014e54:	891b      	ldrh	r3, [r3, #8]
 8014e56:	4413      	add	r3, r2
 8014e58:	b29a      	uxth	r2, r3
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	683a      	ldr	r2, [r7, #0]
 8014e62:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014e64:	3710      	adds	r7, #16
 8014e66:	46bd      	mov	sp, r7
 8014e68:	bd80      	pop	{r7, pc}
 8014e6a:	bf00      	nop
 8014e6c:	0801f8bc 	.word	0x0801f8bc
 8014e70:	0801fab0 	.word	0x0801fab0
 8014e74:	0801f91c 	.word	0x0801f91c
 8014e78:	0801fae8 	.word	0x0801fae8
 8014e7c:	0801fb18 	.word	0x0801fb18

08014e80 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014e80:	b580      	push	{r7, lr}
 8014e82:	b086      	sub	sp, #24
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
 8014e88:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	617b      	str	r3, [r7, #20]
 8014e8e:	2300      	movs	r3, #0
 8014e90:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d008      	beq.n	8014eaa <pbuf_copy+0x2a>
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d005      	beq.n	8014eaa <pbuf_copy+0x2a>
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	891a      	ldrh	r2, [r3, #8]
 8014ea2:	683b      	ldr	r3, [r7, #0]
 8014ea4:	891b      	ldrh	r3, [r3, #8]
 8014ea6:	429a      	cmp	r2, r3
 8014ea8:	d209      	bcs.n	8014ebe <pbuf_copy+0x3e>
 8014eaa:	4b57      	ldr	r3, [pc, #348]	; (8015008 <pbuf_copy+0x188>)
 8014eac:	f240 32ca 	movw	r2, #970	; 0x3ca
 8014eb0:	4956      	ldr	r1, [pc, #344]	; (801500c <pbuf_copy+0x18c>)
 8014eb2:	4857      	ldr	r0, [pc, #348]	; (8015010 <pbuf_copy+0x190>)
 8014eb4:	f009 f906 	bl	801e0c4 <iprintf>
 8014eb8:	f06f 030f 	mvn.w	r3, #15
 8014ebc:	e09f      	b.n	8014ffe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	895b      	ldrh	r3, [r3, #10]
 8014ec2:	461a      	mov	r2, r3
 8014ec4:	697b      	ldr	r3, [r7, #20]
 8014ec6:	1ad2      	subs	r2, r2, r3
 8014ec8:	683b      	ldr	r3, [r7, #0]
 8014eca:	895b      	ldrh	r3, [r3, #10]
 8014ecc:	4619      	mov	r1, r3
 8014ece:	693b      	ldr	r3, [r7, #16]
 8014ed0:	1acb      	subs	r3, r1, r3
 8014ed2:	429a      	cmp	r2, r3
 8014ed4:	d306      	bcc.n	8014ee4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8014ed6:	683b      	ldr	r3, [r7, #0]
 8014ed8:	895b      	ldrh	r3, [r3, #10]
 8014eda:	461a      	mov	r2, r3
 8014edc:	693b      	ldr	r3, [r7, #16]
 8014ede:	1ad3      	subs	r3, r2, r3
 8014ee0:	60fb      	str	r3, [r7, #12]
 8014ee2:	e005      	b.n	8014ef0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	895b      	ldrh	r3, [r3, #10]
 8014ee8:	461a      	mov	r2, r3
 8014eea:	697b      	ldr	r3, [r7, #20]
 8014eec:	1ad3      	subs	r3, r2, r3
 8014eee:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	685a      	ldr	r2, [r3, #4]
 8014ef4:	697b      	ldr	r3, [r7, #20]
 8014ef6:	18d0      	adds	r0, r2, r3
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	685a      	ldr	r2, [r3, #4]
 8014efc:	693b      	ldr	r3, [r7, #16]
 8014efe:	4413      	add	r3, r2
 8014f00:	68fa      	ldr	r2, [r7, #12]
 8014f02:	4619      	mov	r1, r3
 8014f04:	f009 f8cb 	bl	801e09e <memcpy>
    offset_to += len;
 8014f08:	697a      	ldr	r2, [r7, #20]
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	4413      	add	r3, r2
 8014f0e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014f10:	693a      	ldr	r2, [r7, #16]
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	4413      	add	r3, r2
 8014f16:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	895b      	ldrh	r3, [r3, #10]
 8014f1c:	461a      	mov	r2, r3
 8014f1e:	697b      	ldr	r3, [r7, #20]
 8014f20:	4293      	cmp	r3, r2
 8014f22:	d906      	bls.n	8014f32 <pbuf_copy+0xb2>
 8014f24:	4b38      	ldr	r3, [pc, #224]	; (8015008 <pbuf_copy+0x188>)
 8014f26:	f240 32d9 	movw	r2, #985	; 0x3d9
 8014f2a:	493a      	ldr	r1, [pc, #232]	; (8015014 <pbuf_copy+0x194>)
 8014f2c:	4838      	ldr	r0, [pc, #224]	; (8015010 <pbuf_copy+0x190>)
 8014f2e:	f009 f8c9 	bl	801e0c4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	895b      	ldrh	r3, [r3, #10]
 8014f36:	461a      	mov	r2, r3
 8014f38:	693b      	ldr	r3, [r7, #16]
 8014f3a:	4293      	cmp	r3, r2
 8014f3c:	d906      	bls.n	8014f4c <pbuf_copy+0xcc>
 8014f3e:	4b32      	ldr	r3, [pc, #200]	; (8015008 <pbuf_copy+0x188>)
 8014f40:	f240 32da 	movw	r2, #986	; 0x3da
 8014f44:	4934      	ldr	r1, [pc, #208]	; (8015018 <pbuf_copy+0x198>)
 8014f46:	4832      	ldr	r0, [pc, #200]	; (8015010 <pbuf_copy+0x190>)
 8014f48:	f009 f8bc 	bl	801e0c4 <iprintf>
    if (offset_from >= p_from->len) {
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	895b      	ldrh	r3, [r3, #10]
 8014f50:	461a      	mov	r2, r3
 8014f52:	693b      	ldr	r3, [r7, #16]
 8014f54:	4293      	cmp	r3, r2
 8014f56:	d304      	bcc.n	8014f62 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014f58:	2300      	movs	r3, #0
 8014f5a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	895b      	ldrh	r3, [r3, #10]
 8014f66:	461a      	mov	r2, r3
 8014f68:	697b      	ldr	r3, [r7, #20]
 8014f6a:	4293      	cmp	r3, r2
 8014f6c:	d114      	bne.n	8014f98 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014f6e:	2300      	movs	r3, #0
 8014f70:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d10c      	bne.n	8014f98 <pbuf_copy+0x118>
 8014f7e:	683b      	ldr	r3, [r7, #0]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d009      	beq.n	8014f98 <pbuf_copy+0x118>
 8014f84:	4b20      	ldr	r3, [pc, #128]	; (8015008 <pbuf_copy+0x188>)
 8014f86:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8014f8a:	4924      	ldr	r1, [pc, #144]	; (801501c <pbuf_copy+0x19c>)
 8014f8c:	4820      	ldr	r0, [pc, #128]	; (8015010 <pbuf_copy+0x190>)
 8014f8e:	f009 f899 	bl	801e0c4 <iprintf>
 8014f92:	f06f 030f 	mvn.w	r3, #15
 8014f96:	e032      	b.n	8014ffe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014f98:	683b      	ldr	r3, [r7, #0]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d013      	beq.n	8014fc6 <pbuf_copy+0x146>
 8014f9e:	683b      	ldr	r3, [r7, #0]
 8014fa0:	895a      	ldrh	r2, [r3, #10]
 8014fa2:	683b      	ldr	r3, [r7, #0]
 8014fa4:	891b      	ldrh	r3, [r3, #8]
 8014fa6:	429a      	cmp	r2, r3
 8014fa8:	d10d      	bne.n	8014fc6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014faa:	683b      	ldr	r3, [r7, #0]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d009      	beq.n	8014fc6 <pbuf_copy+0x146>
 8014fb2:	4b15      	ldr	r3, [pc, #84]	; (8015008 <pbuf_copy+0x188>)
 8014fb4:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8014fb8:	4919      	ldr	r1, [pc, #100]	; (8015020 <pbuf_copy+0x1a0>)
 8014fba:	4815      	ldr	r0, [pc, #84]	; (8015010 <pbuf_copy+0x190>)
 8014fbc:	f009 f882 	bl	801e0c4 <iprintf>
 8014fc0:	f06f 0305 	mvn.w	r3, #5
 8014fc4:	e01b      	b.n	8014ffe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d013      	beq.n	8014ff4 <pbuf_copy+0x174>
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	895a      	ldrh	r2, [r3, #10]
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	891b      	ldrh	r3, [r3, #8]
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	d10d      	bne.n	8014ff4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d009      	beq.n	8014ff4 <pbuf_copy+0x174>
 8014fe0:	4b09      	ldr	r3, [pc, #36]	; (8015008 <pbuf_copy+0x188>)
 8014fe2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8014fe6:	490e      	ldr	r1, [pc, #56]	; (8015020 <pbuf_copy+0x1a0>)
 8014fe8:	4809      	ldr	r0, [pc, #36]	; (8015010 <pbuf_copy+0x190>)
 8014fea:	f009 f86b 	bl	801e0c4 <iprintf>
 8014fee:	f06f 0305 	mvn.w	r3, #5
 8014ff2:	e004      	b.n	8014ffe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014ff4:	683b      	ldr	r3, [r7, #0]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	f47f af61 	bne.w	8014ebe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014ffc:	2300      	movs	r3, #0
}
 8014ffe:	4618      	mov	r0, r3
 8015000:	3718      	adds	r7, #24
 8015002:	46bd      	mov	sp, r7
 8015004:	bd80      	pop	{r7, pc}
 8015006:	bf00      	nop
 8015008:	0801f8bc 	.word	0x0801f8bc
 801500c:	0801fb64 	.word	0x0801fb64
 8015010:	0801f91c 	.word	0x0801f91c
 8015014:	0801fb94 	.word	0x0801fb94
 8015018:	0801fbac 	.word	0x0801fbac
 801501c:	0801fbc8 	.word	0x0801fbc8
 8015020:	0801fbd8 	.word	0x0801fbd8

08015024 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8015024:	b580      	push	{r7, lr}
 8015026:	b088      	sub	sp, #32
 8015028:	af00      	add	r7, sp, #0
 801502a:	60f8      	str	r0, [r7, #12]
 801502c:	60b9      	str	r1, [r7, #8]
 801502e:	4611      	mov	r1, r2
 8015030:	461a      	mov	r2, r3
 8015032:	460b      	mov	r3, r1
 8015034:	80fb      	strh	r3, [r7, #6]
 8015036:	4613      	mov	r3, r2
 8015038:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801503a:	2300      	movs	r3, #0
 801503c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801503e:	2300      	movs	r3, #0
 8015040:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d108      	bne.n	801505a <pbuf_copy_partial+0x36>
 8015048:	4b2b      	ldr	r3, [pc, #172]	; (80150f8 <pbuf_copy_partial+0xd4>)
 801504a:	f240 420a 	movw	r2, #1034	; 0x40a
 801504e:	492b      	ldr	r1, [pc, #172]	; (80150fc <pbuf_copy_partial+0xd8>)
 8015050:	482b      	ldr	r0, [pc, #172]	; (8015100 <pbuf_copy_partial+0xdc>)
 8015052:	f009 f837 	bl	801e0c4 <iprintf>
 8015056:	2300      	movs	r3, #0
 8015058:	e04a      	b.n	80150f0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801505a:	68bb      	ldr	r3, [r7, #8]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d108      	bne.n	8015072 <pbuf_copy_partial+0x4e>
 8015060:	4b25      	ldr	r3, [pc, #148]	; (80150f8 <pbuf_copy_partial+0xd4>)
 8015062:	f240 420b 	movw	r2, #1035	; 0x40b
 8015066:	4927      	ldr	r1, [pc, #156]	; (8015104 <pbuf_copy_partial+0xe0>)
 8015068:	4825      	ldr	r0, [pc, #148]	; (8015100 <pbuf_copy_partial+0xdc>)
 801506a:	f009 f82b 	bl	801e0c4 <iprintf>
 801506e:	2300      	movs	r3, #0
 8015070:	e03e      	b.n	80150f0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	61fb      	str	r3, [r7, #28]
 8015076:	e034      	b.n	80150e2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8015078:	88bb      	ldrh	r3, [r7, #4]
 801507a:	2b00      	cmp	r3, #0
 801507c:	d00a      	beq.n	8015094 <pbuf_copy_partial+0x70>
 801507e:	69fb      	ldr	r3, [r7, #28]
 8015080:	895b      	ldrh	r3, [r3, #10]
 8015082:	88ba      	ldrh	r2, [r7, #4]
 8015084:	429a      	cmp	r2, r3
 8015086:	d305      	bcc.n	8015094 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8015088:	69fb      	ldr	r3, [r7, #28]
 801508a:	895b      	ldrh	r3, [r3, #10]
 801508c:	88ba      	ldrh	r2, [r7, #4]
 801508e:	1ad3      	subs	r3, r2, r3
 8015090:	80bb      	strh	r3, [r7, #4]
 8015092:	e023      	b.n	80150dc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8015094:	69fb      	ldr	r3, [r7, #28]
 8015096:	895a      	ldrh	r2, [r3, #10]
 8015098:	88bb      	ldrh	r3, [r7, #4]
 801509a:	1ad3      	subs	r3, r2, r3
 801509c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801509e:	8b3a      	ldrh	r2, [r7, #24]
 80150a0:	88fb      	ldrh	r3, [r7, #6]
 80150a2:	429a      	cmp	r2, r3
 80150a4:	d901      	bls.n	80150aa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80150a6:	88fb      	ldrh	r3, [r7, #6]
 80150a8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80150aa:	8b7b      	ldrh	r3, [r7, #26]
 80150ac:	68ba      	ldr	r2, [r7, #8]
 80150ae:	18d0      	adds	r0, r2, r3
 80150b0:	69fb      	ldr	r3, [r7, #28]
 80150b2:	685a      	ldr	r2, [r3, #4]
 80150b4:	88bb      	ldrh	r3, [r7, #4]
 80150b6:	4413      	add	r3, r2
 80150b8:	8b3a      	ldrh	r2, [r7, #24]
 80150ba:	4619      	mov	r1, r3
 80150bc:	f008 ffef 	bl	801e09e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80150c0:	8afa      	ldrh	r2, [r7, #22]
 80150c2:	8b3b      	ldrh	r3, [r7, #24]
 80150c4:	4413      	add	r3, r2
 80150c6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80150c8:	8b7a      	ldrh	r2, [r7, #26]
 80150ca:	8b3b      	ldrh	r3, [r7, #24]
 80150cc:	4413      	add	r3, r2
 80150ce:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80150d0:	88fa      	ldrh	r2, [r7, #6]
 80150d2:	8b3b      	ldrh	r3, [r7, #24]
 80150d4:	1ad3      	subs	r3, r2, r3
 80150d6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80150d8:	2300      	movs	r3, #0
 80150da:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80150dc:	69fb      	ldr	r3, [r7, #28]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	61fb      	str	r3, [r7, #28]
 80150e2:	88fb      	ldrh	r3, [r7, #6]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d002      	beq.n	80150ee <pbuf_copy_partial+0xca>
 80150e8:	69fb      	ldr	r3, [r7, #28]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d1c4      	bne.n	8015078 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80150ee:	8afb      	ldrh	r3, [r7, #22]
}
 80150f0:	4618      	mov	r0, r3
 80150f2:	3720      	adds	r7, #32
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bd80      	pop	{r7, pc}
 80150f8:	0801f8bc 	.word	0x0801f8bc
 80150fc:	0801fc04 	.word	0x0801fc04
 8015100:	0801f91c 	.word	0x0801f91c
 8015104:	0801fc24 	.word	0x0801fc24

08015108 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b084      	sub	sp, #16
 801510c:	af00      	add	r7, sp, #0
 801510e:	4603      	mov	r3, r0
 8015110:	603a      	str	r2, [r7, #0]
 8015112:	71fb      	strb	r3, [r7, #7]
 8015114:	460b      	mov	r3, r1
 8015116:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8015118:	683b      	ldr	r3, [r7, #0]
 801511a:	8919      	ldrh	r1, [r3, #8]
 801511c:	88ba      	ldrh	r2, [r7, #4]
 801511e:	79fb      	ldrb	r3, [r7, #7]
 8015120:	4618      	mov	r0, r3
 8015122:	f7ff faa9 	bl	8014678 <pbuf_alloc>
 8015126:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d101      	bne.n	8015132 <pbuf_clone+0x2a>
    return NULL;
 801512e:	2300      	movs	r3, #0
 8015130:	e011      	b.n	8015156 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8015132:	6839      	ldr	r1, [r7, #0]
 8015134:	68f8      	ldr	r0, [r7, #12]
 8015136:	f7ff fea3 	bl	8014e80 <pbuf_copy>
 801513a:	4603      	mov	r3, r0
 801513c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801513e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d006      	beq.n	8015154 <pbuf_clone+0x4c>
 8015146:	4b06      	ldr	r3, [pc, #24]	; (8015160 <pbuf_clone+0x58>)
 8015148:	f240 5224 	movw	r2, #1316	; 0x524
 801514c:	4905      	ldr	r1, [pc, #20]	; (8015164 <pbuf_clone+0x5c>)
 801514e:	4806      	ldr	r0, [pc, #24]	; (8015168 <pbuf_clone+0x60>)
 8015150:	f008 ffb8 	bl	801e0c4 <iprintf>
  return q;
 8015154:	68fb      	ldr	r3, [r7, #12]
}
 8015156:	4618      	mov	r0, r3
 8015158:	3710      	adds	r7, #16
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}
 801515e:	bf00      	nop
 8015160:	0801f8bc 	.word	0x0801f8bc
 8015164:	0801fd30 	.word	0x0801fd30
 8015168:	0801f91c 	.word	0x0801f91c

0801516c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801516c:	b580      	push	{r7, lr}
 801516e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015170:	f008 ffc0 	bl	801e0f4 <rand>
 8015174:	4603      	mov	r3, r0
 8015176:	b29b      	uxth	r3, r3
 8015178:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801517c:	b29b      	uxth	r3, r3
 801517e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015182:	b29a      	uxth	r2, r3
 8015184:	4b01      	ldr	r3, [pc, #4]	; (801518c <tcp_init+0x20>)
 8015186:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015188:	bf00      	nop
 801518a:	bd80      	pop	{r7, pc}
 801518c:	20000050 	.word	0x20000050

08015190 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b082      	sub	sp, #8
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	7d1b      	ldrb	r3, [r3, #20]
 801519c:	2b01      	cmp	r3, #1
 801519e:	d105      	bne.n	80151ac <tcp_free+0x1c>
 80151a0:	4b06      	ldr	r3, [pc, #24]	; (80151bc <tcp_free+0x2c>)
 80151a2:	22d4      	movs	r2, #212	; 0xd4
 80151a4:	4906      	ldr	r1, [pc, #24]	; (80151c0 <tcp_free+0x30>)
 80151a6:	4807      	ldr	r0, [pc, #28]	; (80151c4 <tcp_free+0x34>)
 80151a8:	f008 ff8c 	bl	801e0c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80151ac:	6879      	ldr	r1, [r7, #4]
 80151ae:	2001      	movs	r0, #1
 80151b0:	f7fe fea2 	bl	8013ef8 <memp_free>
}
 80151b4:	bf00      	nop
 80151b6:	3708      	adds	r7, #8
 80151b8:	46bd      	mov	sp, r7
 80151ba:	bd80      	pop	{r7, pc}
 80151bc:	0801fdbc 	.word	0x0801fdbc
 80151c0:	0801fdec 	.word	0x0801fdec
 80151c4:	0801fe00 	.word	0x0801fe00

080151c8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80151c8:	b580      	push	{r7, lr}
 80151ca:	b082      	sub	sp, #8
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	7d1b      	ldrb	r3, [r3, #20]
 80151d4:	2b01      	cmp	r3, #1
 80151d6:	d105      	bne.n	80151e4 <tcp_free_listen+0x1c>
 80151d8:	4b06      	ldr	r3, [pc, #24]	; (80151f4 <tcp_free_listen+0x2c>)
 80151da:	22df      	movs	r2, #223	; 0xdf
 80151dc:	4906      	ldr	r1, [pc, #24]	; (80151f8 <tcp_free_listen+0x30>)
 80151de:	4807      	ldr	r0, [pc, #28]	; (80151fc <tcp_free_listen+0x34>)
 80151e0:	f008 ff70 	bl	801e0c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80151e4:	6879      	ldr	r1, [r7, #4]
 80151e6:	2002      	movs	r0, #2
 80151e8:	f7fe fe86 	bl	8013ef8 <memp_free>
}
 80151ec:	bf00      	nop
 80151ee:	3708      	adds	r7, #8
 80151f0:	46bd      	mov	sp, r7
 80151f2:	bd80      	pop	{r7, pc}
 80151f4:	0801fdbc 	.word	0x0801fdbc
 80151f8:	0801fe28 	.word	0x0801fe28
 80151fc:	0801fe00 	.word	0x0801fe00

08015200 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8015200:	b580      	push	{r7, lr}
 8015202:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8015204:	f001 f852 	bl	80162ac <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8015208:	4b07      	ldr	r3, [pc, #28]	; (8015228 <tcp_tmr+0x28>)
 801520a:	781b      	ldrb	r3, [r3, #0]
 801520c:	3301      	adds	r3, #1
 801520e:	b2da      	uxtb	r2, r3
 8015210:	4b05      	ldr	r3, [pc, #20]	; (8015228 <tcp_tmr+0x28>)
 8015212:	701a      	strb	r2, [r3, #0]
 8015214:	4b04      	ldr	r3, [pc, #16]	; (8015228 <tcp_tmr+0x28>)
 8015216:	781b      	ldrb	r3, [r3, #0]
 8015218:	f003 0301 	and.w	r3, r3, #1
 801521c:	2b00      	cmp	r3, #0
 801521e:	d001      	beq.n	8015224 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8015220:	f000 fd06 	bl	8015c30 <tcp_slowtmr>
  }
}
 8015224:	bf00      	nop
 8015226:	bd80      	pop	{r7, pc}
 8015228:	20004525 	.word	0x20004525

0801522c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801522c:	b580      	push	{r7, lr}
 801522e:	b084      	sub	sp, #16
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
 8015234:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8015236:	683b      	ldr	r3, [r7, #0]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d105      	bne.n	8015248 <tcp_remove_listener+0x1c>
 801523c:	4b0d      	ldr	r3, [pc, #52]	; (8015274 <tcp_remove_listener+0x48>)
 801523e:	22ff      	movs	r2, #255	; 0xff
 8015240:	490d      	ldr	r1, [pc, #52]	; (8015278 <tcp_remove_listener+0x4c>)
 8015242:	480e      	ldr	r0, [pc, #56]	; (801527c <tcp_remove_listener+0x50>)
 8015244:	f008 ff3e 	bl	801e0c4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	60fb      	str	r3, [r7, #12]
 801524c:	e00a      	b.n	8015264 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015252:	683a      	ldr	r2, [r7, #0]
 8015254:	429a      	cmp	r2, r3
 8015256:	d102      	bne.n	801525e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	2200      	movs	r2, #0
 801525c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	68db      	ldr	r3, [r3, #12]
 8015262:	60fb      	str	r3, [r7, #12]
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d1f1      	bne.n	801524e <tcp_remove_listener+0x22>
    }
  }
}
 801526a:	bf00      	nop
 801526c:	3710      	adds	r7, #16
 801526e:	46bd      	mov	sp, r7
 8015270:	bd80      	pop	{r7, pc}
 8015272:	bf00      	nop
 8015274:	0801fdbc 	.word	0x0801fdbc
 8015278:	0801fe44 	.word	0x0801fe44
 801527c:	0801fe00 	.word	0x0801fe00

08015280 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b084      	sub	sp, #16
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d106      	bne.n	801529c <tcp_listen_closed+0x1c>
 801528e:	4b14      	ldr	r3, [pc, #80]	; (80152e0 <tcp_listen_closed+0x60>)
 8015290:	f240 1211 	movw	r2, #273	; 0x111
 8015294:	4913      	ldr	r1, [pc, #76]	; (80152e4 <tcp_listen_closed+0x64>)
 8015296:	4814      	ldr	r0, [pc, #80]	; (80152e8 <tcp_listen_closed+0x68>)
 8015298:	f008 ff14 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	7d1b      	ldrb	r3, [r3, #20]
 80152a0:	2b01      	cmp	r3, #1
 80152a2:	d006      	beq.n	80152b2 <tcp_listen_closed+0x32>
 80152a4:	4b0e      	ldr	r3, [pc, #56]	; (80152e0 <tcp_listen_closed+0x60>)
 80152a6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80152aa:	4910      	ldr	r1, [pc, #64]	; (80152ec <tcp_listen_closed+0x6c>)
 80152ac:	480e      	ldr	r0, [pc, #56]	; (80152e8 <tcp_listen_closed+0x68>)
 80152ae:	f008 ff09 	bl	801e0c4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80152b2:	2301      	movs	r3, #1
 80152b4:	60fb      	str	r3, [r7, #12]
 80152b6:	e00b      	b.n	80152d0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80152b8:	4a0d      	ldr	r2, [pc, #52]	; (80152f0 <tcp_listen_closed+0x70>)
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	6879      	ldr	r1, [r7, #4]
 80152c4:	4618      	mov	r0, r3
 80152c6:	f7ff ffb1 	bl	801522c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	3301      	adds	r3, #1
 80152ce:	60fb      	str	r3, [r7, #12]
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	2b03      	cmp	r3, #3
 80152d4:	d9f0      	bls.n	80152b8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80152d6:	bf00      	nop
 80152d8:	3710      	adds	r7, #16
 80152da:	46bd      	mov	sp, r7
 80152dc:	bd80      	pop	{r7, pc}
 80152de:	bf00      	nop
 80152e0:	0801fdbc 	.word	0x0801fdbc
 80152e4:	0801fe6c 	.word	0x0801fe6c
 80152e8:	0801fe00 	.word	0x0801fe00
 80152ec:	0801fe78 	.word	0x0801fe78
 80152f0:	08032918 	.word	0x08032918

080152f4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80152f4:	b5b0      	push	{r4, r5, r7, lr}
 80152f6:	b088      	sub	sp, #32
 80152f8:	af04      	add	r7, sp, #16
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	460b      	mov	r3, r1
 80152fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d106      	bne.n	8015314 <tcp_close_shutdown+0x20>
 8015306:	4b61      	ldr	r3, [pc, #388]	; (801548c <tcp_close_shutdown+0x198>)
 8015308:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801530c:	4960      	ldr	r1, [pc, #384]	; (8015490 <tcp_close_shutdown+0x19c>)
 801530e:	4861      	ldr	r0, [pc, #388]	; (8015494 <tcp_close_shutdown+0x1a0>)
 8015310:	f008 fed8 	bl	801e0c4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8015314:	78fb      	ldrb	r3, [r7, #3]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d066      	beq.n	80153e8 <tcp_close_shutdown+0xf4>
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	7d1b      	ldrb	r3, [r3, #20]
 801531e:	2b04      	cmp	r3, #4
 8015320:	d003      	beq.n	801532a <tcp_close_shutdown+0x36>
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	7d1b      	ldrb	r3, [r3, #20]
 8015326:	2b07      	cmp	r3, #7
 8015328:	d15e      	bne.n	80153e8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801532e:	2b00      	cmp	r3, #0
 8015330:	d104      	bne.n	801533c <tcp_close_shutdown+0x48>
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015336:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801533a:	d055      	beq.n	80153e8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	8b5b      	ldrh	r3, [r3, #26]
 8015340:	f003 0310 	and.w	r3, r3, #16
 8015344:	2b00      	cmp	r3, #0
 8015346:	d106      	bne.n	8015356 <tcp_close_shutdown+0x62>
 8015348:	4b50      	ldr	r3, [pc, #320]	; (801548c <tcp_close_shutdown+0x198>)
 801534a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801534e:	4952      	ldr	r1, [pc, #328]	; (8015498 <tcp_close_shutdown+0x1a4>)
 8015350:	4850      	ldr	r0, [pc, #320]	; (8015494 <tcp_close_shutdown+0x1a0>)
 8015352:	f008 feb7 	bl	801e0c4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801535e:	687d      	ldr	r5, [r7, #4]
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	3304      	adds	r3, #4
 8015364:	687a      	ldr	r2, [r7, #4]
 8015366:	8ad2      	ldrh	r2, [r2, #22]
 8015368:	6879      	ldr	r1, [r7, #4]
 801536a:	8b09      	ldrh	r1, [r1, #24]
 801536c:	9102      	str	r1, [sp, #8]
 801536e:	9201      	str	r2, [sp, #4]
 8015370:	9300      	str	r3, [sp, #0]
 8015372:	462b      	mov	r3, r5
 8015374:	4622      	mov	r2, r4
 8015376:	4601      	mov	r1, r0
 8015378:	6878      	ldr	r0, [r7, #4]
 801537a:	f005 fd99 	bl	801aeb0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801537e:	6878      	ldr	r0, [r7, #4]
 8015380:	f001 fb68 	bl	8016a54 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8015384:	4b45      	ldr	r3, [pc, #276]	; (801549c <tcp_close_shutdown+0x1a8>)
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	687a      	ldr	r2, [r7, #4]
 801538a:	429a      	cmp	r2, r3
 801538c:	d105      	bne.n	801539a <tcp_close_shutdown+0xa6>
 801538e:	4b43      	ldr	r3, [pc, #268]	; (801549c <tcp_close_shutdown+0x1a8>)
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	68db      	ldr	r3, [r3, #12]
 8015394:	4a41      	ldr	r2, [pc, #260]	; (801549c <tcp_close_shutdown+0x1a8>)
 8015396:	6013      	str	r3, [r2, #0]
 8015398:	e013      	b.n	80153c2 <tcp_close_shutdown+0xce>
 801539a:	4b40      	ldr	r3, [pc, #256]	; (801549c <tcp_close_shutdown+0x1a8>)
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	60fb      	str	r3, [r7, #12]
 80153a0:	e00c      	b.n	80153bc <tcp_close_shutdown+0xc8>
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	68db      	ldr	r3, [r3, #12]
 80153a6:	687a      	ldr	r2, [r7, #4]
 80153a8:	429a      	cmp	r2, r3
 80153aa:	d104      	bne.n	80153b6 <tcp_close_shutdown+0xc2>
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	68da      	ldr	r2, [r3, #12]
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	60da      	str	r2, [r3, #12]
 80153b4:	e005      	b.n	80153c2 <tcp_close_shutdown+0xce>
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	68db      	ldr	r3, [r3, #12]
 80153ba:	60fb      	str	r3, [r7, #12]
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d1ef      	bne.n	80153a2 <tcp_close_shutdown+0xae>
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	2200      	movs	r2, #0
 80153c6:	60da      	str	r2, [r3, #12]
 80153c8:	4b35      	ldr	r3, [pc, #212]	; (80154a0 <tcp_close_shutdown+0x1ac>)
 80153ca:	2201      	movs	r2, #1
 80153cc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80153ce:	4b35      	ldr	r3, [pc, #212]	; (80154a4 <tcp_close_shutdown+0x1b0>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	687a      	ldr	r2, [r7, #4]
 80153d4:	429a      	cmp	r2, r3
 80153d6:	d102      	bne.n	80153de <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80153d8:	f003 fffa 	bl	80193d0 <tcp_trigger_input_pcb_close>
 80153dc:	e002      	b.n	80153e4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80153de:	6878      	ldr	r0, [r7, #4]
 80153e0:	f7ff fed6 	bl	8015190 <tcp_free>
      }
      return ERR_OK;
 80153e4:	2300      	movs	r3, #0
 80153e6:	e04d      	b.n	8015484 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	7d1b      	ldrb	r3, [r3, #20]
 80153ec:	2b01      	cmp	r3, #1
 80153ee:	d02d      	beq.n	801544c <tcp_close_shutdown+0x158>
 80153f0:	2b02      	cmp	r3, #2
 80153f2:	d036      	beq.n	8015462 <tcp_close_shutdown+0x16e>
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d13f      	bne.n	8015478 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	8adb      	ldrh	r3, [r3, #22]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d021      	beq.n	8015444 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015400:	4b29      	ldr	r3, [pc, #164]	; (80154a8 <tcp_close_shutdown+0x1b4>)
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	687a      	ldr	r2, [r7, #4]
 8015406:	429a      	cmp	r2, r3
 8015408:	d105      	bne.n	8015416 <tcp_close_shutdown+0x122>
 801540a:	4b27      	ldr	r3, [pc, #156]	; (80154a8 <tcp_close_shutdown+0x1b4>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	68db      	ldr	r3, [r3, #12]
 8015410:	4a25      	ldr	r2, [pc, #148]	; (80154a8 <tcp_close_shutdown+0x1b4>)
 8015412:	6013      	str	r3, [r2, #0]
 8015414:	e013      	b.n	801543e <tcp_close_shutdown+0x14a>
 8015416:	4b24      	ldr	r3, [pc, #144]	; (80154a8 <tcp_close_shutdown+0x1b4>)
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	60bb      	str	r3, [r7, #8]
 801541c:	e00c      	b.n	8015438 <tcp_close_shutdown+0x144>
 801541e:	68bb      	ldr	r3, [r7, #8]
 8015420:	68db      	ldr	r3, [r3, #12]
 8015422:	687a      	ldr	r2, [r7, #4]
 8015424:	429a      	cmp	r2, r3
 8015426:	d104      	bne.n	8015432 <tcp_close_shutdown+0x13e>
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	68da      	ldr	r2, [r3, #12]
 801542c:	68bb      	ldr	r3, [r7, #8]
 801542e:	60da      	str	r2, [r3, #12]
 8015430:	e005      	b.n	801543e <tcp_close_shutdown+0x14a>
 8015432:	68bb      	ldr	r3, [r7, #8]
 8015434:	68db      	ldr	r3, [r3, #12]
 8015436:	60bb      	str	r3, [r7, #8]
 8015438:	68bb      	ldr	r3, [r7, #8]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d1ef      	bne.n	801541e <tcp_close_shutdown+0x12a>
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	2200      	movs	r2, #0
 8015442:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	f7ff fea3 	bl	8015190 <tcp_free>
      break;
 801544a:	e01a      	b.n	8015482 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 801544c:	6878      	ldr	r0, [r7, #4]
 801544e:	f7ff ff17 	bl	8015280 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8015452:	6879      	ldr	r1, [r7, #4]
 8015454:	4815      	ldr	r0, [pc, #84]	; (80154ac <tcp_close_shutdown+0x1b8>)
 8015456:	f001 fb4d 	bl	8016af4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801545a:	6878      	ldr	r0, [r7, #4]
 801545c:	f7ff feb4 	bl	80151c8 <tcp_free_listen>
      break;
 8015460:	e00f      	b.n	8015482 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015462:	6879      	ldr	r1, [r7, #4]
 8015464:	480d      	ldr	r0, [pc, #52]	; (801549c <tcp_close_shutdown+0x1a8>)
 8015466:	f001 fb45 	bl	8016af4 <tcp_pcb_remove>
 801546a:	4b0d      	ldr	r3, [pc, #52]	; (80154a0 <tcp_close_shutdown+0x1ac>)
 801546c:	2201      	movs	r2, #1
 801546e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8015470:	6878      	ldr	r0, [r7, #4]
 8015472:	f7ff fe8d 	bl	8015190 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8015476:	e004      	b.n	8015482 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8015478:	6878      	ldr	r0, [r7, #4]
 801547a:	f000 f819 	bl	80154b0 <tcp_close_shutdown_fin>
 801547e:	4603      	mov	r3, r0
 8015480:	e000      	b.n	8015484 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8015482:	2300      	movs	r3, #0
}
 8015484:	4618      	mov	r0, r3
 8015486:	3710      	adds	r7, #16
 8015488:	46bd      	mov	sp, r7
 801548a:	bdb0      	pop	{r4, r5, r7, pc}
 801548c:	0801fdbc 	.word	0x0801fdbc
 8015490:	0801fe90 	.word	0x0801fe90
 8015494:	0801fe00 	.word	0x0801fe00
 8015498:	0801feb0 	.word	0x0801feb0
 801549c:	2000b508 	.word	0x2000b508
 80154a0:	2000b504 	.word	0x2000b504
 80154a4:	2000b51c 	.word	0x2000b51c
 80154a8:	2000b514 	.word	0x2000b514
 80154ac:	2000b510 	.word	0x2000b510

080154b0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b084      	sub	sp, #16
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d106      	bne.n	80154cc <tcp_close_shutdown_fin+0x1c>
 80154be:	4b2c      	ldr	r3, [pc, #176]	; (8015570 <tcp_close_shutdown_fin+0xc0>)
 80154c0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80154c4:	492b      	ldr	r1, [pc, #172]	; (8015574 <tcp_close_shutdown_fin+0xc4>)
 80154c6:	482c      	ldr	r0, [pc, #176]	; (8015578 <tcp_close_shutdown_fin+0xc8>)
 80154c8:	f008 fdfc 	bl	801e0c4 <iprintf>

  switch (pcb->state) {
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	7d1b      	ldrb	r3, [r3, #20]
 80154d0:	2b04      	cmp	r3, #4
 80154d2:	d010      	beq.n	80154f6 <tcp_close_shutdown_fin+0x46>
 80154d4:	2b07      	cmp	r3, #7
 80154d6:	d01b      	beq.n	8015510 <tcp_close_shutdown_fin+0x60>
 80154d8:	2b03      	cmp	r3, #3
 80154da:	d126      	bne.n	801552a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80154dc:	6878      	ldr	r0, [r7, #4]
 80154de:	f004 fde3 	bl	801a0a8 <tcp_send_fin>
 80154e2:	4603      	mov	r3, r0
 80154e4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80154e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d11f      	bne.n	801552e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	2205      	movs	r2, #5
 80154f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80154f4:	e01b      	b.n	801552e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80154f6:	6878      	ldr	r0, [r7, #4]
 80154f8:	f004 fdd6 	bl	801a0a8 <tcp_send_fin>
 80154fc:	4603      	mov	r3, r0
 80154fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d114      	bne.n	8015532 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	2205      	movs	r2, #5
 801550c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801550e:	e010      	b.n	8015532 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8015510:	6878      	ldr	r0, [r7, #4]
 8015512:	f004 fdc9 	bl	801a0a8 <tcp_send_fin>
 8015516:	4603      	mov	r3, r0
 8015518:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801551a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d109      	bne.n	8015536 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	2209      	movs	r2, #9
 8015526:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015528:	e005      	b.n	8015536 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801552a:	2300      	movs	r3, #0
 801552c:	e01c      	b.n	8015568 <tcp_close_shutdown_fin+0xb8>
      break;
 801552e:	bf00      	nop
 8015530:	e002      	b.n	8015538 <tcp_close_shutdown_fin+0x88>
      break;
 8015532:	bf00      	nop
 8015534:	e000      	b.n	8015538 <tcp_close_shutdown_fin+0x88>
      break;
 8015536:	bf00      	nop
  }

  if (err == ERR_OK) {
 8015538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d103      	bne.n	8015548 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8015540:	6878      	ldr	r0, [r7, #4]
 8015542:	f004 feef 	bl	801a324 <tcp_output>
 8015546:	e00d      	b.n	8015564 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8015548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801554c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015550:	d108      	bne.n	8015564 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	8b5b      	ldrh	r3, [r3, #26]
 8015556:	f043 0308 	orr.w	r3, r3, #8
 801555a:	b29a      	uxth	r2, r3
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8015560:	2300      	movs	r3, #0
 8015562:	e001      	b.n	8015568 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8015564:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015568:	4618      	mov	r0, r3
 801556a:	3710      	adds	r7, #16
 801556c:	46bd      	mov	sp, r7
 801556e:	bd80      	pop	{r7, pc}
 8015570:	0801fdbc 	.word	0x0801fdbc
 8015574:	0801fe6c 	.word	0x0801fe6c
 8015578:	0801fe00 	.word	0x0801fe00

0801557c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b082      	sub	sp, #8
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d109      	bne.n	801559e <tcp_close+0x22>
 801558a:	4b0f      	ldr	r3, [pc, #60]	; (80155c8 <tcp_close+0x4c>)
 801558c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8015590:	490e      	ldr	r1, [pc, #56]	; (80155cc <tcp_close+0x50>)
 8015592:	480f      	ldr	r0, [pc, #60]	; (80155d0 <tcp_close+0x54>)
 8015594:	f008 fd96 	bl	801e0c4 <iprintf>
 8015598:	f06f 030f 	mvn.w	r3, #15
 801559c:	e00f      	b.n	80155be <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	7d1b      	ldrb	r3, [r3, #20]
 80155a2:	2b01      	cmp	r3, #1
 80155a4:	d006      	beq.n	80155b4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	8b5b      	ldrh	r3, [r3, #26]
 80155aa:	f043 0310 	orr.w	r3, r3, #16
 80155ae:	b29a      	uxth	r2, r3
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80155b4:	2101      	movs	r1, #1
 80155b6:	6878      	ldr	r0, [r7, #4]
 80155b8:	f7ff fe9c 	bl	80152f4 <tcp_close_shutdown>
 80155bc:	4603      	mov	r3, r0
}
 80155be:	4618      	mov	r0, r3
 80155c0:	3708      	adds	r7, #8
 80155c2:	46bd      	mov	sp, r7
 80155c4:	bd80      	pop	{r7, pc}
 80155c6:	bf00      	nop
 80155c8:	0801fdbc 	.word	0x0801fdbc
 80155cc:	0801fecc 	.word	0x0801fecc
 80155d0:	0801fe00 	.word	0x0801fe00

080155d4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80155d4:	b580      	push	{r7, lr}
 80155d6:	b08e      	sub	sp, #56	; 0x38
 80155d8:	af04      	add	r7, sp, #16
 80155da:	6078      	str	r0, [r7, #4]
 80155dc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d107      	bne.n	80155f4 <tcp_abandon+0x20>
 80155e4:	4b52      	ldr	r3, [pc, #328]	; (8015730 <tcp_abandon+0x15c>)
 80155e6:	f240 223d 	movw	r2, #573	; 0x23d
 80155ea:	4952      	ldr	r1, [pc, #328]	; (8015734 <tcp_abandon+0x160>)
 80155ec:	4852      	ldr	r0, [pc, #328]	; (8015738 <tcp_abandon+0x164>)
 80155ee:	f008 fd69 	bl	801e0c4 <iprintf>
 80155f2:	e099      	b.n	8015728 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	7d1b      	ldrb	r3, [r3, #20]
 80155f8:	2b01      	cmp	r3, #1
 80155fa:	d106      	bne.n	801560a <tcp_abandon+0x36>
 80155fc:	4b4c      	ldr	r3, [pc, #304]	; (8015730 <tcp_abandon+0x15c>)
 80155fe:	f240 2241 	movw	r2, #577	; 0x241
 8015602:	494e      	ldr	r1, [pc, #312]	; (801573c <tcp_abandon+0x168>)
 8015604:	484c      	ldr	r0, [pc, #304]	; (8015738 <tcp_abandon+0x164>)
 8015606:	f008 fd5d 	bl	801e0c4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	7d1b      	ldrb	r3, [r3, #20]
 801560e:	2b0a      	cmp	r3, #10
 8015610:	d107      	bne.n	8015622 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8015612:	6879      	ldr	r1, [r7, #4]
 8015614:	484a      	ldr	r0, [pc, #296]	; (8015740 <tcp_abandon+0x16c>)
 8015616:	f001 fa6d 	bl	8016af4 <tcp_pcb_remove>
    tcp_free(pcb);
 801561a:	6878      	ldr	r0, [r7, #4]
 801561c:	f7ff fdb8 	bl	8015190 <tcp_free>
 8015620:	e082      	b.n	8015728 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8015622:	2300      	movs	r3, #0
 8015624:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8015626:	2300      	movs	r3, #0
 8015628:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801562e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015634:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801563c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	691b      	ldr	r3, [r3, #16]
 8015642:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	7d1b      	ldrb	r3, [r3, #20]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d126      	bne.n	801569a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	8adb      	ldrh	r3, [r3, #22]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d02e      	beq.n	80156b2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015654:	4b3b      	ldr	r3, [pc, #236]	; (8015744 <tcp_abandon+0x170>)
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	687a      	ldr	r2, [r7, #4]
 801565a:	429a      	cmp	r2, r3
 801565c:	d105      	bne.n	801566a <tcp_abandon+0x96>
 801565e:	4b39      	ldr	r3, [pc, #228]	; (8015744 <tcp_abandon+0x170>)
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	68db      	ldr	r3, [r3, #12]
 8015664:	4a37      	ldr	r2, [pc, #220]	; (8015744 <tcp_abandon+0x170>)
 8015666:	6013      	str	r3, [r2, #0]
 8015668:	e013      	b.n	8015692 <tcp_abandon+0xbe>
 801566a:	4b36      	ldr	r3, [pc, #216]	; (8015744 <tcp_abandon+0x170>)
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	61fb      	str	r3, [r7, #28]
 8015670:	e00c      	b.n	801568c <tcp_abandon+0xb8>
 8015672:	69fb      	ldr	r3, [r7, #28]
 8015674:	68db      	ldr	r3, [r3, #12]
 8015676:	687a      	ldr	r2, [r7, #4]
 8015678:	429a      	cmp	r2, r3
 801567a:	d104      	bne.n	8015686 <tcp_abandon+0xb2>
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	68da      	ldr	r2, [r3, #12]
 8015680:	69fb      	ldr	r3, [r7, #28]
 8015682:	60da      	str	r2, [r3, #12]
 8015684:	e005      	b.n	8015692 <tcp_abandon+0xbe>
 8015686:	69fb      	ldr	r3, [r7, #28]
 8015688:	68db      	ldr	r3, [r3, #12]
 801568a:	61fb      	str	r3, [r7, #28]
 801568c:	69fb      	ldr	r3, [r7, #28]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d1ef      	bne.n	8015672 <tcp_abandon+0x9e>
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	2200      	movs	r2, #0
 8015696:	60da      	str	r2, [r3, #12]
 8015698:	e00b      	b.n	80156b2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801569a:	683b      	ldr	r3, [r7, #0]
 801569c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	8adb      	ldrh	r3, [r3, #22]
 80156a2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80156a4:	6879      	ldr	r1, [r7, #4]
 80156a6:	4828      	ldr	r0, [pc, #160]	; (8015748 <tcp_abandon+0x174>)
 80156a8:	f001 fa24 	bl	8016af4 <tcp_pcb_remove>
 80156ac:	4b27      	ldr	r3, [pc, #156]	; (801574c <tcp_abandon+0x178>)
 80156ae:	2201      	movs	r2, #1
 80156b0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d004      	beq.n	80156c4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156be:	4618      	mov	r0, r3
 80156c0:	f000 fed4 	bl	801646c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d004      	beq.n	80156d6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156d0:	4618      	mov	r0, r3
 80156d2:	f000 fecb 	bl	801646c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d004      	beq.n	80156e8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156e2:	4618      	mov	r0, r3
 80156e4:	f000 fec2 	bl	801646c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80156e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d00e      	beq.n	801570c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80156ee:	6879      	ldr	r1, [r7, #4]
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	3304      	adds	r3, #4
 80156f4:	687a      	ldr	r2, [r7, #4]
 80156f6:	8b12      	ldrh	r2, [r2, #24]
 80156f8:	9202      	str	r2, [sp, #8]
 80156fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80156fc:	9201      	str	r2, [sp, #4]
 80156fe:	9300      	str	r3, [sp, #0]
 8015700:	460b      	mov	r3, r1
 8015702:	697a      	ldr	r2, [r7, #20]
 8015704:	69b9      	ldr	r1, [r7, #24]
 8015706:	6878      	ldr	r0, [r7, #4]
 8015708:	f005 fbd2 	bl	801aeb0 <tcp_rst>
    }
    last_state = pcb->state;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	7d1b      	ldrb	r3, [r3, #20]
 8015710:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8015712:	6878      	ldr	r0, [r7, #4]
 8015714:	f7ff fd3c 	bl	8015190 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8015718:	693b      	ldr	r3, [r7, #16]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d004      	beq.n	8015728 <tcp_abandon+0x154>
 801571e:	693b      	ldr	r3, [r7, #16]
 8015720:	f06f 010c 	mvn.w	r1, #12
 8015724:	68f8      	ldr	r0, [r7, #12]
 8015726:	4798      	blx	r3
  }
}
 8015728:	3728      	adds	r7, #40	; 0x28
 801572a:	46bd      	mov	sp, r7
 801572c:	bd80      	pop	{r7, pc}
 801572e:	bf00      	nop
 8015730:	0801fdbc 	.word	0x0801fdbc
 8015734:	0801ff00 	.word	0x0801ff00
 8015738:	0801fe00 	.word	0x0801fe00
 801573c:	0801ff1c 	.word	0x0801ff1c
 8015740:	2000b518 	.word	0x2000b518
 8015744:	2000b514 	.word	0x2000b514
 8015748:	2000b508 	.word	0x2000b508
 801574c:	2000b504 	.word	0x2000b504

08015750 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b082      	sub	sp, #8
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8015758:	2101      	movs	r1, #1
 801575a:	6878      	ldr	r0, [r7, #4]
 801575c:	f7ff ff3a 	bl	80155d4 <tcp_abandon>
}
 8015760:	bf00      	nop
 8015762:	3708      	adds	r7, #8
 8015764:	46bd      	mov	sp, r7
 8015766:	bd80      	pop	{r7, pc}

08015768 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b088      	sub	sp, #32
 801576c:	af00      	add	r7, sp, #0
 801576e:	60f8      	str	r0, [r7, #12]
 8015770:	60b9      	str	r1, [r7, #8]
 8015772:	4613      	mov	r3, r2
 8015774:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8015776:	2304      	movs	r3, #4
 8015778:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801577a:	68bb      	ldr	r3, [r7, #8]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d101      	bne.n	8015784 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8015780:	4b3e      	ldr	r3, [pc, #248]	; (801587c <tcp_bind+0x114>)
 8015782:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d109      	bne.n	801579e <tcp_bind+0x36>
 801578a:	4b3d      	ldr	r3, [pc, #244]	; (8015880 <tcp_bind+0x118>)
 801578c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8015790:	493c      	ldr	r1, [pc, #240]	; (8015884 <tcp_bind+0x11c>)
 8015792:	483d      	ldr	r0, [pc, #244]	; (8015888 <tcp_bind+0x120>)
 8015794:	f008 fc96 	bl	801e0c4 <iprintf>
 8015798:	f06f 030f 	mvn.w	r3, #15
 801579c:	e06a      	b.n	8015874 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	7d1b      	ldrb	r3, [r3, #20]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d009      	beq.n	80157ba <tcp_bind+0x52>
 80157a6:	4b36      	ldr	r3, [pc, #216]	; (8015880 <tcp_bind+0x118>)
 80157a8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80157ac:	4937      	ldr	r1, [pc, #220]	; (801588c <tcp_bind+0x124>)
 80157ae:	4836      	ldr	r0, [pc, #216]	; (8015888 <tcp_bind+0x120>)
 80157b0:	f008 fc88 	bl	801e0c4 <iprintf>
 80157b4:	f06f 0305 	mvn.w	r3, #5
 80157b8:	e05c      	b.n	8015874 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80157ba:	88fb      	ldrh	r3, [r7, #6]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d109      	bne.n	80157d4 <tcp_bind+0x6c>
    port = tcp_new_port();
 80157c0:	f000 f9f0 	bl	8015ba4 <tcp_new_port>
 80157c4:	4603      	mov	r3, r0
 80157c6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80157c8:	88fb      	ldrh	r3, [r7, #6]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d135      	bne.n	801583a <tcp_bind+0xd2>
      return ERR_BUF;
 80157ce:	f06f 0301 	mvn.w	r3, #1
 80157d2:	e04f      	b.n	8015874 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80157d4:	2300      	movs	r3, #0
 80157d6:	61fb      	str	r3, [r7, #28]
 80157d8:	e02b      	b.n	8015832 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80157da:	4a2d      	ldr	r2, [pc, #180]	; (8015890 <tcp_bind+0x128>)
 80157dc:	69fb      	ldr	r3, [r7, #28]
 80157de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	61bb      	str	r3, [r7, #24]
 80157e6:	e01e      	b.n	8015826 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80157e8:	69bb      	ldr	r3, [r7, #24]
 80157ea:	8adb      	ldrh	r3, [r3, #22]
 80157ec:	88fa      	ldrh	r2, [r7, #6]
 80157ee:	429a      	cmp	r2, r3
 80157f0:	d116      	bne.n	8015820 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80157f2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d010      	beq.n	801581a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80157f8:	69bb      	ldr	r3, [r7, #24]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d00c      	beq.n	801581a <tcp_bind+0xb2>
 8015800:	68bb      	ldr	r3, [r7, #8]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d009      	beq.n	801581a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8015806:	68bb      	ldr	r3, [r7, #8]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d005      	beq.n	801581a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801580e:	69bb      	ldr	r3, [r7, #24]
 8015810:	681a      	ldr	r2, [r3, #0]
 8015812:	68bb      	ldr	r3, [r7, #8]
 8015814:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015816:	429a      	cmp	r2, r3
 8015818:	d102      	bne.n	8015820 <tcp_bind+0xb8>
              return ERR_USE;
 801581a:	f06f 0307 	mvn.w	r3, #7
 801581e:	e029      	b.n	8015874 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015820:	69bb      	ldr	r3, [r7, #24]
 8015822:	68db      	ldr	r3, [r3, #12]
 8015824:	61bb      	str	r3, [r7, #24]
 8015826:	69bb      	ldr	r3, [r7, #24]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d1dd      	bne.n	80157e8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801582c:	69fb      	ldr	r3, [r7, #28]
 801582e:	3301      	adds	r3, #1
 8015830:	61fb      	str	r3, [r7, #28]
 8015832:	69fa      	ldr	r2, [r7, #28]
 8015834:	697b      	ldr	r3, [r7, #20]
 8015836:	429a      	cmp	r2, r3
 8015838:	dbcf      	blt.n	80157da <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801583a:	68bb      	ldr	r3, [r7, #8]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d00c      	beq.n	801585a <tcp_bind+0xf2>
 8015840:	68bb      	ldr	r3, [r7, #8]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d008      	beq.n	801585a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8015848:	68bb      	ldr	r3, [r7, #8]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d002      	beq.n	8015854 <tcp_bind+0xec>
 801584e:	68bb      	ldr	r3, [r7, #8]
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	e000      	b.n	8015856 <tcp_bind+0xee>
 8015854:	2300      	movs	r3, #0
 8015856:	68fa      	ldr	r2, [r7, #12]
 8015858:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	88fa      	ldrh	r2, [r7, #6]
 801585e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8015860:	4b0c      	ldr	r3, [pc, #48]	; (8015894 <tcp_bind+0x12c>)
 8015862:	681a      	ldr	r2, [r3, #0]
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	60da      	str	r2, [r3, #12]
 8015868:	4a0a      	ldr	r2, [pc, #40]	; (8015894 <tcp_bind+0x12c>)
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	6013      	str	r3, [r2, #0]
 801586e:	f005 fce1 	bl	801b234 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8015872:	2300      	movs	r3, #0
}
 8015874:	4618      	mov	r0, r3
 8015876:	3720      	adds	r7, #32
 8015878:	46bd      	mov	sp, r7
 801587a:	bd80      	pop	{r7, pc}
 801587c:	08032940 	.word	0x08032940
 8015880:	0801fdbc 	.word	0x0801fdbc
 8015884:	0801ff50 	.word	0x0801ff50
 8015888:	0801fe00 	.word	0x0801fe00
 801588c:	0801ff68 	.word	0x0801ff68
 8015890:	08032918 	.word	0x08032918
 8015894:	2000b514 	.word	0x2000b514

08015898 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b084      	sub	sp, #16
 801589c:	af00      	add	r7, sp, #0
 801589e:	60f8      	str	r0, [r7, #12]
 80158a0:	60b9      	str	r1, [r7, #8]
 80158a2:	4613      	mov	r3, r2
 80158a4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80158a6:	68bb      	ldr	r3, [r7, #8]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d106      	bne.n	80158ba <tcp_accept_null+0x22>
 80158ac:	4b07      	ldr	r3, [pc, #28]	; (80158cc <tcp_accept_null+0x34>)
 80158ae:	f240 320f 	movw	r2, #783	; 0x30f
 80158b2:	4907      	ldr	r1, [pc, #28]	; (80158d0 <tcp_accept_null+0x38>)
 80158b4:	4807      	ldr	r0, [pc, #28]	; (80158d4 <tcp_accept_null+0x3c>)
 80158b6:	f008 fc05 	bl	801e0c4 <iprintf>

  tcp_abort(pcb);
 80158ba:	68b8      	ldr	r0, [r7, #8]
 80158bc:	f7ff ff48 	bl	8015750 <tcp_abort>

  return ERR_ABRT;
 80158c0:	f06f 030c 	mvn.w	r3, #12
}
 80158c4:	4618      	mov	r0, r3
 80158c6:	3710      	adds	r7, #16
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}
 80158cc:	0801fdbc 	.word	0x0801fdbc
 80158d0:	0801ff90 	.word	0x0801ff90
 80158d4:	0801fe00 	.word	0x0801fe00

080158d8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b082      	sub	sp, #8
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
 80158e0:	460b      	mov	r3, r1
 80158e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80158e4:	78fb      	ldrb	r3, [r7, #3]
 80158e6:	2200      	movs	r2, #0
 80158e8:	4619      	mov	r1, r3
 80158ea:	6878      	ldr	r0, [r7, #4]
 80158ec:	f000 f806 	bl	80158fc <tcp_listen_with_backlog_and_err>
 80158f0:	4603      	mov	r3, r0
}
 80158f2:	4618      	mov	r0, r3
 80158f4:	3708      	adds	r7, #8
 80158f6:	46bd      	mov	sp, r7
 80158f8:	bd80      	pop	{r7, pc}
	...

080158fc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b088      	sub	sp, #32
 8015900:	af00      	add	r7, sp, #0
 8015902:	60f8      	str	r0, [r7, #12]
 8015904:	460b      	mov	r3, r1
 8015906:	607a      	str	r2, [r7, #4]
 8015908:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801590a:	2300      	movs	r3, #0
 801590c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d109      	bne.n	8015928 <tcp_listen_with_backlog_and_err+0x2c>
 8015914:	4b47      	ldr	r3, [pc, #284]	; (8015a34 <tcp_listen_with_backlog_and_err+0x138>)
 8015916:	f240 3259 	movw	r2, #857	; 0x359
 801591a:	4947      	ldr	r1, [pc, #284]	; (8015a38 <tcp_listen_with_backlog_and_err+0x13c>)
 801591c:	4847      	ldr	r0, [pc, #284]	; (8015a3c <tcp_listen_with_backlog_and_err+0x140>)
 801591e:	f008 fbd1 	bl	801e0c4 <iprintf>
 8015922:	23f0      	movs	r3, #240	; 0xf0
 8015924:	76fb      	strb	r3, [r7, #27]
 8015926:	e079      	b.n	8015a1c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	7d1b      	ldrb	r3, [r3, #20]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d009      	beq.n	8015944 <tcp_listen_with_backlog_and_err+0x48>
 8015930:	4b40      	ldr	r3, [pc, #256]	; (8015a34 <tcp_listen_with_backlog_and_err+0x138>)
 8015932:	f240 325a 	movw	r2, #858	; 0x35a
 8015936:	4942      	ldr	r1, [pc, #264]	; (8015a40 <tcp_listen_with_backlog_and_err+0x144>)
 8015938:	4840      	ldr	r0, [pc, #256]	; (8015a3c <tcp_listen_with_backlog_and_err+0x140>)
 801593a:	f008 fbc3 	bl	801e0c4 <iprintf>
 801593e:	23f1      	movs	r3, #241	; 0xf1
 8015940:	76fb      	strb	r3, [r7, #27]
 8015942:	e06b      	b.n	8015a1c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	7d1b      	ldrb	r3, [r3, #20]
 8015948:	2b01      	cmp	r3, #1
 801594a:	d104      	bne.n	8015956 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8015950:	23f7      	movs	r3, #247	; 0xf7
 8015952:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015954:	e062      	b.n	8015a1c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8015956:	2002      	movs	r0, #2
 8015958:	f7fe fa7c 	bl	8013e54 <memp_malloc>
 801595c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801595e:	69fb      	ldr	r3, [r7, #28]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d102      	bne.n	801596a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8015964:	23ff      	movs	r3, #255	; 0xff
 8015966:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015968:	e058      	b.n	8015a1c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	691a      	ldr	r2, [r3, #16]
 801596e:	69fb      	ldr	r3, [r7, #28]
 8015970:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	8ada      	ldrh	r2, [r3, #22]
 8015976:	69fb      	ldr	r3, [r7, #28]
 8015978:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801597a:	69fb      	ldr	r3, [r7, #28]
 801597c:	2201      	movs	r2, #1
 801597e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	7d5a      	ldrb	r2, [r3, #21]
 8015984:	69fb      	ldr	r3, [r7, #28]
 8015986:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	7a5a      	ldrb	r2, [r3, #9]
 801598c:	69fb      	ldr	r3, [r7, #28]
 801598e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8015990:	69fb      	ldr	r3, [r7, #28]
 8015992:	2200      	movs	r2, #0
 8015994:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	7ada      	ldrb	r2, [r3, #11]
 801599a:	69fb      	ldr	r3, [r7, #28]
 801599c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	7a9a      	ldrb	r2, [r3, #10]
 80159a2:	69fb      	ldr	r3, [r7, #28]
 80159a4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	681a      	ldr	r2, [r3, #0]
 80159aa:	69fb      	ldr	r3, [r7, #28]
 80159ac:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	8adb      	ldrh	r3, [r3, #22]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d021      	beq.n	80159fa <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80159b6:	4b23      	ldr	r3, [pc, #140]	; (8015a44 <tcp_listen_with_backlog_and_err+0x148>)
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	68fa      	ldr	r2, [r7, #12]
 80159bc:	429a      	cmp	r2, r3
 80159be:	d105      	bne.n	80159cc <tcp_listen_with_backlog_and_err+0xd0>
 80159c0:	4b20      	ldr	r3, [pc, #128]	; (8015a44 <tcp_listen_with_backlog_and_err+0x148>)
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	68db      	ldr	r3, [r3, #12]
 80159c6:	4a1f      	ldr	r2, [pc, #124]	; (8015a44 <tcp_listen_with_backlog_and_err+0x148>)
 80159c8:	6013      	str	r3, [r2, #0]
 80159ca:	e013      	b.n	80159f4 <tcp_listen_with_backlog_and_err+0xf8>
 80159cc:	4b1d      	ldr	r3, [pc, #116]	; (8015a44 <tcp_listen_with_backlog_and_err+0x148>)
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	617b      	str	r3, [r7, #20]
 80159d2:	e00c      	b.n	80159ee <tcp_listen_with_backlog_and_err+0xf2>
 80159d4:	697b      	ldr	r3, [r7, #20]
 80159d6:	68db      	ldr	r3, [r3, #12]
 80159d8:	68fa      	ldr	r2, [r7, #12]
 80159da:	429a      	cmp	r2, r3
 80159dc:	d104      	bne.n	80159e8 <tcp_listen_with_backlog_and_err+0xec>
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	68da      	ldr	r2, [r3, #12]
 80159e2:	697b      	ldr	r3, [r7, #20]
 80159e4:	60da      	str	r2, [r3, #12]
 80159e6:	e005      	b.n	80159f4 <tcp_listen_with_backlog_and_err+0xf8>
 80159e8:	697b      	ldr	r3, [r7, #20]
 80159ea:	68db      	ldr	r3, [r3, #12]
 80159ec:	617b      	str	r3, [r7, #20]
 80159ee:	697b      	ldr	r3, [r7, #20]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d1ef      	bne.n	80159d4 <tcp_listen_with_backlog_and_err+0xd8>
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	2200      	movs	r2, #0
 80159f8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80159fa:	68f8      	ldr	r0, [r7, #12]
 80159fc:	f7ff fbc8 	bl	8015190 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8015a00:	69fb      	ldr	r3, [r7, #28]
 8015a02:	4a11      	ldr	r2, [pc, #68]	; (8015a48 <tcp_listen_with_backlog_and_err+0x14c>)
 8015a04:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8015a06:	4b11      	ldr	r3, [pc, #68]	; (8015a4c <tcp_listen_with_backlog_and_err+0x150>)
 8015a08:	681a      	ldr	r2, [r3, #0]
 8015a0a:	69fb      	ldr	r3, [r7, #28]
 8015a0c:	60da      	str	r2, [r3, #12]
 8015a0e:	4a0f      	ldr	r2, [pc, #60]	; (8015a4c <tcp_listen_with_backlog_and_err+0x150>)
 8015a10:	69fb      	ldr	r3, [r7, #28]
 8015a12:	6013      	str	r3, [r2, #0]
 8015a14:	f005 fc0e 	bl	801b234 <tcp_timer_needed>
  res = ERR_OK;
 8015a18:	2300      	movs	r3, #0
 8015a1a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d002      	beq.n	8015a28 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	7efa      	ldrb	r2, [r7, #27]
 8015a26:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8015a28:	69fb      	ldr	r3, [r7, #28]
}
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	3720      	adds	r7, #32
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	bd80      	pop	{r7, pc}
 8015a32:	bf00      	nop
 8015a34:	0801fdbc 	.word	0x0801fdbc
 8015a38:	0801ffb0 	.word	0x0801ffb0
 8015a3c:	0801fe00 	.word	0x0801fe00
 8015a40:	0801ffe0 	.word	0x0801ffe0
 8015a44:	2000b514 	.word	0x2000b514
 8015a48:	08015899 	.word	0x08015899
 8015a4c:	2000b510 	.word	0x2000b510

08015a50 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b084      	sub	sp, #16
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d106      	bne.n	8015a6c <tcp_update_rcv_ann_wnd+0x1c>
 8015a5e:	4b25      	ldr	r3, [pc, #148]	; (8015af4 <tcp_update_rcv_ann_wnd+0xa4>)
 8015a60:	f240 32a6 	movw	r2, #934	; 0x3a6
 8015a64:	4924      	ldr	r1, [pc, #144]	; (8015af8 <tcp_update_rcv_ann_wnd+0xa8>)
 8015a66:	4825      	ldr	r0, [pc, #148]	; (8015afc <tcp_update_rcv_ann_wnd+0xac>)
 8015a68:	f008 fb2c 	bl	801e0c4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a70:	687a      	ldr	r2, [r7, #4]
 8015a72:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8015a74:	4413      	add	r3, r2
 8015a76:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a7c:	687a      	ldr	r2, [r7, #4]
 8015a7e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8015a80:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8015a84:	bf28      	it	cs
 8015a86:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8015a8a:	b292      	uxth	r2, r2
 8015a8c:	4413      	add	r3, r2
 8015a8e:	68fa      	ldr	r2, [r7, #12]
 8015a90:	1ad3      	subs	r3, r2, r3
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	db08      	blt.n	8015aa8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015aa2:	68fa      	ldr	r2, [r7, #12]
 8015aa4:	1ad3      	subs	r3, r2, r3
 8015aa6:	e020      	b.n	8015aea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ab0:	1ad3      	subs	r3, r2, r3
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	dd03      	ble.n	8015abe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	2200      	movs	r2, #0
 8015aba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015abc:	e014      	b.n	8015ae8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ac6:	1ad3      	subs	r3, r2, r3
 8015ac8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8015aca:	68bb      	ldr	r3, [r7, #8]
 8015acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015ad0:	d306      	bcc.n	8015ae0 <tcp_update_rcv_ann_wnd+0x90>
 8015ad2:	4b08      	ldr	r3, [pc, #32]	; (8015af4 <tcp_update_rcv_ann_wnd+0xa4>)
 8015ad4:	f240 32b6 	movw	r2, #950	; 0x3b6
 8015ad8:	4909      	ldr	r1, [pc, #36]	; (8015b00 <tcp_update_rcv_ann_wnd+0xb0>)
 8015ada:	4808      	ldr	r0, [pc, #32]	; (8015afc <tcp_update_rcv_ann_wnd+0xac>)
 8015adc:	f008 faf2 	bl	801e0c4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015ae0:	68bb      	ldr	r3, [r7, #8]
 8015ae2:	b29a      	uxth	r2, r3
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8015ae8:	2300      	movs	r3, #0
  }
}
 8015aea:	4618      	mov	r0, r3
 8015aec:	3710      	adds	r7, #16
 8015aee:	46bd      	mov	sp, r7
 8015af0:	bd80      	pop	{r7, pc}
 8015af2:	bf00      	nop
 8015af4:	0801fdbc 	.word	0x0801fdbc
 8015af8:	08020018 	.word	0x08020018
 8015afc:	0801fe00 	.word	0x0801fe00
 8015b00:	0802003c 	.word	0x0802003c

08015b04 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b084      	sub	sp, #16
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
 8015b0c:	460b      	mov	r3, r1
 8015b0e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d107      	bne.n	8015b26 <tcp_recved+0x22>
 8015b16:	4b1f      	ldr	r3, [pc, #124]	; (8015b94 <tcp_recved+0x90>)
 8015b18:	f240 32cf 	movw	r2, #975	; 0x3cf
 8015b1c:	491e      	ldr	r1, [pc, #120]	; (8015b98 <tcp_recved+0x94>)
 8015b1e:	481f      	ldr	r0, [pc, #124]	; (8015b9c <tcp_recved+0x98>)
 8015b20:	f008 fad0 	bl	801e0c4 <iprintf>
 8015b24:	e032      	b.n	8015b8c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	7d1b      	ldrb	r3, [r3, #20]
 8015b2a:	2b01      	cmp	r3, #1
 8015b2c:	d106      	bne.n	8015b3c <tcp_recved+0x38>
 8015b2e:	4b19      	ldr	r3, [pc, #100]	; (8015b94 <tcp_recved+0x90>)
 8015b30:	f240 32d3 	movw	r2, #979	; 0x3d3
 8015b34:	491a      	ldr	r1, [pc, #104]	; (8015ba0 <tcp_recved+0x9c>)
 8015b36:	4819      	ldr	r0, [pc, #100]	; (8015b9c <tcp_recved+0x98>)
 8015b38:	f008 fac4 	bl	801e0c4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015b40:	887b      	ldrh	r3, [r7, #2]
 8015b42:	4413      	add	r3, r2
 8015b44:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015b46:	89fb      	ldrh	r3, [r7, #14]
 8015b48:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015b4c:	d804      	bhi.n	8015b58 <tcp_recved+0x54>
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015b52:	89fa      	ldrh	r2, [r7, #14]
 8015b54:	429a      	cmp	r2, r3
 8015b56:	d204      	bcs.n	8015b62 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8015b5e:	851a      	strh	r2, [r3, #40]	; 0x28
 8015b60:	e002      	b.n	8015b68 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	89fa      	ldrh	r2, [r7, #14]
 8015b66:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015b68:	6878      	ldr	r0, [r7, #4]
 8015b6a:	f7ff ff71 	bl	8015a50 <tcp_update_rcv_ann_wnd>
 8015b6e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8015b70:	68bb      	ldr	r3, [r7, #8]
 8015b72:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015b76:	d309      	bcc.n	8015b8c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	8b5b      	ldrh	r3, [r3, #26]
 8015b7c:	f043 0302 	orr.w	r3, r3, #2
 8015b80:	b29a      	uxth	r2, r3
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015b86:	6878      	ldr	r0, [r7, #4]
 8015b88:	f004 fbcc 	bl	801a324 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015b8c:	3710      	adds	r7, #16
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	bd80      	pop	{r7, pc}
 8015b92:	bf00      	nop
 8015b94:	0801fdbc 	.word	0x0801fdbc
 8015b98:	08020058 	.word	0x08020058
 8015b9c:	0801fe00 	.word	0x0801fe00
 8015ba0:	08020070 	.word	0x08020070

08015ba4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8015ba4:	b480      	push	{r7}
 8015ba6:	b083      	sub	sp, #12
 8015ba8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8015baa:	2300      	movs	r3, #0
 8015bac:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8015bae:	4b1e      	ldr	r3, [pc, #120]	; (8015c28 <tcp_new_port+0x84>)
 8015bb0:	881b      	ldrh	r3, [r3, #0]
 8015bb2:	3301      	adds	r3, #1
 8015bb4:	b29a      	uxth	r2, r3
 8015bb6:	4b1c      	ldr	r3, [pc, #112]	; (8015c28 <tcp_new_port+0x84>)
 8015bb8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8015bba:	4b1b      	ldr	r3, [pc, #108]	; (8015c28 <tcp_new_port+0x84>)
 8015bbc:	881b      	ldrh	r3, [r3, #0]
 8015bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015bc2:	4293      	cmp	r3, r2
 8015bc4:	d103      	bne.n	8015bce <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8015bc6:	4b18      	ldr	r3, [pc, #96]	; (8015c28 <tcp_new_port+0x84>)
 8015bc8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015bcc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015bce:	2300      	movs	r3, #0
 8015bd0:	71fb      	strb	r3, [r7, #7]
 8015bd2:	e01e      	b.n	8015c12 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015bd4:	79fb      	ldrb	r3, [r7, #7]
 8015bd6:	4a15      	ldr	r2, [pc, #84]	; (8015c2c <tcp_new_port+0x88>)
 8015bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	603b      	str	r3, [r7, #0]
 8015be0:	e011      	b.n	8015c06 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	8ada      	ldrh	r2, [r3, #22]
 8015be6:	4b10      	ldr	r3, [pc, #64]	; (8015c28 <tcp_new_port+0x84>)
 8015be8:	881b      	ldrh	r3, [r3, #0]
 8015bea:	429a      	cmp	r2, r3
 8015bec:	d108      	bne.n	8015c00 <tcp_new_port+0x5c>
        n++;
 8015bee:	88bb      	ldrh	r3, [r7, #4]
 8015bf0:	3301      	adds	r3, #1
 8015bf2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8015bf4:	88bb      	ldrh	r3, [r7, #4]
 8015bf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015bfa:	d3d8      	bcc.n	8015bae <tcp_new_port+0xa>
          return 0;
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	e00d      	b.n	8015c1c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015c00:	683b      	ldr	r3, [r7, #0]
 8015c02:	68db      	ldr	r3, [r3, #12]
 8015c04:	603b      	str	r3, [r7, #0]
 8015c06:	683b      	ldr	r3, [r7, #0]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d1ea      	bne.n	8015be2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015c0c:	79fb      	ldrb	r3, [r7, #7]
 8015c0e:	3301      	adds	r3, #1
 8015c10:	71fb      	strb	r3, [r7, #7]
 8015c12:	79fb      	ldrb	r3, [r7, #7]
 8015c14:	2b03      	cmp	r3, #3
 8015c16:	d9dd      	bls.n	8015bd4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8015c18:	4b03      	ldr	r3, [pc, #12]	; (8015c28 <tcp_new_port+0x84>)
 8015c1a:	881b      	ldrh	r3, [r3, #0]
}
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	370c      	adds	r7, #12
 8015c20:	46bd      	mov	sp, r7
 8015c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c26:	4770      	bx	lr
 8015c28:	20000050 	.word	0x20000050
 8015c2c:	08032918 	.word	0x08032918

08015c30 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8015c30:	b5b0      	push	{r4, r5, r7, lr}
 8015c32:	b090      	sub	sp, #64	; 0x40
 8015c34:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015c36:	2300      	movs	r3, #0
 8015c38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8015c3c:	4b94      	ldr	r3, [pc, #592]	; (8015e90 <tcp_slowtmr+0x260>)
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	3301      	adds	r3, #1
 8015c42:	4a93      	ldr	r2, [pc, #588]	; (8015e90 <tcp_slowtmr+0x260>)
 8015c44:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8015c46:	4b93      	ldr	r3, [pc, #588]	; (8015e94 <tcp_slowtmr+0x264>)
 8015c48:	781b      	ldrb	r3, [r3, #0]
 8015c4a:	3301      	adds	r3, #1
 8015c4c:	b2da      	uxtb	r2, r3
 8015c4e:	4b91      	ldr	r3, [pc, #580]	; (8015e94 <tcp_slowtmr+0x264>)
 8015c50:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8015c52:	2300      	movs	r3, #0
 8015c54:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8015c56:	4b90      	ldr	r3, [pc, #576]	; (8015e98 <tcp_slowtmr+0x268>)
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8015c5c:	e29d      	b.n	801619a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c60:	7d1b      	ldrb	r3, [r3, #20]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d106      	bne.n	8015c74 <tcp_slowtmr+0x44>
 8015c66:	4b8d      	ldr	r3, [pc, #564]	; (8015e9c <tcp_slowtmr+0x26c>)
 8015c68:	f240 42be 	movw	r2, #1214	; 0x4be
 8015c6c:	498c      	ldr	r1, [pc, #560]	; (8015ea0 <tcp_slowtmr+0x270>)
 8015c6e:	488d      	ldr	r0, [pc, #564]	; (8015ea4 <tcp_slowtmr+0x274>)
 8015c70:	f008 fa28 	bl	801e0c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c76:	7d1b      	ldrb	r3, [r3, #20]
 8015c78:	2b01      	cmp	r3, #1
 8015c7a:	d106      	bne.n	8015c8a <tcp_slowtmr+0x5a>
 8015c7c:	4b87      	ldr	r3, [pc, #540]	; (8015e9c <tcp_slowtmr+0x26c>)
 8015c7e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8015c82:	4989      	ldr	r1, [pc, #548]	; (8015ea8 <tcp_slowtmr+0x278>)
 8015c84:	4887      	ldr	r0, [pc, #540]	; (8015ea4 <tcp_slowtmr+0x274>)
 8015c86:	f008 fa1d 	bl	801e0c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c8c:	7d1b      	ldrb	r3, [r3, #20]
 8015c8e:	2b0a      	cmp	r3, #10
 8015c90:	d106      	bne.n	8015ca0 <tcp_slowtmr+0x70>
 8015c92:	4b82      	ldr	r3, [pc, #520]	; (8015e9c <tcp_slowtmr+0x26c>)
 8015c94:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8015c98:	4984      	ldr	r1, [pc, #528]	; (8015eac <tcp_slowtmr+0x27c>)
 8015c9a:	4882      	ldr	r0, [pc, #520]	; (8015ea4 <tcp_slowtmr+0x274>)
 8015c9c:	f008 fa12 	bl	801e0c4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ca2:	7f9a      	ldrb	r2, [r3, #30]
 8015ca4:	4b7b      	ldr	r3, [pc, #492]	; (8015e94 <tcp_slowtmr+0x264>)
 8015ca6:	781b      	ldrb	r3, [r3, #0]
 8015ca8:	429a      	cmp	r2, r3
 8015caa:	d105      	bne.n	8015cb8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8015cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cb2:	68db      	ldr	r3, [r3, #12]
 8015cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8015cb6:	e270      	b.n	801619a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8015cb8:	4b76      	ldr	r3, [pc, #472]	; (8015e94 <tcp_slowtmr+0x264>)
 8015cba:	781a      	ldrb	r2, [r3, #0]
 8015cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cbe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cce:	7d1b      	ldrb	r3, [r3, #20]
 8015cd0:	2b02      	cmp	r3, #2
 8015cd2:	d10a      	bne.n	8015cea <tcp_slowtmr+0xba>
 8015cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015cda:	2b05      	cmp	r3, #5
 8015cdc:	d905      	bls.n	8015cea <tcp_slowtmr+0xba>
      ++pcb_remove;
 8015cde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ce2:	3301      	adds	r3, #1
 8015ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015ce8:	e11e      	b.n	8015f28 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8015cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015cf0:	2b0b      	cmp	r3, #11
 8015cf2:	d905      	bls.n	8015d00 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8015cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cf8:	3301      	adds	r3, #1
 8015cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015cfe:	e113      	b.n	8015f28 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8015d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d02:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d075      	beq.n	8015df6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8015d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d006      	beq.n	8015d20 <tcp_slowtmr+0xf0>
 8015d12:	4b62      	ldr	r3, [pc, #392]	; (8015e9c <tcp_slowtmr+0x26c>)
 8015d14:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8015d18:	4965      	ldr	r1, [pc, #404]	; (8015eb0 <tcp_slowtmr+0x280>)
 8015d1a:	4862      	ldr	r0, [pc, #392]	; (8015ea4 <tcp_slowtmr+0x274>)
 8015d1c:	f008 f9d2 	bl	801e0c4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d106      	bne.n	8015d36 <tcp_slowtmr+0x106>
 8015d28:	4b5c      	ldr	r3, [pc, #368]	; (8015e9c <tcp_slowtmr+0x26c>)
 8015d2a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8015d2e:	4961      	ldr	r1, [pc, #388]	; (8015eb4 <tcp_slowtmr+0x284>)
 8015d30:	485c      	ldr	r0, [pc, #368]	; (8015ea4 <tcp_slowtmr+0x274>)
 8015d32:	f008 f9c7 	bl	801e0c4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8015d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d38:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015d3c:	2b0b      	cmp	r3, #11
 8015d3e:	d905      	bls.n	8015d4c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8015d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d44:	3301      	adds	r3, #1
 8015d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015d4a:	e0ed      	b.n	8015f28 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015d52:	3b01      	subs	r3, #1
 8015d54:	4a58      	ldr	r2, [pc, #352]	; (8015eb8 <tcp_slowtmr+0x288>)
 8015d56:	5cd3      	ldrb	r3, [r2, r3]
 8015d58:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8015d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d5c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015d60:	7c7a      	ldrb	r2, [r7, #17]
 8015d62:	429a      	cmp	r2, r3
 8015d64:	d907      	bls.n	8015d76 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8015d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015d6c:	3301      	adds	r3, #1
 8015d6e:	b2da      	uxtb	r2, r3
 8015d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d72:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8015d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015d7c:	7c7a      	ldrb	r2, [r7, #17]
 8015d7e:	429a      	cmp	r2, r3
 8015d80:	f200 80d2 	bhi.w	8015f28 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8015d84:	2301      	movs	r3, #1
 8015d86:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8015d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d108      	bne.n	8015da4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8015d92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015d94:	f005 f980 	bl	801b098 <tcp_zero_window_probe>
 8015d98:	4603      	mov	r3, r0
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d014      	beq.n	8015dc8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8015d9e:	2300      	movs	r3, #0
 8015da0:	623b      	str	r3, [r7, #32]
 8015da2:	e011      	b.n	8015dc8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015da6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015daa:	4619      	mov	r1, r3
 8015dac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015dae:	f004 f833 	bl	8019e18 <tcp_split_unsent_seg>
 8015db2:	4603      	mov	r3, r0
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d107      	bne.n	8015dc8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8015db8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015dba:	f004 fab3 	bl	801a324 <tcp_output>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d101      	bne.n	8015dc8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8015dc8:	6a3b      	ldr	r3, [r7, #32]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	f000 80ac 	beq.w	8015f28 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8015dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dda:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015dde:	2b06      	cmp	r3, #6
 8015de0:	f200 80a2 	bhi.w	8015f28 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8015de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015de6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015dea:	3301      	adds	r3, #1
 8015dec:	b2da      	uxtb	r2, r3
 8015dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015df0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8015df4:	e098      	b.n	8015f28 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8015df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015df8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	db0f      	blt.n	8015e20 <tcp_slowtmr+0x1f0>
 8015e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e02:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015e06:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015e0a:	4293      	cmp	r3, r2
 8015e0c:	d008      	beq.n	8015e20 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8015e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e10:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015e14:	b29b      	uxth	r3, r3
 8015e16:	3301      	adds	r3, #1
 8015e18:	b29b      	uxth	r3, r3
 8015e1a:	b21a      	sxth	r2, r3
 8015e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e1e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8015e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e22:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8015e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e28:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8015e2c:	429a      	cmp	r2, r3
 8015e2e:	db7b      	blt.n	8015f28 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015e30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015e32:	f004 fd6f 	bl	801a914 <tcp_rexmit_rto_prepare>
 8015e36:	4603      	mov	r3, r0
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d007      	beq.n	8015e4c <tcp_slowtmr+0x21c>
 8015e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d171      	bne.n	8015f28 <tcp_slowtmr+0x2f8>
 8015e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d06d      	beq.n	8015f28 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8015e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e4e:	7d1b      	ldrb	r3, [r3, #20]
 8015e50:	2b02      	cmp	r3, #2
 8015e52:	d03a      	beq.n	8015eca <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015e5a:	2b0c      	cmp	r3, #12
 8015e5c:	bf28      	it	cs
 8015e5e:	230c      	movcs	r3, #12
 8015e60:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015e68:	10db      	asrs	r3, r3, #3
 8015e6a:	b21b      	sxth	r3, r3
 8015e6c:	461a      	mov	r2, r3
 8015e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e70:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015e74:	4413      	add	r3, r2
 8015e76:	7efa      	ldrb	r2, [r7, #27]
 8015e78:	4910      	ldr	r1, [pc, #64]	; (8015ebc <tcp_slowtmr+0x28c>)
 8015e7a:	5c8a      	ldrb	r2, [r1, r2]
 8015e7c:	4093      	lsls	r3, r2
 8015e7e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015e80:	697b      	ldr	r3, [r7, #20]
 8015e82:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8015e86:	4293      	cmp	r3, r2
 8015e88:	dc1a      	bgt.n	8015ec0 <tcp_slowtmr+0x290>
 8015e8a:	697b      	ldr	r3, [r7, #20]
 8015e8c:	b21a      	sxth	r2, r3
 8015e8e:	e019      	b.n	8015ec4 <tcp_slowtmr+0x294>
 8015e90:	2000b50c 	.word	0x2000b50c
 8015e94:	20004526 	.word	0x20004526
 8015e98:	2000b508 	.word	0x2000b508
 8015e9c:	0801fdbc 	.word	0x0801fdbc
 8015ea0:	08020100 	.word	0x08020100
 8015ea4:	0801fe00 	.word	0x0801fe00
 8015ea8:	0802012c 	.word	0x0802012c
 8015eac:	08020158 	.word	0x08020158
 8015eb0:	08020188 	.word	0x08020188
 8015eb4:	080201bc 	.word	0x080201bc
 8015eb8:	08032910 	.word	0x08032910
 8015ebc:	08032900 	.word	0x08032900
 8015ec0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ec6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8015eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ecc:	2200      	movs	r2, #0
 8015ece:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ed2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ed8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015edc:	4293      	cmp	r3, r2
 8015ede:	bf28      	it	cs
 8015ee0:	4613      	movcs	r3, r2
 8015ee2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015ee4:	8a7b      	ldrh	r3, [r7, #18]
 8015ee6:	085b      	lsrs	r3, r3, #1
 8015ee8:	b29a      	uxth	r2, r3
 8015eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ef2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ef8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015efa:	005b      	lsls	r3, r3, #1
 8015efc:	b29b      	uxth	r3, r3
 8015efe:	429a      	cmp	r2, r3
 8015f00:	d206      	bcs.n	8015f10 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f06:	005b      	lsls	r3, r3, #1
 8015f08:	b29a      	uxth	r2, r3
 8015f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f0c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8015f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f12:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8015f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8015f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f1c:	2200      	movs	r2, #0
 8015f1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8015f22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015f24:	f004 fd66 	bl	801a9f4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8015f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f2a:	7d1b      	ldrb	r3, [r3, #20]
 8015f2c:	2b06      	cmp	r3, #6
 8015f2e:	d111      	bne.n	8015f54 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8015f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f32:	8b5b      	ldrh	r3, [r3, #26]
 8015f34:	f003 0310 	and.w	r3, r3, #16
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d00b      	beq.n	8015f54 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015f3c:	4b9c      	ldr	r3, [pc, #624]	; (80161b0 <tcp_slowtmr+0x580>)
 8015f3e:	681a      	ldr	r2, [r3, #0]
 8015f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f42:	6a1b      	ldr	r3, [r3, #32]
 8015f44:	1ad3      	subs	r3, r2, r3
 8015f46:	2b28      	cmp	r3, #40	; 0x28
 8015f48:	d904      	bls.n	8015f54 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8015f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f4e:	3301      	adds	r3, #1
 8015f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f56:	7a5b      	ldrb	r3, [r3, #9]
 8015f58:	f003 0308 	and.w	r3, r3, #8
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d04a      	beq.n	8015ff6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8015f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f62:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015f64:	2b04      	cmp	r3, #4
 8015f66:	d003      	beq.n	8015f70 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8015f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f6a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015f6c:	2b07      	cmp	r3, #7
 8015f6e:	d142      	bne.n	8015ff6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015f70:	4b8f      	ldr	r3, [pc, #572]	; (80161b0 <tcp_slowtmr+0x580>)
 8015f72:	681a      	ldr	r2, [r3, #0]
 8015f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f76:	6a1b      	ldr	r3, [r3, #32]
 8015f78:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8015f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f7c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8015f80:	4b8c      	ldr	r3, [pc, #560]	; (80161b4 <tcp_slowtmr+0x584>)
 8015f82:	440b      	add	r3, r1
 8015f84:	498c      	ldr	r1, [pc, #560]	; (80161b8 <tcp_slowtmr+0x588>)
 8015f86:	fba1 1303 	umull	r1, r3, r1, r3
 8015f8a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015f8c:	429a      	cmp	r2, r3
 8015f8e:	d90a      	bls.n	8015fa6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8015f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f94:	3301      	adds	r3, #1
 8015f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8015f9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015f9e:	3301      	adds	r3, #1
 8015fa0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015fa4:	e027      	b.n	8015ff6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015fa6:	4b82      	ldr	r3, [pc, #520]	; (80161b0 <tcp_slowtmr+0x580>)
 8015fa8:	681a      	ldr	r2, [r3, #0]
 8015faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fac:	6a1b      	ldr	r3, [r3, #32]
 8015fae:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fb2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8015fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fb8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	4b7f      	ldr	r3, [pc, #508]	; (80161bc <tcp_slowtmr+0x58c>)
 8015fc0:	fb03 f300 	mul.w	r3, r3, r0
 8015fc4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8015fc6:	497c      	ldr	r1, [pc, #496]	; (80161b8 <tcp_slowtmr+0x588>)
 8015fc8:	fba1 1303 	umull	r1, r3, r1, r3
 8015fcc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	d911      	bls.n	8015ff6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8015fd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015fd4:	f005 f820 	bl	801b018 <tcp_keepalive>
 8015fd8:	4603      	mov	r3, r0
 8015fda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8015fde:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d107      	bne.n	8015ff6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8015fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fe8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8015fec:	3301      	adds	r3, #1
 8015fee:	b2da      	uxtb	r2, r3
 8015ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ff2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8015ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d011      	beq.n	8016022 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8015ffe:	4b6c      	ldr	r3, [pc, #432]	; (80161b0 <tcp_slowtmr+0x580>)
 8016000:	681a      	ldr	r2, [r3, #0]
 8016002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016004:	6a1b      	ldr	r3, [r3, #32]
 8016006:	1ad2      	subs	r2, r2, r3
 8016008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801600a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801600e:	4619      	mov	r1, r3
 8016010:	460b      	mov	r3, r1
 8016012:	005b      	lsls	r3, r3, #1
 8016014:	440b      	add	r3, r1
 8016016:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8016018:	429a      	cmp	r2, r3
 801601a:	d302      	bcc.n	8016022 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801601c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801601e:	f000 fecd 	bl	8016dbc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8016022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016024:	7d1b      	ldrb	r3, [r3, #20]
 8016026:	2b03      	cmp	r3, #3
 8016028:	d10b      	bne.n	8016042 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801602a:	4b61      	ldr	r3, [pc, #388]	; (80161b0 <tcp_slowtmr+0x580>)
 801602c:	681a      	ldr	r2, [r3, #0]
 801602e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016030:	6a1b      	ldr	r3, [r3, #32]
 8016032:	1ad3      	subs	r3, r2, r3
 8016034:	2b28      	cmp	r3, #40	; 0x28
 8016036:	d904      	bls.n	8016042 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8016038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801603c:	3301      	adds	r3, #1
 801603e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8016042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016044:	7d1b      	ldrb	r3, [r3, #20]
 8016046:	2b09      	cmp	r3, #9
 8016048:	d10b      	bne.n	8016062 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801604a:	4b59      	ldr	r3, [pc, #356]	; (80161b0 <tcp_slowtmr+0x580>)
 801604c:	681a      	ldr	r2, [r3, #0]
 801604e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016050:	6a1b      	ldr	r3, [r3, #32]
 8016052:	1ad3      	subs	r3, r2, r3
 8016054:	2bf0      	cmp	r3, #240	; 0xf0
 8016056:	d904      	bls.n	8016062 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8016058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801605c:	3301      	adds	r3, #1
 801605e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016066:	2b00      	cmp	r3, #0
 8016068:	d060      	beq.n	801612c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801606a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801606c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016070:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8016072:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016074:	f000 fcee 	bl	8016a54 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8016078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801607a:	2b00      	cmp	r3, #0
 801607c:	d010      	beq.n	80160a0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801607e:	4b50      	ldr	r3, [pc, #320]	; (80161c0 <tcp_slowtmr+0x590>)
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016084:	429a      	cmp	r2, r3
 8016086:	d106      	bne.n	8016096 <tcp_slowtmr+0x466>
 8016088:	4b4e      	ldr	r3, [pc, #312]	; (80161c4 <tcp_slowtmr+0x594>)
 801608a:	f240 526d 	movw	r2, #1389	; 0x56d
 801608e:	494e      	ldr	r1, [pc, #312]	; (80161c8 <tcp_slowtmr+0x598>)
 8016090:	484e      	ldr	r0, [pc, #312]	; (80161cc <tcp_slowtmr+0x59c>)
 8016092:	f008 f817 	bl	801e0c4 <iprintf>
        prev->next = pcb->next;
 8016096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016098:	68da      	ldr	r2, [r3, #12]
 801609a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801609c:	60da      	str	r2, [r3, #12]
 801609e:	e00f      	b.n	80160c0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80160a0:	4b47      	ldr	r3, [pc, #284]	; (80161c0 <tcp_slowtmr+0x590>)
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80160a6:	429a      	cmp	r2, r3
 80160a8:	d006      	beq.n	80160b8 <tcp_slowtmr+0x488>
 80160aa:	4b46      	ldr	r3, [pc, #280]	; (80161c4 <tcp_slowtmr+0x594>)
 80160ac:	f240 5271 	movw	r2, #1393	; 0x571
 80160b0:	4947      	ldr	r1, [pc, #284]	; (80161d0 <tcp_slowtmr+0x5a0>)
 80160b2:	4846      	ldr	r0, [pc, #280]	; (80161cc <tcp_slowtmr+0x59c>)
 80160b4:	f008 f806 	bl	801e0c4 <iprintf>
        tcp_active_pcbs = pcb->next;
 80160b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ba:	68db      	ldr	r3, [r3, #12]
 80160bc:	4a40      	ldr	r2, [pc, #256]	; (80161c0 <tcp_slowtmr+0x590>)
 80160be:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80160c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d013      	beq.n	80160f0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80160c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80160cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80160d0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80160d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160d4:	3304      	adds	r3, #4
 80160d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80160d8:	8ad2      	ldrh	r2, [r2, #22]
 80160da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80160dc:	8b09      	ldrh	r1, [r1, #24]
 80160de:	9102      	str	r1, [sp, #8]
 80160e0:	9201      	str	r2, [sp, #4]
 80160e2:	9300      	str	r3, [sp, #0]
 80160e4:	462b      	mov	r3, r5
 80160e6:	4622      	mov	r2, r4
 80160e8:	4601      	mov	r1, r0
 80160ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80160ec:	f004 fee0 	bl	801aeb0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80160f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160f2:	691b      	ldr	r3, [r3, #16]
 80160f4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80160f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160f8:	7d1b      	ldrb	r3, [r3, #20]
 80160fa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80160fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160fe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8016100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016102:	68db      	ldr	r3, [r3, #12]
 8016104:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8016106:	6838      	ldr	r0, [r7, #0]
 8016108:	f7ff f842 	bl	8015190 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801610c:	4b31      	ldr	r3, [pc, #196]	; (80161d4 <tcp_slowtmr+0x5a4>)
 801610e:	2200      	movs	r2, #0
 8016110:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d004      	beq.n	8016122 <tcp_slowtmr+0x4f2>
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	f06f 010c 	mvn.w	r1, #12
 801611e:	68b8      	ldr	r0, [r7, #8]
 8016120:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8016122:	4b2c      	ldr	r3, [pc, #176]	; (80161d4 <tcp_slowtmr+0x5a4>)
 8016124:	781b      	ldrb	r3, [r3, #0]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d037      	beq.n	801619a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801612a:	e592      	b.n	8015c52 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801612e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016132:	68db      	ldr	r3, [r3, #12]
 8016134:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8016136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016138:	7f1b      	ldrb	r3, [r3, #28]
 801613a:	3301      	adds	r3, #1
 801613c:	b2da      	uxtb	r2, r3
 801613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016140:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8016142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016144:	7f1a      	ldrb	r2, [r3, #28]
 8016146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016148:	7f5b      	ldrb	r3, [r3, #29]
 801614a:	429a      	cmp	r2, r3
 801614c:	d325      	bcc.n	801619a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016150:	2200      	movs	r2, #0
 8016152:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8016154:	4b1f      	ldr	r3, [pc, #124]	; (80161d4 <tcp_slowtmr+0x5a4>)
 8016156:	2200      	movs	r2, #0
 8016158:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801615c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016160:	2b00      	cmp	r3, #0
 8016162:	d00b      	beq.n	801617c <tcp_slowtmr+0x54c>
 8016164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801616a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801616c:	6912      	ldr	r2, [r2, #16]
 801616e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016170:	4610      	mov	r0, r2
 8016172:	4798      	blx	r3
 8016174:	4603      	mov	r3, r0
 8016176:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801617a:	e002      	b.n	8016182 <tcp_slowtmr+0x552>
 801617c:	2300      	movs	r3, #0
 801617e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8016182:	4b14      	ldr	r3, [pc, #80]	; (80161d4 <tcp_slowtmr+0x5a4>)
 8016184:	781b      	ldrb	r3, [r3, #0]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d000      	beq.n	801618c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801618a:	e562      	b.n	8015c52 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801618c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8016190:	2b00      	cmp	r3, #0
 8016192:	d102      	bne.n	801619a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8016194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016196:	f004 f8c5 	bl	801a324 <tcp_output>
  while (pcb != NULL) {
 801619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801619c:	2b00      	cmp	r3, #0
 801619e:	f47f ad5e 	bne.w	8015c5e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80161a2:	2300      	movs	r3, #0
 80161a4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80161a6:	4b0c      	ldr	r3, [pc, #48]	; (80161d8 <tcp_slowtmr+0x5a8>)
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80161ac:	e069      	b.n	8016282 <tcp_slowtmr+0x652>
 80161ae:	bf00      	nop
 80161b0:	2000b50c 	.word	0x2000b50c
 80161b4:	000a4cb8 	.word	0x000a4cb8
 80161b8:	10624dd3 	.word	0x10624dd3
 80161bc:	000124f8 	.word	0x000124f8
 80161c0:	2000b508 	.word	0x2000b508
 80161c4:	0801fdbc 	.word	0x0801fdbc
 80161c8:	080201f4 	.word	0x080201f4
 80161cc:	0801fe00 	.word	0x0801fe00
 80161d0:	08020220 	.word	0x08020220
 80161d4:	2000b504 	.word	0x2000b504
 80161d8:	2000b518 	.word	0x2000b518
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80161dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161de:	7d1b      	ldrb	r3, [r3, #20]
 80161e0:	2b0a      	cmp	r3, #10
 80161e2:	d006      	beq.n	80161f2 <tcp_slowtmr+0x5c2>
 80161e4:	4b2a      	ldr	r3, [pc, #168]	; (8016290 <tcp_slowtmr+0x660>)
 80161e6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80161ea:	492a      	ldr	r1, [pc, #168]	; (8016294 <tcp_slowtmr+0x664>)
 80161ec:	482a      	ldr	r0, [pc, #168]	; (8016298 <tcp_slowtmr+0x668>)
 80161ee:	f007 ff69 	bl	801e0c4 <iprintf>
    pcb_remove = 0;
 80161f2:	2300      	movs	r3, #0
 80161f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80161f8:	4b28      	ldr	r3, [pc, #160]	; (801629c <tcp_slowtmr+0x66c>)
 80161fa:	681a      	ldr	r2, [r3, #0]
 80161fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161fe:	6a1b      	ldr	r3, [r3, #32]
 8016200:	1ad3      	subs	r3, r2, r3
 8016202:	2bf0      	cmp	r3, #240	; 0xf0
 8016204:	d904      	bls.n	8016210 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8016206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801620a:	3301      	adds	r3, #1
 801620c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016214:	2b00      	cmp	r3, #0
 8016216:	d02f      	beq.n	8016278 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8016218:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801621a:	f000 fc1b 	bl	8016a54 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016220:	2b00      	cmp	r3, #0
 8016222:	d010      	beq.n	8016246 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8016224:	4b1e      	ldr	r3, [pc, #120]	; (80162a0 <tcp_slowtmr+0x670>)
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801622a:	429a      	cmp	r2, r3
 801622c:	d106      	bne.n	801623c <tcp_slowtmr+0x60c>
 801622e:	4b18      	ldr	r3, [pc, #96]	; (8016290 <tcp_slowtmr+0x660>)
 8016230:	f240 52af 	movw	r2, #1455	; 0x5af
 8016234:	491b      	ldr	r1, [pc, #108]	; (80162a4 <tcp_slowtmr+0x674>)
 8016236:	4818      	ldr	r0, [pc, #96]	; (8016298 <tcp_slowtmr+0x668>)
 8016238:	f007 ff44 	bl	801e0c4 <iprintf>
        prev->next = pcb->next;
 801623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801623e:	68da      	ldr	r2, [r3, #12]
 8016240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016242:	60da      	str	r2, [r3, #12]
 8016244:	e00f      	b.n	8016266 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8016246:	4b16      	ldr	r3, [pc, #88]	; (80162a0 <tcp_slowtmr+0x670>)
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801624c:	429a      	cmp	r2, r3
 801624e:	d006      	beq.n	801625e <tcp_slowtmr+0x62e>
 8016250:	4b0f      	ldr	r3, [pc, #60]	; (8016290 <tcp_slowtmr+0x660>)
 8016252:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8016256:	4914      	ldr	r1, [pc, #80]	; (80162a8 <tcp_slowtmr+0x678>)
 8016258:	480f      	ldr	r0, [pc, #60]	; (8016298 <tcp_slowtmr+0x668>)
 801625a:	f007 ff33 	bl	801e0c4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016260:	68db      	ldr	r3, [r3, #12]
 8016262:	4a0f      	ldr	r2, [pc, #60]	; (80162a0 <tcp_slowtmr+0x670>)
 8016264:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8016266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016268:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801626c:	68db      	ldr	r3, [r3, #12]
 801626e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8016270:	69f8      	ldr	r0, [r7, #28]
 8016272:	f7fe ff8d 	bl	8015190 <tcp_free>
 8016276:	e004      	b.n	8016282 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8016278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801627a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801627e:	68db      	ldr	r3, [r3, #12]
 8016280:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8016282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016284:	2b00      	cmp	r3, #0
 8016286:	d1a9      	bne.n	80161dc <tcp_slowtmr+0x5ac>
    }
  }
}
 8016288:	bf00      	nop
 801628a:	3730      	adds	r7, #48	; 0x30
 801628c:	46bd      	mov	sp, r7
 801628e:	bdb0      	pop	{r4, r5, r7, pc}
 8016290:	0801fdbc 	.word	0x0801fdbc
 8016294:	0802024c 	.word	0x0802024c
 8016298:	0801fe00 	.word	0x0801fe00
 801629c:	2000b50c 	.word	0x2000b50c
 80162a0:	2000b518 	.word	0x2000b518
 80162a4:	0802027c 	.word	0x0802027c
 80162a8:	080202a4 	.word	0x080202a4

080162ac <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b082      	sub	sp, #8
 80162b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80162b2:	4b2d      	ldr	r3, [pc, #180]	; (8016368 <tcp_fasttmr+0xbc>)
 80162b4:	781b      	ldrb	r3, [r3, #0]
 80162b6:	3301      	adds	r3, #1
 80162b8:	b2da      	uxtb	r2, r3
 80162ba:	4b2b      	ldr	r3, [pc, #172]	; (8016368 <tcp_fasttmr+0xbc>)
 80162bc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80162be:	4b2b      	ldr	r3, [pc, #172]	; (801636c <tcp_fasttmr+0xc0>)
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80162c4:	e048      	b.n	8016358 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	7f9a      	ldrb	r2, [r3, #30]
 80162ca:	4b27      	ldr	r3, [pc, #156]	; (8016368 <tcp_fasttmr+0xbc>)
 80162cc:	781b      	ldrb	r3, [r3, #0]
 80162ce:	429a      	cmp	r2, r3
 80162d0:	d03f      	beq.n	8016352 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80162d2:	4b25      	ldr	r3, [pc, #148]	; (8016368 <tcp_fasttmr+0xbc>)
 80162d4:	781a      	ldrb	r2, [r3, #0]
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	8b5b      	ldrh	r3, [r3, #26]
 80162de:	f003 0301 	and.w	r3, r3, #1
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d010      	beq.n	8016308 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	8b5b      	ldrh	r3, [r3, #26]
 80162ea:	f043 0302 	orr.w	r3, r3, #2
 80162ee:	b29a      	uxth	r2, r3
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80162f4:	6878      	ldr	r0, [r7, #4]
 80162f6:	f004 f815 	bl	801a324 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	8b5b      	ldrh	r3, [r3, #26]
 80162fe:	f023 0303 	bic.w	r3, r3, #3
 8016302:	b29a      	uxth	r2, r3
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	8b5b      	ldrh	r3, [r3, #26]
 801630c:	f003 0308 	and.w	r3, r3, #8
 8016310:	2b00      	cmp	r3, #0
 8016312:	d009      	beq.n	8016328 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	8b5b      	ldrh	r3, [r3, #26]
 8016318:	f023 0308 	bic.w	r3, r3, #8
 801631c:	b29a      	uxth	r2, r3
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8016322:	6878      	ldr	r0, [r7, #4]
 8016324:	f7ff f8c4 	bl	80154b0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	68db      	ldr	r3, [r3, #12]
 801632c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016332:	2b00      	cmp	r3, #0
 8016334:	d00a      	beq.n	801634c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8016336:	4b0e      	ldr	r3, [pc, #56]	; (8016370 <tcp_fasttmr+0xc4>)
 8016338:	2200      	movs	r2, #0
 801633a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801633c:	6878      	ldr	r0, [r7, #4]
 801633e:	f000 f819 	bl	8016374 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8016342:	4b0b      	ldr	r3, [pc, #44]	; (8016370 <tcp_fasttmr+0xc4>)
 8016344:	781b      	ldrb	r3, [r3, #0]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d000      	beq.n	801634c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801634a:	e7b8      	b.n	80162be <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801634c:	683b      	ldr	r3, [r7, #0]
 801634e:	607b      	str	r3, [r7, #4]
 8016350:	e002      	b.n	8016358 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	68db      	ldr	r3, [r3, #12]
 8016356:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d1b3      	bne.n	80162c6 <tcp_fasttmr+0x1a>
    }
  }
}
 801635e:	bf00      	nop
 8016360:	3708      	adds	r7, #8
 8016362:	46bd      	mov	sp, r7
 8016364:	bd80      	pop	{r7, pc}
 8016366:	bf00      	nop
 8016368:	20004526 	.word	0x20004526
 801636c:	2000b508 	.word	0x2000b508
 8016370:	2000b504 	.word	0x2000b504

08016374 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8016374:	b590      	push	{r4, r7, lr}
 8016376:	b085      	sub	sp, #20
 8016378:	af00      	add	r7, sp, #0
 801637a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d109      	bne.n	8016396 <tcp_process_refused_data+0x22>
 8016382:	4b37      	ldr	r3, [pc, #220]	; (8016460 <tcp_process_refused_data+0xec>)
 8016384:	f240 6209 	movw	r2, #1545	; 0x609
 8016388:	4936      	ldr	r1, [pc, #216]	; (8016464 <tcp_process_refused_data+0xf0>)
 801638a:	4837      	ldr	r0, [pc, #220]	; (8016468 <tcp_process_refused_data+0xf4>)
 801638c:	f007 fe9a 	bl	801e0c4 <iprintf>
 8016390:	f06f 030f 	mvn.w	r3, #15
 8016394:	e060      	b.n	8016458 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801639a:	7b5b      	ldrb	r3, [r3, #13]
 801639c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80163a2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	2200      	movs	r2, #0
 80163a8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d00b      	beq.n	80163cc <tcp_process_refused_data+0x58>
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	6918      	ldr	r0, [r3, #16]
 80163be:	2300      	movs	r3, #0
 80163c0:	68ba      	ldr	r2, [r7, #8]
 80163c2:	6879      	ldr	r1, [r7, #4]
 80163c4:	47a0      	blx	r4
 80163c6:	4603      	mov	r3, r0
 80163c8:	73fb      	strb	r3, [r7, #15]
 80163ca:	e007      	b.n	80163dc <tcp_process_refused_data+0x68>
 80163cc:	2300      	movs	r3, #0
 80163ce:	68ba      	ldr	r2, [r7, #8]
 80163d0:	6879      	ldr	r1, [r7, #4]
 80163d2:	2000      	movs	r0, #0
 80163d4:	f000 f8c0 	bl	8016558 <tcp_recv_null>
 80163d8:	4603      	mov	r3, r0
 80163da:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80163dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d12a      	bne.n	801643a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80163e4:	7bbb      	ldrb	r3, [r7, #14]
 80163e6:	f003 0320 	and.w	r3, r3, #32
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d033      	beq.n	8016456 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80163f2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80163f6:	d005      	beq.n	8016404 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80163fc:	3301      	adds	r3, #1
 80163fe:	b29a      	uxth	r2, r3
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801640a:	2b00      	cmp	r3, #0
 801640c:	d00b      	beq.n	8016426 <tcp_process_refused_data+0xb2>
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	6918      	ldr	r0, [r3, #16]
 8016418:	2300      	movs	r3, #0
 801641a:	2200      	movs	r2, #0
 801641c:	6879      	ldr	r1, [r7, #4]
 801641e:	47a0      	blx	r4
 8016420:	4603      	mov	r3, r0
 8016422:	73fb      	strb	r3, [r7, #15]
 8016424:	e001      	b.n	801642a <tcp_process_refused_data+0xb6>
 8016426:	2300      	movs	r3, #0
 8016428:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801642a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801642e:	f113 0f0d 	cmn.w	r3, #13
 8016432:	d110      	bne.n	8016456 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8016434:	f06f 030c 	mvn.w	r3, #12
 8016438:	e00e      	b.n	8016458 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801643a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801643e:	f113 0f0d 	cmn.w	r3, #13
 8016442:	d102      	bne.n	801644a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8016444:	f06f 030c 	mvn.w	r3, #12
 8016448:	e006      	b.n	8016458 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	68ba      	ldr	r2, [r7, #8]
 801644e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8016450:	f06f 0304 	mvn.w	r3, #4
 8016454:	e000      	b.n	8016458 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8016456:	2300      	movs	r3, #0
}
 8016458:	4618      	mov	r0, r3
 801645a:	3714      	adds	r7, #20
 801645c:	46bd      	mov	sp, r7
 801645e:	bd90      	pop	{r4, r7, pc}
 8016460:	0801fdbc 	.word	0x0801fdbc
 8016464:	080202cc 	.word	0x080202cc
 8016468:	0801fe00 	.word	0x0801fe00

0801646c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b084      	sub	sp, #16
 8016470:	af00      	add	r7, sp, #0
 8016472:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8016474:	e007      	b.n	8016486 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801647c:	6878      	ldr	r0, [r7, #4]
 801647e:	f000 f809 	bl	8016494 <tcp_seg_free>
    seg = next;
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d1f4      	bne.n	8016476 <tcp_segs_free+0xa>
  }
}
 801648c:	bf00      	nop
 801648e:	3710      	adds	r7, #16
 8016490:	46bd      	mov	sp, r7
 8016492:	bd80      	pop	{r7, pc}

08016494 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b082      	sub	sp, #8
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d00c      	beq.n	80164bc <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	685b      	ldr	r3, [r3, #4]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d004      	beq.n	80164b4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	685b      	ldr	r3, [r3, #4]
 80164ae:	4618      	mov	r0, r3
 80164b0:	f7fe fbc2 	bl	8014c38 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80164b4:	6879      	ldr	r1, [r7, #4]
 80164b6:	2003      	movs	r0, #3
 80164b8:	f7fd fd1e 	bl	8013ef8 <memp_free>
  }
}
 80164bc:	bf00      	nop
 80164be:	3708      	adds	r7, #8
 80164c0:	46bd      	mov	sp, r7
 80164c2:	bd80      	pop	{r7, pc}

080164c4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80164c4:	b580      	push	{r7, lr}
 80164c6:	b082      	sub	sp, #8
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
 80164cc:	460b      	mov	r3, r1
 80164ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d107      	bne.n	80164e6 <tcp_setprio+0x22>
 80164d6:	4b07      	ldr	r3, [pc, #28]	; (80164f4 <tcp_setprio+0x30>)
 80164d8:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80164dc:	4906      	ldr	r1, [pc, #24]	; (80164f8 <tcp_setprio+0x34>)
 80164de:	4807      	ldr	r0, [pc, #28]	; (80164fc <tcp_setprio+0x38>)
 80164e0:	f007 fdf0 	bl	801e0c4 <iprintf>
 80164e4:	e002      	b.n	80164ec <tcp_setprio+0x28>

  pcb->prio = prio;
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	78fa      	ldrb	r2, [r7, #3]
 80164ea:	755a      	strb	r2, [r3, #21]
}
 80164ec:	3708      	adds	r7, #8
 80164ee:	46bd      	mov	sp, r7
 80164f0:	bd80      	pop	{r7, pc}
 80164f2:	bf00      	nop
 80164f4:	0801fdbc 	.word	0x0801fdbc
 80164f8:	080202f4 	.word	0x080202f4
 80164fc:	0801fe00 	.word	0x0801fe00

08016500 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b084      	sub	sp, #16
 8016504:	af00      	add	r7, sp, #0
 8016506:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d106      	bne.n	801651c <tcp_seg_copy+0x1c>
 801650e:	4b0f      	ldr	r3, [pc, #60]	; (801654c <tcp_seg_copy+0x4c>)
 8016510:	f240 6282 	movw	r2, #1666	; 0x682
 8016514:	490e      	ldr	r1, [pc, #56]	; (8016550 <tcp_seg_copy+0x50>)
 8016516:	480f      	ldr	r0, [pc, #60]	; (8016554 <tcp_seg_copy+0x54>)
 8016518:	f007 fdd4 	bl	801e0c4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801651c:	2003      	movs	r0, #3
 801651e:	f7fd fc99 	bl	8013e54 <memp_malloc>
 8016522:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d101      	bne.n	801652e <tcp_seg_copy+0x2e>
    return NULL;
 801652a:	2300      	movs	r3, #0
 801652c:	e00a      	b.n	8016544 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801652e:	2210      	movs	r2, #16
 8016530:	6879      	ldr	r1, [r7, #4]
 8016532:	68f8      	ldr	r0, [r7, #12]
 8016534:	f007 fdb3 	bl	801e09e <memcpy>
  pbuf_ref(cseg->p);
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	685b      	ldr	r3, [r3, #4]
 801653c:	4618      	mov	r0, r3
 801653e:	f7fe fc21 	bl	8014d84 <pbuf_ref>
  return cseg;
 8016542:	68fb      	ldr	r3, [r7, #12]
}
 8016544:	4618      	mov	r0, r3
 8016546:	3710      	adds	r7, #16
 8016548:	46bd      	mov	sp, r7
 801654a:	bd80      	pop	{r7, pc}
 801654c:	0801fdbc 	.word	0x0801fdbc
 8016550:	08020310 	.word	0x08020310
 8016554:	0801fe00 	.word	0x0801fe00

08016558 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b084      	sub	sp, #16
 801655c:	af00      	add	r7, sp, #0
 801655e:	60f8      	str	r0, [r7, #12]
 8016560:	60b9      	str	r1, [r7, #8]
 8016562:	607a      	str	r2, [r7, #4]
 8016564:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8016566:	68bb      	ldr	r3, [r7, #8]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d109      	bne.n	8016580 <tcp_recv_null+0x28>
 801656c:	4b12      	ldr	r3, [pc, #72]	; (80165b8 <tcp_recv_null+0x60>)
 801656e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016572:	4912      	ldr	r1, [pc, #72]	; (80165bc <tcp_recv_null+0x64>)
 8016574:	4812      	ldr	r0, [pc, #72]	; (80165c0 <tcp_recv_null+0x68>)
 8016576:	f007 fda5 	bl	801e0c4 <iprintf>
 801657a:	f06f 030f 	mvn.w	r3, #15
 801657e:	e016      	b.n	80165ae <tcp_recv_null+0x56>

  if (p != NULL) {
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d009      	beq.n	801659a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	891b      	ldrh	r3, [r3, #8]
 801658a:	4619      	mov	r1, r3
 801658c:	68b8      	ldr	r0, [r7, #8]
 801658e:	f7ff fab9 	bl	8015b04 <tcp_recved>
    pbuf_free(p);
 8016592:	6878      	ldr	r0, [r7, #4]
 8016594:	f7fe fb50 	bl	8014c38 <pbuf_free>
 8016598:	e008      	b.n	80165ac <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801659a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d104      	bne.n	80165ac <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80165a2:	68b8      	ldr	r0, [r7, #8]
 80165a4:	f7fe ffea 	bl	801557c <tcp_close>
 80165a8:	4603      	mov	r3, r0
 80165aa:	e000      	b.n	80165ae <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80165ac:	2300      	movs	r3, #0
}
 80165ae:	4618      	mov	r0, r3
 80165b0:	3710      	adds	r7, #16
 80165b2:	46bd      	mov	sp, r7
 80165b4:	bd80      	pop	{r7, pc}
 80165b6:	bf00      	nop
 80165b8:	0801fdbc 	.word	0x0801fdbc
 80165bc:	0802032c 	.word	0x0802032c
 80165c0:	0801fe00 	.word	0x0801fe00

080165c4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80165c4:	b580      	push	{r7, lr}
 80165c6:	b086      	sub	sp, #24
 80165c8:	af00      	add	r7, sp, #0
 80165ca:	4603      	mov	r3, r0
 80165cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80165ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	db01      	blt.n	80165da <tcp_kill_prio+0x16>
 80165d6:	79fb      	ldrb	r3, [r7, #7]
 80165d8:	e000      	b.n	80165dc <tcp_kill_prio+0x18>
 80165da:	237f      	movs	r3, #127	; 0x7f
 80165dc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80165de:	7afb      	ldrb	r3, [r7, #11]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d034      	beq.n	801664e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80165e4:	7afb      	ldrb	r3, [r7, #11]
 80165e6:	3b01      	subs	r3, #1
 80165e8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80165ea:	2300      	movs	r3, #0
 80165ec:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80165ee:	2300      	movs	r3, #0
 80165f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80165f2:	4b19      	ldr	r3, [pc, #100]	; (8016658 <tcp_kill_prio+0x94>)
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	617b      	str	r3, [r7, #20]
 80165f8:	e01f      	b.n	801663a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80165fa:	697b      	ldr	r3, [r7, #20]
 80165fc:	7d5b      	ldrb	r3, [r3, #21]
 80165fe:	7afa      	ldrb	r2, [r7, #11]
 8016600:	429a      	cmp	r2, r3
 8016602:	d80c      	bhi.n	801661e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016604:	697b      	ldr	r3, [r7, #20]
 8016606:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8016608:	7afa      	ldrb	r2, [r7, #11]
 801660a:	429a      	cmp	r2, r3
 801660c:	d112      	bne.n	8016634 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801660e:	4b13      	ldr	r3, [pc, #76]	; (801665c <tcp_kill_prio+0x98>)
 8016610:	681a      	ldr	r2, [r3, #0]
 8016612:	697b      	ldr	r3, [r7, #20]
 8016614:	6a1b      	ldr	r3, [r3, #32]
 8016616:	1ad3      	subs	r3, r2, r3
 8016618:	68fa      	ldr	r2, [r7, #12]
 801661a:	429a      	cmp	r2, r3
 801661c:	d80a      	bhi.n	8016634 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801661e:	4b0f      	ldr	r3, [pc, #60]	; (801665c <tcp_kill_prio+0x98>)
 8016620:	681a      	ldr	r2, [r3, #0]
 8016622:	697b      	ldr	r3, [r7, #20]
 8016624:	6a1b      	ldr	r3, [r3, #32]
 8016626:	1ad3      	subs	r3, r2, r3
 8016628:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801662a:	697b      	ldr	r3, [r7, #20]
 801662c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801662e:	697b      	ldr	r3, [r7, #20]
 8016630:	7d5b      	ldrb	r3, [r3, #21]
 8016632:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016634:	697b      	ldr	r3, [r7, #20]
 8016636:	68db      	ldr	r3, [r3, #12]
 8016638:	617b      	str	r3, [r7, #20]
 801663a:	697b      	ldr	r3, [r7, #20]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d1dc      	bne.n	80165fa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8016640:	693b      	ldr	r3, [r7, #16]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d004      	beq.n	8016650 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016646:	6938      	ldr	r0, [r7, #16]
 8016648:	f7ff f882 	bl	8015750 <tcp_abort>
 801664c:	e000      	b.n	8016650 <tcp_kill_prio+0x8c>
    return;
 801664e:	bf00      	nop
  }
}
 8016650:	3718      	adds	r7, #24
 8016652:	46bd      	mov	sp, r7
 8016654:	bd80      	pop	{r7, pc}
 8016656:	bf00      	nop
 8016658:	2000b508 	.word	0x2000b508
 801665c:	2000b50c 	.word	0x2000b50c

08016660 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8016660:	b580      	push	{r7, lr}
 8016662:	b086      	sub	sp, #24
 8016664:	af00      	add	r7, sp, #0
 8016666:	4603      	mov	r3, r0
 8016668:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801666a:	79fb      	ldrb	r3, [r7, #7]
 801666c:	2b08      	cmp	r3, #8
 801666e:	d009      	beq.n	8016684 <tcp_kill_state+0x24>
 8016670:	79fb      	ldrb	r3, [r7, #7]
 8016672:	2b09      	cmp	r3, #9
 8016674:	d006      	beq.n	8016684 <tcp_kill_state+0x24>
 8016676:	4b1a      	ldr	r3, [pc, #104]	; (80166e0 <tcp_kill_state+0x80>)
 8016678:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801667c:	4919      	ldr	r1, [pc, #100]	; (80166e4 <tcp_kill_state+0x84>)
 801667e:	481a      	ldr	r0, [pc, #104]	; (80166e8 <tcp_kill_state+0x88>)
 8016680:	f007 fd20 	bl	801e0c4 <iprintf>

  inactivity = 0;
 8016684:	2300      	movs	r3, #0
 8016686:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016688:	2300      	movs	r3, #0
 801668a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801668c:	4b17      	ldr	r3, [pc, #92]	; (80166ec <tcp_kill_state+0x8c>)
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	617b      	str	r3, [r7, #20]
 8016692:	e017      	b.n	80166c4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8016694:	697b      	ldr	r3, [r7, #20]
 8016696:	7d1b      	ldrb	r3, [r3, #20]
 8016698:	79fa      	ldrb	r2, [r7, #7]
 801669a:	429a      	cmp	r2, r3
 801669c:	d10f      	bne.n	80166be <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801669e:	4b14      	ldr	r3, [pc, #80]	; (80166f0 <tcp_kill_state+0x90>)
 80166a0:	681a      	ldr	r2, [r3, #0]
 80166a2:	697b      	ldr	r3, [r7, #20]
 80166a4:	6a1b      	ldr	r3, [r3, #32]
 80166a6:	1ad3      	subs	r3, r2, r3
 80166a8:	68fa      	ldr	r2, [r7, #12]
 80166aa:	429a      	cmp	r2, r3
 80166ac:	d807      	bhi.n	80166be <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80166ae:	4b10      	ldr	r3, [pc, #64]	; (80166f0 <tcp_kill_state+0x90>)
 80166b0:	681a      	ldr	r2, [r3, #0]
 80166b2:	697b      	ldr	r3, [r7, #20]
 80166b4:	6a1b      	ldr	r3, [r3, #32]
 80166b6:	1ad3      	subs	r3, r2, r3
 80166b8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80166ba:	697b      	ldr	r3, [r7, #20]
 80166bc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80166be:	697b      	ldr	r3, [r7, #20]
 80166c0:	68db      	ldr	r3, [r3, #12]
 80166c2:	617b      	str	r3, [r7, #20]
 80166c4:	697b      	ldr	r3, [r7, #20]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d1e4      	bne.n	8016694 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80166ca:	693b      	ldr	r3, [r7, #16]
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d003      	beq.n	80166d8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80166d0:	2100      	movs	r1, #0
 80166d2:	6938      	ldr	r0, [r7, #16]
 80166d4:	f7fe ff7e 	bl	80155d4 <tcp_abandon>
  }
}
 80166d8:	bf00      	nop
 80166da:	3718      	adds	r7, #24
 80166dc:	46bd      	mov	sp, r7
 80166de:	bd80      	pop	{r7, pc}
 80166e0:	0801fdbc 	.word	0x0801fdbc
 80166e4:	08020348 	.word	0x08020348
 80166e8:	0801fe00 	.word	0x0801fe00
 80166ec:	2000b508 	.word	0x2000b508
 80166f0:	2000b50c 	.word	0x2000b50c

080166f4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b084      	sub	sp, #16
 80166f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80166fa:	2300      	movs	r3, #0
 80166fc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80166fe:	2300      	movs	r3, #0
 8016700:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016702:	4b12      	ldr	r3, [pc, #72]	; (801674c <tcp_kill_timewait+0x58>)
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	60fb      	str	r3, [r7, #12]
 8016708:	e012      	b.n	8016730 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801670a:	4b11      	ldr	r3, [pc, #68]	; (8016750 <tcp_kill_timewait+0x5c>)
 801670c:	681a      	ldr	r2, [r3, #0]
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	6a1b      	ldr	r3, [r3, #32]
 8016712:	1ad3      	subs	r3, r2, r3
 8016714:	687a      	ldr	r2, [r7, #4]
 8016716:	429a      	cmp	r2, r3
 8016718:	d807      	bhi.n	801672a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801671a:	4b0d      	ldr	r3, [pc, #52]	; (8016750 <tcp_kill_timewait+0x5c>)
 801671c:	681a      	ldr	r2, [r3, #0]
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	6a1b      	ldr	r3, [r3, #32]
 8016722:	1ad3      	subs	r3, r2, r3
 8016724:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	68db      	ldr	r3, [r3, #12]
 801672e:	60fb      	str	r3, [r7, #12]
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d1e9      	bne.n	801670a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8016736:	68bb      	ldr	r3, [r7, #8]
 8016738:	2b00      	cmp	r3, #0
 801673a:	d002      	beq.n	8016742 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801673c:	68b8      	ldr	r0, [r7, #8]
 801673e:	f7ff f807 	bl	8015750 <tcp_abort>
  }
}
 8016742:	bf00      	nop
 8016744:	3710      	adds	r7, #16
 8016746:	46bd      	mov	sp, r7
 8016748:	bd80      	pop	{r7, pc}
 801674a:	bf00      	nop
 801674c:	2000b518 	.word	0x2000b518
 8016750:	2000b50c 	.word	0x2000b50c

08016754 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b082      	sub	sp, #8
 8016758:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801675a:	4b10      	ldr	r3, [pc, #64]	; (801679c <tcp_handle_closepend+0x48>)
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016760:	e014      	b.n	801678c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	68db      	ldr	r3, [r3, #12]
 8016766:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	8b5b      	ldrh	r3, [r3, #26]
 801676c:	f003 0308 	and.w	r3, r3, #8
 8016770:	2b00      	cmp	r3, #0
 8016772:	d009      	beq.n	8016788 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	8b5b      	ldrh	r3, [r3, #26]
 8016778:	f023 0308 	bic.w	r3, r3, #8
 801677c:	b29a      	uxth	r2, r3
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8016782:	6878      	ldr	r0, [r7, #4]
 8016784:	f7fe fe94 	bl	80154b0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8016788:	683b      	ldr	r3, [r7, #0]
 801678a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d1e7      	bne.n	8016762 <tcp_handle_closepend+0xe>
  }
}
 8016792:	bf00      	nop
 8016794:	3708      	adds	r7, #8
 8016796:	46bd      	mov	sp, r7
 8016798:	bd80      	pop	{r7, pc}
 801679a:	bf00      	nop
 801679c:	2000b508 	.word	0x2000b508

080167a0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b084      	sub	sp, #16
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	4603      	mov	r3, r0
 80167a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80167aa:	2001      	movs	r0, #1
 80167ac:	f7fd fb52 	bl	8013e54 <memp_malloc>
 80167b0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d126      	bne.n	8016806 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80167b8:	f7ff ffcc 	bl	8016754 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80167bc:	f7ff ff9a 	bl	80166f4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80167c0:	2001      	movs	r0, #1
 80167c2:	f7fd fb47 	bl	8013e54 <memp_malloc>
 80167c6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d11b      	bne.n	8016806 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80167ce:	2009      	movs	r0, #9
 80167d0:	f7ff ff46 	bl	8016660 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80167d4:	2001      	movs	r0, #1
 80167d6:	f7fd fb3d 	bl	8013e54 <memp_malloc>
 80167da:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d111      	bne.n	8016806 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80167e2:	2008      	movs	r0, #8
 80167e4:	f7ff ff3c 	bl	8016660 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80167e8:	2001      	movs	r0, #1
 80167ea:	f7fd fb33 	bl	8013e54 <memp_malloc>
 80167ee:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d107      	bne.n	8016806 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80167f6:	79fb      	ldrb	r3, [r7, #7]
 80167f8:	4618      	mov	r0, r3
 80167fa:	f7ff fee3 	bl	80165c4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80167fe:	2001      	movs	r0, #1
 8016800:	f7fd fb28 	bl	8013e54 <memp_malloc>
 8016804:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d03f      	beq.n	801688c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801680c:	229c      	movs	r2, #156	; 0x9c
 801680e:	2100      	movs	r1, #0
 8016810:	68f8      	ldr	r0, [r7, #12]
 8016812:	f007 fc4f 	bl	801e0b4 <memset>
    pcb->prio = prio;
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	79fa      	ldrb	r2, [r7, #7]
 801681a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8016822:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801682c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	22ff      	movs	r2, #255	; 0xff
 801683a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016842:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	2206      	movs	r2, #6
 8016848:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	2206      	movs	r2, #6
 8016850:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016858:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	2201      	movs	r2, #1
 801685e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8016862:	4b0d      	ldr	r3, [pc, #52]	; (8016898 <tcp_alloc+0xf8>)
 8016864:	681a      	ldr	r2, [r3, #0]
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801686a:	4b0c      	ldr	r3, [pc, #48]	; (801689c <tcp_alloc+0xfc>)
 801686c:	781a      	ldrb	r2, [r3, #0]
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8016878:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	4a08      	ldr	r2, [pc, #32]	; (80168a0 <tcp_alloc+0x100>)
 8016880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	4a07      	ldr	r2, [pc, #28]	; (80168a4 <tcp_alloc+0x104>)
 8016888:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801688c:	68fb      	ldr	r3, [r7, #12]
}
 801688e:	4618      	mov	r0, r3
 8016890:	3710      	adds	r7, #16
 8016892:	46bd      	mov	sp, r7
 8016894:	bd80      	pop	{r7, pc}
 8016896:	bf00      	nop
 8016898:	2000b50c 	.word	0x2000b50c
 801689c:	20004526 	.word	0x20004526
 80168a0:	08016559 	.word	0x08016559
 80168a4:	006ddd00 	.word	0x006ddd00

080168a8 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80168a8:	b580      	push	{r7, lr}
 80168aa:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80168ac:	2040      	movs	r0, #64	; 0x40
 80168ae:	f7ff ff77 	bl	80167a0 <tcp_alloc>
 80168b2:	4603      	mov	r3, r0
}
 80168b4:	4618      	mov	r0, r3
 80168b6:	bd80      	pop	{r7, pc}

080168b8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b084      	sub	sp, #16
 80168bc:	af00      	add	r7, sp, #0
 80168be:	4603      	mov	r3, r0
 80168c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80168c2:	2040      	movs	r0, #64	; 0x40
 80168c4:	f7ff ff6c 	bl	80167a0 <tcp_alloc>
 80168c8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80168ca:	68fb      	ldr	r3, [r7, #12]
}
 80168cc:	4618      	mov	r0, r3
 80168ce:	3710      	adds	r7, #16
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd80      	pop	{r7, pc}

080168d4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80168d4:	b480      	push	{r7}
 80168d6:	b083      	sub	sp, #12
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
 80168dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d002      	beq.n	80168ea <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	683a      	ldr	r2, [r7, #0]
 80168e8:	611a      	str	r2, [r3, #16]
  }
}
 80168ea:	bf00      	nop
 80168ec:	370c      	adds	r7, #12
 80168ee:	46bd      	mov	sp, r7
 80168f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f4:	4770      	bx	lr
	...

080168f8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b082      	sub	sp, #8
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
 8016900:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d00e      	beq.n	8016926 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	7d1b      	ldrb	r3, [r3, #20]
 801690c:	2b01      	cmp	r3, #1
 801690e:	d106      	bne.n	801691e <tcp_recv+0x26>
 8016910:	4b07      	ldr	r3, [pc, #28]	; (8016930 <tcp_recv+0x38>)
 8016912:	f240 72df 	movw	r2, #2015	; 0x7df
 8016916:	4907      	ldr	r1, [pc, #28]	; (8016934 <tcp_recv+0x3c>)
 8016918:	4807      	ldr	r0, [pc, #28]	; (8016938 <tcp_recv+0x40>)
 801691a:	f007 fbd3 	bl	801e0c4 <iprintf>
    pcb->recv = recv;
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	683a      	ldr	r2, [r7, #0]
 8016922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8016926:	bf00      	nop
 8016928:	3708      	adds	r7, #8
 801692a:	46bd      	mov	sp, r7
 801692c:	bd80      	pop	{r7, pc}
 801692e:	bf00      	nop
 8016930:	0801fdbc 	.word	0x0801fdbc
 8016934:	08020358 	.word	0x08020358
 8016938:	0801fe00 	.word	0x0801fe00

0801693c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b082      	sub	sp, #8
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
 8016944:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	2b00      	cmp	r3, #0
 801694a:	d00e      	beq.n	801696a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	7d1b      	ldrb	r3, [r3, #20]
 8016950:	2b01      	cmp	r3, #1
 8016952:	d106      	bne.n	8016962 <tcp_sent+0x26>
 8016954:	4b07      	ldr	r3, [pc, #28]	; (8016974 <tcp_sent+0x38>)
 8016956:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801695a:	4907      	ldr	r1, [pc, #28]	; (8016978 <tcp_sent+0x3c>)
 801695c:	4807      	ldr	r0, [pc, #28]	; (801697c <tcp_sent+0x40>)
 801695e:	f007 fbb1 	bl	801e0c4 <iprintf>
    pcb->sent = sent;
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	683a      	ldr	r2, [r7, #0]
 8016966:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801696a:	bf00      	nop
 801696c:	3708      	adds	r7, #8
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}
 8016972:	bf00      	nop
 8016974:	0801fdbc 	.word	0x0801fdbc
 8016978:	08020380 	.word	0x08020380
 801697c:	0801fe00 	.word	0x0801fe00

08016980 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b082      	sub	sp, #8
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
 8016988:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d00e      	beq.n	80169ae <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	7d1b      	ldrb	r3, [r3, #20]
 8016994:	2b01      	cmp	r3, #1
 8016996:	d106      	bne.n	80169a6 <tcp_err+0x26>
 8016998:	4b07      	ldr	r3, [pc, #28]	; (80169b8 <tcp_err+0x38>)
 801699a:	f640 020d 	movw	r2, #2061	; 0x80d
 801699e:	4907      	ldr	r1, [pc, #28]	; (80169bc <tcp_err+0x3c>)
 80169a0:	4807      	ldr	r0, [pc, #28]	; (80169c0 <tcp_err+0x40>)
 80169a2:	f007 fb8f 	bl	801e0c4 <iprintf>
    pcb->errf = err;
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	683a      	ldr	r2, [r7, #0]
 80169aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80169ae:	bf00      	nop
 80169b0:	3708      	adds	r7, #8
 80169b2:	46bd      	mov	sp, r7
 80169b4:	bd80      	pop	{r7, pc}
 80169b6:	bf00      	nop
 80169b8:	0801fdbc 	.word	0x0801fdbc
 80169bc:	080203a8 	.word	0x080203a8
 80169c0:	0801fe00 	.word	0x0801fe00

080169c4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80169c4:	b480      	push	{r7}
 80169c6:	b085      	sub	sp, #20
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]
 80169cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d008      	beq.n	80169e6 <tcp_accept+0x22>
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	7d1b      	ldrb	r3, [r3, #20]
 80169d8:	2b01      	cmp	r3, #1
 80169da:	d104      	bne.n	80169e6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	683a      	ldr	r2, [r7, #0]
 80169e4:	619a      	str	r2, [r3, #24]
  }
}
 80169e6:	bf00      	nop
 80169e8:	3714      	adds	r7, #20
 80169ea:	46bd      	mov	sp, r7
 80169ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f0:	4770      	bx	lr
	...

080169f4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b084      	sub	sp, #16
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	60f8      	str	r0, [r7, #12]
 80169fc:	60b9      	str	r1, [r7, #8]
 80169fe:	4613      	mov	r3, r2
 8016a00:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d107      	bne.n	8016a18 <tcp_poll+0x24>
 8016a08:	4b0e      	ldr	r3, [pc, #56]	; (8016a44 <tcp_poll+0x50>)
 8016a0a:	f640 023d 	movw	r2, #2109	; 0x83d
 8016a0e:	490e      	ldr	r1, [pc, #56]	; (8016a48 <tcp_poll+0x54>)
 8016a10:	480e      	ldr	r0, [pc, #56]	; (8016a4c <tcp_poll+0x58>)
 8016a12:	f007 fb57 	bl	801e0c4 <iprintf>
 8016a16:	e011      	b.n	8016a3c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	7d1b      	ldrb	r3, [r3, #20]
 8016a1c:	2b01      	cmp	r3, #1
 8016a1e:	d106      	bne.n	8016a2e <tcp_poll+0x3a>
 8016a20:	4b08      	ldr	r3, [pc, #32]	; (8016a44 <tcp_poll+0x50>)
 8016a22:	f640 023e 	movw	r2, #2110	; 0x83e
 8016a26:	490a      	ldr	r1, [pc, #40]	; (8016a50 <tcp_poll+0x5c>)
 8016a28:	4808      	ldr	r0, [pc, #32]	; (8016a4c <tcp_poll+0x58>)
 8016a2a:	f007 fb4b 	bl	801e0c4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	68ba      	ldr	r2, [r7, #8]
 8016a32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	79fa      	ldrb	r2, [r7, #7]
 8016a3a:	775a      	strb	r2, [r3, #29]
}
 8016a3c:	3710      	adds	r7, #16
 8016a3e:	46bd      	mov	sp, r7
 8016a40:	bd80      	pop	{r7, pc}
 8016a42:	bf00      	nop
 8016a44:	0801fdbc 	.word	0x0801fdbc
 8016a48:	080203d0 	.word	0x080203d0
 8016a4c:	0801fe00 	.word	0x0801fe00
 8016a50:	080203e8 	.word	0x080203e8

08016a54 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b082      	sub	sp, #8
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d107      	bne.n	8016a72 <tcp_pcb_purge+0x1e>
 8016a62:	4b21      	ldr	r3, [pc, #132]	; (8016ae8 <tcp_pcb_purge+0x94>)
 8016a64:	f640 0251 	movw	r2, #2129	; 0x851
 8016a68:	4920      	ldr	r1, [pc, #128]	; (8016aec <tcp_pcb_purge+0x98>)
 8016a6a:	4821      	ldr	r0, [pc, #132]	; (8016af0 <tcp_pcb_purge+0x9c>)
 8016a6c:	f007 fb2a 	bl	801e0c4 <iprintf>
 8016a70:	e037      	b.n	8016ae2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	7d1b      	ldrb	r3, [r3, #20]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d033      	beq.n	8016ae2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8016a7e:	2b0a      	cmp	r3, #10
 8016a80:	d02f      	beq.n	8016ae2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8016a86:	2b01      	cmp	r3, #1
 8016a88:	d02b      	beq.n	8016ae2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d007      	beq.n	8016aa2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016a96:	4618      	mov	r0, r3
 8016a98:	f7fe f8ce 	bl	8014c38 <pbuf_free>
      pcb->refused_data = NULL;
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	2200      	movs	r2, #0
 8016aa0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d002      	beq.n	8016ab0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8016aaa:	6878      	ldr	r0, [r7, #4]
 8016aac:	f000 f986 	bl	8016dbc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016ab6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016abc:	4618      	mov	r0, r3
 8016abe:	f7ff fcd5 	bl	801646c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	f7ff fcd0 	bl	801646c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	2200      	movs	r2, #0
 8016ad0:	66da      	str	r2, [r3, #108]	; 0x6c
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	2200      	movs	r2, #0
 8016ade:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8016ae2:	3708      	adds	r7, #8
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	bd80      	pop	{r7, pc}
 8016ae8:	0801fdbc 	.word	0x0801fdbc
 8016aec:	08020408 	.word	0x08020408
 8016af0:	0801fe00 	.word	0x0801fe00

08016af4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b084      	sub	sp, #16
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
 8016afc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8016afe:	683b      	ldr	r3, [r7, #0]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d106      	bne.n	8016b12 <tcp_pcb_remove+0x1e>
 8016b04:	4b3e      	ldr	r3, [pc, #248]	; (8016c00 <tcp_pcb_remove+0x10c>)
 8016b06:	f640 0283 	movw	r2, #2179	; 0x883
 8016b0a:	493e      	ldr	r1, [pc, #248]	; (8016c04 <tcp_pcb_remove+0x110>)
 8016b0c:	483e      	ldr	r0, [pc, #248]	; (8016c08 <tcp_pcb_remove+0x114>)
 8016b0e:	f007 fad9 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d106      	bne.n	8016b26 <tcp_pcb_remove+0x32>
 8016b18:	4b39      	ldr	r3, [pc, #228]	; (8016c00 <tcp_pcb_remove+0x10c>)
 8016b1a:	f640 0284 	movw	r2, #2180	; 0x884
 8016b1e:	493b      	ldr	r1, [pc, #236]	; (8016c0c <tcp_pcb_remove+0x118>)
 8016b20:	4839      	ldr	r0, [pc, #228]	; (8016c08 <tcp_pcb_remove+0x114>)
 8016b22:	f007 facf 	bl	801e0c4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	683a      	ldr	r2, [r7, #0]
 8016b2c:	429a      	cmp	r2, r3
 8016b2e:	d105      	bne.n	8016b3c <tcp_pcb_remove+0x48>
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	68da      	ldr	r2, [r3, #12]
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	601a      	str	r2, [r3, #0]
 8016b3a:	e013      	b.n	8016b64 <tcp_pcb_remove+0x70>
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	60fb      	str	r3, [r7, #12]
 8016b42:	e00c      	b.n	8016b5e <tcp_pcb_remove+0x6a>
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	68db      	ldr	r3, [r3, #12]
 8016b48:	683a      	ldr	r2, [r7, #0]
 8016b4a:	429a      	cmp	r2, r3
 8016b4c:	d104      	bne.n	8016b58 <tcp_pcb_remove+0x64>
 8016b4e:	683b      	ldr	r3, [r7, #0]
 8016b50:	68da      	ldr	r2, [r3, #12]
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	60da      	str	r2, [r3, #12]
 8016b56:	e005      	b.n	8016b64 <tcp_pcb_remove+0x70>
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	68db      	ldr	r3, [r3, #12]
 8016b5c:	60fb      	str	r3, [r7, #12]
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d1ef      	bne.n	8016b44 <tcp_pcb_remove+0x50>
 8016b64:	683b      	ldr	r3, [r7, #0]
 8016b66:	2200      	movs	r2, #0
 8016b68:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8016b6a:	6838      	ldr	r0, [r7, #0]
 8016b6c:	f7ff ff72 	bl	8016a54 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8016b70:	683b      	ldr	r3, [r7, #0]
 8016b72:	7d1b      	ldrb	r3, [r3, #20]
 8016b74:	2b0a      	cmp	r3, #10
 8016b76:	d013      	beq.n	8016ba0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8016b78:	683b      	ldr	r3, [r7, #0]
 8016b7a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8016b7c:	2b01      	cmp	r3, #1
 8016b7e:	d00f      	beq.n	8016ba0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8016b80:	683b      	ldr	r3, [r7, #0]
 8016b82:	8b5b      	ldrh	r3, [r3, #26]
 8016b84:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d009      	beq.n	8016ba0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8016b8c:	683b      	ldr	r3, [r7, #0]
 8016b8e:	8b5b      	ldrh	r3, [r3, #26]
 8016b90:	f043 0302 	orr.w	r3, r3, #2
 8016b94:	b29a      	uxth	r2, r3
 8016b96:	683b      	ldr	r3, [r7, #0]
 8016b98:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016b9a:	6838      	ldr	r0, [r7, #0]
 8016b9c:	f003 fbc2 	bl	801a324 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016ba0:	683b      	ldr	r3, [r7, #0]
 8016ba2:	7d1b      	ldrb	r3, [r3, #20]
 8016ba4:	2b01      	cmp	r3, #1
 8016ba6:	d020      	beq.n	8016bea <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016ba8:	683b      	ldr	r3, [r7, #0]
 8016baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d006      	beq.n	8016bbe <tcp_pcb_remove+0xca>
 8016bb0:	4b13      	ldr	r3, [pc, #76]	; (8016c00 <tcp_pcb_remove+0x10c>)
 8016bb2:	f640 0293 	movw	r2, #2195	; 0x893
 8016bb6:	4916      	ldr	r1, [pc, #88]	; (8016c10 <tcp_pcb_remove+0x11c>)
 8016bb8:	4813      	ldr	r0, [pc, #76]	; (8016c08 <tcp_pcb_remove+0x114>)
 8016bba:	f007 fa83 	bl	801e0c4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8016bbe:	683b      	ldr	r3, [r7, #0]
 8016bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d006      	beq.n	8016bd4 <tcp_pcb_remove+0xe0>
 8016bc6:	4b0e      	ldr	r3, [pc, #56]	; (8016c00 <tcp_pcb_remove+0x10c>)
 8016bc8:	f640 0294 	movw	r2, #2196	; 0x894
 8016bcc:	4911      	ldr	r1, [pc, #68]	; (8016c14 <tcp_pcb_remove+0x120>)
 8016bce:	480e      	ldr	r0, [pc, #56]	; (8016c08 <tcp_pcb_remove+0x114>)
 8016bd0:	f007 fa78 	bl	801e0c4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d006      	beq.n	8016bea <tcp_pcb_remove+0xf6>
 8016bdc:	4b08      	ldr	r3, [pc, #32]	; (8016c00 <tcp_pcb_remove+0x10c>)
 8016bde:	f640 0296 	movw	r2, #2198	; 0x896
 8016be2:	490d      	ldr	r1, [pc, #52]	; (8016c18 <tcp_pcb_remove+0x124>)
 8016be4:	4808      	ldr	r0, [pc, #32]	; (8016c08 <tcp_pcb_remove+0x114>)
 8016be6:	f007 fa6d 	bl	801e0c4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8016bea:	683b      	ldr	r3, [r7, #0]
 8016bec:	2200      	movs	r2, #0
 8016bee:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016bf0:	683b      	ldr	r3, [r7, #0]
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8016bf6:	bf00      	nop
 8016bf8:	3710      	adds	r7, #16
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd80      	pop	{r7, pc}
 8016bfe:	bf00      	nop
 8016c00:	0801fdbc 	.word	0x0801fdbc
 8016c04:	08020424 	.word	0x08020424
 8016c08:	0801fe00 	.word	0x0801fe00
 8016c0c:	08020440 	.word	0x08020440
 8016c10:	08020460 	.word	0x08020460
 8016c14:	08020478 	.word	0x08020478
 8016c18:	08020494 	.word	0x08020494

08016c1c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b082      	sub	sp, #8
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d106      	bne.n	8016c38 <tcp_next_iss+0x1c>
 8016c2a:	4b0a      	ldr	r3, [pc, #40]	; (8016c54 <tcp_next_iss+0x38>)
 8016c2c:	f640 02af 	movw	r2, #2223	; 0x8af
 8016c30:	4909      	ldr	r1, [pc, #36]	; (8016c58 <tcp_next_iss+0x3c>)
 8016c32:	480a      	ldr	r0, [pc, #40]	; (8016c5c <tcp_next_iss+0x40>)
 8016c34:	f007 fa46 	bl	801e0c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8016c38:	4b09      	ldr	r3, [pc, #36]	; (8016c60 <tcp_next_iss+0x44>)
 8016c3a:	681a      	ldr	r2, [r3, #0]
 8016c3c:	4b09      	ldr	r3, [pc, #36]	; (8016c64 <tcp_next_iss+0x48>)
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	4413      	add	r3, r2
 8016c42:	4a07      	ldr	r2, [pc, #28]	; (8016c60 <tcp_next_iss+0x44>)
 8016c44:	6013      	str	r3, [r2, #0]
  return iss;
 8016c46:	4b06      	ldr	r3, [pc, #24]	; (8016c60 <tcp_next_iss+0x44>)
 8016c48:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	3708      	adds	r7, #8
 8016c4e:	46bd      	mov	sp, r7
 8016c50:	bd80      	pop	{r7, pc}
 8016c52:	bf00      	nop
 8016c54:	0801fdbc 	.word	0x0801fdbc
 8016c58:	080204ac 	.word	0x080204ac
 8016c5c:	0801fe00 	.word	0x0801fe00
 8016c60:	20000054 	.word	0x20000054
 8016c64:	2000b50c 	.word	0x2000b50c

08016c68 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b086      	sub	sp, #24
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	4603      	mov	r3, r0
 8016c70:	60b9      	str	r1, [r7, #8]
 8016c72:	607a      	str	r2, [r7, #4]
 8016c74:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d106      	bne.n	8016c8a <tcp_eff_send_mss_netif+0x22>
 8016c7c:	4b14      	ldr	r3, [pc, #80]	; (8016cd0 <tcp_eff_send_mss_netif+0x68>)
 8016c7e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8016c82:	4914      	ldr	r1, [pc, #80]	; (8016cd4 <tcp_eff_send_mss_netif+0x6c>)
 8016c84:	4814      	ldr	r0, [pc, #80]	; (8016cd8 <tcp_eff_send_mss_netif+0x70>)
 8016c86:	f007 fa1d 	bl	801e0c4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8016c8a:	68bb      	ldr	r3, [r7, #8]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d101      	bne.n	8016c94 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016c90:	89fb      	ldrh	r3, [r7, #14]
 8016c92:	e019      	b.n	8016cc8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8016c94:	68bb      	ldr	r3, [r7, #8]
 8016c96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016c98:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8016c9a:	8afb      	ldrh	r3, [r7, #22]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d012      	beq.n	8016cc6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016ca0:	2328      	movs	r3, #40	; 0x28
 8016ca2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016ca4:	8afa      	ldrh	r2, [r7, #22]
 8016ca6:	8abb      	ldrh	r3, [r7, #20]
 8016ca8:	429a      	cmp	r2, r3
 8016caa:	d904      	bls.n	8016cb6 <tcp_eff_send_mss_netif+0x4e>
 8016cac:	8afa      	ldrh	r2, [r7, #22]
 8016cae:	8abb      	ldrh	r3, [r7, #20]
 8016cb0:	1ad3      	subs	r3, r2, r3
 8016cb2:	b29b      	uxth	r3, r3
 8016cb4:	e000      	b.n	8016cb8 <tcp_eff_send_mss_netif+0x50>
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016cba:	8a7a      	ldrh	r2, [r7, #18]
 8016cbc:	89fb      	ldrh	r3, [r7, #14]
 8016cbe:	4293      	cmp	r3, r2
 8016cc0:	bf28      	it	cs
 8016cc2:	4613      	movcs	r3, r2
 8016cc4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8016cc6:	89fb      	ldrh	r3, [r7, #14]
}
 8016cc8:	4618      	mov	r0, r3
 8016cca:	3718      	adds	r7, #24
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	bd80      	pop	{r7, pc}
 8016cd0:	0801fdbc 	.word	0x0801fdbc
 8016cd4:	080204c8 	.word	0x080204c8
 8016cd8:	0801fe00 	.word	0x0801fe00

08016cdc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b084      	sub	sp, #16
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	6078      	str	r0, [r7, #4]
 8016ce4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8016ce6:	683b      	ldr	r3, [r7, #0]
 8016ce8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d119      	bne.n	8016d24 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016cf0:	4b10      	ldr	r3, [pc, #64]	; (8016d34 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8016cf2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8016cf6:	4910      	ldr	r1, [pc, #64]	; (8016d38 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8016cf8:	4810      	ldr	r0, [pc, #64]	; (8016d3c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8016cfa:	f007 f9e3 	bl	801e0c4 <iprintf>

  while (pcb != NULL) {
 8016cfe:	e011      	b.n	8016d24 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	681a      	ldr	r2, [r3, #0]
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	429a      	cmp	r2, r3
 8016d0a:	d108      	bne.n	8016d1e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	68db      	ldr	r3, [r3, #12]
 8016d10:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8016d12:	68f8      	ldr	r0, [r7, #12]
 8016d14:	f7fe fd1c 	bl	8015750 <tcp_abort>
      pcb = next;
 8016d18:	68bb      	ldr	r3, [r7, #8]
 8016d1a:	60fb      	str	r3, [r7, #12]
 8016d1c:	e002      	b.n	8016d24 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	68db      	ldr	r3, [r3, #12]
 8016d22:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d1ea      	bne.n	8016d00 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8016d2a:	bf00      	nop
 8016d2c:	3710      	adds	r7, #16
 8016d2e:	46bd      	mov	sp, r7
 8016d30:	bd80      	pop	{r7, pc}
 8016d32:	bf00      	nop
 8016d34:	0801fdbc 	.word	0x0801fdbc
 8016d38:	080204f0 	.word	0x080204f0
 8016d3c:	0801fe00 	.word	0x0801fe00

08016d40 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b084      	sub	sp, #16
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	6078      	str	r0, [r7, #4]
 8016d48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d02a      	beq.n	8016da6 <tcp_netif_ip_addr_changed+0x66>
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d026      	beq.n	8016da6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8016d58:	4b15      	ldr	r3, [pc, #84]	; (8016db0 <tcp_netif_ip_addr_changed+0x70>)
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	4619      	mov	r1, r3
 8016d5e:	6878      	ldr	r0, [r7, #4]
 8016d60:	f7ff ffbc 	bl	8016cdc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8016d64:	4b13      	ldr	r3, [pc, #76]	; (8016db4 <tcp_netif_ip_addr_changed+0x74>)
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	4619      	mov	r1, r3
 8016d6a:	6878      	ldr	r0, [r7, #4]
 8016d6c:	f7ff ffb6 	bl	8016cdc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016d70:	683b      	ldr	r3, [r7, #0]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d017      	beq.n	8016da6 <tcp_netif_ip_addr_changed+0x66>
 8016d76:	683b      	ldr	r3, [r7, #0]
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d013      	beq.n	8016da6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016d7e:	4b0e      	ldr	r3, [pc, #56]	; (8016db8 <tcp_netif_ip_addr_changed+0x78>)
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	60fb      	str	r3, [r7, #12]
 8016d84:	e00c      	b.n	8016da0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	681a      	ldr	r2, [r3, #0]
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	429a      	cmp	r2, r3
 8016d90:	d103      	bne.n	8016d9a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8016d92:	683b      	ldr	r3, [r7, #0]
 8016d94:	681a      	ldr	r2, [r3, #0]
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	68db      	ldr	r3, [r3, #12]
 8016d9e:	60fb      	str	r3, [r7, #12]
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d1ef      	bne.n	8016d86 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8016da6:	bf00      	nop
 8016da8:	3710      	adds	r7, #16
 8016daa:	46bd      	mov	sp, r7
 8016dac:	bd80      	pop	{r7, pc}
 8016dae:	bf00      	nop
 8016db0:	2000b508 	.word	0x2000b508
 8016db4:	2000b514 	.word	0x2000b514
 8016db8:	2000b510 	.word	0x2000b510

08016dbc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016dbc:	b580      	push	{r7, lr}
 8016dbe:	b082      	sub	sp, #8
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d007      	beq.n	8016ddc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	f7ff fb4b 	bl	801646c <tcp_segs_free>
    pcb->ooseq = NULL;
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	2200      	movs	r2, #0
 8016dda:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016ddc:	bf00      	nop
 8016dde:	3708      	adds	r7, #8
 8016de0:	46bd      	mov	sp, r7
 8016de2:	bd80      	pop	{r7, pc}

08016de4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016de4:	b590      	push	{r4, r7, lr}
 8016de6:	b08d      	sub	sp, #52	; 0x34
 8016de8:	af04      	add	r7, sp, #16
 8016dea:	6078      	str	r0, [r7, #4]
 8016dec:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d105      	bne.n	8016e00 <tcp_input+0x1c>
 8016df4:	4b9b      	ldr	r3, [pc, #620]	; (8017064 <tcp_input+0x280>)
 8016df6:	2283      	movs	r2, #131	; 0x83
 8016df8:	499b      	ldr	r1, [pc, #620]	; (8017068 <tcp_input+0x284>)
 8016dfa:	489c      	ldr	r0, [pc, #624]	; (801706c <tcp_input+0x288>)
 8016dfc:	f007 f962 	bl	801e0c4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	685b      	ldr	r3, [r3, #4]
 8016e04:	4a9a      	ldr	r2, [pc, #616]	; (8017070 <tcp_input+0x28c>)
 8016e06:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	895b      	ldrh	r3, [r3, #10]
 8016e0c:	2b13      	cmp	r3, #19
 8016e0e:	f240 83c4 	bls.w	801759a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016e12:	4b98      	ldr	r3, [pc, #608]	; (8017074 <tcp_input+0x290>)
 8016e14:	695a      	ldr	r2, [r3, #20]
 8016e16:	4b97      	ldr	r3, [pc, #604]	; (8017074 <tcp_input+0x290>)
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	4619      	mov	r1, r3
 8016e1c:	4610      	mov	r0, r2
 8016e1e:	f006 f8a9 	bl	801cf74 <ip4_addr_isbroadcast_u32>
 8016e22:	4603      	mov	r3, r0
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	f040 83ba 	bne.w	801759e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8016e2a:	4b92      	ldr	r3, [pc, #584]	; (8017074 <tcp_input+0x290>)
 8016e2c:	695b      	ldr	r3, [r3, #20]
 8016e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016e32:	2be0      	cmp	r3, #224	; 0xe0
 8016e34:	f000 83b3 	beq.w	801759e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8016e38:	4b8d      	ldr	r3, [pc, #564]	; (8017070 <tcp_input+0x28c>)
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	899b      	ldrh	r3, [r3, #12]
 8016e3e:	b29b      	uxth	r3, r3
 8016e40:	4618      	mov	r0, r3
 8016e42:	f7fc fb1b 	bl	801347c <lwip_htons>
 8016e46:	4603      	mov	r3, r0
 8016e48:	0b1b      	lsrs	r3, r3, #12
 8016e4a:	b29b      	uxth	r3, r3
 8016e4c:	b2db      	uxtb	r3, r3
 8016e4e:	009b      	lsls	r3, r3, #2
 8016e50:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8016e52:	7cbb      	ldrb	r3, [r7, #18]
 8016e54:	2b13      	cmp	r3, #19
 8016e56:	f240 83a2 	bls.w	801759e <tcp_input+0x7ba>
 8016e5a:	7cbb      	ldrb	r3, [r7, #18]
 8016e5c:	b29a      	uxth	r2, r3
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	891b      	ldrh	r3, [r3, #8]
 8016e62:	429a      	cmp	r2, r3
 8016e64:	f200 839b 	bhi.w	801759e <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8016e68:	7cbb      	ldrb	r3, [r7, #18]
 8016e6a:	b29b      	uxth	r3, r3
 8016e6c:	3b14      	subs	r3, #20
 8016e6e:	b29a      	uxth	r2, r3
 8016e70:	4b81      	ldr	r3, [pc, #516]	; (8017078 <tcp_input+0x294>)
 8016e72:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8016e74:	4b81      	ldr	r3, [pc, #516]	; (801707c <tcp_input+0x298>)
 8016e76:	2200      	movs	r2, #0
 8016e78:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	895a      	ldrh	r2, [r3, #10]
 8016e7e:	7cbb      	ldrb	r3, [r7, #18]
 8016e80:	b29b      	uxth	r3, r3
 8016e82:	429a      	cmp	r2, r3
 8016e84:	d309      	bcc.n	8016e9a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8016e86:	4b7c      	ldr	r3, [pc, #496]	; (8017078 <tcp_input+0x294>)
 8016e88:	881a      	ldrh	r2, [r3, #0]
 8016e8a:	4b7d      	ldr	r3, [pc, #500]	; (8017080 <tcp_input+0x29c>)
 8016e8c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016e8e:	7cbb      	ldrb	r3, [r7, #18]
 8016e90:	4619      	mov	r1, r3
 8016e92:	6878      	ldr	r0, [r7, #4]
 8016e94:	f7fd fe4a 	bl	8014b2c <pbuf_remove_header>
 8016e98:	e04e      	b.n	8016f38 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d105      	bne.n	8016eae <tcp_input+0xca>
 8016ea2:	4b70      	ldr	r3, [pc, #448]	; (8017064 <tcp_input+0x280>)
 8016ea4:	22c2      	movs	r2, #194	; 0xc2
 8016ea6:	4977      	ldr	r1, [pc, #476]	; (8017084 <tcp_input+0x2a0>)
 8016ea8:	4870      	ldr	r0, [pc, #448]	; (801706c <tcp_input+0x288>)
 8016eaa:	f007 f90b 	bl	801e0c4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016eae:	2114      	movs	r1, #20
 8016eb0:	6878      	ldr	r0, [r7, #4]
 8016eb2:	f7fd fe3b 	bl	8014b2c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	895a      	ldrh	r2, [r3, #10]
 8016eba:	4b71      	ldr	r3, [pc, #452]	; (8017080 <tcp_input+0x29c>)
 8016ebc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016ebe:	4b6e      	ldr	r3, [pc, #440]	; (8017078 <tcp_input+0x294>)
 8016ec0:	881a      	ldrh	r2, [r3, #0]
 8016ec2:	4b6f      	ldr	r3, [pc, #444]	; (8017080 <tcp_input+0x29c>)
 8016ec4:	881b      	ldrh	r3, [r3, #0]
 8016ec6:	1ad3      	subs	r3, r2, r3
 8016ec8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8016eca:	4b6d      	ldr	r3, [pc, #436]	; (8017080 <tcp_input+0x29c>)
 8016ecc:	881b      	ldrh	r3, [r3, #0]
 8016ece:	4619      	mov	r1, r3
 8016ed0:	6878      	ldr	r0, [r7, #4]
 8016ed2:	f7fd fe2b 	bl	8014b2c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	895b      	ldrh	r3, [r3, #10]
 8016edc:	8a3a      	ldrh	r2, [r7, #16]
 8016ede:	429a      	cmp	r2, r3
 8016ee0:	f200 835f 	bhi.w	80175a2 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	685b      	ldr	r3, [r3, #4]
 8016eea:	4a64      	ldr	r2, [pc, #400]	; (801707c <tcp_input+0x298>)
 8016eec:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	8a3a      	ldrh	r2, [r7, #16]
 8016ef4:	4611      	mov	r1, r2
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	f7fd fe18 	bl	8014b2c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	891a      	ldrh	r2, [r3, #8]
 8016f00:	8a3b      	ldrh	r3, [r7, #16]
 8016f02:	1ad3      	subs	r3, r2, r3
 8016f04:	b29a      	uxth	r2, r3
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	895b      	ldrh	r3, [r3, #10]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d005      	beq.n	8016f1e <tcp_input+0x13a>
 8016f12:	4b54      	ldr	r3, [pc, #336]	; (8017064 <tcp_input+0x280>)
 8016f14:	22df      	movs	r2, #223	; 0xdf
 8016f16:	495c      	ldr	r1, [pc, #368]	; (8017088 <tcp_input+0x2a4>)
 8016f18:	4854      	ldr	r0, [pc, #336]	; (801706c <tcp_input+0x288>)
 8016f1a:	f007 f8d3 	bl	801e0c4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	891a      	ldrh	r2, [r3, #8]
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	891b      	ldrh	r3, [r3, #8]
 8016f28:	429a      	cmp	r2, r3
 8016f2a:	d005      	beq.n	8016f38 <tcp_input+0x154>
 8016f2c:	4b4d      	ldr	r3, [pc, #308]	; (8017064 <tcp_input+0x280>)
 8016f2e:	22e0      	movs	r2, #224	; 0xe0
 8016f30:	4956      	ldr	r1, [pc, #344]	; (801708c <tcp_input+0x2a8>)
 8016f32:	484e      	ldr	r0, [pc, #312]	; (801706c <tcp_input+0x288>)
 8016f34:	f007 f8c6 	bl	801e0c4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016f38:	4b4d      	ldr	r3, [pc, #308]	; (8017070 <tcp_input+0x28c>)
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	881b      	ldrh	r3, [r3, #0]
 8016f3e:	b29a      	uxth	r2, r3
 8016f40:	4b4b      	ldr	r3, [pc, #300]	; (8017070 <tcp_input+0x28c>)
 8016f42:	681c      	ldr	r4, [r3, #0]
 8016f44:	4610      	mov	r0, r2
 8016f46:	f7fc fa99 	bl	801347c <lwip_htons>
 8016f4a:	4603      	mov	r3, r0
 8016f4c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8016f4e:	4b48      	ldr	r3, [pc, #288]	; (8017070 <tcp_input+0x28c>)
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	885b      	ldrh	r3, [r3, #2]
 8016f54:	b29a      	uxth	r2, r3
 8016f56:	4b46      	ldr	r3, [pc, #280]	; (8017070 <tcp_input+0x28c>)
 8016f58:	681c      	ldr	r4, [r3, #0]
 8016f5a:	4610      	mov	r0, r2
 8016f5c:	f7fc fa8e 	bl	801347c <lwip_htons>
 8016f60:	4603      	mov	r3, r0
 8016f62:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8016f64:	4b42      	ldr	r3, [pc, #264]	; (8017070 <tcp_input+0x28c>)
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	685a      	ldr	r2, [r3, #4]
 8016f6a:	4b41      	ldr	r3, [pc, #260]	; (8017070 <tcp_input+0x28c>)
 8016f6c:	681c      	ldr	r4, [r3, #0]
 8016f6e:	4610      	mov	r0, r2
 8016f70:	f7fc fa99 	bl	80134a6 <lwip_htonl>
 8016f74:	4603      	mov	r3, r0
 8016f76:	6063      	str	r3, [r4, #4]
 8016f78:	6863      	ldr	r3, [r4, #4]
 8016f7a:	4a45      	ldr	r2, [pc, #276]	; (8017090 <tcp_input+0x2ac>)
 8016f7c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8016f7e:	4b3c      	ldr	r3, [pc, #240]	; (8017070 <tcp_input+0x28c>)
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	689a      	ldr	r2, [r3, #8]
 8016f84:	4b3a      	ldr	r3, [pc, #232]	; (8017070 <tcp_input+0x28c>)
 8016f86:	681c      	ldr	r4, [r3, #0]
 8016f88:	4610      	mov	r0, r2
 8016f8a:	f7fc fa8c 	bl	80134a6 <lwip_htonl>
 8016f8e:	4603      	mov	r3, r0
 8016f90:	60a3      	str	r3, [r4, #8]
 8016f92:	68a3      	ldr	r3, [r4, #8]
 8016f94:	4a3f      	ldr	r2, [pc, #252]	; (8017094 <tcp_input+0x2b0>)
 8016f96:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8016f98:	4b35      	ldr	r3, [pc, #212]	; (8017070 <tcp_input+0x28c>)
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	89db      	ldrh	r3, [r3, #14]
 8016f9e:	b29a      	uxth	r2, r3
 8016fa0:	4b33      	ldr	r3, [pc, #204]	; (8017070 <tcp_input+0x28c>)
 8016fa2:	681c      	ldr	r4, [r3, #0]
 8016fa4:	4610      	mov	r0, r2
 8016fa6:	f7fc fa69 	bl	801347c <lwip_htons>
 8016faa:	4603      	mov	r3, r0
 8016fac:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016fae:	4b30      	ldr	r3, [pc, #192]	; (8017070 <tcp_input+0x28c>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	899b      	ldrh	r3, [r3, #12]
 8016fb4:	b29b      	uxth	r3, r3
 8016fb6:	4618      	mov	r0, r3
 8016fb8:	f7fc fa60 	bl	801347c <lwip_htons>
 8016fbc:	4603      	mov	r3, r0
 8016fbe:	b2db      	uxtb	r3, r3
 8016fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016fc4:	b2da      	uxtb	r2, r3
 8016fc6:	4b34      	ldr	r3, [pc, #208]	; (8017098 <tcp_input+0x2b4>)
 8016fc8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	891a      	ldrh	r2, [r3, #8]
 8016fce:	4b33      	ldr	r3, [pc, #204]	; (801709c <tcp_input+0x2b8>)
 8016fd0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016fd2:	4b31      	ldr	r3, [pc, #196]	; (8017098 <tcp_input+0x2b4>)
 8016fd4:	781b      	ldrb	r3, [r3, #0]
 8016fd6:	f003 0303 	and.w	r3, r3, #3
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d00c      	beq.n	8016ff8 <tcp_input+0x214>
    tcplen++;
 8016fde:	4b2f      	ldr	r3, [pc, #188]	; (801709c <tcp_input+0x2b8>)
 8016fe0:	881b      	ldrh	r3, [r3, #0]
 8016fe2:	3301      	adds	r3, #1
 8016fe4:	b29a      	uxth	r2, r3
 8016fe6:	4b2d      	ldr	r3, [pc, #180]	; (801709c <tcp_input+0x2b8>)
 8016fe8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	891a      	ldrh	r2, [r3, #8]
 8016fee:	4b2b      	ldr	r3, [pc, #172]	; (801709c <tcp_input+0x2b8>)
 8016ff0:	881b      	ldrh	r3, [r3, #0]
 8016ff2:	429a      	cmp	r2, r3
 8016ff4:	f200 82d7 	bhi.w	80175a6 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ffc:	4b28      	ldr	r3, [pc, #160]	; (80170a0 <tcp_input+0x2bc>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	61fb      	str	r3, [r7, #28]
 8017002:	e09d      	b.n	8017140 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8017004:	69fb      	ldr	r3, [r7, #28]
 8017006:	7d1b      	ldrb	r3, [r3, #20]
 8017008:	2b00      	cmp	r3, #0
 801700a:	d105      	bne.n	8017018 <tcp_input+0x234>
 801700c:	4b15      	ldr	r3, [pc, #84]	; (8017064 <tcp_input+0x280>)
 801700e:	22fb      	movs	r2, #251	; 0xfb
 8017010:	4924      	ldr	r1, [pc, #144]	; (80170a4 <tcp_input+0x2c0>)
 8017012:	4816      	ldr	r0, [pc, #88]	; (801706c <tcp_input+0x288>)
 8017014:	f007 f856 	bl	801e0c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8017018:	69fb      	ldr	r3, [r7, #28]
 801701a:	7d1b      	ldrb	r3, [r3, #20]
 801701c:	2b0a      	cmp	r3, #10
 801701e:	d105      	bne.n	801702c <tcp_input+0x248>
 8017020:	4b10      	ldr	r3, [pc, #64]	; (8017064 <tcp_input+0x280>)
 8017022:	22fc      	movs	r2, #252	; 0xfc
 8017024:	4920      	ldr	r1, [pc, #128]	; (80170a8 <tcp_input+0x2c4>)
 8017026:	4811      	ldr	r0, [pc, #68]	; (801706c <tcp_input+0x288>)
 8017028:	f007 f84c 	bl	801e0c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801702c:	69fb      	ldr	r3, [r7, #28]
 801702e:	7d1b      	ldrb	r3, [r3, #20]
 8017030:	2b01      	cmp	r3, #1
 8017032:	d105      	bne.n	8017040 <tcp_input+0x25c>
 8017034:	4b0b      	ldr	r3, [pc, #44]	; (8017064 <tcp_input+0x280>)
 8017036:	22fd      	movs	r2, #253	; 0xfd
 8017038:	491c      	ldr	r1, [pc, #112]	; (80170ac <tcp_input+0x2c8>)
 801703a:	480c      	ldr	r0, [pc, #48]	; (801706c <tcp_input+0x288>)
 801703c:	f007 f842 	bl	801e0c4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017040:	69fb      	ldr	r3, [r7, #28]
 8017042:	7a1b      	ldrb	r3, [r3, #8]
 8017044:	2b00      	cmp	r3, #0
 8017046:	d033      	beq.n	80170b0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017048:	69fb      	ldr	r3, [r7, #28]
 801704a:	7a1a      	ldrb	r2, [r3, #8]
 801704c:	4b09      	ldr	r3, [pc, #36]	; (8017074 <tcp_input+0x290>)
 801704e:	685b      	ldr	r3, [r3, #4]
 8017050:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017054:	3301      	adds	r3, #1
 8017056:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017058:	429a      	cmp	r2, r3
 801705a:	d029      	beq.n	80170b0 <tcp_input+0x2cc>
      prev = pcb;
 801705c:	69fb      	ldr	r3, [r7, #28]
 801705e:	61bb      	str	r3, [r7, #24]
      continue;
 8017060:	e06b      	b.n	801713a <tcp_input+0x356>
 8017062:	bf00      	nop
 8017064:	08020524 	.word	0x08020524
 8017068:	08020558 	.word	0x08020558
 801706c:	08020570 	.word	0x08020570
 8017070:	20004538 	.word	0x20004538
 8017074:	20007df4 	.word	0x20007df4
 8017078:	2000453c 	.word	0x2000453c
 801707c:	20004540 	.word	0x20004540
 8017080:	2000453e 	.word	0x2000453e
 8017084:	08020598 	.word	0x08020598
 8017088:	080205a8 	.word	0x080205a8
 801708c:	080205b4 	.word	0x080205b4
 8017090:	20004548 	.word	0x20004548
 8017094:	2000454c 	.word	0x2000454c
 8017098:	20004554 	.word	0x20004554
 801709c:	20004552 	.word	0x20004552
 80170a0:	2000b508 	.word	0x2000b508
 80170a4:	080205d4 	.word	0x080205d4
 80170a8:	080205fc 	.word	0x080205fc
 80170ac:	08020628 	.word	0x08020628
    }

    if (pcb->remote_port == tcphdr->src &&
 80170b0:	69fb      	ldr	r3, [r7, #28]
 80170b2:	8b1a      	ldrh	r2, [r3, #24]
 80170b4:	4b94      	ldr	r3, [pc, #592]	; (8017308 <tcp_input+0x524>)
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	881b      	ldrh	r3, [r3, #0]
 80170ba:	b29b      	uxth	r3, r3
 80170bc:	429a      	cmp	r2, r3
 80170be:	d13a      	bne.n	8017136 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80170c0:	69fb      	ldr	r3, [r7, #28]
 80170c2:	8ada      	ldrh	r2, [r3, #22]
 80170c4:	4b90      	ldr	r3, [pc, #576]	; (8017308 <tcp_input+0x524>)
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	885b      	ldrh	r3, [r3, #2]
 80170ca:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80170cc:	429a      	cmp	r2, r3
 80170ce:	d132      	bne.n	8017136 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80170d0:	69fb      	ldr	r3, [r7, #28]
 80170d2:	685a      	ldr	r2, [r3, #4]
 80170d4:	4b8d      	ldr	r3, [pc, #564]	; (801730c <tcp_input+0x528>)
 80170d6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80170d8:	429a      	cmp	r2, r3
 80170da:	d12c      	bne.n	8017136 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80170dc:	69fb      	ldr	r3, [r7, #28]
 80170de:	681a      	ldr	r2, [r3, #0]
 80170e0:	4b8a      	ldr	r3, [pc, #552]	; (801730c <tcp_input+0x528>)
 80170e2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80170e4:	429a      	cmp	r2, r3
 80170e6:	d126      	bne.n	8017136 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80170e8:	69fb      	ldr	r3, [r7, #28]
 80170ea:	68db      	ldr	r3, [r3, #12]
 80170ec:	69fa      	ldr	r2, [r7, #28]
 80170ee:	429a      	cmp	r2, r3
 80170f0:	d106      	bne.n	8017100 <tcp_input+0x31c>
 80170f2:	4b87      	ldr	r3, [pc, #540]	; (8017310 <tcp_input+0x52c>)
 80170f4:	f240 120d 	movw	r2, #269	; 0x10d
 80170f8:	4986      	ldr	r1, [pc, #536]	; (8017314 <tcp_input+0x530>)
 80170fa:	4887      	ldr	r0, [pc, #540]	; (8017318 <tcp_input+0x534>)
 80170fc:	f006 ffe2 	bl	801e0c4 <iprintf>
      if (prev != NULL) {
 8017100:	69bb      	ldr	r3, [r7, #24]
 8017102:	2b00      	cmp	r3, #0
 8017104:	d00a      	beq.n	801711c <tcp_input+0x338>
        prev->next = pcb->next;
 8017106:	69fb      	ldr	r3, [r7, #28]
 8017108:	68da      	ldr	r2, [r3, #12]
 801710a:	69bb      	ldr	r3, [r7, #24]
 801710c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801710e:	4b83      	ldr	r3, [pc, #524]	; (801731c <tcp_input+0x538>)
 8017110:	681a      	ldr	r2, [r3, #0]
 8017112:	69fb      	ldr	r3, [r7, #28]
 8017114:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8017116:	4a81      	ldr	r2, [pc, #516]	; (801731c <tcp_input+0x538>)
 8017118:	69fb      	ldr	r3, [r7, #28]
 801711a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801711c:	69fb      	ldr	r3, [r7, #28]
 801711e:	68db      	ldr	r3, [r3, #12]
 8017120:	69fa      	ldr	r2, [r7, #28]
 8017122:	429a      	cmp	r2, r3
 8017124:	d111      	bne.n	801714a <tcp_input+0x366>
 8017126:	4b7a      	ldr	r3, [pc, #488]	; (8017310 <tcp_input+0x52c>)
 8017128:	f240 1215 	movw	r2, #277	; 0x115
 801712c:	497c      	ldr	r1, [pc, #496]	; (8017320 <tcp_input+0x53c>)
 801712e:	487a      	ldr	r0, [pc, #488]	; (8017318 <tcp_input+0x534>)
 8017130:	f006 ffc8 	bl	801e0c4 <iprintf>
      break;
 8017134:	e009      	b.n	801714a <tcp_input+0x366>
    }
    prev = pcb;
 8017136:	69fb      	ldr	r3, [r7, #28]
 8017138:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801713a:	69fb      	ldr	r3, [r7, #28]
 801713c:	68db      	ldr	r3, [r3, #12]
 801713e:	61fb      	str	r3, [r7, #28]
 8017140:	69fb      	ldr	r3, [r7, #28]
 8017142:	2b00      	cmp	r3, #0
 8017144:	f47f af5e 	bne.w	8017004 <tcp_input+0x220>
 8017148:	e000      	b.n	801714c <tcp_input+0x368>
      break;
 801714a:	bf00      	nop
  }

  if (pcb == NULL) {
 801714c:	69fb      	ldr	r3, [r7, #28]
 801714e:	2b00      	cmp	r3, #0
 8017150:	f040 8095 	bne.w	801727e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017154:	4b73      	ldr	r3, [pc, #460]	; (8017324 <tcp_input+0x540>)
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	61fb      	str	r3, [r7, #28]
 801715a:	e03f      	b.n	80171dc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801715c:	69fb      	ldr	r3, [r7, #28]
 801715e:	7d1b      	ldrb	r3, [r3, #20]
 8017160:	2b0a      	cmp	r3, #10
 8017162:	d006      	beq.n	8017172 <tcp_input+0x38e>
 8017164:	4b6a      	ldr	r3, [pc, #424]	; (8017310 <tcp_input+0x52c>)
 8017166:	f240 121f 	movw	r2, #287	; 0x11f
 801716a:	496f      	ldr	r1, [pc, #444]	; (8017328 <tcp_input+0x544>)
 801716c:	486a      	ldr	r0, [pc, #424]	; (8017318 <tcp_input+0x534>)
 801716e:	f006 ffa9 	bl	801e0c4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017172:	69fb      	ldr	r3, [r7, #28]
 8017174:	7a1b      	ldrb	r3, [r3, #8]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d009      	beq.n	801718e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801717a:	69fb      	ldr	r3, [r7, #28]
 801717c:	7a1a      	ldrb	r2, [r3, #8]
 801717e:	4b63      	ldr	r3, [pc, #396]	; (801730c <tcp_input+0x528>)
 8017180:	685b      	ldr	r3, [r3, #4]
 8017182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017186:	3301      	adds	r3, #1
 8017188:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801718a:	429a      	cmp	r2, r3
 801718c:	d122      	bne.n	80171d4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801718e:	69fb      	ldr	r3, [r7, #28]
 8017190:	8b1a      	ldrh	r2, [r3, #24]
 8017192:	4b5d      	ldr	r3, [pc, #372]	; (8017308 <tcp_input+0x524>)
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	881b      	ldrh	r3, [r3, #0]
 8017198:	b29b      	uxth	r3, r3
 801719a:	429a      	cmp	r2, r3
 801719c:	d11b      	bne.n	80171d6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801719e:	69fb      	ldr	r3, [r7, #28]
 80171a0:	8ada      	ldrh	r2, [r3, #22]
 80171a2:	4b59      	ldr	r3, [pc, #356]	; (8017308 <tcp_input+0x524>)
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	885b      	ldrh	r3, [r3, #2]
 80171a8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80171aa:	429a      	cmp	r2, r3
 80171ac:	d113      	bne.n	80171d6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80171ae:	69fb      	ldr	r3, [r7, #28]
 80171b0:	685a      	ldr	r2, [r3, #4]
 80171b2:	4b56      	ldr	r3, [pc, #344]	; (801730c <tcp_input+0x528>)
 80171b4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80171b6:	429a      	cmp	r2, r3
 80171b8:	d10d      	bne.n	80171d6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80171ba:	69fb      	ldr	r3, [r7, #28]
 80171bc:	681a      	ldr	r2, [r3, #0]
 80171be:	4b53      	ldr	r3, [pc, #332]	; (801730c <tcp_input+0x528>)
 80171c0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80171c2:	429a      	cmp	r2, r3
 80171c4:	d107      	bne.n	80171d6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80171c6:	69f8      	ldr	r0, [r7, #28]
 80171c8:	f000 fb52 	bl	8017870 <tcp_timewait_input>
        }
        pbuf_free(p);
 80171cc:	6878      	ldr	r0, [r7, #4]
 80171ce:	f7fd fd33 	bl	8014c38 <pbuf_free>
        return;
 80171d2:	e1ee      	b.n	80175b2 <tcp_input+0x7ce>
        continue;
 80171d4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80171d6:	69fb      	ldr	r3, [r7, #28]
 80171d8:	68db      	ldr	r3, [r3, #12]
 80171da:	61fb      	str	r3, [r7, #28]
 80171dc:	69fb      	ldr	r3, [r7, #28]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d1bc      	bne.n	801715c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80171e2:	2300      	movs	r3, #0
 80171e4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80171e6:	4b51      	ldr	r3, [pc, #324]	; (801732c <tcp_input+0x548>)
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	617b      	str	r3, [r7, #20]
 80171ec:	e02a      	b.n	8017244 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80171ee:	697b      	ldr	r3, [r7, #20]
 80171f0:	7a1b      	ldrb	r3, [r3, #8]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d00c      	beq.n	8017210 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80171f6:	697b      	ldr	r3, [r7, #20]
 80171f8:	7a1a      	ldrb	r2, [r3, #8]
 80171fa:	4b44      	ldr	r3, [pc, #272]	; (801730c <tcp_input+0x528>)
 80171fc:	685b      	ldr	r3, [r3, #4]
 80171fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017202:	3301      	adds	r3, #1
 8017204:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017206:	429a      	cmp	r2, r3
 8017208:	d002      	beq.n	8017210 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801720a:	697b      	ldr	r3, [r7, #20]
 801720c:	61bb      	str	r3, [r7, #24]
        continue;
 801720e:	e016      	b.n	801723e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8017210:	697b      	ldr	r3, [r7, #20]
 8017212:	8ada      	ldrh	r2, [r3, #22]
 8017214:	4b3c      	ldr	r3, [pc, #240]	; (8017308 <tcp_input+0x524>)
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	885b      	ldrh	r3, [r3, #2]
 801721a:	b29b      	uxth	r3, r3
 801721c:	429a      	cmp	r2, r3
 801721e:	d10c      	bne.n	801723a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8017220:	697b      	ldr	r3, [r7, #20]
 8017222:	681a      	ldr	r2, [r3, #0]
 8017224:	4b39      	ldr	r3, [pc, #228]	; (801730c <tcp_input+0x528>)
 8017226:	695b      	ldr	r3, [r3, #20]
 8017228:	429a      	cmp	r2, r3
 801722a:	d00f      	beq.n	801724c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801722c:	697b      	ldr	r3, [r7, #20]
 801722e:	2b00      	cmp	r3, #0
 8017230:	d00d      	beq.n	801724e <tcp_input+0x46a>
 8017232:	697b      	ldr	r3, [r7, #20]
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d009      	beq.n	801724e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801723a:	697b      	ldr	r3, [r7, #20]
 801723c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801723e:	697b      	ldr	r3, [r7, #20]
 8017240:	68db      	ldr	r3, [r3, #12]
 8017242:	617b      	str	r3, [r7, #20]
 8017244:	697b      	ldr	r3, [r7, #20]
 8017246:	2b00      	cmp	r3, #0
 8017248:	d1d1      	bne.n	80171ee <tcp_input+0x40a>
 801724a:	e000      	b.n	801724e <tcp_input+0x46a>
            break;
 801724c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801724e:	697b      	ldr	r3, [r7, #20]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d014      	beq.n	801727e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8017254:	69bb      	ldr	r3, [r7, #24]
 8017256:	2b00      	cmp	r3, #0
 8017258:	d00a      	beq.n	8017270 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801725a:	697b      	ldr	r3, [r7, #20]
 801725c:	68da      	ldr	r2, [r3, #12]
 801725e:	69bb      	ldr	r3, [r7, #24]
 8017260:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8017262:	4b32      	ldr	r3, [pc, #200]	; (801732c <tcp_input+0x548>)
 8017264:	681a      	ldr	r2, [r3, #0]
 8017266:	697b      	ldr	r3, [r7, #20]
 8017268:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801726a:	4a30      	ldr	r2, [pc, #192]	; (801732c <tcp_input+0x548>)
 801726c:	697b      	ldr	r3, [r7, #20]
 801726e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8017270:	6978      	ldr	r0, [r7, #20]
 8017272:	f000 f9ff 	bl	8017674 <tcp_listen_input>
      }
      pbuf_free(p);
 8017276:	6878      	ldr	r0, [r7, #4]
 8017278:	f7fd fcde 	bl	8014c38 <pbuf_free>
      return;
 801727c:	e199      	b.n	80175b2 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801727e:	69fb      	ldr	r3, [r7, #28]
 8017280:	2b00      	cmp	r3, #0
 8017282:	f000 8160 	beq.w	8017546 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8017286:	4b2a      	ldr	r3, [pc, #168]	; (8017330 <tcp_input+0x54c>)
 8017288:	2200      	movs	r2, #0
 801728a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	891a      	ldrh	r2, [r3, #8]
 8017290:	4b27      	ldr	r3, [pc, #156]	; (8017330 <tcp_input+0x54c>)
 8017292:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8017294:	4a26      	ldr	r2, [pc, #152]	; (8017330 <tcp_input+0x54c>)
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801729a:	4b1b      	ldr	r3, [pc, #108]	; (8017308 <tcp_input+0x524>)
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	4a24      	ldr	r2, [pc, #144]	; (8017330 <tcp_input+0x54c>)
 80172a0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80172a2:	4b24      	ldr	r3, [pc, #144]	; (8017334 <tcp_input+0x550>)
 80172a4:	2200      	movs	r2, #0
 80172a6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80172a8:	4b23      	ldr	r3, [pc, #140]	; (8017338 <tcp_input+0x554>)
 80172aa:	2200      	movs	r2, #0
 80172ac:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80172ae:	4b23      	ldr	r3, [pc, #140]	; (801733c <tcp_input+0x558>)
 80172b0:	2200      	movs	r2, #0
 80172b2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80172b4:	4b22      	ldr	r3, [pc, #136]	; (8017340 <tcp_input+0x55c>)
 80172b6:	781b      	ldrb	r3, [r3, #0]
 80172b8:	f003 0308 	and.w	r3, r3, #8
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d006      	beq.n	80172ce <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	7b5b      	ldrb	r3, [r3, #13]
 80172c4:	f043 0301 	orr.w	r3, r3, #1
 80172c8:	b2da      	uxtb	r2, r3
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80172ce:	69fb      	ldr	r3, [r7, #28]
 80172d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d038      	beq.n	8017348 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80172d6:	69f8      	ldr	r0, [r7, #28]
 80172d8:	f7ff f84c 	bl	8016374 <tcp_process_refused_data>
 80172dc:	4603      	mov	r3, r0
 80172de:	f113 0f0d 	cmn.w	r3, #13
 80172e2:	d007      	beq.n	80172f4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80172e4:	69fb      	ldr	r3, [r7, #28]
 80172e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d02d      	beq.n	8017348 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80172ec:	4b15      	ldr	r3, [pc, #84]	; (8017344 <tcp_input+0x560>)
 80172ee:	881b      	ldrh	r3, [r3, #0]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d029      	beq.n	8017348 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80172f4:	69fb      	ldr	r3, [r7, #28]
 80172f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	f040 8104 	bne.w	8017506 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80172fe:	69f8      	ldr	r0, [r7, #28]
 8017300:	f003 fe28 	bl	801af54 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8017304:	e0ff      	b.n	8017506 <tcp_input+0x722>
 8017306:	bf00      	nop
 8017308:	20004538 	.word	0x20004538
 801730c:	20007df4 	.word	0x20007df4
 8017310:	08020524 	.word	0x08020524
 8017314:	08020650 	.word	0x08020650
 8017318:	08020570 	.word	0x08020570
 801731c:	2000b508 	.word	0x2000b508
 8017320:	0802067c 	.word	0x0802067c
 8017324:	2000b518 	.word	0x2000b518
 8017328:	080206a8 	.word	0x080206a8
 801732c:	2000b510 	.word	0x2000b510
 8017330:	20004528 	.word	0x20004528
 8017334:	20004558 	.word	0x20004558
 8017338:	20004555 	.word	0x20004555
 801733c:	20004550 	.word	0x20004550
 8017340:	20004554 	.word	0x20004554
 8017344:	20004552 	.word	0x20004552
      }
    }
    tcp_input_pcb = pcb;
 8017348:	4a9b      	ldr	r2, [pc, #620]	; (80175b8 <tcp_input+0x7d4>)
 801734a:	69fb      	ldr	r3, [r7, #28]
 801734c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801734e:	69f8      	ldr	r0, [r7, #28]
 8017350:	f000 fb0a 	bl	8017968 <tcp_process>
 8017354:	4603      	mov	r3, r0
 8017356:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8017358:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801735c:	f113 0f0d 	cmn.w	r3, #13
 8017360:	f000 80d3 	beq.w	801750a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8017364:	4b95      	ldr	r3, [pc, #596]	; (80175bc <tcp_input+0x7d8>)
 8017366:	781b      	ldrb	r3, [r3, #0]
 8017368:	f003 0308 	and.w	r3, r3, #8
 801736c:	2b00      	cmp	r3, #0
 801736e:	d015      	beq.n	801739c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8017370:	69fb      	ldr	r3, [r7, #28]
 8017372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017376:	2b00      	cmp	r3, #0
 8017378:	d008      	beq.n	801738c <tcp_input+0x5a8>
 801737a:	69fb      	ldr	r3, [r7, #28]
 801737c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017380:	69fa      	ldr	r2, [r7, #28]
 8017382:	6912      	ldr	r2, [r2, #16]
 8017384:	f06f 010d 	mvn.w	r1, #13
 8017388:	4610      	mov	r0, r2
 801738a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801738c:	69f9      	ldr	r1, [r7, #28]
 801738e:	488c      	ldr	r0, [pc, #560]	; (80175c0 <tcp_input+0x7dc>)
 8017390:	f7ff fbb0 	bl	8016af4 <tcp_pcb_remove>
        tcp_free(pcb);
 8017394:	69f8      	ldr	r0, [r7, #28]
 8017396:	f7fd fefb 	bl	8015190 <tcp_free>
 801739a:	e0c1      	b.n	8017520 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 801739c:	2300      	movs	r3, #0
 801739e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80173a0:	4b88      	ldr	r3, [pc, #544]	; (80175c4 <tcp_input+0x7e0>)
 80173a2:	881b      	ldrh	r3, [r3, #0]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d01d      	beq.n	80173e4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80173a8:	4b86      	ldr	r3, [pc, #536]	; (80175c4 <tcp_input+0x7e0>)
 80173aa:	881b      	ldrh	r3, [r3, #0]
 80173ac:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80173ae:	69fb      	ldr	r3, [r7, #28]
 80173b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d00a      	beq.n	80173ce <tcp_input+0x5ea>
 80173b8:	69fb      	ldr	r3, [r7, #28]
 80173ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80173be:	69fa      	ldr	r2, [r7, #28]
 80173c0:	6910      	ldr	r0, [r2, #16]
 80173c2:	89fa      	ldrh	r2, [r7, #14]
 80173c4:	69f9      	ldr	r1, [r7, #28]
 80173c6:	4798      	blx	r3
 80173c8:	4603      	mov	r3, r0
 80173ca:	74fb      	strb	r3, [r7, #19]
 80173cc:	e001      	b.n	80173d2 <tcp_input+0x5ee>
 80173ce:	2300      	movs	r3, #0
 80173d0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80173d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80173d6:	f113 0f0d 	cmn.w	r3, #13
 80173da:	f000 8098 	beq.w	801750e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80173de:	4b79      	ldr	r3, [pc, #484]	; (80175c4 <tcp_input+0x7e0>)
 80173e0:	2200      	movs	r2, #0
 80173e2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80173e4:	69f8      	ldr	r0, [r7, #28]
 80173e6:	f000 f905 	bl	80175f4 <tcp_input_delayed_close>
 80173ea:	4603      	mov	r3, r0
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	f040 8090 	bne.w	8017512 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80173f2:	4b75      	ldr	r3, [pc, #468]	; (80175c8 <tcp_input+0x7e4>)
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d041      	beq.n	801747e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80173fa:	69fb      	ldr	r3, [r7, #28]
 80173fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d006      	beq.n	8017410 <tcp_input+0x62c>
 8017402:	4b72      	ldr	r3, [pc, #456]	; (80175cc <tcp_input+0x7e8>)
 8017404:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8017408:	4971      	ldr	r1, [pc, #452]	; (80175d0 <tcp_input+0x7ec>)
 801740a:	4872      	ldr	r0, [pc, #456]	; (80175d4 <tcp_input+0x7f0>)
 801740c:	f006 fe5a 	bl	801e0c4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8017410:	69fb      	ldr	r3, [r7, #28]
 8017412:	8b5b      	ldrh	r3, [r3, #26]
 8017414:	f003 0310 	and.w	r3, r3, #16
 8017418:	2b00      	cmp	r3, #0
 801741a:	d008      	beq.n	801742e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801741c:	4b6a      	ldr	r3, [pc, #424]	; (80175c8 <tcp_input+0x7e4>)
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	4618      	mov	r0, r3
 8017422:	f7fd fc09 	bl	8014c38 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8017426:	69f8      	ldr	r0, [r7, #28]
 8017428:	f7fe f992 	bl	8015750 <tcp_abort>
            goto aborted;
 801742c:	e078      	b.n	8017520 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801742e:	69fb      	ldr	r3, [r7, #28]
 8017430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017434:	2b00      	cmp	r3, #0
 8017436:	d00c      	beq.n	8017452 <tcp_input+0x66e>
 8017438:	69fb      	ldr	r3, [r7, #28]
 801743a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801743e:	69fb      	ldr	r3, [r7, #28]
 8017440:	6918      	ldr	r0, [r3, #16]
 8017442:	4b61      	ldr	r3, [pc, #388]	; (80175c8 <tcp_input+0x7e4>)
 8017444:	681a      	ldr	r2, [r3, #0]
 8017446:	2300      	movs	r3, #0
 8017448:	69f9      	ldr	r1, [r7, #28]
 801744a:	47a0      	blx	r4
 801744c:	4603      	mov	r3, r0
 801744e:	74fb      	strb	r3, [r7, #19]
 8017450:	e008      	b.n	8017464 <tcp_input+0x680>
 8017452:	4b5d      	ldr	r3, [pc, #372]	; (80175c8 <tcp_input+0x7e4>)
 8017454:	681a      	ldr	r2, [r3, #0]
 8017456:	2300      	movs	r3, #0
 8017458:	69f9      	ldr	r1, [r7, #28]
 801745a:	2000      	movs	r0, #0
 801745c:	f7ff f87c 	bl	8016558 <tcp_recv_null>
 8017460:	4603      	mov	r3, r0
 8017462:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8017464:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017468:	f113 0f0d 	cmn.w	r3, #13
 801746c:	d053      	beq.n	8017516 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801746e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d003      	beq.n	801747e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8017476:	4b54      	ldr	r3, [pc, #336]	; (80175c8 <tcp_input+0x7e4>)
 8017478:	681a      	ldr	r2, [r3, #0]
 801747a:	69fb      	ldr	r3, [r7, #28]
 801747c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801747e:	4b4f      	ldr	r3, [pc, #316]	; (80175bc <tcp_input+0x7d8>)
 8017480:	781b      	ldrb	r3, [r3, #0]
 8017482:	f003 0320 	and.w	r3, r3, #32
 8017486:	2b00      	cmp	r3, #0
 8017488:	d030      	beq.n	80174ec <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801748a:	69fb      	ldr	r3, [r7, #28]
 801748c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801748e:	2b00      	cmp	r3, #0
 8017490:	d009      	beq.n	80174a6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8017492:	69fb      	ldr	r3, [r7, #28]
 8017494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017496:	7b5a      	ldrb	r2, [r3, #13]
 8017498:	69fb      	ldr	r3, [r7, #28]
 801749a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801749c:	f042 0220 	orr.w	r2, r2, #32
 80174a0:	b2d2      	uxtb	r2, r2
 80174a2:	735a      	strb	r2, [r3, #13]
 80174a4:	e022      	b.n	80174ec <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80174a6:	69fb      	ldr	r3, [r7, #28]
 80174a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80174aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80174ae:	d005      	beq.n	80174bc <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80174b0:	69fb      	ldr	r3, [r7, #28]
 80174b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80174b4:	3301      	adds	r3, #1
 80174b6:	b29a      	uxth	r2, r3
 80174b8:	69fb      	ldr	r3, [r7, #28]
 80174ba:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80174bc:	69fb      	ldr	r3, [r7, #28]
 80174be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d00b      	beq.n	80174de <tcp_input+0x6fa>
 80174c6:	69fb      	ldr	r3, [r7, #28]
 80174c8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80174cc:	69fb      	ldr	r3, [r7, #28]
 80174ce:	6918      	ldr	r0, [r3, #16]
 80174d0:	2300      	movs	r3, #0
 80174d2:	2200      	movs	r2, #0
 80174d4:	69f9      	ldr	r1, [r7, #28]
 80174d6:	47a0      	blx	r4
 80174d8:	4603      	mov	r3, r0
 80174da:	74fb      	strb	r3, [r7, #19]
 80174dc:	e001      	b.n	80174e2 <tcp_input+0x6fe>
 80174de:	2300      	movs	r3, #0
 80174e0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80174e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80174e6:	f113 0f0d 	cmn.w	r3, #13
 80174ea:	d016      	beq.n	801751a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80174ec:	4b32      	ldr	r3, [pc, #200]	; (80175b8 <tcp_input+0x7d4>)
 80174ee:	2200      	movs	r2, #0
 80174f0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80174f2:	69f8      	ldr	r0, [r7, #28]
 80174f4:	f000 f87e 	bl	80175f4 <tcp_input_delayed_close>
 80174f8:	4603      	mov	r3, r0
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d10f      	bne.n	801751e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80174fe:	69f8      	ldr	r0, [r7, #28]
 8017500:	f002 ff10 	bl	801a324 <tcp_output>
 8017504:	e00c      	b.n	8017520 <tcp_input+0x73c>
        goto aborted;
 8017506:	bf00      	nop
 8017508:	e00a      	b.n	8017520 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801750a:	bf00      	nop
 801750c:	e008      	b.n	8017520 <tcp_input+0x73c>
              goto aborted;
 801750e:	bf00      	nop
 8017510:	e006      	b.n	8017520 <tcp_input+0x73c>
          goto aborted;
 8017512:	bf00      	nop
 8017514:	e004      	b.n	8017520 <tcp_input+0x73c>
            goto aborted;
 8017516:	bf00      	nop
 8017518:	e002      	b.n	8017520 <tcp_input+0x73c>
              goto aborted;
 801751a:	bf00      	nop
 801751c:	e000      	b.n	8017520 <tcp_input+0x73c>
          goto aborted;
 801751e:	bf00      	nop
    tcp_input_pcb = NULL;
 8017520:	4b25      	ldr	r3, [pc, #148]	; (80175b8 <tcp_input+0x7d4>)
 8017522:	2200      	movs	r2, #0
 8017524:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8017526:	4b28      	ldr	r3, [pc, #160]	; (80175c8 <tcp_input+0x7e4>)
 8017528:	2200      	movs	r2, #0
 801752a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801752c:	4b2a      	ldr	r3, [pc, #168]	; (80175d8 <tcp_input+0x7f4>)
 801752e:	685b      	ldr	r3, [r3, #4]
 8017530:	2b00      	cmp	r3, #0
 8017532:	d03d      	beq.n	80175b0 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8017534:	4b28      	ldr	r3, [pc, #160]	; (80175d8 <tcp_input+0x7f4>)
 8017536:	685b      	ldr	r3, [r3, #4]
 8017538:	4618      	mov	r0, r3
 801753a:	f7fd fb7d 	bl	8014c38 <pbuf_free>
      inseg.p = NULL;
 801753e:	4b26      	ldr	r3, [pc, #152]	; (80175d8 <tcp_input+0x7f4>)
 8017540:	2200      	movs	r2, #0
 8017542:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8017544:	e034      	b.n	80175b0 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8017546:	4b25      	ldr	r3, [pc, #148]	; (80175dc <tcp_input+0x7f8>)
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	899b      	ldrh	r3, [r3, #12]
 801754c:	b29b      	uxth	r3, r3
 801754e:	4618      	mov	r0, r3
 8017550:	f7fb ff94 	bl	801347c <lwip_htons>
 8017554:	4603      	mov	r3, r0
 8017556:	b2db      	uxtb	r3, r3
 8017558:	f003 0304 	and.w	r3, r3, #4
 801755c:	2b00      	cmp	r3, #0
 801755e:	d118      	bne.n	8017592 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017560:	4b1f      	ldr	r3, [pc, #124]	; (80175e0 <tcp_input+0x7fc>)
 8017562:	6819      	ldr	r1, [r3, #0]
 8017564:	4b1f      	ldr	r3, [pc, #124]	; (80175e4 <tcp_input+0x800>)
 8017566:	881b      	ldrh	r3, [r3, #0]
 8017568:	461a      	mov	r2, r3
 801756a:	4b1f      	ldr	r3, [pc, #124]	; (80175e8 <tcp_input+0x804>)
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017570:	4b1a      	ldr	r3, [pc, #104]	; (80175dc <tcp_input+0x7f8>)
 8017572:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017574:	885b      	ldrh	r3, [r3, #2]
 8017576:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017578:	4a18      	ldr	r2, [pc, #96]	; (80175dc <tcp_input+0x7f8>)
 801757a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801757c:	8812      	ldrh	r2, [r2, #0]
 801757e:	b292      	uxth	r2, r2
 8017580:	9202      	str	r2, [sp, #8]
 8017582:	9301      	str	r3, [sp, #4]
 8017584:	4b19      	ldr	r3, [pc, #100]	; (80175ec <tcp_input+0x808>)
 8017586:	9300      	str	r3, [sp, #0]
 8017588:	4b19      	ldr	r3, [pc, #100]	; (80175f0 <tcp_input+0x80c>)
 801758a:	4602      	mov	r2, r0
 801758c:	2000      	movs	r0, #0
 801758e:	f003 fc8f 	bl	801aeb0 <tcp_rst>
    pbuf_free(p);
 8017592:	6878      	ldr	r0, [r7, #4]
 8017594:	f7fd fb50 	bl	8014c38 <pbuf_free>
  return;
 8017598:	e00a      	b.n	80175b0 <tcp_input+0x7cc>
    goto dropped;
 801759a:	bf00      	nop
 801759c:	e004      	b.n	80175a8 <tcp_input+0x7c4>
dropped:
 801759e:	bf00      	nop
 80175a0:	e002      	b.n	80175a8 <tcp_input+0x7c4>
      goto dropped;
 80175a2:	bf00      	nop
 80175a4:	e000      	b.n	80175a8 <tcp_input+0x7c4>
      goto dropped;
 80175a6:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80175a8:	6878      	ldr	r0, [r7, #4]
 80175aa:	f7fd fb45 	bl	8014c38 <pbuf_free>
 80175ae:	e000      	b.n	80175b2 <tcp_input+0x7ce>
  return;
 80175b0:	bf00      	nop
}
 80175b2:	3724      	adds	r7, #36	; 0x24
 80175b4:	46bd      	mov	sp, r7
 80175b6:	bd90      	pop	{r4, r7, pc}
 80175b8:	2000b51c 	.word	0x2000b51c
 80175bc:	20004555 	.word	0x20004555
 80175c0:	2000b508 	.word	0x2000b508
 80175c4:	20004550 	.word	0x20004550
 80175c8:	20004558 	.word	0x20004558
 80175cc:	08020524 	.word	0x08020524
 80175d0:	080206d8 	.word	0x080206d8
 80175d4:	08020570 	.word	0x08020570
 80175d8:	20004528 	.word	0x20004528
 80175dc:	20004538 	.word	0x20004538
 80175e0:	2000454c 	.word	0x2000454c
 80175e4:	20004552 	.word	0x20004552
 80175e8:	20004548 	.word	0x20004548
 80175ec:	20007e04 	.word	0x20007e04
 80175f0:	20007e08 	.word	0x20007e08

080175f4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80175f4:	b580      	push	{r7, lr}
 80175f6:	b082      	sub	sp, #8
 80175f8:	af00      	add	r7, sp, #0
 80175fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d106      	bne.n	8017610 <tcp_input_delayed_close+0x1c>
 8017602:	4b17      	ldr	r3, [pc, #92]	; (8017660 <tcp_input_delayed_close+0x6c>)
 8017604:	f240 225a 	movw	r2, #602	; 0x25a
 8017608:	4916      	ldr	r1, [pc, #88]	; (8017664 <tcp_input_delayed_close+0x70>)
 801760a:	4817      	ldr	r0, [pc, #92]	; (8017668 <tcp_input_delayed_close+0x74>)
 801760c:	f006 fd5a 	bl	801e0c4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8017610:	4b16      	ldr	r3, [pc, #88]	; (801766c <tcp_input_delayed_close+0x78>)
 8017612:	781b      	ldrb	r3, [r3, #0]
 8017614:	f003 0310 	and.w	r3, r3, #16
 8017618:	2b00      	cmp	r3, #0
 801761a:	d01c      	beq.n	8017656 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	8b5b      	ldrh	r3, [r3, #26]
 8017620:	f003 0310 	and.w	r3, r3, #16
 8017624:	2b00      	cmp	r3, #0
 8017626:	d10d      	bne.n	8017644 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801762e:	2b00      	cmp	r3, #0
 8017630:	d008      	beq.n	8017644 <tcp_input_delayed_close+0x50>
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017638:	687a      	ldr	r2, [r7, #4]
 801763a:	6912      	ldr	r2, [r2, #16]
 801763c:	f06f 010e 	mvn.w	r1, #14
 8017640:	4610      	mov	r0, r2
 8017642:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017644:	6879      	ldr	r1, [r7, #4]
 8017646:	480a      	ldr	r0, [pc, #40]	; (8017670 <tcp_input_delayed_close+0x7c>)
 8017648:	f7ff fa54 	bl	8016af4 <tcp_pcb_remove>
    tcp_free(pcb);
 801764c:	6878      	ldr	r0, [r7, #4]
 801764e:	f7fd fd9f 	bl	8015190 <tcp_free>
    return 1;
 8017652:	2301      	movs	r3, #1
 8017654:	e000      	b.n	8017658 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8017656:	2300      	movs	r3, #0
}
 8017658:	4618      	mov	r0, r3
 801765a:	3708      	adds	r7, #8
 801765c:	46bd      	mov	sp, r7
 801765e:	bd80      	pop	{r7, pc}
 8017660:	08020524 	.word	0x08020524
 8017664:	080206f4 	.word	0x080206f4
 8017668:	08020570 	.word	0x08020570
 801766c:	20004555 	.word	0x20004555
 8017670:	2000b508 	.word	0x2000b508

08017674 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8017674:	b590      	push	{r4, r7, lr}
 8017676:	b08b      	sub	sp, #44	; 0x2c
 8017678:	af04      	add	r7, sp, #16
 801767a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801767c:	4b6f      	ldr	r3, [pc, #444]	; (801783c <tcp_listen_input+0x1c8>)
 801767e:	781b      	ldrb	r3, [r3, #0]
 8017680:	f003 0304 	and.w	r3, r3, #4
 8017684:	2b00      	cmp	r3, #0
 8017686:	f040 80d3 	bne.w	8017830 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d106      	bne.n	801769e <tcp_listen_input+0x2a>
 8017690:	4b6b      	ldr	r3, [pc, #428]	; (8017840 <tcp_listen_input+0x1cc>)
 8017692:	f240 2281 	movw	r2, #641	; 0x281
 8017696:	496b      	ldr	r1, [pc, #428]	; (8017844 <tcp_listen_input+0x1d0>)
 8017698:	486b      	ldr	r0, [pc, #428]	; (8017848 <tcp_listen_input+0x1d4>)
 801769a:	f006 fd13 	bl	801e0c4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801769e:	4b67      	ldr	r3, [pc, #412]	; (801783c <tcp_listen_input+0x1c8>)
 80176a0:	781b      	ldrb	r3, [r3, #0]
 80176a2:	f003 0310 	and.w	r3, r3, #16
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d019      	beq.n	80176de <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80176aa:	4b68      	ldr	r3, [pc, #416]	; (801784c <tcp_listen_input+0x1d8>)
 80176ac:	6819      	ldr	r1, [r3, #0]
 80176ae:	4b68      	ldr	r3, [pc, #416]	; (8017850 <tcp_listen_input+0x1dc>)
 80176b0:	881b      	ldrh	r3, [r3, #0]
 80176b2:	461a      	mov	r2, r3
 80176b4:	4b67      	ldr	r3, [pc, #412]	; (8017854 <tcp_listen_input+0x1e0>)
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80176ba:	4b67      	ldr	r3, [pc, #412]	; (8017858 <tcp_listen_input+0x1e4>)
 80176bc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80176be:	885b      	ldrh	r3, [r3, #2]
 80176c0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80176c2:	4a65      	ldr	r2, [pc, #404]	; (8017858 <tcp_listen_input+0x1e4>)
 80176c4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80176c6:	8812      	ldrh	r2, [r2, #0]
 80176c8:	b292      	uxth	r2, r2
 80176ca:	9202      	str	r2, [sp, #8]
 80176cc:	9301      	str	r3, [sp, #4]
 80176ce:	4b63      	ldr	r3, [pc, #396]	; (801785c <tcp_listen_input+0x1e8>)
 80176d0:	9300      	str	r3, [sp, #0]
 80176d2:	4b63      	ldr	r3, [pc, #396]	; (8017860 <tcp_listen_input+0x1ec>)
 80176d4:	4602      	mov	r2, r0
 80176d6:	6878      	ldr	r0, [r7, #4]
 80176d8:	f003 fbea 	bl	801aeb0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80176dc:	e0aa      	b.n	8017834 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 80176de:	4b57      	ldr	r3, [pc, #348]	; (801783c <tcp_listen_input+0x1c8>)
 80176e0:	781b      	ldrb	r3, [r3, #0]
 80176e2:	f003 0302 	and.w	r3, r3, #2
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	f000 80a4 	beq.w	8017834 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	7d5b      	ldrb	r3, [r3, #21]
 80176f0:	4618      	mov	r0, r3
 80176f2:	f7ff f855 	bl	80167a0 <tcp_alloc>
 80176f6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80176f8:	697b      	ldr	r3, [r7, #20]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d111      	bne.n	8017722 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	699b      	ldr	r3, [r3, #24]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d00a      	beq.n	801771c <tcp_listen_input+0xa8>
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	699b      	ldr	r3, [r3, #24]
 801770a:	687a      	ldr	r2, [r7, #4]
 801770c:	6910      	ldr	r0, [r2, #16]
 801770e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017712:	2100      	movs	r1, #0
 8017714:	4798      	blx	r3
 8017716:	4603      	mov	r3, r0
 8017718:	73bb      	strb	r3, [r7, #14]
      return;
 801771a:	e08c      	b.n	8017836 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801771c:	23f0      	movs	r3, #240	; 0xf0
 801771e:	73bb      	strb	r3, [r7, #14]
      return;
 8017720:	e089      	b.n	8017836 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8017722:	4b50      	ldr	r3, [pc, #320]	; (8017864 <tcp_listen_input+0x1f0>)
 8017724:	695a      	ldr	r2, [r3, #20]
 8017726:	697b      	ldr	r3, [r7, #20]
 8017728:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801772a:	4b4e      	ldr	r3, [pc, #312]	; (8017864 <tcp_listen_input+0x1f0>)
 801772c:	691a      	ldr	r2, [r3, #16]
 801772e:	697b      	ldr	r3, [r7, #20]
 8017730:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	8ada      	ldrh	r2, [r3, #22]
 8017736:	697b      	ldr	r3, [r7, #20]
 8017738:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801773a:	4b47      	ldr	r3, [pc, #284]	; (8017858 <tcp_listen_input+0x1e4>)
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	881b      	ldrh	r3, [r3, #0]
 8017740:	b29a      	uxth	r2, r3
 8017742:	697b      	ldr	r3, [r7, #20]
 8017744:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8017746:	697b      	ldr	r3, [r7, #20]
 8017748:	2203      	movs	r2, #3
 801774a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801774c:	4b41      	ldr	r3, [pc, #260]	; (8017854 <tcp_listen_input+0x1e0>)
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	1c5a      	adds	r2, r3, #1
 8017752:	697b      	ldr	r3, [r7, #20]
 8017754:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8017756:	697b      	ldr	r3, [r7, #20]
 8017758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801775a:	697b      	ldr	r3, [r7, #20]
 801775c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801775e:	6978      	ldr	r0, [r7, #20]
 8017760:	f7ff fa5c 	bl	8016c1c <tcp_next_iss>
 8017764:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8017766:	697b      	ldr	r3, [r7, #20]
 8017768:	693a      	ldr	r2, [r7, #16]
 801776a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801776c:	697b      	ldr	r3, [r7, #20]
 801776e:	693a      	ldr	r2, [r7, #16]
 8017770:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8017772:	697b      	ldr	r3, [r7, #20]
 8017774:	693a      	ldr	r2, [r7, #16]
 8017776:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8017778:	697b      	ldr	r3, [r7, #20]
 801777a:	693a      	ldr	r2, [r7, #16]
 801777c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801777e:	4b35      	ldr	r3, [pc, #212]	; (8017854 <tcp_listen_input+0x1e0>)
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	1e5a      	subs	r2, r3, #1
 8017784:	697b      	ldr	r3, [r7, #20]
 8017786:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	691a      	ldr	r2, [r3, #16]
 801778c:	697b      	ldr	r3, [r7, #20]
 801778e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8017790:	697b      	ldr	r3, [r7, #20]
 8017792:	687a      	ldr	r2, [r7, #4]
 8017794:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	7a5b      	ldrb	r3, [r3, #9]
 801779a:	f003 030c 	and.w	r3, r3, #12
 801779e:	b2da      	uxtb	r2, r3
 80177a0:	697b      	ldr	r3, [r7, #20]
 80177a2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	7a1a      	ldrb	r2, [r3, #8]
 80177a8:	697b      	ldr	r3, [r7, #20]
 80177aa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80177ac:	4b2e      	ldr	r3, [pc, #184]	; (8017868 <tcp_listen_input+0x1f4>)
 80177ae:	681a      	ldr	r2, [r3, #0]
 80177b0:	697b      	ldr	r3, [r7, #20]
 80177b2:	60da      	str	r2, [r3, #12]
 80177b4:	4a2c      	ldr	r2, [pc, #176]	; (8017868 <tcp_listen_input+0x1f4>)
 80177b6:	697b      	ldr	r3, [r7, #20]
 80177b8:	6013      	str	r3, [r2, #0]
 80177ba:	f003 fd3b 	bl	801b234 <tcp_timer_needed>
 80177be:	4b2b      	ldr	r3, [pc, #172]	; (801786c <tcp_listen_input+0x1f8>)
 80177c0:	2201      	movs	r2, #1
 80177c2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80177c4:	6978      	ldr	r0, [r7, #20]
 80177c6:	f001 fd8f 	bl	80192e8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80177ca:	4b23      	ldr	r3, [pc, #140]	; (8017858 <tcp_listen_input+0x1e4>)
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	89db      	ldrh	r3, [r3, #14]
 80177d0:	b29a      	uxth	r2, r3
 80177d2:	697b      	ldr	r3, [r7, #20]
 80177d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80177d8:	697b      	ldr	r3, [r7, #20]
 80177da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80177de:	697b      	ldr	r3, [r7, #20]
 80177e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80177e4:	697b      	ldr	r3, [r7, #20]
 80177e6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80177e8:	697b      	ldr	r3, [r7, #20]
 80177ea:	3304      	adds	r3, #4
 80177ec:	4618      	mov	r0, r3
 80177ee:	f005 f92d 	bl	801ca4c <ip4_route>
 80177f2:	4601      	mov	r1, r0
 80177f4:	697b      	ldr	r3, [r7, #20]
 80177f6:	3304      	adds	r3, #4
 80177f8:	461a      	mov	r2, r3
 80177fa:	4620      	mov	r0, r4
 80177fc:	f7ff fa34 	bl	8016c68 <tcp_eff_send_mss_netif>
 8017800:	4603      	mov	r3, r0
 8017802:	461a      	mov	r2, r3
 8017804:	697b      	ldr	r3, [r7, #20]
 8017806:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8017808:	2112      	movs	r1, #18
 801780a:	6978      	ldr	r0, [r7, #20]
 801780c:	f002 fc9c 	bl	801a148 <tcp_enqueue_flags>
 8017810:	4603      	mov	r3, r0
 8017812:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8017814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017818:	2b00      	cmp	r3, #0
 801781a:	d004      	beq.n	8017826 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801781c:	2100      	movs	r1, #0
 801781e:	6978      	ldr	r0, [r7, #20]
 8017820:	f7fd fed8 	bl	80155d4 <tcp_abandon>
      return;
 8017824:	e007      	b.n	8017836 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8017826:	6978      	ldr	r0, [r7, #20]
 8017828:	f002 fd7c 	bl	801a324 <tcp_output>
  return;
 801782c:	bf00      	nop
 801782e:	e001      	b.n	8017834 <tcp_listen_input+0x1c0>
    return;
 8017830:	bf00      	nop
 8017832:	e000      	b.n	8017836 <tcp_listen_input+0x1c2>
  return;
 8017834:	bf00      	nop
}
 8017836:	371c      	adds	r7, #28
 8017838:	46bd      	mov	sp, r7
 801783a:	bd90      	pop	{r4, r7, pc}
 801783c:	20004554 	.word	0x20004554
 8017840:	08020524 	.word	0x08020524
 8017844:	0802071c 	.word	0x0802071c
 8017848:	08020570 	.word	0x08020570
 801784c:	2000454c 	.word	0x2000454c
 8017850:	20004552 	.word	0x20004552
 8017854:	20004548 	.word	0x20004548
 8017858:	20004538 	.word	0x20004538
 801785c:	20007e04 	.word	0x20007e04
 8017860:	20007e08 	.word	0x20007e08
 8017864:	20007df4 	.word	0x20007df4
 8017868:	2000b508 	.word	0x2000b508
 801786c:	2000b504 	.word	0x2000b504

08017870 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8017870:	b580      	push	{r7, lr}
 8017872:	b086      	sub	sp, #24
 8017874:	af04      	add	r7, sp, #16
 8017876:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8017878:	4b30      	ldr	r3, [pc, #192]	; (801793c <tcp_timewait_input+0xcc>)
 801787a:	781b      	ldrb	r3, [r3, #0]
 801787c:	f003 0304 	and.w	r3, r3, #4
 8017880:	2b00      	cmp	r3, #0
 8017882:	d154      	bne.n	801792e <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d106      	bne.n	8017898 <tcp_timewait_input+0x28>
 801788a:	4b2d      	ldr	r3, [pc, #180]	; (8017940 <tcp_timewait_input+0xd0>)
 801788c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017890:	492c      	ldr	r1, [pc, #176]	; (8017944 <tcp_timewait_input+0xd4>)
 8017892:	482d      	ldr	r0, [pc, #180]	; (8017948 <tcp_timewait_input+0xd8>)
 8017894:	f006 fc16 	bl	801e0c4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8017898:	4b28      	ldr	r3, [pc, #160]	; (801793c <tcp_timewait_input+0xcc>)
 801789a:	781b      	ldrb	r3, [r3, #0]
 801789c:	f003 0302 	and.w	r3, r3, #2
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d02a      	beq.n	80178fa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80178a4:	4b29      	ldr	r3, [pc, #164]	; (801794c <tcp_timewait_input+0xdc>)
 80178a6:	681a      	ldr	r2, [r3, #0]
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178ac:	1ad3      	subs	r3, r2, r3
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	db2d      	blt.n	801790e <tcp_timewait_input+0x9e>
 80178b2:	4b26      	ldr	r3, [pc, #152]	; (801794c <tcp_timewait_input+0xdc>)
 80178b4:	681a      	ldr	r2, [r3, #0]
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178ba:	6879      	ldr	r1, [r7, #4]
 80178bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80178be:	440b      	add	r3, r1
 80178c0:	1ad3      	subs	r3, r2, r3
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	dc23      	bgt.n	801790e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80178c6:	4b22      	ldr	r3, [pc, #136]	; (8017950 <tcp_timewait_input+0xe0>)
 80178c8:	6819      	ldr	r1, [r3, #0]
 80178ca:	4b22      	ldr	r3, [pc, #136]	; (8017954 <tcp_timewait_input+0xe4>)
 80178cc:	881b      	ldrh	r3, [r3, #0]
 80178ce:	461a      	mov	r2, r3
 80178d0:	4b1e      	ldr	r3, [pc, #120]	; (801794c <tcp_timewait_input+0xdc>)
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80178d6:	4b20      	ldr	r3, [pc, #128]	; (8017958 <tcp_timewait_input+0xe8>)
 80178d8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80178da:	885b      	ldrh	r3, [r3, #2]
 80178dc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80178de:	4a1e      	ldr	r2, [pc, #120]	; (8017958 <tcp_timewait_input+0xe8>)
 80178e0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80178e2:	8812      	ldrh	r2, [r2, #0]
 80178e4:	b292      	uxth	r2, r2
 80178e6:	9202      	str	r2, [sp, #8]
 80178e8:	9301      	str	r3, [sp, #4]
 80178ea:	4b1c      	ldr	r3, [pc, #112]	; (801795c <tcp_timewait_input+0xec>)
 80178ec:	9300      	str	r3, [sp, #0]
 80178ee:	4b1c      	ldr	r3, [pc, #112]	; (8017960 <tcp_timewait_input+0xf0>)
 80178f0:	4602      	mov	r2, r0
 80178f2:	6878      	ldr	r0, [r7, #4]
 80178f4:	f003 fadc 	bl	801aeb0 <tcp_rst>
      return;
 80178f8:	e01c      	b.n	8017934 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 80178fa:	4b10      	ldr	r3, [pc, #64]	; (801793c <tcp_timewait_input+0xcc>)
 80178fc:	781b      	ldrb	r3, [r3, #0]
 80178fe:	f003 0301 	and.w	r3, r3, #1
 8017902:	2b00      	cmp	r3, #0
 8017904:	d003      	beq.n	801790e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8017906:	4b17      	ldr	r3, [pc, #92]	; (8017964 <tcp_timewait_input+0xf4>)
 8017908:	681a      	ldr	r2, [r3, #0]
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801790e:	4b11      	ldr	r3, [pc, #68]	; (8017954 <tcp_timewait_input+0xe4>)
 8017910:	881b      	ldrh	r3, [r3, #0]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d00d      	beq.n	8017932 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	8b5b      	ldrh	r3, [r3, #26]
 801791a:	f043 0302 	orr.w	r3, r3, #2
 801791e:	b29a      	uxth	r2, r3
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017924:	6878      	ldr	r0, [r7, #4]
 8017926:	f002 fcfd 	bl	801a324 <tcp_output>
  }
  return;
 801792a:	bf00      	nop
 801792c:	e001      	b.n	8017932 <tcp_timewait_input+0xc2>
    return;
 801792e:	bf00      	nop
 8017930:	e000      	b.n	8017934 <tcp_timewait_input+0xc4>
  return;
 8017932:	bf00      	nop
}
 8017934:	3708      	adds	r7, #8
 8017936:	46bd      	mov	sp, r7
 8017938:	bd80      	pop	{r7, pc}
 801793a:	bf00      	nop
 801793c:	20004554 	.word	0x20004554
 8017940:	08020524 	.word	0x08020524
 8017944:	0802073c 	.word	0x0802073c
 8017948:	08020570 	.word	0x08020570
 801794c:	20004548 	.word	0x20004548
 8017950:	2000454c 	.word	0x2000454c
 8017954:	20004552 	.word	0x20004552
 8017958:	20004538 	.word	0x20004538
 801795c:	20007e04 	.word	0x20007e04
 8017960:	20007e08 	.word	0x20007e08
 8017964:	2000b50c 	.word	0x2000b50c

08017968 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8017968:	b590      	push	{r4, r7, lr}
 801796a:	b08d      	sub	sp, #52	; 0x34
 801796c:	af04      	add	r7, sp, #16
 801796e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8017970:	2300      	movs	r3, #0
 8017972:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8017974:	2300      	movs	r3, #0
 8017976:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d106      	bne.n	801798c <tcp_process+0x24>
 801797e:	4ba5      	ldr	r3, [pc, #660]	; (8017c14 <tcp_process+0x2ac>)
 8017980:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8017984:	49a4      	ldr	r1, [pc, #656]	; (8017c18 <tcp_process+0x2b0>)
 8017986:	48a5      	ldr	r0, [pc, #660]	; (8017c1c <tcp_process+0x2b4>)
 8017988:	f006 fb9c 	bl	801e0c4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801798c:	4ba4      	ldr	r3, [pc, #656]	; (8017c20 <tcp_process+0x2b8>)
 801798e:	781b      	ldrb	r3, [r3, #0]
 8017990:	f003 0304 	and.w	r3, r3, #4
 8017994:	2b00      	cmp	r3, #0
 8017996:	d04e      	beq.n	8017a36 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	7d1b      	ldrb	r3, [r3, #20]
 801799c:	2b02      	cmp	r3, #2
 801799e:	d108      	bne.n	80179b2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80179a4:	4b9f      	ldr	r3, [pc, #636]	; (8017c24 <tcp_process+0x2bc>)
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	429a      	cmp	r2, r3
 80179aa:	d123      	bne.n	80179f4 <tcp_process+0x8c>
        acceptable = 1;
 80179ac:	2301      	movs	r3, #1
 80179ae:	76fb      	strb	r3, [r7, #27]
 80179b0:	e020      	b.n	80179f4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80179b6:	4b9c      	ldr	r3, [pc, #624]	; (8017c28 <tcp_process+0x2c0>)
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	429a      	cmp	r2, r3
 80179bc:	d102      	bne.n	80179c4 <tcp_process+0x5c>
        acceptable = 1;
 80179be:	2301      	movs	r3, #1
 80179c0:	76fb      	strb	r3, [r7, #27]
 80179c2:	e017      	b.n	80179f4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80179c4:	4b98      	ldr	r3, [pc, #608]	; (8017c28 <tcp_process+0x2c0>)
 80179c6:	681a      	ldr	r2, [r3, #0]
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179cc:	1ad3      	subs	r3, r2, r3
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	db10      	blt.n	80179f4 <tcp_process+0x8c>
 80179d2:	4b95      	ldr	r3, [pc, #596]	; (8017c28 <tcp_process+0x2c0>)
 80179d4:	681a      	ldr	r2, [r3, #0]
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179da:	6879      	ldr	r1, [r7, #4]
 80179dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80179de:	440b      	add	r3, r1
 80179e0:	1ad3      	subs	r3, r2, r3
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	dc06      	bgt.n	80179f4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	8b5b      	ldrh	r3, [r3, #26]
 80179ea:	f043 0302 	orr.w	r3, r3, #2
 80179ee:	b29a      	uxth	r2, r3
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80179f4:	7efb      	ldrb	r3, [r7, #27]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d01b      	beq.n	8017a32 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	7d1b      	ldrb	r3, [r3, #20]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d106      	bne.n	8017a10 <tcp_process+0xa8>
 8017a02:	4b84      	ldr	r3, [pc, #528]	; (8017c14 <tcp_process+0x2ac>)
 8017a04:	f44f 724e 	mov.w	r2, #824	; 0x338
 8017a08:	4988      	ldr	r1, [pc, #544]	; (8017c2c <tcp_process+0x2c4>)
 8017a0a:	4884      	ldr	r0, [pc, #528]	; (8017c1c <tcp_process+0x2b4>)
 8017a0c:	f006 fb5a 	bl	801e0c4 <iprintf>
      recv_flags |= TF_RESET;
 8017a10:	4b87      	ldr	r3, [pc, #540]	; (8017c30 <tcp_process+0x2c8>)
 8017a12:	781b      	ldrb	r3, [r3, #0]
 8017a14:	f043 0308 	orr.w	r3, r3, #8
 8017a18:	b2da      	uxtb	r2, r3
 8017a1a:	4b85      	ldr	r3, [pc, #532]	; (8017c30 <tcp_process+0x2c8>)
 8017a1c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	8b5b      	ldrh	r3, [r3, #26]
 8017a22:	f023 0301 	bic.w	r3, r3, #1
 8017a26:	b29a      	uxth	r2, r3
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8017a2c:	f06f 030d 	mvn.w	r3, #13
 8017a30:	e37a      	b.n	8018128 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8017a32:	2300      	movs	r3, #0
 8017a34:	e378      	b.n	8018128 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8017a36:	4b7a      	ldr	r3, [pc, #488]	; (8017c20 <tcp_process+0x2b8>)
 8017a38:	781b      	ldrb	r3, [r3, #0]
 8017a3a:	f003 0302 	and.w	r3, r3, #2
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d010      	beq.n	8017a64 <tcp_process+0xfc>
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	7d1b      	ldrb	r3, [r3, #20]
 8017a46:	2b02      	cmp	r3, #2
 8017a48:	d00c      	beq.n	8017a64 <tcp_process+0xfc>
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	7d1b      	ldrb	r3, [r3, #20]
 8017a4e:	2b03      	cmp	r3, #3
 8017a50:	d008      	beq.n	8017a64 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	8b5b      	ldrh	r3, [r3, #26]
 8017a56:	f043 0302 	orr.w	r3, r3, #2
 8017a5a:	b29a      	uxth	r2, r3
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8017a60:	2300      	movs	r3, #0
 8017a62:	e361      	b.n	8018128 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	8b5b      	ldrh	r3, [r3, #26]
 8017a68:	f003 0310 	and.w	r3, r3, #16
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d103      	bne.n	8017a78 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8017a70:	4b70      	ldr	r3, [pc, #448]	; (8017c34 <tcp_process+0x2cc>)
 8017a72:	681a      	ldr	r2, [r3, #0]
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	2200      	movs	r2, #0
 8017a7c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	2200      	movs	r2, #0
 8017a84:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8017a88:	6878      	ldr	r0, [r7, #4]
 8017a8a:	f001 fc2d 	bl	80192e8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	7d1b      	ldrb	r3, [r3, #20]
 8017a92:	3b02      	subs	r3, #2
 8017a94:	2b07      	cmp	r3, #7
 8017a96:	f200 8337 	bhi.w	8018108 <tcp_process+0x7a0>
 8017a9a:	a201      	add	r2, pc, #4	; (adr r2, 8017aa0 <tcp_process+0x138>)
 8017a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017aa0:	08017ac1 	.word	0x08017ac1
 8017aa4:	08017cf1 	.word	0x08017cf1
 8017aa8:	08017e69 	.word	0x08017e69
 8017aac:	08017e93 	.word	0x08017e93
 8017ab0:	08017fb7 	.word	0x08017fb7
 8017ab4:	08017e69 	.word	0x08017e69
 8017ab8:	08018043 	.word	0x08018043
 8017abc:	080180d3 	.word	0x080180d3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017ac0:	4b57      	ldr	r3, [pc, #348]	; (8017c20 <tcp_process+0x2b8>)
 8017ac2:	781b      	ldrb	r3, [r3, #0]
 8017ac4:	f003 0310 	and.w	r3, r3, #16
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	f000 80e4 	beq.w	8017c96 <tcp_process+0x32e>
 8017ace:	4b54      	ldr	r3, [pc, #336]	; (8017c20 <tcp_process+0x2b8>)
 8017ad0:	781b      	ldrb	r3, [r3, #0]
 8017ad2:	f003 0302 	and.w	r3, r3, #2
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	f000 80dd 	beq.w	8017c96 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ae0:	1c5a      	adds	r2, r3, #1
 8017ae2:	4b50      	ldr	r3, [pc, #320]	; (8017c24 <tcp_process+0x2bc>)
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	429a      	cmp	r2, r3
 8017ae8:	f040 80d5 	bne.w	8017c96 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8017aec:	4b4e      	ldr	r3, [pc, #312]	; (8017c28 <tcp_process+0x2c0>)
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	1c5a      	adds	r2, r3, #1
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8017afe:	4b49      	ldr	r3, [pc, #292]	; (8017c24 <tcp_process+0x2bc>)
 8017b00:	681a      	ldr	r2, [r3, #0]
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8017b06:	4b4c      	ldr	r3, [pc, #304]	; (8017c38 <tcp_process+0x2d0>)
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	89db      	ldrh	r3, [r3, #14]
 8017b0c:	b29a      	uxth	r2, r3
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017b20:	4b41      	ldr	r3, [pc, #260]	; (8017c28 <tcp_process+0x2c0>)
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	1e5a      	subs	r2, r3, #1
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	2204      	movs	r2, #4
 8017b2e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	3304      	adds	r3, #4
 8017b38:	4618      	mov	r0, r3
 8017b3a:	f004 ff87 	bl	801ca4c <ip4_route>
 8017b3e:	4601      	mov	r1, r0
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	3304      	adds	r3, #4
 8017b44:	461a      	mov	r2, r3
 8017b46:	4620      	mov	r0, r4
 8017b48:	f7ff f88e 	bl	8016c68 <tcp_eff_send_mss_netif>
 8017b4c:	4603      	mov	r3, r0
 8017b4e:	461a      	mov	r2, r3
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017b58:	009a      	lsls	r2, r3, #2
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017b5e:	005b      	lsls	r3, r3, #1
 8017b60:	f241 111c 	movw	r1, #4380	; 0x111c
 8017b64:	428b      	cmp	r3, r1
 8017b66:	bf38      	it	cc
 8017b68:	460b      	movcc	r3, r1
 8017b6a:	429a      	cmp	r2, r3
 8017b6c:	d204      	bcs.n	8017b78 <tcp_process+0x210>
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017b72:	009b      	lsls	r3, r3, #2
 8017b74:	b29b      	uxth	r3, r3
 8017b76:	e00d      	b.n	8017b94 <tcp_process+0x22c>
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017b7c:	005b      	lsls	r3, r3, #1
 8017b7e:	f241 121c 	movw	r2, #4380	; 0x111c
 8017b82:	4293      	cmp	r3, r2
 8017b84:	d904      	bls.n	8017b90 <tcp_process+0x228>
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017b8a:	005b      	lsls	r3, r3, #1
 8017b8c:	b29b      	uxth	r3, r3
 8017b8e:	e001      	b.n	8017b94 <tcp_process+0x22c>
 8017b90:	f241 131c 	movw	r3, #4380	; 0x111c
 8017b94:	687a      	ldr	r2, [r7, #4]
 8017b96:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d106      	bne.n	8017bb2 <tcp_process+0x24a>
 8017ba4:	4b1b      	ldr	r3, [pc, #108]	; (8017c14 <tcp_process+0x2ac>)
 8017ba6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8017baa:	4924      	ldr	r1, [pc, #144]	; (8017c3c <tcp_process+0x2d4>)
 8017bac:	481b      	ldr	r0, [pc, #108]	; (8017c1c <tcp_process+0x2b4>)
 8017bae:	f006 fa89 	bl	801e0c4 <iprintf>
        --pcb->snd_queuelen;
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017bb8:	3b01      	subs	r3, #1
 8017bba:	b29a      	uxth	r2, r3
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017bc6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8017bc8:	69fb      	ldr	r3, [r7, #28]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d111      	bne.n	8017bf2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017bd2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8017bd4:	69fb      	ldr	r3, [r7, #28]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d106      	bne.n	8017be8 <tcp_process+0x280>
 8017bda:	4b0e      	ldr	r3, [pc, #56]	; (8017c14 <tcp_process+0x2ac>)
 8017bdc:	f44f 725d 	mov.w	r2, #884	; 0x374
 8017be0:	4917      	ldr	r1, [pc, #92]	; (8017c40 <tcp_process+0x2d8>)
 8017be2:	480e      	ldr	r0, [pc, #56]	; (8017c1c <tcp_process+0x2b4>)
 8017be4:	f006 fa6e 	bl	801e0c4 <iprintf>
          pcb->unsent = rseg->next;
 8017be8:	69fb      	ldr	r3, [r7, #28]
 8017bea:	681a      	ldr	r2, [r3, #0]
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	66da      	str	r2, [r3, #108]	; 0x6c
 8017bf0:	e003      	b.n	8017bfa <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8017bf2:	69fb      	ldr	r3, [r7, #28]
 8017bf4:	681a      	ldr	r2, [r3, #0]
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8017bfa:	69f8      	ldr	r0, [r7, #28]
 8017bfc:	f7fe fc4a 	bl	8016494 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d11d      	bne.n	8017c44 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c0e:	861a      	strh	r2, [r3, #48]	; 0x30
 8017c10:	e01f      	b.n	8017c52 <tcp_process+0x2ea>
 8017c12:	bf00      	nop
 8017c14:	08020524 	.word	0x08020524
 8017c18:	0802075c 	.word	0x0802075c
 8017c1c:	08020570 	.word	0x08020570
 8017c20:	20004554 	.word	0x20004554
 8017c24:	2000454c 	.word	0x2000454c
 8017c28:	20004548 	.word	0x20004548
 8017c2c:	08020778 	.word	0x08020778
 8017c30:	20004555 	.word	0x20004555
 8017c34:	2000b50c 	.word	0x2000b50c
 8017c38:	20004538 	.word	0x20004538
 8017c3c:	08020798 	.word	0x08020798
 8017c40:	080207b0 	.word	0x080207b0
        } else {
          pcb->rtime = 0;
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	2200      	movs	r2, #0
 8017c48:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	2200      	movs	r2, #0
 8017c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d00a      	beq.n	8017c72 <tcp_process+0x30a>
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c62:	687a      	ldr	r2, [r7, #4]
 8017c64:	6910      	ldr	r0, [r2, #16]
 8017c66:	2200      	movs	r2, #0
 8017c68:	6879      	ldr	r1, [r7, #4]
 8017c6a:	4798      	blx	r3
 8017c6c:	4603      	mov	r3, r0
 8017c6e:	76bb      	strb	r3, [r7, #26]
 8017c70:	e001      	b.n	8017c76 <tcp_process+0x30e>
 8017c72:	2300      	movs	r3, #0
 8017c74:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8017c76:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017c7a:	f113 0f0d 	cmn.w	r3, #13
 8017c7e:	d102      	bne.n	8017c86 <tcp_process+0x31e>
          return ERR_ABRT;
 8017c80:	f06f 030c 	mvn.w	r3, #12
 8017c84:	e250      	b.n	8018128 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	8b5b      	ldrh	r3, [r3, #26]
 8017c8a:	f043 0302 	orr.w	r3, r3, #2
 8017c8e:	b29a      	uxth	r2, r3
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8017c94:	e23a      	b.n	801810c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8017c96:	4b9d      	ldr	r3, [pc, #628]	; (8017f0c <tcp_process+0x5a4>)
 8017c98:	781b      	ldrb	r3, [r3, #0]
 8017c9a:	f003 0310 	and.w	r3, r3, #16
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	f000 8234 	beq.w	801810c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017ca4:	4b9a      	ldr	r3, [pc, #616]	; (8017f10 <tcp_process+0x5a8>)
 8017ca6:	6819      	ldr	r1, [r3, #0]
 8017ca8:	4b9a      	ldr	r3, [pc, #616]	; (8017f14 <tcp_process+0x5ac>)
 8017caa:	881b      	ldrh	r3, [r3, #0]
 8017cac:	461a      	mov	r2, r3
 8017cae:	4b9a      	ldr	r3, [pc, #616]	; (8017f18 <tcp_process+0x5b0>)
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017cb4:	4b99      	ldr	r3, [pc, #612]	; (8017f1c <tcp_process+0x5b4>)
 8017cb6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017cb8:	885b      	ldrh	r3, [r3, #2]
 8017cba:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017cbc:	4a97      	ldr	r2, [pc, #604]	; (8017f1c <tcp_process+0x5b4>)
 8017cbe:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017cc0:	8812      	ldrh	r2, [r2, #0]
 8017cc2:	b292      	uxth	r2, r2
 8017cc4:	9202      	str	r2, [sp, #8]
 8017cc6:	9301      	str	r3, [sp, #4]
 8017cc8:	4b95      	ldr	r3, [pc, #596]	; (8017f20 <tcp_process+0x5b8>)
 8017cca:	9300      	str	r3, [sp, #0]
 8017ccc:	4b95      	ldr	r3, [pc, #596]	; (8017f24 <tcp_process+0x5bc>)
 8017cce:	4602      	mov	r2, r0
 8017cd0:	6878      	ldr	r0, [r7, #4]
 8017cd2:	f003 f8ed 	bl	801aeb0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017cdc:	2b05      	cmp	r3, #5
 8017cde:	f200 8215 	bhi.w	801810c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8017ce8:	6878      	ldr	r0, [r7, #4]
 8017cea:	f002 feab 	bl	801aa44 <tcp_rexmit_rto>
      break;
 8017cee:	e20d      	b.n	801810c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017cf0:	4b86      	ldr	r3, [pc, #536]	; (8017f0c <tcp_process+0x5a4>)
 8017cf2:	781b      	ldrb	r3, [r3, #0]
 8017cf4:	f003 0310 	and.w	r3, r3, #16
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	f000 80a1 	beq.w	8017e40 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017cfe:	4b84      	ldr	r3, [pc, #528]	; (8017f10 <tcp_process+0x5a8>)
 8017d00:	681a      	ldr	r2, [r3, #0]
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d06:	1ad3      	subs	r3, r2, r3
 8017d08:	3b01      	subs	r3, #1
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	db7e      	blt.n	8017e0c <tcp_process+0x4a4>
 8017d0e:	4b80      	ldr	r3, [pc, #512]	; (8017f10 <tcp_process+0x5a8>)
 8017d10:	681a      	ldr	r2, [r3, #0]
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017d16:	1ad3      	subs	r3, r2, r3
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	dc77      	bgt.n	8017e0c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	2204      	movs	r2, #4
 8017d20:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d102      	bne.n	8017d30 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8017d2a:	23fa      	movs	r3, #250	; 0xfa
 8017d2c:	76bb      	strb	r3, [r7, #26]
 8017d2e:	e01d      	b.n	8017d6c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017d34:	699b      	ldr	r3, [r3, #24]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d106      	bne.n	8017d48 <tcp_process+0x3e0>
 8017d3a:	4b7b      	ldr	r3, [pc, #492]	; (8017f28 <tcp_process+0x5c0>)
 8017d3c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8017d40:	497a      	ldr	r1, [pc, #488]	; (8017f2c <tcp_process+0x5c4>)
 8017d42:	487b      	ldr	r0, [pc, #492]	; (8017f30 <tcp_process+0x5c8>)
 8017d44:	f006 f9be 	bl	801e0c4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017d4c:	699b      	ldr	r3, [r3, #24]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d00a      	beq.n	8017d68 <tcp_process+0x400>
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017d56:	699b      	ldr	r3, [r3, #24]
 8017d58:	687a      	ldr	r2, [r7, #4]
 8017d5a:	6910      	ldr	r0, [r2, #16]
 8017d5c:	2200      	movs	r2, #0
 8017d5e:	6879      	ldr	r1, [r7, #4]
 8017d60:	4798      	blx	r3
 8017d62:	4603      	mov	r3, r0
 8017d64:	76bb      	strb	r3, [r7, #26]
 8017d66:	e001      	b.n	8017d6c <tcp_process+0x404>
 8017d68:	23f0      	movs	r3, #240	; 0xf0
 8017d6a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8017d6c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d00a      	beq.n	8017d8a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8017d74:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017d78:	f113 0f0d 	cmn.w	r3, #13
 8017d7c:	d002      	beq.n	8017d84 <tcp_process+0x41c>
              tcp_abort(pcb);
 8017d7e:	6878      	ldr	r0, [r7, #4]
 8017d80:	f7fd fce6 	bl	8015750 <tcp_abort>
            }
            return ERR_ABRT;
 8017d84:	f06f 030c 	mvn.w	r3, #12
 8017d88:	e1ce      	b.n	8018128 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017d8a:	6878      	ldr	r0, [r7, #4]
 8017d8c:	f000 fae0 	bl	8018350 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017d90:	4b68      	ldr	r3, [pc, #416]	; (8017f34 <tcp_process+0x5cc>)
 8017d92:	881b      	ldrh	r3, [r3, #0]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d005      	beq.n	8017da4 <tcp_process+0x43c>
            recv_acked--;
 8017d98:	4b66      	ldr	r3, [pc, #408]	; (8017f34 <tcp_process+0x5cc>)
 8017d9a:	881b      	ldrh	r3, [r3, #0]
 8017d9c:	3b01      	subs	r3, #1
 8017d9e:	b29a      	uxth	r2, r3
 8017da0:	4b64      	ldr	r3, [pc, #400]	; (8017f34 <tcp_process+0x5cc>)
 8017da2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017da8:	009a      	lsls	r2, r3, #2
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017dae:	005b      	lsls	r3, r3, #1
 8017db0:	f241 111c 	movw	r1, #4380	; 0x111c
 8017db4:	428b      	cmp	r3, r1
 8017db6:	bf38      	it	cc
 8017db8:	460b      	movcc	r3, r1
 8017dba:	429a      	cmp	r2, r3
 8017dbc:	d204      	bcs.n	8017dc8 <tcp_process+0x460>
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017dc2:	009b      	lsls	r3, r3, #2
 8017dc4:	b29b      	uxth	r3, r3
 8017dc6:	e00d      	b.n	8017de4 <tcp_process+0x47c>
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017dcc:	005b      	lsls	r3, r3, #1
 8017dce:	f241 121c 	movw	r2, #4380	; 0x111c
 8017dd2:	4293      	cmp	r3, r2
 8017dd4:	d904      	bls.n	8017de0 <tcp_process+0x478>
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017dda:	005b      	lsls	r3, r3, #1
 8017ddc:	b29b      	uxth	r3, r3
 8017dde:	e001      	b.n	8017de4 <tcp_process+0x47c>
 8017de0:	f241 131c 	movw	r3, #4380	; 0x111c
 8017de4:	687a      	ldr	r2, [r7, #4]
 8017de6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8017dea:	4b53      	ldr	r3, [pc, #332]	; (8017f38 <tcp_process+0x5d0>)
 8017dec:	781b      	ldrb	r3, [r3, #0]
 8017dee:	f003 0320 	and.w	r3, r3, #32
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d037      	beq.n	8017e66 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	8b5b      	ldrh	r3, [r3, #26]
 8017dfa:	f043 0302 	orr.w	r3, r3, #2
 8017dfe:	b29a      	uxth	r2, r3
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	2207      	movs	r2, #7
 8017e08:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8017e0a:	e02c      	b.n	8017e66 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017e0c:	4b40      	ldr	r3, [pc, #256]	; (8017f10 <tcp_process+0x5a8>)
 8017e0e:	6819      	ldr	r1, [r3, #0]
 8017e10:	4b40      	ldr	r3, [pc, #256]	; (8017f14 <tcp_process+0x5ac>)
 8017e12:	881b      	ldrh	r3, [r3, #0]
 8017e14:	461a      	mov	r2, r3
 8017e16:	4b40      	ldr	r3, [pc, #256]	; (8017f18 <tcp_process+0x5b0>)
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017e1c:	4b3f      	ldr	r3, [pc, #252]	; (8017f1c <tcp_process+0x5b4>)
 8017e1e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017e20:	885b      	ldrh	r3, [r3, #2]
 8017e22:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017e24:	4a3d      	ldr	r2, [pc, #244]	; (8017f1c <tcp_process+0x5b4>)
 8017e26:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017e28:	8812      	ldrh	r2, [r2, #0]
 8017e2a:	b292      	uxth	r2, r2
 8017e2c:	9202      	str	r2, [sp, #8]
 8017e2e:	9301      	str	r3, [sp, #4]
 8017e30:	4b3b      	ldr	r3, [pc, #236]	; (8017f20 <tcp_process+0x5b8>)
 8017e32:	9300      	str	r3, [sp, #0]
 8017e34:	4b3b      	ldr	r3, [pc, #236]	; (8017f24 <tcp_process+0x5bc>)
 8017e36:	4602      	mov	r2, r0
 8017e38:	6878      	ldr	r0, [r7, #4]
 8017e3a:	f003 f839 	bl	801aeb0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8017e3e:	e167      	b.n	8018110 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8017e40:	4b32      	ldr	r3, [pc, #200]	; (8017f0c <tcp_process+0x5a4>)
 8017e42:	781b      	ldrb	r3, [r3, #0]
 8017e44:	f003 0302 	and.w	r3, r3, #2
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	f000 8161 	beq.w	8018110 <tcp_process+0x7a8>
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e52:	1e5a      	subs	r2, r3, #1
 8017e54:	4b30      	ldr	r3, [pc, #192]	; (8017f18 <tcp_process+0x5b0>)
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	429a      	cmp	r2, r3
 8017e5a:	f040 8159 	bne.w	8018110 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8017e5e:	6878      	ldr	r0, [r7, #4]
 8017e60:	f002 fe12 	bl	801aa88 <tcp_rexmit>
      break;
 8017e64:	e154      	b.n	8018110 <tcp_process+0x7a8>
 8017e66:	e153      	b.n	8018110 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8017e68:	6878      	ldr	r0, [r7, #4]
 8017e6a:	f000 fa71 	bl	8018350 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017e6e:	4b32      	ldr	r3, [pc, #200]	; (8017f38 <tcp_process+0x5d0>)
 8017e70:	781b      	ldrb	r3, [r3, #0]
 8017e72:	f003 0320 	and.w	r3, r3, #32
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	f000 814c 	beq.w	8018114 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	8b5b      	ldrh	r3, [r3, #26]
 8017e80:	f043 0302 	orr.w	r3, r3, #2
 8017e84:	b29a      	uxth	r2, r3
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	2207      	movs	r2, #7
 8017e8e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017e90:	e140      	b.n	8018114 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8017e92:	6878      	ldr	r0, [r7, #4]
 8017e94:	f000 fa5c 	bl	8018350 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017e98:	4b27      	ldr	r3, [pc, #156]	; (8017f38 <tcp_process+0x5d0>)
 8017e9a:	781b      	ldrb	r3, [r3, #0]
 8017e9c:	f003 0320 	and.w	r3, r3, #32
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d071      	beq.n	8017f88 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017ea4:	4b19      	ldr	r3, [pc, #100]	; (8017f0c <tcp_process+0x5a4>)
 8017ea6:	781b      	ldrb	r3, [r3, #0]
 8017ea8:	f003 0310 	and.w	r3, r3, #16
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d060      	beq.n	8017f72 <tcp_process+0x60a>
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017eb4:	4b16      	ldr	r3, [pc, #88]	; (8017f10 <tcp_process+0x5a8>)
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	429a      	cmp	r2, r3
 8017eba:	d15a      	bne.n	8017f72 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d156      	bne.n	8017f72 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	8b5b      	ldrh	r3, [r3, #26]
 8017ec8:	f043 0302 	orr.w	r3, r3, #2
 8017ecc:	b29a      	uxth	r2, r3
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8017ed2:	6878      	ldr	r0, [r7, #4]
 8017ed4:	f7fe fdbe 	bl	8016a54 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017ed8:	4b18      	ldr	r3, [pc, #96]	; (8017f3c <tcp_process+0x5d4>)
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	687a      	ldr	r2, [r7, #4]
 8017ede:	429a      	cmp	r2, r3
 8017ee0:	d105      	bne.n	8017eee <tcp_process+0x586>
 8017ee2:	4b16      	ldr	r3, [pc, #88]	; (8017f3c <tcp_process+0x5d4>)
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	68db      	ldr	r3, [r3, #12]
 8017ee8:	4a14      	ldr	r2, [pc, #80]	; (8017f3c <tcp_process+0x5d4>)
 8017eea:	6013      	str	r3, [r2, #0]
 8017eec:	e02e      	b.n	8017f4c <tcp_process+0x5e4>
 8017eee:	4b13      	ldr	r3, [pc, #76]	; (8017f3c <tcp_process+0x5d4>)
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	617b      	str	r3, [r7, #20]
 8017ef4:	e027      	b.n	8017f46 <tcp_process+0x5de>
 8017ef6:	697b      	ldr	r3, [r7, #20]
 8017ef8:	68db      	ldr	r3, [r3, #12]
 8017efa:	687a      	ldr	r2, [r7, #4]
 8017efc:	429a      	cmp	r2, r3
 8017efe:	d11f      	bne.n	8017f40 <tcp_process+0x5d8>
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	68da      	ldr	r2, [r3, #12]
 8017f04:	697b      	ldr	r3, [r7, #20]
 8017f06:	60da      	str	r2, [r3, #12]
 8017f08:	e020      	b.n	8017f4c <tcp_process+0x5e4>
 8017f0a:	bf00      	nop
 8017f0c:	20004554 	.word	0x20004554
 8017f10:	2000454c 	.word	0x2000454c
 8017f14:	20004552 	.word	0x20004552
 8017f18:	20004548 	.word	0x20004548
 8017f1c:	20004538 	.word	0x20004538
 8017f20:	20007e04 	.word	0x20007e04
 8017f24:	20007e08 	.word	0x20007e08
 8017f28:	08020524 	.word	0x08020524
 8017f2c:	080207c4 	.word	0x080207c4
 8017f30:	08020570 	.word	0x08020570
 8017f34:	20004550 	.word	0x20004550
 8017f38:	20004555 	.word	0x20004555
 8017f3c:	2000b508 	.word	0x2000b508
 8017f40:	697b      	ldr	r3, [r7, #20]
 8017f42:	68db      	ldr	r3, [r3, #12]
 8017f44:	617b      	str	r3, [r7, #20]
 8017f46:	697b      	ldr	r3, [r7, #20]
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d1d4      	bne.n	8017ef6 <tcp_process+0x58e>
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	2200      	movs	r2, #0
 8017f50:	60da      	str	r2, [r3, #12]
 8017f52:	4b77      	ldr	r3, [pc, #476]	; (8018130 <tcp_process+0x7c8>)
 8017f54:	2201      	movs	r2, #1
 8017f56:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	220a      	movs	r2, #10
 8017f5c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8017f5e:	4b75      	ldr	r3, [pc, #468]	; (8018134 <tcp_process+0x7cc>)
 8017f60:	681a      	ldr	r2, [r3, #0]
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	60da      	str	r2, [r3, #12]
 8017f66:	4a73      	ldr	r2, [pc, #460]	; (8018134 <tcp_process+0x7cc>)
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	6013      	str	r3, [r2, #0]
 8017f6c:	f003 f962 	bl	801b234 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8017f70:	e0d2      	b.n	8018118 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	8b5b      	ldrh	r3, [r3, #26]
 8017f76:	f043 0302 	orr.w	r3, r3, #2
 8017f7a:	b29a      	uxth	r2, r3
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	2208      	movs	r2, #8
 8017f84:	751a      	strb	r2, [r3, #20]
      break;
 8017f86:	e0c7      	b.n	8018118 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017f88:	4b6b      	ldr	r3, [pc, #428]	; (8018138 <tcp_process+0x7d0>)
 8017f8a:	781b      	ldrb	r3, [r3, #0]
 8017f8c:	f003 0310 	and.w	r3, r3, #16
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	f000 80c1 	beq.w	8018118 <tcp_process+0x7b0>
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017f9a:	4b68      	ldr	r3, [pc, #416]	; (801813c <tcp_process+0x7d4>)
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	429a      	cmp	r2, r3
 8017fa0:	f040 80ba 	bne.w	8018118 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	f040 80b5 	bne.w	8018118 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	2206      	movs	r2, #6
 8017fb2:	751a      	strb	r2, [r3, #20]
      break;
 8017fb4:	e0b0      	b.n	8018118 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8017fb6:	6878      	ldr	r0, [r7, #4]
 8017fb8:	f000 f9ca 	bl	8018350 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017fbc:	4b60      	ldr	r3, [pc, #384]	; (8018140 <tcp_process+0x7d8>)
 8017fbe:	781b      	ldrb	r3, [r3, #0]
 8017fc0:	f003 0320 	and.w	r3, r3, #32
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	f000 80a9 	beq.w	801811c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	8b5b      	ldrh	r3, [r3, #26]
 8017fce:	f043 0302 	orr.w	r3, r3, #2
 8017fd2:	b29a      	uxth	r2, r3
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017fd8:	6878      	ldr	r0, [r7, #4]
 8017fda:	f7fe fd3b 	bl	8016a54 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017fde:	4b59      	ldr	r3, [pc, #356]	; (8018144 <tcp_process+0x7dc>)
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	687a      	ldr	r2, [r7, #4]
 8017fe4:	429a      	cmp	r2, r3
 8017fe6:	d105      	bne.n	8017ff4 <tcp_process+0x68c>
 8017fe8:	4b56      	ldr	r3, [pc, #344]	; (8018144 <tcp_process+0x7dc>)
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	68db      	ldr	r3, [r3, #12]
 8017fee:	4a55      	ldr	r2, [pc, #340]	; (8018144 <tcp_process+0x7dc>)
 8017ff0:	6013      	str	r3, [r2, #0]
 8017ff2:	e013      	b.n	801801c <tcp_process+0x6b4>
 8017ff4:	4b53      	ldr	r3, [pc, #332]	; (8018144 <tcp_process+0x7dc>)
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	613b      	str	r3, [r7, #16]
 8017ffa:	e00c      	b.n	8018016 <tcp_process+0x6ae>
 8017ffc:	693b      	ldr	r3, [r7, #16]
 8017ffe:	68db      	ldr	r3, [r3, #12]
 8018000:	687a      	ldr	r2, [r7, #4]
 8018002:	429a      	cmp	r2, r3
 8018004:	d104      	bne.n	8018010 <tcp_process+0x6a8>
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	68da      	ldr	r2, [r3, #12]
 801800a:	693b      	ldr	r3, [r7, #16]
 801800c:	60da      	str	r2, [r3, #12]
 801800e:	e005      	b.n	801801c <tcp_process+0x6b4>
 8018010:	693b      	ldr	r3, [r7, #16]
 8018012:	68db      	ldr	r3, [r3, #12]
 8018014:	613b      	str	r3, [r7, #16]
 8018016:	693b      	ldr	r3, [r7, #16]
 8018018:	2b00      	cmp	r3, #0
 801801a:	d1ef      	bne.n	8017ffc <tcp_process+0x694>
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	2200      	movs	r2, #0
 8018020:	60da      	str	r2, [r3, #12]
 8018022:	4b43      	ldr	r3, [pc, #268]	; (8018130 <tcp_process+0x7c8>)
 8018024:	2201      	movs	r2, #1
 8018026:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	220a      	movs	r2, #10
 801802c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801802e:	4b41      	ldr	r3, [pc, #260]	; (8018134 <tcp_process+0x7cc>)
 8018030:	681a      	ldr	r2, [r3, #0]
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	60da      	str	r2, [r3, #12]
 8018036:	4a3f      	ldr	r2, [pc, #252]	; (8018134 <tcp_process+0x7cc>)
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	6013      	str	r3, [r2, #0]
 801803c:	f003 f8fa 	bl	801b234 <tcp_timer_needed>
      }
      break;
 8018040:	e06c      	b.n	801811c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8018042:	6878      	ldr	r0, [r7, #4]
 8018044:	f000 f984 	bl	8018350 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018048:	4b3b      	ldr	r3, [pc, #236]	; (8018138 <tcp_process+0x7d0>)
 801804a:	781b      	ldrb	r3, [r3, #0]
 801804c:	f003 0310 	and.w	r3, r3, #16
 8018050:	2b00      	cmp	r3, #0
 8018052:	d065      	beq.n	8018120 <tcp_process+0x7b8>
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018058:	4b38      	ldr	r3, [pc, #224]	; (801813c <tcp_process+0x7d4>)
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	429a      	cmp	r2, r3
 801805e:	d15f      	bne.n	8018120 <tcp_process+0x7b8>
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018064:	2b00      	cmp	r3, #0
 8018066:	d15b      	bne.n	8018120 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8018068:	6878      	ldr	r0, [r7, #4]
 801806a:	f7fe fcf3 	bl	8016a54 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801806e:	4b35      	ldr	r3, [pc, #212]	; (8018144 <tcp_process+0x7dc>)
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	687a      	ldr	r2, [r7, #4]
 8018074:	429a      	cmp	r2, r3
 8018076:	d105      	bne.n	8018084 <tcp_process+0x71c>
 8018078:	4b32      	ldr	r3, [pc, #200]	; (8018144 <tcp_process+0x7dc>)
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	68db      	ldr	r3, [r3, #12]
 801807e:	4a31      	ldr	r2, [pc, #196]	; (8018144 <tcp_process+0x7dc>)
 8018080:	6013      	str	r3, [r2, #0]
 8018082:	e013      	b.n	80180ac <tcp_process+0x744>
 8018084:	4b2f      	ldr	r3, [pc, #188]	; (8018144 <tcp_process+0x7dc>)
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	60fb      	str	r3, [r7, #12]
 801808a:	e00c      	b.n	80180a6 <tcp_process+0x73e>
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	68db      	ldr	r3, [r3, #12]
 8018090:	687a      	ldr	r2, [r7, #4]
 8018092:	429a      	cmp	r2, r3
 8018094:	d104      	bne.n	80180a0 <tcp_process+0x738>
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	68da      	ldr	r2, [r3, #12]
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	60da      	str	r2, [r3, #12]
 801809e:	e005      	b.n	80180ac <tcp_process+0x744>
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	68db      	ldr	r3, [r3, #12]
 80180a4:	60fb      	str	r3, [r7, #12]
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d1ef      	bne.n	801808c <tcp_process+0x724>
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	2200      	movs	r2, #0
 80180b0:	60da      	str	r2, [r3, #12]
 80180b2:	4b1f      	ldr	r3, [pc, #124]	; (8018130 <tcp_process+0x7c8>)
 80180b4:	2201      	movs	r2, #1
 80180b6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	220a      	movs	r2, #10
 80180bc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80180be:	4b1d      	ldr	r3, [pc, #116]	; (8018134 <tcp_process+0x7cc>)
 80180c0:	681a      	ldr	r2, [r3, #0]
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	60da      	str	r2, [r3, #12]
 80180c6:	4a1b      	ldr	r2, [pc, #108]	; (8018134 <tcp_process+0x7cc>)
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	6013      	str	r3, [r2, #0]
 80180cc:	f003 f8b2 	bl	801b234 <tcp_timer_needed>
      }
      break;
 80180d0:	e026      	b.n	8018120 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80180d2:	6878      	ldr	r0, [r7, #4]
 80180d4:	f000 f93c 	bl	8018350 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80180d8:	4b17      	ldr	r3, [pc, #92]	; (8018138 <tcp_process+0x7d0>)
 80180da:	781b      	ldrb	r3, [r3, #0]
 80180dc:	f003 0310 	and.w	r3, r3, #16
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d01f      	beq.n	8018124 <tcp_process+0x7bc>
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80180e8:	4b14      	ldr	r3, [pc, #80]	; (801813c <tcp_process+0x7d4>)
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	429a      	cmp	r2, r3
 80180ee:	d119      	bne.n	8018124 <tcp_process+0x7bc>
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d115      	bne.n	8018124 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80180f8:	4b11      	ldr	r3, [pc, #68]	; (8018140 <tcp_process+0x7d8>)
 80180fa:	781b      	ldrb	r3, [r3, #0]
 80180fc:	f043 0310 	orr.w	r3, r3, #16
 8018100:	b2da      	uxtb	r2, r3
 8018102:	4b0f      	ldr	r3, [pc, #60]	; (8018140 <tcp_process+0x7d8>)
 8018104:	701a      	strb	r2, [r3, #0]
      }
      break;
 8018106:	e00d      	b.n	8018124 <tcp_process+0x7bc>
    default:
      break;
 8018108:	bf00      	nop
 801810a:	e00c      	b.n	8018126 <tcp_process+0x7be>
      break;
 801810c:	bf00      	nop
 801810e:	e00a      	b.n	8018126 <tcp_process+0x7be>
      break;
 8018110:	bf00      	nop
 8018112:	e008      	b.n	8018126 <tcp_process+0x7be>
      break;
 8018114:	bf00      	nop
 8018116:	e006      	b.n	8018126 <tcp_process+0x7be>
      break;
 8018118:	bf00      	nop
 801811a:	e004      	b.n	8018126 <tcp_process+0x7be>
      break;
 801811c:	bf00      	nop
 801811e:	e002      	b.n	8018126 <tcp_process+0x7be>
      break;
 8018120:	bf00      	nop
 8018122:	e000      	b.n	8018126 <tcp_process+0x7be>
      break;
 8018124:	bf00      	nop
  }
  return ERR_OK;
 8018126:	2300      	movs	r3, #0
}
 8018128:	4618      	mov	r0, r3
 801812a:	3724      	adds	r7, #36	; 0x24
 801812c:	46bd      	mov	sp, r7
 801812e:	bd90      	pop	{r4, r7, pc}
 8018130:	2000b504 	.word	0x2000b504
 8018134:	2000b518 	.word	0x2000b518
 8018138:	20004554 	.word	0x20004554
 801813c:	2000454c 	.word	0x2000454c
 8018140:	20004555 	.word	0x20004555
 8018144:	2000b508 	.word	0x2000b508

08018148 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8018148:	b590      	push	{r4, r7, lr}
 801814a:	b085      	sub	sp, #20
 801814c:	af00      	add	r7, sp, #0
 801814e:	6078      	str	r0, [r7, #4]
 8018150:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	2b00      	cmp	r3, #0
 8018156:	d106      	bne.n	8018166 <tcp_oos_insert_segment+0x1e>
 8018158:	4b3b      	ldr	r3, [pc, #236]	; (8018248 <tcp_oos_insert_segment+0x100>)
 801815a:	f240 421f 	movw	r2, #1055	; 0x41f
 801815e:	493b      	ldr	r1, [pc, #236]	; (801824c <tcp_oos_insert_segment+0x104>)
 8018160:	483b      	ldr	r0, [pc, #236]	; (8018250 <tcp_oos_insert_segment+0x108>)
 8018162:	f005 ffaf 	bl	801e0c4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	68db      	ldr	r3, [r3, #12]
 801816a:	899b      	ldrh	r3, [r3, #12]
 801816c:	b29b      	uxth	r3, r3
 801816e:	4618      	mov	r0, r3
 8018170:	f7fb f984 	bl	801347c <lwip_htons>
 8018174:	4603      	mov	r3, r0
 8018176:	b2db      	uxtb	r3, r3
 8018178:	f003 0301 	and.w	r3, r3, #1
 801817c:	2b00      	cmp	r3, #0
 801817e:	d028      	beq.n	80181d2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8018180:	6838      	ldr	r0, [r7, #0]
 8018182:	f7fe f973 	bl	801646c <tcp_segs_free>
    next = NULL;
 8018186:	2300      	movs	r3, #0
 8018188:	603b      	str	r3, [r7, #0]
 801818a:	e056      	b.n	801823a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801818c:	683b      	ldr	r3, [r7, #0]
 801818e:	68db      	ldr	r3, [r3, #12]
 8018190:	899b      	ldrh	r3, [r3, #12]
 8018192:	b29b      	uxth	r3, r3
 8018194:	4618      	mov	r0, r3
 8018196:	f7fb f971 	bl	801347c <lwip_htons>
 801819a:	4603      	mov	r3, r0
 801819c:	b2db      	uxtb	r3, r3
 801819e:	f003 0301 	and.w	r3, r3, #1
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d00d      	beq.n	80181c2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	68db      	ldr	r3, [r3, #12]
 80181aa:	899b      	ldrh	r3, [r3, #12]
 80181ac:	b29c      	uxth	r4, r3
 80181ae:	2001      	movs	r0, #1
 80181b0:	f7fb f964 	bl	801347c <lwip_htons>
 80181b4:	4603      	mov	r3, r0
 80181b6:	461a      	mov	r2, r3
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	68db      	ldr	r3, [r3, #12]
 80181bc:	4322      	orrs	r2, r4
 80181be:	b292      	uxth	r2, r2
 80181c0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80181c2:	683b      	ldr	r3, [r7, #0]
 80181c4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80181c6:	683b      	ldr	r3, [r7, #0]
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80181cc:	68f8      	ldr	r0, [r7, #12]
 80181ce:	f7fe f961 	bl	8016494 <tcp_seg_free>
    while (next &&
 80181d2:	683b      	ldr	r3, [r7, #0]
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d00e      	beq.n	80181f6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	891b      	ldrh	r3, [r3, #8]
 80181dc:	461a      	mov	r2, r3
 80181de:	4b1d      	ldr	r3, [pc, #116]	; (8018254 <tcp_oos_insert_segment+0x10c>)
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	441a      	add	r2, r3
 80181e4:	683b      	ldr	r3, [r7, #0]
 80181e6:	68db      	ldr	r3, [r3, #12]
 80181e8:	685b      	ldr	r3, [r3, #4]
 80181ea:	6839      	ldr	r1, [r7, #0]
 80181ec:	8909      	ldrh	r1, [r1, #8]
 80181ee:	440b      	add	r3, r1
 80181f0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	daca      	bge.n	801818c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80181f6:	683b      	ldr	r3, [r7, #0]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d01e      	beq.n	801823a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	891b      	ldrh	r3, [r3, #8]
 8018200:	461a      	mov	r2, r3
 8018202:	4b14      	ldr	r3, [pc, #80]	; (8018254 <tcp_oos_insert_segment+0x10c>)
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	441a      	add	r2, r3
 8018208:	683b      	ldr	r3, [r7, #0]
 801820a:	68db      	ldr	r3, [r3, #12]
 801820c:	685b      	ldr	r3, [r3, #4]
 801820e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8018210:	2b00      	cmp	r3, #0
 8018212:	dd12      	ble.n	801823a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8018214:	683b      	ldr	r3, [r7, #0]
 8018216:	68db      	ldr	r3, [r3, #12]
 8018218:	685b      	ldr	r3, [r3, #4]
 801821a:	b29a      	uxth	r2, r3
 801821c:	4b0d      	ldr	r3, [pc, #52]	; (8018254 <tcp_oos_insert_segment+0x10c>)
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	b29b      	uxth	r3, r3
 8018222:	1ad3      	subs	r3, r2, r3
 8018224:	b29a      	uxth	r2, r3
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	685a      	ldr	r2, [r3, #4]
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	891b      	ldrh	r3, [r3, #8]
 8018232:	4619      	mov	r1, r3
 8018234:	4610      	mov	r0, r2
 8018236:	f7fc fb79 	bl	801492c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	683a      	ldr	r2, [r7, #0]
 801823e:	601a      	str	r2, [r3, #0]
}
 8018240:	bf00      	nop
 8018242:	3714      	adds	r7, #20
 8018244:	46bd      	mov	sp, r7
 8018246:	bd90      	pop	{r4, r7, pc}
 8018248:	08020524 	.word	0x08020524
 801824c:	080207e4 	.word	0x080207e4
 8018250:	08020570 	.word	0x08020570
 8018254:	20004548 	.word	0x20004548

08018258 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8018258:	b5b0      	push	{r4, r5, r7, lr}
 801825a:	b086      	sub	sp, #24
 801825c:	af00      	add	r7, sp, #0
 801825e:	60f8      	str	r0, [r7, #12]
 8018260:	60b9      	str	r1, [r7, #8]
 8018262:	607a      	str	r2, [r7, #4]
 8018264:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8018266:	e03e      	b.n	80182e6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8018268:	68bb      	ldr	r3, [r7, #8]
 801826a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801826c:	68bb      	ldr	r3, [r7, #8]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8018272:	697b      	ldr	r3, [r7, #20]
 8018274:	685b      	ldr	r3, [r3, #4]
 8018276:	4618      	mov	r0, r3
 8018278:	f7fc fd6c 	bl	8014d54 <pbuf_clen>
 801827c:	4603      	mov	r3, r0
 801827e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8018280:	68fb      	ldr	r3, [r7, #12]
 8018282:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018286:	8a7a      	ldrh	r2, [r7, #18]
 8018288:	429a      	cmp	r2, r3
 801828a:	d906      	bls.n	801829a <tcp_free_acked_segments+0x42>
 801828c:	4b2a      	ldr	r3, [pc, #168]	; (8018338 <tcp_free_acked_segments+0xe0>)
 801828e:	f240 4257 	movw	r2, #1111	; 0x457
 8018292:	492a      	ldr	r1, [pc, #168]	; (801833c <tcp_free_acked_segments+0xe4>)
 8018294:	482a      	ldr	r0, [pc, #168]	; (8018340 <tcp_free_acked_segments+0xe8>)
 8018296:	f005 ff15 	bl	801e0c4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80182a0:	8a7b      	ldrh	r3, [r7, #18]
 80182a2:	1ad3      	subs	r3, r2, r3
 80182a4:	b29a      	uxth	r2, r3
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80182ac:	697b      	ldr	r3, [r7, #20]
 80182ae:	891a      	ldrh	r2, [r3, #8]
 80182b0:	4b24      	ldr	r3, [pc, #144]	; (8018344 <tcp_free_acked_segments+0xec>)
 80182b2:	881b      	ldrh	r3, [r3, #0]
 80182b4:	4413      	add	r3, r2
 80182b6:	b29a      	uxth	r2, r3
 80182b8:	4b22      	ldr	r3, [pc, #136]	; (8018344 <tcp_free_acked_segments+0xec>)
 80182ba:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80182bc:	6978      	ldr	r0, [r7, #20]
 80182be:	f7fe f8e9 	bl	8016494 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d00c      	beq.n	80182e6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80182cc:	68bb      	ldr	r3, [r7, #8]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d109      	bne.n	80182e6 <tcp_free_acked_segments+0x8e>
 80182d2:	683b      	ldr	r3, [r7, #0]
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d106      	bne.n	80182e6 <tcp_free_acked_segments+0x8e>
 80182d8:	4b17      	ldr	r3, [pc, #92]	; (8018338 <tcp_free_acked_segments+0xe0>)
 80182da:	f240 4262 	movw	r2, #1122	; 0x462
 80182de:	491a      	ldr	r1, [pc, #104]	; (8018348 <tcp_free_acked_segments+0xf0>)
 80182e0:	4817      	ldr	r0, [pc, #92]	; (8018340 <tcp_free_acked_segments+0xe8>)
 80182e2:	f005 feef 	bl	801e0c4 <iprintf>
  while (seg_list != NULL &&
 80182e6:	68bb      	ldr	r3, [r7, #8]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d020      	beq.n	801832e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80182ec:	68bb      	ldr	r3, [r7, #8]
 80182ee:	68db      	ldr	r3, [r3, #12]
 80182f0:	685b      	ldr	r3, [r3, #4]
 80182f2:	4618      	mov	r0, r3
 80182f4:	f7fb f8d7 	bl	80134a6 <lwip_htonl>
 80182f8:	4604      	mov	r4, r0
 80182fa:	68bb      	ldr	r3, [r7, #8]
 80182fc:	891b      	ldrh	r3, [r3, #8]
 80182fe:	461d      	mov	r5, r3
 8018300:	68bb      	ldr	r3, [r7, #8]
 8018302:	68db      	ldr	r3, [r3, #12]
 8018304:	899b      	ldrh	r3, [r3, #12]
 8018306:	b29b      	uxth	r3, r3
 8018308:	4618      	mov	r0, r3
 801830a:	f7fb f8b7 	bl	801347c <lwip_htons>
 801830e:	4603      	mov	r3, r0
 8018310:	b2db      	uxtb	r3, r3
 8018312:	f003 0303 	and.w	r3, r3, #3
 8018316:	2b00      	cmp	r3, #0
 8018318:	d001      	beq.n	801831e <tcp_free_acked_segments+0xc6>
 801831a:	2301      	movs	r3, #1
 801831c:	e000      	b.n	8018320 <tcp_free_acked_segments+0xc8>
 801831e:	2300      	movs	r3, #0
 8018320:	442b      	add	r3, r5
 8018322:	18e2      	adds	r2, r4, r3
 8018324:	4b09      	ldr	r3, [pc, #36]	; (801834c <tcp_free_acked_segments+0xf4>)
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801832a:	2b00      	cmp	r3, #0
 801832c:	dd9c      	ble.n	8018268 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801832e:	68bb      	ldr	r3, [r7, #8]
}
 8018330:	4618      	mov	r0, r3
 8018332:	3718      	adds	r7, #24
 8018334:	46bd      	mov	sp, r7
 8018336:	bdb0      	pop	{r4, r5, r7, pc}
 8018338:	08020524 	.word	0x08020524
 801833c:	0802080c 	.word	0x0802080c
 8018340:	08020570 	.word	0x08020570
 8018344:	20004550 	.word	0x20004550
 8018348:	08020834 	.word	0x08020834
 801834c:	2000454c 	.word	0x2000454c

08018350 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8018350:	b5b0      	push	{r4, r5, r7, lr}
 8018352:	b094      	sub	sp, #80	; 0x50
 8018354:	af00      	add	r7, sp, #0
 8018356:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8018358:	2300      	movs	r3, #0
 801835a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	2b00      	cmp	r3, #0
 8018360:	d106      	bne.n	8018370 <tcp_receive+0x20>
 8018362:	4ba6      	ldr	r3, [pc, #664]	; (80185fc <tcp_receive+0x2ac>)
 8018364:	f240 427b 	movw	r2, #1147	; 0x47b
 8018368:	49a5      	ldr	r1, [pc, #660]	; (8018600 <tcp_receive+0x2b0>)
 801836a:	48a6      	ldr	r0, [pc, #664]	; (8018604 <tcp_receive+0x2b4>)
 801836c:	f005 feaa 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	7d1b      	ldrb	r3, [r3, #20]
 8018374:	2b03      	cmp	r3, #3
 8018376:	d806      	bhi.n	8018386 <tcp_receive+0x36>
 8018378:	4ba0      	ldr	r3, [pc, #640]	; (80185fc <tcp_receive+0x2ac>)
 801837a:	f240 427c 	movw	r2, #1148	; 0x47c
 801837e:	49a2      	ldr	r1, [pc, #648]	; (8018608 <tcp_receive+0x2b8>)
 8018380:	48a0      	ldr	r0, [pc, #640]	; (8018604 <tcp_receive+0x2b4>)
 8018382:	f005 fe9f 	bl	801e0c4 <iprintf>

  if (flags & TCP_ACK) {
 8018386:	4ba1      	ldr	r3, [pc, #644]	; (801860c <tcp_receive+0x2bc>)
 8018388:	781b      	ldrb	r3, [r3, #0]
 801838a:	f003 0310 	and.w	r3, r3, #16
 801838e:	2b00      	cmp	r3, #0
 8018390:	f000 8263 	beq.w	801885a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801839a:	461a      	mov	r2, r3
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80183a0:	4413      	add	r3, r2
 80183a2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80183a8:	4b99      	ldr	r3, [pc, #612]	; (8018610 <tcp_receive+0x2c0>)
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	1ad3      	subs	r3, r2, r3
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	db1b      	blt.n	80183ea <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80183b6:	4b96      	ldr	r3, [pc, #600]	; (8018610 <tcp_receive+0x2c0>)
 80183b8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80183ba:	429a      	cmp	r2, r3
 80183bc:	d106      	bne.n	80183cc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80183c2:	4b94      	ldr	r3, [pc, #592]	; (8018614 <tcp_receive+0x2c4>)
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	1ad3      	subs	r3, r2, r3
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	db0e      	blt.n	80183ea <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80183d0:	4b90      	ldr	r3, [pc, #576]	; (8018614 <tcp_receive+0x2c4>)
 80183d2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80183d4:	429a      	cmp	r2, r3
 80183d6:	d125      	bne.n	8018424 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80183d8:	4b8f      	ldr	r3, [pc, #572]	; (8018618 <tcp_receive+0x2c8>)
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	89db      	ldrh	r3, [r3, #14]
 80183de:	b29a      	uxth	r2, r3
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80183e6:	429a      	cmp	r2, r3
 80183e8:	d91c      	bls.n	8018424 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80183ea:	4b8b      	ldr	r3, [pc, #556]	; (8018618 <tcp_receive+0x2c8>)
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	89db      	ldrh	r3, [r3, #14]
 80183f0:	b29a      	uxth	r2, r3
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018404:	429a      	cmp	r2, r3
 8018406:	d205      	bcs.n	8018414 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8018414:	4b7e      	ldr	r3, [pc, #504]	; (8018610 <tcp_receive+0x2c0>)
 8018416:	681a      	ldr	r2, [r3, #0]
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801841c:	4b7d      	ldr	r3, [pc, #500]	; (8018614 <tcp_receive+0x2c4>)
 801841e:	681a      	ldr	r2, [r3, #0]
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018424:	4b7b      	ldr	r3, [pc, #492]	; (8018614 <tcp_receive+0x2c4>)
 8018426:	681a      	ldr	r2, [r3, #0]
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801842c:	1ad3      	subs	r3, r2, r3
 801842e:	2b00      	cmp	r3, #0
 8018430:	dc58      	bgt.n	80184e4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8018432:	4b7a      	ldr	r3, [pc, #488]	; (801861c <tcp_receive+0x2cc>)
 8018434:	881b      	ldrh	r3, [r3, #0]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d14b      	bne.n	80184d2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801843e:	687a      	ldr	r2, [r7, #4]
 8018440:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8018444:	4413      	add	r3, r2
 8018446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018448:	429a      	cmp	r2, r3
 801844a:	d142      	bne.n	80184d2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018452:	2b00      	cmp	r3, #0
 8018454:	db3d      	blt.n	80184d2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801845a:	4b6e      	ldr	r3, [pc, #440]	; (8018614 <tcp_receive+0x2c4>)
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	429a      	cmp	r2, r3
 8018460:	d137      	bne.n	80184d2 <tcp_receive+0x182>
              found_dupack = 1;
 8018462:	2301      	movs	r3, #1
 8018464:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801846c:	2bff      	cmp	r3, #255	; 0xff
 801846e:	d007      	beq.n	8018480 <tcp_receive+0x130>
                ++pcb->dupacks;
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018476:	3301      	adds	r3, #1
 8018478:	b2da      	uxtb	r2, r3
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018486:	2b03      	cmp	r3, #3
 8018488:	d91b      	bls.n	80184c2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018494:	4413      	add	r3, r2
 8018496:	b29a      	uxth	r2, r3
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801849e:	429a      	cmp	r2, r3
 80184a0:	d30a      	bcc.n	80184b8 <tcp_receive+0x168>
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80184ac:	4413      	add	r3, r2
 80184ae:	b29a      	uxth	r2, r3
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80184b6:	e004      	b.n	80184c2 <tcp_receive+0x172>
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80184be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80184c8:	2b02      	cmp	r3, #2
 80184ca:	d902      	bls.n	80184d2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80184cc:	6878      	ldr	r0, [r7, #4]
 80184ce:	f002 fb47 	bl	801ab60 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80184d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	f040 8160 	bne.w	801879a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	2200      	movs	r2, #0
 80184de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80184e2:	e15a      	b.n	801879a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80184e4:	4b4b      	ldr	r3, [pc, #300]	; (8018614 <tcp_receive+0x2c4>)
 80184e6:	681a      	ldr	r2, [r3, #0]
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184ec:	1ad3      	subs	r3, r2, r3
 80184ee:	3b01      	subs	r3, #1
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	f2c0 814d 	blt.w	8018790 <tcp_receive+0x440>
 80184f6:	4b47      	ldr	r3, [pc, #284]	; (8018614 <tcp_receive+0x2c4>)
 80184f8:	681a      	ldr	r2, [r3, #0]
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80184fe:	1ad3      	subs	r3, r2, r3
 8018500:	2b00      	cmp	r3, #0
 8018502:	f300 8145 	bgt.w	8018790 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	8b5b      	ldrh	r3, [r3, #26]
 801850a:	f003 0304 	and.w	r3, r3, #4
 801850e:	2b00      	cmp	r3, #0
 8018510:	d010      	beq.n	8018534 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	8b5b      	ldrh	r3, [r3, #26]
 8018516:	f023 0304 	bic.w	r3, r3, #4
 801851a:	b29a      	uxth	r2, r3
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	2200      	movs	r2, #0
 8018530:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	2200      	movs	r2, #0
 8018538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018542:	10db      	asrs	r3, r3, #3
 8018544:	b21b      	sxth	r3, r3
 8018546:	b29a      	uxth	r2, r3
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801854e:	b29b      	uxth	r3, r3
 8018550:	4413      	add	r3, r2
 8018552:	b29b      	uxth	r3, r3
 8018554:	b21a      	sxth	r2, r3
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801855c:	4b2d      	ldr	r3, [pc, #180]	; (8018614 <tcp_receive+0x2c4>)
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	b29a      	uxth	r2, r3
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018566:	b29b      	uxth	r3, r3
 8018568:	1ad3      	subs	r3, r2, r3
 801856a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	2200      	movs	r2, #0
 8018570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8018574:	4b27      	ldr	r3, [pc, #156]	; (8018614 <tcp_receive+0x2c4>)
 8018576:	681a      	ldr	r2, [r3, #0]
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	7d1b      	ldrb	r3, [r3, #20]
 8018580:	2b03      	cmp	r3, #3
 8018582:	f240 8096 	bls.w	80186b2 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018592:	429a      	cmp	r2, r3
 8018594:	d244      	bcs.n	8018620 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	8b5b      	ldrh	r3, [r3, #26]
 801859a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d001      	beq.n	80185a6 <tcp_receive+0x256>
 80185a2:	2301      	movs	r3, #1
 80185a4:	e000      	b.n	80185a8 <tcp_receive+0x258>
 80185a6:	2302      	movs	r3, #2
 80185a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80185ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80185b0:	b29a      	uxth	r2, r3
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80185b6:	fb12 f303 	smulbb	r3, r2, r3
 80185ba:	b29b      	uxth	r3, r3
 80185bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80185be:	4293      	cmp	r3, r2
 80185c0:	bf28      	it	cs
 80185c2:	4613      	movcs	r3, r2
 80185c4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80185cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80185ce:	4413      	add	r3, r2
 80185d0:	b29a      	uxth	r2, r3
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80185d8:	429a      	cmp	r2, r3
 80185da:	d309      	bcc.n	80185f0 <tcp_receive+0x2a0>
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80185e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80185e4:	4413      	add	r3, r2
 80185e6:	b29a      	uxth	r2, r3
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80185ee:	e060      	b.n	80186b2 <tcp_receive+0x362>
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80185f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80185fa:	e05a      	b.n	80186b2 <tcp_receive+0x362>
 80185fc:	08020524 	.word	0x08020524
 8018600:	08020854 	.word	0x08020854
 8018604:	08020570 	.word	0x08020570
 8018608:	08020870 	.word	0x08020870
 801860c:	20004554 	.word	0x20004554
 8018610:	20004548 	.word	0x20004548
 8018614:	2000454c 	.word	0x2000454c
 8018618:	20004538 	.word	0x20004538
 801861c:	20004552 	.word	0x20004552
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018626:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018628:	4413      	add	r3, r2
 801862a:	b29a      	uxth	r2, r3
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8018632:	429a      	cmp	r2, r3
 8018634:	d309      	bcc.n	801864a <tcp_receive+0x2fa>
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801863c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801863e:	4413      	add	r3, r2
 8018640:	b29a      	uxth	r2, r3
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8018648:	e004      	b.n	8018654 <tcp_receive+0x304>
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018650:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018660:	429a      	cmp	r2, r3
 8018662:	d326      	bcc.n	80186b2 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018670:	1ad3      	subs	r3, r2, r3
 8018672:	b29a      	uxth	r2, r3
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018684:	4413      	add	r3, r2
 8018686:	b29a      	uxth	r2, r3
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801868e:	429a      	cmp	r2, r3
 8018690:	d30a      	bcc.n	80186a8 <tcp_receive+0x358>
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801869c:	4413      	add	r3, r2
 801869e:	b29a      	uxth	r2, r3
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80186a6:	e004      	b.n	80186b2 <tcp_receive+0x362>
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80186ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80186ba:	4a98      	ldr	r2, [pc, #608]	; (801891c <tcp_receive+0x5cc>)
 80186bc:	6878      	ldr	r0, [r7, #4]
 80186be:	f7ff fdcb 	bl	8018258 <tcp_free_acked_segments>
 80186c2:	4602      	mov	r2, r0
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80186d0:	4a93      	ldr	r2, [pc, #588]	; (8018920 <tcp_receive+0x5d0>)
 80186d2:	6878      	ldr	r0, [r7, #4]
 80186d4:	f7ff fdc0 	bl	8018258 <tcp_free_acked_segments>
 80186d8:	4602      	mov	r2, r0
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d104      	bne.n	80186f0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80186ec:	861a      	strh	r2, [r3, #48]	; 0x30
 80186ee:	e002      	b.n	80186f6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	2200      	movs	r2, #0
 80186f4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	2200      	movs	r2, #0
 80186fa:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018700:	2b00      	cmp	r3, #0
 8018702:	d103      	bne.n	801870c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	2200      	movs	r2, #0
 8018708:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8018712:	4b84      	ldr	r3, [pc, #528]	; (8018924 <tcp_receive+0x5d4>)
 8018714:	881b      	ldrh	r3, [r3, #0]
 8018716:	4413      	add	r3, r2
 8018718:	b29a      	uxth	r2, r3
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	8b5b      	ldrh	r3, [r3, #26]
 8018724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018728:	2b00      	cmp	r3, #0
 801872a:	d035      	beq.n	8018798 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018730:	2b00      	cmp	r3, #0
 8018732:	d118      	bne.n	8018766 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018738:	2b00      	cmp	r3, #0
 801873a:	d00c      	beq.n	8018756 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018744:	68db      	ldr	r3, [r3, #12]
 8018746:	685b      	ldr	r3, [r3, #4]
 8018748:	4618      	mov	r0, r3
 801874a:	f7fa feac 	bl	80134a6 <lwip_htonl>
 801874e:	4603      	mov	r3, r0
 8018750:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8018752:	2b00      	cmp	r3, #0
 8018754:	dc20      	bgt.n	8018798 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	8b5b      	ldrh	r3, [r3, #26]
 801875a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801875e:	b29a      	uxth	r2, r3
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018764:	e018      	b.n	8018798 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801876e:	68db      	ldr	r3, [r3, #12]
 8018770:	685b      	ldr	r3, [r3, #4]
 8018772:	4618      	mov	r0, r3
 8018774:	f7fa fe97 	bl	80134a6 <lwip_htonl>
 8018778:	4603      	mov	r3, r0
 801877a:	1ae3      	subs	r3, r4, r3
 801877c:	2b00      	cmp	r3, #0
 801877e:	dc0b      	bgt.n	8018798 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	8b5b      	ldrh	r3, [r3, #26]
 8018784:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018788:	b29a      	uxth	r2, r3
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801878e:	e003      	b.n	8018798 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8018790:	6878      	ldr	r0, [r7, #4]
 8018792:	f002 fbdf 	bl	801af54 <tcp_send_empty_ack>
 8018796:	e000      	b.n	801879a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018798:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d05b      	beq.n	801885a <tcp_receive+0x50a>
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80187a6:	4b60      	ldr	r3, [pc, #384]	; (8018928 <tcp_receive+0x5d8>)
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	1ad3      	subs	r3, r2, r3
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	da54      	bge.n	801885a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80187b0:	4b5e      	ldr	r3, [pc, #376]	; (801892c <tcp_receive+0x5dc>)
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	b29a      	uxth	r2, r3
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80187ba:	b29b      	uxth	r3, r3
 80187bc:	1ad3      	subs	r3, r2, r3
 80187be:	b29b      	uxth	r3, r3
 80187c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80187c4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80187ce:	10db      	asrs	r3, r3, #3
 80187d0:	b21b      	sxth	r3, r3
 80187d2:	b29b      	uxth	r3, r3
 80187d4:	1ad3      	subs	r3, r2, r3
 80187d6:	b29b      	uxth	r3, r3
 80187d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80187e2:	b29a      	uxth	r2, r3
 80187e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80187e8:	4413      	add	r3, r2
 80187ea:	b29b      	uxth	r3, r3
 80187ec:	b21a      	sxth	r2, r3
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80187f2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	da05      	bge.n	8018806 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80187fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80187fe:	425b      	negs	r3, r3
 8018800:	b29b      	uxth	r3, r3
 8018802:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8018806:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018810:	109b      	asrs	r3, r3, #2
 8018812:	b21b      	sxth	r3, r3
 8018814:	b29b      	uxth	r3, r3
 8018816:	1ad3      	subs	r3, r2, r3
 8018818:	b29b      	uxth	r3, r3
 801881a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018824:	b29a      	uxth	r2, r3
 8018826:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801882a:	4413      	add	r3, r2
 801882c:	b29b      	uxth	r3, r3
 801882e:	b21a      	sxth	r2, r3
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801883a:	10db      	asrs	r3, r3, #3
 801883c:	b21b      	sxth	r3, r3
 801883e:	b29a      	uxth	r2, r3
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018846:	b29b      	uxth	r3, r3
 8018848:	4413      	add	r3, r2
 801884a:	b29b      	uxth	r3, r3
 801884c:	b21a      	sxth	r2, r3
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	2200      	movs	r2, #0
 8018858:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801885a:	4b35      	ldr	r3, [pc, #212]	; (8018930 <tcp_receive+0x5e0>)
 801885c:	881b      	ldrh	r3, [r3, #0]
 801885e:	2b00      	cmp	r3, #0
 8018860:	f000 84e1 	beq.w	8019226 <tcp_receive+0xed6>
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	7d1b      	ldrb	r3, [r3, #20]
 8018868:	2b06      	cmp	r3, #6
 801886a:	f200 84dc 	bhi.w	8019226 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018872:	4b30      	ldr	r3, [pc, #192]	; (8018934 <tcp_receive+0x5e4>)
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	1ad3      	subs	r3, r2, r3
 8018878:	3b01      	subs	r3, #1
 801887a:	2b00      	cmp	r3, #0
 801887c:	f2c0 808e 	blt.w	801899c <tcp_receive+0x64c>
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018884:	4b2a      	ldr	r3, [pc, #168]	; (8018930 <tcp_receive+0x5e0>)
 8018886:	881b      	ldrh	r3, [r3, #0]
 8018888:	4619      	mov	r1, r3
 801888a:	4b2a      	ldr	r3, [pc, #168]	; (8018934 <tcp_receive+0x5e4>)
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	440b      	add	r3, r1
 8018890:	1ad3      	subs	r3, r2, r3
 8018892:	3301      	adds	r3, #1
 8018894:	2b00      	cmp	r3, #0
 8018896:	f300 8081 	bgt.w	801899c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801889a:	4b27      	ldr	r3, [pc, #156]	; (8018938 <tcp_receive+0x5e8>)
 801889c:	685b      	ldr	r3, [r3, #4]
 801889e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80188a4:	4b23      	ldr	r3, [pc, #140]	; (8018934 <tcp_receive+0x5e4>)
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	1ad3      	subs	r3, r2, r3
 80188aa:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80188ac:	4b22      	ldr	r3, [pc, #136]	; (8018938 <tcp_receive+0x5e8>)
 80188ae:	685b      	ldr	r3, [r3, #4]
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d106      	bne.n	80188c2 <tcp_receive+0x572>
 80188b4:	4b21      	ldr	r3, [pc, #132]	; (801893c <tcp_receive+0x5ec>)
 80188b6:	f240 5294 	movw	r2, #1428	; 0x594
 80188ba:	4921      	ldr	r1, [pc, #132]	; (8018940 <tcp_receive+0x5f0>)
 80188bc:	4821      	ldr	r0, [pc, #132]	; (8018944 <tcp_receive+0x5f4>)
 80188be:	f005 fc01 	bl	801e0c4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80188c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80188c8:	4293      	cmp	r3, r2
 80188ca:	d906      	bls.n	80188da <tcp_receive+0x58a>
 80188cc:	4b1b      	ldr	r3, [pc, #108]	; (801893c <tcp_receive+0x5ec>)
 80188ce:	f240 5295 	movw	r2, #1429	; 0x595
 80188d2:	491d      	ldr	r1, [pc, #116]	; (8018948 <tcp_receive+0x5f8>)
 80188d4:	481b      	ldr	r0, [pc, #108]	; (8018944 <tcp_receive+0x5f4>)
 80188d6:	f005 fbf5 	bl	801e0c4 <iprintf>
      off = (u16_t)off32;
 80188da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80188e0:	4b15      	ldr	r3, [pc, #84]	; (8018938 <tcp_receive+0x5e8>)
 80188e2:	685b      	ldr	r3, [r3, #4]
 80188e4:	891b      	ldrh	r3, [r3, #8]
 80188e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80188ea:	429a      	cmp	r2, r3
 80188ec:	d906      	bls.n	80188fc <tcp_receive+0x5ac>
 80188ee:	4b13      	ldr	r3, [pc, #76]	; (801893c <tcp_receive+0x5ec>)
 80188f0:	f240 5297 	movw	r2, #1431	; 0x597
 80188f4:	4915      	ldr	r1, [pc, #84]	; (801894c <tcp_receive+0x5fc>)
 80188f6:	4813      	ldr	r0, [pc, #76]	; (8018944 <tcp_receive+0x5f4>)
 80188f8:	f005 fbe4 	bl	801e0c4 <iprintf>
      inseg.len -= off;
 80188fc:	4b0e      	ldr	r3, [pc, #56]	; (8018938 <tcp_receive+0x5e8>)
 80188fe:	891a      	ldrh	r2, [r3, #8]
 8018900:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018904:	1ad3      	subs	r3, r2, r3
 8018906:	b29a      	uxth	r2, r3
 8018908:	4b0b      	ldr	r3, [pc, #44]	; (8018938 <tcp_receive+0x5e8>)
 801890a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801890c:	4b0a      	ldr	r3, [pc, #40]	; (8018938 <tcp_receive+0x5e8>)
 801890e:	685b      	ldr	r3, [r3, #4]
 8018910:	891a      	ldrh	r2, [r3, #8]
 8018912:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018916:	1ad3      	subs	r3, r2, r3
 8018918:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801891a:	e029      	b.n	8018970 <tcp_receive+0x620>
 801891c:	0802088c 	.word	0x0802088c
 8018920:	08020894 	.word	0x08020894
 8018924:	20004550 	.word	0x20004550
 8018928:	2000454c 	.word	0x2000454c
 801892c:	2000b50c 	.word	0x2000b50c
 8018930:	20004552 	.word	0x20004552
 8018934:	20004548 	.word	0x20004548
 8018938:	20004528 	.word	0x20004528
 801893c:	08020524 	.word	0x08020524
 8018940:	0802089c 	.word	0x0802089c
 8018944:	08020570 	.word	0x08020570
 8018948:	080208ac 	.word	0x080208ac
 801894c:	080208bc 	.word	0x080208bc
        off -= p->len;
 8018950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018952:	895b      	ldrh	r3, [r3, #10]
 8018954:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018958:	1ad3      	subs	r3, r2, r3
 801895a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801895e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018960:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018962:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8018964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018966:	2200      	movs	r2, #0
 8018968:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801896a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8018970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018972:	895b      	ldrh	r3, [r3, #10]
 8018974:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018978:	429a      	cmp	r2, r3
 801897a:	d8e9      	bhi.n	8018950 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801897c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018980:	4619      	mov	r1, r3
 8018982:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8018984:	f7fc f8d2 	bl	8014b2c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801898c:	4a91      	ldr	r2, [pc, #580]	; (8018bd4 <tcp_receive+0x884>)
 801898e:	6013      	str	r3, [r2, #0]
 8018990:	4b91      	ldr	r3, [pc, #580]	; (8018bd8 <tcp_receive+0x888>)
 8018992:	68db      	ldr	r3, [r3, #12]
 8018994:	4a8f      	ldr	r2, [pc, #572]	; (8018bd4 <tcp_receive+0x884>)
 8018996:	6812      	ldr	r2, [r2, #0]
 8018998:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801899a:	e00d      	b.n	80189b8 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801899c:	4b8d      	ldr	r3, [pc, #564]	; (8018bd4 <tcp_receive+0x884>)
 801899e:	681a      	ldr	r2, [r3, #0]
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189a4:	1ad3      	subs	r3, r2, r3
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	da06      	bge.n	80189b8 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	8b5b      	ldrh	r3, [r3, #26]
 80189ae:	f043 0302 	orr.w	r3, r3, #2
 80189b2:	b29a      	uxth	r2, r3
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80189b8:	4b86      	ldr	r3, [pc, #536]	; (8018bd4 <tcp_receive+0x884>)
 80189ba:	681a      	ldr	r2, [r3, #0]
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189c0:	1ad3      	subs	r3, r2, r3
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	f2c0 842a 	blt.w	801921c <tcp_receive+0xecc>
 80189c8:	4b82      	ldr	r3, [pc, #520]	; (8018bd4 <tcp_receive+0x884>)
 80189ca:	681a      	ldr	r2, [r3, #0]
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189d0:	6879      	ldr	r1, [r7, #4]
 80189d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80189d4:	440b      	add	r3, r1
 80189d6:	1ad3      	subs	r3, r2, r3
 80189d8:	3301      	adds	r3, #1
 80189da:	2b00      	cmp	r3, #0
 80189dc:	f300 841e 	bgt.w	801921c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80189e4:	4b7b      	ldr	r3, [pc, #492]	; (8018bd4 <tcp_receive+0x884>)
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	429a      	cmp	r2, r3
 80189ea:	f040 829a 	bne.w	8018f22 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80189ee:	4b7a      	ldr	r3, [pc, #488]	; (8018bd8 <tcp_receive+0x888>)
 80189f0:	891c      	ldrh	r4, [r3, #8]
 80189f2:	4b79      	ldr	r3, [pc, #484]	; (8018bd8 <tcp_receive+0x888>)
 80189f4:	68db      	ldr	r3, [r3, #12]
 80189f6:	899b      	ldrh	r3, [r3, #12]
 80189f8:	b29b      	uxth	r3, r3
 80189fa:	4618      	mov	r0, r3
 80189fc:	f7fa fd3e 	bl	801347c <lwip_htons>
 8018a00:	4603      	mov	r3, r0
 8018a02:	b2db      	uxtb	r3, r3
 8018a04:	f003 0303 	and.w	r3, r3, #3
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d001      	beq.n	8018a10 <tcp_receive+0x6c0>
 8018a0c:	2301      	movs	r3, #1
 8018a0e:	e000      	b.n	8018a12 <tcp_receive+0x6c2>
 8018a10:	2300      	movs	r3, #0
 8018a12:	4423      	add	r3, r4
 8018a14:	b29a      	uxth	r2, r3
 8018a16:	4b71      	ldr	r3, [pc, #452]	; (8018bdc <tcp_receive+0x88c>)
 8018a18:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018a1e:	4b6f      	ldr	r3, [pc, #444]	; (8018bdc <tcp_receive+0x88c>)
 8018a20:	881b      	ldrh	r3, [r3, #0]
 8018a22:	429a      	cmp	r2, r3
 8018a24:	d275      	bcs.n	8018b12 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018a26:	4b6c      	ldr	r3, [pc, #432]	; (8018bd8 <tcp_receive+0x888>)
 8018a28:	68db      	ldr	r3, [r3, #12]
 8018a2a:	899b      	ldrh	r3, [r3, #12]
 8018a2c:	b29b      	uxth	r3, r3
 8018a2e:	4618      	mov	r0, r3
 8018a30:	f7fa fd24 	bl	801347c <lwip_htons>
 8018a34:	4603      	mov	r3, r0
 8018a36:	b2db      	uxtb	r3, r3
 8018a38:	f003 0301 	and.w	r3, r3, #1
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d01f      	beq.n	8018a80 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018a40:	4b65      	ldr	r3, [pc, #404]	; (8018bd8 <tcp_receive+0x888>)
 8018a42:	68db      	ldr	r3, [r3, #12]
 8018a44:	899b      	ldrh	r3, [r3, #12]
 8018a46:	b29b      	uxth	r3, r3
 8018a48:	b21b      	sxth	r3, r3
 8018a4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018a4e:	b21c      	sxth	r4, r3
 8018a50:	4b61      	ldr	r3, [pc, #388]	; (8018bd8 <tcp_receive+0x888>)
 8018a52:	68db      	ldr	r3, [r3, #12]
 8018a54:	899b      	ldrh	r3, [r3, #12]
 8018a56:	b29b      	uxth	r3, r3
 8018a58:	4618      	mov	r0, r3
 8018a5a:	f7fa fd0f 	bl	801347c <lwip_htons>
 8018a5e:	4603      	mov	r3, r0
 8018a60:	b2db      	uxtb	r3, r3
 8018a62:	b29b      	uxth	r3, r3
 8018a64:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018a68:	b29b      	uxth	r3, r3
 8018a6a:	4618      	mov	r0, r3
 8018a6c:	f7fa fd06 	bl	801347c <lwip_htons>
 8018a70:	4603      	mov	r3, r0
 8018a72:	b21b      	sxth	r3, r3
 8018a74:	4323      	orrs	r3, r4
 8018a76:	b21a      	sxth	r2, r3
 8018a78:	4b57      	ldr	r3, [pc, #348]	; (8018bd8 <tcp_receive+0x888>)
 8018a7a:	68db      	ldr	r3, [r3, #12]
 8018a7c:	b292      	uxth	r2, r2
 8018a7e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018a84:	4b54      	ldr	r3, [pc, #336]	; (8018bd8 <tcp_receive+0x888>)
 8018a86:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018a88:	4b53      	ldr	r3, [pc, #332]	; (8018bd8 <tcp_receive+0x888>)
 8018a8a:	68db      	ldr	r3, [r3, #12]
 8018a8c:	899b      	ldrh	r3, [r3, #12]
 8018a8e:	b29b      	uxth	r3, r3
 8018a90:	4618      	mov	r0, r3
 8018a92:	f7fa fcf3 	bl	801347c <lwip_htons>
 8018a96:	4603      	mov	r3, r0
 8018a98:	b2db      	uxtb	r3, r3
 8018a9a:	f003 0302 	and.w	r3, r3, #2
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d005      	beq.n	8018aae <tcp_receive+0x75e>
            inseg.len -= 1;
 8018aa2:	4b4d      	ldr	r3, [pc, #308]	; (8018bd8 <tcp_receive+0x888>)
 8018aa4:	891b      	ldrh	r3, [r3, #8]
 8018aa6:	3b01      	subs	r3, #1
 8018aa8:	b29a      	uxth	r2, r3
 8018aaa:	4b4b      	ldr	r3, [pc, #300]	; (8018bd8 <tcp_receive+0x888>)
 8018aac:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8018aae:	4b4a      	ldr	r3, [pc, #296]	; (8018bd8 <tcp_receive+0x888>)
 8018ab0:	685a      	ldr	r2, [r3, #4]
 8018ab2:	4b49      	ldr	r3, [pc, #292]	; (8018bd8 <tcp_receive+0x888>)
 8018ab4:	891b      	ldrh	r3, [r3, #8]
 8018ab6:	4619      	mov	r1, r3
 8018ab8:	4610      	mov	r0, r2
 8018aba:	f7fb ff37 	bl	801492c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8018abe:	4b46      	ldr	r3, [pc, #280]	; (8018bd8 <tcp_receive+0x888>)
 8018ac0:	891c      	ldrh	r4, [r3, #8]
 8018ac2:	4b45      	ldr	r3, [pc, #276]	; (8018bd8 <tcp_receive+0x888>)
 8018ac4:	68db      	ldr	r3, [r3, #12]
 8018ac6:	899b      	ldrh	r3, [r3, #12]
 8018ac8:	b29b      	uxth	r3, r3
 8018aca:	4618      	mov	r0, r3
 8018acc:	f7fa fcd6 	bl	801347c <lwip_htons>
 8018ad0:	4603      	mov	r3, r0
 8018ad2:	b2db      	uxtb	r3, r3
 8018ad4:	f003 0303 	and.w	r3, r3, #3
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d001      	beq.n	8018ae0 <tcp_receive+0x790>
 8018adc:	2301      	movs	r3, #1
 8018ade:	e000      	b.n	8018ae2 <tcp_receive+0x792>
 8018ae0:	2300      	movs	r3, #0
 8018ae2:	4423      	add	r3, r4
 8018ae4:	b29a      	uxth	r2, r3
 8018ae6:	4b3d      	ldr	r3, [pc, #244]	; (8018bdc <tcp_receive+0x88c>)
 8018ae8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018aea:	4b3c      	ldr	r3, [pc, #240]	; (8018bdc <tcp_receive+0x88c>)
 8018aec:	881b      	ldrh	r3, [r3, #0]
 8018aee:	461a      	mov	r2, r3
 8018af0:	4b38      	ldr	r3, [pc, #224]	; (8018bd4 <tcp_receive+0x884>)
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	441a      	add	r2, r3
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018afa:	6879      	ldr	r1, [r7, #4]
 8018afc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018afe:	440b      	add	r3, r1
 8018b00:	429a      	cmp	r2, r3
 8018b02:	d006      	beq.n	8018b12 <tcp_receive+0x7c2>
 8018b04:	4b36      	ldr	r3, [pc, #216]	; (8018be0 <tcp_receive+0x890>)
 8018b06:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8018b0a:	4936      	ldr	r1, [pc, #216]	; (8018be4 <tcp_receive+0x894>)
 8018b0c:	4836      	ldr	r0, [pc, #216]	; (8018be8 <tcp_receive+0x898>)
 8018b0e:	f005 fad9 	bl	801e0c4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	f000 80e7 	beq.w	8018cea <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018b1c:	4b2e      	ldr	r3, [pc, #184]	; (8018bd8 <tcp_receive+0x888>)
 8018b1e:	68db      	ldr	r3, [r3, #12]
 8018b20:	899b      	ldrh	r3, [r3, #12]
 8018b22:	b29b      	uxth	r3, r3
 8018b24:	4618      	mov	r0, r3
 8018b26:	f7fa fca9 	bl	801347c <lwip_htons>
 8018b2a:	4603      	mov	r3, r0
 8018b2c:	b2db      	uxtb	r3, r3
 8018b2e:	f003 0301 	and.w	r3, r3, #1
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d010      	beq.n	8018b58 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8018b36:	e00a      	b.n	8018b4e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018b3c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018b42:	681a      	ldr	r2, [r3, #0]
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8018b48:	68f8      	ldr	r0, [r7, #12]
 8018b4a:	f7fd fca3 	bl	8016494 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d1f0      	bne.n	8018b38 <tcp_receive+0x7e8>
 8018b56:	e0c8      	b.n	8018cea <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8018b5e:	e052      	b.n	8018c06 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b62:	68db      	ldr	r3, [r3, #12]
 8018b64:	899b      	ldrh	r3, [r3, #12]
 8018b66:	b29b      	uxth	r3, r3
 8018b68:	4618      	mov	r0, r3
 8018b6a:	f7fa fc87 	bl	801347c <lwip_htons>
 8018b6e:	4603      	mov	r3, r0
 8018b70:	b2db      	uxtb	r3, r3
 8018b72:	f003 0301 	and.w	r3, r3, #1
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d03d      	beq.n	8018bf6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018b7a:	4b17      	ldr	r3, [pc, #92]	; (8018bd8 <tcp_receive+0x888>)
 8018b7c:	68db      	ldr	r3, [r3, #12]
 8018b7e:	899b      	ldrh	r3, [r3, #12]
 8018b80:	b29b      	uxth	r3, r3
 8018b82:	4618      	mov	r0, r3
 8018b84:	f7fa fc7a 	bl	801347c <lwip_htons>
 8018b88:	4603      	mov	r3, r0
 8018b8a:	b2db      	uxtb	r3, r3
 8018b8c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d130      	bne.n	8018bf6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018b94:	4b10      	ldr	r3, [pc, #64]	; (8018bd8 <tcp_receive+0x888>)
 8018b96:	68db      	ldr	r3, [r3, #12]
 8018b98:	899b      	ldrh	r3, [r3, #12]
 8018b9a:	b29c      	uxth	r4, r3
 8018b9c:	2001      	movs	r0, #1
 8018b9e:	f7fa fc6d 	bl	801347c <lwip_htons>
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	461a      	mov	r2, r3
 8018ba6:	4b0c      	ldr	r3, [pc, #48]	; (8018bd8 <tcp_receive+0x888>)
 8018ba8:	68db      	ldr	r3, [r3, #12]
 8018baa:	4322      	orrs	r2, r4
 8018bac:	b292      	uxth	r2, r2
 8018bae:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018bb0:	4b09      	ldr	r3, [pc, #36]	; (8018bd8 <tcp_receive+0x888>)
 8018bb2:	891c      	ldrh	r4, [r3, #8]
 8018bb4:	4b08      	ldr	r3, [pc, #32]	; (8018bd8 <tcp_receive+0x888>)
 8018bb6:	68db      	ldr	r3, [r3, #12]
 8018bb8:	899b      	ldrh	r3, [r3, #12]
 8018bba:	b29b      	uxth	r3, r3
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	f7fa fc5d 	bl	801347c <lwip_htons>
 8018bc2:	4603      	mov	r3, r0
 8018bc4:	b2db      	uxtb	r3, r3
 8018bc6:	f003 0303 	and.w	r3, r3, #3
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d00e      	beq.n	8018bec <tcp_receive+0x89c>
 8018bce:	2301      	movs	r3, #1
 8018bd0:	e00d      	b.n	8018bee <tcp_receive+0x89e>
 8018bd2:	bf00      	nop
 8018bd4:	20004548 	.word	0x20004548
 8018bd8:	20004528 	.word	0x20004528
 8018bdc:	20004552 	.word	0x20004552
 8018be0:	08020524 	.word	0x08020524
 8018be4:	080208cc 	.word	0x080208cc
 8018be8:	08020570 	.word	0x08020570
 8018bec:	2300      	movs	r3, #0
 8018bee:	4423      	add	r3, r4
 8018bf0:	b29a      	uxth	r2, r3
 8018bf2:	4b98      	ldr	r3, [pc, #608]	; (8018e54 <tcp_receive+0xb04>)
 8018bf4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8018bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018bf8:	613b      	str	r3, [r7, #16]
              next = next->next;
 8018bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018bfc:	681b      	ldr	r3, [r3, #0]
 8018bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8018c00:	6938      	ldr	r0, [r7, #16]
 8018c02:	f7fd fc47 	bl	8016494 <tcp_seg_free>
            while (next &&
 8018c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d00e      	beq.n	8018c2a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018c0c:	4b91      	ldr	r3, [pc, #580]	; (8018e54 <tcp_receive+0xb04>)
 8018c0e:	881b      	ldrh	r3, [r3, #0]
 8018c10:	461a      	mov	r2, r3
 8018c12:	4b91      	ldr	r3, [pc, #580]	; (8018e58 <tcp_receive+0xb08>)
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	441a      	add	r2, r3
 8018c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c1a:	68db      	ldr	r3, [r3, #12]
 8018c1c:	685b      	ldr	r3, [r3, #4]
 8018c1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018c20:	8909      	ldrh	r1, [r1, #8]
 8018c22:	440b      	add	r3, r1
 8018c24:	1ad3      	subs	r3, r2, r3
            while (next &&
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	da9a      	bge.n	8018b60 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8018c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d059      	beq.n	8018ce4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8018c30:	4b88      	ldr	r3, [pc, #544]	; (8018e54 <tcp_receive+0xb04>)
 8018c32:	881b      	ldrh	r3, [r3, #0]
 8018c34:	461a      	mov	r2, r3
 8018c36:	4b88      	ldr	r3, [pc, #544]	; (8018e58 <tcp_receive+0xb08>)
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	441a      	add	r2, r3
 8018c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c3e:	68db      	ldr	r3, [r3, #12]
 8018c40:	685b      	ldr	r3, [r3, #4]
 8018c42:	1ad3      	subs	r3, r2, r3
            if (next &&
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	dd4d      	ble.n	8018ce4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8018c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c4a:	68db      	ldr	r3, [r3, #12]
 8018c4c:	685b      	ldr	r3, [r3, #4]
 8018c4e:	b29a      	uxth	r2, r3
 8018c50:	4b81      	ldr	r3, [pc, #516]	; (8018e58 <tcp_receive+0xb08>)
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	b29b      	uxth	r3, r3
 8018c56:	1ad3      	subs	r3, r2, r3
 8018c58:	b29a      	uxth	r2, r3
 8018c5a:	4b80      	ldr	r3, [pc, #512]	; (8018e5c <tcp_receive+0xb0c>)
 8018c5c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018c5e:	4b7f      	ldr	r3, [pc, #508]	; (8018e5c <tcp_receive+0xb0c>)
 8018c60:	68db      	ldr	r3, [r3, #12]
 8018c62:	899b      	ldrh	r3, [r3, #12]
 8018c64:	b29b      	uxth	r3, r3
 8018c66:	4618      	mov	r0, r3
 8018c68:	f7fa fc08 	bl	801347c <lwip_htons>
 8018c6c:	4603      	mov	r3, r0
 8018c6e:	b2db      	uxtb	r3, r3
 8018c70:	f003 0302 	and.w	r3, r3, #2
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d005      	beq.n	8018c84 <tcp_receive+0x934>
                inseg.len -= 1;
 8018c78:	4b78      	ldr	r3, [pc, #480]	; (8018e5c <tcp_receive+0xb0c>)
 8018c7a:	891b      	ldrh	r3, [r3, #8]
 8018c7c:	3b01      	subs	r3, #1
 8018c7e:	b29a      	uxth	r2, r3
 8018c80:	4b76      	ldr	r3, [pc, #472]	; (8018e5c <tcp_receive+0xb0c>)
 8018c82:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8018c84:	4b75      	ldr	r3, [pc, #468]	; (8018e5c <tcp_receive+0xb0c>)
 8018c86:	685a      	ldr	r2, [r3, #4]
 8018c88:	4b74      	ldr	r3, [pc, #464]	; (8018e5c <tcp_receive+0xb0c>)
 8018c8a:	891b      	ldrh	r3, [r3, #8]
 8018c8c:	4619      	mov	r1, r3
 8018c8e:	4610      	mov	r0, r2
 8018c90:	f7fb fe4c 	bl	801492c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8018c94:	4b71      	ldr	r3, [pc, #452]	; (8018e5c <tcp_receive+0xb0c>)
 8018c96:	891c      	ldrh	r4, [r3, #8]
 8018c98:	4b70      	ldr	r3, [pc, #448]	; (8018e5c <tcp_receive+0xb0c>)
 8018c9a:	68db      	ldr	r3, [r3, #12]
 8018c9c:	899b      	ldrh	r3, [r3, #12]
 8018c9e:	b29b      	uxth	r3, r3
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	f7fa fbeb 	bl	801347c <lwip_htons>
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	b2db      	uxtb	r3, r3
 8018caa:	f003 0303 	and.w	r3, r3, #3
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d001      	beq.n	8018cb6 <tcp_receive+0x966>
 8018cb2:	2301      	movs	r3, #1
 8018cb4:	e000      	b.n	8018cb8 <tcp_receive+0x968>
 8018cb6:	2300      	movs	r3, #0
 8018cb8:	4423      	add	r3, r4
 8018cba:	b29a      	uxth	r2, r3
 8018cbc:	4b65      	ldr	r3, [pc, #404]	; (8018e54 <tcp_receive+0xb04>)
 8018cbe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018cc0:	4b64      	ldr	r3, [pc, #400]	; (8018e54 <tcp_receive+0xb04>)
 8018cc2:	881b      	ldrh	r3, [r3, #0]
 8018cc4:	461a      	mov	r2, r3
 8018cc6:	4b64      	ldr	r3, [pc, #400]	; (8018e58 <tcp_receive+0xb08>)
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	441a      	add	r2, r3
 8018ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018cce:	68db      	ldr	r3, [r3, #12]
 8018cd0:	685b      	ldr	r3, [r3, #4]
 8018cd2:	429a      	cmp	r2, r3
 8018cd4:	d006      	beq.n	8018ce4 <tcp_receive+0x994>
 8018cd6:	4b62      	ldr	r3, [pc, #392]	; (8018e60 <tcp_receive+0xb10>)
 8018cd8:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8018cdc:	4961      	ldr	r1, [pc, #388]	; (8018e64 <tcp_receive+0xb14>)
 8018cde:	4862      	ldr	r0, [pc, #392]	; (8018e68 <tcp_receive+0xb18>)
 8018ce0:	f005 f9f0 	bl	801e0c4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018ce8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8018cea:	4b5a      	ldr	r3, [pc, #360]	; (8018e54 <tcp_receive+0xb04>)
 8018cec:	881b      	ldrh	r3, [r3, #0]
 8018cee:	461a      	mov	r2, r3
 8018cf0:	4b59      	ldr	r3, [pc, #356]	; (8018e58 <tcp_receive+0xb08>)
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	441a      	add	r2, r3
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018cfe:	4b55      	ldr	r3, [pc, #340]	; (8018e54 <tcp_receive+0xb04>)
 8018d00:	881b      	ldrh	r3, [r3, #0]
 8018d02:	429a      	cmp	r2, r3
 8018d04:	d206      	bcs.n	8018d14 <tcp_receive+0x9c4>
 8018d06:	4b56      	ldr	r3, [pc, #344]	; (8018e60 <tcp_receive+0xb10>)
 8018d08:	f240 6207 	movw	r2, #1543	; 0x607
 8018d0c:	4957      	ldr	r1, [pc, #348]	; (8018e6c <tcp_receive+0xb1c>)
 8018d0e:	4856      	ldr	r0, [pc, #344]	; (8018e68 <tcp_receive+0xb18>)
 8018d10:	f005 f9d8 	bl	801e0c4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018d18:	4b4e      	ldr	r3, [pc, #312]	; (8018e54 <tcp_receive+0xb04>)
 8018d1a:	881b      	ldrh	r3, [r3, #0]
 8018d1c:	1ad3      	subs	r3, r2, r3
 8018d1e:	b29a      	uxth	r2, r3
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018d24:	6878      	ldr	r0, [r7, #4]
 8018d26:	f7fc fe93 	bl	8015a50 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8018d2a:	4b4c      	ldr	r3, [pc, #304]	; (8018e5c <tcp_receive+0xb0c>)
 8018d2c:	685b      	ldr	r3, [r3, #4]
 8018d2e:	891b      	ldrh	r3, [r3, #8]
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d006      	beq.n	8018d42 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8018d34:	4b49      	ldr	r3, [pc, #292]	; (8018e5c <tcp_receive+0xb0c>)
 8018d36:	685b      	ldr	r3, [r3, #4]
 8018d38:	4a4d      	ldr	r2, [pc, #308]	; (8018e70 <tcp_receive+0xb20>)
 8018d3a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018d3c:	4b47      	ldr	r3, [pc, #284]	; (8018e5c <tcp_receive+0xb0c>)
 8018d3e:	2200      	movs	r2, #0
 8018d40:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018d42:	4b46      	ldr	r3, [pc, #280]	; (8018e5c <tcp_receive+0xb0c>)
 8018d44:	68db      	ldr	r3, [r3, #12]
 8018d46:	899b      	ldrh	r3, [r3, #12]
 8018d48:	b29b      	uxth	r3, r3
 8018d4a:	4618      	mov	r0, r3
 8018d4c:	f7fa fb96 	bl	801347c <lwip_htons>
 8018d50:	4603      	mov	r3, r0
 8018d52:	b2db      	uxtb	r3, r3
 8018d54:	f003 0301 	and.w	r3, r3, #1
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	f000 80b8 	beq.w	8018ece <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8018d5e:	4b45      	ldr	r3, [pc, #276]	; (8018e74 <tcp_receive+0xb24>)
 8018d60:	781b      	ldrb	r3, [r3, #0]
 8018d62:	f043 0320 	orr.w	r3, r3, #32
 8018d66:	b2da      	uxtb	r2, r3
 8018d68:	4b42      	ldr	r3, [pc, #264]	; (8018e74 <tcp_receive+0xb24>)
 8018d6a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018d6c:	e0af      	b.n	8018ece <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018d72:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018d78:	68db      	ldr	r3, [r3, #12]
 8018d7a:	685b      	ldr	r3, [r3, #4]
 8018d7c:	4a36      	ldr	r2, [pc, #216]	; (8018e58 <tcp_receive+0xb08>)
 8018d7e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018d80:	68bb      	ldr	r3, [r7, #8]
 8018d82:	891b      	ldrh	r3, [r3, #8]
 8018d84:	461c      	mov	r4, r3
 8018d86:	68bb      	ldr	r3, [r7, #8]
 8018d88:	68db      	ldr	r3, [r3, #12]
 8018d8a:	899b      	ldrh	r3, [r3, #12]
 8018d8c:	b29b      	uxth	r3, r3
 8018d8e:	4618      	mov	r0, r3
 8018d90:	f7fa fb74 	bl	801347c <lwip_htons>
 8018d94:	4603      	mov	r3, r0
 8018d96:	b2db      	uxtb	r3, r3
 8018d98:	f003 0303 	and.w	r3, r3, #3
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d001      	beq.n	8018da4 <tcp_receive+0xa54>
 8018da0:	2301      	movs	r3, #1
 8018da2:	e000      	b.n	8018da6 <tcp_receive+0xa56>
 8018da4:	2300      	movs	r3, #0
 8018da6:	191a      	adds	r2, r3, r4
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dac:	441a      	add	r2, r3
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018db6:	461c      	mov	r4, r3
 8018db8:	68bb      	ldr	r3, [r7, #8]
 8018dba:	891b      	ldrh	r3, [r3, #8]
 8018dbc:	461d      	mov	r5, r3
 8018dbe:	68bb      	ldr	r3, [r7, #8]
 8018dc0:	68db      	ldr	r3, [r3, #12]
 8018dc2:	899b      	ldrh	r3, [r3, #12]
 8018dc4:	b29b      	uxth	r3, r3
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7fa fb58 	bl	801347c <lwip_htons>
 8018dcc:	4603      	mov	r3, r0
 8018dce:	b2db      	uxtb	r3, r3
 8018dd0:	f003 0303 	and.w	r3, r3, #3
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d001      	beq.n	8018ddc <tcp_receive+0xa8c>
 8018dd8:	2301      	movs	r3, #1
 8018dda:	e000      	b.n	8018dde <tcp_receive+0xa8e>
 8018ddc:	2300      	movs	r3, #0
 8018dde:	442b      	add	r3, r5
 8018de0:	429c      	cmp	r4, r3
 8018de2:	d206      	bcs.n	8018df2 <tcp_receive+0xaa2>
 8018de4:	4b1e      	ldr	r3, [pc, #120]	; (8018e60 <tcp_receive+0xb10>)
 8018de6:	f240 622c 	movw	r2, #1580	; 0x62c
 8018dea:	4923      	ldr	r1, [pc, #140]	; (8018e78 <tcp_receive+0xb28>)
 8018dec:	481e      	ldr	r0, [pc, #120]	; (8018e68 <tcp_receive+0xb18>)
 8018dee:	f005 f969 	bl	801e0c4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018df2:	68bb      	ldr	r3, [r7, #8]
 8018df4:	891b      	ldrh	r3, [r3, #8]
 8018df6:	461c      	mov	r4, r3
 8018df8:	68bb      	ldr	r3, [r7, #8]
 8018dfa:	68db      	ldr	r3, [r3, #12]
 8018dfc:	899b      	ldrh	r3, [r3, #12]
 8018dfe:	b29b      	uxth	r3, r3
 8018e00:	4618      	mov	r0, r3
 8018e02:	f7fa fb3b 	bl	801347c <lwip_htons>
 8018e06:	4603      	mov	r3, r0
 8018e08:	b2db      	uxtb	r3, r3
 8018e0a:	f003 0303 	and.w	r3, r3, #3
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	d001      	beq.n	8018e16 <tcp_receive+0xac6>
 8018e12:	2301      	movs	r3, #1
 8018e14:	e000      	b.n	8018e18 <tcp_receive+0xac8>
 8018e16:	2300      	movs	r3, #0
 8018e18:	1919      	adds	r1, r3, r4
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018e1e:	b28b      	uxth	r3, r1
 8018e20:	1ad3      	subs	r3, r2, r3
 8018e22:	b29a      	uxth	r2, r3
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8018e28:	6878      	ldr	r0, [r7, #4]
 8018e2a:	f7fc fe11 	bl	8015a50 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8018e2e:	68bb      	ldr	r3, [r7, #8]
 8018e30:	685b      	ldr	r3, [r3, #4]
 8018e32:	891b      	ldrh	r3, [r3, #8]
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d028      	beq.n	8018e8a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8018e38:	4b0d      	ldr	r3, [pc, #52]	; (8018e70 <tcp_receive+0xb20>)
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d01d      	beq.n	8018e7c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8018e40:	4b0b      	ldr	r3, [pc, #44]	; (8018e70 <tcp_receive+0xb20>)
 8018e42:	681a      	ldr	r2, [r3, #0]
 8018e44:	68bb      	ldr	r3, [r7, #8]
 8018e46:	685b      	ldr	r3, [r3, #4]
 8018e48:	4619      	mov	r1, r3
 8018e4a:	4610      	mov	r0, r2
 8018e4c:	f7fb ffc2 	bl	8014dd4 <pbuf_cat>
 8018e50:	e018      	b.n	8018e84 <tcp_receive+0xb34>
 8018e52:	bf00      	nop
 8018e54:	20004552 	.word	0x20004552
 8018e58:	20004548 	.word	0x20004548
 8018e5c:	20004528 	.word	0x20004528
 8018e60:	08020524 	.word	0x08020524
 8018e64:	08020904 	.word	0x08020904
 8018e68:	08020570 	.word	0x08020570
 8018e6c:	08020940 	.word	0x08020940
 8018e70:	20004558 	.word	0x20004558
 8018e74:	20004555 	.word	0x20004555
 8018e78:	08020960 	.word	0x08020960
            } else {
              recv_data = cseg->p;
 8018e7c:	68bb      	ldr	r3, [r7, #8]
 8018e7e:	685b      	ldr	r3, [r3, #4]
 8018e80:	4a70      	ldr	r2, [pc, #448]	; (8019044 <tcp_receive+0xcf4>)
 8018e82:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8018e84:	68bb      	ldr	r3, [r7, #8]
 8018e86:	2200      	movs	r2, #0
 8018e88:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018e8a:	68bb      	ldr	r3, [r7, #8]
 8018e8c:	68db      	ldr	r3, [r3, #12]
 8018e8e:	899b      	ldrh	r3, [r3, #12]
 8018e90:	b29b      	uxth	r3, r3
 8018e92:	4618      	mov	r0, r3
 8018e94:	f7fa faf2 	bl	801347c <lwip_htons>
 8018e98:	4603      	mov	r3, r0
 8018e9a:	b2db      	uxtb	r3, r3
 8018e9c:	f003 0301 	and.w	r3, r3, #1
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d00d      	beq.n	8018ec0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8018ea4:	4b68      	ldr	r3, [pc, #416]	; (8019048 <tcp_receive+0xcf8>)
 8018ea6:	781b      	ldrb	r3, [r3, #0]
 8018ea8:	f043 0320 	orr.w	r3, r3, #32
 8018eac:	b2da      	uxtb	r2, r3
 8018eae:	4b66      	ldr	r3, [pc, #408]	; (8019048 <tcp_receive+0xcf8>)
 8018eb0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	7d1b      	ldrb	r3, [r3, #20]
 8018eb6:	2b04      	cmp	r3, #4
 8018eb8:	d102      	bne.n	8018ec0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	2207      	movs	r2, #7
 8018ebe:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018ec0:	68bb      	ldr	r3, [r7, #8]
 8018ec2:	681a      	ldr	r2, [r3, #0]
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8018ec8:	68b8      	ldr	r0, [r7, #8]
 8018eca:	f7fd fae3 	bl	8016494 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d008      	beq.n	8018ee8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018eda:	68db      	ldr	r3, [r3, #12]
 8018edc:	685a      	ldr	r2, [r3, #4]
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8018ee2:	429a      	cmp	r2, r3
 8018ee4:	f43f af43 	beq.w	8018d6e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	8b5b      	ldrh	r3, [r3, #26]
 8018eec:	f003 0301 	and.w	r3, r3, #1
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d00e      	beq.n	8018f12 <tcp_receive+0xbc2>
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	8b5b      	ldrh	r3, [r3, #26]
 8018ef8:	f023 0301 	bic.w	r3, r3, #1
 8018efc:	b29a      	uxth	r2, r3
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	835a      	strh	r2, [r3, #26]
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	8b5b      	ldrh	r3, [r3, #26]
 8018f06:	f043 0302 	orr.w	r3, r3, #2
 8018f0a:	b29a      	uxth	r2, r3
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018f10:	e188      	b.n	8019224 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	8b5b      	ldrh	r3, [r3, #26]
 8018f16:	f043 0301 	orr.w	r3, r3, #1
 8018f1a:	b29a      	uxth	r2, r3
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018f20:	e180      	b.n	8019224 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d106      	bne.n	8018f38 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8018f2a:	4848      	ldr	r0, [pc, #288]	; (801904c <tcp_receive+0xcfc>)
 8018f2c:	f7fd fae8 	bl	8016500 <tcp_seg_copy>
 8018f30:	4602      	mov	r2, r0
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	675a      	str	r2, [r3, #116]	; 0x74
 8018f36:	e16d      	b.n	8019214 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8018f38:	2300      	movs	r3, #0
 8018f3a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018f40:	63bb      	str	r3, [r7, #56]	; 0x38
 8018f42:	e157      	b.n	80191f4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8018f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f46:	68db      	ldr	r3, [r3, #12]
 8018f48:	685a      	ldr	r2, [r3, #4]
 8018f4a:	4b41      	ldr	r3, [pc, #260]	; (8019050 <tcp_receive+0xd00>)
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	429a      	cmp	r2, r3
 8018f50:	d11d      	bne.n	8018f8e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8018f52:	4b3e      	ldr	r3, [pc, #248]	; (801904c <tcp_receive+0xcfc>)
 8018f54:	891a      	ldrh	r2, [r3, #8]
 8018f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f58:	891b      	ldrh	r3, [r3, #8]
 8018f5a:	429a      	cmp	r2, r3
 8018f5c:	f240 814f 	bls.w	80191fe <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018f60:	483a      	ldr	r0, [pc, #232]	; (801904c <tcp_receive+0xcfc>)
 8018f62:	f7fd facd 	bl	8016500 <tcp_seg_copy>
 8018f66:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8018f68:	697b      	ldr	r3, [r7, #20]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	f000 8149 	beq.w	8019202 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8018f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d003      	beq.n	8018f7e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8018f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f78:	697a      	ldr	r2, [r7, #20]
 8018f7a:	601a      	str	r2, [r3, #0]
 8018f7c:	e002      	b.n	8018f84 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	697a      	ldr	r2, [r7, #20]
 8018f82:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8018f84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018f86:	6978      	ldr	r0, [r7, #20]
 8018f88:	f7ff f8de 	bl	8018148 <tcp_oos_insert_segment>
                }
                break;
 8018f8c:	e139      	b.n	8019202 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d117      	bne.n	8018fc4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8018f94:	4b2e      	ldr	r3, [pc, #184]	; (8019050 <tcp_receive+0xd00>)
 8018f96:	681a      	ldr	r2, [r3, #0]
 8018f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f9a:	68db      	ldr	r3, [r3, #12]
 8018f9c:	685b      	ldr	r3, [r3, #4]
 8018f9e:	1ad3      	subs	r3, r2, r3
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	da57      	bge.n	8019054 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018fa4:	4829      	ldr	r0, [pc, #164]	; (801904c <tcp_receive+0xcfc>)
 8018fa6:	f7fd faab 	bl	8016500 <tcp_seg_copy>
 8018faa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018fac:	69bb      	ldr	r3, [r7, #24]
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	f000 8129 	beq.w	8019206 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	69ba      	ldr	r2, [r7, #24]
 8018fb8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8018fba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018fbc:	69b8      	ldr	r0, [r7, #24]
 8018fbe:	f7ff f8c3 	bl	8018148 <tcp_oos_insert_segment>
                  }
                  break;
 8018fc2:	e120      	b.n	8019206 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018fc4:	4b22      	ldr	r3, [pc, #136]	; (8019050 <tcp_receive+0xd00>)
 8018fc6:	681a      	ldr	r2, [r3, #0]
 8018fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fca:	68db      	ldr	r3, [r3, #12]
 8018fcc:	685b      	ldr	r3, [r3, #4]
 8018fce:	1ad3      	subs	r3, r2, r3
 8018fd0:	3b01      	subs	r3, #1
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	db3e      	blt.n	8019054 <tcp_receive+0xd04>
 8018fd6:	4b1e      	ldr	r3, [pc, #120]	; (8019050 <tcp_receive+0xd00>)
 8018fd8:	681a      	ldr	r2, [r3, #0]
 8018fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fdc:	68db      	ldr	r3, [r3, #12]
 8018fde:	685b      	ldr	r3, [r3, #4]
 8018fe0:	1ad3      	subs	r3, r2, r3
 8018fe2:	3301      	adds	r3, #1
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	dc35      	bgt.n	8019054 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018fe8:	4818      	ldr	r0, [pc, #96]	; (801904c <tcp_receive+0xcfc>)
 8018fea:	f7fd fa89 	bl	8016500 <tcp_seg_copy>
 8018fee:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018ff0:	69fb      	ldr	r3, [r7, #28]
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	f000 8109 	beq.w	801920a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ffa:	68db      	ldr	r3, [r3, #12]
 8018ffc:	685b      	ldr	r3, [r3, #4]
 8018ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019000:	8912      	ldrh	r2, [r2, #8]
 8019002:	441a      	add	r2, r3
 8019004:	4b12      	ldr	r3, [pc, #72]	; (8019050 <tcp_receive+0xd00>)
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	1ad3      	subs	r3, r2, r3
 801900a:	2b00      	cmp	r3, #0
 801900c:	dd12      	ble.n	8019034 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801900e:	4b10      	ldr	r3, [pc, #64]	; (8019050 <tcp_receive+0xd00>)
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	b29a      	uxth	r2, r3
 8019014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019016:	68db      	ldr	r3, [r3, #12]
 8019018:	685b      	ldr	r3, [r3, #4]
 801901a:	b29b      	uxth	r3, r3
 801901c:	1ad3      	subs	r3, r2, r3
 801901e:	b29a      	uxth	r2, r3
 8019020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019022:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8019024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019026:	685a      	ldr	r2, [r3, #4]
 8019028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801902a:	891b      	ldrh	r3, [r3, #8]
 801902c:	4619      	mov	r1, r3
 801902e:	4610      	mov	r0, r2
 8019030:	f7fb fc7c 	bl	801492c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019036:	69fa      	ldr	r2, [r7, #28]
 8019038:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801903a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801903c:	69f8      	ldr	r0, [r7, #28]
 801903e:	f7ff f883 	bl	8018148 <tcp_oos_insert_segment>
                  }
                  break;
 8019042:	e0e2      	b.n	801920a <tcp_receive+0xeba>
 8019044:	20004558 	.word	0x20004558
 8019048:	20004555 	.word	0x20004555
 801904c:	20004528 	.word	0x20004528
 8019050:	20004548 	.word	0x20004548
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8019054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019056:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8019058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	2b00      	cmp	r3, #0
 801905e:	f040 80c6 	bne.w	80191ee <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8019062:	4b80      	ldr	r3, [pc, #512]	; (8019264 <tcp_receive+0xf14>)
 8019064:	681a      	ldr	r2, [r3, #0]
 8019066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019068:	68db      	ldr	r3, [r3, #12]
 801906a:	685b      	ldr	r3, [r3, #4]
 801906c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801906e:	2b00      	cmp	r3, #0
 8019070:	f340 80bd 	ble.w	80191ee <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019076:	68db      	ldr	r3, [r3, #12]
 8019078:	899b      	ldrh	r3, [r3, #12]
 801907a:	b29b      	uxth	r3, r3
 801907c:	4618      	mov	r0, r3
 801907e:	f7fa f9fd 	bl	801347c <lwip_htons>
 8019082:	4603      	mov	r3, r0
 8019084:	b2db      	uxtb	r3, r3
 8019086:	f003 0301 	and.w	r3, r3, #1
 801908a:	2b00      	cmp	r3, #0
 801908c:	f040 80bf 	bne.w	801920e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8019090:	4875      	ldr	r0, [pc, #468]	; (8019268 <tcp_receive+0xf18>)
 8019092:	f7fd fa35 	bl	8016500 <tcp_seg_copy>
 8019096:	4602      	mov	r2, r0
 8019098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801909a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801909c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	f000 80b6 	beq.w	8019212 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80190a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190a8:	68db      	ldr	r3, [r3, #12]
 80190aa:	685b      	ldr	r3, [r3, #4]
 80190ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80190ae:	8912      	ldrh	r2, [r2, #8]
 80190b0:	441a      	add	r2, r3
 80190b2:	4b6c      	ldr	r3, [pc, #432]	; (8019264 <tcp_receive+0xf14>)
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	1ad3      	subs	r3, r2, r3
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	dd12      	ble.n	80190e2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80190bc:	4b69      	ldr	r3, [pc, #420]	; (8019264 <tcp_receive+0xf14>)
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	b29a      	uxth	r2, r3
 80190c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190c4:	68db      	ldr	r3, [r3, #12]
 80190c6:	685b      	ldr	r3, [r3, #4]
 80190c8:	b29b      	uxth	r3, r3
 80190ca:	1ad3      	subs	r3, r2, r3
 80190cc:	b29a      	uxth	r2, r3
 80190ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190d0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80190d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190d4:	685a      	ldr	r2, [r3, #4]
 80190d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190d8:	891b      	ldrh	r3, [r3, #8]
 80190da:	4619      	mov	r1, r3
 80190dc:	4610      	mov	r0, r2
 80190de:	f7fb fc25 	bl	801492c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80190e2:	4b62      	ldr	r3, [pc, #392]	; (801926c <tcp_receive+0xf1c>)
 80190e4:	881b      	ldrh	r3, [r3, #0]
 80190e6:	461a      	mov	r2, r3
 80190e8:	4b5e      	ldr	r3, [pc, #376]	; (8019264 <tcp_receive+0xf14>)
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	441a      	add	r2, r3
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190f2:	6879      	ldr	r1, [r7, #4]
 80190f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80190f6:	440b      	add	r3, r1
 80190f8:	1ad3      	subs	r3, r2, r3
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	f340 8089 	ble.w	8019212 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	68db      	ldr	r3, [r3, #12]
 8019106:	899b      	ldrh	r3, [r3, #12]
 8019108:	b29b      	uxth	r3, r3
 801910a:	4618      	mov	r0, r3
 801910c:	f7fa f9b6 	bl	801347c <lwip_htons>
 8019110:	4603      	mov	r3, r0
 8019112:	b2db      	uxtb	r3, r3
 8019114:	f003 0301 	and.w	r3, r3, #1
 8019118:	2b00      	cmp	r3, #0
 801911a:	d022      	beq.n	8019162 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801911c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	68db      	ldr	r3, [r3, #12]
 8019122:	899b      	ldrh	r3, [r3, #12]
 8019124:	b29b      	uxth	r3, r3
 8019126:	b21b      	sxth	r3, r3
 8019128:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801912c:	b21c      	sxth	r4, r3
 801912e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	68db      	ldr	r3, [r3, #12]
 8019134:	899b      	ldrh	r3, [r3, #12]
 8019136:	b29b      	uxth	r3, r3
 8019138:	4618      	mov	r0, r3
 801913a:	f7fa f99f 	bl	801347c <lwip_htons>
 801913e:	4603      	mov	r3, r0
 8019140:	b2db      	uxtb	r3, r3
 8019142:	b29b      	uxth	r3, r3
 8019144:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019148:	b29b      	uxth	r3, r3
 801914a:	4618      	mov	r0, r3
 801914c:	f7fa f996 	bl	801347c <lwip_htons>
 8019150:	4603      	mov	r3, r0
 8019152:	b21b      	sxth	r3, r3
 8019154:	4323      	orrs	r3, r4
 8019156:	b21a      	sxth	r2, r3
 8019158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	68db      	ldr	r3, [r3, #12]
 801915e:	b292      	uxth	r2, r2
 8019160:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019166:	b29a      	uxth	r2, r3
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801916c:	4413      	add	r3, r2
 801916e:	b299      	uxth	r1, r3
 8019170:	4b3c      	ldr	r3, [pc, #240]	; (8019264 <tcp_receive+0xf14>)
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	b29a      	uxth	r2, r3
 8019176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	1a8a      	subs	r2, r1, r2
 801917c:	b292      	uxth	r2, r2
 801917e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8019180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	685a      	ldr	r2, [r3, #4]
 8019186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	891b      	ldrh	r3, [r3, #8]
 801918c:	4619      	mov	r1, r3
 801918e:	4610      	mov	r0, r2
 8019190:	f7fb fbcc 	bl	801492c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8019194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	891c      	ldrh	r4, [r3, #8]
 801919a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	68db      	ldr	r3, [r3, #12]
 80191a0:	899b      	ldrh	r3, [r3, #12]
 80191a2:	b29b      	uxth	r3, r3
 80191a4:	4618      	mov	r0, r3
 80191a6:	f7fa f969 	bl	801347c <lwip_htons>
 80191aa:	4603      	mov	r3, r0
 80191ac:	b2db      	uxtb	r3, r3
 80191ae:	f003 0303 	and.w	r3, r3, #3
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d001      	beq.n	80191ba <tcp_receive+0xe6a>
 80191b6:	2301      	movs	r3, #1
 80191b8:	e000      	b.n	80191bc <tcp_receive+0xe6c>
 80191ba:	2300      	movs	r3, #0
 80191bc:	4423      	add	r3, r4
 80191be:	b29a      	uxth	r2, r3
 80191c0:	4b2a      	ldr	r3, [pc, #168]	; (801926c <tcp_receive+0xf1c>)
 80191c2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80191c4:	4b29      	ldr	r3, [pc, #164]	; (801926c <tcp_receive+0xf1c>)
 80191c6:	881b      	ldrh	r3, [r3, #0]
 80191c8:	461a      	mov	r2, r3
 80191ca:	4b26      	ldr	r3, [pc, #152]	; (8019264 <tcp_receive+0xf14>)
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	441a      	add	r2, r3
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191d4:	6879      	ldr	r1, [r7, #4]
 80191d6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80191d8:	440b      	add	r3, r1
 80191da:	429a      	cmp	r2, r3
 80191dc:	d019      	beq.n	8019212 <tcp_receive+0xec2>
 80191de:	4b24      	ldr	r3, [pc, #144]	; (8019270 <tcp_receive+0xf20>)
 80191e0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80191e4:	4923      	ldr	r1, [pc, #140]	; (8019274 <tcp_receive+0xf24>)
 80191e6:	4824      	ldr	r0, [pc, #144]	; (8019278 <tcp_receive+0xf28>)
 80191e8:	f004 ff6c 	bl	801e0c4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80191ec:	e011      	b.n	8019212 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80191ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80191f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	f47f aea4 	bne.w	8018f44 <tcp_receive+0xbf4>
 80191fc:	e00a      	b.n	8019214 <tcp_receive+0xec4>
                break;
 80191fe:	bf00      	nop
 8019200:	e008      	b.n	8019214 <tcp_receive+0xec4>
                break;
 8019202:	bf00      	nop
 8019204:	e006      	b.n	8019214 <tcp_receive+0xec4>
                  break;
 8019206:	bf00      	nop
 8019208:	e004      	b.n	8019214 <tcp_receive+0xec4>
                  break;
 801920a:	bf00      	nop
 801920c:	e002      	b.n	8019214 <tcp_receive+0xec4>
                  break;
 801920e:	bf00      	nop
 8019210:	e000      	b.n	8019214 <tcp_receive+0xec4>
                break;
 8019212:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8019214:	6878      	ldr	r0, [r7, #4]
 8019216:	f001 fe9d 	bl	801af54 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801921a:	e003      	b.n	8019224 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801921c:	6878      	ldr	r0, [r7, #4]
 801921e:	f001 fe99 	bl	801af54 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019222:	e01a      	b.n	801925a <tcp_receive+0xf0a>
 8019224:	e019      	b.n	801925a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8019226:	4b0f      	ldr	r3, [pc, #60]	; (8019264 <tcp_receive+0xf14>)
 8019228:	681a      	ldr	r2, [r3, #0]
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801922e:	1ad3      	subs	r3, r2, r3
 8019230:	2b00      	cmp	r3, #0
 8019232:	db0a      	blt.n	801924a <tcp_receive+0xefa>
 8019234:	4b0b      	ldr	r3, [pc, #44]	; (8019264 <tcp_receive+0xf14>)
 8019236:	681a      	ldr	r2, [r3, #0]
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801923c:	6879      	ldr	r1, [r7, #4]
 801923e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019240:	440b      	add	r3, r1
 8019242:	1ad3      	subs	r3, r2, r3
 8019244:	3301      	adds	r3, #1
 8019246:	2b00      	cmp	r3, #0
 8019248:	dd07      	ble.n	801925a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	8b5b      	ldrh	r3, [r3, #26]
 801924e:	f043 0302 	orr.w	r3, r3, #2
 8019252:	b29a      	uxth	r2, r3
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8019258:	e7ff      	b.n	801925a <tcp_receive+0xf0a>
 801925a:	bf00      	nop
 801925c:	3750      	adds	r7, #80	; 0x50
 801925e:	46bd      	mov	sp, r7
 8019260:	bdb0      	pop	{r4, r5, r7, pc}
 8019262:	bf00      	nop
 8019264:	20004548 	.word	0x20004548
 8019268:	20004528 	.word	0x20004528
 801926c:	20004552 	.word	0x20004552
 8019270:	08020524 	.word	0x08020524
 8019274:	080208cc 	.word	0x080208cc
 8019278:	08020570 	.word	0x08020570

0801927c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801927c:	b480      	push	{r7}
 801927e:	b083      	sub	sp, #12
 8019280:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8019282:	4b15      	ldr	r3, [pc, #84]	; (80192d8 <tcp_get_next_optbyte+0x5c>)
 8019284:	881b      	ldrh	r3, [r3, #0]
 8019286:	1c5a      	adds	r2, r3, #1
 8019288:	b291      	uxth	r1, r2
 801928a:	4a13      	ldr	r2, [pc, #76]	; (80192d8 <tcp_get_next_optbyte+0x5c>)
 801928c:	8011      	strh	r1, [r2, #0]
 801928e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8019290:	4b12      	ldr	r3, [pc, #72]	; (80192dc <tcp_get_next_optbyte+0x60>)
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	2b00      	cmp	r3, #0
 8019296:	d004      	beq.n	80192a2 <tcp_get_next_optbyte+0x26>
 8019298:	4b11      	ldr	r3, [pc, #68]	; (80192e0 <tcp_get_next_optbyte+0x64>)
 801929a:	881b      	ldrh	r3, [r3, #0]
 801929c:	88fa      	ldrh	r2, [r7, #6]
 801929e:	429a      	cmp	r2, r3
 80192a0:	d208      	bcs.n	80192b4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80192a2:	4b10      	ldr	r3, [pc, #64]	; (80192e4 <tcp_get_next_optbyte+0x68>)
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	3314      	adds	r3, #20
 80192a8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80192aa:	88fb      	ldrh	r3, [r7, #6]
 80192ac:	683a      	ldr	r2, [r7, #0]
 80192ae:	4413      	add	r3, r2
 80192b0:	781b      	ldrb	r3, [r3, #0]
 80192b2:	e00b      	b.n	80192cc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80192b4:	88fb      	ldrh	r3, [r7, #6]
 80192b6:	b2da      	uxtb	r2, r3
 80192b8:	4b09      	ldr	r3, [pc, #36]	; (80192e0 <tcp_get_next_optbyte+0x64>)
 80192ba:	881b      	ldrh	r3, [r3, #0]
 80192bc:	b2db      	uxtb	r3, r3
 80192be:	1ad3      	subs	r3, r2, r3
 80192c0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80192c2:	4b06      	ldr	r3, [pc, #24]	; (80192dc <tcp_get_next_optbyte+0x60>)
 80192c4:	681a      	ldr	r2, [r3, #0]
 80192c6:	797b      	ldrb	r3, [r7, #5]
 80192c8:	4413      	add	r3, r2
 80192ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80192cc:	4618      	mov	r0, r3
 80192ce:	370c      	adds	r7, #12
 80192d0:	46bd      	mov	sp, r7
 80192d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192d6:	4770      	bx	lr
 80192d8:	20004544 	.word	0x20004544
 80192dc:	20004540 	.word	0x20004540
 80192e0:	2000453e 	.word	0x2000453e
 80192e4:	20004538 	.word	0x20004538

080192e8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80192e8:	b580      	push	{r7, lr}
 80192ea:	b084      	sub	sp, #16
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d106      	bne.n	8019304 <tcp_parseopt+0x1c>
 80192f6:	4b31      	ldr	r3, [pc, #196]	; (80193bc <tcp_parseopt+0xd4>)
 80192f8:	f240 727d 	movw	r2, #1917	; 0x77d
 80192fc:	4930      	ldr	r1, [pc, #192]	; (80193c0 <tcp_parseopt+0xd8>)
 80192fe:	4831      	ldr	r0, [pc, #196]	; (80193c4 <tcp_parseopt+0xdc>)
 8019300:	f004 fee0 	bl	801e0c4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8019304:	4b30      	ldr	r3, [pc, #192]	; (80193c8 <tcp_parseopt+0xe0>)
 8019306:	881b      	ldrh	r3, [r3, #0]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d053      	beq.n	80193b4 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801930c:	4b2f      	ldr	r3, [pc, #188]	; (80193cc <tcp_parseopt+0xe4>)
 801930e:	2200      	movs	r2, #0
 8019310:	801a      	strh	r2, [r3, #0]
 8019312:	e043      	b.n	801939c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8019314:	f7ff ffb2 	bl	801927c <tcp_get_next_optbyte>
 8019318:	4603      	mov	r3, r0
 801931a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801931c:	7bfb      	ldrb	r3, [r7, #15]
 801931e:	2b01      	cmp	r3, #1
 8019320:	d03c      	beq.n	801939c <tcp_parseopt+0xb4>
 8019322:	2b02      	cmp	r3, #2
 8019324:	d002      	beq.n	801932c <tcp_parseopt+0x44>
 8019326:	2b00      	cmp	r3, #0
 8019328:	d03f      	beq.n	80193aa <tcp_parseopt+0xc2>
 801932a:	e026      	b.n	801937a <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801932c:	f7ff ffa6 	bl	801927c <tcp_get_next_optbyte>
 8019330:	4603      	mov	r3, r0
 8019332:	2b04      	cmp	r3, #4
 8019334:	d13b      	bne.n	80193ae <tcp_parseopt+0xc6>
 8019336:	4b25      	ldr	r3, [pc, #148]	; (80193cc <tcp_parseopt+0xe4>)
 8019338:	881b      	ldrh	r3, [r3, #0]
 801933a:	3302      	adds	r3, #2
 801933c:	4a22      	ldr	r2, [pc, #136]	; (80193c8 <tcp_parseopt+0xe0>)
 801933e:	8812      	ldrh	r2, [r2, #0]
 8019340:	4293      	cmp	r3, r2
 8019342:	dc34      	bgt.n	80193ae <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8019344:	f7ff ff9a 	bl	801927c <tcp_get_next_optbyte>
 8019348:	4603      	mov	r3, r0
 801934a:	b29b      	uxth	r3, r3
 801934c:	021b      	lsls	r3, r3, #8
 801934e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8019350:	f7ff ff94 	bl	801927c <tcp_get_next_optbyte>
 8019354:	4603      	mov	r3, r0
 8019356:	b29a      	uxth	r2, r3
 8019358:	89bb      	ldrh	r3, [r7, #12]
 801935a:	4313      	orrs	r3, r2
 801935c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801935e:	89bb      	ldrh	r3, [r7, #12]
 8019360:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8019364:	d804      	bhi.n	8019370 <tcp_parseopt+0x88>
 8019366:	89bb      	ldrh	r3, [r7, #12]
 8019368:	2b00      	cmp	r3, #0
 801936a:	d001      	beq.n	8019370 <tcp_parseopt+0x88>
 801936c:	89ba      	ldrh	r2, [r7, #12]
 801936e:	e001      	b.n	8019374 <tcp_parseopt+0x8c>
 8019370:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8019378:	e010      	b.n	801939c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801937a:	f7ff ff7f 	bl	801927c <tcp_get_next_optbyte>
 801937e:	4603      	mov	r3, r0
 8019380:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8019382:	7afb      	ldrb	r3, [r7, #11]
 8019384:	2b01      	cmp	r3, #1
 8019386:	d914      	bls.n	80193b2 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8019388:	7afb      	ldrb	r3, [r7, #11]
 801938a:	b29a      	uxth	r2, r3
 801938c:	4b0f      	ldr	r3, [pc, #60]	; (80193cc <tcp_parseopt+0xe4>)
 801938e:	881b      	ldrh	r3, [r3, #0]
 8019390:	4413      	add	r3, r2
 8019392:	b29b      	uxth	r3, r3
 8019394:	3b02      	subs	r3, #2
 8019396:	b29a      	uxth	r2, r3
 8019398:	4b0c      	ldr	r3, [pc, #48]	; (80193cc <tcp_parseopt+0xe4>)
 801939a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801939c:	4b0b      	ldr	r3, [pc, #44]	; (80193cc <tcp_parseopt+0xe4>)
 801939e:	881a      	ldrh	r2, [r3, #0]
 80193a0:	4b09      	ldr	r3, [pc, #36]	; (80193c8 <tcp_parseopt+0xe0>)
 80193a2:	881b      	ldrh	r3, [r3, #0]
 80193a4:	429a      	cmp	r2, r3
 80193a6:	d3b5      	bcc.n	8019314 <tcp_parseopt+0x2c>
 80193a8:	e004      	b.n	80193b4 <tcp_parseopt+0xcc>
          return;
 80193aa:	bf00      	nop
 80193ac:	e002      	b.n	80193b4 <tcp_parseopt+0xcc>
            return;
 80193ae:	bf00      	nop
 80193b0:	e000      	b.n	80193b4 <tcp_parseopt+0xcc>
            return;
 80193b2:	bf00      	nop
      }
    }
  }
}
 80193b4:	3710      	adds	r7, #16
 80193b6:	46bd      	mov	sp, r7
 80193b8:	bd80      	pop	{r7, pc}
 80193ba:	bf00      	nop
 80193bc:	08020524 	.word	0x08020524
 80193c0:	08020988 	.word	0x08020988
 80193c4:	08020570 	.word	0x08020570
 80193c8:	2000453c 	.word	0x2000453c
 80193cc:	20004544 	.word	0x20004544

080193d0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80193d0:	b480      	push	{r7}
 80193d2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80193d4:	4b05      	ldr	r3, [pc, #20]	; (80193ec <tcp_trigger_input_pcb_close+0x1c>)
 80193d6:	781b      	ldrb	r3, [r3, #0]
 80193d8:	f043 0310 	orr.w	r3, r3, #16
 80193dc:	b2da      	uxtb	r2, r3
 80193de:	4b03      	ldr	r3, [pc, #12]	; (80193ec <tcp_trigger_input_pcb_close+0x1c>)
 80193e0:	701a      	strb	r2, [r3, #0]
}
 80193e2:	bf00      	nop
 80193e4:	46bd      	mov	sp, r7
 80193e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ea:	4770      	bx	lr
 80193ec:	20004555 	.word	0x20004555

080193f0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80193f0:	b580      	push	{r7, lr}
 80193f2:	b084      	sub	sp, #16
 80193f4:	af00      	add	r7, sp, #0
 80193f6:	60f8      	str	r0, [r7, #12]
 80193f8:	60b9      	str	r1, [r7, #8]
 80193fa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d00a      	beq.n	8019418 <tcp_route+0x28>
 8019402:	68fb      	ldr	r3, [r7, #12]
 8019404:	7a1b      	ldrb	r3, [r3, #8]
 8019406:	2b00      	cmp	r3, #0
 8019408:	d006      	beq.n	8019418 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	7a1b      	ldrb	r3, [r3, #8]
 801940e:	4618      	mov	r0, r3
 8019410:	f7fb f888 	bl	8014524 <netif_get_by_index>
 8019414:	4603      	mov	r3, r0
 8019416:	e003      	b.n	8019420 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8019418:	6878      	ldr	r0, [r7, #4]
 801941a:	f003 fb17 	bl	801ca4c <ip4_route>
 801941e:	4603      	mov	r3, r0
  }
}
 8019420:	4618      	mov	r0, r3
 8019422:	3710      	adds	r7, #16
 8019424:	46bd      	mov	sp, r7
 8019426:	bd80      	pop	{r7, pc}

08019428 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8019428:	b590      	push	{r4, r7, lr}
 801942a:	b087      	sub	sp, #28
 801942c:	af00      	add	r7, sp, #0
 801942e:	60f8      	str	r0, [r7, #12]
 8019430:	60b9      	str	r1, [r7, #8]
 8019432:	603b      	str	r3, [r7, #0]
 8019434:	4613      	mov	r3, r2
 8019436:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d105      	bne.n	801944a <tcp_create_segment+0x22>
 801943e:	4b44      	ldr	r3, [pc, #272]	; (8019550 <tcp_create_segment+0x128>)
 8019440:	22a3      	movs	r2, #163	; 0xa3
 8019442:	4944      	ldr	r1, [pc, #272]	; (8019554 <tcp_create_segment+0x12c>)
 8019444:	4844      	ldr	r0, [pc, #272]	; (8019558 <tcp_create_segment+0x130>)
 8019446:	f004 fe3d 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801944a:	68bb      	ldr	r3, [r7, #8]
 801944c:	2b00      	cmp	r3, #0
 801944e:	d105      	bne.n	801945c <tcp_create_segment+0x34>
 8019450:	4b3f      	ldr	r3, [pc, #252]	; (8019550 <tcp_create_segment+0x128>)
 8019452:	22a4      	movs	r2, #164	; 0xa4
 8019454:	4941      	ldr	r1, [pc, #260]	; (801955c <tcp_create_segment+0x134>)
 8019456:	4840      	ldr	r0, [pc, #256]	; (8019558 <tcp_create_segment+0x130>)
 8019458:	f004 fe34 	bl	801e0c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801945c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019460:	009b      	lsls	r3, r3, #2
 8019462:	b2db      	uxtb	r3, r3
 8019464:	f003 0304 	and.w	r3, r3, #4
 8019468:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801946a:	2003      	movs	r0, #3
 801946c:	f7fa fcf2 	bl	8013e54 <memp_malloc>
 8019470:	6138      	str	r0, [r7, #16]
 8019472:	693b      	ldr	r3, [r7, #16]
 8019474:	2b00      	cmp	r3, #0
 8019476:	d104      	bne.n	8019482 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8019478:	68b8      	ldr	r0, [r7, #8]
 801947a:	f7fb fbdd 	bl	8014c38 <pbuf_free>
    return NULL;
 801947e:	2300      	movs	r3, #0
 8019480:	e061      	b.n	8019546 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8019482:	693b      	ldr	r3, [r7, #16]
 8019484:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019488:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801948a:	693b      	ldr	r3, [r7, #16]
 801948c:	2200      	movs	r2, #0
 801948e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8019490:	693b      	ldr	r3, [r7, #16]
 8019492:	68ba      	ldr	r2, [r7, #8]
 8019494:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019496:	68bb      	ldr	r3, [r7, #8]
 8019498:	891a      	ldrh	r2, [r3, #8]
 801949a:	7dfb      	ldrb	r3, [r7, #23]
 801949c:	b29b      	uxth	r3, r3
 801949e:	429a      	cmp	r2, r3
 80194a0:	d205      	bcs.n	80194ae <tcp_create_segment+0x86>
 80194a2:	4b2b      	ldr	r3, [pc, #172]	; (8019550 <tcp_create_segment+0x128>)
 80194a4:	22b0      	movs	r2, #176	; 0xb0
 80194a6:	492e      	ldr	r1, [pc, #184]	; (8019560 <tcp_create_segment+0x138>)
 80194a8:	482b      	ldr	r0, [pc, #172]	; (8019558 <tcp_create_segment+0x130>)
 80194aa:	f004 fe0b 	bl	801e0c4 <iprintf>
  seg->len = p->tot_len - optlen;
 80194ae:	68bb      	ldr	r3, [r7, #8]
 80194b0:	891a      	ldrh	r2, [r3, #8]
 80194b2:	7dfb      	ldrb	r3, [r7, #23]
 80194b4:	b29b      	uxth	r3, r3
 80194b6:	1ad3      	subs	r3, r2, r3
 80194b8:	b29a      	uxth	r2, r3
 80194ba:	693b      	ldr	r3, [r7, #16]
 80194bc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80194be:	2114      	movs	r1, #20
 80194c0:	68b8      	ldr	r0, [r7, #8]
 80194c2:	f7fb fb23 	bl	8014b0c <pbuf_add_header>
 80194c6:	4603      	mov	r3, r0
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d004      	beq.n	80194d6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80194cc:	6938      	ldr	r0, [r7, #16]
 80194ce:	f7fc ffe1 	bl	8016494 <tcp_seg_free>
    return NULL;
 80194d2:	2300      	movs	r3, #0
 80194d4:	e037      	b.n	8019546 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80194d6:	693b      	ldr	r3, [r7, #16]
 80194d8:	685b      	ldr	r3, [r3, #4]
 80194da:	685a      	ldr	r2, [r3, #4]
 80194dc:	693b      	ldr	r3, [r7, #16]
 80194de:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80194e0:	68fb      	ldr	r3, [r7, #12]
 80194e2:	8ada      	ldrh	r2, [r3, #22]
 80194e4:	693b      	ldr	r3, [r7, #16]
 80194e6:	68dc      	ldr	r4, [r3, #12]
 80194e8:	4610      	mov	r0, r2
 80194ea:	f7f9 ffc7 	bl	801347c <lwip_htons>
 80194ee:	4603      	mov	r3, r0
 80194f0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	8b1a      	ldrh	r2, [r3, #24]
 80194f6:	693b      	ldr	r3, [r7, #16]
 80194f8:	68dc      	ldr	r4, [r3, #12]
 80194fa:	4610      	mov	r0, r2
 80194fc:	f7f9 ffbe 	bl	801347c <lwip_htons>
 8019500:	4603      	mov	r3, r0
 8019502:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8019504:	693b      	ldr	r3, [r7, #16]
 8019506:	68dc      	ldr	r4, [r3, #12]
 8019508:	6838      	ldr	r0, [r7, #0]
 801950a:	f7f9 ffcc 	bl	80134a6 <lwip_htonl>
 801950e:	4603      	mov	r3, r0
 8019510:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019512:	7dfb      	ldrb	r3, [r7, #23]
 8019514:	089b      	lsrs	r3, r3, #2
 8019516:	b2db      	uxtb	r3, r3
 8019518:	b29b      	uxth	r3, r3
 801951a:	3305      	adds	r3, #5
 801951c:	b29b      	uxth	r3, r3
 801951e:	031b      	lsls	r3, r3, #12
 8019520:	b29a      	uxth	r2, r3
 8019522:	79fb      	ldrb	r3, [r7, #7]
 8019524:	b29b      	uxth	r3, r3
 8019526:	4313      	orrs	r3, r2
 8019528:	b29a      	uxth	r2, r3
 801952a:	693b      	ldr	r3, [r7, #16]
 801952c:	68dc      	ldr	r4, [r3, #12]
 801952e:	4610      	mov	r0, r2
 8019530:	f7f9 ffa4 	bl	801347c <lwip_htons>
 8019534:	4603      	mov	r3, r0
 8019536:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8019538:	693b      	ldr	r3, [r7, #16]
 801953a:	68db      	ldr	r3, [r3, #12]
 801953c:	2200      	movs	r2, #0
 801953e:	749a      	strb	r2, [r3, #18]
 8019540:	2200      	movs	r2, #0
 8019542:	74da      	strb	r2, [r3, #19]
  return seg;
 8019544:	693b      	ldr	r3, [r7, #16]
}
 8019546:	4618      	mov	r0, r3
 8019548:	371c      	adds	r7, #28
 801954a:	46bd      	mov	sp, r7
 801954c:	bd90      	pop	{r4, r7, pc}
 801954e:	bf00      	nop
 8019550:	080209a4 	.word	0x080209a4
 8019554:	080209d8 	.word	0x080209d8
 8019558:	080209f8 	.word	0x080209f8
 801955c:	08020a20 	.word	0x08020a20
 8019560:	08020a44 	.word	0x08020a44

08019564 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8019564:	b580      	push	{r7, lr}
 8019566:	b086      	sub	sp, #24
 8019568:	af00      	add	r7, sp, #0
 801956a:	607b      	str	r3, [r7, #4]
 801956c:	4603      	mov	r3, r0
 801956e:	73fb      	strb	r3, [r7, #15]
 8019570:	460b      	mov	r3, r1
 8019572:	81bb      	strh	r3, [r7, #12]
 8019574:	4613      	mov	r3, r2
 8019576:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8019578:	89bb      	ldrh	r3, [r7, #12]
 801957a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	2b00      	cmp	r3, #0
 8019580:	d105      	bne.n	801958e <tcp_pbuf_prealloc+0x2a>
 8019582:	4b30      	ldr	r3, [pc, #192]	; (8019644 <tcp_pbuf_prealloc+0xe0>)
 8019584:	22e8      	movs	r2, #232	; 0xe8
 8019586:	4930      	ldr	r1, [pc, #192]	; (8019648 <tcp_pbuf_prealloc+0xe4>)
 8019588:	4830      	ldr	r0, [pc, #192]	; (801964c <tcp_pbuf_prealloc+0xe8>)
 801958a:	f004 fd9b 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801958e:	6a3b      	ldr	r3, [r7, #32]
 8019590:	2b00      	cmp	r3, #0
 8019592:	d105      	bne.n	80195a0 <tcp_pbuf_prealloc+0x3c>
 8019594:	4b2b      	ldr	r3, [pc, #172]	; (8019644 <tcp_pbuf_prealloc+0xe0>)
 8019596:	22e9      	movs	r2, #233	; 0xe9
 8019598:	492d      	ldr	r1, [pc, #180]	; (8019650 <tcp_pbuf_prealloc+0xec>)
 801959a:	482c      	ldr	r0, [pc, #176]	; (801964c <tcp_pbuf_prealloc+0xe8>)
 801959c:	f004 fd92 	bl	801e0c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80195a0:	89ba      	ldrh	r2, [r7, #12]
 80195a2:	897b      	ldrh	r3, [r7, #10]
 80195a4:	429a      	cmp	r2, r3
 80195a6:	d221      	bcs.n	80195ec <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80195a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80195ac:	f003 0302 	and.w	r3, r3, #2
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d111      	bne.n	80195d8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80195b4:	6a3b      	ldr	r3, [r7, #32]
 80195b6:	8b5b      	ldrh	r3, [r3, #26]
 80195b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d115      	bne.n	80195ec <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80195c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d007      	beq.n	80195d8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80195c8:	6a3b      	ldr	r3, [r7, #32]
 80195ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d103      	bne.n	80195d8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80195d0:	6a3b      	ldr	r3, [r7, #32]
 80195d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d009      	beq.n	80195ec <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80195d8:	89bb      	ldrh	r3, [r7, #12]
 80195da:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80195de:	f023 0203 	bic.w	r2, r3, #3
 80195e2:	897b      	ldrh	r3, [r7, #10]
 80195e4:	4293      	cmp	r3, r2
 80195e6:	bf28      	it	cs
 80195e8:	4613      	movcs	r3, r2
 80195ea:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80195ec:	8af9      	ldrh	r1, [r7, #22]
 80195ee:	7bfb      	ldrb	r3, [r7, #15]
 80195f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80195f4:	4618      	mov	r0, r3
 80195f6:	f7fb f83f 	bl	8014678 <pbuf_alloc>
 80195fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80195fc:	693b      	ldr	r3, [r7, #16]
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d101      	bne.n	8019606 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8019602:	2300      	movs	r3, #0
 8019604:	e019      	b.n	801963a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8019606:	693b      	ldr	r3, [r7, #16]
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	2b00      	cmp	r3, #0
 801960c:	d006      	beq.n	801961c <tcp_pbuf_prealloc+0xb8>
 801960e:	4b0d      	ldr	r3, [pc, #52]	; (8019644 <tcp_pbuf_prealloc+0xe0>)
 8019610:	f240 120b 	movw	r2, #267	; 0x10b
 8019614:	490f      	ldr	r1, [pc, #60]	; (8019654 <tcp_pbuf_prealloc+0xf0>)
 8019616:	480d      	ldr	r0, [pc, #52]	; (801964c <tcp_pbuf_prealloc+0xe8>)
 8019618:	f004 fd54 	bl	801e0c4 <iprintf>
  *oversize = p->len - length;
 801961c:	693b      	ldr	r3, [r7, #16]
 801961e:	895a      	ldrh	r2, [r3, #10]
 8019620:	89bb      	ldrh	r3, [r7, #12]
 8019622:	1ad3      	subs	r3, r2, r3
 8019624:	b29a      	uxth	r2, r3
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801962a:	693b      	ldr	r3, [r7, #16]
 801962c:	89ba      	ldrh	r2, [r7, #12]
 801962e:	811a      	strh	r2, [r3, #8]
 8019630:	693b      	ldr	r3, [r7, #16]
 8019632:	891a      	ldrh	r2, [r3, #8]
 8019634:	693b      	ldr	r3, [r7, #16]
 8019636:	815a      	strh	r2, [r3, #10]
  return p;
 8019638:	693b      	ldr	r3, [r7, #16]
}
 801963a:	4618      	mov	r0, r3
 801963c:	3718      	adds	r7, #24
 801963e:	46bd      	mov	sp, r7
 8019640:	bd80      	pop	{r7, pc}
 8019642:	bf00      	nop
 8019644:	080209a4 	.word	0x080209a4
 8019648:	08020a5c 	.word	0x08020a5c
 801964c:	080209f8 	.word	0x080209f8
 8019650:	08020a80 	.word	0x08020a80
 8019654:	08020aa0 	.word	0x08020aa0

08019658 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8019658:	b580      	push	{r7, lr}
 801965a:	b082      	sub	sp, #8
 801965c:	af00      	add	r7, sp, #0
 801965e:	6078      	str	r0, [r7, #4]
 8019660:	460b      	mov	r3, r1
 8019662:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	2b00      	cmp	r3, #0
 8019668:	d106      	bne.n	8019678 <tcp_write_checks+0x20>
 801966a:	4b33      	ldr	r3, [pc, #204]	; (8019738 <tcp_write_checks+0xe0>)
 801966c:	f240 1233 	movw	r2, #307	; 0x133
 8019670:	4932      	ldr	r1, [pc, #200]	; (801973c <tcp_write_checks+0xe4>)
 8019672:	4833      	ldr	r0, [pc, #204]	; (8019740 <tcp_write_checks+0xe8>)
 8019674:	f004 fd26 	bl	801e0c4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	7d1b      	ldrb	r3, [r3, #20]
 801967c:	2b04      	cmp	r3, #4
 801967e:	d00e      	beq.n	801969e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8019684:	2b07      	cmp	r3, #7
 8019686:	d00a      	beq.n	801969e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801968c:	2b02      	cmp	r3, #2
 801968e:	d006      	beq.n	801969e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8019694:	2b03      	cmp	r3, #3
 8019696:	d002      	beq.n	801969e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8019698:	f06f 030a 	mvn.w	r3, #10
 801969c:	e048      	b.n	8019730 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801969e:	887b      	ldrh	r3, [r7, #2]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d101      	bne.n	80196a8 <tcp_write_checks+0x50>
    return ERR_OK;
 80196a4:	2300      	movs	r3, #0
 80196a6:	e043      	b.n	8019730 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80196ae:	887a      	ldrh	r2, [r7, #2]
 80196b0:	429a      	cmp	r2, r3
 80196b2:	d909      	bls.n	80196c8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	8b5b      	ldrh	r3, [r3, #26]
 80196b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80196bc:	b29a      	uxth	r2, r3
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80196c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80196c6:	e033      	b.n	8019730 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80196ce:	2b08      	cmp	r3, #8
 80196d0:	d909      	bls.n	80196e6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	8b5b      	ldrh	r3, [r3, #26]
 80196d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80196da:	b29a      	uxth	r2, r3
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80196e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80196e4:	e024      	b.n	8019730 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d00f      	beq.n	8019710 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d11a      	bne.n	801972e <tcp_write_checks+0xd6>
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d116      	bne.n	801972e <tcp_write_checks+0xd6>
 8019700:	4b0d      	ldr	r3, [pc, #52]	; (8019738 <tcp_write_checks+0xe0>)
 8019702:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8019706:	490f      	ldr	r1, [pc, #60]	; (8019744 <tcp_write_checks+0xec>)
 8019708:	480d      	ldr	r0, [pc, #52]	; (8019740 <tcp_write_checks+0xe8>)
 801970a:	f004 fcdb 	bl	801e0c4 <iprintf>
 801970e:	e00e      	b.n	801972e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019714:	2b00      	cmp	r3, #0
 8019716:	d103      	bne.n	8019720 <tcp_write_checks+0xc8>
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801971c:	2b00      	cmp	r3, #0
 801971e:	d006      	beq.n	801972e <tcp_write_checks+0xd6>
 8019720:	4b05      	ldr	r3, [pc, #20]	; (8019738 <tcp_write_checks+0xe0>)
 8019722:	f240 1259 	movw	r2, #345	; 0x159
 8019726:	4908      	ldr	r1, [pc, #32]	; (8019748 <tcp_write_checks+0xf0>)
 8019728:	4805      	ldr	r0, [pc, #20]	; (8019740 <tcp_write_checks+0xe8>)
 801972a:	f004 fccb 	bl	801e0c4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801972e:	2300      	movs	r3, #0
}
 8019730:	4618      	mov	r0, r3
 8019732:	3708      	adds	r7, #8
 8019734:	46bd      	mov	sp, r7
 8019736:	bd80      	pop	{r7, pc}
 8019738:	080209a4 	.word	0x080209a4
 801973c:	08020ab4 	.word	0x08020ab4
 8019740:	080209f8 	.word	0x080209f8
 8019744:	08020ad4 	.word	0x08020ad4
 8019748:	08020b10 	.word	0x08020b10

0801974c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801974c:	b590      	push	{r4, r7, lr}
 801974e:	b09b      	sub	sp, #108	; 0x6c
 8019750:	af04      	add	r7, sp, #16
 8019752:	60f8      	str	r0, [r7, #12]
 8019754:	60b9      	str	r1, [r7, #8]
 8019756:	4611      	mov	r1, r2
 8019758:	461a      	mov	r2, r3
 801975a:	460b      	mov	r3, r1
 801975c:	80fb      	strh	r3, [r7, #6]
 801975e:	4613      	mov	r3, r2
 8019760:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8019762:	2300      	movs	r3, #0
 8019764:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8019766:	2300      	movs	r3, #0
 8019768:	653b      	str	r3, [r7, #80]	; 0x50
 801976a:	2300      	movs	r3, #0
 801976c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801976e:	2300      	movs	r3, #0
 8019770:	64bb      	str	r3, [r7, #72]	; 0x48
 8019772:	2300      	movs	r3, #0
 8019774:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8019776:	2300      	movs	r3, #0
 8019778:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801977c:	2300      	movs	r3, #0
 801977e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8019782:	2300      	movs	r3, #0
 8019784:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8019786:	2300      	movs	r3, #0
 8019788:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801978a:	2300      	movs	r3, #0
 801978c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801978e:	68fb      	ldr	r3, [r7, #12]
 8019790:	2b00      	cmp	r3, #0
 8019792:	d109      	bne.n	80197a8 <tcp_write+0x5c>
 8019794:	4ba5      	ldr	r3, [pc, #660]	; (8019a2c <tcp_write+0x2e0>)
 8019796:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801979a:	49a5      	ldr	r1, [pc, #660]	; (8019a30 <tcp_write+0x2e4>)
 801979c:	48a5      	ldr	r0, [pc, #660]	; (8019a34 <tcp_write+0x2e8>)
 801979e:	f004 fc91 	bl	801e0c4 <iprintf>
 80197a2:	f06f 030f 	mvn.w	r3, #15
 80197a6:	e32c      	b.n	8019e02 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80197a8:	68fb      	ldr	r3, [r7, #12]
 80197aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80197ae:	085b      	lsrs	r3, r3, #1
 80197b0:	b29a      	uxth	r2, r3
 80197b2:	68fb      	ldr	r3, [r7, #12]
 80197b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80197b6:	4293      	cmp	r3, r2
 80197b8:	bf28      	it	cs
 80197ba:	4613      	movcs	r3, r2
 80197bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80197be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d102      	bne.n	80197ca <tcp_write+0x7e>
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80197c8:	e000      	b.n	80197cc <tcp_write+0x80>
 80197ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80197cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80197ce:	68bb      	ldr	r3, [r7, #8]
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d109      	bne.n	80197e8 <tcp_write+0x9c>
 80197d4:	4b95      	ldr	r3, [pc, #596]	; (8019a2c <tcp_write+0x2e0>)
 80197d6:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80197da:	4997      	ldr	r1, [pc, #604]	; (8019a38 <tcp_write+0x2ec>)
 80197dc:	4895      	ldr	r0, [pc, #596]	; (8019a34 <tcp_write+0x2e8>)
 80197de:	f004 fc71 	bl	801e0c4 <iprintf>
 80197e2:	f06f 030f 	mvn.w	r3, #15
 80197e6:	e30c      	b.n	8019e02 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80197e8:	88fb      	ldrh	r3, [r7, #6]
 80197ea:	4619      	mov	r1, r3
 80197ec:	68f8      	ldr	r0, [r7, #12]
 80197ee:	f7ff ff33 	bl	8019658 <tcp_write_checks>
 80197f2:	4603      	mov	r3, r0
 80197f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80197f8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d002      	beq.n	8019806 <tcp_write+0xba>
    return err;
 8019800:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8019804:	e2fd      	b.n	8019e02 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801980c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019810:	2300      	movs	r3, #0
 8019812:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8019816:	68fb      	ldr	r3, [r7, #12]
 8019818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801981a:	2b00      	cmp	r3, #0
 801981c:	f000 80f7 	beq.w	8019a0e <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019820:	68fb      	ldr	r3, [r7, #12]
 8019822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019824:	653b      	str	r3, [r7, #80]	; 0x50
 8019826:	e002      	b.n	801982e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8019828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801982e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	2b00      	cmp	r3, #0
 8019834:	d1f8      	bne.n	8019828 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8019836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019838:	7a9b      	ldrb	r3, [r3, #10]
 801983a:	009b      	lsls	r3, r3, #2
 801983c:	b29b      	uxth	r3, r3
 801983e:	f003 0304 	and.w	r3, r3, #4
 8019842:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8019844:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019848:	891b      	ldrh	r3, [r3, #8]
 801984a:	4619      	mov	r1, r3
 801984c:	8c3b      	ldrh	r3, [r7, #32]
 801984e:	440b      	add	r3, r1
 8019850:	429a      	cmp	r2, r3
 8019852:	da06      	bge.n	8019862 <tcp_write+0x116>
 8019854:	4b75      	ldr	r3, [pc, #468]	; (8019a2c <tcp_write+0x2e0>)
 8019856:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801985a:	4978      	ldr	r1, [pc, #480]	; (8019a3c <tcp_write+0x2f0>)
 801985c:	4875      	ldr	r0, [pc, #468]	; (8019a34 <tcp_write+0x2e8>)
 801985e:	f004 fc31 	bl	801e0c4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8019862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019864:	891a      	ldrh	r2, [r3, #8]
 8019866:	8c3b      	ldrh	r3, [r7, #32]
 8019868:	4413      	add	r3, r2
 801986a:	b29b      	uxth	r3, r3
 801986c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801986e:	1ad3      	subs	r3, r2, r3
 8019870:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8019872:	68fb      	ldr	r3, [r7, #12]
 8019874:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019878:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801987a:	8a7b      	ldrh	r3, [r7, #18]
 801987c:	2b00      	cmp	r3, #0
 801987e:	d027      	beq.n	80198d0 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8019880:	8a7b      	ldrh	r3, [r7, #18]
 8019882:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019884:	429a      	cmp	r2, r3
 8019886:	d206      	bcs.n	8019896 <tcp_write+0x14a>
 8019888:	4b68      	ldr	r3, [pc, #416]	; (8019a2c <tcp_write+0x2e0>)
 801988a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801988e:	496c      	ldr	r1, [pc, #432]	; (8019a40 <tcp_write+0x2f4>)
 8019890:	4868      	ldr	r0, [pc, #416]	; (8019a34 <tcp_write+0x2e8>)
 8019892:	f004 fc17 	bl	801e0c4 <iprintf>
      seg = last_unsent;
 8019896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019898:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801989a:	8a7b      	ldrh	r3, [r7, #18]
 801989c:	88fa      	ldrh	r2, [r7, #6]
 801989e:	429a      	cmp	r2, r3
 80198a0:	d901      	bls.n	80198a6 <tcp_write+0x15a>
 80198a2:	8a7b      	ldrh	r3, [r7, #18]
 80198a4:	e000      	b.n	80198a8 <tcp_write+0x15c>
 80198a6:	88fb      	ldrh	r3, [r7, #6]
 80198a8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80198aa:	4293      	cmp	r3, r2
 80198ac:	bfa8      	it	ge
 80198ae:	4613      	movge	r3, r2
 80198b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80198b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80198b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80198b8:	4413      	add	r3, r2
 80198ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80198be:	8a7a      	ldrh	r2, [r7, #18]
 80198c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80198c2:	1ad3      	subs	r3, r2, r3
 80198c4:	b29b      	uxth	r3, r3
 80198c6:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80198c8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80198ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80198cc:	1ad3      	subs	r3, r2, r3
 80198ce:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80198d0:	8a7b      	ldrh	r3, [r7, #18]
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d00b      	beq.n	80198ee <tcp_write+0x1a2>
 80198d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80198da:	88fb      	ldrh	r3, [r7, #6]
 80198dc:	429a      	cmp	r2, r3
 80198de:	d006      	beq.n	80198ee <tcp_write+0x1a2>
 80198e0:	4b52      	ldr	r3, [pc, #328]	; (8019a2c <tcp_write+0x2e0>)
 80198e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80198e6:	4957      	ldr	r1, [pc, #348]	; (8019a44 <tcp_write+0x2f8>)
 80198e8:	4852      	ldr	r0, [pc, #328]	; (8019a34 <tcp_write+0x2e8>)
 80198ea:	f004 fbeb 	bl	801e0c4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80198ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80198f2:	88fb      	ldrh	r3, [r7, #6]
 80198f4:	429a      	cmp	r2, r3
 80198f6:	f080 8168 	bcs.w	8019bca <tcp_write+0x47e>
 80198fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	f000 8164 	beq.w	8019bca <tcp_write+0x47e>
 8019902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019904:	891b      	ldrh	r3, [r3, #8]
 8019906:	2b00      	cmp	r3, #0
 8019908:	f000 815f 	beq.w	8019bca <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801990c:	88fa      	ldrh	r2, [r7, #6]
 801990e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019912:	1ad2      	subs	r2, r2, r3
 8019914:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019916:	4293      	cmp	r3, r2
 8019918:	bfa8      	it	ge
 801991a:	4613      	movge	r3, r2
 801991c:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801991e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019920:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019922:	797b      	ldrb	r3, [r7, #5]
 8019924:	f003 0301 	and.w	r3, r3, #1
 8019928:	2b00      	cmp	r3, #0
 801992a:	d027      	beq.n	801997c <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801992c:	f107 0012 	add.w	r0, r7, #18
 8019930:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019932:	8bf9      	ldrh	r1, [r7, #30]
 8019934:	2301      	movs	r3, #1
 8019936:	9302      	str	r3, [sp, #8]
 8019938:	797b      	ldrb	r3, [r7, #5]
 801993a:	9301      	str	r3, [sp, #4]
 801993c:	68fb      	ldr	r3, [r7, #12]
 801993e:	9300      	str	r3, [sp, #0]
 8019940:	4603      	mov	r3, r0
 8019942:	2000      	movs	r0, #0
 8019944:	f7ff fe0e 	bl	8019564 <tcp_pbuf_prealloc>
 8019948:	6578      	str	r0, [r7, #84]	; 0x54
 801994a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801994c:	2b00      	cmp	r3, #0
 801994e:	f000 8226 	beq.w	8019d9e <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8019952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019954:	6858      	ldr	r0, [r3, #4]
 8019956:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801995a:	68ba      	ldr	r2, [r7, #8]
 801995c:	4413      	add	r3, r2
 801995e:	8bfa      	ldrh	r2, [r7, #30]
 8019960:	4619      	mov	r1, r3
 8019962:	f004 fb9c 	bl	801e09e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8019966:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019968:	f7fb f9f4 	bl	8014d54 <pbuf_clen>
 801996c:	4603      	mov	r3, r0
 801996e:	461a      	mov	r2, r3
 8019970:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019974:	4413      	add	r3, r2
 8019976:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801997a:	e041      	b.n	8019a00 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801997c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801997e:	685b      	ldr	r3, [r3, #4]
 8019980:	637b      	str	r3, [r7, #52]	; 0x34
 8019982:	e002      	b.n	801998a <tcp_write+0x23e>
 8019984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	637b      	str	r3, [r7, #52]	; 0x34
 801998a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	2b00      	cmp	r3, #0
 8019990:	d1f8      	bne.n	8019984 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019994:	7b1b      	ldrb	r3, [r3, #12]
 8019996:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801999a:	2b00      	cmp	r3, #0
 801999c:	d115      	bne.n	80199ca <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801999e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199a0:	685b      	ldr	r3, [r3, #4]
 80199a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80199a4:	8952      	ldrh	r2, [r2, #10]
 80199a6:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80199a8:	68ba      	ldr	r2, [r7, #8]
 80199aa:	429a      	cmp	r2, r3
 80199ac:	d10d      	bne.n	80199ca <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80199ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d006      	beq.n	80199c4 <tcp_write+0x278>
 80199b6:	4b1d      	ldr	r3, [pc, #116]	; (8019a2c <tcp_write+0x2e0>)
 80199b8:	f240 2231 	movw	r2, #561	; 0x231
 80199bc:	4922      	ldr	r1, [pc, #136]	; (8019a48 <tcp_write+0x2fc>)
 80199be:	481d      	ldr	r0, [pc, #116]	; (8019a34 <tcp_write+0x2e8>)
 80199c0:	f004 fb80 	bl	801e0c4 <iprintf>
          extendlen = seglen;
 80199c4:	8bfb      	ldrh	r3, [r7, #30]
 80199c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80199c8:	e01a      	b.n	8019a00 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80199ca:	8bfb      	ldrh	r3, [r7, #30]
 80199cc:	2201      	movs	r2, #1
 80199ce:	4619      	mov	r1, r3
 80199d0:	2000      	movs	r0, #0
 80199d2:	f7fa fe51 	bl	8014678 <pbuf_alloc>
 80199d6:	6578      	str	r0, [r7, #84]	; 0x54
 80199d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80199da:	2b00      	cmp	r3, #0
 80199dc:	f000 81e1 	beq.w	8019da2 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80199e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80199e4:	68ba      	ldr	r2, [r7, #8]
 80199e6:	441a      	add	r2, r3
 80199e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80199ea:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80199ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80199ee:	f7fb f9b1 	bl	8014d54 <pbuf_clen>
 80199f2:	4603      	mov	r3, r0
 80199f4:	461a      	mov	r2, r3
 80199f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80199fa:	4413      	add	r3, r2
 80199fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8019a00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019a04:	8bfb      	ldrh	r3, [r7, #30]
 8019a06:	4413      	add	r3, r2
 8019a08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8019a0c:	e0dd      	b.n	8019bca <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	f000 80d8 	beq.w	8019bca <tcp_write+0x47e>
 8019a1a:	4b04      	ldr	r3, [pc, #16]	; (8019a2c <tcp_write+0x2e0>)
 8019a1c:	f240 224b 	movw	r2, #587	; 0x24b
 8019a20:	490a      	ldr	r1, [pc, #40]	; (8019a4c <tcp_write+0x300>)
 8019a22:	4804      	ldr	r0, [pc, #16]	; (8019a34 <tcp_write+0x2e8>)
 8019a24:	f004 fb4e 	bl	801e0c4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8019a28:	e0cf      	b.n	8019bca <tcp_write+0x47e>
 8019a2a:	bf00      	nop
 8019a2c:	080209a4 	.word	0x080209a4
 8019a30:	08020b44 	.word	0x08020b44
 8019a34:	080209f8 	.word	0x080209f8
 8019a38:	08020b5c 	.word	0x08020b5c
 8019a3c:	08020b90 	.word	0x08020b90
 8019a40:	08020ba8 	.word	0x08020ba8
 8019a44:	08020bc8 	.word	0x08020bc8
 8019a48:	08020be8 	.word	0x08020be8
 8019a4c:	08020c14 	.word	0x08020c14
    struct pbuf *p;
    u16_t left = len - pos;
 8019a50:	88fa      	ldrh	r2, [r7, #6]
 8019a52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019a56:	1ad3      	subs	r3, r2, r3
 8019a58:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8019a5a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019a5e:	b29b      	uxth	r3, r3
 8019a60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019a62:	1ad3      	subs	r3, r2, r3
 8019a64:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8019a66:	8b7a      	ldrh	r2, [r7, #26]
 8019a68:	8bbb      	ldrh	r3, [r7, #28]
 8019a6a:	4293      	cmp	r3, r2
 8019a6c:	bf28      	it	cs
 8019a6e:	4613      	movcs	r3, r2
 8019a70:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019a72:	797b      	ldrb	r3, [r7, #5]
 8019a74:	f003 0301 	and.w	r3, r3, #1
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d036      	beq.n	8019aea <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019a7c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019a80:	b29a      	uxth	r2, r3
 8019a82:	8b3b      	ldrh	r3, [r7, #24]
 8019a84:	4413      	add	r3, r2
 8019a86:	b299      	uxth	r1, r3
 8019a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	bf0c      	ite	eq
 8019a8e:	2301      	moveq	r3, #1
 8019a90:	2300      	movne	r3, #0
 8019a92:	b2db      	uxtb	r3, r3
 8019a94:	f107 0012 	add.w	r0, r7, #18
 8019a98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019a9a:	9302      	str	r3, [sp, #8]
 8019a9c:	797b      	ldrb	r3, [r7, #5]
 8019a9e:	9301      	str	r3, [sp, #4]
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	9300      	str	r3, [sp, #0]
 8019aa4:	4603      	mov	r3, r0
 8019aa6:	2036      	movs	r0, #54	; 0x36
 8019aa8:	f7ff fd5c 	bl	8019564 <tcp_pbuf_prealloc>
 8019aac:	6338      	str	r0, [r7, #48]	; 0x30
 8019aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	f000 8178 	beq.w	8019da6 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8019ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ab8:	895b      	ldrh	r3, [r3, #10]
 8019aba:	8b3a      	ldrh	r2, [r7, #24]
 8019abc:	429a      	cmp	r2, r3
 8019abe:	d906      	bls.n	8019ace <tcp_write+0x382>
 8019ac0:	4b8c      	ldr	r3, [pc, #560]	; (8019cf4 <tcp_write+0x5a8>)
 8019ac2:	f240 2267 	movw	r2, #615	; 0x267
 8019ac6:	498c      	ldr	r1, [pc, #560]	; (8019cf8 <tcp_write+0x5ac>)
 8019ac8:	488c      	ldr	r0, [pc, #560]	; (8019cfc <tcp_write+0x5b0>)
 8019aca:	f004 fafb 	bl	801e0c4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8019ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ad0:	685a      	ldr	r2, [r3, #4]
 8019ad2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019ad6:	18d0      	adds	r0, r2, r3
 8019ad8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019adc:	68ba      	ldr	r2, [r7, #8]
 8019ade:	4413      	add	r3, r2
 8019ae0:	8b3a      	ldrh	r2, [r7, #24]
 8019ae2:	4619      	mov	r1, r3
 8019ae4:	f004 fadb 	bl	801e09e <memcpy>
 8019ae8:	e02f      	b.n	8019b4a <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8019aea:	8a7b      	ldrh	r3, [r7, #18]
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d006      	beq.n	8019afe <tcp_write+0x3b2>
 8019af0:	4b80      	ldr	r3, [pc, #512]	; (8019cf4 <tcp_write+0x5a8>)
 8019af2:	f240 2271 	movw	r2, #625	; 0x271
 8019af6:	4982      	ldr	r1, [pc, #520]	; (8019d00 <tcp_write+0x5b4>)
 8019af8:	4880      	ldr	r0, [pc, #512]	; (8019cfc <tcp_write+0x5b0>)
 8019afa:	f004 fae3 	bl	801e0c4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8019afe:	8b3b      	ldrh	r3, [r7, #24]
 8019b00:	2201      	movs	r2, #1
 8019b02:	4619      	mov	r1, r3
 8019b04:	2036      	movs	r0, #54	; 0x36
 8019b06:	f7fa fdb7 	bl	8014678 <pbuf_alloc>
 8019b0a:	6178      	str	r0, [r7, #20]
 8019b0c:	697b      	ldr	r3, [r7, #20]
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	f000 814b 	beq.w	8019daa <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8019b14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019b18:	68ba      	ldr	r2, [r7, #8]
 8019b1a:	441a      	add	r2, r3
 8019b1c:	697b      	ldr	r3, [r7, #20]
 8019b1e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019b20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019b24:	b29b      	uxth	r3, r3
 8019b26:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019b2a:	4619      	mov	r1, r3
 8019b2c:	2036      	movs	r0, #54	; 0x36
 8019b2e:	f7fa fda3 	bl	8014678 <pbuf_alloc>
 8019b32:	6338      	str	r0, [r7, #48]	; 0x30
 8019b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d103      	bne.n	8019b42 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8019b3a:	6978      	ldr	r0, [r7, #20]
 8019b3c:	f7fb f87c 	bl	8014c38 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8019b40:	e136      	b.n	8019db0 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8019b42:	6979      	ldr	r1, [r7, #20]
 8019b44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019b46:	f7fb f945 	bl	8014dd4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8019b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019b4c:	f7fb f902 	bl	8014d54 <pbuf_clen>
 8019b50:	4603      	mov	r3, r0
 8019b52:	461a      	mov	r2, r3
 8019b54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019b58:	4413      	add	r3, r2
 8019b5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8019b5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019b62:	2b09      	cmp	r3, #9
 8019b64:	d903      	bls.n	8019b6e <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8019b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019b68:	f7fb f866 	bl	8014c38 <pbuf_free>
      goto memerr;
 8019b6c:	e120      	b.n	8019db0 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8019b6e:	68fb      	ldr	r3, [r7, #12]
 8019b70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019b72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019b76:	441a      	add	r2, r3
 8019b78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b7c:	9300      	str	r3, [sp, #0]
 8019b7e:	4613      	mov	r3, r2
 8019b80:	2200      	movs	r2, #0
 8019b82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019b84:	68f8      	ldr	r0, [r7, #12]
 8019b86:	f7ff fc4f 	bl	8019428 <tcp_create_segment>
 8019b8a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	f000 810d 	beq.w	8019dae <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8019b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d102      	bne.n	8019ba0 <tcp_write+0x454>
      queue = seg;
 8019b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019b9c:	647b      	str	r3, [r7, #68]	; 0x44
 8019b9e:	e00c      	b.n	8019bba <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8019ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d106      	bne.n	8019bb4 <tcp_write+0x468>
 8019ba6:	4b53      	ldr	r3, [pc, #332]	; (8019cf4 <tcp_write+0x5a8>)
 8019ba8:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019bac:	4955      	ldr	r1, [pc, #340]	; (8019d04 <tcp_write+0x5b8>)
 8019bae:	4853      	ldr	r0, [pc, #332]	; (8019cfc <tcp_write+0x5b0>)
 8019bb0:	f004 fa88 	bl	801e0c4 <iprintf>
      prev_seg->next = seg;
 8019bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019bb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019bb8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8019bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019bbc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8019bbe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019bc2:	8b3b      	ldrh	r3, [r7, #24]
 8019bc4:	4413      	add	r3, r2
 8019bc6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8019bca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019bce:	88fb      	ldrh	r3, [r7, #6]
 8019bd0:	429a      	cmp	r2, r3
 8019bd2:	f4ff af3d 	bcc.w	8019a50 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8019bd6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d02c      	beq.n	8019c36 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8019bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019bde:	685b      	ldr	r3, [r3, #4]
 8019be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019be2:	e01e      	b.n	8019c22 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8019be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019be6:	891a      	ldrh	r2, [r3, #8]
 8019be8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019bea:	4413      	add	r3, r2
 8019bec:	b29a      	uxth	r2, r3
 8019bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bf0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8019bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bf4:	681b      	ldr	r3, [r3, #0]
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d110      	bne.n	8019c1c <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8019bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bfc:	685b      	ldr	r3, [r3, #4]
 8019bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019c00:	8952      	ldrh	r2, [r2, #10]
 8019c02:	4413      	add	r3, r2
 8019c04:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019c06:	68b9      	ldr	r1, [r7, #8]
 8019c08:	4618      	mov	r0, r3
 8019c0a:	f004 fa48 	bl	801e09e <memcpy>
        p->len += oversize_used;
 8019c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c10:	895a      	ldrh	r2, [r3, #10]
 8019c12:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019c14:	4413      	add	r3, r2
 8019c16:	b29a      	uxth	r2, r3
 8019c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c1a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8019c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d1dd      	bne.n	8019be4 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8019c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c2a:	891a      	ldrh	r2, [r3, #8]
 8019c2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019c2e:	4413      	add	r3, r2
 8019c30:	b29a      	uxth	r2, r3
 8019c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c34:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8019c36:	8a7a      	ldrh	r2, [r7, #18]
 8019c38:	68fb      	ldr	r3, [r7, #12]
 8019c3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8019c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019c40:	2b00      	cmp	r3, #0
 8019c42:	d018      	beq.n	8019c76 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8019c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	d106      	bne.n	8019c58 <tcp_write+0x50c>
 8019c4a:	4b2a      	ldr	r3, [pc, #168]	; (8019cf4 <tcp_write+0x5a8>)
 8019c4c:	f240 22e1 	movw	r2, #737	; 0x2e1
 8019c50:	492d      	ldr	r1, [pc, #180]	; (8019d08 <tcp_write+0x5bc>)
 8019c52:	482a      	ldr	r0, [pc, #168]	; (8019cfc <tcp_write+0x5b0>)
 8019c54:	f004 fa36 	bl	801e0c4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8019c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c5a:	685b      	ldr	r3, [r3, #4]
 8019c5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8019c5e:	4618      	mov	r0, r3
 8019c60:	f7fb f8b8 	bl	8014dd4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8019c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c66:	891a      	ldrh	r2, [r3, #8]
 8019c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019c6a:	891b      	ldrh	r3, [r3, #8]
 8019c6c:	4413      	add	r3, r2
 8019c6e:	b29a      	uxth	r2, r3
 8019c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c72:	811a      	strh	r2, [r3, #8]
 8019c74:	e037      	b.n	8019ce6 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8019c76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d034      	beq.n	8019ce6 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8019c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c7e:	2b00      	cmp	r3, #0
 8019c80:	d003      	beq.n	8019c8a <tcp_write+0x53e>
 8019c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c84:	685b      	ldr	r3, [r3, #4]
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d106      	bne.n	8019c98 <tcp_write+0x54c>
 8019c8a:	4b1a      	ldr	r3, [pc, #104]	; (8019cf4 <tcp_write+0x5a8>)
 8019c8c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8019c90:	491e      	ldr	r1, [pc, #120]	; (8019d0c <tcp_write+0x5c0>)
 8019c92:	481a      	ldr	r0, [pc, #104]	; (8019cfc <tcp_write+0x5b0>)
 8019c94:	f004 fa16 	bl	801e0c4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c9a:	685b      	ldr	r3, [r3, #4]
 8019c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8019c9e:	e009      	b.n	8019cb4 <tcp_write+0x568>
      p->tot_len += extendlen;
 8019ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ca2:	891a      	ldrh	r2, [r3, #8]
 8019ca4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019ca6:	4413      	add	r3, r2
 8019ca8:	b29a      	uxth	r2, r3
 8019caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cac:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8019cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d1f1      	bne.n	8019ca0 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8019cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cbe:	891a      	ldrh	r2, [r3, #8]
 8019cc0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019cc2:	4413      	add	r3, r2
 8019cc4:	b29a      	uxth	r2, r3
 8019cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cc8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8019cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ccc:	895a      	ldrh	r2, [r3, #10]
 8019cce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019cd0:	4413      	add	r3, r2
 8019cd2:	b29a      	uxth	r2, r3
 8019cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cd6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8019cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019cda:	891a      	ldrh	r2, [r3, #8]
 8019cdc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019cde:	4413      	add	r3, r2
 8019ce0:	b29a      	uxth	r2, r3
 8019ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019ce4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8019ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d111      	bne.n	8019d10 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019cf0:	66da      	str	r2, [r3, #108]	; 0x6c
 8019cf2:	e010      	b.n	8019d16 <tcp_write+0x5ca>
 8019cf4:	080209a4 	.word	0x080209a4
 8019cf8:	08020c44 	.word	0x08020c44
 8019cfc:	080209f8 	.word	0x080209f8
 8019d00:	08020c84 	.word	0x08020c84
 8019d04:	08020c94 	.word	0x08020c94
 8019d08:	08020ca8 	.word	0x08020ca8
 8019d0c:	08020ce0 	.word	0x08020ce0
  } else {
    last_unsent->next = queue;
 8019d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019d12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019d14:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019d1a:	88fb      	ldrh	r3, [r7, #6]
 8019d1c:	441a      	add	r2, r3
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8019d22:	68fb      	ldr	r3, [r7, #12]
 8019d24:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8019d28:	88fb      	ldrh	r3, [r7, #6]
 8019d2a:	1ad3      	subs	r3, r2, r3
 8019d2c:	b29a      	uxth	r2, r3
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8019d3a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d00e      	beq.n	8019d66 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8019d48:	68fb      	ldr	r3, [r7, #12]
 8019d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d10a      	bne.n	8019d66 <tcp_write+0x61a>
 8019d50:	68fb      	ldr	r3, [r7, #12]
 8019d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d106      	bne.n	8019d66 <tcp_write+0x61a>
 8019d58:	4b2c      	ldr	r3, [pc, #176]	; (8019e0c <tcp_write+0x6c0>)
 8019d5a:	f240 3213 	movw	r2, #787	; 0x313
 8019d5e:	492c      	ldr	r1, [pc, #176]	; (8019e10 <tcp_write+0x6c4>)
 8019d60:	482c      	ldr	r0, [pc, #176]	; (8019e14 <tcp_write+0x6c8>)
 8019d62:	f004 f9af 	bl	801e0c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8019d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d016      	beq.n	8019d9a <tcp_write+0x64e>
 8019d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019d6e:	68db      	ldr	r3, [r3, #12]
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d012      	beq.n	8019d9a <tcp_write+0x64e>
 8019d74:	797b      	ldrb	r3, [r7, #5]
 8019d76:	f003 0302 	and.w	r3, r3, #2
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d10d      	bne.n	8019d9a <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8019d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019d80:	68db      	ldr	r3, [r3, #12]
 8019d82:	899b      	ldrh	r3, [r3, #12]
 8019d84:	b29c      	uxth	r4, r3
 8019d86:	2008      	movs	r0, #8
 8019d88:	f7f9 fb78 	bl	801347c <lwip_htons>
 8019d8c:	4603      	mov	r3, r0
 8019d8e:	461a      	mov	r2, r3
 8019d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019d92:	68db      	ldr	r3, [r3, #12]
 8019d94:	4322      	orrs	r2, r4
 8019d96:	b292      	uxth	r2, r2
 8019d98:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8019d9a:	2300      	movs	r3, #0
 8019d9c:	e031      	b.n	8019e02 <tcp_write+0x6b6>
          goto memerr;
 8019d9e:	bf00      	nop
 8019da0:	e006      	b.n	8019db0 <tcp_write+0x664>
            goto memerr;
 8019da2:	bf00      	nop
 8019da4:	e004      	b.n	8019db0 <tcp_write+0x664>
        goto memerr;
 8019da6:	bf00      	nop
 8019da8:	e002      	b.n	8019db0 <tcp_write+0x664>
        goto memerr;
 8019daa:	bf00      	nop
 8019dac:	e000      	b.n	8019db0 <tcp_write+0x664>
      goto memerr;
 8019dae:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	8b5b      	ldrh	r3, [r3, #26]
 8019db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019db8:	b29a      	uxth	r2, r3
 8019dba:	68fb      	ldr	r3, [r7, #12]
 8019dbc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8019dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d002      	beq.n	8019dca <tcp_write+0x67e>
    pbuf_free(concat_p);
 8019dc4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019dc6:	f7fa ff37 	bl	8014c38 <pbuf_free>
  }
  if (queue != NULL) {
 8019dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	d002      	beq.n	8019dd6 <tcp_write+0x68a>
    tcp_segs_free(queue);
 8019dd0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8019dd2:	f7fc fb4b 	bl	801646c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d00e      	beq.n	8019dfe <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8019de0:	68fb      	ldr	r3, [r7, #12]
 8019de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d10a      	bne.n	8019dfe <tcp_write+0x6b2>
 8019de8:	68fb      	ldr	r3, [r7, #12]
 8019dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	d106      	bne.n	8019dfe <tcp_write+0x6b2>
 8019df0:	4b06      	ldr	r3, [pc, #24]	; (8019e0c <tcp_write+0x6c0>)
 8019df2:	f44f 724a 	mov.w	r2, #808	; 0x328
 8019df6:	4906      	ldr	r1, [pc, #24]	; (8019e10 <tcp_write+0x6c4>)
 8019df8:	4806      	ldr	r0, [pc, #24]	; (8019e14 <tcp_write+0x6c8>)
 8019dfa:	f004 f963 	bl	801e0c4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8019dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8019e02:	4618      	mov	r0, r3
 8019e04:	375c      	adds	r7, #92	; 0x5c
 8019e06:	46bd      	mov	sp, r7
 8019e08:	bd90      	pop	{r4, r7, pc}
 8019e0a:	bf00      	nop
 8019e0c:	080209a4 	.word	0x080209a4
 8019e10:	08020d18 	.word	0x08020d18
 8019e14:	080209f8 	.word	0x080209f8

08019e18 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8019e18:	b590      	push	{r4, r7, lr}
 8019e1a:	b08b      	sub	sp, #44	; 0x2c
 8019e1c:	af02      	add	r7, sp, #8
 8019e1e:	6078      	str	r0, [r7, #4]
 8019e20:	460b      	mov	r3, r1
 8019e22:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8019e24:	2300      	movs	r3, #0
 8019e26:	61fb      	str	r3, [r7, #28]
 8019e28:	2300      	movs	r3, #0
 8019e2a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8019e2c:	2300      	movs	r3, #0
 8019e2e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d106      	bne.n	8019e44 <tcp_split_unsent_seg+0x2c>
 8019e36:	4b95      	ldr	r3, [pc, #596]	; (801a08c <tcp_split_unsent_seg+0x274>)
 8019e38:	f240 324b 	movw	r2, #843	; 0x34b
 8019e3c:	4994      	ldr	r1, [pc, #592]	; (801a090 <tcp_split_unsent_seg+0x278>)
 8019e3e:	4895      	ldr	r0, [pc, #596]	; (801a094 <tcp_split_unsent_seg+0x27c>)
 8019e40:	f004 f940 	bl	801e0c4 <iprintf>

  useg = pcb->unsent;
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019e48:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8019e4a:	697b      	ldr	r3, [r7, #20]
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d102      	bne.n	8019e56 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8019e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019e54:	e116      	b.n	801a084 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8019e56:	887b      	ldrh	r3, [r7, #2]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d109      	bne.n	8019e70 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8019e5c:	4b8b      	ldr	r3, [pc, #556]	; (801a08c <tcp_split_unsent_seg+0x274>)
 8019e5e:	f240 3253 	movw	r2, #851	; 0x353
 8019e62:	498d      	ldr	r1, [pc, #564]	; (801a098 <tcp_split_unsent_seg+0x280>)
 8019e64:	488b      	ldr	r0, [pc, #556]	; (801a094 <tcp_split_unsent_seg+0x27c>)
 8019e66:	f004 f92d 	bl	801e0c4 <iprintf>
    return ERR_VAL;
 8019e6a:	f06f 0305 	mvn.w	r3, #5
 8019e6e:	e109      	b.n	801a084 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8019e70:	697b      	ldr	r3, [r7, #20]
 8019e72:	891b      	ldrh	r3, [r3, #8]
 8019e74:	887a      	ldrh	r2, [r7, #2]
 8019e76:	429a      	cmp	r2, r3
 8019e78:	d301      	bcc.n	8019e7e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8019e7a:	2300      	movs	r3, #0
 8019e7c:	e102      	b.n	801a084 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019e82:	887a      	ldrh	r2, [r7, #2]
 8019e84:	429a      	cmp	r2, r3
 8019e86:	d906      	bls.n	8019e96 <tcp_split_unsent_seg+0x7e>
 8019e88:	4b80      	ldr	r3, [pc, #512]	; (801a08c <tcp_split_unsent_seg+0x274>)
 8019e8a:	f240 325b 	movw	r2, #859	; 0x35b
 8019e8e:	4983      	ldr	r1, [pc, #524]	; (801a09c <tcp_split_unsent_seg+0x284>)
 8019e90:	4880      	ldr	r0, [pc, #512]	; (801a094 <tcp_split_unsent_seg+0x27c>)
 8019e92:	f004 f917 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8019e96:	697b      	ldr	r3, [r7, #20]
 8019e98:	891b      	ldrh	r3, [r3, #8]
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d106      	bne.n	8019eac <tcp_split_unsent_seg+0x94>
 8019e9e:	4b7b      	ldr	r3, [pc, #492]	; (801a08c <tcp_split_unsent_seg+0x274>)
 8019ea0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8019ea4:	497e      	ldr	r1, [pc, #504]	; (801a0a0 <tcp_split_unsent_seg+0x288>)
 8019ea6:	487b      	ldr	r0, [pc, #492]	; (801a094 <tcp_split_unsent_seg+0x27c>)
 8019ea8:	f004 f90c 	bl	801e0c4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8019eac:	697b      	ldr	r3, [r7, #20]
 8019eae:	7a9b      	ldrb	r3, [r3, #10]
 8019eb0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8019eb2:	7bfb      	ldrb	r3, [r7, #15]
 8019eb4:	009b      	lsls	r3, r3, #2
 8019eb6:	b2db      	uxtb	r3, r3
 8019eb8:	f003 0304 	and.w	r3, r3, #4
 8019ebc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8019ebe:	697b      	ldr	r3, [r7, #20]
 8019ec0:	891a      	ldrh	r2, [r3, #8]
 8019ec2:	887b      	ldrh	r3, [r7, #2]
 8019ec4:	1ad3      	subs	r3, r2, r3
 8019ec6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8019ec8:	7bbb      	ldrb	r3, [r7, #14]
 8019eca:	b29a      	uxth	r2, r3
 8019ecc:	89bb      	ldrh	r3, [r7, #12]
 8019ece:	4413      	add	r3, r2
 8019ed0:	b29b      	uxth	r3, r3
 8019ed2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019ed6:	4619      	mov	r1, r3
 8019ed8:	2036      	movs	r0, #54	; 0x36
 8019eda:	f7fa fbcd 	bl	8014678 <pbuf_alloc>
 8019ede:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019ee0:	693b      	ldr	r3, [r7, #16]
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	f000 80b7 	beq.w	801a056 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8019ee8:	697b      	ldr	r3, [r7, #20]
 8019eea:	685b      	ldr	r3, [r3, #4]
 8019eec:	891a      	ldrh	r2, [r3, #8]
 8019eee:	697b      	ldr	r3, [r7, #20]
 8019ef0:	891b      	ldrh	r3, [r3, #8]
 8019ef2:	1ad3      	subs	r3, r2, r3
 8019ef4:	b29a      	uxth	r2, r3
 8019ef6:	887b      	ldrh	r3, [r7, #2]
 8019ef8:	4413      	add	r3, r2
 8019efa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8019efc:	697b      	ldr	r3, [r7, #20]
 8019efe:	6858      	ldr	r0, [r3, #4]
 8019f00:	693b      	ldr	r3, [r7, #16]
 8019f02:	685a      	ldr	r2, [r3, #4]
 8019f04:	7bbb      	ldrb	r3, [r7, #14]
 8019f06:	18d1      	adds	r1, r2, r3
 8019f08:	897b      	ldrh	r3, [r7, #10]
 8019f0a:	89ba      	ldrh	r2, [r7, #12]
 8019f0c:	f7fb f88a 	bl	8015024 <pbuf_copy_partial>
 8019f10:	4603      	mov	r3, r0
 8019f12:	461a      	mov	r2, r3
 8019f14:	89bb      	ldrh	r3, [r7, #12]
 8019f16:	4293      	cmp	r3, r2
 8019f18:	f040 809f 	bne.w	801a05a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8019f1c:	697b      	ldr	r3, [r7, #20]
 8019f1e:	68db      	ldr	r3, [r3, #12]
 8019f20:	899b      	ldrh	r3, [r3, #12]
 8019f22:	b29b      	uxth	r3, r3
 8019f24:	4618      	mov	r0, r3
 8019f26:	f7f9 faa9 	bl	801347c <lwip_htons>
 8019f2a:	4603      	mov	r3, r0
 8019f2c:	b2db      	uxtb	r3, r3
 8019f2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019f32:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8019f34:	2300      	movs	r3, #0
 8019f36:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8019f38:	7efb      	ldrb	r3, [r7, #27]
 8019f3a:	f003 0308 	and.w	r3, r3, #8
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d007      	beq.n	8019f52 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8019f42:	7efb      	ldrb	r3, [r7, #27]
 8019f44:	f023 0308 	bic.w	r3, r3, #8
 8019f48:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8019f4a:	7ebb      	ldrb	r3, [r7, #26]
 8019f4c:	f043 0308 	orr.w	r3, r3, #8
 8019f50:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8019f52:	7efb      	ldrb	r3, [r7, #27]
 8019f54:	f003 0301 	and.w	r3, r3, #1
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d007      	beq.n	8019f6c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8019f5c:	7efb      	ldrb	r3, [r7, #27]
 8019f5e:	f023 0301 	bic.w	r3, r3, #1
 8019f62:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8019f64:	7ebb      	ldrb	r3, [r7, #26]
 8019f66:	f043 0301 	orr.w	r3, r3, #1
 8019f6a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8019f6c:	697b      	ldr	r3, [r7, #20]
 8019f6e:	68db      	ldr	r3, [r3, #12]
 8019f70:	685b      	ldr	r3, [r3, #4]
 8019f72:	4618      	mov	r0, r3
 8019f74:	f7f9 fa97 	bl	80134a6 <lwip_htonl>
 8019f78:	4602      	mov	r2, r0
 8019f7a:	887b      	ldrh	r3, [r7, #2]
 8019f7c:	18d1      	adds	r1, r2, r3
 8019f7e:	7eba      	ldrb	r2, [r7, #26]
 8019f80:	7bfb      	ldrb	r3, [r7, #15]
 8019f82:	9300      	str	r3, [sp, #0]
 8019f84:	460b      	mov	r3, r1
 8019f86:	6939      	ldr	r1, [r7, #16]
 8019f88:	6878      	ldr	r0, [r7, #4]
 8019f8a:	f7ff fa4d 	bl	8019428 <tcp_create_segment>
 8019f8e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8019f90:	69fb      	ldr	r3, [r7, #28]
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d063      	beq.n	801a05e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8019f96:	697b      	ldr	r3, [r7, #20]
 8019f98:	685b      	ldr	r3, [r3, #4]
 8019f9a:	4618      	mov	r0, r3
 8019f9c:	f7fa feda 	bl	8014d54 <pbuf_clen>
 8019fa0:	4603      	mov	r3, r0
 8019fa2:	461a      	mov	r2, r3
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019faa:	1a9b      	subs	r3, r3, r2
 8019fac:	b29a      	uxth	r2, r3
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8019fb4:	697b      	ldr	r3, [r7, #20]
 8019fb6:	6858      	ldr	r0, [r3, #4]
 8019fb8:	697b      	ldr	r3, [r7, #20]
 8019fba:	685b      	ldr	r3, [r3, #4]
 8019fbc:	891a      	ldrh	r2, [r3, #8]
 8019fbe:	89bb      	ldrh	r3, [r7, #12]
 8019fc0:	1ad3      	subs	r3, r2, r3
 8019fc2:	b29b      	uxth	r3, r3
 8019fc4:	4619      	mov	r1, r3
 8019fc6:	f7fa fcb1 	bl	801492c <pbuf_realloc>
  useg->len -= remainder;
 8019fca:	697b      	ldr	r3, [r7, #20]
 8019fcc:	891a      	ldrh	r2, [r3, #8]
 8019fce:	89bb      	ldrh	r3, [r7, #12]
 8019fd0:	1ad3      	subs	r3, r2, r3
 8019fd2:	b29a      	uxth	r2, r3
 8019fd4:	697b      	ldr	r3, [r7, #20]
 8019fd6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8019fd8:	697b      	ldr	r3, [r7, #20]
 8019fda:	68db      	ldr	r3, [r3, #12]
 8019fdc:	899b      	ldrh	r3, [r3, #12]
 8019fde:	b29c      	uxth	r4, r3
 8019fe0:	7efb      	ldrb	r3, [r7, #27]
 8019fe2:	b29b      	uxth	r3, r3
 8019fe4:	4618      	mov	r0, r3
 8019fe6:	f7f9 fa49 	bl	801347c <lwip_htons>
 8019fea:	4603      	mov	r3, r0
 8019fec:	461a      	mov	r2, r3
 8019fee:	697b      	ldr	r3, [r7, #20]
 8019ff0:	68db      	ldr	r3, [r3, #12]
 8019ff2:	4322      	orrs	r2, r4
 8019ff4:	b292      	uxth	r2, r2
 8019ff6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8019ff8:	697b      	ldr	r3, [r7, #20]
 8019ffa:	685b      	ldr	r3, [r3, #4]
 8019ffc:	4618      	mov	r0, r3
 8019ffe:	f7fa fea9 	bl	8014d54 <pbuf_clen>
 801a002:	4603      	mov	r3, r0
 801a004:	461a      	mov	r2, r3
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a00c:	4413      	add	r3, r2
 801a00e:	b29a      	uxth	r2, r3
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a016:	69fb      	ldr	r3, [r7, #28]
 801a018:	685b      	ldr	r3, [r3, #4]
 801a01a:	4618      	mov	r0, r3
 801a01c:	f7fa fe9a 	bl	8014d54 <pbuf_clen>
 801a020:	4603      	mov	r3, r0
 801a022:	461a      	mov	r2, r3
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a02a:	4413      	add	r3, r2
 801a02c:	b29a      	uxth	r2, r3
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801a034:	697b      	ldr	r3, [r7, #20]
 801a036:	681a      	ldr	r2, [r3, #0]
 801a038:	69fb      	ldr	r3, [r7, #28]
 801a03a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801a03c:	697b      	ldr	r3, [r7, #20]
 801a03e:	69fa      	ldr	r2, [r7, #28]
 801a040:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801a042:	69fb      	ldr	r3, [r7, #28]
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	2b00      	cmp	r3, #0
 801a048:	d103      	bne.n	801a052 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	2200      	movs	r2, #0
 801a04e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801a052:	2300      	movs	r3, #0
 801a054:	e016      	b.n	801a084 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801a056:	bf00      	nop
 801a058:	e002      	b.n	801a060 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a05a:	bf00      	nop
 801a05c:	e000      	b.n	801a060 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a05e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801a060:	69fb      	ldr	r3, [r7, #28]
 801a062:	2b00      	cmp	r3, #0
 801a064:	d006      	beq.n	801a074 <tcp_split_unsent_seg+0x25c>
 801a066:	4b09      	ldr	r3, [pc, #36]	; (801a08c <tcp_split_unsent_seg+0x274>)
 801a068:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801a06c:	490d      	ldr	r1, [pc, #52]	; (801a0a4 <tcp_split_unsent_seg+0x28c>)
 801a06e:	4809      	ldr	r0, [pc, #36]	; (801a094 <tcp_split_unsent_seg+0x27c>)
 801a070:	f004 f828 	bl	801e0c4 <iprintf>
  if (p != NULL) {
 801a074:	693b      	ldr	r3, [r7, #16]
 801a076:	2b00      	cmp	r3, #0
 801a078:	d002      	beq.n	801a080 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801a07a:	6938      	ldr	r0, [r7, #16]
 801a07c:	f7fa fddc 	bl	8014c38 <pbuf_free>
  }

  return ERR_MEM;
 801a080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a084:	4618      	mov	r0, r3
 801a086:	3724      	adds	r7, #36	; 0x24
 801a088:	46bd      	mov	sp, r7
 801a08a:	bd90      	pop	{r4, r7, pc}
 801a08c:	080209a4 	.word	0x080209a4
 801a090:	08020d38 	.word	0x08020d38
 801a094:	080209f8 	.word	0x080209f8
 801a098:	08020d5c 	.word	0x08020d5c
 801a09c:	08020d80 	.word	0x08020d80
 801a0a0:	08020d90 	.word	0x08020d90
 801a0a4:	08020da0 	.word	0x08020da0

0801a0a8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a0a8:	b590      	push	{r4, r7, lr}
 801a0aa:	b085      	sub	sp, #20
 801a0ac:	af00      	add	r7, sp, #0
 801a0ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d106      	bne.n	801a0c4 <tcp_send_fin+0x1c>
 801a0b6:	4b21      	ldr	r3, [pc, #132]	; (801a13c <tcp_send_fin+0x94>)
 801a0b8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801a0bc:	4920      	ldr	r1, [pc, #128]	; (801a140 <tcp_send_fin+0x98>)
 801a0be:	4821      	ldr	r0, [pc, #132]	; (801a144 <tcp_send_fin+0x9c>)
 801a0c0:	f004 f800 	bl	801e0c4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d02e      	beq.n	801a12a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a0d0:	60fb      	str	r3, [r7, #12]
 801a0d2:	e002      	b.n	801a0da <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801a0d4:	68fb      	ldr	r3, [r7, #12]
 801a0d6:	681b      	ldr	r3, [r3, #0]
 801a0d8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a0da:	68fb      	ldr	r3, [r7, #12]
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d1f8      	bne.n	801a0d4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a0e2:	68fb      	ldr	r3, [r7, #12]
 801a0e4:	68db      	ldr	r3, [r3, #12]
 801a0e6:	899b      	ldrh	r3, [r3, #12]
 801a0e8:	b29b      	uxth	r3, r3
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	f7f9 f9c6 	bl	801347c <lwip_htons>
 801a0f0:	4603      	mov	r3, r0
 801a0f2:	b2db      	uxtb	r3, r3
 801a0f4:	f003 0307 	and.w	r3, r3, #7
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	d116      	bne.n	801a12a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a0fc:	68fb      	ldr	r3, [r7, #12]
 801a0fe:	68db      	ldr	r3, [r3, #12]
 801a100:	899b      	ldrh	r3, [r3, #12]
 801a102:	b29c      	uxth	r4, r3
 801a104:	2001      	movs	r0, #1
 801a106:	f7f9 f9b9 	bl	801347c <lwip_htons>
 801a10a:	4603      	mov	r3, r0
 801a10c:	461a      	mov	r2, r3
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	68db      	ldr	r3, [r3, #12]
 801a112:	4322      	orrs	r2, r4
 801a114:	b292      	uxth	r2, r2
 801a116:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	8b5b      	ldrh	r3, [r3, #26]
 801a11c:	f043 0320 	orr.w	r3, r3, #32
 801a120:	b29a      	uxth	r2, r3
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801a126:	2300      	movs	r3, #0
 801a128:	e004      	b.n	801a134 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a12a:	2101      	movs	r1, #1
 801a12c:	6878      	ldr	r0, [r7, #4]
 801a12e:	f000 f80b 	bl	801a148 <tcp_enqueue_flags>
 801a132:	4603      	mov	r3, r0
}
 801a134:	4618      	mov	r0, r3
 801a136:	3714      	adds	r7, #20
 801a138:	46bd      	mov	sp, r7
 801a13a:	bd90      	pop	{r4, r7, pc}
 801a13c:	080209a4 	.word	0x080209a4
 801a140:	08020dac 	.word	0x08020dac
 801a144:	080209f8 	.word	0x080209f8

0801a148 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801a148:	b580      	push	{r7, lr}
 801a14a:	b08a      	sub	sp, #40	; 0x28
 801a14c:	af02      	add	r7, sp, #8
 801a14e:	6078      	str	r0, [r7, #4]
 801a150:	460b      	mov	r3, r1
 801a152:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801a154:	2300      	movs	r3, #0
 801a156:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801a158:	2300      	movs	r3, #0
 801a15a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a15c:	78fb      	ldrb	r3, [r7, #3]
 801a15e:	f003 0303 	and.w	r3, r3, #3
 801a162:	2b00      	cmp	r3, #0
 801a164:	d106      	bne.n	801a174 <tcp_enqueue_flags+0x2c>
 801a166:	4b67      	ldr	r3, [pc, #412]	; (801a304 <tcp_enqueue_flags+0x1bc>)
 801a168:	f240 4212 	movw	r2, #1042	; 0x412
 801a16c:	4966      	ldr	r1, [pc, #408]	; (801a308 <tcp_enqueue_flags+0x1c0>)
 801a16e:	4867      	ldr	r0, [pc, #412]	; (801a30c <tcp_enqueue_flags+0x1c4>)
 801a170:	f003 ffa8 	bl	801e0c4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	2b00      	cmp	r3, #0
 801a178:	d106      	bne.n	801a188 <tcp_enqueue_flags+0x40>
 801a17a:	4b62      	ldr	r3, [pc, #392]	; (801a304 <tcp_enqueue_flags+0x1bc>)
 801a17c:	f240 4213 	movw	r2, #1043	; 0x413
 801a180:	4963      	ldr	r1, [pc, #396]	; (801a310 <tcp_enqueue_flags+0x1c8>)
 801a182:	4862      	ldr	r0, [pc, #392]	; (801a30c <tcp_enqueue_flags+0x1c4>)
 801a184:	f003 ff9e 	bl	801e0c4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801a188:	78fb      	ldrb	r3, [r7, #3]
 801a18a:	f003 0302 	and.w	r3, r3, #2
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d001      	beq.n	801a196 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801a192:	2301      	movs	r3, #1
 801a194:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a196:	7ffb      	ldrb	r3, [r7, #31]
 801a198:	009b      	lsls	r3, r3, #2
 801a19a:	b2db      	uxtb	r3, r3
 801a19c:	f003 0304 	and.w	r3, r3, #4
 801a1a0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a1a2:	7dfb      	ldrb	r3, [r7, #23]
 801a1a4:	b29b      	uxth	r3, r3
 801a1a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a1aa:	4619      	mov	r1, r3
 801a1ac:	2036      	movs	r0, #54	; 0x36
 801a1ae:	f7fa fa63 	bl	8014678 <pbuf_alloc>
 801a1b2:	6138      	str	r0, [r7, #16]
 801a1b4:	693b      	ldr	r3, [r7, #16]
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d109      	bne.n	801a1ce <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	8b5b      	ldrh	r3, [r3, #26]
 801a1be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a1c2:	b29a      	uxth	r2, r3
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a1c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a1cc:	e095      	b.n	801a2fa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a1ce:	693b      	ldr	r3, [r7, #16]
 801a1d0:	895a      	ldrh	r2, [r3, #10]
 801a1d2:	7dfb      	ldrb	r3, [r7, #23]
 801a1d4:	b29b      	uxth	r3, r3
 801a1d6:	429a      	cmp	r2, r3
 801a1d8:	d206      	bcs.n	801a1e8 <tcp_enqueue_flags+0xa0>
 801a1da:	4b4a      	ldr	r3, [pc, #296]	; (801a304 <tcp_enqueue_flags+0x1bc>)
 801a1dc:	f240 423a 	movw	r2, #1082	; 0x43a
 801a1e0:	494c      	ldr	r1, [pc, #304]	; (801a314 <tcp_enqueue_flags+0x1cc>)
 801a1e2:	484a      	ldr	r0, [pc, #296]	; (801a30c <tcp_enqueue_flags+0x1c4>)
 801a1e4:	f003 ff6e 	bl	801e0c4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801a1ec:	78fa      	ldrb	r2, [r7, #3]
 801a1ee:	7ffb      	ldrb	r3, [r7, #31]
 801a1f0:	9300      	str	r3, [sp, #0]
 801a1f2:	460b      	mov	r3, r1
 801a1f4:	6939      	ldr	r1, [r7, #16]
 801a1f6:	6878      	ldr	r0, [r7, #4]
 801a1f8:	f7ff f916 	bl	8019428 <tcp_create_segment>
 801a1fc:	60f8      	str	r0, [r7, #12]
 801a1fe:	68fb      	ldr	r3, [r7, #12]
 801a200:	2b00      	cmp	r3, #0
 801a202:	d109      	bne.n	801a218 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	8b5b      	ldrh	r3, [r3, #26]
 801a208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a20c:	b29a      	uxth	r2, r3
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a216:	e070      	b.n	801a2fa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801a218:	68fb      	ldr	r3, [r7, #12]
 801a21a:	68db      	ldr	r3, [r3, #12]
 801a21c:	f003 0303 	and.w	r3, r3, #3
 801a220:	2b00      	cmp	r3, #0
 801a222:	d006      	beq.n	801a232 <tcp_enqueue_flags+0xea>
 801a224:	4b37      	ldr	r3, [pc, #220]	; (801a304 <tcp_enqueue_flags+0x1bc>)
 801a226:	f240 4242 	movw	r2, #1090	; 0x442
 801a22a:	493b      	ldr	r1, [pc, #236]	; (801a318 <tcp_enqueue_flags+0x1d0>)
 801a22c:	4837      	ldr	r0, [pc, #220]	; (801a30c <tcp_enqueue_flags+0x1c4>)
 801a22e:	f003 ff49 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	891b      	ldrh	r3, [r3, #8]
 801a236:	2b00      	cmp	r3, #0
 801a238:	d006      	beq.n	801a248 <tcp_enqueue_flags+0x100>
 801a23a:	4b32      	ldr	r3, [pc, #200]	; (801a304 <tcp_enqueue_flags+0x1bc>)
 801a23c:	f240 4243 	movw	r2, #1091	; 0x443
 801a240:	4936      	ldr	r1, [pc, #216]	; (801a31c <tcp_enqueue_flags+0x1d4>)
 801a242:	4832      	ldr	r0, [pc, #200]	; (801a30c <tcp_enqueue_flags+0x1c4>)
 801a244:	f003 ff3e 	bl	801e0c4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d103      	bne.n	801a258 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	68fa      	ldr	r2, [r7, #12]
 801a254:	66da      	str	r2, [r3, #108]	; 0x6c
 801a256:	e00d      	b.n	801a274 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a25c:	61bb      	str	r3, [r7, #24]
 801a25e:	e002      	b.n	801a266 <tcp_enqueue_flags+0x11e>
 801a260:	69bb      	ldr	r3, [r7, #24]
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	61bb      	str	r3, [r7, #24]
 801a266:	69bb      	ldr	r3, [r7, #24]
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d1f8      	bne.n	801a260 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801a26e:	69bb      	ldr	r3, [r7, #24]
 801a270:	68fa      	ldr	r2, [r7, #12]
 801a272:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	2200      	movs	r2, #0
 801a278:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801a27c:	78fb      	ldrb	r3, [r7, #3]
 801a27e:	f003 0302 	and.w	r3, r3, #2
 801a282:	2b00      	cmp	r3, #0
 801a284:	d104      	bne.n	801a290 <tcp_enqueue_flags+0x148>
 801a286:	78fb      	ldrb	r3, [r7, #3]
 801a288:	f003 0301 	and.w	r3, r3, #1
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d004      	beq.n	801a29a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a294:	1c5a      	adds	r2, r3, #1
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801a29a:	78fb      	ldrb	r3, [r7, #3]
 801a29c:	f003 0301 	and.w	r3, r3, #1
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	d006      	beq.n	801a2b2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	8b5b      	ldrh	r3, [r3, #26]
 801a2a8:	f043 0320 	orr.w	r3, r3, #32
 801a2ac:	b29a      	uxth	r2, r3
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a2b2:	68fb      	ldr	r3, [r7, #12]
 801a2b4:	685b      	ldr	r3, [r3, #4]
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	f7fa fd4c 	bl	8014d54 <pbuf_clen>
 801a2bc:	4603      	mov	r3, r0
 801a2be:	461a      	mov	r2, r3
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a2c6:	4413      	add	r3, r2
 801a2c8:	b29a      	uxth	r2, r3
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d00e      	beq.n	801a2f8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d10a      	bne.n	801a2f8 <tcp_enqueue_flags+0x1b0>
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	d106      	bne.n	801a2f8 <tcp_enqueue_flags+0x1b0>
 801a2ea:	4b06      	ldr	r3, [pc, #24]	; (801a304 <tcp_enqueue_flags+0x1bc>)
 801a2ec:	f240 4266 	movw	r2, #1126	; 0x466
 801a2f0:	490b      	ldr	r1, [pc, #44]	; (801a320 <tcp_enqueue_flags+0x1d8>)
 801a2f2:	4806      	ldr	r0, [pc, #24]	; (801a30c <tcp_enqueue_flags+0x1c4>)
 801a2f4:	f003 fee6 	bl	801e0c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801a2f8:	2300      	movs	r3, #0
}
 801a2fa:	4618      	mov	r0, r3
 801a2fc:	3720      	adds	r7, #32
 801a2fe:	46bd      	mov	sp, r7
 801a300:	bd80      	pop	{r7, pc}
 801a302:	bf00      	nop
 801a304:	080209a4 	.word	0x080209a4
 801a308:	08020dc8 	.word	0x08020dc8
 801a30c:	080209f8 	.word	0x080209f8
 801a310:	08020e20 	.word	0x08020e20
 801a314:	08020e40 	.word	0x08020e40
 801a318:	08020e7c 	.word	0x08020e7c
 801a31c:	08020e94 	.word	0x08020e94
 801a320:	08020ec0 	.word	0x08020ec0

0801a324 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801a324:	b5b0      	push	{r4, r5, r7, lr}
 801a326:	b08a      	sub	sp, #40	; 0x28
 801a328:	af00      	add	r7, sp, #0
 801a32a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d106      	bne.n	801a340 <tcp_output+0x1c>
 801a332:	4ba0      	ldr	r3, [pc, #640]	; (801a5b4 <tcp_output+0x290>)
 801a334:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801a338:	499f      	ldr	r1, [pc, #636]	; (801a5b8 <tcp_output+0x294>)
 801a33a:	48a0      	ldr	r0, [pc, #640]	; (801a5bc <tcp_output+0x298>)
 801a33c:	f003 fec2 	bl	801e0c4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	7d1b      	ldrb	r3, [r3, #20]
 801a344:	2b01      	cmp	r3, #1
 801a346:	d106      	bne.n	801a356 <tcp_output+0x32>
 801a348:	4b9a      	ldr	r3, [pc, #616]	; (801a5b4 <tcp_output+0x290>)
 801a34a:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801a34e:	499c      	ldr	r1, [pc, #624]	; (801a5c0 <tcp_output+0x29c>)
 801a350:	489a      	ldr	r0, [pc, #616]	; (801a5bc <tcp_output+0x298>)
 801a352:	f003 feb7 	bl	801e0c4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801a356:	4b9b      	ldr	r3, [pc, #620]	; (801a5c4 <tcp_output+0x2a0>)
 801a358:	681b      	ldr	r3, [r3, #0]
 801a35a:	687a      	ldr	r2, [r7, #4]
 801a35c:	429a      	cmp	r2, r3
 801a35e:	d101      	bne.n	801a364 <tcp_output+0x40>
    return ERR_OK;
 801a360:	2300      	movs	r3, #0
 801a362:	e1d2      	b.n	801a70a <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a370:	429a      	cmp	r2, r3
 801a372:	d203      	bcs.n	801a37c <tcp_output+0x58>
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a37a:	e002      	b.n	801a382 <tcp_output+0x5e>
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a382:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a388:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d10b      	bne.n	801a3a8 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	8b5b      	ldrh	r3, [r3, #26]
 801a394:	f003 0302 	and.w	r3, r3, #2
 801a398:	2b00      	cmp	r3, #0
 801a39a:	f000 81a9 	beq.w	801a6f0 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801a39e:	6878      	ldr	r0, [r7, #4]
 801a3a0:	f000 fdd8 	bl	801af54 <tcp_send_empty_ack>
 801a3a4:	4603      	mov	r3, r0
 801a3a6:	e1b0      	b.n	801a70a <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801a3a8:	6879      	ldr	r1, [r7, #4]
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	3304      	adds	r3, #4
 801a3ae:	461a      	mov	r2, r3
 801a3b0:	6878      	ldr	r0, [r7, #4]
 801a3b2:	f7ff f81d 	bl	80193f0 <tcp_route>
 801a3b6:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801a3b8:	697b      	ldr	r3, [r7, #20]
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d102      	bne.n	801a3c4 <tcp_output+0xa0>
    return ERR_RTE;
 801a3be:	f06f 0303 	mvn.w	r3, #3
 801a3c2:	e1a2      	b.n	801a70a <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d003      	beq.n	801a3d2 <tcp_output+0xae>
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d111      	bne.n	801a3f6 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801a3d2:	697b      	ldr	r3, [r7, #20]
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	d002      	beq.n	801a3de <tcp_output+0xba>
 801a3d8:	697b      	ldr	r3, [r7, #20]
 801a3da:	3304      	adds	r3, #4
 801a3dc:	e000      	b.n	801a3e0 <tcp_output+0xbc>
 801a3de:	2300      	movs	r3, #0
 801a3e0:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801a3e2:	693b      	ldr	r3, [r7, #16]
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d102      	bne.n	801a3ee <tcp_output+0xca>
      return ERR_RTE;
 801a3e8:	f06f 0303 	mvn.w	r3, #3
 801a3ec:	e18d      	b.n	801a70a <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a3ee:	693b      	ldr	r3, [r7, #16]
 801a3f0:	681a      	ldr	r2, [r3, #0]
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801a3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3f8:	68db      	ldr	r3, [r3, #12]
 801a3fa:	685b      	ldr	r3, [r3, #4]
 801a3fc:	4618      	mov	r0, r3
 801a3fe:	f7f9 f852 	bl	80134a6 <lwip_htonl>
 801a402:	4602      	mov	r2, r0
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a408:	1ad3      	subs	r3, r2, r3
 801a40a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a40c:	8912      	ldrh	r2, [r2, #8]
 801a40e:	4413      	add	r3, r2
 801a410:	69ba      	ldr	r2, [r7, #24]
 801a412:	429a      	cmp	r2, r3
 801a414:	d227      	bcs.n	801a466 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a41c:	461a      	mov	r2, r3
 801a41e:	69bb      	ldr	r3, [r7, #24]
 801a420:	4293      	cmp	r3, r2
 801a422:	d114      	bne.n	801a44e <tcp_output+0x12a>
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d110      	bne.n	801a44e <tcp_output+0x12a>
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a432:	2b00      	cmp	r3, #0
 801a434:	d10b      	bne.n	801a44e <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	2200      	movs	r2, #0
 801a43a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	2201      	movs	r2, #1
 801a442:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	2200      	movs	r2, #0
 801a44a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	8b5b      	ldrh	r3, [r3, #26]
 801a452:	f003 0302 	and.w	r3, r3, #2
 801a456:	2b00      	cmp	r3, #0
 801a458:	f000 814c 	beq.w	801a6f4 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801a45c:	6878      	ldr	r0, [r7, #4]
 801a45e:	f000 fd79 	bl	801af54 <tcp_send_empty_ack>
 801a462:	4603      	mov	r3, r0
 801a464:	e151      	b.n	801a70a <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	2200      	movs	r2, #0
 801a46a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a472:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801a474:	6a3b      	ldr	r3, [r7, #32]
 801a476:	2b00      	cmp	r3, #0
 801a478:	f000 811b 	beq.w	801a6b2 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801a47c:	e002      	b.n	801a484 <tcp_output+0x160>
 801a47e:	6a3b      	ldr	r3, [r7, #32]
 801a480:	681b      	ldr	r3, [r3, #0]
 801a482:	623b      	str	r3, [r7, #32]
 801a484:	6a3b      	ldr	r3, [r7, #32]
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d1f8      	bne.n	801a47e <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801a48c:	e111      	b.n	801a6b2 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801a48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a490:	68db      	ldr	r3, [r3, #12]
 801a492:	899b      	ldrh	r3, [r3, #12]
 801a494:	b29b      	uxth	r3, r3
 801a496:	4618      	mov	r0, r3
 801a498:	f7f8 fff0 	bl	801347c <lwip_htons>
 801a49c:	4603      	mov	r3, r0
 801a49e:	b2db      	uxtb	r3, r3
 801a4a0:	f003 0304 	and.w	r3, r3, #4
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	d006      	beq.n	801a4b6 <tcp_output+0x192>
 801a4a8:	4b42      	ldr	r3, [pc, #264]	; (801a5b4 <tcp_output+0x290>)
 801a4aa:	f240 5237 	movw	r2, #1335	; 0x537
 801a4ae:	4946      	ldr	r1, [pc, #280]	; (801a5c8 <tcp_output+0x2a4>)
 801a4b0:	4842      	ldr	r0, [pc, #264]	; (801a5bc <tcp_output+0x298>)
 801a4b2:	f003 fe07 	bl	801e0c4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d01f      	beq.n	801a4fe <tcp_output+0x1da>
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	8b5b      	ldrh	r3, [r3, #26]
 801a4c2:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d119      	bne.n	801a4fe <tcp_output+0x1da>
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d00b      	beq.n	801a4ea <tcp_output+0x1c6>
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	d110      	bne.n	801a4fe <tcp_output+0x1da>
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a4e0:	891a      	ldrh	r2, [r3, #8]
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a4e6:	429a      	cmp	r2, r3
 801a4e8:	d209      	bcs.n	801a4fe <tcp_output+0x1da>
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	d004      	beq.n	801a4fe <tcp_output+0x1da>
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a4fa:	2b08      	cmp	r3, #8
 801a4fc:	d901      	bls.n	801a502 <tcp_output+0x1de>
 801a4fe:	2301      	movs	r3, #1
 801a500:	e000      	b.n	801a504 <tcp_output+0x1e0>
 801a502:	2300      	movs	r3, #0
 801a504:	2b00      	cmp	r3, #0
 801a506:	d106      	bne.n	801a516 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	8b5b      	ldrh	r3, [r3, #26]
 801a50c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a510:	2b00      	cmp	r3, #0
 801a512:	f000 80e3 	beq.w	801a6dc <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	7d1b      	ldrb	r3, [r3, #20]
 801a51a:	2b02      	cmp	r3, #2
 801a51c:	d00d      	beq.n	801a53a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801a51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a520:	68db      	ldr	r3, [r3, #12]
 801a522:	899b      	ldrh	r3, [r3, #12]
 801a524:	b29c      	uxth	r4, r3
 801a526:	2010      	movs	r0, #16
 801a528:	f7f8 ffa8 	bl	801347c <lwip_htons>
 801a52c:	4603      	mov	r3, r0
 801a52e:	461a      	mov	r2, r3
 801a530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a532:	68db      	ldr	r3, [r3, #12]
 801a534:	4322      	orrs	r2, r4
 801a536:	b292      	uxth	r2, r2
 801a538:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801a53a:	697a      	ldr	r2, [r7, #20]
 801a53c:	6879      	ldr	r1, [r7, #4]
 801a53e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a540:	f000 f908 	bl	801a754 <tcp_output_segment>
 801a544:	4603      	mov	r3, r0
 801a546:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801a548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d009      	beq.n	801a564 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	8b5b      	ldrh	r3, [r3, #26]
 801a554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a558:	b29a      	uxth	r2, r3
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	835a      	strh	r2, [r3, #26]
      return err;
 801a55e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a562:	e0d2      	b.n	801a70a <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a566:	681a      	ldr	r2, [r3, #0]
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	7d1b      	ldrb	r3, [r3, #20]
 801a570:	2b02      	cmp	r3, #2
 801a572:	d006      	beq.n	801a582 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	8b5b      	ldrh	r3, [r3, #26]
 801a578:	f023 0303 	bic.w	r3, r3, #3
 801a57c:	b29a      	uxth	r2, r3
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a584:	68db      	ldr	r3, [r3, #12]
 801a586:	685b      	ldr	r3, [r3, #4]
 801a588:	4618      	mov	r0, r3
 801a58a:	f7f8 ff8c 	bl	80134a6 <lwip_htonl>
 801a58e:	4604      	mov	r4, r0
 801a590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a592:	891b      	ldrh	r3, [r3, #8]
 801a594:	461d      	mov	r5, r3
 801a596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a598:	68db      	ldr	r3, [r3, #12]
 801a59a:	899b      	ldrh	r3, [r3, #12]
 801a59c:	b29b      	uxth	r3, r3
 801a59e:	4618      	mov	r0, r3
 801a5a0:	f7f8 ff6c 	bl	801347c <lwip_htons>
 801a5a4:	4603      	mov	r3, r0
 801a5a6:	b2db      	uxtb	r3, r3
 801a5a8:	f003 0303 	and.w	r3, r3, #3
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	d00d      	beq.n	801a5cc <tcp_output+0x2a8>
 801a5b0:	2301      	movs	r3, #1
 801a5b2:	e00c      	b.n	801a5ce <tcp_output+0x2aa>
 801a5b4:	080209a4 	.word	0x080209a4
 801a5b8:	08020ee8 	.word	0x08020ee8
 801a5bc:	080209f8 	.word	0x080209f8
 801a5c0:	08020f00 	.word	0x08020f00
 801a5c4:	2000b51c 	.word	0x2000b51c
 801a5c8:	08020f28 	.word	0x08020f28
 801a5cc:	2300      	movs	r3, #0
 801a5ce:	442b      	add	r3, r5
 801a5d0:	4423      	add	r3, r4
 801a5d2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a5d8:	68bb      	ldr	r3, [r7, #8]
 801a5da:	1ad3      	subs	r3, r2, r3
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	da02      	bge.n	801a5e6 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	68ba      	ldr	r2, [r7, #8]
 801a5e4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801a5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5e8:	891b      	ldrh	r3, [r3, #8]
 801a5ea:	461c      	mov	r4, r3
 801a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5ee:	68db      	ldr	r3, [r3, #12]
 801a5f0:	899b      	ldrh	r3, [r3, #12]
 801a5f2:	b29b      	uxth	r3, r3
 801a5f4:	4618      	mov	r0, r3
 801a5f6:	f7f8 ff41 	bl	801347c <lwip_htons>
 801a5fa:	4603      	mov	r3, r0
 801a5fc:	b2db      	uxtb	r3, r3
 801a5fe:	f003 0303 	and.w	r3, r3, #3
 801a602:	2b00      	cmp	r3, #0
 801a604:	d001      	beq.n	801a60a <tcp_output+0x2e6>
 801a606:	2301      	movs	r3, #1
 801a608:	e000      	b.n	801a60c <tcp_output+0x2e8>
 801a60a:	2300      	movs	r3, #0
 801a60c:	4423      	add	r3, r4
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d049      	beq.n	801a6a6 <tcp_output+0x382>
      seg->next = NULL;
 801a612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a614:	2200      	movs	r2, #0
 801a616:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d105      	bne.n	801a62c <tcp_output+0x308>
        pcb->unacked = seg;
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a624:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801a626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a628:	623b      	str	r3, [r7, #32]
 801a62a:	e03f      	b.n	801a6ac <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a62e:	68db      	ldr	r3, [r3, #12]
 801a630:	685b      	ldr	r3, [r3, #4]
 801a632:	4618      	mov	r0, r3
 801a634:	f7f8 ff37 	bl	80134a6 <lwip_htonl>
 801a638:	4604      	mov	r4, r0
 801a63a:	6a3b      	ldr	r3, [r7, #32]
 801a63c:	68db      	ldr	r3, [r3, #12]
 801a63e:	685b      	ldr	r3, [r3, #4]
 801a640:	4618      	mov	r0, r3
 801a642:	f7f8 ff30 	bl	80134a6 <lwip_htonl>
 801a646:	4603      	mov	r3, r0
 801a648:	1ae3      	subs	r3, r4, r3
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	da24      	bge.n	801a698 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	3370      	adds	r3, #112	; 0x70
 801a652:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a654:	e002      	b.n	801a65c <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801a656:	69fb      	ldr	r3, [r7, #28]
 801a658:	681b      	ldr	r3, [r3, #0]
 801a65a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a65c:	69fb      	ldr	r3, [r7, #28]
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	2b00      	cmp	r3, #0
 801a662:	d011      	beq.n	801a688 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a664:	69fb      	ldr	r3, [r7, #28]
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	68db      	ldr	r3, [r3, #12]
 801a66a:	685b      	ldr	r3, [r3, #4]
 801a66c:	4618      	mov	r0, r3
 801a66e:	f7f8 ff1a 	bl	80134a6 <lwip_htonl>
 801a672:	4604      	mov	r4, r0
 801a674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a676:	68db      	ldr	r3, [r3, #12]
 801a678:	685b      	ldr	r3, [r3, #4]
 801a67a:	4618      	mov	r0, r3
 801a67c:	f7f8 ff13 	bl	80134a6 <lwip_htonl>
 801a680:	4603      	mov	r3, r0
 801a682:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801a684:	2b00      	cmp	r3, #0
 801a686:	dbe6      	blt.n	801a656 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 801a688:	69fb      	ldr	r3, [r7, #28]
 801a68a:	681a      	ldr	r2, [r3, #0]
 801a68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a68e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801a690:	69fb      	ldr	r3, [r7, #28]
 801a692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a694:	601a      	str	r2, [r3, #0]
 801a696:	e009      	b.n	801a6ac <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801a698:	6a3b      	ldr	r3, [r7, #32]
 801a69a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a69c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801a69e:	6a3b      	ldr	r3, [r7, #32]
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	623b      	str	r3, [r7, #32]
 801a6a4:	e002      	b.n	801a6ac <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801a6a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a6a8:	f7fb fef4 	bl	8016494 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a6b0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801a6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	d012      	beq.n	801a6de <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6ba:	68db      	ldr	r3, [r3, #12]
 801a6bc:	685b      	ldr	r3, [r3, #4]
 801a6be:	4618      	mov	r0, r3
 801a6c0:	f7f8 fef1 	bl	80134a6 <lwip_htonl>
 801a6c4:	4602      	mov	r2, r0
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a6ca:	1ad3      	subs	r3, r2, r3
 801a6cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a6ce:	8912      	ldrh	r2, [r2, #8]
 801a6d0:	4413      	add	r3, r2
  while (seg != NULL &&
 801a6d2:	69ba      	ldr	r2, [r7, #24]
 801a6d4:	429a      	cmp	r2, r3
 801a6d6:	f4bf aeda 	bcs.w	801a48e <tcp_output+0x16a>
 801a6da:	e000      	b.n	801a6de <tcp_output+0x3ba>
      break;
 801a6dc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d108      	bne.n	801a6f8 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	2200      	movs	r2, #0
 801a6ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801a6ee:	e004      	b.n	801a6fa <tcp_output+0x3d6>
    goto output_done;
 801a6f0:	bf00      	nop
 801a6f2:	e002      	b.n	801a6fa <tcp_output+0x3d6>
    goto output_done;
 801a6f4:	bf00      	nop
 801a6f6:	e000      	b.n	801a6fa <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801a6f8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	8b5b      	ldrh	r3, [r3, #26]
 801a6fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a702:	b29a      	uxth	r2, r3
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801a708:	2300      	movs	r3, #0
}
 801a70a:	4618      	mov	r0, r3
 801a70c:	3728      	adds	r7, #40	; 0x28
 801a70e:	46bd      	mov	sp, r7
 801a710:	bdb0      	pop	{r4, r5, r7, pc}
 801a712:	bf00      	nop

0801a714 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801a714:	b580      	push	{r7, lr}
 801a716:	b082      	sub	sp, #8
 801a718:	af00      	add	r7, sp, #0
 801a71a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d106      	bne.n	801a730 <tcp_output_segment_busy+0x1c>
 801a722:	4b09      	ldr	r3, [pc, #36]	; (801a748 <tcp_output_segment_busy+0x34>)
 801a724:	f240 529a 	movw	r2, #1434	; 0x59a
 801a728:	4908      	ldr	r1, [pc, #32]	; (801a74c <tcp_output_segment_busy+0x38>)
 801a72a:	4809      	ldr	r0, [pc, #36]	; (801a750 <tcp_output_segment_busy+0x3c>)
 801a72c:	f003 fcca 	bl	801e0c4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	685b      	ldr	r3, [r3, #4]
 801a734:	7b9b      	ldrb	r3, [r3, #14]
 801a736:	2b01      	cmp	r3, #1
 801a738:	d001      	beq.n	801a73e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801a73a:	2301      	movs	r3, #1
 801a73c:	e000      	b.n	801a740 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801a73e:	2300      	movs	r3, #0
}
 801a740:	4618      	mov	r0, r3
 801a742:	3708      	adds	r7, #8
 801a744:	46bd      	mov	sp, r7
 801a746:	bd80      	pop	{r7, pc}
 801a748:	080209a4 	.word	0x080209a4
 801a74c:	08020f40 	.word	0x08020f40
 801a750:	080209f8 	.word	0x080209f8

0801a754 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801a754:	b5b0      	push	{r4, r5, r7, lr}
 801a756:	b08c      	sub	sp, #48	; 0x30
 801a758:	af04      	add	r7, sp, #16
 801a75a:	60f8      	str	r0, [r7, #12]
 801a75c:	60b9      	str	r1, [r7, #8]
 801a75e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801a760:	68fb      	ldr	r3, [r7, #12]
 801a762:	2b00      	cmp	r3, #0
 801a764:	d106      	bne.n	801a774 <tcp_output_segment+0x20>
 801a766:	4b64      	ldr	r3, [pc, #400]	; (801a8f8 <tcp_output_segment+0x1a4>)
 801a768:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801a76c:	4963      	ldr	r1, [pc, #396]	; (801a8fc <tcp_output_segment+0x1a8>)
 801a76e:	4864      	ldr	r0, [pc, #400]	; (801a900 <tcp_output_segment+0x1ac>)
 801a770:	f003 fca8 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801a774:	68bb      	ldr	r3, [r7, #8]
 801a776:	2b00      	cmp	r3, #0
 801a778:	d106      	bne.n	801a788 <tcp_output_segment+0x34>
 801a77a:	4b5f      	ldr	r3, [pc, #380]	; (801a8f8 <tcp_output_segment+0x1a4>)
 801a77c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801a780:	4960      	ldr	r1, [pc, #384]	; (801a904 <tcp_output_segment+0x1b0>)
 801a782:	485f      	ldr	r0, [pc, #380]	; (801a900 <tcp_output_segment+0x1ac>)
 801a784:	f003 fc9e 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d106      	bne.n	801a79c <tcp_output_segment+0x48>
 801a78e:	4b5a      	ldr	r3, [pc, #360]	; (801a8f8 <tcp_output_segment+0x1a4>)
 801a790:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801a794:	495c      	ldr	r1, [pc, #368]	; (801a908 <tcp_output_segment+0x1b4>)
 801a796:	485a      	ldr	r0, [pc, #360]	; (801a900 <tcp_output_segment+0x1ac>)
 801a798:	f003 fc94 	bl	801e0c4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801a79c:	68f8      	ldr	r0, [r7, #12]
 801a79e:	f7ff ffb9 	bl	801a714 <tcp_output_segment_busy>
 801a7a2:	4603      	mov	r3, r0
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d001      	beq.n	801a7ac <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801a7a8:	2300      	movs	r3, #0
 801a7aa:	e0a0      	b.n	801a8ee <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a7ac:	68bb      	ldr	r3, [r7, #8]
 801a7ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a7b0:	68fb      	ldr	r3, [r7, #12]
 801a7b2:	68dc      	ldr	r4, [r3, #12]
 801a7b4:	4610      	mov	r0, r2
 801a7b6:	f7f8 fe76 	bl	80134a6 <lwip_htonl>
 801a7ba:	4603      	mov	r3, r0
 801a7bc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a7be:	68bb      	ldr	r3, [r7, #8]
 801a7c0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a7c2:	68fb      	ldr	r3, [r7, #12]
 801a7c4:	68dc      	ldr	r4, [r3, #12]
 801a7c6:	4610      	mov	r0, r2
 801a7c8:	f7f8 fe58 	bl	801347c <lwip_htons>
 801a7cc:	4603      	mov	r3, r0
 801a7ce:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a7d0:	68bb      	ldr	r3, [r7, #8]
 801a7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7d4:	68ba      	ldr	r2, [r7, #8]
 801a7d6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a7d8:	441a      	add	r2, r3
 801a7da:	68bb      	ldr	r3, [r7, #8]
 801a7dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801a7de:	68fb      	ldr	r3, [r7, #12]
 801a7e0:	68db      	ldr	r3, [r3, #12]
 801a7e2:	3314      	adds	r3, #20
 801a7e4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801a7e6:	68fb      	ldr	r3, [r7, #12]
 801a7e8:	7a9b      	ldrb	r3, [r3, #10]
 801a7ea:	f003 0301 	and.w	r3, r3, #1
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d015      	beq.n	801a81e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801a7f2:	68bb      	ldr	r3, [r7, #8]
 801a7f4:	3304      	adds	r3, #4
 801a7f6:	461a      	mov	r2, r3
 801a7f8:	6879      	ldr	r1, [r7, #4]
 801a7fa:	f44f 7006 	mov.w	r0, #536	; 0x218
 801a7fe:	f7fc fa33 	bl	8016c68 <tcp_eff_send_mss_netif>
 801a802:	4603      	mov	r3, r0
 801a804:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801a806:	8b7b      	ldrh	r3, [r7, #26]
 801a808:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801a80c:	4618      	mov	r0, r3
 801a80e:	f7f8 fe4a 	bl	80134a6 <lwip_htonl>
 801a812:	4602      	mov	r2, r0
 801a814:	69fb      	ldr	r3, [r7, #28]
 801a816:	601a      	str	r2, [r3, #0]
    opts += 1;
 801a818:	69fb      	ldr	r3, [r7, #28]
 801a81a:	3304      	adds	r3, #4
 801a81c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801a81e:	68bb      	ldr	r3, [r7, #8]
 801a820:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a824:	2b00      	cmp	r3, #0
 801a826:	da02      	bge.n	801a82e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801a828:	68bb      	ldr	r3, [r7, #8]
 801a82a:	2200      	movs	r2, #0
 801a82c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801a82e:	68bb      	ldr	r3, [r7, #8]
 801a830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a832:	2b00      	cmp	r3, #0
 801a834:	d10c      	bne.n	801a850 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801a836:	4b35      	ldr	r3, [pc, #212]	; (801a90c <tcp_output_segment+0x1b8>)
 801a838:	681a      	ldr	r2, [r3, #0]
 801a83a:	68bb      	ldr	r3, [r7, #8]
 801a83c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801a83e:	68fb      	ldr	r3, [r7, #12]
 801a840:	68db      	ldr	r3, [r3, #12]
 801a842:	685b      	ldr	r3, [r3, #4]
 801a844:	4618      	mov	r0, r3
 801a846:	f7f8 fe2e 	bl	80134a6 <lwip_htonl>
 801a84a:	4602      	mov	r2, r0
 801a84c:	68bb      	ldr	r3, [r7, #8]
 801a84e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	68db      	ldr	r3, [r3, #12]
 801a854:	461a      	mov	r2, r3
 801a856:	68fb      	ldr	r3, [r7, #12]
 801a858:	685b      	ldr	r3, [r3, #4]
 801a85a:	685b      	ldr	r3, [r3, #4]
 801a85c:	1ad3      	subs	r3, r2, r3
 801a85e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	685b      	ldr	r3, [r3, #4]
 801a864:	8959      	ldrh	r1, [r3, #10]
 801a866:	68fb      	ldr	r3, [r7, #12]
 801a868:	685b      	ldr	r3, [r3, #4]
 801a86a:	8b3a      	ldrh	r2, [r7, #24]
 801a86c:	1a8a      	subs	r2, r1, r2
 801a86e:	b292      	uxth	r2, r2
 801a870:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801a872:	68fb      	ldr	r3, [r7, #12]
 801a874:	685b      	ldr	r3, [r3, #4]
 801a876:	8919      	ldrh	r1, [r3, #8]
 801a878:	68fb      	ldr	r3, [r7, #12]
 801a87a:	685b      	ldr	r3, [r3, #4]
 801a87c:	8b3a      	ldrh	r2, [r7, #24]
 801a87e:	1a8a      	subs	r2, r1, r2
 801a880:	b292      	uxth	r2, r2
 801a882:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801a884:	68fb      	ldr	r3, [r7, #12]
 801a886:	685b      	ldr	r3, [r3, #4]
 801a888:	68fa      	ldr	r2, [r7, #12]
 801a88a:	68d2      	ldr	r2, [r2, #12]
 801a88c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801a88e:	68fb      	ldr	r3, [r7, #12]
 801a890:	68db      	ldr	r3, [r3, #12]
 801a892:	2200      	movs	r2, #0
 801a894:	741a      	strb	r2, [r3, #16]
 801a896:	2200      	movs	r2, #0
 801a898:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801a89a:	68fb      	ldr	r3, [r7, #12]
 801a89c:	68db      	ldr	r3, [r3, #12]
 801a89e:	f103 0214 	add.w	r2, r3, #20
 801a8a2:	68fb      	ldr	r3, [r7, #12]
 801a8a4:	7a9b      	ldrb	r3, [r3, #10]
 801a8a6:	009b      	lsls	r3, r3, #2
 801a8a8:	f003 0304 	and.w	r3, r3, #4
 801a8ac:	4413      	add	r3, r2
 801a8ae:	69fa      	ldr	r2, [r7, #28]
 801a8b0:	429a      	cmp	r2, r3
 801a8b2:	d006      	beq.n	801a8c2 <tcp_output_segment+0x16e>
 801a8b4:	4b10      	ldr	r3, [pc, #64]	; (801a8f8 <tcp_output_segment+0x1a4>)
 801a8b6:	f240 621c 	movw	r2, #1564	; 0x61c
 801a8ba:	4915      	ldr	r1, [pc, #84]	; (801a910 <tcp_output_segment+0x1bc>)
 801a8bc:	4810      	ldr	r0, [pc, #64]	; (801a900 <tcp_output_segment+0x1ac>)
 801a8be:	f003 fc01 	bl	801e0c4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801a8c2:	68fb      	ldr	r3, [r7, #12]
 801a8c4:	6858      	ldr	r0, [r3, #4]
 801a8c6:	68b9      	ldr	r1, [r7, #8]
 801a8c8:	68bb      	ldr	r3, [r7, #8]
 801a8ca:	1d1c      	adds	r4, r3, #4
 801a8cc:	68bb      	ldr	r3, [r7, #8]
 801a8ce:	7add      	ldrb	r5, [r3, #11]
 801a8d0:	68bb      	ldr	r3, [r7, #8]
 801a8d2:	7a9b      	ldrb	r3, [r3, #10]
 801a8d4:	687a      	ldr	r2, [r7, #4]
 801a8d6:	9202      	str	r2, [sp, #8]
 801a8d8:	2206      	movs	r2, #6
 801a8da:	9201      	str	r2, [sp, #4]
 801a8dc:	9300      	str	r3, [sp, #0]
 801a8de:	462b      	mov	r3, r5
 801a8e0:	4622      	mov	r2, r4
 801a8e2:	f002 fa6f 	bl	801cdc4 <ip4_output_if>
 801a8e6:	4603      	mov	r3, r0
 801a8e8:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801a8ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a8ee:	4618      	mov	r0, r3
 801a8f0:	3720      	adds	r7, #32
 801a8f2:	46bd      	mov	sp, r7
 801a8f4:	bdb0      	pop	{r4, r5, r7, pc}
 801a8f6:	bf00      	nop
 801a8f8:	080209a4 	.word	0x080209a4
 801a8fc:	08020f68 	.word	0x08020f68
 801a900:	080209f8 	.word	0x080209f8
 801a904:	08020f88 	.word	0x08020f88
 801a908:	08020fa8 	.word	0x08020fa8
 801a90c:	2000b50c 	.word	0x2000b50c
 801a910:	08020fcc 	.word	0x08020fcc

0801a914 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801a914:	b5b0      	push	{r4, r5, r7, lr}
 801a916:	b084      	sub	sp, #16
 801a918:	af00      	add	r7, sp, #0
 801a91a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d106      	bne.n	801a930 <tcp_rexmit_rto_prepare+0x1c>
 801a922:	4b31      	ldr	r3, [pc, #196]	; (801a9e8 <tcp_rexmit_rto_prepare+0xd4>)
 801a924:	f240 6263 	movw	r2, #1635	; 0x663
 801a928:	4930      	ldr	r1, [pc, #192]	; (801a9ec <tcp_rexmit_rto_prepare+0xd8>)
 801a92a:	4831      	ldr	r0, [pc, #196]	; (801a9f0 <tcp_rexmit_rto_prepare+0xdc>)
 801a92c:	f003 fbca 	bl	801e0c4 <iprintf>

  if (pcb->unacked == NULL) {
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a934:	2b00      	cmp	r3, #0
 801a936:	d102      	bne.n	801a93e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801a938:	f06f 0305 	mvn.w	r3, #5
 801a93c:	e050      	b.n	801a9e0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a942:	60fb      	str	r3, [r7, #12]
 801a944:	e00b      	b.n	801a95e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801a946:	68f8      	ldr	r0, [r7, #12]
 801a948:	f7ff fee4 	bl	801a714 <tcp_output_segment_busy>
 801a94c:	4603      	mov	r3, r0
 801a94e:	2b00      	cmp	r3, #0
 801a950:	d002      	beq.n	801a958 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801a952:	f06f 0305 	mvn.w	r3, #5
 801a956:	e043      	b.n	801a9e0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	60fb      	str	r3, [r7, #12]
 801a95e:	68fb      	ldr	r3, [r7, #12]
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	2b00      	cmp	r3, #0
 801a964:	d1ef      	bne.n	801a946 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801a966:	68f8      	ldr	r0, [r7, #12]
 801a968:	f7ff fed4 	bl	801a714 <tcp_output_segment_busy>
 801a96c:	4603      	mov	r3, r0
 801a96e:	2b00      	cmp	r3, #0
 801a970:	d002      	beq.n	801a978 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801a972:	f06f 0305 	mvn.w	r3, #5
 801a976:	e033      	b.n	801a9e0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a97c:	68fb      	ldr	r3, [r7, #12]
 801a97e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	2200      	movs	r2, #0
 801a98c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	8b5b      	ldrh	r3, [r3, #26]
 801a992:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a996:	b29a      	uxth	r2, r3
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a99c:	68fb      	ldr	r3, [r7, #12]
 801a99e:	68db      	ldr	r3, [r3, #12]
 801a9a0:	685b      	ldr	r3, [r3, #4]
 801a9a2:	4618      	mov	r0, r3
 801a9a4:	f7f8 fd7f 	bl	80134a6 <lwip_htonl>
 801a9a8:	4604      	mov	r4, r0
 801a9aa:	68fb      	ldr	r3, [r7, #12]
 801a9ac:	891b      	ldrh	r3, [r3, #8]
 801a9ae:	461d      	mov	r5, r3
 801a9b0:	68fb      	ldr	r3, [r7, #12]
 801a9b2:	68db      	ldr	r3, [r3, #12]
 801a9b4:	899b      	ldrh	r3, [r3, #12]
 801a9b6:	b29b      	uxth	r3, r3
 801a9b8:	4618      	mov	r0, r3
 801a9ba:	f7f8 fd5f 	bl	801347c <lwip_htons>
 801a9be:	4603      	mov	r3, r0
 801a9c0:	b2db      	uxtb	r3, r3
 801a9c2:	f003 0303 	and.w	r3, r3, #3
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	d001      	beq.n	801a9ce <tcp_rexmit_rto_prepare+0xba>
 801a9ca:	2301      	movs	r3, #1
 801a9cc:	e000      	b.n	801a9d0 <tcp_rexmit_rto_prepare+0xbc>
 801a9ce:	2300      	movs	r3, #0
 801a9d0:	442b      	add	r3, r5
 801a9d2:	18e2      	adds	r2, r4, r3
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	2200      	movs	r2, #0
 801a9dc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801a9de:	2300      	movs	r3, #0
}
 801a9e0:	4618      	mov	r0, r3
 801a9e2:	3710      	adds	r7, #16
 801a9e4:	46bd      	mov	sp, r7
 801a9e6:	bdb0      	pop	{r4, r5, r7, pc}
 801a9e8:	080209a4 	.word	0x080209a4
 801a9ec:	08020fe0 	.word	0x08020fe0
 801a9f0:	080209f8 	.word	0x080209f8

0801a9f4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801a9f4:	b580      	push	{r7, lr}
 801a9f6:	b082      	sub	sp, #8
 801a9f8:	af00      	add	r7, sp, #0
 801a9fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	d106      	bne.n	801aa10 <tcp_rexmit_rto_commit+0x1c>
 801aa02:	4b0d      	ldr	r3, [pc, #52]	; (801aa38 <tcp_rexmit_rto_commit+0x44>)
 801aa04:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801aa08:	490c      	ldr	r1, [pc, #48]	; (801aa3c <tcp_rexmit_rto_commit+0x48>)
 801aa0a:	480d      	ldr	r0, [pc, #52]	; (801aa40 <tcp_rexmit_rto_commit+0x4c>)
 801aa0c:	f003 fb5a 	bl	801e0c4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801aa16:	2bff      	cmp	r3, #255	; 0xff
 801aa18:	d007      	beq.n	801aa2a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801aa20:	3301      	adds	r3, #1
 801aa22:	b2da      	uxtb	r2, r3
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801aa2a:	6878      	ldr	r0, [r7, #4]
 801aa2c:	f7ff fc7a 	bl	801a324 <tcp_output>
}
 801aa30:	bf00      	nop
 801aa32:	3708      	adds	r7, #8
 801aa34:	46bd      	mov	sp, r7
 801aa36:	bd80      	pop	{r7, pc}
 801aa38:	080209a4 	.word	0x080209a4
 801aa3c:	08021004 	.word	0x08021004
 801aa40:	080209f8 	.word	0x080209f8

0801aa44 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801aa44:	b580      	push	{r7, lr}
 801aa46:	b082      	sub	sp, #8
 801aa48:	af00      	add	r7, sp, #0
 801aa4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d106      	bne.n	801aa60 <tcp_rexmit_rto+0x1c>
 801aa52:	4b0a      	ldr	r3, [pc, #40]	; (801aa7c <tcp_rexmit_rto+0x38>)
 801aa54:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801aa58:	4909      	ldr	r1, [pc, #36]	; (801aa80 <tcp_rexmit_rto+0x3c>)
 801aa5a:	480a      	ldr	r0, [pc, #40]	; (801aa84 <tcp_rexmit_rto+0x40>)
 801aa5c:	f003 fb32 	bl	801e0c4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801aa60:	6878      	ldr	r0, [r7, #4]
 801aa62:	f7ff ff57 	bl	801a914 <tcp_rexmit_rto_prepare>
 801aa66:	4603      	mov	r3, r0
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	d102      	bne.n	801aa72 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801aa6c:	6878      	ldr	r0, [r7, #4]
 801aa6e:	f7ff ffc1 	bl	801a9f4 <tcp_rexmit_rto_commit>
  }
}
 801aa72:	bf00      	nop
 801aa74:	3708      	adds	r7, #8
 801aa76:	46bd      	mov	sp, r7
 801aa78:	bd80      	pop	{r7, pc}
 801aa7a:	bf00      	nop
 801aa7c:	080209a4 	.word	0x080209a4
 801aa80:	08021028 	.word	0x08021028
 801aa84:	080209f8 	.word	0x080209f8

0801aa88 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801aa88:	b590      	push	{r4, r7, lr}
 801aa8a:	b085      	sub	sp, #20
 801aa8c:	af00      	add	r7, sp, #0
 801aa8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d106      	bne.n	801aaa4 <tcp_rexmit+0x1c>
 801aa96:	4b2f      	ldr	r3, [pc, #188]	; (801ab54 <tcp_rexmit+0xcc>)
 801aa98:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801aa9c:	492e      	ldr	r1, [pc, #184]	; (801ab58 <tcp_rexmit+0xd0>)
 801aa9e:	482f      	ldr	r0, [pc, #188]	; (801ab5c <tcp_rexmit+0xd4>)
 801aaa0:	f003 fb10 	bl	801e0c4 <iprintf>

  if (pcb->unacked == NULL) {
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d102      	bne.n	801aab2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801aaac:	f06f 0305 	mvn.w	r3, #5
 801aab0:	e04c      	b.n	801ab4c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aab6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801aab8:	68b8      	ldr	r0, [r7, #8]
 801aaba:	f7ff fe2b 	bl	801a714 <tcp_output_segment_busy>
 801aabe:	4603      	mov	r3, r0
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d002      	beq.n	801aaca <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801aac4:	f06f 0305 	mvn.w	r3, #5
 801aac8:	e040      	b.n	801ab4c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801aaca:	68bb      	ldr	r3, [r7, #8]
 801aacc:	681a      	ldr	r2, [r3, #0]
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	336c      	adds	r3, #108	; 0x6c
 801aad6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801aad8:	e002      	b.n	801aae0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801aada:	68fb      	ldr	r3, [r7, #12]
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801aae0:	68fb      	ldr	r3, [r7, #12]
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	d011      	beq.n	801ab0c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	681b      	ldr	r3, [r3, #0]
 801aaec:	68db      	ldr	r3, [r3, #12]
 801aaee:	685b      	ldr	r3, [r3, #4]
 801aaf0:	4618      	mov	r0, r3
 801aaf2:	f7f8 fcd8 	bl	80134a6 <lwip_htonl>
 801aaf6:	4604      	mov	r4, r0
 801aaf8:	68bb      	ldr	r3, [r7, #8]
 801aafa:	68db      	ldr	r3, [r3, #12]
 801aafc:	685b      	ldr	r3, [r3, #4]
 801aafe:	4618      	mov	r0, r3
 801ab00:	f7f8 fcd1 	bl	80134a6 <lwip_htonl>
 801ab04:	4603      	mov	r3, r0
 801ab06:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	dbe6      	blt.n	801aada <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801ab0c:	68fb      	ldr	r3, [r7, #12]
 801ab0e:	681a      	ldr	r2, [r3, #0]
 801ab10:	68bb      	ldr	r3, [r7, #8]
 801ab12:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801ab14:	68fb      	ldr	r3, [r7, #12]
 801ab16:	68ba      	ldr	r2, [r7, #8]
 801ab18:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801ab1a:	68bb      	ldr	r3, [r7, #8]
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d103      	bne.n	801ab2a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	2200      	movs	r2, #0
 801ab26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ab30:	2bff      	cmp	r3, #255	; 0xff
 801ab32:	d007      	beq.n	801ab44 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ab3a:	3301      	adds	r3, #1
 801ab3c:	b2da      	uxtb	r2, r3
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	2200      	movs	r2, #0
 801ab48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801ab4a:	2300      	movs	r3, #0
}
 801ab4c:	4618      	mov	r0, r3
 801ab4e:	3714      	adds	r7, #20
 801ab50:	46bd      	mov	sp, r7
 801ab52:	bd90      	pop	{r4, r7, pc}
 801ab54:	080209a4 	.word	0x080209a4
 801ab58:	08021044 	.word	0x08021044
 801ab5c:	080209f8 	.word	0x080209f8

0801ab60 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801ab60:	b580      	push	{r7, lr}
 801ab62:	b082      	sub	sp, #8
 801ab64:	af00      	add	r7, sp, #0
 801ab66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	d106      	bne.n	801ab7c <tcp_rexmit_fast+0x1c>
 801ab6e:	4b2f      	ldr	r3, [pc, #188]	; (801ac2c <tcp_rexmit_fast+0xcc>)
 801ab70:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801ab74:	492e      	ldr	r1, [pc, #184]	; (801ac30 <tcp_rexmit_fast+0xd0>)
 801ab76:	482f      	ldr	r0, [pc, #188]	; (801ac34 <tcp_rexmit_fast+0xd4>)
 801ab78:	f003 faa4 	bl	801e0c4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d04f      	beq.n	801ac24 <tcp_rexmit_fast+0xc4>
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	8b5b      	ldrh	r3, [r3, #26]
 801ab88:	f003 0304 	and.w	r3, r3, #4
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	d149      	bne.n	801ac24 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801ab90:	6878      	ldr	r0, [r7, #4]
 801ab92:	f7ff ff79 	bl	801aa88 <tcp_rexmit>
 801ab96:	4603      	mov	r3, r0
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d143      	bne.n	801ac24 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801aba8:	429a      	cmp	r2, r3
 801abaa:	d208      	bcs.n	801abbe <tcp_rexmit_fast+0x5e>
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	da00      	bge.n	801abb8 <tcp_rexmit_fast+0x58>
 801abb6:	3301      	adds	r3, #1
 801abb8:	105b      	asrs	r3, r3, #1
 801abba:	b29b      	uxth	r3, r3
 801abbc:	e007      	b.n	801abce <tcp_rexmit_fast+0x6e>
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	da00      	bge.n	801abca <tcp_rexmit_fast+0x6a>
 801abc8:	3301      	adds	r3, #1
 801abca:	105b      	asrs	r3, r3, #1
 801abcc:	b29b      	uxth	r3, r3
 801abce:	687a      	ldr	r2, [r7, #4]
 801abd0:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801abda:	461a      	mov	r2, r3
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801abe0:	005b      	lsls	r3, r3, #1
 801abe2:	429a      	cmp	r2, r3
 801abe4:	d206      	bcs.n	801abf4 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801abea:	005b      	lsls	r3, r3, #1
 801abec:	b29a      	uxth	r2, r3
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801abfe:	4619      	mov	r1, r3
 801ac00:	0049      	lsls	r1, r1, #1
 801ac02:	440b      	add	r3, r1
 801ac04:	b29b      	uxth	r3, r3
 801ac06:	4413      	add	r3, r2
 801ac08:	b29a      	uxth	r2, r3
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	8b5b      	ldrh	r3, [r3, #26]
 801ac14:	f043 0304 	orr.w	r3, r3, #4
 801ac18:	b29a      	uxth	r2, r3
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	2200      	movs	r2, #0
 801ac22:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801ac24:	bf00      	nop
 801ac26:	3708      	adds	r7, #8
 801ac28:	46bd      	mov	sp, r7
 801ac2a:	bd80      	pop	{r7, pc}
 801ac2c:	080209a4 	.word	0x080209a4
 801ac30:	0802105c 	.word	0x0802105c
 801ac34:	080209f8 	.word	0x080209f8

0801ac38 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801ac38:	b580      	push	{r7, lr}
 801ac3a:	b086      	sub	sp, #24
 801ac3c:	af00      	add	r7, sp, #0
 801ac3e:	60f8      	str	r0, [r7, #12]
 801ac40:	607b      	str	r3, [r7, #4]
 801ac42:	460b      	mov	r3, r1
 801ac44:	817b      	strh	r3, [r7, #10]
 801ac46:	4613      	mov	r3, r2
 801ac48:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ac4a:	897a      	ldrh	r2, [r7, #10]
 801ac4c:	893b      	ldrh	r3, [r7, #8]
 801ac4e:	4413      	add	r3, r2
 801ac50:	b29b      	uxth	r3, r3
 801ac52:	3314      	adds	r3, #20
 801ac54:	b29b      	uxth	r3, r3
 801ac56:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ac5a:	4619      	mov	r1, r3
 801ac5c:	2022      	movs	r0, #34	; 0x22
 801ac5e:	f7f9 fd0b 	bl	8014678 <pbuf_alloc>
 801ac62:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801ac64:	697b      	ldr	r3, [r7, #20]
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	d04e      	beq.n	801ad08 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801ac6a:	697b      	ldr	r3, [r7, #20]
 801ac6c:	895b      	ldrh	r3, [r3, #10]
 801ac6e:	461a      	mov	r2, r3
 801ac70:	897b      	ldrh	r3, [r7, #10]
 801ac72:	3314      	adds	r3, #20
 801ac74:	429a      	cmp	r2, r3
 801ac76:	da06      	bge.n	801ac86 <tcp_output_alloc_header_common+0x4e>
 801ac78:	4b26      	ldr	r3, [pc, #152]	; (801ad14 <tcp_output_alloc_header_common+0xdc>)
 801ac7a:	f240 7224 	movw	r2, #1828	; 0x724
 801ac7e:	4926      	ldr	r1, [pc, #152]	; (801ad18 <tcp_output_alloc_header_common+0xe0>)
 801ac80:	4826      	ldr	r0, [pc, #152]	; (801ad1c <tcp_output_alloc_header_common+0xe4>)
 801ac82:	f003 fa1f 	bl	801e0c4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801ac86:	697b      	ldr	r3, [r7, #20]
 801ac88:	685b      	ldr	r3, [r3, #4]
 801ac8a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801ac8c:	8c3b      	ldrh	r3, [r7, #32]
 801ac8e:	4618      	mov	r0, r3
 801ac90:	f7f8 fbf4 	bl	801347c <lwip_htons>
 801ac94:	4603      	mov	r3, r0
 801ac96:	461a      	mov	r2, r3
 801ac98:	693b      	ldr	r3, [r7, #16]
 801ac9a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801ac9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ac9e:	4618      	mov	r0, r3
 801aca0:	f7f8 fbec 	bl	801347c <lwip_htons>
 801aca4:	4603      	mov	r3, r0
 801aca6:	461a      	mov	r2, r3
 801aca8:	693b      	ldr	r3, [r7, #16]
 801acaa:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801acac:	693b      	ldr	r3, [r7, #16]
 801acae:	687a      	ldr	r2, [r7, #4]
 801acb0:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801acb2:	68f8      	ldr	r0, [r7, #12]
 801acb4:	f7f8 fbf7 	bl	80134a6 <lwip_htonl>
 801acb8:	4602      	mov	r2, r0
 801acba:	693b      	ldr	r3, [r7, #16]
 801acbc:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801acbe:	897b      	ldrh	r3, [r7, #10]
 801acc0:	089b      	lsrs	r3, r3, #2
 801acc2:	b29b      	uxth	r3, r3
 801acc4:	3305      	adds	r3, #5
 801acc6:	b29b      	uxth	r3, r3
 801acc8:	031b      	lsls	r3, r3, #12
 801acca:	b29a      	uxth	r2, r3
 801accc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801acd0:	b29b      	uxth	r3, r3
 801acd2:	4313      	orrs	r3, r2
 801acd4:	b29b      	uxth	r3, r3
 801acd6:	4618      	mov	r0, r3
 801acd8:	f7f8 fbd0 	bl	801347c <lwip_htons>
 801acdc:	4603      	mov	r3, r0
 801acde:	461a      	mov	r2, r3
 801ace0:	693b      	ldr	r3, [r7, #16]
 801ace2:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801ace4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ace6:	4618      	mov	r0, r3
 801ace8:	f7f8 fbc8 	bl	801347c <lwip_htons>
 801acec:	4603      	mov	r3, r0
 801acee:	461a      	mov	r2, r3
 801acf0:	693b      	ldr	r3, [r7, #16]
 801acf2:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801acf4:	693b      	ldr	r3, [r7, #16]
 801acf6:	2200      	movs	r2, #0
 801acf8:	741a      	strb	r2, [r3, #16]
 801acfa:	2200      	movs	r2, #0
 801acfc:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801acfe:	693b      	ldr	r3, [r7, #16]
 801ad00:	2200      	movs	r2, #0
 801ad02:	749a      	strb	r2, [r3, #18]
 801ad04:	2200      	movs	r2, #0
 801ad06:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801ad08:	697b      	ldr	r3, [r7, #20]
}
 801ad0a:	4618      	mov	r0, r3
 801ad0c:	3718      	adds	r7, #24
 801ad0e:	46bd      	mov	sp, r7
 801ad10:	bd80      	pop	{r7, pc}
 801ad12:	bf00      	nop
 801ad14:	080209a4 	.word	0x080209a4
 801ad18:	0802107c 	.word	0x0802107c
 801ad1c:	080209f8 	.word	0x080209f8

0801ad20 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801ad20:	b5b0      	push	{r4, r5, r7, lr}
 801ad22:	b08a      	sub	sp, #40	; 0x28
 801ad24:	af04      	add	r7, sp, #16
 801ad26:	60f8      	str	r0, [r7, #12]
 801ad28:	607b      	str	r3, [r7, #4]
 801ad2a:	460b      	mov	r3, r1
 801ad2c:	817b      	strh	r3, [r7, #10]
 801ad2e:	4613      	mov	r3, r2
 801ad30:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	d106      	bne.n	801ad46 <tcp_output_alloc_header+0x26>
 801ad38:	4b15      	ldr	r3, [pc, #84]	; (801ad90 <tcp_output_alloc_header+0x70>)
 801ad3a:	f240 7242 	movw	r2, #1858	; 0x742
 801ad3e:	4915      	ldr	r1, [pc, #84]	; (801ad94 <tcp_output_alloc_header+0x74>)
 801ad40:	4815      	ldr	r0, [pc, #84]	; (801ad98 <tcp_output_alloc_header+0x78>)
 801ad42:	f003 f9bf 	bl	801e0c4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801ad46:	68fb      	ldr	r3, [r7, #12]
 801ad48:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	8adb      	ldrh	r3, [r3, #22]
 801ad4e:	68fa      	ldr	r2, [r7, #12]
 801ad50:	8b12      	ldrh	r2, [r2, #24]
 801ad52:	68f9      	ldr	r1, [r7, #12]
 801ad54:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801ad56:	893d      	ldrh	r5, [r7, #8]
 801ad58:	897c      	ldrh	r4, [r7, #10]
 801ad5a:	9103      	str	r1, [sp, #12]
 801ad5c:	2110      	movs	r1, #16
 801ad5e:	9102      	str	r1, [sp, #8]
 801ad60:	9201      	str	r2, [sp, #4]
 801ad62:	9300      	str	r3, [sp, #0]
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	462a      	mov	r2, r5
 801ad68:	4621      	mov	r1, r4
 801ad6a:	f7ff ff65 	bl	801ac38 <tcp_output_alloc_header_common>
 801ad6e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801ad70:	697b      	ldr	r3, [r7, #20]
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d006      	beq.n	801ad84 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad7a:	68fa      	ldr	r2, [r7, #12]
 801ad7c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801ad7e:	441a      	add	r2, r3
 801ad80:	68fb      	ldr	r3, [r7, #12]
 801ad82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801ad84:	697b      	ldr	r3, [r7, #20]
}
 801ad86:	4618      	mov	r0, r3
 801ad88:	3718      	adds	r7, #24
 801ad8a:	46bd      	mov	sp, r7
 801ad8c:	bdb0      	pop	{r4, r5, r7, pc}
 801ad8e:	bf00      	nop
 801ad90:	080209a4 	.word	0x080209a4
 801ad94:	080210ac 	.word	0x080210ac
 801ad98:	080209f8 	.word	0x080209f8

0801ad9c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801ad9c:	b580      	push	{r7, lr}
 801ad9e:	b088      	sub	sp, #32
 801ada0:	af00      	add	r7, sp, #0
 801ada2:	60f8      	str	r0, [r7, #12]
 801ada4:	60b9      	str	r1, [r7, #8]
 801ada6:	4611      	mov	r1, r2
 801ada8:	461a      	mov	r2, r3
 801adaa:	460b      	mov	r3, r1
 801adac:	71fb      	strb	r3, [r7, #7]
 801adae:	4613      	mov	r3, r2
 801adb0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801adb2:	2300      	movs	r3, #0
 801adb4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801adb6:	68bb      	ldr	r3, [r7, #8]
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d106      	bne.n	801adca <tcp_output_fill_options+0x2e>
 801adbc:	4b13      	ldr	r3, [pc, #76]	; (801ae0c <tcp_output_fill_options+0x70>)
 801adbe:	f240 7256 	movw	r2, #1878	; 0x756
 801adc2:	4913      	ldr	r1, [pc, #76]	; (801ae10 <tcp_output_fill_options+0x74>)
 801adc4:	4813      	ldr	r0, [pc, #76]	; (801ae14 <tcp_output_fill_options+0x78>)
 801adc6:	f003 f97d 	bl	801e0c4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801adca:	68bb      	ldr	r3, [r7, #8]
 801adcc:	685b      	ldr	r3, [r3, #4]
 801adce:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801add0:	69bb      	ldr	r3, [r7, #24]
 801add2:	3314      	adds	r3, #20
 801add4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801add6:	69bb      	ldr	r3, [r7, #24]
 801add8:	f103 0214 	add.w	r2, r3, #20
 801addc:	8bfb      	ldrh	r3, [r7, #30]
 801adde:	009b      	lsls	r3, r3, #2
 801ade0:	4619      	mov	r1, r3
 801ade2:	79fb      	ldrb	r3, [r7, #7]
 801ade4:	009b      	lsls	r3, r3, #2
 801ade6:	f003 0304 	and.w	r3, r3, #4
 801adea:	440b      	add	r3, r1
 801adec:	4413      	add	r3, r2
 801adee:	697a      	ldr	r2, [r7, #20]
 801adf0:	429a      	cmp	r2, r3
 801adf2:	d006      	beq.n	801ae02 <tcp_output_fill_options+0x66>
 801adf4:	4b05      	ldr	r3, [pc, #20]	; (801ae0c <tcp_output_fill_options+0x70>)
 801adf6:	f240 7275 	movw	r2, #1909	; 0x775
 801adfa:	4907      	ldr	r1, [pc, #28]	; (801ae18 <tcp_output_fill_options+0x7c>)
 801adfc:	4805      	ldr	r0, [pc, #20]	; (801ae14 <tcp_output_fill_options+0x78>)
 801adfe:	f003 f961 	bl	801e0c4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801ae02:	bf00      	nop
 801ae04:	3720      	adds	r7, #32
 801ae06:	46bd      	mov	sp, r7
 801ae08:	bd80      	pop	{r7, pc}
 801ae0a:	bf00      	nop
 801ae0c:	080209a4 	.word	0x080209a4
 801ae10:	080210d4 	.word	0x080210d4
 801ae14:	080209f8 	.word	0x080209f8
 801ae18:	08020fcc 	.word	0x08020fcc

0801ae1c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801ae1c:	b580      	push	{r7, lr}
 801ae1e:	b08a      	sub	sp, #40	; 0x28
 801ae20:	af04      	add	r7, sp, #16
 801ae22:	60f8      	str	r0, [r7, #12]
 801ae24:	60b9      	str	r1, [r7, #8]
 801ae26:	607a      	str	r2, [r7, #4]
 801ae28:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801ae2a:	68bb      	ldr	r3, [r7, #8]
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	d106      	bne.n	801ae3e <tcp_output_control_segment+0x22>
 801ae30:	4b1c      	ldr	r3, [pc, #112]	; (801aea4 <tcp_output_control_segment+0x88>)
 801ae32:	f240 7287 	movw	r2, #1927	; 0x787
 801ae36:	491c      	ldr	r1, [pc, #112]	; (801aea8 <tcp_output_control_segment+0x8c>)
 801ae38:	481c      	ldr	r0, [pc, #112]	; (801aeac <tcp_output_control_segment+0x90>)
 801ae3a:	f003 f943 	bl	801e0c4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801ae3e:	683a      	ldr	r2, [r7, #0]
 801ae40:	6879      	ldr	r1, [r7, #4]
 801ae42:	68f8      	ldr	r0, [r7, #12]
 801ae44:	f7fe fad4 	bl	80193f0 <tcp_route>
 801ae48:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801ae4a:	693b      	ldr	r3, [r7, #16]
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	d102      	bne.n	801ae56 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801ae50:	23fc      	movs	r3, #252	; 0xfc
 801ae52:	75fb      	strb	r3, [r7, #23]
 801ae54:	e01c      	b.n	801ae90 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d006      	beq.n	801ae6a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	7adb      	ldrb	r3, [r3, #11]
 801ae60:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801ae62:	68fb      	ldr	r3, [r7, #12]
 801ae64:	7a9b      	ldrb	r3, [r3, #10]
 801ae66:	757b      	strb	r3, [r7, #21]
 801ae68:	e003      	b.n	801ae72 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801ae6a:	23ff      	movs	r3, #255	; 0xff
 801ae6c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801ae6e:	2300      	movs	r3, #0
 801ae70:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801ae72:	7dba      	ldrb	r2, [r7, #22]
 801ae74:	693b      	ldr	r3, [r7, #16]
 801ae76:	9302      	str	r3, [sp, #8]
 801ae78:	2306      	movs	r3, #6
 801ae7a:	9301      	str	r3, [sp, #4]
 801ae7c:	7d7b      	ldrb	r3, [r7, #21]
 801ae7e:	9300      	str	r3, [sp, #0]
 801ae80:	4613      	mov	r3, r2
 801ae82:	683a      	ldr	r2, [r7, #0]
 801ae84:	6879      	ldr	r1, [r7, #4]
 801ae86:	68b8      	ldr	r0, [r7, #8]
 801ae88:	f001 ff9c 	bl	801cdc4 <ip4_output_if>
 801ae8c:	4603      	mov	r3, r0
 801ae8e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801ae90:	68b8      	ldr	r0, [r7, #8]
 801ae92:	f7f9 fed1 	bl	8014c38 <pbuf_free>
  return err;
 801ae96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	3718      	adds	r7, #24
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	bd80      	pop	{r7, pc}
 801aea2:	bf00      	nop
 801aea4:	080209a4 	.word	0x080209a4
 801aea8:	080210fc 	.word	0x080210fc
 801aeac:	080209f8 	.word	0x080209f8

0801aeb0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801aeb0:	b590      	push	{r4, r7, lr}
 801aeb2:	b08b      	sub	sp, #44	; 0x2c
 801aeb4:	af04      	add	r7, sp, #16
 801aeb6:	60f8      	str	r0, [r7, #12]
 801aeb8:	60b9      	str	r1, [r7, #8]
 801aeba:	607a      	str	r2, [r7, #4]
 801aebc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801aebe:	683b      	ldr	r3, [r7, #0]
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	d106      	bne.n	801aed2 <tcp_rst+0x22>
 801aec4:	4b1f      	ldr	r3, [pc, #124]	; (801af44 <tcp_rst+0x94>)
 801aec6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801aeca:	491f      	ldr	r1, [pc, #124]	; (801af48 <tcp_rst+0x98>)
 801aecc:	481f      	ldr	r0, [pc, #124]	; (801af4c <tcp_rst+0x9c>)
 801aece:	f003 f8f9 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801aed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d106      	bne.n	801aee6 <tcp_rst+0x36>
 801aed8:	4b1a      	ldr	r3, [pc, #104]	; (801af44 <tcp_rst+0x94>)
 801aeda:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801aede:	491c      	ldr	r1, [pc, #112]	; (801af50 <tcp_rst+0xa0>)
 801aee0:	481a      	ldr	r0, [pc, #104]	; (801af4c <tcp_rst+0x9c>)
 801aee2:	f003 f8ef 	bl	801e0c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801aee6:	2300      	movs	r3, #0
 801aee8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801aeea:	f246 0308 	movw	r3, #24584	; 0x6008
 801aeee:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801aef0:	7dfb      	ldrb	r3, [r7, #23]
 801aef2:	b29c      	uxth	r4, r3
 801aef4:	68b8      	ldr	r0, [r7, #8]
 801aef6:	f7f8 fad6 	bl	80134a6 <lwip_htonl>
 801aefa:	4602      	mov	r2, r0
 801aefc:	8abb      	ldrh	r3, [r7, #20]
 801aefe:	9303      	str	r3, [sp, #12]
 801af00:	2314      	movs	r3, #20
 801af02:	9302      	str	r3, [sp, #8]
 801af04:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801af06:	9301      	str	r3, [sp, #4]
 801af08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801af0a:	9300      	str	r3, [sp, #0]
 801af0c:	4613      	mov	r3, r2
 801af0e:	2200      	movs	r2, #0
 801af10:	4621      	mov	r1, r4
 801af12:	6878      	ldr	r0, [r7, #4]
 801af14:	f7ff fe90 	bl	801ac38 <tcp_output_alloc_header_common>
 801af18:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801af1a:	693b      	ldr	r3, [r7, #16]
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	d00c      	beq.n	801af3a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801af20:	7dfb      	ldrb	r3, [r7, #23]
 801af22:	2200      	movs	r2, #0
 801af24:	6939      	ldr	r1, [r7, #16]
 801af26:	68f8      	ldr	r0, [r7, #12]
 801af28:	f7ff ff38 	bl	801ad9c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801af2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af2e:	683a      	ldr	r2, [r7, #0]
 801af30:	6939      	ldr	r1, [r7, #16]
 801af32:	68f8      	ldr	r0, [r7, #12]
 801af34:	f7ff ff72 	bl	801ae1c <tcp_output_control_segment>
 801af38:	e000      	b.n	801af3c <tcp_rst+0x8c>
    return;
 801af3a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801af3c:	371c      	adds	r7, #28
 801af3e:	46bd      	mov	sp, r7
 801af40:	bd90      	pop	{r4, r7, pc}
 801af42:	bf00      	nop
 801af44:	080209a4 	.word	0x080209a4
 801af48:	08021128 	.word	0x08021128
 801af4c:	080209f8 	.word	0x080209f8
 801af50:	08021144 	.word	0x08021144

0801af54 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801af54:	b590      	push	{r4, r7, lr}
 801af56:	b087      	sub	sp, #28
 801af58:	af00      	add	r7, sp, #0
 801af5a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801af5c:	2300      	movs	r3, #0
 801af5e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801af60:	2300      	movs	r3, #0
 801af62:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	2b00      	cmp	r3, #0
 801af68:	d106      	bne.n	801af78 <tcp_send_empty_ack+0x24>
 801af6a:	4b28      	ldr	r3, [pc, #160]	; (801b00c <tcp_send_empty_ack+0xb8>)
 801af6c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801af70:	4927      	ldr	r1, [pc, #156]	; (801b010 <tcp_send_empty_ack+0xbc>)
 801af72:	4828      	ldr	r0, [pc, #160]	; (801b014 <tcp_send_empty_ack+0xc0>)
 801af74:	f003 f8a6 	bl	801e0c4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801af78:	7dfb      	ldrb	r3, [r7, #23]
 801af7a:	009b      	lsls	r3, r3, #2
 801af7c:	b2db      	uxtb	r3, r3
 801af7e:	f003 0304 	and.w	r3, r3, #4
 801af82:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801af84:	7d7b      	ldrb	r3, [r7, #21]
 801af86:	b29c      	uxth	r4, r3
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801af8c:	4618      	mov	r0, r3
 801af8e:	f7f8 fa8a 	bl	80134a6 <lwip_htonl>
 801af92:	4603      	mov	r3, r0
 801af94:	2200      	movs	r2, #0
 801af96:	4621      	mov	r1, r4
 801af98:	6878      	ldr	r0, [r7, #4]
 801af9a:	f7ff fec1 	bl	801ad20 <tcp_output_alloc_header>
 801af9e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801afa0:	693b      	ldr	r3, [r7, #16]
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d109      	bne.n	801afba <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	8b5b      	ldrh	r3, [r3, #26]
 801afaa:	f043 0303 	orr.w	r3, r3, #3
 801afae:	b29a      	uxth	r2, r3
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801afb4:	f06f 0301 	mvn.w	r3, #1
 801afb8:	e023      	b.n	801b002 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801afba:	7dbb      	ldrb	r3, [r7, #22]
 801afbc:	7dfa      	ldrb	r2, [r7, #23]
 801afbe:	6939      	ldr	r1, [r7, #16]
 801afc0:	6878      	ldr	r0, [r7, #4]
 801afc2:	f7ff feeb 	bl	801ad9c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801afc6:	687a      	ldr	r2, [r7, #4]
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	3304      	adds	r3, #4
 801afcc:	6939      	ldr	r1, [r7, #16]
 801afce:	6878      	ldr	r0, [r7, #4]
 801afd0:	f7ff ff24 	bl	801ae1c <tcp_output_control_segment>
 801afd4:	4603      	mov	r3, r0
 801afd6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801afd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801afdc:	2b00      	cmp	r3, #0
 801afde:	d007      	beq.n	801aff0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	8b5b      	ldrh	r3, [r3, #26]
 801afe4:	f043 0303 	orr.w	r3, r3, #3
 801afe8:	b29a      	uxth	r2, r3
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	835a      	strh	r2, [r3, #26]
 801afee:	e006      	b.n	801affe <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	8b5b      	ldrh	r3, [r3, #26]
 801aff4:	f023 0303 	bic.w	r3, r3, #3
 801aff8:	b29a      	uxth	r2, r3
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801affe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b002:	4618      	mov	r0, r3
 801b004:	371c      	adds	r7, #28
 801b006:	46bd      	mov	sp, r7
 801b008:	bd90      	pop	{r4, r7, pc}
 801b00a:	bf00      	nop
 801b00c:	080209a4 	.word	0x080209a4
 801b010:	08021160 	.word	0x08021160
 801b014:	080209f8 	.word	0x080209f8

0801b018 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b018:	b590      	push	{r4, r7, lr}
 801b01a:	b087      	sub	sp, #28
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b020:	2300      	movs	r3, #0
 801b022:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	2b00      	cmp	r3, #0
 801b028:	d106      	bne.n	801b038 <tcp_keepalive+0x20>
 801b02a:	4b18      	ldr	r3, [pc, #96]	; (801b08c <tcp_keepalive+0x74>)
 801b02c:	f640 0224 	movw	r2, #2084	; 0x824
 801b030:	4917      	ldr	r1, [pc, #92]	; (801b090 <tcp_keepalive+0x78>)
 801b032:	4818      	ldr	r0, [pc, #96]	; (801b094 <tcp_keepalive+0x7c>)
 801b034:	f003 f846 	bl	801e0c4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b038:	7dfb      	ldrb	r3, [r7, #23]
 801b03a:	b29c      	uxth	r4, r3
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b040:	3b01      	subs	r3, #1
 801b042:	4618      	mov	r0, r3
 801b044:	f7f8 fa2f 	bl	80134a6 <lwip_htonl>
 801b048:	4603      	mov	r3, r0
 801b04a:	2200      	movs	r2, #0
 801b04c:	4621      	mov	r1, r4
 801b04e:	6878      	ldr	r0, [r7, #4]
 801b050:	f7ff fe66 	bl	801ad20 <tcp_output_alloc_header>
 801b054:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b056:	693b      	ldr	r3, [r7, #16]
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d102      	bne.n	801b062 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b05c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b060:	e010      	b.n	801b084 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b062:	7dfb      	ldrb	r3, [r7, #23]
 801b064:	2200      	movs	r2, #0
 801b066:	6939      	ldr	r1, [r7, #16]
 801b068:	6878      	ldr	r0, [r7, #4]
 801b06a:	f7ff fe97 	bl	801ad9c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b06e:	687a      	ldr	r2, [r7, #4]
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	3304      	adds	r3, #4
 801b074:	6939      	ldr	r1, [r7, #16]
 801b076:	6878      	ldr	r0, [r7, #4]
 801b078:	f7ff fed0 	bl	801ae1c <tcp_output_control_segment>
 801b07c:	4603      	mov	r3, r0
 801b07e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b080:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b084:	4618      	mov	r0, r3
 801b086:	371c      	adds	r7, #28
 801b088:	46bd      	mov	sp, r7
 801b08a:	bd90      	pop	{r4, r7, pc}
 801b08c:	080209a4 	.word	0x080209a4
 801b090:	08021180 	.word	0x08021180
 801b094:	080209f8 	.word	0x080209f8

0801b098 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b098:	b590      	push	{r4, r7, lr}
 801b09a:	b08b      	sub	sp, #44	; 0x2c
 801b09c:	af00      	add	r7, sp, #0
 801b09e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b0a0:	2300      	movs	r3, #0
 801b0a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	d106      	bne.n	801b0ba <tcp_zero_window_probe+0x22>
 801b0ac:	4b4c      	ldr	r3, [pc, #304]	; (801b1e0 <tcp_zero_window_probe+0x148>)
 801b0ae:	f640 024f 	movw	r2, #2127	; 0x84f
 801b0b2:	494c      	ldr	r1, [pc, #304]	; (801b1e4 <tcp_zero_window_probe+0x14c>)
 801b0b4:	484c      	ldr	r0, [pc, #304]	; (801b1e8 <tcp_zero_window_probe+0x150>)
 801b0b6:	f003 f805 	bl	801e0c4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b0be:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801b0c0:	6a3b      	ldr	r3, [r7, #32]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d101      	bne.n	801b0ca <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801b0c6:	2300      	movs	r3, #0
 801b0c8:	e086      	b.n	801b1d8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b0d0:	2bff      	cmp	r3, #255	; 0xff
 801b0d2:	d007      	beq.n	801b0e4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b0da:	3301      	adds	r3, #1
 801b0dc:	b2da      	uxtb	r2, r3
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b0e4:	6a3b      	ldr	r3, [r7, #32]
 801b0e6:	68db      	ldr	r3, [r3, #12]
 801b0e8:	899b      	ldrh	r3, [r3, #12]
 801b0ea:	b29b      	uxth	r3, r3
 801b0ec:	4618      	mov	r0, r3
 801b0ee:	f7f8 f9c5 	bl	801347c <lwip_htons>
 801b0f2:	4603      	mov	r3, r0
 801b0f4:	b2db      	uxtb	r3, r3
 801b0f6:	f003 0301 	and.w	r3, r3, #1
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d005      	beq.n	801b10a <tcp_zero_window_probe+0x72>
 801b0fe:	6a3b      	ldr	r3, [r7, #32]
 801b100:	891b      	ldrh	r3, [r3, #8]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d101      	bne.n	801b10a <tcp_zero_window_probe+0x72>
 801b106:	2301      	movs	r3, #1
 801b108:	e000      	b.n	801b10c <tcp_zero_window_probe+0x74>
 801b10a:	2300      	movs	r3, #0
 801b10c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b10e:	7ffb      	ldrb	r3, [r7, #31]
 801b110:	2b00      	cmp	r3, #0
 801b112:	bf0c      	ite	eq
 801b114:	2301      	moveq	r3, #1
 801b116:	2300      	movne	r3, #0
 801b118:	b2db      	uxtb	r3, r3
 801b11a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b11c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b120:	b299      	uxth	r1, r3
 801b122:	6a3b      	ldr	r3, [r7, #32]
 801b124:	68db      	ldr	r3, [r3, #12]
 801b126:	685b      	ldr	r3, [r3, #4]
 801b128:	8bba      	ldrh	r2, [r7, #28]
 801b12a:	6878      	ldr	r0, [r7, #4]
 801b12c:	f7ff fdf8 	bl	801ad20 <tcp_output_alloc_header>
 801b130:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801b132:	69bb      	ldr	r3, [r7, #24]
 801b134:	2b00      	cmp	r3, #0
 801b136:	d102      	bne.n	801b13e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b13c:	e04c      	b.n	801b1d8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b13e:	69bb      	ldr	r3, [r7, #24]
 801b140:	685b      	ldr	r3, [r3, #4]
 801b142:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801b144:	7ffb      	ldrb	r3, [r7, #31]
 801b146:	2b00      	cmp	r3, #0
 801b148:	d011      	beq.n	801b16e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b14a:	697b      	ldr	r3, [r7, #20]
 801b14c:	899b      	ldrh	r3, [r3, #12]
 801b14e:	b29b      	uxth	r3, r3
 801b150:	b21b      	sxth	r3, r3
 801b152:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b156:	b21c      	sxth	r4, r3
 801b158:	2011      	movs	r0, #17
 801b15a:	f7f8 f98f 	bl	801347c <lwip_htons>
 801b15e:	4603      	mov	r3, r0
 801b160:	b21b      	sxth	r3, r3
 801b162:	4323      	orrs	r3, r4
 801b164:	b21b      	sxth	r3, r3
 801b166:	b29a      	uxth	r2, r3
 801b168:	697b      	ldr	r3, [r7, #20]
 801b16a:	819a      	strh	r2, [r3, #12]
 801b16c:	e010      	b.n	801b190 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b16e:	69bb      	ldr	r3, [r7, #24]
 801b170:	685b      	ldr	r3, [r3, #4]
 801b172:	3314      	adds	r3, #20
 801b174:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b176:	6a3b      	ldr	r3, [r7, #32]
 801b178:	6858      	ldr	r0, [r3, #4]
 801b17a:	6a3b      	ldr	r3, [r7, #32]
 801b17c:	685b      	ldr	r3, [r3, #4]
 801b17e:	891a      	ldrh	r2, [r3, #8]
 801b180:	6a3b      	ldr	r3, [r7, #32]
 801b182:	891b      	ldrh	r3, [r3, #8]
 801b184:	1ad3      	subs	r3, r2, r3
 801b186:	b29b      	uxth	r3, r3
 801b188:	2201      	movs	r2, #1
 801b18a:	6939      	ldr	r1, [r7, #16]
 801b18c:	f7f9 ff4a 	bl	8015024 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b190:	6a3b      	ldr	r3, [r7, #32]
 801b192:	68db      	ldr	r3, [r3, #12]
 801b194:	685b      	ldr	r3, [r3, #4]
 801b196:	4618      	mov	r0, r3
 801b198:	f7f8 f985 	bl	80134a6 <lwip_htonl>
 801b19c:	4603      	mov	r3, r0
 801b19e:	3301      	adds	r3, #1
 801b1a0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b1a6:	68fb      	ldr	r3, [r7, #12]
 801b1a8:	1ad3      	subs	r3, r2, r3
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	da02      	bge.n	801b1b4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	68fa      	ldr	r2, [r7, #12]
 801b1b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b1b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b1b8:	2200      	movs	r2, #0
 801b1ba:	69b9      	ldr	r1, [r7, #24]
 801b1bc:	6878      	ldr	r0, [r7, #4]
 801b1be:	f7ff fded 	bl	801ad9c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b1c2:	687a      	ldr	r2, [r7, #4]
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	3304      	adds	r3, #4
 801b1c8:	69b9      	ldr	r1, [r7, #24]
 801b1ca:	6878      	ldr	r0, [r7, #4]
 801b1cc:	f7ff fe26 	bl	801ae1c <tcp_output_control_segment>
 801b1d0:	4603      	mov	r3, r0
 801b1d2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b1d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b1d8:	4618      	mov	r0, r3
 801b1da:	372c      	adds	r7, #44	; 0x2c
 801b1dc:	46bd      	mov	sp, r7
 801b1de:	bd90      	pop	{r4, r7, pc}
 801b1e0:	080209a4 	.word	0x080209a4
 801b1e4:	0802119c 	.word	0x0802119c
 801b1e8:	080209f8 	.word	0x080209f8

0801b1ec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	b082      	sub	sp, #8
 801b1f0:	af00      	add	r7, sp, #0
 801b1f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801b1f4:	f7fa f804 	bl	8015200 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b1f8:	4b0a      	ldr	r3, [pc, #40]	; (801b224 <tcpip_tcp_timer+0x38>)
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	d103      	bne.n	801b208 <tcpip_tcp_timer+0x1c>
 801b200:	4b09      	ldr	r3, [pc, #36]	; (801b228 <tcpip_tcp_timer+0x3c>)
 801b202:	681b      	ldr	r3, [r3, #0]
 801b204:	2b00      	cmp	r3, #0
 801b206:	d005      	beq.n	801b214 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b208:	2200      	movs	r2, #0
 801b20a:	4908      	ldr	r1, [pc, #32]	; (801b22c <tcpip_tcp_timer+0x40>)
 801b20c:	20fa      	movs	r0, #250	; 0xfa
 801b20e:	f000 f8f1 	bl	801b3f4 <sys_timeout>
 801b212:	e002      	b.n	801b21a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801b214:	4b06      	ldr	r3, [pc, #24]	; (801b230 <tcpip_tcp_timer+0x44>)
 801b216:	2200      	movs	r2, #0
 801b218:	601a      	str	r2, [r3, #0]
  }
}
 801b21a:	bf00      	nop
 801b21c:	3708      	adds	r7, #8
 801b21e:	46bd      	mov	sp, r7
 801b220:	bd80      	pop	{r7, pc}
 801b222:	bf00      	nop
 801b224:	2000b508 	.word	0x2000b508
 801b228:	2000b518 	.word	0x2000b518
 801b22c:	0801b1ed 	.word	0x0801b1ed
 801b230:	20004564 	.word	0x20004564

0801b234 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801b234:	b580      	push	{r7, lr}
 801b236:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b238:	4b0a      	ldr	r3, [pc, #40]	; (801b264 <tcp_timer_needed+0x30>)
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d10f      	bne.n	801b260 <tcp_timer_needed+0x2c>
 801b240:	4b09      	ldr	r3, [pc, #36]	; (801b268 <tcp_timer_needed+0x34>)
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	2b00      	cmp	r3, #0
 801b246:	d103      	bne.n	801b250 <tcp_timer_needed+0x1c>
 801b248:	4b08      	ldr	r3, [pc, #32]	; (801b26c <tcp_timer_needed+0x38>)
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d007      	beq.n	801b260 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801b250:	4b04      	ldr	r3, [pc, #16]	; (801b264 <tcp_timer_needed+0x30>)
 801b252:	2201      	movs	r2, #1
 801b254:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b256:	2200      	movs	r2, #0
 801b258:	4905      	ldr	r1, [pc, #20]	; (801b270 <tcp_timer_needed+0x3c>)
 801b25a:	20fa      	movs	r0, #250	; 0xfa
 801b25c:	f000 f8ca 	bl	801b3f4 <sys_timeout>
  }
}
 801b260:	bf00      	nop
 801b262:	bd80      	pop	{r7, pc}
 801b264:	20004564 	.word	0x20004564
 801b268:	2000b508 	.word	0x2000b508
 801b26c:	2000b518 	.word	0x2000b518
 801b270:	0801b1ed 	.word	0x0801b1ed

0801b274 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801b274:	b580      	push	{r7, lr}
 801b276:	b086      	sub	sp, #24
 801b278:	af00      	add	r7, sp, #0
 801b27a:	60f8      	str	r0, [r7, #12]
 801b27c:	60b9      	str	r1, [r7, #8]
 801b27e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801b280:	200a      	movs	r0, #10
 801b282:	f7f8 fde7 	bl	8013e54 <memp_malloc>
 801b286:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801b288:	693b      	ldr	r3, [r7, #16]
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d109      	bne.n	801b2a2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b28e:	693b      	ldr	r3, [r7, #16]
 801b290:	2b00      	cmp	r3, #0
 801b292:	d151      	bne.n	801b338 <sys_timeout_abs+0xc4>
 801b294:	4b2a      	ldr	r3, [pc, #168]	; (801b340 <sys_timeout_abs+0xcc>)
 801b296:	22be      	movs	r2, #190	; 0xbe
 801b298:	492a      	ldr	r1, [pc, #168]	; (801b344 <sys_timeout_abs+0xd0>)
 801b29a:	482b      	ldr	r0, [pc, #172]	; (801b348 <sys_timeout_abs+0xd4>)
 801b29c:	f002 ff12 	bl	801e0c4 <iprintf>
    return;
 801b2a0:	e04a      	b.n	801b338 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801b2a2:	693b      	ldr	r3, [r7, #16]
 801b2a4:	2200      	movs	r2, #0
 801b2a6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801b2a8:	693b      	ldr	r3, [r7, #16]
 801b2aa:	68ba      	ldr	r2, [r7, #8]
 801b2ac:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801b2ae:	693b      	ldr	r3, [r7, #16]
 801b2b0:	687a      	ldr	r2, [r7, #4]
 801b2b2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801b2b4:	693b      	ldr	r3, [r7, #16]
 801b2b6:	68fa      	ldr	r2, [r7, #12]
 801b2b8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801b2ba:	4b24      	ldr	r3, [pc, #144]	; (801b34c <sys_timeout_abs+0xd8>)
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d103      	bne.n	801b2ca <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801b2c2:	4a22      	ldr	r2, [pc, #136]	; (801b34c <sys_timeout_abs+0xd8>)
 801b2c4:	693b      	ldr	r3, [r7, #16]
 801b2c6:	6013      	str	r3, [r2, #0]
    return;
 801b2c8:	e037      	b.n	801b33a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801b2ca:	693b      	ldr	r3, [r7, #16]
 801b2cc:	685a      	ldr	r2, [r3, #4]
 801b2ce:	4b1f      	ldr	r3, [pc, #124]	; (801b34c <sys_timeout_abs+0xd8>)
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	685b      	ldr	r3, [r3, #4]
 801b2d4:	1ad3      	subs	r3, r2, r3
 801b2d6:	0fdb      	lsrs	r3, r3, #31
 801b2d8:	f003 0301 	and.w	r3, r3, #1
 801b2dc:	b2db      	uxtb	r3, r3
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	d007      	beq.n	801b2f2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801b2e2:	4b1a      	ldr	r3, [pc, #104]	; (801b34c <sys_timeout_abs+0xd8>)
 801b2e4:	681a      	ldr	r2, [r3, #0]
 801b2e6:	693b      	ldr	r3, [r7, #16]
 801b2e8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801b2ea:	4a18      	ldr	r2, [pc, #96]	; (801b34c <sys_timeout_abs+0xd8>)
 801b2ec:	693b      	ldr	r3, [r7, #16]
 801b2ee:	6013      	str	r3, [r2, #0]
 801b2f0:	e023      	b.n	801b33a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801b2f2:	4b16      	ldr	r3, [pc, #88]	; (801b34c <sys_timeout_abs+0xd8>)
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	617b      	str	r3, [r7, #20]
 801b2f8:	e01a      	b.n	801b330 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801b2fa:	697b      	ldr	r3, [r7, #20]
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	d00b      	beq.n	801b31a <sys_timeout_abs+0xa6>
 801b302:	693b      	ldr	r3, [r7, #16]
 801b304:	685a      	ldr	r2, [r3, #4]
 801b306:	697b      	ldr	r3, [r7, #20]
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	685b      	ldr	r3, [r3, #4]
 801b30c:	1ad3      	subs	r3, r2, r3
 801b30e:	0fdb      	lsrs	r3, r3, #31
 801b310:	f003 0301 	and.w	r3, r3, #1
 801b314:	b2db      	uxtb	r3, r3
 801b316:	2b00      	cmp	r3, #0
 801b318:	d007      	beq.n	801b32a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801b31a:	697b      	ldr	r3, [r7, #20]
 801b31c:	681a      	ldr	r2, [r3, #0]
 801b31e:	693b      	ldr	r3, [r7, #16]
 801b320:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801b322:	697b      	ldr	r3, [r7, #20]
 801b324:	693a      	ldr	r2, [r7, #16]
 801b326:	601a      	str	r2, [r3, #0]
        break;
 801b328:	e007      	b.n	801b33a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801b32a:	697b      	ldr	r3, [r7, #20]
 801b32c:	681b      	ldr	r3, [r3, #0]
 801b32e:	617b      	str	r3, [r7, #20]
 801b330:	697b      	ldr	r3, [r7, #20]
 801b332:	2b00      	cmp	r3, #0
 801b334:	d1e1      	bne.n	801b2fa <sys_timeout_abs+0x86>
 801b336:	e000      	b.n	801b33a <sys_timeout_abs+0xc6>
    return;
 801b338:	bf00      	nop
      }
    }
  }
}
 801b33a:	3718      	adds	r7, #24
 801b33c:	46bd      	mov	sp, r7
 801b33e:	bd80      	pop	{r7, pc}
 801b340:	080211c0 	.word	0x080211c0
 801b344:	080211f4 	.word	0x080211f4
 801b348:	08021234 	.word	0x08021234
 801b34c:	2000455c 	.word	0x2000455c

0801b350 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801b350:	b580      	push	{r7, lr}
 801b352:	b086      	sub	sp, #24
 801b354:	af00      	add	r7, sp, #0
 801b356:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801b35c:	697b      	ldr	r3, [r7, #20]
 801b35e:	685b      	ldr	r3, [r3, #4]
 801b360:	4798      	blx	r3

  now = sys_now();
 801b362:	f7f4 f8e3 	bl	800f52c <sys_now>
 801b366:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801b368:	697b      	ldr	r3, [r7, #20]
 801b36a:	681a      	ldr	r2, [r3, #0]
 801b36c:	4b0f      	ldr	r3, [pc, #60]	; (801b3ac <lwip_cyclic_timer+0x5c>)
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	4413      	add	r3, r2
 801b372:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b374:	68fa      	ldr	r2, [r7, #12]
 801b376:	693b      	ldr	r3, [r7, #16]
 801b378:	1ad3      	subs	r3, r2, r3
 801b37a:	0fdb      	lsrs	r3, r3, #31
 801b37c:	f003 0301 	and.w	r3, r3, #1
 801b380:	b2db      	uxtb	r3, r3
 801b382:	2b00      	cmp	r3, #0
 801b384:	d009      	beq.n	801b39a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b386:	697b      	ldr	r3, [r7, #20]
 801b388:	681a      	ldr	r2, [r3, #0]
 801b38a:	693b      	ldr	r3, [r7, #16]
 801b38c:	4413      	add	r3, r2
 801b38e:	687a      	ldr	r2, [r7, #4]
 801b390:	4907      	ldr	r1, [pc, #28]	; (801b3b0 <lwip_cyclic_timer+0x60>)
 801b392:	4618      	mov	r0, r3
 801b394:	f7ff ff6e 	bl	801b274 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801b398:	e004      	b.n	801b3a4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b39a:	687a      	ldr	r2, [r7, #4]
 801b39c:	4904      	ldr	r1, [pc, #16]	; (801b3b0 <lwip_cyclic_timer+0x60>)
 801b39e:	68f8      	ldr	r0, [r7, #12]
 801b3a0:	f7ff ff68 	bl	801b274 <sys_timeout_abs>
}
 801b3a4:	bf00      	nop
 801b3a6:	3718      	adds	r7, #24
 801b3a8:	46bd      	mov	sp, r7
 801b3aa:	bd80      	pop	{r7, pc}
 801b3ac:	20004560 	.word	0x20004560
 801b3b0:	0801b351 	.word	0x0801b351

0801b3b4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801b3b4:	b580      	push	{r7, lr}
 801b3b6:	b082      	sub	sp, #8
 801b3b8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b3ba:	2301      	movs	r3, #1
 801b3bc:	607b      	str	r3, [r7, #4]
 801b3be:	e00e      	b.n	801b3de <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b3c0:	4a0a      	ldr	r2, [pc, #40]	; (801b3ec <sys_timeouts_init+0x38>)
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	00db      	lsls	r3, r3, #3
 801b3cc:	4a07      	ldr	r2, [pc, #28]	; (801b3ec <sys_timeouts_init+0x38>)
 801b3ce:	4413      	add	r3, r2
 801b3d0:	461a      	mov	r2, r3
 801b3d2:	4907      	ldr	r1, [pc, #28]	; (801b3f0 <sys_timeouts_init+0x3c>)
 801b3d4:	f000 f80e 	bl	801b3f4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	3301      	adds	r3, #1
 801b3dc:	607b      	str	r3, [r7, #4]
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	2b02      	cmp	r3, #2
 801b3e2:	d9ed      	bls.n	801b3c0 <sys_timeouts_init+0xc>
  }
}
 801b3e4:	bf00      	nop
 801b3e6:	3708      	adds	r7, #8
 801b3e8:	46bd      	mov	sp, r7
 801b3ea:	bd80      	pop	{r7, pc}
 801b3ec:	08032928 	.word	0x08032928
 801b3f0:	0801b351 	.word	0x0801b351

0801b3f4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801b3f4:	b580      	push	{r7, lr}
 801b3f6:	b086      	sub	sp, #24
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	60f8      	str	r0, [r7, #12]
 801b3fc:	60b9      	str	r1, [r7, #8]
 801b3fe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b400:	68fb      	ldr	r3, [r7, #12]
 801b402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b406:	d306      	bcc.n	801b416 <sys_timeout+0x22>
 801b408:	4b0a      	ldr	r3, [pc, #40]	; (801b434 <sys_timeout+0x40>)
 801b40a:	f240 1229 	movw	r2, #297	; 0x129
 801b40e:	490a      	ldr	r1, [pc, #40]	; (801b438 <sys_timeout+0x44>)
 801b410:	480a      	ldr	r0, [pc, #40]	; (801b43c <sys_timeout+0x48>)
 801b412:	f002 fe57 	bl	801e0c4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b416:	f7f4 f889 	bl	800f52c <sys_now>
 801b41a:	4602      	mov	r2, r0
 801b41c:	68fb      	ldr	r3, [r7, #12]
 801b41e:	4413      	add	r3, r2
 801b420:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b422:	687a      	ldr	r2, [r7, #4]
 801b424:	68b9      	ldr	r1, [r7, #8]
 801b426:	6978      	ldr	r0, [r7, #20]
 801b428:	f7ff ff24 	bl	801b274 <sys_timeout_abs>
#endif
}
 801b42c:	bf00      	nop
 801b42e:	3718      	adds	r7, #24
 801b430:	46bd      	mov	sp, r7
 801b432:	bd80      	pop	{r7, pc}
 801b434:	080211c0 	.word	0x080211c0
 801b438:	0802125c 	.word	0x0802125c
 801b43c:	08021234 	.word	0x08021234

0801b440 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801b440:	b580      	push	{r7, lr}
 801b442:	b084      	sub	sp, #16
 801b444:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801b446:	f7f4 f871 	bl	800f52c <sys_now>
 801b44a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801b44c:	4b17      	ldr	r3, [pc, #92]	; (801b4ac <sys_check_timeouts+0x6c>)
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801b452:	68bb      	ldr	r3, [r7, #8]
 801b454:	2b00      	cmp	r3, #0
 801b456:	d022      	beq.n	801b49e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801b458:	68bb      	ldr	r3, [r7, #8]
 801b45a:	685b      	ldr	r3, [r3, #4]
 801b45c:	68fa      	ldr	r2, [r7, #12]
 801b45e:	1ad3      	subs	r3, r2, r3
 801b460:	0fdb      	lsrs	r3, r3, #31
 801b462:	f003 0301 	and.w	r3, r3, #1
 801b466:	b2db      	uxtb	r3, r3
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d11a      	bne.n	801b4a2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801b46c:	68bb      	ldr	r3, [r7, #8]
 801b46e:	681b      	ldr	r3, [r3, #0]
 801b470:	4a0e      	ldr	r2, [pc, #56]	; (801b4ac <sys_check_timeouts+0x6c>)
 801b472:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801b474:	68bb      	ldr	r3, [r7, #8]
 801b476:	689b      	ldr	r3, [r3, #8]
 801b478:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801b47a:	68bb      	ldr	r3, [r7, #8]
 801b47c:	68db      	ldr	r3, [r3, #12]
 801b47e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801b480:	68bb      	ldr	r3, [r7, #8]
 801b482:	685b      	ldr	r3, [r3, #4]
 801b484:	4a0a      	ldr	r2, [pc, #40]	; (801b4b0 <sys_check_timeouts+0x70>)
 801b486:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b488:	68b9      	ldr	r1, [r7, #8]
 801b48a:	200a      	movs	r0, #10
 801b48c:	f7f8 fd34 	bl	8013ef8 <memp_free>
    if (handler != NULL) {
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	2b00      	cmp	r3, #0
 801b494:	d0da      	beq.n	801b44c <sys_check_timeouts+0xc>
      handler(arg);
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	6838      	ldr	r0, [r7, #0]
 801b49a:	4798      	blx	r3
  do {
 801b49c:	e7d6      	b.n	801b44c <sys_check_timeouts+0xc>
      return;
 801b49e:	bf00      	nop
 801b4a0:	e000      	b.n	801b4a4 <sys_check_timeouts+0x64>
      return;
 801b4a2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801b4a4:	3710      	adds	r7, #16
 801b4a6:	46bd      	mov	sp, r7
 801b4a8:	bd80      	pop	{r7, pc}
 801b4aa:	bf00      	nop
 801b4ac:	2000455c 	.word	0x2000455c
 801b4b0:	20004560 	.word	0x20004560

0801b4b4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801b4b4:	b580      	push	{r7, lr}
 801b4b6:	b082      	sub	sp, #8
 801b4b8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b4ba:	4b16      	ldr	r3, [pc, #88]	; (801b514 <sys_timeouts_sleeptime+0x60>)
 801b4bc:	681b      	ldr	r3, [r3, #0]
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d102      	bne.n	801b4c8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801b4c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b4c6:	e020      	b.n	801b50a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801b4c8:	f7f4 f830 	bl	800f52c <sys_now>
 801b4cc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801b4ce:	4b11      	ldr	r3, [pc, #68]	; (801b514 <sys_timeouts_sleeptime+0x60>)
 801b4d0:	681b      	ldr	r3, [r3, #0]
 801b4d2:	685a      	ldr	r2, [r3, #4]
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	1ad3      	subs	r3, r2, r3
 801b4d8:	0fdb      	lsrs	r3, r3, #31
 801b4da:	f003 0301 	and.w	r3, r3, #1
 801b4de:	b2db      	uxtb	r3, r3
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d001      	beq.n	801b4e8 <sys_timeouts_sleeptime+0x34>
    return 0;
 801b4e4:	2300      	movs	r3, #0
 801b4e6:	e010      	b.n	801b50a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801b4e8:	4b0a      	ldr	r3, [pc, #40]	; (801b514 <sys_timeouts_sleeptime+0x60>)
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	685a      	ldr	r2, [r3, #4]
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	1ad3      	subs	r3, r2, r3
 801b4f2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801b4f4:	683b      	ldr	r3, [r7, #0]
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	da06      	bge.n	801b508 <sys_timeouts_sleeptime+0x54>
 801b4fa:	4b07      	ldr	r3, [pc, #28]	; (801b518 <sys_timeouts_sleeptime+0x64>)
 801b4fc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801b500:	4906      	ldr	r1, [pc, #24]	; (801b51c <sys_timeouts_sleeptime+0x68>)
 801b502:	4807      	ldr	r0, [pc, #28]	; (801b520 <sys_timeouts_sleeptime+0x6c>)
 801b504:	f002 fdde 	bl	801e0c4 <iprintf>
    return ret;
 801b508:	683b      	ldr	r3, [r7, #0]
  }
}
 801b50a:	4618      	mov	r0, r3
 801b50c:	3708      	adds	r7, #8
 801b50e:	46bd      	mov	sp, r7
 801b510:	bd80      	pop	{r7, pc}
 801b512:	bf00      	nop
 801b514:	2000455c 	.word	0x2000455c
 801b518:	080211c0 	.word	0x080211c0
 801b51c:	08021294 	.word	0x08021294
 801b520:	08021234 	.word	0x08021234

0801b524 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801b524:	b580      	push	{r7, lr}
 801b526:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b528:	f002 fde4 	bl	801e0f4 <rand>
 801b52c:	4603      	mov	r3, r0
 801b52e:	b29b      	uxth	r3, r3
 801b530:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b534:	b29b      	uxth	r3, r3
 801b536:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801b53a:	b29a      	uxth	r2, r3
 801b53c:	4b01      	ldr	r3, [pc, #4]	; (801b544 <udp_init+0x20>)
 801b53e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801b540:	bf00      	nop
 801b542:	bd80      	pop	{r7, pc}
 801b544:	20000058 	.word	0x20000058

0801b548 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801b548:	b580      	push	{r7, lr}
 801b54a:	b084      	sub	sp, #16
 801b54c:	af00      	add	r7, sp, #0
 801b54e:	60f8      	str	r0, [r7, #12]
 801b550:	60b9      	str	r1, [r7, #8]
 801b552:	4613      	mov	r3, r2
 801b554:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801b556:	68fb      	ldr	r3, [r7, #12]
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d105      	bne.n	801b568 <udp_input_local_match+0x20>
 801b55c:	4b27      	ldr	r3, [pc, #156]	; (801b5fc <udp_input_local_match+0xb4>)
 801b55e:	2287      	movs	r2, #135	; 0x87
 801b560:	4927      	ldr	r1, [pc, #156]	; (801b600 <udp_input_local_match+0xb8>)
 801b562:	4828      	ldr	r0, [pc, #160]	; (801b604 <udp_input_local_match+0xbc>)
 801b564:	f002 fdae 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801b568:	68bb      	ldr	r3, [r7, #8]
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d105      	bne.n	801b57a <udp_input_local_match+0x32>
 801b56e:	4b23      	ldr	r3, [pc, #140]	; (801b5fc <udp_input_local_match+0xb4>)
 801b570:	2288      	movs	r2, #136	; 0x88
 801b572:	4925      	ldr	r1, [pc, #148]	; (801b608 <udp_input_local_match+0xc0>)
 801b574:	4823      	ldr	r0, [pc, #140]	; (801b604 <udp_input_local_match+0xbc>)
 801b576:	f002 fda5 	bl	801e0c4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b57a:	68fb      	ldr	r3, [r7, #12]
 801b57c:	7a1b      	ldrb	r3, [r3, #8]
 801b57e:	2b00      	cmp	r3, #0
 801b580:	d00b      	beq.n	801b59a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b582:	68fb      	ldr	r3, [r7, #12]
 801b584:	7a1a      	ldrb	r2, [r3, #8]
 801b586:	4b21      	ldr	r3, [pc, #132]	; (801b60c <udp_input_local_match+0xc4>)
 801b588:	685b      	ldr	r3, [r3, #4]
 801b58a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b58e:	3301      	adds	r3, #1
 801b590:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b592:	429a      	cmp	r2, r3
 801b594:	d001      	beq.n	801b59a <udp_input_local_match+0x52>
    return 0;
 801b596:	2300      	movs	r3, #0
 801b598:	e02b      	b.n	801b5f2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801b59a:	79fb      	ldrb	r3, [r7, #7]
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d018      	beq.n	801b5d2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b5a0:	68fb      	ldr	r3, [r7, #12]
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	d013      	beq.n	801b5ce <udp_input_local_match+0x86>
 801b5a6:	68fb      	ldr	r3, [r7, #12]
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d00f      	beq.n	801b5ce <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b5ae:	4b17      	ldr	r3, [pc, #92]	; (801b60c <udp_input_local_match+0xc4>)
 801b5b0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b5b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b5b6:	d00a      	beq.n	801b5ce <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801b5b8:	68fb      	ldr	r3, [r7, #12]
 801b5ba:	681a      	ldr	r2, [r3, #0]
 801b5bc:	4b13      	ldr	r3, [pc, #76]	; (801b60c <udp_input_local_match+0xc4>)
 801b5be:	695b      	ldr	r3, [r3, #20]
 801b5c0:	405a      	eors	r2, r3
 801b5c2:	68bb      	ldr	r3, [r7, #8]
 801b5c4:	3308      	adds	r3, #8
 801b5c6:	681b      	ldr	r3, [r3, #0]
 801b5c8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d110      	bne.n	801b5f0 <udp_input_local_match+0xa8>
          return 1;
 801b5ce:	2301      	movs	r3, #1
 801b5d0:	e00f      	b.n	801b5f2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b5d2:	68fb      	ldr	r3, [r7, #12]
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d009      	beq.n	801b5ec <udp_input_local_match+0xa4>
 801b5d8:	68fb      	ldr	r3, [r7, #12]
 801b5da:	681b      	ldr	r3, [r3, #0]
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	d005      	beq.n	801b5ec <udp_input_local_match+0xa4>
 801b5e0:	68fb      	ldr	r3, [r7, #12]
 801b5e2:	681a      	ldr	r2, [r3, #0]
 801b5e4:	4b09      	ldr	r3, [pc, #36]	; (801b60c <udp_input_local_match+0xc4>)
 801b5e6:	695b      	ldr	r3, [r3, #20]
 801b5e8:	429a      	cmp	r2, r3
 801b5ea:	d101      	bne.n	801b5f0 <udp_input_local_match+0xa8>
        return 1;
 801b5ec:	2301      	movs	r3, #1
 801b5ee:	e000      	b.n	801b5f2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801b5f0:	2300      	movs	r3, #0
}
 801b5f2:	4618      	mov	r0, r3
 801b5f4:	3710      	adds	r7, #16
 801b5f6:	46bd      	mov	sp, r7
 801b5f8:	bd80      	pop	{r7, pc}
 801b5fa:	bf00      	nop
 801b5fc:	080212a8 	.word	0x080212a8
 801b600:	080212d8 	.word	0x080212d8
 801b604:	080212fc 	.word	0x080212fc
 801b608:	08021324 	.word	0x08021324
 801b60c:	20007df4 	.word	0x20007df4

0801b610 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801b610:	b590      	push	{r4, r7, lr}
 801b612:	b08d      	sub	sp, #52	; 0x34
 801b614:	af02      	add	r7, sp, #8
 801b616:	6078      	str	r0, [r7, #4]
 801b618:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801b61a:	2300      	movs	r3, #0
 801b61c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	2b00      	cmp	r3, #0
 801b622:	d105      	bne.n	801b630 <udp_input+0x20>
 801b624:	4b7c      	ldr	r3, [pc, #496]	; (801b818 <udp_input+0x208>)
 801b626:	22cf      	movs	r2, #207	; 0xcf
 801b628:	497c      	ldr	r1, [pc, #496]	; (801b81c <udp_input+0x20c>)
 801b62a:	487d      	ldr	r0, [pc, #500]	; (801b820 <udp_input+0x210>)
 801b62c:	f002 fd4a 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801b630:	683b      	ldr	r3, [r7, #0]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d105      	bne.n	801b642 <udp_input+0x32>
 801b636:	4b78      	ldr	r3, [pc, #480]	; (801b818 <udp_input+0x208>)
 801b638:	22d0      	movs	r2, #208	; 0xd0
 801b63a:	497a      	ldr	r1, [pc, #488]	; (801b824 <udp_input+0x214>)
 801b63c:	4878      	ldr	r0, [pc, #480]	; (801b820 <udp_input+0x210>)
 801b63e:	f002 fd41 	bl	801e0c4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	895b      	ldrh	r3, [r3, #10]
 801b646:	2b07      	cmp	r3, #7
 801b648:	d803      	bhi.n	801b652 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801b64a:	6878      	ldr	r0, [r7, #4]
 801b64c:	f7f9 faf4 	bl	8014c38 <pbuf_free>
    goto end;
 801b650:	e0de      	b.n	801b810 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	685b      	ldr	r3, [r3, #4]
 801b656:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b658:	4b73      	ldr	r3, [pc, #460]	; (801b828 <udp_input+0x218>)
 801b65a:	695a      	ldr	r2, [r3, #20]
 801b65c:	4b72      	ldr	r3, [pc, #456]	; (801b828 <udp_input+0x218>)
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	4619      	mov	r1, r3
 801b662:	4610      	mov	r0, r2
 801b664:	f001 fc86 	bl	801cf74 <ip4_addr_isbroadcast_u32>
 801b668:	4603      	mov	r3, r0
 801b66a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b66c:	697b      	ldr	r3, [r7, #20]
 801b66e:	881b      	ldrh	r3, [r3, #0]
 801b670:	b29b      	uxth	r3, r3
 801b672:	4618      	mov	r0, r3
 801b674:	f7f7 ff02 	bl	801347c <lwip_htons>
 801b678:	4603      	mov	r3, r0
 801b67a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801b67c:	697b      	ldr	r3, [r7, #20]
 801b67e:	885b      	ldrh	r3, [r3, #2]
 801b680:	b29b      	uxth	r3, r3
 801b682:	4618      	mov	r0, r3
 801b684:	f7f7 fefa 	bl	801347c <lwip_htons>
 801b688:	4603      	mov	r3, r0
 801b68a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801b68c:	2300      	movs	r3, #0
 801b68e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801b690:	2300      	movs	r3, #0
 801b692:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801b694:	2300      	movs	r3, #0
 801b696:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b698:	4b64      	ldr	r3, [pc, #400]	; (801b82c <udp_input+0x21c>)
 801b69a:	681b      	ldr	r3, [r3, #0]
 801b69c:	627b      	str	r3, [r7, #36]	; 0x24
 801b69e:	e054      	b.n	801b74a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6a2:	8a5b      	ldrh	r3, [r3, #18]
 801b6a4:	89fa      	ldrh	r2, [r7, #14]
 801b6a6:	429a      	cmp	r2, r3
 801b6a8:	d14a      	bne.n	801b740 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801b6aa:	7cfb      	ldrb	r3, [r7, #19]
 801b6ac:	461a      	mov	r2, r3
 801b6ae:	6839      	ldr	r1, [r7, #0]
 801b6b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b6b2:	f7ff ff49 	bl	801b548 <udp_input_local_match>
 801b6b6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d041      	beq.n	801b740 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6be:	7c1b      	ldrb	r3, [r3, #16]
 801b6c0:	f003 0304 	and.w	r3, r3, #4
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d11d      	bne.n	801b704 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801b6c8:	69fb      	ldr	r3, [r7, #28]
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	d102      	bne.n	801b6d4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801b6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6d0:	61fb      	str	r3, [r7, #28]
 801b6d2:	e017      	b.n	801b704 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b6d4:	7cfb      	ldrb	r3, [r7, #19]
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d014      	beq.n	801b704 <udp_input+0xf4>
 801b6da:	4b53      	ldr	r3, [pc, #332]	; (801b828 <udp_input+0x218>)
 801b6dc:	695b      	ldr	r3, [r3, #20]
 801b6de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b6e2:	d10f      	bne.n	801b704 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b6e4:	69fb      	ldr	r3, [r7, #28]
 801b6e6:	681a      	ldr	r2, [r3, #0]
 801b6e8:	683b      	ldr	r3, [r7, #0]
 801b6ea:	3304      	adds	r3, #4
 801b6ec:	681b      	ldr	r3, [r3, #0]
 801b6ee:	429a      	cmp	r2, r3
 801b6f0:	d008      	beq.n	801b704 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801b6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6f4:	681a      	ldr	r2, [r3, #0]
 801b6f6:	683b      	ldr	r3, [r7, #0]
 801b6f8:	3304      	adds	r3, #4
 801b6fa:	681b      	ldr	r3, [r3, #0]
 801b6fc:	429a      	cmp	r2, r3
 801b6fe:	d101      	bne.n	801b704 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801b700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b702:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b706:	8a9b      	ldrh	r3, [r3, #20]
 801b708:	8a3a      	ldrh	r2, [r7, #16]
 801b70a:	429a      	cmp	r2, r3
 801b70c:	d118      	bne.n	801b740 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b710:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801b712:	2b00      	cmp	r3, #0
 801b714:	d005      	beq.n	801b722 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801b716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b718:	685a      	ldr	r2, [r3, #4]
 801b71a:	4b43      	ldr	r3, [pc, #268]	; (801b828 <udp_input+0x218>)
 801b71c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b71e:	429a      	cmp	r2, r3
 801b720:	d10e      	bne.n	801b740 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b722:	6a3b      	ldr	r3, [r7, #32]
 801b724:	2b00      	cmp	r3, #0
 801b726:	d014      	beq.n	801b752 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801b728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b72a:	68da      	ldr	r2, [r3, #12]
 801b72c:	6a3b      	ldr	r3, [r7, #32]
 801b72e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801b730:	4b3e      	ldr	r3, [pc, #248]	; (801b82c <udp_input+0x21c>)
 801b732:	681a      	ldr	r2, [r3, #0]
 801b734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b736:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801b738:	4a3c      	ldr	r2, [pc, #240]	; (801b82c <udp_input+0x21c>)
 801b73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b73c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801b73e:	e008      	b.n	801b752 <udp_input+0x142>
      }
    }

    prev = pcb;
 801b740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b742:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b746:	68db      	ldr	r3, [r3, #12]
 801b748:	627b      	str	r3, [r7, #36]	; 0x24
 801b74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b74c:	2b00      	cmp	r3, #0
 801b74e:	d1a7      	bne.n	801b6a0 <udp_input+0x90>
 801b750:	e000      	b.n	801b754 <udp_input+0x144>
        break;
 801b752:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801b754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b756:	2b00      	cmp	r3, #0
 801b758:	d101      	bne.n	801b75e <udp_input+0x14e>
    pcb = uncon_pcb;
 801b75a:	69fb      	ldr	r3, [r7, #28]
 801b75c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801b75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b760:	2b00      	cmp	r3, #0
 801b762:	d002      	beq.n	801b76a <udp_input+0x15a>
    for_us = 1;
 801b764:	2301      	movs	r3, #1
 801b766:	76fb      	strb	r3, [r7, #27]
 801b768:	e00a      	b.n	801b780 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801b76a:	683b      	ldr	r3, [r7, #0]
 801b76c:	3304      	adds	r3, #4
 801b76e:	681a      	ldr	r2, [r3, #0]
 801b770:	4b2d      	ldr	r3, [pc, #180]	; (801b828 <udp_input+0x218>)
 801b772:	695b      	ldr	r3, [r3, #20]
 801b774:	429a      	cmp	r2, r3
 801b776:	bf0c      	ite	eq
 801b778:	2301      	moveq	r3, #1
 801b77a:	2300      	movne	r3, #0
 801b77c:	b2db      	uxtb	r3, r3
 801b77e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801b780:	7efb      	ldrb	r3, [r7, #27]
 801b782:	2b00      	cmp	r3, #0
 801b784:	d041      	beq.n	801b80a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b786:	2108      	movs	r1, #8
 801b788:	6878      	ldr	r0, [r7, #4]
 801b78a:	f7f9 f9cf 	bl	8014b2c <pbuf_remove_header>
 801b78e:	4603      	mov	r3, r0
 801b790:	2b00      	cmp	r3, #0
 801b792:	d00a      	beq.n	801b7aa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801b794:	4b20      	ldr	r3, [pc, #128]	; (801b818 <udp_input+0x208>)
 801b796:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801b79a:	4925      	ldr	r1, [pc, #148]	; (801b830 <udp_input+0x220>)
 801b79c:	4820      	ldr	r0, [pc, #128]	; (801b820 <udp_input+0x210>)
 801b79e:	f002 fc91 	bl	801e0c4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801b7a2:	6878      	ldr	r0, [r7, #4]
 801b7a4:	f7f9 fa48 	bl	8014c38 <pbuf_free>
      goto end;
 801b7a8:	e032      	b.n	801b810 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801b7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d012      	beq.n	801b7d6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7b2:	699b      	ldr	r3, [r3, #24]
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d00a      	beq.n	801b7ce <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7ba:	699c      	ldr	r4, [r3, #24]
 801b7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7be:	69d8      	ldr	r0, [r3, #28]
 801b7c0:	8a3b      	ldrh	r3, [r7, #16]
 801b7c2:	9300      	str	r3, [sp, #0]
 801b7c4:	4b1b      	ldr	r3, [pc, #108]	; (801b834 <udp_input+0x224>)
 801b7c6:	687a      	ldr	r2, [r7, #4]
 801b7c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b7ca:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801b7cc:	e021      	b.n	801b812 <udp_input+0x202>
        pbuf_free(p);
 801b7ce:	6878      	ldr	r0, [r7, #4]
 801b7d0:	f7f9 fa32 	bl	8014c38 <pbuf_free>
        goto end;
 801b7d4:	e01c      	b.n	801b810 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801b7d6:	7cfb      	ldrb	r3, [r7, #19]
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d112      	bne.n	801b802 <udp_input+0x1f2>
 801b7dc:	4b12      	ldr	r3, [pc, #72]	; (801b828 <udp_input+0x218>)
 801b7de:	695b      	ldr	r3, [r3, #20]
 801b7e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b7e4:	2be0      	cmp	r3, #224	; 0xe0
 801b7e6:	d00c      	beq.n	801b802 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801b7e8:	4b0f      	ldr	r3, [pc, #60]	; (801b828 <udp_input+0x218>)
 801b7ea:	899b      	ldrh	r3, [r3, #12]
 801b7ec:	3308      	adds	r3, #8
 801b7ee:	b29b      	uxth	r3, r3
 801b7f0:	b21b      	sxth	r3, r3
 801b7f2:	4619      	mov	r1, r3
 801b7f4:	6878      	ldr	r0, [r7, #4]
 801b7f6:	f7f9 fa0c 	bl	8014c12 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801b7fa:	2103      	movs	r1, #3
 801b7fc:	6878      	ldr	r0, [r7, #4]
 801b7fe:	f001 f89b 	bl	801c938 <icmp_dest_unreach>
      pbuf_free(p);
 801b802:	6878      	ldr	r0, [r7, #4]
 801b804:	f7f9 fa18 	bl	8014c38 <pbuf_free>
  return;
 801b808:	e003      	b.n	801b812 <udp_input+0x202>
    pbuf_free(p);
 801b80a:	6878      	ldr	r0, [r7, #4]
 801b80c:	f7f9 fa14 	bl	8014c38 <pbuf_free>
  return;
 801b810:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801b812:	372c      	adds	r7, #44	; 0x2c
 801b814:	46bd      	mov	sp, r7
 801b816:	bd90      	pop	{r4, r7, pc}
 801b818:	080212a8 	.word	0x080212a8
 801b81c:	0802134c 	.word	0x0802134c
 801b820:	080212fc 	.word	0x080212fc
 801b824:	08021364 	.word	0x08021364
 801b828:	20007df4 	.word	0x20007df4
 801b82c:	2000b520 	.word	0x2000b520
 801b830:	08021380 	.word	0x08021380
 801b834:	20007e04 	.word	0x20007e04

0801b838 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b838:	b480      	push	{r7}
 801b83a:	b085      	sub	sp, #20
 801b83c:	af00      	add	r7, sp, #0
 801b83e:	6078      	str	r0, [r7, #4]
 801b840:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	2b00      	cmp	r3, #0
 801b846:	d01e      	beq.n	801b886 <udp_netif_ip_addr_changed+0x4e>
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	681b      	ldr	r3, [r3, #0]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d01a      	beq.n	801b886 <udp_netif_ip_addr_changed+0x4e>
 801b850:	683b      	ldr	r3, [r7, #0]
 801b852:	2b00      	cmp	r3, #0
 801b854:	d017      	beq.n	801b886 <udp_netif_ip_addr_changed+0x4e>
 801b856:	683b      	ldr	r3, [r7, #0]
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d013      	beq.n	801b886 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b85e:	4b0d      	ldr	r3, [pc, #52]	; (801b894 <udp_netif_ip_addr_changed+0x5c>)
 801b860:	681b      	ldr	r3, [r3, #0]
 801b862:	60fb      	str	r3, [r7, #12]
 801b864:	e00c      	b.n	801b880 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801b866:	68fb      	ldr	r3, [r7, #12]
 801b868:	681a      	ldr	r2, [r3, #0]
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	681b      	ldr	r3, [r3, #0]
 801b86e:	429a      	cmp	r2, r3
 801b870:	d103      	bne.n	801b87a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801b872:	683b      	ldr	r3, [r7, #0]
 801b874:	681a      	ldr	r2, [r3, #0]
 801b876:	68fb      	ldr	r3, [r7, #12]
 801b878:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b87a:	68fb      	ldr	r3, [r7, #12]
 801b87c:	68db      	ldr	r3, [r3, #12]
 801b87e:	60fb      	str	r3, [r7, #12]
 801b880:	68fb      	ldr	r3, [r7, #12]
 801b882:	2b00      	cmp	r3, #0
 801b884:	d1ef      	bne.n	801b866 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801b886:	bf00      	nop
 801b888:	3714      	adds	r7, #20
 801b88a:	46bd      	mov	sp, r7
 801b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b890:	4770      	bx	lr
 801b892:	bf00      	nop
 801b894:	2000b520 	.word	0x2000b520

0801b898 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801b898:	b580      	push	{r7, lr}
 801b89a:	b082      	sub	sp, #8
 801b89c:	af00      	add	r7, sp, #0
 801b89e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801b8a0:	4915      	ldr	r1, [pc, #84]	; (801b8f8 <etharp_free_entry+0x60>)
 801b8a2:	687a      	ldr	r2, [r7, #4]
 801b8a4:	4613      	mov	r3, r2
 801b8a6:	005b      	lsls	r3, r3, #1
 801b8a8:	4413      	add	r3, r2
 801b8aa:	00db      	lsls	r3, r3, #3
 801b8ac:	440b      	add	r3, r1
 801b8ae:	681b      	ldr	r3, [r3, #0]
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	d013      	beq.n	801b8dc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801b8b4:	4910      	ldr	r1, [pc, #64]	; (801b8f8 <etharp_free_entry+0x60>)
 801b8b6:	687a      	ldr	r2, [r7, #4]
 801b8b8:	4613      	mov	r3, r2
 801b8ba:	005b      	lsls	r3, r3, #1
 801b8bc:	4413      	add	r3, r2
 801b8be:	00db      	lsls	r3, r3, #3
 801b8c0:	440b      	add	r3, r1
 801b8c2:	681b      	ldr	r3, [r3, #0]
 801b8c4:	4618      	mov	r0, r3
 801b8c6:	f7f9 f9b7 	bl	8014c38 <pbuf_free>
    arp_table[i].q = NULL;
 801b8ca:	490b      	ldr	r1, [pc, #44]	; (801b8f8 <etharp_free_entry+0x60>)
 801b8cc:	687a      	ldr	r2, [r7, #4]
 801b8ce:	4613      	mov	r3, r2
 801b8d0:	005b      	lsls	r3, r3, #1
 801b8d2:	4413      	add	r3, r2
 801b8d4:	00db      	lsls	r3, r3, #3
 801b8d6:	440b      	add	r3, r1
 801b8d8:	2200      	movs	r2, #0
 801b8da:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801b8dc:	4906      	ldr	r1, [pc, #24]	; (801b8f8 <etharp_free_entry+0x60>)
 801b8de:	687a      	ldr	r2, [r7, #4]
 801b8e0:	4613      	mov	r3, r2
 801b8e2:	005b      	lsls	r3, r3, #1
 801b8e4:	4413      	add	r3, r2
 801b8e6:	00db      	lsls	r3, r3, #3
 801b8e8:	440b      	add	r3, r1
 801b8ea:	3314      	adds	r3, #20
 801b8ec:	2200      	movs	r2, #0
 801b8ee:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801b8f0:	bf00      	nop
 801b8f2:	3708      	adds	r7, #8
 801b8f4:	46bd      	mov	sp, r7
 801b8f6:	bd80      	pop	{r7, pc}
 801b8f8:	20004568 	.word	0x20004568

0801b8fc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801b8fc:	b580      	push	{r7, lr}
 801b8fe:	b082      	sub	sp, #8
 801b900:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b902:	2300      	movs	r3, #0
 801b904:	607b      	str	r3, [r7, #4]
 801b906:	e096      	b.n	801ba36 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801b908:	494f      	ldr	r1, [pc, #316]	; (801ba48 <etharp_tmr+0x14c>)
 801b90a:	687a      	ldr	r2, [r7, #4]
 801b90c:	4613      	mov	r3, r2
 801b90e:	005b      	lsls	r3, r3, #1
 801b910:	4413      	add	r3, r2
 801b912:	00db      	lsls	r3, r3, #3
 801b914:	440b      	add	r3, r1
 801b916:	3314      	adds	r3, #20
 801b918:	781b      	ldrb	r3, [r3, #0]
 801b91a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801b91c:	78fb      	ldrb	r3, [r7, #3]
 801b91e:	2b00      	cmp	r3, #0
 801b920:	f000 8086 	beq.w	801ba30 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801b924:	4948      	ldr	r1, [pc, #288]	; (801ba48 <etharp_tmr+0x14c>)
 801b926:	687a      	ldr	r2, [r7, #4]
 801b928:	4613      	mov	r3, r2
 801b92a:	005b      	lsls	r3, r3, #1
 801b92c:	4413      	add	r3, r2
 801b92e:	00db      	lsls	r3, r3, #3
 801b930:	440b      	add	r3, r1
 801b932:	3312      	adds	r3, #18
 801b934:	881b      	ldrh	r3, [r3, #0]
 801b936:	3301      	adds	r3, #1
 801b938:	b298      	uxth	r0, r3
 801b93a:	4943      	ldr	r1, [pc, #268]	; (801ba48 <etharp_tmr+0x14c>)
 801b93c:	687a      	ldr	r2, [r7, #4]
 801b93e:	4613      	mov	r3, r2
 801b940:	005b      	lsls	r3, r3, #1
 801b942:	4413      	add	r3, r2
 801b944:	00db      	lsls	r3, r3, #3
 801b946:	440b      	add	r3, r1
 801b948:	3312      	adds	r3, #18
 801b94a:	4602      	mov	r2, r0
 801b94c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b94e:	493e      	ldr	r1, [pc, #248]	; (801ba48 <etharp_tmr+0x14c>)
 801b950:	687a      	ldr	r2, [r7, #4]
 801b952:	4613      	mov	r3, r2
 801b954:	005b      	lsls	r3, r3, #1
 801b956:	4413      	add	r3, r2
 801b958:	00db      	lsls	r3, r3, #3
 801b95a:	440b      	add	r3, r1
 801b95c:	3312      	adds	r3, #18
 801b95e:	881b      	ldrh	r3, [r3, #0]
 801b960:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801b964:	d215      	bcs.n	801b992 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b966:	4938      	ldr	r1, [pc, #224]	; (801ba48 <etharp_tmr+0x14c>)
 801b968:	687a      	ldr	r2, [r7, #4]
 801b96a:	4613      	mov	r3, r2
 801b96c:	005b      	lsls	r3, r3, #1
 801b96e:	4413      	add	r3, r2
 801b970:	00db      	lsls	r3, r3, #3
 801b972:	440b      	add	r3, r1
 801b974:	3314      	adds	r3, #20
 801b976:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b978:	2b01      	cmp	r3, #1
 801b97a:	d10e      	bne.n	801b99a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801b97c:	4932      	ldr	r1, [pc, #200]	; (801ba48 <etharp_tmr+0x14c>)
 801b97e:	687a      	ldr	r2, [r7, #4]
 801b980:	4613      	mov	r3, r2
 801b982:	005b      	lsls	r3, r3, #1
 801b984:	4413      	add	r3, r2
 801b986:	00db      	lsls	r3, r3, #3
 801b988:	440b      	add	r3, r1
 801b98a:	3312      	adds	r3, #18
 801b98c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b98e:	2b04      	cmp	r3, #4
 801b990:	d903      	bls.n	801b99a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801b992:	6878      	ldr	r0, [r7, #4]
 801b994:	f7ff ff80 	bl	801b898 <etharp_free_entry>
 801b998:	e04a      	b.n	801ba30 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801b99a:	492b      	ldr	r1, [pc, #172]	; (801ba48 <etharp_tmr+0x14c>)
 801b99c:	687a      	ldr	r2, [r7, #4]
 801b99e:	4613      	mov	r3, r2
 801b9a0:	005b      	lsls	r3, r3, #1
 801b9a2:	4413      	add	r3, r2
 801b9a4:	00db      	lsls	r3, r3, #3
 801b9a6:	440b      	add	r3, r1
 801b9a8:	3314      	adds	r3, #20
 801b9aa:	781b      	ldrb	r3, [r3, #0]
 801b9ac:	2b03      	cmp	r3, #3
 801b9ae:	d10a      	bne.n	801b9c6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801b9b0:	4925      	ldr	r1, [pc, #148]	; (801ba48 <etharp_tmr+0x14c>)
 801b9b2:	687a      	ldr	r2, [r7, #4]
 801b9b4:	4613      	mov	r3, r2
 801b9b6:	005b      	lsls	r3, r3, #1
 801b9b8:	4413      	add	r3, r2
 801b9ba:	00db      	lsls	r3, r3, #3
 801b9bc:	440b      	add	r3, r1
 801b9be:	3314      	adds	r3, #20
 801b9c0:	2204      	movs	r2, #4
 801b9c2:	701a      	strb	r2, [r3, #0]
 801b9c4:	e034      	b.n	801ba30 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801b9c6:	4920      	ldr	r1, [pc, #128]	; (801ba48 <etharp_tmr+0x14c>)
 801b9c8:	687a      	ldr	r2, [r7, #4]
 801b9ca:	4613      	mov	r3, r2
 801b9cc:	005b      	lsls	r3, r3, #1
 801b9ce:	4413      	add	r3, r2
 801b9d0:	00db      	lsls	r3, r3, #3
 801b9d2:	440b      	add	r3, r1
 801b9d4:	3314      	adds	r3, #20
 801b9d6:	781b      	ldrb	r3, [r3, #0]
 801b9d8:	2b04      	cmp	r3, #4
 801b9da:	d10a      	bne.n	801b9f2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801b9dc:	491a      	ldr	r1, [pc, #104]	; (801ba48 <etharp_tmr+0x14c>)
 801b9de:	687a      	ldr	r2, [r7, #4]
 801b9e0:	4613      	mov	r3, r2
 801b9e2:	005b      	lsls	r3, r3, #1
 801b9e4:	4413      	add	r3, r2
 801b9e6:	00db      	lsls	r3, r3, #3
 801b9e8:	440b      	add	r3, r1
 801b9ea:	3314      	adds	r3, #20
 801b9ec:	2202      	movs	r2, #2
 801b9ee:	701a      	strb	r2, [r3, #0]
 801b9f0:	e01e      	b.n	801ba30 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b9f2:	4915      	ldr	r1, [pc, #84]	; (801ba48 <etharp_tmr+0x14c>)
 801b9f4:	687a      	ldr	r2, [r7, #4]
 801b9f6:	4613      	mov	r3, r2
 801b9f8:	005b      	lsls	r3, r3, #1
 801b9fa:	4413      	add	r3, r2
 801b9fc:	00db      	lsls	r3, r3, #3
 801b9fe:	440b      	add	r3, r1
 801ba00:	3314      	adds	r3, #20
 801ba02:	781b      	ldrb	r3, [r3, #0]
 801ba04:	2b01      	cmp	r3, #1
 801ba06:	d113      	bne.n	801ba30 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801ba08:	490f      	ldr	r1, [pc, #60]	; (801ba48 <etharp_tmr+0x14c>)
 801ba0a:	687a      	ldr	r2, [r7, #4]
 801ba0c:	4613      	mov	r3, r2
 801ba0e:	005b      	lsls	r3, r3, #1
 801ba10:	4413      	add	r3, r2
 801ba12:	00db      	lsls	r3, r3, #3
 801ba14:	440b      	add	r3, r1
 801ba16:	3308      	adds	r3, #8
 801ba18:	6818      	ldr	r0, [r3, #0]
 801ba1a:	687a      	ldr	r2, [r7, #4]
 801ba1c:	4613      	mov	r3, r2
 801ba1e:	005b      	lsls	r3, r3, #1
 801ba20:	4413      	add	r3, r2
 801ba22:	00db      	lsls	r3, r3, #3
 801ba24:	4a08      	ldr	r2, [pc, #32]	; (801ba48 <etharp_tmr+0x14c>)
 801ba26:	4413      	add	r3, r2
 801ba28:	3304      	adds	r3, #4
 801ba2a:	4619      	mov	r1, r3
 801ba2c:	f000 fe6e 	bl	801c70c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	3301      	adds	r3, #1
 801ba34:	607b      	str	r3, [r7, #4]
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	2b09      	cmp	r3, #9
 801ba3a:	f77f af65 	ble.w	801b908 <etharp_tmr+0xc>
      }
    }
  }
}
 801ba3e:	bf00      	nop
 801ba40:	3708      	adds	r7, #8
 801ba42:	46bd      	mov	sp, r7
 801ba44:	bd80      	pop	{r7, pc}
 801ba46:	bf00      	nop
 801ba48:	20004568 	.word	0x20004568

0801ba4c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801ba4c:	b580      	push	{r7, lr}
 801ba4e:	b08a      	sub	sp, #40	; 0x28
 801ba50:	af00      	add	r7, sp, #0
 801ba52:	60f8      	str	r0, [r7, #12]
 801ba54:	460b      	mov	r3, r1
 801ba56:	607a      	str	r2, [r7, #4]
 801ba58:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801ba5a:	230a      	movs	r3, #10
 801ba5c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801ba5e:	230a      	movs	r3, #10
 801ba60:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801ba62:	230a      	movs	r3, #10
 801ba64:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801ba66:	2300      	movs	r3, #0
 801ba68:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801ba6a:	230a      	movs	r3, #10
 801ba6c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801ba6e:	2300      	movs	r3, #0
 801ba70:	83bb      	strh	r3, [r7, #28]
 801ba72:	2300      	movs	r3, #0
 801ba74:	837b      	strh	r3, [r7, #26]
 801ba76:	2300      	movs	r3, #0
 801ba78:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ba7a:	2300      	movs	r3, #0
 801ba7c:	843b      	strh	r3, [r7, #32]
 801ba7e:	e0ae      	b.n	801bbde <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801ba80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ba84:	49a6      	ldr	r1, [pc, #664]	; (801bd20 <etharp_find_entry+0x2d4>)
 801ba86:	4613      	mov	r3, r2
 801ba88:	005b      	lsls	r3, r3, #1
 801ba8a:	4413      	add	r3, r2
 801ba8c:	00db      	lsls	r3, r3, #3
 801ba8e:	440b      	add	r3, r1
 801ba90:	3314      	adds	r3, #20
 801ba92:	781b      	ldrb	r3, [r3, #0]
 801ba94:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801ba96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801ba9a:	2b0a      	cmp	r3, #10
 801ba9c:	d105      	bne.n	801baaa <etharp_find_entry+0x5e>
 801ba9e:	7dfb      	ldrb	r3, [r7, #23]
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d102      	bne.n	801baaa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801baa4:	8c3b      	ldrh	r3, [r7, #32]
 801baa6:	847b      	strh	r3, [r7, #34]	; 0x22
 801baa8:	e095      	b.n	801bbd6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801baaa:	7dfb      	ldrb	r3, [r7, #23]
 801baac:	2b00      	cmp	r3, #0
 801baae:	f000 8092 	beq.w	801bbd6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801bab2:	7dfb      	ldrb	r3, [r7, #23]
 801bab4:	2b01      	cmp	r3, #1
 801bab6:	d009      	beq.n	801bacc <etharp_find_entry+0x80>
 801bab8:	7dfb      	ldrb	r3, [r7, #23]
 801baba:	2b01      	cmp	r3, #1
 801babc:	d806      	bhi.n	801bacc <etharp_find_entry+0x80>
 801babe:	4b99      	ldr	r3, [pc, #612]	; (801bd24 <etharp_find_entry+0x2d8>)
 801bac0:	f44f 7292 	mov.w	r2, #292	; 0x124
 801bac4:	4998      	ldr	r1, [pc, #608]	; (801bd28 <etharp_find_entry+0x2dc>)
 801bac6:	4899      	ldr	r0, [pc, #612]	; (801bd2c <etharp_find_entry+0x2e0>)
 801bac8:	f002 fafc 	bl	801e0c4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801bacc:	68fb      	ldr	r3, [r7, #12]
 801bace:	2b00      	cmp	r3, #0
 801bad0:	d020      	beq.n	801bb14 <etharp_find_entry+0xc8>
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	6819      	ldr	r1, [r3, #0]
 801bad6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bada:	4891      	ldr	r0, [pc, #580]	; (801bd20 <etharp_find_entry+0x2d4>)
 801badc:	4613      	mov	r3, r2
 801bade:	005b      	lsls	r3, r3, #1
 801bae0:	4413      	add	r3, r2
 801bae2:	00db      	lsls	r3, r3, #3
 801bae4:	4403      	add	r3, r0
 801bae6:	3304      	adds	r3, #4
 801bae8:	681b      	ldr	r3, [r3, #0]
 801baea:	4299      	cmp	r1, r3
 801baec:	d112      	bne.n	801bb14 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	d00c      	beq.n	801bb0e <etharp_find_entry+0xc2>
 801baf4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801baf8:	4989      	ldr	r1, [pc, #548]	; (801bd20 <etharp_find_entry+0x2d4>)
 801bafa:	4613      	mov	r3, r2
 801bafc:	005b      	lsls	r3, r3, #1
 801bafe:	4413      	add	r3, r2
 801bb00:	00db      	lsls	r3, r3, #3
 801bb02:	440b      	add	r3, r1
 801bb04:	3308      	adds	r3, #8
 801bb06:	681b      	ldr	r3, [r3, #0]
 801bb08:	687a      	ldr	r2, [r7, #4]
 801bb0a:	429a      	cmp	r2, r3
 801bb0c:	d102      	bne.n	801bb14 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801bb0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bb12:	e100      	b.n	801bd16 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801bb14:	7dfb      	ldrb	r3, [r7, #23]
 801bb16:	2b01      	cmp	r3, #1
 801bb18:	d140      	bne.n	801bb9c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801bb1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bb1e:	4980      	ldr	r1, [pc, #512]	; (801bd20 <etharp_find_entry+0x2d4>)
 801bb20:	4613      	mov	r3, r2
 801bb22:	005b      	lsls	r3, r3, #1
 801bb24:	4413      	add	r3, r2
 801bb26:	00db      	lsls	r3, r3, #3
 801bb28:	440b      	add	r3, r1
 801bb2a:	681b      	ldr	r3, [r3, #0]
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d01a      	beq.n	801bb66 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801bb30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bb34:	497a      	ldr	r1, [pc, #488]	; (801bd20 <etharp_find_entry+0x2d4>)
 801bb36:	4613      	mov	r3, r2
 801bb38:	005b      	lsls	r3, r3, #1
 801bb3a:	4413      	add	r3, r2
 801bb3c:	00db      	lsls	r3, r3, #3
 801bb3e:	440b      	add	r3, r1
 801bb40:	3312      	adds	r3, #18
 801bb42:	881b      	ldrh	r3, [r3, #0]
 801bb44:	8bba      	ldrh	r2, [r7, #28]
 801bb46:	429a      	cmp	r2, r3
 801bb48:	d845      	bhi.n	801bbd6 <etharp_find_entry+0x18a>
            old_queue = i;
 801bb4a:	8c3b      	ldrh	r3, [r7, #32]
 801bb4c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801bb4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bb52:	4973      	ldr	r1, [pc, #460]	; (801bd20 <etharp_find_entry+0x2d4>)
 801bb54:	4613      	mov	r3, r2
 801bb56:	005b      	lsls	r3, r3, #1
 801bb58:	4413      	add	r3, r2
 801bb5a:	00db      	lsls	r3, r3, #3
 801bb5c:	440b      	add	r3, r1
 801bb5e:	3312      	adds	r3, #18
 801bb60:	881b      	ldrh	r3, [r3, #0]
 801bb62:	83bb      	strh	r3, [r7, #28]
 801bb64:	e037      	b.n	801bbd6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801bb66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bb6a:	496d      	ldr	r1, [pc, #436]	; (801bd20 <etharp_find_entry+0x2d4>)
 801bb6c:	4613      	mov	r3, r2
 801bb6e:	005b      	lsls	r3, r3, #1
 801bb70:	4413      	add	r3, r2
 801bb72:	00db      	lsls	r3, r3, #3
 801bb74:	440b      	add	r3, r1
 801bb76:	3312      	adds	r3, #18
 801bb78:	881b      	ldrh	r3, [r3, #0]
 801bb7a:	8b7a      	ldrh	r2, [r7, #26]
 801bb7c:	429a      	cmp	r2, r3
 801bb7e:	d82a      	bhi.n	801bbd6 <etharp_find_entry+0x18a>
            old_pending = i;
 801bb80:	8c3b      	ldrh	r3, [r7, #32]
 801bb82:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801bb84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bb88:	4965      	ldr	r1, [pc, #404]	; (801bd20 <etharp_find_entry+0x2d4>)
 801bb8a:	4613      	mov	r3, r2
 801bb8c:	005b      	lsls	r3, r3, #1
 801bb8e:	4413      	add	r3, r2
 801bb90:	00db      	lsls	r3, r3, #3
 801bb92:	440b      	add	r3, r1
 801bb94:	3312      	adds	r3, #18
 801bb96:	881b      	ldrh	r3, [r3, #0]
 801bb98:	837b      	strh	r3, [r7, #26]
 801bb9a:	e01c      	b.n	801bbd6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801bb9c:	7dfb      	ldrb	r3, [r7, #23]
 801bb9e:	2b01      	cmp	r3, #1
 801bba0:	d919      	bls.n	801bbd6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801bba2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bba6:	495e      	ldr	r1, [pc, #376]	; (801bd20 <etharp_find_entry+0x2d4>)
 801bba8:	4613      	mov	r3, r2
 801bbaa:	005b      	lsls	r3, r3, #1
 801bbac:	4413      	add	r3, r2
 801bbae:	00db      	lsls	r3, r3, #3
 801bbb0:	440b      	add	r3, r1
 801bbb2:	3312      	adds	r3, #18
 801bbb4:	881b      	ldrh	r3, [r3, #0]
 801bbb6:	8b3a      	ldrh	r2, [r7, #24]
 801bbb8:	429a      	cmp	r2, r3
 801bbba:	d80c      	bhi.n	801bbd6 <etharp_find_entry+0x18a>
            old_stable = i;
 801bbbc:	8c3b      	ldrh	r3, [r7, #32]
 801bbbe:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801bbc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bbc4:	4956      	ldr	r1, [pc, #344]	; (801bd20 <etharp_find_entry+0x2d4>)
 801bbc6:	4613      	mov	r3, r2
 801bbc8:	005b      	lsls	r3, r3, #1
 801bbca:	4413      	add	r3, r2
 801bbcc:	00db      	lsls	r3, r3, #3
 801bbce:	440b      	add	r3, r1
 801bbd0:	3312      	adds	r3, #18
 801bbd2:	881b      	ldrh	r3, [r3, #0]
 801bbd4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bbd6:	8c3b      	ldrh	r3, [r7, #32]
 801bbd8:	3301      	adds	r3, #1
 801bbda:	b29b      	uxth	r3, r3
 801bbdc:	843b      	strh	r3, [r7, #32]
 801bbde:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bbe2:	2b09      	cmp	r3, #9
 801bbe4:	f77f af4c 	ble.w	801ba80 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801bbe8:	7afb      	ldrb	r3, [r7, #11]
 801bbea:	f003 0302 	and.w	r3, r3, #2
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	d108      	bne.n	801bc04 <etharp_find_entry+0x1b8>
 801bbf2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801bbf6:	2b0a      	cmp	r3, #10
 801bbf8:	d107      	bne.n	801bc0a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801bbfa:	7afb      	ldrb	r3, [r7, #11]
 801bbfc:	f003 0301 	and.w	r3, r3, #1
 801bc00:	2b00      	cmp	r3, #0
 801bc02:	d102      	bne.n	801bc0a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801bc04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bc08:	e085      	b.n	801bd16 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801bc0a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801bc0e:	2b09      	cmp	r3, #9
 801bc10:	dc02      	bgt.n	801bc18 <etharp_find_entry+0x1cc>
    i = empty;
 801bc12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801bc14:	843b      	strh	r3, [r7, #32]
 801bc16:	e039      	b.n	801bc8c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801bc18:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801bc1c:	2b09      	cmp	r3, #9
 801bc1e:	dc14      	bgt.n	801bc4a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801bc20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc22:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801bc24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bc28:	493d      	ldr	r1, [pc, #244]	; (801bd20 <etharp_find_entry+0x2d4>)
 801bc2a:	4613      	mov	r3, r2
 801bc2c:	005b      	lsls	r3, r3, #1
 801bc2e:	4413      	add	r3, r2
 801bc30:	00db      	lsls	r3, r3, #3
 801bc32:	440b      	add	r3, r1
 801bc34:	681b      	ldr	r3, [r3, #0]
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d018      	beq.n	801bc6c <etharp_find_entry+0x220>
 801bc3a:	4b3a      	ldr	r3, [pc, #232]	; (801bd24 <etharp_find_entry+0x2d8>)
 801bc3c:	f240 126d 	movw	r2, #365	; 0x16d
 801bc40:	493b      	ldr	r1, [pc, #236]	; (801bd30 <etharp_find_entry+0x2e4>)
 801bc42:	483a      	ldr	r0, [pc, #232]	; (801bd2c <etharp_find_entry+0x2e0>)
 801bc44:	f002 fa3e 	bl	801e0c4 <iprintf>
 801bc48:	e010      	b.n	801bc6c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801bc4a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801bc4e:	2b09      	cmp	r3, #9
 801bc50:	dc02      	bgt.n	801bc58 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801bc52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bc54:	843b      	strh	r3, [r7, #32]
 801bc56:	e009      	b.n	801bc6c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801bc58:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801bc5c:	2b09      	cmp	r3, #9
 801bc5e:	dc02      	bgt.n	801bc66 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801bc60:	8bfb      	ldrh	r3, [r7, #30]
 801bc62:	843b      	strh	r3, [r7, #32]
 801bc64:	e002      	b.n	801bc6c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801bc66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bc6a:	e054      	b.n	801bd16 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801bc6c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bc70:	2b09      	cmp	r3, #9
 801bc72:	dd06      	ble.n	801bc82 <etharp_find_entry+0x236>
 801bc74:	4b2b      	ldr	r3, [pc, #172]	; (801bd24 <etharp_find_entry+0x2d8>)
 801bc76:	f240 127f 	movw	r2, #383	; 0x17f
 801bc7a:	492e      	ldr	r1, [pc, #184]	; (801bd34 <etharp_find_entry+0x2e8>)
 801bc7c:	482b      	ldr	r0, [pc, #172]	; (801bd2c <etharp_find_entry+0x2e0>)
 801bc7e:	f002 fa21 	bl	801e0c4 <iprintf>
    etharp_free_entry(i);
 801bc82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bc86:	4618      	mov	r0, r3
 801bc88:	f7ff fe06 	bl	801b898 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801bc8c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bc90:	2b09      	cmp	r3, #9
 801bc92:	dd06      	ble.n	801bca2 <etharp_find_entry+0x256>
 801bc94:	4b23      	ldr	r3, [pc, #140]	; (801bd24 <etharp_find_entry+0x2d8>)
 801bc96:	f240 1283 	movw	r2, #387	; 0x183
 801bc9a:	4926      	ldr	r1, [pc, #152]	; (801bd34 <etharp_find_entry+0x2e8>)
 801bc9c:	4823      	ldr	r0, [pc, #140]	; (801bd2c <etharp_find_entry+0x2e0>)
 801bc9e:	f002 fa11 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801bca2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bca6:	491e      	ldr	r1, [pc, #120]	; (801bd20 <etharp_find_entry+0x2d4>)
 801bca8:	4613      	mov	r3, r2
 801bcaa:	005b      	lsls	r3, r3, #1
 801bcac:	4413      	add	r3, r2
 801bcae:	00db      	lsls	r3, r3, #3
 801bcb0:	440b      	add	r3, r1
 801bcb2:	3314      	adds	r3, #20
 801bcb4:	781b      	ldrb	r3, [r3, #0]
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	d006      	beq.n	801bcc8 <etharp_find_entry+0x27c>
 801bcba:	4b1a      	ldr	r3, [pc, #104]	; (801bd24 <etharp_find_entry+0x2d8>)
 801bcbc:	f240 1285 	movw	r2, #389	; 0x185
 801bcc0:	491d      	ldr	r1, [pc, #116]	; (801bd38 <etharp_find_entry+0x2ec>)
 801bcc2:	481a      	ldr	r0, [pc, #104]	; (801bd2c <etharp_find_entry+0x2e0>)
 801bcc4:	f002 f9fe 	bl	801e0c4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801bcc8:	68fb      	ldr	r3, [r7, #12]
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	d00b      	beq.n	801bce6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801bcce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bcd2:	68fb      	ldr	r3, [r7, #12]
 801bcd4:	6819      	ldr	r1, [r3, #0]
 801bcd6:	4812      	ldr	r0, [pc, #72]	; (801bd20 <etharp_find_entry+0x2d4>)
 801bcd8:	4613      	mov	r3, r2
 801bcda:	005b      	lsls	r3, r3, #1
 801bcdc:	4413      	add	r3, r2
 801bcde:	00db      	lsls	r3, r3, #3
 801bce0:	4403      	add	r3, r0
 801bce2:	3304      	adds	r3, #4
 801bce4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801bce6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bcea:	490d      	ldr	r1, [pc, #52]	; (801bd20 <etharp_find_entry+0x2d4>)
 801bcec:	4613      	mov	r3, r2
 801bcee:	005b      	lsls	r3, r3, #1
 801bcf0:	4413      	add	r3, r2
 801bcf2:	00db      	lsls	r3, r3, #3
 801bcf4:	440b      	add	r3, r1
 801bcf6:	3312      	adds	r3, #18
 801bcf8:	2200      	movs	r2, #0
 801bcfa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801bcfc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bd00:	4907      	ldr	r1, [pc, #28]	; (801bd20 <etharp_find_entry+0x2d4>)
 801bd02:	4613      	mov	r3, r2
 801bd04:	005b      	lsls	r3, r3, #1
 801bd06:	4413      	add	r3, r2
 801bd08:	00db      	lsls	r3, r3, #3
 801bd0a:	440b      	add	r3, r1
 801bd0c:	3308      	adds	r3, #8
 801bd0e:	687a      	ldr	r2, [r7, #4]
 801bd10:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801bd12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801bd16:	4618      	mov	r0, r3
 801bd18:	3728      	adds	r7, #40	; 0x28
 801bd1a:	46bd      	mov	sp, r7
 801bd1c:	bd80      	pop	{r7, pc}
 801bd1e:	bf00      	nop
 801bd20:	20004568 	.word	0x20004568
 801bd24:	0802160c 	.word	0x0802160c
 801bd28:	08021644 	.word	0x08021644
 801bd2c:	08021684 	.word	0x08021684
 801bd30:	080216ac 	.word	0x080216ac
 801bd34:	080216c4 	.word	0x080216c4
 801bd38:	080216d8 	.word	0x080216d8

0801bd3c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801bd3c:	b580      	push	{r7, lr}
 801bd3e:	b088      	sub	sp, #32
 801bd40:	af02      	add	r7, sp, #8
 801bd42:	60f8      	str	r0, [r7, #12]
 801bd44:	60b9      	str	r1, [r7, #8]
 801bd46:	607a      	str	r2, [r7, #4]
 801bd48:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801bd4a:	68fb      	ldr	r3, [r7, #12]
 801bd4c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801bd50:	2b06      	cmp	r3, #6
 801bd52:	d006      	beq.n	801bd62 <etharp_update_arp_entry+0x26>
 801bd54:	4b48      	ldr	r3, [pc, #288]	; (801be78 <etharp_update_arp_entry+0x13c>)
 801bd56:	f240 12a9 	movw	r2, #425	; 0x1a9
 801bd5a:	4948      	ldr	r1, [pc, #288]	; (801be7c <etharp_update_arp_entry+0x140>)
 801bd5c:	4848      	ldr	r0, [pc, #288]	; (801be80 <etharp_update_arp_entry+0x144>)
 801bd5e:	f002 f9b1 	bl	801e0c4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801bd62:	68bb      	ldr	r3, [r7, #8]
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	d012      	beq.n	801bd8e <etharp_update_arp_entry+0x52>
 801bd68:	68bb      	ldr	r3, [r7, #8]
 801bd6a:	681b      	ldr	r3, [r3, #0]
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d00e      	beq.n	801bd8e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801bd70:	68bb      	ldr	r3, [r7, #8]
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	68f9      	ldr	r1, [r7, #12]
 801bd76:	4618      	mov	r0, r3
 801bd78:	f001 f8fc 	bl	801cf74 <ip4_addr_isbroadcast_u32>
 801bd7c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d105      	bne.n	801bd8e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801bd82:	68bb      	ldr	r3, [r7, #8]
 801bd84:	681b      	ldr	r3, [r3, #0]
 801bd86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801bd8a:	2be0      	cmp	r3, #224	; 0xe0
 801bd8c:	d102      	bne.n	801bd94 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801bd8e:	f06f 030f 	mvn.w	r3, #15
 801bd92:	e06c      	b.n	801be6e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801bd94:	78fb      	ldrb	r3, [r7, #3]
 801bd96:	68fa      	ldr	r2, [r7, #12]
 801bd98:	4619      	mov	r1, r3
 801bd9a:	68b8      	ldr	r0, [r7, #8]
 801bd9c:	f7ff fe56 	bl	801ba4c <etharp_find_entry>
 801bda0:	4603      	mov	r3, r0
 801bda2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801bda4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	da02      	bge.n	801bdb2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801bdac:	8afb      	ldrh	r3, [r7, #22]
 801bdae:	b25b      	sxtb	r3, r3
 801bdb0:	e05d      	b.n	801be6e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801bdb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bdb6:	4933      	ldr	r1, [pc, #204]	; (801be84 <etharp_update_arp_entry+0x148>)
 801bdb8:	4613      	mov	r3, r2
 801bdba:	005b      	lsls	r3, r3, #1
 801bdbc:	4413      	add	r3, r2
 801bdbe:	00db      	lsls	r3, r3, #3
 801bdc0:	440b      	add	r3, r1
 801bdc2:	3314      	adds	r3, #20
 801bdc4:	2202      	movs	r2, #2
 801bdc6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801bdc8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bdcc:	492d      	ldr	r1, [pc, #180]	; (801be84 <etharp_update_arp_entry+0x148>)
 801bdce:	4613      	mov	r3, r2
 801bdd0:	005b      	lsls	r3, r3, #1
 801bdd2:	4413      	add	r3, r2
 801bdd4:	00db      	lsls	r3, r3, #3
 801bdd6:	440b      	add	r3, r1
 801bdd8:	3308      	adds	r3, #8
 801bdda:	68fa      	ldr	r2, [r7, #12]
 801bddc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801bdde:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bde2:	4613      	mov	r3, r2
 801bde4:	005b      	lsls	r3, r3, #1
 801bde6:	4413      	add	r3, r2
 801bde8:	00db      	lsls	r3, r3, #3
 801bdea:	3308      	adds	r3, #8
 801bdec:	4a25      	ldr	r2, [pc, #148]	; (801be84 <etharp_update_arp_entry+0x148>)
 801bdee:	4413      	add	r3, r2
 801bdf0:	3304      	adds	r3, #4
 801bdf2:	2206      	movs	r2, #6
 801bdf4:	6879      	ldr	r1, [r7, #4]
 801bdf6:	4618      	mov	r0, r3
 801bdf8:	f002 f951 	bl	801e09e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801bdfc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801be00:	4920      	ldr	r1, [pc, #128]	; (801be84 <etharp_update_arp_entry+0x148>)
 801be02:	4613      	mov	r3, r2
 801be04:	005b      	lsls	r3, r3, #1
 801be06:	4413      	add	r3, r2
 801be08:	00db      	lsls	r3, r3, #3
 801be0a:	440b      	add	r3, r1
 801be0c:	3312      	adds	r3, #18
 801be0e:	2200      	movs	r2, #0
 801be10:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801be12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801be16:	491b      	ldr	r1, [pc, #108]	; (801be84 <etharp_update_arp_entry+0x148>)
 801be18:	4613      	mov	r3, r2
 801be1a:	005b      	lsls	r3, r3, #1
 801be1c:	4413      	add	r3, r2
 801be1e:	00db      	lsls	r3, r3, #3
 801be20:	440b      	add	r3, r1
 801be22:	681b      	ldr	r3, [r3, #0]
 801be24:	2b00      	cmp	r3, #0
 801be26:	d021      	beq.n	801be6c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801be28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801be2c:	4915      	ldr	r1, [pc, #84]	; (801be84 <etharp_update_arp_entry+0x148>)
 801be2e:	4613      	mov	r3, r2
 801be30:	005b      	lsls	r3, r3, #1
 801be32:	4413      	add	r3, r2
 801be34:	00db      	lsls	r3, r3, #3
 801be36:	440b      	add	r3, r1
 801be38:	681b      	ldr	r3, [r3, #0]
 801be3a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801be3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801be40:	4910      	ldr	r1, [pc, #64]	; (801be84 <etharp_update_arp_entry+0x148>)
 801be42:	4613      	mov	r3, r2
 801be44:	005b      	lsls	r3, r3, #1
 801be46:	4413      	add	r3, r2
 801be48:	00db      	lsls	r3, r3, #3
 801be4a:	440b      	add	r3, r1
 801be4c:	2200      	movs	r2, #0
 801be4e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801be50:	68fb      	ldr	r3, [r7, #12]
 801be52:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801be56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801be5a:	9300      	str	r3, [sp, #0]
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	6939      	ldr	r1, [r7, #16]
 801be60:	68f8      	ldr	r0, [r7, #12]
 801be62:	f001 ff8b 	bl	801dd7c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801be66:	6938      	ldr	r0, [r7, #16]
 801be68:	f7f8 fee6 	bl	8014c38 <pbuf_free>
  }
  return ERR_OK;
 801be6c:	2300      	movs	r3, #0
}
 801be6e:	4618      	mov	r0, r3
 801be70:	3718      	adds	r7, #24
 801be72:	46bd      	mov	sp, r7
 801be74:	bd80      	pop	{r7, pc}
 801be76:	bf00      	nop
 801be78:	0802160c 	.word	0x0802160c
 801be7c:	08021704 	.word	0x08021704
 801be80:	08021684 	.word	0x08021684
 801be84:	20004568 	.word	0x20004568

0801be88 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801be88:	b580      	push	{r7, lr}
 801be8a:	b084      	sub	sp, #16
 801be8c:	af00      	add	r7, sp, #0
 801be8e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801be90:	2300      	movs	r3, #0
 801be92:	60fb      	str	r3, [r7, #12]
 801be94:	e01e      	b.n	801bed4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801be96:	4913      	ldr	r1, [pc, #76]	; (801bee4 <etharp_cleanup_netif+0x5c>)
 801be98:	68fa      	ldr	r2, [r7, #12]
 801be9a:	4613      	mov	r3, r2
 801be9c:	005b      	lsls	r3, r3, #1
 801be9e:	4413      	add	r3, r2
 801bea0:	00db      	lsls	r3, r3, #3
 801bea2:	440b      	add	r3, r1
 801bea4:	3314      	adds	r3, #20
 801bea6:	781b      	ldrb	r3, [r3, #0]
 801bea8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801beaa:	7afb      	ldrb	r3, [r7, #11]
 801beac:	2b00      	cmp	r3, #0
 801beae:	d00e      	beq.n	801bece <etharp_cleanup_netif+0x46>
 801beb0:	490c      	ldr	r1, [pc, #48]	; (801bee4 <etharp_cleanup_netif+0x5c>)
 801beb2:	68fa      	ldr	r2, [r7, #12]
 801beb4:	4613      	mov	r3, r2
 801beb6:	005b      	lsls	r3, r3, #1
 801beb8:	4413      	add	r3, r2
 801beba:	00db      	lsls	r3, r3, #3
 801bebc:	440b      	add	r3, r1
 801bebe:	3308      	adds	r3, #8
 801bec0:	681b      	ldr	r3, [r3, #0]
 801bec2:	687a      	ldr	r2, [r7, #4]
 801bec4:	429a      	cmp	r2, r3
 801bec6:	d102      	bne.n	801bece <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801bec8:	68f8      	ldr	r0, [r7, #12]
 801beca:	f7ff fce5 	bl	801b898 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bece:	68fb      	ldr	r3, [r7, #12]
 801bed0:	3301      	adds	r3, #1
 801bed2:	60fb      	str	r3, [r7, #12]
 801bed4:	68fb      	ldr	r3, [r7, #12]
 801bed6:	2b09      	cmp	r3, #9
 801bed8:	dddd      	ble.n	801be96 <etharp_cleanup_netif+0xe>
    }
  }
}
 801beda:	bf00      	nop
 801bedc:	3710      	adds	r7, #16
 801bede:	46bd      	mov	sp, r7
 801bee0:	bd80      	pop	{r7, pc}
 801bee2:	bf00      	nop
 801bee4:	20004568 	.word	0x20004568

0801bee8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801bee8:	b5b0      	push	{r4, r5, r7, lr}
 801beea:	b08a      	sub	sp, #40	; 0x28
 801beec:	af04      	add	r7, sp, #16
 801beee:	6078      	str	r0, [r7, #4]
 801bef0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801bef2:	683b      	ldr	r3, [r7, #0]
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d107      	bne.n	801bf08 <etharp_input+0x20>
 801bef8:	4b3d      	ldr	r3, [pc, #244]	; (801bff0 <etharp_input+0x108>)
 801befa:	f240 228a 	movw	r2, #650	; 0x28a
 801befe:	493d      	ldr	r1, [pc, #244]	; (801bff4 <etharp_input+0x10c>)
 801bf00:	483d      	ldr	r0, [pc, #244]	; (801bff8 <etharp_input+0x110>)
 801bf02:	f002 f8df 	bl	801e0c4 <iprintf>
 801bf06:	e06f      	b.n	801bfe8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	685b      	ldr	r3, [r3, #4]
 801bf0c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801bf0e:	693b      	ldr	r3, [r7, #16]
 801bf10:	881b      	ldrh	r3, [r3, #0]
 801bf12:	b29b      	uxth	r3, r3
 801bf14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bf18:	d10c      	bne.n	801bf34 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801bf1a:	693b      	ldr	r3, [r7, #16]
 801bf1c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801bf1e:	2b06      	cmp	r3, #6
 801bf20:	d108      	bne.n	801bf34 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801bf22:	693b      	ldr	r3, [r7, #16]
 801bf24:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801bf26:	2b04      	cmp	r3, #4
 801bf28:	d104      	bne.n	801bf34 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801bf2a:	693b      	ldr	r3, [r7, #16]
 801bf2c:	885b      	ldrh	r3, [r3, #2]
 801bf2e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801bf30:	2b08      	cmp	r3, #8
 801bf32:	d003      	beq.n	801bf3c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801bf34:	6878      	ldr	r0, [r7, #4]
 801bf36:	f7f8 fe7f 	bl	8014c38 <pbuf_free>
    return;
 801bf3a:	e055      	b.n	801bfe8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801bf3c:	693b      	ldr	r3, [r7, #16]
 801bf3e:	330e      	adds	r3, #14
 801bf40:	681b      	ldr	r3, [r3, #0]
 801bf42:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801bf44:	693b      	ldr	r3, [r7, #16]
 801bf46:	3318      	adds	r3, #24
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801bf4c:	683b      	ldr	r3, [r7, #0]
 801bf4e:	3304      	adds	r3, #4
 801bf50:	681b      	ldr	r3, [r3, #0]
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d102      	bne.n	801bf5c <etharp_input+0x74>
    for_us = 0;
 801bf56:	2300      	movs	r3, #0
 801bf58:	75fb      	strb	r3, [r7, #23]
 801bf5a:	e009      	b.n	801bf70 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801bf5c:	68ba      	ldr	r2, [r7, #8]
 801bf5e:	683b      	ldr	r3, [r7, #0]
 801bf60:	3304      	adds	r3, #4
 801bf62:	681b      	ldr	r3, [r3, #0]
 801bf64:	429a      	cmp	r2, r3
 801bf66:	bf0c      	ite	eq
 801bf68:	2301      	moveq	r3, #1
 801bf6a:	2300      	movne	r3, #0
 801bf6c:	b2db      	uxtb	r3, r3
 801bf6e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801bf70:	693b      	ldr	r3, [r7, #16]
 801bf72:	f103 0208 	add.w	r2, r3, #8
 801bf76:	7dfb      	ldrb	r3, [r7, #23]
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	d001      	beq.n	801bf80 <etharp_input+0x98>
 801bf7c:	2301      	movs	r3, #1
 801bf7e:	e000      	b.n	801bf82 <etharp_input+0x9a>
 801bf80:	2302      	movs	r3, #2
 801bf82:	f107 010c 	add.w	r1, r7, #12
 801bf86:	6838      	ldr	r0, [r7, #0]
 801bf88:	f7ff fed8 	bl	801bd3c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801bf8c:	693b      	ldr	r3, [r7, #16]
 801bf8e:	88db      	ldrh	r3, [r3, #6]
 801bf90:	b29b      	uxth	r3, r3
 801bf92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bf96:	d003      	beq.n	801bfa0 <etharp_input+0xb8>
 801bf98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bf9c:	d01e      	beq.n	801bfdc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801bf9e:	e020      	b.n	801bfe2 <etharp_input+0xfa>
      if (for_us) {
 801bfa0:	7dfb      	ldrb	r3, [r7, #23]
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d01c      	beq.n	801bfe0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801bfa6:	683b      	ldr	r3, [r7, #0]
 801bfa8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801bfac:	693b      	ldr	r3, [r7, #16]
 801bfae:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801bfb2:	683b      	ldr	r3, [r7, #0]
 801bfb4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801bfb8:	683b      	ldr	r3, [r7, #0]
 801bfba:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801bfbc:	693a      	ldr	r2, [r7, #16]
 801bfbe:	3208      	adds	r2, #8
        etharp_raw(netif,
 801bfc0:	2102      	movs	r1, #2
 801bfc2:	9103      	str	r1, [sp, #12]
 801bfc4:	f107 010c 	add.w	r1, r7, #12
 801bfc8:	9102      	str	r1, [sp, #8]
 801bfca:	9201      	str	r2, [sp, #4]
 801bfcc:	9300      	str	r3, [sp, #0]
 801bfce:	462b      	mov	r3, r5
 801bfd0:	4622      	mov	r2, r4
 801bfd2:	4601      	mov	r1, r0
 801bfd4:	6838      	ldr	r0, [r7, #0]
 801bfd6:	f000 faeb 	bl	801c5b0 <etharp_raw>
      break;
 801bfda:	e001      	b.n	801bfe0 <etharp_input+0xf8>
      break;
 801bfdc:	bf00      	nop
 801bfde:	e000      	b.n	801bfe2 <etharp_input+0xfa>
      break;
 801bfe0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801bfe2:	6878      	ldr	r0, [r7, #4]
 801bfe4:	f7f8 fe28 	bl	8014c38 <pbuf_free>
}
 801bfe8:	3718      	adds	r7, #24
 801bfea:	46bd      	mov	sp, r7
 801bfec:	bdb0      	pop	{r4, r5, r7, pc}
 801bfee:	bf00      	nop
 801bff0:	0802160c 	.word	0x0802160c
 801bff4:	0802175c 	.word	0x0802175c
 801bff8:	08021684 	.word	0x08021684

0801bffc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801bffc:	b580      	push	{r7, lr}
 801bffe:	b086      	sub	sp, #24
 801c000:	af02      	add	r7, sp, #8
 801c002:	60f8      	str	r0, [r7, #12]
 801c004:	60b9      	str	r1, [r7, #8]
 801c006:	4613      	mov	r3, r2
 801c008:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801c00a:	79fa      	ldrb	r2, [r7, #7]
 801c00c:	4944      	ldr	r1, [pc, #272]	; (801c120 <etharp_output_to_arp_index+0x124>)
 801c00e:	4613      	mov	r3, r2
 801c010:	005b      	lsls	r3, r3, #1
 801c012:	4413      	add	r3, r2
 801c014:	00db      	lsls	r3, r3, #3
 801c016:	440b      	add	r3, r1
 801c018:	3314      	adds	r3, #20
 801c01a:	781b      	ldrb	r3, [r3, #0]
 801c01c:	2b01      	cmp	r3, #1
 801c01e:	d806      	bhi.n	801c02e <etharp_output_to_arp_index+0x32>
 801c020:	4b40      	ldr	r3, [pc, #256]	; (801c124 <etharp_output_to_arp_index+0x128>)
 801c022:	f240 22ef 	movw	r2, #751	; 0x2ef
 801c026:	4940      	ldr	r1, [pc, #256]	; (801c128 <etharp_output_to_arp_index+0x12c>)
 801c028:	4840      	ldr	r0, [pc, #256]	; (801c12c <etharp_output_to_arp_index+0x130>)
 801c02a:	f002 f84b 	bl	801e0c4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801c02e:	79fa      	ldrb	r2, [r7, #7]
 801c030:	493b      	ldr	r1, [pc, #236]	; (801c120 <etharp_output_to_arp_index+0x124>)
 801c032:	4613      	mov	r3, r2
 801c034:	005b      	lsls	r3, r3, #1
 801c036:	4413      	add	r3, r2
 801c038:	00db      	lsls	r3, r3, #3
 801c03a:	440b      	add	r3, r1
 801c03c:	3314      	adds	r3, #20
 801c03e:	781b      	ldrb	r3, [r3, #0]
 801c040:	2b02      	cmp	r3, #2
 801c042:	d153      	bne.n	801c0ec <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801c044:	79fa      	ldrb	r2, [r7, #7]
 801c046:	4936      	ldr	r1, [pc, #216]	; (801c120 <etharp_output_to_arp_index+0x124>)
 801c048:	4613      	mov	r3, r2
 801c04a:	005b      	lsls	r3, r3, #1
 801c04c:	4413      	add	r3, r2
 801c04e:	00db      	lsls	r3, r3, #3
 801c050:	440b      	add	r3, r1
 801c052:	3312      	adds	r3, #18
 801c054:	881b      	ldrh	r3, [r3, #0]
 801c056:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801c05a:	d919      	bls.n	801c090 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801c05c:	79fa      	ldrb	r2, [r7, #7]
 801c05e:	4613      	mov	r3, r2
 801c060:	005b      	lsls	r3, r3, #1
 801c062:	4413      	add	r3, r2
 801c064:	00db      	lsls	r3, r3, #3
 801c066:	4a2e      	ldr	r2, [pc, #184]	; (801c120 <etharp_output_to_arp_index+0x124>)
 801c068:	4413      	add	r3, r2
 801c06a:	3304      	adds	r3, #4
 801c06c:	4619      	mov	r1, r3
 801c06e:	68f8      	ldr	r0, [r7, #12]
 801c070:	f000 fb4c 	bl	801c70c <etharp_request>
 801c074:	4603      	mov	r3, r0
 801c076:	2b00      	cmp	r3, #0
 801c078:	d138      	bne.n	801c0ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c07a:	79fa      	ldrb	r2, [r7, #7]
 801c07c:	4928      	ldr	r1, [pc, #160]	; (801c120 <etharp_output_to_arp_index+0x124>)
 801c07e:	4613      	mov	r3, r2
 801c080:	005b      	lsls	r3, r3, #1
 801c082:	4413      	add	r3, r2
 801c084:	00db      	lsls	r3, r3, #3
 801c086:	440b      	add	r3, r1
 801c088:	3314      	adds	r3, #20
 801c08a:	2203      	movs	r2, #3
 801c08c:	701a      	strb	r2, [r3, #0]
 801c08e:	e02d      	b.n	801c0ec <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801c090:	79fa      	ldrb	r2, [r7, #7]
 801c092:	4923      	ldr	r1, [pc, #140]	; (801c120 <etharp_output_to_arp_index+0x124>)
 801c094:	4613      	mov	r3, r2
 801c096:	005b      	lsls	r3, r3, #1
 801c098:	4413      	add	r3, r2
 801c09a:	00db      	lsls	r3, r3, #3
 801c09c:	440b      	add	r3, r1
 801c09e:	3312      	adds	r3, #18
 801c0a0:	881b      	ldrh	r3, [r3, #0]
 801c0a2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801c0a6:	d321      	bcc.n	801c0ec <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801c0a8:	79fa      	ldrb	r2, [r7, #7]
 801c0aa:	4613      	mov	r3, r2
 801c0ac:	005b      	lsls	r3, r3, #1
 801c0ae:	4413      	add	r3, r2
 801c0b0:	00db      	lsls	r3, r3, #3
 801c0b2:	4a1b      	ldr	r2, [pc, #108]	; (801c120 <etharp_output_to_arp_index+0x124>)
 801c0b4:	4413      	add	r3, r2
 801c0b6:	1d19      	adds	r1, r3, #4
 801c0b8:	79fa      	ldrb	r2, [r7, #7]
 801c0ba:	4613      	mov	r3, r2
 801c0bc:	005b      	lsls	r3, r3, #1
 801c0be:	4413      	add	r3, r2
 801c0c0:	00db      	lsls	r3, r3, #3
 801c0c2:	3308      	adds	r3, #8
 801c0c4:	4a16      	ldr	r2, [pc, #88]	; (801c120 <etharp_output_to_arp_index+0x124>)
 801c0c6:	4413      	add	r3, r2
 801c0c8:	3304      	adds	r3, #4
 801c0ca:	461a      	mov	r2, r3
 801c0cc:	68f8      	ldr	r0, [r7, #12]
 801c0ce:	f000 fafb 	bl	801c6c8 <etharp_request_dst>
 801c0d2:	4603      	mov	r3, r0
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	d109      	bne.n	801c0ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c0d8:	79fa      	ldrb	r2, [r7, #7]
 801c0da:	4911      	ldr	r1, [pc, #68]	; (801c120 <etharp_output_to_arp_index+0x124>)
 801c0dc:	4613      	mov	r3, r2
 801c0de:	005b      	lsls	r3, r3, #1
 801c0e0:	4413      	add	r3, r2
 801c0e2:	00db      	lsls	r3, r3, #3
 801c0e4:	440b      	add	r3, r1
 801c0e6:	3314      	adds	r3, #20
 801c0e8:	2203      	movs	r2, #3
 801c0ea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801c0ec:	68fb      	ldr	r3, [r7, #12]
 801c0ee:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801c0f2:	79fa      	ldrb	r2, [r7, #7]
 801c0f4:	4613      	mov	r3, r2
 801c0f6:	005b      	lsls	r3, r3, #1
 801c0f8:	4413      	add	r3, r2
 801c0fa:	00db      	lsls	r3, r3, #3
 801c0fc:	3308      	adds	r3, #8
 801c0fe:	4a08      	ldr	r2, [pc, #32]	; (801c120 <etharp_output_to_arp_index+0x124>)
 801c100:	4413      	add	r3, r2
 801c102:	1d1a      	adds	r2, r3, #4
 801c104:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c108:	9300      	str	r3, [sp, #0]
 801c10a:	4613      	mov	r3, r2
 801c10c:	460a      	mov	r2, r1
 801c10e:	68b9      	ldr	r1, [r7, #8]
 801c110:	68f8      	ldr	r0, [r7, #12]
 801c112:	f001 fe33 	bl	801dd7c <ethernet_output>
 801c116:	4603      	mov	r3, r0
}
 801c118:	4618      	mov	r0, r3
 801c11a:	3710      	adds	r7, #16
 801c11c:	46bd      	mov	sp, r7
 801c11e:	bd80      	pop	{r7, pc}
 801c120:	20004568 	.word	0x20004568
 801c124:	0802160c 	.word	0x0802160c
 801c128:	0802177c 	.word	0x0802177c
 801c12c:	08021684 	.word	0x08021684

0801c130 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801c130:	b580      	push	{r7, lr}
 801c132:	b08a      	sub	sp, #40	; 0x28
 801c134:	af02      	add	r7, sp, #8
 801c136:	60f8      	str	r0, [r7, #12]
 801c138:	60b9      	str	r1, [r7, #8]
 801c13a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c140:	68fb      	ldr	r3, [r7, #12]
 801c142:	2b00      	cmp	r3, #0
 801c144:	d106      	bne.n	801c154 <etharp_output+0x24>
 801c146:	4b73      	ldr	r3, [pc, #460]	; (801c314 <etharp_output+0x1e4>)
 801c148:	f240 321e 	movw	r2, #798	; 0x31e
 801c14c:	4972      	ldr	r1, [pc, #456]	; (801c318 <etharp_output+0x1e8>)
 801c14e:	4873      	ldr	r0, [pc, #460]	; (801c31c <etharp_output+0x1ec>)
 801c150:	f001 ffb8 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801c154:	68bb      	ldr	r3, [r7, #8]
 801c156:	2b00      	cmp	r3, #0
 801c158:	d106      	bne.n	801c168 <etharp_output+0x38>
 801c15a:	4b6e      	ldr	r3, [pc, #440]	; (801c314 <etharp_output+0x1e4>)
 801c15c:	f240 321f 	movw	r2, #799	; 0x31f
 801c160:	496f      	ldr	r1, [pc, #444]	; (801c320 <etharp_output+0x1f0>)
 801c162:	486e      	ldr	r0, [pc, #440]	; (801c31c <etharp_output+0x1ec>)
 801c164:	f001 ffae 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	d106      	bne.n	801c17c <etharp_output+0x4c>
 801c16e:	4b69      	ldr	r3, [pc, #420]	; (801c314 <etharp_output+0x1e4>)
 801c170:	f44f 7248 	mov.w	r2, #800	; 0x320
 801c174:	496b      	ldr	r1, [pc, #428]	; (801c324 <etharp_output+0x1f4>)
 801c176:	4869      	ldr	r0, [pc, #420]	; (801c31c <etharp_output+0x1ec>)
 801c178:	f001 ffa4 	bl	801e0c4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801c17c:	687b      	ldr	r3, [r7, #4]
 801c17e:	681b      	ldr	r3, [r3, #0]
 801c180:	68f9      	ldr	r1, [r7, #12]
 801c182:	4618      	mov	r0, r3
 801c184:	f000 fef6 	bl	801cf74 <ip4_addr_isbroadcast_u32>
 801c188:	4603      	mov	r3, r0
 801c18a:	2b00      	cmp	r3, #0
 801c18c:	d002      	beq.n	801c194 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801c18e:	4b66      	ldr	r3, [pc, #408]	; (801c328 <etharp_output+0x1f8>)
 801c190:	61fb      	str	r3, [r7, #28]
 801c192:	e0af      	b.n	801c2f4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801c194:	687b      	ldr	r3, [r7, #4]
 801c196:	681b      	ldr	r3, [r3, #0]
 801c198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c19c:	2be0      	cmp	r3, #224	; 0xe0
 801c19e:	d118      	bne.n	801c1d2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801c1a0:	2301      	movs	r3, #1
 801c1a2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801c1a4:	2300      	movs	r3, #0
 801c1a6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801c1a8:	235e      	movs	r3, #94	; 0x5e
 801c1aa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	3301      	adds	r3, #1
 801c1b0:	781b      	ldrb	r3, [r3, #0]
 801c1b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c1b6:	b2db      	uxtb	r3, r3
 801c1b8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	3302      	adds	r3, #2
 801c1be:	781b      	ldrb	r3, [r3, #0]
 801c1c0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	3303      	adds	r3, #3
 801c1c6:	781b      	ldrb	r3, [r3, #0]
 801c1c8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801c1ca:	f107 0310 	add.w	r3, r7, #16
 801c1ce:	61fb      	str	r3, [r7, #28]
 801c1d0:	e090      	b.n	801c2f4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	681a      	ldr	r2, [r3, #0]
 801c1d6:	68fb      	ldr	r3, [r7, #12]
 801c1d8:	3304      	adds	r3, #4
 801c1da:	681b      	ldr	r3, [r3, #0]
 801c1dc:	405a      	eors	r2, r3
 801c1de:	68fb      	ldr	r3, [r7, #12]
 801c1e0:	3308      	adds	r3, #8
 801c1e2:	681b      	ldr	r3, [r3, #0]
 801c1e4:	4013      	ands	r3, r2
 801c1e6:	2b00      	cmp	r3, #0
 801c1e8:	d012      	beq.n	801c210 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c1f0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801c1f4:	4293      	cmp	r3, r2
 801c1f6:	d00b      	beq.n	801c210 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801c1f8:	68fb      	ldr	r3, [r7, #12]
 801c1fa:	330c      	adds	r3, #12
 801c1fc:	681b      	ldr	r3, [r3, #0]
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d003      	beq.n	801c20a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801c202:	68fb      	ldr	r3, [r7, #12]
 801c204:	330c      	adds	r3, #12
 801c206:	61bb      	str	r3, [r7, #24]
 801c208:	e002      	b.n	801c210 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801c20a:	f06f 0303 	mvn.w	r3, #3
 801c20e:	e07d      	b.n	801c30c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c210:	4b46      	ldr	r3, [pc, #280]	; (801c32c <etharp_output+0x1fc>)
 801c212:	781b      	ldrb	r3, [r3, #0]
 801c214:	4619      	mov	r1, r3
 801c216:	4a46      	ldr	r2, [pc, #280]	; (801c330 <etharp_output+0x200>)
 801c218:	460b      	mov	r3, r1
 801c21a:	005b      	lsls	r3, r3, #1
 801c21c:	440b      	add	r3, r1
 801c21e:	00db      	lsls	r3, r3, #3
 801c220:	4413      	add	r3, r2
 801c222:	3314      	adds	r3, #20
 801c224:	781b      	ldrb	r3, [r3, #0]
 801c226:	2b01      	cmp	r3, #1
 801c228:	d925      	bls.n	801c276 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c22a:	4b40      	ldr	r3, [pc, #256]	; (801c32c <etharp_output+0x1fc>)
 801c22c:	781b      	ldrb	r3, [r3, #0]
 801c22e:	4619      	mov	r1, r3
 801c230:	4a3f      	ldr	r2, [pc, #252]	; (801c330 <etharp_output+0x200>)
 801c232:	460b      	mov	r3, r1
 801c234:	005b      	lsls	r3, r3, #1
 801c236:	440b      	add	r3, r1
 801c238:	00db      	lsls	r3, r3, #3
 801c23a:	4413      	add	r3, r2
 801c23c:	3308      	adds	r3, #8
 801c23e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c240:	68fa      	ldr	r2, [r7, #12]
 801c242:	429a      	cmp	r2, r3
 801c244:	d117      	bne.n	801c276 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801c246:	69bb      	ldr	r3, [r7, #24]
 801c248:	681a      	ldr	r2, [r3, #0]
 801c24a:	4b38      	ldr	r3, [pc, #224]	; (801c32c <etharp_output+0x1fc>)
 801c24c:	781b      	ldrb	r3, [r3, #0]
 801c24e:	4618      	mov	r0, r3
 801c250:	4937      	ldr	r1, [pc, #220]	; (801c330 <etharp_output+0x200>)
 801c252:	4603      	mov	r3, r0
 801c254:	005b      	lsls	r3, r3, #1
 801c256:	4403      	add	r3, r0
 801c258:	00db      	lsls	r3, r3, #3
 801c25a:	440b      	add	r3, r1
 801c25c:	3304      	adds	r3, #4
 801c25e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c260:	429a      	cmp	r2, r3
 801c262:	d108      	bne.n	801c276 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801c264:	4b31      	ldr	r3, [pc, #196]	; (801c32c <etharp_output+0x1fc>)
 801c266:	781b      	ldrb	r3, [r3, #0]
 801c268:	461a      	mov	r2, r3
 801c26a:	68b9      	ldr	r1, [r7, #8]
 801c26c:	68f8      	ldr	r0, [r7, #12]
 801c26e:	f7ff fec5 	bl	801bffc <etharp_output_to_arp_index>
 801c272:	4603      	mov	r3, r0
 801c274:	e04a      	b.n	801c30c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c276:	2300      	movs	r3, #0
 801c278:	75fb      	strb	r3, [r7, #23]
 801c27a:	e031      	b.n	801c2e0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c27c:	7dfa      	ldrb	r2, [r7, #23]
 801c27e:	492c      	ldr	r1, [pc, #176]	; (801c330 <etharp_output+0x200>)
 801c280:	4613      	mov	r3, r2
 801c282:	005b      	lsls	r3, r3, #1
 801c284:	4413      	add	r3, r2
 801c286:	00db      	lsls	r3, r3, #3
 801c288:	440b      	add	r3, r1
 801c28a:	3314      	adds	r3, #20
 801c28c:	781b      	ldrb	r3, [r3, #0]
 801c28e:	2b01      	cmp	r3, #1
 801c290:	d923      	bls.n	801c2da <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801c292:	7dfa      	ldrb	r2, [r7, #23]
 801c294:	4926      	ldr	r1, [pc, #152]	; (801c330 <etharp_output+0x200>)
 801c296:	4613      	mov	r3, r2
 801c298:	005b      	lsls	r3, r3, #1
 801c29a:	4413      	add	r3, r2
 801c29c:	00db      	lsls	r3, r3, #3
 801c29e:	440b      	add	r3, r1
 801c2a0:	3308      	adds	r3, #8
 801c2a2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c2a4:	68fa      	ldr	r2, [r7, #12]
 801c2a6:	429a      	cmp	r2, r3
 801c2a8:	d117      	bne.n	801c2da <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801c2aa:	69bb      	ldr	r3, [r7, #24]
 801c2ac:	6819      	ldr	r1, [r3, #0]
 801c2ae:	7dfa      	ldrb	r2, [r7, #23]
 801c2b0:	481f      	ldr	r0, [pc, #124]	; (801c330 <etharp_output+0x200>)
 801c2b2:	4613      	mov	r3, r2
 801c2b4:	005b      	lsls	r3, r3, #1
 801c2b6:	4413      	add	r3, r2
 801c2b8:	00db      	lsls	r3, r3, #3
 801c2ba:	4403      	add	r3, r0
 801c2bc:	3304      	adds	r3, #4
 801c2be:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801c2c0:	4299      	cmp	r1, r3
 801c2c2:	d10a      	bne.n	801c2da <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801c2c4:	4a19      	ldr	r2, [pc, #100]	; (801c32c <etharp_output+0x1fc>)
 801c2c6:	7dfb      	ldrb	r3, [r7, #23]
 801c2c8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801c2ca:	7dfb      	ldrb	r3, [r7, #23]
 801c2cc:	461a      	mov	r2, r3
 801c2ce:	68b9      	ldr	r1, [r7, #8]
 801c2d0:	68f8      	ldr	r0, [r7, #12]
 801c2d2:	f7ff fe93 	bl	801bffc <etharp_output_to_arp_index>
 801c2d6:	4603      	mov	r3, r0
 801c2d8:	e018      	b.n	801c30c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c2da:	7dfb      	ldrb	r3, [r7, #23]
 801c2dc:	3301      	adds	r3, #1
 801c2de:	75fb      	strb	r3, [r7, #23]
 801c2e0:	7dfb      	ldrb	r3, [r7, #23]
 801c2e2:	2b09      	cmp	r3, #9
 801c2e4:	d9ca      	bls.n	801c27c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801c2e6:	68ba      	ldr	r2, [r7, #8]
 801c2e8:	69b9      	ldr	r1, [r7, #24]
 801c2ea:	68f8      	ldr	r0, [r7, #12]
 801c2ec:	f000 f822 	bl	801c334 <etharp_query>
 801c2f0:	4603      	mov	r3, r0
 801c2f2:	e00b      	b.n	801c30c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801c2f4:	68fb      	ldr	r3, [r7, #12]
 801c2f6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801c2fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c2fe:	9300      	str	r3, [sp, #0]
 801c300:	69fb      	ldr	r3, [r7, #28]
 801c302:	68b9      	ldr	r1, [r7, #8]
 801c304:	68f8      	ldr	r0, [r7, #12]
 801c306:	f001 fd39 	bl	801dd7c <ethernet_output>
 801c30a:	4603      	mov	r3, r0
}
 801c30c:	4618      	mov	r0, r3
 801c30e:	3720      	adds	r7, #32
 801c310:	46bd      	mov	sp, r7
 801c312:	bd80      	pop	{r7, pc}
 801c314:	0802160c 	.word	0x0802160c
 801c318:	0802175c 	.word	0x0802175c
 801c31c:	08021684 	.word	0x08021684
 801c320:	080217ac 	.word	0x080217ac
 801c324:	0802174c 	.word	0x0802174c
 801c328:	08032944 	.word	0x08032944
 801c32c:	20004658 	.word	0x20004658
 801c330:	20004568 	.word	0x20004568

0801c334 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801c334:	b580      	push	{r7, lr}
 801c336:	b08c      	sub	sp, #48	; 0x30
 801c338:	af02      	add	r7, sp, #8
 801c33a:	60f8      	str	r0, [r7, #12]
 801c33c:	60b9      	str	r1, [r7, #8]
 801c33e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801c340:	68fb      	ldr	r3, [r7, #12]
 801c342:	3326      	adds	r3, #38	; 0x26
 801c344:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801c346:	23ff      	movs	r3, #255	; 0xff
 801c348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801c34c:	2300      	movs	r3, #0
 801c34e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c350:	68bb      	ldr	r3, [r7, #8]
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	68f9      	ldr	r1, [r7, #12]
 801c356:	4618      	mov	r0, r3
 801c358:	f000 fe0c 	bl	801cf74 <ip4_addr_isbroadcast_u32>
 801c35c:	4603      	mov	r3, r0
 801c35e:	2b00      	cmp	r3, #0
 801c360:	d10c      	bne.n	801c37c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c362:	68bb      	ldr	r3, [r7, #8]
 801c364:	681b      	ldr	r3, [r3, #0]
 801c366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c36a:	2be0      	cmp	r3, #224	; 0xe0
 801c36c:	d006      	beq.n	801c37c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c36e:	68bb      	ldr	r3, [r7, #8]
 801c370:	2b00      	cmp	r3, #0
 801c372:	d003      	beq.n	801c37c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801c374:	68bb      	ldr	r3, [r7, #8]
 801c376:	681b      	ldr	r3, [r3, #0]
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d102      	bne.n	801c382 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c37c:	f06f 030f 	mvn.w	r3, #15
 801c380:	e102      	b.n	801c588 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801c382:	68fa      	ldr	r2, [r7, #12]
 801c384:	2101      	movs	r1, #1
 801c386:	68b8      	ldr	r0, [r7, #8]
 801c388:	f7ff fb60 	bl	801ba4c <etharp_find_entry>
 801c38c:	4603      	mov	r3, r0
 801c38e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801c390:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c394:	2b00      	cmp	r3, #0
 801c396:	da02      	bge.n	801c39e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801c398:	8a7b      	ldrh	r3, [r7, #18]
 801c39a:	b25b      	sxtb	r3, r3
 801c39c:	e0f4      	b.n	801c588 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801c39e:	8a7b      	ldrh	r3, [r7, #18]
 801c3a0:	2b7e      	cmp	r3, #126	; 0x7e
 801c3a2:	d906      	bls.n	801c3b2 <etharp_query+0x7e>
 801c3a4:	4b7a      	ldr	r3, [pc, #488]	; (801c590 <etharp_query+0x25c>)
 801c3a6:	f240 32c1 	movw	r2, #961	; 0x3c1
 801c3aa:	497a      	ldr	r1, [pc, #488]	; (801c594 <etharp_query+0x260>)
 801c3ac:	487a      	ldr	r0, [pc, #488]	; (801c598 <etharp_query+0x264>)
 801c3ae:	f001 fe89 	bl	801e0c4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801c3b2:	8a7b      	ldrh	r3, [r7, #18]
 801c3b4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801c3b6:	7c7a      	ldrb	r2, [r7, #17]
 801c3b8:	4978      	ldr	r1, [pc, #480]	; (801c59c <etharp_query+0x268>)
 801c3ba:	4613      	mov	r3, r2
 801c3bc:	005b      	lsls	r3, r3, #1
 801c3be:	4413      	add	r3, r2
 801c3c0:	00db      	lsls	r3, r3, #3
 801c3c2:	440b      	add	r3, r1
 801c3c4:	3314      	adds	r3, #20
 801c3c6:	781b      	ldrb	r3, [r3, #0]
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	d115      	bne.n	801c3f8 <etharp_query+0xc4>
    is_new_entry = 1;
 801c3cc:	2301      	movs	r3, #1
 801c3ce:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801c3d0:	7c7a      	ldrb	r2, [r7, #17]
 801c3d2:	4972      	ldr	r1, [pc, #456]	; (801c59c <etharp_query+0x268>)
 801c3d4:	4613      	mov	r3, r2
 801c3d6:	005b      	lsls	r3, r3, #1
 801c3d8:	4413      	add	r3, r2
 801c3da:	00db      	lsls	r3, r3, #3
 801c3dc:	440b      	add	r3, r1
 801c3de:	3314      	adds	r3, #20
 801c3e0:	2201      	movs	r2, #1
 801c3e2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801c3e4:	7c7a      	ldrb	r2, [r7, #17]
 801c3e6:	496d      	ldr	r1, [pc, #436]	; (801c59c <etharp_query+0x268>)
 801c3e8:	4613      	mov	r3, r2
 801c3ea:	005b      	lsls	r3, r3, #1
 801c3ec:	4413      	add	r3, r2
 801c3ee:	00db      	lsls	r3, r3, #3
 801c3f0:	440b      	add	r3, r1
 801c3f2:	3308      	adds	r3, #8
 801c3f4:	68fa      	ldr	r2, [r7, #12]
 801c3f6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801c3f8:	7c7a      	ldrb	r2, [r7, #17]
 801c3fa:	4968      	ldr	r1, [pc, #416]	; (801c59c <etharp_query+0x268>)
 801c3fc:	4613      	mov	r3, r2
 801c3fe:	005b      	lsls	r3, r3, #1
 801c400:	4413      	add	r3, r2
 801c402:	00db      	lsls	r3, r3, #3
 801c404:	440b      	add	r3, r1
 801c406:	3314      	adds	r3, #20
 801c408:	781b      	ldrb	r3, [r3, #0]
 801c40a:	2b01      	cmp	r3, #1
 801c40c:	d011      	beq.n	801c432 <etharp_query+0xfe>
 801c40e:	7c7a      	ldrb	r2, [r7, #17]
 801c410:	4962      	ldr	r1, [pc, #392]	; (801c59c <etharp_query+0x268>)
 801c412:	4613      	mov	r3, r2
 801c414:	005b      	lsls	r3, r3, #1
 801c416:	4413      	add	r3, r2
 801c418:	00db      	lsls	r3, r3, #3
 801c41a:	440b      	add	r3, r1
 801c41c:	3314      	adds	r3, #20
 801c41e:	781b      	ldrb	r3, [r3, #0]
 801c420:	2b01      	cmp	r3, #1
 801c422:	d806      	bhi.n	801c432 <etharp_query+0xfe>
 801c424:	4b5a      	ldr	r3, [pc, #360]	; (801c590 <etharp_query+0x25c>)
 801c426:	f240 32cf 	movw	r2, #975	; 0x3cf
 801c42a:	495d      	ldr	r1, [pc, #372]	; (801c5a0 <etharp_query+0x26c>)
 801c42c:	485a      	ldr	r0, [pc, #360]	; (801c598 <etharp_query+0x264>)
 801c42e:	f001 fe49 	bl	801e0c4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801c432:	6a3b      	ldr	r3, [r7, #32]
 801c434:	2b00      	cmp	r3, #0
 801c436:	d102      	bne.n	801c43e <etharp_query+0x10a>
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d10c      	bne.n	801c458 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801c43e:	68b9      	ldr	r1, [r7, #8]
 801c440:	68f8      	ldr	r0, [r7, #12]
 801c442:	f000 f963 	bl	801c70c <etharp_request>
 801c446:	4603      	mov	r3, r0
 801c448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801c44c:	687b      	ldr	r3, [r7, #4]
 801c44e:	2b00      	cmp	r3, #0
 801c450:	d102      	bne.n	801c458 <etharp_query+0x124>
      return result;
 801c452:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801c456:	e097      	b.n	801c588 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	d106      	bne.n	801c46c <etharp_query+0x138>
 801c45e:	4b4c      	ldr	r3, [pc, #304]	; (801c590 <etharp_query+0x25c>)
 801c460:	f240 32e1 	movw	r2, #993	; 0x3e1
 801c464:	494f      	ldr	r1, [pc, #316]	; (801c5a4 <etharp_query+0x270>)
 801c466:	484c      	ldr	r0, [pc, #304]	; (801c598 <etharp_query+0x264>)
 801c468:	f001 fe2c 	bl	801e0c4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801c46c:	7c7a      	ldrb	r2, [r7, #17]
 801c46e:	494b      	ldr	r1, [pc, #300]	; (801c59c <etharp_query+0x268>)
 801c470:	4613      	mov	r3, r2
 801c472:	005b      	lsls	r3, r3, #1
 801c474:	4413      	add	r3, r2
 801c476:	00db      	lsls	r3, r3, #3
 801c478:	440b      	add	r3, r1
 801c47a:	3314      	adds	r3, #20
 801c47c:	781b      	ldrb	r3, [r3, #0]
 801c47e:	2b01      	cmp	r3, #1
 801c480:	d918      	bls.n	801c4b4 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801c482:	4a49      	ldr	r2, [pc, #292]	; (801c5a8 <etharp_query+0x274>)
 801c484:	7c7b      	ldrb	r3, [r7, #17]
 801c486:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801c488:	7c7a      	ldrb	r2, [r7, #17]
 801c48a:	4613      	mov	r3, r2
 801c48c:	005b      	lsls	r3, r3, #1
 801c48e:	4413      	add	r3, r2
 801c490:	00db      	lsls	r3, r3, #3
 801c492:	3308      	adds	r3, #8
 801c494:	4a41      	ldr	r2, [pc, #260]	; (801c59c <etharp_query+0x268>)
 801c496:	4413      	add	r3, r2
 801c498:	1d1a      	adds	r2, r3, #4
 801c49a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c49e:	9300      	str	r3, [sp, #0]
 801c4a0:	4613      	mov	r3, r2
 801c4a2:	697a      	ldr	r2, [r7, #20]
 801c4a4:	6879      	ldr	r1, [r7, #4]
 801c4a6:	68f8      	ldr	r0, [r7, #12]
 801c4a8:	f001 fc68 	bl	801dd7c <ethernet_output>
 801c4ac:	4603      	mov	r3, r0
 801c4ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c4b2:	e067      	b.n	801c584 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c4b4:	7c7a      	ldrb	r2, [r7, #17]
 801c4b6:	4939      	ldr	r1, [pc, #228]	; (801c59c <etharp_query+0x268>)
 801c4b8:	4613      	mov	r3, r2
 801c4ba:	005b      	lsls	r3, r3, #1
 801c4bc:	4413      	add	r3, r2
 801c4be:	00db      	lsls	r3, r3, #3
 801c4c0:	440b      	add	r3, r1
 801c4c2:	3314      	adds	r3, #20
 801c4c4:	781b      	ldrb	r3, [r3, #0]
 801c4c6:	2b01      	cmp	r3, #1
 801c4c8:	d15c      	bne.n	801c584 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801c4ca:	2300      	movs	r3, #0
 801c4cc:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c4d2:	e01c      	b.n	801c50e <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801c4d4:	69fb      	ldr	r3, [r7, #28]
 801c4d6:	895a      	ldrh	r2, [r3, #10]
 801c4d8:	69fb      	ldr	r3, [r7, #28]
 801c4da:	891b      	ldrh	r3, [r3, #8]
 801c4dc:	429a      	cmp	r2, r3
 801c4de:	d10a      	bne.n	801c4f6 <etharp_query+0x1c2>
 801c4e0:	69fb      	ldr	r3, [r7, #28]
 801c4e2:	681b      	ldr	r3, [r3, #0]
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d006      	beq.n	801c4f6 <etharp_query+0x1c2>
 801c4e8:	4b29      	ldr	r3, [pc, #164]	; (801c590 <etharp_query+0x25c>)
 801c4ea:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801c4ee:	492f      	ldr	r1, [pc, #188]	; (801c5ac <etharp_query+0x278>)
 801c4f0:	4829      	ldr	r0, [pc, #164]	; (801c598 <etharp_query+0x264>)
 801c4f2:	f001 fde7 	bl	801e0c4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801c4f6:	69fb      	ldr	r3, [r7, #28]
 801c4f8:	7b1b      	ldrb	r3, [r3, #12]
 801c4fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d002      	beq.n	801c508 <etharp_query+0x1d4>
        copy_needed = 1;
 801c502:	2301      	movs	r3, #1
 801c504:	61bb      	str	r3, [r7, #24]
        break;
 801c506:	e005      	b.n	801c514 <etharp_query+0x1e0>
      }
      p = p->next;
 801c508:	69fb      	ldr	r3, [r7, #28]
 801c50a:	681b      	ldr	r3, [r3, #0]
 801c50c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c50e:	69fb      	ldr	r3, [r7, #28]
 801c510:	2b00      	cmp	r3, #0
 801c512:	d1df      	bne.n	801c4d4 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 801c514:	69bb      	ldr	r3, [r7, #24]
 801c516:	2b00      	cmp	r3, #0
 801c518:	d007      	beq.n	801c52a <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801c51a:	687a      	ldr	r2, [r7, #4]
 801c51c:	f44f 7120 	mov.w	r1, #640	; 0x280
 801c520:	200e      	movs	r0, #14
 801c522:	f7f8 fdf1 	bl	8015108 <pbuf_clone>
 801c526:	61f8      	str	r0, [r7, #28]
 801c528:	e004      	b.n	801c534 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801c52a:	687b      	ldr	r3, [r7, #4]
 801c52c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801c52e:	69f8      	ldr	r0, [r7, #28]
 801c530:	f7f8 fc28 	bl	8014d84 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801c534:	69fb      	ldr	r3, [r7, #28]
 801c536:	2b00      	cmp	r3, #0
 801c538:	d021      	beq.n	801c57e <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801c53a:	7c7a      	ldrb	r2, [r7, #17]
 801c53c:	4917      	ldr	r1, [pc, #92]	; (801c59c <etharp_query+0x268>)
 801c53e:	4613      	mov	r3, r2
 801c540:	005b      	lsls	r3, r3, #1
 801c542:	4413      	add	r3, r2
 801c544:	00db      	lsls	r3, r3, #3
 801c546:	440b      	add	r3, r1
 801c548:	681b      	ldr	r3, [r3, #0]
 801c54a:	2b00      	cmp	r3, #0
 801c54c:	d00a      	beq.n	801c564 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801c54e:	7c7a      	ldrb	r2, [r7, #17]
 801c550:	4912      	ldr	r1, [pc, #72]	; (801c59c <etharp_query+0x268>)
 801c552:	4613      	mov	r3, r2
 801c554:	005b      	lsls	r3, r3, #1
 801c556:	4413      	add	r3, r2
 801c558:	00db      	lsls	r3, r3, #3
 801c55a:	440b      	add	r3, r1
 801c55c:	681b      	ldr	r3, [r3, #0]
 801c55e:	4618      	mov	r0, r3
 801c560:	f7f8 fb6a 	bl	8014c38 <pbuf_free>
      }
      arp_table[i].q = p;
 801c564:	7c7a      	ldrb	r2, [r7, #17]
 801c566:	490d      	ldr	r1, [pc, #52]	; (801c59c <etharp_query+0x268>)
 801c568:	4613      	mov	r3, r2
 801c56a:	005b      	lsls	r3, r3, #1
 801c56c:	4413      	add	r3, r2
 801c56e:	00db      	lsls	r3, r3, #3
 801c570:	440b      	add	r3, r1
 801c572:	69fa      	ldr	r2, [r7, #28]
 801c574:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801c576:	2300      	movs	r3, #0
 801c578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c57c:	e002      	b.n	801c584 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801c57e:	23ff      	movs	r3, #255	; 0xff
 801c580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801c584:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801c588:	4618      	mov	r0, r3
 801c58a:	3728      	adds	r7, #40	; 0x28
 801c58c:	46bd      	mov	sp, r7
 801c58e:	bd80      	pop	{r7, pc}
 801c590:	0802160c 	.word	0x0802160c
 801c594:	080217b8 	.word	0x080217b8
 801c598:	08021684 	.word	0x08021684
 801c59c:	20004568 	.word	0x20004568
 801c5a0:	080217c8 	.word	0x080217c8
 801c5a4:	080217ac 	.word	0x080217ac
 801c5a8:	20004658 	.word	0x20004658
 801c5ac:	080217f0 	.word	0x080217f0

0801c5b0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801c5b0:	b580      	push	{r7, lr}
 801c5b2:	b08a      	sub	sp, #40	; 0x28
 801c5b4:	af02      	add	r7, sp, #8
 801c5b6:	60f8      	str	r0, [r7, #12]
 801c5b8:	60b9      	str	r1, [r7, #8]
 801c5ba:	607a      	str	r2, [r7, #4]
 801c5bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801c5be:	2300      	movs	r3, #0
 801c5c0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c5c2:	68fb      	ldr	r3, [r7, #12]
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d106      	bne.n	801c5d6 <etharp_raw+0x26>
 801c5c8:	4b3a      	ldr	r3, [pc, #232]	; (801c6b4 <etharp_raw+0x104>)
 801c5ca:	f240 4257 	movw	r2, #1111	; 0x457
 801c5ce:	493a      	ldr	r1, [pc, #232]	; (801c6b8 <etharp_raw+0x108>)
 801c5d0:	483a      	ldr	r0, [pc, #232]	; (801c6bc <etharp_raw+0x10c>)
 801c5d2:	f001 fd77 	bl	801e0c4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801c5d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c5da:	211c      	movs	r1, #28
 801c5dc:	200e      	movs	r0, #14
 801c5de:	f7f8 f84b 	bl	8014678 <pbuf_alloc>
 801c5e2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801c5e4:	69bb      	ldr	r3, [r7, #24]
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d102      	bne.n	801c5f0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801c5ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c5ee:	e05d      	b.n	801c6ac <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801c5f0:	69bb      	ldr	r3, [r7, #24]
 801c5f2:	895b      	ldrh	r3, [r3, #10]
 801c5f4:	2b1b      	cmp	r3, #27
 801c5f6:	d806      	bhi.n	801c606 <etharp_raw+0x56>
 801c5f8:	4b2e      	ldr	r3, [pc, #184]	; (801c6b4 <etharp_raw+0x104>)
 801c5fa:	f240 4263 	movw	r2, #1123	; 0x463
 801c5fe:	4930      	ldr	r1, [pc, #192]	; (801c6c0 <etharp_raw+0x110>)
 801c600:	482e      	ldr	r0, [pc, #184]	; (801c6bc <etharp_raw+0x10c>)
 801c602:	f001 fd5f 	bl	801e0c4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801c606:	69bb      	ldr	r3, [r7, #24]
 801c608:	685b      	ldr	r3, [r3, #4]
 801c60a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801c60c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c60e:	4618      	mov	r0, r3
 801c610:	f7f6 ff34 	bl	801347c <lwip_htons>
 801c614:	4603      	mov	r3, r0
 801c616:	461a      	mov	r2, r3
 801c618:	697b      	ldr	r3, [r7, #20]
 801c61a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801c61c:	68fb      	ldr	r3, [r7, #12]
 801c61e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801c622:	2b06      	cmp	r3, #6
 801c624:	d006      	beq.n	801c634 <etharp_raw+0x84>
 801c626:	4b23      	ldr	r3, [pc, #140]	; (801c6b4 <etharp_raw+0x104>)
 801c628:	f240 426a 	movw	r2, #1130	; 0x46a
 801c62c:	4925      	ldr	r1, [pc, #148]	; (801c6c4 <etharp_raw+0x114>)
 801c62e:	4823      	ldr	r0, [pc, #140]	; (801c6bc <etharp_raw+0x10c>)
 801c630:	f001 fd48 	bl	801e0c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801c634:	697b      	ldr	r3, [r7, #20]
 801c636:	3308      	adds	r3, #8
 801c638:	2206      	movs	r2, #6
 801c63a:	6839      	ldr	r1, [r7, #0]
 801c63c:	4618      	mov	r0, r3
 801c63e:	f001 fd2e 	bl	801e09e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801c642:	697b      	ldr	r3, [r7, #20]
 801c644:	3312      	adds	r3, #18
 801c646:	2206      	movs	r2, #6
 801c648:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c64a:	4618      	mov	r0, r3
 801c64c:	f001 fd27 	bl	801e09e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801c650:	697b      	ldr	r3, [r7, #20]
 801c652:	330e      	adds	r3, #14
 801c654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c656:	6812      	ldr	r2, [r2, #0]
 801c658:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801c65a:	697b      	ldr	r3, [r7, #20]
 801c65c:	3318      	adds	r3, #24
 801c65e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c660:	6812      	ldr	r2, [r2, #0]
 801c662:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801c664:	697b      	ldr	r3, [r7, #20]
 801c666:	2200      	movs	r2, #0
 801c668:	701a      	strb	r2, [r3, #0]
 801c66a:	2200      	movs	r2, #0
 801c66c:	f042 0201 	orr.w	r2, r2, #1
 801c670:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801c672:	697b      	ldr	r3, [r7, #20]
 801c674:	2200      	movs	r2, #0
 801c676:	f042 0208 	orr.w	r2, r2, #8
 801c67a:	709a      	strb	r2, [r3, #2]
 801c67c:	2200      	movs	r2, #0
 801c67e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801c680:	697b      	ldr	r3, [r7, #20]
 801c682:	2206      	movs	r2, #6
 801c684:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801c686:	697b      	ldr	r3, [r7, #20]
 801c688:	2204      	movs	r2, #4
 801c68a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801c68c:	f640 0306 	movw	r3, #2054	; 0x806
 801c690:	9300      	str	r3, [sp, #0]
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	68ba      	ldr	r2, [r7, #8]
 801c696:	69b9      	ldr	r1, [r7, #24]
 801c698:	68f8      	ldr	r0, [r7, #12]
 801c69a:	f001 fb6f 	bl	801dd7c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801c69e:	69b8      	ldr	r0, [r7, #24]
 801c6a0:	f7f8 faca 	bl	8014c38 <pbuf_free>
  p = NULL;
 801c6a4:	2300      	movs	r3, #0
 801c6a6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801c6a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c6ac:	4618      	mov	r0, r3
 801c6ae:	3720      	adds	r7, #32
 801c6b0:	46bd      	mov	sp, r7
 801c6b2:	bd80      	pop	{r7, pc}
 801c6b4:	0802160c 	.word	0x0802160c
 801c6b8:	0802175c 	.word	0x0802175c
 801c6bc:	08021684 	.word	0x08021684
 801c6c0:	0802180c 	.word	0x0802180c
 801c6c4:	08021840 	.word	0x08021840

0801c6c8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801c6c8:	b580      	push	{r7, lr}
 801c6ca:	b088      	sub	sp, #32
 801c6cc:	af04      	add	r7, sp, #16
 801c6ce:	60f8      	str	r0, [r7, #12]
 801c6d0:	60b9      	str	r1, [r7, #8]
 801c6d2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801c6da:	68fb      	ldr	r3, [r7, #12]
 801c6dc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801c6e0:	68fb      	ldr	r3, [r7, #12]
 801c6e2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c6e4:	2201      	movs	r2, #1
 801c6e6:	9203      	str	r2, [sp, #12]
 801c6e8:	68ba      	ldr	r2, [r7, #8]
 801c6ea:	9202      	str	r2, [sp, #8]
 801c6ec:	4a06      	ldr	r2, [pc, #24]	; (801c708 <etharp_request_dst+0x40>)
 801c6ee:	9201      	str	r2, [sp, #4]
 801c6f0:	9300      	str	r3, [sp, #0]
 801c6f2:	4603      	mov	r3, r0
 801c6f4:	687a      	ldr	r2, [r7, #4]
 801c6f6:	68f8      	ldr	r0, [r7, #12]
 801c6f8:	f7ff ff5a 	bl	801c5b0 <etharp_raw>
 801c6fc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801c6fe:	4618      	mov	r0, r3
 801c700:	3710      	adds	r7, #16
 801c702:	46bd      	mov	sp, r7
 801c704:	bd80      	pop	{r7, pc}
 801c706:	bf00      	nop
 801c708:	0803294c 	.word	0x0803294c

0801c70c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801c70c:	b580      	push	{r7, lr}
 801c70e:	b082      	sub	sp, #8
 801c710:	af00      	add	r7, sp, #0
 801c712:	6078      	str	r0, [r7, #4]
 801c714:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801c716:	4a05      	ldr	r2, [pc, #20]	; (801c72c <etharp_request+0x20>)
 801c718:	6839      	ldr	r1, [r7, #0]
 801c71a:	6878      	ldr	r0, [r7, #4]
 801c71c:	f7ff ffd4 	bl	801c6c8 <etharp_request_dst>
 801c720:	4603      	mov	r3, r0
}
 801c722:	4618      	mov	r0, r3
 801c724:	3708      	adds	r7, #8
 801c726:	46bd      	mov	sp, r7
 801c728:	bd80      	pop	{r7, pc}
 801c72a:	bf00      	nop
 801c72c:	08032944 	.word	0x08032944

0801c730 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801c730:	b580      	push	{r7, lr}
 801c732:	b08e      	sub	sp, #56	; 0x38
 801c734:	af04      	add	r7, sp, #16
 801c736:	6078      	str	r0, [r7, #4]
 801c738:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801c73a:	4b79      	ldr	r3, [pc, #484]	; (801c920 <icmp_input+0x1f0>)
 801c73c:	689b      	ldr	r3, [r3, #8]
 801c73e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801c740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c742:	781b      	ldrb	r3, [r3, #0]
 801c744:	f003 030f 	and.w	r3, r3, #15
 801c748:	b2db      	uxtb	r3, r3
 801c74a:	009b      	lsls	r3, r3, #2
 801c74c:	b2db      	uxtb	r3, r3
 801c74e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801c750:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c752:	2b13      	cmp	r3, #19
 801c754:	f240 80cd 	bls.w	801c8f2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	895b      	ldrh	r3, [r3, #10]
 801c75c:	2b03      	cmp	r3, #3
 801c75e:	f240 80ca 	bls.w	801c8f6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	685b      	ldr	r3, [r3, #4]
 801c766:	781b      	ldrb	r3, [r3, #0]
 801c768:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801c76c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801c770:	2b00      	cmp	r3, #0
 801c772:	f000 80b7 	beq.w	801c8e4 <icmp_input+0x1b4>
 801c776:	2b08      	cmp	r3, #8
 801c778:	f040 80b7 	bne.w	801c8ea <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801c77c:	4b69      	ldr	r3, [pc, #420]	; (801c924 <icmp_input+0x1f4>)
 801c77e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c780:	4b67      	ldr	r3, [pc, #412]	; (801c920 <icmp_input+0x1f0>)
 801c782:	695b      	ldr	r3, [r3, #20]
 801c784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c788:	2be0      	cmp	r3, #224	; 0xe0
 801c78a:	f000 80bb 	beq.w	801c904 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801c78e:	4b64      	ldr	r3, [pc, #400]	; (801c920 <icmp_input+0x1f0>)
 801c790:	695a      	ldr	r2, [r3, #20]
 801c792:	4b63      	ldr	r3, [pc, #396]	; (801c920 <icmp_input+0x1f0>)
 801c794:	681b      	ldr	r3, [r3, #0]
 801c796:	4619      	mov	r1, r3
 801c798:	4610      	mov	r0, r2
 801c79a:	f000 fbeb 	bl	801cf74 <ip4_addr_isbroadcast_u32>
 801c79e:	4603      	mov	r3, r0
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	f040 80b1 	bne.w	801c908 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801c7a6:	687b      	ldr	r3, [r7, #4]
 801c7a8:	891b      	ldrh	r3, [r3, #8]
 801c7aa:	2b07      	cmp	r3, #7
 801c7ac:	f240 80a5 	bls.w	801c8fa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c7b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c7b2:	330e      	adds	r3, #14
 801c7b4:	4619      	mov	r1, r3
 801c7b6:	6878      	ldr	r0, [r7, #4]
 801c7b8:	f7f8 f9a8 	bl	8014b0c <pbuf_add_header>
 801c7bc:	4603      	mov	r3, r0
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	d04b      	beq.n	801c85a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801c7c2:	687b      	ldr	r3, [r7, #4]
 801c7c4:	891a      	ldrh	r2, [r3, #8]
 801c7c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c7c8:	4413      	add	r3, r2
 801c7ca:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	891b      	ldrh	r3, [r3, #8]
 801c7d0:	8b7a      	ldrh	r2, [r7, #26]
 801c7d2:	429a      	cmp	r2, r3
 801c7d4:	f0c0 809a 	bcc.w	801c90c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801c7d8:	8b7b      	ldrh	r3, [r7, #26]
 801c7da:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c7de:	4619      	mov	r1, r3
 801c7e0:	200e      	movs	r0, #14
 801c7e2:	f7f7 ff49 	bl	8014678 <pbuf_alloc>
 801c7e6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801c7e8:	697b      	ldr	r3, [r7, #20]
 801c7ea:	2b00      	cmp	r3, #0
 801c7ec:	f000 8090 	beq.w	801c910 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801c7f0:	697b      	ldr	r3, [r7, #20]
 801c7f2:	895b      	ldrh	r3, [r3, #10]
 801c7f4:	461a      	mov	r2, r3
 801c7f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c7f8:	3308      	adds	r3, #8
 801c7fa:	429a      	cmp	r2, r3
 801c7fc:	d203      	bcs.n	801c806 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801c7fe:	6978      	ldr	r0, [r7, #20]
 801c800:	f7f8 fa1a 	bl	8014c38 <pbuf_free>
          goto icmperr;
 801c804:	e085      	b.n	801c912 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801c806:	697b      	ldr	r3, [r7, #20]
 801c808:	685b      	ldr	r3, [r3, #4]
 801c80a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c80c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c80e:	4618      	mov	r0, r3
 801c810:	f001 fc45 	bl	801e09e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801c814:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c816:	4619      	mov	r1, r3
 801c818:	6978      	ldr	r0, [r7, #20]
 801c81a:	f7f8 f987 	bl	8014b2c <pbuf_remove_header>
 801c81e:	4603      	mov	r3, r0
 801c820:	2b00      	cmp	r3, #0
 801c822:	d009      	beq.n	801c838 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801c824:	4b40      	ldr	r3, [pc, #256]	; (801c928 <icmp_input+0x1f8>)
 801c826:	22b6      	movs	r2, #182	; 0xb6
 801c828:	4940      	ldr	r1, [pc, #256]	; (801c92c <icmp_input+0x1fc>)
 801c82a:	4841      	ldr	r0, [pc, #260]	; (801c930 <icmp_input+0x200>)
 801c82c:	f001 fc4a 	bl	801e0c4 <iprintf>
          pbuf_free(r);
 801c830:	6978      	ldr	r0, [r7, #20]
 801c832:	f7f8 fa01 	bl	8014c38 <pbuf_free>
          goto icmperr;
 801c836:	e06c      	b.n	801c912 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801c838:	6879      	ldr	r1, [r7, #4]
 801c83a:	6978      	ldr	r0, [r7, #20]
 801c83c:	f7f8 fb20 	bl	8014e80 <pbuf_copy>
 801c840:	4603      	mov	r3, r0
 801c842:	2b00      	cmp	r3, #0
 801c844:	d003      	beq.n	801c84e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801c846:	6978      	ldr	r0, [r7, #20]
 801c848:	f7f8 f9f6 	bl	8014c38 <pbuf_free>
          goto icmperr;
 801c84c:	e061      	b.n	801c912 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801c84e:	6878      	ldr	r0, [r7, #4]
 801c850:	f7f8 f9f2 	bl	8014c38 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801c854:	697b      	ldr	r3, [r7, #20]
 801c856:	607b      	str	r3, [r7, #4]
 801c858:	e00f      	b.n	801c87a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c85a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c85c:	330e      	adds	r3, #14
 801c85e:	4619      	mov	r1, r3
 801c860:	6878      	ldr	r0, [r7, #4]
 801c862:	f7f8 f963 	bl	8014b2c <pbuf_remove_header>
 801c866:	4603      	mov	r3, r0
 801c868:	2b00      	cmp	r3, #0
 801c86a:	d006      	beq.n	801c87a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801c86c:	4b2e      	ldr	r3, [pc, #184]	; (801c928 <icmp_input+0x1f8>)
 801c86e:	22c7      	movs	r2, #199	; 0xc7
 801c870:	4930      	ldr	r1, [pc, #192]	; (801c934 <icmp_input+0x204>)
 801c872:	482f      	ldr	r0, [pc, #188]	; (801c930 <icmp_input+0x200>)
 801c874:	f001 fc26 	bl	801e0c4 <iprintf>
          goto icmperr;
 801c878:	e04b      	b.n	801c912 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801c87a:	687b      	ldr	r3, [r7, #4]
 801c87c:	685b      	ldr	r3, [r3, #4]
 801c87e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801c880:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c882:	4619      	mov	r1, r3
 801c884:	6878      	ldr	r0, [r7, #4]
 801c886:	f7f8 f941 	bl	8014b0c <pbuf_add_header>
 801c88a:	4603      	mov	r3, r0
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	d12b      	bne.n	801c8e8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801c890:	687b      	ldr	r3, [r7, #4]
 801c892:	685b      	ldr	r3, [r3, #4]
 801c894:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801c896:	69fb      	ldr	r3, [r7, #28]
 801c898:	681a      	ldr	r2, [r3, #0]
 801c89a:	68fb      	ldr	r3, [r7, #12]
 801c89c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801c89e:	4b20      	ldr	r3, [pc, #128]	; (801c920 <icmp_input+0x1f0>)
 801c8a0:	691a      	ldr	r2, [r3, #16]
 801c8a2:	68fb      	ldr	r3, [r7, #12]
 801c8a4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801c8a6:	693b      	ldr	r3, [r7, #16]
 801c8a8:	2200      	movs	r2, #0
 801c8aa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801c8ac:	693b      	ldr	r3, [r7, #16]
 801c8ae:	2200      	movs	r2, #0
 801c8b0:	709a      	strb	r2, [r3, #2]
 801c8b2:	2200      	movs	r2, #0
 801c8b4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801c8b6:	68fb      	ldr	r3, [r7, #12]
 801c8b8:	22ff      	movs	r2, #255	; 0xff
 801c8ba:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801c8bc:	68fb      	ldr	r3, [r7, #12]
 801c8be:	2200      	movs	r2, #0
 801c8c0:	729a      	strb	r2, [r3, #10]
 801c8c2:	2200      	movs	r2, #0
 801c8c4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801c8c6:	683b      	ldr	r3, [r7, #0]
 801c8c8:	9302      	str	r3, [sp, #8]
 801c8ca:	2301      	movs	r3, #1
 801c8cc:	9301      	str	r3, [sp, #4]
 801c8ce:	2300      	movs	r3, #0
 801c8d0:	9300      	str	r3, [sp, #0]
 801c8d2:	23ff      	movs	r3, #255	; 0xff
 801c8d4:	2200      	movs	r2, #0
 801c8d6:	69f9      	ldr	r1, [r7, #28]
 801c8d8:	6878      	ldr	r0, [r7, #4]
 801c8da:	f000 fa73 	bl	801cdc4 <ip4_output_if>
 801c8de:	4603      	mov	r3, r0
 801c8e0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801c8e2:	e001      	b.n	801c8e8 <icmp_input+0x1b8>
      break;
 801c8e4:	bf00      	nop
 801c8e6:	e000      	b.n	801c8ea <icmp_input+0x1ba>
      break;
 801c8e8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801c8ea:	6878      	ldr	r0, [r7, #4]
 801c8ec:	f7f8 f9a4 	bl	8014c38 <pbuf_free>
  return;
 801c8f0:	e013      	b.n	801c91a <icmp_input+0x1ea>
    goto lenerr;
 801c8f2:	bf00      	nop
 801c8f4:	e002      	b.n	801c8fc <icmp_input+0x1cc>
    goto lenerr;
 801c8f6:	bf00      	nop
 801c8f8:	e000      	b.n	801c8fc <icmp_input+0x1cc>
        goto lenerr;
 801c8fa:	bf00      	nop
lenerr:
  pbuf_free(p);
 801c8fc:	6878      	ldr	r0, [r7, #4]
 801c8fe:	f7f8 f99b 	bl	8014c38 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c902:	e00a      	b.n	801c91a <icmp_input+0x1ea>
        goto icmperr;
 801c904:	bf00      	nop
 801c906:	e004      	b.n	801c912 <icmp_input+0x1e2>
        goto icmperr;
 801c908:	bf00      	nop
 801c90a:	e002      	b.n	801c912 <icmp_input+0x1e2>
          goto icmperr;
 801c90c:	bf00      	nop
 801c90e:	e000      	b.n	801c912 <icmp_input+0x1e2>
          goto icmperr;
 801c910:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801c912:	6878      	ldr	r0, [r7, #4]
 801c914:	f7f8 f990 	bl	8014c38 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c918:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801c91a:	3728      	adds	r7, #40	; 0x28
 801c91c:	46bd      	mov	sp, r7
 801c91e:	bd80      	pop	{r7, pc}
 801c920:	20007df4 	.word	0x20007df4
 801c924:	20007e08 	.word	0x20007e08
 801c928:	08021884 	.word	0x08021884
 801c92c:	080218bc 	.word	0x080218bc
 801c930:	080218f4 	.word	0x080218f4
 801c934:	0802191c 	.word	0x0802191c

0801c938 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801c938:	b580      	push	{r7, lr}
 801c93a:	b082      	sub	sp, #8
 801c93c:	af00      	add	r7, sp, #0
 801c93e:	6078      	str	r0, [r7, #4]
 801c940:	460b      	mov	r3, r1
 801c942:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801c944:	78fb      	ldrb	r3, [r7, #3]
 801c946:	461a      	mov	r2, r3
 801c948:	2103      	movs	r1, #3
 801c94a:	6878      	ldr	r0, [r7, #4]
 801c94c:	f000 f814 	bl	801c978 <icmp_send_response>
}
 801c950:	bf00      	nop
 801c952:	3708      	adds	r7, #8
 801c954:	46bd      	mov	sp, r7
 801c956:	bd80      	pop	{r7, pc}

0801c958 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801c958:	b580      	push	{r7, lr}
 801c95a:	b082      	sub	sp, #8
 801c95c:	af00      	add	r7, sp, #0
 801c95e:	6078      	str	r0, [r7, #4]
 801c960:	460b      	mov	r3, r1
 801c962:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801c964:	78fb      	ldrb	r3, [r7, #3]
 801c966:	461a      	mov	r2, r3
 801c968:	210b      	movs	r1, #11
 801c96a:	6878      	ldr	r0, [r7, #4]
 801c96c:	f000 f804 	bl	801c978 <icmp_send_response>
}
 801c970:	bf00      	nop
 801c972:	3708      	adds	r7, #8
 801c974:	46bd      	mov	sp, r7
 801c976:	bd80      	pop	{r7, pc}

0801c978 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801c978:	b580      	push	{r7, lr}
 801c97a:	b08c      	sub	sp, #48	; 0x30
 801c97c:	af04      	add	r7, sp, #16
 801c97e:	6078      	str	r0, [r7, #4]
 801c980:	460b      	mov	r3, r1
 801c982:	70fb      	strb	r3, [r7, #3]
 801c984:	4613      	mov	r3, r2
 801c986:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801c988:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c98c:	2124      	movs	r1, #36	; 0x24
 801c98e:	2022      	movs	r0, #34	; 0x22
 801c990:	f7f7 fe72 	bl	8014678 <pbuf_alloc>
 801c994:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801c996:	69fb      	ldr	r3, [r7, #28]
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d04c      	beq.n	801ca36 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801c99c:	69fb      	ldr	r3, [r7, #28]
 801c99e:	895b      	ldrh	r3, [r3, #10]
 801c9a0:	2b23      	cmp	r3, #35	; 0x23
 801c9a2:	d806      	bhi.n	801c9b2 <icmp_send_response+0x3a>
 801c9a4:	4b26      	ldr	r3, [pc, #152]	; (801ca40 <icmp_send_response+0xc8>)
 801c9a6:	f240 1269 	movw	r2, #361	; 0x169
 801c9aa:	4926      	ldr	r1, [pc, #152]	; (801ca44 <icmp_send_response+0xcc>)
 801c9ac:	4826      	ldr	r0, [pc, #152]	; (801ca48 <icmp_send_response+0xd0>)
 801c9ae:	f001 fb89 	bl	801e0c4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	685b      	ldr	r3, [r3, #4]
 801c9b6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801c9b8:	69fb      	ldr	r3, [r7, #28]
 801c9ba:	685b      	ldr	r3, [r3, #4]
 801c9bc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801c9be:	697b      	ldr	r3, [r7, #20]
 801c9c0:	78fa      	ldrb	r2, [r7, #3]
 801c9c2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801c9c4:	697b      	ldr	r3, [r7, #20]
 801c9c6:	78ba      	ldrb	r2, [r7, #2]
 801c9c8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801c9ca:	697b      	ldr	r3, [r7, #20]
 801c9cc:	2200      	movs	r2, #0
 801c9ce:	711a      	strb	r2, [r3, #4]
 801c9d0:	2200      	movs	r2, #0
 801c9d2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801c9d4:	697b      	ldr	r3, [r7, #20]
 801c9d6:	2200      	movs	r2, #0
 801c9d8:	719a      	strb	r2, [r3, #6]
 801c9da:	2200      	movs	r2, #0
 801c9dc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801c9de:	69fb      	ldr	r3, [r7, #28]
 801c9e0:	685b      	ldr	r3, [r3, #4]
 801c9e2:	f103 0008 	add.w	r0, r3, #8
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	685b      	ldr	r3, [r3, #4]
 801c9ea:	221c      	movs	r2, #28
 801c9ec:	4619      	mov	r1, r3
 801c9ee:	f001 fb56 	bl	801e09e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801c9f2:	69bb      	ldr	r3, [r7, #24]
 801c9f4:	68db      	ldr	r3, [r3, #12]
 801c9f6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801c9f8:	f107 030c 	add.w	r3, r7, #12
 801c9fc:	4618      	mov	r0, r3
 801c9fe:	f000 f825 	bl	801ca4c <ip4_route>
 801ca02:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801ca04:	693b      	ldr	r3, [r7, #16]
 801ca06:	2b00      	cmp	r3, #0
 801ca08:	d011      	beq.n	801ca2e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801ca0a:	697b      	ldr	r3, [r7, #20]
 801ca0c:	2200      	movs	r2, #0
 801ca0e:	709a      	strb	r2, [r3, #2]
 801ca10:	2200      	movs	r2, #0
 801ca12:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801ca14:	f107 020c 	add.w	r2, r7, #12
 801ca18:	693b      	ldr	r3, [r7, #16]
 801ca1a:	9302      	str	r3, [sp, #8]
 801ca1c:	2301      	movs	r3, #1
 801ca1e:	9301      	str	r3, [sp, #4]
 801ca20:	2300      	movs	r3, #0
 801ca22:	9300      	str	r3, [sp, #0]
 801ca24:	23ff      	movs	r3, #255	; 0xff
 801ca26:	2100      	movs	r1, #0
 801ca28:	69f8      	ldr	r0, [r7, #28]
 801ca2a:	f000 f9cb 	bl	801cdc4 <ip4_output_if>
  }
  pbuf_free(q);
 801ca2e:	69f8      	ldr	r0, [r7, #28]
 801ca30:	f7f8 f902 	bl	8014c38 <pbuf_free>
 801ca34:	e000      	b.n	801ca38 <icmp_send_response+0xc0>
    return;
 801ca36:	bf00      	nop
}
 801ca38:	3720      	adds	r7, #32
 801ca3a:	46bd      	mov	sp, r7
 801ca3c:	bd80      	pop	{r7, pc}
 801ca3e:	bf00      	nop
 801ca40:	08021884 	.word	0x08021884
 801ca44:	08021950 	.word	0x08021950
 801ca48:	080218f4 	.word	0x080218f4

0801ca4c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801ca4c:	b480      	push	{r7}
 801ca4e:	b085      	sub	sp, #20
 801ca50:	af00      	add	r7, sp, #0
 801ca52:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801ca54:	4b33      	ldr	r3, [pc, #204]	; (801cb24 <ip4_route+0xd8>)
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	60fb      	str	r3, [r7, #12]
 801ca5a:	e036      	b.n	801caca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ca5c:	68fb      	ldr	r3, [r7, #12]
 801ca5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ca62:	f003 0301 	and.w	r3, r3, #1
 801ca66:	b2db      	uxtb	r3, r3
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d02b      	beq.n	801cac4 <ip4_route+0x78>
 801ca6c:	68fb      	ldr	r3, [r7, #12]
 801ca6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ca72:	089b      	lsrs	r3, r3, #2
 801ca74:	f003 0301 	and.w	r3, r3, #1
 801ca78:	b2db      	uxtb	r3, r3
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d022      	beq.n	801cac4 <ip4_route+0x78>
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	3304      	adds	r3, #4
 801ca82:	681b      	ldr	r3, [r3, #0]
 801ca84:	2b00      	cmp	r3, #0
 801ca86:	d01d      	beq.n	801cac4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801ca88:	687b      	ldr	r3, [r7, #4]
 801ca8a:	681a      	ldr	r2, [r3, #0]
 801ca8c:	68fb      	ldr	r3, [r7, #12]
 801ca8e:	3304      	adds	r3, #4
 801ca90:	681b      	ldr	r3, [r3, #0]
 801ca92:	405a      	eors	r2, r3
 801ca94:	68fb      	ldr	r3, [r7, #12]
 801ca96:	3308      	adds	r3, #8
 801ca98:	681b      	ldr	r3, [r3, #0]
 801ca9a:	4013      	ands	r3, r2
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d101      	bne.n	801caa4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801caa0:	68fb      	ldr	r3, [r7, #12]
 801caa2:	e038      	b.n	801cb16 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801caa4:	68fb      	ldr	r3, [r7, #12]
 801caa6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801caaa:	f003 0302 	and.w	r3, r3, #2
 801caae:	2b00      	cmp	r3, #0
 801cab0:	d108      	bne.n	801cac4 <ip4_route+0x78>
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	681a      	ldr	r2, [r3, #0]
 801cab6:	68fb      	ldr	r3, [r7, #12]
 801cab8:	330c      	adds	r3, #12
 801caba:	681b      	ldr	r3, [r3, #0]
 801cabc:	429a      	cmp	r2, r3
 801cabe:	d101      	bne.n	801cac4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801cac0:	68fb      	ldr	r3, [r7, #12]
 801cac2:	e028      	b.n	801cb16 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801cac4:	68fb      	ldr	r3, [r7, #12]
 801cac6:	681b      	ldr	r3, [r3, #0]
 801cac8:	60fb      	str	r3, [r7, #12]
 801caca:	68fb      	ldr	r3, [r7, #12]
 801cacc:	2b00      	cmp	r3, #0
 801cace:	d1c5      	bne.n	801ca5c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801cad0:	4b15      	ldr	r3, [pc, #84]	; (801cb28 <ip4_route+0xdc>)
 801cad2:	681b      	ldr	r3, [r3, #0]
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	d01a      	beq.n	801cb0e <ip4_route+0xc2>
 801cad8:	4b13      	ldr	r3, [pc, #76]	; (801cb28 <ip4_route+0xdc>)
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801cae0:	f003 0301 	and.w	r3, r3, #1
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	d012      	beq.n	801cb0e <ip4_route+0xc2>
 801cae8:	4b0f      	ldr	r3, [pc, #60]	; (801cb28 <ip4_route+0xdc>)
 801caea:	681b      	ldr	r3, [r3, #0]
 801caec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801caf0:	f003 0304 	and.w	r3, r3, #4
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	d00a      	beq.n	801cb0e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801caf8:	4b0b      	ldr	r3, [pc, #44]	; (801cb28 <ip4_route+0xdc>)
 801cafa:	681b      	ldr	r3, [r3, #0]
 801cafc:	3304      	adds	r3, #4
 801cafe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801cb00:	2b00      	cmp	r3, #0
 801cb02:	d004      	beq.n	801cb0e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	681b      	ldr	r3, [r3, #0]
 801cb08:	b2db      	uxtb	r3, r3
 801cb0a:	2b7f      	cmp	r3, #127	; 0x7f
 801cb0c:	d101      	bne.n	801cb12 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801cb0e:	2300      	movs	r3, #0
 801cb10:	e001      	b.n	801cb16 <ip4_route+0xca>
  }

  return netif_default;
 801cb12:	4b05      	ldr	r3, [pc, #20]	; (801cb28 <ip4_route+0xdc>)
 801cb14:	681b      	ldr	r3, [r3, #0]
}
 801cb16:	4618      	mov	r0, r3
 801cb18:	3714      	adds	r7, #20
 801cb1a:	46bd      	mov	sp, r7
 801cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb20:	4770      	bx	lr
 801cb22:	bf00      	nop
 801cb24:	2000b4f8 	.word	0x2000b4f8
 801cb28:	2000b4fc 	.word	0x2000b4fc

0801cb2c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801cb2c:	b580      	push	{r7, lr}
 801cb2e:	b082      	sub	sp, #8
 801cb30:	af00      	add	r7, sp, #0
 801cb32:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801cb3a:	f003 0301 	and.w	r3, r3, #1
 801cb3e:	b2db      	uxtb	r3, r3
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	d016      	beq.n	801cb72 <ip4_input_accept+0x46>
 801cb44:	687b      	ldr	r3, [r7, #4]
 801cb46:	3304      	adds	r3, #4
 801cb48:	681b      	ldr	r3, [r3, #0]
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	d011      	beq.n	801cb72 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801cb4e:	4b0b      	ldr	r3, [pc, #44]	; (801cb7c <ip4_input_accept+0x50>)
 801cb50:	695a      	ldr	r2, [r3, #20]
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	3304      	adds	r3, #4
 801cb56:	681b      	ldr	r3, [r3, #0]
 801cb58:	429a      	cmp	r2, r3
 801cb5a:	d008      	beq.n	801cb6e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801cb5c:	4b07      	ldr	r3, [pc, #28]	; (801cb7c <ip4_input_accept+0x50>)
 801cb5e:	695b      	ldr	r3, [r3, #20]
 801cb60:	6879      	ldr	r1, [r7, #4]
 801cb62:	4618      	mov	r0, r3
 801cb64:	f000 fa06 	bl	801cf74 <ip4_addr_isbroadcast_u32>
 801cb68:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d001      	beq.n	801cb72 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801cb6e:	2301      	movs	r3, #1
 801cb70:	e000      	b.n	801cb74 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801cb72:	2300      	movs	r3, #0
}
 801cb74:	4618      	mov	r0, r3
 801cb76:	3708      	adds	r7, #8
 801cb78:	46bd      	mov	sp, r7
 801cb7a:	bd80      	pop	{r7, pc}
 801cb7c:	20007df4 	.word	0x20007df4

0801cb80 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801cb80:	b580      	push	{r7, lr}
 801cb82:	b086      	sub	sp, #24
 801cb84:	af00      	add	r7, sp, #0
 801cb86:	6078      	str	r0, [r7, #4]
 801cb88:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	685b      	ldr	r3, [r3, #4]
 801cb8e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801cb90:	697b      	ldr	r3, [r7, #20]
 801cb92:	781b      	ldrb	r3, [r3, #0]
 801cb94:	091b      	lsrs	r3, r3, #4
 801cb96:	b2db      	uxtb	r3, r3
 801cb98:	2b04      	cmp	r3, #4
 801cb9a:	d004      	beq.n	801cba6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801cb9c:	6878      	ldr	r0, [r7, #4]
 801cb9e:	f7f8 f84b 	bl	8014c38 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801cba2:	2300      	movs	r3, #0
 801cba4:	e105      	b.n	801cdb2 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801cba6:	697b      	ldr	r3, [r7, #20]
 801cba8:	781b      	ldrb	r3, [r3, #0]
 801cbaa:	f003 030f 	and.w	r3, r3, #15
 801cbae:	b2db      	uxtb	r3, r3
 801cbb0:	009b      	lsls	r3, r3, #2
 801cbb2:	b2db      	uxtb	r3, r3
 801cbb4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801cbb6:	697b      	ldr	r3, [r7, #20]
 801cbb8:	885b      	ldrh	r3, [r3, #2]
 801cbba:	b29b      	uxth	r3, r3
 801cbbc:	4618      	mov	r0, r3
 801cbbe:	f7f6 fc5d 	bl	801347c <lwip_htons>
 801cbc2:	4603      	mov	r3, r0
 801cbc4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	891b      	ldrh	r3, [r3, #8]
 801cbca:	89ba      	ldrh	r2, [r7, #12]
 801cbcc:	429a      	cmp	r2, r3
 801cbce:	d204      	bcs.n	801cbda <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801cbd0:	89bb      	ldrh	r3, [r7, #12]
 801cbd2:	4619      	mov	r1, r3
 801cbd4:	6878      	ldr	r0, [r7, #4]
 801cbd6:	f7f7 fea9 	bl	801492c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	895b      	ldrh	r3, [r3, #10]
 801cbde:	89fa      	ldrh	r2, [r7, #14]
 801cbe0:	429a      	cmp	r2, r3
 801cbe2:	d807      	bhi.n	801cbf4 <ip4_input+0x74>
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	891b      	ldrh	r3, [r3, #8]
 801cbe8:	89ba      	ldrh	r2, [r7, #12]
 801cbea:	429a      	cmp	r2, r3
 801cbec:	d802      	bhi.n	801cbf4 <ip4_input+0x74>
 801cbee:	89fb      	ldrh	r3, [r7, #14]
 801cbf0:	2b13      	cmp	r3, #19
 801cbf2:	d804      	bhi.n	801cbfe <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801cbf4:	6878      	ldr	r0, [r7, #4]
 801cbf6:	f7f8 f81f 	bl	8014c38 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801cbfa:	2300      	movs	r3, #0
 801cbfc:	e0d9      	b.n	801cdb2 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801cbfe:	697b      	ldr	r3, [r7, #20]
 801cc00:	691b      	ldr	r3, [r3, #16]
 801cc02:	4a6e      	ldr	r2, [pc, #440]	; (801cdbc <ip4_input+0x23c>)
 801cc04:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801cc06:	697b      	ldr	r3, [r7, #20]
 801cc08:	68db      	ldr	r3, [r3, #12]
 801cc0a:	4a6c      	ldr	r2, [pc, #432]	; (801cdbc <ip4_input+0x23c>)
 801cc0c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cc0e:	4b6b      	ldr	r3, [pc, #428]	; (801cdbc <ip4_input+0x23c>)
 801cc10:	695b      	ldr	r3, [r3, #20]
 801cc12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cc16:	2be0      	cmp	r3, #224	; 0xe0
 801cc18:	d112      	bne.n	801cc40 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801cc1a:	683b      	ldr	r3, [r7, #0]
 801cc1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801cc20:	f003 0301 	and.w	r3, r3, #1
 801cc24:	b2db      	uxtb	r3, r3
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	d007      	beq.n	801cc3a <ip4_input+0xba>
 801cc2a:	683b      	ldr	r3, [r7, #0]
 801cc2c:	3304      	adds	r3, #4
 801cc2e:	681b      	ldr	r3, [r3, #0]
 801cc30:	2b00      	cmp	r3, #0
 801cc32:	d002      	beq.n	801cc3a <ip4_input+0xba>
      netif = inp;
 801cc34:	683b      	ldr	r3, [r7, #0]
 801cc36:	613b      	str	r3, [r7, #16]
 801cc38:	e02a      	b.n	801cc90 <ip4_input+0x110>
    } else {
      netif = NULL;
 801cc3a:	2300      	movs	r3, #0
 801cc3c:	613b      	str	r3, [r7, #16]
 801cc3e:	e027      	b.n	801cc90 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801cc40:	6838      	ldr	r0, [r7, #0]
 801cc42:	f7ff ff73 	bl	801cb2c <ip4_input_accept>
 801cc46:	4603      	mov	r3, r0
 801cc48:	2b00      	cmp	r3, #0
 801cc4a:	d002      	beq.n	801cc52 <ip4_input+0xd2>
      netif = inp;
 801cc4c:	683b      	ldr	r3, [r7, #0]
 801cc4e:	613b      	str	r3, [r7, #16]
 801cc50:	e01e      	b.n	801cc90 <ip4_input+0x110>
    } else {
      netif = NULL;
 801cc52:	2300      	movs	r3, #0
 801cc54:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801cc56:	4b59      	ldr	r3, [pc, #356]	; (801cdbc <ip4_input+0x23c>)
 801cc58:	695b      	ldr	r3, [r3, #20]
 801cc5a:	b2db      	uxtb	r3, r3
 801cc5c:	2b7f      	cmp	r3, #127	; 0x7f
 801cc5e:	d017      	beq.n	801cc90 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801cc60:	4b57      	ldr	r3, [pc, #348]	; (801cdc0 <ip4_input+0x240>)
 801cc62:	681b      	ldr	r3, [r3, #0]
 801cc64:	613b      	str	r3, [r7, #16]
 801cc66:	e00e      	b.n	801cc86 <ip4_input+0x106>
          if (netif == inp) {
 801cc68:	693a      	ldr	r2, [r7, #16]
 801cc6a:	683b      	ldr	r3, [r7, #0]
 801cc6c:	429a      	cmp	r2, r3
 801cc6e:	d006      	beq.n	801cc7e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801cc70:	6938      	ldr	r0, [r7, #16]
 801cc72:	f7ff ff5b 	bl	801cb2c <ip4_input_accept>
 801cc76:	4603      	mov	r3, r0
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	d108      	bne.n	801cc8e <ip4_input+0x10e>
 801cc7c:	e000      	b.n	801cc80 <ip4_input+0x100>
            continue;
 801cc7e:	bf00      	nop
        NETIF_FOREACH(netif) {
 801cc80:	693b      	ldr	r3, [r7, #16]
 801cc82:	681b      	ldr	r3, [r3, #0]
 801cc84:	613b      	str	r3, [r7, #16]
 801cc86:	693b      	ldr	r3, [r7, #16]
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d1ed      	bne.n	801cc68 <ip4_input+0xe8>
 801cc8c:	e000      	b.n	801cc90 <ip4_input+0x110>
            break;
 801cc8e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801cc90:	4b4a      	ldr	r3, [pc, #296]	; (801cdbc <ip4_input+0x23c>)
 801cc92:	691b      	ldr	r3, [r3, #16]
 801cc94:	6839      	ldr	r1, [r7, #0]
 801cc96:	4618      	mov	r0, r3
 801cc98:	f000 f96c 	bl	801cf74 <ip4_addr_isbroadcast_u32>
 801cc9c:	4603      	mov	r3, r0
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	d105      	bne.n	801ccae <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801cca2:	4b46      	ldr	r3, [pc, #280]	; (801cdbc <ip4_input+0x23c>)
 801cca4:	691b      	ldr	r3, [r3, #16]
 801cca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ccaa:	2be0      	cmp	r3, #224	; 0xe0
 801ccac:	d104      	bne.n	801ccb8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801ccae:	6878      	ldr	r0, [r7, #4]
 801ccb0:	f7f7 ffc2 	bl	8014c38 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801ccb4:	2300      	movs	r3, #0
 801ccb6:	e07c      	b.n	801cdb2 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801ccb8:	693b      	ldr	r3, [r7, #16]
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d104      	bne.n	801ccc8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801ccbe:	6878      	ldr	r0, [r7, #4]
 801ccc0:	f7f7 ffba 	bl	8014c38 <pbuf_free>
    return ERR_OK;
 801ccc4:	2300      	movs	r3, #0
 801ccc6:	e074      	b.n	801cdb2 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801ccc8:	697b      	ldr	r3, [r7, #20]
 801ccca:	88db      	ldrh	r3, [r3, #6]
 801cccc:	b29b      	uxth	r3, r3
 801ccce:	461a      	mov	r2, r3
 801ccd0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801ccd4:	4013      	ands	r3, r2
 801ccd6:	2b00      	cmp	r3, #0
 801ccd8:	d00b      	beq.n	801ccf2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801ccda:	6878      	ldr	r0, [r7, #4]
 801ccdc:	f000 fc90 	bl	801d600 <ip4_reass>
 801cce0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801cce2:	687b      	ldr	r3, [r7, #4]
 801cce4:	2b00      	cmp	r3, #0
 801cce6:	d101      	bne.n	801ccec <ip4_input+0x16c>
      return ERR_OK;
 801cce8:	2300      	movs	r3, #0
 801ccea:	e062      	b.n	801cdb2 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	685b      	ldr	r3, [r3, #4]
 801ccf0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801ccf2:	4a32      	ldr	r2, [pc, #200]	; (801cdbc <ip4_input+0x23c>)
 801ccf4:	693b      	ldr	r3, [r7, #16]
 801ccf6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801ccf8:	4a30      	ldr	r2, [pc, #192]	; (801cdbc <ip4_input+0x23c>)
 801ccfa:	683b      	ldr	r3, [r7, #0]
 801ccfc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801ccfe:	4a2f      	ldr	r2, [pc, #188]	; (801cdbc <ip4_input+0x23c>)
 801cd00:	697b      	ldr	r3, [r7, #20]
 801cd02:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801cd04:	697b      	ldr	r3, [r7, #20]
 801cd06:	781b      	ldrb	r3, [r3, #0]
 801cd08:	f003 030f 	and.w	r3, r3, #15
 801cd0c:	b2db      	uxtb	r3, r3
 801cd0e:	009b      	lsls	r3, r3, #2
 801cd10:	b2db      	uxtb	r3, r3
 801cd12:	b29a      	uxth	r2, r3
 801cd14:	4b29      	ldr	r3, [pc, #164]	; (801cdbc <ip4_input+0x23c>)
 801cd16:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801cd18:	89fb      	ldrh	r3, [r7, #14]
 801cd1a:	4619      	mov	r1, r3
 801cd1c:	6878      	ldr	r0, [r7, #4]
 801cd1e:	f7f7 ff05 	bl	8014b2c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801cd22:	697b      	ldr	r3, [r7, #20]
 801cd24:	7a5b      	ldrb	r3, [r3, #9]
 801cd26:	2b06      	cmp	r3, #6
 801cd28:	d009      	beq.n	801cd3e <ip4_input+0x1be>
 801cd2a:	2b11      	cmp	r3, #17
 801cd2c:	d002      	beq.n	801cd34 <ip4_input+0x1b4>
 801cd2e:	2b01      	cmp	r3, #1
 801cd30:	d00a      	beq.n	801cd48 <ip4_input+0x1c8>
 801cd32:	e00e      	b.n	801cd52 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801cd34:	6839      	ldr	r1, [r7, #0]
 801cd36:	6878      	ldr	r0, [r7, #4]
 801cd38:	f7fe fc6a 	bl	801b610 <udp_input>
        break;
 801cd3c:	e026      	b.n	801cd8c <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801cd3e:	6839      	ldr	r1, [r7, #0]
 801cd40:	6878      	ldr	r0, [r7, #4]
 801cd42:	f7fa f84f 	bl	8016de4 <tcp_input>
        break;
 801cd46:	e021      	b.n	801cd8c <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801cd48:	6839      	ldr	r1, [r7, #0]
 801cd4a:	6878      	ldr	r0, [r7, #4]
 801cd4c:	f7ff fcf0 	bl	801c730 <icmp_input>
        break;
 801cd50:	e01c      	b.n	801cd8c <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801cd52:	4b1a      	ldr	r3, [pc, #104]	; (801cdbc <ip4_input+0x23c>)
 801cd54:	695b      	ldr	r3, [r3, #20]
 801cd56:	6939      	ldr	r1, [r7, #16]
 801cd58:	4618      	mov	r0, r3
 801cd5a:	f000 f90b 	bl	801cf74 <ip4_addr_isbroadcast_u32>
 801cd5e:	4603      	mov	r3, r0
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	d10f      	bne.n	801cd84 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cd64:	4b15      	ldr	r3, [pc, #84]	; (801cdbc <ip4_input+0x23c>)
 801cd66:	695b      	ldr	r3, [r3, #20]
 801cd68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801cd6c:	2be0      	cmp	r3, #224	; 0xe0
 801cd6e:	d009      	beq.n	801cd84 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801cd70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801cd74:	4619      	mov	r1, r3
 801cd76:	6878      	ldr	r0, [r7, #4]
 801cd78:	f7f7 ff4b 	bl	8014c12 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801cd7c:	2102      	movs	r1, #2
 801cd7e:	6878      	ldr	r0, [r7, #4]
 801cd80:	f7ff fdda 	bl	801c938 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801cd84:	6878      	ldr	r0, [r7, #4]
 801cd86:	f7f7 ff57 	bl	8014c38 <pbuf_free>
        break;
 801cd8a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801cd8c:	4b0b      	ldr	r3, [pc, #44]	; (801cdbc <ip4_input+0x23c>)
 801cd8e:	2200      	movs	r2, #0
 801cd90:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801cd92:	4b0a      	ldr	r3, [pc, #40]	; (801cdbc <ip4_input+0x23c>)
 801cd94:	2200      	movs	r2, #0
 801cd96:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801cd98:	4b08      	ldr	r3, [pc, #32]	; (801cdbc <ip4_input+0x23c>)
 801cd9a:	2200      	movs	r2, #0
 801cd9c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801cd9e:	4b07      	ldr	r3, [pc, #28]	; (801cdbc <ip4_input+0x23c>)
 801cda0:	2200      	movs	r2, #0
 801cda2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801cda4:	4b05      	ldr	r3, [pc, #20]	; (801cdbc <ip4_input+0x23c>)
 801cda6:	2200      	movs	r2, #0
 801cda8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801cdaa:	4b04      	ldr	r3, [pc, #16]	; (801cdbc <ip4_input+0x23c>)
 801cdac:	2200      	movs	r2, #0
 801cdae:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801cdb0:	2300      	movs	r3, #0
}
 801cdb2:	4618      	mov	r0, r3
 801cdb4:	3718      	adds	r7, #24
 801cdb6:	46bd      	mov	sp, r7
 801cdb8:	bd80      	pop	{r7, pc}
 801cdba:	bf00      	nop
 801cdbc:	20007df4 	.word	0x20007df4
 801cdc0:	2000b4f8 	.word	0x2000b4f8

0801cdc4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801cdc4:	b580      	push	{r7, lr}
 801cdc6:	b08a      	sub	sp, #40	; 0x28
 801cdc8:	af04      	add	r7, sp, #16
 801cdca:	60f8      	str	r0, [r7, #12]
 801cdcc:	60b9      	str	r1, [r7, #8]
 801cdce:	607a      	str	r2, [r7, #4]
 801cdd0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801cdd2:	68bb      	ldr	r3, [r7, #8]
 801cdd4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801cdd6:	687b      	ldr	r3, [r7, #4]
 801cdd8:	2b00      	cmp	r3, #0
 801cdda:	d009      	beq.n	801cdf0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801cddc:	68bb      	ldr	r3, [r7, #8]
 801cdde:	2b00      	cmp	r3, #0
 801cde0:	d003      	beq.n	801cdea <ip4_output_if+0x26>
 801cde2:	68bb      	ldr	r3, [r7, #8]
 801cde4:	681b      	ldr	r3, [r3, #0]
 801cde6:	2b00      	cmp	r3, #0
 801cde8:	d102      	bne.n	801cdf0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801cdea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdec:	3304      	adds	r3, #4
 801cdee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801cdf0:	78fa      	ldrb	r2, [r7, #3]
 801cdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdf4:	9302      	str	r3, [sp, #8]
 801cdf6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801cdfa:	9301      	str	r3, [sp, #4]
 801cdfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 801ce00:	9300      	str	r3, [sp, #0]
 801ce02:	4613      	mov	r3, r2
 801ce04:	687a      	ldr	r2, [r7, #4]
 801ce06:	6979      	ldr	r1, [r7, #20]
 801ce08:	68f8      	ldr	r0, [r7, #12]
 801ce0a:	f000 f805 	bl	801ce18 <ip4_output_if_src>
 801ce0e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801ce10:	4618      	mov	r0, r3
 801ce12:	3718      	adds	r7, #24
 801ce14:	46bd      	mov	sp, r7
 801ce16:	bd80      	pop	{r7, pc}

0801ce18 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801ce18:	b580      	push	{r7, lr}
 801ce1a:	b088      	sub	sp, #32
 801ce1c:	af00      	add	r7, sp, #0
 801ce1e:	60f8      	str	r0, [r7, #12]
 801ce20:	60b9      	str	r1, [r7, #8]
 801ce22:	607a      	str	r2, [r7, #4]
 801ce24:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801ce26:	68fb      	ldr	r3, [r7, #12]
 801ce28:	7b9b      	ldrb	r3, [r3, #14]
 801ce2a:	2b01      	cmp	r3, #1
 801ce2c:	d006      	beq.n	801ce3c <ip4_output_if_src+0x24>
 801ce2e:	4b4b      	ldr	r3, [pc, #300]	; (801cf5c <ip4_output_if_src+0x144>)
 801ce30:	f44f 7255 	mov.w	r2, #852	; 0x354
 801ce34:	494a      	ldr	r1, [pc, #296]	; (801cf60 <ip4_output_if_src+0x148>)
 801ce36:	484b      	ldr	r0, [pc, #300]	; (801cf64 <ip4_output_if_src+0x14c>)
 801ce38:	f001 f944 	bl	801e0c4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801ce3c:	687b      	ldr	r3, [r7, #4]
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	d060      	beq.n	801cf04 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801ce42:	2314      	movs	r3, #20
 801ce44:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801ce46:	2114      	movs	r1, #20
 801ce48:	68f8      	ldr	r0, [r7, #12]
 801ce4a:	f7f7 fe5f 	bl	8014b0c <pbuf_add_header>
 801ce4e:	4603      	mov	r3, r0
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	d002      	beq.n	801ce5a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801ce54:	f06f 0301 	mvn.w	r3, #1
 801ce58:	e07c      	b.n	801cf54 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801ce5a:	68fb      	ldr	r3, [r7, #12]
 801ce5c:	685b      	ldr	r3, [r3, #4]
 801ce5e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801ce60:	68fb      	ldr	r3, [r7, #12]
 801ce62:	895b      	ldrh	r3, [r3, #10]
 801ce64:	2b13      	cmp	r3, #19
 801ce66:	d806      	bhi.n	801ce76 <ip4_output_if_src+0x5e>
 801ce68:	4b3c      	ldr	r3, [pc, #240]	; (801cf5c <ip4_output_if_src+0x144>)
 801ce6a:	f240 3289 	movw	r2, #905	; 0x389
 801ce6e:	493e      	ldr	r1, [pc, #248]	; (801cf68 <ip4_output_if_src+0x150>)
 801ce70:	483c      	ldr	r0, [pc, #240]	; (801cf64 <ip4_output_if_src+0x14c>)
 801ce72:	f001 f927 	bl	801e0c4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801ce76:	69fb      	ldr	r3, [r7, #28]
 801ce78:	78fa      	ldrb	r2, [r7, #3]
 801ce7a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801ce7c:	69fb      	ldr	r3, [r7, #28]
 801ce7e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801ce82:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	681a      	ldr	r2, [r3, #0]
 801ce88:	69fb      	ldr	r3, [r7, #28]
 801ce8a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801ce8c:	8b7b      	ldrh	r3, [r7, #26]
 801ce8e:	089b      	lsrs	r3, r3, #2
 801ce90:	b29b      	uxth	r3, r3
 801ce92:	b2db      	uxtb	r3, r3
 801ce94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce98:	b2da      	uxtb	r2, r3
 801ce9a:	69fb      	ldr	r3, [r7, #28]
 801ce9c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801ce9e:	69fb      	ldr	r3, [r7, #28]
 801cea0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801cea4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801cea6:	68fb      	ldr	r3, [r7, #12]
 801cea8:	891b      	ldrh	r3, [r3, #8]
 801ceaa:	4618      	mov	r0, r3
 801ceac:	f7f6 fae6 	bl	801347c <lwip_htons>
 801ceb0:	4603      	mov	r3, r0
 801ceb2:	461a      	mov	r2, r3
 801ceb4:	69fb      	ldr	r3, [r7, #28]
 801ceb6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801ceb8:	69fb      	ldr	r3, [r7, #28]
 801ceba:	2200      	movs	r2, #0
 801cebc:	719a      	strb	r2, [r3, #6]
 801cebe:	2200      	movs	r2, #0
 801cec0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801cec2:	4b2a      	ldr	r3, [pc, #168]	; (801cf6c <ip4_output_if_src+0x154>)
 801cec4:	881b      	ldrh	r3, [r3, #0]
 801cec6:	4618      	mov	r0, r3
 801cec8:	f7f6 fad8 	bl	801347c <lwip_htons>
 801cecc:	4603      	mov	r3, r0
 801cece:	461a      	mov	r2, r3
 801ced0:	69fb      	ldr	r3, [r7, #28]
 801ced2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801ced4:	4b25      	ldr	r3, [pc, #148]	; (801cf6c <ip4_output_if_src+0x154>)
 801ced6:	881b      	ldrh	r3, [r3, #0]
 801ced8:	3301      	adds	r3, #1
 801ceda:	b29a      	uxth	r2, r3
 801cedc:	4b23      	ldr	r3, [pc, #140]	; (801cf6c <ip4_output_if_src+0x154>)
 801cede:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801cee0:	68bb      	ldr	r3, [r7, #8]
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d104      	bne.n	801cef0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801cee6:	4b22      	ldr	r3, [pc, #136]	; (801cf70 <ip4_output_if_src+0x158>)
 801cee8:	681a      	ldr	r2, [r3, #0]
 801ceea:	69fb      	ldr	r3, [r7, #28]
 801ceec:	60da      	str	r2, [r3, #12]
 801ceee:	e003      	b.n	801cef8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801cef0:	68bb      	ldr	r3, [r7, #8]
 801cef2:	681a      	ldr	r2, [r3, #0]
 801cef4:	69fb      	ldr	r3, [r7, #28]
 801cef6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801cef8:	69fb      	ldr	r3, [r7, #28]
 801cefa:	2200      	movs	r2, #0
 801cefc:	729a      	strb	r2, [r3, #10]
 801cefe:	2200      	movs	r2, #0
 801cf00:	72da      	strb	r2, [r3, #11]
 801cf02:	e00f      	b.n	801cf24 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801cf04:	68fb      	ldr	r3, [r7, #12]
 801cf06:	895b      	ldrh	r3, [r3, #10]
 801cf08:	2b13      	cmp	r3, #19
 801cf0a:	d802      	bhi.n	801cf12 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801cf0c:	f06f 0301 	mvn.w	r3, #1
 801cf10:	e020      	b.n	801cf54 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801cf12:	68fb      	ldr	r3, [r7, #12]
 801cf14:	685b      	ldr	r3, [r3, #4]
 801cf16:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801cf18:	69fb      	ldr	r3, [r7, #28]
 801cf1a:	691b      	ldr	r3, [r3, #16]
 801cf1c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801cf1e:	f107 0314 	add.w	r3, r7, #20
 801cf22:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801cf24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cf26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d00c      	beq.n	801cf46 <ip4_output_if_src+0x12e>
 801cf2c:	68fb      	ldr	r3, [r7, #12]
 801cf2e:	891a      	ldrh	r2, [r3, #8]
 801cf30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cf32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801cf34:	429a      	cmp	r2, r3
 801cf36:	d906      	bls.n	801cf46 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801cf38:	687a      	ldr	r2, [r7, #4]
 801cf3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801cf3c:	68f8      	ldr	r0, [r7, #12]
 801cf3e:	f000 fd4b 	bl	801d9d8 <ip4_frag>
 801cf42:	4603      	mov	r3, r0
 801cf44:	e006      	b.n	801cf54 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801cf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cf48:	695b      	ldr	r3, [r3, #20]
 801cf4a:	687a      	ldr	r2, [r7, #4]
 801cf4c:	68f9      	ldr	r1, [r7, #12]
 801cf4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cf50:	4798      	blx	r3
 801cf52:	4603      	mov	r3, r0
}
 801cf54:	4618      	mov	r0, r3
 801cf56:	3720      	adds	r7, #32
 801cf58:	46bd      	mov	sp, r7
 801cf5a:	bd80      	pop	{r7, pc}
 801cf5c:	0802197c 	.word	0x0802197c
 801cf60:	080219b0 	.word	0x080219b0
 801cf64:	080219bc 	.word	0x080219bc
 801cf68:	080219e4 	.word	0x080219e4
 801cf6c:	2000465a 	.word	0x2000465a
 801cf70:	08032940 	.word	0x08032940

0801cf74 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801cf74:	b480      	push	{r7}
 801cf76:	b085      	sub	sp, #20
 801cf78:	af00      	add	r7, sp, #0
 801cf7a:	6078      	str	r0, [r7, #4]
 801cf7c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801cf82:	687b      	ldr	r3, [r7, #4]
 801cf84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801cf88:	d002      	beq.n	801cf90 <ip4_addr_isbroadcast_u32+0x1c>
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	2b00      	cmp	r3, #0
 801cf8e:	d101      	bne.n	801cf94 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801cf90:	2301      	movs	r3, #1
 801cf92:	e02a      	b.n	801cfea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801cf94:	683b      	ldr	r3, [r7, #0]
 801cf96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801cf9a:	f003 0302 	and.w	r3, r3, #2
 801cf9e:	2b00      	cmp	r3, #0
 801cfa0:	d101      	bne.n	801cfa6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801cfa2:	2300      	movs	r3, #0
 801cfa4:	e021      	b.n	801cfea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801cfa6:	683b      	ldr	r3, [r7, #0]
 801cfa8:	3304      	adds	r3, #4
 801cfaa:	681b      	ldr	r3, [r3, #0]
 801cfac:	687a      	ldr	r2, [r7, #4]
 801cfae:	429a      	cmp	r2, r3
 801cfb0:	d101      	bne.n	801cfb6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801cfb2:	2300      	movs	r3, #0
 801cfb4:	e019      	b.n	801cfea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801cfb6:	68fa      	ldr	r2, [r7, #12]
 801cfb8:	683b      	ldr	r3, [r7, #0]
 801cfba:	3304      	adds	r3, #4
 801cfbc:	681b      	ldr	r3, [r3, #0]
 801cfbe:	405a      	eors	r2, r3
 801cfc0:	683b      	ldr	r3, [r7, #0]
 801cfc2:	3308      	adds	r3, #8
 801cfc4:	681b      	ldr	r3, [r3, #0]
 801cfc6:	4013      	ands	r3, r2
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	d10d      	bne.n	801cfe8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801cfcc:	683b      	ldr	r3, [r7, #0]
 801cfce:	3308      	adds	r3, #8
 801cfd0:	681b      	ldr	r3, [r3, #0]
 801cfd2:	43da      	mvns	r2, r3
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801cfd8:	683b      	ldr	r3, [r7, #0]
 801cfda:	3308      	adds	r3, #8
 801cfdc:	681b      	ldr	r3, [r3, #0]
 801cfde:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801cfe0:	429a      	cmp	r2, r3
 801cfe2:	d101      	bne.n	801cfe8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801cfe4:	2301      	movs	r3, #1
 801cfe6:	e000      	b.n	801cfea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801cfe8:	2300      	movs	r3, #0
  }
}
 801cfea:	4618      	mov	r0, r3
 801cfec:	3714      	adds	r7, #20
 801cfee:	46bd      	mov	sp, r7
 801cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cff4:	4770      	bx	lr
	...

0801cff8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801cff8:	b580      	push	{r7, lr}
 801cffa:	b084      	sub	sp, #16
 801cffc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801cffe:	2300      	movs	r3, #0
 801d000:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801d002:	4b12      	ldr	r3, [pc, #72]	; (801d04c <ip_reass_tmr+0x54>)
 801d004:	681b      	ldr	r3, [r3, #0]
 801d006:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801d008:	e018      	b.n	801d03c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801d00a:	68fb      	ldr	r3, [r7, #12]
 801d00c:	7fdb      	ldrb	r3, [r3, #31]
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d00b      	beq.n	801d02a <ip_reass_tmr+0x32>
      r->timer--;
 801d012:	68fb      	ldr	r3, [r7, #12]
 801d014:	7fdb      	ldrb	r3, [r3, #31]
 801d016:	3b01      	subs	r3, #1
 801d018:	b2da      	uxtb	r2, r3
 801d01a:	68fb      	ldr	r3, [r7, #12]
 801d01c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801d01e:	68fb      	ldr	r3, [r7, #12]
 801d020:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801d022:	68fb      	ldr	r3, [r7, #12]
 801d024:	681b      	ldr	r3, [r3, #0]
 801d026:	60fb      	str	r3, [r7, #12]
 801d028:	e008      	b.n	801d03c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801d02a:	68fb      	ldr	r3, [r7, #12]
 801d02c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801d02e:	68fb      	ldr	r3, [r7, #12]
 801d030:	681b      	ldr	r3, [r3, #0]
 801d032:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801d034:	68b9      	ldr	r1, [r7, #8]
 801d036:	6878      	ldr	r0, [r7, #4]
 801d038:	f000 f80a 	bl	801d050 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801d03c:	68fb      	ldr	r3, [r7, #12]
 801d03e:	2b00      	cmp	r3, #0
 801d040:	d1e3      	bne.n	801d00a <ip_reass_tmr+0x12>
    }
  }
}
 801d042:	bf00      	nop
 801d044:	3710      	adds	r7, #16
 801d046:	46bd      	mov	sp, r7
 801d048:	bd80      	pop	{r7, pc}
 801d04a:	bf00      	nop
 801d04c:	2000465c 	.word	0x2000465c

0801d050 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d050:	b580      	push	{r7, lr}
 801d052:	b088      	sub	sp, #32
 801d054:	af00      	add	r7, sp, #0
 801d056:	6078      	str	r0, [r7, #4]
 801d058:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801d05a:	2300      	movs	r3, #0
 801d05c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801d05e:	683a      	ldr	r2, [r7, #0]
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	429a      	cmp	r2, r3
 801d064:	d105      	bne.n	801d072 <ip_reass_free_complete_datagram+0x22>
 801d066:	4b45      	ldr	r3, [pc, #276]	; (801d17c <ip_reass_free_complete_datagram+0x12c>)
 801d068:	22ab      	movs	r2, #171	; 0xab
 801d06a:	4945      	ldr	r1, [pc, #276]	; (801d180 <ip_reass_free_complete_datagram+0x130>)
 801d06c:	4845      	ldr	r0, [pc, #276]	; (801d184 <ip_reass_free_complete_datagram+0x134>)
 801d06e:	f001 f829 	bl	801e0c4 <iprintf>
  if (prev != NULL) {
 801d072:	683b      	ldr	r3, [r7, #0]
 801d074:	2b00      	cmp	r3, #0
 801d076:	d00a      	beq.n	801d08e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801d078:	683b      	ldr	r3, [r7, #0]
 801d07a:	681b      	ldr	r3, [r3, #0]
 801d07c:	687a      	ldr	r2, [r7, #4]
 801d07e:	429a      	cmp	r2, r3
 801d080:	d005      	beq.n	801d08e <ip_reass_free_complete_datagram+0x3e>
 801d082:	4b3e      	ldr	r3, [pc, #248]	; (801d17c <ip_reass_free_complete_datagram+0x12c>)
 801d084:	22ad      	movs	r2, #173	; 0xad
 801d086:	4940      	ldr	r1, [pc, #256]	; (801d188 <ip_reass_free_complete_datagram+0x138>)
 801d088:	483e      	ldr	r0, [pc, #248]	; (801d184 <ip_reass_free_complete_datagram+0x134>)
 801d08a:	f001 f81b 	bl	801e0c4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	685b      	ldr	r3, [r3, #4]
 801d092:	685b      	ldr	r3, [r3, #4]
 801d094:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801d096:	697b      	ldr	r3, [r7, #20]
 801d098:	889b      	ldrh	r3, [r3, #4]
 801d09a:	b29b      	uxth	r3, r3
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	d12a      	bne.n	801d0f6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801d0a0:	687b      	ldr	r3, [r7, #4]
 801d0a2:	685b      	ldr	r3, [r3, #4]
 801d0a4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801d0a6:	697b      	ldr	r3, [r7, #20]
 801d0a8:	681a      	ldr	r2, [r3, #0]
 801d0aa:	687b      	ldr	r3, [r7, #4]
 801d0ac:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801d0ae:	69bb      	ldr	r3, [r7, #24]
 801d0b0:	6858      	ldr	r0, [r3, #4]
 801d0b2:	687b      	ldr	r3, [r7, #4]
 801d0b4:	3308      	adds	r3, #8
 801d0b6:	2214      	movs	r2, #20
 801d0b8:	4619      	mov	r1, r3
 801d0ba:	f000 fff0 	bl	801e09e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801d0be:	2101      	movs	r1, #1
 801d0c0:	69b8      	ldr	r0, [r7, #24]
 801d0c2:	f7ff fc49 	bl	801c958 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801d0c6:	69b8      	ldr	r0, [r7, #24]
 801d0c8:	f7f7 fe44 	bl	8014d54 <pbuf_clen>
 801d0cc:	4603      	mov	r3, r0
 801d0ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d0d0:	8bfa      	ldrh	r2, [r7, #30]
 801d0d2:	8a7b      	ldrh	r3, [r7, #18]
 801d0d4:	4413      	add	r3, r2
 801d0d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d0da:	db05      	blt.n	801d0e8 <ip_reass_free_complete_datagram+0x98>
 801d0dc:	4b27      	ldr	r3, [pc, #156]	; (801d17c <ip_reass_free_complete_datagram+0x12c>)
 801d0de:	22bc      	movs	r2, #188	; 0xbc
 801d0e0:	492a      	ldr	r1, [pc, #168]	; (801d18c <ip_reass_free_complete_datagram+0x13c>)
 801d0e2:	4828      	ldr	r0, [pc, #160]	; (801d184 <ip_reass_free_complete_datagram+0x134>)
 801d0e4:	f000 ffee 	bl	801e0c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d0e8:	8bfa      	ldrh	r2, [r7, #30]
 801d0ea:	8a7b      	ldrh	r3, [r7, #18]
 801d0ec:	4413      	add	r3, r2
 801d0ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801d0f0:	69b8      	ldr	r0, [r7, #24]
 801d0f2:	f7f7 fda1 	bl	8014c38 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801d0f6:	687b      	ldr	r3, [r7, #4]
 801d0f8:	685b      	ldr	r3, [r3, #4]
 801d0fa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801d0fc:	e01f      	b.n	801d13e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801d0fe:	69bb      	ldr	r3, [r7, #24]
 801d100:	685b      	ldr	r3, [r3, #4]
 801d102:	617b      	str	r3, [r7, #20]
    pcur = p;
 801d104:	69bb      	ldr	r3, [r7, #24]
 801d106:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801d108:	697b      	ldr	r3, [r7, #20]
 801d10a:	681b      	ldr	r3, [r3, #0]
 801d10c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801d10e:	68f8      	ldr	r0, [r7, #12]
 801d110:	f7f7 fe20 	bl	8014d54 <pbuf_clen>
 801d114:	4603      	mov	r3, r0
 801d116:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d118:	8bfa      	ldrh	r2, [r7, #30]
 801d11a:	8a7b      	ldrh	r3, [r7, #18]
 801d11c:	4413      	add	r3, r2
 801d11e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d122:	db05      	blt.n	801d130 <ip_reass_free_complete_datagram+0xe0>
 801d124:	4b15      	ldr	r3, [pc, #84]	; (801d17c <ip_reass_free_complete_datagram+0x12c>)
 801d126:	22cc      	movs	r2, #204	; 0xcc
 801d128:	4918      	ldr	r1, [pc, #96]	; (801d18c <ip_reass_free_complete_datagram+0x13c>)
 801d12a:	4816      	ldr	r0, [pc, #88]	; (801d184 <ip_reass_free_complete_datagram+0x134>)
 801d12c:	f000 ffca 	bl	801e0c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d130:	8bfa      	ldrh	r2, [r7, #30]
 801d132:	8a7b      	ldrh	r3, [r7, #18]
 801d134:	4413      	add	r3, r2
 801d136:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801d138:	68f8      	ldr	r0, [r7, #12]
 801d13a:	f7f7 fd7d 	bl	8014c38 <pbuf_free>
  while (p != NULL) {
 801d13e:	69bb      	ldr	r3, [r7, #24]
 801d140:	2b00      	cmp	r3, #0
 801d142:	d1dc      	bne.n	801d0fe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801d144:	6839      	ldr	r1, [r7, #0]
 801d146:	6878      	ldr	r0, [r7, #4]
 801d148:	f000 f8c2 	bl	801d2d0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801d14c:	4b10      	ldr	r3, [pc, #64]	; (801d190 <ip_reass_free_complete_datagram+0x140>)
 801d14e:	881b      	ldrh	r3, [r3, #0]
 801d150:	8bfa      	ldrh	r2, [r7, #30]
 801d152:	429a      	cmp	r2, r3
 801d154:	d905      	bls.n	801d162 <ip_reass_free_complete_datagram+0x112>
 801d156:	4b09      	ldr	r3, [pc, #36]	; (801d17c <ip_reass_free_complete_datagram+0x12c>)
 801d158:	22d2      	movs	r2, #210	; 0xd2
 801d15a:	490e      	ldr	r1, [pc, #56]	; (801d194 <ip_reass_free_complete_datagram+0x144>)
 801d15c:	4809      	ldr	r0, [pc, #36]	; (801d184 <ip_reass_free_complete_datagram+0x134>)
 801d15e:	f000 ffb1 	bl	801e0c4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801d162:	4b0b      	ldr	r3, [pc, #44]	; (801d190 <ip_reass_free_complete_datagram+0x140>)
 801d164:	881a      	ldrh	r2, [r3, #0]
 801d166:	8bfb      	ldrh	r3, [r7, #30]
 801d168:	1ad3      	subs	r3, r2, r3
 801d16a:	b29a      	uxth	r2, r3
 801d16c:	4b08      	ldr	r3, [pc, #32]	; (801d190 <ip_reass_free_complete_datagram+0x140>)
 801d16e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801d170:	8bfb      	ldrh	r3, [r7, #30]
}
 801d172:	4618      	mov	r0, r3
 801d174:	3720      	adds	r7, #32
 801d176:	46bd      	mov	sp, r7
 801d178:	bd80      	pop	{r7, pc}
 801d17a:	bf00      	nop
 801d17c:	08021a14 	.word	0x08021a14
 801d180:	08021a50 	.word	0x08021a50
 801d184:	08021a5c 	.word	0x08021a5c
 801d188:	08021a84 	.word	0x08021a84
 801d18c:	08021a98 	.word	0x08021a98
 801d190:	20004660 	.word	0x20004660
 801d194:	08021ab8 	.word	0x08021ab8

0801d198 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801d198:	b580      	push	{r7, lr}
 801d19a:	b08a      	sub	sp, #40	; 0x28
 801d19c:	af00      	add	r7, sp, #0
 801d19e:	6078      	str	r0, [r7, #4]
 801d1a0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801d1a2:	2300      	movs	r3, #0
 801d1a4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801d1a6:	2300      	movs	r3, #0
 801d1a8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801d1aa:	2300      	movs	r3, #0
 801d1ac:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801d1ae:	2300      	movs	r3, #0
 801d1b0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801d1b2:	2300      	movs	r3, #0
 801d1b4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801d1b6:	4b28      	ldr	r3, [pc, #160]	; (801d258 <ip_reass_remove_oldest_datagram+0xc0>)
 801d1b8:	681b      	ldr	r3, [r3, #0]
 801d1ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d1bc:	e030      	b.n	801d220 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801d1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1c0:	695a      	ldr	r2, [r3, #20]
 801d1c2:	687b      	ldr	r3, [r7, #4]
 801d1c4:	68db      	ldr	r3, [r3, #12]
 801d1c6:	429a      	cmp	r2, r3
 801d1c8:	d10c      	bne.n	801d1e4 <ip_reass_remove_oldest_datagram+0x4c>
 801d1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1cc:	699a      	ldr	r2, [r3, #24]
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	691b      	ldr	r3, [r3, #16]
 801d1d2:	429a      	cmp	r2, r3
 801d1d4:	d106      	bne.n	801d1e4 <ip_reass_remove_oldest_datagram+0x4c>
 801d1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1d8:	899a      	ldrh	r2, [r3, #12]
 801d1da:	687b      	ldr	r3, [r7, #4]
 801d1dc:	889b      	ldrh	r3, [r3, #4]
 801d1de:	b29b      	uxth	r3, r3
 801d1e0:	429a      	cmp	r2, r3
 801d1e2:	d014      	beq.n	801d20e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801d1e4:	693b      	ldr	r3, [r7, #16]
 801d1e6:	3301      	adds	r3, #1
 801d1e8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801d1ea:	6a3b      	ldr	r3, [r7, #32]
 801d1ec:	2b00      	cmp	r3, #0
 801d1ee:	d104      	bne.n	801d1fa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801d1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1f2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d1f4:	69fb      	ldr	r3, [r7, #28]
 801d1f6:	61bb      	str	r3, [r7, #24]
 801d1f8:	e009      	b.n	801d20e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801d1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1fc:	7fda      	ldrb	r2, [r3, #31]
 801d1fe:	6a3b      	ldr	r3, [r7, #32]
 801d200:	7fdb      	ldrb	r3, [r3, #31]
 801d202:	429a      	cmp	r2, r3
 801d204:	d803      	bhi.n	801d20e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801d206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d208:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d20a:	69fb      	ldr	r3, [r7, #28]
 801d20c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801d20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	2b00      	cmp	r3, #0
 801d214:	d001      	beq.n	801d21a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801d216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d218:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801d21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d21c:	681b      	ldr	r3, [r3, #0]
 801d21e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d222:	2b00      	cmp	r3, #0
 801d224:	d1cb      	bne.n	801d1be <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801d226:	6a3b      	ldr	r3, [r7, #32]
 801d228:	2b00      	cmp	r3, #0
 801d22a:	d008      	beq.n	801d23e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801d22c:	69b9      	ldr	r1, [r7, #24]
 801d22e:	6a38      	ldr	r0, [r7, #32]
 801d230:	f7ff ff0e 	bl	801d050 <ip_reass_free_complete_datagram>
 801d234:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801d236:	697a      	ldr	r2, [r7, #20]
 801d238:	68fb      	ldr	r3, [r7, #12]
 801d23a:	4413      	add	r3, r2
 801d23c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801d23e:	697a      	ldr	r2, [r7, #20]
 801d240:	683b      	ldr	r3, [r7, #0]
 801d242:	429a      	cmp	r2, r3
 801d244:	da02      	bge.n	801d24c <ip_reass_remove_oldest_datagram+0xb4>
 801d246:	693b      	ldr	r3, [r7, #16]
 801d248:	2b01      	cmp	r3, #1
 801d24a:	dcac      	bgt.n	801d1a6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801d24c:	697b      	ldr	r3, [r7, #20]
}
 801d24e:	4618      	mov	r0, r3
 801d250:	3728      	adds	r7, #40	; 0x28
 801d252:	46bd      	mov	sp, r7
 801d254:	bd80      	pop	{r7, pc}
 801d256:	bf00      	nop
 801d258:	2000465c 	.word	0x2000465c

0801d25c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801d25c:	b580      	push	{r7, lr}
 801d25e:	b084      	sub	sp, #16
 801d260:	af00      	add	r7, sp, #0
 801d262:	6078      	str	r0, [r7, #4]
 801d264:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d266:	2004      	movs	r0, #4
 801d268:	f7f6 fdf4 	bl	8013e54 <memp_malloc>
 801d26c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801d26e:	68fb      	ldr	r3, [r7, #12]
 801d270:	2b00      	cmp	r3, #0
 801d272:	d110      	bne.n	801d296 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801d274:	6839      	ldr	r1, [r7, #0]
 801d276:	6878      	ldr	r0, [r7, #4]
 801d278:	f7ff ff8e 	bl	801d198 <ip_reass_remove_oldest_datagram>
 801d27c:	4602      	mov	r2, r0
 801d27e:	683b      	ldr	r3, [r7, #0]
 801d280:	4293      	cmp	r3, r2
 801d282:	dc03      	bgt.n	801d28c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d284:	2004      	movs	r0, #4
 801d286:	f7f6 fde5 	bl	8013e54 <memp_malloc>
 801d28a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801d28c:	68fb      	ldr	r3, [r7, #12]
 801d28e:	2b00      	cmp	r3, #0
 801d290:	d101      	bne.n	801d296 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801d292:	2300      	movs	r3, #0
 801d294:	e016      	b.n	801d2c4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801d296:	2220      	movs	r2, #32
 801d298:	2100      	movs	r1, #0
 801d29a:	68f8      	ldr	r0, [r7, #12]
 801d29c:	f000 ff0a 	bl	801e0b4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801d2a0:	68fb      	ldr	r3, [r7, #12]
 801d2a2:	220f      	movs	r2, #15
 801d2a4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801d2a6:	4b09      	ldr	r3, [pc, #36]	; (801d2cc <ip_reass_enqueue_new_datagram+0x70>)
 801d2a8:	681a      	ldr	r2, [r3, #0]
 801d2aa:	68fb      	ldr	r3, [r7, #12]
 801d2ac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801d2ae:	4a07      	ldr	r2, [pc, #28]	; (801d2cc <ip_reass_enqueue_new_datagram+0x70>)
 801d2b0:	68fb      	ldr	r3, [r7, #12]
 801d2b2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801d2b4:	68fb      	ldr	r3, [r7, #12]
 801d2b6:	3308      	adds	r3, #8
 801d2b8:	2214      	movs	r2, #20
 801d2ba:	6879      	ldr	r1, [r7, #4]
 801d2bc:	4618      	mov	r0, r3
 801d2be:	f000 feee 	bl	801e09e <memcpy>
  return ipr;
 801d2c2:	68fb      	ldr	r3, [r7, #12]
}
 801d2c4:	4618      	mov	r0, r3
 801d2c6:	3710      	adds	r7, #16
 801d2c8:	46bd      	mov	sp, r7
 801d2ca:	bd80      	pop	{r7, pc}
 801d2cc:	2000465c 	.word	0x2000465c

0801d2d0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d2d0:	b580      	push	{r7, lr}
 801d2d2:	b082      	sub	sp, #8
 801d2d4:	af00      	add	r7, sp, #0
 801d2d6:	6078      	str	r0, [r7, #4]
 801d2d8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801d2da:	4b10      	ldr	r3, [pc, #64]	; (801d31c <ip_reass_dequeue_datagram+0x4c>)
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	687a      	ldr	r2, [r7, #4]
 801d2e0:	429a      	cmp	r2, r3
 801d2e2:	d104      	bne.n	801d2ee <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	681b      	ldr	r3, [r3, #0]
 801d2e8:	4a0c      	ldr	r2, [pc, #48]	; (801d31c <ip_reass_dequeue_datagram+0x4c>)
 801d2ea:	6013      	str	r3, [r2, #0]
 801d2ec:	e00d      	b.n	801d30a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801d2ee:	683b      	ldr	r3, [r7, #0]
 801d2f0:	2b00      	cmp	r3, #0
 801d2f2:	d106      	bne.n	801d302 <ip_reass_dequeue_datagram+0x32>
 801d2f4:	4b0a      	ldr	r3, [pc, #40]	; (801d320 <ip_reass_dequeue_datagram+0x50>)
 801d2f6:	f240 1245 	movw	r2, #325	; 0x145
 801d2fa:	490a      	ldr	r1, [pc, #40]	; (801d324 <ip_reass_dequeue_datagram+0x54>)
 801d2fc:	480a      	ldr	r0, [pc, #40]	; (801d328 <ip_reass_dequeue_datagram+0x58>)
 801d2fe:	f000 fee1 	bl	801e0c4 <iprintf>
    prev->next = ipr->next;
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	681a      	ldr	r2, [r3, #0]
 801d306:	683b      	ldr	r3, [r7, #0]
 801d308:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801d30a:	6879      	ldr	r1, [r7, #4]
 801d30c:	2004      	movs	r0, #4
 801d30e:	f7f6 fdf3 	bl	8013ef8 <memp_free>
}
 801d312:	bf00      	nop
 801d314:	3708      	adds	r7, #8
 801d316:	46bd      	mov	sp, r7
 801d318:	bd80      	pop	{r7, pc}
 801d31a:	bf00      	nop
 801d31c:	2000465c 	.word	0x2000465c
 801d320:	08021a14 	.word	0x08021a14
 801d324:	08021adc 	.word	0x08021adc
 801d328:	08021a5c 	.word	0x08021a5c

0801d32c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801d32c:	b580      	push	{r7, lr}
 801d32e:	b08c      	sub	sp, #48	; 0x30
 801d330:	af00      	add	r7, sp, #0
 801d332:	60f8      	str	r0, [r7, #12]
 801d334:	60b9      	str	r1, [r7, #8]
 801d336:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801d338:	2300      	movs	r3, #0
 801d33a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801d33c:	2301      	movs	r3, #1
 801d33e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801d340:	68bb      	ldr	r3, [r7, #8]
 801d342:	685b      	ldr	r3, [r3, #4]
 801d344:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d346:	69fb      	ldr	r3, [r7, #28]
 801d348:	885b      	ldrh	r3, [r3, #2]
 801d34a:	b29b      	uxth	r3, r3
 801d34c:	4618      	mov	r0, r3
 801d34e:	f7f6 f895 	bl	801347c <lwip_htons>
 801d352:	4603      	mov	r3, r0
 801d354:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801d356:	69fb      	ldr	r3, [r7, #28]
 801d358:	781b      	ldrb	r3, [r3, #0]
 801d35a:	f003 030f 	and.w	r3, r3, #15
 801d35e:	b2db      	uxtb	r3, r3
 801d360:	009b      	lsls	r3, r3, #2
 801d362:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801d364:	7e7b      	ldrb	r3, [r7, #25]
 801d366:	b29b      	uxth	r3, r3
 801d368:	8b7a      	ldrh	r2, [r7, #26]
 801d36a:	429a      	cmp	r2, r3
 801d36c:	d202      	bcs.n	801d374 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d36e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d372:	e135      	b.n	801d5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801d374:	7e7b      	ldrb	r3, [r7, #25]
 801d376:	b29b      	uxth	r3, r3
 801d378:	8b7a      	ldrh	r2, [r7, #26]
 801d37a:	1ad3      	subs	r3, r2, r3
 801d37c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801d37e:	69fb      	ldr	r3, [r7, #28]
 801d380:	88db      	ldrh	r3, [r3, #6]
 801d382:	b29b      	uxth	r3, r3
 801d384:	4618      	mov	r0, r3
 801d386:	f7f6 f879 	bl	801347c <lwip_htons>
 801d38a:	4603      	mov	r3, r0
 801d38c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d390:	b29b      	uxth	r3, r3
 801d392:	00db      	lsls	r3, r3, #3
 801d394:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801d396:	68bb      	ldr	r3, [r7, #8]
 801d398:	685b      	ldr	r3, [r3, #4]
 801d39a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801d39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d39e:	2200      	movs	r2, #0
 801d3a0:	701a      	strb	r2, [r3, #0]
 801d3a2:	2200      	movs	r2, #0
 801d3a4:	705a      	strb	r2, [r3, #1]
 801d3a6:	2200      	movs	r2, #0
 801d3a8:	709a      	strb	r2, [r3, #2]
 801d3aa:	2200      	movs	r2, #0
 801d3ac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801d3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3b0:	8afa      	ldrh	r2, [r7, #22]
 801d3b2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801d3b4:	8afa      	ldrh	r2, [r7, #22]
 801d3b6:	8b7b      	ldrh	r3, [r7, #26]
 801d3b8:	4413      	add	r3, r2
 801d3ba:	b29a      	uxth	r2, r3
 801d3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3be:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801d3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3c2:	88db      	ldrh	r3, [r3, #6]
 801d3c4:	b29b      	uxth	r3, r3
 801d3c6:	8afa      	ldrh	r2, [r7, #22]
 801d3c8:	429a      	cmp	r2, r3
 801d3ca:	d902      	bls.n	801d3d2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d3cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d3d0:	e106      	b.n	801d5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801d3d2:	68fb      	ldr	r3, [r7, #12]
 801d3d4:	685b      	ldr	r3, [r3, #4]
 801d3d6:	627b      	str	r3, [r7, #36]	; 0x24
 801d3d8:	e068      	b.n	801d4ac <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801d3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3dc:	685b      	ldr	r3, [r3, #4]
 801d3de:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801d3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3e2:	889b      	ldrh	r3, [r3, #4]
 801d3e4:	b29a      	uxth	r2, r3
 801d3e6:	693b      	ldr	r3, [r7, #16]
 801d3e8:	889b      	ldrh	r3, [r3, #4]
 801d3ea:	b29b      	uxth	r3, r3
 801d3ec:	429a      	cmp	r2, r3
 801d3ee:	d235      	bcs.n	801d45c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801d3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d3f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801d3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3f8:	2b00      	cmp	r3, #0
 801d3fa:	d020      	beq.n	801d43e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801d3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3fe:	889b      	ldrh	r3, [r3, #4]
 801d400:	b29a      	uxth	r2, r3
 801d402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d404:	88db      	ldrh	r3, [r3, #6]
 801d406:	b29b      	uxth	r3, r3
 801d408:	429a      	cmp	r2, r3
 801d40a:	d307      	bcc.n	801d41c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801d40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d40e:	88db      	ldrh	r3, [r3, #6]
 801d410:	b29a      	uxth	r2, r3
 801d412:	693b      	ldr	r3, [r7, #16]
 801d414:	889b      	ldrh	r3, [r3, #4]
 801d416:	b29b      	uxth	r3, r3
 801d418:	429a      	cmp	r2, r3
 801d41a:	d902      	bls.n	801d422 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d41c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d420:	e0de      	b.n	801d5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801d422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d424:	68ba      	ldr	r2, [r7, #8]
 801d426:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801d428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d42a:	88db      	ldrh	r3, [r3, #6]
 801d42c:	b29a      	uxth	r2, r3
 801d42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d430:	889b      	ldrh	r3, [r3, #4]
 801d432:	b29b      	uxth	r3, r3
 801d434:	429a      	cmp	r2, r3
 801d436:	d03d      	beq.n	801d4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d438:	2300      	movs	r3, #0
 801d43a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801d43c:	e03a      	b.n	801d4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801d43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d440:	88db      	ldrh	r3, [r3, #6]
 801d442:	b29a      	uxth	r2, r3
 801d444:	693b      	ldr	r3, [r7, #16]
 801d446:	889b      	ldrh	r3, [r3, #4]
 801d448:	b29b      	uxth	r3, r3
 801d44a:	429a      	cmp	r2, r3
 801d44c:	d902      	bls.n	801d454 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d44e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d452:	e0c5      	b.n	801d5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801d454:	68fb      	ldr	r3, [r7, #12]
 801d456:	68ba      	ldr	r2, [r7, #8]
 801d458:	605a      	str	r2, [r3, #4]
      break;
 801d45a:	e02b      	b.n	801d4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801d45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d45e:	889b      	ldrh	r3, [r3, #4]
 801d460:	b29a      	uxth	r2, r3
 801d462:	693b      	ldr	r3, [r7, #16]
 801d464:	889b      	ldrh	r3, [r3, #4]
 801d466:	b29b      	uxth	r3, r3
 801d468:	429a      	cmp	r2, r3
 801d46a:	d102      	bne.n	801d472 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d46c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d470:	e0b6      	b.n	801d5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801d472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d474:	889b      	ldrh	r3, [r3, #4]
 801d476:	b29a      	uxth	r2, r3
 801d478:	693b      	ldr	r3, [r7, #16]
 801d47a:	88db      	ldrh	r3, [r3, #6]
 801d47c:	b29b      	uxth	r3, r3
 801d47e:	429a      	cmp	r2, r3
 801d480:	d202      	bcs.n	801d488 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d486:	e0ab      	b.n	801d5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801d488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	d009      	beq.n	801d4a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801d48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d490:	88db      	ldrh	r3, [r3, #6]
 801d492:	b29a      	uxth	r2, r3
 801d494:	693b      	ldr	r3, [r7, #16]
 801d496:	889b      	ldrh	r3, [r3, #4]
 801d498:	b29b      	uxth	r3, r3
 801d49a:	429a      	cmp	r2, r3
 801d49c:	d001      	beq.n	801d4a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d49e:	2300      	movs	r3, #0
 801d4a0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801d4a2:	693b      	ldr	r3, [r7, #16]
 801d4a4:	681b      	ldr	r3, [r3, #0]
 801d4a6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801d4a8:	693b      	ldr	r3, [r7, #16]
 801d4aa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801d4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	d193      	bne.n	801d3da <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801d4b2:	e000      	b.n	801d4b6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801d4b4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801d4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4b8:	2b00      	cmp	r3, #0
 801d4ba:	d12d      	bne.n	801d518 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801d4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	d01c      	beq.n	801d4fc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801d4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4c4:	88db      	ldrh	r3, [r3, #6]
 801d4c6:	b29a      	uxth	r2, r3
 801d4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4ca:	889b      	ldrh	r3, [r3, #4]
 801d4cc:	b29b      	uxth	r3, r3
 801d4ce:	429a      	cmp	r2, r3
 801d4d0:	d906      	bls.n	801d4e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801d4d2:	4b45      	ldr	r3, [pc, #276]	; (801d5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d4d4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801d4d8:	4944      	ldr	r1, [pc, #272]	; (801d5ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801d4da:	4845      	ldr	r0, [pc, #276]	; (801d5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d4dc:	f000 fdf2 	bl	801e0c4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801d4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4e2:	68ba      	ldr	r2, [r7, #8]
 801d4e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801d4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4e8:	88db      	ldrh	r3, [r3, #6]
 801d4ea:	b29a      	uxth	r2, r3
 801d4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4ee:	889b      	ldrh	r3, [r3, #4]
 801d4f0:	b29b      	uxth	r3, r3
 801d4f2:	429a      	cmp	r2, r3
 801d4f4:	d010      	beq.n	801d518 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801d4f6:	2300      	movs	r3, #0
 801d4f8:	623b      	str	r3, [r7, #32]
 801d4fa:	e00d      	b.n	801d518 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801d4fc:	68fb      	ldr	r3, [r7, #12]
 801d4fe:	685b      	ldr	r3, [r3, #4]
 801d500:	2b00      	cmp	r3, #0
 801d502:	d006      	beq.n	801d512 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801d504:	4b38      	ldr	r3, [pc, #224]	; (801d5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d506:	f240 12bf 	movw	r2, #447	; 0x1bf
 801d50a:	493a      	ldr	r1, [pc, #232]	; (801d5f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801d50c:	4838      	ldr	r0, [pc, #224]	; (801d5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d50e:	f000 fdd9 	bl	801e0c4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801d512:	68fb      	ldr	r3, [r7, #12]
 801d514:	68ba      	ldr	r2, [r7, #8]
 801d516:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801d518:	687b      	ldr	r3, [r7, #4]
 801d51a:	2b00      	cmp	r3, #0
 801d51c:	d105      	bne.n	801d52a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801d51e:	68fb      	ldr	r3, [r7, #12]
 801d520:	7f9b      	ldrb	r3, [r3, #30]
 801d522:	f003 0301 	and.w	r3, r3, #1
 801d526:	2b00      	cmp	r3, #0
 801d528:	d059      	beq.n	801d5de <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801d52a:	6a3b      	ldr	r3, [r7, #32]
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d04f      	beq.n	801d5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801d530:	68fb      	ldr	r3, [r7, #12]
 801d532:	685b      	ldr	r3, [r3, #4]
 801d534:	2b00      	cmp	r3, #0
 801d536:	d006      	beq.n	801d546 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801d538:	68fb      	ldr	r3, [r7, #12]
 801d53a:	685b      	ldr	r3, [r3, #4]
 801d53c:	685b      	ldr	r3, [r3, #4]
 801d53e:	889b      	ldrh	r3, [r3, #4]
 801d540:	b29b      	uxth	r3, r3
 801d542:	2b00      	cmp	r3, #0
 801d544:	d002      	beq.n	801d54c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801d546:	2300      	movs	r3, #0
 801d548:	623b      	str	r3, [r7, #32]
 801d54a:	e041      	b.n	801d5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801d54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d54e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801d550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d552:	681b      	ldr	r3, [r3, #0]
 801d554:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d556:	e012      	b.n	801d57e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801d558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d55a:	685b      	ldr	r3, [r3, #4]
 801d55c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801d55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d560:	88db      	ldrh	r3, [r3, #6]
 801d562:	b29a      	uxth	r2, r3
 801d564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d566:	889b      	ldrh	r3, [r3, #4]
 801d568:	b29b      	uxth	r3, r3
 801d56a:	429a      	cmp	r2, r3
 801d56c:	d002      	beq.n	801d574 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801d56e:	2300      	movs	r3, #0
 801d570:	623b      	str	r3, [r7, #32]
            break;
 801d572:	e007      	b.n	801d584 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801d574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d576:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801d578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d57a:	681b      	ldr	r3, [r3, #0]
 801d57c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d580:	2b00      	cmp	r3, #0
 801d582:	d1e9      	bne.n	801d558 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801d584:	6a3b      	ldr	r3, [r7, #32]
 801d586:	2b00      	cmp	r3, #0
 801d588:	d022      	beq.n	801d5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801d58a:	68fb      	ldr	r3, [r7, #12]
 801d58c:	685b      	ldr	r3, [r3, #4]
 801d58e:	2b00      	cmp	r3, #0
 801d590:	d106      	bne.n	801d5a0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801d592:	4b15      	ldr	r3, [pc, #84]	; (801d5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d594:	f240 12df 	movw	r2, #479	; 0x1df
 801d598:	4917      	ldr	r1, [pc, #92]	; (801d5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d59a:	4815      	ldr	r0, [pc, #84]	; (801d5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d59c:	f000 fd92 	bl	801e0c4 <iprintf>
          LWIP_ASSERT("sanity check",
 801d5a0:	68fb      	ldr	r3, [r7, #12]
 801d5a2:	685b      	ldr	r3, [r3, #4]
 801d5a4:	685b      	ldr	r3, [r3, #4]
 801d5a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d5a8:	429a      	cmp	r2, r3
 801d5aa:	d106      	bne.n	801d5ba <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801d5ac:	4b0e      	ldr	r3, [pc, #56]	; (801d5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d5ae:	f240 12e1 	movw	r2, #481	; 0x1e1
 801d5b2:	4911      	ldr	r1, [pc, #68]	; (801d5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d5b4:	480e      	ldr	r0, [pc, #56]	; (801d5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d5b6:	f000 fd85 	bl	801e0c4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801d5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5bc:	681b      	ldr	r3, [r3, #0]
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	d006      	beq.n	801d5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801d5c2:	4b09      	ldr	r3, [pc, #36]	; (801d5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d5c4:	f240 12e3 	movw	r2, #483	; 0x1e3
 801d5c8:	490c      	ldr	r1, [pc, #48]	; (801d5fc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801d5ca:	4809      	ldr	r0, [pc, #36]	; (801d5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d5cc:	f000 fd7a 	bl	801e0c4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801d5d0:	6a3b      	ldr	r3, [r7, #32]
 801d5d2:	2b00      	cmp	r3, #0
 801d5d4:	bf14      	ite	ne
 801d5d6:	2301      	movne	r3, #1
 801d5d8:	2300      	moveq	r3, #0
 801d5da:	b2db      	uxtb	r3, r3
 801d5dc:	e000      	b.n	801d5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801d5de:	2300      	movs	r3, #0
}
 801d5e0:	4618      	mov	r0, r3
 801d5e2:	3730      	adds	r7, #48	; 0x30
 801d5e4:	46bd      	mov	sp, r7
 801d5e6:	bd80      	pop	{r7, pc}
 801d5e8:	08021a14 	.word	0x08021a14
 801d5ec:	08021af8 	.word	0x08021af8
 801d5f0:	08021a5c 	.word	0x08021a5c
 801d5f4:	08021b18 	.word	0x08021b18
 801d5f8:	08021b50 	.word	0x08021b50
 801d5fc:	08021b60 	.word	0x08021b60

0801d600 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801d600:	b580      	push	{r7, lr}
 801d602:	b08e      	sub	sp, #56	; 0x38
 801d604:	af00      	add	r7, sp, #0
 801d606:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801d608:	687b      	ldr	r3, [r7, #4]
 801d60a:	685b      	ldr	r3, [r3, #4]
 801d60c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801d60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d610:	781b      	ldrb	r3, [r3, #0]
 801d612:	f003 030f 	and.w	r3, r3, #15
 801d616:	b2db      	uxtb	r3, r3
 801d618:	009b      	lsls	r3, r3, #2
 801d61a:	b2db      	uxtb	r3, r3
 801d61c:	2b14      	cmp	r3, #20
 801d61e:	f040 8167 	bne.w	801d8f0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801d622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d624:	88db      	ldrh	r3, [r3, #6]
 801d626:	b29b      	uxth	r3, r3
 801d628:	4618      	mov	r0, r3
 801d62a:	f7f5 ff27 	bl	801347c <lwip_htons>
 801d62e:	4603      	mov	r3, r0
 801d630:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d634:	b29b      	uxth	r3, r3
 801d636:	00db      	lsls	r3, r3, #3
 801d638:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d63c:	885b      	ldrh	r3, [r3, #2]
 801d63e:	b29b      	uxth	r3, r3
 801d640:	4618      	mov	r0, r3
 801d642:	f7f5 ff1b 	bl	801347c <lwip_htons>
 801d646:	4603      	mov	r3, r0
 801d648:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801d64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d64c:	781b      	ldrb	r3, [r3, #0]
 801d64e:	f003 030f 	and.w	r3, r3, #15
 801d652:	b2db      	uxtb	r3, r3
 801d654:	009b      	lsls	r3, r3, #2
 801d656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801d65a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d65e:	b29b      	uxth	r3, r3
 801d660:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d662:	429a      	cmp	r2, r3
 801d664:	f0c0 8146 	bcc.w	801d8f4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801d668:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d66c:	b29b      	uxth	r3, r3
 801d66e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d670:	1ad3      	subs	r3, r2, r3
 801d672:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801d674:	6878      	ldr	r0, [r7, #4]
 801d676:	f7f7 fb6d 	bl	8014d54 <pbuf_clen>
 801d67a:	4603      	mov	r3, r0
 801d67c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801d67e:	4ba3      	ldr	r3, [pc, #652]	; (801d90c <ip4_reass+0x30c>)
 801d680:	881b      	ldrh	r3, [r3, #0]
 801d682:	461a      	mov	r2, r3
 801d684:	8c3b      	ldrh	r3, [r7, #32]
 801d686:	4413      	add	r3, r2
 801d688:	2b0a      	cmp	r3, #10
 801d68a:	dd10      	ble.n	801d6ae <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d68c:	8c3b      	ldrh	r3, [r7, #32]
 801d68e:	4619      	mov	r1, r3
 801d690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d692:	f7ff fd81 	bl	801d198 <ip_reass_remove_oldest_datagram>
 801d696:	4603      	mov	r3, r0
 801d698:	2b00      	cmp	r3, #0
 801d69a:	f000 812d 	beq.w	801d8f8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801d69e:	4b9b      	ldr	r3, [pc, #620]	; (801d90c <ip4_reass+0x30c>)
 801d6a0:	881b      	ldrh	r3, [r3, #0]
 801d6a2:	461a      	mov	r2, r3
 801d6a4:	8c3b      	ldrh	r3, [r7, #32]
 801d6a6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d6a8:	2b0a      	cmp	r3, #10
 801d6aa:	f300 8125 	bgt.w	801d8f8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d6ae:	4b98      	ldr	r3, [pc, #608]	; (801d910 <ip4_reass+0x310>)
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	633b      	str	r3, [r7, #48]	; 0x30
 801d6b4:	e015      	b.n	801d6e2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801d6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6b8:	695a      	ldr	r2, [r3, #20]
 801d6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6bc:	68db      	ldr	r3, [r3, #12]
 801d6be:	429a      	cmp	r2, r3
 801d6c0:	d10c      	bne.n	801d6dc <ip4_reass+0xdc>
 801d6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6c4:	699a      	ldr	r2, [r3, #24]
 801d6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6c8:	691b      	ldr	r3, [r3, #16]
 801d6ca:	429a      	cmp	r2, r3
 801d6cc:	d106      	bne.n	801d6dc <ip4_reass+0xdc>
 801d6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6d0:	899a      	ldrh	r2, [r3, #12]
 801d6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6d4:	889b      	ldrh	r3, [r3, #4]
 801d6d6:	b29b      	uxth	r3, r3
 801d6d8:	429a      	cmp	r2, r3
 801d6da:	d006      	beq.n	801d6ea <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6de:	681b      	ldr	r3, [r3, #0]
 801d6e0:	633b      	str	r3, [r7, #48]	; 0x30
 801d6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	d1e6      	bne.n	801d6b6 <ip4_reass+0xb6>
 801d6e8:	e000      	b.n	801d6ec <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801d6ea:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801d6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	d109      	bne.n	801d706 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801d6f2:	8c3b      	ldrh	r3, [r7, #32]
 801d6f4:	4619      	mov	r1, r3
 801d6f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d6f8:	f7ff fdb0 	bl	801d25c <ip_reass_enqueue_new_datagram>
 801d6fc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801d6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d700:	2b00      	cmp	r3, #0
 801d702:	d11c      	bne.n	801d73e <ip4_reass+0x13e>
      goto nullreturn;
 801d704:	e0f9      	b.n	801d8fa <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d708:	88db      	ldrh	r3, [r3, #6]
 801d70a:	b29b      	uxth	r3, r3
 801d70c:	4618      	mov	r0, r3
 801d70e:	f7f5 feb5 	bl	801347c <lwip_htons>
 801d712:	4603      	mov	r3, r0
 801d714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d718:	2b00      	cmp	r3, #0
 801d71a:	d110      	bne.n	801d73e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801d71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d71e:	89db      	ldrh	r3, [r3, #14]
 801d720:	4618      	mov	r0, r3
 801d722:	f7f5 feab 	bl	801347c <lwip_htons>
 801d726:	4603      	mov	r3, r0
 801d728:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	d006      	beq.n	801d73e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801d730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d732:	3308      	adds	r3, #8
 801d734:	2214      	movs	r2, #20
 801d736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d738:	4618      	mov	r0, r3
 801d73a:	f000 fcb0 	bl	801e09e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801d73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d740:	88db      	ldrh	r3, [r3, #6]
 801d742:	b29b      	uxth	r3, r3
 801d744:	f003 0320 	and.w	r3, r3, #32
 801d748:	2b00      	cmp	r3, #0
 801d74a:	bf0c      	ite	eq
 801d74c:	2301      	moveq	r3, #1
 801d74e:	2300      	movne	r3, #0
 801d750:	b2db      	uxtb	r3, r3
 801d752:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801d754:	69fb      	ldr	r3, [r7, #28]
 801d756:	2b00      	cmp	r3, #0
 801d758:	d00e      	beq.n	801d778 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801d75a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d75c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d75e:	4413      	add	r3, r2
 801d760:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801d762:	8b7a      	ldrh	r2, [r7, #26]
 801d764:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801d766:	429a      	cmp	r2, r3
 801d768:	f0c0 80a0 	bcc.w	801d8ac <ip4_reass+0x2ac>
 801d76c:	8b7b      	ldrh	r3, [r7, #26]
 801d76e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801d772:	4293      	cmp	r3, r2
 801d774:	f200 809a 	bhi.w	801d8ac <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801d778:	69fa      	ldr	r2, [r7, #28]
 801d77a:	6879      	ldr	r1, [r7, #4]
 801d77c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d77e:	f7ff fdd5 	bl	801d32c <ip_reass_chain_frag_into_datagram_and_validate>
 801d782:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801d784:	697b      	ldr	r3, [r7, #20]
 801d786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d78a:	f000 8091 	beq.w	801d8b0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801d78e:	4b5f      	ldr	r3, [pc, #380]	; (801d90c <ip4_reass+0x30c>)
 801d790:	881a      	ldrh	r2, [r3, #0]
 801d792:	8c3b      	ldrh	r3, [r7, #32]
 801d794:	4413      	add	r3, r2
 801d796:	b29a      	uxth	r2, r3
 801d798:	4b5c      	ldr	r3, [pc, #368]	; (801d90c <ip4_reass+0x30c>)
 801d79a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801d79c:	69fb      	ldr	r3, [r7, #28]
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	d00d      	beq.n	801d7be <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801d7a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d7a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d7a6:	4413      	add	r3, r2
 801d7a8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801d7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7ac:	8a7a      	ldrh	r2, [r7, #18]
 801d7ae:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801d7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7b2:	7f9b      	ldrb	r3, [r3, #30]
 801d7b4:	f043 0301 	orr.w	r3, r3, #1
 801d7b8:	b2da      	uxtb	r2, r3
 801d7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7bc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801d7be:	697b      	ldr	r3, [r7, #20]
 801d7c0:	2b01      	cmp	r3, #1
 801d7c2:	d171      	bne.n	801d8a8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801d7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7c6:	8b9b      	ldrh	r3, [r3, #28]
 801d7c8:	3314      	adds	r3, #20
 801d7ca:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801d7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7ce:	685b      	ldr	r3, [r3, #4]
 801d7d0:	685b      	ldr	r3, [r3, #4]
 801d7d2:	681b      	ldr	r3, [r3, #0]
 801d7d4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801d7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7d8:	685b      	ldr	r3, [r3, #4]
 801d7da:	685b      	ldr	r3, [r3, #4]
 801d7dc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801d7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7e0:	3308      	adds	r3, #8
 801d7e2:	2214      	movs	r2, #20
 801d7e4:	4619      	mov	r1, r3
 801d7e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d7e8:	f000 fc59 	bl	801e09e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801d7ec:	8a3b      	ldrh	r3, [r7, #16]
 801d7ee:	4618      	mov	r0, r3
 801d7f0:	f7f5 fe44 	bl	801347c <lwip_htons>
 801d7f4:	4603      	mov	r3, r0
 801d7f6:	461a      	mov	r2, r3
 801d7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7fa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801d7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7fe:	2200      	movs	r2, #0
 801d800:	719a      	strb	r2, [r3, #6]
 801d802:	2200      	movs	r2, #0
 801d804:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801d806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d808:	2200      	movs	r2, #0
 801d80a:	729a      	strb	r2, [r3, #10]
 801d80c:	2200      	movs	r2, #0
 801d80e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801d810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d812:	685b      	ldr	r3, [r3, #4]
 801d814:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801d816:	e00d      	b.n	801d834 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801d818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d81a:	685b      	ldr	r3, [r3, #4]
 801d81c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801d81e:	2114      	movs	r1, #20
 801d820:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801d822:	f7f7 f983 	bl	8014b2c <pbuf_remove_header>
      pbuf_cat(p, r);
 801d826:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d828:	6878      	ldr	r0, [r7, #4]
 801d82a:	f7f7 fad3 	bl	8014dd4 <pbuf_cat>
      r = iprh->next_pbuf;
 801d82e:	68fb      	ldr	r3, [r7, #12]
 801d830:	681b      	ldr	r3, [r3, #0]
 801d832:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801d834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d836:	2b00      	cmp	r3, #0
 801d838:	d1ee      	bne.n	801d818 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801d83a:	4b35      	ldr	r3, [pc, #212]	; (801d910 <ip4_reass+0x310>)
 801d83c:	681b      	ldr	r3, [r3, #0]
 801d83e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d840:	429a      	cmp	r2, r3
 801d842:	d102      	bne.n	801d84a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801d844:	2300      	movs	r3, #0
 801d846:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d848:	e010      	b.n	801d86c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d84a:	4b31      	ldr	r3, [pc, #196]	; (801d910 <ip4_reass+0x310>)
 801d84c:	681b      	ldr	r3, [r3, #0]
 801d84e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d850:	e007      	b.n	801d862 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801d852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d854:	681b      	ldr	r3, [r3, #0]
 801d856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d858:	429a      	cmp	r2, r3
 801d85a:	d006      	beq.n	801d86a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d85e:	681b      	ldr	r3, [r3, #0]
 801d860:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d864:	2b00      	cmp	r3, #0
 801d866:	d1f4      	bne.n	801d852 <ip4_reass+0x252>
 801d868:	e000      	b.n	801d86c <ip4_reass+0x26c>
          break;
 801d86a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801d86c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d86e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d870:	f7ff fd2e 	bl	801d2d0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801d874:	6878      	ldr	r0, [r7, #4]
 801d876:	f7f7 fa6d 	bl	8014d54 <pbuf_clen>
 801d87a:	4603      	mov	r3, r0
 801d87c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801d87e:	4b23      	ldr	r3, [pc, #140]	; (801d90c <ip4_reass+0x30c>)
 801d880:	881b      	ldrh	r3, [r3, #0]
 801d882:	8c3a      	ldrh	r2, [r7, #32]
 801d884:	429a      	cmp	r2, r3
 801d886:	d906      	bls.n	801d896 <ip4_reass+0x296>
 801d888:	4b22      	ldr	r3, [pc, #136]	; (801d914 <ip4_reass+0x314>)
 801d88a:	f240 229b 	movw	r2, #667	; 0x29b
 801d88e:	4922      	ldr	r1, [pc, #136]	; (801d918 <ip4_reass+0x318>)
 801d890:	4822      	ldr	r0, [pc, #136]	; (801d91c <ip4_reass+0x31c>)
 801d892:	f000 fc17 	bl	801e0c4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801d896:	4b1d      	ldr	r3, [pc, #116]	; (801d90c <ip4_reass+0x30c>)
 801d898:	881a      	ldrh	r2, [r3, #0]
 801d89a:	8c3b      	ldrh	r3, [r7, #32]
 801d89c:	1ad3      	subs	r3, r2, r3
 801d89e:	b29a      	uxth	r2, r3
 801d8a0:	4b1a      	ldr	r3, [pc, #104]	; (801d90c <ip4_reass+0x30c>)
 801d8a2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801d8a4:	687b      	ldr	r3, [r7, #4]
 801d8a6:	e02c      	b.n	801d902 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801d8a8:	2300      	movs	r3, #0
 801d8aa:	e02a      	b.n	801d902 <ip4_reass+0x302>

nullreturn_ipr:
 801d8ac:	bf00      	nop
 801d8ae:	e000      	b.n	801d8b2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801d8b0:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801d8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8b4:	2b00      	cmp	r3, #0
 801d8b6:	d106      	bne.n	801d8c6 <ip4_reass+0x2c6>
 801d8b8:	4b16      	ldr	r3, [pc, #88]	; (801d914 <ip4_reass+0x314>)
 801d8ba:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801d8be:	4918      	ldr	r1, [pc, #96]	; (801d920 <ip4_reass+0x320>)
 801d8c0:	4816      	ldr	r0, [pc, #88]	; (801d91c <ip4_reass+0x31c>)
 801d8c2:	f000 fbff 	bl	801e0c4 <iprintf>
  if (ipr->p == NULL) {
 801d8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8c8:	685b      	ldr	r3, [r3, #4]
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	d114      	bne.n	801d8f8 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801d8ce:	4b10      	ldr	r3, [pc, #64]	; (801d910 <ip4_reass+0x310>)
 801d8d0:	681b      	ldr	r3, [r3, #0]
 801d8d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d8d4:	429a      	cmp	r2, r3
 801d8d6:	d006      	beq.n	801d8e6 <ip4_reass+0x2e6>
 801d8d8:	4b0e      	ldr	r3, [pc, #56]	; (801d914 <ip4_reass+0x314>)
 801d8da:	f240 22ab 	movw	r2, #683	; 0x2ab
 801d8de:	4911      	ldr	r1, [pc, #68]	; (801d924 <ip4_reass+0x324>)
 801d8e0:	480e      	ldr	r0, [pc, #56]	; (801d91c <ip4_reass+0x31c>)
 801d8e2:	f000 fbef 	bl	801e0c4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801d8e6:	2100      	movs	r1, #0
 801d8e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d8ea:	f7ff fcf1 	bl	801d2d0 <ip_reass_dequeue_datagram>
 801d8ee:	e004      	b.n	801d8fa <ip4_reass+0x2fa>
    goto nullreturn;
 801d8f0:	bf00      	nop
 801d8f2:	e002      	b.n	801d8fa <ip4_reass+0x2fa>
    goto nullreturn;
 801d8f4:	bf00      	nop
 801d8f6:	e000      	b.n	801d8fa <ip4_reass+0x2fa>
  }

nullreturn:
 801d8f8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801d8fa:	6878      	ldr	r0, [r7, #4]
 801d8fc:	f7f7 f99c 	bl	8014c38 <pbuf_free>
  return NULL;
 801d900:	2300      	movs	r3, #0
}
 801d902:	4618      	mov	r0, r3
 801d904:	3738      	adds	r7, #56	; 0x38
 801d906:	46bd      	mov	sp, r7
 801d908:	bd80      	pop	{r7, pc}
 801d90a:	bf00      	nop
 801d90c:	20004660 	.word	0x20004660
 801d910:	2000465c 	.word	0x2000465c
 801d914:	08021a14 	.word	0x08021a14
 801d918:	08021b84 	.word	0x08021b84
 801d91c:	08021a5c 	.word	0x08021a5c
 801d920:	08021ba0 	.word	0x08021ba0
 801d924:	08021bac 	.word	0x08021bac

0801d928 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801d928:	b580      	push	{r7, lr}
 801d92a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801d92c:	2005      	movs	r0, #5
 801d92e:	f7f6 fa91 	bl	8013e54 <memp_malloc>
 801d932:	4603      	mov	r3, r0
}
 801d934:	4618      	mov	r0, r3
 801d936:	bd80      	pop	{r7, pc}

0801d938 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801d938:	b580      	push	{r7, lr}
 801d93a:	b082      	sub	sp, #8
 801d93c:	af00      	add	r7, sp, #0
 801d93e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	2b00      	cmp	r3, #0
 801d944:	d106      	bne.n	801d954 <ip_frag_free_pbuf_custom_ref+0x1c>
 801d946:	4b07      	ldr	r3, [pc, #28]	; (801d964 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801d948:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801d94c:	4906      	ldr	r1, [pc, #24]	; (801d968 <ip_frag_free_pbuf_custom_ref+0x30>)
 801d94e:	4807      	ldr	r0, [pc, #28]	; (801d96c <ip_frag_free_pbuf_custom_ref+0x34>)
 801d950:	f000 fbb8 	bl	801e0c4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801d954:	6879      	ldr	r1, [r7, #4]
 801d956:	2005      	movs	r0, #5
 801d958:	f7f6 face 	bl	8013ef8 <memp_free>
}
 801d95c:	bf00      	nop
 801d95e:	3708      	adds	r7, #8
 801d960:	46bd      	mov	sp, r7
 801d962:	bd80      	pop	{r7, pc}
 801d964:	08021a14 	.word	0x08021a14
 801d968:	08021bcc 	.word	0x08021bcc
 801d96c:	08021a5c 	.word	0x08021a5c

0801d970 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801d970:	b580      	push	{r7, lr}
 801d972:	b084      	sub	sp, #16
 801d974:	af00      	add	r7, sp, #0
 801d976:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801d978:	687b      	ldr	r3, [r7, #4]
 801d97a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801d97c:	68fb      	ldr	r3, [r7, #12]
 801d97e:	2b00      	cmp	r3, #0
 801d980:	d106      	bne.n	801d990 <ipfrag_free_pbuf_custom+0x20>
 801d982:	4b11      	ldr	r3, [pc, #68]	; (801d9c8 <ipfrag_free_pbuf_custom+0x58>)
 801d984:	f240 22ce 	movw	r2, #718	; 0x2ce
 801d988:	4910      	ldr	r1, [pc, #64]	; (801d9cc <ipfrag_free_pbuf_custom+0x5c>)
 801d98a:	4811      	ldr	r0, [pc, #68]	; (801d9d0 <ipfrag_free_pbuf_custom+0x60>)
 801d98c:	f000 fb9a 	bl	801e0c4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801d990:	68fa      	ldr	r2, [r7, #12]
 801d992:	687b      	ldr	r3, [r7, #4]
 801d994:	429a      	cmp	r2, r3
 801d996:	d006      	beq.n	801d9a6 <ipfrag_free_pbuf_custom+0x36>
 801d998:	4b0b      	ldr	r3, [pc, #44]	; (801d9c8 <ipfrag_free_pbuf_custom+0x58>)
 801d99a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801d99e:	490d      	ldr	r1, [pc, #52]	; (801d9d4 <ipfrag_free_pbuf_custom+0x64>)
 801d9a0:	480b      	ldr	r0, [pc, #44]	; (801d9d0 <ipfrag_free_pbuf_custom+0x60>)
 801d9a2:	f000 fb8f 	bl	801e0c4 <iprintf>
  if (pcr->original != NULL) {
 801d9a6:	68fb      	ldr	r3, [r7, #12]
 801d9a8:	695b      	ldr	r3, [r3, #20]
 801d9aa:	2b00      	cmp	r3, #0
 801d9ac:	d004      	beq.n	801d9b8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801d9ae:	68fb      	ldr	r3, [r7, #12]
 801d9b0:	695b      	ldr	r3, [r3, #20]
 801d9b2:	4618      	mov	r0, r3
 801d9b4:	f7f7 f940 	bl	8014c38 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801d9b8:	68f8      	ldr	r0, [r7, #12]
 801d9ba:	f7ff ffbd 	bl	801d938 <ip_frag_free_pbuf_custom_ref>
}
 801d9be:	bf00      	nop
 801d9c0:	3710      	adds	r7, #16
 801d9c2:	46bd      	mov	sp, r7
 801d9c4:	bd80      	pop	{r7, pc}
 801d9c6:	bf00      	nop
 801d9c8:	08021a14 	.word	0x08021a14
 801d9cc:	08021bd8 	.word	0x08021bd8
 801d9d0:	08021a5c 	.word	0x08021a5c
 801d9d4:	08021be4 	.word	0x08021be4

0801d9d8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801d9d8:	b580      	push	{r7, lr}
 801d9da:	b094      	sub	sp, #80	; 0x50
 801d9dc:	af02      	add	r7, sp, #8
 801d9de:	60f8      	str	r0, [r7, #12]
 801d9e0:	60b9      	str	r1, [r7, #8]
 801d9e2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801d9e4:	2300      	movs	r3, #0
 801d9e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801d9ea:	68bb      	ldr	r3, [r7, #8]
 801d9ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d9ee:	3b14      	subs	r3, #20
 801d9f0:	2b00      	cmp	r3, #0
 801d9f2:	da00      	bge.n	801d9f6 <ip4_frag+0x1e>
 801d9f4:	3307      	adds	r3, #7
 801d9f6:	10db      	asrs	r3, r3, #3
 801d9f8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801d9fa:	2314      	movs	r3, #20
 801d9fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801d9fe:	68fb      	ldr	r3, [r7, #12]
 801da00:	685b      	ldr	r3, [r3, #4]
 801da02:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801da04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da06:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801da08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da0a:	781b      	ldrb	r3, [r3, #0]
 801da0c:	f003 030f 	and.w	r3, r3, #15
 801da10:	b2db      	uxtb	r3, r3
 801da12:	009b      	lsls	r3, r3, #2
 801da14:	b2db      	uxtb	r3, r3
 801da16:	2b14      	cmp	r3, #20
 801da18:	d002      	beq.n	801da20 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801da1a:	f06f 0305 	mvn.w	r3, #5
 801da1e:	e10f      	b.n	801dc40 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801da20:	68fb      	ldr	r3, [r7, #12]
 801da22:	895b      	ldrh	r3, [r3, #10]
 801da24:	2b13      	cmp	r3, #19
 801da26:	d809      	bhi.n	801da3c <ip4_frag+0x64>
 801da28:	4b87      	ldr	r3, [pc, #540]	; (801dc48 <ip4_frag+0x270>)
 801da2a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801da2e:	4987      	ldr	r1, [pc, #540]	; (801dc4c <ip4_frag+0x274>)
 801da30:	4887      	ldr	r0, [pc, #540]	; (801dc50 <ip4_frag+0x278>)
 801da32:	f000 fb47 	bl	801e0c4 <iprintf>
 801da36:	f06f 0305 	mvn.w	r3, #5
 801da3a:	e101      	b.n	801dc40 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801da3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da3e:	88db      	ldrh	r3, [r3, #6]
 801da40:	b29b      	uxth	r3, r3
 801da42:	4618      	mov	r0, r3
 801da44:	f7f5 fd1a 	bl	801347c <lwip_htons>
 801da48:	4603      	mov	r3, r0
 801da4a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801da4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801da4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801da52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801da56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801da58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801da5c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801da5e:	68fb      	ldr	r3, [r7, #12]
 801da60:	891b      	ldrh	r3, [r3, #8]
 801da62:	3b14      	subs	r3, #20
 801da64:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801da68:	e0e0      	b.n	801dc2c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801da6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801da6c:	00db      	lsls	r3, r3, #3
 801da6e:	b29b      	uxth	r3, r3
 801da70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801da74:	4293      	cmp	r3, r2
 801da76:	bf28      	it	cs
 801da78:	4613      	movcs	r3, r2
 801da7a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801da7c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801da80:	2114      	movs	r1, #20
 801da82:	200e      	movs	r0, #14
 801da84:	f7f6 fdf8 	bl	8014678 <pbuf_alloc>
 801da88:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801da8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da8c:	2b00      	cmp	r3, #0
 801da8e:	f000 80d4 	beq.w	801dc3a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801da92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da94:	895b      	ldrh	r3, [r3, #10]
 801da96:	2b13      	cmp	r3, #19
 801da98:	d806      	bhi.n	801daa8 <ip4_frag+0xd0>
 801da9a:	4b6b      	ldr	r3, [pc, #428]	; (801dc48 <ip4_frag+0x270>)
 801da9c:	f240 3225 	movw	r2, #805	; 0x325
 801daa0:	496c      	ldr	r1, [pc, #432]	; (801dc54 <ip4_frag+0x27c>)
 801daa2:	486b      	ldr	r0, [pc, #428]	; (801dc50 <ip4_frag+0x278>)
 801daa4:	f000 fb0e 	bl	801e0c4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801daa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daaa:	685b      	ldr	r3, [r3, #4]
 801daac:	2214      	movs	r2, #20
 801daae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801dab0:	4618      	mov	r0, r3
 801dab2:	f000 faf4 	bl	801e09e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801dab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dab8:	685b      	ldr	r3, [r3, #4]
 801daba:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801dabc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801dabe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801dac2:	e064      	b.n	801db8e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801dac4:	68fb      	ldr	r3, [r7, #12]
 801dac6:	895a      	ldrh	r2, [r3, #10]
 801dac8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801daca:	1ad3      	subs	r3, r2, r3
 801dacc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801dace:	68fb      	ldr	r3, [r7, #12]
 801dad0:	895b      	ldrh	r3, [r3, #10]
 801dad2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801dad4:	429a      	cmp	r2, r3
 801dad6:	d906      	bls.n	801dae6 <ip4_frag+0x10e>
 801dad8:	4b5b      	ldr	r3, [pc, #364]	; (801dc48 <ip4_frag+0x270>)
 801dada:	f240 322d 	movw	r2, #813	; 0x32d
 801dade:	495e      	ldr	r1, [pc, #376]	; (801dc58 <ip4_frag+0x280>)
 801dae0:	485b      	ldr	r0, [pc, #364]	; (801dc50 <ip4_frag+0x278>)
 801dae2:	f000 faef 	bl	801e0c4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801dae6:	8bfa      	ldrh	r2, [r7, #30]
 801dae8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801daec:	4293      	cmp	r3, r2
 801daee:	bf28      	it	cs
 801daf0:	4613      	movcs	r3, r2
 801daf2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801daf6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801dafa:	2b00      	cmp	r3, #0
 801dafc:	d105      	bne.n	801db0a <ip4_frag+0x132>
        poff = 0;
 801dafe:	2300      	movs	r3, #0
 801db00:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801db02:	68fb      	ldr	r3, [r7, #12]
 801db04:	681b      	ldr	r3, [r3, #0]
 801db06:	60fb      	str	r3, [r7, #12]
        continue;
 801db08:	e041      	b.n	801db8e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801db0a:	f7ff ff0d 	bl	801d928 <ip_frag_alloc_pbuf_custom_ref>
 801db0e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801db10:	69bb      	ldr	r3, [r7, #24]
 801db12:	2b00      	cmp	r3, #0
 801db14:	d103      	bne.n	801db1e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801db16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801db18:	f7f7 f88e 	bl	8014c38 <pbuf_free>
        goto memerr;
 801db1c:	e08e      	b.n	801dc3c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801db1e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801db20:	68fb      	ldr	r3, [r7, #12]
 801db22:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801db24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801db26:	4413      	add	r3, r2
 801db28:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801db2c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801db30:	9201      	str	r2, [sp, #4]
 801db32:	9300      	str	r3, [sp, #0]
 801db34:	4603      	mov	r3, r0
 801db36:	2241      	movs	r2, #65	; 0x41
 801db38:	2000      	movs	r0, #0
 801db3a:	f7f6 fec3 	bl	80148c4 <pbuf_alloced_custom>
 801db3e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801db40:	697b      	ldr	r3, [r7, #20]
 801db42:	2b00      	cmp	r3, #0
 801db44:	d106      	bne.n	801db54 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801db46:	69b8      	ldr	r0, [r7, #24]
 801db48:	f7ff fef6 	bl	801d938 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801db4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801db4e:	f7f7 f873 	bl	8014c38 <pbuf_free>
        goto memerr;
 801db52:	e073      	b.n	801dc3c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 801db54:	68f8      	ldr	r0, [r7, #12]
 801db56:	f7f7 f915 	bl	8014d84 <pbuf_ref>
      pcr->original = p;
 801db5a:	69bb      	ldr	r3, [r7, #24]
 801db5c:	68fa      	ldr	r2, [r7, #12]
 801db5e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801db60:	69bb      	ldr	r3, [r7, #24]
 801db62:	4a3e      	ldr	r2, [pc, #248]	; (801dc5c <ip4_frag+0x284>)
 801db64:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801db66:	6979      	ldr	r1, [r7, #20]
 801db68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801db6a:	f7f7 f933 	bl	8014dd4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801db6e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801db72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801db76:	1ad3      	subs	r3, r2, r3
 801db78:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801db7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801db80:	2b00      	cmp	r3, #0
 801db82:	d004      	beq.n	801db8e <ip4_frag+0x1b6>
        poff = 0;
 801db84:	2300      	movs	r3, #0
 801db86:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801db88:	68fb      	ldr	r3, [r7, #12]
 801db8a:	681b      	ldr	r3, [r3, #0]
 801db8c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801db8e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801db92:	2b00      	cmp	r3, #0
 801db94:	d196      	bne.n	801dac4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801db96:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801db98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801db9c:	4413      	add	r3, r2
 801db9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801dba0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801dba4:	68bb      	ldr	r3, [r7, #8]
 801dba6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801dba8:	3b14      	subs	r3, #20
 801dbaa:	429a      	cmp	r2, r3
 801dbac:	bfd4      	ite	le
 801dbae:	2301      	movle	r3, #1
 801dbb0:	2300      	movgt	r3, #0
 801dbb2:	b2db      	uxtb	r3, r3
 801dbb4:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801dbb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801dbba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dbbe:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801dbc0:	6a3b      	ldr	r3, [r7, #32]
 801dbc2:	2b00      	cmp	r3, #0
 801dbc4:	d002      	beq.n	801dbcc <ip4_frag+0x1f4>
 801dbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbc8:	2b00      	cmp	r3, #0
 801dbca:	d003      	beq.n	801dbd4 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801dbcc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dbce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801dbd2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801dbd4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dbd6:	4618      	mov	r0, r3
 801dbd8:	f7f5 fc50 	bl	801347c <lwip_htons>
 801dbdc:	4603      	mov	r3, r0
 801dbde:	461a      	mov	r2, r3
 801dbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbe2:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801dbe4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801dbe6:	3314      	adds	r3, #20
 801dbe8:	b29b      	uxth	r3, r3
 801dbea:	4618      	mov	r0, r3
 801dbec:	f7f5 fc46 	bl	801347c <lwip_htons>
 801dbf0:	4603      	mov	r3, r0
 801dbf2:	461a      	mov	r2, r3
 801dbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbf6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801dbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbfa:	2200      	movs	r2, #0
 801dbfc:	729a      	strb	r2, [r3, #10]
 801dbfe:	2200      	movs	r2, #0
 801dc00:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801dc02:	68bb      	ldr	r3, [r7, #8]
 801dc04:	695b      	ldr	r3, [r3, #20]
 801dc06:	687a      	ldr	r2, [r7, #4]
 801dc08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801dc0a:	68b8      	ldr	r0, [r7, #8]
 801dc0c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801dc0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dc10:	f7f7 f812 	bl	8014c38 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801dc14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801dc18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801dc1a:	1ad3      	subs	r3, r2, r3
 801dc1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801dc20:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801dc24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801dc26:	4413      	add	r3, r2
 801dc28:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801dc2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dc30:	2b00      	cmp	r3, #0
 801dc32:	f47f af1a 	bne.w	801da6a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801dc36:	2300      	movs	r3, #0
 801dc38:	e002      	b.n	801dc40 <ip4_frag+0x268>
      goto memerr;
 801dc3a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801dc3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801dc40:	4618      	mov	r0, r3
 801dc42:	3748      	adds	r7, #72	; 0x48
 801dc44:	46bd      	mov	sp, r7
 801dc46:	bd80      	pop	{r7, pc}
 801dc48:	08021a14 	.word	0x08021a14
 801dc4c:	08021bf0 	.word	0x08021bf0
 801dc50:	08021a5c 	.word	0x08021a5c
 801dc54:	08021c0c 	.word	0x08021c0c
 801dc58:	08021c2c 	.word	0x08021c2c
 801dc5c:	0801d971 	.word	0x0801d971

0801dc60 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801dc60:	b580      	push	{r7, lr}
 801dc62:	b086      	sub	sp, #24
 801dc64:	af00      	add	r7, sp, #0
 801dc66:	6078      	str	r0, [r7, #4]
 801dc68:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801dc6a:	230e      	movs	r3, #14
 801dc6c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801dc6e:	687b      	ldr	r3, [r7, #4]
 801dc70:	895b      	ldrh	r3, [r3, #10]
 801dc72:	2b0e      	cmp	r3, #14
 801dc74:	d96e      	bls.n	801dd54 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801dc76:	687b      	ldr	r3, [r7, #4]
 801dc78:	7bdb      	ldrb	r3, [r3, #15]
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	d106      	bne.n	801dc8c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801dc7e:	683b      	ldr	r3, [r7, #0]
 801dc80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801dc84:	3301      	adds	r3, #1
 801dc86:	b2da      	uxtb	r2, r3
 801dc88:	687b      	ldr	r3, [r7, #4]
 801dc8a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	685b      	ldr	r3, [r3, #4]
 801dc90:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801dc92:	693b      	ldr	r3, [r7, #16]
 801dc94:	7b1a      	ldrb	r2, [r3, #12]
 801dc96:	7b5b      	ldrb	r3, [r3, #13]
 801dc98:	021b      	lsls	r3, r3, #8
 801dc9a:	4313      	orrs	r3, r2
 801dc9c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801dc9e:	693b      	ldr	r3, [r7, #16]
 801dca0:	781b      	ldrb	r3, [r3, #0]
 801dca2:	f003 0301 	and.w	r3, r3, #1
 801dca6:	2b00      	cmp	r3, #0
 801dca8:	d023      	beq.n	801dcf2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801dcaa:	693b      	ldr	r3, [r7, #16]
 801dcac:	781b      	ldrb	r3, [r3, #0]
 801dcae:	2b01      	cmp	r3, #1
 801dcb0:	d10f      	bne.n	801dcd2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801dcb2:	693b      	ldr	r3, [r7, #16]
 801dcb4:	785b      	ldrb	r3, [r3, #1]
 801dcb6:	2b00      	cmp	r3, #0
 801dcb8:	d11b      	bne.n	801dcf2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801dcba:	693b      	ldr	r3, [r7, #16]
 801dcbc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801dcbe:	2b5e      	cmp	r3, #94	; 0x5e
 801dcc0:	d117      	bne.n	801dcf2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801dcc2:	687b      	ldr	r3, [r7, #4]
 801dcc4:	7b5b      	ldrb	r3, [r3, #13]
 801dcc6:	f043 0310 	orr.w	r3, r3, #16
 801dcca:	b2da      	uxtb	r2, r3
 801dccc:	687b      	ldr	r3, [r7, #4]
 801dcce:	735a      	strb	r2, [r3, #13]
 801dcd0:	e00f      	b.n	801dcf2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801dcd2:	693b      	ldr	r3, [r7, #16]
 801dcd4:	2206      	movs	r2, #6
 801dcd6:	4928      	ldr	r1, [pc, #160]	; (801dd78 <ethernet_input+0x118>)
 801dcd8:	4618      	mov	r0, r3
 801dcda:	f000 f9d1 	bl	801e080 <memcmp>
 801dcde:	4603      	mov	r3, r0
 801dce0:	2b00      	cmp	r3, #0
 801dce2:	d106      	bne.n	801dcf2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801dce4:	687b      	ldr	r3, [r7, #4]
 801dce6:	7b5b      	ldrb	r3, [r3, #13]
 801dce8:	f043 0308 	orr.w	r3, r3, #8
 801dcec:	b2da      	uxtb	r2, r3
 801dcee:	687b      	ldr	r3, [r7, #4]
 801dcf0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801dcf2:	89fb      	ldrh	r3, [r7, #14]
 801dcf4:	2b08      	cmp	r3, #8
 801dcf6:	d003      	beq.n	801dd00 <ethernet_input+0xa0>
 801dcf8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801dcfc:	d014      	beq.n	801dd28 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801dcfe:	e032      	b.n	801dd66 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801dd00:	683b      	ldr	r3, [r7, #0]
 801dd02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dd06:	f003 0308 	and.w	r3, r3, #8
 801dd0a:	2b00      	cmp	r3, #0
 801dd0c:	d024      	beq.n	801dd58 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801dd0e:	8afb      	ldrh	r3, [r7, #22]
 801dd10:	4619      	mov	r1, r3
 801dd12:	6878      	ldr	r0, [r7, #4]
 801dd14:	f7f6 ff0a 	bl	8014b2c <pbuf_remove_header>
 801dd18:	4603      	mov	r3, r0
 801dd1a:	2b00      	cmp	r3, #0
 801dd1c:	d11e      	bne.n	801dd5c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801dd1e:	6839      	ldr	r1, [r7, #0]
 801dd20:	6878      	ldr	r0, [r7, #4]
 801dd22:	f7fe ff2d 	bl	801cb80 <ip4_input>
      break;
 801dd26:	e013      	b.n	801dd50 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801dd28:	683b      	ldr	r3, [r7, #0]
 801dd2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dd2e:	f003 0308 	and.w	r3, r3, #8
 801dd32:	2b00      	cmp	r3, #0
 801dd34:	d014      	beq.n	801dd60 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801dd36:	8afb      	ldrh	r3, [r7, #22]
 801dd38:	4619      	mov	r1, r3
 801dd3a:	6878      	ldr	r0, [r7, #4]
 801dd3c:	f7f6 fef6 	bl	8014b2c <pbuf_remove_header>
 801dd40:	4603      	mov	r3, r0
 801dd42:	2b00      	cmp	r3, #0
 801dd44:	d10e      	bne.n	801dd64 <ethernet_input+0x104>
        etharp_input(p, netif);
 801dd46:	6839      	ldr	r1, [r7, #0]
 801dd48:	6878      	ldr	r0, [r7, #4]
 801dd4a:	f7fe f8cd 	bl	801bee8 <etharp_input>
      break;
 801dd4e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801dd50:	2300      	movs	r3, #0
 801dd52:	e00c      	b.n	801dd6e <ethernet_input+0x10e>
    goto free_and_return;
 801dd54:	bf00      	nop
 801dd56:	e006      	b.n	801dd66 <ethernet_input+0x106>
        goto free_and_return;
 801dd58:	bf00      	nop
 801dd5a:	e004      	b.n	801dd66 <ethernet_input+0x106>
        goto free_and_return;
 801dd5c:	bf00      	nop
 801dd5e:	e002      	b.n	801dd66 <ethernet_input+0x106>
        goto free_and_return;
 801dd60:	bf00      	nop
 801dd62:	e000      	b.n	801dd66 <ethernet_input+0x106>
        goto free_and_return;
 801dd64:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801dd66:	6878      	ldr	r0, [r7, #4]
 801dd68:	f7f6 ff66 	bl	8014c38 <pbuf_free>
  return ERR_OK;
 801dd6c:	2300      	movs	r3, #0
}
 801dd6e:	4618      	mov	r0, r3
 801dd70:	3718      	adds	r7, #24
 801dd72:	46bd      	mov	sp, r7
 801dd74:	bd80      	pop	{r7, pc}
 801dd76:	bf00      	nop
 801dd78:	08032944 	.word	0x08032944

0801dd7c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801dd7c:	b580      	push	{r7, lr}
 801dd7e:	b086      	sub	sp, #24
 801dd80:	af00      	add	r7, sp, #0
 801dd82:	60f8      	str	r0, [r7, #12]
 801dd84:	60b9      	str	r1, [r7, #8]
 801dd86:	607a      	str	r2, [r7, #4]
 801dd88:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801dd8a:	8c3b      	ldrh	r3, [r7, #32]
 801dd8c:	4618      	mov	r0, r3
 801dd8e:	f7f5 fb75 	bl	801347c <lwip_htons>
 801dd92:	4603      	mov	r3, r0
 801dd94:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801dd96:	210e      	movs	r1, #14
 801dd98:	68b8      	ldr	r0, [r7, #8]
 801dd9a:	f7f6 feb7 	bl	8014b0c <pbuf_add_header>
 801dd9e:	4603      	mov	r3, r0
 801dda0:	2b00      	cmp	r3, #0
 801dda2:	d125      	bne.n	801ddf0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801dda4:	68bb      	ldr	r3, [r7, #8]
 801dda6:	685b      	ldr	r3, [r3, #4]
 801dda8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ddaa:	693b      	ldr	r3, [r7, #16]
 801ddac:	8afa      	ldrh	r2, [r7, #22]
 801ddae:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ddb0:	693b      	ldr	r3, [r7, #16]
 801ddb2:	2206      	movs	r2, #6
 801ddb4:	6839      	ldr	r1, [r7, #0]
 801ddb6:	4618      	mov	r0, r3
 801ddb8:	f000 f971 	bl	801e09e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ddbc:	693b      	ldr	r3, [r7, #16]
 801ddbe:	3306      	adds	r3, #6
 801ddc0:	2206      	movs	r2, #6
 801ddc2:	6879      	ldr	r1, [r7, #4]
 801ddc4:	4618      	mov	r0, r3
 801ddc6:	f000 f96a 	bl	801e09e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ddca:	68fb      	ldr	r3, [r7, #12]
 801ddcc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801ddd0:	2b06      	cmp	r3, #6
 801ddd2:	d006      	beq.n	801dde2 <ethernet_output+0x66>
 801ddd4:	4b0a      	ldr	r3, [pc, #40]	; (801de00 <ethernet_output+0x84>)
 801ddd6:	f240 1233 	movw	r2, #307	; 0x133
 801ddda:	490a      	ldr	r1, [pc, #40]	; (801de04 <ethernet_output+0x88>)
 801dddc:	480a      	ldr	r0, [pc, #40]	; (801de08 <ethernet_output+0x8c>)
 801ddde:	f000 f971 	bl	801e0c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801dde2:	68fb      	ldr	r3, [r7, #12]
 801dde4:	699b      	ldr	r3, [r3, #24]
 801dde6:	68b9      	ldr	r1, [r7, #8]
 801dde8:	68f8      	ldr	r0, [r7, #12]
 801ddea:	4798      	blx	r3
 801ddec:	4603      	mov	r3, r0
 801ddee:	e002      	b.n	801ddf6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801ddf0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801ddf2:	f06f 0301 	mvn.w	r3, #1
}
 801ddf6:	4618      	mov	r0, r3
 801ddf8:	3718      	adds	r7, #24
 801ddfa:	46bd      	mov	sp, r7
 801ddfc:	bd80      	pop	{r7, pc}
 801ddfe:	bf00      	nop
 801de00:	08021c3c 	.word	0x08021c3c
 801de04:	08021c74 	.word	0x08021c74
 801de08:	08021ca8 	.word	0x08021ca8

0801de0c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801de0c:	b580      	push	{r7, lr}
 801de0e:	b086      	sub	sp, #24
 801de10:	af00      	add	r7, sp, #0
 801de12:	6078      	str	r0, [r7, #4]
 801de14:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801de16:	683b      	ldr	r3, [r7, #0]
 801de18:	60bb      	str	r3, [r7, #8]
 801de1a:	2304      	movs	r3, #4
 801de1c:	60fb      	str	r3, [r7, #12]
 801de1e:	2300      	movs	r3, #0
 801de20:	613b      	str	r3, [r7, #16]
 801de22:	2300      	movs	r3, #0
 801de24:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801de26:	f107 0308 	add.w	r3, r7, #8
 801de2a:	2100      	movs	r1, #0
 801de2c:	4618      	mov	r0, r3
 801de2e:	f7f1 fe3d 	bl	800faac <osMessageCreate>
 801de32:	4602      	mov	r2, r0
 801de34:	687b      	ldr	r3, [r7, #4]
 801de36:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801de38:	687b      	ldr	r3, [r7, #4]
 801de3a:	681b      	ldr	r3, [r3, #0]
 801de3c:	2b00      	cmp	r3, #0
 801de3e:	d102      	bne.n	801de46 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801de40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801de44:	e000      	b.n	801de48 <sys_mbox_new+0x3c>

  return ERR_OK;
 801de46:	2300      	movs	r3, #0
}
 801de48:	4618      	mov	r0, r3
 801de4a:	3718      	adds	r7, #24
 801de4c:	46bd      	mov	sp, r7
 801de4e:	bd80      	pop	{r7, pc}

0801de50 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801de50:	b580      	push	{r7, lr}
 801de52:	b084      	sub	sp, #16
 801de54:	af00      	add	r7, sp, #0
 801de56:	6078      	str	r0, [r7, #4]
 801de58:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801de5a:	687b      	ldr	r3, [r7, #4]
 801de5c:	681b      	ldr	r3, [r3, #0]
 801de5e:	6839      	ldr	r1, [r7, #0]
 801de60:	2200      	movs	r2, #0
 801de62:	4618      	mov	r0, r3
 801de64:	f7f1 fe4c 	bl	800fb00 <osMessagePut>
 801de68:	4603      	mov	r3, r0
 801de6a:	2b00      	cmp	r3, #0
 801de6c:	d102      	bne.n	801de74 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801de6e:	2300      	movs	r3, #0
 801de70:	73fb      	strb	r3, [r7, #15]
 801de72:	e001      	b.n	801de78 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801de74:	23ff      	movs	r3, #255	; 0xff
 801de76:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801de78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801de7c:	4618      	mov	r0, r3
 801de7e:	3710      	adds	r7, #16
 801de80:	46bd      	mov	sp, r7
 801de82:	bd80      	pop	{r7, pc}

0801de84 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801de84:	b580      	push	{r7, lr}
 801de86:	b08c      	sub	sp, #48	; 0x30
 801de88:	af00      	add	r7, sp, #0
 801de8a:	61f8      	str	r0, [r7, #28]
 801de8c:	61b9      	str	r1, [r7, #24]
 801de8e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801de90:	f7f1 fc47 	bl	800f722 <osKernelSysTick>
 801de94:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801de96:	697b      	ldr	r3, [r7, #20]
 801de98:	2b00      	cmp	r3, #0
 801de9a:	d017      	beq.n	801decc <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801de9c:	69fb      	ldr	r3, [r7, #28]
 801de9e:	6819      	ldr	r1, [r3, #0]
 801dea0:	f107 0320 	add.w	r3, r7, #32
 801dea4:	697a      	ldr	r2, [r7, #20]
 801dea6:	4618      	mov	r0, r3
 801dea8:	f7f1 fe6a 	bl	800fb80 <osMessageGet>

    if(event.status == osEventMessage)
 801deac:	6a3b      	ldr	r3, [r7, #32]
 801deae:	2b10      	cmp	r3, #16
 801deb0:	d109      	bne.n	801dec6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801deb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801deb4:	461a      	mov	r2, r3
 801deb6:	69bb      	ldr	r3, [r7, #24]
 801deb8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801deba:	f7f1 fc32 	bl	800f722 <osKernelSysTick>
 801debe:	4602      	mov	r2, r0
 801dec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dec2:	1ad3      	subs	r3, r2, r3
 801dec4:	e019      	b.n	801defa <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801dec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801deca:	e016      	b.n	801defa <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801decc:	69fb      	ldr	r3, [r7, #28]
 801dece:	6819      	ldr	r1, [r3, #0]
 801ded0:	463b      	mov	r3, r7
 801ded2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ded6:	4618      	mov	r0, r3
 801ded8:	f7f1 fe52 	bl	800fb80 <osMessageGet>
 801dedc:	f107 0320 	add.w	r3, r7, #32
 801dee0:	463a      	mov	r2, r7
 801dee2:	ca07      	ldmia	r2, {r0, r1, r2}
 801dee4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801dee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801deea:	461a      	mov	r2, r3
 801deec:	69bb      	ldr	r3, [r7, #24]
 801deee:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801def0:	f7f1 fc17 	bl	800f722 <osKernelSysTick>
 801def4:	4602      	mov	r2, r0
 801def6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801def8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801defa:	4618      	mov	r0, r3
 801defc:	3730      	adds	r7, #48	; 0x30
 801defe:	46bd      	mov	sp, r7
 801df00:	bd80      	pop	{r7, pc}

0801df02 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801df02:	b480      	push	{r7}
 801df04:	b083      	sub	sp, #12
 801df06:	af00      	add	r7, sp, #0
 801df08:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801df0a:	687b      	ldr	r3, [r7, #4]
 801df0c:	681b      	ldr	r3, [r3, #0]
 801df0e:	2b00      	cmp	r3, #0
 801df10:	d101      	bne.n	801df16 <sys_mbox_valid+0x14>
    return 0;
 801df12:	2300      	movs	r3, #0
 801df14:	e000      	b.n	801df18 <sys_mbox_valid+0x16>
  else
    return 1;
 801df16:	2301      	movs	r3, #1
}
 801df18:	4618      	mov	r0, r3
 801df1a:	370c      	adds	r7, #12
 801df1c:	46bd      	mov	sp, r7
 801df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df22:	4770      	bx	lr

0801df24 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801df24:	b580      	push	{r7, lr}
 801df26:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801df28:	4803      	ldr	r0, [pc, #12]	; (801df38 <sys_init+0x14>)
 801df2a:	f7f1 fc6a 	bl	800f802 <osMutexCreate>
 801df2e:	4602      	mov	r2, r0
 801df30:	4b02      	ldr	r3, [pc, #8]	; (801df3c <sys_init+0x18>)
 801df32:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801df34:	bf00      	nop
 801df36:	bd80      	pop	{r7, pc}
 801df38:	08032954 	.word	0x08032954
 801df3c:	2000b528 	.word	0x2000b528

0801df40 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801df40:	b580      	push	{r7, lr}
 801df42:	b084      	sub	sp, #16
 801df44:	af00      	add	r7, sp, #0
 801df46:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801df48:	2300      	movs	r3, #0
 801df4a:	60bb      	str	r3, [r7, #8]
 801df4c:	2300      	movs	r3, #0
 801df4e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801df50:	f107 0308 	add.w	r3, r7, #8
 801df54:	4618      	mov	r0, r3
 801df56:	f7f1 fc54 	bl	800f802 <osMutexCreate>
 801df5a:	4602      	mov	r2, r0
 801df5c:	687b      	ldr	r3, [r7, #4]
 801df5e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801df60:	687b      	ldr	r3, [r7, #4]
 801df62:	681b      	ldr	r3, [r3, #0]
 801df64:	2b00      	cmp	r3, #0
 801df66:	d102      	bne.n	801df6e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801df68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801df6c:	e000      	b.n	801df70 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801df6e:	2300      	movs	r3, #0
}
 801df70:	4618      	mov	r0, r3
 801df72:	3710      	adds	r7, #16
 801df74:	46bd      	mov	sp, r7
 801df76:	bd80      	pop	{r7, pc}

0801df78 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801df78:	b580      	push	{r7, lr}
 801df7a:	b082      	sub	sp, #8
 801df7c:	af00      	add	r7, sp, #0
 801df7e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801df80:	687b      	ldr	r3, [r7, #4]
 801df82:	681b      	ldr	r3, [r3, #0]
 801df84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801df88:	4618      	mov	r0, r3
 801df8a:	f7f1 fc53 	bl	800f834 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801df8e:	bf00      	nop
 801df90:	3708      	adds	r7, #8
 801df92:	46bd      	mov	sp, r7
 801df94:	bd80      	pop	{r7, pc}

0801df96 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801df96:	b580      	push	{r7, lr}
 801df98:	b082      	sub	sp, #8
 801df9a:	af00      	add	r7, sp, #0
 801df9c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801df9e:	687b      	ldr	r3, [r7, #4]
 801dfa0:	681b      	ldr	r3, [r3, #0]
 801dfa2:	4618      	mov	r0, r3
 801dfa4:	f7f1 fc94 	bl	800f8d0 <osMutexRelease>
}
 801dfa8:	bf00      	nop
 801dfaa:	3708      	adds	r7, #8
 801dfac:	46bd      	mov	sp, r7
 801dfae:	bd80      	pop	{r7, pc}

0801dfb0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801dfb0:	b580      	push	{r7, lr}
 801dfb2:	b08c      	sub	sp, #48	; 0x30
 801dfb4:	af00      	add	r7, sp, #0
 801dfb6:	60f8      	str	r0, [r7, #12]
 801dfb8:	60b9      	str	r1, [r7, #8]
 801dfba:	607a      	str	r2, [r7, #4]
 801dfbc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801dfbe:	f107 0314 	add.w	r3, r7, #20
 801dfc2:	2200      	movs	r2, #0
 801dfc4:	601a      	str	r2, [r3, #0]
 801dfc6:	605a      	str	r2, [r3, #4]
 801dfc8:	609a      	str	r2, [r3, #8]
 801dfca:	60da      	str	r2, [r3, #12]
 801dfcc:	611a      	str	r2, [r3, #16]
 801dfce:	615a      	str	r2, [r3, #20]
 801dfd0:	619a      	str	r2, [r3, #24]
 801dfd2:	68fb      	ldr	r3, [r7, #12]
 801dfd4:	617b      	str	r3, [r7, #20]
 801dfd6:	68bb      	ldr	r3, [r7, #8]
 801dfd8:	61bb      	str	r3, [r7, #24]
 801dfda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dfdc:	b21b      	sxth	r3, r3
 801dfde:	83bb      	strh	r3, [r7, #28]
 801dfe0:	683b      	ldr	r3, [r7, #0]
 801dfe2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801dfe4:	f107 0314 	add.w	r3, r7, #20
 801dfe8:	6879      	ldr	r1, [r7, #4]
 801dfea:	4618      	mov	r0, r3
 801dfec:	f7f1 fba9 	bl	800f742 <osThreadCreate>
 801dff0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801dff2:	4618      	mov	r0, r3
 801dff4:	3730      	adds	r7, #48	; 0x30
 801dff6:	46bd      	mov	sp, r7
 801dff8:	bd80      	pop	{r7, pc}
	...

0801dffc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801dffc:	b580      	push	{r7, lr}
 801dffe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801e000:	4b04      	ldr	r3, [pc, #16]	; (801e014 <sys_arch_protect+0x18>)
 801e002:	681b      	ldr	r3, [r3, #0]
 801e004:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801e008:	4618      	mov	r0, r3
 801e00a:	f7f1 fc13 	bl	800f834 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801e00e:	2301      	movs	r3, #1
}
 801e010:	4618      	mov	r0, r3
 801e012:	bd80      	pop	{r7, pc}
 801e014:	2000b528 	.word	0x2000b528

0801e018 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801e018:	b580      	push	{r7, lr}
 801e01a:	b082      	sub	sp, #8
 801e01c:	af00      	add	r7, sp, #0
 801e01e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801e020:	4b04      	ldr	r3, [pc, #16]	; (801e034 <sys_arch_unprotect+0x1c>)
 801e022:	681b      	ldr	r3, [r3, #0]
 801e024:	4618      	mov	r0, r3
 801e026:	f7f1 fc53 	bl	800f8d0 <osMutexRelease>
}
 801e02a:	bf00      	nop
 801e02c:	3708      	adds	r7, #8
 801e02e:	46bd      	mov	sp, r7
 801e030:	bd80      	pop	{r7, pc}
 801e032:	bf00      	nop
 801e034:	2000b528 	.word	0x2000b528

0801e038 <__libc_init_array>:
 801e038:	b570      	push	{r4, r5, r6, lr}
 801e03a:	4e0d      	ldr	r6, [pc, #52]	; (801e070 <__libc_init_array+0x38>)
 801e03c:	4c0d      	ldr	r4, [pc, #52]	; (801e074 <__libc_init_array+0x3c>)
 801e03e:	1ba4      	subs	r4, r4, r6
 801e040:	10a4      	asrs	r4, r4, #2
 801e042:	2500      	movs	r5, #0
 801e044:	42a5      	cmp	r5, r4
 801e046:	d109      	bne.n	801e05c <__libc_init_array+0x24>
 801e048:	4e0b      	ldr	r6, [pc, #44]	; (801e078 <__libc_init_array+0x40>)
 801e04a:	4c0c      	ldr	r4, [pc, #48]	; (801e07c <__libc_init_array+0x44>)
 801e04c:	f000 ff7a 	bl	801ef44 <_init>
 801e050:	1ba4      	subs	r4, r4, r6
 801e052:	10a4      	asrs	r4, r4, #2
 801e054:	2500      	movs	r5, #0
 801e056:	42a5      	cmp	r5, r4
 801e058:	d105      	bne.n	801e066 <__libc_init_array+0x2e>
 801e05a:	bd70      	pop	{r4, r5, r6, pc}
 801e05c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e060:	4798      	blx	r3
 801e062:	3501      	adds	r5, #1
 801e064:	e7ee      	b.n	801e044 <__libc_init_array+0xc>
 801e066:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e06a:	4798      	blx	r3
 801e06c:	3501      	adds	r5, #1
 801e06e:	e7f2      	b.n	801e056 <__libc_init_array+0x1e>
 801e070:	080329fc 	.word	0x080329fc
 801e074:	080329fc 	.word	0x080329fc
 801e078:	080329fc 	.word	0x080329fc
 801e07c:	08032a00 	.word	0x08032a00

0801e080 <memcmp>:
 801e080:	b530      	push	{r4, r5, lr}
 801e082:	2400      	movs	r4, #0
 801e084:	42a2      	cmp	r2, r4
 801e086:	d101      	bne.n	801e08c <memcmp+0xc>
 801e088:	2000      	movs	r0, #0
 801e08a:	e007      	b.n	801e09c <memcmp+0x1c>
 801e08c:	5d03      	ldrb	r3, [r0, r4]
 801e08e:	3401      	adds	r4, #1
 801e090:	190d      	adds	r5, r1, r4
 801e092:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801e096:	42ab      	cmp	r3, r5
 801e098:	d0f4      	beq.n	801e084 <memcmp+0x4>
 801e09a:	1b58      	subs	r0, r3, r5
 801e09c:	bd30      	pop	{r4, r5, pc}

0801e09e <memcpy>:
 801e09e:	b510      	push	{r4, lr}
 801e0a0:	1e43      	subs	r3, r0, #1
 801e0a2:	440a      	add	r2, r1
 801e0a4:	4291      	cmp	r1, r2
 801e0a6:	d100      	bne.n	801e0aa <memcpy+0xc>
 801e0a8:	bd10      	pop	{r4, pc}
 801e0aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e0ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e0b2:	e7f7      	b.n	801e0a4 <memcpy+0x6>

0801e0b4 <memset>:
 801e0b4:	4402      	add	r2, r0
 801e0b6:	4603      	mov	r3, r0
 801e0b8:	4293      	cmp	r3, r2
 801e0ba:	d100      	bne.n	801e0be <memset+0xa>
 801e0bc:	4770      	bx	lr
 801e0be:	f803 1b01 	strb.w	r1, [r3], #1
 801e0c2:	e7f9      	b.n	801e0b8 <memset+0x4>

0801e0c4 <iprintf>:
 801e0c4:	b40f      	push	{r0, r1, r2, r3}
 801e0c6:	4b0a      	ldr	r3, [pc, #40]	; (801e0f0 <iprintf+0x2c>)
 801e0c8:	b513      	push	{r0, r1, r4, lr}
 801e0ca:	681c      	ldr	r4, [r3, #0]
 801e0cc:	b124      	cbz	r4, 801e0d8 <iprintf+0x14>
 801e0ce:	69a3      	ldr	r3, [r4, #24]
 801e0d0:	b913      	cbnz	r3, 801e0d8 <iprintf+0x14>
 801e0d2:	4620      	mov	r0, r4
 801e0d4:	f000 f8a2 	bl	801e21c <__sinit>
 801e0d8:	ab05      	add	r3, sp, #20
 801e0da:	9a04      	ldr	r2, [sp, #16]
 801e0dc:	68a1      	ldr	r1, [r4, #8]
 801e0de:	9301      	str	r3, [sp, #4]
 801e0e0:	4620      	mov	r0, r4
 801e0e2:	f000 f9ff 	bl	801e4e4 <_vfiprintf_r>
 801e0e6:	b002      	add	sp, #8
 801e0e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e0ec:	b004      	add	sp, #16
 801e0ee:	4770      	bx	lr
 801e0f0:	2000005c 	.word	0x2000005c

0801e0f4 <rand>:
 801e0f4:	b538      	push	{r3, r4, r5, lr}
 801e0f6:	4b13      	ldr	r3, [pc, #76]	; (801e144 <rand+0x50>)
 801e0f8:	681c      	ldr	r4, [r3, #0]
 801e0fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e0fc:	b97b      	cbnz	r3, 801e11e <rand+0x2a>
 801e0fe:	2018      	movs	r0, #24
 801e100:	f000 f916 	bl	801e330 <malloc>
 801e104:	4a10      	ldr	r2, [pc, #64]	; (801e148 <rand+0x54>)
 801e106:	4b11      	ldr	r3, [pc, #68]	; (801e14c <rand+0x58>)
 801e108:	63a0      	str	r0, [r4, #56]	; 0x38
 801e10a:	e9c0 2300 	strd	r2, r3, [r0]
 801e10e:	4b10      	ldr	r3, [pc, #64]	; (801e150 <rand+0x5c>)
 801e110:	6083      	str	r3, [r0, #8]
 801e112:	230b      	movs	r3, #11
 801e114:	8183      	strh	r3, [r0, #12]
 801e116:	2201      	movs	r2, #1
 801e118:	2300      	movs	r3, #0
 801e11a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801e11e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801e120:	480c      	ldr	r0, [pc, #48]	; (801e154 <rand+0x60>)
 801e122:	690a      	ldr	r2, [r1, #16]
 801e124:	694b      	ldr	r3, [r1, #20]
 801e126:	4c0c      	ldr	r4, [pc, #48]	; (801e158 <rand+0x64>)
 801e128:	4350      	muls	r0, r2
 801e12a:	fb04 0003 	mla	r0, r4, r3, r0
 801e12e:	fba2 2304 	umull	r2, r3, r2, r4
 801e132:	4403      	add	r3, r0
 801e134:	1c54      	adds	r4, r2, #1
 801e136:	f143 0500 	adc.w	r5, r3, #0
 801e13a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801e13e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801e142:	bd38      	pop	{r3, r4, r5, pc}
 801e144:	2000005c 	.word	0x2000005c
 801e148:	abcd330e 	.word	0xabcd330e
 801e14c:	e66d1234 	.word	0xe66d1234
 801e150:	0005deec 	.word	0x0005deec
 801e154:	5851f42d 	.word	0x5851f42d
 801e158:	4c957f2d 	.word	0x4c957f2d

0801e15c <strchr>:
 801e15c:	b2c9      	uxtb	r1, r1
 801e15e:	4603      	mov	r3, r0
 801e160:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e164:	b11a      	cbz	r2, 801e16e <strchr+0x12>
 801e166:	428a      	cmp	r2, r1
 801e168:	d1f9      	bne.n	801e15e <strchr+0x2>
 801e16a:	4618      	mov	r0, r3
 801e16c:	4770      	bx	lr
 801e16e:	2900      	cmp	r1, #0
 801e170:	bf18      	it	ne
 801e172:	2300      	movne	r3, #0
 801e174:	e7f9      	b.n	801e16a <strchr+0xe>

0801e176 <strncmp>:
 801e176:	b510      	push	{r4, lr}
 801e178:	b16a      	cbz	r2, 801e196 <strncmp+0x20>
 801e17a:	3901      	subs	r1, #1
 801e17c:	1884      	adds	r4, r0, r2
 801e17e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801e182:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801e186:	4293      	cmp	r3, r2
 801e188:	d103      	bne.n	801e192 <strncmp+0x1c>
 801e18a:	42a0      	cmp	r0, r4
 801e18c:	d001      	beq.n	801e192 <strncmp+0x1c>
 801e18e:	2b00      	cmp	r3, #0
 801e190:	d1f5      	bne.n	801e17e <strncmp+0x8>
 801e192:	1a98      	subs	r0, r3, r2
 801e194:	bd10      	pop	{r4, pc}
 801e196:	4610      	mov	r0, r2
 801e198:	e7fc      	b.n	801e194 <strncmp+0x1e>
	...

0801e19c <std>:
 801e19c:	2300      	movs	r3, #0
 801e19e:	b510      	push	{r4, lr}
 801e1a0:	4604      	mov	r4, r0
 801e1a2:	e9c0 3300 	strd	r3, r3, [r0]
 801e1a6:	6083      	str	r3, [r0, #8]
 801e1a8:	8181      	strh	r1, [r0, #12]
 801e1aa:	6643      	str	r3, [r0, #100]	; 0x64
 801e1ac:	81c2      	strh	r2, [r0, #14]
 801e1ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e1b2:	6183      	str	r3, [r0, #24]
 801e1b4:	4619      	mov	r1, r3
 801e1b6:	2208      	movs	r2, #8
 801e1b8:	305c      	adds	r0, #92	; 0x5c
 801e1ba:	f7ff ff7b 	bl	801e0b4 <memset>
 801e1be:	4b05      	ldr	r3, [pc, #20]	; (801e1d4 <std+0x38>)
 801e1c0:	6263      	str	r3, [r4, #36]	; 0x24
 801e1c2:	4b05      	ldr	r3, [pc, #20]	; (801e1d8 <std+0x3c>)
 801e1c4:	62a3      	str	r3, [r4, #40]	; 0x28
 801e1c6:	4b05      	ldr	r3, [pc, #20]	; (801e1dc <std+0x40>)
 801e1c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e1ca:	4b05      	ldr	r3, [pc, #20]	; (801e1e0 <std+0x44>)
 801e1cc:	6224      	str	r4, [r4, #32]
 801e1ce:	6323      	str	r3, [r4, #48]	; 0x30
 801e1d0:	bd10      	pop	{r4, pc}
 801e1d2:	bf00      	nop
 801e1d4:	0801ea41 	.word	0x0801ea41
 801e1d8:	0801ea63 	.word	0x0801ea63
 801e1dc:	0801ea9b 	.word	0x0801ea9b
 801e1e0:	0801eabf 	.word	0x0801eabf

0801e1e4 <_cleanup_r>:
 801e1e4:	4901      	ldr	r1, [pc, #4]	; (801e1ec <_cleanup_r+0x8>)
 801e1e6:	f000 b885 	b.w	801e2f4 <_fwalk_reent>
 801e1ea:	bf00      	nop
 801e1ec:	0801ed99 	.word	0x0801ed99

0801e1f0 <__sfmoreglue>:
 801e1f0:	b570      	push	{r4, r5, r6, lr}
 801e1f2:	1e4a      	subs	r2, r1, #1
 801e1f4:	2568      	movs	r5, #104	; 0x68
 801e1f6:	4355      	muls	r5, r2
 801e1f8:	460e      	mov	r6, r1
 801e1fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e1fe:	f000 f8ed 	bl	801e3dc <_malloc_r>
 801e202:	4604      	mov	r4, r0
 801e204:	b140      	cbz	r0, 801e218 <__sfmoreglue+0x28>
 801e206:	2100      	movs	r1, #0
 801e208:	e9c0 1600 	strd	r1, r6, [r0]
 801e20c:	300c      	adds	r0, #12
 801e20e:	60a0      	str	r0, [r4, #8]
 801e210:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e214:	f7ff ff4e 	bl	801e0b4 <memset>
 801e218:	4620      	mov	r0, r4
 801e21a:	bd70      	pop	{r4, r5, r6, pc}

0801e21c <__sinit>:
 801e21c:	6983      	ldr	r3, [r0, #24]
 801e21e:	b510      	push	{r4, lr}
 801e220:	4604      	mov	r4, r0
 801e222:	bb33      	cbnz	r3, 801e272 <__sinit+0x56>
 801e224:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801e228:	6503      	str	r3, [r0, #80]	; 0x50
 801e22a:	4b12      	ldr	r3, [pc, #72]	; (801e274 <__sinit+0x58>)
 801e22c:	4a12      	ldr	r2, [pc, #72]	; (801e278 <__sinit+0x5c>)
 801e22e:	681b      	ldr	r3, [r3, #0]
 801e230:	6282      	str	r2, [r0, #40]	; 0x28
 801e232:	4298      	cmp	r0, r3
 801e234:	bf04      	itt	eq
 801e236:	2301      	moveq	r3, #1
 801e238:	6183      	streq	r3, [r0, #24]
 801e23a:	f000 f81f 	bl	801e27c <__sfp>
 801e23e:	6060      	str	r0, [r4, #4]
 801e240:	4620      	mov	r0, r4
 801e242:	f000 f81b 	bl	801e27c <__sfp>
 801e246:	60a0      	str	r0, [r4, #8]
 801e248:	4620      	mov	r0, r4
 801e24a:	f000 f817 	bl	801e27c <__sfp>
 801e24e:	2200      	movs	r2, #0
 801e250:	60e0      	str	r0, [r4, #12]
 801e252:	2104      	movs	r1, #4
 801e254:	6860      	ldr	r0, [r4, #4]
 801e256:	f7ff ffa1 	bl	801e19c <std>
 801e25a:	2201      	movs	r2, #1
 801e25c:	2109      	movs	r1, #9
 801e25e:	68a0      	ldr	r0, [r4, #8]
 801e260:	f7ff ff9c 	bl	801e19c <std>
 801e264:	2202      	movs	r2, #2
 801e266:	2112      	movs	r1, #18
 801e268:	68e0      	ldr	r0, [r4, #12]
 801e26a:	f7ff ff97 	bl	801e19c <std>
 801e26e:	2301      	movs	r3, #1
 801e270:	61a3      	str	r3, [r4, #24]
 801e272:	bd10      	pop	{r4, pc}
 801e274:	0803295c 	.word	0x0803295c
 801e278:	0801e1e5 	.word	0x0801e1e5

0801e27c <__sfp>:
 801e27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e27e:	4b1b      	ldr	r3, [pc, #108]	; (801e2ec <__sfp+0x70>)
 801e280:	681e      	ldr	r6, [r3, #0]
 801e282:	69b3      	ldr	r3, [r6, #24]
 801e284:	4607      	mov	r7, r0
 801e286:	b913      	cbnz	r3, 801e28e <__sfp+0x12>
 801e288:	4630      	mov	r0, r6
 801e28a:	f7ff ffc7 	bl	801e21c <__sinit>
 801e28e:	3648      	adds	r6, #72	; 0x48
 801e290:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e294:	3b01      	subs	r3, #1
 801e296:	d503      	bpl.n	801e2a0 <__sfp+0x24>
 801e298:	6833      	ldr	r3, [r6, #0]
 801e29a:	b133      	cbz	r3, 801e2aa <__sfp+0x2e>
 801e29c:	6836      	ldr	r6, [r6, #0]
 801e29e:	e7f7      	b.n	801e290 <__sfp+0x14>
 801e2a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e2a4:	b16d      	cbz	r5, 801e2c2 <__sfp+0x46>
 801e2a6:	3468      	adds	r4, #104	; 0x68
 801e2a8:	e7f4      	b.n	801e294 <__sfp+0x18>
 801e2aa:	2104      	movs	r1, #4
 801e2ac:	4638      	mov	r0, r7
 801e2ae:	f7ff ff9f 	bl	801e1f0 <__sfmoreglue>
 801e2b2:	6030      	str	r0, [r6, #0]
 801e2b4:	2800      	cmp	r0, #0
 801e2b6:	d1f1      	bne.n	801e29c <__sfp+0x20>
 801e2b8:	230c      	movs	r3, #12
 801e2ba:	603b      	str	r3, [r7, #0]
 801e2bc:	4604      	mov	r4, r0
 801e2be:	4620      	mov	r0, r4
 801e2c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e2c2:	4b0b      	ldr	r3, [pc, #44]	; (801e2f0 <__sfp+0x74>)
 801e2c4:	6665      	str	r5, [r4, #100]	; 0x64
 801e2c6:	e9c4 5500 	strd	r5, r5, [r4]
 801e2ca:	60a5      	str	r5, [r4, #8]
 801e2cc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801e2d0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801e2d4:	2208      	movs	r2, #8
 801e2d6:	4629      	mov	r1, r5
 801e2d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e2dc:	f7ff feea 	bl	801e0b4 <memset>
 801e2e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e2e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e2e8:	e7e9      	b.n	801e2be <__sfp+0x42>
 801e2ea:	bf00      	nop
 801e2ec:	0803295c 	.word	0x0803295c
 801e2f0:	ffff0001 	.word	0xffff0001

0801e2f4 <_fwalk_reent>:
 801e2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e2f8:	4680      	mov	r8, r0
 801e2fa:	4689      	mov	r9, r1
 801e2fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e300:	2600      	movs	r6, #0
 801e302:	b914      	cbnz	r4, 801e30a <_fwalk_reent+0x16>
 801e304:	4630      	mov	r0, r6
 801e306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e30a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801e30e:	3f01      	subs	r7, #1
 801e310:	d501      	bpl.n	801e316 <_fwalk_reent+0x22>
 801e312:	6824      	ldr	r4, [r4, #0]
 801e314:	e7f5      	b.n	801e302 <_fwalk_reent+0xe>
 801e316:	89ab      	ldrh	r3, [r5, #12]
 801e318:	2b01      	cmp	r3, #1
 801e31a:	d907      	bls.n	801e32c <_fwalk_reent+0x38>
 801e31c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e320:	3301      	adds	r3, #1
 801e322:	d003      	beq.n	801e32c <_fwalk_reent+0x38>
 801e324:	4629      	mov	r1, r5
 801e326:	4640      	mov	r0, r8
 801e328:	47c8      	blx	r9
 801e32a:	4306      	orrs	r6, r0
 801e32c:	3568      	adds	r5, #104	; 0x68
 801e32e:	e7ee      	b.n	801e30e <_fwalk_reent+0x1a>

0801e330 <malloc>:
 801e330:	4b02      	ldr	r3, [pc, #8]	; (801e33c <malloc+0xc>)
 801e332:	4601      	mov	r1, r0
 801e334:	6818      	ldr	r0, [r3, #0]
 801e336:	f000 b851 	b.w	801e3dc <_malloc_r>
 801e33a:	bf00      	nop
 801e33c:	2000005c 	.word	0x2000005c

0801e340 <_free_r>:
 801e340:	b538      	push	{r3, r4, r5, lr}
 801e342:	4605      	mov	r5, r0
 801e344:	2900      	cmp	r1, #0
 801e346:	d045      	beq.n	801e3d4 <_free_r+0x94>
 801e348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e34c:	1f0c      	subs	r4, r1, #4
 801e34e:	2b00      	cmp	r3, #0
 801e350:	bfb8      	it	lt
 801e352:	18e4      	addlt	r4, r4, r3
 801e354:	f000 fdc0 	bl	801eed8 <__malloc_lock>
 801e358:	4a1f      	ldr	r2, [pc, #124]	; (801e3d8 <_free_r+0x98>)
 801e35a:	6813      	ldr	r3, [r2, #0]
 801e35c:	4610      	mov	r0, r2
 801e35e:	b933      	cbnz	r3, 801e36e <_free_r+0x2e>
 801e360:	6063      	str	r3, [r4, #4]
 801e362:	6014      	str	r4, [r2, #0]
 801e364:	4628      	mov	r0, r5
 801e366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e36a:	f000 bdb6 	b.w	801eeda <__malloc_unlock>
 801e36e:	42a3      	cmp	r3, r4
 801e370:	d90c      	bls.n	801e38c <_free_r+0x4c>
 801e372:	6821      	ldr	r1, [r4, #0]
 801e374:	1862      	adds	r2, r4, r1
 801e376:	4293      	cmp	r3, r2
 801e378:	bf04      	itt	eq
 801e37a:	681a      	ldreq	r2, [r3, #0]
 801e37c:	685b      	ldreq	r3, [r3, #4]
 801e37e:	6063      	str	r3, [r4, #4]
 801e380:	bf04      	itt	eq
 801e382:	1852      	addeq	r2, r2, r1
 801e384:	6022      	streq	r2, [r4, #0]
 801e386:	6004      	str	r4, [r0, #0]
 801e388:	e7ec      	b.n	801e364 <_free_r+0x24>
 801e38a:	4613      	mov	r3, r2
 801e38c:	685a      	ldr	r2, [r3, #4]
 801e38e:	b10a      	cbz	r2, 801e394 <_free_r+0x54>
 801e390:	42a2      	cmp	r2, r4
 801e392:	d9fa      	bls.n	801e38a <_free_r+0x4a>
 801e394:	6819      	ldr	r1, [r3, #0]
 801e396:	1858      	adds	r0, r3, r1
 801e398:	42a0      	cmp	r0, r4
 801e39a:	d10b      	bne.n	801e3b4 <_free_r+0x74>
 801e39c:	6820      	ldr	r0, [r4, #0]
 801e39e:	4401      	add	r1, r0
 801e3a0:	1858      	adds	r0, r3, r1
 801e3a2:	4282      	cmp	r2, r0
 801e3a4:	6019      	str	r1, [r3, #0]
 801e3a6:	d1dd      	bne.n	801e364 <_free_r+0x24>
 801e3a8:	6810      	ldr	r0, [r2, #0]
 801e3aa:	6852      	ldr	r2, [r2, #4]
 801e3ac:	605a      	str	r2, [r3, #4]
 801e3ae:	4401      	add	r1, r0
 801e3b0:	6019      	str	r1, [r3, #0]
 801e3b2:	e7d7      	b.n	801e364 <_free_r+0x24>
 801e3b4:	d902      	bls.n	801e3bc <_free_r+0x7c>
 801e3b6:	230c      	movs	r3, #12
 801e3b8:	602b      	str	r3, [r5, #0]
 801e3ba:	e7d3      	b.n	801e364 <_free_r+0x24>
 801e3bc:	6820      	ldr	r0, [r4, #0]
 801e3be:	1821      	adds	r1, r4, r0
 801e3c0:	428a      	cmp	r2, r1
 801e3c2:	bf04      	itt	eq
 801e3c4:	6811      	ldreq	r1, [r2, #0]
 801e3c6:	6852      	ldreq	r2, [r2, #4]
 801e3c8:	6062      	str	r2, [r4, #4]
 801e3ca:	bf04      	itt	eq
 801e3cc:	1809      	addeq	r1, r1, r0
 801e3ce:	6021      	streq	r1, [r4, #0]
 801e3d0:	605c      	str	r4, [r3, #4]
 801e3d2:	e7c7      	b.n	801e364 <_free_r+0x24>
 801e3d4:	bd38      	pop	{r3, r4, r5, pc}
 801e3d6:	bf00      	nop
 801e3d8:	20004664 	.word	0x20004664

0801e3dc <_malloc_r>:
 801e3dc:	b570      	push	{r4, r5, r6, lr}
 801e3de:	1ccd      	adds	r5, r1, #3
 801e3e0:	f025 0503 	bic.w	r5, r5, #3
 801e3e4:	3508      	adds	r5, #8
 801e3e6:	2d0c      	cmp	r5, #12
 801e3e8:	bf38      	it	cc
 801e3ea:	250c      	movcc	r5, #12
 801e3ec:	2d00      	cmp	r5, #0
 801e3ee:	4606      	mov	r6, r0
 801e3f0:	db01      	blt.n	801e3f6 <_malloc_r+0x1a>
 801e3f2:	42a9      	cmp	r1, r5
 801e3f4:	d903      	bls.n	801e3fe <_malloc_r+0x22>
 801e3f6:	230c      	movs	r3, #12
 801e3f8:	6033      	str	r3, [r6, #0]
 801e3fa:	2000      	movs	r0, #0
 801e3fc:	bd70      	pop	{r4, r5, r6, pc}
 801e3fe:	f000 fd6b 	bl	801eed8 <__malloc_lock>
 801e402:	4a21      	ldr	r2, [pc, #132]	; (801e488 <_malloc_r+0xac>)
 801e404:	6814      	ldr	r4, [r2, #0]
 801e406:	4621      	mov	r1, r4
 801e408:	b991      	cbnz	r1, 801e430 <_malloc_r+0x54>
 801e40a:	4c20      	ldr	r4, [pc, #128]	; (801e48c <_malloc_r+0xb0>)
 801e40c:	6823      	ldr	r3, [r4, #0]
 801e40e:	b91b      	cbnz	r3, 801e418 <_malloc_r+0x3c>
 801e410:	4630      	mov	r0, r6
 801e412:	f000 fb05 	bl	801ea20 <_sbrk_r>
 801e416:	6020      	str	r0, [r4, #0]
 801e418:	4629      	mov	r1, r5
 801e41a:	4630      	mov	r0, r6
 801e41c:	f000 fb00 	bl	801ea20 <_sbrk_r>
 801e420:	1c43      	adds	r3, r0, #1
 801e422:	d124      	bne.n	801e46e <_malloc_r+0x92>
 801e424:	230c      	movs	r3, #12
 801e426:	6033      	str	r3, [r6, #0]
 801e428:	4630      	mov	r0, r6
 801e42a:	f000 fd56 	bl	801eeda <__malloc_unlock>
 801e42e:	e7e4      	b.n	801e3fa <_malloc_r+0x1e>
 801e430:	680b      	ldr	r3, [r1, #0]
 801e432:	1b5b      	subs	r3, r3, r5
 801e434:	d418      	bmi.n	801e468 <_malloc_r+0x8c>
 801e436:	2b0b      	cmp	r3, #11
 801e438:	d90f      	bls.n	801e45a <_malloc_r+0x7e>
 801e43a:	600b      	str	r3, [r1, #0]
 801e43c:	50cd      	str	r5, [r1, r3]
 801e43e:	18cc      	adds	r4, r1, r3
 801e440:	4630      	mov	r0, r6
 801e442:	f000 fd4a 	bl	801eeda <__malloc_unlock>
 801e446:	f104 000b 	add.w	r0, r4, #11
 801e44a:	1d23      	adds	r3, r4, #4
 801e44c:	f020 0007 	bic.w	r0, r0, #7
 801e450:	1ac3      	subs	r3, r0, r3
 801e452:	d0d3      	beq.n	801e3fc <_malloc_r+0x20>
 801e454:	425a      	negs	r2, r3
 801e456:	50e2      	str	r2, [r4, r3]
 801e458:	e7d0      	b.n	801e3fc <_malloc_r+0x20>
 801e45a:	428c      	cmp	r4, r1
 801e45c:	684b      	ldr	r3, [r1, #4]
 801e45e:	bf16      	itet	ne
 801e460:	6063      	strne	r3, [r4, #4]
 801e462:	6013      	streq	r3, [r2, #0]
 801e464:	460c      	movne	r4, r1
 801e466:	e7eb      	b.n	801e440 <_malloc_r+0x64>
 801e468:	460c      	mov	r4, r1
 801e46a:	6849      	ldr	r1, [r1, #4]
 801e46c:	e7cc      	b.n	801e408 <_malloc_r+0x2c>
 801e46e:	1cc4      	adds	r4, r0, #3
 801e470:	f024 0403 	bic.w	r4, r4, #3
 801e474:	42a0      	cmp	r0, r4
 801e476:	d005      	beq.n	801e484 <_malloc_r+0xa8>
 801e478:	1a21      	subs	r1, r4, r0
 801e47a:	4630      	mov	r0, r6
 801e47c:	f000 fad0 	bl	801ea20 <_sbrk_r>
 801e480:	3001      	adds	r0, #1
 801e482:	d0cf      	beq.n	801e424 <_malloc_r+0x48>
 801e484:	6025      	str	r5, [r4, #0]
 801e486:	e7db      	b.n	801e440 <_malloc_r+0x64>
 801e488:	20004664 	.word	0x20004664
 801e48c:	20004668 	.word	0x20004668

0801e490 <__sfputc_r>:
 801e490:	6893      	ldr	r3, [r2, #8]
 801e492:	3b01      	subs	r3, #1
 801e494:	2b00      	cmp	r3, #0
 801e496:	b410      	push	{r4}
 801e498:	6093      	str	r3, [r2, #8]
 801e49a:	da08      	bge.n	801e4ae <__sfputc_r+0x1e>
 801e49c:	6994      	ldr	r4, [r2, #24]
 801e49e:	42a3      	cmp	r3, r4
 801e4a0:	db01      	blt.n	801e4a6 <__sfputc_r+0x16>
 801e4a2:	290a      	cmp	r1, #10
 801e4a4:	d103      	bne.n	801e4ae <__sfputc_r+0x1e>
 801e4a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e4aa:	f000 bb0d 	b.w	801eac8 <__swbuf_r>
 801e4ae:	6813      	ldr	r3, [r2, #0]
 801e4b0:	1c58      	adds	r0, r3, #1
 801e4b2:	6010      	str	r0, [r2, #0]
 801e4b4:	7019      	strb	r1, [r3, #0]
 801e4b6:	4608      	mov	r0, r1
 801e4b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e4bc:	4770      	bx	lr

0801e4be <__sfputs_r>:
 801e4be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4c0:	4606      	mov	r6, r0
 801e4c2:	460f      	mov	r7, r1
 801e4c4:	4614      	mov	r4, r2
 801e4c6:	18d5      	adds	r5, r2, r3
 801e4c8:	42ac      	cmp	r4, r5
 801e4ca:	d101      	bne.n	801e4d0 <__sfputs_r+0x12>
 801e4cc:	2000      	movs	r0, #0
 801e4ce:	e007      	b.n	801e4e0 <__sfputs_r+0x22>
 801e4d0:	463a      	mov	r2, r7
 801e4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e4d6:	4630      	mov	r0, r6
 801e4d8:	f7ff ffda 	bl	801e490 <__sfputc_r>
 801e4dc:	1c43      	adds	r3, r0, #1
 801e4de:	d1f3      	bne.n	801e4c8 <__sfputs_r+0xa>
 801e4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e4e4 <_vfiprintf_r>:
 801e4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4e8:	460c      	mov	r4, r1
 801e4ea:	b09d      	sub	sp, #116	; 0x74
 801e4ec:	4617      	mov	r7, r2
 801e4ee:	461d      	mov	r5, r3
 801e4f0:	4606      	mov	r6, r0
 801e4f2:	b118      	cbz	r0, 801e4fc <_vfiprintf_r+0x18>
 801e4f4:	6983      	ldr	r3, [r0, #24]
 801e4f6:	b90b      	cbnz	r3, 801e4fc <_vfiprintf_r+0x18>
 801e4f8:	f7ff fe90 	bl	801e21c <__sinit>
 801e4fc:	4b7c      	ldr	r3, [pc, #496]	; (801e6f0 <_vfiprintf_r+0x20c>)
 801e4fe:	429c      	cmp	r4, r3
 801e500:	d158      	bne.n	801e5b4 <_vfiprintf_r+0xd0>
 801e502:	6874      	ldr	r4, [r6, #4]
 801e504:	89a3      	ldrh	r3, [r4, #12]
 801e506:	0718      	lsls	r0, r3, #28
 801e508:	d55e      	bpl.n	801e5c8 <_vfiprintf_r+0xe4>
 801e50a:	6923      	ldr	r3, [r4, #16]
 801e50c:	2b00      	cmp	r3, #0
 801e50e:	d05b      	beq.n	801e5c8 <_vfiprintf_r+0xe4>
 801e510:	2300      	movs	r3, #0
 801e512:	9309      	str	r3, [sp, #36]	; 0x24
 801e514:	2320      	movs	r3, #32
 801e516:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e51a:	2330      	movs	r3, #48	; 0x30
 801e51c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e520:	9503      	str	r5, [sp, #12]
 801e522:	f04f 0b01 	mov.w	fp, #1
 801e526:	46b8      	mov	r8, r7
 801e528:	4645      	mov	r5, r8
 801e52a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e52e:	b10b      	cbz	r3, 801e534 <_vfiprintf_r+0x50>
 801e530:	2b25      	cmp	r3, #37	; 0x25
 801e532:	d154      	bne.n	801e5de <_vfiprintf_r+0xfa>
 801e534:	ebb8 0a07 	subs.w	sl, r8, r7
 801e538:	d00b      	beq.n	801e552 <_vfiprintf_r+0x6e>
 801e53a:	4653      	mov	r3, sl
 801e53c:	463a      	mov	r2, r7
 801e53e:	4621      	mov	r1, r4
 801e540:	4630      	mov	r0, r6
 801e542:	f7ff ffbc 	bl	801e4be <__sfputs_r>
 801e546:	3001      	adds	r0, #1
 801e548:	f000 80c2 	beq.w	801e6d0 <_vfiprintf_r+0x1ec>
 801e54c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e54e:	4453      	add	r3, sl
 801e550:	9309      	str	r3, [sp, #36]	; 0x24
 801e552:	f898 3000 	ldrb.w	r3, [r8]
 801e556:	2b00      	cmp	r3, #0
 801e558:	f000 80ba 	beq.w	801e6d0 <_vfiprintf_r+0x1ec>
 801e55c:	2300      	movs	r3, #0
 801e55e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e566:	9304      	str	r3, [sp, #16]
 801e568:	9307      	str	r3, [sp, #28]
 801e56a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e56e:	931a      	str	r3, [sp, #104]	; 0x68
 801e570:	46a8      	mov	r8, r5
 801e572:	2205      	movs	r2, #5
 801e574:	f818 1b01 	ldrb.w	r1, [r8], #1
 801e578:	485e      	ldr	r0, [pc, #376]	; (801e6f4 <_vfiprintf_r+0x210>)
 801e57a:	f7e9 fe79 	bl	8008270 <memchr>
 801e57e:	9b04      	ldr	r3, [sp, #16]
 801e580:	bb78      	cbnz	r0, 801e5e2 <_vfiprintf_r+0xfe>
 801e582:	06d9      	lsls	r1, r3, #27
 801e584:	bf44      	itt	mi
 801e586:	2220      	movmi	r2, #32
 801e588:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801e58c:	071a      	lsls	r2, r3, #28
 801e58e:	bf44      	itt	mi
 801e590:	222b      	movmi	r2, #43	; 0x2b
 801e592:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801e596:	782a      	ldrb	r2, [r5, #0]
 801e598:	2a2a      	cmp	r2, #42	; 0x2a
 801e59a:	d02a      	beq.n	801e5f2 <_vfiprintf_r+0x10e>
 801e59c:	9a07      	ldr	r2, [sp, #28]
 801e59e:	46a8      	mov	r8, r5
 801e5a0:	2000      	movs	r0, #0
 801e5a2:	250a      	movs	r5, #10
 801e5a4:	4641      	mov	r1, r8
 801e5a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e5aa:	3b30      	subs	r3, #48	; 0x30
 801e5ac:	2b09      	cmp	r3, #9
 801e5ae:	d969      	bls.n	801e684 <_vfiprintf_r+0x1a0>
 801e5b0:	b360      	cbz	r0, 801e60c <_vfiprintf_r+0x128>
 801e5b2:	e024      	b.n	801e5fe <_vfiprintf_r+0x11a>
 801e5b4:	4b50      	ldr	r3, [pc, #320]	; (801e6f8 <_vfiprintf_r+0x214>)
 801e5b6:	429c      	cmp	r4, r3
 801e5b8:	d101      	bne.n	801e5be <_vfiprintf_r+0xda>
 801e5ba:	68b4      	ldr	r4, [r6, #8]
 801e5bc:	e7a2      	b.n	801e504 <_vfiprintf_r+0x20>
 801e5be:	4b4f      	ldr	r3, [pc, #316]	; (801e6fc <_vfiprintf_r+0x218>)
 801e5c0:	429c      	cmp	r4, r3
 801e5c2:	bf08      	it	eq
 801e5c4:	68f4      	ldreq	r4, [r6, #12]
 801e5c6:	e79d      	b.n	801e504 <_vfiprintf_r+0x20>
 801e5c8:	4621      	mov	r1, r4
 801e5ca:	4630      	mov	r0, r6
 801e5cc:	f000 fae0 	bl	801eb90 <__swsetup_r>
 801e5d0:	2800      	cmp	r0, #0
 801e5d2:	d09d      	beq.n	801e510 <_vfiprintf_r+0x2c>
 801e5d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e5d8:	b01d      	add	sp, #116	; 0x74
 801e5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5de:	46a8      	mov	r8, r5
 801e5e0:	e7a2      	b.n	801e528 <_vfiprintf_r+0x44>
 801e5e2:	4a44      	ldr	r2, [pc, #272]	; (801e6f4 <_vfiprintf_r+0x210>)
 801e5e4:	1a80      	subs	r0, r0, r2
 801e5e6:	fa0b f000 	lsl.w	r0, fp, r0
 801e5ea:	4318      	orrs	r0, r3
 801e5ec:	9004      	str	r0, [sp, #16]
 801e5ee:	4645      	mov	r5, r8
 801e5f0:	e7be      	b.n	801e570 <_vfiprintf_r+0x8c>
 801e5f2:	9a03      	ldr	r2, [sp, #12]
 801e5f4:	1d11      	adds	r1, r2, #4
 801e5f6:	6812      	ldr	r2, [r2, #0]
 801e5f8:	9103      	str	r1, [sp, #12]
 801e5fa:	2a00      	cmp	r2, #0
 801e5fc:	db01      	blt.n	801e602 <_vfiprintf_r+0x11e>
 801e5fe:	9207      	str	r2, [sp, #28]
 801e600:	e004      	b.n	801e60c <_vfiprintf_r+0x128>
 801e602:	4252      	negs	r2, r2
 801e604:	f043 0302 	orr.w	r3, r3, #2
 801e608:	9207      	str	r2, [sp, #28]
 801e60a:	9304      	str	r3, [sp, #16]
 801e60c:	f898 3000 	ldrb.w	r3, [r8]
 801e610:	2b2e      	cmp	r3, #46	; 0x2e
 801e612:	d10e      	bne.n	801e632 <_vfiprintf_r+0x14e>
 801e614:	f898 3001 	ldrb.w	r3, [r8, #1]
 801e618:	2b2a      	cmp	r3, #42	; 0x2a
 801e61a:	d138      	bne.n	801e68e <_vfiprintf_r+0x1aa>
 801e61c:	9b03      	ldr	r3, [sp, #12]
 801e61e:	1d1a      	adds	r2, r3, #4
 801e620:	681b      	ldr	r3, [r3, #0]
 801e622:	9203      	str	r2, [sp, #12]
 801e624:	2b00      	cmp	r3, #0
 801e626:	bfb8      	it	lt
 801e628:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e62c:	f108 0802 	add.w	r8, r8, #2
 801e630:	9305      	str	r3, [sp, #20]
 801e632:	4d33      	ldr	r5, [pc, #204]	; (801e700 <_vfiprintf_r+0x21c>)
 801e634:	f898 1000 	ldrb.w	r1, [r8]
 801e638:	2203      	movs	r2, #3
 801e63a:	4628      	mov	r0, r5
 801e63c:	f7e9 fe18 	bl	8008270 <memchr>
 801e640:	b140      	cbz	r0, 801e654 <_vfiprintf_r+0x170>
 801e642:	2340      	movs	r3, #64	; 0x40
 801e644:	1b40      	subs	r0, r0, r5
 801e646:	fa03 f000 	lsl.w	r0, r3, r0
 801e64a:	9b04      	ldr	r3, [sp, #16]
 801e64c:	4303      	orrs	r3, r0
 801e64e:	f108 0801 	add.w	r8, r8, #1
 801e652:	9304      	str	r3, [sp, #16]
 801e654:	f898 1000 	ldrb.w	r1, [r8]
 801e658:	482a      	ldr	r0, [pc, #168]	; (801e704 <_vfiprintf_r+0x220>)
 801e65a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e65e:	2206      	movs	r2, #6
 801e660:	f108 0701 	add.w	r7, r8, #1
 801e664:	f7e9 fe04 	bl	8008270 <memchr>
 801e668:	2800      	cmp	r0, #0
 801e66a:	d037      	beq.n	801e6dc <_vfiprintf_r+0x1f8>
 801e66c:	4b26      	ldr	r3, [pc, #152]	; (801e708 <_vfiprintf_r+0x224>)
 801e66e:	bb1b      	cbnz	r3, 801e6b8 <_vfiprintf_r+0x1d4>
 801e670:	9b03      	ldr	r3, [sp, #12]
 801e672:	3307      	adds	r3, #7
 801e674:	f023 0307 	bic.w	r3, r3, #7
 801e678:	3308      	adds	r3, #8
 801e67a:	9303      	str	r3, [sp, #12]
 801e67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e67e:	444b      	add	r3, r9
 801e680:	9309      	str	r3, [sp, #36]	; 0x24
 801e682:	e750      	b.n	801e526 <_vfiprintf_r+0x42>
 801e684:	fb05 3202 	mla	r2, r5, r2, r3
 801e688:	2001      	movs	r0, #1
 801e68a:	4688      	mov	r8, r1
 801e68c:	e78a      	b.n	801e5a4 <_vfiprintf_r+0xc0>
 801e68e:	2300      	movs	r3, #0
 801e690:	f108 0801 	add.w	r8, r8, #1
 801e694:	9305      	str	r3, [sp, #20]
 801e696:	4619      	mov	r1, r3
 801e698:	250a      	movs	r5, #10
 801e69a:	4640      	mov	r0, r8
 801e69c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e6a0:	3a30      	subs	r2, #48	; 0x30
 801e6a2:	2a09      	cmp	r2, #9
 801e6a4:	d903      	bls.n	801e6ae <_vfiprintf_r+0x1ca>
 801e6a6:	2b00      	cmp	r3, #0
 801e6a8:	d0c3      	beq.n	801e632 <_vfiprintf_r+0x14e>
 801e6aa:	9105      	str	r1, [sp, #20]
 801e6ac:	e7c1      	b.n	801e632 <_vfiprintf_r+0x14e>
 801e6ae:	fb05 2101 	mla	r1, r5, r1, r2
 801e6b2:	2301      	movs	r3, #1
 801e6b4:	4680      	mov	r8, r0
 801e6b6:	e7f0      	b.n	801e69a <_vfiprintf_r+0x1b6>
 801e6b8:	ab03      	add	r3, sp, #12
 801e6ba:	9300      	str	r3, [sp, #0]
 801e6bc:	4622      	mov	r2, r4
 801e6be:	4b13      	ldr	r3, [pc, #76]	; (801e70c <_vfiprintf_r+0x228>)
 801e6c0:	a904      	add	r1, sp, #16
 801e6c2:	4630      	mov	r0, r6
 801e6c4:	f3af 8000 	nop.w
 801e6c8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801e6cc:	4681      	mov	r9, r0
 801e6ce:	d1d5      	bne.n	801e67c <_vfiprintf_r+0x198>
 801e6d0:	89a3      	ldrh	r3, [r4, #12]
 801e6d2:	065b      	lsls	r3, r3, #25
 801e6d4:	f53f af7e 	bmi.w	801e5d4 <_vfiprintf_r+0xf0>
 801e6d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e6da:	e77d      	b.n	801e5d8 <_vfiprintf_r+0xf4>
 801e6dc:	ab03      	add	r3, sp, #12
 801e6de:	9300      	str	r3, [sp, #0]
 801e6e0:	4622      	mov	r2, r4
 801e6e2:	4b0a      	ldr	r3, [pc, #40]	; (801e70c <_vfiprintf_r+0x228>)
 801e6e4:	a904      	add	r1, sp, #16
 801e6e6:	4630      	mov	r0, r6
 801e6e8:	f000 f888 	bl	801e7fc <_printf_i>
 801e6ec:	e7ec      	b.n	801e6c8 <_vfiprintf_r+0x1e4>
 801e6ee:	bf00      	nop
 801e6f0:	08032980 	.word	0x08032980
 801e6f4:	080329c0 	.word	0x080329c0
 801e6f8:	080329a0 	.word	0x080329a0
 801e6fc:	08032960 	.word	0x08032960
 801e700:	080329c6 	.word	0x080329c6
 801e704:	080329ca 	.word	0x080329ca
 801e708:	00000000 	.word	0x00000000
 801e70c:	0801e4bf 	.word	0x0801e4bf

0801e710 <_printf_common>:
 801e710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e714:	4691      	mov	r9, r2
 801e716:	461f      	mov	r7, r3
 801e718:	688a      	ldr	r2, [r1, #8]
 801e71a:	690b      	ldr	r3, [r1, #16]
 801e71c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e720:	4293      	cmp	r3, r2
 801e722:	bfb8      	it	lt
 801e724:	4613      	movlt	r3, r2
 801e726:	f8c9 3000 	str.w	r3, [r9]
 801e72a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e72e:	4606      	mov	r6, r0
 801e730:	460c      	mov	r4, r1
 801e732:	b112      	cbz	r2, 801e73a <_printf_common+0x2a>
 801e734:	3301      	adds	r3, #1
 801e736:	f8c9 3000 	str.w	r3, [r9]
 801e73a:	6823      	ldr	r3, [r4, #0]
 801e73c:	0699      	lsls	r1, r3, #26
 801e73e:	bf42      	ittt	mi
 801e740:	f8d9 3000 	ldrmi.w	r3, [r9]
 801e744:	3302      	addmi	r3, #2
 801e746:	f8c9 3000 	strmi.w	r3, [r9]
 801e74a:	6825      	ldr	r5, [r4, #0]
 801e74c:	f015 0506 	ands.w	r5, r5, #6
 801e750:	d107      	bne.n	801e762 <_printf_common+0x52>
 801e752:	f104 0a19 	add.w	sl, r4, #25
 801e756:	68e3      	ldr	r3, [r4, #12]
 801e758:	f8d9 2000 	ldr.w	r2, [r9]
 801e75c:	1a9b      	subs	r3, r3, r2
 801e75e:	42ab      	cmp	r3, r5
 801e760:	dc28      	bgt.n	801e7b4 <_printf_common+0xa4>
 801e762:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801e766:	6822      	ldr	r2, [r4, #0]
 801e768:	3300      	adds	r3, #0
 801e76a:	bf18      	it	ne
 801e76c:	2301      	movne	r3, #1
 801e76e:	0692      	lsls	r2, r2, #26
 801e770:	d42d      	bmi.n	801e7ce <_printf_common+0xbe>
 801e772:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e776:	4639      	mov	r1, r7
 801e778:	4630      	mov	r0, r6
 801e77a:	47c0      	blx	r8
 801e77c:	3001      	adds	r0, #1
 801e77e:	d020      	beq.n	801e7c2 <_printf_common+0xb2>
 801e780:	6823      	ldr	r3, [r4, #0]
 801e782:	68e5      	ldr	r5, [r4, #12]
 801e784:	f8d9 2000 	ldr.w	r2, [r9]
 801e788:	f003 0306 	and.w	r3, r3, #6
 801e78c:	2b04      	cmp	r3, #4
 801e78e:	bf08      	it	eq
 801e790:	1aad      	subeq	r5, r5, r2
 801e792:	68a3      	ldr	r3, [r4, #8]
 801e794:	6922      	ldr	r2, [r4, #16]
 801e796:	bf0c      	ite	eq
 801e798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e79c:	2500      	movne	r5, #0
 801e79e:	4293      	cmp	r3, r2
 801e7a0:	bfc4      	itt	gt
 801e7a2:	1a9b      	subgt	r3, r3, r2
 801e7a4:	18ed      	addgt	r5, r5, r3
 801e7a6:	f04f 0900 	mov.w	r9, #0
 801e7aa:	341a      	adds	r4, #26
 801e7ac:	454d      	cmp	r5, r9
 801e7ae:	d11a      	bne.n	801e7e6 <_printf_common+0xd6>
 801e7b0:	2000      	movs	r0, #0
 801e7b2:	e008      	b.n	801e7c6 <_printf_common+0xb6>
 801e7b4:	2301      	movs	r3, #1
 801e7b6:	4652      	mov	r2, sl
 801e7b8:	4639      	mov	r1, r7
 801e7ba:	4630      	mov	r0, r6
 801e7bc:	47c0      	blx	r8
 801e7be:	3001      	adds	r0, #1
 801e7c0:	d103      	bne.n	801e7ca <_printf_common+0xba>
 801e7c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e7ca:	3501      	adds	r5, #1
 801e7cc:	e7c3      	b.n	801e756 <_printf_common+0x46>
 801e7ce:	18e1      	adds	r1, r4, r3
 801e7d0:	1c5a      	adds	r2, r3, #1
 801e7d2:	2030      	movs	r0, #48	; 0x30
 801e7d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e7d8:	4422      	add	r2, r4
 801e7da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e7de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e7e2:	3302      	adds	r3, #2
 801e7e4:	e7c5      	b.n	801e772 <_printf_common+0x62>
 801e7e6:	2301      	movs	r3, #1
 801e7e8:	4622      	mov	r2, r4
 801e7ea:	4639      	mov	r1, r7
 801e7ec:	4630      	mov	r0, r6
 801e7ee:	47c0      	blx	r8
 801e7f0:	3001      	adds	r0, #1
 801e7f2:	d0e6      	beq.n	801e7c2 <_printf_common+0xb2>
 801e7f4:	f109 0901 	add.w	r9, r9, #1
 801e7f8:	e7d8      	b.n	801e7ac <_printf_common+0x9c>
	...

0801e7fc <_printf_i>:
 801e7fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e800:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801e804:	460c      	mov	r4, r1
 801e806:	7e09      	ldrb	r1, [r1, #24]
 801e808:	b085      	sub	sp, #20
 801e80a:	296e      	cmp	r1, #110	; 0x6e
 801e80c:	4617      	mov	r7, r2
 801e80e:	4606      	mov	r6, r0
 801e810:	4698      	mov	r8, r3
 801e812:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e814:	f000 80b3 	beq.w	801e97e <_printf_i+0x182>
 801e818:	d822      	bhi.n	801e860 <_printf_i+0x64>
 801e81a:	2963      	cmp	r1, #99	; 0x63
 801e81c:	d036      	beq.n	801e88c <_printf_i+0x90>
 801e81e:	d80a      	bhi.n	801e836 <_printf_i+0x3a>
 801e820:	2900      	cmp	r1, #0
 801e822:	f000 80b9 	beq.w	801e998 <_printf_i+0x19c>
 801e826:	2958      	cmp	r1, #88	; 0x58
 801e828:	f000 8083 	beq.w	801e932 <_printf_i+0x136>
 801e82c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e830:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801e834:	e032      	b.n	801e89c <_printf_i+0xa0>
 801e836:	2964      	cmp	r1, #100	; 0x64
 801e838:	d001      	beq.n	801e83e <_printf_i+0x42>
 801e83a:	2969      	cmp	r1, #105	; 0x69
 801e83c:	d1f6      	bne.n	801e82c <_printf_i+0x30>
 801e83e:	6820      	ldr	r0, [r4, #0]
 801e840:	6813      	ldr	r3, [r2, #0]
 801e842:	0605      	lsls	r5, r0, #24
 801e844:	f103 0104 	add.w	r1, r3, #4
 801e848:	d52a      	bpl.n	801e8a0 <_printf_i+0xa4>
 801e84a:	681b      	ldr	r3, [r3, #0]
 801e84c:	6011      	str	r1, [r2, #0]
 801e84e:	2b00      	cmp	r3, #0
 801e850:	da03      	bge.n	801e85a <_printf_i+0x5e>
 801e852:	222d      	movs	r2, #45	; 0x2d
 801e854:	425b      	negs	r3, r3
 801e856:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801e85a:	486f      	ldr	r0, [pc, #444]	; (801ea18 <_printf_i+0x21c>)
 801e85c:	220a      	movs	r2, #10
 801e85e:	e039      	b.n	801e8d4 <_printf_i+0xd8>
 801e860:	2973      	cmp	r1, #115	; 0x73
 801e862:	f000 809d 	beq.w	801e9a0 <_printf_i+0x1a4>
 801e866:	d808      	bhi.n	801e87a <_printf_i+0x7e>
 801e868:	296f      	cmp	r1, #111	; 0x6f
 801e86a:	d020      	beq.n	801e8ae <_printf_i+0xb2>
 801e86c:	2970      	cmp	r1, #112	; 0x70
 801e86e:	d1dd      	bne.n	801e82c <_printf_i+0x30>
 801e870:	6823      	ldr	r3, [r4, #0]
 801e872:	f043 0320 	orr.w	r3, r3, #32
 801e876:	6023      	str	r3, [r4, #0]
 801e878:	e003      	b.n	801e882 <_printf_i+0x86>
 801e87a:	2975      	cmp	r1, #117	; 0x75
 801e87c:	d017      	beq.n	801e8ae <_printf_i+0xb2>
 801e87e:	2978      	cmp	r1, #120	; 0x78
 801e880:	d1d4      	bne.n	801e82c <_printf_i+0x30>
 801e882:	2378      	movs	r3, #120	; 0x78
 801e884:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e888:	4864      	ldr	r0, [pc, #400]	; (801ea1c <_printf_i+0x220>)
 801e88a:	e055      	b.n	801e938 <_printf_i+0x13c>
 801e88c:	6813      	ldr	r3, [r2, #0]
 801e88e:	1d19      	adds	r1, r3, #4
 801e890:	681b      	ldr	r3, [r3, #0]
 801e892:	6011      	str	r1, [r2, #0]
 801e894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e89c:	2301      	movs	r3, #1
 801e89e:	e08c      	b.n	801e9ba <_printf_i+0x1be>
 801e8a0:	681b      	ldr	r3, [r3, #0]
 801e8a2:	6011      	str	r1, [r2, #0]
 801e8a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e8a8:	bf18      	it	ne
 801e8aa:	b21b      	sxthne	r3, r3
 801e8ac:	e7cf      	b.n	801e84e <_printf_i+0x52>
 801e8ae:	6813      	ldr	r3, [r2, #0]
 801e8b0:	6825      	ldr	r5, [r4, #0]
 801e8b2:	1d18      	adds	r0, r3, #4
 801e8b4:	6010      	str	r0, [r2, #0]
 801e8b6:	0628      	lsls	r0, r5, #24
 801e8b8:	d501      	bpl.n	801e8be <_printf_i+0xc2>
 801e8ba:	681b      	ldr	r3, [r3, #0]
 801e8bc:	e002      	b.n	801e8c4 <_printf_i+0xc8>
 801e8be:	0668      	lsls	r0, r5, #25
 801e8c0:	d5fb      	bpl.n	801e8ba <_printf_i+0xbe>
 801e8c2:	881b      	ldrh	r3, [r3, #0]
 801e8c4:	4854      	ldr	r0, [pc, #336]	; (801ea18 <_printf_i+0x21c>)
 801e8c6:	296f      	cmp	r1, #111	; 0x6f
 801e8c8:	bf14      	ite	ne
 801e8ca:	220a      	movne	r2, #10
 801e8cc:	2208      	moveq	r2, #8
 801e8ce:	2100      	movs	r1, #0
 801e8d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e8d4:	6865      	ldr	r5, [r4, #4]
 801e8d6:	60a5      	str	r5, [r4, #8]
 801e8d8:	2d00      	cmp	r5, #0
 801e8da:	f2c0 8095 	blt.w	801ea08 <_printf_i+0x20c>
 801e8de:	6821      	ldr	r1, [r4, #0]
 801e8e0:	f021 0104 	bic.w	r1, r1, #4
 801e8e4:	6021      	str	r1, [r4, #0]
 801e8e6:	2b00      	cmp	r3, #0
 801e8e8:	d13d      	bne.n	801e966 <_printf_i+0x16a>
 801e8ea:	2d00      	cmp	r5, #0
 801e8ec:	f040 808e 	bne.w	801ea0c <_printf_i+0x210>
 801e8f0:	4665      	mov	r5, ip
 801e8f2:	2a08      	cmp	r2, #8
 801e8f4:	d10b      	bne.n	801e90e <_printf_i+0x112>
 801e8f6:	6823      	ldr	r3, [r4, #0]
 801e8f8:	07db      	lsls	r3, r3, #31
 801e8fa:	d508      	bpl.n	801e90e <_printf_i+0x112>
 801e8fc:	6923      	ldr	r3, [r4, #16]
 801e8fe:	6862      	ldr	r2, [r4, #4]
 801e900:	429a      	cmp	r2, r3
 801e902:	bfde      	ittt	le
 801e904:	2330      	movle	r3, #48	; 0x30
 801e906:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e90a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801e90e:	ebac 0305 	sub.w	r3, ip, r5
 801e912:	6123      	str	r3, [r4, #16]
 801e914:	f8cd 8000 	str.w	r8, [sp]
 801e918:	463b      	mov	r3, r7
 801e91a:	aa03      	add	r2, sp, #12
 801e91c:	4621      	mov	r1, r4
 801e91e:	4630      	mov	r0, r6
 801e920:	f7ff fef6 	bl	801e710 <_printf_common>
 801e924:	3001      	adds	r0, #1
 801e926:	d14d      	bne.n	801e9c4 <_printf_i+0x1c8>
 801e928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e92c:	b005      	add	sp, #20
 801e92e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e932:	4839      	ldr	r0, [pc, #228]	; (801ea18 <_printf_i+0x21c>)
 801e934:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801e938:	6813      	ldr	r3, [r2, #0]
 801e93a:	6821      	ldr	r1, [r4, #0]
 801e93c:	1d1d      	adds	r5, r3, #4
 801e93e:	681b      	ldr	r3, [r3, #0]
 801e940:	6015      	str	r5, [r2, #0]
 801e942:	060a      	lsls	r2, r1, #24
 801e944:	d50b      	bpl.n	801e95e <_printf_i+0x162>
 801e946:	07ca      	lsls	r2, r1, #31
 801e948:	bf44      	itt	mi
 801e94a:	f041 0120 	orrmi.w	r1, r1, #32
 801e94e:	6021      	strmi	r1, [r4, #0]
 801e950:	b91b      	cbnz	r3, 801e95a <_printf_i+0x15e>
 801e952:	6822      	ldr	r2, [r4, #0]
 801e954:	f022 0220 	bic.w	r2, r2, #32
 801e958:	6022      	str	r2, [r4, #0]
 801e95a:	2210      	movs	r2, #16
 801e95c:	e7b7      	b.n	801e8ce <_printf_i+0xd2>
 801e95e:	064d      	lsls	r5, r1, #25
 801e960:	bf48      	it	mi
 801e962:	b29b      	uxthmi	r3, r3
 801e964:	e7ef      	b.n	801e946 <_printf_i+0x14a>
 801e966:	4665      	mov	r5, ip
 801e968:	fbb3 f1f2 	udiv	r1, r3, r2
 801e96c:	fb02 3311 	mls	r3, r2, r1, r3
 801e970:	5cc3      	ldrb	r3, [r0, r3]
 801e972:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801e976:	460b      	mov	r3, r1
 801e978:	2900      	cmp	r1, #0
 801e97a:	d1f5      	bne.n	801e968 <_printf_i+0x16c>
 801e97c:	e7b9      	b.n	801e8f2 <_printf_i+0xf6>
 801e97e:	6813      	ldr	r3, [r2, #0]
 801e980:	6825      	ldr	r5, [r4, #0]
 801e982:	6961      	ldr	r1, [r4, #20]
 801e984:	1d18      	adds	r0, r3, #4
 801e986:	6010      	str	r0, [r2, #0]
 801e988:	0628      	lsls	r0, r5, #24
 801e98a:	681b      	ldr	r3, [r3, #0]
 801e98c:	d501      	bpl.n	801e992 <_printf_i+0x196>
 801e98e:	6019      	str	r1, [r3, #0]
 801e990:	e002      	b.n	801e998 <_printf_i+0x19c>
 801e992:	066a      	lsls	r2, r5, #25
 801e994:	d5fb      	bpl.n	801e98e <_printf_i+0x192>
 801e996:	8019      	strh	r1, [r3, #0]
 801e998:	2300      	movs	r3, #0
 801e99a:	6123      	str	r3, [r4, #16]
 801e99c:	4665      	mov	r5, ip
 801e99e:	e7b9      	b.n	801e914 <_printf_i+0x118>
 801e9a0:	6813      	ldr	r3, [r2, #0]
 801e9a2:	1d19      	adds	r1, r3, #4
 801e9a4:	6011      	str	r1, [r2, #0]
 801e9a6:	681d      	ldr	r5, [r3, #0]
 801e9a8:	6862      	ldr	r2, [r4, #4]
 801e9aa:	2100      	movs	r1, #0
 801e9ac:	4628      	mov	r0, r5
 801e9ae:	f7e9 fc5f 	bl	8008270 <memchr>
 801e9b2:	b108      	cbz	r0, 801e9b8 <_printf_i+0x1bc>
 801e9b4:	1b40      	subs	r0, r0, r5
 801e9b6:	6060      	str	r0, [r4, #4]
 801e9b8:	6863      	ldr	r3, [r4, #4]
 801e9ba:	6123      	str	r3, [r4, #16]
 801e9bc:	2300      	movs	r3, #0
 801e9be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e9c2:	e7a7      	b.n	801e914 <_printf_i+0x118>
 801e9c4:	6923      	ldr	r3, [r4, #16]
 801e9c6:	462a      	mov	r2, r5
 801e9c8:	4639      	mov	r1, r7
 801e9ca:	4630      	mov	r0, r6
 801e9cc:	47c0      	blx	r8
 801e9ce:	3001      	adds	r0, #1
 801e9d0:	d0aa      	beq.n	801e928 <_printf_i+0x12c>
 801e9d2:	6823      	ldr	r3, [r4, #0]
 801e9d4:	079b      	lsls	r3, r3, #30
 801e9d6:	d413      	bmi.n	801ea00 <_printf_i+0x204>
 801e9d8:	68e0      	ldr	r0, [r4, #12]
 801e9da:	9b03      	ldr	r3, [sp, #12]
 801e9dc:	4298      	cmp	r0, r3
 801e9de:	bfb8      	it	lt
 801e9e0:	4618      	movlt	r0, r3
 801e9e2:	e7a3      	b.n	801e92c <_printf_i+0x130>
 801e9e4:	2301      	movs	r3, #1
 801e9e6:	464a      	mov	r2, r9
 801e9e8:	4639      	mov	r1, r7
 801e9ea:	4630      	mov	r0, r6
 801e9ec:	47c0      	blx	r8
 801e9ee:	3001      	adds	r0, #1
 801e9f0:	d09a      	beq.n	801e928 <_printf_i+0x12c>
 801e9f2:	3501      	adds	r5, #1
 801e9f4:	68e3      	ldr	r3, [r4, #12]
 801e9f6:	9a03      	ldr	r2, [sp, #12]
 801e9f8:	1a9b      	subs	r3, r3, r2
 801e9fa:	42ab      	cmp	r3, r5
 801e9fc:	dcf2      	bgt.n	801e9e4 <_printf_i+0x1e8>
 801e9fe:	e7eb      	b.n	801e9d8 <_printf_i+0x1dc>
 801ea00:	2500      	movs	r5, #0
 801ea02:	f104 0919 	add.w	r9, r4, #25
 801ea06:	e7f5      	b.n	801e9f4 <_printf_i+0x1f8>
 801ea08:	2b00      	cmp	r3, #0
 801ea0a:	d1ac      	bne.n	801e966 <_printf_i+0x16a>
 801ea0c:	7803      	ldrb	r3, [r0, #0]
 801ea0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ea12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ea16:	e76c      	b.n	801e8f2 <_printf_i+0xf6>
 801ea18:	080329d1 	.word	0x080329d1
 801ea1c:	080329e2 	.word	0x080329e2

0801ea20 <_sbrk_r>:
 801ea20:	b538      	push	{r3, r4, r5, lr}
 801ea22:	4c06      	ldr	r4, [pc, #24]	; (801ea3c <_sbrk_r+0x1c>)
 801ea24:	2300      	movs	r3, #0
 801ea26:	4605      	mov	r5, r0
 801ea28:	4608      	mov	r0, r1
 801ea2a:	6023      	str	r3, [r4, #0]
 801ea2c:	f7ea fdae 	bl	800958c <_sbrk>
 801ea30:	1c43      	adds	r3, r0, #1
 801ea32:	d102      	bne.n	801ea3a <_sbrk_r+0x1a>
 801ea34:	6823      	ldr	r3, [r4, #0]
 801ea36:	b103      	cbz	r3, 801ea3a <_sbrk_r+0x1a>
 801ea38:	602b      	str	r3, [r5, #0]
 801ea3a:	bd38      	pop	{r3, r4, r5, pc}
 801ea3c:	2000b524 	.word	0x2000b524

0801ea40 <__sread>:
 801ea40:	b510      	push	{r4, lr}
 801ea42:	460c      	mov	r4, r1
 801ea44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea48:	f000 fa48 	bl	801eedc <_read_r>
 801ea4c:	2800      	cmp	r0, #0
 801ea4e:	bfab      	itete	ge
 801ea50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ea52:	89a3      	ldrhlt	r3, [r4, #12]
 801ea54:	181b      	addge	r3, r3, r0
 801ea56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ea5a:	bfac      	ite	ge
 801ea5c:	6563      	strge	r3, [r4, #84]	; 0x54
 801ea5e:	81a3      	strhlt	r3, [r4, #12]
 801ea60:	bd10      	pop	{r4, pc}

0801ea62 <__swrite>:
 801ea62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea66:	461f      	mov	r7, r3
 801ea68:	898b      	ldrh	r3, [r1, #12]
 801ea6a:	05db      	lsls	r3, r3, #23
 801ea6c:	4605      	mov	r5, r0
 801ea6e:	460c      	mov	r4, r1
 801ea70:	4616      	mov	r6, r2
 801ea72:	d505      	bpl.n	801ea80 <__swrite+0x1e>
 801ea74:	2302      	movs	r3, #2
 801ea76:	2200      	movs	r2, #0
 801ea78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea7c:	f000 f9b6 	bl	801edec <_lseek_r>
 801ea80:	89a3      	ldrh	r3, [r4, #12]
 801ea82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ea86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ea8a:	81a3      	strh	r3, [r4, #12]
 801ea8c:	4632      	mov	r2, r6
 801ea8e:	463b      	mov	r3, r7
 801ea90:	4628      	mov	r0, r5
 801ea92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ea96:	f000 b869 	b.w	801eb6c <_write_r>

0801ea9a <__sseek>:
 801ea9a:	b510      	push	{r4, lr}
 801ea9c:	460c      	mov	r4, r1
 801ea9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eaa2:	f000 f9a3 	bl	801edec <_lseek_r>
 801eaa6:	1c43      	adds	r3, r0, #1
 801eaa8:	89a3      	ldrh	r3, [r4, #12]
 801eaaa:	bf15      	itete	ne
 801eaac:	6560      	strne	r0, [r4, #84]	; 0x54
 801eaae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801eab2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801eab6:	81a3      	strheq	r3, [r4, #12]
 801eab8:	bf18      	it	ne
 801eaba:	81a3      	strhne	r3, [r4, #12]
 801eabc:	bd10      	pop	{r4, pc}

0801eabe <__sclose>:
 801eabe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eac2:	f000 b8d3 	b.w	801ec6c <_close_r>
	...

0801eac8 <__swbuf_r>:
 801eac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eaca:	460e      	mov	r6, r1
 801eacc:	4614      	mov	r4, r2
 801eace:	4605      	mov	r5, r0
 801ead0:	b118      	cbz	r0, 801eada <__swbuf_r+0x12>
 801ead2:	6983      	ldr	r3, [r0, #24]
 801ead4:	b90b      	cbnz	r3, 801eada <__swbuf_r+0x12>
 801ead6:	f7ff fba1 	bl	801e21c <__sinit>
 801eada:	4b21      	ldr	r3, [pc, #132]	; (801eb60 <__swbuf_r+0x98>)
 801eadc:	429c      	cmp	r4, r3
 801eade:	d12a      	bne.n	801eb36 <__swbuf_r+0x6e>
 801eae0:	686c      	ldr	r4, [r5, #4]
 801eae2:	69a3      	ldr	r3, [r4, #24]
 801eae4:	60a3      	str	r3, [r4, #8]
 801eae6:	89a3      	ldrh	r3, [r4, #12]
 801eae8:	071a      	lsls	r2, r3, #28
 801eaea:	d52e      	bpl.n	801eb4a <__swbuf_r+0x82>
 801eaec:	6923      	ldr	r3, [r4, #16]
 801eaee:	b363      	cbz	r3, 801eb4a <__swbuf_r+0x82>
 801eaf0:	6923      	ldr	r3, [r4, #16]
 801eaf2:	6820      	ldr	r0, [r4, #0]
 801eaf4:	1ac0      	subs	r0, r0, r3
 801eaf6:	6963      	ldr	r3, [r4, #20]
 801eaf8:	b2f6      	uxtb	r6, r6
 801eafa:	4283      	cmp	r3, r0
 801eafc:	4637      	mov	r7, r6
 801eafe:	dc04      	bgt.n	801eb0a <__swbuf_r+0x42>
 801eb00:	4621      	mov	r1, r4
 801eb02:	4628      	mov	r0, r5
 801eb04:	f000 f948 	bl	801ed98 <_fflush_r>
 801eb08:	bb28      	cbnz	r0, 801eb56 <__swbuf_r+0x8e>
 801eb0a:	68a3      	ldr	r3, [r4, #8]
 801eb0c:	3b01      	subs	r3, #1
 801eb0e:	60a3      	str	r3, [r4, #8]
 801eb10:	6823      	ldr	r3, [r4, #0]
 801eb12:	1c5a      	adds	r2, r3, #1
 801eb14:	6022      	str	r2, [r4, #0]
 801eb16:	701e      	strb	r6, [r3, #0]
 801eb18:	6963      	ldr	r3, [r4, #20]
 801eb1a:	3001      	adds	r0, #1
 801eb1c:	4283      	cmp	r3, r0
 801eb1e:	d004      	beq.n	801eb2a <__swbuf_r+0x62>
 801eb20:	89a3      	ldrh	r3, [r4, #12]
 801eb22:	07db      	lsls	r3, r3, #31
 801eb24:	d519      	bpl.n	801eb5a <__swbuf_r+0x92>
 801eb26:	2e0a      	cmp	r6, #10
 801eb28:	d117      	bne.n	801eb5a <__swbuf_r+0x92>
 801eb2a:	4621      	mov	r1, r4
 801eb2c:	4628      	mov	r0, r5
 801eb2e:	f000 f933 	bl	801ed98 <_fflush_r>
 801eb32:	b190      	cbz	r0, 801eb5a <__swbuf_r+0x92>
 801eb34:	e00f      	b.n	801eb56 <__swbuf_r+0x8e>
 801eb36:	4b0b      	ldr	r3, [pc, #44]	; (801eb64 <__swbuf_r+0x9c>)
 801eb38:	429c      	cmp	r4, r3
 801eb3a:	d101      	bne.n	801eb40 <__swbuf_r+0x78>
 801eb3c:	68ac      	ldr	r4, [r5, #8]
 801eb3e:	e7d0      	b.n	801eae2 <__swbuf_r+0x1a>
 801eb40:	4b09      	ldr	r3, [pc, #36]	; (801eb68 <__swbuf_r+0xa0>)
 801eb42:	429c      	cmp	r4, r3
 801eb44:	bf08      	it	eq
 801eb46:	68ec      	ldreq	r4, [r5, #12]
 801eb48:	e7cb      	b.n	801eae2 <__swbuf_r+0x1a>
 801eb4a:	4621      	mov	r1, r4
 801eb4c:	4628      	mov	r0, r5
 801eb4e:	f000 f81f 	bl	801eb90 <__swsetup_r>
 801eb52:	2800      	cmp	r0, #0
 801eb54:	d0cc      	beq.n	801eaf0 <__swbuf_r+0x28>
 801eb56:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801eb5a:	4638      	mov	r0, r7
 801eb5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eb5e:	bf00      	nop
 801eb60:	08032980 	.word	0x08032980
 801eb64:	080329a0 	.word	0x080329a0
 801eb68:	08032960 	.word	0x08032960

0801eb6c <_write_r>:
 801eb6c:	b538      	push	{r3, r4, r5, lr}
 801eb6e:	4c07      	ldr	r4, [pc, #28]	; (801eb8c <_write_r+0x20>)
 801eb70:	4605      	mov	r5, r0
 801eb72:	4608      	mov	r0, r1
 801eb74:	4611      	mov	r1, r2
 801eb76:	2200      	movs	r2, #0
 801eb78:	6022      	str	r2, [r4, #0]
 801eb7a:	461a      	mov	r2, r3
 801eb7c:	f7ea fcb5 	bl	80094ea <_write>
 801eb80:	1c43      	adds	r3, r0, #1
 801eb82:	d102      	bne.n	801eb8a <_write_r+0x1e>
 801eb84:	6823      	ldr	r3, [r4, #0]
 801eb86:	b103      	cbz	r3, 801eb8a <_write_r+0x1e>
 801eb88:	602b      	str	r3, [r5, #0]
 801eb8a:	bd38      	pop	{r3, r4, r5, pc}
 801eb8c:	2000b524 	.word	0x2000b524

0801eb90 <__swsetup_r>:
 801eb90:	4b32      	ldr	r3, [pc, #200]	; (801ec5c <__swsetup_r+0xcc>)
 801eb92:	b570      	push	{r4, r5, r6, lr}
 801eb94:	681d      	ldr	r5, [r3, #0]
 801eb96:	4606      	mov	r6, r0
 801eb98:	460c      	mov	r4, r1
 801eb9a:	b125      	cbz	r5, 801eba6 <__swsetup_r+0x16>
 801eb9c:	69ab      	ldr	r3, [r5, #24]
 801eb9e:	b913      	cbnz	r3, 801eba6 <__swsetup_r+0x16>
 801eba0:	4628      	mov	r0, r5
 801eba2:	f7ff fb3b 	bl	801e21c <__sinit>
 801eba6:	4b2e      	ldr	r3, [pc, #184]	; (801ec60 <__swsetup_r+0xd0>)
 801eba8:	429c      	cmp	r4, r3
 801ebaa:	d10f      	bne.n	801ebcc <__swsetup_r+0x3c>
 801ebac:	686c      	ldr	r4, [r5, #4]
 801ebae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ebb2:	b29a      	uxth	r2, r3
 801ebb4:	0715      	lsls	r5, r2, #28
 801ebb6:	d42c      	bmi.n	801ec12 <__swsetup_r+0x82>
 801ebb8:	06d0      	lsls	r0, r2, #27
 801ebba:	d411      	bmi.n	801ebe0 <__swsetup_r+0x50>
 801ebbc:	2209      	movs	r2, #9
 801ebbe:	6032      	str	r2, [r6, #0]
 801ebc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ebc4:	81a3      	strh	r3, [r4, #12]
 801ebc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ebca:	e03e      	b.n	801ec4a <__swsetup_r+0xba>
 801ebcc:	4b25      	ldr	r3, [pc, #148]	; (801ec64 <__swsetup_r+0xd4>)
 801ebce:	429c      	cmp	r4, r3
 801ebd0:	d101      	bne.n	801ebd6 <__swsetup_r+0x46>
 801ebd2:	68ac      	ldr	r4, [r5, #8]
 801ebd4:	e7eb      	b.n	801ebae <__swsetup_r+0x1e>
 801ebd6:	4b24      	ldr	r3, [pc, #144]	; (801ec68 <__swsetup_r+0xd8>)
 801ebd8:	429c      	cmp	r4, r3
 801ebda:	bf08      	it	eq
 801ebdc:	68ec      	ldreq	r4, [r5, #12]
 801ebde:	e7e6      	b.n	801ebae <__swsetup_r+0x1e>
 801ebe0:	0751      	lsls	r1, r2, #29
 801ebe2:	d512      	bpl.n	801ec0a <__swsetup_r+0x7a>
 801ebe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ebe6:	b141      	cbz	r1, 801ebfa <__swsetup_r+0x6a>
 801ebe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ebec:	4299      	cmp	r1, r3
 801ebee:	d002      	beq.n	801ebf6 <__swsetup_r+0x66>
 801ebf0:	4630      	mov	r0, r6
 801ebf2:	f7ff fba5 	bl	801e340 <_free_r>
 801ebf6:	2300      	movs	r3, #0
 801ebf8:	6363      	str	r3, [r4, #52]	; 0x34
 801ebfa:	89a3      	ldrh	r3, [r4, #12]
 801ebfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ec00:	81a3      	strh	r3, [r4, #12]
 801ec02:	2300      	movs	r3, #0
 801ec04:	6063      	str	r3, [r4, #4]
 801ec06:	6923      	ldr	r3, [r4, #16]
 801ec08:	6023      	str	r3, [r4, #0]
 801ec0a:	89a3      	ldrh	r3, [r4, #12]
 801ec0c:	f043 0308 	orr.w	r3, r3, #8
 801ec10:	81a3      	strh	r3, [r4, #12]
 801ec12:	6923      	ldr	r3, [r4, #16]
 801ec14:	b94b      	cbnz	r3, 801ec2a <__swsetup_r+0x9a>
 801ec16:	89a3      	ldrh	r3, [r4, #12]
 801ec18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ec1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ec20:	d003      	beq.n	801ec2a <__swsetup_r+0x9a>
 801ec22:	4621      	mov	r1, r4
 801ec24:	4630      	mov	r0, r6
 801ec26:	f000 f917 	bl	801ee58 <__smakebuf_r>
 801ec2a:	89a2      	ldrh	r2, [r4, #12]
 801ec2c:	f012 0301 	ands.w	r3, r2, #1
 801ec30:	d00c      	beq.n	801ec4c <__swsetup_r+0xbc>
 801ec32:	2300      	movs	r3, #0
 801ec34:	60a3      	str	r3, [r4, #8]
 801ec36:	6963      	ldr	r3, [r4, #20]
 801ec38:	425b      	negs	r3, r3
 801ec3a:	61a3      	str	r3, [r4, #24]
 801ec3c:	6923      	ldr	r3, [r4, #16]
 801ec3e:	b953      	cbnz	r3, 801ec56 <__swsetup_r+0xc6>
 801ec40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ec44:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801ec48:	d1ba      	bne.n	801ebc0 <__swsetup_r+0x30>
 801ec4a:	bd70      	pop	{r4, r5, r6, pc}
 801ec4c:	0792      	lsls	r2, r2, #30
 801ec4e:	bf58      	it	pl
 801ec50:	6963      	ldrpl	r3, [r4, #20]
 801ec52:	60a3      	str	r3, [r4, #8]
 801ec54:	e7f2      	b.n	801ec3c <__swsetup_r+0xac>
 801ec56:	2000      	movs	r0, #0
 801ec58:	e7f7      	b.n	801ec4a <__swsetup_r+0xba>
 801ec5a:	bf00      	nop
 801ec5c:	2000005c 	.word	0x2000005c
 801ec60:	08032980 	.word	0x08032980
 801ec64:	080329a0 	.word	0x080329a0
 801ec68:	08032960 	.word	0x08032960

0801ec6c <_close_r>:
 801ec6c:	b538      	push	{r3, r4, r5, lr}
 801ec6e:	4c06      	ldr	r4, [pc, #24]	; (801ec88 <_close_r+0x1c>)
 801ec70:	2300      	movs	r3, #0
 801ec72:	4605      	mov	r5, r0
 801ec74:	4608      	mov	r0, r1
 801ec76:	6023      	str	r3, [r4, #0]
 801ec78:	f7ea fc53 	bl	8009522 <_close>
 801ec7c:	1c43      	adds	r3, r0, #1
 801ec7e:	d102      	bne.n	801ec86 <_close_r+0x1a>
 801ec80:	6823      	ldr	r3, [r4, #0]
 801ec82:	b103      	cbz	r3, 801ec86 <_close_r+0x1a>
 801ec84:	602b      	str	r3, [r5, #0]
 801ec86:	bd38      	pop	{r3, r4, r5, pc}
 801ec88:	2000b524 	.word	0x2000b524

0801ec8c <__sflush_r>:
 801ec8c:	898a      	ldrh	r2, [r1, #12]
 801ec8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec92:	4605      	mov	r5, r0
 801ec94:	0710      	lsls	r0, r2, #28
 801ec96:	460c      	mov	r4, r1
 801ec98:	d458      	bmi.n	801ed4c <__sflush_r+0xc0>
 801ec9a:	684b      	ldr	r3, [r1, #4]
 801ec9c:	2b00      	cmp	r3, #0
 801ec9e:	dc05      	bgt.n	801ecac <__sflush_r+0x20>
 801eca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801eca2:	2b00      	cmp	r3, #0
 801eca4:	dc02      	bgt.n	801ecac <__sflush_r+0x20>
 801eca6:	2000      	movs	r0, #0
 801eca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ecac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ecae:	2e00      	cmp	r6, #0
 801ecb0:	d0f9      	beq.n	801eca6 <__sflush_r+0x1a>
 801ecb2:	2300      	movs	r3, #0
 801ecb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ecb8:	682f      	ldr	r7, [r5, #0]
 801ecba:	6a21      	ldr	r1, [r4, #32]
 801ecbc:	602b      	str	r3, [r5, #0]
 801ecbe:	d032      	beq.n	801ed26 <__sflush_r+0x9a>
 801ecc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ecc2:	89a3      	ldrh	r3, [r4, #12]
 801ecc4:	075a      	lsls	r2, r3, #29
 801ecc6:	d505      	bpl.n	801ecd4 <__sflush_r+0x48>
 801ecc8:	6863      	ldr	r3, [r4, #4]
 801ecca:	1ac0      	subs	r0, r0, r3
 801eccc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ecce:	b10b      	cbz	r3, 801ecd4 <__sflush_r+0x48>
 801ecd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ecd2:	1ac0      	subs	r0, r0, r3
 801ecd4:	2300      	movs	r3, #0
 801ecd6:	4602      	mov	r2, r0
 801ecd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ecda:	6a21      	ldr	r1, [r4, #32]
 801ecdc:	4628      	mov	r0, r5
 801ecde:	47b0      	blx	r6
 801ece0:	1c43      	adds	r3, r0, #1
 801ece2:	89a3      	ldrh	r3, [r4, #12]
 801ece4:	d106      	bne.n	801ecf4 <__sflush_r+0x68>
 801ece6:	6829      	ldr	r1, [r5, #0]
 801ece8:	291d      	cmp	r1, #29
 801ecea:	d848      	bhi.n	801ed7e <__sflush_r+0xf2>
 801ecec:	4a29      	ldr	r2, [pc, #164]	; (801ed94 <__sflush_r+0x108>)
 801ecee:	40ca      	lsrs	r2, r1
 801ecf0:	07d6      	lsls	r6, r2, #31
 801ecf2:	d544      	bpl.n	801ed7e <__sflush_r+0xf2>
 801ecf4:	2200      	movs	r2, #0
 801ecf6:	6062      	str	r2, [r4, #4]
 801ecf8:	04d9      	lsls	r1, r3, #19
 801ecfa:	6922      	ldr	r2, [r4, #16]
 801ecfc:	6022      	str	r2, [r4, #0]
 801ecfe:	d504      	bpl.n	801ed0a <__sflush_r+0x7e>
 801ed00:	1c42      	adds	r2, r0, #1
 801ed02:	d101      	bne.n	801ed08 <__sflush_r+0x7c>
 801ed04:	682b      	ldr	r3, [r5, #0]
 801ed06:	b903      	cbnz	r3, 801ed0a <__sflush_r+0x7e>
 801ed08:	6560      	str	r0, [r4, #84]	; 0x54
 801ed0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ed0c:	602f      	str	r7, [r5, #0]
 801ed0e:	2900      	cmp	r1, #0
 801ed10:	d0c9      	beq.n	801eca6 <__sflush_r+0x1a>
 801ed12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ed16:	4299      	cmp	r1, r3
 801ed18:	d002      	beq.n	801ed20 <__sflush_r+0x94>
 801ed1a:	4628      	mov	r0, r5
 801ed1c:	f7ff fb10 	bl	801e340 <_free_r>
 801ed20:	2000      	movs	r0, #0
 801ed22:	6360      	str	r0, [r4, #52]	; 0x34
 801ed24:	e7c0      	b.n	801eca8 <__sflush_r+0x1c>
 801ed26:	2301      	movs	r3, #1
 801ed28:	4628      	mov	r0, r5
 801ed2a:	47b0      	blx	r6
 801ed2c:	1c41      	adds	r1, r0, #1
 801ed2e:	d1c8      	bne.n	801ecc2 <__sflush_r+0x36>
 801ed30:	682b      	ldr	r3, [r5, #0]
 801ed32:	2b00      	cmp	r3, #0
 801ed34:	d0c5      	beq.n	801ecc2 <__sflush_r+0x36>
 801ed36:	2b1d      	cmp	r3, #29
 801ed38:	d001      	beq.n	801ed3e <__sflush_r+0xb2>
 801ed3a:	2b16      	cmp	r3, #22
 801ed3c:	d101      	bne.n	801ed42 <__sflush_r+0xb6>
 801ed3e:	602f      	str	r7, [r5, #0]
 801ed40:	e7b1      	b.n	801eca6 <__sflush_r+0x1a>
 801ed42:	89a3      	ldrh	r3, [r4, #12]
 801ed44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ed48:	81a3      	strh	r3, [r4, #12]
 801ed4a:	e7ad      	b.n	801eca8 <__sflush_r+0x1c>
 801ed4c:	690f      	ldr	r7, [r1, #16]
 801ed4e:	2f00      	cmp	r7, #0
 801ed50:	d0a9      	beq.n	801eca6 <__sflush_r+0x1a>
 801ed52:	0793      	lsls	r3, r2, #30
 801ed54:	680e      	ldr	r6, [r1, #0]
 801ed56:	bf08      	it	eq
 801ed58:	694b      	ldreq	r3, [r1, #20]
 801ed5a:	600f      	str	r7, [r1, #0]
 801ed5c:	bf18      	it	ne
 801ed5e:	2300      	movne	r3, #0
 801ed60:	eba6 0807 	sub.w	r8, r6, r7
 801ed64:	608b      	str	r3, [r1, #8]
 801ed66:	f1b8 0f00 	cmp.w	r8, #0
 801ed6a:	dd9c      	ble.n	801eca6 <__sflush_r+0x1a>
 801ed6c:	4643      	mov	r3, r8
 801ed6e:	463a      	mov	r2, r7
 801ed70:	6a21      	ldr	r1, [r4, #32]
 801ed72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ed74:	4628      	mov	r0, r5
 801ed76:	47b0      	blx	r6
 801ed78:	2800      	cmp	r0, #0
 801ed7a:	dc06      	bgt.n	801ed8a <__sflush_r+0xfe>
 801ed7c:	89a3      	ldrh	r3, [r4, #12]
 801ed7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ed82:	81a3      	strh	r3, [r4, #12]
 801ed84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ed88:	e78e      	b.n	801eca8 <__sflush_r+0x1c>
 801ed8a:	4407      	add	r7, r0
 801ed8c:	eba8 0800 	sub.w	r8, r8, r0
 801ed90:	e7e9      	b.n	801ed66 <__sflush_r+0xda>
 801ed92:	bf00      	nop
 801ed94:	20400001 	.word	0x20400001

0801ed98 <_fflush_r>:
 801ed98:	b538      	push	{r3, r4, r5, lr}
 801ed9a:	690b      	ldr	r3, [r1, #16]
 801ed9c:	4605      	mov	r5, r0
 801ed9e:	460c      	mov	r4, r1
 801eda0:	b1db      	cbz	r3, 801edda <_fflush_r+0x42>
 801eda2:	b118      	cbz	r0, 801edac <_fflush_r+0x14>
 801eda4:	6983      	ldr	r3, [r0, #24]
 801eda6:	b90b      	cbnz	r3, 801edac <_fflush_r+0x14>
 801eda8:	f7ff fa38 	bl	801e21c <__sinit>
 801edac:	4b0c      	ldr	r3, [pc, #48]	; (801ede0 <_fflush_r+0x48>)
 801edae:	429c      	cmp	r4, r3
 801edb0:	d109      	bne.n	801edc6 <_fflush_r+0x2e>
 801edb2:	686c      	ldr	r4, [r5, #4]
 801edb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801edb8:	b17b      	cbz	r3, 801edda <_fflush_r+0x42>
 801edba:	4621      	mov	r1, r4
 801edbc:	4628      	mov	r0, r5
 801edbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801edc2:	f7ff bf63 	b.w	801ec8c <__sflush_r>
 801edc6:	4b07      	ldr	r3, [pc, #28]	; (801ede4 <_fflush_r+0x4c>)
 801edc8:	429c      	cmp	r4, r3
 801edca:	d101      	bne.n	801edd0 <_fflush_r+0x38>
 801edcc:	68ac      	ldr	r4, [r5, #8]
 801edce:	e7f1      	b.n	801edb4 <_fflush_r+0x1c>
 801edd0:	4b05      	ldr	r3, [pc, #20]	; (801ede8 <_fflush_r+0x50>)
 801edd2:	429c      	cmp	r4, r3
 801edd4:	bf08      	it	eq
 801edd6:	68ec      	ldreq	r4, [r5, #12]
 801edd8:	e7ec      	b.n	801edb4 <_fflush_r+0x1c>
 801edda:	2000      	movs	r0, #0
 801eddc:	bd38      	pop	{r3, r4, r5, pc}
 801edde:	bf00      	nop
 801ede0:	08032980 	.word	0x08032980
 801ede4:	080329a0 	.word	0x080329a0
 801ede8:	08032960 	.word	0x08032960

0801edec <_lseek_r>:
 801edec:	b538      	push	{r3, r4, r5, lr}
 801edee:	4c07      	ldr	r4, [pc, #28]	; (801ee0c <_lseek_r+0x20>)
 801edf0:	4605      	mov	r5, r0
 801edf2:	4608      	mov	r0, r1
 801edf4:	4611      	mov	r1, r2
 801edf6:	2200      	movs	r2, #0
 801edf8:	6022      	str	r2, [r4, #0]
 801edfa:	461a      	mov	r2, r3
 801edfc:	f7ea fbb8 	bl	8009570 <_lseek>
 801ee00:	1c43      	adds	r3, r0, #1
 801ee02:	d102      	bne.n	801ee0a <_lseek_r+0x1e>
 801ee04:	6823      	ldr	r3, [r4, #0]
 801ee06:	b103      	cbz	r3, 801ee0a <_lseek_r+0x1e>
 801ee08:	602b      	str	r3, [r5, #0]
 801ee0a:	bd38      	pop	{r3, r4, r5, pc}
 801ee0c:	2000b524 	.word	0x2000b524

0801ee10 <__swhatbuf_r>:
 801ee10:	b570      	push	{r4, r5, r6, lr}
 801ee12:	460e      	mov	r6, r1
 801ee14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ee18:	2900      	cmp	r1, #0
 801ee1a:	b096      	sub	sp, #88	; 0x58
 801ee1c:	4614      	mov	r4, r2
 801ee1e:	461d      	mov	r5, r3
 801ee20:	da07      	bge.n	801ee32 <__swhatbuf_r+0x22>
 801ee22:	2300      	movs	r3, #0
 801ee24:	602b      	str	r3, [r5, #0]
 801ee26:	89b3      	ldrh	r3, [r6, #12]
 801ee28:	061a      	lsls	r2, r3, #24
 801ee2a:	d410      	bmi.n	801ee4e <__swhatbuf_r+0x3e>
 801ee2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ee30:	e00e      	b.n	801ee50 <__swhatbuf_r+0x40>
 801ee32:	466a      	mov	r2, sp
 801ee34:	f000 f864 	bl	801ef00 <_fstat_r>
 801ee38:	2800      	cmp	r0, #0
 801ee3a:	dbf2      	blt.n	801ee22 <__swhatbuf_r+0x12>
 801ee3c:	9a01      	ldr	r2, [sp, #4]
 801ee3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ee42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ee46:	425a      	negs	r2, r3
 801ee48:	415a      	adcs	r2, r3
 801ee4a:	602a      	str	r2, [r5, #0]
 801ee4c:	e7ee      	b.n	801ee2c <__swhatbuf_r+0x1c>
 801ee4e:	2340      	movs	r3, #64	; 0x40
 801ee50:	2000      	movs	r0, #0
 801ee52:	6023      	str	r3, [r4, #0]
 801ee54:	b016      	add	sp, #88	; 0x58
 801ee56:	bd70      	pop	{r4, r5, r6, pc}

0801ee58 <__smakebuf_r>:
 801ee58:	898b      	ldrh	r3, [r1, #12]
 801ee5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ee5c:	079d      	lsls	r5, r3, #30
 801ee5e:	4606      	mov	r6, r0
 801ee60:	460c      	mov	r4, r1
 801ee62:	d507      	bpl.n	801ee74 <__smakebuf_r+0x1c>
 801ee64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ee68:	6023      	str	r3, [r4, #0]
 801ee6a:	6123      	str	r3, [r4, #16]
 801ee6c:	2301      	movs	r3, #1
 801ee6e:	6163      	str	r3, [r4, #20]
 801ee70:	b002      	add	sp, #8
 801ee72:	bd70      	pop	{r4, r5, r6, pc}
 801ee74:	ab01      	add	r3, sp, #4
 801ee76:	466a      	mov	r2, sp
 801ee78:	f7ff ffca 	bl	801ee10 <__swhatbuf_r>
 801ee7c:	9900      	ldr	r1, [sp, #0]
 801ee7e:	4605      	mov	r5, r0
 801ee80:	4630      	mov	r0, r6
 801ee82:	f7ff faab 	bl	801e3dc <_malloc_r>
 801ee86:	b948      	cbnz	r0, 801ee9c <__smakebuf_r+0x44>
 801ee88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee8c:	059a      	lsls	r2, r3, #22
 801ee8e:	d4ef      	bmi.n	801ee70 <__smakebuf_r+0x18>
 801ee90:	f023 0303 	bic.w	r3, r3, #3
 801ee94:	f043 0302 	orr.w	r3, r3, #2
 801ee98:	81a3      	strh	r3, [r4, #12]
 801ee9a:	e7e3      	b.n	801ee64 <__smakebuf_r+0xc>
 801ee9c:	4b0d      	ldr	r3, [pc, #52]	; (801eed4 <__smakebuf_r+0x7c>)
 801ee9e:	62b3      	str	r3, [r6, #40]	; 0x28
 801eea0:	89a3      	ldrh	r3, [r4, #12]
 801eea2:	6020      	str	r0, [r4, #0]
 801eea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801eea8:	81a3      	strh	r3, [r4, #12]
 801eeaa:	9b00      	ldr	r3, [sp, #0]
 801eeac:	6163      	str	r3, [r4, #20]
 801eeae:	9b01      	ldr	r3, [sp, #4]
 801eeb0:	6120      	str	r0, [r4, #16]
 801eeb2:	b15b      	cbz	r3, 801eecc <__smakebuf_r+0x74>
 801eeb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eeb8:	4630      	mov	r0, r6
 801eeba:	f000 f833 	bl	801ef24 <_isatty_r>
 801eebe:	b128      	cbz	r0, 801eecc <__smakebuf_r+0x74>
 801eec0:	89a3      	ldrh	r3, [r4, #12]
 801eec2:	f023 0303 	bic.w	r3, r3, #3
 801eec6:	f043 0301 	orr.w	r3, r3, #1
 801eeca:	81a3      	strh	r3, [r4, #12]
 801eecc:	89a3      	ldrh	r3, [r4, #12]
 801eece:	431d      	orrs	r5, r3
 801eed0:	81a5      	strh	r5, [r4, #12]
 801eed2:	e7cd      	b.n	801ee70 <__smakebuf_r+0x18>
 801eed4:	0801e1e5 	.word	0x0801e1e5

0801eed8 <__malloc_lock>:
 801eed8:	4770      	bx	lr

0801eeda <__malloc_unlock>:
 801eeda:	4770      	bx	lr

0801eedc <_read_r>:
 801eedc:	b538      	push	{r3, r4, r5, lr}
 801eede:	4c07      	ldr	r4, [pc, #28]	; (801eefc <_read_r+0x20>)
 801eee0:	4605      	mov	r5, r0
 801eee2:	4608      	mov	r0, r1
 801eee4:	4611      	mov	r1, r2
 801eee6:	2200      	movs	r2, #0
 801eee8:	6022      	str	r2, [r4, #0]
 801eeea:	461a      	mov	r2, r3
 801eeec:	f7ea fae0 	bl	80094b0 <_read>
 801eef0:	1c43      	adds	r3, r0, #1
 801eef2:	d102      	bne.n	801eefa <_read_r+0x1e>
 801eef4:	6823      	ldr	r3, [r4, #0]
 801eef6:	b103      	cbz	r3, 801eefa <_read_r+0x1e>
 801eef8:	602b      	str	r3, [r5, #0]
 801eefa:	bd38      	pop	{r3, r4, r5, pc}
 801eefc:	2000b524 	.word	0x2000b524

0801ef00 <_fstat_r>:
 801ef00:	b538      	push	{r3, r4, r5, lr}
 801ef02:	4c07      	ldr	r4, [pc, #28]	; (801ef20 <_fstat_r+0x20>)
 801ef04:	2300      	movs	r3, #0
 801ef06:	4605      	mov	r5, r0
 801ef08:	4608      	mov	r0, r1
 801ef0a:	4611      	mov	r1, r2
 801ef0c:	6023      	str	r3, [r4, #0]
 801ef0e:	f7ea fb14 	bl	800953a <_fstat>
 801ef12:	1c43      	adds	r3, r0, #1
 801ef14:	d102      	bne.n	801ef1c <_fstat_r+0x1c>
 801ef16:	6823      	ldr	r3, [r4, #0]
 801ef18:	b103      	cbz	r3, 801ef1c <_fstat_r+0x1c>
 801ef1a:	602b      	str	r3, [r5, #0]
 801ef1c:	bd38      	pop	{r3, r4, r5, pc}
 801ef1e:	bf00      	nop
 801ef20:	2000b524 	.word	0x2000b524

0801ef24 <_isatty_r>:
 801ef24:	b538      	push	{r3, r4, r5, lr}
 801ef26:	4c06      	ldr	r4, [pc, #24]	; (801ef40 <_isatty_r+0x1c>)
 801ef28:	2300      	movs	r3, #0
 801ef2a:	4605      	mov	r5, r0
 801ef2c:	4608      	mov	r0, r1
 801ef2e:	6023      	str	r3, [r4, #0]
 801ef30:	f7ea fb13 	bl	800955a <_isatty>
 801ef34:	1c43      	adds	r3, r0, #1
 801ef36:	d102      	bne.n	801ef3e <_isatty_r+0x1a>
 801ef38:	6823      	ldr	r3, [r4, #0]
 801ef3a:	b103      	cbz	r3, 801ef3e <_isatty_r+0x1a>
 801ef3c:	602b      	str	r3, [r5, #0]
 801ef3e:	bd38      	pop	{r3, r4, r5, pc}
 801ef40:	2000b524 	.word	0x2000b524

0801ef44 <_init>:
 801ef44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef46:	bf00      	nop
 801ef48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ef4a:	bc08      	pop	{r3}
 801ef4c:	469e      	mov	lr, r3
 801ef4e:	4770      	bx	lr

0801ef50 <_fini>:
 801ef50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef52:	bf00      	nop
 801ef54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ef56:	bc08      	pop	{r3}
 801ef58:	469e      	mov	lr, r3
 801ef5a:	4770      	bx	lr
