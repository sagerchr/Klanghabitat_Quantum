
MainEngine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .shared       00000040  20000000  20000000  00050000  2**2
                  ALLOC
  1 .isr_vector   000001fc  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00019668  08008200  08008200  00008200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00013ac8  08021868  08021868  00021868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08035330  08035330  00035330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08035338  08035338  00035338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0803533c  0803533c  0003533c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000084  20000040  08035340  00040040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0001fe50  200000c4  080353c4  000400c4  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2001ff14  080353c4  0004ff14  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000400c4  2**0
                  CONTENTS, READONLY
 11 .debug_info   00054feb  00000000  00000000  000400f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00009398  00000000  00000000  000950dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000029f0  00000000  00000000  0009e478  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002758  00000000  00000000  000a0e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0003af98  00000000  00000000  000a35c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00035f6a  00000000  00000000  000de558  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00127e06  00000000  00000000  001144c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0023c2c8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000b308  00000000  00000000  0023c344  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008200 <__do_global_dtors_aux>:
 8008200:	b510      	push	{r4, lr}
 8008202:	4c05      	ldr	r4, [pc, #20]	; (8008218 <__do_global_dtors_aux+0x18>)
 8008204:	7823      	ldrb	r3, [r4, #0]
 8008206:	b933      	cbnz	r3, 8008216 <__do_global_dtors_aux+0x16>
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <__do_global_dtors_aux+0x1c>)
 800820a:	b113      	cbz	r3, 8008212 <__do_global_dtors_aux+0x12>
 800820c:	4804      	ldr	r0, [pc, #16]	; (8008220 <__do_global_dtors_aux+0x20>)
 800820e:	f3af 8000 	nop.w
 8008212:	2301      	movs	r3, #1
 8008214:	7023      	strb	r3, [r4, #0]
 8008216:	bd10      	pop	{r4, pc}
 8008218:	200000c4 	.word	0x200000c4
 800821c:	00000000 	.word	0x00000000
 8008220:	08021850 	.word	0x08021850

08008224 <frame_dummy>:
 8008224:	b508      	push	{r3, lr}
 8008226:	4b03      	ldr	r3, [pc, #12]	; (8008234 <frame_dummy+0x10>)
 8008228:	b11b      	cbz	r3, 8008232 <frame_dummy+0xe>
 800822a:	4903      	ldr	r1, [pc, #12]	; (8008238 <frame_dummy+0x14>)
 800822c:	4803      	ldr	r0, [pc, #12]	; (800823c <frame_dummy+0x18>)
 800822e:	f3af 8000 	nop.w
 8008232:	bd08      	pop	{r3, pc}
 8008234:	00000000 	.word	0x00000000
 8008238:	200000c8 	.word	0x200000c8
 800823c:	08021850 	.word	0x08021850

08008240 <strcmp>:
 8008240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008248:	2a01      	cmp	r2, #1
 800824a:	bf28      	it	cs
 800824c:	429a      	cmpcs	r2, r3
 800824e:	d0f7      	beq.n	8008240 <strcmp>
 8008250:	1ad0      	subs	r0, r2, r3
 8008252:	4770      	bx	lr

08008254 <strlen>:
 8008254:	4603      	mov	r3, r0
 8008256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800825a:	2a00      	cmp	r2, #0
 800825c:	d1fb      	bne.n	8008256 <strlen+0x2>
 800825e:	1a18      	subs	r0, r3, r0
 8008260:	3801      	subs	r0, #1
 8008262:	4770      	bx	lr
	...

08008270 <memchr>:
 8008270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008274:	2a10      	cmp	r2, #16
 8008276:	db2b      	blt.n	80082d0 <memchr+0x60>
 8008278:	f010 0f07 	tst.w	r0, #7
 800827c:	d008      	beq.n	8008290 <memchr+0x20>
 800827e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008282:	3a01      	subs	r2, #1
 8008284:	428b      	cmp	r3, r1
 8008286:	d02d      	beq.n	80082e4 <memchr+0x74>
 8008288:	f010 0f07 	tst.w	r0, #7
 800828c:	b342      	cbz	r2, 80082e0 <memchr+0x70>
 800828e:	d1f6      	bne.n	800827e <memchr+0xe>
 8008290:	b4f0      	push	{r4, r5, r6, r7}
 8008292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800829a:	f022 0407 	bic.w	r4, r2, #7
 800829e:	f07f 0700 	mvns.w	r7, #0
 80082a2:	2300      	movs	r3, #0
 80082a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80082a8:	3c08      	subs	r4, #8
 80082aa:	ea85 0501 	eor.w	r5, r5, r1
 80082ae:	ea86 0601 	eor.w	r6, r6, r1
 80082b2:	fa85 f547 	uadd8	r5, r5, r7
 80082b6:	faa3 f587 	sel	r5, r3, r7
 80082ba:	fa86 f647 	uadd8	r6, r6, r7
 80082be:	faa5 f687 	sel	r6, r5, r7
 80082c2:	b98e      	cbnz	r6, 80082e8 <memchr+0x78>
 80082c4:	d1ee      	bne.n	80082a4 <memchr+0x34>
 80082c6:	bcf0      	pop	{r4, r5, r6, r7}
 80082c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80082cc:	f002 0207 	and.w	r2, r2, #7
 80082d0:	b132      	cbz	r2, 80082e0 <memchr+0x70>
 80082d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80082d6:	3a01      	subs	r2, #1
 80082d8:	ea83 0301 	eor.w	r3, r3, r1
 80082dc:	b113      	cbz	r3, 80082e4 <memchr+0x74>
 80082de:	d1f8      	bne.n	80082d2 <memchr+0x62>
 80082e0:	2000      	movs	r0, #0
 80082e2:	4770      	bx	lr
 80082e4:	3801      	subs	r0, #1
 80082e6:	4770      	bx	lr
 80082e8:	2d00      	cmp	r5, #0
 80082ea:	bf06      	itte	eq
 80082ec:	4635      	moveq	r5, r6
 80082ee:	3803      	subeq	r0, #3
 80082f0:	3807      	subne	r0, #7
 80082f2:	f015 0f01 	tst.w	r5, #1
 80082f6:	d107      	bne.n	8008308 <memchr+0x98>
 80082f8:	3001      	adds	r0, #1
 80082fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80082fe:	bf02      	ittt	eq
 8008300:	3001      	addeq	r0, #1
 8008302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008306:	3001      	addeq	r0, #1
 8008308:	bcf0      	pop	{r4, r5, r6, r7}
 800830a:	3801      	subs	r0, #1
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop

08008310 <__aeabi_uldivmod>:
 8008310:	b953      	cbnz	r3, 8008328 <__aeabi_uldivmod+0x18>
 8008312:	b94a      	cbnz	r2, 8008328 <__aeabi_uldivmod+0x18>
 8008314:	2900      	cmp	r1, #0
 8008316:	bf08      	it	eq
 8008318:	2800      	cmpeq	r0, #0
 800831a:	bf1c      	itt	ne
 800831c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8008320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008324:	f000 b972 	b.w	800860c <__aeabi_idiv0>
 8008328:	f1ad 0c08 	sub.w	ip, sp, #8
 800832c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008330:	f000 f806 	bl	8008340 <__udivmoddi4>
 8008334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800833c:	b004      	add	sp, #16
 800833e:	4770      	bx	lr

08008340 <__udivmoddi4>:
 8008340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008344:	9e08      	ldr	r6, [sp, #32]
 8008346:	4604      	mov	r4, r0
 8008348:	4688      	mov	r8, r1
 800834a:	2b00      	cmp	r3, #0
 800834c:	d14b      	bne.n	80083e6 <__udivmoddi4+0xa6>
 800834e:	428a      	cmp	r2, r1
 8008350:	4615      	mov	r5, r2
 8008352:	d967      	bls.n	8008424 <__udivmoddi4+0xe4>
 8008354:	fab2 f282 	clz	r2, r2
 8008358:	b14a      	cbz	r2, 800836e <__udivmoddi4+0x2e>
 800835a:	f1c2 0720 	rsb	r7, r2, #32
 800835e:	fa01 f302 	lsl.w	r3, r1, r2
 8008362:	fa20 f707 	lsr.w	r7, r0, r7
 8008366:	4095      	lsls	r5, r2
 8008368:	ea47 0803 	orr.w	r8, r7, r3
 800836c:	4094      	lsls	r4, r2
 800836e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008372:	0c23      	lsrs	r3, r4, #16
 8008374:	fbb8 f7fe 	udiv	r7, r8, lr
 8008378:	fa1f fc85 	uxth.w	ip, r5
 800837c:	fb0e 8817 	mls	r8, lr, r7, r8
 8008380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008384:	fb07 f10c 	mul.w	r1, r7, ip
 8008388:	4299      	cmp	r1, r3
 800838a:	d909      	bls.n	80083a0 <__udivmoddi4+0x60>
 800838c:	18eb      	adds	r3, r5, r3
 800838e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8008392:	f080 811b 	bcs.w	80085cc <__udivmoddi4+0x28c>
 8008396:	4299      	cmp	r1, r3
 8008398:	f240 8118 	bls.w	80085cc <__udivmoddi4+0x28c>
 800839c:	3f02      	subs	r7, #2
 800839e:	442b      	add	r3, r5
 80083a0:	1a5b      	subs	r3, r3, r1
 80083a2:	b2a4      	uxth	r4, r4
 80083a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80083a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80083ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80083b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80083b4:	45a4      	cmp	ip, r4
 80083b6:	d909      	bls.n	80083cc <__udivmoddi4+0x8c>
 80083b8:	192c      	adds	r4, r5, r4
 80083ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80083be:	f080 8107 	bcs.w	80085d0 <__udivmoddi4+0x290>
 80083c2:	45a4      	cmp	ip, r4
 80083c4:	f240 8104 	bls.w	80085d0 <__udivmoddi4+0x290>
 80083c8:	3802      	subs	r0, #2
 80083ca:	442c      	add	r4, r5
 80083cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80083d0:	eba4 040c 	sub.w	r4, r4, ip
 80083d4:	2700      	movs	r7, #0
 80083d6:	b11e      	cbz	r6, 80083e0 <__udivmoddi4+0xa0>
 80083d8:	40d4      	lsrs	r4, r2
 80083da:	2300      	movs	r3, #0
 80083dc:	e9c6 4300 	strd	r4, r3, [r6]
 80083e0:	4639      	mov	r1, r7
 80083e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e6:	428b      	cmp	r3, r1
 80083e8:	d909      	bls.n	80083fe <__udivmoddi4+0xbe>
 80083ea:	2e00      	cmp	r6, #0
 80083ec:	f000 80eb 	beq.w	80085c6 <__udivmoddi4+0x286>
 80083f0:	2700      	movs	r7, #0
 80083f2:	e9c6 0100 	strd	r0, r1, [r6]
 80083f6:	4638      	mov	r0, r7
 80083f8:	4639      	mov	r1, r7
 80083fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083fe:	fab3 f783 	clz	r7, r3
 8008402:	2f00      	cmp	r7, #0
 8008404:	d147      	bne.n	8008496 <__udivmoddi4+0x156>
 8008406:	428b      	cmp	r3, r1
 8008408:	d302      	bcc.n	8008410 <__udivmoddi4+0xd0>
 800840a:	4282      	cmp	r2, r0
 800840c:	f200 80fa 	bhi.w	8008604 <__udivmoddi4+0x2c4>
 8008410:	1a84      	subs	r4, r0, r2
 8008412:	eb61 0303 	sbc.w	r3, r1, r3
 8008416:	2001      	movs	r0, #1
 8008418:	4698      	mov	r8, r3
 800841a:	2e00      	cmp	r6, #0
 800841c:	d0e0      	beq.n	80083e0 <__udivmoddi4+0xa0>
 800841e:	e9c6 4800 	strd	r4, r8, [r6]
 8008422:	e7dd      	b.n	80083e0 <__udivmoddi4+0xa0>
 8008424:	b902      	cbnz	r2, 8008428 <__udivmoddi4+0xe8>
 8008426:	deff      	udf	#255	; 0xff
 8008428:	fab2 f282 	clz	r2, r2
 800842c:	2a00      	cmp	r2, #0
 800842e:	f040 808f 	bne.w	8008550 <__udivmoddi4+0x210>
 8008432:	1b49      	subs	r1, r1, r5
 8008434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008438:	fa1f f885 	uxth.w	r8, r5
 800843c:	2701      	movs	r7, #1
 800843e:	fbb1 fcfe 	udiv	ip, r1, lr
 8008442:	0c23      	lsrs	r3, r4, #16
 8008444:	fb0e 111c 	mls	r1, lr, ip, r1
 8008448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800844c:	fb08 f10c 	mul.w	r1, r8, ip
 8008450:	4299      	cmp	r1, r3
 8008452:	d907      	bls.n	8008464 <__udivmoddi4+0x124>
 8008454:	18eb      	adds	r3, r5, r3
 8008456:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800845a:	d202      	bcs.n	8008462 <__udivmoddi4+0x122>
 800845c:	4299      	cmp	r1, r3
 800845e:	f200 80cd 	bhi.w	80085fc <__udivmoddi4+0x2bc>
 8008462:	4684      	mov	ip, r0
 8008464:	1a59      	subs	r1, r3, r1
 8008466:	b2a3      	uxth	r3, r4
 8008468:	fbb1 f0fe 	udiv	r0, r1, lr
 800846c:	fb0e 1410 	mls	r4, lr, r0, r1
 8008470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008474:	fb08 f800 	mul.w	r8, r8, r0
 8008478:	45a0      	cmp	r8, r4
 800847a:	d907      	bls.n	800848c <__udivmoddi4+0x14c>
 800847c:	192c      	adds	r4, r5, r4
 800847e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008482:	d202      	bcs.n	800848a <__udivmoddi4+0x14a>
 8008484:	45a0      	cmp	r8, r4
 8008486:	f200 80b6 	bhi.w	80085f6 <__udivmoddi4+0x2b6>
 800848a:	4618      	mov	r0, r3
 800848c:	eba4 0408 	sub.w	r4, r4, r8
 8008490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008494:	e79f      	b.n	80083d6 <__udivmoddi4+0x96>
 8008496:	f1c7 0c20 	rsb	ip, r7, #32
 800849a:	40bb      	lsls	r3, r7
 800849c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80084a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80084a4:	fa01 f407 	lsl.w	r4, r1, r7
 80084a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80084ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80084b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80084b4:	4325      	orrs	r5, r4
 80084b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80084ba:	0c2c      	lsrs	r4, r5, #16
 80084bc:	fb08 3319 	mls	r3, r8, r9, r3
 80084c0:	fa1f fa8e 	uxth.w	sl, lr
 80084c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80084c8:	fb09 f40a 	mul.w	r4, r9, sl
 80084cc:	429c      	cmp	r4, r3
 80084ce:	fa02 f207 	lsl.w	r2, r2, r7
 80084d2:	fa00 f107 	lsl.w	r1, r0, r7
 80084d6:	d90b      	bls.n	80084f0 <__udivmoddi4+0x1b0>
 80084d8:	eb1e 0303 	adds.w	r3, lr, r3
 80084dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80084e0:	f080 8087 	bcs.w	80085f2 <__udivmoddi4+0x2b2>
 80084e4:	429c      	cmp	r4, r3
 80084e6:	f240 8084 	bls.w	80085f2 <__udivmoddi4+0x2b2>
 80084ea:	f1a9 0902 	sub.w	r9, r9, #2
 80084ee:	4473      	add	r3, lr
 80084f0:	1b1b      	subs	r3, r3, r4
 80084f2:	b2ad      	uxth	r5, r5
 80084f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80084f8:	fb08 3310 	mls	r3, r8, r0, r3
 80084fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008500:	fb00 fa0a 	mul.w	sl, r0, sl
 8008504:	45a2      	cmp	sl, r4
 8008506:	d908      	bls.n	800851a <__udivmoddi4+0x1da>
 8008508:	eb1e 0404 	adds.w	r4, lr, r4
 800850c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008510:	d26b      	bcs.n	80085ea <__udivmoddi4+0x2aa>
 8008512:	45a2      	cmp	sl, r4
 8008514:	d969      	bls.n	80085ea <__udivmoddi4+0x2aa>
 8008516:	3802      	subs	r0, #2
 8008518:	4474      	add	r4, lr
 800851a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800851e:	fba0 8902 	umull	r8, r9, r0, r2
 8008522:	eba4 040a 	sub.w	r4, r4, sl
 8008526:	454c      	cmp	r4, r9
 8008528:	46c2      	mov	sl, r8
 800852a:	464b      	mov	r3, r9
 800852c:	d354      	bcc.n	80085d8 <__udivmoddi4+0x298>
 800852e:	d051      	beq.n	80085d4 <__udivmoddi4+0x294>
 8008530:	2e00      	cmp	r6, #0
 8008532:	d069      	beq.n	8008608 <__udivmoddi4+0x2c8>
 8008534:	ebb1 050a 	subs.w	r5, r1, sl
 8008538:	eb64 0403 	sbc.w	r4, r4, r3
 800853c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008540:	40fd      	lsrs	r5, r7
 8008542:	40fc      	lsrs	r4, r7
 8008544:	ea4c 0505 	orr.w	r5, ip, r5
 8008548:	e9c6 5400 	strd	r5, r4, [r6]
 800854c:	2700      	movs	r7, #0
 800854e:	e747      	b.n	80083e0 <__udivmoddi4+0xa0>
 8008550:	f1c2 0320 	rsb	r3, r2, #32
 8008554:	fa20 f703 	lsr.w	r7, r0, r3
 8008558:	4095      	lsls	r5, r2
 800855a:	fa01 f002 	lsl.w	r0, r1, r2
 800855e:	fa21 f303 	lsr.w	r3, r1, r3
 8008562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008566:	4338      	orrs	r0, r7
 8008568:	0c01      	lsrs	r1, r0, #16
 800856a:	fbb3 f7fe 	udiv	r7, r3, lr
 800856e:	fa1f f885 	uxth.w	r8, r5
 8008572:	fb0e 3317 	mls	r3, lr, r7, r3
 8008576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800857a:	fb07 f308 	mul.w	r3, r7, r8
 800857e:	428b      	cmp	r3, r1
 8008580:	fa04 f402 	lsl.w	r4, r4, r2
 8008584:	d907      	bls.n	8008596 <__udivmoddi4+0x256>
 8008586:	1869      	adds	r1, r5, r1
 8008588:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800858c:	d22f      	bcs.n	80085ee <__udivmoddi4+0x2ae>
 800858e:	428b      	cmp	r3, r1
 8008590:	d92d      	bls.n	80085ee <__udivmoddi4+0x2ae>
 8008592:	3f02      	subs	r7, #2
 8008594:	4429      	add	r1, r5
 8008596:	1acb      	subs	r3, r1, r3
 8008598:	b281      	uxth	r1, r0
 800859a:	fbb3 f0fe 	udiv	r0, r3, lr
 800859e:	fb0e 3310 	mls	r3, lr, r0, r3
 80085a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80085a6:	fb00 f308 	mul.w	r3, r0, r8
 80085aa:	428b      	cmp	r3, r1
 80085ac:	d907      	bls.n	80085be <__udivmoddi4+0x27e>
 80085ae:	1869      	adds	r1, r5, r1
 80085b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80085b4:	d217      	bcs.n	80085e6 <__udivmoddi4+0x2a6>
 80085b6:	428b      	cmp	r3, r1
 80085b8:	d915      	bls.n	80085e6 <__udivmoddi4+0x2a6>
 80085ba:	3802      	subs	r0, #2
 80085bc:	4429      	add	r1, r5
 80085be:	1ac9      	subs	r1, r1, r3
 80085c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80085c4:	e73b      	b.n	800843e <__udivmoddi4+0xfe>
 80085c6:	4637      	mov	r7, r6
 80085c8:	4630      	mov	r0, r6
 80085ca:	e709      	b.n	80083e0 <__udivmoddi4+0xa0>
 80085cc:	4607      	mov	r7, r0
 80085ce:	e6e7      	b.n	80083a0 <__udivmoddi4+0x60>
 80085d0:	4618      	mov	r0, r3
 80085d2:	e6fb      	b.n	80083cc <__udivmoddi4+0x8c>
 80085d4:	4541      	cmp	r1, r8
 80085d6:	d2ab      	bcs.n	8008530 <__udivmoddi4+0x1f0>
 80085d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80085dc:	eb69 020e 	sbc.w	r2, r9, lr
 80085e0:	3801      	subs	r0, #1
 80085e2:	4613      	mov	r3, r2
 80085e4:	e7a4      	b.n	8008530 <__udivmoddi4+0x1f0>
 80085e6:	4660      	mov	r0, ip
 80085e8:	e7e9      	b.n	80085be <__udivmoddi4+0x27e>
 80085ea:	4618      	mov	r0, r3
 80085ec:	e795      	b.n	800851a <__udivmoddi4+0x1da>
 80085ee:	4667      	mov	r7, ip
 80085f0:	e7d1      	b.n	8008596 <__udivmoddi4+0x256>
 80085f2:	4681      	mov	r9, r0
 80085f4:	e77c      	b.n	80084f0 <__udivmoddi4+0x1b0>
 80085f6:	3802      	subs	r0, #2
 80085f8:	442c      	add	r4, r5
 80085fa:	e747      	b.n	800848c <__udivmoddi4+0x14c>
 80085fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8008600:	442b      	add	r3, r5
 8008602:	e72f      	b.n	8008464 <__udivmoddi4+0x124>
 8008604:	4638      	mov	r0, r7
 8008606:	e708      	b.n	800841a <__udivmoddi4+0xda>
 8008608:	4637      	mov	r7, r6
 800860a:	e6e9      	b.n	80083e0 <__udivmoddi4+0xa0>

0800860c <__aeabi_idiv0>:
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop

08008610 <BypassLeft>:
Relais4_GPIO_Port GPIOG
Relais5_GPIO_Port GPIOG
Relais6_GPIO_Port GPIOG
*/

void BypassLeft(Byp State){
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	4603      	mov	r3, r0
 8008618:	71fb      	strb	r3, [r7, #7]
	switch(State)
 800861a:	79fb      	ldrb	r3, [r7, #7]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d008      	beq.n	8008632 <BypassLeft+0x22>
 8008620:	2b01      	cmp	r3, #1
 8008622:	d000      	beq.n	8008626 <BypassLeft+0x16>
			{
				HAL_GPIO_WritePin(GPIOG, Relais1_Pin,GPIO_PIN_RESET);
			}
			break;
	}
}
 8008624:	e00b      	b.n	800863e <BypassLeft+0x2e>
				HAL_GPIO_WritePin(GPIOG, Relais1_Pin,GPIO_PIN_SET);
 8008626:	2201      	movs	r2, #1
 8008628:	2102      	movs	r1, #2
 800862a:	4807      	ldr	r0, [pc, #28]	; (8008648 <BypassLeft+0x38>)
 800862c:	f005 f83e 	bl	800d6ac <HAL_GPIO_WritePin>
			break;
 8008630:	e005      	b.n	800863e <BypassLeft+0x2e>
				HAL_GPIO_WritePin(GPIOG, Relais1_Pin,GPIO_PIN_RESET);
 8008632:	2200      	movs	r2, #0
 8008634:	2102      	movs	r1, #2
 8008636:	4804      	ldr	r0, [pc, #16]	; (8008648 <BypassLeft+0x38>)
 8008638:	f005 f838 	bl	800d6ac <HAL_GPIO_WritePin>
			break;
 800863c:	bf00      	nop
}
 800863e:	bf00      	nop
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	40021800 	.word	0x40021800

0800864c <BypassRight>:

void BypassRight(Byp State){
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	4603      	mov	r3, r0
 8008654:	71fb      	strb	r3, [r7, #7]
	switch(State)
 8008656:	79fb      	ldrb	r3, [r7, #7]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d008      	beq.n	800866e <BypassRight+0x22>
 800865c:	2b01      	cmp	r3, #1
 800865e:	d000      	beq.n	8008662 <BypassRight+0x16>
			{
				HAL_GPIO_WritePin(GPIOG, Relais2_Pin,GPIO_PIN_RESET);
			}
			break;
	}
}
 8008660:	e00b      	b.n	800867a <BypassRight+0x2e>
				HAL_GPIO_WritePin(GPIOG, Relais2_Pin,GPIO_PIN_SET);
 8008662:	2201      	movs	r2, #1
 8008664:	2101      	movs	r1, #1
 8008666:	4807      	ldr	r0, [pc, #28]	; (8008684 <BypassRight+0x38>)
 8008668:	f005 f820 	bl	800d6ac <HAL_GPIO_WritePin>
			break;
 800866c:	e005      	b.n	800867a <BypassRight+0x2e>
				HAL_GPIO_WritePin(GPIOG, Relais2_Pin,GPIO_PIN_RESET);
 800866e:	2200      	movs	r2, #0
 8008670:	2101      	movs	r1, #1
 8008672:	4804      	ldr	r0, [pc, #16]	; (8008684 <BypassRight+0x38>)
 8008674:	f005 f81a 	bl	800d6ac <HAL_GPIO_WritePin>
			break;
 8008678:	bf00      	nop
}
 800867a:	bf00      	nop
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	40021800 	.word	0x40021800

08008688 <VCASource>:





void VCASource(Source State){
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	4603      	mov	r3, r0
 8008690:	71fb      	strb	r3, [r7, #7]
	switch(State)
 8008692:	79fb      	ldrb	r3, [r7, #7]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d002      	beq.n	800869e <VCASource+0x16>
 8008698:	2b01      	cmp	r3, #1
 800869a:	d007      	beq.n	80086ac <VCASource+0x24>
			{
				HAL_GPIO_WritePin(GPIOG, Relais3_Pin,GPIO_PIN_RESET);
			}
			break;
	}
}
 800869c:	e00d      	b.n	80086ba <VCASource+0x32>
				HAL_GPIO_WritePin(GPIOG, Relais3_Pin,GPIO_PIN_SET);
 800869e:	2201      	movs	r2, #1
 80086a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086a4:	4807      	ldr	r0, [pc, #28]	; (80086c4 <VCASource+0x3c>)
 80086a6:	f005 f801 	bl	800d6ac <HAL_GPIO_WritePin>
			break;
 80086aa:	e006      	b.n	80086ba <VCASource+0x32>
				HAL_GPIO_WritePin(GPIOG, Relais3_Pin,GPIO_PIN_RESET);
 80086ac:	2200      	movs	r2, #0
 80086ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086b2:	4804      	ldr	r0, [pc, #16]	; (80086c4 <VCASource+0x3c>)
 80086b4:	f004 fffa 	bl	800d6ac <HAL_GPIO_WritePin>
			break;
 80086b8:	bf00      	nop
}
 80086ba:	bf00      	nop
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	40021800 	.word	0x40021800

080086c8 <VCAOutput>:

void VCAOutput(Output Out, Convert Conv ){
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	460a      	mov	r2, r1
 80086d2:	71fb      	strb	r3, [r7, #7]
 80086d4:	4613      	mov	r3, r2
 80086d6:	71bb      	strb	r3, [r7, #6]
	switch(Out)
 80086d8:	79fb      	ldrb	r3, [r7, #7]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d010      	beq.n	8008700 <VCAOutput+0x38>
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d01b      	beq.n	800871a <VCAOutput+0x52>
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d126      	bne.n	8008734 <VCAOutput+0x6c>
	{
		case NormalOutput:
			{
				HAL_GPIO_WritePin(GPIOG, Relais5_Pin,GPIO_PIN_RESET);
 80086e6:	2200      	movs	r2, #0
 80086e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80086ec:	481d      	ldr	r0, [pc, #116]	; (8008764 <VCAOutput+0x9c>)
 80086ee:	f004 ffdd 	bl	800d6ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOG, Relais6_Pin,GPIO_PIN_RESET);
 80086f2:	2200      	movs	r2, #0
 80086f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80086f8:	481a      	ldr	r0, [pc, #104]	; (8008764 <VCAOutput+0x9c>)
 80086fa:	f004 ffd7 	bl	800d6ac <HAL_GPIO_WritePin>
			}
			break;
 80086fe:	e019      	b.n	8008734 <VCAOutput+0x6c>
		case MonoS:
			{
				HAL_GPIO_WritePin(GPIOG, Relais5_Pin,GPIO_PIN_SET);
 8008700:	2201      	movs	r2, #1
 8008702:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008706:	4817      	ldr	r0, [pc, #92]	; (8008764 <VCAOutput+0x9c>)
 8008708:	f004 ffd0 	bl	800d6ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOG, Relais6_Pin,GPIO_PIN_RESET);
 800870c:	2200      	movs	r2, #0
 800870e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008712:	4814      	ldr	r0, [pc, #80]	; (8008764 <VCAOutput+0x9c>)
 8008714:	f004 ffca 	bl	800d6ac <HAL_GPIO_WritePin>
			}
			break;
 8008718:	e00c      	b.n	8008734 <VCAOutput+0x6c>
		case MonoM:
			{
				HAL_GPIO_WritePin(GPIOG, Relais5_Pin,GPIO_PIN_RESET);
 800871a:	2200      	movs	r2, #0
 800871c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008720:	4810      	ldr	r0, [pc, #64]	; (8008764 <VCAOutput+0x9c>)
 8008722:	f004 ffc3 	bl	800d6ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOG, Relais6_Pin,GPIO_PIN_SET);
 8008726:	2201      	movs	r2, #1
 8008728:	f44f 7100 	mov.w	r1, #512	; 0x200
 800872c:	480d      	ldr	r0, [pc, #52]	; (8008764 <VCAOutput+0x9c>)
 800872e:	f004 ffbd 	bl	800d6ac <HAL_GPIO_WritePin>
			}
			break;
 8008732:	bf00      	nop
	}
	switch(Conv){
 8008734:	79bb      	ldrb	r3, [r7, #6]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d002      	beq.n	8008740 <VCAOutput+0x78>
 800873a:	2b01      	cmp	r3, #1
 800873c:	d007      	beq.n	800874e <VCAOutput+0x86>
			{
				HAL_GPIO_WritePin(GPIOG, Relais4_Pin,GPIO_PIN_RESET);
			}
			break;
	}
}
 800873e:	e00d      	b.n	800875c <VCAOutput+0x94>
				HAL_GPIO_WritePin(GPIOG, Relais4_Pin,GPIO_PIN_SET);
 8008740:	2201      	movs	r2, #1
 8008742:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008746:	4807      	ldr	r0, [pc, #28]	; (8008764 <VCAOutput+0x9c>)
 8008748:	f004 ffb0 	bl	800d6ac <HAL_GPIO_WritePin>
			break;
 800874c:	e006      	b.n	800875c <VCAOutput+0x94>
				HAL_GPIO_WritePin(GPIOG, Relais4_Pin,GPIO_PIN_RESET);
 800874e:	2200      	movs	r2, #0
 8008750:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008754:	4803      	ldr	r0, [pc, #12]	; (8008764 <VCAOutput+0x9c>)
 8008756:	f004 ffa9 	bl	800d6ac <HAL_GPIO_WritePin>
			break;
 800875a:	bf00      	nop
}
 800875c:	bf00      	nop
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	40021800 	.word	0x40021800

08008768 <UartBridge_init>:

extern UART_HandleTypeDef huart1;
extern TIM_HandleTypeDef htim7;
void
UartBridge_init(void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
  echo_pcb = tcp_new();
 800876e:	f010 fac3 	bl	8018cf8 <tcp_new>
 8008772:	4602      	mov	r2, r0
 8008774:	4b12      	ldr	r3, [pc, #72]	; (80087c0 <UartBridge_init+0x58>)
 8008776:	601a      	str	r2, [r3, #0]
  if (echo_pcb != NULL)
 8008778:	4b11      	ldr	r3, [pc, #68]	; (80087c0 <UartBridge_init+0x58>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d01b      	beq.n	80087b8 <UartBridge_init+0x50>
  {
    err_t err;

    err = tcp_bind(echo_pcb, IP_ADDR_ANY, 7);
 8008780:	4b0f      	ldr	r3, [pc, #60]	; (80087c0 <UartBridge_init+0x58>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2207      	movs	r2, #7
 8008786:	490f      	ldr	r1, [pc, #60]	; (80087c4 <UartBridge_init+0x5c>)
 8008788:	4618      	mov	r0, r3
 800878a:	f00f fa15 	bl	8017bb8 <tcp_bind>
 800878e:	4603      	mov	r3, r0
 8008790:	71fb      	strb	r3, [r7, #7]
    if (err == ERR_OK)
 8008792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10e      	bne.n	80087b8 <UartBridge_init+0x50>
    {
      echo_pcb = tcp_listen(echo_pcb);
 800879a:	4b09      	ldr	r3, [pc, #36]	; (80087c0 <UartBridge_init+0x58>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	21ff      	movs	r1, #255	; 0xff
 80087a0:	4618      	mov	r0, r3
 80087a2:	f00f fac1 	bl	8017d28 <tcp_listen_with_backlog>
 80087a6:	4602      	mov	r2, r0
 80087a8:	4b05      	ldr	r3, [pc, #20]	; (80087c0 <UartBridge_init+0x58>)
 80087aa:	601a      	str	r2, [r3, #0]
      tcp_accept(echo_pcb, echo_accept);
 80087ac:	4b04      	ldr	r3, [pc, #16]	; (80087c0 <UartBridge_init+0x58>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4905      	ldr	r1, [pc, #20]	; (80087c8 <UartBridge_init+0x60>)
 80087b2:	4618      	mov	r0, r3
 80087b4:	f010 fb2e 	bl	8018e14 <tcp_accept>
  }
  else
  {
    /* abort? output diagnostic? */
  }
}
 80087b8:	bf00      	nop
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	200000e0 	.word	0x200000e0
 80087c4:	08035270 	.word	0x08035270
 80087c8:	080087cd 	.word	0x080087cd

080087cc <echo_accept>:
uint32_t count = 0;

err_t
echo_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	4613      	mov	r3, r2
 80087d8:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* commonly observed practive to call tcp_setprio(), why? */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 80087da:	2101      	movs	r1, #1
 80087dc:	68b8      	ldr	r0, [r7, #8]
 80087de:	f010 f899 	bl	8018914 <tcp_setprio>

  es = (struct echo_state *)mem_malloc(sizeof(struct echo_state));
 80087e2:	200c      	movs	r0, #12
 80087e4:	f00d fbdc 	bl	8015fa0 <mem_malloc>
 80087e8:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d01c      	beq.n	800882a <echo_accept+0x5e>
  {
    es->state = ES_ACCEPTED;
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	2201      	movs	r2, #1
 80087f4:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	2200      	movs	r2, #0
 8008800:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	2200      	movs	r2, #0
 8008806:	609a      	str	r2, [r3, #8]
    /* pass newly allocated es to our callbacks */
    tcp_arg(newpcb, es);
 8008808:	6939      	ldr	r1, [r7, #16]
 800880a:	68b8      	ldr	r0, [r7, #8]
 800880c:	f010 fa8a 	bl	8018d24 <tcp_arg>
    tcp_recv(newpcb, echo_recv);
 8008810:	490a      	ldr	r1, [pc, #40]	; (800883c <echo_accept+0x70>)
 8008812:	68b8      	ldr	r0, [r7, #8]
 8008814:	f010 fa98 	bl	8018d48 <tcp_recv>
    count = 0;
 8008818:	4b09      	ldr	r3, [pc, #36]	; (8008840 <echo_accept+0x74>)
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]
    ret_err = ERR_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	75fb      	strb	r3, [r7, #23]

    HAL_TIM_Base_Stop_IT(&htim7);
 8008822:	4808      	ldr	r0, [pc, #32]	; (8008844 <echo_accept+0x78>)
 8008824:	f006 fafc 	bl	800ee20 <HAL_TIM_Base_Stop_IT>
 8008828:	e001      	b.n	800882e <echo_accept+0x62>

  }
  else
  {
    ret_err = ERR_MEM;
 800882a:	23ff      	movs	r3, #255	; 0xff
 800882c:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 800882e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	08008849 	.word	0x08008849
 8008840:	200000e4 	.word	0x200000e4
 8008844:	20019658 	.word	0x20019658

08008848 <echo_recv>:

err_t
echo_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8008848:	b5b0      	push	{r4, r5, r7, lr}
 800884a:	b088      	sub	sp, #32
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
 8008854:	70fb      	strb	r3, [r7, #3]


	if (!p) {
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d108      	bne.n	800886e <echo_recv+0x26>
        tcp_close(tpcb);
 800885c:	68b8      	ldr	r0, [r7, #8]
 800885e:	f00f f8b5 	bl	80179cc <tcp_close>
        tcp_recv(tpcb, NULL);
 8008862:	2100      	movs	r1, #0
 8008864:	68b8      	ldr	r0, [r7, #8]
 8008866:	f010 fa6f 	bl	8018d48 <tcp_recv>
        //HAL_TIM_Base_Start_IT(&htim7);
        return ERR_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	e086      	b.n	800897c <echo_recv+0x134>
    }

    /* indicate that the packet has been received */
    tcp_recved(tpcb, p->len);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	895b      	ldrh	r3, [r3, #10]
 8008872:	4619      	mov	r1, r3
 8008874:	68b8      	ldr	r0, [r7, #8]
 8008876:	f00f fb6d 	bl	8017f54 <tcp_recved>

    pbuf_free(p);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f00e fc04 	bl	8017088 <pbuf_free>

    count = count + p->len;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	895b      	ldrh	r3, [r3, #10]
 8008884:	461a      	mov	r2, r3
 8008886:	4b3f      	ldr	r3, [pc, #252]	; (8008984 <echo_recv+0x13c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4413      	add	r3, r2
 800888c:	4a3d      	ldr	r2, [pc, #244]	; (8008984 <echo_recv+0x13c>)
 800888e:	6013      	str	r3, [r2, #0]

    for(int i=0;i<100;i++){
 8008890:	2300      	movs	r3, #0
 8008892:	61fb      	str	r3, [r7, #28]
 8008894:	e007      	b.n	80088a6 <echo_recv+0x5e>
    	pData[i]=0x00;
 8008896:	4a3c      	ldr	r2, [pc, #240]	; (8008988 <echo_recv+0x140>)
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	4413      	add	r3, r2
 800889c:	2200      	movs	r2, #0
 800889e:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<100;i++){
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	3301      	adds	r3, #1
 80088a4:	61fb      	str	r3, [r7, #28]
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	2b63      	cmp	r3, #99	; 0x63
 80088aa:	ddf4      	ble.n	8008896 <echo_recv+0x4e>
    }

    HAL_UART_DMAStop(&huart1); //Stop the HUART
 80088ac:	4837      	ldr	r0, [pc, #220]	; (800898c <echo_recv+0x144>)
 80088ae:	f007 fa33 	bl	800fd18 <HAL_UART_DMAStop>
    huart1.hdmarx->Instance->NDTR = 100; //Set DMA counter back to Strat posotion
 80088b2:	4b36      	ldr	r3, [pc, #216]	; (800898c <echo_recv+0x144>)
 80088b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2264      	movs	r2, #100	; 0x64
 80088ba:	605a      	str	r2, [r3, #4]
    HAL_UART_Receive_DMA(&huart1, pData, 100); //Init the DMA to Recive data
 80088bc:	2264      	movs	r2, #100	; 0x64
 80088be:	4932      	ldr	r1, [pc, #200]	; (8008988 <echo_recv+0x140>)
 80088c0:	4832      	ldr	r0, [pc, #200]	; (800898c <echo_recv+0x144>)
 80088c2:	f007 f9a5 	bl	800fc10 <HAL_UART_Receive_DMA>

    HAL_UART_Transmit(&huart1, p->payload, p->len, 10); //Send data to Display recived via Ethernet
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6859      	ldr	r1, [r3, #4]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	895a      	ldrh	r2, [r3, #10]
 80088ce:	230a      	movs	r3, #10
 80088d0:	482e      	ldr	r0, [pc, #184]	; (800898c <echo_recv+0x144>)
 80088d2:	f007 f90b 	bl	800faec <HAL_UART_Transmit>

    char cmd[p->len]; //Identify the CMD
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	8958      	ldrh	r0, [r3, #10]
 80088da:	466b      	mov	r3, sp
 80088dc:	461d      	mov	r5, r3
 80088de:	4603      	mov	r3, r0
 80088e0:	3b01      	subs	r3, #1
 80088e2:	61bb      	str	r3, [r7, #24]
 80088e4:	b281      	uxth	r1, r0
 80088e6:	f04f 0200 	mov.w	r2, #0
 80088ea:	f04f 0300 	mov.w	r3, #0
 80088ee:	f04f 0400 	mov.w	r4, #0
 80088f2:	00d4      	lsls	r4, r2, #3
 80088f4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80088f8:	00cb      	lsls	r3, r1, #3
 80088fa:	b281      	uxth	r1, r0
 80088fc:	f04f 0200 	mov.w	r2, #0
 8008900:	f04f 0300 	mov.w	r3, #0
 8008904:	f04f 0400 	mov.w	r4, #0
 8008908:	00d4      	lsls	r4, r2, #3
 800890a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800890e:	00cb      	lsls	r3, r1, #3
 8008910:	4603      	mov	r3, r0
 8008912:	3307      	adds	r3, #7
 8008914:	08db      	lsrs	r3, r3, #3
 8008916:	00db      	lsls	r3, r3, #3
 8008918:	ebad 0d03 	sub.w	sp, sp, r3
 800891c:	466b      	mov	r3, sp
 800891e:	3300      	adds	r3, #0
 8008920:	617b      	str	r3, [r7, #20]

    memcpy(cmd, p->payload,p->len); //Save the CMD to variable
 8008922:	6978      	ldr	r0, [r7, #20]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6859      	ldr	r1, [r3, #4]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	895b      	ldrh	r3, [r3, #10]
 800892c:	461a      	mov	r2, r3
 800892e:	f017 fdde 	bl	80204ee <memcpy>

    if((cmd[1] == 0xD1)||(cmd[1] == 0xD0)||(cmd[1] == 0xF6)||(cmd[1] == 0x0F)){
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	785b      	ldrb	r3, [r3, #1]
 8008936:	2bd1      	cmp	r3, #209	; 0xd1
 8008938:	d00b      	beq.n	8008952 <echo_recv+0x10a>
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	785b      	ldrb	r3, [r3, #1]
 800893e:	2bd0      	cmp	r3, #208	; 0xd0
 8008940:	d007      	beq.n	8008952 <echo_recv+0x10a>
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	785b      	ldrb	r3, [r3, #1]
 8008946:	2bf6      	cmp	r3, #246	; 0xf6
 8008948:	d003      	beq.n	8008952 <echo_recv+0x10a>
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	785b      	ldrb	r3, [r3, #1]
 800894e:	2b0f      	cmp	r3, #15
 8008950:	d105      	bne.n	800895e <echo_recv+0x116>
        while(pData[1] == 0x00){
 8008952:	bf00      	nop
 8008954:	4b0c      	ldr	r3, [pc, #48]	; (8008988 <echo_recv+0x140>)
 8008956:	785b      	ldrb	r3, [r3, #1]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d0fb      	beq.n	8008954 <echo_recv+0x10c>
    if((cmd[1] == 0xD1)||(cmd[1] == 0xD0)||(cmd[1] == 0xF6)||(cmd[1] == 0x0F)){
 800895c:	e002      	b.n	8008964 <echo_recv+0x11c>

        }
    }
    else
    {
        	HAL_Delay(10);
 800895e:	200a      	movs	r0, #10
 8008960:	f002 fd3a 	bl	800b3d8 <HAL_Delay>
    }

   tcp_write(tpcb, pData, pData[0]+1, 1); //Write back answer to HOST Software
 8008964:	4b08      	ldr	r3, [pc, #32]	; (8008988 <echo_recv+0x140>)
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	b29b      	uxth	r3, r3
 800896a:	3301      	adds	r3, #1
 800896c:	b29a      	uxth	r2, r3
 800896e:	2301      	movs	r3, #1
 8008970:	4905      	ldr	r1, [pc, #20]	; (8008988 <echo_recv+0x140>)
 8008972:	68b8      	ldr	r0, [r7, #8]
 8008974:	f013 f912 	bl	801bb9c <tcp_write>

    return ERR_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	46ad      	mov	sp, r5
}
 800897c:	4618      	mov	r0, r3
 800897e:	3720      	adds	r7, #32
 8008980:	46bd      	mov	sp, r7
 8008982:	bdb0      	pop	{r4, r5, r7, pc}
 8008984:	200000e4 	.word	0x200000e4
 8008988:	2000b28c 	.word	0x2000b28c
 800898c:	20019580 	.word	0x20019580

08008990 <calculateDB>:
 *      Author: christiansager
 */
#include "main.h"
#include "ValueTableMotherEngine.h"

calculateDB(){
 8008990:	b580      	push	{r7, lr}
 8008992:	b088      	sub	sp, #32
 8008994:	af00      	add	r7, sp, #0

	  voltageCH1[indexing]=(int16_t)analogIN[0]*(10.0/32767);
 8008996:	4bc0      	ldr	r3, [pc, #768]	; (8008c98 <calculateDB+0x308>)
 8008998:	881b      	ldrh	r3, [r3, #0]
 800899a:	b21b      	sxth	r3, r3
 800899c:	ee07 3a90 	vmov	s15, r3
 80089a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80089a4:	ed9f 6bba 	vldr	d6, [pc, #744]	; 8008c90 <calculateDB+0x300>
 80089a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80089ac:	4bbb      	ldr	r3, [pc, #748]	; (8008c9c <calculateDB+0x30c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80089b4:	4aba      	ldr	r2, [pc, #744]	; (8008ca0 <calculateDB+0x310>)
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	edc3 7a00 	vstr	s15, [r3]
	  if (voltageCH1[indexing]<0){voltageCH1[indexing] = voltageCH1[indexing]*(-1.0);}
 80089be:	4bb7      	ldr	r3, [pc, #732]	; (8008c9c <calculateDB+0x30c>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4ab7      	ldr	r2, [pc, #732]	; (8008ca0 <calculateDB+0x310>)
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4413      	add	r3, r2
 80089c8:	edd3 7a00 	vldr	s15, [r3]
 80089cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80089d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d4:	d513      	bpl.n	80089fe <calculateDB+0x6e>
 80089d6:	4bb1      	ldr	r3, [pc, #708]	; (8008c9c <calculateDB+0x30c>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4ab1      	ldr	r2, [pc, #708]	; (8008ca0 <calculateDB+0x310>)
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	edd3 7a00 	vldr	s15, [r3]
 80089e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80089e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80089ec:	4bab      	ldr	r3, [pc, #684]	; (8008c9c <calculateDB+0x30c>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	eef1 7a67 	vneg.f32	s15, s15
 80089f4:	4aaa      	ldr	r2, [pc, #680]	; (8008ca0 <calculateDB+0x310>)
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	edc3 7a00 	vstr	s15, [r3]
	  sum_CH1 = sum_CH1 + (voltageCH1[indexing]*voltageCH1[indexing]);
 80089fe:	4ba7      	ldr	r3, [pc, #668]	; (8008c9c <calculateDB+0x30c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4aa7      	ldr	r2, [pc, #668]	; (8008ca0 <calculateDB+0x310>)
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4413      	add	r3, r2
 8008a08:	ed93 7a00 	vldr	s14, [r3]
 8008a0c:	4ba3      	ldr	r3, [pc, #652]	; (8008c9c <calculateDB+0x30c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4aa3      	ldr	r2, [pc, #652]	; (8008ca0 <calculateDB+0x310>)
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	edd3 7a00 	vldr	s15, [r3]
 8008a1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a1e:	4ba1      	ldr	r3, [pc, #644]	; (8008ca4 <calculateDB+0x314>)
 8008a20:	edd3 7a00 	vldr	s15, [r3]
 8008a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a28:	4b9e      	ldr	r3, [pc, #632]	; (8008ca4 <calculateDB+0x314>)
 8008a2a:	edc3 7a00 	vstr	s15, [r3]

	  voltageCH2[indexing]=(int16_t)analogIN[1]*(10.0/32767);
 8008a2e:	4b9a      	ldr	r3, [pc, #616]	; (8008c98 <calculateDB+0x308>)
 8008a30:	885b      	ldrh	r3, [r3, #2]
 8008a32:	b21b      	sxth	r3, r3
 8008a34:	ee07 3a90 	vmov	s15, r3
 8008a38:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008a3c:	ed9f 6b94 	vldr	d6, [pc, #592]	; 8008c90 <calculateDB+0x300>
 8008a40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a44:	4b95      	ldr	r3, [pc, #596]	; (8008c9c <calculateDB+0x30c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008a4c:	4a96      	ldr	r2, [pc, #600]	; (8008ca8 <calculateDB+0x318>)
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4413      	add	r3, r2
 8008a52:	edc3 7a00 	vstr	s15, [r3]
	  if (voltageCH2[indexing]<0){voltageCH2[indexing] = voltageCH2[indexing]*(-1.0);}
 8008a56:	4b91      	ldr	r3, [pc, #580]	; (8008c9c <calculateDB+0x30c>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a93      	ldr	r2, [pc, #588]	; (8008ca8 <calculateDB+0x318>)
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	edd3 7a00 	vldr	s15, [r3]
 8008a64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a6c:	d513      	bpl.n	8008a96 <calculateDB+0x106>
 8008a6e:	4b8b      	ldr	r3, [pc, #556]	; (8008c9c <calculateDB+0x30c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a8d      	ldr	r2, [pc, #564]	; (8008ca8 <calculateDB+0x318>)
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	edd3 7a00 	vldr	s15, [r3]
 8008a7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008a80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008a84:	4b85      	ldr	r3, [pc, #532]	; (8008c9c <calculateDB+0x30c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	eef1 7a67 	vneg.f32	s15, s15
 8008a8c:	4a86      	ldr	r2, [pc, #536]	; (8008ca8 <calculateDB+0x318>)
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	edc3 7a00 	vstr	s15, [r3]
	  sum_CH2 = sum_CH2 + (voltageCH2[indexing]*voltageCH2[indexing]);
 8008a96:	4b81      	ldr	r3, [pc, #516]	; (8008c9c <calculateDB+0x30c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a83      	ldr	r2, [pc, #524]	; (8008ca8 <calculateDB+0x318>)
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	ed93 7a00 	vldr	s14, [r3]
 8008aa4:	4b7d      	ldr	r3, [pc, #500]	; (8008c9c <calculateDB+0x30c>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a7f      	ldr	r2, [pc, #508]	; (8008ca8 <calculateDB+0x318>)
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	edd3 7a00 	vldr	s15, [r3]
 8008ab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ab6:	4b7d      	ldr	r3, [pc, #500]	; (8008cac <calculateDB+0x31c>)
 8008ab8:	edd3 7a00 	vldr	s15, [r3]
 8008abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ac0:	4b7a      	ldr	r3, [pc, #488]	; (8008cac <calculateDB+0x31c>)
 8008ac2:	edc3 7a00 	vstr	s15, [r3]

	  voltageCH3[indexing]=(int16_t)analogIN[2]*(10.0/32767);
 8008ac6:	4b74      	ldr	r3, [pc, #464]	; (8008c98 <calculateDB+0x308>)
 8008ac8:	889b      	ldrh	r3, [r3, #4]
 8008aca:	b21b      	sxth	r3, r3
 8008acc:	ee07 3a90 	vmov	s15, r3
 8008ad0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008ad4:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8008c90 <calculateDB+0x300>
 8008ad8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008adc:	4b6f      	ldr	r3, [pc, #444]	; (8008c9c <calculateDB+0x30c>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008ae4:	4a72      	ldr	r2, [pc, #456]	; (8008cb0 <calculateDB+0x320>)
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	edc3 7a00 	vstr	s15, [r3]
	  if (voltageCH3[indexing]<0){voltageCH3[indexing] = voltageCH3[indexing]*(-1.0);}
 8008aee:	4b6b      	ldr	r3, [pc, #428]	; (8008c9c <calculateDB+0x30c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a6f      	ldr	r2, [pc, #444]	; (8008cb0 <calculateDB+0x320>)
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4413      	add	r3, r2
 8008af8:	edd3 7a00 	vldr	s15, [r3]
 8008afc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b04:	d513      	bpl.n	8008b2e <calculateDB+0x19e>
 8008b06:	4b65      	ldr	r3, [pc, #404]	; (8008c9c <calculateDB+0x30c>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a69      	ldr	r2, [pc, #420]	; (8008cb0 <calculateDB+0x320>)
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	edd3 7a00 	vldr	s15, [r3]
 8008b14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008b18:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008b1c:	4b5f      	ldr	r3, [pc, #380]	; (8008c9c <calculateDB+0x30c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	eef1 7a67 	vneg.f32	s15, s15
 8008b24:	4a62      	ldr	r2, [pc, #392]	; (8008cb0 <calculateDB+0x320>)
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	edc3 7a00 	vstr	s15, [r3]
	  sum_CH3 = sum_CH3 + (voltageCH3[indexing]*voltageCH3[indexing]);
 8008b2e:	4b5b      	ldr	r3, [pc, #364]	; (8008c9c <calculateDB+0x30c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a5f      	ldr	r2, [pc, #380]	; (8008cb0 <calculateDB+0x320>)
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	ed93 7a00 	vldr	s14, [r3]
 8008b3c:	4b57      	ldr	r3, [pc, #348]	; (8008c9c <calculateDB+0x30c>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a5b      	ldr	r2, [pc, #364]	; (8008cb0 <calculateDB+0x320>)
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4413      	add	r3, r2
 8008b46:	edd3 7a00 	vldr	s15, [r3]
 8008b4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008b4e:	4b59      	ldr	r3, [pc, #356]	; (8008cb4 <calculateDB+0x324>)
 8008b50:	edd3 7a00 	vldr	s15, [r3]
 8008b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b58:	4b56      	ldr	r3, [pc, #344]	; (8008cb4 <calculateDB+0x324>)
 8008b5a:	edc3 7a00 	vstr	s15, [r3]

	  voltageCH4[indexing]=(int16_t)analogIN[3]*(10.0/32767);
 8008b5e:	4b4e      	ldr	r3, [pc, #312]	; (8008c98 <calculateDB+0x308>)
 8008b60:	88db      	ldrh	r3, [r3, #6]
 8008b62:	b21b      	sxth	r3, r3
 8008b64:	ee07 3a90 	vmov	s15, r3
 8008b68:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008b6c:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8008c90 <calculateDB+0x300>
 8008b70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b74:	4b49      	ldr	r3, [pc, #292]	; (8008c9c <calculateDB+0x30c>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008b7c:	4a4e      	ldr	r2, [pc, #312]	; (8008cb8 <calculateDB+0x328>)
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	edc3 7a00 	vstr	s15, [r3]
	  if (voltageCH4[indexing]<0){voltageCH4[indexing] = voltageCH4[indexing]*(-1.0);}
 8008b86:	4b45      	ldr	r3, [pc, #276]	; (8008c9c <calculateDB+0x30c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a4b      	ldr	r2, [pc, #300]	; (8008cb8 <calculateDB+0x328>)
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	edd3 7a00 	vldr	s15, [r3]
 8008b94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b9c:	d513      	bpl.n	8008bc6 <calculateDB+0x236>
 8008b9e:	4b3f      	ldr	r3, [pc, #252]	; (8008c9c <calculateDB+0x30c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a45      	ldr	r2, [pc, #276]	; (8008cb8 <calculateDB+0x328>)
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	edd3 7a00 	vldr	s15, [r3]
 8008bac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008bb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008bb4:	4b39      	ldr	r3, [pc, #228]	; (8008c9c <calculateDB+0x30c>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	eef1 7a67 	vneg.f32	s15, s15
 8008bbc:	4a3e      	ldr	r2, [pc, #248]	; (8008cb8 <calculateDB+0x328>)
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	edc3 7a00 	vstr	s15, [r3]
	  sum_CH4 = sum_CH4 + (voltageCH4[indexing]*voltageCH4[indexing]);
 8008bc6:	4b35      	ldr	r3, [pc, #212]	; (8008c9c <calculateDB+0x30c>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a3b      	ldr	r2, [pc, #236]	; (8008cb8 <calculateDB+0x328>)
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	ed93 7a00 	vldr	s14, [r3]
 8008bd4:	4b31      	ldr	r3, [pc, #196]	; (8008c9c <calculateDB+0x30c>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a37      	ldr	r2, [pc, #220]	; (8008cb8 <calculateDB+0x328>)
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4413      	add	r3, r2
 8008bde:	edd3 7a00 	vldr	s15, [r3]
 8008be2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008be6:	4b35      	ldr	r3, [pc, #212]	; (8008cbc <calculateDB+0x32c>)
 8008be8:	edd3 7a00 	vldr	s15, [r3]
 8008bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bf0:	4b32      	ldr	r3, [pc, #200]	; (8008cbc <calculateDB+0x32c>)
 8008bf2:	edc3 7a00 	vstr	s15, [r3]

	  voltageCH5[indexing]=(int16_t)analogIN[4]*(10.0/32767);
 8008bf6:	4b28      	ldr	r3, [pc, #160]	; (8008c98 <calculateDB+0x308>)
 8008bf8:	891b      	ldrh	r3, [r3, #8]
 8008bfa:	b21b      	sxth	r3, r3
 8008bfc:	ee07 3a90 	vmov	s15, r3
 8008c00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008c04:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8008c90 <calculateDB+0x300>
 8008c08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c0c:	4b23      	ldr	r3, [pc, #140]	; (8008c9c <calculateDB+0x30c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008c14:	4a2a      	ldr	r2, [pc, #168]	; (8008cc0 <calculateDB+0x330>)
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4413      	add	r3, r2
 8008c1a:	edc3 7a00 	vstr	s15, [r3]
	  if (voltageCH5[indexing]<0){voltageCH5[indexing] = voltageCH5[indexing]*(-1.0);}
 8008c1e:	4b1f      	ldr	r3, [pc, #124]	; (8008c9c <calculateDB+0x30c>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a27      	ldr	r2, [pc, #156]	; (8008cc0 <calculateDB+0x330>)
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	edd3 7a00 	vldr	s15, [r3]
 8008c2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c34:	d513      	bpl.n	8008c5e <calculateDB+0x2ce>
 8008c36:	4b19      	ldr	r3, [pc, #100]	; (8008c9c <calculateDB+0x30c>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a21      	ldr	r2, [pc, #132]	; (8008cc0 <calculateDB+0x330>)
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	edd3 7a00 	vldr	s15, [r3]
 8008c44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008c48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008c4c:	4b13      	ldr	r3, [pc, #76]	; (8008c9c <calculateDB+0x30c>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	eef1 7a67 	vneg.f32	s15, s15
 8008c54:	4a1a      	ldr	r2, [pc, #104]	; (8008cc0 <calculateDB+0x330>)
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	4413      	add	r3, r2
 8008c5a:	edc3 7a00 	vstr	s15, [r3]
	  sum_CH5 = sum_CH5 + (voltageCH5[indexing]*voltageCH5[indexing]);
 8008c5e:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <calculateDB+0x30c>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a17      	ldr	r2, [pc, #92]	; (8008cc0 <calculateDB+0x330>)
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	ed93 7a00 	vldr	s14, [r3]
 8008c6c:	4b0b      	ldr	r3, [pc, #44]	; (8008c9c <calculateDB+0x30c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a13      	ldr	r2, [pc, #76]	; (8008cc0 <calculateDB+0x330>)
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4413      	add	r3, r2
 8008c76:	edd3 7a00 	vldr	s15, [r3]
 8008c7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008c7e:	4b11      	ldr	r3, [pc, #68]	; (8008cc4 <calculateDB+0x334>)
 8008c80:	edd3 7a00 	vldr	s15, [r3]
 8008c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c88:	4b0e      	ldr	r3, [pc, #56]	; (8008cc4 <calculateDB+0x334>)
 8008c8a:	edc3 7a00 	vstr	s15, [r3]
 8008c8e:	e01b      	b.n	8008cc8 <calculateDB+0x338>
 8008c90:	005000a0 	.word	0x005000a0
 8008c94:	3f340028 	.word	0x3f340028
 8008c98:	20010a84 	.word	0x20010a84
 8008c9c:	20011d14 	.word	0x20011d14
 8008ca0:	20011d2c 	.word	0x20011d2c
 8008ca4:	20012fec 	.word	0x20012fec
 8008ca8:	200156c8 	.word	0x200156c8
 8008cac:	20015628 	.word	0x20015628
 8008cb0:	20014328 	.word	0x20014328
 8008cb4:	20015624 	.word	0x20015624
 8008cb8:	20017c50 	.word	0x20017c50
 8008cbc:	200142e4 	.word	0x200142e4
 8008cc0:	20012ffc 	.word	0x20012ffc
 8008cc4:	20018f10 	.word	0x20018f10

	  voltageCH6[indexing]=(int16_t)analogIN[5]*(10.0/32767);
 8008cc8:	4bb5      	ldr	r3, [pc, #724]	; (8008fa0 <calculateDB+0x610>)
 8008cca:	895b      	ldrh	r3, [r3, #10]
 8008ccc:	b21b      	sxth	r3, r3
 8008cce:	ee07 3a90 	vmov	s15, r3
 8008cd2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008cd6:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8008f90 <calculateDB+0x600>
 8008cda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008cde:	4bb1      	ldr	r3, [pc, #708]	; (8008fa4 <calculateDB+0x614>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008ce6:	4ab0      	ldr	r2, [pc, #704]	; (8008fa8 <calculateDB+0x618>)
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	4413      	add	r3, r2
 8008cec:	edc3 7a00 	vstr	s15, [r3]
	  if (voltageCH6[indexing]<0){voltageCH6[indexing] = voltageCH6[indexing]*(-1.0);}
 8008cf0:	4bac      	ldr	r3, [pc, #688]	; (8008fa4 <calculateDB+0x614>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4aac      	ldr	r2, [pc, #688]	; (8008fa8 <calculateDB+0x618>)
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4413      	add	r3, r2
 8008cfa:	edd3 7a00 	vldr	s15, [r3]
 8008cfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d06:	d513      	bpl.n	8008d30 <calculateDB+0x3a0>
 8008d08:	4ba6      	ldr	r3, [pc, #664]	; (8008fa4 <calculateDB+0x614>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4aa6      	ldr	r2, [pc, #664]	; (8008fa8 <calculateDB+0x618>)
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	edd3 7a00 	vldr	s15, [r3]
 8008d16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008d1a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008d1e:	4ba1      	ldr	r3, [pc, #644]	; (8008fa4 <calculateDB+0x614>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	eef1 7a67 	vneg.f32	s15, s15
 8008d26:	4aa0      	ldr	r2, [pc, #640]	; (8008fa8 <calculateDB+0x618>)
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	edc3 7a00 	vstr	s15, [r3]
	  sum_CH6 = sum_CH6 + (voltageCH6[indexing]*voltageCH6[indexing]);
 8008d30:	4b9c      	ldr	r3, [pc, #624]	; (8008fa4 <calculateDB+0x614>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a9c      	ldr	r2, [pc, #624]	; (8008fa8 <calculateDB+0x618>)
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	ed93 7a00 	vldr	s14, [r3]
 8008d3e:	4b99      	ldr	r3, [pc, #612]	; (8008fa4 <calculateDB+0x614>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a99      	ldr	r2, [pc, #612]	; (8008fa8 <calculateDB+0x618>)
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	edd3 7a00 	vldr	s15, [r3]
 8008d4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008d50:	4b96      	ldr	r3, [pc, #600]	; (8008fac <calculateDB+0x61c>)
 8008d52:	edd3 7a00 	vldr	s15, [r3]
 8008d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d5a:	4b94      	ldr	r3, [pc, #592]	; (8008fac <calculateDB+0x61c>)
 8008d5c:	edc3 7a00 	vstr	s15, [r3]
	////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////



	  	  switch (channel){
 8008d60:	4b93      	ldr	r3, [pc, #588]	; (8008fb0 <calculateDB+0x620>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	3b01      	subs	r3, #1
 8008d66:	2b05      	cmp	r3, #5
 8008d68:	f200 83f1 	bhi.w	800954e <calculateDB+0xbbe>
 8008d6c:	a201      	add	r2, pc, #4	; (adr r2, 8008d74 <calculateDB+0x3e4>)
 8008d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d72:	bf00      	nop
 8008d74:	08008d8d 	.word	0x08008d8d
 8008d78:	08008f81 	.word	0x08008f81
 8008d7c:	080090f1 	.word	0x080090f1
 8008d80:	080091ef 	.word	0x080091ef
 8008d84:	08009323 	.word	0x08009323
 8008d88:	08009421 	.word	0x08009421
	  case 1:

		  MaxCH1=0.0;
 8008d8c:	4b89      	ldr	r3, [pc, #548]	; (8008fb4 <calculateDB+0x624>)
 8008d8e:	f04f 0200 	mov.w	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]

		  for (int i=0; i<6;i++){
 8008d94:	2300      	movs	r3, #0
 8008d96:	61fb      	str	r3, [r7, #28]
 8008d98:	e01f      	b.n	8008dda <calculateDB+0x44a>
	//Exception on overflow when indexing is exact 0 for Channel1//////////////////////////


				  if(MaxCH1 < voltageCH1[indexing-5+i]){MaxCH1 = voltageCH1[indexing-5+i];}
 8008d9a:	4b82      	ldr	r3, [pc, #520]	; (8008fa4 <calculateDB+0x614>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	1f5a      	subs	r2, r3, #5
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	4413      	add	r3, r2
 8008da4:	4a84      	ldr	r2, [pc, #528]	; (8008fb8 <calculateDB+0x628>)
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4413      	add	r3, r2
 8008daa:	ed93 7a00 	vldr	s14, [r3]
 8008dae:	4b81      	ldr	r3, [pc, #516]	; (8008fb4 <calculateDB+0x624>)
 8008db0:	edd3 7a00 	vldr	s15, [r3]
 8008db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dbc:	dd0a      	ble.n	8008dd4 <calculateDB+0x444>
 8008dbe:	4b79      	ldr	r3, [pc, #484]	; (8008fa4 <calculateDB+0x614>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	1f5a      	subs	r2, r3, #5
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	4a7b      	ldr	r2, [pc, #492]	; (8008fb8 <calculateDB+0x628>)
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	4413      	add	r3, r2
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a78      	ldr	r2, [pc, #480]	; (8008fb4 <calculateDB+0x624>)
 8008dd2:	6013      	str	r3, [r2, #0]
		  for (int i=0; i<6;i++){
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	61fb      	str	r3, [r7, #28]
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	2b05      	cmp	r3, #5
 8008dde:	dddc      	ble.n	8008d9a <calculateDB+0x40a>


		  }

		  tmp_decibelMaxCH1  = 20*log10(MaxCH1/1.095); //1.5 µsec!!!
 8008de0:	4b74      	ldr	r3, [pc, #464]	; (8008fb4 <calculateDB+0x624>)
 8008de2:	edd3 7a00 	vldr	s15, [r3]
 8008de6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008dea:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8008f98 <calculateDB+0x608>
 8008dee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008df2:	eeb0 0b45 	vmov.f64	d0, d5
 8008df6:	f018 facd 	bl	8021394 <log10>
 8008dfa:	eeb0 6b40 	vmov.f64	d6, d0
 8008dfe:	eeb3 7b04 	vmov.f64	d7, #52	; 0x41a00000  20.0
 8008e02:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008e06:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008e0a:	4b6c      	ldr	r3, [pc, #432]	; (8008fbc <calculateDB+0x62c>)
 8008e0c:	edc3 7a00 	vstr	s15, [r3]

		  if (voltageIn1MAX < MaxCH1){voltageIn1MAX=MaxCH1;}
 8008e10:	4b6b      	ldr	r3, [pc, #428]	; (8008fc0 <calculateDB+0x630>)
 8008e12:	ed93 7a00 	vldr	s14, [r3]
 8008e16:	4b67      	ldr	r3, [pc, #412]	; (8008fb4 <calculateDB+0x624>)
 8008e18:	edd3 7a00 	vldr	s15, [r3]
 8008e1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e24:	d503      	bpl.n	8008e2e <calculateDB+0x49e>
 8008e26:	4b63      	ldr	r3, [pc, #396]	; (8008fb4 <calculateDB+0x624>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a65      	ldr	r2, [pc, #404]	; (8008fc0 <calculateDB+0x630>)
 8008e2c:	6013      	str	r3, [r2, #0]
		  if (voltageIn2MAX < MaxCH2){voltageIn2MAX=MaxCH2;}
 8008e2e:	4b65      	ldr	r3, [pc, #404]	; (8008fc4 <calculateDB+0x634>)
 8008e30:	ed93 7a00 	vldr	s14, [r3]
 8008e34:	4b64      	ldr	r3, [pc, #400]	; (8008fc8 <calculateDB+0x638>)
 8008e36:	edd3 7a00 	vldr	s15, [r3]
 8008e3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e42:	d503      	bpl.n	8008e4c <calculateDB+0x4bc>
 8008e44:	4b60      	ldr	r3, [pc, #384]	; (8008fc8 <calculateDB+0x638>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a5e      	ldr	r2, [pc, #376]	; (8008fc4 <calculateDB+0x634>)
 8008e4a:	6013      	str	r3, [r2, #0]
		  if (voltageIn3MAX < MaxCH3){voltageIn3MAX=MaxCH3;}
 8008e4c:	4b5f      	ldr	r3, [pc, #380]	; (8008fcc <calculateDB+0x63c>)
 8008e4e:	ed93 7a00 	vldr	s14, [r3]
 8008e52:	4b5f      	ldr	r3, [pc, #380]	; (8008fd0 <calculateDB+0x640>)
 8008e54:	edd3 7a00 	vldr	s15, [r3]
 8008e58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e60:	d503      	bpl.n	8008e6a <calculateDB+0x4da>
 8008e62:	4b5b      	ldr	r3, [pc, #364]	; (8008fd0 <calculateDB+0x640>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a59      	ldr	r2, [pc, #356]	; (8008fcc <calculateDB+0x63c>)
 8008e68:	6013      	str	r3, [r2, #0]
		  if (voltageIn4MAX < MaxCH4){voltageIn4MAX=MaxCH4;}
 8008e6a:	4b5a      	ldr	r3, [pc, #360]	; (8008fd4 <calculateDB+0x644>)
 8008e6c:	ed93 7a00 	vldr	s14, [r3]
 8008e70:	4b59      	ldr	r3, [pc, #356]	; (8008fd8 <calculateDB+0x648>)
 8008e72:	edd3 7a00 	vldr	s15, [r3]
 8008e76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e7e:	d503      	bpl.n	8008e88 <calculateDB+0x4f8>
 8008e80:	4b55      	ldr	r3, [pc, #340]	; (8008fd8 <calculateDB+0x648>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a53      	ldr	r2, [pc, #332]	; (8008fd4 <calculateDB+0x644>)
 8008e86:	6013      	str	r3, [r2, #0]
		  if (voltageIn5MAX < MaxCH5){voltageIn5MAX=MaxCH5;}
 8008e88:	4b54      	ldr	r3, [pc, #336]	; (8008fdc <calculateDB+0x64c>)
 8008e8a:	ed93 7a00 	vldr	s14, [r3]
 8008e8e:	4b54      	ldr	r3, [pc, #336]	; (8008fe0 <calculateDB+0x650>)
 8008e90:	edd3 7a00 	vldr	s15, [r3]
 8008e94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e9c:	d503      	bpl.n	8008ea6 <calculateDB+0x516>
 8008e9e:	4b50      	ldr	r3, [pc, #320]	; (8008fe0 <calculateDB+0x650>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a4e      	ldr	r2, [pc, #312]	; (8008fdc <calculateDB+0x64c>)
 8008ea4:	6013      	str	r3, [r2, #0]
		  if (voltageIn6MAX < MaxCH6){voltageIn6MAX=MaxCH6;}
 8008ea6:	4b4f      	ldr	r3, [pc, #316]	; (8008fe4 <calculateDB+0x654>)
 8008ea8:	ed93 7a00 	vldr	s14, [r3]
 8008eac:	4b4e      	ldr	r3, [pc, #312]	; (8008fe8 <calculateDB+0x658>)
 8008eae:	edd3 7a00 	vldr	s15, [r3]
 8008eb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eba:	d503      	bpl.n	8008ec4 <calculateDB+0x534>
 8008ebc:	4b4a      	ldr	r3, [pc, #296]	; (8008fe8 <calculateDB+0x658>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a48      	ldr	r2, [pc, #288]	; (8008fe4 <calculateDB+0x654>)
 8008ec2:	6013      	str	r3, [r2, #0]

		  if (dbuMAX[0]<tmp_decibelMaxCH1){dbuMAX[0]=tmp_decibelMaxCH1;}
 8008ec4:	4b49      	ldr	r3, [pc, #292]	; (8008fec <calculateDB+0x65c>)
 8008ec6:	ed93 7a00 	vldr	s14, [r3]
 8008eca:	4b3c      	ldr	r3, [pc, #240]	; (8008fbc <calculateDB+0x62c>)
 8008ecc:	edd3 7a00 	vldr	s15, [r3]
 8008ed0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed8:	d503      	bpl.n	8008ee2 <calculateDB+0x552>
 8008eda:	4b38      	ldr	r3, [pc, #224]	; (8008fbc <calculateDB+0x62c>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a43      	ldr	r2, [pc, #268]	; (8008fec <calculateDB+0x65c>)
 8008ee0:	6013      	str	r3, [r2, #0]
		  if (dbuMAX[1]<tmp_decibelMaxCH2){dbuMAX[1]=tmp_decibelMaxCH2;}
 8008ee2:	4b42      	ldr	r3, [pc, #264]	; (8008fec <calculateDB+0x65c>)
 8008ee4:	ed93 7a01 	vldr	s14, [r3, #4]
 8008ee8:	4b41      	ldr	r3, [pc, #260]	; (8008ff0 <calculateDB+0x660>)
 8008eea:	edd3 7a00 	vldr	s15, [r3]
 8008eee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef6:	d503      	bpl.n	8008f00 <calculateDB+0x570>
 8008ef8:	4b3d      	ldr	r3, [pc, #244]	; (8008ff0 <calculateDB+0x660>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a3b      	ldr	r2, [pc, #236]	; (8008fec <calculateDB+0x65c>)
 8008efe:	6053      	str	r3, [r2, #4]
		  if (dbuMAX[2]<tmp_decibelMaxCH3){dbuMAX[2]=tmp_decibelMaxCH3;}
 8008f00:	4b3a      	ldr	r3, [pc, #232]	; (8008fec <calculateDB+0x65c>)
 8008f02:	ed93 7a02 	vldr	s14, [r3, #8]
 8008f06:	4b3b      	ldr	r3, [pc, #236]	; (8008ff4 <calculateDB+0x664>)
 8008f08:	edd3 7a00 	vldr	s15, [r3]
 8008f0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f14:	d503      	bpl.n	8008f1e <calculateDB+0x58e>
 8008f16:	4b37      	ldr	r3, [pc, #220]	; (8008ff4 <calculateDB+0x664>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a34      	ldr	r2, [pc, #208]	; (8008fec <calculateDB+0x65c>)
 8008f1c:	6093      	str	r3, [r2, #8]
		  if (dbuMAX[3]<tmp_decibelMaxCH4){dbuMAX[3]=tmp_decibelMaxCH4;}
 8008f1e:	4b33      	ldr	r3, [pc, #204]	; (8008fec <calculateDB+0x65c>)
 8008f20:	ed93 7a03 	vldr	s14, [r3, #12]
 8008f24:	4b34      	ldr	r3, [pc, #208]	; (8008ff8 <calculateDB+0x668>)
 8008f26:	edd3 7a00 	vldr	s15, [r3]
 8008f2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f32:	d503      	bpl.n	8008f3c <calculateDB+0x5ac>
 8008f34:	4b30      	ldr	r3, [pc, #192]	; (8008ff8 <calculateDB+0x668>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a2c      	ldr	r2, [pc, #176]	; (8008fec <calculateDB+0x65c>)
 8008f3a:	60d3      	str	r3, [r2, #12]
		  if (dbuMAX[4]<tmp_decibelMaxCH5){dbuMAX[4]=tmp_decibelMaxCH5;}
 8008f3c:	4b2b      	ldr	r3, [pc, #172]	; (8008fec <calculateDB+0x65c>)
 8008f3e:	ed93 7a04 	vldr	s14, [r3, #16]
 8008f42:	4b2e      	ldr	r3, [pc, #184]	; (8008ffc <calculateDB+0x66c>)
 8008f44:	edd3 7a00 	vldr	s15, [r3]
 8008f48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f50:	d503      	bpl.n	8008f5a <calculateDB+0x5ca>
 8008f52:	4b2a      	ldr	r3, [pc, #168]	; (8008ffc <calculateDB+0x66c>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a25      	ldr	r2, [pc, #148]	; (8008fec <calculateDB+0x65c>)
 8008f58:	6113      	str	r3, [r2, #16]
		  if (dbuMAX[5]<tmp_decibelMaxCH6){dbuMAX[5]=tmp_decibelMaxCH6;}
 8008f5a:	4b24      	ldr	r3, [pc, #144]	; (8008fec <calculateDB+0x65c>)
 8008f5c:	ed93 7a05 	vldr	s14, [r3, #20]
 8008f60:	4b27      	ldr	r3, [pc, #156]	; (8009000 <calculateDB+0x670>)
 8008f62:	edd3 7a00 	vldr	s15, [r3]
 8008f66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f6e:	d503      	bpl.n	8008f78 <calculateDB+0x5e8>
 8008f70:	4b23      	ldr	r3, [pc, #140]	; (8009000 <calculateDB+0x670>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a1d      	ldr	r2, [pc, #116]	; (8008fec <calculateDB+0x65c>)
 8008f76:	6153      	str	r3, [r2, #20]
		  channel=2;
 8008f78:	4b0d      	ldr	r3, [pc, #52]	; (8008fb0 <calculateDB+0x620>)
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	601a      	str	r2, [r3, #0]

		  break;
 8008f7e:	e2e6      	b.n	800954e <calculateDB+0xbbe>
	  case 2:
		  MaxCH2=0.0;
 8008f80:	4b11      	ldr	r3, [pc, #68]	; (8008fc8 <calculateDB+0x638>)
 8008f82:	f04f 0200 	mov.w	r2, #0
 8008f86:	601a      	str	r2, [r3, #0]
		  for (int i=0; i<6;i++){
 8008f88:	2300      	movs	r3, #0
 8008f8a:	61bb      	str	r3, [r7, #24]
 8008f8c:	e091      	b.n	80090b2 <calculateDB+0x722>
 8008f8e:	bf00      	nop
 8008f90:	005000a0 	.word	0x005000a0
 8008f94:	3f340028 	.word	0x3f340028
 8008f98:	b851eb85 	.word	0xb851eb85
 8008f9c:	3ff1851e 	.word	0x3ff1851e
 8008fa0:	20010a84 	.word	0x20010a84
 8008fa4:	20011d14 	.word	0x20011d14
 8008fa8:	2001698c 	.word	0x2001698c
 8008fac:	20012ff8 	.word	0x20012ff8
 8008fb0:	20014324 	.word	0x20014324
 8008fb4:	20011d1c 	.word	0x20011d1c
 8008fb8:	20011d2c 	.word	0x20011d2c
 8008fbc:	20015658 	.word	0x20015658
 8008fc0:	2000dcb0 	.word	0x2000dcb0
 8008fc4:	2000b714 	.word	0x2000b714
 8008fc8:	200142f0 	.word	0x200142f0
 8008fcc:	2000f18c 	.word	0x2000f18c
 8008fd0:	20011d24 	.word	0x20011d24
 8008fd4:	2000e57c 	.word	0x2000e57c
 8008fd8:	200156c0 	.word	0x200156c0
 8008fdc:	2000ed80 	.word	0x2000ed80
 8008fe0:	20011cd4 	.word	0x20011cd4
 8008fe4:	20010a9c 	.word	0x20010a9c
 8008fe8:	200142d8 	.word	0x200142d8
 8008fec:	20011aa4 	.word	0x20011aa4
 8008ff0:	20012ff0 	.word	0x20012ff0
 8008ff4:	200156c4 	.word	0x200156c4
 8008ff8:	20011d08 	.word	0x20011d08
 8008ffc:	200142ec 	.word	0x200142ec
 8009000:	20012ff4 	.word	0x20012ff4
	//Exception on overflow when indexing is exact 0 for Channel2//////////////////////////
			if(indexing == 0){
 8009004:	4b9c      	ldr	r3, [pc, #624]	; (8009278 <calculateDB+0x8e8>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d132      	bne.n	8009072 <calculateDB+0x6e2>
					if(i<1){
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	2b00      	cmp	r3, #0
 8009010:	dc15      	bgt.n	800903e <calculateDB+0x6ae>
						if(MaxCH2 < voltageCH2[i]){MaxCH1 = voltageCH2[i];}
 8009012:	4a9a      	ldr	r2, [pc, #616]	; (800927c <calculateDB+0x8ec>)
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	4413      	add	r3, r2
 800901a:	ed93 7a00 	vldr	s14, [r3]
 800901e:	4b98      	ldr	r3, [pc, #608]	; (8009280 <calculateDB+0x8f0>)
 8009020:	edd3 7a00 	vldr	s15, [r3]
 8009024:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800902c:	dd3e      	ble.n	80090ac <calculateDB+0x71c>
 800902e:	4a93      	ldr	r2, [pc, #588]	; (800927c <calculateDB+0x8ec>)
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a92      	ldr	r2, [pc, #584]	; (8009284 <calculateDB+0x8f4>)
 800903a:	6013      	str	r3, [r2, #0]
 800903c:	e036      	b.n	80090ac <calculateDB+0x71c>
					}else{
						if(MaxCH2 < voltageCH2[1200-i]){MaxCH2 = voltageCH2[1200-i];}
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 8009044:	4a8d      	ldr	r2, [pc, #564]	; (800927c <calculateDB+0x8ec>)
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	4413      	add	r3, r2
 800904a:	ed93 7a00 	vldr	s14, [r3]
 800904e:	4b8c      	ldr	r3, [pc, #560]	; (8009280 <calculateDB+0x8f0>)
 8009050:	edd3 7a00 	vldr	s15, [r3]
 8009054:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800905c:	dd26      	ble.n	80090ac <calculateDB+0x71c>
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 8009064:	4a85      	ldr	r2, [pc, #532]	; (800927c <calculateDB+0x8ec>)
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	4413      	add	r3, r2
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a84      	ldr	r2, [pc, #528]	; (8009280 <calculateDB+0x8f0>)
 800906e:	6013      	str	r3, [r2, #0]
 8009070:	e01c      	b.n	80090ac <calculateDB+0x71c>
					}
				}
	///////////////////////////////////////////////////////////////////////////////////////
				else {
					if(MaxCH2 < voltageCH2[indexing-6+i]){MaxCH2 = voltageCH2[indexing-6+i];}
 8009072:	4b81      	ldr	r3, [pc, #516]	; (8009278 <calculateDB+0x8e8>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	1f9a      	subs	r2, r3, #6
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	4413      	add	r3, r2
 800907c:	4a7f      	ldr	r2, [pc, #508]	; (800927c <calculateDB+0x8ec>)
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	ed93 7a00 	vldr	s14, [r3]
 8009086:	4b7e      	ldr	r3, [pc, #504]	; (8009280 <calculateDB+0x8f0>)
 8009088:	edd3 7a00 	vldr	s15, [r3]
 800908c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009094:	dd0a      	ble.n	80090ac <calculateDB+0x71c>
 8009096:	4b78      	ldr	r3, [pc, #480]	; (8009278 <calculateDB+0x8e8>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	1f9a      	subs	r2, r3, #6
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	4413      	add	r3, r2
 80090a0:	4a76      	ldr	r2, [pc, #472]	; (800927c <calculateDB+0x8ec>)
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a75      	ldr	r2, [pc, #468]	; (8009280 <calculateDB+0x8f0>)
 80090aa:	6013      	str	r3, [r2, #0]
		  for (int i=0; i<6;i++){
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	3301      	adds	r3, #1
 80090b0:	61bb      	str	r3, [r7, #24]
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	2b05      	cmp	r3, #5
 80090b6:	dda5      	ble.n	8009004 <calculateDB+0x674>
				}
			}

		  tmp_decibelMaxCH2  = 20*log10(MaxCH2/1.095); //1.5 µsec!!!
 80090b8:	4b71      	ldr	r3, [pc, #452]	; (8009280 <calculateDB+0x8f0>)
 80090ba:	edd3 7a00 	vldr	s15, [r3]
 80090be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80090c2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8009270 <calculateDB+0x8e0>
 80090c6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80090ca:	eeb0 0b45 	vmov.f64	d0, d5
 80090ce:	f018 f961 	bl	8021394 <log10>
 80090d2:	eeb0 6b40 	vmov.f64	d6, d0
 80090d6:	eeb3 7b04 	vmov.f64	d7, #52	; 0x41a00000  20.0
 80090da:	ee26 7b07 	vmul.f64	d7, d6, d7
 80090de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80090e2:	4b69      	ldr	r3, [pc, #420]	; (8009288 <calculateDB+0x8f8>)
 80090e4:	edc3 7a00 	vstr	s15, [r3]


		  channel=3;
 80090e8:	4b68      	ldr	r3, [pc, #416]	; (800928c <calculateDB+0x8fc>)
 80090ea:	2203      	movs	r2, #3
 80090ec:	601a      	str	r2, [r3, #0]

		  break;
 80090ee:	e22e      	b.n	800954e <calculateDB+0xbbe>
	  case 3:
		  MaxCH3=0.0;
 80090f0:	4b67      	ldr	r3, [pc, #412]	; (8009290 <calculateDB+0x900>)
 80090f2:	f04f 0200 	mov.w	r2, #0
 80090f6:	601a      	str	r2, [r3, #0]
		  for (int i=0; i<6;i++){
 80090f8:	2300      	movs	r3, #0
 80090fa:	617b      	str	r3, [r7, #20]
 80090fc:	e058      	b.n	80091b0 <calculateDB+0x820>
	//Exception on overflow when indexing is exact 1 for Channel3//////////////////////////
			if(indexing == 1){
 80090fe:	4b5e      	ldr	r3, [pc, #376]	; (8009278 <calculateDB+0x8e8>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d134      	bne.n	8009170 <calculateDB+0x7e0>
					if(i<2){
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	2b01      	cmp	r3, #1
 800910a:	dc15      	bgt.n	8009138 <calculateDB+0x7a8>
						if(MaxCH3 < voltageCH3[i]){MaxCH3 = voltageCH3[i];}
 800910c:	4a61      	ldr	r2, [pc, #388]	; (8009294 <calculateDB+0x904>)
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4413      	add	r3, r2
 8009114:	ed93 7a00 	vldr	s14, [r3]
 8009118:	4b5d      	ldr	r3, [pc, #372]	; (8009290 <calculateDB+0x900>)
 800911a:	edd3 7a00 	vldr	s15, [r3]
 800911e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009126:	dd40      	ble.n	80091aa <calculateDB+0x81a>
 8009128:	4a5a      	ldr	r2, [pc, #360]	; (8009294 <calculateDB+0x904>)
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	4413      	add	r3, r2
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a57      	ldr	r2, [pc, #348]	; (8009290 <calculateDB+0x900>)
 8009134:	6013      	str	r3, [r2, #0]
 8009136:	e038      	b.n	80091aa <calculateDB+0x81a>
					}else{
						if(MaxCH3 < voltageCH3[1201-i]){MaxCH3 = voltageCH3[1201-i];}
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	f240 43b1 	movw	r3, #1201	; 0x4b1
 800913e:	1a9b      	subs	r3, r3, r2
 8009140:	4a54      	ldr	r2, [pc, #336]	; (8009294 <calculateDB+0x904>)
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	ed93 7a00 	vldr	s14, [r3]
 800914a:	4b51      	ldr	r3, [pc, #324]	; (8009290 <calculateDB+0x900>)
 800914c:	edd3 7a00 	vldr	s15, [r3]
 8009150:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009158:	dd27      	ble.n	80091aa <calculateDB+0x81a>
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	f240 43b1 	movw	r3, #1201	; 0x4b1
 8009160:	1a9b      	subs	r3, r3, r2
 8009162:	4a4c      	ldr	r2, [pc, #304]	; (8009294 <calculateDB+0x904>)
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a49      	ldr	r2, [pc, #292]	; (8009290 <calculateDB+0x900>)
 800916c:	6013      	str	r3, [r2, #0]
 800916e:	e01c      	b.n	80091aa <calculateDB+0x81a>
					}
				}
	///////////////////////////////////////////////////////////////////////////////////////
				else {
					if(MaxCH3 < voltageCH3[indexing-6+i]){MaxCH3 = voltageCH3[indexing-6+i];}
 8009170:	4b41      	ldr	r3, [pc, #260]	; (8009278 <calculateDB+0x8e8>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	1f9a      	subs	r2, r3, #6
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	4413      	add	r3, r2
 800917a:	4a46      	ldr	r2, [pc, #280]	; (8009294 <calculateDB+0x904>)
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	4413      	add	r3, r2
 8009180:	ed93 7a00 	vldr	s14, [r3]
 8009184:	4b42      	ldr	r3, [pc, #264]	; (8009290 <calculateDB+0x900>)
 8009186:	edd3 7a00 	vldr	s15, [r3]
 800918a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800918e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009192:	dd0a      	ble.n	80091aa <calculateDB+0x81a>
 8009194:	4b38      	ldr	r3, [pc, #224]	; (8009278 <calculateDB+0x8e8>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	1f9a      	subs	r2, r3, #6
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	4413      	add	r3, r2
 800919e:	4a3d      	ldr	r2, [pc, #244]	; (8009294 <calculateDB+0x904>)
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a3a      	ldr	r2, [pc, #232]	; (8009290 <calculateDB+0x900>)
 80091a8:	6013      	str	r3, [r2, #0]
		  for (int i=0; i<6;i++){
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	3301      	adds	r3, #1
 80091ae:	617b      	str	r3, [r7, #20]
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	2b05      	cmp	r3, #5
 80091b4:	dda3      	ble.n	80090fe <calculateDB+0x76e>
				}
			}

		  tmp_decibelMaxCH3  = 20*log10(MaxCH3/1.095); //1.5 µsec!!!
 80091b6:	4b36      	ldr	r3, [pc, #216]	; (8009290 <calculateDB+0x900>)
 80091b8:	edd3 7a00 	vldr	s15, [r3]
 80091bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80091c0:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8009270 <calculateDB+0x8e0>
 80091c4:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80091c8:	eeb0 0b45 	vmov.f64	d0, d5
 80091cc:	f018 f8e2 	bl	8021394 <log10>
 80091d0:	eeb0 6b40 	vmov.f64	d6, d0
 80091d4:	eeb3 7b04 	vmov.f64	d7, #52	; 0x41a00000  20.0
 80091d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80091dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80091e0:	4b2d      	ldr	r3, [pc, #180]	; (8009298 <calculateDB+0x908>)
 80091e2:	edc3 7a00 	vstr	s15, [r3]


		  channel=4;
 80091e6:	4b29      	ldr	r3, [pc, #164]	; (800928c <calculateDB+0x8fc>)
 80091e8:	2204      	movs	r2, #4
 80091ea:	601a      	str	r2, [r3, #0]

		  break;
 80091ec:	e1af      	b.n	800954e <calculateDB+0xbbe>
	  case 4:
		  MaxCH4=0.0;
 80091ee:	4b2b      	ldr	r3, [pc, #172]	; (800929c <calculateDB+0x90c>)
 80091f0:	f04f 0200 	mov.w	r2, #0
 80091f4:	601a      	str	r2, [r3, #0]
		  for (int i=0; i<6;i++){
 80091f6:	2300      	movs	r3, #0
 80091f8:	613b      	str	r3, [r7, #16]
 80091fa:	e073      	b.n	80092e4 <calculateDB+0x954>
	//Exception on overflow when indexing is exact 2 for Channel4//////////////////////////
			if(indexing == 2){
 80091fc:	4b1e      	ldr	r3, [pc, #120]	; (8009278 <calculateDB+0x8e8>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b02      	cmp	r3, #2
 8009202:	d14f      	bne.n	80092a4 <calculateDB+0x914>
					if(i<3){
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	2b02      	cmp	r3, #2
 8009208:	dc15      	bgt.n	8009236 <calculateDB+0x8a6>
						if(MaxCH4 < voltageCH4[i]){MaxCH4 = voltageCH4[i];}
 800920a:	4a25      	ldr	r2, [pc, #148]	; (80092a0 <calculateDB+0x910>)
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	ed93 7a00 	vldr	s14, [r3]
 8009216:	4b21      	ldr	r3, [pc, #132]	; (800929c <calculateDB+0x90c>)
 8009218:	edd3 7a00 	vldr	s15, [r3]
 800921c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009224:	dd5b      	ble.n	80092de <calculateDB+0x94e>
 8009226:	4a1e      	ldr	r2, [pc, #120]	; (80092a0 <calculateDB+0x910>)
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4413      	add	r3, r2
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a1a      	ldr	r2, [pc, #104]	; (800929c <calculateDB+0x90c>)
 8009232:	6013      	str	r3, [r2, #0]
 8009234:	e053      	b.n	80092de <calculateDB+0x94e>
					}else{
						if(MaxCH4 < voltageCH4[1202-i]){MaxCH4 = voltageCH4[1202-i];}
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	f240 43b2 	movw	r3, #1202	; 0x4b2
 800923c:	1a9b      	subs	r3, r3, r2
 800923e:	4a18      	ldr	r2, [pc, #96]	; (80092a0 <calculateDB+0x910>)
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	ed93 7a00 	vldr	s14, [r3]
 8009248:	4b14      	ldr	r3, [pc, #80]	; (800929c <calculateDB+0x90c>)
 800924a:	edd3 7a00 	vldr	s15, [r3]
 800924e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009256:	dd42      	ble.n	80092de <calculateDB+0x94e>
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	f240 43b2 	movw	r3, #1202	; 0x4b2
 800925e:	1a9b      	subs	r3, r3, r2
 8009260:	4a0f      	ldr	r2, [pc, #60]	; (80092a0 <calculateDB+0x910>)
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4413      	add	r3, r2
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a0c      	ldr	r2, [pc, #48]	; (800929c <calculateDB+0x90c>)
 800926a:	6013      	str	r3, [r2, #0]
 800926c:	e037      	b.n	80092de <calculateDB+0x94e>
 800926e:	bf00      	nop
 8009270:	b851eb85 	.word	0xb851eb85
 8009274:	3ff1851e 	.word	0x3ff1851e
 8009278:	20011d14 	.word	0x20011d14
 800927c:	200156c8 	.word	0x200156c8
 8009280:	200142f0 	.word	0x200142f0
 8009284:	20011d1c 	.word	0x20011d1c
 8009288:	20012ff0 	.word	0x20012ff0
 800928c:	20014324 	.word	0x20014324
 8009290:	20011d24 	.word	0x20011d24
 8009294:	20014328 	.word	0x20014328
 8009298:	200156c4 	.word	0x200156c4
 800929c:	200156c0 	.word	0x200156c0
 80092a0:	20017c50 	.word	0x20017c50
					}
				}
	///////////////////////////////////////////////////////////////////////////////////////
				else {
					if(MaxCH4 < voltageCH4[indexing-6+i]){MaxCH4 = voltageCH4[indexing-6+i];}
 80092a4:	4b80      	ldr	r3, [pc, #512]	; (80094a8 <calculateDB+0xb18>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	1f9a      	subs	r2, r3, #6
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	4413      	add	r3, r2
 80092ae:	4a7f      	ldr	r2, [pc, #508]	; (80094ac <calculateDB+0xb1c>)
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	ed93 7a00 	vldr	s14, [r3]
 80092b8:	4b7d      	ldr	r3, [pc, #500]	; (80094b0 <calculateDB+0xb20>)
 80092ba:	edd3 7a00 	vldr	s15, [r3]
 80092be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80092c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c6:	dd0a      	ble.n	80092de <calculateDB+0x94e>
 80092c8:	4b77      	ldr	r3, [pc, #476]	; (80094a8 <calculateDB+0xb18>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	1f9a      	subs	r2, r3, #6
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	4413      	add	r3, r2
 80092d2:	4a76      	ldr	r2, [pc, #472]	; (80094ac <calculateDB+0xb1c>)
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	4413      	add	r3, r2
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a75      	ldr	r2, [pc, #468]	; (80094b0 <calculateDB+0xb20>)
 80092dc:	6013      	str	r3, [r2, #0]
		  for (int i=0; i<6;i++){
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	3301      	adds	r3, #1
 80092e2:	613b      	str	r3, [r7, #16]
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	2b05      	cmp	r3, #5
 80092e8:	dd88      	ble.n	80091fc <calculateDB+0x86c>
				}
			}


		  tmp_decibelMaxCH4  = 20*log10(MaxCH4/1.095); //1.5 µsec!!!
 80092ea:	4b71      	ldr	r3, [pc, #452]	; (80094b0 <calculateDB+0xb20>)
 80092ec:	edd3 7a00 	vldr	s15, [r3]
 80092f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80092f4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80094a0 <calculateDB+0xb10>
 80092f8:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80092fc:	eeb0 0b45 	vmov.f64	d0, d5
 8009300:	f018 f848 	bl	8021394 <log10>
 8009304:	eeb0 6b40 	vmov.f64	d6, d0
 8009308:	eeb3 7b04 	vmov.f64	d7, #52	; 0x41a00000  20.0
 800930c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009310:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009314:	4b67      	ldr	r3, [pc, #412]	; (80094b4 <calculateDB+0xb24>)
 8009316:	edc3 7a00 	vstr	s15, [r3]


		  channel=5;
 800931a:	4b67      	ldr	r3, [pc, #412]	; (80094b8 <calculateDB+0xb28>)
 800931c:	2205      	movs	r2, #5
 800931e:	601a      	str	r2, [r3, #0]

		  break;
 8009320:	e115      	b.n	800954e <calculateDB+0xbbe>
	  case 5:
		  MaxCH5=0.0;
 8009322:	4b66      	ldr	r3, [pc, #408]	; (80094bc <calculateDB+0xb2c>)
 8009324:	f04f 0200 	mov.w	r2, #0
 8009328:	601a      	str	r2, [r3, #0]
		  for (int i=0; i<6;i++){
 800932a:	2300      	movs	r3, #0
 800932c:	60fb      	str	r3, [r7, #12]
 800932e:	e058      	b.n	80093e2 <calculateDB+0xa52>
	//Exception on overflow when indexing is exact 3 for Channel5//////////////////////////
			if(indexing == 3){
 8009330:	4b5d      	ldr	r3, [pc, #372]	; (80094a8 <calculateDB+0xb18>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2b03      	cmp	r3, #3
 8009336:	d134      	bne.n	80093a2 <calculateDB+0xa12>
					if(i<4){
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2b03      	cmp	r3, #3
 800933c:	dc15      	bgt.n	800936a <calculateDB+0x9da>
						if(MaxCH5 < voltageCH5[i]){MaxCH5 = voltageCH5[i];}
 800933e:	4a60      	ldr	r2, [pc, #384]	; (80094c0 <calculateDB+0xb30>)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	ed93 7a00 	vldr	s14, [r3]
 800934a:	4b5c      	ldr	r3, [pc, #368]	; (80094bc <calculateDB+0xb2c>)
 800934c:	edd3 7a00 	vldr	s15, [r3]
 8009350:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009358:	dd40      	ble.n	80093dc <calculateDB+0xa4c>
 800935a:	4a59      	ldr	r2, [pc, #356]	; (80094c0 <calculateDB+0xb30>)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a55      	ldr	r2, [pc, #340]	; (80094bc <calculateDB+0xb2c>)
 8009366:	6013      	str	r3, [r2, #0]
 8009368:	e038      	b.n	80093dc <calculateDB+0xa4c>
					}else{
						if(MaxCH5 < voltageCH5[1203-i]){MaxCH5 = voltageCH5[1203-i];}
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	f240 43b3 	movw	r3, #1203	; 0x4b3
 8009370:	1a9b      	subs	r3, r3, r2
 8009372:	4a53      	ldr	r2, [pc, #332]	; (80094c0 <calculateDB+0xb30>)
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4413      	add	r3, r2
 8009378:	ed93 7a00 	vldr	s14, [r3]
 800937c:	4b4f      	ldr	r3, [pc, #316]	; (80094bc <calculateDB+0xb2c>)
 800937e:	edd3 7a00 	vldr	s15, [r3]
 8009382:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800938a:	dd27      	ble.n	80093dc <calculateDB+0xa4c>
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	f240 43b3 	movw	r3, #1203	; 0x4b3
 8009392:	1a9b      	subs	r3, r3, r2
 8009394:	4a4a      	ldr	r2, [pc, #296]	; (80094c0 <calculateDB+0xb30>)
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a47      	ldr	r2, [pc, #284]	; (80094bc <calculateDB+0xb2c>)
 800939e:	6013      	str	r3, [r2, #0]
 80093a0:	e01c      	b.n	80093dc <calculateDB+0xa4c>
					}
				}
	///////////////////////////////////////////////////////////////////////////////////////
				else {
					if(MaxCH5 < voltageCH5[indexing-6+i]){MaxCH5 = voltageCH5[indexing-6+i];}
 80093a2:	4b41      	ldr	r3, [pc, #260]	; (80094a8 <calculateDB+0xb18>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	1f9a      	subs	r2, r3, #6
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	4413      	add	r3, r2
 80093ac:	4a44      	ldr	r2, [pc, #272]	; (80094c0 <calculateDB+0xb30>)
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	ed93 7a00 	vldr	s14, [r3]
 80093b6:	4b41      	ldr	r3, [pc, #260]	; (80094bc <calculateDB+0xb2c>)
 80093b8:	edd3 7a00 	vldr	s15, [r3]
 80093bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80093c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093c4:	dd0a      	ble.n	80093dc <calculateDB+0xa4c>
 80093c6:	4b38      	ldr	r3, [pc, #224]	; (80094a8 <calculateDB+0xb18>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	1f9a      	subs	r2, r3, #6
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	4413      	add	r3, r2
 80093d0:	4a3b      	ldr	r2, [pc, #236]	; (80094c0 <calculateDB+0xb30>)
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4413      	add	r3, r2
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a38      	ldr	r2, [pc, #224]	; (80094bc <calculateDB+0xb2c>)
 80093da:	6013      	str	r3, [r2, #0]
		  for (int i=0; i<6;i++){
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	3301      	adds	r3, #1
 80093e0:	60fb      	str	r3, [r7, #12]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2b05      	cmp	r3, #5
 80093e6:	dda3      	ble.n	8009330 <calculateDB+0x9a0>
				}
			}

		  tmp_decibelMaxCH5  = 20*log10(MaxCH5/1.095); //1.5 µsec!!!
 80093e8:	4b34      	ldr	r3, [pc, #208]	; (80094bc <calculateDB+0xb2c>)
 80093ea:	edd3 7a00 	vldr	s15, [r3]
 80093ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80093f2:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80094a0 <calculateDB+0xb10>
 80093f6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80093fa:	eeb0 0b45 	vmov.f64	d0, d5
 80093fe:	f017 ffc9 	bl	8021394 <log10>
 8009402:	eeb0 6b40 	vmov.f64	d6, d0
 8009406:	eeb3 7b04 	vmov.f64	d7, #52	; 0x41a00000  20.0
 800940a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800940e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009412:	4b2c      	ldr	r3, [pc, #176]	; (80094c4 <calculateDB+0xb34>)
 8009414:	edc3 7a00 	vstr	s15, [r3]


		  channel=6;
 8009418:	4b27      	ldr	r3, [pc, #156]	; (80094b8 <calculateDB+0xb28>)
 800941a:	2206      	movs	r2, #6
 800941c:	601a      	str	r2, [r3, #0]
		  break;
 800941e:	e096      	b.n	800954e <calculateDB+0xbbe>
	  case 6:
		  MaxCH6=0.0;
 8009420:	4b29      	ldr	r3, [pc, #164]	; (80094c8 <calculateDB+0xb38>)
 8009422:	f04f 0200 	mov.w	r2, #0
 8009426:	601a      	str	r2, [r3, #0]
		  for (int i=0; i<6;i++){
 8009428:	2300      	movs	r3, #0
 800942a:	60bb      	str	r3, [r7, #8]
 800942c:	e070      	b.n	8009510 <calculateDB+0xb80>
	//Exception on overflow when indexing is exact 4 for Channel6//////////////////////////
			if(indexing == 4){
 800942e:	4b1e      	ldr	r3, [pc, #120]	; (80094a8 <calculateDB+0xb18>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2b04      	cmp	r3, #4
 8009434:	d14c      	bne.n	80094d0 <calculateDB+0xb40>
					if(i<5){
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	2b04      	cmp	r3, #4
 800943a:	dc15      	bgt.n	8009468 <calculateDB+0xad8>
						if(MaxCH6 < voltageCH6[i]){MaxCH6 = voltageCH6[i];}
 800943c:	4a23      	ldr	r2, [pc, #140]	; (80094cc <calculateDB+0xb3c>)
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	ed93 7a00 	vldr	s14, [r3]
 8009448:	4b1f      	ldr	r3, [pc, #124]	; (80094c8 <calculateDB+0xb38>)
 800944a:	edd3 7a00 	vldr	s15, [r3]
 800944e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009456:	dd58      	ble.n	800950a <calculateDB+0xb7a>
 8009458:	4a1c      	ldr	r2, [pc, #112]	; (80094cc <calculateDB+0xb3c>)
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a19      	ldr	r2, [pc, #100]	; (80094c8 <calculateDB+0xb38>)
 8009464:	6013      	str	r3, [r2, #0]
 8009466:	e050      	b.n	800950a <calculateDB+0xb7a>
					}else{
						if(MaxCH6 < voltageCH6[1204-i]){MaxCH6 = voltageCH6[1204-i];}
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	f240 43b4 	movw	r3, #1204	; 0x4b4
 800946e:	1a9b      	subs	r3, r3, r2
 8009470:	4a16      	ldr	r2, [pc, #88]	; (80094cc <calculateDB+0xb3c>)
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4413      	add	r3, r2
 8009476:	ed93 7a00 	vldr	s14, [r3]
 800947a:	4b13      	ldr	r3, [pc, #76]	; (80094c8 <calculateDB+0xb38>)
 800947c:	edd3 7a00 	vldr	s15, [r3]
 8009480:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009488:	dd3f      	ble.n	800950a <calculateDB+0xb7a>
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	f240 43b4 	movw	r3, #1204	; 0x4b4
 8009490:	1a9b      	subs	r3, r3, r2
 8009492:	4a0e      	ldr	r2, [pc, #56]	; (80094cc <calculateDB+0xb3c>)
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a0b      	ldr	r2, [pc, #44]	; (80094c8 <calculateDB+0xb38>)
 800949c:	6013      	str	r3, [r2, #0]
 800949e:	e034      	b.n	800950a <calculateDB+0xb7a>
 80094a0:	b851eb85 	.word	0xb851eb85
 80094a4:	3ff1851e 	.word	0x3ff1851e
 80094a8:	20011d14 	.word	0x20011d14
 80094ac:	20017c50 	.word	0x20017c50
 80094b0:	200156c0 	.word	0x200156c0
 80094b4:	20011d08 	.word	0x20011d08
 80094b8:	20014324 	.word	0x20014324
 80094bc:	20011cd4 	.word	0x20011cd4
 80094c0:	20012ffc 	.word	0x20012ffc
 80094c4:	200142ec 	.word	0x200142ec
 80094c8:	200142d8 	.word	0x200142d8
 80094cc:	2001698c 	.word	0x2001698c
					}
				}
	///////////////////////////////////////////////////////////////////////////////////////
				else {
					if(MaxCH6 < voltageCH6[indexing-6+i]){MaxCH6 = voltageCH6[indexing-6+i];}
 80094d0:	4ba7      	ldr	r3, [pc, #668]	; (8009770 <calculateDB+0xde0>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	1f9a      	subs	r2, r3, #6
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	4413      	add	r3, r2
 80094da:	4aa6      	ldr	r2, [pc, #664]	; (8009774 <calculateDB+0xde4>)
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	4413      	add	r3, r2
 80094e0:	ed93 7a00 	vldr	s14, [r3]
 80094e4:	4ba4      	ldr	r3, [pc, #656]	; (8009778 <calculateDB+0xde8>)
 80094e6:	edd3 7a00 	vldr	s15, [r3]
 80094ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80094ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f2:	dd0a      	ble.n	800950a <calculateDB+0xb7a>
 80094f4:	4b9e      	ldr	r3, [pc, #632]	; (8009770 <calculateDB+0xde0>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	1f9a      	subs	r2, r3, #6
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	4413      	add	r3, r2
 80094fe:	4a9d      	ldr	r2, [pc, #628]	; (8009774 <calculateDB+0xde4>)
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4413      	add	r3, r2
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a9c      	ldr	r2, [pc, #624]	; (8009778 <calculateDB+0xde8>)
 8009508:	6013      	str	r3, [r2, #0]
		  for (int i=0; i<6;i++){
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	3301      	adds	r3, #1
 800950e:	60bb      	str	r3, [r7, #8]
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2b05      	cmp	r3, #5
 8009514:	dd8b      	ble.n	800942e <calculateDB+0xa9e>
				}
			}

		  tmp_decibelMaxCH6  = 20*log10(MaxCH6/1.095); //1.5 µsec!!!
 8009516:	4b98      	ldr	r3, [pc, #608]	; (8009778 <calculateDB+0xde8>)
 8009518:	edd3 7a00 	vldr	s15, [r3]
 800951c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009520:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8009768 <calculateDB+0xdd8>
 8009524:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009528:	eeb0 0b45 	vmov.f64	d0, d5
 800952c:	f017 ff32 	bl	8021394 <log10>
 8009530:	eeb0 6b40 	vmov.f64	d6, d0
 8009534:	eeb3 7b04 	vmov.f64	d7, #52	; 0x41a00000  20.0
 8009538:	ee26 7b07 	vmul.f64	d7, d6, d7
 800953c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009540:	4b8e      	ldr	r3, [pc, #568]	; (800977c <calculateDB+0xdec>)
 8009542:	edc3 7a00 	vstr	s15, [r3]




		  channel=1;
 8009546:	4b8e      	ldr	r3, [pc, #568]	; (8009780 <calculateDB+0xdf0>)
 8009548:	2201      	movs	r2, #1
 800954a:	601a      	str	r2, [r3, #0]
		  break;
 800954c:	bf00      	nop
	  }

	  indexing++;
 800954e:	4b88      	ldr	r3, [pc, #544]	; (8009770 <calculateDB+0xde0>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	3301      	adds	r3, #1
 8009554:	4a86      	ldr	r2, [pc, #536]	; (8009770 <calculateDB+0xde0>)
 8009556:	6013      	str	r3, [r2, #0]

	  if (indexing > 1199) {
 8009558:	4b85      	ldr	r3, [pc, #532]	; (8009770 <calculateDB+0xde0>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8009560:	f2c0 823f 	blt.w	80099e2 <calculateDB+0x1052>
		  indexing = 0;
 8009564:	4b82      	ldr	r3, [pc, #520]	; (8009770 <calculateDB+0xde0>)
 8009566:	2200      	movs	r2, #0
 8009568:	601a      	str	r2, [r3, #0]
		 RMS_CH1 = (20*log10((sqrt (sum_CH1/1200))/1.095))+3;
 800956a:	4b86      	ldr	r3, [pc, #536]	; (8009784 <calculateDB+0xdf4>)
 800956c:	ed93 7a00 	vldr	s14, [r3]
 8009570:	eddf 6a85 	vldr	s13, [pc, #532]	; 8009788 <calculateDB+0xdf8>
 8009574:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009578:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800957c:	eeb0 0b47 	vmov.f64	d0, d7
 8009580:	f017 ff76 	bl	8021470 <sqrt>
 8009584:	eeb0 5b40 	vmov.f64	d5, d0
 8009588:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8009768 <calculateDB+0xdd8>
 800958c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8009590:	eeb0 0b46 	vmov.f64	d0, d6
 8009594:	f017 fefe 	bl	8021394 <log10>
 8009598:	eeb0 6b40 	vmov.f64	d6, d0
 800959c:	eeb3 7b04 	vmov.f64	d7, #52	; 0x41a00000  20.0
 80095a0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80095a4:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80095a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80095ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80095b0:	4b76      	ldr	r3, [pc, #472]	; (800978c <calculateDB+0xdfc>)
 80095b2:	edc3 7a00 	vstr	s15, [r3]
		 RMS_CH2 = (20*log10((sqrt (sum_CH2/1200))/1.095))+3;
 80095b6:	4b76      	ldr	r3, [pc, #472]	; (8009790 <calculateDB+0xe00>)
 80095b8:	ed93 7a00 	vldr	s14, [r3]
 80095bc:	eddf 6a72 	vldr	s13, [pc, #456]	; 8009788 <calculateDB+0xdf8>
 80095c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80095c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80095c8:	eeb0 0b47 	vmov.f64	d0, d7
 80095cc:	f017 ff50 	bl	8021470 <sqrt>
 80095d0:	eeb0 5b40 	vmov.f64	d5, d0
 80095d4:	ed9f 7b64 	vldr	d7, [pc, #400]	; 8009768 <calculateDB+0xdd8>
 80095d8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80095dc:	eeb0 0b46 	vmov.f64	d0, d6
 80095e0:	f017 fed8 	bl	8021394 <log10>
 80095e4:	eeb0 6b40 	vmov.f64	d6, d0
 80095e8:	eeb3 7b04 	vmov.f64	d7, #52	; 0x41a00000  20.0
 80095ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80095f0:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80095f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80095f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80095fc:	4b65      	ldr	r3, [pc, #404]	; (8009794 <calculateDB+0xe04>)
 80095fe:	edc3 7a00 	vstr	s15, [r3]
		 RMS_CH3 = (20*log10((sqrt (sum_CH3/1200))/1.095))+3;
 8009602:	4b65      	ldr	r3, [pc, #404]	; (8009798 <calculateDB+0xe08>)
 8009604:	ed93 7a00 	vldr	s14, [r3]
 8009608:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009788 <calculateDB+0xdf8>
 800960c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009610:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009614:	eeb0 0b47 	vmov.f64	d0, d7
 8009618:	f017 ff2a 	bl	8021470 <sqrt>
 800961c:	eeb0 5b40 	vmov.f64	d5, d0
 8009620:	ed9f 7b51 	vldr	d7, [pc, #324]	; 8009768 <calculateDB+0xdd8>
 8009624:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8009628:	eeb0 0b46 	vmov.f64	d0, d6
 800962c:	f017 feb2 	bl	8021394 <log10>
 8009630:	eeb0 6b40 	vmov.f64	d6, d0
 8009634:	eeb3 7b04 	vmov.f64	d7, #52	; 0x41a00000  20.0
 8009638:	ee26 7b07 	vmul.f64	d7, d6, d7
 800963c:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8009640:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009644:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009648:	4b54      	ldr	r3, [pc, #336]	; (800979c <calculateDB+0xe0c>)
 800964a:	edc3 7a00 	vstr	s15, [r3]
		 RMS_CH4 = (20*log10((sqrt (sum_CH4/1200))/1.095))+3;
 800964e:	4b54      	ldr	r3, [pc, #336]	; (80097a0 <calculateDB+0xe10>)
 8009650:	ed93 7a00 	vldr	s14, [r3]
 8009654:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8009788 <calculateDB+0xdf8>
 8009658:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800965c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009660:	eeb0 0b47 	vmov.f64	d0, d7
 8009664:	f017 ff04 	bl	8021470 <sqrt>
 8009668:	eeb0 5b40 	vmov.f64	d5, d0
 800966c:	ed9f 7b3e 	vldr	d7, [pc, #248]	; 8009768 <calculateDB+0xdd8>
 8009670:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8009674:	eeb0 0b46 	vmov.f64	d0, d6
 8009678:	f017 fe8c 	bl	8021394 <log10>
 800967c:	eeb0 6b40 	vmov.f64	d6, d0
 8009680:	eeb3 7b04 	vmov.f64	d7, #52	; 0x41a00000  20.0
 8009684:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009688:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800968c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009690:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009694:	4b43      	ldr	r3, [pc, #268]	; (80097a4 <calculateDB+0xe14>)
 8009696:	edc3 7a00 	vstr	s15, [r3]
		 RMS_CH5 = (20*log10((sqrt (sum_CH5/1200))/1.095))+3;
 800969a:	4b43      	ldr	r3, [pc, #268]	; (80097a8 <calculateDB+0xe18>)
 800969c:	ed93 7a00 	vldr	s14, [r3]
 80096a0:	eddf 6a39 	vldr	s13, [pc, #228]	; 8009788 <calculateDB+0xdf8>
 80096a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80096a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80096ac:	eeb0 0b47 	vmov.f64	d0, d7
 80096b0:	f017 fede 	bl	8021470 <sqrt>
 80096b4:	eeb0 5b40 	vmov.f64	d5, d0
 80096b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8009768 <calculateDB+0xdd8>
 80096bc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80096c0:	eeb0 0b46 	vmov.f64	d0, d6
 80096c4:	f017 fe66 	bl	8021394 <log10>
 80096c8:	eeb0 6b40 	vmov.f64	d6, d0
 80096cc:	eeb3 7b04 	vmov.f64	d7, #52	; 0x41a00000  20.0
 80096d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80096d4:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80096d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80096dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80096e0:	4b32      	ldr	r3, [pc, #200]	; (80097ac <calculateDB+0xe1c>)
 80096e2:	edc3 7a00 	vstr	s15, [r3]
		 RMS_CH6 = (20*log10((sqrt (sum_CH6/1200))/1.095))+3;
 80096e6:	4b32      	ldr	r3, [pc, #200]	; (80097b0 <calculateDB+0xe20>)
 80096e8:	ed93 7a00 	vldr	s14, [r3]
 80096ec:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009788 <calculateDB+0xdf8>
 80096f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80096f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80096f8:	eeb0 0b47 	vmov.f64	d0, d7
 80096fc:	f017 feb8 	bl	8021470 <sqrt>
 8009700:	eeb0 5b40 	vmov.f64	d5, d0
 8009704:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8009768 <calculateDB+0xdd8>
 8009708:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800970c:	eeb0 0b46 	vmov.f64	d0, d6
 8009710:	f017 fe40 	bl	8021394 <log10>
 8009714:	eeb0 6b40 	vmov.f64	d6, d0
 8009718:	eeb3 7b04 	vmov.f64	d7, #52	; 0x41a00000  20.0
 800971c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009720:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8009724:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009728:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800972c:	4b21      	ldr	r3, [pc, #132]	; (80097b4 <calculateDB+0xe24>)
 800972e:	edc3 7a00 	vstr	s15, [r3]

		  sum_CH1_RMS_long[3]=RMS_CH1;
 8009732:	4b16      	ldr	r3, [pc, #88]	; (800978c <calculateDB+0xdfc>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a20      	ldr	r2, [pc, #128]	; (80097b8 <calculateDB+0xe28>)
 8009738:	60d3      	str	r3, [r2, #12]
		  sum_CH2_RMS_long[3]=RMS_CH2;
 800973a:	4b16      	ldr	r3, [pc, #88]	; (8009794 <calculateDB+0xe04>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a1f      	ldr	r2, [pc, #124]	; (80097bc <calculateDB+0xe2c>)
 8009740:	60d3      	str	r3, [r2, #12]
		  sum_CH3_RMS_long[3]=RMS_CH3;
 8009742:	4b16      	ldr	r3, [pc, #88]	; (800979c <calculateDB+0xe0c>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a1e      	ldr	r2, [pc, #120]	; (80097c0 <calculateDB+0xe30>)
 8009748:	60d3      	str	r3, [r2, #12]
		  sum_CH4_RMS_long[3]=RMS_CH4;
 800974a:	4b16      	ldr	r3, [pc, #88]	; (80097a4 <calculateDB+0xe14>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a1d      	ldr	r2, [pc, #116]	; (80097c4 <calculateDB+0xe34>)
 8009750:	60d3      	str	r3, [r2, #12]
		  sum_CH5_RMS_long[3]=RMS_CH5;
 8009752:	4b16      	ldr	r3, [pc, #88]	; (80097ac <calculateDB+0xe1c>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a1c      	ldr	r2, [pc, #112]	; (80097c8 <calculateDB+0xe38>)
 8009758:	60d3      	str	r3, [r2, #12]
		  sum_CH6_RMS_long[3]=RMS_CH6;
 800975a:	4b16      	ldr	r3, [pc, #88]	; (80097b4 <calculateDB+0xe24>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a1b      	ldr	r2, [pc, #108]	; (80097cc <calculateDB+0xe3c>)
 8009760:	60d3      	str	r3, [r2, #12]

		  for(int i=0;i<3;i++){
 8009762:	2300      	movs	r3, #0
 8009764:	607b      	str	r3, [r7, #4]
 8009766:	e0cc      	b.n	8009902 <calculateDB+0xf72>
 8009768:	b851eb85 	.word	0xb851eb85
 800976c:	3ff1851e 	.word	0x3ff1851e
 8009770:	20011d14 	.word	0x20011d14
 8009774:	2001698c 	.word	0x2001698c
 8009778:	200142d8 	.word	0x200142d8
 800977c:	20012ff4 	.word	0x20012ff4
 8009780:	20014324 	.word	0x20014324
 8009784:	20012fec 	.word	0x20012fec
 8009788:	44960000 	.word	0x44960000
 800978c:	2001565c 	.word	0x2001565c
 8009790:	20015628 	.word	0x20015628
 8009794:	200155e8 	.word	0x200155e8
 8009798:	20015624 	.word	0x20015624
 800979c:	20011d04 	.word	0x20011d04
 80097a0:	200142e4 	.word	0x200142e4
 80097a4:	20017c4c 	.word	0x20017c4c
 80097a8:	20018f10 	.word	0x20018f10
 80097ac:	200142d4 	.word	0x200142d4
 80097b0:	20012ff8 	.word	0x20012ff8
 80097b4:	20015690 	.word	0x20015690
 80097b8:	200155f8 	.word	0x200155f8
 80097bc:	2001562c 	.word	0x2001562c
 80097c0:	200142f4 	.word	0x200142f4
 80097c4:	20011cd8 	.word	0x20011cd8
 80097c8:	20015694 	.word	0x20015694
 80097cc:	20015664 	.word	0x20015664
			  sum_CH1_RMS_long[i] = sum_CH1_RMS_long[i+1];
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3301      	adds	r3, #1
 80097d4:	4a9c      	ldr	r2, [pc, #624]	; (8009a48 <calculateDB+0x10b8>)
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	4413      	add	r3, r2
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	499a      	ldr	r1, [pc, #616]	; (8009a48 <calculateDB+0x10b8>)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	440b      	add	r3, r1
 80097e4:	601a      	str	r2, [r3, #0]
			  sum_CH1_RMS = sum_CH1_RMS + sum_CH1_RMS_long[i];
 80097e6:	4a98      	ldr	r2, [pc, #608]	; (8009a48 <calculateDB+0x10b8>)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	ed93 7a00 	vldr	s14, [r3]
 80097f2:	4b96      	ldr	r3, [pc, #600]	; (8009a4c <calculateDB+0x10bc>)
 80097f4:	edd3 7a00 	vldr	s15, [r3]
 80097f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097fc:	4b93      	ldr	r3, [pc, #588]	; (8009a4c <calculateDB+0x10bc>)
 80097fe:	edc3 7a00 	vstr	s15, [r3]

			  sum_CH2_RMS_long[i] = sum_CH2_RMS_long[i+1];
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	3301      	adds	r3, #1
 8009806:	4a92      	ldr	r2, [pc, #584]	; (8009a50 <calculateDB+0x10c0>)
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	4990      	ldr	r1, [pc, #576]	; (8009a50 <calculateDB+0x10c0>)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	440b      	add	r3, r1
 8009816:	601a      	str	r2, [r3, #0]
			  sum_CH2_RMS = sum_CH2_RMS + sum_CH2_RMS_long[i];
 8009818:	4a8d      	ldr	r2, [pc, #564]	; (8009a50 <calculateDB+0x10c0>)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	ed93 7a00 	vldr	s14, [r3]
 8009824:	4b8b      	ldr	r3, [pc, #556]	; (8009a54 <calculateDB+0x10c4>)
 8009826:	edd3 7a00 	vldr	s15, [r3]
 800982a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800982e:	4b89      	ldr	r3, [pc, #548]	; (8009a54 <calculateDB+0x10c4>)
 8009830:	edc3 7a00 	vstr	s15, [r3]

			  sum_CH3_RMS_long[i] = sum_CH3_RMS_long[i+1];
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	3301      	adds	r3, #1
 8009838:	4a87      	ldr	r2, [pc, #540]	; (8009a58 <calculateDB+0x10c8>)
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	4985      	ldr	r1, [pc, #532]	; (8009a58 <calculateDB+0x10c8>)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	440b      	add	r3, r1
 8009848:	601a      	str	r2, [r3, #0]
			  sum_CH3_RMS = sum_CH3_RMS + sum_CH3_RMS_long[i];
 800984a:	4a83      	ldr	r2, [pc, #524]	; (8009a58 <calculateDB+0x10c8>)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	ed93 7a00 	vldr	s14, [r3]
 8009856:	4b81      	ldr	r3, [pc, #516]	; (8009a5c <calculateDB+0x10cc>)
 8009858:	edd3 7a00 	vldr	s15, [r3]
 800985c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009860:	4b7e      	ldr	r3, [pc, #504]	; (8009a5c <calculateDB+0x10cc>)
 8009862:	edc3 7a00 	vstr	s15, [r3]

			  sum_CH4_RMS_long[i] = sum_CH4_RMS_long[i+1];
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	3301      	adds	r3, #1
 800986a:	4a7d      	ldr	r2, [pc, #500]	; (8009a60 <calculateDB+0x10d0>)
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4413      	add	r3, r2
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	497b      	ldr	r1, [pc, #492]	; (8009a60 <calculateDB+0x10d0>)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	440b      	add	r3, r1
 800987a:	601a      	str	r2, [r3, #0]
			  sum_CH4_RMS = sum_CH4_RMS + sum_CH4_RMS_long[i];
 800987c:	4a78      	ldr	r2, [pc, #480]	; (8009a60 <calculateDB+0x10d0>)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	4413      	add	r3, r2
 8009884:	ed93 7a00 	vldr	s14, [r3]
 8009888:	4b76      	ldr	r3, [pc, #472]	; (8009a64 <calculateDB+0x10d4>)
 800988a:	edd3 7a00 	vldr	s15, [r3]
 800988e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009892:	4b74      	ldr	r3, [pc, #464]	; (8009a64 <calculateDB+0x10d4>)
 8009894:	edc3 7a00 	vstr	s15, [r3]

			  sum_CH5_RMS_long[i] = sum_CH5_RMS_long[i+1];
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	3301      	adds	r3, #1
 800989c:	4a72      	ldr	r2, [pc, #456]	; (8009a68 <calculateDB+0x10d8>)
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	4413      	add	r3, r2
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	4970      	ldr	r1, [pc, #448]	; (8009a68 <calculateDB+0x10d8>)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	440b      	add	r3, r1
 80098ac:	601a      	str	r2, [r3, #0]
			  sum_CH5_RMS = sum_CH5_RMS + sum_CH5_RMS_long[i];
 80098ae:	4a6e      	ldr	r2, [pc, #440]	; (8009a68 <calculateDB+0x10d8>)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	ed93 7a00 	vldr	s14, [r3]
 80098ba:	4b6c      	ldr	r3, [pc, #432]	; (8009a6c <calculateDB+0x10dc>)
 80098bc:	edd3 7a00 	vldr	s15, [r3]
 80098c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098c4:	4b69      	ldr	r3, [pc, #420]	; (8009a6c <calculateDB+0x10dc>)
 80098c6:	edc3 7a00 	vstr	s15, [r3]

			  sum_CH6_RMS_long[i] = sum_CH6_RMS_long[i+1];
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	3301      	adds	r3, #1
 80098ce:	4a68      	ldr	r2, [pc, #416]	; (8009a70 <calculateDB+0x10e0>)
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	4413      	add	r3, r2
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	4966      	ldr	r1, [pc, #408]	; (8009a70 <calculateDB+0x10e0>)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	440b      	add	r3, r1
 80098de:	601a      	str	r2, [r3, #0]
			  sum_CH6_RMS = sum_CH6_RMS + sum_CH6_RMS_long[i];
 80098e0:	4a63      	ldr	r2, [pc, #396]	; (8009a70 <calculateDB+0x10e0>)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	ed93 7a00 	vldr	s14, [r3]
 80098ec:	4b61      	ldr	r3, [pc, #388]	; (8009a74 <calculateDB+0x10e4>)
 80098ee:	edd3 7a00 	vldr	s15, [r3]
 80098f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098f6:	4b5f      	ldr	r3, [pc, #380]	; (8009a74 <calculateDB+0x10e4>)
 80098f8:	edc3 7a00 	vstr	s15, [r3]
		  for(int i=0;i<3;i++){
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	3301      	adds	r3, #1
 8009900:	607b      	str	r3, [r7, #4]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2b02      	cmp	r3, #2
 8009906:	f77f af63 	ble.w	80097d0 <calculateDB+0xe40>

		  }
		  RMS_CH1_long=sum_CH1_RMS/3;
 800990a:	4b50      	ldr	r3, [pc, #320]	; (8009a4c <calculateDB+0x10bc>)
 800990c:	ed93 7a00 	vldr	s14, [r3]
 8009910:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8009914:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009918:	4b57      	ldr	r3, [pc, #348]	; (8009a78 <calculateDB+0x10e8>)
 800991a:	edc3 7a00 	vstr	s15, [r3]
		  RMS_CH2_long=sum_CH2_RMS/3;
 800991e:	4b4d      	ldr	r3, [pc, #308]	; (8009a54 <calculateDB+0x10c4>)
 8009920:	ed93 7a00 	vldr	s14, [r3]
 8009924:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8009928:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800992c:	4b53      	ldr	r3, [pc, #332]	; (8009a7c <calculateDB+0x10ec>)
 800992e:	edc3 7a00 	vstr	s15, [r3]
		  RMS_CH3_long=sum_CH3_RMS/3;
 8009932:	4b4a      	ldr	r3, [pc, #296]	; (8009a5c <calculateDB+0x10cc>)
 8009934:	ed93 7a00 	vldr	s14, [r3]
 8009938:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800993c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009940:	4b4f      	ldr	r3, [pc, #316]	; (8009a80 <calculateDB+0x10f0>)
 8009942:	edc3 7a00 	vstr	s15, [r3]
		  RMS_CH4_long=sum_CH4_RMS/3;
 8009946:	4b47      	ldr	r3, [pc, #284]	; (8009a64 <calculateDB+0x10d4>)
 8009948:	ed93 7a00 	vldr	s14, [r3]
 800994c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8009950:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009954:	4b4b      	ldr	r3, [pc, #300]	; (8009a84 <calculateDB+0x10f4>)
 8009956:	edc3 7a00 	vstr	s15, [r3]
		  RMS_CH5_long=sum_CH5_RMS/3;
 800995a:	4b44      	ldr	r3, [pc, #272]	; (8009a6c <calculateDB+0x10dc>)
 800995c:	ed93 7a00 	vldr	s14, [r3]
 8009960:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8009964:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009968:	4b47      	ldr	r3, [pc, #284]	; (8009a88 <calculateDB+0x10f8>)
 800996a:	edc3 7a00 	vstr	s15, [r3]
		  RMS_CH6_long=sum_CH6_RMS/3;
 800996e:	4b41      	ldr	r3, [pc, #260]	; (8009a74 <calculateDB+0x10e4>)
 8009970:	ed93 7a00 	vldr	s14, [r3]
 8009974:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8009978:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800997c:	4b43      	ldr	r3, [pc, #268]	; (8009a8c <calculateDB+0x10fc>)
 800997e:	edc3 7a00 	vstr	s15, [r3]

		  sum_CH1=0.0;
 8009982:	4b43      	ldr	r3, [pc, #268]	; (8009a90 <calculateDB+0x1100>)
 8009984:	f04f 0200 	mov.w	r2, #0
 8009988:	601a      	str	r2, [r3, #0]
		  sum_CH2=0.0;
 800998a:	4b42      	ldr	r3, [pc, #264]	; (8009a94 <calculateDB+0x1104>)
 800998c:	f04f 0200 	mov.w	r2, #0
 8009990:	601a      	str	r2, [r3, #0]
		  sum_CH3=0.0;
 8009992:	4b41      	ldr	r3, [pc, #260]	; (8009a98 <calculateDB+0x1108>)
 8009994:	f04f 0200 	mov.w	r2, #0
 8009998:	601a      	str	r2, [r3, #0]
		  sum_CH4=0.0;
 800999a:	4b40      	ldr	r3, [pc, #256]	; (8009a9c <calculateDB+0x110c>)
 800999c:	f04f 0200 	mov.w	r2, #0
 80099a0:	601a      	str	r2, [r3, #0]
		  sum_CH5=0.0;
 80099a2:	4b3f      	ldr	r3, [pc, #252]	; (8009aa0 <calculateDB+0x1110>)
 80099a4:	f04f 0200 	mov.w	r2, #0
 80099a8:	601a      	str	r2, [r3, #0]
		  sum_CH6=0.0;
 80099aa:	4b3e      	ldr	r3, [pc, #248]	; (8009aa4 <calculateDB+0x1114>)
 80099ac:	f04f 0200 	mov.w	r2, #0
 80099b0:	601a      	str	r2, [r3, #0]

		  sum_CH1_RMS=0.0;
 80099b2:	4b26      	ldr	r3, [pc, #152]	; (8009a4c <calculateDB+0x10bc>)
 80099b4:	f04f 0200 	mov.w	r2, #0
 80099b8:	601a      	str	r2, [r3, #0]
		  sum_CH2_RMS=0.0;
 80099ba:	4b26      	ldr	r3, [pc, #152]	; (8009a54 <calculateDB+0x10c4>)
 80099bc:	f04f 0200 	mov.w	r2, #0
 80099c0:	601a      	str	r2, [r3, #0]
		  sum_CH3_RMS=0.0;
 80099c2:	4b26      	ldr	r3, [pc, #152]	; (8009a5c <calculateDB+0x10cc>)
 80099c4:	f04f 0200 	mov.w	r2, #0
 80099c8:	601a      	str	r2, [r3, #0]
		  sum_CH4_RMS=0.0;
 80099ca:	4b26      	ldr	r3, [pc, #152]	; (8009a64 <calculateDB+0x10d4>)
 80099cc:	f04f 0200 	mov.w	r2, #0
 80099d0:	601a      	str	r2, [r3, #0]
		  sum_CH5_RMS=0.0;
 80099d2:	4b26      	ldr	r3, [pc, #152]	; (8009a6c <calculateDB+0x10dc>)
 80099d4:	f04f 0200 	mov.w	r2, #0
 80099d8:	601a      	str	r2, [r3, #0]
		  sum_CH6_RMS=0.0;
 80099da:	4b26      	ldr	r3, [pc, #152]	; (8009a74 <calculateDB+0x10e4>)
 80099dc:	f04f 0200 	mov.w	r2, #0
 80099e0:	601a      	str	r2, [r3, #0]





	  if (resetMax==1){
 80099e2:	4b31      	ldr	r3, [pc, #196]	; (8009aa8 <calculateDB+0x1118>)
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d129      	bne.n	8009a3e <calculateDB+0x10ae>
	  	resetMax=0;
 80099ea:	4b2f      	ldr	r3, [pc, #188]	; (8009aa8 <calculateDB+0x1118>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	701a      	strb	r2, [r3, #0]
	  	voltageIn1MAX=0;
 80099f0:	4b2e      	ldr	r3, [pc, #184]	; (8009aac <calculateDB+0x111c>)
 80099f2:	f04f 0200 	mov.w	r2, #0
 80099f6:	601a      	str	r2, [r3, #0]
	  	voltageIn2MAX=0;
 80099f8:	4b2d      	ldr	r3, [pc, #180]	; (8009ab0 <calculateDB+0x1120>)
 80099fa:	f04f 0200 	mov.w	r2, #0
 80099fe:	601a      	str	r2, [r3, #0]
	  	voltageIn3MAX=0;
 8009a00:	4b2c      	ldr	r3, [pc, #176]	; (8009ab4 <calculateDB+0x1124>)
 8009a02:	f04f 0200 	mov.w	r2, #0
 8009a06:	601a      	str	r2, [r3, #0]
	  	voltageIn4MAX=0;
 8009a08:	4b2b      	ldr	r3, [pc, #172]	; (8009ab8 <calculateDB+0x1128>)
 8009a0a:	f04f 0200 	mov.w	r2, #0
 8009a0e:	601a      	str	r2, [r3, #0]
	  	voltageIn5MAX=0;
 8009a10:	4b2a      	ldr	r3, [pc, #168]	; (8009abc <calculateDB+0x112c>)
 8009a12:	f04f 0200 	mov.w	r2, #0
 8009a16:	601a      	str	r2, [r3, #0]
	  	voltageIn6MAX=0;
 8009a18:	4b29      	ldr	r3, [pc, #164]	; (8009ac0 <calculateDB+0x1130>)
 8009a1a:	f04f 0200 	mov.w	r2, #0
 8009a1e:	601a      	str	r2, [r3, #0]
	  	for (int i=0; i<8;i++){
 8009a20:	2300      	movs	r3, #0
 8009a22:	603b      	str	r3, [r7, #0]
 8009a24:	e008      	b.n	8009a38 <calculateDB+0x10a8>
	  		dbuMAX[i] = -130.0;
 8009a26:	4a27      	ldr	r2, [pc, #156]	; (8009ac4 <calculateDB+0x1134>)
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	4a26      	ldr	r2, [pc, #152]	; (8009ac8 <calculateDB+0x1138>)
 8009a30:	601a      	str	r2, [r3, #0]
	  	for (int i=0; i<8;i++){
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	3301      	adds	r3, #1
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2b07      	cmp	r3, #7
 8009a3c:	ddf3      	ble.n	8009a26 <calculateDB+0x1096>
	  	}


	}
}
 8009a3e:	bf00      	nop
 8009a40:	3720      	adds	r7, #32
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	200155f8 	.word	0x200155f8
 8009a4c:	20015660 	.word	0x20015660
 8009a50:	2001562c 	.word	0x2001562c
 8009a54:	20011d10 	.word	0x20011d10
 8009a58:	200142f4 	.word	0x200142f4
 8009a5c:	20016988 	.word	0x20016988
 8009a60:	20011cd8 	.word	0x20011cd8
 8009a64:	200142e8 	.word	0x200142e8
 8009a68:	20015694 	.word	0x20015694
 8009a6c:	200142dc 	.word	0x200142dc
 8009a70:	20015664 	.word	0x20015664
 8009a74:	200155f0 	.word	0x200155f0
 8009a78:	200142c8 	.word	0x200142c8
 8009a7c:	200142e0 	.word	0x200142e0
 8009a80:	200155f4 	.word	0x200155f4
 8009a84:	200142d0 	.word	0x200142d0
 8009a88:	20011d0c 	.word	0x20011d0c
 8009a8c:	200142c0 	.word	0x200142c0
 8009a90:	20012fec 	.word	0x20012fec
 8009a94:	20015628 	.word	0x20015628
 8009a98:	20015624 	.word	0x20015624
 8009a9c:	200142e4 	.word	0x200142e4
 8009aa0:	20018f10 	.word	0x20018f10
 8009aa4:	20012ff8 	.word	0x20012ff8
 8009aa8:	20010aa0 	.word	0x20010aa0
 8009aac:	2000dcb0 	.word	0x2000dcb0
 8009ab0:	2000b714 	.word	0x2000b714
 8009ab4:	2000f18c 	.word	0x2000f18c
 8009ab8:	2000e57c 	.word	0x2000e57c
 8009abc:	2000ed80 	.word	0x2000ed80
 8009ac0:	20010a9c 	.word	0x20010a9c
 8009ac4:	20011aa4 	.word	0x20011aa4
 8009ac8:	c3020000 	.word	0xc3020000

08009acc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009acc:	b480      	push	{r7}
 8009ace:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009ad0:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009ad4:	4b05      	ldr	r3, [pc, #20]	; (8009aec <__NVIC_SystemReset+0x20>)
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009adc:	4903      	ldr	r1, [pc, #12]	; (8009aec <__NVIC_SystemReset+0x20>)
 8009ade:	4b04      	ldr	r3, [pc, #16]	; (8009af0 <__NVIC_SystemReset+0x24>)
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	60cb      	str	r3, [r1, #12]
 8009ae4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009ae8:	bf00      	nop
 8009aea:	e7fd      	b.n	8009ae8 <__NVIC_SystemReset+0x1c>
 8009aec:	e000ed00 	.word	0xe000ed00
 8009af0:	05fa0004 	.word	0x05fa0004

08009af4 <BootActivate>:
** \brief     Bootloader activation function.
** \return    none.
**
****************************************************************************************/
void BootActivate(void)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	af00      	add	r7, sp, #0
  /* perform software reset to activate the bootoader again */
  NVIC_SystemReset();
 8009af8:	f7ff ffe8 	bl	8009acc <__NVIC_SystemReset>

08009afc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	4a07      	ldr	r2, [pc, #28]	; (8009b28 <vApplicationGetIdleTaskMemory+0x2c>)
 8009b0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	4a06      	ldr	r2, [pc, #24]	; (8009b2c <vApplicationGetIdleTaskMemory+0x30>)
 8009b12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2280      	movs	r2, #128	; 0x80
 8009b18:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8009b1a:	bf00      	nop
 8009b1c:	3714      	adds	r7, #20
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	200000e8 	.word	0x200000e8
 8009b2c:	2000013c 	.word	0x2000013c

08009b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009b30:	b5b0      	push	{r4, r5, r7, lr}
 8009b32:	b090      	sub	sp, #64	; 0x40
 8009b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	VectorBase_Config();
 8009b36:	f000 fcdf 	bl	800a4f8 <VectorBase_Config>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009b3a:	f001 fbef 	bl	800b31c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009b3e:	f000 f879 	bl	8009c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009b42:	f000 fbbf 	bl	800a2c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8009b46:	f000 fb8f 	bl	800a268 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8009b4a:	f000 faff 	bl	800a14c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8009b4e:	f000 fb5d 	bl	800a20c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8009b52:	f000 f97b 	bl	8009e4c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8009b56:	f000 fac9 	bl	800a0ec <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8009b5a:	f000 f939 	bl	8009dd0 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 8009b5e:	f000 fb25 	bl	800a1ac <MX_USART6_UART_Init>
  MX_DAC_Init();
 8009b62:	f000 f901 	bl	8009d68 <MX_DAC_Init>
  MX_TIM5_Init();
 8009b66:	f000 f9c1 	bl	8009eec <MX_TIM5_Init>
  MX_TIM6_Init();
 8009b6a:	f000 fa0d 	bl	8009f88 <MX_TIM6_Init>
  MX_TIM7_Init();
 8009b6e:	f000 fa41 	bl	8009ff4 <MX_TIM7_Init>
  MX_TIM10_Init();
 8009b72:	f000 fa75 	bl	800a060 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  SharedParamsWriteByIndex(0, 0);
 8009b76:	2100      	movs	r1, #0
 8009b78:	2000      	movs	r0, #0
 8009b7a:	f000 fd6b 	bl	800a654 <SharedParamsWriteByIndex>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8009b7e:	4b28      	ldr	r3, [pc, #160]	; (8009c20 <main+0xf0>)
 8009b80:	f107 041c 	add.w	r4, r7, #28
 8009b84:	461d      	mov	r5, r3
 8009b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009b8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8009b92:	f107 031c 	add.w	r3, r7, #28
 8009b96:	2100      	movs	r1, #0
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f007 fff6 	bl	8011b8a <osThreadCreate>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	4b20      	ldr	r3, [pc, #128]	; (8009c24 <main+0xf4>)
 8009ba2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  osThreadDef(dspTask, dspTask, osPriorityNormal , 0, 2000);
 8009ba4:	4b20      	ldr	r3, [pc, #128]	; (8009c28 <main+0xf8>)
 8009ba6:	463c      	mov	r4, r7
 8009ba8:	461d      	mov	r5, r3
 8009baa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009bac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009bae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009bb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dspTaskHandle = osThreadCreate(osThread(dspTask), NULL);
 8009bb6:	463b      	mov	r3, r7
 8009bb8:	2100      	movs	r1, #0
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f007 ffe5 	bl	8011b8a <osThreadCreate>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	4b1a      	ldr	r3, [pc, #104]	; (8009c2c <main+0xfc>)
 8009bc4:	601a      	str	r2, [r3, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8009bc6:	f007 ffc9 	bl	8011b5c <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for(int i= 0; i <10 ; i++){
 8009bca:	2300      	movs	r3, #0
 8009bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bce:	e00b      	b.n	8009be8 <main+0xb8>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 8009bd0:	f244 0181 	movw	r1, #16513	; 0x4081
 8009bd4:	4816      	ldr	r0, [pc, #88]	; (8009c30 <main+0x100>)
 8009bd6:	f003 fd82 	bl	800d6de <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8009bda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009bde:	f001 fbfb 	bl	800b3d8 <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 8009be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009be4:	3301      	adds	r3, #1
 8009be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bea:	2b09      	cmp	r3, #9
 8009bec:	ddf0      	ble.n	8009bd0 <main+0xa0>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i= 0; i <10 ; i++){
 8009bee:	2300      	movs	r3, #0
 8009bf0:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bf2:	e00a      	b.n	8009c0a <main+0xda>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 8009bf4:	f244 0181 	movw	r1, #16513	; 0x4081
 8009bf8:	480d      	ldr	r0, [pc, #52]	; (8009c30 <main+0x100>)
 8009bfa:	f003 fd70 	bl	800d6de <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 8009bfe:	2032      	movs	r0, #50	; 0x32
 8009c00:	f001 fbea 	bl	800b3d8 <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 8009c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c06:	3301      	adds	r3, #1
 8009c08:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c0c:	2b09      	cmp	r3, #9
 8009c0e:	ddf1      	ble.n	8009bf4 <main+0xc4>
	  }
      SharedParamsWriteByIndex(0, 1);
 8009c10:	2101      	movs	r1, #1
 8009c12:	2000      	movs	r0, #0
 8009c14:	f000 fd1e 	bl	800a654 <SharedParamsWriteByIndex>
      /* connection request received so start the bootloader */
      BootActivate();
 8009c18:	f7ff ff6c 	bl	8009af4 <BootActivate>
	  for(int i= 0; i <10 ; i++){
 8009c1c:	e7d5      	b.n	8009bca <main+0x9a>
 8009c1e:	bf00      	nop
 8009c20:	08021874 	.word	0x08021874
 8009c24:	20018f18 	.word	0x20018f18
 8009c28:	08021898 	.word	0x08021898
 8009c2c:	20018f14 	.word	0x20018f14
 8009c30:	40020400 	.word	0x40020400

08009c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b0b8      	sub	sp, #224	; 0xe0
 8009c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009c3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009c3e:	2234      	movs	r2, #52	; 0x34
 8009c40:	2100      	movs	r1, #0
 8009c42:	4618      	mov	r0, r3
 8009c44:	f016 fc5e 	bl	8020504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009c48:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	601a      	str	r2, [r3, #0]
 8009c50:	605a      	str	r2, [r3, #4]
 8009c52:	609a      	str	r2, [r3, #8]
 8009c54:	60da      	str	r2, [r3, #12]
 8009c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009c58:	f107 0308 	add.w	r3, r7, #8
 8009c5c:	2290      	movs	r2, #144	; 0x90
 8009c5e:	2100      	movs	r1, #0
 8009c60:	4618      	mov	r0, r3
 8009c62:	f016 fc4f 	bl	8020504 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8009c66:	f003 fe9d 	bl	800d9a4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009c6a:	4b3c      	ldr	r3, [pc, #240]	; (8009d5c <SystemClock_Config+0x128>)
 8009c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6e:	4a3b      	ldr	r2, [pc, #236]	; (8009d5c <SystemClock_Config+0x128>)
 8009c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c74:	6413      	str	r3, [r2, #64]	; 0x40
 8009c76:	4b39      	ldr	r3, [pc, #228]	; (8009d5c <SystemClock_Config+0x128>)
 8009c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c7e:	607b      	str	r3, [r7, #4]
 8009c80:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009c82:	4b37      	ldr	r3, [pc, #220]	; (8009d60 <SystemClock_Config+0x12c>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a36      	ldr	r2, [pc, #216]	; (8009d60 <SystemClock_Config+0x12c>)
 8009c88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c8c:	6013      	str	r3, [r2, #0]
 8009c8e:	4b34      	ldr	r3, [pc, #208]	; (8009d60 <SystemClock_Config+0x12c>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009c96:	603b      	str	r3, [r7, #0]
 8009c98:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8009ca0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8009ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009ca8:	2302      	movs	r3, #2
 8009caa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009cae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009cb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009cb6:	2304      	movs	r3, #4
 8009cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8009cbc:	23d8      	movs	r3, #216	; 0xd8
 8009cbe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009cc2:	2302      	movs	r3, #2
 8009cc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8009cc8:	2309      	movs	r3, #9
 8009cca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009cce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f003 fec6 	bl	800da64 <HAL_RCC_OscConfig>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8009cde:	f000 fcb1 	bl	800a644 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8009ce2:	f003 fe6f 	bl	800d9c4 <HAL_PWREx_EnableOverDrive>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8009cec:	f000 fcaa 	bl	800a644 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009cf0:	230f      	movs	r3, #15
 8009cf2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009d02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009d06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8009d12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009d16:	2107      	movs	r1, #7
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f004 f951 	bl	800dfc0 <HAL_RCC_ClockConfig>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8009d24:	f000 fc8e 	bl	800a644 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8009d28:	4b0e      	ldr	r3, [pc, #56]	; (8009d64 <SystemClock_Config+0x130>)
 8009d2a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8009d30:	2300      	movs	r3, #0
 8009d32:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8009d34:	2300      	movs	r3, #0
 8009d36:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009d3e:	f107 0308 	add.w	r3, r7, #8
 8009d42:	4618      	mov	r0, r3
 8009d44:	f004 fb34 	bl	800e3b0 <HAL_RCCEx_PeriphCLKConfig>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d001      	beq.n	8009d52 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8009d4e:	f000 fc79 	bl	800a644 <Error_Handler>
  }
}
 8009d52:	bf00      	nop
 8009d54:	37e0      	adds	r7, #224	; 0xe0
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	40023800 	.word	0x40023800
 8009d60:	40007000 	.word	0x40007000
 8009d64:	00200940 	.word	0x00200940

08009d68 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8009d6e:	463b      	mov	r3, r7
 8009d70:	2200      	movs	r2, #0
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8009d76:	4b14      	ldr	r3, [pc, #80]	; (8009dc8 <MX_DAC_Init+0x60>)
 8009d78:	4a14      	ldr	r2, [pc, #80]	; (8009dcc <MX_DAC_Init+0x64>)
 8009d7a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8009d7c:	4812      	ldr	r0, [pc, #72]	; (8009dc8 <MX_DAC_Init+0x60>)
 8009d7e:	f001 fc5e 	bl	800b63e <HAL_DAC_Init>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8009d88:	f000 fc5c 	bl	800a644 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8009d90:	2300      	movs	r3, #0
 8009d92:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8009d94:	463b      	mov	r3, r7
 8009d96:	2200      	movs	r2, #0
 8009d98:	4619      	mov	r1, r3
 8009d9a:	480b      	ldr	r0, [pc, #44]	; (8009dc8 <MX_DAC_Init+0x60>)
 8009d9c:	f001 fcc5 	bl	800b72a <HAL_DAC_ConfigChannel>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8009da6:	f000 fc4d 	bl	800a644 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8009daa:	463b      	mov	r3, r7
 8009dac:	2210      	movs	r2, #16
 8009dae:	4619      	mov	r1, r3
 8009db0:	4805      	ldr	r0, [pc, #20]	; (8009dc8 <MX_DAC_Init+0x60>)
 8009db2:	f001 fcba 	bl	800b72a <HAL_DAC_ConfigChannel>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8009dbc:	f000 fc42 	bl	800a644 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8009dc0:	bf00      	nop
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	20019600 	.word	0x20019600
 8009dcc:	40007400 	.word	0x40007400

08009dd0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8009dd4:	4b1b      	ldr	r3, [pc, #108]	; (8009e44 <MX_SPI2_Init+0x74>)
 8009dd6:	4a1c      	ldr	r2, [pc, #112]	; (8009e48 <MX_SPI2_Init+0x78>)
 8009dd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8009dda:	4b1a      	ldr	r3, [pc, #104]	; (8009e44 <MX_SPI2_Init+0x74>)
 8009ddc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009de0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8009de2:	4b18      	ldr	r3, [pc, #96]	; (8009e44 <MX_SPI2_Init+0x74>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8009de8:	4b16      	ldr	r3, [pc, #88]	; (8009e44 <MX_SPI2_Init+0x74>)
 8009dea:	f44f 7240 	mov.w	r2, #768	; 0x300
 8009dee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009df0:	4b14      	ldr	r3, [pc, #80]	; (8009e44 <MX_SPI2_Init+0x74>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009df6:	4b13      	ldr	r3, [pc, #76]	; (8009e44 <MX_SPI2_Init+0x74>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8009dfc:	4b11      	ldr	r3, [pc, #68]	; (8009e44 <MX_SPI2_Init+0x74>)
 8009dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e02:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009e04:	4b0f      	ldr	r3, [pc, #60]	; (8009e44 <MX_SPI2_Init+0x74>)
 8009e06:	2200      	movs	r2, #0
 8009e08:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009e0a:	4b0e      	ldr	r3, [pc, #56]	; (8009e44 <MX_SPI2_Init+0x74>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009e10:	4b0c      	ldr	r3, [pc, #48]	; (8009e44 <MX_SPI2_Init+0x74>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e16:	4b0b      	ldr	r3, [pc, #44]	; (8009e44 <MX_SPI2_Init+0x74>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8009e1c:	4b09      	ldr	r3, [pc, #36]	; (8009e44 <MX_SPI2_Init+0x74>)
 8009e1e:	2207      	movs	r2, #7
 8009e20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009e22:	4b08      	ldr	r3, [pc, #32]	; (8009e44 <MX_SPI2_Init+0x74>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009e28:	4b06      	ldr	r3, [pc, #24]	; (8009e44 <MX_SPI2_Init+0x74>)
 8009e2a:	2208      	movs	r2, #8
 8009e2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009e2e:	4805      	ldr	r0, [pc, #20]	; (8009e44 <MX_SPI2_Init+0x74>)
 8009e30:	f004 fee4 	bl	800ebfc <HAL_SPI_Init>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8009e3a:	f000 fc03 	bl	800a644 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8009e3e:	bf00      	nop
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	2000a890 	.word	0x2000a890
 8009e48:	40003800 	.word	0x40003800

08009e4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b088      	sub	sp, #32
 8009e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009e52:	f107 0310 	add.w	r3, r7, #16
 8009e56:	2200      	movs	r2, #0
 8009e58:	601a      	str	r2, [r3, #0]
 8009e5a:	605a      	str	r2, [r3, #4]
 8009e5c:	609a      	str	r2, [r3, #8]
 8009e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009e60:	1d3b      	adds	r3, r7, #4
 8009e62:	2200      	movs	r2, #0
 8009e64:	601a      	str	r2, [r3, #0]
 8009e66:	605a      	str	r2, [r3, #4]
 8009e68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009e6a:	4b1d      	ldr	r3, [pc, #116]	; (8009ee0 <MX_TIM3_Init+0x94>)
 8009e6c:	4a1d      	ldr	r2, [pc, #116]	; (8009ee4 <MX_TIM3_Init+0x98>)
 8009e6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 216;
 8009e70:	4b1b      	ldr	r3, [pc, #108]	; (8009ee0 <MX_TIM3_Init+0x94>)
 8009e72:	22d8      	movs	r2, #216	; 0xd8
 8009e74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e76:	4b1a      	ldr	r3, [pc, #104]	; (8009ee0 <MX_TIM3_Init+0x94>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100000;
 8009e7c:	4b18      	ldr	r3, [pc, #96]	; (8009ee0 <MX_TIM3_Init+0x94>)
 8009e7e:	4a1a      	ldr	r2, [pc, #104]	; (8009ee8 <MX_TIM3_Init+0x9c>)
 8009e80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009e82:	4b17      	ldr	r3, [pc, #92]	; (8009ee0 <MX_TIM3_Init+0x94>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e88:	4b15      	ldr	r3, [pc, #84]	; (8009ee0 <MX_TIM3_Init+0x94>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009e8e:	4814      	ldr	r0, [pc, #80]	; (8009ee0 <MX_TIM3_Init+0x94>)
 8009e90:	f004 ff46 	bl	800ed20 <HAL_TIM_Base_Init>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d001      	beq.n	8009e9e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8009e9a:	f000 fbd3 	bl	800a644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ea2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009ea4:	f107 0310 	add.w	r3, r7, #16
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	480d      	ldr	r0, [pc, #52]	; (8009ee0 <MX_TIM3_Init+0x94>)
 8009eac:	f005 f9d4 	bl	800f258 <HAL_TIM_ConfigClockSource>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d001      	beq.n	8009eba <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8009eb6:	f000 fbc5 	bl	800a644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009ec2:	1d3b      	adds	r3, r7, #4
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	4806      	ldr	r0, [pc, #24]	; (8009ee0 <MX_TIM3_Init+0x94>)
 8009ec8:	f005 fd16 	bl	800f8f8 <HAL_TIMEx_MasterConfigSynchronization>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d001      	beq.n	8009ed6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8009ed2:	f000 fbb7 	bl	800a644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8009ed6:	bf00      	nop
 8009ed8:	3720      	adds	r7, #32
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	20019480 	.word	0x20019480
 8009ee4:	40000400 	.word	0x40000400
 8009ee8:	000186a0 	.word	0x000186a0

08009eec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b088      	sub	sp, #32
 8009ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009ef2:	f107 0310 	add.w	r3, r7, #16
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	601a      	str	r2, [r3, #0]
 8009efa:	605a      	str	r2, [r3, #4]
 8009efc:	609a      	str	r2, [r3, #8]
 8009efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009f00:	1d3b      	adds	r3, r7, #4
 8009f02:	2200      	movs	r2, #0
 8009f04:	601a      	str	r2, [r3, #0]
 8009f06:	605a      	str	r2, [r3, #4]
 8009f08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8009f0a:	4b1d      	ldr	r3, [pc, #116]	; (8009f80 <MX_TIM5_Init+0x94>)
 8009f0c:	4a1d      	ldr	r2, [pc, #116]	; (8009f84 <MX_TIM5_Init+0x98>)
 8009f0e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 216;
 8009f10:	4b1b      	ldr	r3, [pc, #108]	; (8009f80 <MX_TIM5_Init+0x94>)
 8009f12:	22d8      	movs	r2, #216	; 0xd8
 8009f14:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f16:	4b1a      	ldr	r3, [pc, #104]	; (8009f80 <MX_TIM5_Init+0x94>)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8009f1c:	4b18      	ldr	r3, [pc, #96]	; (8009f80 <MX_TIM5_Init+0x94>)
 8009f1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f22:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f24:	4b16      	ldr	r3, [pc, #88]	; (8009f80 <MX_TIM5_Init+0x94>)
 8009f26:	2200      	movs	r2, #0
 8009f28:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f2a:	4b15      	ldr	r3, [pc, #84]	; (8009f80 <MX_TIM5_Init+0x94>)
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8009f30:	4813      	ldr	r0, [pc, #76]	; (8009f80 <MX_TIM5_Init+0x94>)
 8009f32:	f004 fef5 	bl	800ed20 <HAL_TIM_Base_Init>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d001      	beq.n	8009f40 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8009f3c:	f000 fb82 	bl	800a644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8009f46:	f107 0310 	add.w	r3, r7, #16
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	480c      	ldr	r0, [pc, #48]	; (8009f80 <MX_TIM5_Init+0x94>)
 8009f4e:	f005 f983 	bl	800f258 <HAL_TIM_ConfigClockSource>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8009f58:	f000 fb74 	bl	800a644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009f5c:	2320      	movs	r3, #32
 8009f5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f60:	2300      	movs	r3, #0
 8009f62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009f64:	1d3b      	adds	r3, r7, #4
 8009f66:	4619      	mov	r1, r3
 8009f68:	4805      	ldr	r0, [pc, #20]	; (8009f80 <MX_TIM5_Init+0x94>)
 8009f6a:	f005 fcc5 	bl	800f8f8 <HAL_TIMEx_MasterConfigSynchronization>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d001      	beq.n	8009f78 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8009f74:	f000 fb66 	bl	800a644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8009f78:	bf00      	nop
 8009f7a:	3720      	adds	r7, #32
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	20019440 	.word	0x20019440
 8009f84:	40000c00 	.word	0x40000c00

08009f88 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009f8e:	1d3b      	adds	r3, r7, #4
 8009f90:	2200      	movs	r2, #0
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	605a      	str	r2, [r3, #4]
 8009f96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8009f98:	4b14      	ldr	r3, [pc, #80]	; (8009fec <MX_TIM6_Init+0x64>)
 8009f9a:	4a15      	ldr	r2, [pc, #84]	; (8009ff0 <MX_TIM6_Init+0x68>)
 8009f9c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 107;
 8009f9e:	4b13      	ldr	r3, [pc, #76]	; (8009fec <MX_TIM6_Init+0x64>)
 8009fa0:	226b      	movs	r2, #107	; 0x6b
 8009fa2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009fa4:	4b11      	ldr	r3, [pc, #68]	; (8009fec <MX_TIM6_Init+0x64>)
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8009faa:	4b10      	ldr	r3, [pc, #64]	; (8009fec <MX_TIM6_Init+0x64>)
 8009fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009fb0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009fb2:	4b0e      	ldr	r3, [pc, #56]	; (8009fec <MX_TIM6_Init+0x64>)
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009fb8:	480c      	ldr	r0, [pc, #48]	; (8009fec <MX_TIM6_Init+0x64>)
 8009fba:	f004 feb1 	bl	800ed20 <HAL_TIM_Base_Init>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d001      	beq.n	8009fc8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8009fc4:	f000 fb3e 	bl	800a644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009fd0:	1d3b      	adds	r3, r7, #4
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	4805      	ldr	r0, [pc, #20]	; (8009fec <MX_TIM6_Init+0x64>)
 8009fd6:	f005 fc8f 	bl	800f8f8 <HAL_TIMEx_MasterConfigSynchronization>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d001      	beq.n	8009fe4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8009fe0:	f000 fb30 	bl	800a644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8009fe4:	bf00      	nop
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	20019618 	.word	0x20019618
 8009ff0:	40001000 	.word	0x40001000

08009ff4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ffa:	1d3b      	adds	r3, r7, #4
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	601a      	str	r2, [r3, #0]
 800a000:	605a      	str	r2, [r3, #4]
 800a002:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800a004:	4b14      	ldr	r3, [pc, #80]	; (800a058 <MX_TIM7_Init+0x64>)
 800a006:	4a15      	ldr	r2, [pc, #84]	; (800a05c <MX_TIM7_Init+0x68>)
 800a008:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 800a00a:	4b13      	ldr	r3, [pc, #76]	; (800a058 <MX_TIM7_Init+0x64>)
 800a00c:	226b      	movs	r2, #107	; 0x6b
 800a00e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a010:	4b11      	ldr	r3, [pc, #68]	; (800a058 <MX_TIM7_Init+0x64>)
 800a012:	2200      	movs	r2, #0
 800a014:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19;
 800a016:	4b10      	ldr	r3, [pc, #64]	; (800a058 <MX_TIM7_Init+0x64>)
 800a018:	2213      	movs	r2, #19
 800a01a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a01c:	4b0e      	ldr	r3, [pc, #56]	; (800a058 <MX_TIM7_Init+0x64>)
 800a01e:	2200      	movs	r2, #0
 800a020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800a022:	480d      	ldr	r0, [pc, #52]	; (800a058 <MX_TIM7_Init+0x64>)
 800a024:	f004 fe7c 	bl	800ed20 <HAL_TIM_Base_Init>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800a02e:	f000 fb09 	bl	800a644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a032:	2300      	movs	r3, #0
 800a034:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a036:	2300      	movs	r3, #0
 800a038:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800a03a:	1d3b      	adds	r3, r7, #4
 800a03c:	4619      	mov	r1, r3
 800a03e:	4806      	ldr	r0, [pc, #24]	; (800a058 <MX_TIM7_Init+0x64>)
 800a040:	f005 fc5a 	bl	800f8f8 <HAL_TIMEx_MasterConfigSynchronization>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800a04a:	f000 fafb 	bl	800a644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800a04e:	bf00      	nop
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	20019658 	.word	0x20019658
 800a05c:	40001400 	.word	0x40001400

0800a060 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800a066:	463b      	mov	r3, r7
 800a068:	2200      	movs	r2, #0
 800a06a:	601a      	str	r2, [r3, #0]
 800a06c:	605a      	str	r2, [r3, #4]
 800a06e:	609a      	str	r2, [r3, #8]
 800a070:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800a072:	4b1c      	ldr	r3, [pc, #112]	; (800a0e4 <MX_TIM10_Init+0x84>)
 800a074:	4a1c      	ldr	r2, [pc, #112]	; (800a0e8 <MX_TIM10_Init+0x88>)
 800a076:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 107;
 800a078:	4b1a      	ldr	r3, [pc, #104]	; (800a0e4 <MX_TIM10_Init+0x84>)
 800a07a:	226b      	movs	r2, #107	; 0x6b
 800a07c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a07e:	4b19      	ldr	r3, [pc, #100]	; (800a0e4 <MX_TIM10_Init+0x84>)
 800a080:	2200      	movs	r2, #0
 800a082:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0;
 800a084:	4b17      	ldr	r3, [pc, #92]	; (800a0e4 <MX_TIM10_Init+0x84>)
 800a086:	2200      	movs	r2, #0
 800a088:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a08a:	4b16      	ldr	r3, [pc, #88]	; (800a0e4 <MX_TIM10_Init+0x84>)
 800a08c:	2200      	movs	r2, #0
 800a08e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a090:	4b14      	ldr	r3, [pc, #80]	; (800a0e4 <MX_TIM10_Init+0x84>)
 800a092:	2200      	movs	r2, #0
 800a094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800a096:	4813      	ldr	r0, [pc, #76]	; (800a0e4 <MX_TIM10_Init+0x84>)
 800a098:	f004 fe42 	bl	800ed20 <HAL_TIM_Base_Init>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d001      	beq.n	800a0a6 <MX_TIM10_Init+0x46>
  {
    Error_Handler();
 800a0a2:	f000 facf 	bl	800a644 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 800a0a6:	480f      	ldr	r0, [pc, #60]	; (800a0e4 <MX_TIM10_Init+0x84>)
 800a0a8:	f004 fee5 	bl	800ee76 <HAL_TIM_IC_Init>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <MX_TIM10_Init+0x56>
  {
    Error_Handler();
 800a0b2:	f000 fac7 	bl	800a644 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800a0b6:	2302      	movs	r3, #2
 800a0b8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800a0c6:	463b      	mov	r3, r7
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	4805      	ldr	r0, [pc, #20]	; (800a0e4 <MX_TIM10_Init+0x84>)
 800a0ce:	f005 f826 	bl	800f11e <HAL_TIM_IC_ConfigChannel>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d001      	beq.n	800a0dc <MX_TIM10_Init+0x7c>
  {
    Error_Handler();
 800a0d8:	f000 fab4 	bl	800a644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800a0dc:	bf00      	nop
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	20018ffc 	.word	0x20018ffc
 800a0e8:	40014400 	.word	0x40014400

0800a0ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a0f0:	4b13      	ldr	r3, [pc, #76]	; (800a140 <MX_USART1_UART_Init+0x54>)
 800a0f2:	4a14      	ldr	r2, [pc, #80]	; (800a144 <MX_USART1_UART_Init+0x58>)
 800a0f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115600;
 800a0f6:	4b12      	ldr	r3, [pc, #72]	; (800a140 <MX_USART1_UART_Init+0x54>)
 800a0f8:	4a13      	ldr	r2, [pc, #76]	; (800a148 <MX_USART1_UART_Init+0x5c>)
 800a0fa:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a0fc:	4b10      	ldr	r3, [pc, #64]	; (800a140 <MX_USART1_UART_Init+0x54>)
 800a0fe:	2200      	movs	r2, #0
 800a100:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a102:	4b0f      	ldr	r3, [pc, #60]	; (800a140 <MX_USART1_UART_Init+0x54>)
 800a104:	2200      	movs	r2, #0
 800a106:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a108:	4b0d      	ldr	r3, [pc, #52]	; (800a140 <MX_USART1_UART_Init+0x54>)
 800a10a:	2200      	movs	r2, #0
 800a10c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a10e:	4b0c      	ldr	r3, [pc, #48]	; (800a140 <MX_USART1_UART_Init+0x54>)
 800a110:	220c      	movs	r2, #12
 800a112:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a114:	4b0a      	ldr	r3, [pc, #40]	; (800a140 <MX_USART1_UART_Init+0x54>)
 800a116:	2200      	movs	r2, #0
 800a118:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a11a:	4b09      	ldr	r3, [pc, #36]	; (800a140 <MX_USART1_UART_Init+0x54>)
 800a11c:	2200      	movs	r2, #0
 800a11e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a120:	4b07      	ldr	r3, [pc, #28]	; (800a140 <MX_USART1_UART_Init+0x54>)
 800a122:	2200      	movs	r2, #0
 800a124:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a126:	4b06      	ldr	r3, [pc, #24]	; (800a140 <MX_USART1_UART_Init+0x54>)
 800a128:	2200      	movs	r2, #0
 800a12a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a12c:	4804      	ldr	r0, [pc, #16]	; (800a140 <MX_USART1_UART_Init+0x54>)
 800a12e:	f005 fc8f 	bl	800fa50 <HAL_UART_Init>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d001      	beq.n	800a13c <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 800a138:	f000 fa84 	bl	800a644 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a13c:	bf00      	nop
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	20019580 	.word	0x20019580
 800a144:	40011000 	.word	0x40011000
 800a148:	0001c390 	.word	0x0001c390

0800a14c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800a150:	4b14      	ldr	r3, [pc, #80]	; (800a1a4 <MX_USART3_UART_Init+0x58>)
 800a152:	4a15      	ldr	r2, [pc, #84]	; (800a1a8 <MX_USART3_UART_Init+0x5c>)
 800a154:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800a156:	4b13      	ldr	r3, [pc, #76]	; (800a1a4 <MX_USART3_UART_Init+0x58>)
 800a158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a15c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a15e:	4b11      	ldr	r3, [pc, #68]	; (800a1a4 <MX_USART3_UART_Init+0x58>)
 800a160:	2200      	movs	r2, #0
 800a162:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a164:	4b0f      	ldr	r3, [pc, #60]	; (800a1a4 <MX_USART3_UART_Init+0x58>)
 800a166:	2200      	movs	r2, #0
 800a168:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a16a:	4b0e      	ldr	r3, [pc, #56]	; (800a1a4 <MX_USART3_UART_Init+0x58>)
 800a16c:	2200      	movs	r2, #0
 800a16e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a170:	4b0c      	ldr	r3, [pc, #48]	; (800a1a4 <MX_USART3_UART_Init+0x58>)
 800a172:	220c      	movs	r2, #12
 800a174:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a176:	4b0b      	ldr	r3, [pc, #44]	; (800a1a4 <MX_USART3_UART_Init+0x58>)
 800a178:	2200      	movs	r2, #0
 800a17a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a17c:	4b09      	ldr	r3, [pc, #36]	; (800a1a4 <MX_USART3_UART_Init+0x58>)
 800a17e:	2200      	movs	r2, #0
 800a180:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a182:	4b08      	ldr	r3, [pc, #32]	; (800a1a4 <MX_USART3_UART_Init+0x58>)
 800a184:	2200      	movs	r2, #0
 800a186:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a188:	4b06      	ldr	r3, [pc, #24]	; (800a1a4 <MX_USART3_UART_Init+0x58>)
 800a18a:	2200      	movs	r2, #0
 800a18c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a18e:	4805      	ldr	r0, [pc, #20]	; (800a1a4 <MX_USART3_UART_Init+0x58>)
 800a190:	f005 fc5e 	bl	800fa50 <HAL_UART_Init>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d001      	beq.n	800a19e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800a19a:	f000 fa53 	bl	800a644 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a19e:	bf00      	nop
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20018f7c 	.word	0x20018f7c
 800a1a8:	40004800 	.word	0x40004800

0800a1ac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800a1b0:	4b14      	ldr	r3, [pc, #80]	; (800a204 <MX_USART6_UART_Init+0x58>)
 800a1b2:	4a15      	ldr	r2, [pc, #84]	; (800a208 <MX_USART6_UART_Init+0x5c>)
 800a1b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800a1b6:	4b13      	ldr	r3, [pc, #76]	; (800a204 <MX_USART6_UART_Init+0x58>)
 800a1b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a1bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800a1be:	4b11      	ldr	r3, [pc, #68]	; (800a204 <MX_USART6_UART_Init+0x58>)
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800a1c4:	4b0f      	ldr	r3, [pc, #60]	; (800a204 <MX_USART6_UART_Init+0x58>)
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800a1ca:	4b0e      	ldr	r3, [pc, #56]	; (800a204 <MX_USART6_UART_Init+0x58>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800a1d0:	4b0c      	ldr	r3, [pc, #48]	; (800a204 <MX_USART6_UART_Init+0x58>)
 800a1d2:	220c      	movs	r2, #12
 800a1d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a1d6:	4b0b      	ldr	r3, [pc, #44]	; (800a204 <MX_USART6_UART_Init+0x58>)
 800a1d8:	2200      	movs	r2, #0
 800a1da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800a1dc:	4b09      	ldr	r3, [pc, #36]	; (800a204 <MX_USART6_UART_Init+0x58>)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a1e2:	4b08      	ldr	r3, [pc, #32]	; (800a204 <MX_USART6_UART_Init+0x58>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a1e8:	4b06      	ldr	r3, [pc, #24]	; (800a204 <MX_USART6_UART_Init+0x58>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800a1ee:	4805      	ldr	r0, [pc, #20]	; (800a204 <MX_USART6_UART_Init+0x58>)
 800a1f0:	f005 fc2e 	bl	800fa50 <HAL_UART_Init>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800a1fa:	f000 fa23 	bl	800a644 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800a1fe:	bf00      	nop
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	20011b8c 	.word	0x20011b8c
 800a208:	40011400 	.word	0x40011400

0800a20c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a210:	4b14      	ldr	r3, [pc, #80]	; (800a264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a212:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a216:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a218:	4b12      	ldr	r3, [pc, #72]	; (800a264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a21a:	2206      	movs	r2, #6
 800a21c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a21e:	4b11      	ldr	r3, [pc, #68]	; (800a264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a220:	2202      	movs	r2, #2
 800a222:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a224:	4b0f      	ldr	r3, [pc, #60]	; (800a264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a226:	2200      	movs	r2, #0
 800a228:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a22a:	4b0e      	ldr	r3, [pc, #56]	; (800a264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a22c:	2202      	movs	r2, #2
 800a22e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a230:	4b0c      	ldr	r3, [pc, #48]	; (800a264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a232:	2201      	movs	r2, #1
 800a234:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a236:	4b0b      	ldr	r3, [pc, #44]	; (800a264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a238:	2200      	movs	r2, #0
 800a23a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a23c:	4b09      	ldr	r3, [pc, #36]	; (800a264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a23e:	2200      	movs	r2, #0
 800a240:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a242:	4b08      	ldr	r3, [pc, #32]	; (800a264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a244:	2201      	movs	r2, #1
 800a246:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a248:	4b06      	ldr	r3, [pc, #24]	; (800a264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a24e:	4805      	ldr	r0, [pc, #20]	; (800a264 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a250:	f003 fa5f 	bl	800d712 <HAL_PCD_Init>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d001      	beq.n	800a25e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800a25a:	f000 f9f3 	bl	800a644 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800a25e:	bf00      	nop
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	2001903c 	.word	0x2001903c

0800a268 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a26e:	4b14      	ldr	r3, [pc, #80]	; (800a2c0 <MX_DMA_Init+0x58>)
 800a270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a272:	4a13      	ldr	r2, [pc, #76]	; (800a2c0 <MX_DMA_Init+0x58>)
 800a274:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a278:	6313      	str	r3, [r2, #48]	; 0x30
 800a27a:	4b11      	ldr	r3, [pc, #68]	; (800a2c0 <MX_DMA_Init+0x58>)
 800a27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a27e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a282:	607b      	str	r3, [r7, #4]
 800a284:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 1, 0);
 800a286:	2200      	movs	r2, #0
 800a288:	2101      	movs	r1, #1
 800a28a:	2039      	movs	r0, #57	; 0x39
 800a28c:	f001 f9a1 	bl	800b5d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800a290:	2039      	movs	r0, #57	; 0x39
 800a292:	f001 f9ba 	bl	800b60a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 800a296:	2200      	movs	r2, #0
 800a298:	2101      	movs	r1, #1
 800a29a:	203a      	movs	r0, #58	; 0x3a
 800a29c:	f001 f999 	bl	800b5d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800a2a0:	203a      	movs	r0, #58	; 0x3a
 800a2a2:	f001 f9b2 	bl	800b60a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 1, 0);
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	2101      	movs	r1, #1
 800a2aa:	2045      	movs	r0, #69	; 0x45
 800a2ac:	f001 f991 	bl	800b5d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800a2b0:	2045      	movs	r0, #69	; 0x45
 800a2b2:	f001 f9aa 	bl	800b60a <HAL_NVIC_EnableIRQ>

}
 800a2b6:	bf00      	nop
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	40023800 	.word	0x40023800

0800a2c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b08e      	sub	sp, #56	; 0x38
 800a2c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	601a      	str	r2, [r3, #0]
 800a2d2:	605a      	str	r2, [r3, #4]
 800a2d4:	609a      	str	r2, [r3, #8]
 800a2d6:	60da      	str	r2, [r3, #12]
 800a2d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a2da:	4b7f      	ldr	r3, [pc, #508]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2de:	4a7e      	ldr	r2, [pc, #504]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a2e0:	f043 0310 	orr.w	r3, r3, #16
 800a2e4:	6313      	str	r3, [r2, #48]	; 0x30
 800a2e6:	4b7c      	ldr	r3, [pc, #496]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ea:	f003 0310 	and.w	r3, r3, #16
 800a2ee:	623b      	str	r3, [r7, #32]
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a2f2:	4b79      	ldr	r3, [pc, #484]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f6:	4a78      	ldr	r2, [pc, #480]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a2f8:	f043 0304 	orr.w	r3, r3, #4
 800a2fc:	6313      	str	r3, [r2, #48]	; 0x30
 800a2fe:	4b76      	ldr	r3, [pc, #472]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a302:	f003 0304 	and.w	r3, r3, #4
 800a306:	61fb      	str	r3, [r7, #28]
 800a308:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a30a:	4b73      	ldr	r3, [pc, #460]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a30c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a30e:	4a72      	ldr	r2, [pc, #456]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a310:	f043 0320 	orr.w	r3, r3, #32
 800a314:	6313      	str	r3, [r2, #48]	; 0x30
 800a316:	4b70      	ldr	r3, [pc, #448]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a31a:	f003 0320 	and.w	r3, r3, #32
 800a31e:	61bb      	str	r3, [r7, #24]
 800a320:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a322:	4b6d      	ldr	r3, [pc, #436]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a326:	4a6c      	ldr	r2, [pc, #432]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a32c:	6313      	str	r3, [r2, #48]	; 0x30
 800a32e:	4b6a      	ldr	r3, [pc, #424]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a336:	617b      	str	r3, [r7, #20]
 800a338:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a33a:	4b67      	ldr	r3, [pc, #412]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a33e:	4a66      	ldr	r2, [pc, #408]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a340:	f043 0301 	orr.w	r3, r3, #1
 800a344:	6313      	str	r3, [r2, #48]	; 0x30
 800a346:	4b64      	ldr	r3, [pc, #400]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a34a:	f003 0301 	and.w	r3, r3, #1
 800a34e:	613b      	str	r3, [r7, #16]
 800a350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a352:	4b61      	ldr	r3, [pc, #388]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a356:	4a60      	ldr	r2, [pc, #384]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a358:	f043 0302 	orr.w	r3, r3, #2
 800a35c:	6313      	str	r3, [r2, #48]	; 0x30
 800a35e:	4b5e      	ldr	r3, [pc, #376]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a362:	f003 0302 	and.w	r3, r3, #2
 800a366:	60fb      	str	r3, [r7, #12]
 800a368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a36a:	4b5b      	ldr	r3, [pc, #364]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36e:	4a5a      	ldr	r2, [pc, #360]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a374:	6313      	str	r3, [r2, #48]	; 0x30
 800a376:	4b58      	ldr	r3, [pc, #352]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a37a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a37e:	60bb      	str	r3, [r7, #8]
 800a380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a382:	4b55      	ldr	r3, [pc, #340]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a386:	4a54      	ldr	r2, [pc, #336]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a388:	f043 0308 	orr.w	r3, r3, #8
 800a38c:	6313      	str	r3, [r2, #48]	; 0x30
 800a38e:	4b52      	ldr	r3, [pc, #328]	; (800a4d8 <MX_GPIO_Init+0x214>)
 800a390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a392:	f003 0308 	and.w	r3, r3, #8
 800a396:	607b      	str	r3, [r7, #4]
 800a398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG1_GPIO_Port, DEBUG1_Pin, GPIO_PIN_RESET);
 800a39a:	2200      	movs	r2, #0
 800a39c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a3a0:	484e      	ldr	r0, [pc, #312]	; (800a4dc <MX_GPIO_Init+0x218>)
 800a3a2:	f003 f983 	bl	800d6ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|PB12_Pin|LD3_Pin|CS_DAC1_Pin
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f245 01b1 	movw	r1, #20657	; 0x50b1
 800a3ac:	484c      	ldr	r0, [pc, #304]	; (800a4e0 <MX_GPIO_Init+0x21c>)
 800a3ae:	f003 f97d 	bl	800d6ac <HAL_GPIO_WritePin>
                          |CS_DIGPOT_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MUTE_POTI_Pin|ZCEN_Pin|DEBUG2_Pin|RD_Pin
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f640 4186 	movw	r1, #3206	; 0xc86
 800a3b8:	484a      	ldr	r0, [pc, #296]	; (800a4e4 <MX_GPIO_Init+0x220>)
 800a3ba:	f003 f977 	bl	800d6ac <HAL_GPIO_WritePin>
                          |CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, RESET_Pin|USB_PowerSwitchOn_Pin|Relais6_Pin|Relais4_Pin
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f249 6144 	movw	r1, #38468	; 0x9644
 800a3c4:	4848      	ldr	r0, [pc, #288]	; (800a4e8 <MX_GPIO_Init+0x224>)
 800a3c6:	f003 f971 	bl	800d6ac <HAL_GPIO_WritePin>
                          |Relais5_Pin|Relais3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OS0_Pin|OS1_Pin|OS2_Pin|RANGE_Pin
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800a3d0:	4846      	ldr	r0, [pc, #280]	; (800a4ec <MX_GPIO_Init+0x228>)
 800a3d2:	f003 f96b 	bl	800d6ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DB2_Pin DB3_Pin DB4_Pin DB5_Pin
                           DB6_Pin DB7_Pin DB8_Pin DB9_Pin
                           DB10_Pin DB11_Pin DB12_Pin DB13_Pin
                           DB14_Pin DB15_Pin DB0_Pin DB1_Pin */
  GPIO_InitStruct.Pin = DB2_Pin|DB3_Pin|DB4_Pin|DB5_Pin
 800a3d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a3da:	627b      	str	r3, [r7, #36]	; 0x24
                          |DB6_Pin|DB7_Pin|DB8_Pin|DB9_Pin
                          |DB10_Pin|DB11_Pin|DB12_Pin|DB13_Pin
                          |DB14_Pin|DB15_Pin|DB0_Pin|DB1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a3e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	4841      	ldr	r0, [pc, #260]	; (800a4f0 <MX_GPIO_Init+0x22c>)
 800a3ec:	f002 ffb4 	bl	800d358 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800a3f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a3f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a3f6:	4b3f      	ldr	r3, [pc, #252]	; (800a4f4 <MX_GPIO_Init+0x230>)
 800a3f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800a3fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a402:	4619      	mov	r1, r3
 800a404:	4839      	ldr	r0, [pc, #228]	; (800a4ec <MX_GPIO_Init+0x228>)
 800a406:	f002 ffa7 	bl	800d358 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG1_Pin */
  GPIO_InitStruct.Pin = DEBUG1_Pin;
 800a40a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a40e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a410:	2301      	movs	r3, #1
 800a412:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a414:	2300      	movs	r3, #0
 800a416:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a418:	2300      	movs	r3, #0
 800a41a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DEBUG1_GPIO_Port, &GPIO_InitStruct);
 800a41c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a420:	4619      	mov	r1, r3
 800a422:	482e      	ldr	r0, [pc, #184]	; (800a4dc <MX_GPIO_Init+0x218>)
 800a424:	f002 ff98 	bl	800d358 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB12_Pin LD3_Pin CS_DAC1_Pin
                           CS_DIGPOT_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|PB12_Pin|LD3_Pin|CS_DAC1_Pin
 800a428:	f245 03b1 	movw	r3, #20657	; 0x50b1
 800a42c:	627b      	str	r3, [r7, #36]	; 0x24
                          |CS_DIGPOT_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a42e:	2301      	movs	r3, #1
 800a430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a432:	2300      	movs	r3, #0
 800a434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a436:	2300      	movs	r3, #0
 800a438:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a43a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a43e:	4619      	mov	r1, r3
 800a440:	4827      	ldr	r0, [pc, #156]	; (800a4e0 <MX_GPIO_Init+0x21c>)
 800a442:	f002 ff89 	bl	800d358 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relais2_Pin Relais1_Pin BUSY_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = Relais2_Pin|Relais1_Pin|BUSY_Pin|USB_OverCurrent_Pin;
 800a446:	238b      	movs	r3, #139	; 0x8b
 800a448:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a44a:	2300      	movs	r3, #0
 800a44c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a44e:	2300      	movs	r3, #0
 800a450:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a456:	4619      	mov	r1, r3
 800a458:	4823      	ldr	r0, [pc, #140]	; (800a4e8 <MX_GPIO_Init+0x224>)
 800a45a:	f002 ff7d 	bl	800d358 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_POTI_Pin ZCEN_Pin DEBUG2_Pin RD_Pin
                           CS_Pin */
  GPIO_InitStruct.Pin = MUTE_POTI_Pin|ZCEN_Pin|DEBUG2_Pin|RD_Pin
 800a45e:	f640 4386 	movw	r3, #3206	; 0xc86
 800a462:	627b      	str	r3, [r7, #36]	; 0x24
                          |CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a464:	2301      	movs	r3, #1
 800a466:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a468:	2300      	movs	r3, #0
 800a46a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a46c:	2300      	movs	r3, #0
 800a46e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a474:	4619      	mov	r1, r3
 800a476:	481b      	ldr	r0, [pc, #108]	; (800a4e4 <MX_GPIO_Init+0x220>)
 800a478:	f002 ff6e 	bl	800d358 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin USB_PowerSwitchOn_Pin Relais6_Pin Relais4_Pin
                           Relais5_Pin Relais3_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|USB_PowerSwitchOn_Pin|Relais6_Pin|Relais4_Pin
 800a47c:	f249 6344 	movw	r3, #38468	; 0x9644
 800a480:	627b      	str	r3, [r7, #36]	; 0x24
                          |Relais5_Pin|Relais3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a482:	2301      	movs	r3, #1
 800a484:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a486:	2300      	movs	r3, #0
 800a488:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a48a:	2300      	movs	r3, #0
 800a48c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a48e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a492:	4619      	mov	r1, r3
 800a494:	4814      	ldr	r0, [pc, #80]	; (800a4e8 <MX_GPIO_Init+0x224>)
 800a496:	f002 ff5f 	bl	800d358 <HAL_GPIO_Init>

  /*Configure GPIO pins : OS0_Pin OS1_Pin OS2_Pin RANGE_Pin
                           CV_A_B_Pin */
  GPIO_InitStruct.Pin = OS0_Pin|OS1_Pin|OS2_Pin|RANGE_Pin
 800a49a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800a49e:	627b      	str	r3, [r7, #36]	; 0x24
                          |CV_A_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	480e      	ldr	r0, [pc, #56]	; (800a4ec <MX_GPIO_Init+0x228>)
 800a4b4:	f002 ff50 	bl	800d358 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRST_Pin */
  GPIO_InitStruct.Pin = FRST_Pin;
 800a4b8:	2340      	movs	r3, #64	; 0x40
 800a4ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(FRST_GPIO_Port, &GPIO_InitStruct);
 800a4c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	4806      	ldr	r0, [pc, #24]	; (800a4e4 <MX_GPIO_Init+0x220>)
 800a4cc:	f002 ff44 	bl	800d358 <HAL_GPIO_Init>

}
 800a4d0:	bf00      	nop
 800a4d2:	3738      	adds	r7, #56	; 0x38
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	40023800 	.word	0x40023800
 800a4dc:	40021400 	.word	0x40021400
 800a4e0:	40020400 	.word	0x40020400
 800a4e4:	40020c00 	.word	0x40020c00
 800a4e8:	40021800 	.word	0x40021800
 800a4ec:	40020800 	.word	0x40020800
 800a4f0:	40021000 	.word	0x40021000
 800a4f4:	10110000 	.word	0x10110000

0800a4f8 <VectorBase_Config>:

/* USER CODE BEGIN 4 */
static void VectorBase_Config(void)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	af00      	add	r7, sp, #0
   * c-startup code.
   */
  extern const unsigned long g_pfnVectors[];

  /* Remap the vector table to where the vector table is located for this program. */
  SCB->VTOR = (unsigned long)&g_pfnVectors[0];
 800a4fc:	4b03      	ldr	r3, [pc, #12]	; (800a50c <VectorBase_Config+0x14>)
 800a4fe:	4a04      	ldr	r2, [pc, #16]	; (800a510 <VectorBase_Config+0x18>)
 800a500:	609a      	str	r2, [r3, #8]
}
 800a502:	bf00      	nop
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr
 800a50c:	e000ed00 	.word	0xe000ed00
 800a510:	08008000 	.word	0x08008000

0800a514 <recv_callback>:
//When we recive something we come here to accept the connection wish or not

err_t err;

err_t
recv_callback(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err){
 800a514:	b580      	push	{r7, lr}
 800a516:	b092      	sub	sp, #72	; 0x48
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
 800a520:	70fb      	strb	r3, [r7, #3]

	char recived[50];
	tcp_recved(tpcb, p->len);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	895b      	ldrh	r3, [r3, #10]
 800a526:	4619      	mov	r1, r3
 800a528:	68b8      	ldr	r0, [r7, #8]
 800a52a:	f00d fd13 	bl	8017f54 <tcp_recved>
	memcpy(recived, p -> payload, p -> len); //put the incoming udp data to UDP_RECIVE
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6859      	ldr	r1, [r3, #4]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	895b      	ldrh	r3, [r3, #10]
 800a536:	461a      	mov	r2, r3
 800a538:	f107 0314 	add.w	r3, r7, #20
 800a53c:	4618      	mov	r0, r3
 800a53e:	f015 ffd6 	bl	80204ee <memcpy>
	pbuf_free(p);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f00c fda0 	bl	8017088 <pbuf_free>
}
 800a548:	bf00      	nop
 800a54a:	4618      	mov	r0, r3
 800a54c:	3748      	adds	r7, #72	; 0x48
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
	...

0800a554 <accept_callback>:

err_t
accept_callback(void *arg, struct tcp_pcb *newpcb, err_t err){
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	4613      	mov	r3, r2
 800a560:	71fb      	strb	r3, [r7, #7]
	tcp_arg(newpcb,NULL);
 800a562:	2100      	movs	r1, #0
 800a564:	68b8      	ldr	r0, [r7, #8]
 800a566:	f00e fbdd 	bl	8018d24 <tcp_arg>
	tcp_recv(newpcb, recv_callback);
 800a56a:	4907      	ldr	r1, [pc, #28]	; (800a588 <accept_callback+0x34>)
 800a56c:	68b8      	ldr	r0, [r7, #8]
 800a56e:	f00e fbeb 	bl	8018d48 <tcp_recv>

	//Fire the Bootloader
	SharedParamsWriteByIndex(0, 1);
 800a572:	2101      	movs	r1, #1
 800a574:	2000      	movs	r0, #0
 800a576:	f000 f86d 	bl	800a654 <SharedParamsWriteByIndex>
	BootActivate();
 800a57a:	f7ff fabb 	bl	8009af4 <BootActivate>
}
 800a57e:	bf00      	nop
 800a580:	4618      	mov	r0, r3
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	0800a515 	.word	0x0800a515

0800a58c <StartDefaultTask>:
//##################################################################################//


/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800a594:	f006 fd40 	bl	8011018 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  httpd_init();
 800a598:	f00b f978 	bl	801588c <httpd_init>


  HAL_TIM_Base_Start_IT(&htim3);
 800a59c:	4824      	ldr	r0, [pc, #144]	; (800a630 <StartDefaultTask+0xa4>)
 800a59e:	f004 fc15 	bl	800edcc <HAL_TIM_Base_Start_IT>

  UartBridge_init();
 800a5a2:	f7fe f8e1 	bl	8008768 <UartBridge_init>

  //########create pcb for firmware  upgrade on port 1000#########//
  static struct tcp_pcb *pcb;
  err_t err;
  pcb = tcp_new();
 800a5a6:	f00e fba7 	bl	8018cf8 <tcp_new>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	4b21      	ldr	r3, [pc, #132]	; (800a634 <StartDefaultTask+0xa8>)
 800a5ae:	601a      	str	r2, [r3, #0]
  err = tcp_bind(pcb, IP_ADDR_ANY, 1000);
 800a5b0:	4b20      	ldr	r3, [pc, #128]	; (800a634 <StartDefaultTask+0xa8>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a5b8:	491f      	ldr	r1, [pc, #124]	; (800a638 <StartDefaultTask+0xac>)
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f00d fafc 	bl	8017bb8 <tcp_bind>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	73fb      	strb	r3, [r7, #15]
  tcp_arg(pcb,NULL);
 800a5c4:	4b1b      	ldr	r3, [pc, #108]	; (800a634 <StartDefaultTask+0xa8>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f00e fbaa 	bl	8018d24 <tcp_arg>
  pcb = tcp_listen(pcb);
 800a5d0:	4b18      	ldr	r3, [pc, #96]	; (800a634 <StartDefaultTask+0xa8>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	21ff      	movs	r1, #255	; 0xff
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f00d fba6 	bl	8017d28 <tcp_listen_with_backlog>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	4b15      	ldr	r3, [pc, #84]	; (800a634 <StartDefaultTask+0xa8>)
 800a5e0:	601a      	str	r2, [r3, #0]
  tcp_accept(pcb, accept_callback);
 800a5e2:	4b14      	ldr	r3, [pc, #80]	; (800a634 <StartDefaultTask+0xa8>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4915      	ldr	r1, [pc, #84]	; (800a63c <StartDefaultTask+0xb0>)
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f00e fc13 	bl	8018e14 <tcp_accept>
  //###############################################################//

  /* Infinite loop */
  for(;;)
  {
	  for(int i= 0; i <30; i++){
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	617b      	str	r3, [r7, #20]
 800a5f2:	e009      	b.n	800a608 <StartDefaultTask+0x7c>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 800a5f4:	2101      	movs	r1, #1
 800a5f6:	4812      	ldr	r0, [pc, #72]	; (800a640 <StartDefaultTask+0xb4>)
 800a5f8:	f003 f871 	bl	800d6de <HAL_GPIO_TogglePin>
		  HAL_Delay(250);
 800a5fc:	20fa      	movs	r0, #250	; 0xfa
 800a5fe:	f000 feeb 	bl	800b3d8 <HAL_Delay>
	  for(int i= 0; i <30; i++){
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	3301      	adds	r3, #1
 800a606:	617b      	str	r3, [r7, #20]
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	2b1d      	cmp	r3, #29
 800a60c:	ddf2      	ble.n	800a5f4 <StartDefaultTask+0x68>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i= 0; i <10 ; i++){
 800a60e:	2300      	movs	r3, #0
 800a610:	613b      	str	r3, [r7, #16]
 800a612:	e009      	b.n	800a628 <StartDefaultTask+0x9c>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 800a614:	2101      	movs	r1, #1
 800a616:	480a      	ldr	r0, [pc, #40]	; (800a640 <StartDefaultTask+0xb4>)
 800a618:	f003 f861 	bl	800d6de <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 800a61c:	2032      	movs	r0, #50	; 0x32
 800a61e:	f000 fedb 	bl	800b3d8 <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	3301      	adds	r3, #1
 800a626:	613b      	str	r3, [r7, #16]
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	2b09      	cmp	r3, #9
 800a62c:	ddf2      	ble.n	800a614 <StartDefaultTask+0x88>
	  for(int i= 0; i <30; i++){
 800a62e:	e7de      	b.n	800a5ee <StartDefaultTask+0x62>
 800a630:	20019480 	.word	0x20019480
 800a634:	2000033c 	.word	0x2000033c
 800a638:	08035270 	.word	0x08035270
 800a63c:	0800a555 	.word	0x0800a555
 800a640:	40020400 	.word	0x40020400

0800a644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a644:	b480      	push	{r7}
 800a646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a648:	bf00      	nop
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
	...

0800a654 <SharedParamsWriteByIndex>:
** \param     value Value to write.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
bool SharedParamsWriteByIndex(uint32_t idx, uint8_t value)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	460b      	mov	r3, r1
 800a65e:	70fb      	strb	r3, [r7, #3]
  bool result = false;
 800a660:	2300      	movs	r3, #0
 800a662:	73fb      	strb	r3, [r7, #15]

  /* Only continue if the buffer and the specified parameters are valid. */
  if ( (SharedParamsValidateBuffer()) &&
 800a664:	f000 f818 	bl	800a698 <SharedParamsValidateBuffer>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00c      	beq.n	800a688 <SharedParamsWriteByIndex+0x34>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2b37      	cmp	r3, #55	; 0x37
 800a672:	d809      	bhi.n	800a688 <SharedParamsWriteByIndex+0x34>
       (idx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN) )
  {
    /* Write the value. */
    sharedParamsBuffer.data[idx] = value;
 800a674:	4a07      	ldr	r2, [pc, #28]	; (800a694 <SharedParamsWriteByIndex+0x40>)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4413      	add	r3, r2
 800a67a:	3304      	adds	r3, #4
 800a67c:	78fa      	ldrb	r2, [r7, #3]
 800a67e:	701a      	strb	r2, [r3, #0]
    /* Update the checksum since the contents were just changed. */
    SharedParamsWriteChecksum();
 800a680:	f000 f824 	bl	800a6cc <SharedParamsWriteChecksum>
    /* Update the result. */
    result = true;
 800a684:	2301      	movs	r3, #1
 800a686:	73fb      	strb	r3, [r7, #15]
  }
  /* Give the result back to the caller. */
  return result;
 800a688:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of SharedParamsWriteByIndex ***/
 800a68a:	4618      	mov	r0, r3
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	20000000 	.word	0x20000000

0800a698 <SharedParamsValidateBuffer>:
**            identifier and verifying its checksum.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
static bool SharedParamsValidateBuffer(void)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
  bool result = false;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	71fb      	strb	r3, [r7, #7]

  /* Perform validation. */
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 800a6a2:	4b08      	ldr	r3, [pc, #32]	; (800a6c4 <SharedParamsValidateBuffer+0x2c>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a08      	ldr	r2, [pc, #32]	; (800a6c8 <SharedParamsValidateBuffer+0x30>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d106      	bne.n	800a6ba <SharedParamsValidateBuffer+0x22>
       (SharedParamsVerifyChecksum()) )
 800a6ac:	f000 f81a 	bl	800a6e4 <SharedParamsVerifyChecksum>
 800a6b0:	4603      	mov	r3, r0
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <SharedParamsValidateBuffer+0x22>
  {
    /* The shared parameter buffer is valid, so update the result value. */
    result = true;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	71fb      	strb	r3, [r7, #7]
  }
  /* Give the result back to the caller. */
  return result;
 800a6ba:	79fb      	ldrb	r3, [r7, #7]
} /*** end of SharedParamsValitabeTable ***/
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	20000000 	.word	0x20000000
 800a6c8:	ce42e7a2 	.word	0xce42e7a2

0800a6cc <SharedParamsWriteChecksum>:
** \brief     Calculates and writes the checksum into the buffer.
** \return    none.
**
****************************************************************************************/
static void SharedParamsWriteChecksum(void)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	af00      	add	r7, sp, #0
  /* Calculate and write the checksum. */
  sharedParamsBuffer.checksum = SharedParamsCalculateChecksum();
 800a6d0:	f000 f81e 	bl	800a710 <SharedParamsCalculateChecksum>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	4b01      	ldr	r3, [pc, #4]	; (800a6e0 <SharedParamsWriteChecksum+0x14>)
 800a6da:	879a      	strh	r2, [r3, #60]	; 0x3c
} /*** end of SharedParamsWriteChecksum ***/
 800a6dc:	bf00      	nop
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	20000000 	.word	0x20000000

0800a6e4 <SharedParamsVerifyChecksum>:
**            buffer.
** \return    True is the checksum is correct, false otherwise.
**
****************************************************************************************/
static bool SharedParamsVerifyChecksum(void)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
  bool result = false;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	71fb      	strb	r3, [r7, #7]

  /* Calculate and verify the checksum. */
  if (SharedParamsCalculateChecksum() == sharedParamsBuffer.checksum)
 800a6ee:	f000 f80f 	bl	800a710 <SharedParamsCalculateChecksum>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	4b05      	ldr	r3, [pc, #20]	; (800a70c <SharedParamsVerifyChecksum+0x28>)
 800a6f8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d101      	bne.n	800a702 <SharedParamsVerifyChecksum+0x1e>
  {
    /* Checksum is correct, so update the result value. */
    result = true;
 800a6fe:	2301      	movs	r3, #1
 800a700:	71fb      	strb	r3, [r7, #7]
  }
  /* Give the result back to the caller. */
  return result;
 800a702:	79fb      	ldrb	r3, [r7, #7]
} /*** end of SharedParamsVerifyChecksum ***/
 800a704:	4618      	mov	r0, r3
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	20000000 	.word	0x20000000

0800a710 <SharedParamsCalculateChecksum>:
**            two's complement value of it.
** \return    The calculated checksum value.
**
****************************************************************************************/
static uint16_t SharedParamsCalculateChecksum(void)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
  uint16_t result = 0;
 800a716:	2300      	movs	r3, #0
 800a718:	80fb      	strh	r3, [r7, #6]
  uint32_t byteIdx;

  /* Add the identifier bytes to the checksum. */
  result += (uint8_t)sharedParamsBuffer.identifier;
 800a71a:	4b1f      	ldr	r3, [pc, #124]	; (800a798 <SharedParamsCalculateChecksum+0x88>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	b29a      	uxth	r2, r3
 800a722:	88fb      	ldrh	r3, [r7, #6]
 800a724:	4413      	add	r3, r2
 800a726:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 8u);
 800a728:	4b1b      	ldr	r3, [pc, #108]	; (800a798 <SharedParamsCalculateChecksum+0x88>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	0a1b      	lsrs	r3, r3, #8
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	b29a      	uxth	r2, r3
 800a732:	88fb      	ldrh	r3, [r7, #6]
 800a734:	4413      	add	r3, r2
 800a736:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 16u);
 800a738:	4b17      	ldr	r3, [pc, #92]	; (800a798 <SharedParamsCalculateChecksum+0x88>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	0c1b      	lsrs	r3, r3, #16
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	b29a      	uxth	r2, r3
 800a742:	88fb      	ldrh	r3, [r7, #6]
 800a744:	4413      	add	r3, r2
 800a746:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 24u);
 800a748:	4b13      	ldr	r3, [pc, #76]	; (800a798 <SharedParamsCalculateChecksum+0x88>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	0e1b      	lsrs	r3, r3, #24
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	b29a      	uxth	r2, r3
 800a752:	88fb      	ldrh	r3, [r7, #6]
 800a754:	4413      	add	r3, r2
 800a756:	80fb      	strh	r3, [r7, #6]
  /* Loop through the parameter data array. */
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 800a758:	2300      	movs	r3, #0
 800a75a:	603b      	str	r3, [r7, #0]
 800a75c:	e00b      	b.n	800a776 <SharedParamsCalculateChecksum+0x66>
  {
    /* Add parameter data byte to the checksum. */
    result += (uint8_t)sharedParamsBuffer.data[byteIdx];
 800a75e:	4a0e      	ldr	r2, [pc, #56]	; (800a798 <SharedParamsCalculateChecksum+0x88>)
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	4413      	add	r3, r2
 800a764:	3304      	adds	r3, #4
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	b29a      	uxth	r2, r3
 800a76a:	88fb      	ldrh	r3, [r7, #6]
 800a76c:	4413      	add	r3, r2
 800a76e:	80fb      	strh	r3, [r7, #6]
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	3301      	adds	r3, #1
 800a774:	603b      	str	r3, [r7, #0]
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2b37      	cmp	r3, #55	; 0x37
 800a77a:	d9f0      	bls.n	800a75e <SharedParamsCalculateChecksum+0x4e>
  }
  /* Determine one's complement. */
  result = ~result;
 800a77c:	88fb      	ldrh	r3, [r7, #6]
 800a77e:	43db      	mvns	r3, r3
 800a780:	80fb      	strh	r3, [r7, #6]
  /* Determine two's complement. */
  result += 1;
 800a782:	88fb      	ldrh	r3, [r7, #6]
 800a784:	3301      	adds	r3, #1
 800a786:	80fb      	strh	r3, [r7, #6]
  /* Give the result back to the caller. */
  return result;
 800a788:	88fb      	ldrh	r3, [r7, #6]
} /*** end of SharedParamsCalculateChecksum ***/
 800a78a:	4618      	mov	r0, r3
 800a78c:	370c      	adds	r7, #12
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	20000000 	.word	0x20000000

0800a79c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a7a2:	4b1d      	ldr	r3, [pc, #116]	; (800a818 <HAL_MspInit+0x7c>)
 800a7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a6:	4a1c      	ldr	r2, [pc, #112]	; (800a818 <HAL_MspInit+0x7c>)
 800a7a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7ac:	6413      	str	r3, [r2, #64]	; 0x40
 800a7ae:	4b1a      	ldr	r3, [pc, #104]	; (800a818 <HAL_MspInit+0x7c>)
 800a7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7b6:	607b      	str	r3, [r7, #4]
 800a7b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a7ba:	4b17      	ldr	r3, [pc, #92]	; (800a818 <HAL_MspInit+0x7c>)
 800a7bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7be:	4a16      	ldr	r2, [pc, #88]	; (800a818 <HAL_MspInit+0x7c>)
 800a7c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a7c4:	6453      	str	r3, [r2, #68]	; 0x44
 800a7c6:	4b14      	ldr	r3, [pc, #80]	; (800a818 <HAL_MspInit+0x7c>)
 800a7c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7ce:	603b      	str	r3, [r7, #0]
 800a7d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 10, 0);
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	210a      	movs	r1, #10
 800a7d6:	f06f 000b 	mvn.w	r0, #11
 800a7da:	f000 fefa 	bl	800b5d2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 10, 0);
 800a7de:	2200      	movs	r2, #0
 800a7e0:	210a      	movs	r1, #10
 800a7e2:	f06f 000a 	mvn.w	r0, #10
 800a7e6:	f000 fef4 	bl	800b5d2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 10, 0);
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	210a      	movs	r1, #10
 800a7ee:	f06f 0009 	mvn.w	r0, #9
 800a7f2:	f000 feee 	bl	800b5d2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 10, 0);
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	210a      	movs	r1, #10
 800a7fa:	f06f 0003 	mvn.w	r0, #3
 800a7fe:	f000 fee8 	bl	800b5d2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a802:	2200      	movs	r2, #0
 800a804:	210f      	movs	r1, #15
 800a806:	f06f 0001 	mvn.w	r0, #1
 800a80a:	f000 fee2 	bl	800b5d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a80e:	bf00      	nop
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	40023800 	.word	0x40023800

0800a81c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b08a      	sub	sp, #40	; 0x28
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a824:	f107 0314 	add.w	r3, r7, #20
 800a828:	2200      	movs	r2, #0
 800a82a:	601a      	str	r2, [r3, #0]
 800a82c:	605a      	str	r2, [r3, #4]
 800a82e:	609a      	str	r2, [r3, #8]
 800a830:	60da      	str	r2, [r3, #12]
 800a832:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a19      	ldr	r2, [pc, #100]	; (800a8a0 <HAL_DAC_MspInit+0x84>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d12b      	bne.n	800a896 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800a83e:	4b19      	ldr	r3, [pc, #100]	; (800a8a4 <HAL_DAC_MspInit+0x88>)
 800a840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a842:	4a18      	ldr	r2, [pc, #96]	; (800a8a4 <HAL_DAC_MspInit+0x88>)
 800a844:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a848:	6413      	str	r3, [r2, #64]	; 0x40
 800a84a:	4b16      	ldr	r3, [pc, #88]	; (800a8a4 <HAL_DAC_MspInit+0x88>)
 800a84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a852:	613b      	str	r3, [r7, #16]
 800a854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a856:	4b13      	ldr	r3, [pc, #76]	; (800a8a4 <HAL_DAC_MspInit+0x88>)
 800a858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85a:	4a12      	ldr	r2, [pc, #72]	; (800a8a4 <HAL_DAC_MspInit+0x88>)
 800a85c:	f043 0301 	orr.w	r3, r3, #1
 800a860:	6313      	str	r3, [r2, #48]	; 0x30
 800a862:	4b10      	ldr	r3, [pc, #64]	; (800a8a4 <HAL_DAC_MspInit+0x88>)
 800a864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a866:	f003 0301 	and.w	r3, r3, #1
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800a86e:	2330      	movs	r3, #48	; 0x30
 800a870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a872:	2303      	movs	r3, #3
 800a874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a876:	2300      	movs	r3, #0
 800a878:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a87a:	f107 0314 	add.w	r3, r7, #20
 800a87e:	4619      	mov	r1, r3
 800a880:	4809      	ldr	r0, [pc, #36]	; (800a8a8 <HAL_DAC_MspInit+0x8c>)
 800a882:	f002 fd69 	bl	800d358 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800a886:	2200      	movs	r2, #0
 800a888:	2101      	movs	r1, #1
 800a88a:	2036      	movs	r0, #54	; 0x36
 800a88c:	f000 fea1 	bl	800b5d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a890:	2036      	movs	r0, #54	; 0x36
 800a892:	f000 feba 	bl	800b60a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800a896:	bf00      	nop
 800a898:	3728      	adds	r7, #40	; 0x28
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	40007400 	.word	0x40007400
 800a8a4:	40023800 	.word	0x40023800
 800a8a8:	40020000 	.word	0x40020000

0800a8ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b08a      	sub	sp, #40	; 0x28
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8b4:	f107 0314 	add.w	r3, r7, #20
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	605a      	str	r2, [r3, #4]
 800a8be:	609a      	str	r2, [r3, #8]
 800a8c0:	60da      	str	r2, [r3, #12]
 800a8c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a25      	ldr	r2, [pc, #148]	; (800a960 <HAL_SPI_MspInit+0xb4>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d144      	bne.n	800a958 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800a8ce:	4b25      	ldr	r3, [pc, #148]	; (800a964 <HAL_SPI_MspInit+0xb8>)
 800a8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d2:	4a24      	ldr	r2, [pc, #144]	; (800a964 <HAL_SPI_MspInit+0xb8>)
 800a8d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8d8:	6413      	str	r3, [r2, #64]	; 0x40
 800a8da:	4b22      	ldr	r3, [pc, #136]	; (800a964 <HAL_SPI_MspInit+0xb8>)
 800a8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8e2:	613b      	str	r3, [r7, #16]
 800a8e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a8e6:	4b1f      	ldr	r3, [pc, #124]	; (800a964 <HAL_SPI_MspInit+0xb8>)
 800a8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ea:	4a1e      	ldr	r2, [pc, #120]	; (800a964 <HAL_SPI_MspInit+0xb8>)
 800a8ec:	f043 0304 	orr.w	r3, r3, #4
 800a8f0:	6313      	str	r3, [r2, #48]	; 0x30
 800a8f2:	4b1c      	ldr	r3, [pc, #112]	; (800a964 <HAL_SPI_MspInit+0xb8>)
 800a8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f6:	f003 0304 	and.w	r3, r3, #4
 800a8fa:	60fb      	str	r3, [r7, #12]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a8fe:	4b19      	ldr	r3, [pc, #100]	; (800a964 <HAL_SPI_MspInit+0xb8>)
 800a900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a902:	4a18      	ldr	r2, [pc, #96]	; (800a964 <HAL_SPI_MspInit+0xb8>)
 800a904:	f043 0302 	orr.w	r3, r3, #2
 800a908:	6313      	str	r3, [r2, #48]	; 0x30
 800a90a:	4b16      	ldr	r3, [pc, #88]	; (800a964 <HAL_SPI_MspInit+0xb8>)
 800a90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a90e:	f003 0302 	and.w	r3, r3, #2
 800a912:	60bb      	str	r3, [r7, #8]
 800a914:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a916:	2308      	movs	r3, #8
 800a918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a91a:	2302      	movs	r3, #2
 800a91c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a91e:	2300      	movs	r3, #0
 800a920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a922:	2303      	movs	r3, #3
 800a924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a926:	2305      	movs	r3, #5
 800a928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a92a:	f107 0314 	add.w	r3, r7, #20
 800a92e:	4619      	mov	r1, r3
 800a930:	480d      	ldr	r0, [pc, #52]	; (800a968 <HAL_SPI_MspInit+0xbc>)
 800a932:	f002 fd11 	bl	800d358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a93a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a93c:	2302      	movs	r3, #2
 800a93e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a940:	2300      	movs	r3, #0
 800a942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a944:	2303      	movs	r3, #3
 800a946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a948:	2305      	movs	r3, #5
 800a94a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a94c:	f107 0314 	add.w	r3, r7, #20
 800a950:	4619      	mov	r1, r3
 800a952:	4806      	ldr	r0, [pc, #24]	; (800a96c <HAL_SPI_MspInit+0xc0>)
 800a954:	f002 fd00 	bl	800d358 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800a958:	bf00      	nop
 800a95a:	3728      	adds	r7, #40	; 0x28
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	40003800 	.word	0x40003800
 800a964:	40023800 	.word	0x40023800
 800a968:	40020800 	.word	0x40020800
 800a96c:	40020400 	.word	0x40020400

0800a970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b08e      	sub	sp, #56	; 0x38
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a97c:	2200      	movs	r2, #0
 800a97e:	601a      	str	r2, [r3, #0]
 800a980:	605a      	str	r2, [r3, #4]
 800a982:	609a      	str	r2, [r3, #8]
 800a984:	60da      	str	r2, [r3, #12]
 800a986:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a4f      	ldr	r2, [pc, #316]	; (800aacc <HAL_TIM_Base_MspInit+0x15c>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d114      	bne.n	800a9bc <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a992:	4b4f      	ldr	r3, [pc, #316]	; (800aad0 <HAL_TIM_Base_MspInit+0x160>)
 800a994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a996:	4a4e      	ldr	r2, [pc, #312]	; (800aad0 <HAL_TIM_Base_MspInit+0x160>)
 800a998:	f043 0302 	orr.w	r3, r3, #2
 800a99c:	6413      	str	r3, [r2, #64]	; 0x40
 800a99e:	4b4c      	ldr	r3, [pc, #304]	; (800aad0 <HAL_TIM_Base_MspInit+0x160>)
 800a9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a2:	f003 0302 	and.w	r3, r3, #2
 800a9a6:	623b      	str	r3, [r7, #32]
 800a9a8:	6a3b      	ldr	r3, [r7, #32]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	2103      	movs	r1, #3
 800a9ae:	201d      	movs	r0, #29
 800a9b0:	f000 fe0f 	bl	800b5d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a9b4:	201d      	movs	r0, #29
 800a9b6:	f000 fe28 	bl	800b60a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800a9ba:	e082      	b.n	800aac2 <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM5)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a44      	ldr	r2, [pc, #272]	; (800aad4 <HAL_TIM_Base_MspInit+0x164>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d114      	bne.n	800a9f0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a9c6:	4b42      	ldr	r3, [pc, #264]	; (800aad0 <HAL_TIM_Base_MspInit+0x160>)
 800a9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ca:	4a41      	ldr	r2, [pc, #260]	; (800aad0 <HAL_TIM_Base_MspInit+0x160>)
 800a9cc:	f043 0308 	orr.w	r3, r3, #8
 800a9d0:	6413      	str	r3, [r2, #64]	; 0x40
 800a9d2:	4b3f      	ldr	r3, [pc, #252]	; (800aad0 <HAL_TIM_Base_MspInit+0x160>)
 800a9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d6:	f003 0308 	and.w	r3, r3, #8
 800a9da:	61fb      	str	r3, [r7, #28]
 800a9dc:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	2032      	movs	r0, #50	; 0x32
 800a9e4:	f000 fdf5 	bl	800b5d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800a9e8:	2032      	movs	r0, #50	; 0x32
 800a9ea:	f000 fe0e 	bl	800b60a <HAL_NVIC_EnableIRQ>
}
 800a9ee:	e068      	b.n	800aac2 <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM6)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a38      	ldr	r2, [pc, #224]	; (800aad8 <HAL_TIM_Base_MspInit+0x168>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d114      	bne.n	800aa24 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800a9fa:	4b35      	ldr	r3, [pc, #212]	; (800aad0 <HAL_TIM_Base_MspInit+0x160>)
 800a9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9fe:	4a34      	ldr	r2, [pc, #208]	; (800aad0 <HAL_TIM_Base_MspInit+0x160>)
 800aa00:	f043 0310 	orr.w	r3, r3, #16
 800aa04:	6413      	str	r3, [r2, #64]	; 0x40
 800aa06:	4b32      	ldr	r3, [pc, #200]	; (800aad0 <HAL_TIM_Base_MspInit+0x160>)
 800aa08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa0a:	f003 0310 	and.w	r3, r3, #16
 800aa0e:	61bb      	str	r3, [r7, #24]
 800aa10:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800aa12:	2200      	movs	r2, #0
 800aa14:	2101      	movs	r1, #1
 800aa16:	2036      	movs	r0, #54	; 0x36
 800aa18:	f000 fddb 	bl	800b5d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800aa1c:	2036      	movs	r0, #54	; 0x36
 800aa1e:	f000 fdf4 	bl	800b60a <HAL_NVIC_EnableIRQ>
}
 800aa22:	e04e      	b.n	800aac2 <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM7)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a2c      	ldr	r2, [pc, #176]	; (800aadc <HAL_TIM_Base_MspInit+0x16c>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d114      	bne.n	800aa58 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800aa2e:	4b28      	ldr	r3, [pc, #160]	; (800aad0 <HAL_TIM_Base_MspInit+0x160>)
 800aa30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa32:	4a27      	ldr	r2, [pc, #156]	; (800aad0 <HAL_TIM_Base_MspInit+0x160>)
 800aa34:	f043 0320 	orr.w	r3, r3, #32
 800aa38:	6413      	str	r3, [r2, #64]	; 0x40
 800aa3a:	4b25      	ldr	r3, [pc, #148]	; (800aad0 <HAL_TIM_Base_MspInit+0x160>)
 800aa3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3e:	f003 0320 	and.w	r3, r3, #32
 800aa42:	617b      	str	r3, [r7, #20]
 800aa44:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 800aa46:	2200      	movs	r2, #0
 800aa48:	2101      	movs	r1, #1
 800aa4a:	2037      	movs	r0, #55	; 0x37
 800aa4c:	f000 fdc1 	bl	800b5d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800aa50:	2037      	movs	r0, #55	; 0x37
 800aa52:	f000 fdda 	bl	800b60a <HAL_NVIC_EnableIRQ>
}
 800aa56:	e034      	b.n	800aac2 <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM10)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a20      	ldr	r2, [pc, #128]	; (800aae0 <HAL_TIM_Base_MspInit+0x170>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d12f      	bne.n	800aac2 <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800aa62:	4b1b      	ldr	r3, [pc, #108]	; (800aad0 <HAL_TIM_Base_MspInit+0x160>)
 800aa64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa66:	4a1a      	ldr	r2, [pc, #104]	; (800aad0 <HAL_TIM_Base_MspInit+0x160>)
 800aa68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa6c:	6453      	str	r3, [r2, #68]	; 0x44
 800aa6e:	4b18      	ldr	r3, [pc, #96]	; (800aad0 <HAL_TIM_Base_MspInit+0x160>)
 800aa70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa76:	613b      	str	r3, [r7, #16]
 800aa78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800aa7a:	4b15      	ldr	r3, [pc, #84]	; (800aad0 <HAL_TIM_Base_MspInit+0x160>)
 800aa7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7e:	4a14      	ldr	r2, [pc, #80]	; (800aad0 <HAL_TIM_Base_MspInit+0x160>)
 800aa80:	f043 0320 	orr.w	r3, r3, #32
 800aa84:	6313      	str	r3, [r2, #48]	; 0x30
 800aa86:	4b12      	ldr	r3, [pc, #72]	; (800aad0 <HAL_TIM_Base_MspInit+0x160>)
 800aa88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8a:	f003 0320 	and.w	r3, r3, #32
 800aa8e:	60fb      	str	r3, [r7, #12]
 800aa90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800aa92:	2340      	movs	r3, #64	; 0x40
 800aa94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa96:	2302      	movs	r3, #2
 800aa98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800aaa2:	2303      	movs	r3, #3
 800aaa4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800aaa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaaa:	4619      	mov	r1, r3
 800aaac:	480d      	ldr	r0, [pc, #52]	; (800aae4 <HAL_TIM_Base_MspInit+0x174>)
 800aaae:	f002 fc53 	bl	800d358 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800aab2:	2200      	movs	r2, #0
 800aab4:	2100      	movs	r1, #0
 800aab6:	2019      	movs	r0, #25
 800aab8:	f000 fd8b 	bl	800b5d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800aabc:	2019      	movs	r0, #25
 800aabe:	f000 fda4 	bl	800b60a <HAL_NVIC_EnableIRQ>
}
 800aac2:	bf00      	nop
 800aac4:	3738      	adds	r7, #56	; 0x38
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	40000400 	.word	0x40000400
 800aad0:	40023800 	.word	0x40023800
 800aad4:	40000c00 	.word	0x40000c00
 800aad8:	40001000 	.word	0x40001000
 800aadc:	40001400 	.word	0x40001400
 800aae0:	40014400 	.word	0x40014400
 800aae4:	40021400 	.word	0x40021400

0800aae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b08e      	sub	sp, #56	; 0x38
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aaf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	601a      	str	r2, [r3, #0]
 800aaf8:	605a      	str	r2, [r3, #4]
 800aafa:	609a      	str	r2, [r3, #8]
 800aafc:	60da      	str	r2, [r3, #12]
 800aafe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a99      	ldr	r2, [pc, #612]	; (800ad6c <HAL_UART_MspInit+0x284>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d170      	bne.n	800abec <HAL_UART_MspInit+0x104>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ab0a:	4b99      	ldr	r3, [pc, #612]	; (800ad70 <HAL_UART_MspInit+0x288>)
 800ab0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab0e:	4a98      	ldr	r2, [pc, #608]	; (800ad70 <HAL_UART_MspInit+0x288>)
 800ab10:	f043 0310 	orr.w	r3, r3, #16
 800ab14:	6453      	str	r3, [r2, #68]	; 0x44
 800ab16:	4b96      	ldr	r3, [pc, #600]	; (800ad70 <HAL_UART_MspInit+0x288>)
 800ab18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab1a:	f003 0310 	and.w	r3, r3, #16
 800ab1e:	623b      	str	r3, [r7, #32]
 800ab20:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab22:	4b93      	ldr	r3, [pc, #588]	; (800ad70 <HAL_UART_MspInit+0x288>)
 800ab24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab26:	4a92      	ldr	r2, [pc, #584]	; (800ad70 <HAL_UART_MspInit+0x288>)
 800ab28:	f043 0302 	orr.w	r3, r3, #2
 800ab2c:	6313      	str	r3, [r2, #48]	; 0x30
 800ab2e:	4b90      	ldr	r3, [pc, #576]	; (800ad70 <HAL_UART_MspInit+0x288>)
 800ab30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab32:	f003 0302 	and.w	r3, r3, #2
 800ab36:	61fb      	str	r3, [r7, #28]
 800ab38:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800ab3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab40:	2302      	movs	r3, #2
 800ab42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab44:	2300      	movs	r3, #0
 800ab46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab48:	2303      	movs	r3, #3
 800ab4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800ab4c:	2304      	movs	r3, #4
 800ab4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab54:	4619      	mov	r1, r3
 800ab56:	4887      	ldr	r0, [pc, #540]	; (800ad74 <HAL_UART_MspInit+0x28c>)
 800ab58:	f002 fbfe 	bl	800d358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800ab5c:	2340      	movs	r3, #64	; 0x40
 800ab5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab60:	2302      	movs	r3, #2
 800ab62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab64:	2300      	movs	r3, #0
 800ab66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ab6c:	2307      	movs	r3, #7
 800ab6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab74:	4619      	mov	r1, r3
 800ab76:	487f      	ldr	r0, [pc, #508]	; (800ad74 <HAL_UART_MspInit+0x28c>)
 800ab78:	f002 fbee 	bl	800d358 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800ab7c:	4b7e      	ldr	r3, [pc, #504]	; (800ad78 <HAL_UART_MspInit+0x290>)
 800ab7e:	4a7f      	ldr	r2, [pc, #508]	; (800ad7c <HAL_UART_MspInit+0x294>)
 800ab80:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800ab82:	4b7d      	ldr	r3, [pc, #500]	; (800ad78 <HAL_UART_MspInit+0x290>)
 800ab84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ab88:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ab8a:	4b7b      	ldr	r3, [pc, #492]	; (800ad78 <HAL_UART_MspInit+0x290>)
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab90:	4b79      	ldr	r3, [pc, #484]	; (800ad78 <HAL_UART_MspInit+0x290>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ab96:	4b78      	ldr	r3, [pc, #480]	; (800ad78 <HAL_UART_MspInit+0x290>)
 800ab98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab9c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ab9e:	4b76      	ldr	r3, [pc, #472]	; (800ad78 <HAL_UART_MspInit+0x290>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aba4:	4b74      	ldr	r3, [pc, #464]	; (800ad78 <HAL_UART_MspInit+0x290>)
 800aba6:	2200      	movs	r2, #0
 800aba8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800abaa:	4b73      	ldr	r3, [pc, #460]	; (800ad78 <HAL_UART_MspInit+0x290>)
 800abac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abb0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800abb2:	4b71      	ldr	r3, [pc, #452]	; (800ad78 <HAL_UART_MspInit+0x290>)
 800abb4:	2200      	movs	r2, #0
 800abb6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800abb8:	4b6f      	ldr	r3, [pc, #444]	; (800ad78 <HAL_UART_MspInit+0x290>)
 800abba:	2200      	movs	r2, #0
 800abbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800abbe:	486e      	ldr	r0, [pc, #440]	; (800ad78 <HAL_UART_MspInit+0x290>)
 800abc0:	f000 fe30 	bl	800b824 <HAL_DMA_Init>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d001      	beq.n	800abce <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800abca:	f7ff fd3b 	bl	800a644 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a69      	ldr	r2, [pc, #420]	; (800ad78 <HAL_UART_MspInit+0x290>)
 800abd2:	66da      	str	r2, [r3, #108]	; 0x6c
 800abd4:	4a68      	ldr	r2, [pc, #416]	; (800ad78 <HAL_UART_MspInit+0x290>)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800abda:	2200      	movs	r2, #0
 800abdc:	2101      	movs	r1, #1
 800abde:	2025      	movs	r0, #37	; 0x25
 800abe0:	f000 fcf7 	bl	800b5d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800abe4:	2025      	movs	r0, #37	; 0x25
 800abe6:	f000 fd10 	bl	800b60a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800abea:	e0ba      	b.n	800ad62 <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART3)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a63      	ldr	r2, [pc, #396]	; (800ad80 <HAL_UART_MspInit+0x298>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d129      	bne.n	800ac4a <HAL_UART_MspInit+0x162>
    __HAL_RCC_USART3_CLK_ENABLE();
 800abf6:	4b5e      	ldr	r3, [pc, #376]	; (800ad70 <HAL_UART_MspInit+0x288>)
 800abf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfa:	4a5d      	ldr	r2, [pc, #372]	; (800ad70 <HAL_UART_MspInit+0x288>)
 800abfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac00:	6413      	str	r3, [r2, #64]	; 0x40
 800ac02:	4b5b      	ldr	r3, [pc, #364]	; (800ad70 <HAL_UART_MspInit+0x288>)
 800ac04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac0a:	61bb      	str	r3, [r7, #24]
 800ac0c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ac0e:	4b58      	ldr	r3, [pc, #352]	; (800ad70 <HAL_UART_MspInit+0x288>)
 800ac10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac12:	4a57      	ldr	r2, [pc, #348]	; (800ad70 <HAL_UART_MspInit+0x288>)
 800ac14:	f043 0308 	orr.w	r3, r3, #8
 800ac18:	6313      	str	r3, [r2, #48]	; 0x30
 800ac1a:	4b55      	ldr	r3, [pc, #340]	; (800ad70 <HAL_UART_MspInit+0x288>)
 800ac1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac1e:	f003 0308 	and.w	r3, r3, #8
 800ac22:	617b      	str	r3, [r7, #20]
 800ac24:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800ac26:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ac2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac30:	2300      	movs	r3, #0
 800ac32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac34:	2303      	movs	r3, #3
 800ac36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ac38:	2307      	movs	r3, #7
 800ac3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ac3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac40:	4619      	mov	r1, r3
 800ac42:	4850      	ldr	r0, [pc, #320]	; (800ad84 <HAL_UART_MspInit+0x29c>)
 800ac44:	f002 fb88 	bl	800d358 <HAL_GPIO_Init>
}
 800ac48:	e08b      	b.n	800ad62 <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART6)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a4e      	ldr	r2, [pc, #312]	; (800ad88 <HAL_UART_MspInit+0x2a0>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	f040 8086 	bne.w	800ad62 <HAL_UART_MspInit+0x27a>
    __HAL_RCC_USART6_CLK_ENABLE();
 800ac56:	4b46      	ldr	r3, [pc, #280]	; (800ad70 <HAL_UART_MspInit+0x288>)
 800ac58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac5a:	4a45      	ldr	r2, [pc, #276]	; (800ad70 <HAL_UART_MspInit+0x288>)
 800ac5c:	f043 0320 	orr.w	r3, r3, #32
 800ac60:	6453      	str	r3, [r2, #68]	; 0x44
 800ac62:	4b43      	ldr	r3, [pc, #268]	; (800ad70 <HAL_UART_MspInit+0x288>)
 800ac64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac66:	f003 0320 	and.w	r3, r3, #32
 800ac6a:	613b      	str	r3, [r7, #16]
 800ac6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ac6e:	4b40      	ldr	r3, [pc, #256]	; (800ad70 <HAL_UART_MspInit+0x288>)
 800ac70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac72:	4a3f      	ldr	r2, [pc, #252]	; (800ad70 <HAL_UART_MspInit+0x288>)
 800ac74:	f043 0304 	orr.w	r3, r3, #4
 800ac78:	6313      	str	r3, [r2, #48]	; 0x30
 800ac7a:	4b3d      	ldr	r3, [pc, #244]	; (800ad70 <HAL_UART_MspInit+0x288>)
 800ac7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7e:	f003 0304 	and.w	r3, r3, #4
 800ac82:	60fb      	str	r3, [r7, #12]
 800ac84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ac86:	23c0      	movs	r3, #192	; 0xc0
 800ac88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac8a:	2302      	movs	r3, #2
 800ac8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac92:	2303      	movs	r3, #3
 800ac94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800ac96:	2308      	movs	r3, #8
 800ac98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ac9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac9e:	4619      	mov	r1, r3
 800aca0:	483a      	ldr	r0, [pc, #232]	; (800ad8c <HAL_UART_MspInit+0x2a4>)
 800aca2:	f002 fb59 	bl	800d358 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800aca6:	4b3a      	ldr	r3, [pc, #232]	; (800ad90 <HAL_UART_MspInit+0x2a8>)
 800aca8:	4a3a      	ldr	r2, [pc, #232]	; (800ad94 <HAL_UART_MspInit+0x2ac>)
 800acaa:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800acac:	4b38      	ldr	r3, [pc, #224]	; (800ad90 <HAL_UART_MspInit+0x2a8>)
 800acae:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800acb2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800acb4:	4b36      	ldr	r3, [pc, #216]	; (800ad90 <HAL_UART_MspInit+0x2a8>)
 800acb6:	2200      	movs	r2, #0
 800acb8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800acba:	4b35      	ldr	r3, [pc, #212]	; (800ad90 <HAL_UART_MspInit+0x2a8>)
 800acbc:	2200      	movs	r2, #0
 800acbe:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800acc0:	4b33      	ldr	r3, [pc, #204]	; (800ad90 <HAL_UART_MspInit+0x2a8>)
 800acc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800acc6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800acc8:	4b31      	ldr	r3, [pc, #196]	; (800ad90 <HAL_UART_MspInit+0x2a8>)
 800acca:	2200      	movs	r2, #0
 800accc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800acce:	4b30      	ldr	r3, [pc, #192]	; (800ad90 <HAL_UART_MspInit+0x2a8>)
 800acd0:	2200      	movs	r2, #0
 800acd2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800acd4:	4b2e      	ldr	r3, [pc, #184]	; (800ad90 <HAL_UART_MspInit+0x2a8>)
 800acd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acda:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800acdc:	4b2c      	ldr	r3, [pc, #176]	; (800ad90 <HAL_UART_MspInit+0x2a8>)
 800acde:	2200      	movs	r2, #0
 800ace0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ace2:	4b2b      	ldr	r3, [pc, #172]	; (800ad90 <HAL_UART_MspInit+0x2a8>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800ace8:	4829      	ldr	r0, [pc, #164]	; (800ad90 <HAL_UART_MspInit+0x2a8>)
 800acea:	f000 fd9b 	bl	800b824 <HAL_DMA_Init>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d001      	beq.n	800acf8 <HAL_UART_MspInit+0x210>
      Error_Handler();
 800acf4:	f7ff fca6 	bl	800a644 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a25      	ldr	r2, [pc, #148]	; (800ad90 <HAL_UART_MspInit+0x2a8>)
 800acfc:	66da      	str	r2, [r3, #108]	; 0x6c
 800acfe:	4a24      	ldr	r2, [pc, #144]	; (800ad90 <HAL_UART_MspInit+0x2a8>)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800ad04:	4b24      	ldr	r3, [pc, #144]	; (800ad98 <HAL_UART_MspInit+0x2b0>)
 800ad06:	4a25      	ldr	r2, [pc, #148]	; (800ad9c <HAL_UART_MspInit+0x2b4>)
 800ad08:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800ad0a:	4b23      	ldr	r3, [pc, #140]	; (800ad98 <HAL_UART_MspInit+0x2b0>)
 800ad0c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800ad10:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ad12:	4b21      	ldr	r3, [pc, #132]	; (800ad98 <HAL_UART_MspInit+0x2b0>)
 800ad14:	2240      	movs	r2, #64	; 0x40
 800ad16:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ad18:	4b1f      	ldr	r3, [pc, #124]	; (800ad98 <HAL_UART_MspInit+0x2b0>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ad1e:	4b1e      	ldr	r3, [pc, #120]	; (800ad98 <HAL_UART_MspInit+0x2b0>)
 800ad20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad24:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ad26:	4b1c      	ldr	r3, [pc, #112]	; (800ad98 <HAL_UART_MspInit+0x2b0>)
 800ad28:	2200      	movs	r2, #0
 800ad2a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ad2c:	4b1a      	ldr	r3, [pc, #104]	; (800ad98 <HAL_UART_MspInit+0x2b0>)
 800ad2e:	2200      	movs	r2, #0
 800ad30:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 800ad32:	4b19      	ldr	r3, [pc, #100]	; (800ad98 <HAL_UART_MspInit+0x2b0>)
 800ad34:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad38:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ad3a:	4b17      	ldr	r3, [pc, #92]	; (800ad98 <HAL_UART_MspInit+0x2b0>)
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ad40:	4b15      	ldr	r3, [pc, #84]	; (800ad98 <HAL_UART_MspInit+0x2b0>)
 800ad42:	2200      	movs	r2, #0
 800ad44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800ad46:	4814      	ldr	r0, [pc, #80]	; (800ad98 <HAL_UART_MspInit+0x2b0>)
 800ad48:	f000 fd6c 	bl	800b824 <HAL_DMA_Init>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d001      	beq.n	800ad56 <HAL_UART_MspInit+0x26e>
      Error_Handler();
 800ad52:	f7ff fc77 	bl	800a644 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a0f      	ldr	r2, [pc, #60]	; (800ad98 <HAL_UART_MspInit+0x2b0>)
 800ad5a:	669a      	str	r2, [r3, #104]	; 0x68
 800ad5c:	4a0e      	ldr	r2, [pc, #56]	; (800ad98 <HAL_UART_MspInit+0x2b0>)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6393      	str	r3, [r2, #56]	; 0x38
}
 800ad62:	bf00      	nop
 800ad64:	3738      	adds	r7, #56	; 0x38
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	40011000 	.word	0x40011000
 800ad70:	40023800 	.word	0x40023800
 800ad74:	40020400 	.word	0x40020400
 800ad78:	20019520 	.word	0x20019520
 800ad7c:	40026440 	.word	0x40026440
 800ad80:	40004800 	.word	0x40004800
 800ad84:	40020c00 	.word	0x40020c00
 800ad88:	40011400 	.word	0x40011400
 800ad8c:	40020800 	.word	0x40020800
 800ad90:	20018f1c 	.word	0x20018f1c
 800ad94:	40026428 	.word	0x40026428
 800ad98:	200194c0 	.word	0x200194c0
 800ad9c:	400264a0 	.word	0x400264a0

0800ada0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b08a      	sub	sp, #40	; 0x28
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ada8:	f107 0314 	add.w	r3, r7, #20
 800adac:	2200      	movs	r2, #0
 800adae:	601a      	str	r2, [r3, #0]
 800adb0:	605a      	str	r2, [r3, #4]
 800adb2:	609a      	str	r2, [r3, #8]
 800adb4:	60da      	str	r2, [r3, #12]
 800adb6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adc0:	d141      	bne.n	800ae46 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800adc2:	4b23      	ldr	r3, [pc, #140]	; (800ae50 <HAL_PCD_MspInit+0xb0>)
 800adc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc6:	4a22      	ldr	r2, [pc, #136]	; (800ae50 <HAL_PCD_MspInit+0xb0>)
 800adc8:	f043 0301 	orr.w	r3, r3, #1
 800adcc:	6313      	str	r3, [r2, #48]	; 0x30
 800adce:	4b20      	ldr	r3, [pc, #128]	; (800ae50 <HAL_PCD_MspInit+0xb0>)
 800add0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add2:	f003 0301 	and.w	r3, r3, #1
 800add6:	613b      	str	r3, [r7, #16]
 800add8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800adda:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800adde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ade0:	2302      	movs	r3, #2
 800ade2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ade4:	2300      	movs	r3, #0
 800ade6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ade8:	2303      	movs	r3, #3
 800adea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800adec:	230a      	movs	r3, #10
 800adee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adf0:	f107 0314 	add.w	r3, r7, #20
 800adf4:	4619      	mov	r1, r3
 800adf6:	4817      	ldr	r0, [pc, #92]	; (800ae54 <HAL_PCD_MspInit+0xb4>)
 800adf8:	f002 faae 	bl	800d358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800adfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ae02:	2300      	movs	r3, #0
 800ae04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae06:	2300      	movs	r3, #0
 800ae08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ae0a:	f107 0314 	add.w	r3, r7, #20
 800ae0e:	4619      	mov	r1, r3
 800ae10:	4810      	ldr	r0, [pc, #64]	; (800ae54 <HAL_PCD_MspInit+0xb4>)
 800ae12:	f002 faa1 	bl	800d358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ae16:	4b0e      	ldr	r3, [pc, #56]	; (800ae50 <HAL_PCD_MspInit+0xb0>)
 800ae18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae1a:	4a0d      	ldr	r2, [pc, #52]	; (800ae50 <HAL_PCD_MspInit+0xb0>)
 800ae1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae20:	6353      	str	r3, [r2, #52]	; 0x34
 800ae22:	4b0b      	ldr	r3, [pc, #44]	; (800ae50 <HAL_PCD_MspInit+0xb0>)
 800ae24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae2a:	60fb      	str	r3, [r7, #12]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	4b08      	ldr	r3, [pc, #32]	; (800ae50 <HAL_PCD_MspInit+0xb0>)
 800ae30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae32:	4a07      	ldr	r2, [pc, #28]	; (800ae50 <HAL_PCD_MspInit+0xb0>)
 800ae34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae38:	6453      	str	r3, [r2, #68]	; 0x44
 800ae3a:	4b05      	ldr	r3, [pc, #20]	; (800ae50 <HAL_PCD_MspInit+0xb0>)
 800ae3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae42:	60bb      	str	r3, [r7, #8]
 800ae44:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800ae46:	bf00      	nop
 800ae48:	3728      	adds	r7, #40	; 0x28
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	40023800 	.word	0x40023800
 800ae54:	40020000 	.word	0x40020000

0800ae58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ae5c:	bf00      	nop
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ae66:	b480      	push	{r7}
 800ae68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ae6a:	e7fe      	b.n	800ae6a <HardFault_Handler+0x4>

0800ae6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ae70:	e7fe      	b.n	800ae70 <MemManage_Handler+0x4>

0800ae72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ae72:	b480      	push	{r7}
 800ae74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ae76:	e7fe      	b.n	800ae76 <BusFault_Handler+0x4>

0800ae78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ae7c:	e7fe      	b.n	800ae7c <UsageFault_Handler+0x4>

0800ae7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ae7e:	b480      	push	{r7}
 800ae80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ae82:	bf00      	nop
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  HAL_IncTick();
 800ae90:	f000 fa82 	bl	800b398 <HAL_IncTick>
	#if (INCLUDE_xTaskGetSchedulerState == 1 )
	  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800ae94:	f008 ff18 	bl	8013cc8 <xTaskGetSchedulerState>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d001      	beq.n	800aea2 <SysTick_Handler+0x16>
	  {
	#endif /* INCLUDE_xTaskGetSchedulerState */
	  xPortSysTickHandler();
 800ae9e:	f009 faeb 	bl	8014478 <xPortSysTickHandler>

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800aea2:	bf00      	nop
 800aea4:	bd80      	pop	{r7, pc}
	...

0800aea8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800aeac:	4802      	ldr	r0, [pc, #8]	; (800aeb8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800aeae:	f004 f817 	bl	800eee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800aeb2:	bf00      	nop
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	20018ffc 	.word	0x20018ffc

0800aebc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800aec0:	4804      	ldr	r0, [pc, #16]	; (800aed4 <TIM3_IRQHandler+0x18>)
 800aec2:	f004 f80d 	bl	800eee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 800aec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800aeca:	4803      	ldr	r0, [pc, #12]	; (800aed8 <TIM3_IRQHandler+0x1c>)
 800aecc:	f002 fc07 	bl	800d6de <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 800aed0:	bf00      	nop
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	20019480 	.word	0x20019480
 800aed8:	40020400 	.word	0x40020400

0800aedc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800aee0:	4802      	ldr	r0, [pc, #8]	; (800aeec <USART1_IRQHandler+0x10>)
 800aee2:	f004 ff85 	bl	800fdf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800aee6:	bf00      	nop
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	20019580 	.word	0x20019580

0800aef0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800aef4:	4802      	ldr	r0, [pc, #8]	; (800af00 <TIM5_IRQHandler+0x10>)
 800aef6:	f003 fff3 	bl	800eee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800aefa:	bf00      	nop
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	20019440 	.word	0x20019440

0800af04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800af08:	4803      	ldr	r0, [pc, #12]	; (800af18 <TIM6_DAC_IRQHandler+0x14>)
 800af0a:	f000 fbba 	bl	800b682 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800af0e:	4803      	ldr	r0, [pc, #12]	; (800af1c <TIM6_DAC_IRQHandler+0x18>)
 800af10:	f003 ffe6 	bl	800eee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800af14:	bf00      	nop
 800af16:	bd80      	pop	{r7, pc}
 800af18:	20019600 	.word	0x20019600
 800af1c:	20019618 	.word	0x20019618

0800af20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800af26:	482c      	ldr	r0, [pc, #176]	; (800afd8 <TIM7_IRQHandler+0xb8>)
 800af28:	f003 ffda 	bl	800eee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

	//__HAL_TIM_SET_COUNTER(&htim7 , 0);

  HAL_GPIO_WritePin(GPIOF, DEBUG1_Pin, GPIO_PIN_SET);
 800af2c:	2201      	movs	r2, #1
 800af2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800af32:	482a      	ldr	r0, [pc, #168]	; (800afdc <TIM7_IRQHandler+0xbc>)
 800af34:	f002 fbba 	bl	800d6ac <HAL_GPIO_WritePin>
//***********************Start Measurement*********************//
HAL_GPIO_WritePin(GPIOC, CV_A_B_Pin,GPIO_PIN_RESET);
 800af38:	2200      	movs	r2, #0
 800af3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800af3e:	4828      	ldr	r0, [pc, #160]	; (800afe0 <TIM7_IRQHandler+0xc0>)
 800af40:	f002 fbb4 	bl	800d6ac <HAL_GPIO_WritePin>
microDelay(0);
 800af44:	2000      	movs	r0, #0
 800af46:	f000 f87f 	bl	800b048 <microDelay>
HAL_GPIO_WritePin(GPIOC, CV_A_B_Pin,GPIO_PIN_SET);
 800af4a:	2201      	movs	r2, #1
 800af4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800af50:	4823      	ldr	r0, [pc, #140]	; (800afe0 <TIM7_IRQHandler+0xc0>)
 800af52:	f002 fbab 	bl	800d6ac <HAL_GPIO_WritePin>
//If just 6 Channels are selected for READ then it is possible to read while Aquiering


//*******************Get new samples from ADC******************//
	//*******************this takes around 5µSec*******************//
for (int i = 0; i<6; i++){
 800af56:	2300      	movs	r3, #0
 800af58:	607b      	str	r3, [r7, #4]
 800af5a:	e01b      	b.n	800af94 <TIM7_IRQHandler+0x74>
	HAL_GPIO_WritePin(GPIOD, RD_Pin,GPIO_PIN_SET);
 800af5c:	2201      	movs	r2, #1
 800af5e:	2104      	movs	r1, #4
 800af60:	4820      	ldr	r0, [pc, #128]	; (800afe4 <TIM7_IRQHandler+0xc4>)
 800af62:	f002 fba3 	bl	800d6ac <HAL_GPIO_WritePin>


    HAL_GPIO_WritePin(GPIOD, RD_Pin,GPIO_PIN_RESET);
 800af66:	2200      	movs	r2, #0
 800af68:	2104      	movs	r1, #4
 800af6a:	481e      	ldr	r0, [pc, #120]	; (800afe4 <TIM7_IRQHandler+0xc4>)
 800af6c:	f002 fb9e 	bl	800d6ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, CS_Pin,GPIO_PIN_RESET);
 800af70:	2200      	movs	r2, #0
 800af72:	2180      	movs	r1, #128	; 0x80
 800af74:	481b      	ldr	r0, [pc, #108]	; (800afe4 <TIM7_IRQHandler+0xc4>)
 800af76:	f002 fb99 	bl	800d6ac <HAL_GPIO_WritePin>


    microDelay(0);
 800af7a:	2000      	movs	r0, #0
 800af7c:	f000 f864 	bl	800b048 <microDelay>
     //At least something... to get Ports updated

    analogIN[i] = GPIOE->IDR;
 800af80:	4b19      	ldr	r3, [pc, #100]	; (800afe8 <TIM7_IRQHandler+0xc8>)
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	b299      	uxth	r1, r3
 800af86:	4a19      	ldr	r2, [pc, #100]	; (800afec <TIM7_IRQHandler+0xcc>)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (int i = 0; i<6; i++){
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	3301      	adds	r3, #1
 800af92:	607b      	str	r3, [r7, #4]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b05      	cmp	r3, #5
 800af98:	dde0      	ble.n	800af5c <TIM7_IRQHandler+0x3c>

}

HAL_GPIO_WritePin(GPIOD, CS_Pin,GPIO_PIN_SET);
 800af9a:	2201      	movs	r2, #1
 800af9c:	2180      	movs	r1, #128	; 0x80
 800af9e:	4811      	ldr	r0, [pc, #68]	; (800afe4 <TIM7_IRQHandler+0xc4>)
 800afa0:	f002 fb84 	bl	800d6ac <HAL_GPIO_WritePin>

HAL_GPIO_WritePin(GPIOF, DEBUG1_Pin, GPIO_PIN_RESET);
 800afa4:	2200      	movs	r2, #0
 800afa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800afaa:	480c      	ldr	r0, [pc, #48]	; (800afdc <TIM7_IRQHandler+0xbc>)
 800afac:	f002 fb7e 	bl	800d6ac <HAL_GPIO_WritePin>

//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R,UART_reciveCorrected[7]+150); //Update ADC1
//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R,UART_reciveCorrected[9]+171); //Update ADC2 +171

HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R,UART_IN[7]+109); //Update ADC1
 800afb0:	4b0f      	ldr	r3, [pc, #60]	; (800aff0 <TIM7_IRQHandler+0xd0>)
 800afb2:	79db      	ldrb	r3, [r3, #7]
 800afb4:	336d      	adds	r3, #109	; 0x6d
 800afb6:	2200      	movs	r2, #0
 800afb8:	2100      	movs	r1, #0
 800afba:	480e      	ldr	r0, [pc, #56]	; (800aff4 <TIM7_IRQHandler+0xd4>)
 800afbc:	f000 fc02 	bl	800b7c4 <HAL_DAC_SetValue>
HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R,UART_IN[9]+99); //Update ADC2 +171
 800afc0:	4b0b      	ldr	r3, [pc, #44]	; (800aff0 <TIM7_IRQHandler+0xd0>)
 800afc2:	7a5b      	ldrb	r3, [r3, #9]
 800afc4:	3363      	adds	r3, #99	; 0x63
 800afc6:	2200      	movs	r2, #0
 800afc8:	2110      	movs	r1, #16
 800afca:	480a      	ldr	r0, [pc, #40]	; (800aff4 <TIM7_IRQHandler+0xd4>)
 800afcc:	f000 fbfa 	bl	800b7c4 <HAL_DAC_SetValue>



/* USER CODE END TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800afd0:	bf00      	nop
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	20019658 	.word	0x20019658
 800afdc:	40021400 	.word	0x40021400
 800afe0:	40020800 	.word	0x40020800
 800afe4:	40020c00 	.word	0x40020c00
 800afe8:	40021000 	.word	0x40021000
 800afec:	20010a84 	.word	0x20010a84
 800aff0:	2000f9fc 	.word	0x2000f9fc
 800aff4:	20019600 	.word	0x20019600

0800aff8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800affc:	4802      	ldr	r0, [pc, #8]	; (800b008 <DMA2_Stream1_IRQHandler+0x10>)
 800affe:	f000 fdb1 	bl	800bb64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800b002:	bf00      	nop
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	20018f1c 	.word	0x20018f1c

0800b00c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800b010:	4802      	ldr	r0, [pc, #8]	; (800b01c <DMA2_Stream2_IRQHandler+0x10>)
 800b012:	f000 fda7 	bl	800bb64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800b016:	bf00      	nop
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	20019520 	.word	0x20019520

0800b020 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800b024:	4802      	ldr	r0, [pc, #8]	; (800b030 <ETH_IRQHandler+0x10>)
 800b026:	f001 fbf5 	bl	800c814 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800b02a:	bf00      	nop
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	2001afc0 	.word	0x2001afc0

0800b034 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800b038:	4802      	ldr	r0, [pc, #8]	; (800b044 <DMA2_Stream6_IRQHandler+0x10>)
 800b03a:	f000 fd93 	bl	800bb64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800b03e:	bf00      	nop
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	200194c0 	.word	0x200194c0

0800b048 <microDelay>:

/* USER CODE BEGIN 1 */
void microDelay (int time){
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]

	 while (__HAL_TIM_GET_COUNTER(&htim6) < time){
 800b050:	bf00      	nop
 800b052:	4b08      	ldr	r3, [pc, #32]	; (800b074 <microDelay+0x2c>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d3f9      	bcc.n	800b052 <microDelay+0xa>

	  }
	__HAL_TIM_SET_COUNTER(&htim6 , 0);
 800b05e:	4b05      	ldr	r3, [pc, #20]	; (800b074 <microDelay+0x2c>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	2200      	movs	r2, #0
 800b064:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b066:	bf00      	nop
 800b068:	370c      	adds	r7, #12
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	20019618 	.word	0x20019618

0800b078 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b086      	sub	sp, #24
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b084:	2300      	movs	r3, #0
 800b086:	617b      	str	r3, [r7, #20]
 800b088:	e00a      	b.n	800b0a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b08a:	f3af 8000 	nop.w
 800b08e:	4601      	mov	r1, r0
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	1c5a      	adds	r2, r3, #1
 800b094:	60ba      	str	r2, [r7, #8]
 800b096:	b2ca      	uxtb	r2, r1
 800b098:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	3301      	adds	r3, #1
 800b09e:	617b      	str	r3, [r7, #20]
 800b0a0:	697a      	ldr	r2, [r7, #20]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	dbf0      	blt.n	800b08a <_read+0x12>
	}

return len;
 800b0a8:	687b      	ldr	r3, [r7, #4]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3718      	adds	r7, #24
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b086      	sub	sp, #24
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	60f8      	str	r0, [r7, #12]
 800b0ba:	60b9      	str	r1, [r7, #8]
 800b0bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b0be:	2300      	movs	r3, #0
 800b0c0:	617b      	str	r3, [r7, #20]
 800b0c2:	e009      	b.n	800b0d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	1c5a      	adds	r2, r3, #1
 800b0c8:	60ba      	str	r2, [r7, #8]
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	617b      	str	r3, [r7, #20]
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	dbf1      	blt.n	800b0c4 <_write+0x12>
	}
	return len;
 800b0e0:	687b      	ldr	r3, [r7, #4]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3718      	adds	r7, #24
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <_close>:

int _close(int file)
{
 800b0ea:	b480      	push	{r7}
 800b0ec:	b083      	sub	sp, #12
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
	return -1;
 800b0f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	370c      	adds	r7, #12
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr

0800b102 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b102:	b480      	push	{r7}
 800b104:	b083      	sub	sp, #12
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
 800b10a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b112:	605a      	str	r2, [r3, #4]
	return 0;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr

0800b122 <_isatty>:

int _isatty(int file)
{
 800b122:	b480      	push	{r7}
 800b124:	b083      	sub	sp, #12
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
	return 1;
 800b12a:	2301      	movs	r3, #1
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	607a      	str	r2, [r7, #4]
	return 0;
 800b144:	2300      	movs	r3, #0
}
 800b146:	4618      	mov	r0, r3
 800b148:	3714      	adds	r7, #20
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr
	...

0800b154 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b15c:	4b11      	ldr	r3, [pc, #68]	; (800b1a4 <_sbrk+0x50>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d102      	bne.n	800b16a <_sbrk+0x16>
		heap_end = &end;
 800b164:	4b0f      	ldr	r3, [pc, #60]	; (800b1a4 <_sbrk+0x50>)
 800b166:	4a10      	ldr	r2, [pc, #64]	; (800b1a8 <_sbrk+0x54>)
 800b168:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b16a:	4b0e      	ldr	r3, [pc, #56]	; (800b1a4 <_sbrk+0x50>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b170:	4b0c      	ldr	r3, [pc, #48]	; (800b1a4 <_sbrk+0x50>)
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	4413      	add	r3, r2
 800b178:	466a      	mov	r2, sp
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d905      	bls.n	800b18a <_sbrk+0x36>
	{
		errno = ENOMEM;
 800b17e:	4b0b      	ldr	r3, [pc, #44]	; (800b1ac <_sbrk+0x58>)
 800b180:	220c      	movs	r2, #12
 800b182:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800b184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b188:	e006      	b.n	800b198 <_sbrk+0x44>
	}

	heap_end += incr;
 800b18a:	4b06      	ldr	r3, [pc, #24]	; (800b1a4 <_sbrk+0x50>)
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4413      	add	r3, r2
 800b192:	4a04      	ldr	r2, [pc, #16]	; (800b1a4 <_sbrk+0x50>)
 800b194:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b196:	68fb      	ldr	r3, [r7, #12]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3714      	adds	r7, #20
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr
 800b1a4:	20000340 	.word	0x20000340
 800b1a8:	2001ff14 	.word	0x2001ff14
 800b1ac:	2001ff0c 	.word	0x2001ff0c

0800b1b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b1b4:	4b06      	ldr	r3, [pc, #24]	; (800b1d0 <SystemInit+0x20>)
 800b1b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1ba:	4a05      	ldr	r2, [pc, #20]	; (800b1d0 <SystemInit+0x20>)
 800b1bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b1c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  //SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 800b1c4:	bf00      	nop
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	e000ed00 	.word	0xe000ed00

0800b1d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b1d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b20c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b1d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b1da:	e003      	b.n	800b1e4 <LoopCopyDataInit>

0800b1dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b1dc:	4b0c      	ldr	r3, [pc, #48]	; (800b210 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b1de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b1e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b1e2:	3104      	adds	r1, #4

0800b1e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b1e4:	480b      	ldr	r0, [pc, #44]	; (800b214 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b1e6:	4b0c      	ldr	r3, [pc, #48]	; (800b218 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b1e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b1ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b1ec:	d3f6      	bcc.n	800b1dc <CopyDataInit>
  ldr  r2, =_sbss
 800b1ee:	4a0b      	ldr	r2, [pc, #44]	; (800b21c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b1f0:	e002      	b.n	800b1f8 <LoopFillZerobss>

0800b1f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b1f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b1f4:	f842 3b04 	str.w	r3, [r2], #4

0800b1f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b1f8:	4b09      	ldr	r3, [pc, #36]	; (800b220 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b1fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b1fc:	d3f9      	bcc.n	800b1f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b1fe:	f7ff ffd7 	bl	800b1b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b202:	f015 f941 	bl	8020488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b206:	f7fe fc93 	bl	8009b30 <main>
  bx  lr    
 800b20a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b20c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800b210:	08035340 	.word	0x08035340
  ldr  r0, =_sdata
 800b214:	20000040 	.word	0x20000040
  ldr  r3, =_edata
 800b218:	200000c4 	.word	0x200000c4
  ldr  r2, =_sbss
 800b21c:	200000c4 	.word	0x200000c4
  ldr  r3, = _ebss
 800b220:	2001ff14 	.word	0x2001ff14

0800b224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b224:	e7fe      	b.n	800b224 <ADC_IRQHandler>
	...

0800b228 <dspTask>:
DAC_HandleTypeDef hdac;
SPI_HandleTypeDef hspi2;

int errorcount;

void dspTask(void const * argument){
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]



/******************Setting all Relais to default settings**************/
	BypassLeft(activate);
 800b230:	2001      	movs	r0, #1
 800b232:	f7fd f9ed 	bl	8008610 <BypassLeft>
	BypassRight(activate);
 800b236:	2001      	movs	r0, #1
 800b238:	f7fd fa08 	bl	800864c <BypassRight>
	VCASource(RL);
 800b23c:	2001      	movs	r0, #1
 800b23e:	f7fd fa23 	bl	8008688 <VCASource>
	VCAOutput(NormalOutput, MS_Deconvert_Inactive);
 800b242:	2101      	movs	r1, #1
 800b244:	2000      	movs	r0, #0
 800b246:	f7fd fa3f 	bl	80086c8 <VCAOutput>
/**********************************************************************/

	  //******Define Oversampling ADC7606*****************//
	  HAL_GPIO_WritePin(GPIOC, OS0_Pin,GPIO_PIN_RESET);
 800b24a:	2200      	movs	r2, #0
 800b24c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b250:	482b      	ldr	r0, [pc, #172]	; (800b300 <dspTask+0xd8>)
 800b252:	f002 fa2b 	bl	800d6ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, OS1_Pin,GPIO_PIN_RESET);
 800b256:	2200      	movs	r2, #0
 800b258:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b25c:	4828      	ldr	r0, [pc, #160]	; (800b300 <dspTask+0xd8>)
 800b25e:	f002 fa25 	bl	800d6ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, OS2_Pin,GPIO_PIN_RESET);
 800b262:	2200      	movs	r2, #0
 800b264:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b268:	4825      	ldr	r0, [pc, #148]	; (800b300 <dspTask+0xd8>)
 800b26a:	f002 fa1f 	bl	800d6ac <HAL_GPIO_WritePin>
	  //**************************************************//

	  //**********Define Range ADC7606********************//
	  HAL_GPIO_WritePin(GPIOC, RANGE_Pin,GPIO_PIN_SET); // +/- 10V Range select
 800b26e:	2201      	movs	r2, #1
 800b270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b274:	4822      	ldr	r0, [pc, #136]	; (800b300 <dspTask+0xd8>)
 800b276:	f002 fa19 	bl	800d6ac <HAL_GPIO_WritePin>
	  //**************************************************//

	  //**********Default State ControlPins***************//
	  HAL_GPIO_WritePin(GPIOC, CV_A_B_Pin,GPIO_PIN_SET);
 800b27a:	2201      	movs	r2, #1
 800b27c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b280:	481f      	ldr	r0, [pc, #124]	; (800b300 <dspTask+0xd8>)
 800b282:	f002 fa13 	bl	800d6ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, CS_Pin,GPIO_PIN_SET);
 800b286:	2201      	movs	r2, #1
 800b288:	2180      	movs	r1, #128	; 0x80
 800b28a:	481e      	ldr	r0, [pc, #120]	; (800b304 <dspTask+0xdc>)
 800b28c:	f002 fa0e 	bl	800d6ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, RD_Pin,GPIO_PIN_SET);
 800b290:	2201      	movs	r2, #1
 800b292:	2104      	movs	r1, #4
 800b294:	481b      	ldr	r0, [pc, #108]	; (800b304 <dspTask+0xdc>)
 800b296:	f002 fa09 	bl	800d6ac <HAL_GPIO_WritePin>
	  //**************************************************//
	  HAL_Delay(10);
 800b29a:	200a      	movs	r0, #10
 800b29c:	f000 f89c 	bl	800b3d8 <HAL_Delay>
	  //**************RESET the ADC7606*******************//
	  HAL_GPIO_WritePin(GPIOG, RESET_Pin,GPIO_PIN_SET);
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	2104      	movs	r1, #4
 800b2a4:	4818      	ldr	r0, [pc, #96]	; (800b308 <dspTask+0xe0>)
 800b2a6:	f002 fa01 	bl	800d6ac <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 800b2aa:	200a      	movs	r0, #10
 800b2ac:	f000 f894 	bl	800b3d8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOG, RESET_Pin,GPIO_PIN_RESET);
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	2104      	movs	r1, #4
 800b2b4:	4814      	ldr	r0, [pc, #80]	; (800b308 <dspTask+0xe0>)
 800b2b6:	f002 f9f9 	bl	800d6ac <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 800b2ba:	200a      	movs	r0, #10
 800b2bc:	f000 f88c 	bl	800b3d8 <HAL_Delay>

	  //**************************************************//
	  	HAL_TIM_Base_Start(&htim5);
 800b2c0:	4812      	ldr	r0, [pc, #72]	; (800b30c <dspTask+0xe4>)
 800b2c2:	f003 fd59 	bl	800ed78 <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim6);
 800b2c6:	4812      	ldr	r0, [pc, #72]	; (800b310 <dspTask+0xe8>)
 800b2c8:	f003 fd56 	bl	800ed78 <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start_IT(&htim7);
 800b2cc:	4811      	ldr	r0, [pc, #68]	; (800b314 <dspTask+0xec>)
 800b2ce:	f003 fd7d 	bl	800edcc <HAL_TIM_Base_Start_IT>

		int toggle = 0;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	60fb      	str	r3, [r7, #12]

	for(;;){

			//vTaskSuspend(NULL);

			HAL_Delay(1000);
 800b2d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b2da:	f000 f87d 	bl	800b3d8 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, DEBUG2_Pin,GPIO_PIN_SET);
 800b2de:	2201      	movs	r2, #1
 800b2e0:	2102      	movs	r1, #2
 800b2e2:	4808      	ldr	r0, [pc, #32]	; (800b304 <dspTask+0xdc>)
 800b2e4:	f002 f9e2 	bl	800d6ac <HAL_GPIO_WritePin>

			calculateDB();
 800b2e8:	f7fd fb52 	bl	8008990 <calculateDB>


			HAL_GPIO_TogglePin(GPIOB, LD2_Pin); //blaue LED an
 800b2ec:	2180      	movs	r1, #128	; 0x80
 800b2ee:	480a      	ldr	r0, [pc, #40]	; (800b318 <dspTask+0xf0>)
 800b2f0:	f002 f9f5 	bl	800d6de <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOD, DEBUG2_Pin,GPIO_PIN_RESET);
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	2102      	movs	r1, #2
 800b2f8:	4802      	ldr	r0, [pc, #8]	; (800b304 <dspTask+0xdc>)
 800b2fa:	f002 f9d7 	bl	800d6ac <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 800b2fe:	e7ea      	b.n	800b2d6 <dspTask+0xae>
 800b300:	40020800 	.word	0x40020800
 800b304:	40020c00 	.word	0x40020c00
 800b308:	40021800 	.word	0x40021800
 800b30c:	20019440 	.word	0x20019440
 800b310:	20019618 	.word	0x20019618
 800b314:	20019658 	.word	0x20019658
 800b318:	40020400 	.word	0x40020400

0800b31c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b320:	2003      	movs	r0, #3
 800b322:	f000 f94b 	bl	800b5bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b326:	200f      	movs	r0, #15
 800b328:	f000 f806 	bl	800b338 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800b32c:	f7ff fa36 	bl	800a79c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	bd80      	pop	{r7, pc}
	...

0800b338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b340:	4b12      	ldr	r3, [pc, #72]	; (800b38c <HAL_InitTick+0x54>)
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	4b12      	ldr	r3, [pc, #72]	; (800b390 <HAL_InitTick+0x58>)
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	4619      	mov	r1, r3
 800b34a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b34e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b352:	fbb2 f3f3 	udiv	r3, r2, r3
 800b356:	4618      	mov	r0, r3
 800b358:	f000 f965 	bl	800b626 <HAL_SYSTICK_Config>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d001      	beq.n	800b366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	e00e      	b.n	800b384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2b0f      	cmp	r3, #15
 800b36a:	d80a      	bhi.n	800b382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b36c:	2200      	movs	r2, #0
 800b36e:	6879      	ldr	r1, [r7, #4]
 800b370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b374:	f000 f92d 	bl	800b5d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b378:	4a06      	ldr	r2, [pc, #24]	; (800b394 <HAL_InitTick+0x5c>)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b37e:	2300      	movs	r3, #0
 800b380:	e000      	b.n	800b384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b382:	2301      	movs	r3, #1
}
 800b384:	4618      	mov	r0, r3
 800b386:	3708      	adds	r7, #8
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}
 800b38c:	20000040 	.word	0x20000040
 800b390:	20000048 	.word	0x20000048
 800b394:	20000044 	.word	0x20000044

0800b398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b398:	b480      	push	{r7}
 800b39a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b39c:	4b06      	ldr	r3, [pc, #24]	; (800b3b8 <HAL_IncTick+0x20>)
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	4b06      	ldr	r3, [pc, #24]	; (800b3bc <HAL_IncTick+0x24>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	4a04      	ldr	r2, [pc, #16]	; (800b3bc <HAL_IncTick+0x24>)
 800b3aa:	6013      	str	r3, [r2, #0]
}
 800b3ac:	bf00      	nop
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	20000048 	.word	0x20000048
 800b3bc:	20019698 	.word	0x20019698

0800b3c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	af00      	add	r7, sp, #0
  return uwTick;
 800b3c4:	4b03      	ldr	r3, [pc, #12]	; (800b3d4 <HAL_GetTick+0x14>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	20019698 	.word	0x20019698

0800b3d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b3e0:	f7ff ffee 	bl	800b3c0 <HAL_GetTick>
 800b3e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3f0:	d005      	beq.n	800b3fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b3f2:	4b09      	ldr	r3, [pc, #36]	; (800b418 <HAL_Delay+0x40>)
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b3fe:	bf00      	nop
 800b400:	f7ff ffde 	bl	800b3c0 <HAL_GetTick>
 800b404:	4602      	mov	r2, r0
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	1ad3      	subs	r3, r2, r3
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d8f7      	bhi.n	800b400 <HAL_Delay+0x28>
  {
  }
}
 800b410:	bf00      	nop
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	20000048 	.word	0x20000048

0800b41c <__NVIC_SetPriorityGrouping>:
{
 800b41c:	b480      	push	{r7}
 800b41e:	b085      	sub	sp, #20
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f003 0307 	and.w	r3, r3, #7
 800b42a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b42c:	4b0b      	ldr	r3, [pc, #44]	; (800b45c <__NVIC_SetPriorityGrouping+0x40>)
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b438:	4013      	ands	r3, r2
 800b43a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b444:	4b06      	ldr	r3, [pc, #24]	; (800b460 <__NVIC_SetPriorityGrouping+0x44>)
 800b446:	4313      	orrs	r3, r2
 800b448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b44a:	4a04      	ldr	r2, [pc, #16]	; (800b45c <__NVIC_SetPriorityGrouping+0x40>)
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	60d3      	str	r3, [r2, #12]
}
 800b450:	bf00      	nop
 800b452:	3714      	adds	r7, #20
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr
 800b45c:	e000ed00 	.word	0xe000ed00
 800b460:	05fa0000 	.word	0x05fa0000

0800b464 <__NVIC_GetPriorityGrouping>:
{
 800b464:	b480      	push	{r7}
 800b466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b468:	4b04      	ldr	r3, [pc, #16]	; (800b47c <__NVIC_GetPriorityGrouping+0x18>)
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	0a1b      	lsrs	r3, r3, #8
 800b46e:	f003 0307 	and.w	r3, r3, #7
}
 800b472:	4618      	mov	r0, r3
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr
 800b47c:	e000ed00 	.word	0xe000ed00

0800b480 <__NVIC_EnableIRQ>:
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	4603      	mov	r3, r0
 800b488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b48a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	db0b      	blt.n	800b4aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b492:	79fb      	ldrb	r3, [r7, #7]
 800b494:	f003 021f 	and.w	r2, r3, #31
 800b498:	4907      	ldr	r1, [pc, #28]	; (800b4b8 <__NVIC_EnableIRQ+0x38>)
 800b49a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b49e:	095b      	lsrs	r3, r3, #5
 800b4a0:	2001      	movs	r0, #1
 800b4a2:	fa00 f202 	lsl.w	r2, r0, r2
 800b4a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b4aa:	bf00      	nop
 800b4ac:	370c      	adds	r7, #12
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	e000e100 	.word	0xe000e100

0800b4bc <__NVIC_SetPriority>:
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	6039      	str	r1, [r7, #0]
 800b4c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b4c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	db0a      	blt.n	800b4e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	b2da      	uxtb	r2, r3
 800b4d4:	490c      	ldr	r1, [pc, #48]	; (800b508 <__NVIC_SetPriority+0x4c>)
 800b4d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4da:	0112      	lsls	r2, r2, #4
 800b4dc:	b2d2      	uxtb	r2, r2
 800b4de:	440b      	add	r3, r1
 800b4e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b4e4:	e00a      	b.n	800b4fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	b2da      	uxtb	r2, r3
 800b4ea:	4908      	ldr	r1, [pc, #32]	; (800b50c <__NVIC_SetPriority+0x50>)
 800b4ec:	79fb      	ldrb	r3, [r7, #7]
 800b4ee:	f003 030f 	and.w	r3, r3, #15
 800b4f2:	3b04      	subs	r3, #4
 800b4f4:	0112      	lsls	r2, r2, #4
 800b4f6:	b2d2      	uxtb	r2, r2
 800b4f8:	440b      	add	r3, r1
 800b4fa:	761a      	strb	r2, [r3, #24]
}
 800b4fc:	bf00      	nop
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr
 800b508:	e000e100 	.word	0xe000e100
 800b50c:	e000ed00 	.word	0xe000ed00

0800b510 <NVIC_EncodePriority>:
{
 800b510:	b480      	push	{r7}
 800b512:	b089      	sub	sp, #36	; 0x24
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f003 0307 	and.w	r3, r3, #7
 800b522:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	f1c3 0307 	rsb	r3, r3, #7
 800b52a:	2b04      	cmp	r3, #4
 800b52c:	bf28      	it	cs
 800b52e:	2304      	movcs	r3, #4
 800b530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	3304      	adds	r3, #4
 800b536:	2b06      	cmp	r3, #6
 800b538:	d902      	bls.n	800b540 <NVIC_EncodePriority+0x30>
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	3b03      	subs	r3, #3
 800b53e:	e000      	b.n	800b542 <NVIC_EncodePriority+0x32>
 800b540:	2300      	movs	r3, #0
 800b542:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	fa02 f303 	lsl.w	r3, r2, r3
 800b54e:	43da      	mvns	r2, r3
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	401a      	ands	r2, r3
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b558:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	fa01 f303 	lsl.w	r3, r1, r3
 800b562:	43d9      	mvns	r1, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b568:	4313      	orrs	r3, r2
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3724      	adds	r7, #36	; 0x24
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
	...

0800b578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	3b01      	subs	r3, #1
 800b584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b588:	d301      	bcc.n	800b58e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b58a:	2301      	movs	r3, #1
 800b58c:	e00f      	b.n	800b5ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b58e:	4a0a      	ldr	r2, [pc, #40]	; (800b5b8 <SysTick_Config+0x40>)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	3b01      	subs	r3, #1
 800b594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b596:	210f      	movs	r1, #15
 800b598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b59c:	f7ff ff8e 	bl	800b4bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b5a0:	4b05      	ldr	r3, [pc, #20]	; (800b5b8 <SysTick_Config+0x40>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b5a6:	4b04      	ldr	r3, [pc, #16]	; (800b5b8 <SysTick_Config+0x40>)
 800b5a8:	2207      	movs	r2, #7
 800b5aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	e000e010 	.word	0xe000e010

0800b5bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7ff ff29 	bl	800b41c <__NVIC_SetPriorityGrouping>
}
 800b5ca:	bf00      	nop
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b086      	sub	sp, #24
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	4603      	mov	r3, r0
 800b5da:	60b9      	str	r1, [r7, #8]
 800b5dc:	607a      	str	r2, [r7, #4]
 800b5de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b5e4:	f7ff ff3e 	bl	800b464 <__NVIC_GetPriorityGrouping>
 800b5e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	68b9      	ldr	r1, [r7, #8]
 800b5ee:	6978      	ldr	r0, [r7, #20]
 800b5f0:	f7ff ff8e 	bl	800b510 <NVIC_EncodePriority>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5fa:	4611      	mov	r1, r2
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7ff ff5d 	bl	800b4bc <__NVIC_SetPriority>
}
 800b602:	bf00      	nop
 800b604:	3718      	adds	r7, #24
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b082      	sub	sp, #8
 800b60e:	af00      	add	r7, sp, #0
 800b610:	4603      	mov	r3, r0
 800b612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b618:	4618      	mov	r0, r3
 800b61a:	f7ff ff31 	bl	800b480 <__NVIC_EnableIRQ>
}
 800b61e:	bf00      	nop
 800b620:	3708      	adds	r7, #8
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b082      	sub	sp, #8
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f7ff ffa2 	bl	800b578 <SysTick_Config>
 800b634:	4603      	mov	r3, r0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3708      	adds	r7, #8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800b63e:	b580      	push	{r7, lr}
 800b640:	b082      	sub	sp, #8
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d101      	bne.n	800b650 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800b64c:	2301      	movs	r3, #1
 800b64e:	e014      	b.n	800b67a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	791b      	ldrb	r3, [r3, #4]
 800b654:	b2db      	uxtb	r3, r3
 800b656:	2b00      	cmp	r3, #0
 800b658:	d105      	bne.n	800b666 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f7ff f8db 	bl	800a81c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2202      	movs	r2, #2
 800b66a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2201      	movs	r2, #1
 800b676:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b082      	sub	sp, #8
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b698:	d118      	bne.n	800b6cc <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2204      	movs	r2, #4
 800b69e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	f043 0201 	orr.w	r2, r3, #1
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b6b4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b6c4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 f825 	bl	800b716 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6da:	d118      	bne.n	800b70e <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2204      	movs	r2, #4
 800b6e0:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	691b      	ldr	r3, [r3, #16]
 800b6e6:	f043 0202 	orr.w	r2, r3, #2
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800b6f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b706:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f880 	bl	800b80e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 800b70e:	bf00      	nop
 800b710:	3708      	adds	r7, #8
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b716:	b480      	push	{r7}
 800b718:	b083      	sub	sp, #12
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800b71e:	bf00      	nop
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr

0800b72a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800b72a:	b480      	push	{r7}
 800b72c:	b087      	sub	sp, #28
 800b72e:	af00      	add	r7, sp, #0
 800b730:	60f8      	str	r0, [r7, #12]
 800b732:	60b9      	str	r1, [r7, #8]
 800b734:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800b736:	2300      	movs	r3, #0
 800b738:	617b      	str	r3, [r7, #20]
 800b73a:	2300      	movs	r3, #0
 800b73c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	795b      	ldrb	r3, [r3, #5]
 800b742:	2b01      	cmp	r3, #1
 800b744:	d101      	bne.n	800b74a <HAL_DAC_ConfigChannel+0x20>
 800b746:	2302      	movs	r3, #2
 800b748:	e036      	b.n	800b7b8 <HAL_DAC_ConfigChannel+0x8e>
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2201      	movs	r2, #1
 800b74e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2202      	movs	r2, #2
 800b754:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800b75e:	f640 72fe 	movw	r2, #4094	; 0xffe
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	fa02 f303 	lsl.w	r3, r2, r3
 800b768:	43db      	mvns	r3, r3
 800b76a:	697a      	ldr	r2, [r7, #20]
 800b76c:	4013      	ands	r3, r2
 800b76e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	4313      	orrs	r3, r2
 800b77a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800b77c:	693a      	ldr	r2, [r7, #16]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	fa02 f303 	lsl.w	r3, r2, r3
 800b784:	697a      	ldr	r2, [r7, #20]
 800b786:	4313      	orrs	r3, r2
 800b788:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	697a      	ldr	r2, [r7, #20]
 800b790:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	6819      	ldr	r1, [r3, #0]
 800b798:	22c0      	movs	r2, #192	; 0xc0
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	fa02 f303 	lsl.w	r3, r2, r3
 800b7a0:	43da      	mvns	r2, r3
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	400a      	ands	r2, r1
 800b7a8:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	371c      	adds	r7, #28
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 800b7c4:	b480      	push	{r7}
 800b7c6:	b087      	sub	sp, #28
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]
 800b7d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d105      	bne.n	800b7ee <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800b7e2:	697a      	ldr	r2, [r7, #20]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	3308      	adds	r3, #8
 800b7ea:	617b      	str	r3, [r7, #20]
 800b7ec:	e004      	b.n	800b7f8 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800b7ee:	697a      	ldr	r2, [r7, #20]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	3314      	adds	r3, #20
 800b7f6:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	371c      	adds	r7, #28
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr

0800b80e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b80e:	b480      	push	{r7}
 800b810:	b083      	sub	sp, #12
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800b816:	bf00      	nop
 800b818:	370c      	adds	r7, #12
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr
	...

0800b824 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b086      	sub	sp, #24
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b82c:	2300      	movs	r3, #0
 800b82e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b830:	f7ff fdc6 	bl	800b3c0 <HAL_GetTick>
 800b834:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d101      	bne.n	800b840 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	e099      	b.n	800b974 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2202      	movs	r2, #2
 800b84c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f022 0201 	bic.w	r2, r2, #1
 800b85e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b860:	e00f      	b.n	800b882 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b862:	f7ff fdad 	bl	800b3c0 <HAL_GetTick>
 800b866:	4602      	mov	r2, r0
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	1ad3      	subs	r3, r2, r3
 800b86c:	2b05      	cmp	r3, #5
 800b86e:	d908      	bls.n	800b882 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2220      	movs	r2, #32
 800b874:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2203      	movs	r2, #3
 800b87a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b87e:	2303      	movs	r3, #3
 800b880:	e078      	b.n	800b974 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f003 0301 	and.w	r3, r3, #1
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d1e8      	bne.n	800b862 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b898:	697a      	ldr	r2, [r7, #20]
 800b89a:	4b38      	ldr	r3, [pc, #224]	; (800b97c <HAL_DMA_Init+0x158>)
 800b89c:	4013      	ands	r3, r2
 800b89e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	685a      	ldr	r2, [r3, #4]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b8ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	691b      	ldr	r3, [r3, #16]
 800b8b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b8ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	699b      	ldr	r3, [r3, #24]
 800b8c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b8c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6a1b      	ldr	r3, [r3, #32]
 800b8cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b8ce:	697a      	ldr	r2, [r7, #20]
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d8:	2b04      	cmp	r3, #4
 800b8da:	d107      	bne.n	800b8ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	697a      	ldr	r2, [r7, #20]
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	697a      	ldr	r2, [r7, #20]
 800b8f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	695b      	ldr	r3, [r3, #20]
 800b8fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	f023 0307 	bic.w	r3, r3, #7
 800b902:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b908:	697a      	ldr	r2, [r7, #20]
 800b90a:	4313      	orrs	r3, r2
 800b90c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b912:	2b04      	cmp	r3, #4
 800b914:	d117      	bne.n	800b946 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00e      	beq.n	800b946 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 fb15 	bl	800bf58 <DMA_CheckFifoParam>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d008      	beq.n	800b946 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2240      	movs	r2, #64	; 0x40
 800b938:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2201      	movs	r2, #1
 800b93e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b942:	2301      	movs	r3, #1
 800b944:	e016      	b.n	800b974 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	697a      	ldr	r2, [r7, #20]
 800b94c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 facc 	bl	800beec <DMA_CalcBaseAndBitshift>
 800b954:	4603      	mov	r3, r0
 800b956:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b95c:	223f      	movs	r2, #63	; 0x3f
 800b95e:	409a      	lsls	r2, r3
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2201      	movs	r2, #1
 800b96e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b972:	2300      	movs	r3, #0
}
 800b974:	4618      	mov	r0, r3
 800b976:	3718      	adds	r7, #24
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	e010803f 	.word	0xe010803f

0800b980 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b086      	sub	sp, #24
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
 800b98c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b98e:	2300      	movs	r3, #0
 800b990:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b996:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d101      	bne.n	800b9a6 <HAL_DMA_Start_IT+0x26>
 800b9a2:	2302      	movs	r3, #2
 800b9a4:	e048      	b.n	800ba38 <HAL_DMA_Start_IT+0xb8>
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d137      	bne.n	800ba2a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2202      	movs	r2, #2
 800b9be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	68b9      	ldr	r1, [r7, #8]
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f000 fa5e 	bl	800be90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9d8:	223f      	movs	r2, #63	; 0x3f
 800b9da:	409a      	lsls	r2, r3
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f042 0216 	orr.w	r2, r2, #22
 800b9ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	695a      	ldr	r2, [r3, #20]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b9fe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d007      	beq.n	800ba18 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f042 0208 	orr.w	r2, r2, #8
 800ba16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f042 0201 	orr.w	r2, r2, #1
 800ba26:	601a      	str	r2, [r3, #0]
 800ba28:	e005      	b.n	800ba36 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ba32:	2302      	movs	r3, #2
 800ba34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ba36:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3718      	adds	r7, #24
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800ba4e:	f7ff fcb7 	bl	800b3c0 <HAL_GetTick>
 800ba52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	2b02      	cmp	r3, #2
 800ba5e:	d008      	beq.n	800ba72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2280      	movs	r2, #128	; 0x80
 800ba64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e052      	b.n	800bb18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f022 0216 	bic.w	r2, r2, #22
 800ba80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	695a      	ldr	r2, [r3, #20]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d103      	bne.n	800baa2 <HAL_DMA_Abort+0x62>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d007      	beq.n	800bab2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f022 0208 	bic.w	r2, r2, #8
 800bab0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f022 0201 	bic.w	r2, r2, #1
 800bac0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bac2:	e013      	b.n	800baec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bac4:	f7ff fc7c 	bl	800b3c0 <HAL_GetTick>
 800bac8:	4602      	mov	r2, r0
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	1ad3      	subs	r3, r2, r3
 800bace:	2b05      	cmp	r3, #5
 800bad0:	d90c      	bls.n	800baec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2220      	movs	r2, #32
 800bad6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2203      	movs	r2, #3
 800bae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800bae8:	2303      	movs	r3, #3
 800baea:	e015      	b.n	800bb18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f003 0301 	and.w	r3, r3, #1
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1e4      	bne.n	800bac4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bafe:	223f      	movs	r2, #63	; 0x3f
 800bb00:	409a      	lsls	r2, r3
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2201      	movs	r2, #1
 800bb12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800bb16:	2300      	movs	r3, #0
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3710      	adds	r7, #16
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	2b02      	cmp	r3, #2
 800bb32:	d004      	beq.n	800bb3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2280      	movs	r2, #128	; 0x80
 800bb38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e00c      	b.n	800bb58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2205      	movs	r2, #5
 800bb42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f022 0201 	bic.w	r2, r2, #1
 800bb54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	370c      	adds	r7, #12
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr

0800bb64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800bb70:	4b92      	ldr	r3, [pc, #584]	; (800bdbc <HAL_DMA_IRQHandler+0x258>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a92      	ldr	r2, [pc, #584]	; (800bdc0 <HAL_DMA_IRQHandler+0x25c>)
 800bb76:	fba2 2303 	umull	r2, r3, r2, r3
 800bb7a:	0a9b      	lsrs	r3, r3, #10
 800bb7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb8e:	2208      	movs	r2, #8
 800bb90:	409a      	lsls	r2, r3
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	4013      	ands	r3, r2
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d01a      	beq.n	800bbd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f003 0304 	and.w	r3, r3, #4
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d013      	beq.n	800bbd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f022 0204 	bic.w	r2, r2, #4
 800bbb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbbc:	2208      	movs	r2, #8
 800bbbe:	409a      	lsls	r2, r3
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbc8:	f043 0201 	orr.w	r2, r3, #1
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	409a      	lsls	r2, r3
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	4013      	ands	r3, r2
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d012      	beq.n	800bc06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	695b      	ldr	r3, [r3, #20]
 800bbe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00b      	beq.n	800bc06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	409a      	lsls	r2, r3
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbfe:	f043 0202 	orr.w	r2, r3, #2
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc0a:	2204      	movs	r2, #4
 800bc0c:	409a      	lsls	r2, r3
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	4013      	ands	r3, r2
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d012      	beq.n	800bc3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f003 0302 	and.w	r3, r3, #2
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00b      	beq.n	800bc3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc28:	2204      	movs	r2, #4
 800bc2a:	409a      	lsls	r2, r3
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc34:	f043 0204 	orr.w	r2, r3, #4
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc40:	2210      	movs	r2, #16
 800bc42:	409a      	lsls	r2, r3
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	4013      	ands	r3, r2
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d043      	beq.n	800bcd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f003 0308 	and.w	r3, r3, #8
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d03c      	beq.n	800bcd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc5e:	2210      	movs	r2, #16
 800bc60:	409a      	lsls	r2, r3
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d018      	beq.n	800bca6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d108      	bne.n	800bc94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d024      	beq.n	800bcd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	4798      	blx	r3
 800bc92:	e01f      	b.n	800bcd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d01b      	beq.n	800bcd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	4798      	blx	r3
 800bca4:	e016      	b.n	800bcd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d107      	bne.n	800bcc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f022 0208 	bic.w	r2, r2, #8
 800bcc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d003      	beq.n	800bcd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcd8:	2220      	movs	r2, #32
 800bcda:	409a      	lsls	r2, r3
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	4013      	ands	r3, r2
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f000 808e 	beq.w	800be02 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f003 0310 	and.w	r3, r3, #16
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	f000 8086 	beq.w	800be02 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcfa:	2220      	movs	r2, #32
 800bcfc:	409a      	lsls	r2, r3
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	2b05      	cmp	r3, #5
 800bd0c:	d136      	bne.n	800bd7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f022 0216 	bic.w	r2, r2, #22
 800bd1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	695a      	ldr	r2, [r3, #20]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d103      	bne.n	800bd3e <HAL_DMA_IRQHandler+0x1da>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d007      	beq.n	800bd4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f022 0208 	bic.w	r2, r2, #8
 800bd4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd52:	223f      	movs	r2, #63	; 0x3f
 800bd54:	409a      	lsls	r2, r3
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2201      	movs	r2, #1
 800bd66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d07d      	beq.n	800be6e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	4798      	blx	r3
        }
        return;
 800bd7a:	e078      	b.n	800be6e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d01c      	beq.n	800bdc4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d108      	bne.n	800bdaa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d030      	beq.n	800be02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	4798      	blx	r3
 800bda8:	e02b      	b.n	800be02 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d027      	beq.n	800be02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	4798      	blx	r3
 800bdba:	e022      	b.n	800be02 <HAL_DMA_IRQHandler+0x29e>
 800bdbc:	20000040 	.word	0x20000040
 800bdc0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d10f      	bne.n	800bdf2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f022 0210 	bic.w	r2, r2, #16
 800bde0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2201      	movs	r2, #1
 800bdee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d003      	beq.n	800be02 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be06:	2b00      	cmp	r3, #0
 800be08:	d032      	beq.n	800be70 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be0e:	f003 0301 	and.w	r3, r3, #1
 800be12:	2b00      	cmp	r3, #0
 800be14:	d022      	beq.n	800be5c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2205      	movs	r2, #5
 800be1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f022 0201 	bic.w	r2, r2, #1
 800be2c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	3301      	adds	r3, #1
 800be32:	60bb      	str	r3, [r7, #8]
 800be34:	697a      	ldr	r2, [r7, #20]
 800be36:	429a      	cmp	r2, r3
 800be38:	d307      	bcc.n	800be4a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f003 0301 	and.w	r3, r3, #1
 800be44:	2b00      	cmp	r3, #0
 800be46:	d1f2      	bne.n	800be2e <HAL_DMA_IRQHandler+0x2ca>
 800be48:	e000      	b.n	800be4c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800be4a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2200      	movs	r2, #0
 800be50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2201      	movs	r2, #1
 800be58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be60:	2b00      	cmp	r3, #0
 800be62:	d005      	beq.n	800be70 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	4798      	blx	r3
 800be6c:	e000      	b.n	800be70 <HAL_DMA_IRQHandler+0x30c>
        return;
 800be6e:	bf00      	nop
    }
  }
}
 800be70:	3718      	adds	r7, #24
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop

0800be78 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800be84:	4618      	mov	r0, r3
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800be90:	b480      	push	{r7}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	607a      	str	r2, [r7, #4]
 800be9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800beac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	683a      	ldr	r2, [r7, #0]
 800beb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	2b40      	cmp	r3, #64	; 0x40
 800bebc:	d108      	bne.n	800bed0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	68ba      	ldr	r2, [r7, #8]
 800becc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bece:	e007      	b.n	800bee0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	60da      	str	r2, [r3, #12]
}
 800bee0:	bf00      	nop
 800bee2:	3714      	adds	r7, #20
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800beec:	b480      	push	{r7}
 800beee:	b085      	sub	sp, #20
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	3b10      	subs	r3, #16
 800befc:	4a13      	ldr	r2, [pc, #76]	; (800bf4c <DMA_CalcBaseAndBitshift+0x60>)
 800befe:	fba2 2303 	umull	r2, r3, r2, r3
 800bf02:	091b      	lsrs	r3, r3, #4
 800bf04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bf06:	4a12      	ldr	r2, [pc, #72]	; (800bf50 <DMA_CalcBaseAndBitshift+0x64>)
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	461a      	mov	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2b03      	cmp	r3, #3
 800bf18:	d908      	bls.n	800bf2c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	4b0c      	ldr	r3, [pc, #48]	; (800bf54 <DMA_CalcBaseAndBitshift+0x68>)
 800bf22:	4013      	ands	r3, r2
 800bf24:	1d1a      	adds	r2, r3, #4
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	659a      	str	r2, [r3, #88]	; 0x58
 800bf2a:	e006      	b.n	800bf3a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	461a      	mov	r2, r3
 800bf32:	4b08      	ldr	r3, [pc, #32]	; (800bf54 <DMA_CalcBaseAndBitshift+0x68>)
 800bf34:	4013      	ands	r3, r2
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3714      	adds	r7, #20
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr
 800bf4a:	bf00      	nop
 800bf4c:	aaaaaaab 	.word	0xaaaaaaab
 800bf50:	08024618 	.word	0x08024618
 800bf54:	fffffc00 	.word	0xfffffc00

0800bf58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf60:	2300      	movs	r3, #0
 800bf62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	699b      	ldr	r3, [r3, #24]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d11f      	bne.n	800bfb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	2b03      	cmp	r3, #3
 800bf76:	d855      	bhi.n	800c024 <DMA_CheckFifoParam+0xcc>
 800bf78:	a201      	add	r2, pc, #4	; (adr r2, 800bf80 <DMA_CheckFifoParam+0x28>)
 800bf7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf7e:	bf00      	nop
 800bf80:	0800bf91 	.word	0x0800bf91
 800bf84:	0800bfa3 	.word	0x0800bfa3
 800bf88:	0800bf91 	.word	0x0800bf91
 800bf8c:	0800c025 	.word	0x0800c025
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d045      	beq.n	800c028 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bfa0:	e042      	b.n	800c028 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bfaa:	d13f      	bne.n	800c02c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800bfac:	2301      	movs	r3, #1
 800bfae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bfb0:	e03c      	b.n	800c02c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	699b      	ldr	r3, [r3, #24]
 800bfb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfba:	d121      	bne.n	800c000 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	2b03      	cmp	r3, #3
 800bfc0:	d836      	bhi.n	800c030 <DMA_CheckFifoParam+0xd8>
 800bfc2:	a201      	add	r2, pc, #4	; (adr r2, 800bfc8 <DMA_CheckFifoParam+0x70>)
 800bfc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc8:	0800bfd9 	.word	0x0800bfd9
 800bfcc:	0800bfdf 	.word	0x0800bfdf
 800bfd0:	0800bfd9 	.word	0x0800bfd9
 800bfd4:	0800bff1 	.word	0x0800bff1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	73fb      	strb	r3, [r7, #15]
      break;
 800bfdc:	e02f      	b.n	800c03e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d024      	beq.n	800c034 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bfee:	e021      	b.n	800c034 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bff8:	d11e      	bne.n	800c038 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800bffa:	2301      	movs	r3, #1
 800bffc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bffe:	e01b      	b.n	800c038 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	2b02      	cmp	r3, #2
 800c004:	d902      	bls.n	800c00c <DMA_CheckFifoParam+0xb4>
 800c006:	2b03      	cmp	r3, #3
 800c008:	d003      	beq.n	800c012 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c00a:	e018      	b.n	800c03e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800c00c:	2301      	movs	r3, #1
 800c00e:	73fb      	strb	r3, [r7, #15]
      break;
 800c010:	e015      	b.n	800c03e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c016:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00e      	beq.n	800c03c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800c01e:	2301      	movs	r3, #1
 800c020:	73fb      	strb	r3, [r7, #15]
      break;
 800c022:	e00b      	b.n	800c03c <DMA_CheckFifoParam+0xe4>
      break;
 800c024:	bf00      	nop
 800c026:	e00a      	b.n	800c03e <DMA_CheckFifoParam+0xe6>
      break;
 800c028:	bf00      	nop
 800c02a:	e008      	b.n	800c03e <DMA_CheckFifoParam+0xe6>
      break;
 800c02c:	bf00      	nop
 800c02e:	e006      	b.n	800c03e <DMA_CheckFifoParam+0xe6>
      break;
 800c030:	bf00      	nop
 800c032:	e004      	b.n	800c03e <DMA_CheckFifoParam+0xe6>
      break;
 800c034:	bf00      	nop
 800c036:	e002      	b.n	800c03e <DMA_CheckFifoParam+0xe6>
      break;   
 800c038:	bf00      	nop
 800c03a:	e000      	b.n	800c03e <DMA_CheckFifoParam+0xe6>
      break;
 800c03c:	bf00      	nop
    }
  } 
  
  return status; 
 800c03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c040:	4618      	mov	r0, r3
 800c042:	3714      	adds	r7, #20
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b088      	sub	sp, #32
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800c054:	2300      	movs	r3, #0
 800c056:	61fb      	str	r3, [r7, #28]
 800c058:	2300      	movs	r3, #0
 800c05a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800c05c:	4ba9      	ldr	r3, [pc, #676]	; (800c304 <HAL_ETH_Init+0x2b8>)
 800c05e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 800c060:	2300      	movs	r3, #0
 800c062:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800c064:	2300      	movs	r3, #0
 800c066:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d101      	bne.n	800c072 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800c06e:	2301      	movs	r3, #1
 800c070:	e183      	b.n	800c37a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d106      	bne.n	800c08c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f005 f924 	bl	80112d4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c08c:	4b9e      	ldr	r3, [pc, #632]	; (800c308 <HAL_ETH_Init+0x2bc>)
 800c08e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c090:	4a9d      	ldr	r2, [pc, #628]	; (800c308 <HAL_ETH_Init+0x2bc>)
 800c092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c096:	6453      	str	r3, [r2, #68]	; 0x44
 800c098:	4b9b      	ldr	r3, [pc, #620]	; (800c308 <HAL_ETH_Init+0x2bc>)
 800c09a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c09c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0a0:	60bb      	str	r3, [r7, #8]
 800c0a2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800c0a4:	4b99      	ldr	r3, [pc, #612]	; (800c30c <HAL_ETH_Init+0x2c0>)
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	4a98      	ldr	r2, [pc, #608]	; (800c30c <HAL_ETH_Init+0x2c0>)
 800c0aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c0ae:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800c0b0:	4b96      	ldr	r3, [pc, #600]	; (800c30c <HAL_ETH_Init+0x2c0>)
 800c0b2:	685a      	ldr	r2, [r3, #4]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6a1b      	ldr	r3, [r3, #32]
 800c0b8:	4994      	ldr	r1, [pc, #592]	; (800c30c <HAL_ETH_Init+0x2c0>)
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f042 0201 	orr.w	r2, r2, #1
 800c0d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0d4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800c0d6:	f7ff f973 	bl	800b3c0 <HAL_GetTick>
 800c0da:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800c0dc:	e011      	b.n	800c102 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800c0de:	f7ff f96f 	bl	800b3c0 <HAL_GetTick>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	1ad3      	subs	r3, r2, r3
 800c0e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c0ec:	d909      	bls.n	800c102 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2203      	movs	r2, #3
 800c0f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800c0fe:	2303      	movs	r3, #3
 800c100:	e13b      	b.n	800c37a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f003 0301 	and.w	r3, r3, #1
 800c110:	2b00      	cmp	r3, #0
 800c112:	d1e4      	bne.n	800c0de <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	691b      	ldr	r3, [r3, #16]
 800c11a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	f023 031c 	bic.w	r3, r3, #28
 800c122:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800c124:	f002 f910 	bl	800e348 <HAL_RCC_GetHCLKFreq>
 800c128:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	4a78      	ldr	r2, [pc, #480]	; (800c310 <HAL_ETH_Init+0x2c4>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d908      	bls.n	800c144 <HAL_ETH_Init+0xf8>
 800c132:	69bb      	ldr	r3, [r7, #24]
 800c134:	4a77      	ldr	r2, [pc, #476]	; (800c314 <HAL_ETH_Init+0x2c8>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d804      	bhi.n	800c144 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	f043 0308 	orr.w	r3, r3, #8
 800c140:	61fb      	str	r3, [r7, #28]
 800c142:	e027      	b.n	800c194 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	4a73      	ldr	r2, [pc, #460]	; (800c314 <HAL_ETH_Init+0x2c8>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d908      	bls.n	800c15e <HAL_ETH_Init+0x112>
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	4a72      	ldr	r2, [pc, #456]	; (800c318 <HAL_ETH_Init+0x2cc>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d804      	bhi.n	800c15e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800c154:	69fb      	ldr	r3, [r7, #28]
 800c156:	f043 030c 	orr.w	r3, r3, #12
 800c15a:	61fb      	str	r3, [r7, #28]
 800c15c:	e01a      	b.n	800c194 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	4a6d      	ldr	r2, [pc, #436]	; (800c318 <HAL_ETH_Init+0x2cc>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d903      	bls.n	800c16e <HAL_ETH_Init+0x122>
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	4a6c      	ldr	r2, [pc, #432]	; (800c31c <HAL_ETH_Init+0x2d0>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d911      	bls.n	800c192 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	4a6a      	ldr	r2, [pc, #424]	; (800c31c <HAL_ETH_Init+0x2d0>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d908      	bls.n	800c188 <HAL_ETH_Init+0x13c>
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	4a69      	ldr	r2, [pc, #420]	; (800c320 <HAL_ETH_Init+0x2d4>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d804      	bhi.n	800c188 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	f043 0304 	orr.w	r3, r3, #4
 800c184:	61fb      	str	r3, [r7, #28]
 800c186:	e005      	b.n	800c194 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	f043 0310 	orr.w	r3, r3, #16
 800c18e:	61fb      	str	r3, [r7, #28]
 800c190:	e000      	b.n	800c194 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800c192:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	69fa      	ldr	r2, [r7, #28]
 800c19a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800c19c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c1a0:	2100      	movs	r1, #0
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 fc19 	bl	800c9da <HAL_ETH_WritePHYRegister>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00b      	beq.n	800c1c6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800c1b2:	6939      	ldr	r1, [r7, #16]
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 fdcf 	bl	800cd58 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2201      	movs	r2, #1
 800c1be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e0d9      	b.n	800c37a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800c1c6:	20ff      	movs	r0, #255	; 0xff
 800c1c8:	f7ff f906 	bl	800b3d8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f000 80a7 	beq.w	800c324 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800c1d6:	f7ff f8f3 	bl	800b3c0 <HAL_GetTick>
 800c1da:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800c1dc:	f107 030c 	add.w	r3, r7, #12
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	2101      	movs	r1, #1
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 fb90 	bl	800c90a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800c1ea:	f7ff f8e9 	bl	800b3c0 <HAL_GetTick>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d90f      	bls.n	800c21c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800c200:	6939      	ldr	r1, [r7, #16]
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 fda8 	bl	800cd58 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2201      	movs	r2, #1
 800c20c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2200      	movs	r2, #0
 800c214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800c218:	2303      	movs	r3, #3
 800c21a:	e0ae      	b.n	800c37a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f003 0304 	and.w	r3, r3, #4
 800c222:	2b00      	cmp	r3, #0
 800c224:	d0da      	beq.n	800c1dc <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800c226:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c22a:	2100      	movs	r1, #0
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 fbd4 	bl	800c9da <HAL_ETH_WritePHYRegister>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d00b      	beq.n	800c250 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800c238:	2301      	movs	r3, #1
 800c23a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800c23c:	6939      	ldr	r1, [r7, #16]
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 fd8a 	bl	800cd58 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2201      	movs	r2, #1
 800c248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800c24c:	2301      	movs	r3, #1
 800c24e:	e094      	b.n	800c37a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800c250:	f7ff f8b6 	bl	800b3c0 <HAL_GetTick>
 800c254:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800c256:	f107 030c 	add.w	r3, r7, #12
 800c25a:	461a      	mov	r2, r3
 800c25c:	2101      	movs	r1, #1
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 fb53 	bl	800c90a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800c264:	f7ff f8ac 	bl	800b3c0 <HAL_GetTick>
 800c268:	4602      	mov	r2, r0
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	1ad3      	subs	r3, r2, r3
 800c26e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c272:	4293      	cmp	r3, r2
 800c274:	d90f      	bls.n	800c296 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800c276:	2301      	movs	r3, #1
 800c278:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800c27a:	6939      	ldr	r1, [r7, #16]
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 fd6b 	bl	800cd58 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2201      	movs	r2, #1
 800c286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2200      	movs	r2, #0
 800c28e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800c292:	2303      	movs	r3, #3
 800c294:	e071      	b.n	800c37a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f003 0320 	and.w	r3, r3, #32
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d0da      	beq.n	800c256 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800c2a0:	f107 030c 	add.w	r3, r7, #12
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	211f      	movs	r1, #31
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 fb2e 	bl	800c90a <HAL_ETH_ReadPHYRegister>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d00b      	beq.n	800c2cc <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800c2b8:	6939      	ldr	r1, [r7, #16]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 fd4c 	bl	800cd58 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e056      	b.n	800c37a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f003 0310 	and.w	r3, r3, #16
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d004      	beq.n	800c2e0 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c2dc:	60da      	str	r2, [r3, #12]
 800c2de:	e002      	b.n	800c2e6 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f003 0304 	and.w	r3, r3, #4
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d003      	beq.n	800c2f8 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	609a      	str	r2, [r3, #8]
 800c2f6:	e037      	b.n	800c368 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c2fe:	609a      	str	r2, [r3, #8]
 800c300:	e032      	b.n	800c368 <HAL_ETH_Init+0x31c>
 800c302:	bf00      	nop
 800c304:	03938700 	.word	0x03938700
 800c308:	40023800 	.word	0x40023800
 800c30c:	40013800 	.word	0x40013800
 800c310:	01312cff 	.word	0x01312cff
 800c314:	02160ebf 	.word	0x02160ebf
 800c318:	039386ff 	.word	0x039386ff
 800c31c:	05f5e0ff 	.word	0x05f5e0ff
 800c320:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	08db      	lsrs	r3, r3, #3
 800c32a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	689b      	ldr	r3, [r3, #8]
 800c330:	085b      	lsrs	r3, r3, #1
 800c332:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800c334:	4313      	orrs	r3, r2
 800c336:	b29b      	uxth	r3, r3
 800c338:	461a      	mov	r2, r3
 800c33a:	2100      	movs	r1, #0
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 fb4c 	bl	800c9da <HAL_ETH_WritePHYRegister>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00b      	beq.n	800c360 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800c348:	2301      	movs	r3, #1
 800c34a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800c34c:	6939      	ldr	r1, [r7, #16]
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 fd02 	bl	800cd58 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2201      	movs	r2, #1
 800c358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	e00c      	b.n	800c37a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800c360:	f640 70ff 	movw	r0, #4095	; 0xfff
 800c364:	f7ff f838 	bl	800b3d8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800c368:	6939      	ldr	r1, [r7, #16]
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 fcf4 	bl	800cd58 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2201      	movs	r2, #1
 800c374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3720      	adds	r7, #32
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop

0800c384 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800c384:	b480      	push	{r7}
 800c386:	b087      	sub	sp, #28
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]
 800c390:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800c392:	2300      	movs	r3, #0
 800c394:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d101      	bne.n	800c3a4 <HAL_ETH_DMATxDescListInit+0x20>
 800c3a0:	2302      	movs	r3, #2
 800c3a2:	e052      	b.n	800c44a <HAL_ETH_DMATxDescListInit+0xc6>
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2202      	movs	r2, #2
 800c3b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	68ba      	ldr	r2, [r7, #8]
 800c3b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	617b      	str	r3, [r7, #20]
 800c3be:	e030      	b.n	800c422 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	015b      	lsls	r3, r3, #5
 800c3c4:	68ba      	ldr	r2, [r7, #8]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c3d0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800c3d8:	fb02 f303 	mul.w	r3, r2, r3
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	4413      	add	r3, r2
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	69db      	ldr	r3, [r3, #28]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d105      	bne.n	800c3fa <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	697a      	ldr	r2, [r7, #20]
 800c400:	429a      	cmp	r2, r3
 800c402:	d208      	bcs.n	800c416 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	3301      	adds	r3, #1
 800c408:	015b      	lsls	r3, r3, #5
 800c40a:	68ba      	ldr	r2, [r7, #8]
 800c40c:	4413      	add	r3, r2
 800c40e:	461a      	mov	r2, r3
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	60da      	str	r2, [r3, #12]
 800c414:	e002      	b.n	800c41c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800c416:	68ba      	ldr	r2, [r7, #8]
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	3301      	adds	r3, #1
 800c420:	617b      	str	r3, [r7, #20]
 800c422:	697a      	ldr	r2, [r7, #20]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	429a      	cmp	r2, r3
 800c428:	d3ca      	bcc.n	800c3c0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	6819      	ldr	r1, [r3, #0]
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	f241 0310 	movw	r3, #4112	; 0x1010
 800c434:	440b      	add	r3, r1
 800c436:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2200      	movs	r2, #0
 800c444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	371c      	adds	r7, #28
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr

0800c456 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800c456:	b480      	push	{r7}
 800c458:	b087      	sub	sp, #28
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	60f8      	str	r0, [r7, #12]
 800c45e:	60b9      	str	r1, [r7, #8]
 800c460:	607a      	str	r2, [r7, #4]
 800c462:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800c464:	2300      	movs	r3, #0
 800c466:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d101      	bne.n	800c476 <HAL_ETH_DMARxDescListInit+0x20>
 800c472:	2302      	movs	r3, #2
 800c474:	e056      	b.n	800c524 <HAL_ETH_DMARxDescListInit+0xce>
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2201      	movs	r2, #1
 800c47a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2202      	movs	r2, #2
 800c482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	68ba      	ldr	r2, [r7, #8]
 800c48a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800c48c:	2300      	movs	r3, #0
 800c48e:	617b      	str	r3, [r7, #20]
 800c490:	e034      	b.n	800c4fc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	015b      	lsls	r3, r3, #5
 800c496:	68ba      	ldr	r2, [r7, #8]
 800c498:	4413      	add	r3, r2
 800c49a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c4a2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800c4aa:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800c4b2:	fb02 f303 	mul.w	r3, r2, r3
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	699b      	ldr	r3, [r3, #24]
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d105      	bne.n	800c4d4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	3b01      	subs	r3, #1
 800c4d8:	697a      	ldr	r2, [r7, #20]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d208      	bcs.n	800c4f0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	015b      	lsls	r3, r3, #5
 800c4e4:	68ba      	ldr	r2, [r7, #8]
 800c4e6:	4413      	add	r3, r2
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	60da      	str	r2, [r3, #12]
 800c4ee:	e002      	b.n	800c4f6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	617b      	str	r3, [r7, #20]
 800c4fc:	697a      	ldr	r2, [r7, #20]
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	429a      	cmp	r2, r3
 800c502:	d3c6      	bcc.n	800c492 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	6819      	ldr	r1, [r3, #0]
 800c508:	68ba      	ldr	r2, [r7, #8]
 800c50a:	f241 030c 	movw	r3, #4108	; 0x100c
 800c50e:	440b      	add	r3, r1
 800c510:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2201      	movs	r2, #1
 800c516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2200      	movs	r2, #0
 800c51e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800c522:	2300      	movs	r3, #0
}
 800c524:	4618      	mov	r0, r3
 800c526:	371c      	adds	r7, #28
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800c530:	b480      	push	{r7}
 800c532:	b087      	sub	sp, #28
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800c53a:	2300      	movs	r3, #0
 800c53c:	617b      	str	r3, [r7, #20]
 800c53e:	2300      	movs	r3, #0
 800c540:	60fb      	str	r3, [r7, #12]
 800c542:	2300      	movs	r3, #0
 800c544:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d101      	bne.n	800c554 <HAL_ETH_TransmitFrame+0x24>
 800c550:	2302      	movs	r3, #2
 800c552:	e0cd      	b.n	800c6f0 <HAL_ETH_TransmitFrame+0x1c0>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2201      	movs	r2, #1
 800c558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2202      	movs	r2, #2
 800c560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d109      	bne.n	800c57e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2201      	movs	r2, #1
 800c56e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800c57a:	2301      	movs	r3, #1
 800c57c:	e0b8      	b.n	800c6f0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2b00      	cmp	r3, #0
 800c586:	da09      	bge.n	800c59c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2212      	movs	r2, #18
 800c58c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	e0a9      	b.n	800c6f0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d915      	bls.n	800c5d2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	4a54      	ldr	r2, [pc, #336]	; (800c6fc <HAL_ETH_TransmitFrame+0x1cc>)
 800c5aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ae:	0a9b      	lsrs	r3, r3, #10
 800c5b0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800c5b2:	683a      	ldr	r2, [r7, #0]
 800c5b4:	4b51      	ldr	r3, [pc, #324]	; (800c6fc <HAL_ETH_TransmitFrame+0x1cc>)
 800c5b6:	fba3 1302 	umull	r1, r3, r3, r2
 800c5ba:	0a9b      	lsrs	r3, r3, #10
 800c5bc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800c5c0:	fb01 f303 	mul.w	r3, r1, r3
 800c5c4:	1ad3      	subs	r3, r2, r3
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d005      	beq.n	800c5d6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	617b      	str	r3, [r7, #20]
 800c5d0:	e001      	b.n	800c5d6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d11c      	bne.n	800c616 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800c5ea:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f0:	683a      	ldr	r2, [r7, #0]
 800c5f2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800c5f6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c602:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800c606:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	461a      	mov	r2, r3
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	62da      	str	r2, [r3, #44]	; 0x2c
 800c614:	e04b      	b.n	800c6ae <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800c616:	2300      	movs	r3, #0
 800c618:	613b      	str	r3, [r7, #16]
 800c61a:	e044      	b.n	800c6a6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c626:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c62a:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d107      	bne.n	800c642 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c63c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c640:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c646:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800c64a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	3b01      	subs	r3, #1
 800c650:	693a      	ldr	r2, [r7, #16]
 800c652:	429a      	cmp	r2, r3
 800c654:	d116      	bne.n	800c684 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c660:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800c664:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	4a25      	ldr	r2, [pc, #148]	; (800c700 <HAL_ETH_TransmitFrame+0x1d0>)
 800c66a:	fb02 f203 	mul.w	r2, r2, r3
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	4413      	add	r3, r2
 800c672:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800c676:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800c682:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c68e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800c692:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c698:	68db      	ldr	r3, [r3, #12]
 800c69a:	461a      	mov	r2, r3
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	613b      	str	r3, [r7, #16]
 800c6a6:	693a      	ldr	r2, [r7, #16]
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d3b6      	bcc.n	800c61c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	f241 0314 	movw	r3, #4116	; 0x1014
 800c6b6:	4413      	add	r3, r2
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f003 0304 	and.w	r3, r3, #4
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00d      	beq.n	800c6de <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	f241 0314 	movw	r3, #4116	; 0x1014
 800c6ca:	4413      	add	r3, r2
 800c6cc:	2204      	movs	r2, #4
 800c6ce:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	f241 0304 	movw	r3, #4100	; 0x1004
 800c6d8:	4413      	add	r3, r2
 800c6da:	2200      	movs	r2, #0
 800c6dc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800c6ee:	2300      	movs	r3, #0
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	371c      	adds	r7, #28
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr
 800c6fc:	ac02b00b 	.word	0xac02b00b
 800c700:	fffffa0c 	.word	0xfffffa0c

0800c704 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 800c70c:	2300      	movs	r3, #0
 800c70e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c716:	2b01      	cmp	r3, #1
 800c718:	d101      	bne.n	800c71e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800c71a:	2302      	movs	r3, #2
 800c71c:	e074      	b.n	800c808 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2201      	movs	r2, #1
 800c722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2202      	movs	r2, #2
 800c72a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800c72e:	e05a      	b.n	800c7e6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	3301      	adds	r3, #1
 800c734:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c744:	d10d      	bne.n	800c762 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2201      	movs	r2, #1
 800c752:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	461a      	mov	r2, r3
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	629a      	str	r2, [r3, #40]	; 0x28
 800c760:	e041      	b.n	800c7e6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d10b      	bne.n	800c788 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c774:	1c5a      	adds	r2, r3, #1
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c77e:	68db      	ldr	r3, [r3, #12]
 800c780:	461a      	mov	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	629a      	str	r2, [r3, #40]	; 0x28
 800c786:	e02e      	b.n	800c7e6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c794:	1c5a      	adds	r2, r3, #1
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d103      	bne.n	800c7aa <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	0c1b      	lsrs	r3, r3, #16
 800c7b2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c7b6:	1f1a      	subs	r2, r3, #4
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7c0:	689a      	ldr	r2, [r3, #8]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	e010      	b.n	800c808 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	db02      	blt.n	800c7f6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2b03      	cmp	r3, #3
 800c7f4:	d99c      	bls.n	800c730 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2200      	movs	r2, #0
 800c802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800c806:	2301      	movs	r3, #1
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3714      	adds	r7, #20
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr

0800c814 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681a      	ldr	r2, [r3, #0]
 800c820:	f241 0314 	movw	r3, #4116	; 0x1014
 800c824:	4413      	add	r3, r2
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c82c:	2b40      	cmp	r3, #64	; 0x40
 800c82e:	d112      	bne.n	800c856 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f004 fe0f 	bl	8011454 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	f241 0314 	movw	r3, #4116	; 0x1014
 800c83e:	4413      	add	r3, r2
 800c840:	2240      	movs	r2, #64	; 0x40
 800c842:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2201      	movs	r2, #1
 800c848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c854:	e01b      	b.n	800c88e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	f241 0314 	movw	r3, #4116	; 0x1014
 800c85e:	4413      	add	r3, r2
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f003 0301 	and.w	r3, r3, #1
 800c866:	2b01      	cmp	r3, #1
 800c868:	d111      	bne.n	800c88e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 f839 	bl	800c8e2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	f241 0314 	movw	r3, #4116	; 0x1014
 800c878:	4413      	add	r3, r2
 800c87a:	2201      	movs	r2, #1
 800c87c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2201      	movs	r2, #1
 800c882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2200      	movs	r2, #0
 800c88a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	f241 0314 	movw	r3, #4116	; 0x1014
 800c896:	4413      	add	r3, r2
 800c898:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c89c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	f241 0314 	movw	r3, #4116	; 0x1014
 800c8a6:	4413      	add	r3, r2
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c8ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c8b2:	d112      	bne.n	800c8da <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 f81e 	bl	800c8f6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	f241 0314 	movw	r3, #4116	; 0x1014
 800c8c2:	4413      	add	r3, r2
 800c8c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c8c8:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800c8da:	bf00      	nop
 800c8dc:	3708      	adds	r7, #8
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800c8e2:	b480      	push	{r7}
 800c8e4:	b083      	sub	sp, #12
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800c8ea:	bf00      	nop
 800c8ec:	370c      	adds	r7, #12
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f4:	4770      	bx	lr

0800c8f6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800c8f6:	b480      	push	{r7}
 800c8f8:	b083      	sub	sp, #12
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 800c8fe:	bf00      	nop
 800c900:	370c      	adds	r7, #12
 800c902:	46bd      	mov	sp, r7
 800c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c908:	4770      	bx	lr

0800c90a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b086      	sub	sp, #24
 800c90e:	af00      	add	r7, sp, #0
 800c910:	60f8      	str	r0, [r7, #12]
 800c912:	460b      	mov	r3, r1
 800c914:	607a      	str	r2, [r7, #4]
 800c916:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800c918:	2300      	movs	r3, #0
 800c91a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800c91c:	2300      	movs	r3, #0
 800c91e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c926:	b2db      	uxtb	r3, r3
 800c928:	2b82      	cmp	r3, #130	; 0x82
 800c92a:	d101      	bne.n	800c930 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800c92c:	2302      	movs	r3, #2
 800c92e:	e050      	b.n	800c9d2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2282      	movs	r2, #130	; 0x82
 800c934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	691b      	ldr	r3, [r3, #16]
 800c93e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	f003 031c 	and.w	r3, r3, #28
 800c946:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	8a1b      	ldrh	r3, [r3, #16]
 800c94c:	02db      	lsls	r3, r3, #11
 800c94e:	b29b      	uxth	r3, r3
 800c950:	697a      	ldr	r2, [r7, #20]
 800c952:	4313      	orrs	r3, r2
 800c954:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800c956:	897b      	ldrh	r3, [r7, #10]
 800c958:	019b      	lsls	r3, r3, #6
 800c95a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800c95e:	697a      	ldr	r2, [r7, #20]
 800c960:	4313      	orrs	r3, r2
 800c962:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	f023 0302 	bic.w	r3, r3, #2
 800c96a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	f043 0301 	orr.w	r3, r3, #1
 800c972:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	697a      	ldr	r2, [r7, #20]
 800c97a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800c97c:	f7fe fd20 	bl	800b3c0 <HAL_GetTick>
 800c980:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c982:	e015      	b.n	800c9b0 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800c984:	f7fe fd1c 	bl	800b3c0 <HAL_GetTick>
 800c988:	4602      	mov	r2, r0
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c992:	d309      	bcc.n	800c9a8 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	2201      	movs	r2, #1
 800c998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800c9a4:	2303      	movs	r3, #3
 800c9a6:	e014      	b.n	800c9d2 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	691b      	ldr	r3, [r3, #16]
 800c9ae:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	f003 0301 	and.w	r3, r3, #1
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d1e4      	bne.n	800c984 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	695b      	ldr	r3, [r3, #20]
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800c9d0:	2300      	movs	r3, #0
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3718      	adds	r7, #24
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b086      	sub	sp, #24
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	60f8      	str	r0, [r7, #12]
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	607a      	str	r2, [r7, #4]
 800c9e6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	2b42      	cmp	r3, #66	; 0x42
 800c9fa:	d101      	bne.n	800ca00 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800c9fc:	2302      	movs	r3, #2
 800c9fe:	e04e      	b.n	800ca9e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2242      	movs	r2, #66	; 0x42
 800ca04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	691b      	ldr	r3, [r3, #16]
 800ca0e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	f003 031c 	and.w	r3, r3, #28
 800ca16:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	8a1b      	ldrh	r3, [r3, #16]
 800ca1c:	02db      	lsls	r3, r3, #11
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	697a      	ldr	r2, [r7, #20]
 800ca22:	4313      	orrs	r3, r2
 800ca24:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800ca26:	897b      	ldrh	r3, [r7, #10]
 800ca28:	019b      	lsls	r3, r3, #6
 800ca2a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800ca2e:	697a      	ldr	r2, [r7, #20]
 800ca30:	4313      	orrs	r3, r2
 800ca32:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	f043 0302 	orr.w	r3, r3, #2
 800ca3a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	f043 0301 	orr.w	r3, r3, #1
 800ca42:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	b29a      	uxth	r2, r3
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	697a      	ldr	r2, [r7, #20]
 800ca54:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800ca56:	f7fe fcb3 	bl	800b3c0 <HAL_GetTick>
 800ca5a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800ca5c:	e015      	b.n	800ca8a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800ca5e:	f7fe fcaf 	bl	800b3c0 <HAL_GetTick>
 800ca62:	4602      	mov	r2, r0
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	1ad3      	subs	r3, r2, r3
 800ca68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca6c:	d309      	bcc.n	800ca82 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2201      	movs	r2, #1
 800ca72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800ca7e:	2303      	movs	r3, #3
 800ca80:	e00d      	b.n	800ca9e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	691b      	ldr	r3, [r3, #16]
 800ca88:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	f003 0301 	and.w	r3, r3, #1
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d1e4      	bne.n	800ca5e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2201      	movs	r2, #1
 800ca98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800ca9c:	2300      	movs	r3, #0
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3718      	adds	r7, #24
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b082      	sub	sp, #8
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d101      	bne.n	800cabc <HAL_ETH_Start+0x16>
 800cab8:	2302      	movs	r3, #2
 800caba:	e01f      	b.n	800cafc <HAL_ETH_Start+0x56>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2201      	movs	r2, #1
 800cac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2202      	movs	r2, #2
 800cac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 fb45 	bl	800d15c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 fb7c 	bl	800d1d0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 fc13 	bl	800d304 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 fbb0 	bl	800d244 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 fbdd 	bl	800d2a4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2201      	movs	r2, #1
 800caee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2200      	movs	r2, #0
 800caf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	d101      	bne.n	800cb1a <HAL_ETH_Stop+0x16>
 800cb16:	2302      	movs	r3, #2
 800cb18:	e01f      	b.n	800cb5a <HAL_ETH_Stop+0x56>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2202      	movs	r2, #2
 800cb26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 fba2 	bl	800d274 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 fbcf 	bl	800d2d4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 fb67 	bl	800d20a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 fbe1 	bl	800d304 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 fb27 	bl	800d196 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2200      	movs	r2, #0
 800cb54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3708      	adds	r7, #8
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
	...

0800cb64 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d101      	bne.n	800cb80 <HAL_ETH_ConfigMAC+0x1c>
 800cb7c:	2302      	movs	r3, #2
 800cb7e:	e0e4      	b.n	800cd4a <HAL_ETH_ConfigMAC+0x1e6>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2201      	movs	r2, #1
 800cb84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2202      	movs	r2, #2
 800cb8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	f000 80b1 	beq.w	800ccfa <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	4b6c      	ldr	r3, [pc, #432]	; (800cd54 <HAL_ETH_ConfigMAC+0x1f0>)
 800cba4:	4013      	ands	r3, r2
 800cba6:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800cbb0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800cbb6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800cbbc:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800cbc2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800cbc8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800cbce:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800cbd4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800cbda:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800cbe0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800cbe6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800cbec:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800cbf2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800cbf4:	68fa      	ldr	r2, [r7, #12]
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	68fa      	ldr	r2, [r7, #12]
 800cc00:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800cc0a:	2001      	movs	r0, #1
 800cc0c:	f7fe fbe4 	bl	800b3d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	68fa      	ldr	r2, [r7, #12]
 800cc16:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800cc20:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800cc26:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800cc2c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800cc32:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800cc38:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800cc3e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800cc4a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800cc4c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800cc56:	2001      	movs	r0, #1
 800cc58:	f7fe fbbe 	bl	800b3d8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	683a      	ldr	r2, [r7, #0]
 800cc6a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800cc6c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	683a      	ldr	r2, [r7, #0]
 800cc74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800cc76:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	699b      	ldr	r3, [r3, #24]
 800cc7e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	f64f 7341 	movw	r3, #65345	; 0xff41
 800cc86:	4013      	ands	r3, r2
 800cc88:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc8e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800cc94:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800cc9a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800cca0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800cca6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800ccac:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800ccae:	68fa      	ldr	r2, [r7, #12]
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	68fa      	ldr	r2, [r7, #12]
 800ccba:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	699b      	ldr	r3, [r3, #24]
 800ccc2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800ccc4:	2001      	movs	r0, #1
 800ccc6:	f7fe fb87 	bl	800b3d8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	68fa      	ldr	r2, [r7, #12]
 800ccd0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	430a      	orrs	r2, r1
 800cce0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	69db      	ldr	r3, [r3, #28]
 800cce8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800ccea:	2001      	movs	r0, #1
 800ccec:	f7fe fb74 	bl	800b3d8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	68fa      	ldr	r2, [r7, #12]
 800ccf6:	61da      	str	r2, [r3, #28]
 800ccf8:	e01e      	b.n	800cd38 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800cd08:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	689a      	ldr	r2, [r3, #8]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	4313      	orrs	r3, r2
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	4313      	orrs	r3, r2
 800cd18:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	68fa      	ldr	r2, [r7, #12]
 800cd20:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800cd2a:	2001      	movs	r0, #1
 800cd2c:	f7fe fb54 	bl	800b3d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	68fa      	ldr	r2, [r7, #12]
 800cd36:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800cd48:	2300      	movs	r3, #0
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3710      	adds	r7, #16
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	ff20810f 	.word	0xff20810f

0800cd58 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b0b0      	sub	sp, #192	; 0xc0
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800cd62:	2300      	movs	r3, #0
 800cd64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d007      	beq.n	800cd7e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd74:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800cd7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800cd82:	2300      	movs	r3, #0
 800cd84:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800cd86:	2300      	movs	r3, #0
 800cd88:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800cd92:	2300      	movs	r3, #0
 800cd94:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	69db      	ldr	r3, [r3, #28]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d103      	bne.n	800cda6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800cd9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cda2:	663b      	str	r3, [r7, #96]	; 0x60
 800cda4:	e001      	b.n	800cdaa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800cda6:	2300      	movs	r3, #0
 800cda8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800cdaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cdae:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800cdc4:	2340      	movs	r3, #64	; 0x40
 800cdc6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800cdda:	2300      	movs	r3, #0
 800cddc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800cde0:	2300      	movs	r3, #0
 800cde2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800cde6:	2300      	movs	r3, #0
 800cde8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800cdec:	2300      	movs	r3, #0
 800cdee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800cdf8:	2380      	movs	r3, #128	; 0x80
 800cdfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800ce04:	2300      	movs	r3, #0
 800ce06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800ce10:	2300      	movs	r3, #0
 800ce12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800ce16:	2300      	movs	r3, #0
 800ce18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800ce2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ce30:	4bab      	ldr	r3, [pc, #684]	; (800d0e0 <ETH_MACDMAConfig+0x388>)
 800ce32:	4013      	ands	r3, r2
 800ce34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800ce38:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800ce3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800ce3c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800ce3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800ce40:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800ce42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800ce44:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800ce4a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800ce4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800ce4e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800ce50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800ce52:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800ce58:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800ce5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800ce5c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800ce5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800ce60:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800ce62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800ce64:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800ce66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800ce68:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800ce6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800ce6c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800ce6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ce72:	4313      	orrs	r3, r2
 800ce74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ce80:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800ce8c:	2001      	movs	r0, #1
 800ce8e:	f7fe faa3 	bl	800b3d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ce9a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800ce9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800ce9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800cea0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800cea2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800cea4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800cea6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800ceaa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800ceac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800ceb0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800ceb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800ceb6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800ceb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800cebc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800cec0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800cec8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800ceca:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800ced6:	2001      	movs	r0, #1
 800ced8:	f7fe fa7e 	bl	800b3d8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800cee4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ceee:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cef8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	699b      	ldr	r3, [r3, #24]
 800cf00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800cf04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800cf08:	f64f 7341 	movw	r3, #65345	; 0xff41
 800cf0c:	4013      	ands	r3, r2
 800cf0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800cf12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf16:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800cf18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800cf1c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800cf1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800cf22:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800cf24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800cf28:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800cf2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800cf2e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800cf30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800cf34:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800cf36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800cf3a:	4313      	orrs	r3, r2
 800cf3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800cf48:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	699b      	ldr	r3, [r3, #24]
 800cf50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800cf54:	2001      	movs	r0, #1
 800cf56:	f7fe fa3f 	bl	800b3d8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800cf62:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800cf64:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800cf68:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	430a      	orrs	r2, r1
 800cf72:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	69db      	ldr	r3, [r3, #28]
 800cf7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800cf7e:	2001      	movs	r0, #1
 800cf80:	f7fe fa2a 	bl	800b3d8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800cf8c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800cf92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cf96:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800cf9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cfa0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800cfb2:	2304      	movs	r3, #4
 800cfb4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800cfb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cfba:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800cfbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cfc0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800cfc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cfc6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800cfc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cfcc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800cfce:	2380      	movs	r3, #128	; 0x80
 800cfd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	f241 0318 	movw	r3, #4120	; 0x1018
 800cfe2:	4413      	add	r3, r2
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800cfea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800cfee:	4b3d      	ldr	r3, [pc, #244]	; (800d0e4 <ETH_MACDMAConfig+0x38c>)
 800cff0:	4013      	ands	r3, r2
 800cff2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800cff6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800cff8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800cffa:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800cffc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800cffe:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800d000:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800d002:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800d004:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800d006:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800d008:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800d00a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800d00c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800d00e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800d010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800d012:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800d014:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800d016:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800d018:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800d01c:	4313      	orrs	r3, r2
 800d01e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	f241 0318 	movw	r3, #4120	; 0x1018
 800d02a:	4413      	add	r3, r2
 800d02c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800d030:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	f241 0318 	movw	r3, #4120	; 0x1018
 800d03a:	4413      	add	r3, r2
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800d042:	2001      	movs	r0, #1
 800d044:	f7fe f9c8 	bl	800b3d8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681a      	ldr	r2, [r3, #0]
 800d04c:	f241 0318 	movw	r3, #4120	; 0x1018
 800d050:	4413      	add	r3, r2
 800d052:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800d056:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800d058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800d05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800d05c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800d05e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800d060:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800d062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800d064:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800d066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800d068:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800d06a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d06c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800d06e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800d070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800d072:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d07c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d080:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800d090:	2001      	movs	r0, #1
 800d092:	f7fe f9a1 	bl	800b3d8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d09e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800d0a2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	699b      	ldr	r3, [r3, #24]
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d10d      	bne.n	800d0c8 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681a      	ldr	r2, [r3, #0]
 800d0b0:	f241 031c 	movw	r3, #4124	; 0x101c
 800d0b4:	4413      	add	r3, r2
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	6811      	ldr	r1, [r2, #0]
 800d0bc:	4a0a      	ldr	r2, [pc, #40]	; (800d0e8 <ETH_MACDMAConfig+0x390>)
 800d0be:	431a      	orrs	r2, r3
 800d0c0:	f241 031c 	movw	r3, #4124	; 0x101c
 800d0c4:	440b      	add	r3, r1
 800d0c6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	695b      	ldr	r3, [r3, #20]
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	2100      	movs	r1, #0
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 f80b 	bl	800d0ec <ETH_MACAddressConfig>
}
 800d0d6:	bf00      	nop
 800d0d8:	37c0      	adds	r7, #192	; 0xc0
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	ff20810f 	.word	0xff20810f
 800d0e4:	f8de3f23 	.word	0xf8de3f23
 800d0e8:	00010040 	.word	0x00010040

0800d0ec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b087      	sub	sp, #28
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	3305      	adds	r3, #5
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	021b      	lsls	r3, r3, #8
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	3204      	adds	r2, #4
 800d104:	7812      	ldrb	r2, [r2, #0]
 800d106:	4313      	orrs	r3, r2
 800d108:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800d10a:	68ba      	ldr	r2, [r7, #8]
 800d10c:	4b11      	ldr	r3, [pc, #68]	; (800d154 <ETH_MACAddressConfig+0x68>)
 800d10e:	4413      	add	r3, r2
 800d110:	461a      	mov	r2, r3
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	3303      	adds	r3, #3
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	061a      	lsls	r2, r3, #24
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	3302      	adds	r3, #2
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	041b      	lsls	r3, r3, #16
 800d126:	431a      	orrs	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	3301      	adds	r3, #1
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	021b      	lsls	r3, r3, #8
 800d130:	4313      	orrs	r3, r2
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	7812      	ldrb	r2, [r2, #0]
 800d136:	4313      	orrs	r3, r2
 800d138:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800d13a:	68ba      	ldr	r2, [r7, #8]
 800d13c:	4b06      	ldr	r3, [pc, #24]	; (800d158 <ETH_MACAddressConfig+0x6c>)
 800d13e:	4413      	add	r3, r2
 800d140:	461a      	mov	r2, r3
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	6013      	str	r3, [r2, #0]
}
 800d146:	bf00      	nop
 800d148:	371c      	adds	r7, #28
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr
 800d152:	bf00      	nop
 800d154:	40028040 	.word	0x40028040
 800d158:	40028044 	.word	0x40028044

0800d15c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800d164:	2300      	movs	r3, #0
 800d166:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f042 0208 	orr.w	r2, r2, #8
 800d176:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800d180:	2001      	movs	r0, #1
 800d182:	f7fe f929 	bl	800b3d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	68fa      	ldr	r2, [r7, #12]
 800d18c:	601a      	str	r2, [r3, #0]
}
 800d18e:	bf00      	nop
 800d190:	3710      	adds	r7, #16
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}

0800d196 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800d196:	b580      	push	{r7, lr}
 800d198:	b084      	sub	sp, #16
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f022 0208 	bic.w	r2, r2, #8
 800d1b0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800d1ba:	2001      	movs	r0, #1
 800d1bc:	f7fe f90c 	bl	800b3d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	68fa      	ldr	r2, [r7, #12]
 800d1c6:	601a      	str	r2, [r3, #0]
}
 800d1c8:	bf00      	nop
 800d1ca:	3710      	adds	r7, #16
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f042 0204 	orr.w	r2, r2, #4
 800d1ea:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800d1f4:	2001      	movs	r0, #1
 800d1f6:	f7fe f8ef 	bl	800b3d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	68fa      	ldr	r2, [r7, #12]
 800d200:	601a      	str	r2, [r3, #0]
}
 800d202:	bf00      	nop
 800d204:	3710      	adds	r7, #16
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}

0800d20a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800d20a:	b580      	push	{r7, lr}
 800d20c:	b084      	sub	sp, #16
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800d212:	2300      	movs	r3, #0
 800d214:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	681a      	ldr	r2, [r3, #0]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f022 0204 	bic.w	r2, r2, #4
 800d224:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800d22e:	2001      	movs	r0, #1
 800d230:	f7fe f8d2 	bl	800b3d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	601a      	str	r2, [r3, #0]
}
 800d23c:	bf00      	nop
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	f241 0318 	movw	r3, #4120	; 0x1018
 800d254:	4413      	add	r3, r2
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	6811      	ldr	r1, [r2, #0]
 800d25c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800d260:	f241 0318 	movw	r3, #4120	; 0x1018
 800d264:	440b      	add	r3, r1
 800d266:	601a      	str	r2, [r3, #0]
}
 800d268:	bf00      	nop
 800d26a:	370c      	adds	r7, #12
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800d274:	b480      	push	{r7}
 800d276:	b083      	sub	sp, #12
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681a      	ldr	r2, [r3, #0]
 800d280:	f241 0318 	movw	r3, #4120	; 0x1018
 800d284:	4413      	add	r3, r2
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	6811      	ldr	r1, [r2, #0]
 800d28c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d290:	f241 0318 	movw	r3, #4120	; 0x1018
 800d294:	440b      	add	r3, r1
 800d296:	601a      	str	r2, [r3, #0]
}
 800d298:	bf00      	nop
 800d29a:	370c      	adds	r7, #12
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr

0800d2a4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800d2a4:	b480      	push	{r7}
 800d2a6:	b083      	sub	sp, #12
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	f241 0318 	movw	r3, #4120	; 0x1018
 800d2b4:	4413      	add	r3, r2
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	6811      	ldr	r1, [r2, #0]
 800d2bc:	f043 0202 	orr.w	r2, r3, #2
 800d2c0:	f241 0318 	movw	r3, #4120	; 0x1018
 800d2c4:	440b      	add	r3, r1
 800d2c6:	601a      	str	r2, [r3, #0]
}
 800d2c8:	bf00      	nop
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr

0800d2d4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681a      	ldr	r2, [r3, #0]
 800d2e0:	f241 0318 	movw	r3, #4120	; 0x1018
 800d2e4:	4413      	add	r3, r2
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	6811      	ldr	r1, [r2, #0]
 800d2ec:	f023 0202 	bic.w	r2, r3, #2
 800d2f0:	f241 0318 	movw	r3, #4120	; 0x1018
 800d2f4:	440b      	add	r3, r1
 800d2f6:	601a      	str	r2, [r3, #0]
}
 800d2f8:	bf00      	nop
 800d2fa:	370c      	adds	r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800d30c:	2300      	movs	r3, #0
 800d30e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	f241 0318 	movw	r3, #4120	; 0x1018
 800d318:	4413      	add	r3, r2
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	687a      	ldr	r2, [r7, #4]
 800d31e:	6811      	ldr	r1, [r2, #0]
 800d320:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d324:	f241 0318 	movw	r3, #4120	; 0x1018
 800d328:	440b      	add	r3, r1
 800d32a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	f241 0318 	movw	r3, #4120	; 0x1018
 800d334:	4413      	add	r3, r2
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800d33a:	2001      	movs	r0, #1
 800d33c:	f7fe f84c 	bl	800b3d8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6819      	ldr	r1, [r3, #0]
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	f241 0318 	movw	r3, #4120	; 0x1018
 800d34a:	440b      	add	r3, r1
 800d34c:	601a      	str	r2, [r3, #0]
}
 800d34e:	bf00      	nop
 800d350:	3710      	adds	r7, #16
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
	...

0800d358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d358:	b480      	push	{r7}
 800d35a:	b089      	sub	sp, #36	; 0x24
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800d362:	2300      	movs	r3, #0
 800d364:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800d366:	2300      	movs	r3, #0
 800d368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800d36a:	2300      	movs	r3, #0
 800d36c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800d36e:	2300      	movs	r3, #0
 800d370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800d372:	2300      	movs	r3, #0
 800d374:	61fb      	str	r3, [r7, #28]
 800d376:	e175      	b.n	800d664 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800d378:	2201      	movs	r2, #1
 800d37a:	69fb      	ldr	r3, [r7, #28]
 800d37c:	fa02 f303 	lsl.w	r3, r2, r3
 800d380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	697a      	ldr	r2, [r7, #20]
 800d388:	4013      	ands	r3, r2
 800d38a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d38c:	693a      	ldr	r2, [r7, #16]
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	429a      	cmp	r2, r3
 800d392:	f040 8164 	bne.w	800d65e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	2b01      	cmp	r3, #1
 800d39c:	d00b      	beq.n	800d3b6 <HAL_GPIO_Init+0x5e>
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	2b02      	cmp	r3, #2
 800d3a4:	d007      	beq.n	800d3b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d3aa:	2b11      	cmp	r3, #17
 800d3ac:	d003      	beq.n	800d3b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	2b12      	cmp	r3, #18
 800d3b4:	d130      	bne.n	800d418 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	005b      	lsls	r3, r3, #1
 800d3c0:	2203      	movs	r2, #3
 800d3c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d3c6:	43db      	mvns	r3, r3
 800d3c8:	69ba      	ldr	r2, [r7, #24]
 800d3ca:	4013      	ands	r3, r2
 800d3cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	68da      	ldr	r2, [r3, #12]
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	005b      	lsls	r3, r3, #1
 800d3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d3da:	69ba      	ldr	r2, [r7, #24]
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	69ba      	ldr	r2, [r7, #24]
 800d3e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	69fb      	ldr	r3, [r7, #28]
 800d3f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d3f4:	43db      	mvns	r3, r3
 800d3f6:	69ba      	ldr	r2, [r7, #24]
 800d3f8:	4013      	ands	r3, r2
 800d3fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	091b      	lsrs	r3, r3, #4
 800d402:	f003 0201 	and.w	r2, r3, #1
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	fa02 f303 	lsl.w	r3, r2, r3
 800d40c:	69ba      	ldr	r2, [r7, #24]
 800d40e:	4313      	orrs	r3, r2
 800d410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	69ba      	ldr	r2, [r7, #24]
 800d416:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	68db      	ldr	r3, [r3, #12]
 800d41c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800d41e:	69fb      	ldr	r3, [r7, #28]
 800d420:	005b      	lsls	r3, r3, #1
 800d422:	2203      	movs	r2, #3
 800d424:	fa02 f303 	lsl.w	r3, r2, r3
 800d428:	43db      	mvns	r3, r3
 800d42a:	69ba      	ldr	r2, [r7, #24]
 800d42c:	4013      	ands	r3, r2
 800d42e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	689a      	ldr	r2, [r3, #8]
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	005b      	lsls	r3, r3, #1
 800d438:	fa02 f303 	lsl.w	r3, r2, r3
 800d43c:	69ba      	ldr	r2, [r7, #24]
 800d43e:	4313      	orrs	r3, r2
 800d440:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	69ba      	ldr	r2, [r7, #24]
 800d446:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	2b02      	cmp	r3, #2
 800d44e:	d003      	beq.n	800d458 <HAL_GPIO_Init+0x100>
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	2b12      	cmp	r3, #18
 800d456:	d123      	bne.n	800d4a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800d458:	69fb      	ldr	r3, [r7, #28]
 800d45a:	08da      	lsrs	r2, r3, #3
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	3208      	adds	r2, #8
 800d460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	f003 0307 	and.w	r3, r3, #7
 800d46c:	009b      	lsls	r3, r3, #2
 800d46e:	220f      	movs	r2, #15
 800d470:	fa02 f303 	lsl.w	r3, r2, r3
 800d474:	43db      	mvns	r3, r3
 800d476:	69ba      	ldr	r2, [r7, #24]
 800d478:	4013      	ands	r3, r2
 800d47a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	691a      	ldr	r2, [r3, #16]
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	f003 0307 	and.w	r3, r3, #7
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	fa02 f303 	lsl.w	r3, r2, r3
 800d48c:	69ba      	ldr	r2, [r7, #24]
 800d48e:	4313      	orrs	r3, r2
 800d490:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	08da      	lsrs	r2, r3, #3
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	3208      	adds	r2, #8
 800d49a:	69b9      	ldr	r1, [r7, #24]
 800d49c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800d4a6:	69fb      	ldr	r3, [r7, #28]
 800d4a8:	005b      	lsls	r3, r3, #1
 800d4aa:	2203      	movs	r2, #3
 800d4ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d4b0:	43db      	mvns	r3, r3
 800d4b2:	69ba      	ldr	r2, [r7, #24]
 800d4b4:	4013      	ands	r3, r2
 800d4b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	f003 0203 	and.w	r2, r3, #3
 800d4c0:	69fb      	ldr	r3, [r7, #28]
 800d4c2:	005b      	lsls	r3, r3, #1
 800d4c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d4c8:	69ba      	ldr	r2, [r7, #24]
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	69ba      	ldr	r2, [r7, #24]
 800d4d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	f000 80be 	beq.w	800d65e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d4e2:	4b65      	ldr	r3, [pc, #404]	; (800d678 <HAL_GPIO_Init+0x320>)
 800d4e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4e6:	4a64      	ldr	r2, [pc, #400]	; (800d678 <HAL_GPIO_Init+0x320>)
 800d4e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d4ec:	6453      	str	r3, [r2, #68]	; 0x44
 800d4ee:	4b62      	ldr	r3, [pc, #392]	; (800d678 <HAL_GPIO_Init+0x320>)
 800d4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4f6:	60fb      	str	r3, [r7, #12]
 800d4f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800d4fa:	4a60      	ldr	r2, [pc, #384]	; (800d67c <HAL_GPIO_Init+0x324>)
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	089b      	lsrs	r3, r3, #2
 800d500:	3302      	adds	r3, #2
 800d502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d506:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800d508:	69fb      	ldr	r3, [r7, #28]
 800d50a:	f003 0303 	and.w	r3, r3, #3
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	220f      	movs	r2, #15
 800d512:	fa02 f303 	lsl.w	r3, r2, r3
 800d516:	43db      	mvns	r3, r3
 800d518:	69ba      	ldr	r2, [r7, #24]
 800d51a:	4013      	ands	r3, r2
 800d51c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4a57      	ldr	r2, [pc, #348]	; (800d680 <HAL_GPIO_Init+0x328>)
 800d522:	4293      	cmp	r3, r2
 800d524:	d037      	beq.n	800d596 <HAL_GPIO_Init+0x23e>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	4a56      	ldr	r2, [pc, #344]	; (800d684 <HAL_GPIO_Init+0x32c>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d031      	beq.n	800d592 <HAL_GPIO_Init+0x23a>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	4a55      	ldr	r2, [pc, #340]	; (800d688 <HAL_GPIO_Init+0x330>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d02b      	beq.n	800d58e <HAL_GPIO_Init+0x236>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	4a54      	ldr	r2, [pc, #336]	; (800d68c <HAL_GPIO_Init+0x334>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d025      	beq.n	800d58a <HAL_GPIO_Init+0x232>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4a53      	ldr	r2, [pc, #332]	; (800d690 <HAL_GPIO_Init+0x338>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d01f      	beq.n	800d586 <HAL_GPIO_Init+0x22e>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	4a52      	ldr	r2, [pc, #328]	; (800d694 <HAL_GPIO_Init+0x33c>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d019      	beq.n	800d582 <HAL_GPIO_Init+0x22a>
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	4a51      	ldr	r2, [pc, #324]	; (800d698 <HAL_GPIO_Init+0x340>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d013      	beq.n	800d57e <HAL_GPIO_Init+0x226>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	4a50      	ldr	r2, [pc, #320]	; (800d69c <HAL_GPIO_Init+0x344>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d00d      	beq.n	800d57a <HAL_GPIO_Init+0x222>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	4a4f      	ldr	r2, [pc, #316]	; (800d6a0 <HAL_GPIO_Init+0x348>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d007      	beq.n	800d576 <HAL_GPIO_Init+0x21e>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	4a4e      	ldr	r2, [pc, #312]	; (800d6a4 <HAL_GPIO_Init+0x34c>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d101      	bne.n	800d572 <HAL_GPIO_Init+0x21a>
 800d56e:	2309      	movs	r3, #9
 800d570:	e012      	b.n	800d598 <HAL_GPIO_Init+0x240>
 800d572:	230a      	movs	r3, #10
 800d574:	e010      	b.n	800d598 <HAL_GPIO_Init+0x240>
 800d576:	2308      	movs	r3, #8
 800d578:	e00e      	b.n	800d598 <HAL_GPIO_Init+0x240>
 800d57a:	2307      	movs	r3, #7
 800d57c:	e00c      	b.n	800d598 <HAL_GPIO_Init+0x240>
 800d57e:	2306      	movs	r3, #6
 800d580:	e00a      	b.n	800d598 <HAL_GPIO_Init+0x240>
 800d582:	2305      	movs	r3, #5
 800d584:	e008      	b.n	800d598 <HAL_GPIO_Init+0x240>
 800d586:	2304      	movs	r3, #4
 800d588:	e006      	b.n	800d598 <HAL_GPIO_Init+0x240>
 800d58a:	2303      	movs	r3, #3
 800d58c:	e004      	b.n	800d598 <HAL_GPIO_Init+0x240>
 800d58e:	2302      	movs	r3, #2
 800d590:	e002      	b.n	800d598 <HAL_GPIO_Init+0x240>
 800d592:	2301      	movs	r3, #1
 800d594:	e000      	b.n	800d598 <HAL_GPIO_Init+0x240>
 800d596:	2300      	movs	r3, #0
 800d598:	69fa      	ldr	r2, [r7, #28]
 800d59a:	f002 0203 	and.w	r2, r2, #3
 800d59e:	0092      	lsls	r2, r2, #2
 800d5a0:	4093      	lsls	r3, r2
 800d5a2:	69ba      	ldr	r2, [r7, #24]
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800d5a8:	4934      	ldr	r1, [pc, #208]	; (800d67c <HAL_GPIO_Init+0x324>)
 800d5aa:	69fb      	ldr	r3, [r7, #28]
 800d5ac:	089b      	lsrs	r3, r3, #2
 800d5ae:	3302      	adds	r3, #2
 800d5b0:	69ba      	ldr	r2, [r7, #24]
 800d5b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d5b6:	4b3c      	ldr	r3, [pc, #240]	; (800d6a8 <HAL_GPIO_Init+0x350>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	43db      	mvns	r3, r3
 800d5c0:	69ba      	ldr	r2, [r7, #24]
 800d5c2:	4013      	ands	r3, r2
 800d5c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	685b      	ldr	r3, [r3, #4]
 800d5ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d003      	beq.n	800d5da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800d5d2:	69ba      	ldr	r2, [r7, #24]
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d5da:	4a33      	ldr	r2, [pc, #204]	; (800d6a8 <HAL_GPIO_Init+0x350>)
 800d5dc:	69bb      	ldr	r3, [r7, #24]
 800d5de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d5e0:	4b31      	ldr	r3, [pc, #196]	; (800d6a8 <HAL_GPIO_Init+0x350>)
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	43db      	mvns	r3, r3
 800d5ea:	69ba      	ldr	r2, [r7, #24]
 800d5ec:	4013      	ands	r3, r2
 800d5ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d003      	beq.n	800d604 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800d5fc:	69ba      	ldr	r2, [r7, #24]
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	4313      	orrs	r3, r2
 800d602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d604:	4a28      	ldr	r2, [pc, #160]	; (800d6a8 <HAL_GPIO_Init+0x350>)
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d60a:	4b27      	ldr	r3, [pc, #156]	; (800d6a8 <HAL_GPIO_Init+0x350>)
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	43db      	mvns	r3, r3
 800d614:	69ba      	ldr	r2, [r7, #24]
 800d616:	4013      	ands	r3, r2
 800d618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d622:	2b00      	cmp	r3, #0
 800d624:	d003      	beq.n	800d62e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800d626:	69ba      	ldr	r2, [r7, #24]
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	4313      	orrs	r3, r2
 800d62c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d62e:	4a1e      	ldr	r2, [pc, #120]	; (800d6a8 <HAL_GPIO_Init+0x350>)
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d634:	4b1c      	ldr	r3, [pc, #112]	; (800d6a8 <HAL_GPIO_Init+0x350>)
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	43db      	mvns	r3, r3
 800d63e:	69ba      	ldr	r2, [r7, #24]
 800d640:	4013      	ands	r3, r2
 800d642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d003      	beq.n	800d658 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800d650:	69ba      	ldr	r2, [r7, #24]
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	4313      	orrs	r3, r2
 800d656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d658:	4a13      	ldr	r2, [pc, #76]	; (800d6a8 <HAL_GPIO_Init+0x350>)
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800d65e:	69fb      	ldr	r3, [r7, #28]
 800d660:	3301      	adds	r3, #1
 800d662:	61fb      	str	r3, [r7, #28]
 800d664:	69fb      	ldr	r3, [r7, #28]
 800d666:	2b0f      	cmp	r3, #15
 800d668:	f67f ae86 	bls.w	800d378 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800d66c:	bf00      	nop
 800d66e:	3724      	adds	r7, #36	; 0x24
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr
 800d678:	40023800 	.word	0x40023800
 800d67c:	40013800 	.word	0x40013800
 800d680:	40020000 	.word	0x40020000
 800d684:	40020400 	.word	0x40020400
 800d688:	40020800 	.word	0x40020800
 800d68c:	40020c00 	.word	0x40020c00
 800d690:	40021000 	.word	0x40021000
 800d694:	40021400 	.word	0x40021400
 800d698:	40021800 	.word	0x40021800
 800d69c:	40021c00 	.word	0x40021c00
 800d6a0:	40022000 	.word	0x40022000
 800d6a4:	40022400 	.word	0x40022400
 800d6a8:	40013c00 	.word	0x40013c00

0800d6ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	807b      	strh	r3, [r7, #2]
 800d6b8:	4613      	mov	r3, r2
 800d6ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d6bc:	787b      	ldrb	r3, [r7, #1]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d003      	beq.n	800d6ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d6c2:	887a      	ldrh	r2, [r7, #2]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800d6c8:	e003      	b.n	800d6d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800d6ca:	887b      	ldrh	r3, [r7, #2]
 800d6cc:	041a      	lsls	r2, r3, #16
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	619a      	str	r2, [r3, #24]
}
 800d6d2:	bf00      	nop
 800d6d4:	370c      	adds	r7, #12
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr

0800d6de <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d6de:	b480      	push	{r7}
 800d6e0:	b083      	sub	sp, #12
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]
 800d6e6:	460b      	mov	r3, r1
 800d6e8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	695a      	ldr	r2, [r3, #20]
 800d6ee:	887b      	ldrh	r3, [r7, #2]
 800d6f0:	4013      	ands	r3, r2
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d004      	beq.n	800d700 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d6f6:	887b      	ldrh	r3, [r7, #2]
 800d6f8:	041a      	lsls	r2, r3, #16
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800d6fe:	e002      	b.n	800d706 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d700:	887a      	ldrh	r2, [r7, #2]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	619a      	str	r2, [r3, #24]
}
 800d706:	bf00      	nop
 800d708:	370c      	adds	r7, #12
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr

0800d712 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800d712:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d714:	b08f      	sub	sp, #60	; 0x3c
 800d716:	af0a      	add	r7, sp, #40	; 0x28
 800d718:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d101      	bne.n	800d724 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800d720:	2301      	movs	r3, #1
 800d722:	e116      	b.n	800d952 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800d730:	b2db      	uxtb	r3, r3
 800d732:	2b00      	cmp	r3, #0
 800d734:	d106      	bne.n	800d744 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2200      	movs	r2, #0
 800d73a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f7fd fb2e 	bl	800ada0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2203      	movs	r2, #3
 800d748:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d754:	2b00      	cmp	r3, #0
 800d756:	d102      	bne.n	800d75e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2200      	movs	r2, #0
 800d75c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4618      	mov	r0, r3
 800d764:	f003 fa00 	bl	8010b68 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	603b      	str	r3, [r7, #0]
 800d76e:	687e      	ldr	r6, [r7, #4]
 800d770:	466d      	mov	r5, sp
 800d772:	f106 0410 	add.w	r4, r6, #16
 800d776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d77a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d77c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d77e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d782:	e885 0003 	stmia.w	r5, {r0, r1}
 800d786:	1d33      	adds	r3, r6, #4
 800d788:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d78a:	6838      	ldr	r0, [r7, #0]
 800d78c:	f003 f994 	bl	8010ab8 <USB_CoreInit>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d005      	beq.n	800d7a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2202      	movs	r2, #2
 800d79a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e0d7      	b.n	800d952 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2100      	movs	r1, #0
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f003 f9ee 	bl	8010b8a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	73fb      	strb	r3, [r7, #15]
 800d7b2:	e04a      	b.n	800d84a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800d7b4:	7bfa      	ldrb	r2, [r7, #15]
 800d7b6:	6879      	ldr	r1, [r7, #4]
 800d7b8:	4613      	mov	r3, r2
 800d7ba:	00db      	lsls	r3, r3, #3
 800d7bc:	1a9b      	subs	r3, r3, r2
 800d7be:	009b      	lsls	r3, r3, #2
 800d7c0:	440b      	add	r3, r1
 800d7c2:	333d      	adds	r3, #61	; 0x3d
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800d7c8:	7bfa      	ldrb	r2, [r7, #15]
 800d7ca:	6879      	ldr	r1, [r7, #4]
 800d7cc:	4613      	mov	r3, r2
 800d7ce:	00db      	lsls	r3, r3, #3
 800d7d0:	1a9b      	subs	r3, r3, r2
 800d7d2:	009b      	lsls	r3, r3, #2
 800d7d4:	440b      	add	r3, r1
 800d7d6:	333c      	adds	r3, #60	; 0x3c
 800d7d8:	7bfa      	ldrb	r2, [r7, #15]
 800d7da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800d7dc:	7bfa      	ldrb	r2, [r7, #15]
 800d7de:	7bfb      	ldrb	r3, [r7, #15]
 800d7e0:	b298      	uxth	r0, r3
 800d7e2:	6879      	ldr	r1, [r7, #4]
 800d7e4:	4613      	mov	r3, r2
 800d7e6:	00db      	lsls	r3, r3, #3
 800d7e8:	1a9b      	subs	r3, r3, r2
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	440b      	add	r3, r1
 800d7ee:	3342      	adds	r3, #66	; 0x42
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d7f4:	7bfa      	ldrb	r2, [r7, #15]
 800d7f6:	6879      	ldr	r1, [r7, #4]
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	00db      	lsls	r3, r3, #3
 800d7fc:	1a9b      	subs	r3, r3, r2
 800d7fe:	009b      	lsls	r3, r3, #2
 800d800:	440b      	add	r3, r1
 800d802:	333f      	adds	r3, #63	; 0x3f
 800d804:	2200      	movs	r2, #0
 800d806:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800d808:	7bfa      	ldrb	r2, [r7, #15]
 800d80a:	6879      	ldr	r1, [r7, #4]
 800d80c:	4613      	mov	r3, r2
 800d80e:	00db      	lsls	r3, r3, #3
 800d810:	1a9b      	subs	r3, r3, r2
 800d812:	009b      	lsls	r3, r3, #2
 800d814:	440b      	add	r3, r1
 800d816:	3344      	adds	r3, #68	; 0x44
 800d818:	2200      	movs	r2, #0
 800d81a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d81c:	7bfa      	ldrb	r2, [r7, #15]
 800d81e:	6879      	ldr	r1, [r7, #4]
 800d820:	4613      	mov	r3, r2
 800d822:	00db      	lsls	r3, r3, #3
 800d824:	1a9b      	subs	r3, r3, r2
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	440b      	add	r3, r1
 800d82a:	3348      	adds	r3, #72	; 0x48
 800d82c:	2200      	movs	r2, #0
 800d82e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800d830:	7bfa      	ldrb	r2, [r7, #15]
 800d832:	6879      	ldr	r1, [r7, #4]
 800d834:	4613      	mov	r3, r2
 800d836:	00db      	lsls	r3, r3, #3
 800d838:	1a9b      	subs	r3, r3, r2
 800d83a:	009b      	lsls	r3, r3, #2
 800d83c:	440b      	add	r3, r1
 800d83e:	3350      	adds	r3, #80	; 0x50
 800d840:	2200      	movs	r2, #0
 800d842:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d844:	7bfb      	ldrb	r3, [r7, #15]
 800d846:	3301      	adds	r3, #1
 800d848:	73fb      	strb	r3, [r7, #15]
 800d84a:	7bfa      	ldrb	r2, [r7, #15]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	429a      	cmp	r2, r3
 800d852:	d3af      	bcc.n	800d7b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d854:	2300      	movs	r3, #0
 800d856:	73fb      	strb	r3, [r7, #15]
 800d858:	e044      	b.n	800d8e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d85a:	7bfa      	ldrb	r2, [r7, #15]
 800d85c:	6879      	ldr	r1, [r7, #4]
 800d85e:	4613      	mov	r3, r2
 800d860:	00db      	lsls	r3, r3, #3
 800d862:	1a9b      	subs	r3, r3, r2
 800d864:	009b      	lsls	r3, r3, #2
 800d866:	440b      	add	r3, r1
 800d868:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800d86c:	2200      	movs	r2, #0
 800d86e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800d870:	7bfa      	ldrb	r2, [r7, #15]
 800d872:	6879      	ldr	r1, [r7, #4]
 800d874:	4613      	mov	r3, r2
 800d876:	00db      	lsls	r3, r3, #3
 800d878:	1a9b      	subs	r3, r3, r2
 800d87a:	009b      	lsls	r3, r3, #2
 800d87c:	440b      	add	r3, r1
 800d87e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800d882:	7bfa      	ldrb	r2, [r7, #15]
 800d884:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d886:	7bfa      	ldrb	r2, [r7, #15]
 800d888:	6879      	ldr	r1, [r7, #4]
 800d88a:	4613      	mov	r3, r2
 800d88c:	00db      	lsls	r3, r3, #3
 800d88e:	1a9b      	subs	r3, r3, r2
 800d890:	009b      	lsls	r3, r3, #2
 800d892:	440b      	add	r3, r1
 800d894:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d898:	2200      	movs	r2, #0
 800d89a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800d89c:	7bfa      	ldrb	r2, [r7, #15]
 800d89e:	6879      	ldr	r1, [r7, #4]
 800d8a0:	4613      	mov	r3, r2
 800d8a2:	00db      	lsls	r3, r3, #3
 800d8a4:	1a9b      	subs	r3, r3, r2
 800d8a6:	009b      	lsls	r3, r3, #2
 800d8a8:	440b      	add	r3, r1
 800d8aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d8b2:	7bfa      	ldrb	r2, [r7, #15]
 800d8b4:	6879      	ldr	r1, [r7, #4]
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	00db      	lsls	r3, r3, #3
 800d8ba:	1a9b      	subs	r3, r3, r2
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	440b      	add	r3, r1
 800d8c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d8c8:	7bfa      	ldrb	r2, [r7, #15]
 800d8ca:	6879      	ldr	r1, [r7, #4]
 800d8cc:	4613      	mov	r3, r2
 800d8ce:	00db      	lsls	r3, r3, #3
 800d8d0:	1a9b      	subs	r3, r3, r2
 800d8d2:	009b      	lsls	r3, r3, #2
 800d8d4:	440b      	add	r3, r1
 800d8d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d8da:	2200      	movs	r2, #0
 800d8dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d8de:	7bfb      	ldrb	r3, [r7, #15]
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	73fb      	strb	r3, [r7, #15]
 800d8e4:	7bfa      	ldrb	r2, [r7, #15]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d3b5      	bcc.n	800d85a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	603b      	str	r3, [r7, #0]
 800d8f4:	687e      	ldr	r6, [r7, #4]
 800d8f6:	466d      	mov	r5, sp
 800d8f8:	f106 0410 	add.w	r4, r6, #16
 800d8fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d8fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d904:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d908:	e885 0003 	stmia.w	r5, {r0, r1}
 800d90c:	1d33      	adds	r3, r6, #4
 800d90e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d910:	6838      	ldr	r0, [r7, #0]
 800d912:	f003 f965 	bl	8010be0 <USB_DevInit>
 800d916:	4603      	mov	r3, r0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d005      	beq.n	800d928 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2202      	movs	r2, #2
 800d920:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800d924:	2301      	movs	r3, #1
 800d926:	e014      	b.n	800d952 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2201      	movs	r2, #1
 800d934:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d102      	bne.n	800d946 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f000 f80b 	bl	800d95c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4618      	mov	r0, r3
 800d94c:	f003 fb17 	bl	8010f7e <USB_DevDisconnect>

  return HAL_OK;
 800d950:	2300      	movs	r3, #0
}
 800d952:	4618      	mov	r0, r3
 800d954:	3714      	adds	r7, #20
 800d956:	46bd      	mov	sp, r7
 800d958:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d95c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b085      	sub	sp, #20
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2201      	movs	r2, #1
 800d96e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2200      	movs	r2, #0
 800d976:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	699b      	ldr	r3, [r3, #24]
 800d97e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d98a:	4b05      	ldr	r3, [pc, #20]	; (800d9a0 <HAL_PCDEx_ActivateLPM+0x44>)
 800d98c:	4313      	orrs	r3, r2
 800d98e:	68fa      	ldr	r2, [r7, #12]
 800d990:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800d992:	2300      	movs	r3, #0
}
 800d994:	4618      	mov	r0, r3
 800d996:	3714      	adds	r7, #20
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr
 800d9a0:	10000003 	.word	0x10000003

0800d9a4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d9a8:	4b05      	ldr	r3, [pc, #20]	; (800d9c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a04      	ldr	r2, [pc, #16]	; (800d9c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d9ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9b2:	6013      	str	r3, [r2, #0]
}
 800d9b4:	bf00      	nop
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr
 800d9be:	bf00      	nop
 800d9c0:	40007000 	.word	0x40007000

0800d9c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d9ce:	4b23      	ldr	r3, [pc, #140]	; (800da5c <HAL_PWREx_EnableOverDrive+0x98>)
 800d9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d2:	4a22      	ldr	r2, [pc, #136]	; (800da5c <HAL_PWREx_EnableOverDrive+0x98>)
 800d9d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9d8:	6413      	str	r3, [r2, #64]	; 0x40
 800d9da:	4b20      	ldr	r3, [pc, #128]	; (800da5c <HAL_PWREx_EnableOverDrive+0x98>)
 800d9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9e2:	603b      	str	r3, [r7, #0]
 800d9e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d9e6:	4b1e      	ldr	r3, [pc, #120]	; (800da60 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4a1d      	ldr	r2, [pc, #116]	; (800da60 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d9ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d9f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d9f2:	f7fd fce5 	bl	800b3c0 <HAL_GetTick>
 800d9f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d9f8:	e009      	b.n	800da0e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d9fa:	f7fd fce1 	bl	800b3c0 <HAL_GetTick>
 800d9fe:	4602      	mov	r2, r0
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	1ad3      	subs	r3, r2, r3
 800da04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da08:	d901      	bls.n	800da0e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800da0a:	2303      	movs	r3, #3
 800da0c:	e022      	b.n	800da54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800da0e:	4b14      	ldr	r3, [pc, #80]	; (800da60 <HAL_PWREx_EnableOverDrive+0x9c>)
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800da16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da1a:	d1ee      	bne.n	800d9fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800da1c:	4b10      	ldr	r3, [pc, #64]	; (800da60 <HAL_PWREx_EnableOverDrive+0x9c>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4a0f      	ldr	r2, [pc, #60]	; (800da60 <HAL_PWREx_EnableOverDrive+0x9c>)
 800da22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800da26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800da28:	f7fd fcca 	bl	800b3c0 <HAL_GetTick>
 800da2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800da2e:	e009      	b.n	800da44 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800da30:	f7fd fcc6 	bl	800b3c0 <HAL_GetTick>
 800da34:	4602      	mov	r2, r0
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	1ad3      	subs	r3, r2, r3
 800da3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da3e:	d901      	bls.n	800da44 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800da40:	2303      	movs	r3, #3
 800da42:	e007      	b.n	800da54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800da44:	4b06      	ldr	r3, [pc, #24]	; (800da60 <HAL_PWREx_EnableOverDrive+0x9c>)
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800da50:	d1ee      	bne.n	800da30 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800da52:	2300      	movs	r3, #0
}
 800da54:	4618      	mov	r0, r3
 800da56:	3708      	adds	r7, #8
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	40023800 	.word	0x40023800
 800da60:	40007000 	.word	0x40007000

0800da64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b086      	sub	sp, #24
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800da6c:	2300      	movs	r3, #0
 800da6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d101      	bne.n	800da7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800da76:	2301      	movs	r3, #1
 800da78:	e29b      	b.n	800dfb2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f003 0301 	and.w	r3, r3, #1
 800da82:	2b00      	cmp	r3, #0
 800da84:	f000 8087 	beq.w	800db96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800da88:	4b96      	ldr	r3, [pc, #600]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800da8a:	689b      	ldr	r3, [r3, #8]
 800da8c:	f003 030c 	and.w	r3, r3, #12
 800da90:	2b04      	cmp	r3, #4
 800da92:	d00c      	beq.n	800daae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800da94:	4b93      	ldr	r3, [pc, #588]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800da96:	689b      	ldr	r3, [r3, #8]
 800da98:	f003 030c 	and.w	r3, r3, #12
 800da9c:	2b08      	cmp	r3, #8
 800da9e:	d112      	bne.n	800dac6 <HAL_RCC_OscConfig+0x62>
 800daa0:	4b90      	ldr	r3, [pc, #576]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800daa2:	685b      	ldr	r3, [r3, #4]
 800daa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800daa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800daac:	d10b      	bne.n	800dac6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800daae:	4b8d      	ldr	r3, [pc, #564]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d06c      	beq.n	800db94 <HAL_RCC_OscConfig+0x130>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d168      	bne.n	800db94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800dac2:	2301      	movs	r3, #1
 800dac4:	e275      	b.n	800dfb2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dace:	d106      	bne.n	800dade <HAL_RCC_OscConfig+0x7a>
 800dad0:	4b84      	ldr	r3, [pc, #528]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4a83      	ldr	r2, [pc, #524]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dada:	6013      	str	r3, [r2, #0]
 800dadc:	e02e      	b.n	800db3c <HAL_RCC_OscConfig+0xd8>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d10c      	bne.n	800db00 <HAL_RCC_OscConfig+0x9c>
 800dae6:	4b7f      	ldr	r3, [pc, #508]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4a7e      	ldr	r2, [pc, #504]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800daec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800daf0:	6013      	str	r3, [r2, #0]
 800daf2:	4b7c      	ldr	r3, [pc, #496]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4a7b      	ldr	r2, [pc, #492]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800daf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dafc:	6013      	str	r3, [r2, #0]
 800dafe:	e01d      	b.n	800db3c <HAL_RCC_OscConfig+0xd8>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	685b      	ldr	r3, [r3, #4]
 800db04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800db08:	d10c      	bne.n	800db24 <HAL_RCC_OscConfig+0xc0>
 800db0a:	4b76      	ldr	r3, [pc, #472]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	4a75      	ldr	r2, [pc, #468]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800db10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800db14:	6013      	str	r3, [r2, #0]
 800db16:	4b73      	ldr	r3, [pc, #460]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4a72      	ldr	r2, [pc, #456]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800db1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db20:	6013      	str	r3, [r2, #0]
 800db22:	e00b      	b.n	800db3c <HAL_RCC_OscConfig+0xd8>
 800db24:	4b6f      	ldr	r3, [pc, #444]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	4a6e      	ldr	r2, [pc, #440]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800db2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800db2e:	6013      	str	r3, [r2, #0]
 800db30:	4b6c      	ldr	r3, [pc, #432]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a6b      	ldr	r2, [pc, #428]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800db36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800db3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d013      	beq.n	800db6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db44:	f7fd fc3c 	bl	800b3c0 <HAL_GetTick>
 800db48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800db4a:	e008      	b.n	800db5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800db4c:	f7fd fc38 	bl	800b3c0 <HAL_GetTick>
 800db50:	4602      	mov	r2, r0
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	1ad3      	subs	r3, r2, r3
 800db56:	2b64      	cmp	r3, #100	; 0x64
 800db58:	d901      	bls.n	800db5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800db5a:	2303      	movs	r3, #3
 800db5c:	e229      	b.n	800dfb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800db5e:	4b61      	ldr	r3, [pc, #388]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db66:	2b00      	cmp	r3, #0
 800db68:	d0f0      	beq.n	800db4c <HAL_RCC_OscConfig+0xe8>
 800db6a:	e014      	b.n	800db96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db6c:	f7fd fc28 	bl	800b3c0 <HAL_GetTick>
 800db70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800db72:	e008      	b.n	800db86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800db74:	f7fd fc24 	bl	800b3c0 <HAL_GetTick>
 800db78:	4602      	mov	r2, r0
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	1ad3      	subs	r3, r2, r3
 800db7e:	2b64      	cmp	r3, #100	; 0x64
 800db80:	d901      	bls.n	800db86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800db82:	2303      	movs	r3, #3
 800db84:	e215      	b.n	800dfb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800db86:	4b57      	ldr	r3, [pc, #348]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d1f0      	bne.n	800db74 <HAL_RCC_OscConfig+0x110>
 800db92:	e000      	b.n	800db96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800db94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f003 0302 	and.w	r3, r3, #2
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d069      	beq.n	800dc76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800dba2:	4b50      	ldr	r3, [pc, #320]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dba4:	689b      	ldr	r3, [r3, #8]
 800dba6:	f003 030c 	and.w	r3, r3, #12
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00b      	beq.n	800dbc6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dbae:	4b4d      	ldr	r3, [pc, #308]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dbb0:	689b      	ldr	r3, [r3, #8]
 800dbb2:	f003 030c 	and.w	r3, r3, #12
 800dbb6:	2b08      	cmp	r3, #8
 800dbb8:	d11c      	bne.n	800dbf4 <HAL_RCC_OscConfig+0x190>
 800dbba:	4b4a      	ldr	r3, [pc, #296]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d116      	bne.n	800dbf4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dbc6:	4b47      	ldr	r3, [pc, #284]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f003 0302 	and.w	r3, r3, #2
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d005      	beq.n	800dbde <HAL_RCC_OscConfig+0x17a>
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	68db      	ldr	r3, [r3, #12]
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d001      	beq.n	800dbde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800dbda:	2301      	movs	r3, #1
 800dbdc:	e1e9      	b.n	800dfb2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dbde:	4b41      	ldr	r3, [pc, #260]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	691b      	ldr	r3, [r3, #16]
 800dbea:	00db      	lsls	r3, r3, #3
 800dbec:	493d      	ldr	r1, [pc, #244]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dbf2:	e040      	b.n	800dc76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	68db      	ldr	r3, [r3, #12]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d023      	beq.n	800dc44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800dbfc:	4b39      	ldr	r3, [pc, #228]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4a38      	ldr	r2, [pc, #224]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dc02:	f043 0301 	orr.w	r3, r3, #1
 800dc06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc08:	f7fd fbda 	bl	800b3c0 <HAL_GetTick>
 800dc0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dc0e:	e008      	b.n	800dc22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dc10:	f7fd fbd6 	bl	800b3c0 <HAL_GetTick>
 800dc14:	4602      	mov	r2, r0
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	1ad3      	subs	r3, r2, r3
 800dc1a:	2b02      	cmp	r3, #2
 800dc1c:	d901      	bls.n	800dc22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800dc1e:	2303      	movs	r3, #3
 800dc20:	e1c7      	b.n	800dfb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dc22:	4b30      	ldr	r3, [pc, #192]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f003 0302 	and.w	r3, r3, #2
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d0f0      	beq.n	800dc10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dc2e:	4b2d      	ldr	r3, [pc, #180]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	691b      	ldr	r3, [r3, #16]
 800dc3a:	00db      	lsls	r3, r3, #3
 800dc3c:	4929      	ldr	r1, [pc, #164]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	600b      	str	r3, [r1, #0]
 800dc42:	e018      	b.n	800dc76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dc44:	4b27      	ldr	r3, [pc, #156]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4a26      	ldr	r2, [pc, #152]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dc4a:	f023 0301 	bic.w	r3, r3, #1
 800dc4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc50:	f7fd fbb6 	bl	800b3c0 <HAL_GetTick>
 800dc54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dc56:	e008      	b.n	800dc6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dc58:	f7fd fbb2 	bl	800b3c0 <HAL_GetTick>
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	1ad3      	subs	r3, r2, r3
 800dc62:	2b02      	cmp	r3, #2
 800dc64:	d901      	bls.n	800dc6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800dc66:	2303      	movs	r3, #3
 800dc68:	e1a3      	b.n	800dfb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dc6a:	4b1e      	ldr	r3, [pc, #120]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f003 0302 	and.w	r3, r3, #2
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d1f0      	bne.n	800dc58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	f003 0308 	and.w	r3, r3, #8
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d038      	beq.n	800dcf4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	695b      	ldr	r3, [r3, #20]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d019      	beq.n	800dcbe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dc8a:	4b16      	ldr	r3, [pc, #88]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dc8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc8e:	4a15      	ldr	r2, [pc, #84]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dc90:	f043 0301 	orr.w	r3, r3, #1
 800dc94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc96:	f7fd fb93 	bl	800b3c0 <HAL_GetTick>
 800dc9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dc9c:	e008      	b.n	800dcb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dc9e:	f7fd fb8f 	bl	800b3c0 <HAL_GetTick>
 800dca2:	4602      	mov	r2, r0
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	1ad3      	subs	r3, r2, r3
 800dca8:	2b02      	cmp	r3, #2
 800dcaa:	d901      	bls.n	800dcb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800dcac:	2303      	movs	r3, #3
 800dcae:	e180      	b.n	800dfb2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dcb0:	4b0c      	ldr	r3, [pc, #48]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dcb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcb4:	f003 0302 	and.w	r3, r3, #2
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d0f0      	beq.n	800dc9e <HAL_RCC_OscConfig+0x23a>
 800dcbc:	e01a      	b.n	800dcf4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dcbe:	4b09      	ldr	r3, [pc, #36]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dcc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcc2:	4a08      	ldr	r2, [pc, #32]	; (800dce4 <HAL_RCC_OscConfig+0x280>)
 800dcc4:	f023 0301 	bic.w	r3, r3, #1
 800dcc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dcca:	f7fd fb79 	bl	800b3c0 <HAL_GetTick>
 800dcce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dcd0:	e00a      	b.n	800dce8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dcd2:	f7fd fb75 	bl	800b3c0 <HAL_GetTick>
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	1ad3      	subs	r3, r2, r3
 800dcdc:	2b02      	cmp	r3, #2
 800dcde:	d903      	bls.n	800dce8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800dce0:	2303      	movs	r3, #3
 800dce2:	e166      	b.n	800dfb2 <HAL_RCC_OscConfig+0x54e>
 800dce4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dce8:	4b92      	ldr	r3, [pc, #584]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800dcea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcec:	f003 0302 	and.w	r3, r3, #2
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d1ee      	bne.n	800dcd2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f003 0304 	and.w	r3, r3, #4
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	f000 80a4 	beq.w	800de4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dd02:	4b8c      	ldr	r3, [pc, #560]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800dd04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d10d      	bne.n	800dd2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800dd0e:	4b89      	ldr	r3, [pc, #548]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800dd10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd12:	4a88      	ldr	r2, [pc, #544]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800dd14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd18:	6413      	str	r3, [r2, #64]	; 0x40
 800dd1a:	4b86      	ldr	r3, [pc, #536]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800dd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd22:	60bb      	str	r3, [r7, #8]
 800dd24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dd26:	2301      	movs	r3, #1
 800dd28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dd2a:	4b83      	ldr	r3, [pc, #524]	; (800df38 <HAL_RCC_OscConfig+0x4d4>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d118      	bne.n	800dd68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800dd36:	4b80      	ldr	r3, [pc, #512]	; (800df38 <HAL_RCC_OscConfig+0x4d4>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4a7f      	ldr	r2, [pc, #508]	; (800df38 <HAL_RCC_OscConfig+0x4d4>)
 800dd3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dd42:	f7fd fb3d 	bl	800b3c0 <HAL_GetTick>
 800dd46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dd48:	e008      	b.n	800dd5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dd4a:	f7fd fb39 	bl	800b3c0 <HAL_GetTick>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	1ad3      	subs	r3, r2, r3
 800dd54:	2b64      	cmp	r3, #100	; 0x64
 800dd56:	d901      	bls.n	800dd5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800dd58:	2303      	movs	r3, #3
 800dd5a:	e12a      	b.n	800dfb2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dd5c:	4b76      	ldr	r3, [pc, #472]	; (800df38 <HAL_RCC_OscConfig+0x4d4>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d0f0      	beq.n	800dd4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	689b      	ldr	r3, [r3, #8]
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d106      	bne.n	800dd7e <HAL_RCC_OscConfig+0x31a>
 800dd70:	4b70      	ldr	r3, [pc, #448]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800dd72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd74:	4a6f      	ldr	r2, [pc, #444]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800dd76:	f043 0301 	orr.w	r3, r3, #1
 800dd7a:	6713      	str	r3, [r2, #112]	; 0x70
 800dd7c:	e02d      	b.n	800ddda <HAL_RCC_OscConfig+0x376>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	689b      	ldr	r3, [r3, #8]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d10c      	bne.n	800dda0 <HAL_RCC_OscConfig+0x33c>
 800dd86:	4b6b      	ldr	r3, [pc, #428]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800dd88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd8a:	4a6a      	ldr	r2, [pc, #424]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800dd8c:	f023 0301 	bic.w	r3, r3, #1
 800dd90:	6713      	str	r3, [r2, #112]	; 0x70
 800dd92:	4b68      	ldr	r3, [pc, #416]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800dd94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd96:	4a67      	ldr	r2, [pc, #412]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800dd98:	f023 0304 	bic.w	r3, r3, #4
 800dd9c:	6713      	str	r3, [r2, #112]	; 0x70
 800dd9e:	e01c      	b.n	800ddda <HAL_RCC_OscConfig+0x376>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	689b      	ldr	r3, [r3, #8]
 800dda4:	2b05      	cmp	r3, #5
 800dda6:	d10c      	bne.n	800ddc2 <HAL_RCC_OscConfig+0x35e>
 800dda8:	4b62      	ldr	r3, [pc, #392]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800ddaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddac:	4a61      	ldr	r2, [pc, #388]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800ddae:	f043 0304 	orr.w	r3, r3, #4
 800ddb2:	6713      	str	r3, [r2, #112]	; 0x70
 800ddb4:	4b5f      	ldr	r3, [pc, #380]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800ddb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddb8:	4a5e      	ldr	r2, [pc, #376]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800ddba:	f043 0301 	orr.w	r3, r3, #1
 800ddbe:	6713      	str	r3, [r2, #112]	; 0x70
 800ddc0:	e00b      	b.n	800ddda <HAL_RCC_OscConfig+0x376>
 800ddc2:	4b5c      	ldr	r3, [pc, #368]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800ddc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddc6:	4a5b      	ldr	r2, [pc, #364]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800ddc8:	f023 0301 	bic.w	r3, r3, #1
 800ddcc:	6713      	str	r3, [r2, #112]	; 0x70
 800ddce:	4b59      	ldr	r3, [pc, #356]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800ddd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddd2:	4a58      	ldr	r2, [pc, #352]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800ddd4:	f023 0304 	bic.w	r3, r3, #4
 800ddd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	689b      	ldr	r3, [r3, #8]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d015      	beq.n	800de0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dde2:	f7fd faed 	bl	800b3c0 <HAL_GetTick>
 800dde6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dde8:	e00a      	b.n	800de00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ddea:	f7fd fae9 	bl	800b3c0 <HAL_GetTick>
 800ddee:	4602      	mov	r2, r0
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	1ad3      	subs	r3, r2, r3
 800ddf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d901      	bls.n	800de00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800ddfc:	2303      	movs	r3, #3
 800ddfe:	e0d8      	b.n	800dfb2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800de00:	4b4c      	ldr	r3, [pc, #304]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800de02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de04:	f003 0302 	and.w	r3, r3, #2
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d0ee      	beq.n	800ddea <HAL_RCC_OscConfig+0x386>
 800de0c:	e014      	b.n	800de38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de0e:	f7fd fad7 	bl	800b3c0 <HAL_GetTick>
 800de12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800de14:	e00a      	b.n	800de2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800de16:	f7fd fad3 	bl	800b3c0 <HAL_GetTick>
 800de1a:	4602      	mov	r2, r0
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	1ad3      	subs	r3, r2, r3
 800de20:	f241 3288 	movw	r2, #5000	; 0x1388
 800de24:	4293      	cmp	r3, r2
 800de26:	d901      	bls.n	800de2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800de28:	2303      	movs	r3, #3
 800de2a:	e0c2      	b.n	800dfb2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800de2c:	4b41      	ldr	r3, [pc, #260]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800de2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de30:	f003 0302 	and.w	r3, r3, #2
 800de34:	2b00      	cmp	r3, #0
 800de36:	d1ee      	bne.n	800de16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800de38:	7dfb      	ldrb	r3, [r7, #23]
 800de3a:	2b01      	cmp	r3, #1
 800de3c:	d105      	bne.n	800de4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800de3e:	4b3d      	ldr	r3, [pc, #244]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800de40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de42:	4a3c      	ldr	r2, [pc, #240]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800de44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800de48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	699b      	ldr	r3, [r3, #24]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	f000 80ae 	beq.w	800dfb0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800de54:	4b37      	ldr	r3, [pc, #220]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	f003 030c 	and.w	r3, r3, #12
 800de5c:	2b08      	cmp	r3, #8
 800de5e:	d06d      	beq.n	800df3c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	699b      	ldr	r3, [r3, #24]
 800de64:	2b02      	cmp	r3, #2
 800de66:	d14b      	bne.n	800df00 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800de68:	4b32      	ldr	r3, [pc, #200]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a31      	ldr	r2, [pc, #196]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800de6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800de72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de74:	f7fd faa4 	bl	800b3c0 <HAL_GetTick>
 800de78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800de7a:	e008      	b.n	800de8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800de7c:	f7fd faa0 	bl	800b3c0 <HAL_GetTick>
 800de80:	4602      	mov	r2, r0
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	1ad3      	subs	r3, r2, r3
 800de86:	2b02      	cmp	r3, #2
 800de88:	d901      	bls.n	800de8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800de8a:	2303      	movs	r3, #3
 800de8c:	e091      	b.n	800dfb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800de8e:	4b29      	ldr	r3, [pc, #164]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de96:	2b00      	cmp	r3, #0
 800de98:	d1f0      	bne.n	800de7c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	69da      	ldr	r2, [r3, #28]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6a1b      	ldr	r3, [r3, #32]
 800dea2:	431a      	orrs	r2, r3
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea8:	019b      	lsls	r3, r3, #6
 800deaa:	431a      	orrs	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deb0:	085b      	lsrs	r3, r3, #1
 800deb2:	3b01      	subs	r3, #1
 800deb4:	041b      	lsls	r3, r3, #16
 800deb6:	431a      	orrs	r2, r3
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800debc:	061b      	lsls	r3, r3, #24
 800debe:	431a      	orrs	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dec4:	071b      	lsls	r3, r3, #28
 800dec6:	491b      	ldr	r1, [pc, #108]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800dec8:	4313      	orrs	r3, r2
 800deca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800decc:	4b19      	ldr	r3, [pc, #100]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4a18      	ldr	r2, [pc, #96]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800ded2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ded6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ded8:	f7fd fa72 	bl	800b3c0 <HAL_GetTick>
 800dedc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dede:	e008      	b.n	800def2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dee0:	f7fd fa6e 	bl	800b3c0 <HAL_GetTick>
 800dee4:	4602      	mov	r2, r0
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	1ad3      	subs	r3, r2, r3
 800deea:	2b02      	cmp	r3, #2
 800deec:	d901      	bls.n	800def2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800deee:	2303      	movs	r3, #3
 800def0:	e05f      	b.n	800dfb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800def2:	4b10      	ldr	r3, [pc, #64]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800defa:	2b00      	cmp	r3, #0
 800defc:	d0f0      	beq.n	800dee0 <HAL_RCC_OscConfig+0x47c>
 800defe:	e057      	b.n	800dfb0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800df00:	4b0c      	ldr	r3, [pc, #48]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	4a0b      	ldr	r2, [pc, #44]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800df06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800df0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df0c:	f7fd fa58 	bl	800b3c0 <HAL_GetTick>
 800df10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800df12:	e008      	b.n	800df26 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800df14:	f7fd fa54 	bl	800b3c0 <HAL_GetTick>
 800df18:	4602      	mov	r2, r0
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	1ad3      	subs	r3, r2, r3
 800df1e:	2b02      	cmp	r3, #2
 800df20:	d901      	bls.n	800df26 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800df22:	2303      	movs	r3, #3
 800df24:	e045      	b.n	800dfb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800df26:	4b03      	ldr	r3, [pc, #12]	; (800df34 <HAL_RCC_OscConfig+0x4d0>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1f0      	bne.n	800df14 <HAL_RCC_OscConfig+0x4b0>
 800df32:	e03d      	b.n	800dfb0 <HAL_RCC_OscConfig+0x54c>
 800df34:	40023800 	.word	0x40023800
 800df38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800df3c:	4b1f      	ldr	r3, [pc, #124]	; (800dfbc <HAL_RCC_OscConfig+0x558>)
 800df3e:	685b      	ldr	r3, [r3, #4]
 800df40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	699b      	ldr	r3, [r3, #24]
 800df46:	2b01      	cmp	r3, #1
 800df48:	d030      	beq.n	800dfac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800df54:	429a      	cmp	r2, r3
 800df56:	d129      	bne.n	800dfac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800df62:	429a      	cmp	r2, r3
 800df64:	d122      	bne.n	800dfac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800df66:	68fa      	ldr	r2, [r7, #12]
 800df68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800df6c:	4013      	ands	r3, r2
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800df72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800df74:	4293      	cmp	r3, r2
 800df76:	d119      	bne.n	800dfac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df82:	085b      	lsrs	r3, r3, #1
 800df84:	3b01      	subs	r3, #1
 800df86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800df88:	429a      	cmp	r2, r3
 800df8a:	d10f      	bne.n	800dfac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800df98:	429a      	cmp	r2, r3
 800df9a:	d107      	bne.n	800dfac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfa6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d001      	beq.n	800dfb0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800dfac:	2301      	movs	r3, #1
 800dfae:	e000      	b.n	800dfb2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800dfb0:	2300      	movs	r3, #0
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3718      	adds	r7, #24
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	40023800 	.word	0x40023800

0800dfc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d101      	bne.n	800dfd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e0d0      	b.n	800e17a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dfd8:	4b6a      	ldr	r3, [pc, #424]	; (800e184 <HAL_RCC_ClockConfig+0x1c4>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f003 030f 	and.w	r3, r3, #15
 800dfe0:	683a      	ldr	r2, [r7, #0]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d910      	bls.n	800e008 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dfe6:	4b67      	ldr	r3, [pc, #412]	; (800e184 <HAL_RCC_ClockConfig+0x1c4>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f023 020f 	bic.w	r2, r3, #15
 800dfee:	4965      	ldr	r1, [pc, #404]	; (800e184 <HAL_RCC_ClockConfig+0x1c4>)
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	4313      	orrs	r3, r2
 800dff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dff6:	4b63      	ldr	r3, [pc, #396]	; (800e184 <HAL_RCC_ClockConfig+0x1c4>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f003 030f 	and.w	r3, r3, #15
 800dffe:	683a      	ldr	r2, [r7, #0]
 800e000:	429a      	cmp	r2, r3
 800e002:	d001      	beq.n	800e008 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800e004:	2301      	movs	r3, #1
 800e006:	e0b8      	b.n	800e17a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f003 0302 	and.w	r3, r3, #2
 800e010:	2b00      	cmp	r3, #0
 800e012:	d020      	beq.n	800e056 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	f003 0304 	and.w	r3, r3, #4
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d005      	beq.n	800e02c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e020:	4b59      	ldr	r3, [pc, #356]	; (800e188 <HAL_RCC_ClockConfig+0x1c8>)
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	4a58      	ldr	r2, [pc, #352]	; (800e188 <HAL_RCC_ClockConfig+0x1c8>)
 800e026:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e02a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f003 0308 	and.w	r3, r3, #8
 800e034:	2b00      	cmp	r3, #0
 800e036:	d005      	beq.n	800e044 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e038:	4b53      	ldr	r3, [pc, #332]	; (800e188 <HAL_RCC_ClockConfig+0x1c8>)
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	4a52      	ldr	r2, [pc, #328]	; (800e188 <HAL_RCC_ClockConfig+0x1c8>)
 800e03e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e042:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e044:	4b50      	ldr	r3, [pc, #320]	; (800e188 <HAL_RCC_ClockConfig+0x1c8>)
 800e046:	689b      	ldr	r3, [r3, #8]
 800e048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	689b      	ldr	r3, [r3, #8]
 800e050:	494d      	ldr	r1, [pc, #308]	; (800e188 <HAL_RCC_ClockConfig+0x1c8>)
 800e052:	4313      	orrs	r3, r2
 800e054:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f003 0301 	and.w	r3, r3, #1
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d040      	beq.n	800e0e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	2b01      	cmp	r3, #1
 800e068:	d107      	bne.n	800e07a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e06a:	4b47      	ldr	r3, [pc, #284]	; (800e188 <HAL_RCC_ClockConfig+0x1c8>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e072:	2b00      	cmp	r3, #0
 800e074:	d115      	bne.n	800e0a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e076:	2301      	movs	r3, #1
 800e078:	e07f      	b.n	800e17a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	685b      	ldr	r3, [r3, #4]
 800e07e:	2b02      	cmp	r3, #2
 800e080:	d107      	bne.n	800e092 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e082:	4b41      	ldr	r3, [pc, #260]	; (800e188 <HAL_RCC_ClockConfig+0x1c8>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d109      	bne.n	800e0a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e08e:	2301      	movs	r3, #1
 800e090:	e073      	b.n	800e17a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e092:	4b3d      	ldr	r3, [pc, #244]	; (800e188 <HAL_RCC_ClockConfig+0x1c8>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f003 0302 	and.w	r3, r3, #2
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d101      	bne.n	800e0a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e09e:	2301      	movs	r3, #1
 800e0a0:	e06b      	b.n	800e17a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e0a2:	4b39      	ldr	r3, [pc, #228]	; (800e188 <HAL_RCC_ClockConfig+0x1c8>)
 800e0a4:	689b      	ldr	r3, [r3, #8]
 800e0a6:	f023 0203 	bic.w	r2, r3, #3
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	4936      	ldr	r1, [pc, #216]	; (800e188 <HAL_RCC_ClockConfig+0x1c8>)
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e0b4:	f7fd f984 	bl	800b3c0 <HAL_GetTick>
 800e0b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e0ba:	e00a      	b.n	800e0d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e0bc:	f7fd f980 	bl	800b3c0 <HAL_GetTick>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	1ad3      	subs	r3, r2, r3
 800e0c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d901      	bls.n	800e0d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800e0ce:	2303      	movs	r3, #3
 800e0d0:	e053      	b.n	800e17a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e0d2:	4b2d      	ldr	r3, [pc, #180]	; (800e188 <HAL_RCC_ClockConfig+0x1c8>)
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	f003 020c 	and.w	r2, r3, #12
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d1eb      	bne.n	800e0bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e0e4:	4b27      	ldr	r3, [pc, #156]	; (800e184 <HAL_RCC_ClockConfig+0x1c4>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f003 030f 	and.w	r3, r3, #15
 800e0ec:	683a      	ldr	r2, [r7, #0]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d210      	bcs.n	800e114 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e0f2:	4b24      	ldr	r3, [pc, #144]	; (800e184 <HAL_RCC_ClockConfig+0x1c4>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f023 020f 	bic.w	r2, r3, #15
 800e0fa:	4922      	ldr	r1, [pc, #136]	; (800e184 <HAL_RCC_ClockConfig+0x1c4>)
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	4313      	orrs	r3, r2
 800e100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e102:	4b20      	ldr	r3, [pc, #128]	; (800e184 <HAL_RCC_ClockConfig+0x1c4>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f003 030f 	and.w	r3, r3, #15
 800e10a:	683a      	ldr	r2, [r7, #0]
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d001      	beq.n	800e114 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800e110:	2301      	movs	r3, #1
 800e112:	e032      	b.n	800e17a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f003 0304 	and.w	r3, r3, #4
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d008      	beq.n	800e132 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e120:	4b19      	ldr	r3, [pc, #100]	; (800e188 <HAL_RCC_ClockConfig+0x1c8>)
 800e122:	689b      	ldr	r3, [r3, #8]
 800e124:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	68db      	ldr	r3, [r3, #12]
 800e12c:	4916      	ldr	r1, [pc, #88]	; (800e188 <HAL_RCC_ClockConfig+0x1c8>)
 800e12e:	4313      	orrs	r3, r2
 800e130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f003 0308 	and.w	r3, r3, #8
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d009      	beq.n	800e152 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800e13e:	4b12      	ldr	r3, [pc, #72]	; (800e188 <HAL_RCC_ClockConfig+0x1c8>)
 800e140:	689b      	ldr	r3, [r3, #8]
 800e142:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	691b      	ldr	r3, [r3, #16]
 800e14a:	00db      	lsls	r3, r3, #3
 800e14c:	490e      	ldr	r1, [pc, #56]	; (800e188 <HAL_RCC_ClockConfig+0x1c8>)
 800e14e:	4313      	orrs	r3, r2
 800e150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800e152:	f000 f821 	bl	800e198 <HAL_RCC_GetSysClockFreq>
 800e156:	4601      	mov	r1, r0
 800e158:	4b0b      	ldr	r3, [pc, #44]	; (800e188 <HAL_RCC_ClockConfig+0x1c8>)
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	091b      	lsrs	r3, r3, #4
 800e15e:	f003 030f 	and.w	r3, r3, #15
 800e162:	4a0a      	ldr	r2, [pc, #40]	; (800e18c <HAL_RCC_ClockConfig+0x1cc>)
 800e164:	5cd3      	ldrb	r3, [r2, r3]
 800e166:	fa21 f303 	lsr.w	r3, r1, r3
 800e16a:	4a09      	ldr	r2, [pc, #36]	; (800e190 <HAL_RCC_ClockConfig+0x1d0>)
 800e16c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800e16e:	4b09      	ldr	r3, [pc, #36]	; (800e194 <HAL_RCC_ClockConfig+0x1d4>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	4618      	mov	r0, r3
 800e174:	f7fd f8e0 	bl	800b338 <HAL_InitTick>

  return HAL_OK;
 800e178:	2300      	movs	r3, #0
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3710      	adds	r7, #16
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	40023c00 	.word	0x40023c00
 800e188:	40023800 	.word	0x40023800
 800e18c:	08024600 	.word	0x08024600
 800e190:	20000040 	.word	0x20000040
 800e194:	20000044 	.word	0x20000044

0800e198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e19a:	b085      	sub	sp, #20
 800e19c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	607b      	str	r3, [r7, #4]
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	60fb      	str	r3, [r7, #12]
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e1ae:	4b63      	ldr	r3, [pc, #396]	; (800e33c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e1b0:	689b      	ldr	r3, [r3, #8]
 800e1b2:	f003 030c 	and.w	r3, r3, #12
 800e1b6:	2b04      	cmp	r3, #4
 800e1b8:	d007      	beq.n	800e1ca <HAL_RCC_GetSysClockFreq+0x32>
 800e1ba:	2b08      	cmp	r3, #8
 800e1bc:	d008      	beq.n	800e1d0 <HAL_RCC_GetSysClockFreq+0x38>
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	f040 80b4 	bne.w	800e32c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e1c4:	4b5e      	ldr	r3, [pc, #376]	; (800e340 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800e1c6:	60bb      	str	r3, [r7, #8]
      break;
 800e1c8:	e0b3      	b.n	800e332 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e1ca:	4b5e      	ldr	r3, [pc, #376]	; (800e344 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800e1cc:	60bb      	str	r3, [r7, #8]
      break;
 800e1ce:	e0b0      	b.n	800e332 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e1d0:	4b5a      	ldr	r3, [pc, #360]	; (800e33c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e1d8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800e1da:	4b58      	ldr	r3, [pc, #352]	; (800e33c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d04a      	beq.n	800e27c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e1e6:	4b55      	ldr	r3, [pc, #340]	; (800e33c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e1e8:	685b      	ldr	r3, [r3, #4]
 800e1ea:	099b      	lsrs	r3, r3, #6
 800e1ec:	f04f 0400 	mov.w	r4, #0
 800e1f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800e1f4:	f04f 0200 	mov.w	r2, #0
 800e1f8:	ea03 0501 	and.w	r5, r3, r1
 800e1fc:	ea04 0602 	and.w	r6, r4, r2
 800e200:	4629      	mov	r1, r5
 800e202:	4632      	mov	r2, r6
 800e204:	f04f 0300 	mov.w	r3, #0
 800e208:	f04f 0400 	mov.w	r4, #0
 800e20c:	0154      	lsls	r4, r2, #5
 800e20e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800e212:	014b      	lsls	r3, r1, #5
 800e214:	4619      	mov	r1, r3
 800e216:	4622      	mov	r2, r4
 800e218:	1b49      	subs	r1, r1, r5
 800e21a:	eb62 0206 	sbc.w	r2, r2, r6
 800e21e:	f04f 0300 	mov.w	r3, #0
 800e222:	f04f 0400 	mov.w	r4, #0
 800e226:	0194      	lsls	r4, r2, #6
 800e228:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800e22c:	018b      	lsls	r3, r1, #6
 800e22e:	1a5b      	subs	r3, r3, r1
 800e230:	eb64 0402 	sbc.w	r4, r4, r2
 800e234:	f04f 0100 	mov.w	r1, #0
 800e238:	f04f 0200 	mov.w	r2, #0
 800e23c:	00e2      	lsls	r2, r4, #3
 800e23e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800e242:	00d9      	lsls	r1, r3, #3
 800e244:	460b      	mov	r3, r1
 800e246:	4614      	mov	r4, r2
 800e248:	195b      	adds	r3, r3, r5
 800e24a:	eb44 0406 	adc.w	r4, r4, r6
 800e24e:	f04f 0100 	mov.w	r1, #0
 800e252:	f04f 0200 	mov.w	r2, #0
 800e256:	0262      	lsls	r2, r4, #9
 800e258:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800e25c:	0259      	lsls	r1, r3, #9
 800e25e:	460b      	mov	r3, r1
 800e260:	4614      	mov	r4, r2
 800e262:	4618      	mov	r0, r3
 800e264:	4621      	mov	r1, r4
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f04f 0400 	mov.w	r4, #0
 800e26c:	461a      	mov	r2, r3
 800e26e:	4623      	mov	r3, r4
 800e270:	f7fa f84e 	bl	8008310 <__aeabi_uldivmod>
 800e274:	4603      	mov	r3, r0
 800e276:	460c      	mov	r4, r1
 800e278:	60fb      	str	r3, [r7, #12]
 800e27a:	e049      	b.n	800e310 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e27c:	4b2f      	ldr	r3, [pc, #188]	; (800e33c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	099b      	lsrs	r3, r3, #6
 800e282:	f04f 0400 	mov.w	r4, #0
 800e286:	f240 11ff 	movw	r1, #511	; 0x1ff
 800e28a:	f04f 0200 	mov.w	r2, #0
 800e28e:	ea03 0501 	and.w	r5, r3, r1
 800e292:	ea04 0602 	and.w	r6, r4, r2
 800e296:	4629      	mov	r1, r5
 800e298:	4632      	mov	r2, r6
 800e29a:	f04f 0300 	mov.w	r3, #0
 800e29e:	f04f 0400 	mov.w	r4, #0
 800e2a2:	0154      	lsls	r4, r2, #5
 800e2a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800e2a8:	014b      	lsls	r3, r1, #5
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	4622      	mov	r2, r4
 800e2ae:	1b49      	subs	r1, r1, r5
 800e2b0:	eb62 0206 	sbc.w	r2, r2, r6
 800e2b4:	f04f 0300 	mov.w	r3, #0
 800e2b8:	f04f 0400 	mov.w	r4, #0
 800e2bc:	0194      	lsls	r4, r2, #6
 800e2be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800e2c2:	018b      	lsls	r3, r1, #6
 800e2c4:	1a5b      	subs	r3, r3, r1
 800e2c6:	eb64 0402 	sbc.w	r4, r4, r2
 800e2ca:	f04f 0100 	mov.w	r1, #0
 800e2ce:	f04f 0200 	mov.w	r2, #0
 800e2d2:	00e2      	lsls	r2, r4, #3
 800e2d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800e2d8:	00d9      	lsls	r1, r3, #3
 800e2da:	460b      	mov	r3, r1
 800e2dc:	4614      	mov	r4, r2
 800e2de:	195b      	adds	r3, r3, r5
 800e2e0:	eb44 0406 	adc.w	r4, r4, r6
 800e2e4:	f04f 0100 	mov.w	r1, #0
 800e2e8:	f04f 0200 	mov.w	r2, #0
 800e2ec:	02a2      	lsls	r2, r4, #10
 800e2ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800e2f2:	0299      	lsls	r1, r3, #10
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	4614      	mov	r4, r2
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	4621      	mov	r1, r4
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f04f 0400 	mov.w	r4, #0
 800e302:	461a      	mov	r2, r3
 800e304:	4623      	mov	r3, r4
 800e306:	f7fa f803 	bl	8008310 <__aeabi_uldivmod>
 800e30a:	4603      	mov	r3, r0
 800e30c:	460c      	mov	r4, r1
 800e30e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800e310:	4b0a      	ldr	r3, [pc, #40]	; (800e33c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e312:	685b      	ldr	r3, [r3, #4]
 800e314:	0c1b      	lsrs	r3, r3, #16
 800e316:	f003 0303 	and.w	r3, r3, #3
 800e31a:	3301      	adds	r3, #1
 800e31c:	005b      	lsls	r3, r3, #1
 800e31e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800e320:	68fa      	ldr	r2, [r7, #12]
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	fbb2 f3f3 	udiv	r3, r2, r3
 800e328:	60bb      	str	r3, [r7, #8]
      break;
 800e32a:	e002      	b.n	800e332 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e32c:	4b04      	ldr	r3, [pc, #16]	; (800e340 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800e32e:	60bb      	str	r3, [r7, #8]
      break;
 800e330:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e332:	68bb      	ldr	r3, [r7, #8]
}
 800e334:	4618      	mov	r0, r3
 800e336:	3714      	adds	r7, #20
 800e338:	46bd      	mov	sp, r7
 800e33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e33c:	40023800 	.word	0x40023800
 800e340:	00f42400 	.word	0x00f42400
 800e344:	007a1200 	.word	0x007a1200

0800e348 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e348:	b480      	push	{r7}
 800e34a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e34c:	4b03      	ldr	r3, [pc, #12]	; (800e35c <HAL_RCC_GetHCLKFreq+0x14>)
 800e34e:	681b      	ldr	r3, [r3, #0]
}
 800e350:	4618      	mov	r0, r3
 800e352:	46bd      	mov	sp, r7
 800e354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e358:	4770      	bx	lr
 800e35a:	bf00      	nop
 800e35c:	20000040 	.word	0x20000040

0800e360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e364:	f7ff fff0 	bl	800e348 <HAL_RCC_GetHCLKFreq>
 800e368:	4601      	mov	r1, r0
 800e36a:	4b05      	ldr	r3, [pc, #20]	; (800e380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e36c:	689b      	ldr	r3, [r3, #8]
 800e36e:	0a9b      	lsrs	r3, r3, #10
 800e370:	f003 0307 	and.w	r3, r3, #7
 800e374:	4a03      	ldr	r2, [pc, #12]	; (800e384 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e376:	5cd3      	ldrb	r3, [r2, r3]
 800e378:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	bd80      	pop	{r7, pc}
 800e380:	40023800 	.word	0x40023800
 800e384:	08024610 	.word	0x08024610

0800e388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e38c:	f7ff ffdc 	bl	800e348 <HAL_RCC_GetHCLKFreq>
 800e390:	4601      	mov	r1, r0
 800e392:	4b05      	ldr	r3, [pc, #20]	; (800e3a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e394:	689b      	ldr	r3, [r3, #8]
 800e396:	0b5b      	lsrs	r3, r3, #13
 800e398:	f003 0307 	and.w	r3, r3, #7
 800e39c:	4a03      	ldr	r2, [pc, #12]	; (800e3ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800e39e:	5cd3      	ldrb	r3, [r2, r3]
 800e3a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	40023800 	.word	0x40023800
 800e3ac:	08024610 	.word	0x08024610

0800e3b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b088      	sub	sp, #32
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	f003 0301 	and.w	r3, r3, #1
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d012      	beq.n	800e3fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e3d8:	4b69      	ldr	r3, [pc, #420]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e3da:	689b      	ldr	r3, [r3, #8]
 800e3dc:	4a68      	ldr	r2, [pc, #416]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e3de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e3e2:	6093      	str	r3, [r2, #8]
 800e3e4:	4b66      	ldr	r3, [pc, #408]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e3e6:	689a      	ldr	r2, [r3, #8]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ec:	4964      	ldr	r1, [pc, #400]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e3ee:	4313      	orrs	r3, r2
 800e3f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d101      	bne.n	800e3fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e406:	2b00      	cmp	r3, #0
 800e408:	d017      	beq.n	800e43a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e40a:	4b5d      	ldr	r3, [pc, #372]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e40c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e410:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e418:	4959      	ldr	r1, [pc, #356]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e41a:	4313      	orrs	r3, r2
 800e41c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e428:	d101      	bne.n	800e42e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800e42a:	2301      	movs	r3, #1
 800e42c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e432:	2b00      	cmp	r3, #0
 800e434:	d101      	bne.n	800e43a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800e436:	2301      	movs	r3, #1
 800e438:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e442:	2b00      	cmp	r3, #0
 800e444:	d017      	beq.n	800e476 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e446:	4b4e      	ldr	r3, [pc, #312]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e44c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e454:	494a      	ldr	r1, [pc, #296]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e456:	4313      	orrs	r3, r2
 800e458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e464:	d101      	bne.n	800e46a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800e466:	2301      	movs	r3, #1
 800e468:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d101      	bne.n	800e476 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800e472:	2301      	movs	r3, #1
 800e474:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d001      	beq.n	800e486 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800e482:	2301      	movs	r3, #1
 800e484:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f003 0320 	and.w	r3, r3, #32
 800e48e:	2b00      	cmp	r3, #0
 800e490:	f000 808b 	beq.w	800e5aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e494:	4b3a      	ldr	r3, [pc, #232]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e498:	4a39      	ldr	r2, [pc, #228]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e49a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e49e:	6413      	str	r3, [r2, #64]	; 0x40
 800e4a0:	4b37      	ldr	r3, [pc, #220]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e4a8:	60bb      	str	r3, [r7, #8]
 800e4aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e4ac:	4b35      	ldr	r3, [pc, #212]	; (800e584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a34      	ldr	r2, [pc, #208]	; (800e584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e4b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e4b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e4b8:	f7fc ff82 	bl	800b3c0 <HAL_GetTick>
 800e4bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e4be:	e008      	b.n	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e4c0:	f7fc ff7e 	bl	800b3c0 <HAL_GetTick>
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	1ad3      	subs	r3, r2, r3
 800e4ca:	2b64      	cmp	r3, #100	; 0x64
 800e4cc:	d901      	bls.n	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800e4ce:	2303      	movs	r3, #3
 800e4d0:	e38d      	b.n	800ebee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e4d2:	4b2c      	ldr	r3, [pc, #176]	; (800e584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d0f0      	beq.n	800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e4de:	4b28      	ldr	r3, [pc, #160]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e4e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d035      	beq.n	800e55a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4f6:	693a      	ldr	r2, [r7, #16]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d02e      	beq.n	800e55a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e4fc:	4b20      	ldr	r3, [pc, #128]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e4fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e504:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e506:	4b1e      	ldr	r3, [pc, #120]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e50a:	4a1d      	ldr	r2, [pc, #116]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e50c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e510:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e512:	4b1b      	ldr	r3, [pc, #108]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e516:	4a1a      	ldr	r2, [pc, #104]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e51c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800e51e:	4a18      	ldr	r2, [pc, #96]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e524:	4b16      	ldr	r3, [pc, #88]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e528:	f003 0301 	and.w	r3, r3, #1
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	d114      	bne.n	800e55a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e530:	f7fc ff46 	bl	800b3c0 <HAL_GetTick>
 800e534:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e536:	e00a      	b.n	800e54e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e538:	f7fc ff42 	bl	800b3c0 <HAL_GetTick>
 800e53c:	4602      	mov	r2, r0
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	1ad3      	subs	r3, r2, r3
 800e542:	f241 3288 	movw	r2, #5000	; 0x1388
 800e546:	4293      	cmp	r3, r2
 800e548:	d901      	bls.n	800e54e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800e54a:	2303      	movs	r3, #3
 800e54c:	e34f      	b.n	800ebee <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e54e:	4b0c      	ldr	r3, [pc, #48]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e552:	f003 0302 	and.w	r3, r3, #2
 800e556:	2b00      	cmp	r3, #0
 800e558:	d0ee      	beq.n	800e538 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e55e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e566:	d111      	bne.n	800e58c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800e568:	4b05      	ldr	r3, [pc, #20]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e56a:	689b      	ldr	r3, [r3, #8]
 800e56c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e574:	4b04      	ldr	r3, [pc, #16]	; (800e588 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800e576:	400b      	ands	r3, r1
 800e578:	4901      	ldr	r1, [pc, #4]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e57a:	4313      	orrs	r3, r2
 800e57c:	608b      	str	r3, [r1, #8]
 800e57e:	e00b      	b.n	800e598 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e580:	40023800 	.word	0x40023800
 800e584:	40007000 	.word	0x40007000
 800e588:	0ffffcff 	.word	0x0ffffcff
 800e58c:	4bb3      	ldr	r3, [pc, #716]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e58e:	689b      	ldr	r3, [r3, #8]
 800e590:	4ab2      	ldr	r2, [pc, #712]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e592:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e596:	6093      	str	r3, [r2, #8]
 800e598:	4bb0      	ldr	r3, [pc, #704]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e59a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e5a4:	49ad      	ldr	r1, [pc, #692]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f003 0310 	and.w	r3, r3, #16
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d010      	beq.n	800e5d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e5b6:	4ba9      	ldr	r3, [pc, #676]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e5b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5bc:	4aa7      	ldr	r2, [pc, #668]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e5be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e5c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800e5c6:	4ba5      	ldr	r3, [pc, #660]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e5c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d0:	49a2      	ldr	r1, [pc, #648]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e5d2:	4313      	orrs	r3, r2
 800e5d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d00a      	beq.n	800e5fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e5e4:	4b9d      	ldr	r3, [pc, #628]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e5e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5f2:	499a      	ldr	r1, [pc, #616]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e5f4:	4313      	orrs	r3, r2
 800e5f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e602:	2b00      	cmp	r3, #0
 800e604:	d00a      	beq.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e606:	4b95      	ldr	r3, [pc, #596]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e60c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e614:	4991      	ldr	r1, [pc, #580]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e616:	4313      	orrs	r3, r2
 800e618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e624:	2b00      	cmp	r3, #0
 800e626:	d00a      	beq.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e628:	4b8c      	ldr	r3, [pc, #560]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e62a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e62e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e636:	4989      	ldr	r1, [pc, #548]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e638:	4313      	orrs	r3, r2
 800e63a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e646:	2b00      	cmp	r3, #0
 800e648:	d00a      	beq.n	800e660 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e64a:	4b84      	ldr	r3, [pc, #528]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e64c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e650:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e658:	4980      	ldr	r1, [pc, #512]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e65a:	4313      	orrs	r3, r2
 800e65c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d00a      	beq.n	800e682 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e66c:	4b7b      	ldr	r3, [pc, #492]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e66e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e672:	f023 0203 	bic.w	r2, r3, #3
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e67a:	4978      	ldr	r1, [pc, #480]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e67c:	4313      	orrs	r3, r2
 800e67e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d00a      	beq.n	800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e68e:	4b73      	ldr	r3, [pc, #460]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e694:	f023 020c 	bic.w	r2, r3, #12
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e69c:	496f      	ldr	r1, [pc, #444]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e69e:	4313      	orrs	r3, r2
 800e6a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d00a      	beq.n	800e6c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e6b0:	4b6a      	ldr	r3, [pc, #424]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e6b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6be:	4967      	ldr	r1, [pc, #412]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e6c0:	4313      	orrs	r3, r2
 800e6c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00a      	beq.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e6d2:	4b62      	ldr	r3, [pc, #392]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6e0:	495e      	ldr	r1, [pc, #376]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d00a      	beq.n	800e70a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e6f4:	4b59      	ldr	r3, [pc, #356]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e6f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e702:	4956      	ldr	r1, [pc, #344]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e704:	4313      	orrs	r3, r2
 800e706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e712:	2b00      	cmp	r3, #0
 800e714:	d00a      	beq.n	800e72c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e716:	4b51      	ldr	r3, [pc, #324]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e71c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e724:	494d      	ldr	r1, [pc, #308]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e726:	4313      	orrs	r3, r2
 800e728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e734:	2b00      	cmp	r3, #0
 800e736:	d00a      	beq.n	800e74e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e738:	4b48      	ldr	r3, [pc, #288]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e73a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e73e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e746:	4945      	ldr	r1, [pc, #276]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e748:	4313      	orrs	r3, r2
 800e74a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e756:	2b00      	cmp	r3, #0
 800e758:	d00a      	beq.n	800e770 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e75a:	4b40      	ldr	r3, [pc, #256]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e75c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e760:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e768:	493c      	ldr	r1, [pc, #240]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e76a:	4313      	orrs	r3, r2
 800e76c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d00a      	beq.n	800e792 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e77c:	4b37      	ldr	r3, [pc, #220]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e77e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e782:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e78a:	4934      	ldr	r1, [pc, #208]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e78c:	4313      	orrs	r3, r2
 800e78e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d011      	beq.n	800e7c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e79e:	4b2f      	ldr	r3, [pc, #188]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e7a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7ac:	492b      	ldr	r1, [pc, #172]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e7ae:	4313      	orrs	r3, r2
 800e7b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e7bc:	d101      	bne.n	800e7c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f003 0308 	and.w	r3, r3, #8
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d001      	beq.n	800e7d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d00a      	beq.n	800e7f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e7de:	4b1f      	ldr	r3, [pc, #124]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e7e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7ec:	491b      	ldr	r1, [pc, #108]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e7ee:	4313      	orrs	r3, r2
 800e7f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d00b      	beq.n	800e818 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e800:	4b16      	ldr	r3, [pc, #88]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e806:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e810:	4912      	ldr	r1, [pc, #72]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e812:	4313      	orrs	r3, r2
 800e814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e820:	2b00      	cmp	r3, #0
 800e822:	d00b      	beq.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800e824:	4b0d      	ldr	r3, [pc, #52]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e82a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e834:	4909      	ldr	r1, [pc, #36]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e836:	4313      	orrs	r3, r2
 800e838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e844:	2b00      	cmp	r3, #0
 800e846:	d00f      	beq.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e848:	4b04      	ldr	r3, [pc, #16]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e84a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e84e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e858:	e002      	b.n	800e860 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800e85a:	bf00      	nop
 800e85c:	40023800 	.word	0x40023800
 800e860:	4985      	ldr	r1, [pc, #532]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e862:	4313      	orrs	r3, r2
 800e864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e870:	2b00      	cmp	r3, #0
 800e872:	d00b      	beq.n	800e88c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800e874:	4b80      	ldr	r3, [pc, #512]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e87a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e884:	497c      	ldr	r1, [pc, #496]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e886:	4313      	orrs	r3, r2
 800e888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800e88c:	69fb      	ldr	r3, [r7, #28]
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d005      	beq.n	800e89e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e89a:	f040 80d6 	bne.w	800ea4a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e89e:	4b76      	ldr	r3, [pc, #472]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a75      	ldr	r2, [pc, #468]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e8a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e8a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e8aa:	f7fc fd89 	bl	800b3c0 <HAL_GetTick>
 800e8ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e8b0:	e008      	b.n	800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e8b2:	f7fc fd85 	bl	800b3c0 <HAL_GetTick>
 800e8b6:	4602      	mov	r2, r0
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	1ad3      	subs	r3, r2, r3
 800e8bc:	2b64      	cmp	r3, #100	; 0x64
 800e8be:	d901      	bls.n	800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e8c0:	2303      	movs	r3, #3
 800e8c2:	e194      	b.n	800ebee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e8c4:	4b6c      	ldr	r3, [pc, #432]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d1f0      	bne.n	800e8b2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f003 0301 	and.w	r3, r3, #1
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d021      	beq.n	800e920 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d11d      	bne.n	800e920 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e8e4:	4b64      	ldr	r3, [pc, #400]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e8e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8ea:	0c1b      	lsrs	r3, r3, #16
 800e8ec:	f003 0303 	and.w	r3, r3, #3
 800e8f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e8f2:	4b61      	ldr	r3, [pc, #388]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e8f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8f8:	0e1b      	lsrs	r3, r3, #24
 800e8fa:	f003 030f 	and.w	r3, r3, #15
 800e8fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	019a      	lsls	r2, r3, #6
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	041b      	lsls	r3, r3, #16
 800e90a:	431a      	orrs	r2, r3
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	061b      	lsls	r3, r3, #24
 800e910:	431a      	orrs	r2, r3
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	689b      	ldr	r3, [r3, #8]
 800e916:	071b      	lsls	r3, r3, #28
 800e918:	4957      	ldr	r1, [pc, #348]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e91a:	4313      	orrs	r3, r2
 800e91c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d004      	beq.n	800e936 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e930:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e934:	d00a      	beq.n	800e94c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d02e      	beq.n	800e9a0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e94a:	d129      	bne.n	800e9a0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e94c:	4b4a      	ldr	r3, [pc, #296]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e94e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e952:	0c1b      	lsrs	r3, r3, #16
 800e954:	f003 0303 	and.w	r3, r3, #3
 800e958:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e95a:	4b47      	ldr	r3, [pc, #284]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e95c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e960:	0f1b      	lsrs	r3, r3, #28
 800e962:	f003 0307 	and.w	r3, r3, #7
 800e966:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	019a      	lsls	r2, r3, #6
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	041b      	lsls	r3, r3, #16
 800e972:	431a      	orrs	r2, r3
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	68db      	ldr	r3, [r3, #12]
 800e978:	061b      	lsls	r3, r3, #24
 800e97a:	431a      	orrs	r2, r3
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	071b      	lsls	r3, r3, #28
 800e980:	493d      	ldr	r1, [pc, #244]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e982:	4313      	orrs	r3, r2
 800e984:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e988:	4b3b      	ldr	r3, [pc, #236]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e98a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e98e:	f023 021f 	bic.w	r2, r3, #31
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e996:	3b01      	subs	r3, #1
 800e998:	4937      	ldr	r1, [pc, #220]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e99a:	4313      	orrs	r3, r2
 800e99c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d01d      	beq.n	800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e9ac:	4b32      	ldr	r3, [pc, #200]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e9ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9b2:	0e1b      	lsrs	r3, r3, #24
 800e9b4:	f003 030f 	and.w	r3, r3, #15
 800e9b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e9ba:	4b2f      	ldr	r3, [pc, #188]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e9bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9c0:	0f1b      	lsrs	r3, r3, #28
 800e9c2:	f003 0307 	and.w	r3, r3, #7
 800e9c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	685b      	ldr	r3, [r3, #4]
 800e9cc:	019a      	lsls	r2, r3, #6
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	691b      	ldr	r3, [r3, #16]
 800e9d2:	041b      	lsls	r3, r3, #16
 800e9d4:	431a      	orrs	r2, r3
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	061b      	lsls	r3, r3, #24
 800e9da:	431a      	orrs	r2, r3
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	071b      	lsls	r3, r3, #28
 800e9e0:	4925      	ldr	r1, [pc, #148]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d011      	beq.n	800ea18 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	019a      	lsls	r2, r3, #6
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	691b      	ldr	r3, [r3, #16]
 800e9fe:	041b      	lsls	r3, r3, #16
 800ea00:	431a      	orrs	r2, r3
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	68db      	ldr	r3, [r3, #12]
 800ea06:	061b      	lsls	r3, r3, #24
 800ea08:	431a      	orrs	r2, r3
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	689b      	ldr	r3, [r3, #8]
 800ea0e:	071b      	lsls	r3, r3, #28
 800ea10:	4919      	ldr	r1, [pc, #100]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ea12:	4313      	orrs	r3, r2
 800ea14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ea18:	4b17      	ldr	r3, [pc, #92]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4a16      	ldr	r2, [pc, #88]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ea1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ea22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ea24:	f7fc fccc 	bl	800b3c0 <HAL_GetTick>
 800ea28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ea2a:	e008      	b.n	800ea3e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ea2c:	f7fc fcc8 	bl	800b3c0 <HAL_GetTick>
 800ea30:	4602      	mov	r2, r0
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	1ad3      	subs	r3, r2, r3
 800ea36:	2b64      	cmp	r3, #100	; 0x64
 800ea38:	d901      	bls.n	800ea3e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ea3a:	2303      	movs	r3, #3
 800ea3c:	e0d7      	b.n	800ebee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ea3e:	4b0e      	ldr	r3, [pc, #56]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d0f0      	beq.n	800ea2c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ea4a:	69bb      	ldr	r3, [r7, #24]
 800ea4c:	2b01      	cmp	r3, #1
 800ea4e:	f040 80cd 	bne.w	800ebec <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ea52:	4b09      	ldr	r3, [pc, #36]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	4a08      	ldr	r2, [pc, #32]	; (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ea58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ea5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ea5e:	f7fc fcaf 	bl	800b3c0 <HAL_GetTick>
 800ea62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ea64:	e00a      	b.n	800ea7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ea66:	f7fc fcab 	bl	800b3c0 <HAL_GetTick>
 800ea6a:	4602      	mov	r2, r0
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	1ad3      	subs	r3, r2, r3
 800ea70:	2b64      	cmp	r3, #100	; 0x64
 800ea72:	d903      	bls.n	800ea7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ea74:	2303      	movs	r3, #3
 800ea76:	e0ba      	b.n	800ebee <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800ea78:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ea7c:	4b5e      	ldr	r3, [pc, #376]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ea84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea88:	d0ed      	beq.n	800ea66 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d003      	beq.n	800ea9e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d009      	beq.n	800eab2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d02e      	beq.n	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d12a      	bne.n	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800eab2:	4b51      	ldr	r3, [pc, #324]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800eab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eab8:	0c1b      	lsrs	r3, r3, #16
 800eaba:	f003 0303 	and.w	r3, r3, #3
 800eabe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800eac0:	4b4d      	ldr	r3, [pc, #308]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800eac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eac6:	0f1b      	lsrs	r3, r3, #28
 800eac8:	f003 0307 	and.w	r3, r3, #7
 800eacc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	695b      	ldr	r3, [r3, #20]
 800ead2:	019a      	lsls	r2, r3, #6
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	041b      	lsls	r3, r3, #16
 800ead8:	431a      	orrs	r2, r3
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	699b      	ldr	r3, [r3, #24]
 800eade:	061b      	lsls	r3, r3, #24
 800eae0:	431a      	orrs	r2, r3
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	071b      	lsls	r3, r3, #28
 800eae6:	4944      	ldr	r1, [pc, #272]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800eae8:	4313      	orrs	r3, r2
 800eaea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800eaee:	4b42      	ldr	r3, [pc, #264]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800eaf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eaf4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eafc:	3b01      	subs	r3, #1
 800eafe:	021b      	lsls	r3, r3, #8
 800eb00:	493d      	ldr	r1, [pc, #244]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800eb02:	4313      	orrs	r3, r2
 800eb04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d022      	beq.n	800eb5a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eb1c:	d11d      	bne.n	800eb5a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800eb1e:	4b36      	ldr	r3, [pc, #216]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800eb20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb24:	0e1b      	lsrs	r3, r3, #24
 800eb26:	f003 030f 	and.w	r3, r3, #15
 800eb2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800eb2c:	4b32      	ldr	r3, [pc, #200]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800eb2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb32:	0f1b      	lsrs	r3, r3, #28
 800eb34:	f003 0307 	and.w	r3, r3, #7
 800eb38:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	695b      	ldr	r3, [r3, #20]
 800eb3e:	019a      	lsls	r2, r3, #6
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	6a1b      	ldr	r3, [r3, #32]
 800eb44:	041b      	lsls	r3, r3, #16
 800eb46:	431a      	orrs	r2, r3
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	061b      	lsls	r3, r3, #24
 800eb4c:	431a      	orrs	r2, r3
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	071b      	lsls	r3, r3, #28
 800eb52:	4929      	ldr	r1, [pc, #164]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800eb54:	4313      	orrs	r3, r2
 800eb56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f003 0308 	and.w	r3, r3, #8
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d028      	beq.n	800ebb8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800eb66:	4b24      	ldr	r3, [pc, #144]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800eb68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb6c:	0e1b      	lsrs	r3, r3, #24
 800eb6e:	f003 030f 	and.w	r3, r3, #15
 800eb72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800eb74:	4b20      	ldr	r3, [pc, #128]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800eb76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb7a:	0c1b      	lsrs	r3, r3, #16
 800eb7c:	f003 0303 	and.w	r3, r3, #3
 800eb80:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	695b      	ldr	r3, [r3, #20]
 800eb86:	019a      	lsls	r2, r3, #6
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	041b      	lsls	r3, r3, #16
 800eb8c:	431a      	orrs	r2, r3
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	061b      	lsls	r3, r3, #24
 800eb92:	431a      	orrs	r2, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	69db      	ldr	r3, [r3, #28]
 800eb98:	071b      	lsls	r3, r3, #28
 800eb9a:	4917      	ldr	r1, [pc, #92]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800eb9c:	4313      	orrs	r3, r2
 800eb9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800eba2:	4b15      	ldr	r3, [pc, #84]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800eba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eba8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb0:	4911      	ldr	r1, [pc, #68]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ebb2:	4313      	orrs	r3, r2
 800ebb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ebb8:	4b0f      	ldr	r3, [pc, #60]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	4a0e      	ldr	r2, [pc, #56]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ebbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ebc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ebc4:	f7fc fbfc 	bl	800b3c0 <HAL_GetTick>
 800ebc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ebca:	e008      	b.n	800ebde <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ebcc:	f7fc fbf8 	bl	800b3c0 <HAL_GetTick>
 800ebd0:	4602      	mov	r2, r0
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	1ad3      	subs	r3, r2, r3
 800ebd6:	2b64      	cmp	r3, #100	; 0x64
 800ebd8:	d901      	bls.n	800ebde <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ebda:	2303      	movs	r3, #3
 800ebdc:	e007      	b.n	800ebee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ebde:	4b06      	ldr	r3, [pc, #24]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ebe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ebea:	d1ef      	bne.n	800ebcc <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800ebec:	2300      	movs	r3, #0
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3720      	adds	r7, #32
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	40023800 	.word	0x40023800

0800ebfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d101      	bne.n	800ec0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	e084      	b.n	800ed18 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2200      	movs	r2, #0
 800ec12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d106      	bne.n	800ec2e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2200      	movs	r2, #0
 800ec24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f7fb fe3f 	bl	800a8ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2202      	movs	r2, #2
 800ec32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	681a      	ldr	r2, [r3, #0]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec44:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ec4e:	d902      	bls.n	800ec56 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ec50:	2300      	movs	r3, #0
 800ec52:	60fb      	str	r3, [r7, #12]
 800ec54:	e002      	b.n	800ec5c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ec56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec5a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ec64:	d007      	beq.n	800ec76 <HAL_SPI_Init+0x7a>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	68db      	ldr	r3, [r3, #12]
 800ec6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ec6e:	d002      	beq.n	800ec76 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d10b      	bne.n	800ec96 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	68db      	ldr	r3, [r3, #12]
 800ec82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ec86:	d903      	bls.n	800ec90 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2202      	movs	r2, #2
 800ec8c:	631a      	str	r2, [r3, #48]	; 0x30
 800ec8e:	e002      	b.n	800ec96 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2201      	movs	r2, #1
 800ec94:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	685a      	ldr	r2, [r3, #4]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	689b      	ldr	r3, [r3, #8]
 800ec9e:	431a      	orrs	r2, r3
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	691b      	ldr	r3, [r3, #16]
 800eca4:	431a      	orrs	r2, r3
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	695b      	ldr	r3, [r3, #20]
 800ecaa:	431a      	orrs	r2, r3
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	699b      	ldr	r3, [r3, #24]
 800ecb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ecb4:	431a      	orrs	r2, r3
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	69db      	ldr	r3, [r3, #28]
 800ecba:	431a      	orrs	r2, r3
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6a1b      	ldr	r3, [r3, #32]
 800ecc0:	ea42 0103 	orr.w	r1, r2, r3
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	430a      	orrs	r2, r1
 800ecce:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	699b      	ldr	r3, [r3, #24]
 800ecd4:	0c1b      	lsrs	r3, r3, #16
 800ecd6:	f003 0204 	and.w	r2, r3, #4
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecde:	431a      	orrs	r2, r3
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ece4:	431a      	orrs	r2, r3
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	68db      	ldr	r3, [r3, #12]
 800ecea:	ea42 0103 	orr.w	r1, r2, r3
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	68fa      	ldr	r2, [r7, #12]
 800ecf4:	430a      	orrs	r2, r1
 800ecf6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	69da      	ldr	r2, [r3, #28]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ed06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2201      	movs	r2, #1
 800ed12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ed16:	2300      	movs	r3, #0
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3710      	adds	r7, #16
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b082      	sub	sp, #8
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d101      	bne.n	800ed32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	e01d      	b.n	800ed6e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed38:	b2db      	uxtb	r3, r3
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d106      	bne.n	800ed4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2200      	movs	r2, #0
 800ed42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f7fb fe12 	bl	800a970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2202      	movs	r2, #2
 800ed50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681a      	ldr	r2, [r3, #0]
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	3304      	adds	r3, #4
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	4610      	mov	r0, r2
 800ed60:	f000 fb66 	bl	800f430 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2201      	movs	r2, #1
 800ed68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ed6c:	2300      	movs	r3, #0
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3708      	adds	r7, #8
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
	...

0800ed78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b085      	sub	sp, #20
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2202      	movs	r2, #2
 800ed84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	689a      	ldr	r2, [r3, #8]
 800ed8e:	4b0e      	ldr	r3, [pc, #56]	; (800edc8 <HAL_TIM_Base_Start+0x50>)
 800ed90:	4013      	ands	r3, r2
 800ed92:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	2b06      	cmp	r3, #6
 800ed98:	d00b      	beq.n	800edb2 <HAL_TIM_Base_Start+0x3a>
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eda0:	d007      	beq.n	800edb2 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	681a      	ldr	r2, [r3, #0]
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	f042 0201 	orr.w	r2, r2, #1
 800edb0:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2201      	movs	r2, #1
 800edb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800edba:	2300      	movs	r3, #0
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3714      	adds	r7, #20
 800edc0:	46bd      	mov	sp, r7
 800edc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc6:	4770      	bx	lr
 800edc8:	00010007 	.word	0x00010007

0800edcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800edcc:	b480      	push	{r7}
 800edce:	b085      	sub	sp, #20
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	68da      	ldr	r2, [r3, #12]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	f042 0201 	orr.w	r2, r2, #1
 800ede2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	689a      	ldr	r2, [r3, #8]
 800edea:	4b0c      	ldr	r3, [pc, #48]	; (800ee1c <HAL_TIM_Base_Start_IT+0x50>)
 800edec:	4013      	ands	r3, r2
 800edee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2b06      	cmp	r3, #6
 800edf4:	d00b      	beq.n	800ee0e <HAL_TIM_Base_Start_IT+0x42>
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edfc:	d007      	beq.n	800ee0e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	681a      	ldr	r2, [r3, #0]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	f042 0201 	orr.w	r2, r2, #1
 800ee0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ee0e:	2300      	movs	r3, #0
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3714      	adds	r7, #20
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr
 800ee1c:	00010007 	.word	0x00010007

0800ee20 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ee20:	b480      	push	{r7}
 800ee22:	b083      	sub	sp, #12
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	68da      	ldr	r2, [r3, #12]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	f022 0201 	bic.w	r2, r2, #1
 800ee36:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	6a1a      	ldr	r2, [r3, #32]
 800ee3e:	f241 1311 	movw	r3, #4369	; 0x1111
 800ee42:	4013      	ands	r3, r2
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d10f      	bne.n	800ee68 <HAL_TIM_Base_Stop_IT+0x48>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	6a1a      	ldr	r2, [r3, #32]
 800ee4e:	f240 4344 	movw	r3, #1092	; 0x444
 800ee52:	4013      	ands	r3, r2
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d107      	bne.n	800ee68 <HAL_TIM_Base_Stop_IT+0x48>
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	681a      	ldr	r2, [r3, #0]
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	f022 0201 	bic.w	r2, r2, #1
 800ee66:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ee68:	2300      	movs	r3, #0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	370c      	adds	r7, #12
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee74:	4770      	bx	lr

0800ee76 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800ee76:	b580      	push	{r7, lr}
 800ee78:	b082      	sub	sp, #8
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d101      	bne.n	800ee88 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800ee84:	2301      	movs	r3, #1
 800ee86:	e01d      	b.n	800eec4 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d106      	bne.n	800eea2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2200      	movs	r2, #0
 800ee98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f000 f815 	bl	800eecc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2202      	movs	r2, #2
 800eea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681a      	ldr	r2, [r3, #0]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	3304      	adds	r3, #4
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	4610      	mov	r0, r2
 800eeb6:	f000 fabb 	bl	800f430 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2201      	movs	r2, #1
 800eebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eec2:	2300      	movs	r3, #0
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3708      	adds	r7, #8
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800eecc:	b480      	push	{r7}
 800eece:	b083      	sub	sp, #12
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800eed4:	bf00      	nop
 800eed6:	370c      	adds	r7, #12
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr

0800eee0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	691b      	ldr	r3, [r3, #16]
 800eeee:	f003 0302 	and.w	r3, r3, #2
 800eef2:	2b02      	cmp	r3, #2
 800eef4:	d122      	bne.n	800ef3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	68db      	ldr	r3, [r3, #12]
 800eefc:	f003 0302 	and.w	r3, r3, #2
 800ef00:	2b02      	cmp	r3, #2
 800ef02:	d11b      	bne.n	800ef3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f06f 0202 	mvn.w	r2, #2
 800ef0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2201      	movs	r2, #1
 800ef12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	699b      	ldr	r3, [r3, #24]
 800ef1a:	f003 0303 	and.w	r3, r3, #3
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d003      	beq.n	800ef2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f000 fa66 	bl	800f3f4 <HAL_TIM_IC_CaptureCallback>
 800ef28:	e005      	b.n	800ef36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f000 fa58 	bl	800f3e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f000 fa69 	bl	800f408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	691b      	ldr	r3, [r3, #16]
 800ef42:	f003 0304 	and.w	r3, r3, #4
 800ef46:	2b04      	cmp	r3, #4
 800ef48:	d122      	bne.n	800ef90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	68db      	ldr	r3, [r3, #12]
 800ef50:	f003 0304 	and.w	r3, r3, #4
 800ef54:	2b04      	cmp	r3, #4
 800ef56:	d11b      	bne.n	800ef90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f06f 0204 	mvn.w	r2, #4
 800ef60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2202      	movs	r2, #2
 800ef66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	699b      	ldr	r3, [r3, #24]
 800ef6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d003      	beq.n	800ef7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f000 fa3c 	bl	800f3f4 <HAL_TIM_IC_CaptureCallback>
 800ef7c:	e005      	b.n	800ef8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f000 fa2e 	bl	800f3e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f000 fa3f 	bl	800f408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	691b      	ldr	r3, [r3, #16]
 800ef96:	f003 0308 	and.w	r3, r3, #8
 800ef9a:	2b08      	cmp	r3, #8
 800ef9c:	d122      	bne.n	800efe4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	68db      	ldr	r3, [r3, #12]
 800efa4:	f003 0308 	and.w	r3, r3, #8
 800efa8:	2b08      	cmp	r3, #8
 800efaa:	d11b      	bne.n	800efe4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f06f 0208 	mvn.w	r2, #8
 800efb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2204      	movs	r2, #4
 800efba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	69db      	ldr	r3, [r3, #28]
 800efc2:	f003 0303 	and.w	r3, r3, #3
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d003      	beq.n	800efd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f000 fa12 	bl	800f3f4 <HAL_TIM_IC_CaptureCallback>
 800efd0:	e005      	b.n	800efde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f000 fa04 	bl	800f3e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f000 fa15 	bl	800f408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2200      	movs	r2, #0
 800efe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	691b      	ldr	r3, [r3, #16]
 800efea:	f003 0310 	and.w	r3, r3, #16
 800efee:	2b10      	cmp	r3, #16
 800eff0:	d122      	bne.n	800f038 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	68db      	ldr	r3, [r3, #12]
 800eff8:	f003 0310 	and.w	r3, r3, #16
 800effc:	2b10      	cmp	r3, #16
 800effe:	d11b      	bne.n	800f038 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	f06f 0210 	mvn.w	r2, #16
 800f008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2208      	movs	r2, #8
 800f00e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	69db      	ldr	r3, [r3, #28]
 800f016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d003      	beq.n	800f026 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f000 f9e8 	bl	800f3f4 <HAL_TIM_IC_CaptureCallback>
 800f024:	e005      	b.n	800f032 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f000 f9da 	bl	800f3e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f000 f9eb 	bl	800f408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2200      	movs	r2, #0
 800f036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	691b      	ldr	r3, [r3, #16]
 800f03e:	f003 0301 	and.w	r3, r3, #1
 800f042:	2b01      	cmp	r3, #1
 800f044:	d10e      	bne.n	800f064 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	f003 0301 	and.w	r3, r3, #1
 800f050:	2b01      	cmp	r3, #1
 800f052:	d107      	bne.n	800f064 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f06f 0201 	mvn.w	r2, #1
 800f05c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f000 f9b4 	bl	800f3cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	691b      	ldr	r3, [r3, #16]
 800f06a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f06e:	2b80      	cmp	r3, #128	; 0x80
 800f070:	d10e      	bne.n	800f090 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f07c:	2b80      	cmp	r3, #128	; 0x80
 800f07e:	d107      	bne.n	800f090 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f000 fccc 	bl	800fa28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	691b      	ldr	r3, [r3, #16]
 800f096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f09a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f09e:	d10e      	bne.n	800f0be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	68db      	ldr	r3, [r3, #12]
 800f0a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0aa:	2b80      	cmp	r3, #128	; 0x80
 800f0ac:	d107      	bne.n	800f0be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f0b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f000 fcbf 	bl	800fa3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	691b      	ldr	r3, [r3, #16]
 800f0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0c8:	2b40      	cmp	r3, #64	; 0x40
 800f0ca:	d10e      	bne.n	800f0ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	68db      	ldr	r3, [r3, #12]
 800f0d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0d6:	2b40      	cmp	r3, #64	; 0x40
 800f0d8:	d107      	bne.n	800f0ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f0e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f000 f999 	bl	800f41c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	691b      	ldr	r3, [r3, #16]
 800f0f0:	f003 0320 	and.w	r3, r3, #32
 800f0f4:	2b20      	cmp	r3, #32
 800f0f6:	d10e      	bne.n	800f116 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	68db      	ldr	r3, [r3, #12]
 800f0fe:	f003 0320 	and.w	r3, r3, #32
 800f102:	2b20      	cmp	r3, #32
 800f104:	d107      	bne.n	800f116 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	f06f 0220 	mvn.w	r2, #32
 800f10e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f000 fc7f 	bl	800fa14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f116:	bf00      	nop
 800f118:	3708      	adds	r7, #8
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}

0800f11e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800f11e:	b580      	push	{r7, lr}
 800f120:	b084      	sub	sp, #16
 800f122:	af00      	add	r7, sp, #0
 800f124:	60f8      	str	r0, [r7, #12]
 800f126:	60b9      	str	r1, [r7, #8]
 800f128:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f130:	2b01      	cmp	r3, #1
 800f132:	d101      	bne.n	800f138 <HAL_TIM_IC_ConfigChannel+0x1a>
 800f134:	2302      	movs	r3, #2
 800f136:	e08a      	b.n	800f24e <HAL_TIM_IC_ConfigChannel+0x130>
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	2201      	movs	r2, #1
 800f13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	2202      	movs	r2, #2
 800f144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d11b      	bne.n	800f186 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	6818      	ldr	r0, [r3, #0]
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	6819      	ldr	r1, [r3, #0]
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	685a      	ldr	r2, [r3, #4]
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	68db      	ldr	r3, [r3, #12]
 800f15e:	f000 fa07 	bl	800f570 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	699a      	ldr	r2, [r3, #24]
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	f022 020c 	bic.w	r2, r2, #12
 800f170:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	6999      	ldr	r1, [r3, #24]
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	689a      	ldr	r2, [r3, #8]
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	430a      	orrs	r2, r1
 800f182:	619a      	str	r2, [r3, #24]
 800f184:	e05a      	b.n	800f23c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2b04      	cmp	r3, #4
 800f18a:	d11c      	bne.n	800f1c6 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	6818      	ldr	r0, [r3, #0]
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	6819      	ldr	r1, [r3, #0]
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	685a      	ldr	r2, [r3, #4]
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	68db      	ldr	r3, [r3, #12]
 800f19c:	f000 fa8b 	bl	800f6b6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	699a      	ldr	r2, [r3, #24]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f1ae:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	6999      	ldr	r1, [r3, #24]
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	689b      	ldr	r3, [r3, #8]
 800f1ba:	021a      	lsls	r2, r3, #8
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	430a      	orrs	r2, r1
 800f1c2:	619a      	str	r2, [r3, #24]
 800f1c4:	e03a      	b.n	800f23c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2b08      	cmp	r3, #8
 800f1ca:	d11b      	bne.n	800f204 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	6818      	ldr	r0, [r3, #0]
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	6819      	ldr	r1, [r3, #0]
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	685a      	ldr	r2, [r3, #4]
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	68db      	ldr	r3, [r3, #12]
 800f1dc:	f000 fad8 	bl	800f790 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	69da      	ldr	r2, [r3, #28]
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f022 020c 	bic.w	r2, r2, #12
 800f1ee:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	69d9      	ldr	r1, [r3, #28]
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	689a      	ldr	r2, [r3, #8]
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	430a      	orrs	r2, r1
 800f200:	61da      	str	r2, [r3, #28]
 800f202:	e01b      	b.n	800f23c <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	6818      	ldr	r0, [r3, #0]
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	6819      	ldr	r1, [r3, #0]
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	685a      	ldr	r2, [r3, #4]
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	68db      	ldr	r3, [r3, #12]
 800f214:	f000 faf8 	bl	800f808 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	69da      	ldr	r2, [r3, #28]
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f226:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	69d9      	ldr	r1, [r3, #28]
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	689b      	ldr	r3, [r3, #8]
 800f232:	021a      	lsls	r2, r3, #8
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	430a      	orrs	r2, r1
 800f23a:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	2201      	movs	r2, #1
 800f240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2200      	movs	r2, #0
 800f248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f24c:	2300      	movs	r3, #0
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3710      	adds	r7, #16
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}
	...

0800f258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f268:	2b01      	cmp	r3, #1
 800f26a:	d101      	bne.n	800f270 <HAL_TIM_ConfigClockSource+0x18>
 800f26c:	2302      	movs	r3, #2
 800f26e:	e0a6      	b.n	800f3be <HAL_TIM_ConfigClockSource+0x166>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2201      	movs	r2, #1
 800f274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2202      	movs	r2, #2
 800f27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	689b      	ldr	r3, [r3, #8]
 800f286:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f288:	68fa      	ldr	r2, [r7, #12]
 800f28a:	4b4f      	ldr	r3, [pc, #316]	; (800f3c8 <HAL_TIM_ConfigClockSource+0x170>)
 800f28c:	4013      	ands	r3, r2
 800f28e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f296:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	68fa      	ldr	r2, [r7, #12]
 800f29e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	2b40      	cmp	r3, #64	; 0x40
 800f2a6:	d067      	beq.n	800f378 <HAL_TIM_ConfigClockSource+0x120>
 800f2a8:	2b40      	cmp	r3, #64	; 0x40
 800f2aa:	d80b      	bhi.n	800f2c4 <HAL_TIM_ConfigClockSource+0x6c>
 800f2ac:	2b10      	cmp	r3, #16
 800f2ae:	d073      	beq.n	800f398 <HAL_TIM_ConfigClockSource+0x140>
 800f2b0:	2b10      	cmp	r3, #16
 800f2b2:	d802      	bhi.n	800f2ba <HAL_TIM_ConfigClockSource+0x62>
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d06f      	beq.n	800f398 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800f2b8:	e078      	b.n	800f3ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f2ba:	2b20      	cmp	r3, #32
 800f2bc:	d06c      	beq.n	800f398 <HAL_TIM_ConfigClockSource+0x140>
 800f2be:	2b30      	cmp	r3, #48	; 0x30
 800f2c0:	d06a      	beq.n	800f398 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800f2c2:	e073      	b.n	800f3ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f2c4:	2b70      	cmp	r3, #112	; 0x70
 800f2c6:	d00d      	beq.n	800f2e4 <HAL_TIM_ConfigClockSource+0x8c>
 800f2c8:	2b70      	cmp	r3, #112	; 0x70
 800f2ca:	d804      	bhi.n	800f2d6 <HAL_TIM_ConfigClockSource+0x7e>
 800f2cc:	2b50      	cmp	r3, #80	; 0x50
 800f2ce:	d033      	beq.n	800f338 <HAL_TIM_ConfigClockSource+0xe0>
 800f2d0:	2b60      	cmp	r3, #96	; 0x60
 800f2d2:	d041      	beq.n	800f358 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800f2d4:	e06a      	b.n	800f3ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f2d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2da:	d066      	beq.n	800f3aa <HAL_TIM_ConfigClockSource+0x152>
 800f2dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2e0:	d017      	beq.n	800f312 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800f2e2:	e063      	b.n	800f3ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6818      	ldr	r0, [r3, #0]
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	6899      	ldr	r1, [r3, #8]
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	685a      	ldr	r2, [r3, #4]
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	f000 fae0 	bl	800f8b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	689b      	ldr	r3, [r3, #8]
 800f2fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f306:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	68fa      	ldr	r2, [r7, #12]
 800f30e:	609a      	str	r2, [r3, #8]
      break;
 800f310:	e04c      	b.n	800f3ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6818      	ldr	r0, [r3, #0]
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	6899      	ldr	r1, [r3, #8]
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	685a      	ldr	r2, [r3, #4]
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	68db      	ldr	r3, [r3, #12]
 800f322:	f000 fac9 	bl	800f8b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	689a      	ldr	r2, [r3, #8]
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f334:	609a      	str	r2, [r3, #8]
      break;
 800f336:	e039      	b.n	800f3ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6818      	ldr	r0, [r3, #0]
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	6859      	ldr	r1, [r3, #4]
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	68db      	ldr	r3, [r3, #12]
 800f344:	461a      	mov	r2, r3
 800f346:	f000 f987 	bl	800f658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	2150      	movs	r1, #80	; 0x50
 800f350:	4618      	mov	r0, r3
 800f352:	f000 fa96 	bl	800f882 <TIM_ITRx_SetConfig>
      break;
 800f356:	e029      	b.n	800f3ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	6818      	ldr	r0, [r3, #0]
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	6859      	ldr	r1, [r3, #4]
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	461a      	mov	r2, r3
 800f366:	f000 f9e3 	bl	800f730 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	2160      	movs	r1, #96	; 0x60
 800f370:	4618      	mov	r0, r3
 800f372:	f000 fa86 	bl	800f882 <TIM_ITRx_SetConfig>
      break;
 800f376:	e019      	b.n	800f3ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6818      	ldr	r0, [r3, #0]
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	6859      	ldr	r1, [r3, #4]
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	68db      	ldr	r3, [r3, #12]
 800f384:	461a      	mov	r2, r3
 800f386:	f000 f967 	bl	800f658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	2140      	movs	r1, #64	; 0x40
 800f390:	4618      	mov	r0, r3
 800f392:	f000 fa76 	bl	800f882 <TIM_ITRx_SetConfig>
      break;
 800f396:	e009      	b.n	800f3ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	4610      	mov	r0, r2
 800f3a4:	f000 fa6d 	bl	800f882 <TIM_ITRx_SetConfig>
      break;
 800f3a8:	e000      	b.n	800f3ac <HAL_TIM_ConfigClockSource+0x154>
      break;
 800f3aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f3bc:	2300      	movs	r3, #0
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3710      	adds	r7, #16
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	fffeff88 	.word	0xfffeff88

0800f3cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b083      	sub	sp, #12
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f3d4:	bf00      	nop
 800f3d6:	370c      	adds	r7, #12
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr

0800f3e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f3e0:	b480      	push	{r7}
 800f3e2:	b083      	sub	sp, #12
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f3e8:	bf00      	nop
 800f3ea:	370c      	adds	r7, #12
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f2:	4770      	bx	lr

0800f3f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b083      	sub	sp, #12
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f3fc:	bf00      	nop
 800f3fe:	370c      	adds	r7, #12
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr

0800f408 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f408:	b480      	push	{r7}
 800f40a:	b083      	sub	sp, #12
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f410:	bf00      	nop
 800f412:	370c      	adds	r7, #12
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr

0800f41c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f41c:	b480      	push	{r7}
 800f41e:	b083      	sub	sp, #12
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f424:	bf00      	nop
 800f426:	370c      	adds	r7, #12
 800f428:	46bd      	mov	sp, r7
 800f42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42e:	4770      	bx	lr

0800f430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f430:	b480      	push	{r7}
 800f432:	b085      	sub	sp, #20
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	4a40      	ldr	r2, [pc, #256]	; (800f544 <TIM_Base_SetConfig+0x114>)
 800f444:	4293      	cmp	r3, r2
 800f446:	d013      	beq.n	800f470 <TIM_Base_SetConfig+0x40>
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f44e:	d00f      	beq.n	800f470 <TIM_Base_SetConfig+0x40>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	4a3d      	ldr	r2, [pc, #244]	; (800f548 <TIM_Base_SetConfig+0x118>)
 800f454:	4293      	cmp	r3, r2
 800f456:	d00b      	beq.n	800f470 <TIM_Base_SetConfig+0x40>
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	4a3c      	ldr	r2, [pc, #240]	; (800f54c <TIM_Base_SetConfig+0x11c>)
 800f45c:	4293      	cmp	r3, r2
 800f45e:	d007      	beq.n	800f470 <TIM_Base_SetConfig+0x40>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	4a3b      	ldr	r2, [pc, #236]	; (800f550 <TIM_Base_SetConfig+0x120>)
 800f464:	4293      	cmp	r3, r2
 800f466:	d003      	beq.n	800f470 <TIM_Base_SetConfig+0x40>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	4a3a      	ldr	r2, [pc, #232]	; (800f554 <TIM_Base_SetConfig+0x124>)
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d108      	bne.n	800f482 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	68fa      	ldr	r2, [r7, #12]
 800f47e:	4313      	orrs	r3, r2
 800f480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	4a2f      	ldr	r2, [pc, #188]	; (800f544 <TIM_Base_SetConfig+0x114>)
 800f486:	4293      	cmp	r3, r2
 800f488:	d02b      	beq.n	800f4e2 <TIM_Base_SetConfig+0xb2>
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f490:	d027      	beq.n	800f4e2 <TIM_Base_SetConfig+0xb2>
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	4a2c      	ldr	r2, [pc, #176]	; (800f548 <TIM_Base_SetConfig+0x118>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d023      	beq.n	800f4e2 <TIM_Base_SetConfig+0xb2>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	4a2b      	ldr	r2, [pc, #172]	; (800f54c <TIM_Base_SetConfig+0x11c>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d01f      	beq.n	800f4e2 <TIM_Base_SetConfig+0xb2>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	4a2a      	ldr	r2, [pc, #168]	; (800f550 <TIM_Base_SetConfig+0x120>)
 800f4a6:	4293      	cmp	r3, r2
 800f4a8:	d01b      	beq.n	800f4e2 <TIM_Base_SetConfig+0xb2>
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	4a29      	ldr	r2, [pc, #164]	; (800f554 <TIM_Base_SetConfig+0x124>)
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	d017      	beq.n	800f4e2 <TIM_Base_SetConfig+0xb2>
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	4a28      	ldr	r2, [pc, #160]	; (800f558 <TIM_Base_SetConfig+0x128>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d013      	beq.n	800f4e2 <TIM_Base_SetConfig+0xb2>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	4a27      	ldr	r2, [pc, #156]	; (800f55c <TIM_Base_SetConfig+0x12c>)
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d00f      	beq.n	800f4e2 <TIM_Base_SetConfig+0xb2>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	4a26      	ldr	r2, [pc, #152]	; (800f560 <TIM_Base_SetConfig+0x130>)
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d00b      	beq.n	800f4e2 <TIM_Base_SetConfig+0xb2>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4a25      	ldr	r2, [pc, #148]	; (800f564 <TIM_Base_SetConfig+0x134>)
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	d007      	beq.n	800f4e2 <TIM_Base_SetConfig+0xb2>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	4a24      	ldr	r2, [pc, #144]	; (800f568 <TIM_Base_SetConfig+0x138>)
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	d003      	beq.n	800f4e2 <TIM_Base_SetConfig+0xb2>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4a23      	ldr	r2, [pc, #140]	; (800f56c <TIM_Base_SetConfig+0x13c>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d108      	bne.n	800f4f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f4e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	68db      	ldr	r3, [r3, #12]
 800f4ee:	68fa      	ldr	r2, [r7, #12]
 800f4f0:	4313      	orrs	r3, r2
 800f4f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	695b      	ldr	r3, [r3, #20]
 800f4fe:	4313      	orrs	r3, r2
 800f500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	68fa      	ldr	r2, [r7, #12]
 800f506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	689a      	ldr	r2, [r3, #8]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	681a      	ldr	r2, [r3, #0]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	4a0a      	ldr	r2, [pc, #40]	; (800f544 <TIM_Base_SetConfig+0x114>)
 800f51c:	4293      	cmp	r3, r2
 800f51e:	d003      	beq.n	800f528 <TIM_Base_SetConfig+0xf8>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4a0c      	ldr	r2, [pc, #48]	; (800f554 <TIM_Base_SetConfig+0x124>)
 800f524:	4293      	cmp	r3, r2
 800f526:	d103      	bne.n	800f530 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	691a      	ldr	r2, [r3, #16]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2201      	movs	r2, #1
 800f534:	615a      	str	r2, [r3, #20]
}
 800f536:	bf00      	nop
 800f538:	3714      	adds	r7, #20
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr
 800f542:	bf00      	nop
 800f544:	40010000 	.word	0x40010000
 800f548:	40000400 	.word	0x40000400
 800f54c:	40000800 	.word	0x40000800
 800f550:	40000c00 	.word	0x40000c00
 800f554:	40010400 	.word	0x40010400
 800f558:	40014000 	.word	0x40014000
 800f55c:	40014400 	.word	0x40014400
 800f560:	40014800 	.word	0x40014800
 800f564:	40001800 	.word	0x40001800
 800f568:	40001c00 	.word	0x40001c00
 800f56c:	40002000 	.word	0x40002000

0800f570 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800f570:	b480      	push	{r7}
 800f572:	b087      	sub	sp, #28
 800f574:	af00      	add	r7, sp, #0
 800f576:	60f8      	str	r0, [r7, #12]
 800f578:	60b9      	str	r1, [r7, #8]
 800f57a:	607a      	str	r2, [r7, #4]
 800f57c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	6a1b      	ldr	r3, [r3, #32]
 800f582:	f023 0201 	bic.w	r2, r3, #1
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	699b      	ldr	r3, [r3, #24]
 800f58e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	6a1b      	ldr	r3, [r3, #32]
 800f594:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	4a28      	ldr	r2, [pc, #160]	; (800f63c <TIM_TI1_SetConfig+0xcc>)
 800f59a:	4293      	cmp	r3, r2
 800f59c:	d01b      	beq.n	800f5d6 <TIM_TI1_SetConfig+0x66>
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5a4:	d017      	beq.n	800f5d6 <TIM_TI1_SetConfig+0x66>
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	4a25      	ldr	r2, [pc, #148]	; (800f640 <TIM_TI1_SetConfig+0xd0>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d013      	beq.n	800f5d6 <TIM_TI1_SetConfig+0x66>
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	4a24      	ldr	r2, [pc, #144]	; (800f644 <TIM_TI1_SetConfig+0xd4>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d00f      	beq.n	800f5d6 <TIM_TI1_SetConfig+0x66>
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	4a23      	ldr	r2, [pc, #140]	; (800f648 <TIM_TI1_SetConfig+0xd8>)
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	d00b      	beq.n	800f5d6 <TIM_TI1_SetConfig+0x66>
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	4a22      	ldr	r2, [pc, #136]	; (800f64c <TIM_TI1_SetConfig+0xdc>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d007      	beq.n	800f5d6 <TIM_TI1_SetConfig+0x66>
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	4a21      	ldr	r2, [pc, #132]	; (800f650 <TIM_TI1_SetConfig+0xe0>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d003      	beq.n	800f5d6 <TIM_TI1_SetConfig+0x66>
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	4a20      	ldr	r2, [pc, #128]	; (800f654 <TIM_TI1_SetConfig+0xe4>)
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	d101      	bne.n	800f5da <TIM_TI1_SetConfig+0x6a>
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	e000      	b.n	800f5dc <TIM_TI1_SetConfig+0x6c>
 800f5da:	2300      	movs	r3, #0
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d008      	beq.n	800f5f2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	f023 0303 	bic.w	r3, r3, #3
 800f5e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800f5e8:	697a      	ldr	r2, [r7, #20]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4313      	orrs	r3, r2
 800f5ee:	617b      	str	r3, [r7, #20]
 800f5f0:	e003      	b.n	800f5fa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	f043 0301 	orr.w	r3, r3, #1
 800f5f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f600:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	011b      	lsls	r3, r3, #4
 800f606:	b2db      	uxtb	r3, r3
 800f608:	697a      	ldr	r2, [r7, #20]
 800f60a:	4313      	orrs	r3, r2
 800f60c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	f023 030a 	bic.w	r3, r3, #10
 800f614:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	f003 030a 	and.w	r3, r3, #10
 800f61c:	693a      	ldr	r2, [r7, #16]
 800f61e:	4313      	orrs	r3, r2
 800f620:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	697a      	ldr	r2, [r7, #20]
 800f626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	693a      	ldr	r2, [r7, #16]
 800f62c:	621a      	str	r2, [r3, #32]
}
 800f62e:	bf00      	nop
 800f630:	371c      	adds	r7, #28
 800f632:	46bd      	mov	sp, r7
 800f634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f638:	4770      	bx	lr
 800f63a:	bf00      	nop
 800f63c:	40010000 	.word	0x40010000
 800f640:	40000400 	.word	0x40000400
 800f644:	40000800 	.word	0x40000800
 800f648:	40000c00 	.word	0x40000c00
 800f64c:	40010400 	.word	0x40010400
 800f650:	40014000 	.word	0x40014000
 800f654:	40001800 	.word	0x40001800

0800f658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f658:	b480      	push	{r7}
 800f65a:	b087      	sub	sp, #28
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	60f8      	str	r0, [r7, #12]
 800f660:	60b9      	str	r1, [r7, #8]
 800f662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	6a1b      	ldr	r3, [r3, #32]
 800f668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	6a1b      	ldr	r3, [r3, #32]
 800f66e:	f023 0201 	bic.w	r2, r3, #1
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	699b      	ldr	r3, [r3, #24]
 800f67a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	011b      	lsls	r3, r3, #4
 800f688:	693a      	ldr	r2, [r7, #16]
 800f68a:	4313      	orrs	r3, r2
 800f68c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	f023 030a 	bic.w	r3, r3, #10
 800f694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f696:	697a      	ldr	r2, [r7, #20]
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	4313      	orrs	r3, r2
 800f69c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	693a      	ldr	r2, [r7, #16]
 800f6a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	697a      	ldr	r2, [r7, #20]
 800f6a8:	621a      	str	r2, [r3, #32]
}
 800f6aa:	bf00      	nop
 800f6ac:	371c      	adds	r7, #28
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b4:	4770      	bx	lr

0800f6b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f6b6:	b480      	push	{r7}
 800f6b8:	b087      	sub	sp, #28
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	60f8      	str	r0, [r7, #12]
 800f6be:	60b9      	str	r1, [r7, #8]
 800f6c0:	607a      	str	r2, [r7, #4]
 800f6c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	6a1b      	ldr	r3, [r3, #32]
 800f6c8:	f023 0210 	bic.w	r2, r3, #16
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	699b      	ldr	r3, [r3, #24]
 800f6d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	6a1b      	ldr	r3, [r3, #32]
 800f6da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	021b      	lsls	r3, r3, #8
 800f6e8:	697a      	ldr	r2, [r7, #20]
 800f6ea:	4313      	orrs	r3, r2
 800f6ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f6f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	031b      	lsls	r3, r3, #12
 800f6fa:	b29b      	uxth	r3, r3
 800f6fc:	697a      	ldr	r2, [r7, #20]
 800f6fe:	4313      	orrs	r3, r2
 800f700:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f708:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	011b      	lsls	r3, r3, #4
 800f70e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f712:	693a      	ldr	r2, [r7, #16]
 800f714:	4313      	orrs	r3, r2
 800f716:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	697a      	ldr	r2, [r7, #20]
 800f71c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	693a      	ldr	r2, [r7, #16]
 800f722:	621a      	str	r2, [r3, #32]
}
 800f724:	bf00      	nop
 800f726:	371c      	adds	r7, #28
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f730:	b480      	push	{r7}
 800f732:	b087      	sub	sp, #28
 800f734:	af00      	add	r7, sp, #0
 800f736:	60f8      	str	r0, [r7, #12]
 800f738:	60b9      	str	r1, [r7, #8]
 800f73a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	6a1b      	ldr	r3, [r3, #32]
 800f740:	f023 0210 	bic.w	r2, r3, #16
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	699b      	ldr	r3, [r3, #24]
 800f74c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	6a1b      	ldr	r3, [r3, #32]
 800f752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f75a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	031b      	lsls	r3, r3, #12
 800f760:	697a      	ldr	r2, [r7, #20]
 800f762:	4313      	orrs	r3, r2
 800f764:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f766:	693b      	ldr	r3, [r7, #16]
 800f768:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f76c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	011b      	lsls	r3, r3, #4
 800f772:	693a      	ldr	r2, [r7, #16]
 800f774:	4313      	orrs	r3, r2
 800f776:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	697a      	ldr	r2, [r7, #20]
 800f77c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	693a      	ldr	r2, [r7, #16]
 800f782:	621a      	str	r2, [r3, #32]
}
 800f784:	bf00      	nop
 800f786:	371c      	adds	r7, #28
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr

0800f790 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f790:	b480      	push	{r7}
 800f792:	b087      	sub	sp, #28
 800f794:	af00      	add	r7, sp, #0
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	607a      	str	r2, [r7, #4]
 800f79c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	6a1b      	ldr	r3, [r3, #32]
 800f7a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	69db      	ldr	r3, [r3, #28]
 800f7ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	6a1b      	ldr	r3, [r3, #32]
 800f7b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	f023 0303 	bic.w	r3, r3, #3
 800f7bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800f7be:	697a      	ldr	r2, [r7, #20]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	4313      	orrs	r3, r2
 800f7c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f7cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	011b      	lsls	r3, r3, #4
 800f7d2:	b2db      	uxtb	r3, r3
 800f7d4:	697a      	ldr	r2, [r7, #20]
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800f7da:	693b      	ldr	r3, [r7, #16]
 800f7dc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800f7e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	021b      	lsls	r3, r3, #8
 800f7e6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800f7ea:	693a      	ldr	r2, [r7, #16]
 800f7ec:	4313      	orrs	r3, r2
 800f7ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	697a      	ldr	r2, [r7, #20]
 800f7f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	693a      	ldr	r2, [r7, #16]
 800f7fa:	621a      	str	r2, [r3, #32]
}
 800f7fc:	bf00      	nop
 800f7fe:	371c      	adds	r7, #28
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr

0800f808 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f808:	b480      	push	{r7}
 800f80a:	b087      	sub	sp, #28
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	607a      	str	r2, [r7, #4]
 800f814:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	6a1b      	ldr	r3, [r3, #32]
 800f81a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	69db      	ldr	r3, [r3, #28]
 800f826:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	6a1b      	ldr	r3, [r3, #32]
 800f82c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f834:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	021b      	lsls	r3, r3, #8
 800f83a:	697a      	ldr	r2, [r7, #20]
 800f83c:	4313      	orrs	r3, r2
 800f83e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f846:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	031b      	lsls	r3, r3, #12
 800f84c:	b29b      	uxth	r3, r3
 800f84e:	697a      	ldr	r2, [r7, #20]
 800f850:	4313      	orrs	r3, r2
 800f852:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800f85a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	031b      	lsls	r3, r3, #12
 800f860:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800f864:	693a      	ldr	r2, [r7, #16]
 800f866:	4313      	orrs	r3, r2
 800f868:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	697a      	ldr	r2, [r7, #20]
 800f86e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	693a      	ldr	r2, [r7, #16]
 800f874:	621a      	str	r2, [r3, #32]
}
 800f876:	bf00      	nop
 800f878:	371c      	adds	r7, #28
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr

0800f882 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f882:	b480      	push	{r7}
 800f884:	b085      	sub	sp, #20
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
 800f88a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	689b      	ldr	r3, [r3, #8]
 800f890:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f898:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f89a:	683a      	ldr	r2, [r7, #0]
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	4313      	orrs	r3, r2
 800f8a0:	f043 0307 	orr.w	r3, r3, #7
 800f8a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	68fa      	ldr	r2, [r7, #12]
 800f8aa:	609a      	str	r2, [r3, #8]
}
 800f8ac:	bf00      	nop
 800f8ae:	3714      	adds	r7, #20
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b6:	4770      	bx	lr

0800f8b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	b087      	sub	sp, #28
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	60f8      	str	r0, [r7, #12]
 800f8c0:	60b9      	str	r1, [r7, #8]
 800f8c2:	607a      	str	r2, [r7, #4]
 800f8c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	689b      	ldr	r3, [r3, #8]
 800f8ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f8d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	021a      	lsls	r2, r3, #8
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	431a      	orrs	r2, r3
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	697a      	ldr	r2, [r7, #20]
 800f8e2:	4313      	orrs	r3, r2
 800f8e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	697a      	ldr	r2, [r7, #20]
 800f8ea:	609a      	str	r2, [r3, #8]
}
 800f8ec:	bf00      	nop
 800f8ee:	371c      	adds	r7, #28
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr

0800f8f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b085      	sub	sp, #20
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f908:	2b01      	cmp	r3, #1
 800f90a:	d101      	bne.n	800f910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f90c:	2302      	movs	r3, #2
 800f90e:	e06d      	b.n	800f9ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2201      	movs	r2, #1
 800f914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2202      	movs	r2, #2
 800f91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	685b      	ldr	r3, [r3, #4]
 800f926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	689b      	ldr	r3, [r3, #8]
 800f92e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	4a30      	ldr	r2, [pc, #192]	; (800f9f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f936:	4293      	cmp	r3, r2
 800f938:	d004      	beq.n	800f944 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	4a2f      	ldr	r2, [pc, #188]	; (800f9fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f940:	4293      	cmp	r3, r2
 800f942:	d108      	bne.n	800f956 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f94a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	685b      	ldr	r3, [r3, #4]
 800f950:	68fa      	ldr	r2, [r7, #12]
 800f952:	4313      	orrs	r3, r2
 800f954:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f95c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	68fa      	ldr	r2, [r7, #12]
 800f964:	4313      	orrs	r3, r2
 800f966:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	68fa      	ldr	r2, [r7, #12]
 800f96e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	4a20      	ldr	r2, [pc, #128]	; (800f9f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f976:	4293      	cmp	r3, r2
 800f978:	d022      	beq.n	800f9c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f982:	d01d      	beq.n	800f9c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4a1d      	ldr	r2, [pc, #116]	; (800fa00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d018      	beq.n	800f9c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	4a1c      	ldr	r2, [pc, #112]	; (800fa04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f994:	4293      	cmp	r3, r2
 800f996:	d013      	beq.n	800f9c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	4a1a      	ldr	r2, [pc, #104]	; (800fa08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f99e:	4293      	cmp	r3, r2
 800f9a0:	d00e      	beq.n	800f9c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	4a15      	ldr	r2, [pc, #84]	; (800f9fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	d009      	beq.n	800f9c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	4a16      	ldr	r2, [pc, #88]	; (800fa0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	d004      	beq.n	800f9c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	4a15      	ldr	r2, [pc, #84]	; (800fa10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f9bc:	4293      	cmp	r3, r2
 800f9be:	d10c      	bne.n	800f9da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f9c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	689b      	ldr	r3, [r3, #8]
 800f9cc:	68ba      	ldr	r2, [r7, #8]
 800f9ce:	4313      	orrs	r3, r2
 800f9d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	68ba      	ldr	r2, [r7, #8]
 800f9d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2201      	movs	r2, #1
 800f9de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f9ea:	2300      	movs	r3, #0
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3714      	adds	r7, #20
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr
 800f9f8:	40010000 	.word	0x40010000
 800f9fc:	40010400 	.word	0x40010400
 800fa00:	40000400 	.word	0x40000400
 800fa04:	40000800 	.word	0x40000800
 800fa08:	40000c00 	.word	0x40000c00
 800fa0c:	40014000 	.word	0x40014000
 800fa10:	40001800 	.word	0x40001800

0800fa14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fa14:	b480      	push	{r7}
 800fa16:	b083      	sub	sp, #12
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fa1c:	bf00      	nop
 800fa1e:	370c      	adds	r7, #12
 800fa20:	46bd      	mov	sp, r7
 800fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa26:	4770      	bx	lr

0800fa28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b083      	sub	sp, #12
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fa30:	bf00      	nop
 800fa32:	370c      	adds	r7, #12
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr

0800fa3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b083      	sub	sp, #12
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fa44:	bf00      	nop
 800fa46:	370c      	adds	r7, #12
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr

0800fa50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d101      	bne.n	800fa62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fa5e:	2301      	movs	r3, #1
 800fa60:	e040      	b.n	800fae4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d106      	bne.n	800fa78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f7fb f838 	bl	800aae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2224      	movs	r2, #36	; 0x24
 800fa7c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	681a      	ldr	r2, [r3, #0]
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	f022 0201 	bic.w	r2, r2, #1
 800fa8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f000 fb26 	bl	80100e0 <UART_SetConfig>
 800fa94:	4603      	mov	r3, r0
 800fa96:	2b01      	cmp	r3, #1
 800fa98:	d101      	bne.n	800fa9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	e022      	b.n	800fae4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d002      	beq.n	800faac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f000 fdc4 	bl	8010634 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	685a      	ldr	r2, [r3, #4]
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800faba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	689a      	ldr	r2, [r3, #8]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800faca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	681a      	ldr	r2, [r3, #0]
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	f042 0201 	orr.w	r2, r2, #1
 800fada:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f000 fe4b 	bl	8010778 <UART_CheckIdleState>
 800fae2:	4603      	mov	r3, r0
}
 800fae4:	4618      	mov	r0, r3
 800fae6:	3708      	adds	r7, #8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b08a      	sub	sp, #40	; 0x28
 800faf0:	af02      	add	r7, sp, #8
 800faf2:	60f8      	str	r0, [r7, #12]
 800faf4:	60b9      	str	r1, [r7, #8]
 800faf6:	603b      	str	r3, [r7, #0]
 800faf8:	4613      	mov	r3, r2
 800fafa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb00:	2b20      	cmp	r3, #32
 800fb02:	d17f      	bne.n	800fc04 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d002      	beq.n	800fb10 <HAL_UART_Transmit+0x24>
 800fb0a:	88fb      	ldrh	r3, [r7, #6]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d101      	bne.n	800fb14 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800fb10:	2301      	movs	r3, #1
 800fb12:	e078      	b.n	800fc06 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d101      	bne.n	800fb22 <HAL_UART_Transmit+0x36>
 800fb1e:	2302      	movs	r3, #2
 800fb20:	e071      	b.n	800fc06 <HAL_UART_Transmit+0x11a>
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	2201      	movs	r2, #1
 800fb26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	2221      	movs	r2, #33	; 0x21
 800fb34:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800fb36:	f7fb fc43 	bl	800b3c0 <HAL_GetTick>
 800fb3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	88fa      	ldrh	r2, [r7, #6]
 800fb40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	88fa      	ldrh	r2, [r7, #6]
 800fb48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	689b      	ldr	r3, [r3, #8]
 800fb50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb54:	d108      	bne.n	800fb68 <HAL_UART_Transmit+0x7c>
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	691b      	ldr	r3, [r3, #16]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d104      	bne.n	800fb68 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	61bb      	str	r3, [r7, #24]
 800fb66:	e003      	b.n	800fb70 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800fb68:	68bb      	ldr	r3, [r7, #8]
 800fb6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	2200      	movs	r2, #0
 800fb74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800fb78:	e02c      	b.n	800fbd4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	9300      	str	r3, [sp, #0]
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	2200      	movs	r2, #0
 800fb82:	2180      	movs	r1, #128	; 0x80
 800fb84:	68f8      	ldr	r0, [r7, #12]
 800fb86:	f000 fe3c 	bl	8010802 <UART_WaitOnFlagUntilTimeout>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d001      	beq.n	800fb94 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800fb90:	2303      	movs	r3, #3
 800fb92:	e038      	b.n	800fc06 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800fb94:	69fb      	ldr	r3, [r7, #28]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d10b      	bne.n	800fbb2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fb9a:	69bb      	ldr	r3, [r7, #24]
 800fb9c:	881b      	ldrh	r3, [r3, #0]
 800fb9e:	461a      	mov	r2, r3
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fba8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fbaa:	69bb      	ldr	r3, [r7, #24]
 800fbac:	3302      	adds	r3, #2
 800fbae:	61bb      	str	r3, [r7, #24]
 800fbb0:	e007      	b.n	800fbc2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fbb2:	69fb      	ldr	r3, [r7, #28]
 800fbb4:	781a      	ldrb	r2, [r3, #0]
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	3b01      	subs	r3, #1
 800fbcc:	b29a      	uxth	r2, r3
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fbda:	b29b      	uxth	r3, r3
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d1cc      	bne.n	800fb7a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	9300      	str	r3, [sp, #0]
 800fbe4:	697b      	ldr	r3, [r7, #20]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	2140      	movs	r1, #64	; 0x40
 800fbea:	68f8      	ldr	r0, [r7, #12]
 800fbec:	f000 fe09 	bl	8010802 <UART_WaitOnFlagUntilTimeout>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d001      	beq.n	800fbfa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800fbf6:	2303      	movs	r3, #3
 800fbf8:	e005      	b.n	800fc06 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	2220      	movs	r2, #32
 800fbfe:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800fc00:	2300      	movs	r3, #0
 800fc02:	e000      	b.n	800fc06 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800fc04:	2302      	movs	r3, #2
  }
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3720      	adds	r7, #32
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
	...

0800fc10 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b084      	sub	sp, #16
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	60f8      	str	r0, [r7, #12]
 800fc18:	60b9      	str	r1, [r7, #8]
 800fc1a:	4613      	mov	r3, r2
 800fc1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc22:	2b20      	cmp	r3, #32
 800fc24:	d16c      	bne.n	800fd00 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d002      	beq.n	800fc32 <HAL_UART_Receive_DMA+0x22>
 800fc2c:	88fb      	ldrh	r3, [r7, #6]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d101      	bne.n	800fc36 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800fc32:	2301      	movs	r3, #1
 800fc34:	e065      	b.n	800fd02 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	d101      	bne.n	800fc44 <HAL_UART_Receive_DMA+0x34>
 800fc40:	2302      	movs	r3, #2
 800fc42:	e05e      	b.n	800fd02 <HAL_UART_Receive_DMA+0xf2>
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	2201      	movs	r2, #1
 800fc48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	68ba      	ldr	r2, [r7, #8]
 800fc50:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	88fa      	ldrh	r2, [r7, #6]
 800fc56:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2222      	movs	r2, #34	; 0x22
 800fc64:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d02a      	beq.n	800fcc4 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc72:	4a26      	ldr	r2, [pc, #152]	; (800fd0c <HAL_UART_Receive_DMA+0xfc>)
 800fc74:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc7a:	4a25      	ldr	r2, [pc, #148]	; (800fd10 <HAL_UART_Receive_DMA+0x100>)
 800fc7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc82:	4a24      	ldr	r2, [pc, #144]	; (800fd14 <HAL_UART_Receive_DMA+0x104>)
 800fc84:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	3324      	adds	r3, #36	; 0x24
 800fc98:	4619      	mov	r1, r3
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc9e:	461a      	mov	r2, r3
 800fca0:	88fb      	ldrh	r3, [r7, #6]
 800fca2:	f7fb fe6d 	bl	800b980 <HAL_DMA_Start_IT>
 800fca6:	4603      	mov	r3, r0
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d00b      	beq.n	800fcc4 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2210      	movs	r2, #16
 800fcb0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	2220      	movs	r2, #32
 800fcbe:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	e01e      	b.n	800fd02 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	681a      	ldr	r2, [r3, #0]
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fcda:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	689a      	ldr	r2, [r3, #8]
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f042 0201 	orr.w	r2, r2, #1
 800fcea:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	689a      	ldr	r2, [r3, #8]
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fcfa:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	e000      	b.n	800fd02 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800fd00:	2302      	movs	r3, #2
  }
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3710      	adds	r7, #16
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}
 800fd0a:	bf00      	nop
 800fd0c:	08010963 	.word	0x08010963
 800fd10:	080109c7 	.word	0x080109c7
 800fd14:	080109e3 	.word	0x080109e3

0800fd18 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b084      	sub	sp, #16
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd24:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd2a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	689b      	ldr	r3, [r3, #8]
 800fd32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd36:	2b80      	cmp	r3, #128	; 0x80
 800fd38:	d126      	bne.n	800fd88 <HAL_UART_DMAStop+0x70>
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	2b21      	cmp	r3, #33	; 0x21
 800fd3e:	d123      	bne.n	800fd88 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	689a      	ldr	r2, [r3, #8]
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fd4e:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d014      	beq.n	800fd82 <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7fb fe6f 	bl	800ba40 <HAL_DMA_Abort>
 800fd62:	4603      	mov	r3, r0
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d00c      	beq.n	800fd82 <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f7fc f883 	bl	800be78 <HAL_DMA_GetError>
 800fd72:	4603      	mov	r3, r0
 800fd74:	2b20      	cmp	r3, #32
 800fd76:	d104      	bne.n	800fd82 <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2210      	movs	r2, #16
 800fd7c:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800fd7e:	2303      	movs	r3, #3
 800fd80:	e031      	b.n	800fde6 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f000 fdb8 	bl	80108f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	689b      	ldr	r3, [r3, #8]
 800fd8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd92:	2b40      	cmp	r3, #64	; 0x40
 800fd94:	d126      	bne.n	800fde4 <HAL_UART_DMAStop+0xcc>
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	2b22      	cmp	r3, #34	; 0x22
 800fd9a:	d123      	bne.n	800fde4 <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	689a      	ldr	r2, [r3, #8]
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fdaa:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d014      	beq.n	800fdde <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7fb fe41 	bl	800ba40 <HAL_DMA_Abort>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d00c      	beq.n	800fdde <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f7fc f855 	bl	800be78 <HAL_DMA_GetError>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b20      	cmp	r3, #32
 800fdd2:	d104      	bne.n	800fdde <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2210      	movs	r2, #16
 800fdd8:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800fdda:	2303      	movs	r3, #3
 800fddc:	e003      	b.n	800fde6 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f000 fd9f 	bl	8010922 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800fde4:	2300      	movs	r3, #0
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3710      	adds	r7, #16
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
	...

0800fdf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b088      	sub	sp, #32
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	69db      	ldr	r3, [r3, #28]
 800fdfe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	689b      	ldr	r3, [r3, #8]
 800fe0e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fe10:	69fa      	ldr	r2, [r7, #28]
 800fe12:	f640 030f 	movw	r3, #2063	; 0x80f
 800fe16:	4013      	ands	r3, r2
 800fe18:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800fe1a:	693b      	ldr	r3, [r7, #16]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d113      	bne.n	800fe48 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800fe20:	69fb      	ldr	r3, [r7, #28]
 800fe22:	f003 0320 	and.w	r3, r3, #32
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d00e      	beq.n	800fe48 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800fe2a:	69bb      	ldr	r3, [r7, #24]
 800fe2c:	f003 0320 	and.w	r3, r3, #32
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d009      	beq.n	800fe48 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	f000 8114 	beq.w	8010066 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe42:	6878      	ldr	r0, [r7, #4]
 800fe44:	4798      	blx	r3
      }
      return;
 800fe46:	e10e      	b.n	8010066 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	f000 80d6 	beq.w	800fffc <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	f003 0301 	and.w	r3, r3, #1
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d105      	bne.n	800fe66 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800fe5a:	69bb      	ldr	r3, [r7, #24]
 800fe5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	f000 80cb 	beq.w	800fffc <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fe66:	69fb      	ldr	r3, [r7, #28]
 800fe68:	f003 0301 	and.w	r3, r3, #1
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d00e      	beq.n	800fe8e <HAL_UART_IRQHandler+0x9e>
 800fe70:	69bb      	ldr	r3, [r7, #24]
 800fe72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d009      	beq.n	800fe8e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	2201      	movs	r2, #1
 800fe80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe86:	f043 0201 	orr.w	r2, r3, #1
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe8e:	69fb      	ldr	r3, [r7, #28]
 800fe90:	f003 0302 	and.w	r3, r3, #2
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d00e      	beq.n	800feb6 <HAL_UART_IRQHandler+0xc6>
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	f003 0301 	and.w	r3, r3, #1
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d009      	beq.n	800feb6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	2202      	movs	r2, #2
 800fea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800feae:	f043 0204 	orr.w	r2, r3, #4
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800feb6:	69fb      	ldr	r3, [r7, #28]
 800feb8:	f003 0304 	and.w	r3, r3, #4
 800febc:	2b00      	cmp	r3, #0
 800febe:	d00e      	beq.n	800fede <HAL_UART_IRQHandler+0xee>
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	f003 0301 	and.w	r3, r3, #1
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d009      	beq.n	800fede <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	2204      	movs	r2, #4
 800fed0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fed6:	f043 0202 	orr.w	r2, r3, #2
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fede:	69fb      	ldr	r3, [r7, #28]
 800fee0:	f003 0308 	and.w	r3, r3, #8
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d013      	beq.n	800ff10 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fee8:	69bb      	ldr	r3, [r7, #24]
 800feea:	f003 0320 	and.w	r3, r3, #32
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d104      	bne.n	800fefc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d009      	beq.n	800ff10 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	2208      	movs	r2, #8
 800ff02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff08:	f043 0208 	orr.w	r2, r3, #8
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ff10:	69fb      	ldr	r3, [r7, #28]
 800ff12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d00f      	beq.n	800ff3a <HAL_UART_IRQHandler+0x14a>
 800ff1a:	69bb      	ldr	r3, [r7, #24]
 800ff1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d00a      	beq.n	800ff3a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ff2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff32:	f043 0220 	orr.w	r2, r3, #32
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	f000 8093 	beq.w	801006a <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ff44:	69fb      	ldr	r3, [r7, #28]
 800ff46:	f003 0320 	and.w	r3, r3, #32
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d00c      	beq.n	800ff68 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ff4e:	69bb      	ldr	r3, [r7, #24]
 800ff50:	f003 0320 	and.w	r3, r3, #32
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d007      	beq.n	800ff68 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d003      	beq.n	800ff68 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff6c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	689b      	ldr	r3, [r3, #8]
 800ff74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff78:	2b40      	cmp	r3, #64	; 0x40
 800ff7a:	d004      	beq.n	800ff86 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d031      	beq.n	800ffea <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f000 fccb 	bl	8010922 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	689b      	ldr	r3, [r3, #8]
 800ff92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff96:	2b40      	cmp	r3, #64	; 0x40
 800ff98:	d123      	bne.n	800ffe2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	689a      	ldr	r2, [r3, #8]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ffa8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d013      	beq.n	800ffda <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffb6:	4a30      	ldr	r2, [pc, #192]	; (8010078 <HAL_UART_IRQHandler+0x288>)
 800ffb8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f7fb fdae 	bl	800bb20 <HAL_DMA_Abort_IT>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d016      	beq.n	800fff8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffd0:	687a      	ldr	r2, [r7, #4]
 800ffd2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ffd4:	4610      	mov	r0, r2
 800ffd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffd8:	e00e      	b.n	800fff8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f000 f86c 	bl	80100b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffe0:	e00a      	b.n	800fff8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f000 f868 	bl	80100b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffe8:	e006      	b.n	800fff8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f000 f864 	bl	80100b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2200      	movs	r2, #0
 800fff4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800fff6:	e038      	b.n	801006a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fff8:	bf00      	nop
    return;
 800fffa:	e036      	b.n	801006a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fffc:	69fb      	ldr	r3, [r7, #28]
 800fffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010002:	2b00      	cmp	r3, #0
 8010004:	d00d      	beq.n	8010022 <HAL_UART_IRQHandler+0x232>
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801000c:	2b00      	cmp	r3, #0
 801000e:	d008      	beq.n	8010022 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010018:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f000 f856 	bl	80100cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010020:	e026      	b.n	8010070 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8010022:	69fb      	ldr	r3, [r7, #28]
 8010024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010028:	2b00      	cmp	r3, #0
 801002a:	d00d      	beq.n	8010048 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801002c:	69bb      	ldr	r3, [r7, #24]
 801002e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010032:	2b00      	cmp	r3, #0
 8010034:	d008      	beq.n	8010048 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801003a:	2b00      	cmp	r3, #0
 801003c:	d017      	beq.n	801006e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	4798      	blx	r3
    }
    return;
 8010046:	e012      	b.n	801006e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010048:	69fb      	ldr	r3, [r7, #28]
 801004a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801004e:	2b00      	cmp	r3, #0
 8010050:	d00e      	beq.n	8010070 <HAL_UART_IRQHandler+0x280>
 8010052:	69bb      	ldr	r3, [r7, #24]
 8010054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010058:	2b00      	cmp	r3, #0
 801005a:	d009      	beq.n	8010070 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f000 fd12 	bl	8010a86 <UART_EndTransmit_IT>
    return;
 8010062:	bf00      	nop
 8010064:	e004      	b.n	8010070 <HAL_UART_IRQHandler+0x280>
      return;
 8010066:	bf00      	nop
 8010068:	e002      	b.n	8010070 <HAL_UART_IRQHandler+0x280>
    return;
 801006a:	bf00      	nop
 801006c:	e000      	b.n	8010070 <HAL_UART_IRQHandler+0x280>
    return;
 801006e:	bf00      	nop
  }

}
 8010070:	3720      	adds	r7, #32
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
 8010076:	bf00      	nop
 8010078:	08010a5b 	.word	0x08010a5b

0801007c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801007c:	b480      	push	{r7}
 801007e:	b083      	sub	sp, #12
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010084:	bf00      	nop
 8010086:	370c      	adds	r7, #12
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr

08010090 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010090:	b480      	push	{r7}
 8010092:	b083      	sub	sp, #12
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8010098:	bf00      	nop
 801009a:	370c      	adds	r7, #12
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr

080100a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80100a4:	b480      	push	{r7}
 80100a6:	b083      	sub	sp, #12
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80100ac:	bf00      	nop
 80100ae:	370c      	adds	r7, #12
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr

080100b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80100c0:	bf00      	nop
 80100c2:	370c      	adds	r7, #12
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr

080100cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80100d4:	bf00      	nop
 80100d6:	370c      	adds	r7, #12
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr

080100e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b088      	sub	sp, #32
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80100e8:	2300      	movs	r3, #0
 80100ea:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80100ec:	2300      	movs	r3, #0
 80100ee:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	689a      	ldr	r2, [r3, #8]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	691b      	ldr	r3, [r3, #16]
 80100f8:	431a      	orrs	r2, r3
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	695b      	ldr	r3, [r3, #20]
 80100fe:	431a      	orrs	r2, r3
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	69db      	ldr	r3, [r3, #28]
 8010104:	4313      	orrs	r3, r2
 8010106:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	681a      	ldr	r2, [r3, #0]
 801010e:	4bb1      	ldr	r3, [pc, #708]	; (80103d4 <UART_SetConfig+0x2f4>)
 8010110:	4013      	ands	r3, r2
 8010112:	687a      	ldr	r2, [r7, #4]
 8010114:	6812      	ldr	r2, [r2, #0]
 8010116:	6939      	ldr	r1, [r7, #16]
 8010118:	430b      	orrs	r3, r1
 801011a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	685b      	ldr	r3, [r3, #4]
 8010122:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	68da      	ldr	r2, [r3, #12]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	430a      	orrs	r2, r1
 8010130:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	699b      	ldr	r3, [r3, #24]
 8010136:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6a1b      	ldr	r3, [r3, #32]
 801013c:	693a      	ldr	r2, [r7, #16]
 801013e:	4313      	orrs	r3, r2
 8010140:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	689b      	ldr	r3, [r3, #8]
 8010148:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	693a      	ldr	r2, [r7, #16]
 8010152:	430a      	orrs	r2, r1
 8010154:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	4a9f      	ldr	r2, [pc, #636]	; (80103d8 <UART_SetConfig+0x2f8>)
 801015c:	4293      	cmp	r3, r2
 801015e:	d121      	bne.n	80101a4 <UART_SetConfig+0xc4>
 8010160:	4b9e      	ldr	r3, [pc, #632]	; (80103dc <UART_SetConfig+0x2fc>)
 8010162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010166:	f003 0303 	and.w	r3, r3, #3
 801016a:	2b03      	cmp	r3, #3
 801016c:	d816      	bhi.n	801019c <UART_SetConfig+0xbc>
 801016e:	a201      	add	r2, pc, #4	; (adr r2, 8010174 <UART_SetConfig+0x94>)
 8010170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010174:	08010185 	.word	0x08010185
 8010178:	08010191 	.word	0x08010191
 801017c:	0801018b 	.word	0x0801018b
 8010180:	08010197 	.word	0x08010197
 8010184:	2301      	movs	r3, #1
 8010186:	77fb      	strb	r3, [r7, #31]
 8010188:	e151      	b.n	801042e <UART_SetConfig+0x34e>
 801018a:	2302      	movs	r3, #2
 801018c:	77fb      	strb	r3, [r7, #31]
 801018e:	e14e      	b.n	801042e <UART_SetConfig+0x34e>
 8010190:	2304      	movs	r3, #4
 8010192:	77fb      	strb	r3, [r7, #31]
 8010194:	e14b      	b.n	801042e <UART_SetConfig+0x34e>
 8010196:	2308      	movs	r3, #8
 8010198:	77fb      	strb	r3, [r7, #31]
 801019a:	e148      	b.n	801042e <UART_SetConfig+0x34e>
 801019c:	2310      	movs	r3, #16
 801019e:	77fb      	strb	r3, [r7, #31]
 80101a0:	bf00      	nop
 80101a2:	e144      	b.n	801042e <UART_SetConfig+0x34e>
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	4a8d      	ldr	r2, [pc, #564]	; (80103e0 <UART_SetConfig+0x300>)
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d134      	bne.n	8010218 <UART_SetConfig+0x138>
 80101ae:	4b8b      	ldr	r3, [pc, #556]	; (80103dc <UART_SetConfig+0x2fc>)
 80101b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101b4:	f003 030c 	and.w	r3, r3, #12
 80101b8:	2b0c      	cmp	r3, #12
 80101ba:	d829      	bhi.n	8010210 <UART_SetConfig+0x130>
 80101bc:	a201      	add	r2, pc, #4	; (adr r2, 80101c4 <UART_SetConfig+0xe4>)
 80101be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101c2:	bf00      	nop
 80101c4:	080101f9 	.word	0x080101f9
 80101c8:	08010211 	.word	0x08010211
 80101cc:	08010211 	.word	0x08010211
 80101d0:	08010211 	.word	0x08010211
 80101d4:	08010205 	.word	0x08010205
 80101d8:	08010211 	.word	0x08010211
 80101dc:	08010211 	.word	0x08010211
 80101e0:	08010211 	.word	0x08010211
 80101e4:	080101ff 	.word	0x080101ff
 80101e8:	08010211 	.word	0x08010211
 80101ec:	08010211 	.word	0x08010211
 80101f0:	08010211 	.word	0x08010211
 80101f4:	0801020b 	.word	0x0801020b
 80101f8:	2300      	movs	r3, #0
 80101fa:	77fb      	strb	r3, [r7, #31]
 80101fc:	e117      	b.n	801042e <UART_SetConfig+0x34e>
 80101fe:	2302      	movs	r3, #2
 8010200:	77fb      	strb	r3, [r7, #31]
 8010202:	e114      	b.n	801042e <UART_SetConfig+0x34e>
 8010204:	2304      	movs	r3, #4
 8010206:	77fb      	strb	r3, [r7, #31]
 8010208:	e111      	b.n	801042e <UART_SetConfig+0x34e>
 801020a:	2308      	movs	r3, #8
 801020c:	77fb      	strb	r3, [r7, #31]
 801020e:	e10e      	b.n	801042e <UART_SetConfig+0x34e>
 8010210:	2310      	movs	r3, #16
 8010212:	77fb      	strb	r3, [r7, #31]
 8010214:	bf00      	nop
 8010216:	e10a      	b.n	801042e <UART_SetConfig+0x34e>
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	4a71      	ldr	r2, [pc, #452]	; (80103e4 <UART_SetConfig+0x304>)
 801021e:	4293      	cmp	r3, r2
 8010220:	d120      	bne.n	8010264 <UART_SetConfig+0x184>
 8010222:	4b6e      	ldr	r3, [pc, #440]	; (80103dc <UART_SetConfig+0x2fc>)
 8010224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010228:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801022c:	2b10      	cmp	r3, #16
 801022e:	d00f      	beq.n	8010250 <UART_SetConfig+0x170>
 8010230:	2b10      	cmp	r3, #16
 8010232:	d802      	bhi.n	801023a <UART_SetConfig+0x15a>
 8010234:	2b00      	cmp	r3, #0
 8010236:	d005      	beq.n	8010244 <UART_SetConfig+0x164>
 8010238:	e010      	b.n	801025c <UART_SetConfig+0x17c>
 801023a:	2b20      	cmp	r3, #32
 801023c:	d005      	beq.n	801024a <UART_SetConfig+0x16a>
 801023e:	2b30      	cmp	r3, #48	; 0x30
 8010240:	d009      	beq.n	8010256 <UART_SetConfig+0x176>
 8010242:	e00b      	b.n	801025c <UART_SetConfig+0x17c>
 8010244:	2300      	movs	r3, #0
 8010246:	77fb      	strb	r3, [r7, #31]
 8010248:	e0f1      	b.n	801042e <UART_SetConfig+0x34e>
 801024a:	2302      	movs	r3, #2
 801024c:	77fb      	strb	r3, [r7, #31]
 801024e:	e0ee      	b.n	801042e <UART_SetConfig+0x34e>
 8010250:	2304      	movs	r3, #4
 8010252:	77fb      	strb	r3, [r7, #31]
 8010254:	e0eb      	b.n	801042e <UART_SetConfig+0x34e>
 8010256:	2308      	movs	r3, #8
 8010258:	77fb      	strb	r3, [r7, #31]
 801025a:	e0e8      	b.n	801042e <UART_SetConfig+0x34e>
 801025c:	2310      	movs	r3, #16
 801025e:	77fb      	strb	r3, [r7, #31]
 8010260:	bf00      	nop
 8010262:	e0e4      	b.n	801042e <UART_SetConfig+0x34e>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	4a5f      	ldr	r2, [pc, #380]	; (80103e8 <UART_SetConfig+0x308>)
 801026a:	4293      	cmp	r3, r2
 801026c:	d120      	bne.n	80102b0 <UART_SetConfig+0x1d0>
 801026e:	4b5b      	ldr	r3, [pc, #364]	; (80103dc <UART_SetConfig+0x2fc>)
 8010270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010274:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010278:	2b40      	cmp	r3, #64	; 0x40
 801027a:	d00f      	beq.n	801029c <UART_SetConfig+0x1bc>
 801027c:	2b40      	cmp	r3, #64	; 0x40
 801027e:	d802      	bhi.n	8010286 <UART_SetConfig+0x1a6>
 8010280:	2b00      	cmp	r3, #0
 8010282:	d005      	beq.n	8010290 <UART_SetConfig+0x1b0>
 8010284:	e010      	b.n	80102a8 <UART_SetConfig+0x1c8>
 8010286:	2b80      	cmp	r3, #128	; 0x80
 8010288:	d005      	beq.n	8010296 <UART_SetConfig+0x1b6>
 801028a:	2bc0      	cmp	r3, #192	; 0xc0
 801028c:	d009      	beq.n	80102a2 <UART_SetConfig+0x1c2>
 801028e:	e00b      	b.n	80102a8 <UART_SetConfig+0x1c8>
 8010290:	2300      	movs	r3, #0
 8010292:	77fb      	strb	r3, [r7, #31]
 8010294:	e0cb      	b.n	801042e <UART_SetConfig+0x34e>
 8010296:	2302      	movs	r3, #2
 8010298:	77fb      	strb	r3, [r7, #31]
 801029a:	e0c8      	b.n	801042e <UART_SetConfig+0x34e>
 801029c:	2304      	movs	r3, #4
 801029e:	77fb      	strb	r3, [r7, #31]
 80102a0:	e0c5      	b.n	801042e <UART_SetConfig+0x34e>
 80102a2:	2308      	movs	r3, #8
 80102a4:	77fb      	strb	r3, [r7, #31]
 80102a6:	e0c2      	b.n	801042e <UART_SetConfig+0x34e>
 80102a8:	2310      	movs	r3, #16
 80102aa:	77fb      	strb	r3, [r7, #31]
 80102ac:	bf00      	nop
 80102ae:	e0be      	b.n	801042e <UART_SetConfig+0x34e>
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	4a4d      	ldr	r2, [pc, #308]	; (80103ec <UART_SetConfig+0x30c>)
 80102b6:	4293      	cmp	r3, r2
 80102b8:	d124      	bne.n	8010304 <UART_SetConfig+0x224>
 80102ba:	4b48      	ldr	r3, [pc, #288]	; (80103dc <UART_SetConfig+0x2fc>)
 80102bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80102c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102c8:	d012      	beq.n	80102f0 <UART_SetConfig+0x210>
 80102ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102ce:	d802      	bhi.n	80102d6 <UART_SetConfig+0x1f6>
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d007      	beq.n	80102e4 <UART_SetConfig+0x204>
 80102d4:	e012      	b.n	80102fc <UART_SetConfig+0x21c>
 80102d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102da:	d006      	beq.n	80102ea <UART_SetConfig+0x20a>
 80102dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80102e0:	d009      	beq.n	80102f6 <UART_SetConfig+0x216>
 80102e2:	e00b      	b.n	80102fc <UART_SetConfig+0x21c>
 80102e4:	2300      	movs	r3, #0
 80102e6:	77fb      	strb	r3, [r7, #31]
 80102e8:	e0a1      	b.n	801042e <UART_SetConfig+0x34e>
 80102ea:	2302      	movs	r3, #2
 80102ec:	77fb      	strb	r3, [r7, #31]
 80102ee:	e09e      	b.n	801042e <UART_SetConfig+0x34e>
 80102f0:	2304      	movs	r3, #4
 80102f2:	77fb      	strb	r3, [r7, #31]
 80102f4:	e09b      	b.n	801042e <UART_SetConfig+0x34e>
 80102f6:	2308      	movs	r3, #8
 80102f8:	77fb      	strb	r3, [r7, #31]
 80102fa:	e098      	b.n	801042e <UART_SetConfig+0x34e>
 80102fc:	2310      	movs	r3, #16
 80102fe:	77fb      	strb	r3, [r7, #31]
 8010300:	bf00      	nop
 8010302:	e094      	b.n	801042e <UART_SetConfig+0x34e>
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	4a39      	ldr	r2, [pc, #228]	; (80103f0 <UART_SetConfig+0x310>)
 801030a:	4293      	cmp	r3, r2
 801030c:	d124      	bne.n	8010358 <UART_SetConfig+0x278>
 801030e:	4b33      	ldr	r3, [pc, #204]	; (80103dc <UART_SetConfig+0x2fc>)
 8010310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010314:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801031c:	d012      	beq.n	8010344 <UART_SetConfig+0x264>
 801031e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010322:	d802      	bhi.n	801032a <UART_SetConfig+0x24a>
 8010324:	2b00      	cmp	r3, #0
 8010326:	d007      	beq.n	8010338 <UART_SetConfig+0x258>
 8010328:	e012      	b.n	8010350 <UART_SetConfig+0x270>
 801032a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801032e:	d006      	beq.n	801033e <UART_SetConfig+0x25e>
 8010330:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010334:	d009      	beq.n	801034a <UART_SetConfig+0x26a>
 8010336:	e00b      	b.n	8010350 <UART_SetConfig+0x270>
 8010338:	2301      	movs	r3, #1
 801033a:	77fb      	strb	r3, [r7, #31]
 801033c:	e077      	b.n	801042e <UART_SetConfig+0x34e>
 801033e:	2302      	movs	r3, #2
 8010340:	77fb      	strb	r3, [r7, #31]
 8010342:	e074      	b.n	801042e <UART_SetConfig+0x34e>
 8010344:	2304      	movs	r3, #4
 8010346:	77fb      	strb	r3, [r7, #31]
 8010348:	e071      	b.n	801042e <UART_SetConfig+0x34e>
 801034a:	2308      	movs	r3, #8
 801034c:	77fb      	strb	r3, [r7, #31]
 801034e:	e06e      	b.n	801042e <UART_SetConfig+0x34e>
 8010350:	2310      	movs	r3, #16
 8010352:	77fb      	strb	r3, [r7, #31]
 8010354:	bf00      	nop
 8010356:	e06a      	b.n	801042e <UART_SetConfig+0x34e>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	4a25      	ldr	r2, [pc, #148]	; (80103f4 <UART_SetConfig+0x314>)
 801035e:	4293      	cmp	r3, r2
 8010360:	d124      	bne.n	80103ac <UART_SetConfig+0x2cc>
 8010362:	4b1e      	ldr	r3, [pc, #120]	; (80103dc <UART_SetConfig+0x2fc>)
 8010364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010368:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801036c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010370:	d012      	beq.n	8010398 <UART_SetConfig+0x2b8>
 8010372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010376:	d802      	bhi.n	801037e <UART_SetConfig+0x29e>
 8010378:	2b00      	cmp	r3, #0
 801037a:	d007      	beq.n	801038c <UART_SetConfig+0x2ac>
 801037c:	e012      	b.n	80103a4 <UART_SetConfig+0x2c4>
 801037e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010382:	d006      	beq.n	8010392 <UART_SetConfig+0x2b2>
 8010384:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010388:	d009      	beq.n	801039e <UART_SetConfig+0x2be>
 801038a:	e00b      	b.n	80103a4 <UART_SetConfig+0x2c4>
 801038c:	2300      	movs	r3, #0
 801038e:	77fb      	strb	r3, [r7, #31]
 8010390:	e04d      	b.n	801042e <UART_SetConfig+0x34e>
 8010392:	2302      	movs	r3, #2
 8010394:	77fb      	strb	r3, [r7, #31]
 8010396:	e04a      	b.n	801042e <UART_SetConfig+0x34e>
 8010398:	2304      	movs	r3, #4
 801039a:	77fb      	strb	r3, [r7, #31]
 801039c:	e047      	b.n	801042e <UART_SetConfig+0x34e>
 801039e:	2308      	movs	r3, #8
 80103a0:	77fb      	strb	r3, [r7, #31]
 80103a2:	e044      	b.n	801042e <UART_SetConfig+0x34e>
 80103a4:	2310      	movs	r3, #16
 80103a6:	77fb      	strb	r3, [r7, #31]
 80103a8:	bf00      	nop
 80103aa:	e040      	b.n	801042e <UART_SetConfig+0x34e>
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4a11      	ldr	r2, [pc, #68]	; (80103f8 <UART_SetConfig+0x318>)
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d139      	bne.n	801042a <UART_SetConfig+0x34a>
 80103b6:	4b09      	ldr	r3, [pc, #36]	; (80103dc <UART_SetConfig+0x2fc>)
 80103b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80103c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80103c4:	d027      	beq.n	8010416 <UART_SetConfig+0x336>
 80103c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80103ca:	d817      	bhi.n	80103fc <UART_SetConfig+0x31c>
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d01c      	beq.n	801040a <UART_SetConfig+0x32a>
 80103d0:	e027      	b.n	8010422 <UART_SetConfig+0x342>
 80103d2:	bf00      	nop
 80103d4:	efff69f3 	.word	0xefff69f3
 80103d8:	40011000 	.word	0x40011000
 80103dc:	40023800 	.word	0x40023800
 80103e0:	40004400 	.word	0x40004400
 80103e4:	40004800 	.word	0x40004800
 80103e8:	40004c00 	.word	0x40004c00
 80103ec:	40005000 	.word	0x40005000
 80103f0:	40011400 	.word	0x40011400
 80103f4:	40007800 	.word	0x40007800
 80103f8:	40007c00 	.word	0x40007c00
 80103fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010400:	d006      	beq.n	8010410 <UART_SetConfig+0x330>
 8010402:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010406:	d009      	beq.n	801041c <UART_SetConfig+0x33c>
 8010408:	e00b      	b.n	8010422 <UART_SetConfig+0x342>
 801040a:	2300      	movs	r3, #0
 801040c:	77fb      	strb	r3, [r7, #31]
 801040e:	e00e      	b.n	801042e <UART_SetConfig+0x34e>
 8010410:	2302      	movs	r3, #2
 8010412:	77fb      	strb	r3, [r7, #31]
 8010414:	e00b      	b.n	801042e <UART_SetConfig+0x34e>
 8010416:	2304      	movs	r3, #4
 8010418:	77fb      	strb	r3, [r7, #31]
 801041a:	e008      	b.n	801042e <UART_SetConfig+0x34e>
 801041c:	2308      	movs	r3, #8
 801041e:	77fb      	strb	r3, [r7, #31]
 8010420:	e005      	b.n	801042e <UART_SetConfig+0x34e>
 8010422:	2310      	movs	r3, #16
 8010424:	77fb      	strb	r3, [r7, #31]
 8010426:	bf00      	nop
 8010428:	e001      	b.n	801042e <UART_SetConfig+0x34e>
 801042a:	2310      	movs	r3, #16
 801042c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	69db      	ldr	r3, [r3, #28]
 8010432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010436:	d17f      	bne.n	8010538 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8010438:	7ffb      	ldrb	r3, [r7, #31]
 801043a:	2b08      	cmp	r3, #8
 801043c:	d85c      	bhi.n	80104f8 <UART_SetConfig+0x418>
 801043e:	a201      	add	r2, pc, #4	; (adr r2, 8010444 <UART_SetConfig+0x364>)
 8010440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010444:	08010469 	.word	0x08010469
 8010448:	08010489 	.word	0x08010489
 801044c:	080104a9 	.word	0x080104a9
 8010450:	080104f9 	.word	0x080104f9
 8010454:	080104c1 	.word	0x080104c1
 8010458:	080104f9 	.word	0x080104f9
 801045c:	080104f9 	.word	0x080104f9
 8010460:	080104f9 	.word	0x080104f9
 8010464:	080104e1 	.word	0x080104e1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010468:	f7fd ff7a 	bl	800e360 <HAL_RCC_GetPCLK1Freq>
 801046c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	005a      	lsls	r2, r3, #1
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	085b      	lsrs	r3, r3, #1
 8010478:	441a      	add	r2, r3
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010482:	b29b      	uxth	r3, r3
 8010484:	61bb      	str	r3, [r7, #24]
        break;
 8010486:	e03a      	b.n	80104fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010488:	f7fd ff7e 	bl	800e388 <HAL_RCC_GetPCLK2Freq>
 801048c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	005a      	lsls	r2, r3, #1
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	685b      	ldr	r3, [r3, #4]
 8010496:	085b      	lsrs	r3, r3, #1
 8010498:	441a      	add	r2, r3
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	fbb2 f3f3 	udiv	r3, r2, r3
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	61bb      	str	r3, [r7, #24]
        break;
 80104a6:	e02a      	b.n	80104fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	685b      	ldr	r3, [r3, #4]
 80104ac:	085a      	lsrs	r2, r3, #1
 80104ae:	4b5f      	ldr	r3, [pc, #380]	; (801062c <UART_SetConfig+0x54c>)
 80104b0:	4413      	add	r3, r2
 80104b2:	687a      	ldr	r2, [r7, #4]
 80104b4:	6852      	ldr	r2, [r2, #4]
 80104b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	61bb      	str	r3, [r7, #24]
        break;
 80104be:	e01e      	b.n	80104fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80104c0:	f7fd fe6a 	bl	800e198 <HAL_RCC_GetSysClockFreq>
 80104c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	005a      	lsls	r2, r3, #1
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	085b      	lsrs	r3, r3, #1
 80104d0:	441a      	add	r2, r3
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	685b      	ldr	r3, [r3, #4]
 80104d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80104da:	b29b      	uxth	r3, r3
 80104dc:	61bb      	str	r3, [r7, #24]
        break;
 80104de:	e00e      	b.n	80104fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	685b      	ldr	r3, [r3, #4]
 80104e4:	085b      	lsrs	r3, r3, #1
 80104e6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	685b      	ldr	r3, [r3, #4]
 80104ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	61bb      	str	r3, [r7, #24]
        break;
 80104f6:	e002      	b.n	80104fe <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80104f8:	2301      	movs	r3, #1
 80104fa:	75fb      	strb	r3, [r7, #23]
        break;
 80104fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80104fe:	69bb      	ldr	r3, [r7, #24]
 8010500:	2b0f      	cmp	r3, #15
 8010502:	d916      	bls.n	8010532 <UART_SetConfig+0x452>
 8010504:	69bb      	ldr	r3, [r7, #24]
 8010506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801050a:	d212      	bcs.n	8010532 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801050c:	69bb      	ldr	r3, [r7, #24]
 801050e:	b29b      	uxth	r3, r3
 8010510:	f023 030f 	bic.w	r3, r3, #15
 8010514:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010516:	69bb      	ldr	r3, [r7, #24]
 8010518:	085b      	lsrs	r3, r3, #1
 801051a:	b29b      	uxth	r3, r3
 801051c:	f003 0307 	and.w	r3, r3, #7
 8010520:	b29a      	uxth	r2, r3
 8010522:	897b      	ldrh	r3, [r7, #10]
 8010524:	4313      	orrs	r3, r2
 8010526:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	897a      	ldrh	r2, [r7, #10]
 801052e:	60da      	str	r2, [r3, #12]
 8010530:	e070      	b.n	8010614 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8010532:	2301      	movs	r3, #1
 8010534:	75fb      	strb	r3, [r7, #23]
 8010536:	e06d      	b.n	8010614 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8010538:	7ffb      	ldrb	r3, [r7, #31]
 801053a:	2b08      	cmp	r3, #8
 801053c:	d859      	bhi.n	80105f2 <UART_SetConfig+0x512>
 801053e:	a201      	add	r2, pc, #4	; (adr r2, 8010544 <UART_SetConfig+0x464>)
 8010540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010544:	08010569 	.word	0x08010569
 8010548:	08010587 	.word	0x08010587
 801054c:	080105a5 	.word	0x080105a5
 8010550:	080105f3 	.word	0x080105f3
 8010554:	080105bd 	.word	0x080105bd
 8010558:	080105f3 	.word	0x080105f3
 801055c:	080105f3 	.word	0x080105f3
 8010560:	080105f3 	.word	0x080105f3
 8010564:	080105db 	.word	0x080105db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010568:	f7fd fefa 	bl	800e360 <HAL_RCC_GetPCLK1Freq>
 801056c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	085a      	lsrs	r2, r3, #1
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	441a      	add	r2, r3
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	685b      	ldr	r3, [r3, #4]
 801057c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010580:	b29b      	uxth	r3, r3
 8010582:	61bb      	str	r3, [r7, #24]
        break;
 8010584:	e038      	b.n	80105f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010586:	f7fd feff 	bl	800e388 <HAL_RCC_GetPCLK2Freq>
 801058a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	685b      	ldr	r3, [r3, #4]
 8010590:	085a      	lsrs	r2, r3, #1
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	441a      	add	r2, r3
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	685b      	ldr	r3, [r3, #4]
 801059a:	fbb2 f3f3 	udiv	r3, r2, r3
 801059e:	b29b      	uxth	r3, r3
 80105a0:	61bb      	str	r3, [r7, #24]
        break;
 80105a2:	e029      	b.n	80105f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	685b      	ldr	r3, [r3, #4]
 80105a8:	085a      	lsrs	r2, r3, #1
 80105aa:	4b21      	ldr	r3, [pc, #132]	; (8010630 <UART_SetConfig+0x550>)
 80105ac:	4413      	add	r3, r2
 80105ae:	687a      	ldr	r2, [r7, #4]
 80105b0:	6852      	ldr	r2, [r2, #4]
 80105b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80105b6:	b29b      	uxth	r3, r3
 80105b8:	61bb      	str	r3, [r7, #24]
        break;
 80105ba:	e01d      	b.n	80105f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80105bc:	f7fd fdec 	bl	800e198 <HAL_RCC_GetSysClockFreq>
 80105c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	685b      	ldr	r3, [r3, #4]
 80105c6:	085a      	lsrs	r2, r3, #1
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	441a      	add	r2, r3
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	685b      	ldr	r3, [r3, #4]
 80105d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80105d4:	b29b      	uxth	r3, r3
 80105d6:	61bb      	str	r3, [r7, #24]
        break;
 80105d8:	e00e      	b.n	80105f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	085b      	lsrs	r3, r3, #1
 80105e0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80105ec:	b29b      	uxth	r3, r3
 80105ee:	61bb      	str	r3, [r7, #24]
        break;
 80105f0:	e002      	b.n	80105f8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80105f2:	2301      	movs	r3, #1
 80105f4:	75fb      	strb	r3, [r7, #23]
        break;
 80105f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80105f8:	69bb      	ldr	r3, [r7, #24]
 80105fa:	2b0f      	cmp	r3, #15
 80105fc:	d908      	bls.n	8010610 <UART_SetConfig+0x530>
 80105fe:	69bb      	ldr	r3, [r7, #24]
 8010600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010604:	d204      	bcs.n	8010610 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	69ba      	ldr	r2, [r7, #24]
 801060c:	60da      	str	r2, [r3, #12]
 801060e:	e001      	b.n	8010614 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8010610:	2301      	movs	r3, #1
 8010612:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2200      	movs	r2, #0
 8010618:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2200      	movs	r2, #0
 801061e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8010620:	7dfb      	ldrb	r3, [r7, #23]
}
 8010622:	4618      	mov	r0, r3
 8010624:	3720      	adds	r7, #32
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
 801062a:	bf00      	nop
 801062c:	01e84800 	.word	0x01e84800
 8010630:	00f42400 	.word	0x00f42400

08010634 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010634:	b480      	push	{r7}
 8010636:	b083      	sub	sp, #12
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010640:	f003 0301 	and.w	r3, r3, #1
 8010644:	2b00      	cmp	r3, #0
 8010646:	d00a      	beq.n	801065e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	685b      	ldr	r3, [r3, #4]
 801064e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	430a      	orrs	r2, r1
 801065c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010662:	f003 0302 	and.w	r3, r3, #2
 8010666:	2b00      	cmp	r3, #0
 8010668:	d00a      	beq.n	8010680 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	430a      	orrs	r2, r1
 801067e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010684:	f003 0304 	and.w	r3, r3, #4
 8010688:	2b00      	cmp	r3, #0
 801068a:	d00a      	beq.n	80106a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	685b      	ldr	r3, [r3, #4]
 8010692:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	430a      	orrs	r2, r1
 80106a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106a6:	f003 0308 	and.w	r3, r3, #8
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d00a      	beq.n	80106c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	685b      	ldr	r3, [r3, #4]
 80106b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	430a      	orrs	r2, r1
 80106c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106c8:	f003 0310 	and.w	r3, r3, #16
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d00a      	beq.n	80106e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	689b      	ldr	r3, [r3, #8]
 80106d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	430a      	orrs	r2, r1
 80106e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ea:	f003 0320 	and.w	r3, r3, #32
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d00a      	beq.n	8010708 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	689b      	ldr	r3, [r3, #8]
 80106f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	430a      	orrs	r2, r1
 8010706:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801070c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010710:	2b00      	cmp	r3, #0
 8010712:	d01a      	beq.n	801074a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	430a      	orrs	r2, r1
 8010728:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801072e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010732:	d10a      	bne.n	801074a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	685b      	ldr	r3, [r3, #4]
 801073a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	430a      	orrs	r2, r1
 8010748:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801074e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010752:	2b00      	cmp	r3, #0
 8010754:	d00a      	beq.n	801076c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	430a      	orrs	r2, r1
 801076a:	605a      	str	r2, [r3, #4]
  }
}
 801076c:	bf00      	nop
 801076e:	370c      	adds	r7, #12
 8010770:	46bd      	mov	sp, r7
 8010772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010776:	4770      	bx	lr

08010778 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b086      	sub	sp, #24
 801077c:	af02      	add	r7, sp, #8
 801077e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2200      	movs	r2, #0
 8010784:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8010786:	f7fa fe1b 	bl	800b3c0 <HAL_GetTick>
 801078a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	f003 0308 	and.w	r3, r3, #8
 8010796:	2b08      	cmp	r3, #8
 8010798:	d10e      	bne.n	80107b8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801079a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801079e:	9300      	str	r3, [sp, #0]
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	2200      	movs	r2, #0
 80107a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f000 f82a 	bl	8010802 <UART_WaitOnFlagUntilTimeout>
 80107ae:	4603      	mov	r3, r0
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d001      	beq.n	80107b8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80107b4:	2303      	movs	r3, #3
 80107b6:	e020      	b.n	80107fa <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	f003 0304 	and.w	r3, r3, #4
 80107c2:	2b04      	cmp	r3, #4
 80107c4:	d10e      	bne.n	80107e4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80107c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80107ca:	9300      	str	r3, [sp, #0]
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	2200      	movs	r2, #0
 80107d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f000 f814 	bl	8010802 <UART_WaitOnFlagUntilTimeout>
 80107da:	4603      	mov	r3, r0
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d001      	beq.n	80107e4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80107e0:	2303      	movs	r3, #3
 80107e2:	e00a      	b.n	80107fa <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2220      	movs	r2, #32
 80107e8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2220      	movs	r2, #32
 80107ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2200      	movs	r2, #0
 80107f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80107f8:	2300      	movs	r3, #0
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3710      	adds	r7, #16
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}

08010802 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010802:	b580      	push	{r7, lr}
 8010804:	b084      	sub	sp, #16
 8010806:	af00      	add	r7, sp, #0
 8010808:	60f8      	str	r0, [r7, #12]
 801080a:	60b9      	str	r1, [r7, #8]
 801080c:	603b      	str	r3, [r7, #0]
 801080e:	4613      	mov	r3, r2
 8010810:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010812:	e05d      	b.n	80108d0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010814:	69bb      	ldr	r3, [r7, #24]
 8010816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801081a:	d059      	beq.n	80108d0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801081c:	f7fa fdd0 	bl	800b3c0 <HAL_GetTick>
 8010820:	4602      	mov	r2, r0
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	1ad3      	subs	r3, r2, r3
 8010826:	69ba      	ldr	r2, [r7, #24]
 8010828:	429a      	cmp	r2, r3
 801082a:	d302      	bcc.n	8010832 <UART_WaitOnFlagUntilTimeout+0x30>
 801082c:	69bb      	ldr	r3, [r7, #24]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d11b      	bne.n	801086a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	681a      	ldr	r2, [r3, #0]
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010840:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	689a      	ldr	r2, [r3, #8]
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	f022 0201 	bic.w	r2, r2, #1
 8010850:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	2220      	movs	r2, #32
 8010856:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	2220      	movs	r2, #32
 801085c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2200      	movs	r2, #0
 8010862:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8010866:	2303      	movs	r3, #3
 8010868:	e042      	b.n	80108f0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f003 0304 	and.w	r3, r3, #4
 8010874:	2b00      	cmp	r3, #0
 8010876:	d02b      	beq.n	80108d0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	69db      	ldr	r3, [r3, #28]
 801087e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010886:	d123      	bne.n	80108d0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010890:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	681a      	ldr	r2, [r3, #0]
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80108a0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	689a      	ldr	r2, [r3, #8]
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	f022 0201 	bic.w	r2, r2, #1
 80108b0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	2220      	movs	r2, #32
 80108b6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2220      	movs	r2, #32
 80108bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	2220      	movs	r2, #32
 80108c2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	2200      	movs	r2, #0
 80108c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80108cc:	2303      	movs	r3, #3
 80108ce:	e00f      	b.n	80108f0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	69da      	ldr	r2, [r3, #28]
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	4013      	ands	r3, r2
 80108da:	68ba      	ldr	r2, [r7, #8]
 80108dc:	429a      	cmp	r2, r3
 80108de:	bf0c      	ite	eq
 80108e0:	2301      	moveq	r3, #1
 80108e2:	2300      	movne	r3, #0
 80108e4:	b2db      	uxtb	r3, r3
 80108e6:	461a      	mov	r2, r3
 80108e8:	79fb      	ldrb	r3, [r7, #7]
 80108ea:	429a      	cmp	r2, r3
 80108ec:	d092      	beq.n	8010814 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80108ee:	2300      	movs	r3, #0
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3710      	adds	r7, #16
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80108f8:	b480      	push	{r7}
 80108fa:	b083      	sub	sp, #12
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	681a      	ldr	r2, [r3, #0]
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 801090e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2220      	movs	r2, #32
 8010914:	675a      	str	r2, [r3, #116]	; 0x74
}
 8010916:	bf00      	nop
 8010918:	370c      	adds	r7, #12
 801091a:	46bd      	mov	sp, r7
 801091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010920:	4770      	bx	lr

08010922 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010922:	b480      	push	{r7}
 8010924:	b083      	sub	sp, #12
 8010926:	af00      	add	r7, sp, #0
 8010928:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	681a      	ldr	r2, [r3, #0]
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010938:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	689a      	ldr	r2, [r3, #8]
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	f022 0201 	bic.w	r2, r2, #1
 8010948:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2220      	movs	r2, #32
 801094e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2200      	movs	r2, #0
 8010954:	661a      	str	r2, [r3, #96]	; 0x60
}
 8010956:	bf00      	nop
 8010958:	370c      	adds	r7, #12
 801095a:	46bd      	mov	sp, r7
 801095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010960:	4770      	bx	lr

08010962 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010962:	b580      	push	{r7, lr}
 8010964:	b084      	sub	sp, #16
 8010966:	af00      	add	r7, sp, #0
 8010968:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801096e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	69db      	ldr	r3, [r3, #28]
 8010974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010978:	d01e      	beq.n	80109b8 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	2200      	movs	r2, #0
 801097e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	681a      	ldr	r2, [r3, #0]
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010990:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	689a      	ldr	r2, [r3, #8]
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	f022 0201 	bic.w	r2, r2, #1
 80109a0:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	689a      	ldr	r2, [r3, #8]
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80109b0:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	2220      	movs	r2, #32
 80109b6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80109b8:	68f8      	ldr	r0, [r7, #12]
 80109ba:	f7ff fb69 	bl	8010090 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109be:	bf00      	nop
 80109c0:	3710      	adds	r7, #16
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}

080109c6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80109c6:	b580      	push	{r7, lr}
 80109c8:	b084      	sub	sp, #16
 80109ca:	af00      	add	r7, sp, #0
 80109cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80109d4:	68f8      	ldr	r0, [r7, #12]
 80109d6:	f7ff fb65 	bl	80100a4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109da:	bf00      	nop
 80109dc:	3710      	adds	r7, #16
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}

080109e2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80109e2:	b580      	push	{r7, lr}
 80109e4:	b086      	sub	sp, #24
 80109e6:	af00      	add	r7, sp, #0
 80109e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109ee:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109f4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80109fa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80109fc:	697b      	ldr	r3, [r7, #20]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	689b      	ldr	r3, [r3, #8]
 8010a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a06:	2b80      	cmp	r3, #128	; 0x80
 8010a08:	d109      	bne.n	8010a1e <UART_DMAError+0x3c>
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	2b21      	cmp	r3, #33	; 0x21
 8010a0e:	d106      	bne.n	8010a1e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	2200      	movs	r2, #0
 8010a14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8010a18:	6978      	ldr	r0, [r7, #20]
 8010a1a:	f7ff ff6d 	bl	80108f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	689b      	ldr	r3, [r3, #8]
 8010a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a28:	2b40      	cmp	r3, #64	; 0x40
 8010a2a:	d109      	bne.n	8010a40 <UART_DMAError+0x5e>
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	2b22      	cmp	r3, #34	; 0x22
 8010a30:	d106      	bne.n	8010a40 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010a32:	697b      	ldr	r3, [r7, #20]
 8010a34:	2200      	movs	r2, #0
 8010a36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8010a3a:	6978      	ldr	r0, [r7, #20]
 8010a3c:	f7ff ff71 	bl	8010922 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a44:	f043 0210 	orr.w	r2, r3, #16
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010a4c:	6978      	ldr	r0, [r7, #20]
 8010a4e:	f7ff fb33 	bl	80100b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a52:	bf00      	nop
 8010a54:	3718      	adds	r7, #24
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}

08010a5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010a5a:	b580      	push	{r7, lr}
 8010a5c:	b084      	sub	sp, #16
 8010a5e:	af00      	add	r7, sp, #0
 8010a60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	2200      	movs	r2, #0
 8010a74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010a78:	68f8      	ldr	r0, [r7, #12]
 8010a7a:	f7ff fb1d 	bl	80100b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a7e:	bf00      	nop
 8010a80:	3710      	adds	r7, #16
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}

08010a86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010a86:	b580      	push	{r7, lr}
 8010a88:	b082      	sub	sp, #8
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	681a      	ldr	r2, [r3, #0]
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010a9c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	2220      	movs	r2, #32
 8010aa2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f7ff fae6 	bl	801007c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ab0:	bf00      	nop
 8010ab2:	3708      	adds	r7, #8
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}

08010ab8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010ab8:	b084      	sub	sp, #16
 8010aba:	b580      	push	{r7, lr}
 8010abc:	b084      	sub	sp, #16
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
 8010ac2:	f107 001c 	add.w	r0, r7, #28
 8010ac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	d120      	bne.n	8010b12 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ad4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	68da      	ldr	r2, [r3, #12]
 8010ae0:	4b20      	ldr	r3, [pc, #128]	; (8010b64 <USB_CoreInit+0xac>)
 8010ae2:	4013      	ands	r3, r2
 8010ae4:	687a      	ldr	r2, [r7, #4]
 8010ae6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	68db      	ldr	r3, [r3, #12]
 8010aec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010af6:	2b01      	cmp	r3, #1
 8010af8:	d105      	bne.n	8010b06 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	68db      	ldr	r3, [r3, #12]
 8010afe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f000 fa52 	bl	8010fb0 <USB_CoreReset>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	73fb      	strb	r3, [r7, #15]
 8010b10:	e010      	b.n	8010b34 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	68db      	ldr	r3, [r3, #12]
 8010b16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8010b1e:	6878      	ldr	r0, [r7, #4]
 8010b20:	f000 fa46 	bl	8010fb0 <USB_CoreReset>
 8010b24:	4603      	mov	r3, r0
 8010b26:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8010b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b36:	2b01      	cmp	r3, #1
 8010b38:	d10b      	bne.n	8010b52 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	689b      	ldr	r3, [r3, #8]
 8010b3e:	f043 0206 	orr.w	r2, r3, #6
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	689b      	ldr	r3, [r3, #8]
 8010b4a:	f043 0220 	orr.w	r2, r3, #32
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b54:	4618      	mov	r0, r3
 8010b56:	3710      	adds	r7, #16
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010b5e:	b004      	add	sp, #16
 8010b60:	4770      	bx	lr
 8010b62:	bf00      	nop
 8010b64:	ffbdffbf 	.word	0xffbdffbf

08010b68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b083      	sub	sp, #12
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	689b      	ldr	r3, [r3, #8]
 8010b74:	f023 0201 	bic.w	r2, r3, #1
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010b7c:	2300      	movs	r3, #0
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	370c      	adds	r7, #12
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr

08010b8a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010b8a:	b580      	push	{r7, lr}
 8010b8c:	b082      	sub	sp, #8
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]
 8010b92:	460b      	mov	r3, r1
 8010b94:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	68db      	ldr	r3, [r3, #12]
 8010b9a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010ba2:	78fb      	ldrb	r3, [r7, #3]
 8010ba4:	2b01      	cmp	r3, #1
 8010ba6:	d106      	bne.n	8010bb6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	68db      	ldr	r3, [r3, #12]
 8010bac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	60da      	str	r2, [r3, #12]
 8010bb4:	e00b      	b.n	8010bce <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8010bb6:	78fb      	ldrb	r3, [r7, #3]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d106      	bne.n	8010bca <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	68db      	ldr	r3, [r3, #12]
 8010bc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	60da      	str	r2, [r3, #12]
 8010bc8:	e001      	b.n	8010bce <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8010bca:	2301      	movs	r3, #1
 8010bcc:	e003      	b.n	8010bd6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010bce:	2032      	movs	r0, #50	; 0x32
 8010bd0:	f7fa fc02 	bl	800b3d8 <HAL_Delay>

  return HAL_OK;
 8010bd4:	2300      	movs	r3, #0
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3708      	adds	r7, #8
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}
	...

08010be0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010be0:	b084      	sub	sp, #16
 8010be2:	b580      	push	{r7, lr}
 8010be4:	b086      	sub	sp, #24
 8010be6:	af00      	add	r7, sp, #0
 8010be8:	6078      	str	r0, [r7, #4]
 8010bea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	613b      	str	r3, [r7, #16]
 8010bfe:	e009      	b.n	8010c14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010c00:	687a      	ldr	r2, [r7, #4]
 8010c02:	693b      	ldr	r3, [r7, #16]
 8010c04:	3340      	adds	r3, #64	; 0x40
 8010c06:	009b      	lsls	r3, r3, #2
 8010c08:	4413      	add	r3, r2
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	3301      	adds	r3, #1
 8010c12:	613b      	str	r3, [r7, #16]
 8010c14:	693b      	ldr	r3, [r7, #16]
 8010c16:	2b0e      	cmp	r3, #14
 8010c18:	d9f2      	bls.n	8010c00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d11c      	bne.n	8010c5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c26:	685b      	ldr	r3, [r3, #4]
 8010c28:	68fa      	ldr	r2, [r7, #12]
 8010c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010c2e:	f043 0302 	orr.w	r3, r3, #2
 8010c32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	601a      	str	r2, [r3, #0]
 8010c58:	e005      	b.n	8010c66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c6c:	461a      	mov	r2, r3
 8010c6e:	2300      	movs	r3, #0
 8010c70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c78:	4619      	mov	r1, r3
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c80:	461a      	mov	r2, r3
 8010c82:	680b      	ldr	r3, [r1, #0]
 8010c84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c88:	2b01      	cmp	r3, #1
 8010c8a:	d10c      	bne.n	8010ca6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d104      	bne.n	8010c9c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010c92:	2100      	movs	r1, #0
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f000 f959 	bl	8010f4c <USB_SetDevSpeed>
 8010c9a:	e018      	b.n	8010cce <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010c9c:	2101      	movs	r1, #1
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f000 f954 	bl	8010f4c <USB_SetDevSpeed>
 8010ca4:	e013      	b.n	8010cce <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8010ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ca8:	2b03      	cmp	r3, #3
 8010caa:	d10c      	bne.n	8010cc6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d104      	bne.n	8010cbc <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010cb2:	2100      	movs	r1, #0
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f000 f949 	bl	8010f4c <USB_SetDevSpeed>
 8010cba:	e008      	b.n	8010cce <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010cbc:	2101      	movs	r1, #1
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f000 f944 	bl	8010f4c <USB_SetDevSpeed>
 8010cc4:	e003      	b.n	8010cce <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010cc6:	2103      	movs	r1, #3
 8010cc8:	6878      	ldr	r0, [r7, #4]
 8010cca:	f000 f93f 	bl	8010f4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010cce:	2110      	movs	r1, #16
 8010cd0:	6878      	ldr	r0, [r7, #4]
 8010cd2:	f000 f8f3 	bl	8010ebc <USB_FlushTxFifo>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d001      	beq.n	8010ce0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8010cdc:	2301      	movs	r3, #1
 8010cde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f000 f911 	bl	8010f08 <USB_FlushRxFifo>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d001      	beq.n	8010cf0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8010cec:	2301      	movs	r3, #1
 8010cee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cf6:	461a      	mov	r2, r3
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d02:	461a      	mov	r2, r3
 8010d04:	2300      	movs	r3, #0
 8010d06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d0e:	461a      	mov	r2, r3
 8010d10:	2300      	movs	r3, #0
 8010d12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010d14:	2300      	movs	r3, #0
 8010d16:	613b      	str	r3, [r7, #16]
 8010d18:	e043      	b.n	8010da2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	015a      	lsls	r2, r3, #5
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	4413      	add	r3, r2
 8010d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010d30:	d118      	bne.n	8010d64 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d10a      	bne.n	8010d4e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010d38:	693b      	ldr	r3, [r7, #16]
 8010d3a:	015a      	lsls	r2, r3, #5
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	4413      	add	r3, r2
 8010d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d44:	461a      	mov	r2, r3
 8010d46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010d4a:	6013      	str	r3, [r2, #0]
 8010d4c:	e013      	b.n	8010d76 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	015a      	lsls	r2, r3, #5
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	4413      	add	r3, r2
 8010d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010d60:	6013      	str	r3, [r2, #0]
 8010d62:	e008      	b.n	8010d76 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	015a      	lsls	r2, r3, #5
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	4413      	add	r3, r2
 8010d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d70:	461a      	mov	r2, r3
 8010d72:	2300      	movs	r3, #0
 8010d74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	015a      	lsls	r2, r3, #5
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	4413      	add	r3, r2
 8010d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d82:	461a      	mov	r2, r3
 8010d84:	2300      	movs	r3, #0
 8010d86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010d88:	693b      	ldr	r3, [r7, #16]
 8010d8a:	015a      	lsls	r2, r3, #5
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	4413      	add	r3, r2
 8010d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d94:	461a      	mov	r2, r3
 8010d96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010d9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010d9c:	693b      	ldr	r3, [r7, #16]
 8010d9e:	3301      	adds	r3, #1
 8010da0:	613b      	str	r3, [r7, #16]
 8010da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da4:	693a      	ldr	r2, [r7, #16]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d3b7      	bcc.n	8010d1a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010daa:	2300      	movs	r3, #0
 8010dac:	613b      	str	r3, [r7, #16]
 8010dae:	e043      	b.n	8010e38 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	015a      	lsls	r2, r3, #5
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	4413      	add	r3, r2
 8010db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010dc6:	d118      	bne.n	8010dfa <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d10a      	bne.n	8010de4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	015a      	lsls	r2, r3, #5
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	4413      	add	r3, r2
 8010dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dda:	461a      	mov	r2, r3
 8010ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010de0:	6013      	str	r3, [r2, #0]
 8010de2:	e013      	b.n	8010e0c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010de4:	693b      	ldr	r3, [r7, #16]
 8010de6:	015a      	lsls	r2, r3, #5
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	4413      	add	r3, r2
 8010dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010df0:	461a      	mov	r2, r3
 8010df2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010df6:	6013      	str	r3, [r2, #0]
 8010df8:	e008      	b.n	8010e0c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010dfa:	693b      	ldr	r3, [r7, #16]
 8010dfc:	015a      	lsls	r2, r3, #5
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	4413      	add	r3, r2
 8010e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e06:	461a      	mov	r2, r3
 8010e08:	2300      	movs	r3, #0
 8010e0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	015a      	lsls	r2, r3, #5
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	4413      	add	r3, r2
 8010e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e18:	461a      	mov	r2, r3
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	015a      	lsls	r2, r3, #5
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	4413      	add	r3, r2
 8010e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e2a:	461a      	mov	r2, r3
 8010e2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010e30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	3301      	adds	r3, #1
 8010e36:	613b      	str	r3, [r7, #16]
 8010e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3a:	693a      	ldr	r2, [r7, #16]
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d3b7      	bcc.n	8010db0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e46:	691b      	ldr	r3, [r3, #16]
 8010e48:	68fa      	ldr	r2, [r7, #12]
 8010e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010e4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010e52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2200      	movs	r2, #0
 8010e58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010e60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d105      	bne.n	8010e74 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	699b      	ldr	r3, [r3, #24]
 8010e6c:	f043 0210 	orr.w	r2, r3, #16
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	699a      	ldr	r2, [r3, #24]
 8010e78:	4b0e      	ldr	r3, [pc, #56]	; (8010eb4 <USB_DevInit+0x2d4>)
 8010e7a:	4313      	orrs	r3, r2
 8010e7c:	687a      	ldr	r2, [r7, #4]
 8010e7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d005      	beq.n	8010e92 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	699b      	ldr	r3, [r3, #24]
 8010e8a:	f043 0208 	orr.w	r2, r3, #8
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e94:	2b01      	cmp	r3, #1
 8010e96:	d105      	bne.n	8010ea4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	699a      	ldr	r2, [r3, #24]
 8010e9c:	4b06      	ldr	r3, [pc, #24]	; (8010eb8 <USB_DevInit+0x2d8>)
 8010e9e:	4313      	orrs	r3, r2
 8010ea0:	687a      	ldr	r2, [r7, #4]
 8010ea2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3718      	adds	r7, #24
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010eb0:	b004      	add	sp, #16
 8010eb2:	4770      	bx	lr
 8010eb4:	803c3800 	.word	0x803c3800
 8010eb8:	40000004 	.word	0x40000004

08010ebc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010ebc:	b480      	push	{r7}
 8010ebe:	b085      	sub	sp, #20
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
 8010ec4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	019b      	lsls	r3, r3, #6
 8010ece:	f043 0220 	orr.w	r2, r3, #32
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	3301      	adds	r3, #1
 8010eda:	60fb      	str	r3, [r7, #12]
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	4a09      	ldr	r2, [pc, #36]	; (8010f04 <USB_FlushTxFifo+0x48>)
 8010ee0:	4293      	cmp	r3, r2
 8010ee2:	d901      	bls.n	8010ee8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8010ee4:	2303      	movs	r3, #3
 8010ee6:	e006      	b.n	8010ef6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	691b      	ldr	r3, [r3, #16]
 8010eec:	f003 0320 	and.w	r3, r3, #32
 8010ef0:	2b20      	cmp	r3, #32
 8010ef2:	d0f0      	beq.n	8010ed6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8010ef4:	2300      	movs	r3, #0
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	3714      	adds	r7, #20
 8010efa:	46bd      	mov	sp, r7
 8010efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f00:	4770      	bx	lr
 8010f02:	bf00      	nop
 8010f04:	00030d40 	.word	0x00030d40

08010f08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010f08:	b480      	push	{r7}
 8010f0a:	b085      	sub	sp, #20
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8010f10:	2300      	movs	r3, #0
 8010f12:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2210      	movs	r2, #16
 8010f18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	3301      	adds	r3, #1
 8010f1e:	60fb      	str	r3, [r7, #12]
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	4a09      	ldr	r2, [pc, #36]	; (8010f48 <USB_FlushRxFifo+0x40>)
 8010f24:	4293      	cmp	r3, r2
 8010f26:	d901      	bls.n	8010f2c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8010f28:	2303      	movs	r3, #3
 8010f2a:	e006      	b.n	8010f3a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	691b      	ldr	r3, [r3, #16]
 8010f30:	f003 0310 	and.w	r3, r3, #16
 8010f34:	2b10      	cmp	r3, #16
 8010f36:	d0f0      	beq.n	8010f1a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8010f38:	2300      	movs	r3, #0
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3714      	adds	r7, #20
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr
 8010f46:	bf00      	nop
 8010f48:	00030d40 	.word	0x00030d40

08010f4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010f4c:	b480      	push	{r7}
 8010f4e:	b085      	sub	sp, #20
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	460b      	mov	r3, r1
 8010f56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f62:	681a      	ldr	r2, [r3, #0]
 8010f64:	78fb      	ldrb	r3, [r7, #3]
 8010f66:	68f9      	ldr	r1, [r7, #12]
 8010f68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010f6c:	4313      	orrs	r3, r2
 8010f6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010f70:	2300      	movs	r3, #0
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3714      	adds	r7, #20
 8010f76:	46bd      	mov	sp, r7
 8010f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7c:	4770      	bx	lr

08010f7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010f7e:	b580      	push	{r7, lr}
 8010f80:	b084      	sub	sp, #16
 8010f82:	af00      	add	r7, sp, #0
 8010f84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	68fa      	ldr	r2, [r7, #12]
 8010f94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f98:	f043 0302 	orr.w	r3, r3, #2
 8010f9c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8010f9e:	2003      	movs	r0, #3
 8010fa0:	f7fa fa1a 	bl	800b3d8 <HAL_Delay>

  return HAL_OK;
 8010fa4:	2300      	movs	r3, #0
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3710      	adds	r7, #16
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}
	...

08010fb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	b085      	sub	sp, #20
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	3301      	adds	r3, #1
 8010fc0:	60fb      	str	r3, [r7, #12]
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	4a13      	ldr	r2, [pc, #76]	; (8011014 <USB_CoreReset+0x64>)
 8010fc6:	4293      	cmp	r3, r2
 8010fc8:	d901      	bls.n	8010fce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010fca:	2303      	movs	r3, #3
 8010fcc:	e01b      	b.n	8011006 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	691b      	ldr	r3, [r3, #16]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	daf2      	bge.n	8010fbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	691b      	ldr	r3, [r3, #16]
 8010fde:	f043 0201 	orr.w	r2, r3, #1
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	3301      	adds	r3, #1
 8010fea:	60fb      	str	r3, [r7, #12]
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	4a09      	ldr	r2, [pc, #36]	; (8011014 <USB_CoreReset+0x64>)
 8010ff0:	4293      	cmp	r3, r2
 8010ff2:	d901      	bls.n	8010ff8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010ff4:	2303      	movs	r3, #3
 8010ff6:	e006      	b.n	8011006 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	691b      	ldr	r3, [r3, #16]
 8010ffc:	f003 0301 	and.w	r3, r3, #1
 8011000:	2b01      	cmp	r3, #1
 8011002:	d0f0      	beq.n	8010fe6 <USB_CoreReset+0x36>

  return HAL_OK;
 8011004:	2300      	movs	r3, #0
}
 8011006:	4618      	mov	r0, r3
 8011008:	3714      	adds	r7, #20
 801100a:	46bd      	mov	sp, r7
 801100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011010:	4770      	bx	lr
 8011012:	bf00      	nop
 8011014:	00030d40 	.word	0x00030d40

08011018 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8011018:	b5b0      	push	{r4, r5, r7, lr}
 801101a:	b08e      	sub	sp, #56	; 0x38
 801101c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 801101e:	4ba0      	ldr	r3, [pc, #640]	; (80112a0 <MX_LWIP_Init+0x288>)
 8011020:	22c0      	movs	r2, #192	; 0xc0
 8011022:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8011024:	4b9e      	ldr	r3, [pc, #632]	; (80112a0 <MX_LWIP_Init+0x288>)
 8011026:	22a8      	movs	r2, #168	; 0xa8
 8011028:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 801102a:	4b9d      	ldr	r3, [pc, #628]	; (80112a0 <MX_LWIP_Init+0x288>)
 801102c:	2201      	movs	r2, #1
 801102e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 70;
 8011030:	4b9b      	ldr	r3, [pc, #620]	; (80112a0 <MX_LWIP_Init+0x288>)
 8011032:	2246      	movs	r2, #70	; 0x46
 8011034:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8011036:	4b9b      	ldr	r3, [pc, #620]	; (80112a4 <MX_LWIP_Init+0x28c>)
 8011038:	22ff      	movs	r2, #255	; 0xff
 801103a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 801103c:	4b99      	ldr	r3, [pc, #612]	; (80112a4 <MX_LWIP_Init+0x28c>)
 801103e:	22ff      	movs	r2, #255	; 0xff
 8011040:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8011042:	4b98      	ldr	r3, [pc, #608]	; (80112a4 <MX_LWIP_Init+0x28c>)
 8011044:	22ff      	movs	r2, #255	; 0xff
 8011046:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8011048:	4b96      	ldr	r3, [pc, #600]	; (80112a4 <MX_LWIP_Init+0x28c>)
 801104a:	2200      	movs	r2, #0
 801104c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 801104e:	4b96      	ldr	r3, [pc, #600]	; (80112a8 <MX_LWIP_Init+0x290>)
 8011050:	2200      	movs	r2, #0
 8011052:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8011054:	4b94      	ldr	r3, [pc, #592]	; (80112a8 <MX_LWIP_Init+0x290>)
 8011056:	2200      	movs	r2, #0
 8011058:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 801105a:	4b93      	ldr	r3, [pc, #588]	; (80112a8 <MX_LWIP_Init+0x290>)
 801105c:	2200      	movs	r2, #0
 801105e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8011060:	4b91      	ldr	r3, [pc, #580]	; (80112a8 <MX_LWIP_Init+0x290>)
 8011062:	2200      	movs	r2, #0
 8011064:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8011066:	2100      	movs	r1, #0
 8011068:	2000      	movs	r0, #0
 801106a:	f003 fdcb 	bl	8014c04 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801106e:	4b8c      	ldr	r3, [pc, #560]	; (80112a0 <MX_LWIP_Init+0x288>)
 8011070:	781b      	ldrb	r3, [r3, #0]
 8011072:	061a      	lsls	r2, r3, #24
 8011074:	4b8a      	ldr	r3, [pc, #552]	; (80112a0 <MX_LWIP_Init+0x288>)
 8011076:	785b      	ldrb	r3, [r3, #1]
 8011078:	041b      	lsls	r3, r3, #16
 801107a:	431a      	orrs	r2, r3
 801107c:	4b88      	ldr	r3, [pc, #544]	; (80112a0 <MX_LWIP_Init+0x288>)
 801107e:	789b      	ldrb	r3, [r3, #2]
 8011080:	021b      	lsls	r3, r3, #8
 8011082:	4313      	orrs	r3, r2
 8011084:	4a86      	ldr	r2, [pc, #536]	; (80112a0 <MX_LWIP_Init+0x288>)
 8011086:	78d2      	ldrb	r2, [r2, #3]
 8011088:	4313      	orrs	r3, r2
 801108a:	061a      	lsls	r2, r3, #24
 801108c:	4b84      	ldr	r3, [pc, #528]	; (80112a0 <MX_LWIP_Init+0x288>)
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	0619      	lsls	r1, r3, #24
 8011092:	4b83      	ldr	r3, [pc, #524]	; (80112a0 <MX_LWIP_Init+0x288>)
 8011094:	785b      	ldrb	r3, [r3, #1]
 8011096:	041b      	lsls	r3, r3, #16
 8011098:	4319      	orrs	r1, r3
 801109a:	4b81      	ldr	r3, [pc, #516]	; (80112a0 <MX_LWIP_Init+0x288>)
 801109c:	789b      	ldrb	r3, [r3, #2]
 801109e:	021b      	lsls	r3, r3, #8
 80110a0:	430b      	orrs	r3, r1
 80110a2:	497f      	ldr	r1, [pc, #508]	; (80112a0 <MX_LWIP_Init+0x288>)
 80110a4:	78c9      	ldrb	r1, [r1, #3]
 80110a6:	430b      	orrs	r3, r1
 80110a8:	021b      	lsls	r3, r3, #8
 80110aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80110ae:	431a      	orrs	r2, r3
 80110b0:	4b7b      	ldr	r3, [pc, #492]	; (80112a0 <MX_LWIP_Init+0x288>)
 80110b2:	781b      	ldrb	r3, [r3, #0]
 80110b4:	0619      	lsls	r1, r3, #24
 80110b6:	4b7a      	ldr	r3, [pc, #488]	; (80112a0 <MX_LWIP_Init+0x288>)
 80110b8:	785b      	ldrb	r3, [r3, #1]
 80110ba:	041b      	lsls	r3, r3, #16
 80110bc:	4319      	orrs	r1, r3
 80110be:	4b78      	ldr	r3, [pc, #480]	; (80112a0 <MX_LWIP_Init+0x288>)
 80110c0:	789b      	ldrb	r3, [r3, #2]
 80110c2:	021b      	lsls	r3, r3, #8
 80110c4:	430b      	orrs	r3, r1
 80110c6:	4976      	ldr	r1, [pc, #472]	; (80112a0 <MX_LWIP_Init+0x288>)
 80110c8:	78c9      	ldrb	r1, [r1, #3]
 80110ca:	430b      	orrs	r3, r1
 80110cc:	0a1b      	lsrs	r3, r3, #8
 80110ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80110d2:	431a      	orrs	r2, r3
 80110d4:	4b72      	ldr	r3, [pc, #456]	; (80112a0 <MX_LWIP_Init+0x288>)
 80110d6:	781b      	ldrb	r3, [r3, #0]
 80110d8:	0619      	lsls	r1, r3, #24
 80110da:	4b71      	ldr	r3, [pc, #452]	; (80112a0 <MX_LWIP_Init+0x288>)
 80110dc:	785b      	ldrb	r3, [r3, #1]
 80110de:	041b      	lsls	r3, r3, #16
 80110e0:	4319      	orrs	r1, r3
 80110e2:	4b6f      	ldr	r3, [pc, #444]	; (80112a0 <MX_LWIP_Init+0x288>)
 80110e4:	789b      	ldrb	r3, [r3, #2]
 80110e6:	021b      	lsls	r3, r3, #8
 80110e8:	430b      	orrs	r3, r1
 80110ea:	496d      	ldr	r1, [pc, #436]	; (80112a0 <MX_LWIP_Init+0x288>)
 80110ec:	78c9      	ldrb	r1, [r1, #3]
 80110ee:	430b      	orrs	r3, r1
 80110f0:	0e1b      	lsrs	r3, r3, #24
 80110f2:	4313      	orrs	r3, r2
 80110f4:	4a6d      	ldr	r2, [pc, #436]	; (80112ac <MX_LWIP_Init+0x294>)
 80110f6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80110f8:	4b6a      	ldr	r3, [pc, #424]	; (80112a4 <MX_LWIP_Init+0x28c>)
 80110fa:	781b      	ldrb	r3, [r3, #0]
 80110fc:	061a      	lsls	r2, r3, #24
 80110fe:	4b69      	ldr	r3, [pc, #420]	; (80112a4 <MX_LWIP_Init+0x28c>)
 8011100:	785b      	ldrb	r3, [r3, #1]
 8011102:	041b      	lsls	r3, r3, #16
 8011104:	431a      	orrs	r2, r3
 8011106:	4b67      	ldr	r3, [pc, #412]	; (80112a4 <MX_LWIP_Init+0x28c>)
 8011108:	789b      	ldrb	r3, [r3, #2]
 801110a:	021b      	lsls	r3, r3, #8
 801110c:	4313      	orrs	r3, r2
 801110e:	4a65      	ldr	r2, [pc, #404]	; (80112a4 <MX_LWIP_Init+0x28c>)
 8011110:	78d2      	ldrb	r2, [r2, #3]
 8011112:	4313      	orrs	r3, r2
 8011114:	061a      	lsls	r2, r3, #24
 8011116:	4b63      	ldr	r3, [pc, #396]	; (80112a4 <MX_LWIP_Init+0x28c>)
 8011118:	781b      	ldrb	r3, [r3, #0]
 801111a:	0619      	lsls	r1, r3, #24
 801111c:	4b61      	ldr	r3, [pc, #388]	; (80112a4 <MX_LWIP_Init+0x28c>)
 801111e:	785b      	ldrb	r3, [r3, #1]
 8011120:	041b      	lsls	r3, r3, #16
 8011122:	4319      	orrs	r1, r3
 8011124:	4b5f      	ldr	r3, [pc, #380]	; (80112a4 <MX_LWIP_Init+0x28c>)
 8011126:	789b      	ldrb	r3, [r3, #2]
 8011128:	021b      	lsls	r3, r3, #8
 801112a:	430b      	orrs	r3, r1
 801112c:	495d      	ldr	r1, [pc, #372]	; (80112a4 <MX_LWIP_Init+0x28c>)
 801112e:	78c9      	ldrb	r1, [r1, #3]
 8011130:	430b      	orrs	r3, r1
 8011132:	021b      	lsls	r3, r3, #8
 8011134:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011138:	431a      	orrs	r2, r3
 801113a:	4b5a      	ldr	r3, [pc, #360]	; (80112a4 <MX_LWIP_Init+0x28c>)
 801113c:	781b      	ldrb	r3, [r3, #0]
 801113e:	0619      	lsls	r1, r3, #24
 8011140:	4b58      	ldr	r3, [pc, #352]	; (80112a4 <MX_LWIP_Init+0x28c>)
 8011142:	785b      	ldrb	r3, [r3, #1]
 8011144:	041b      	lsls	r3, r3, #16
 8011146:	4319      	orrs	r1, r3
 8011148:	4b56      	ldr	r3, [pc, #344]	; (80112a4 <MX_LWIP_Init+0x28c>)
 801114a:	789b      	ldrb	r3, [r3, #2]
 801114c:	021b      	lsls	r3, r3, #8
 801114e:	430b      	orrs	r3, r1
 8011150:	4954      	ldr	r1, [pc, #336]	; (80112a4 <MX_LWIP_Init+0x28c>)
 8011152:	78c9      	ldrb	r1, [r1, #3]
 8011154:	430b      	orrs	r3, r1
 8011156:	0a1b      	lsrs	r3, r3, #8
 8011158:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801115c:	431a      	orrs	r2, r3
 801115e:	4b51      	ldr	r3, [pc, #324]	; (80112a4 <MX_LWIP_Init+0x28c>)
 8011160:	781b      	ldrb	r3, [r3, #0]
 8011162:	0619      	lsls	r1, r3, #24
 8011164:	4b4f      	ldr	r3, [pc, #316]	; (80112a4 <MX_LWIP_Init+0x28c>)
 8011166:	785b      	ldrb	r3, [r3, #1]
 8011168:	041b      	lsls	r3, r3, #16
 801116a:	4319      	orrs	r1, r3
 801116c:	4b4d      	ldr	r3, [pc, #308]	; (80112a4 <MX_LWIP_Init+0x28c>)
 801116e:	789b      	ldrb	r3, [r3, #2]
 8011170:	021b      	lsls	r3, r3, #8
 8011172:	430b      	orrs	r3, r1
 8011174:	494b      	ldr	r1, [pc, #300]	; (80112a4 <MX_LWIP_Init+0x28c>)
 8011176:	78c9      	ldrb	r1, [r1, #3]
 8011178:	430b      	orrs	r3, r1
 801117a:	0e1b      	lsrs	r3, r3, #24
 801117c:	4313      	orrs	r3, r2
 801117e:	4a4c      	ldr	r2, [pc, #304]	; (80112b0 <MX_LWIP_Init+0x298>)
 8011180:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8011182:	4b49      	ldr	r3, [pc, #292]	; (80112a8 <MX_LWIP_Init+0x290>)
 8011184:	781b      	ldrb	r3, [r3, #0]
 8011186:	061a      	lsls	r2, r3, #24
 8011188:	4b47      	ldr	r3, [pc, #284]	; (80112a8 <MX_LWIP_Init+0x290>)
 801118a:	785b      	ldrb	r3, [r3, #1]
 801118c:	041b      	lsls	r3, r3, #16
 801118e:	431a      	orrs	r2, r3
 8011190:	4b45      	ldr	r3, [pc, #276]	; (80112a8 <MX_LWIP_Init+0x290>)
 8011192:	789b      	ldrb	r3, [r3, #2]
 8011194:	021b      	lsls	r3, r3, #8
 8011196:	4313      	orrs	r3, r2
 8011198:	4a43      	ldr	r2, [pc, #268]	; (80112a8 <MX_LWIP_Init+0x290>)
 801119a:	78d2      	ldrb	r2, [r2, #3]
 801119c:	4313      	orrs	r3, r2
 801119e:	061a      	lsls	r2, r3, #24
 80111a0:	4b41      	ldr	r3, [pc, #260]	; (80112a8 <MX_LWIP_Init+0x290>)
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	0619      	lsls	r1, r3, #24
 80111a6:	4b40      	ldr	r3, [pc, #256]	; (80112a8 <MX_LWIP_Init+0x290>)
 80111a8:	785b      	ldrb	r3, [r3, #1]
 80111aa:	041b      	lsls	r3, r3, #16
 80111ac:	4319      	orrs	r1, r3
 80111ae:	4b3e      	ldr	r3, [pc, #248]	; (80112a8 <MX_LWIP_Init+0x290>)
 80111b0:	789b      	ldrb	r3, [r3, #2]
 80111b2:	021b      	lsls	r3, r3, #8
 80111b4:	430b      	orrs	r3, r1
 80111b6:	493c      	ldr	r1, [pc, #240]	; (80112a8 <MX_LWIP_Init+0x290>)
 80111b8:	78c9      	ldrb	r1, [r1, #3]
 80111ba:	430b      	orrs	r3, r1
 80111bc:	021b      	lsls	r3, r3, #8
 80111be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80111c2:	431a      	orrs	r2, r3
 80111c4:	4b38      	ldr	r3, [pc, #224]	; (80112a8 <MX_LWIP_Init+0x290>)
 80111c6:	781b      	ldrb	r3, [r3, #0]
 80111c8:	0619      	lsls	r1, r3, #24
 80111ca:	4b37      	ldr	r3, [pc, #220]	; (80112a8 <MX_LWIP_Init+0x290>)
 80111cc:	785b      	ldrb	r3, [r3, #1]
 80111ce:	041b      	lsls	r3, r3, #16
 80111d0:	4319      	orrs	r1, r3
 80111d2:	4b35      	ldr	r3, [pc, #212]	; (80112a8 <MX_LWIP_Init+0x290>)
 80111d4:	789b      	ldrb	r3, [r3, #2]
 80111d6:	021b      	lsls	r3, r3, #8
 80111d8:	430b      	orrs	r3, r1
 80111da:	4933      	ldr	r1, [pc, #204]	; (80112a8 <MX_LWIP_Init+0x290>)
 80111dc:	78c9      	ldrb	r1, [r1, #3]
 80111de:	430b      	orrs	r3, r1
 80111e0:	0a1b      	lsrs	r3, r3, #8
 80111e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80111e6:	431a      	orrs	r2, r3
 80111e8:	4b2f      	ldr	r3, [pc, #188]	; (80112a8 <MX_LWIP_Init+0x290>)
 80111ea:	781b      	ldrb	r3, [r3, #0]
 80111ec:	0619      	lsls	r1, r3, #24
 80111ee:	4b2e      	ldr	r3, [pc, #184]	; (80112a8 <MX_LWIP_Init+0x290>)
 80111f0:	785b      	ldrb	r3, [r3, #1]
 80111f2:	041b      	lsls	r3, r3, #16
 80111f4:	4319      	orrs	r1, r3
 80111f6:	4b2c      	ldr	r3, [pc, #176]	; (80112a8 <MX_LWIP_Init+0x290>)
 80111f8:	789b      	ldrb	r3, [r3, #2]
 80111fa:	021b      	lsls	r3, r3, #8
 80111fc:	430b      	orrs	r3, r1
 80111fe:	492a      	ldr	r1, [pc, #168]	; (80112a8 <MX_LWIP_Init+0x290>)
 8011200:	78c9      	ldrb	r1, [r1, #3]
 8011202:	430b      	orrs	r3, r1
 8011204:	0e1b      	lsrs	r3, r3, #24
 8011206:	4313      	orrs	r3, r2
 8011208:	4a2a      	ldr	r2, [pc, #168]	; (80112b4 <MX_LWIP_Init+0x29c>)
 801120a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 801120c:	4b2a      	ldr	r3, [pc, #168]	; (80112b8 <MX_LWIP_Init+0x2a0>)
 801120e:	9302      	str	r3, [sp, #8]
 8011210:	4b2a      	ldr	r3, [pc, #168]	; (80112bc <MX_LWIP_Init+0x2a4>)
 8011212:	9301      	str	r3, [sp, #4]
 8011214:	2300      	movs	r3, #0
 8011216:	9300      	str	r3, [sp, #0]
 8011218:	4b26      	ldr	r3, [pc, #152]	; (80112b4 <MX_LWIP_Init+0x29c>)
 801121a:	4a25      	ldr	r2, [pc, #148]	; (80112b0 <MX_LWIP_Init+0x298>)
 801121c:	4923      	ldr	r1, [pc, #140]	; (80112ac <MX_LWIP_Init+0x294>)
 801121e:	4828      	ldr	r0, [pc, #160]	; (80112c0 <MX_LWIP_Init+0x2a8>)
 8011220:	f005 f8c4 	bl	80163ac <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8011224:	4826      	ldr	r0, [pc, #152]	; (80112c0 <MX_LWIP_Init+0x2a8>)
 8011226:	f005 fa73 	bl	8016710 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801122a:	4b25      	ldr	r3, [pc, #148]	; (80112c0 <MX_LWIP_Init+0x2a8>)
 801122c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011230:	089b      	lsrs	r3, r3, #2
 8011232:	f003 0301 	and.w	r3, r3, #1
 8011236:	b2db      	uxtb	r3, r3
 8011238:	2b00      	cmp	r3, #0
 801123a:	d003      	beq.n	8011244 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801123c:	4820      	ldr	r0, [pc, #128]	; (80112c0 <MX_LWIP_Init+0x2a8>)
 801123e:	f005 fa77 	bl	8016730 <netif_set_up>
 8011242:	e002      	b.n	801124a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8011244:	481e      	ldr	r0, [pc, #120]	; (80112c0 <MX_LWIP_Init+0x2a8>)
 8011246:	f005 fadf 	bl	8016808 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 801124a:	491e      	ldr	r1, [pc, #120]	; (80112c4 <MX_LWIP_Init+0x2ac>)
 801124c:	481c      	ldr	r0, [pc, #112]	; (80112c0 <MX_LWIP_Init+0x2a8>)
 801124e:	f005 fb71 	bl	8016934 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8011252:	2300      	movs	r3, #0
 8011254:	623b      	str	r3, [r7, #32]
 8011256:	2300      	movs	r3, #0
 8011258:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 801125a:	f107 0320 	add.w	r3, r7, #32
 801125e:	2101      	movs	r1, #1
 8011260:	4618      	mov	r0, r3
 8011262:	f000 fd8f 	bl	8011d84 <osSemaphoreCreate>
 8011266:	4602      	mov	r2, r0
 8011268:	4b17      	ldr	r3, [pc, #92]	; (80112c8 <MX_LWIP_Init+0x2b0>)
 801126a:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 801126c:	4b17      	ldr	r3, [pc, #92]	; (80112cc <MX_LWIP_Init+0x2b4>)
 801126e:	4a14      	ldr	r2, [pc, #80]	; (80112c0 <MX_LWIP_Init+0x2a8>)
 8011270:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8011272:	4b15      	ldr	r3, [pc, #84]	; (80112c8 <MX_LWIP_Init+0x2b0>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	4a15      	ldr	r2, [pc, #84]	; (80112cc <MX_LWIP_Init+0x2b4>)
 8011278:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 801127a:	4b15      	ldr	r3, [pc, #84]	; (80112d0 <MX_LWIP_Init+0x2b8>)
 801127c:	1d3c      	adds	r4, r7, #4
 801127e:	461d      	mov	r5, r3
 8011280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011284:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011288:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 801128c:	1d3b      	adds	r3, r7, #4
 801128e:	490f      	ldr	r1, [pc, #60]	; (80112cc <MX_LWIP_Init+0x2b4>)
 8011290:	4618      	mov	r0, r3
 8011292:	f000 fc7a 	bl	8011b8a <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8011296:	bf00      	nop
 8011298:	3728      	adds	r7, #40	; 0x28
 801129a:	46bd      	mov	sp, r7
 801129c:	bdb0      	pop	{r4, r5, r7, pc}
 801129e:	bf00      	nop
 80112a0:	200196e4 	.word	0x200196e4
 80112a4:	200196e0 	.word	0x200196e0
 80112a8:	200196a4 	.word	0x200196a4
 80112ac:	200196dc 	.word	0x200196dc
 80112b0:	200196e8 	.word	0x200196e8
 80112b4:	200196ec 	.word	0x200196ec
 80112b8:	08014b41 	.word	0x08014b41
 80112bc:	08011919 	.word	0x08011919
 80112c0:	200196a8 	.word	0x200196a8
 80112c4:	080119fd 	.word	0x080119fd
 80112c8:	20000344 	.word	0x20000344
 80112cc:	2001969c 	.word	0x2001969c
 80112d0:	080218bc 	.word	0x080218bc

080112d4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b08e      	sub	sp, #56	; 0x38
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80112dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80112e0:	2200      	movs	r2, #0
 80112e2:	601a      	str	r2, [r3, #0]
 80112e4:	605a      	str	r2, [r3, #4]
 80112e6:	609a      	str	r2, [r3, #8]
 80112e8:	60da      	str	r2, [r3, #12]
 80112ea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	4a52      	ldr	r2, [pc, #328]	; (801143c <HAL_ETH_MspInit+0x168>)
 80112f2:	4293      	cmp	r3, r2
 80112f4:	f040 809e 	bne.w	8011434 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80112f8:	4b51      	ldr	r3, [pc, #324]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 80112fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112fc:	4a50      	ldr	r2, [pc, #320]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 80112fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011302:	6313      	str	r3, [r2, #48]	; 0x30
 8011304:	4b4e      	ldr	r3, [pc, #312]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 8011306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801130c:	623b      	str	r3, [r7, #32]
 801130e:	6a3b      	ldr	r3, [r7, #32]
 8011310:	4b4b      	ldr	r3, [pc, #300]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 8011312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011314:	4a4a      	ldr	r2, [pc, #296]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 8011316:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801131a:	6313      	str	r3, [r2, #48]	; 0x30
 801131c:	4b48      	ldr	r3, [pc, #288]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 801131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011320:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011324:	61fb      	str	r3, [r7, #28]
 8011326:	69fb      	ldr	r3, [r7, #28]
 8011328:	4b45      	ldr	r3, [pc, #276]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 801132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801132c:	4a44      	ldr	r2, [pc, #272]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 801132e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011332:	6313      	str	r3, [r2, #48]	; 0x30
 8011334:	4b42      	ldr	r3, [pc, #264]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 8011336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801133c:	61bb      	str	r3, [r7, #24]
 801133e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011340:	4b3f      	ldr	r3, [pc, #252]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 8011342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011344:	4a3e      	ldr	r2, [pc, #248]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 8011346:	f043 0304 	orr.w	r3, r3, #4
 801134a:	6313      	str	r3, [r2, #48]	; 0x30
 801134c:	4b3c      	ldr	r3, [pc, #240]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 801134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011350:	f003 0304 	and.w	r3, r3, #4
 8011354:	617b      	str	r3, [r7, #20]
 8011356:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011358:	4b39      	ldr	r3, [pc, #228]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 801135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801135c:	4a38      	ldr	r2, [pc, #224]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 801135e:	f043 0301 	orr.w	r3, r3, #1
 8011362:	6313      	str	r3, [r2, #48]	; 0x30
 8011364:	4b36      	ldr	r3, [pc, #216]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 8011366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011368:	f003 0301 	and.w	r3, r3, #1
 801136c:	613b      	str	r3, [r7, #16]
 801136e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011370:	4b33      	ldr	r3, [pc, #204]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 8011372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011374:	4a32      	ldr	r2, [pc, #200]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 8011376:	f043 0302 	orr.w	r3, r3, #2
 801137a:	6313      	str	r3, [r2, #48]	; 0x30
 801137c:	4b30      	ldr	r3, [pc, #192]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 801137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011380:	f003 0302 	and.w	r3, r3, #2
 8011384:	60fb      	str	r3, [r7, #12]
 8011386:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8011388:	4b2d      	ldr	r3, [pc, #180]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 801138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801138c:	4a2c      	ldr	r2, [pc, #176]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 801138e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011392:	6313      	str	r3, [r2, #48]	; 0x30
 8011394:	4b2a      	ldr	r3, [pc, #168]	; (8011440 <HAL_ETH_MspInit+0x16c>)
 8011396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801139c:	60bb      	str	r3, [r7, #8]
 801139e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80113a0:	2332      	movs	r3, #50	; 0x32
 80113a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113a4:	2302      	movs	r3, #2
 80113a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113a8:	2300      	movs	r3, #0
 80113aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80113ac:	2303      	movs	r3, #3
 80113ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80113b0:	230b      	movs	r3, #11
 80113b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80113b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80113b8:	4619      	mov	r1, r3
 80113ba:	4822      	ldr	r0, [pc, #136]	; (8011444 <HAL_ETH_MspInit+0x170>)
 80113bc:	f7fb ffcc 	bl	800d358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80113c0:	2386      	movs	r3, #134	; 0x86
 80113c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113c4:	2302      	movs	r3, #2
 80113c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113c8:	2300      	movs	r3, #0
 80113ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80113cc:	2303      	movs	r3, #3
 80113ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80113d0:	230b      	movs	r3, #11
 80113d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80113d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80113d8:	4619      	mov	r1, r3
 80113da:	481b      	ldr	r0, [pc, #108]	; (8011448 <HAL_ETH_MspInit+0x174>)
 80113dc:	f7fb ffbc 	bl	800d358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80113e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80113e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113e6:	2302      	movs	r3, #2
 80113e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113ea:	2300      	movs	r3, #0
 80113ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80113ee:	2303      	movs	r3, #3
 80113f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80113f2:	230b      	movs	r3, #11
 80113f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80113f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80113fa:	4619      	mov	r1, r3
 80113fc:	4813      	ldr	r0, [pc, #76]	; (801144c <HAL_ETH_MspInit+0x178>)
 80113fe:	f7fb ffab 	bl	800d358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8011402:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8011406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011408:	2302      	movs	r3, #2
 801140a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801140c:	2300      	movs	r3, #0
 801140e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011410:	2303      	movs	r3, #3
 8011412:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011414:	230b      	movs	r3, #11
 8011416:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8011418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801141c:	4619      	mov	r1, r3
 801141e:	480c      	ldr	r0, [pc, #48]	; (8011450 <HAL_ETH_MspInit+0x17c>)
 8011420:	f7fb ff9a 	bl	800d358 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8011424:	2200      	movs	r2, #0
 8011426:	2105      	movs	r1, #5
 8011428:	203d      	movs	r0, #61	; 0x3d
 801142a:	f7fa f8d2 	bl	800b5d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801142e:	203d      	movs	r0, #61	; 0x3d
 8011430:	f7fa f8eb 	bl	800b60a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8011434:	bf00      	nop
 8011436:	3738      	adds	r7, #56	; 0x38
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}
 801143c:	40028000 	.word	0x40028000
 8011440:	40023800 	.word	0x40023800
 8011444:	40020800 	.word	0x40020800
 8011448:	40020000 	.word	0x40020000
 801144c:	40020400 	.word	0x40020400
 8011450:	40021800 	.word	0x40021800

08011454 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b082      	sub	sp, #8
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 801145c:	4b04      	ldr	r3, [pc, #16]	; (8011470 <HAL_ETH_RxCpltCallback+0x1c>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	4618      	mov	r0, r3
 8011462:	f000 fd11 	bl	8011e88 <osSemaphoreRelease>
}
 8011466:	bf00      	nop
 8011468:	3708      	adds	r7, #8
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}
 801146e:	bf00      	nop
 8011470:	20000348 	.word	0x20000348

08011474 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8011474:	b5b0      	push	{r4, r5, r7, lr}
 8011476:	b090      	sub	sp, #64	; 0x40
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 801147c:	2300      	movs	r3, #0
 801147e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8011480:	4b5c      	ldr	r3, [pc, #368]	; (80115f4 <low_level_init+0x180>)
 8011482:	4a5d      	ldr	r2, [pc, #372]	; (80115f8 <low_level_init+0x184>)
 8011484:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8011486:	4b5b      	ldr	r3, [pc, #364]	; (80115f4 <low_level_init+0x180>)
 8011488:	2201      	movs	r2, #1
 801148a:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 801148c:	4b59      	ldr	r3, [pc, #356]	; (80115f4 <low_level_init+0x180>)
 801148e:	2200      	movs	r2, #0
 8011490:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8011492:	2300      	movs	r3, #0
 8011494:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8011498:	2380      	movs	r3, #128	; 0x80
 801149a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 801149e:	23e1      	movs	r3, #225	; 0xe1
 80114a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80114a4:	2300      	movs	r3, #0
 80114a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80114aa:	2300      	movs	r3, #0
 80114ac:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80114b0:	2300      	movs	r3, #0
 80114b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80114b6:	4a4f      	ldr	r2, [pc, #316]	; (80115f4 <low_level_init+0x180>)
 80114b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80114bc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80114be:	4b4d      	ldr	r3, [pc, #308]	; (80115f4 <low_level_init+0x180>)
 80114c0:	2201      	movs	r2, #1
 80114c2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80114c4:	4b4b      	ldr	r3, [pc, #300]	; (80115f4 <low_level_init+0x180>)
 80114c6:	2200      	movs	r2, #0
 80114c8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80114ca:	4b4a      	ldr	r3, [pc, #296]	; (80115f4 <low_level_init+0x180>)
 80114cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80114d0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80114d2:	4848      	ldr	r0, [pc, #288]	; (80115f4 <low_level_init+0x180>)
 80114d4:	f7fa fdba 	bl	800c04c <HAL_ETH_Init>
 80114d8:	4603      	mov	r3, r0
 80114da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80114de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d108      	bne.n	80114f8 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80114ec:	f043 0304 	orr.w	r3, r3, #4
 80114f0:	b2da      	uxtb	r2, r3
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80114f8:	2304      	movs	r3, #4
 80114fa:	4a40      	ldr	r2, [pc, #256]	; (80115fc <low_level_init+0x188>)
 80114fc:	4940      	ldr	r1, [pc, #256]	; (8011600 <low_level_init+0x18c>)
 80114fe:	483d      	ldr	r0, [pc, #244]	; (80115f4 <low_level_init+0x180>)
 8011500:	f7fa ff40 	bl	800c384 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8011504:	2304      	movs	r3, #4
 8011506:	4a3f      	ldr	r2, [pc, #252]	; (8011604 <low_level_init+0x190>)
 8011508:	493f      	ldr	r1, [pc, #252]	; (8011608 <low_level_init+0x194>)
 801150a:	483a      	ldr	r0, [pc, #232]	; (80115f4 <low_level_init+0x180>)
 801150c:	f7fa ffa3 	bl	800c456 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	2206      	movs	r2, #6
 8011514:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8011518:	4b36      	ldr	r3, [pc, #216]	; (80115f4 <low_level_init+0x180>)
 801151a:	695b      	ldr	r3, [r3, #20]
 801151c:	781a      	ldrb	r2, [r3, #0]
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8011524:	4b33      	ldr	r3, [pc, #204]	; (80115f4 <low_level_init+0x180>)
 8011526:	695b      	ldr	r3, [r3, #20]
 8011528:	785a      	ldrb	r2, [r3, #1]
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8011530:	4b30      	ldr	r3, [pc, #192]	; (80115f4 <low_level_init+0x180>)
 8011532:	695b      	ldr	r3, [r3, #20]
 8011534:	789a      	ldrb	r2, [r3, #2]
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801153c:	4b2d      	ldr	r3, [pc, #180]	; (80115f4 <low_level_init+0x180>)
 801153e:	695b      	ldr	r3, [r3, #20]
 8011540:	78da      	ldrb	r2, [r3, #3]
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8011548:	4b2a      	ldr	r3, [pc, #168]	; (80115f4 <low_level_init+0x180>)
 801154a:	695b      	ldr	r3, [r3, #20]
 801154c:	791a      	ldrb	r2, [r3, #4]
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8011554:	4b27      	ldr	r3, [pc, #156]	; (80115f4 <low_level_init+0x180>)
 8011556:	695b      	ldr	r3, [r3, #20]
 8011558:	795a      	ldrb	r2, [r3, #5]
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8011566:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801156e:	f043 030a 	orr.w	r3, r3, #10
 8011572:	b2da      	uxtb	r2, r3
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 801157a:	2300      	movs	r3, #0
 801157c:	62bb      	str	r3, [r7, #40]	; 0x28
 801157e:	2300      	movs	r3, #0
 8011580:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8011582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011586:	2101      	movs	r1, #1
 8011588:	4618      	mov	r0, r3
 801158a:	f000 fbfb 	bl	8011d84 <osSemaphoreCreate>
 801158e:	4602      	mov	r2, r0
 8011590:	4b1e      	ldr	r3, [pc, #120]	; (801160c <low_level_init+0x198>)
 8011592:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8011594:	4b1e      	ldr	r3, [pc, #120]	; (8011610 <low_level_init+0x19c>)
 8011596:	f107 040c 	add.w	r4, r7, #12
 801159a:	461d      	mov	r5, r3
 801159c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801159e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80115a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80115a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80115a8:	f107 030c 	add.w	r3, r7, #12
 80115ac:	6879      	ldr	r1, [r7, #4]
 80115ae:	4618      	mov	r0, r3
 80115b0:	f000 faeb 	bl	8011b8a <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80115b4:	480f      	ldr	r0, [pc, #60]	; (80115f4 <low_level_init+0x180>)
 80115b6:	f7fb fa76 	bl	800caa6 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */
    
/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80115ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80115be:	461a      	mov	r2, r3
 80115c0:	211d      	movs	r1, #29
 80115c2:	480c      	ldr	r0, [pc, #48]	; (80115f4 <low_level_init+0x180>)
 80115c4:	f7fb f9a1 	bl	800c90a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80115c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ca:	f043 030b 	orr.w	r3, r3, #11
 80115ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80115d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115d2:	461a      	mov	r2, r3
 80115d4:	211d      	movs	r1, #29
 80115d6:	4807      	ldr	r0, [pc, #28]	; (80115f4 <low_level_init+0x180>)
 80115d8:	f7fb f9ff 	bl	800c9da <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80115dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80115e0:	461a      	mov	r2, r3
 80115e2:	211d      	movs	r1, #29
 80115e4:	4803      	ldr	r0, [pc, #12]	; (80115f4 <low_level_init+0x180>)
 80115e6:	f7fb f990 	bl	800c90a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80115ea:	bf00      	nop
 80115ec:	3740      	adds	r7, #64	; 0x40
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bdb0      	pop	{r4, r5, r7, pc}
 80115f2:	bf00      	nop
 80115f4:	2001afc0 	.word	0x2001afc0
 80115f8:	40028000 	.word	0x40028000
 80115fc:	2001b008 	.word	0x2001b008
 8011600:	200196f0 	.word	0x200196f0
 8011604:	20019770 	.word	0x20019770
 8011608:	2001af40 	.word	0x2001af40
 801160c:	20000348 	.word	0x20000348
 8011610:	080218e0 	.word	0x080218e0

08011614 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b08a      	sub	sp, #40	; 0x28
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801161e:	4b4b      	ldr	r3, [pc, #300]	; (801174c <low_level_output+0x138>)
 8011620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011622:	689b      	ldr	r3, [r3, #8]
 8011624:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8011626:	2300      	movs	r3, #0
 8011628:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 801162a:	2300      	movs	r3, #0
 801162c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 801162e:	2300      	movs	r3, #0
 8011630:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8011632:	2300      	movs	r3, #0
 8011634:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8011636:	4b45      	ldr	r3, [pc, #276]	; (801174c <low_level_output+0x138>)
 8011638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801163a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 801163c:	2300      	movs	r3, #0
 801163e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	623b      	str	r3, [r7, #32]
 8011644:	e05a      	b.n	80116fc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8011646:	69bb      	ldr	r3, [r7, #24]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	2b00      	cmp	r3, #0
 801164c:	da03      	bge.n	8011656 <low_level_output+0x42>
      {
        errval = ERR_USE;
 801164e:	23f8      	movs	r3, #248	; 0xf8
 8011650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8011654:	e05c      	b.n	8011710 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8011656:	6a3b      	ldr	r3, [r7, #32]
 8011658:	895b      	ldrh	r3, [r3, #10]
 801165a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 801165c:	2300      	movs	r3, #0
 801165e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8011660:	e02f      	b.n	80116c2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8011662:	69fa      	ldr	r2, [r7, #28]
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	18d0      	adds	r0, r2, r3
 8011668:	6a3b      	ldr	r3, [r7, #32]
 801166a:	685a      	ldr	r2, [r3, #4]
 801166c:	68bb      	ldr	r3, [r7, #8]
 801166e:	18d1      	adds	r1, r2, r3
 8011670:	693a      	ldr	r2, [r7, #16]
 8011672:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8011676:	1a9b      	subs	r3, r3, r2
 8011678:	461a      	mov	r2, r3
 801167a:	f00e ff38 	bl	80204ee <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 801167e:	69bb      	ldr	r3, [r7, #24]
 8011680:	68db      	ldr	r3, [r3, #12]
 8011682:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8011684:	69bb      	ldr	r3, [r7, #24]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	2b00      	cmp	r3, #0
 801168a:	da03      	bge.n	8011694 <low_level_output+0x80>
        {
          errval = ERR_USE;
 801168c:	23f8      	movs	r3, #248	; 0xf8
 801168e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8011692:	e03d      	b.n	8011710 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8011694:	69bb      	ldr	r3, [r7, #24]
 8011696:	689b      	ldr	r3, [r3, #8]
 8011698:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 801169a:	693a      	ldr	r2, [r7, #16]
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	4413      	add	r3, r2
 80116a0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80116a4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80116a6:	68ba      	ldr	r2, [r7, #8]
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	1ad3      	subs	r3, r2, r3
 80116ac:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80116b0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80116b2:	697a      	ldr	r2, [r7, #20]
 80116b4:	693b      	ldr	r3, [r7, #16]
 80116b6:	1ad3      	subs	r3, r2, r3
 80116b8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80116bc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80116be:	2300      	movs	r3, #0
 80116c0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80116c2:	68fa      	ldr	r2, [r7, #12]
 80116c4:	693b      	ldr	r3, [r7, #16]
 80116c6:	4413      	add	r3, r2
 80116c8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80116cc:	4293      	cmp	r3, r2
 80116ce:	d8c8      	bhi.n	8011662 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80116d0:	69fa      	ldr	r2, [r7, #28]
 80116d2:	693b      	ldr	r3, [r7, #16]
 80116d4:	18d0      	adds	r0, r2, r3
 80116d6:	6a3b      	ldr	r3, [r7, #32]
 80116d8:	685a      	ldr	r2, [r3, #4]
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	4413      	add	r3, r2
 80116de:	68fa      	ldr	r2, [r7, #12]
 80116e0:	4619      	mov	r1, r3
 80116e2:	f00e ff04 	bl	80204ee <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80116e6:	693a      	ldr	r2, [r7, #16]
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	4413      	add	r3, r2
 80116ec:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80116ee:	697a      	ldr	r2, [r7, #20]
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	4413      	add	r3, r2
 80116f4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80116f6:	6a3b      	ldr	r3, [r7, #32]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	623b      	str	r3, [r7, #32]
 80116fc:	6a3b      	ldr	r3, [r7, #32]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d1a1      	bne.n	8011646 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8011702:	6979      	ldr	r1, [r7, #20]
 8011704:	4811      	ldr	r0, [pc, #68]	; (801174c <low_level_output+0x138>)
 8011706:	f7fa ff13 	bl	800c530 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 801170a:	2300      	movs	r3, #0
 801170c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8011710:	4b0e      	ldr	r3, [pc, #56]	; (801174c <low_level_output+0x138>)
 8011712:	681a      	ldr	r2, [r3, #0]
 8011714:	f241 0314 	movw	r3, #4116	; 0x1014
 8011718:	4413      	add	r3, r2
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	f003 0320 	and.w	r3, r3, #32
 8011720:	2b00      	cmp	r3, #0
 8011722:	d00d      	beq.n	8011740 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8011724:	4b09      	ldr	r3, [pc, #36]	; (801174c <low_level_output+0x138>)
 8011726:	681a      	ldr	r2, [r3, #0]
 8011728:	f241 0314 	movw	r3, #4116	; 0x1014
 801172c:	4413      	add	r3, r2
 801172e:	2220      	movs	r2, #32
 8011730:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8011732:	4b06      	ldr	r3, [pc, #24]	; (801174c <low_level_output+0x138>)
 8011734:	681a      	ldr	r2, [r3, #0]
 8011736:	f241 0304 	movw	r3, #4100	; 0x1004
 801173a:	4413      	add	r3, r2
 801173c:	2200      	movs	r2, #0
 801173e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8011740:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011744:	4618      	mov	r0, r3
 8011746:	3728      	adds	r7, #40	; 0x28
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}
 801174c:	2001afc0 	.word	0x2001afc0

08011750 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b08c      	sub	sp, #48	; 0x30
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8011758:	2300      	movs	r3, #0
 801175a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 801175c:	2300      	movs	r3, #0
 801175e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8011760:	2300      	movs	r3, #0
 8011762:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8011764:	2300      	movs	r3, #0
 8011766:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8011768:	2300      	movs	r3, #0
 801176a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 801176c:	2300      	movs	r3, #0
 801176e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8011770:	2300      	movs	r3, #0
 8011772:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8011774:	484f      	ldr	r0, [pc, #316]	; (80118b4 <low_level_input+0x164>)
 8011776:	f7fa ffc5 	bl	800c704 <HAL_ETH_GetReceivedFrame_IT>
 801177a:	4603      	mov	r3, r0
 801177c:	2b00      	cmp	r3, #0
 801177e:	d001      	beq.n	8011784 <low_level_input+0x34>

    return NULL;
 8011780:	2300      	movs	r3, #0
 8011782:	e092      	b.n	80118aa <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8011784:	4b4b      	ldr	r3, [pc, #300]	; (80118b4 <low_level_input+0x164>)
 8011786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011788:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 801178a:	4b4a      	ldr	r3, [pc, #296]	; (80118b4 <low_level_input+0x164>)
 801178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801178e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8011790:	89fb      	ldrh	r3, [r7, #14]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d007      	beq.n	80117a6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8011796:	89fb      	ldrh	r3, [r7, #14]
 8011798:	f44f 72c1 	mov.w	r2, #386	; 0x182
 801179c:	4619      	mov	r1, r3
 801179e:	2000      	movs	r0, #0
 80117a0:	f005 f992 	bl	8016ac8 <pbuf_alloc>
 80117a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80117a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d04b      	beq.n	8011844 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80117ac:	4b41      	ldr	r3, [pc, #260]	; (80118b4 <low_level_input+0x164>)
 80117ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117b0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80117b2:	2300      	movs	r3, #0
 80117b4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80117b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80117ba:	e040      	b.n	801183e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80117bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117be:	895b      	ldrh	r3, [r3, #10]
 80117c0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80117c2:	2300      	movs	r3, #0
 80117c4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80117c6:	e021      	b.n	801180c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80117c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ca:	685a      	ldr	r2, [r3, #4]
 80117cc:	69bb      	ldr	r3, [r7, #24]
 80117ce:	18d0      	adds	r0, r2, r3
 80117d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117d2:	69fb      	ldr	r3, [r7, #28]
 80117d4:	18d1      	adds	r1, r2, r3
 80117d6:	69fa      	ldr	r2, [r7, #28]
 80117d8:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80117dc:	1a9b      	subs	r3, r3, r2
 80117de:	461a      	mov	r2, r3
 80117e0:	f00e fe85 	bl	80204ee <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80117e4:	6a3b      	ldr	r3, [r7, #32]
 80117e6:	68db      	ldr	r3, [r3, #12]
 80117e8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80117ea:	6a3b      	ldr	r3, [r7, #32]
 80117ec:	689b      	ldr	r3, [r3, #8]
 80117ee:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80117f0:	69fa      	ldr	r2, [r7, #28]
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	4413      	add	r3, r2
 80117f6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80117fa:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80117fc:	69ba      	ldr	r2, [r7, #24]
 80117fe:	69fb      	ldr	r3, [r7, #28]
 8011800:	1ad3      	subs	r3, r2, r3
 8011802:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8011806:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8011808:	2300      	movs	r3, #0
 801180a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801180c:	697a      	ldr	r2, [r7, #20]
 801180e:	69fb      	ldr	r3, [r7, #28]
 8011810:	4413      	add	r3, r2
 8011812:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011816:	4293      	cmp	r3, r2
 8011818:	d8d6      	bhi.n	80117c8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 801181a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801181c:	685a      	ldr	r2, [r3, #4]
 801181e:	69bb      	ldr	r3, [r7, #24]
 8011820:	18d0      	adds	r0, r2, r3
 8011822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011824:	69fb      	ldr	r3, [r7, #28]
 8011826:	4413      	add	r3, r2
 8011828:	697a      	ldr	r2, [r7, #20]
 801182a:	4619      	mov	r1, r3
 801182c:	f00e fe5f 	bl	80204ee <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8011830:	69fa      	ldr	r2, [r7, #28]
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	4413      	add	r3, r2
 8011836:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8011838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	62bb      	str	r3, [r7, #40]	; 0x28
 801183e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011840:	2b00      	cmp	r3, #0
 8011842:	d1bb      	bne.n	80117bc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8011844:	4b1b      	ldr	r3, [pc, #108]	; (80118b4 <low_level_input+0x164>)
 8011846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011848:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801184a:	2300      	movs	r3, #0
 801184c:	613b      	str	r3, [r7, #16]
 801184e:	e00b      	b.n	8011868 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8011850:	6a3b      	ldr	r3, [r7, #32]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8011858:	6a3b      	ldr	r3, [r7, #32]
 801185a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801185c:	6a3b      	ldr	r3, [r7, #32]
 801185e:	68db      	ldr	r3, [r3, #12]
 8011860:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8011862:	693b      	ldr	r3, [r7, #16]
 8011864:	3301      	adds	r3, #1
 8011866:	613b      	str	r3, [r7, #16]
 8011868:	4b12      	ldr	r3, [pc, #72]	; (80118b4 <low_level_input+0x164>)
 801186a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801186c:	693a      	ldr	r2, [r7, #16]
 801186e:	429a      	cmp	r2, r3
 8011870:	d3ee      	bcc.n	8011850 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8011872:	4b10      	ldr	r3, [pc, #64]	; (80118b4 <low_level_input+0x164>)
 8011874:	2200      	movs	r2, #0
 8011876:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8011878:	4b0e      	ldr	r3, [pc, #56]	; (80118b4 <low_level_input+0x164>)
 801187a:	681a      	ldr	r2, [r3, #0]
 801187c:	f241 0314 	movw	r3, #4116	; 0x1014
 8011880:	4413      	add	r3, r2
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011888:	2b00      	cmp	r3, #0
 801188a:	d00d      	beq.n	80118a8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 801188c:	4b09      	ldr	r3, [pc, #36]	; (80118b4 <low_level_input+0x164>)
 801188e:	681a      	ldr	r2, [r3, #0]
 8011890:	f241 0314 	movw	r3, #4116	; 0x1014
 8011894:	4413      	add	r3, r2
 8011896:	2280      	movs	r2, #128	; 0x80
 8011898:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 801189a:	4b06      	ldr	r3, [pc, #24]	; (80118b4 <low_level_input+0x164>)
 801189c:	681a      	ldr	r2, [r3, #0]
 801189e:	f241 0308 	movw	r3, #4104	; 0x1008
 80118a2:	4413      	add	r3, r2
 80118a4:	2200      	movs	r2, #0
 80118a6:	601a      	str	r2, [r3, #0]
  }
  return p;
 80118a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80118aa:	4618      	mov	r0, r3
 80118ac:	3730      	adds	r7, #48	; 0x30
 80118ae:	46bd      	mov	sp, r7
 80118b0:	bd80      	pop	{r7, pc}
 80118b2:	bf00      	nop
 80118b4:	2001afc0 	.word	0x2001afc0

080118b8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b084      	sub	sp, #16
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80118c4:	4b12      	ldr	r3, [pc, #72]	; (8011910 <ethernetif_input+0x58>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80118cc:	4618      	mov	r0, r3
 80118ce:	f000 fa8d 	bl	8011dec <osSemaphoreWait>
 80118d2:	4603      	mov	r3, r0
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d1f5      	bne.n	80118c4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80118d8:	480e      	ldr	r0, [pc, #56]	; (8011914 <ethernetif_input+0x5c>)
 80118da:	f00e fd75 	bl	80203c8 <sys_mutex_lock>
        p = low_level_input( netif );
 80118de:	68f8      	ldr	r0, [r7, #12]
 80118e0:	f7ff ff36 	bl	8011750 <low_level_input>
 80118e4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d00a      	beq.n	8011902 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	691b      	ldr	r3, [r3, #16]
 80118f0:	68f9      	ldr	r1, [r7, #12]
 80118f2:	68b8      	ldr	r0, [r7, #8]
 80118f4:	4798      	blx	r3
 80118f6:	4603      	mov	r3, r0
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d002      	beq.n	8011902 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80118fc:	68b8      	ldr	r0, [r7, #8]
 80118fe:	f005 fbc3 	bl	8017088 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8011902:	4804      	ldr	r0, [pc, #16]	; (8011914 <ethernetif_input+0x5c>)
 8011904:	f00e fd6f 	bl	80203e6 <sys_mutex_unlock>
      } while(p!=NULL);
 8011908:	68bb      	ldr	r3, [r7, #8]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d1e4      	bne.n	80118d8 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 801190e:	e7d9      	b.n	80118c4 <ethernetif_input+0xc>
 8011910:	20000348 	.word	0x20000348
 8011914:	2001c7d8 	.word	0x2001c7d8

08011918 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b082      	sub	sp, #8
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d106      	bne.n	8011934 <ethernetif_init+0x1c>
 8011926:	4b0e      	ldr	r3, [pc, #56]	; (8011960 <ethernetif_init+0x48>)
 8011928:	f240 2233 	movw	r2, #563	; 0x233
 801192c:	490d      	ldr	r1, [pc, #52]	; (8011964 <ethernetif_init+0x4c>)
 801192e:	480e      	ldr	r0, [pc, #56]	; (8011968 <ethernetif_init+0x50>)
 8011930:	f00e fdf0 	bl	8020514 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2273      	movs	r2, #115	; 0x73
 8011938:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	2274      	movs	r2, #116	; 0x74
 8011940:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	4a09      	ldr	r2, [pc, #36]	; (801196c <ethernetif_init+0x54>)
 8011948:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	4a08      	ldr	r2, [pc, #32]	; (8011970 <ethernetif_init+0x58>)
 801194e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8011950:	6878      	ldr	r0, [r7, #4]
 8011952:	f7ff fd8f 	bl	8011474 <low_level_init>

  return ERR_OK;
 8011956:	2300      	movs	r3, #0
}
 8011958:	4618      	mov	r0, r3
 801195a:	3708      	adds	r7, #8
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}
 8011960:	080218fc 	.word	0x080218fc
 8011964:	08021918 	.word	0x08021918
 8011968:	08021928 	.word	0x08021928
 801196c:	0801e581 	.word	0x0801e581
 8011970:	08011615 	.word	0x08011615

08011974 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8011978:	f7f9 fd22 	bl	800b3c0 <HAL_GetTick>
 801197c:	4603      	mov	r3, r0
}
 801197e:	4618      	mov	r0, r3
 8011980:	bd80      	pop	{r7, pc}
	...

08011984 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8011984:	b580      	push	{r7, lr}
 8011986:	b084      	sub	sp, #16
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 801198c:	2300      	movs	r3, #0
 801198e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8011994:	f107 0308 	add.w	r3, r7, #8
 8011998:	461a      	mov	r2, r3
 801199a:	2101      	movs	r1, #1
 801199c:	4816      	ldr	r0, [pc, #88]	; (80119f8 <ethernetif_set_link+0x74>)
 801199e:	f7fa ffb4 	bl	800c90a <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	f003 0304 	and.w	r3, r3, #4
 80119a8:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80119b2:	f003 0304 	and.w	r3, r3, #4
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d108      	bne.n	80119cc <ethernetif_set_link+0x48>
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d005      	beq.n	80119cc <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	4618      	mov	r0, r3
 80119c6:	f004 ff51 	bl	801686c <netif_set_link_up>
 80119ca:	e011      	b.n	80119f0 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80119d4:	089b      	lsrs	r3, r3, #2
 80119d6:	f003 0301 	and.w	r3, r3, #1
 80119da:	b2db      	uxtb	r3, r3
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d007      	beq.n	80119f0 <ethernetif_set_link+0x6c>
 80119e0:	68bb      	ldr	r3, [r7, #8]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d104      	bne.n	80119f0 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	4618      	mov	r0, r3
 80119ec:	f004 ff72 	bl	80168d4 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80119f0:	20c8      	movs	r0, #200	; 0xc8
 80119f2:	f000 f916 	bl	8011c22 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80119f6:	e7cd      	b.n	8011994 <ethernetif_set_link+0x10>
 80119f8:	2001afc0 	.word	0x2001afc0

080119fc <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b084      	sub	sp, #16
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8011a04:	2300      	movs	r3, #0
 8011a06:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8011a08:	2300      	movs	r3, #0
 8011a0a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011a12:	089b      	lsrs	r3, r3, #2
 8011a14:	f003 0301 	and.w	r3, r3, #1
 8011a18:	b2db      	uxtb	r3, r3
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d05d      	beq.n	8011ada <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8011a1e:	4b34      	ldr	r3, [pc, #208]	; (8011af0 <ethernetif_update_config+0xf4>)
 8011a20:	685b      	ldr	r3, [r3, #4]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d03f      	beq.n	8011aa6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8011a26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011a2a:	2100      	movs	r1, #0
 8011a2c:	4830      	ldr	r0, [pc, #192]	; (8011af0 <ethernetif_update_config+0xf4>)
 8011a2e:	f7fa ffd4 	bl	800c9da <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8011a32:	f7f9 fcc5 	bl	800b3c0 <HAL_GetTick>
 8011a36:	4603      	mov	r3, r0
 8011a38:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8011a3a:	f107 0308 	add.w	r3, r7, #8
 8011a3e:	461a      	mov	r2, r3
 8011a40:	2101      	movs	r1, #1
 8011a42:	482b      	ldr	r0, [pc, #172]	; (8011af0 <ethernetif_update_config+0xf4>)
 8011a44:	f7fa ff61 	bl	800c90a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8011a48:	f7f9 fcba 	bl	800b3c0 <HAL_GetTick>
 8011a4c:	4602      	mov	r2, r0
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	1ad3      	subs	r3, r2, r3
 8011a52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011a56:	d828      	bhi.n	8011aaa <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	f003 0320 	and.w	r3, r3, #32
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d0eb      	beq.n	8011a3a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8011a62:	f107 0308 	add.w	r3, r7, #8
 8011a66:	461a      	mov	r2, r3
 8011a68:	211f      	movs	r1, #31
 8011a6a:	4821      	ldr	r0, [pc, #132]	; (8011af0 <ethernetif_update_config+0xf4>)
 8011a6c:	f7fa ff4d 	bl	800c90a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	f003 0310 	and.w	r3, r3, #16
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d004      	beq.n	8011a84 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8011a7a:	4b1d      	ldr	r3, [pc, #116]	; (8011af0 <ethernetif_update_config+0xf4>)
 8011a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a80:	60da      	str	r2, [r3, #12]
 8011a82:	e002      	b.n	8011a8a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8011a84:	4b1a      	ldr	r3, [pc, #104]	; (8011af0 <ethernetif_update_config+0xf4>)
 8011a86:	2200      	movs	r2, #0
 8011a88:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	f003 0304 	and.w	r3, r3, #4
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d003      	beq.n	8011a9c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8011a94:	4b16      	ldr	r3, [pc, #88]	; (8011af0 <ethernetif_update_config+0xf4>)
 8011a96:	2200      	movs	r2, #0
 8011a98:	609a      	str	r2, [r3, #8]
 8011a9a:	e016      	b.n	8011aca <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8011a9c:	4b14      	ldr	r3, [pc, #80]	; (8011af0 <ethernetif_update_config+0xf4>)
 8011a9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011aa2:	609a      	str	r2, [r3, #8]
 8011aa4:	e011      	b.n	8011aca <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8011aa6:	bf00      	nop
 8011aa8:	e000      	b.n	8011aac <ethernetif_update_config+0xb0>
          goto error;
 8011aaa:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8011aac:	4b10      	ldr	r3, [pc, #64]	; (8011af0 <ethernetif_update_config+0xf4>)
 8011aae:	68db      	ldr	r3, [r3, #12]
 8011ab0:	08db      	lsrs	r3, r3, #3
 8011ab2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8011ab4:	4b0e      	ldr	r3, [pc, #56]	; (8011af0 <ethernetif_update_config+0xf4>)
 8011ab6:	689b      	ldr	r3, [r3, #8]
 8011ab8:	085b      	lsrs	r3, r3, #1
 8011aba:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8011abc:	4313      	orrs	r3, r2
 8011abe:	b29b      	uxth	r3, r3
 8011ac0:	461a      	mov	r2, r3
 8011ac2:	2100      	movs	r1, #0
 8011ac4:	480a      	ldr	r0, [pc, #40]	; (8011af0 <ethernetif_update_config+0xf4>)
 8011ac6:	f7fa ff88 	bl	800c9da <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8011aca:	2100      	movs	r1, #0
 8011acc:	4808      	ldr	r0, [pc, #32]	; (8011af0 <ethernetif_update_config+0xf4>)
 8011ace:	f7fb f849 	bl	800cb64 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8011ad2:	4807      	ldr	r0, [pc, #28]	; (8011af0 <ethernetif_update_config+0xf4>)
 8011ad4:	f7fa ffe7 	bl	800caa6 <HAL_ETH_Start>
 8011ad8:	e002      	b.n	8011ae0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8011ada:	4805      	ldr	r0, [pc, #20]	; (8011af0 <ethernetif_update_config+0xf4>)
 8011adc:	f7fb f812 	bl	800cb04 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f000 f807 	bl	8011af4 <ethernetif_notify_conn_changed>
}
 8011ae6:	bf00      	nop
 8011ae8:	3710      	adds	r7, #16
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}
 8011aee:	bf00      	nop
 8011af0:	2001afc0 	.word	0x2001afc0

08011af4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8011af4:	b480      	push	{r7}
 8011af6:	b083      	sub	sp, #12
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file 
            when the callback is needed,
  */

}
 8011afc:	bf00      	nop
 8011afe:	370c      	adds	r7, #12
 8011b00:	46bd      	mov	sp, r7
 8011b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b06:	4770      	bx	lr

08011b08 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011b08:	b480      	push	{r7}
 8011b0a:	b085      	sub	sp, #20
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	4603      	mov	r3, r0
 8011b10:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011b12:	2300      	movs	r3, #0
 8011b14:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b1a:	2b84      	cmp	r3, #132	; 0x84
 8011b1c:	d005      	beq.n	8011b2a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011b1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	4413      	add	r3, r2
 8011b26:	3303      	adds	r3, #3
 8011b28:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	3714      	adds	r7, #20
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr

08011b38 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b083      	sub	sp, #12
 8011b3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b3e:	f3ef 8305 	mrs	r3, IPSR
 8011b42:	607b      	str	r3, [r7, #4]
  return(result);
 8011b44:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	bf14      	ite	ne
 8011b4a:	2301      	movne	r3, #1
 8011b4c:	2300      	moveq	r3, #0
 8011b4e:	b2db      	uxtb	r3, r3
}
 8011b50:	4618      	mov	r0, r3
 8011b52:	370c      	adds	r7, #12
 8011b54:	46bd      	mov	sp, r7
 8011b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5a:	4770      	bx	lr

08011b5c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011b60:	f001 fc88 	bl	8013474 <vTaskStartScheduler>
  
  return osOK;
 8011b64:	2300      	movs	r3, #0
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	bd80      	pop	{r7, pc}

08011b6a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8011b6a:	b580      	push	{r7, lr}
 8011b6c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8011b6e:	f7ff ffe3 	bl	8011b38 <inHandlerMode>
 8011b72:	4603      	mov	r3, r0
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d003      	beq.n	8011b80 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8011b78:	f001 fd9a 	bl	80136b0 <xTaskGetTickCountFromISR>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	e002      	b.n	8011b86 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8011b80:	f001 fd86 	bl	8013690 <xTaskGetTickCount>
 8011b84:	4603      	mov	r3, r0
  }
}
 8011b86:	4618      	mov	r0, r3
 8011b88:	bd80      	pop	{r7, pc}

08011b8a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011b8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b8c:	b089      	sub	sp, #36	; 0x24
 8011b8e:	af04      	add	r7, sp, #16
 8011b90:	6078      	str	r0, [r7, #4]
 8011b92:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	695b      	ldr	r3, [r3, #20]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d020      	beq.n	8011bde <osThreadCreate+0x54>
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	699b      	ldr	r3, [r3, #24]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d01c      	beq.n	8011bde <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	685c      	ldr	r4, [r3, #4]
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681d      	ldr	r5, [r3, #0]
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	691e      	ldr	r6, [r3, #16]
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f7ff ffa6 	bl	8011b08 <makeFreeRtosPriority>
 8011bbc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	695b      	ldr	r3, [r3, #20]
 8011bc2:	687a      	ldr	r2, [r7, #4]
 8011bc4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011bc6:	9202      	str	r2, [sp, #8]
 8011bc8:	9301      	str	r3, [sp, #4]
 8011bca:	9100      	str	r1, [sp, #0]
 8011bcc:	683b      	ldr	r3, [r7, #0]
 8011bce:	4632      	mov	r2, r6
 8011bd0:	4629      	mov	r1, r5
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	f001 fa81 	bl	80130da <xTaskCreateStatic>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	60fb      	str	r3, [r7, #12]
 8011bdc:	e01c      	b.n	8011c18 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	685c      	ldr	r4, [r3, #4]
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011bea:	b29e      	uxth	r6, r3
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7ff ff88 	bl	8011b08 <makeFreeRtosPriority>
 8011bf8:	4602      	mov	r2, r0
 8011bfa:	f107 030c 	add.w	r3, r7, #12
 8011bfe:	9301      	str	r3, [sp, #4]
 8011c00:	9200      	str	r2, [sp, #0]
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	4632      	mov	r2, r6
 8011c06:	4629      	mov	r1, r5
 8011c08:	4620      	mov	r0, r4
 8011c0a:	f001 fac6 	bl	801319a <xTaskCreate>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	2b01      	cmp	r3, #1
 8011c12:	d001      	beq.n	8011c18 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011c14:	2300      	movs	r3, #0
 8011c16:	e000      	b.n	8011c1a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011c18:	68fb      	ldr	r3, [r7, #12]
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	3714      	adds	r7, #20
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011c22 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011c22:	b580      	push	{r7, lr}
 8011c24:	b084      	sub	sp, #16
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d001      	beq.n	8011c38 <osDelay+0x16>
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	e000      	b.n	8011c3a <osDelay+0x18>
 8011c38:	2301      	movs	r3, #1
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f001 fbe4 	bl	8013408 <vTaskDelay>
  
  return osOK;
 8011c40:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	3710      	adds	r7, #16
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}

08011c4a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8011c4a:	b580      	push	{r7, lr}
 8011c4c:	b082      	sub	sp, #8
 8011c4e:	af00      	add	r7, sp, #0
 8011c50:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	685b      	ldr	r3, [r3, #4]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d007      	beq.n	8011c6a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	685b      	ldr	r3, [r3, #4]
 8011c5e:	4619      	mov	r1, r3
 8011c60:	2001      	movs	r0, #1
 8011c62:	f000 fc52 	bl	801250a <xQueueCreateMutexStatic>
 8011c66:	4603      	mov	r3, r0
 8011c68:	e003      	b.n	8011c72 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8011c6a:	2001      	movs	r0, #1
 8011c6c:	f000 fc35 	bl	80124da <xQueueCreateMutex>
 8011c70:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3708      	adds	r7, #8
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}
	...

08011c7c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b084      	sub	sp, #16
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011c86:	2300      	movs	r3, #0
 8011c88:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d101      	bne.n	8011c94 <osMutexWait+0x18>
    return osErrorParameter;
 8011c90:	2380      	movs	r3, #128	; 0x80
 8011c92:	e03a      	b.n	8011d0a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8011c94:	2300      	movs	r3, #0
 8011c96:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c9e:	d103      	bne.n	8011ca8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8011ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ca4:	60fb      	str	r3, [r7, #12]
 8011ca6:	e009      	b.n	8011cbc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d006      	beq.n	8011cbc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d101      	bne.n	8011cbc <osMutexWait+0x40>
      ticks = 1;
 8011cb8:	2301      	movs	r3, #1
 8011cba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011cbc:	f7ff ff3c 	bl	8011b38 <inHandlerMode>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d017      	beq.n	8011cf6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011cc6:	f107 0308 	add.w	r3, r7, #8
 8011cca:	461a      	mov	r2, r3
 8011ccc:	2100      	movs	r1, #0
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f001 f858 	bl	8012d84 <xQueueReceiveFromISR>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	2b01      	cmp	r3, #1
 8011cd8:	d001      	beq.n	8011cde <osMutexWait+0x62>
      return osErrorOS;
 8011cda:	23ff      	movs	r3, #255	; 0xff
 8011cdc:	e015      	b.n	8011d0a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d011      	beq.n	8011d08 <osMutexWait+0x8c>
 8011ce4:	4b0b      	ldr	r3, [pc, #44]	; (8011d14 <osMutexWait+0x98>)
 8011ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cea:	601a      	str	r2, [r3, #0]
 8011cec:	f3bf 8f4f 	dsb	sy
 8011cf0:	f3bf 8f6f 	isb	sy
 8011cf4:	e008      	b.n	8011d08 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8011cf6:	68f9      	ldr	r1, [r7, #12]
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f000 ff33 	bl	8012b64 <xQueueSemaphoreTake>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	2b01      	cmp	r3, #1
 8011d02:	d001      	beq.n	8011d08 <osMutexWait+0x8c>
    return osErrorOS;
 8011d04:	23ff      	movs	r3, #255	; 0xff
 8011d06:	e000      	b.n	8011d0a <osMutexWait+0x8e>
  }
  
  return osOK;
 8011d08:	2300      	movs	r3, #0
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	3710      	adds	r7, #16
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	bf00      	nop
 8011d14:	e000ed04 	.word	0xe000ed04

08011d18 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b084      	sub	sp, #16
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011d20:	2300      	movs	r3, #0
 8011d22:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011d24:	2300      	movs	r3, #0
 8011d26:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8011d28:	f7ff ff06 	bl	8011b38 <inHandlerMode>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d016      	beq.n	8011d60 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011d32:	f107 0308 	add.w	r3, r7, #8
 8011d36:	4619      	mov	r1, r3
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f000 fd9f 	bl	801287c <xQueueGiveFromISR>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	2b01      	cmp	r3, #1
 8011d42:	d001      	beq.n	8011d48 <osMutexRelease+0x30>
      return osErrorOS;
 8011d44:	23ff      	movs	r3, #255	; 0xff
 8011d46:	e017      	b.n	8011d78 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d013      	beq.n	8011d76 <osMutexRelease+0x5e>
 8011d4e:	4b0c      	ldr	r3, [pc, #48]	; (8011d80 <osMutexRelease+0x68>)
 8011d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d54:	601a      	str	r2, [r3, #0]
 8011d56:	f3bf 8f4f 	dsb	sy
 8011d5a:	f3bf 8f6f 	isb	sy
 8011d5e:	e00a      	b.n	8011d76 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8011d60:	2300      	movs	r3, #0
 8011d62:	2200      	movs	r2, #0
 8011d64:	2100      	movs	r1, #0
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f000 fbea 	bl	8012540 <xQueueGenericSend>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	2b01      	cmp	r3, #1
 8011d70:	d001      	beq.n	8011d76 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8011d72:	23ff      	movs	r3, #255	; 0xff
 8011d74:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8011d76:	68fb      	ldr	r3, [r7, #12]
}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	3710      	adds	r7, #16
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}
 8011d80:	e000ed04 	.word	0xe000ed04

08011d84 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b086      	sub	sp, #24
 8011d88:	af02      	add	r7, sp, #8
 8011d8a:	6078      	str	r0, [r7, #4]
 8011d8c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	685b      	ldr	r3, [r3, #4]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d010      	beq.n	8011db8 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	2b01      	cmp	r3, #1
 8011d9a:	d10b      	bne.n	8011db4 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	685a      	ldr	r2, [r3, #4]
 8011da0:	2303      	movs	r3, #3
 8011da2:	9300      	str	r3, [sp, #0]
 8011da4:	4613      	mov	r3, r2
 8011da6:	2200      	movs	r2, #0
 8011da8:	2100      	movs	r1, #0
 8011daa:	2001      	movs	r0, #1
 8011dac:	f000 fa9e 	bl	80122ec <xQueueGenericCreateStatic>
 8011db0:	4603      	mov	r3, r0
 8011db2:	e016      	b.n	8011de2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8011db4:	2300      	movs	r3, #0
 8011db6:	e014      	b.n	8011de2 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	2b01      	cmp	r3, #1
 8011dbc:	d110      	bne.n	8011de0 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8011dbe:	2203      	movs	r2, #3
 8011dc0:	2100      	movs	r1, #0
 8011dc2:	2001      	movs	r0, #1
 8011dc4:	f000 fb0f 	bl	80123e6 <xQueueGenericCreate>
 8011dc8:	60f8      	str	r0, [r7, #12]
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d005      	beq.n	8011ddc <osSemaphoreCreate+0x58>
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	2100      	movs	r1, #0
 8011dd6:	68f8      	ldr	r0, [r7, #12]
 8011dd8:	f000 fbb2 	bl	8012540 <xQueueGenericSend>
      return sema;
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	e000      	b.n	8011de2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8011de0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3710      	adds	r7, #16
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}
	...

08011dec <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b084      	sub	sp, #16
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
 8011df4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011df6:	2300      	movs	r3, #0
 8011df8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d101      	bne.n	8011e04 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011e00:	2380      	movs	r3, #128	; 0x80
 8011e02:	e03a      	b.n	8011e7a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011e04:	2300      	movs	r3, #0
 8011e06:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e0e:	d103      	bne.n	8011e18 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e14:	60fb      	str	r3, [r7, #12]
 8011e16:	e009      	b.n	8011e2c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d006      	beq.n	8011e2c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d101      	bne.n	8011e2c <osSemaphoreWait+0x40>
      ticks = 1;
 8011e28:	2301      	movs	r3, #1
 8011e2a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011e2c:	f7ff fe84 	bl	8011b38 <inHandlerMode>
 8011e30:	4603      	mov	r3, r0
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d017      	beq.n	8011e66 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011e36:	f107 0308 	add.w	r3, r7, #8
 8011e3a:	461a      	mov	r2, r3
 8011e3c:	2100      	movs	r1, #0
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f000 ffa0 	bl	8012d84 <xQueueReceiveFromISR>
 8011e44:	4603      	mov	r3, r0
 8011e46:	2b01      	cmp	r3, #1
 8011e48:	d001      	beq.n	8011e4e <osSemaphoreWait+0x62>
      return osErrorOS;
 8011e4a:	23ff      	movs	r3, #255	; 0xff
 8011e4c:	e015      	b.n	8011e7a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d011      	beq.n	8011e78 <osSemaphoreWait+0x8c>
 8011e54:	4b0b      	ldr	r3, [pc, #44]	; (8011e84 <osSemaphoreWait+0x98>)
 8011e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e5a:	601a      	str	r2, [r3, #0]
 8011e5c:	f3bf 8f4f 	dsb	sy
 8011e60:	f3bf 8f6f 	isb	sy
 8011e64:	e008      	b.n	8011e78 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011e66:	68f9      	ldr	r1, [r7, #12]
 8011e68:	6878      	ldr	r0, [r7, #4]
 8011e6a:	f000 fe7b 	bl	8012b64 <xQueueSemaphoreTake>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	2b01      	cmp	r3, #1
 8011e72:	d001      	beq.n	8011e78 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011e74:	23ff      	movs	r3, #255	; 0xff
 8011e76:	e000      	b.n	8011e7a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011e78:	2300      	movs	r3, #0
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	3710      	adds	r7, #16
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}
 8011e82:	bf00      	nop
 8011e84:	e000ed04 	.word	0xe000ed04

08011e88 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b084      	sub	sp, #16
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011e90:	2300      	movs	r3, #0
 8011e92:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011e94:	2300      	movs	r3, #0
 8011e96:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011e98:	f7ff fe4e 	bl	8011b38 <inHandlerMode>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d016      	beq.n	8011ed0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011ea2:	f107 0308 	add.w	r3, r7, #8
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f000 fce7 	bl	801287c <xQueueGiveFromISR>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	2b01      	cmp	r3, #1
 8011eb2:	d001      	beq.n	8011eb8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011eb4:	23ff      	movs	r3, #255	; 0xff
 8011eb6:	e017      	b.n	8011ee8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011eb8:	68bb      	ldr	r3, [r7, #8]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d013      	beq.n	8011ee6 <osSemaphoreRelease+0x5e>
 8011ebe:	4b0c      	ldr	r3, [pc, #48]	; (8011ef0 <osSemaphoreRelease+0x68>)
 8011ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ec4:	601a      	str	r2, [r3, #0]
 8011ec6:	f3bf 8f4f 	dsb	sy
 8011eca:	f3bf 8f6f 	isb	sy
 8011ece:	e00a      	b.n	8011ee6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	2100      	movs	r1, #0
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	f000 fb32 	bl	8012540 <xQueueGenericSend>
 8011edc:	4603      	mov	r3, r0
 8011ede:	2b01      	cmp	r3, #1
 8011ee0:	d001      	beq.n	8011ee6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8011ee2:	23ff      	movs	r3, #255	; 0xff
 8011ee4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011ee6:	68fb      	ldr	r3, [r7, #12]
}
 8011ee8:	4618      	mov	r0, r3
 8011eea:	3710      	adds	r7, #16
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd80      	pop	{r7, pc}
 8011ef0:	e000ed04 	.word	0xe000ed04

08011ef4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011ef4:	b590      	push	{r4, r7, lr}
 8011ef6:	b085      	sub	sp, #20
 8011ef8:	af02      	add	r7, sp, #8
 8011efa:	6078      	str	r0, [r7, #4]
 8011efc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	689b      	ldr	r3, [r3, #8]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d012      	beq.n	8011f2c <osMessageCreate+0x38>
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	68db      	ldr	r3, [r3, #12]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d00e      	beq.n	8011f2c <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	6818      	ldr	r0, [r3, #0]
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6859      	ldr	r1, [r3, #4]
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	689a      	ldr	r2, [r3, #8]
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	68dc      	ldr	r4, [r3, #12]
 8011f1e:	2300      	movs	r3, #0
 8011f20:	9300      	str	r3, [sp, #0]
 8011f22:	4623      	mov	r3, r4
 8011f24:	f000 f9e2 	bl	80122ec <xQueueGenericCreateStatic>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	e008      	b.n	8011f3e <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6818      	ldr	r0, [r3, #0]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	685b      	ldr	r3, [r3, #4]
 8011f34:	2200      	movs	r2, #0
 8011f36:	4619      	mov	r1, r3
 8011f38:	f000 fa55 	bl	80123e6 <xQueueGenericCreate>
 8011f3c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8011f3e:	4618      	mov	r0, r3
 8011f40:	370c      	adds	r7, #12
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd90      	pop	{r4, r7, pc}
	...

08011f48 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b086      	sub	sp, #24
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	60f8      	str	r0, [r7, #12]
 8011f50:	60b9      	str	r1, [r7, #8]
 8011f52:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8011f54:	2300      	movs	r3, #0
 8011f56:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8011f5c:	697b      	ldr	r3, [r7, #20]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d101      	bne.n	8011f66 <osMessagePut+0x1e>
    ticks = 1;
 8011f62:	2301      	movs	r3, #1
 8011f64:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8011f66:	f7ff fde7 	bl	8011b38 <inHandlerMode>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d018      	beq.n	8011fa2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8011f70:	f107 0210 	add.w	r2, r7, #16
 8011f74:	f107 0108 	add.w	r1, r7, #8
 8011f78:	2300      	movs	r3, #0
 8011f7a:	68f8      	ldr	r0, [r7, #12]
 8011f7c:	f000 fbe2 	bl	8012744 <xQueueGenericSendFromISR>
 8011f80:	4603      	mov	r3, r0
 8011f82:	2b01      	cmp	r3, #1
 8011f84:	d001      	beq.n	8011f8a <osMessagePut+0x42>
      return osErrorOS;
 8011f86:	23ff      	movs	r3, #255	; 0xff
 8011f88:	e018      	b.n	8011fbc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d014      	beq.n	8011fba <osMessagePut+0x72>
 8011f90:	4b0c      	ldr	r3, [pc, #48]	; (8011fc4 <osMessagePut+0x7c>)
 8011f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f96:	601a      	str	r2, [r3, #0]
 8011f98:	f3bf 8f4f 	dsb	sy
 8011f9c:	f3bf 8f6f 	isb	sy
 8011fa0:	e00b      	b.n	8011fba <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011fa2:	f107 0108 	add.w	r1, r7, #8
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	697a      	ldr	r2, [r7, #20]
 8011faa:	68f8      	ldr	r0, [r7, #12]
 8011fac:	f000 fac8 	bl	8012540 <xQueueGenericSend>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	2b01      	cmp	r3, #1
 8011fb4:	d001      	beq.n	8011fba <osMessagePut+0x72>
      return osErrorOS;
 8011fb6:	23ff      	movs	r3, #255	; 0xff
 8011fb8:	e000      	b.n	8011fbc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8011fba:	2300      	movs	r3, #0
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3718      	adds	r7, #24
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}
 8011fc4:	e000ed04 	.word	0xe000ed04

08011fc8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011fc8:	b590      	push	{r4, r7, lr}
 8011fca:	b08b      	sub	sp, #44	; 0x2c
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	60f8      	str	r0, [r7, #12]
 8011fd0:	60b9      	str	r1, [r7, #8]
 8011fd2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d10a      	bne.n	8011ff8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8011fe2:	2380      	movs	r3, #128	; 0x80
 8011fe4:	617b      	str	r3, [r7, #20]
    return event;
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	461c      	mov	r4, r3
 8011fea:	f107 0314 	add.w	r3, r7, #20
 8011fee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011ff2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011ff6:	e054      	b.n	80120a2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012006:	d103      	bne.n	8012010 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8012008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801200c:	627b      	str	r3, [r7, #36]	; 0x24
 801200e:	e009      	b.n	8012024 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d006      	beq.n	8012024 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801201c:	2b00      	cmp	r3, #0
 801201e:	d101      	bne.n	8012024 <osMessageGet+0x5c>
      ticks = 1;
 8012020:	2301      	movs	r3, #1
 8012022:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012024:	f7ff fd88 	bl	8011b38 <inHandlerMode>
 8012028:	4603      	mov	r3, r0
 801202a:	2b00      	cmp	r3, #0
 801202c:	d01c      	beq.n	8012068 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801202e:	f107 0220 	add.w	r2, r7, #32
 8012032:	f107 0314 	add.w	r3, r7, #20
 8012036:	3304      	adds	r3, #4
 8012038:	4619      	mov	r1, r3
 801203a:	68b8      	ldr	r0, [r7, #8]
 801203c:	f000 fea2 	bl	8012d84 <xQueueReceiveFromISR>
 8012040:	4603      	mov	r3, r0
 8012042:	2b01      	cmp	r3, #1
 8012044:	d102      	bne.n	801204c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8012046:	2310      	movs	r3, #16
 8012048:	617b      	str	r3, [r7, #20]
 801204a:	e001      	b.n	8012050 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 801204c:	2300      	movs	r3, #0
 801204e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012050:	6a3b      	ldr	r3, [r7, #32]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d01d      	beq.n	8012092 <osMessageGet+0xca>
 8012056:	4b15      	ldr	r3, [pc, #84]	; (80120ac <osMessageGet+0xe4>)
 8012058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801205c:	601a      	str	r2, [r3, #0]
 801205e:	f3bf 8f4f 	dsb	sy
 8012062:	f3bf 8f6f 	isb	sy
 8012066:	e014      	b.n	8012092 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012068:	f107 0314 	add.w	r3, r7, #20
 801206c:	3304      	adds	r3, #4
 801206e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012070:	4619      	mov	r1, r3
 8012072:	68b8      	ldr	r0, [r7, #8]
 8012074:	f000 fc94 	bl	80129a0 <xQueueReceive>
 8012078:	4603      	mov	r3, r0
 801207a:	2b01      	cmp	r3, #1
 801207c:	d102      	bne.n	8012084 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801207e:	2310      	movs	r3, #16
 8012080:	617b      	str	r3, [r7, #20]
 8012082:	e006      	b.n	8012092 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012086:	2b00      	cmp	r3, #0
 8012088:	d101      	bne.n	801208e <osMessageGet+0xc6>
 801208a:	2300      	movs	r3, #0
 801208c:	e000      	b.n	8012090 <osMessageGet+0xc8>
 801208e:	2340      	movs	r3, #64	; 0x40
 8012090:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	461c      	mov	r4, r3
 8012096:	f107 0314 	add.w	r3, r7, #20
 801209a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801209e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80120a2:	68f8      	ldr	r0, [r7, #12]
 80120a4:	372c      	adds	r7, #44	; 0x2c
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd90      	pop	{r4, r7, pc}
 80120aa:	bf00      	nop
 80120ac:	e000ed04 	.word	0xe000ed04

080120b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80120b0:	b480      	push	{r7}
 80120b2:	b083      	sub	sp, #12
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f103 0208 	add.w	r2, r3, #8
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80120c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	f103 0208 	add.w	r2, r3, #8
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f103 0208 	add.w	r2, r3, #8
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	2200      	movs	r2, #0
 80120e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80120e4:	bf00      	nop
 80120e6:	370c      	adds	r7, #12
 80120e8:	46bd      	mov	sp, r7
 80120ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ee:	4770      	bx	lr

080120f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80120f0:	b480      	push	{r7}
 80120f2:	b083      	sub	sp, #12
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2200      	movs	r2, #0
 80120fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80120fe:	bf00      	nop
 8012100:	370c      	adds	r7, #12
 8012102:	46bd      	mov	sp, r7
 8012104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012108:	4770      	bx	lr

0801210a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801210a:	b480      	push	{r7}
 801210c:	b085      	sub	sp, #20
 801210e:	af00      	add	r7, sp, #0
 8012110:	6078      	str	r0, [r7, #4]
 8012112:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	685b      	ldr	r3, [r3, #4]
 8012118:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	68fa      	ldr	r2, [r7, #12]
 801211e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	689a      	ldr	r2, [r3, #8]
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	689b      	ldr	r3, [r3, #8]
 801212c:	683a      	ldr	r2, [r7, #0]
 801212e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	683a      	ldr	r2, [r7, #0]
 8012134:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	687a      	ldr	r2, [r7, #4]
 801213a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	1c5a      	adds	r2, r3, #1
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	601a      	str	r2, [r3, #0]
}
 8012146:	bf00      	nop
 8012148:	3714      	adds	r7, #20
 801214a:	46bd      	mov	sp, r7
 801214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012150:	4770      	bx	lr

08012152 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012152:	b480      	push	{r7}
 8012154:	b085      	sub	sp, #20
 8012156:	af00      	add	r7, sp, #0
 8012158:	6078      	str	r0, [r7, #4]
 801215a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012168:	d103      	bne.n	8012172 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	691b      	ldr	r3, [r3, #16]
 801216e:	60fb      	str	r3, [r7, #12]
 8012170:	e00c      	b.n	801218c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	3308      	adds	r3, #8
 8012176:	60fb      	str	r3, [r7, #12]
 8012178:	e002      	b.n	8012180 <vListInsert+0x2e>
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	685b      	ldr	r3, [r3, #4]
 801217e:	60fb      	str	r3, [r7, #12]
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	685b      	ldr	r3, [r3, #4]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	68ba      	ldr	r2, [r7, #8]
 8012188:	429a      	cmp	r2, r3
 801218a:	d2f6      	bcs.n	801217a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	685a      	ldr	r2, [r3, #4]
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	685b      	ldr	r3, [r3, #4]
 8012198:	683a      	ldr	r2, [r7, #0]
 801219a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	68fa      	ldr	r2, [r7, #12]
 80121a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	683a      	ldr	r2, [r7, #0]
 80121a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	687a      	ldr	r2, [r7, #4]
 80121ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	1c5a      	adds	r2, r3, #1
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	601a      	str	r2, [r3, #0]
}
 80121b8:	bf00      	nop
 80121ba:	3714      	adds	r7, #20
 80121bc:	46bd      	mov	sp, r7
 80121be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c2:	4770      	bx	lr

080121c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80121c4:	b480      	push	{r7}
 80121c6:	b085      	sub	sp, #20
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	691b      	ldr	r3, [r3, #16]
 80121d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	685b      	ldr	r3, [r3, #4]
 80121d6:	687a      	ldr	r2, [r7, #4]
 80121d8:	6892      	ldr	r2, [r2, #8]
 80121da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	689b      	ldr	r3, [r3, #8]
 80121e0:	687a      	ldr	r2, [r7, #4]
 80121e2:	6852      	ldr	r2, [r2, #4]
 80121e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	685b      	ldr	r3, [r3, #4]
 80121ea:	687a      	ldr	r2, [r7, #4]
 80121ec:	429a      	cmp	r2, r3
 80121ee:	d103      	bne.n	80121f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	689a      	ldr	r2, [r3, #8]
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2200      	movs	r2, #0
 80121fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	1e5a      	subs	r2, r3, #1
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	681b      	ldr	r3, [r3, #0]
}
 801220c:	4618      	mov	r0, r3
 801220e:	3714      	adds	r7, #20
 8012210:	46bd      	mov	sp, r7
 8012212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012216:	4770      	bx	lr

08012218 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b084      	sub	sp, #16
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
 8012220:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d10b      	bne.n	8012244 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801222c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012230:	b672      	cpsid	i
 8012232:	f383 8811 	msr	BASEPRI, r3
 8012236:	f3bf 8f6f 	isb	sy
 801223a:	f3bf 8f4f 	dsb	sy
 801223e:	b662      	cpsie	i
 8012240:	60bb      	str	r3, [r7, #8]
 8012242:	e7fe      	b.n	8012242 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8012244:	f002 f888 	bl	8014358 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	681a      	ldr	r2, [r3, #0]
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012250:	68f9      	ldr	r1, [r7, #12]
 8012252:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012254:	fb01 f303 	mul.w	r3, r1, r3
 8012258:	441a      	add	r2, r3
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	2200      	movs	r2, #0
 8012262:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	681a      	ldr	r2, [r3, #0]
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	681a      	ldr	r2, [r3, #0]
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012274:	3b01      	subs	r3, #1
 8012276:	68f9      	ldr	r1, [r7, #12]
 8012278:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801227a:	fb01 f303 	mul.w	r3, r1, r3
 801227e:	441a      	add	r2, r3
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	22ff      	movs	r2, #255	; 0xff
 8012288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	22ff      	movs	r2, #255	; 0xff
 8012290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d114      	bne.n	80122c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	691b      	ldr	r3, [r3, #16]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d01a      	beq.n	80122d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	3310      	adds	r3, #16
 80122a6:	4618      	mov	r0, r3
 80122a8:	f001 fb50 	bl	801394c <xTaskRemoveFromEventList>
 80122ac:	4603      	mov	r3, r0
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d012      	beq.n	80122d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80122b2:	4b0d      	ldr	r3, [pc, #52]	; (80122e8 <xQueueGenericReset+0xd0>)
 80122b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122b8:	601a      	str	r2, [r3, #0]
 80122ba:	f3bf 8f4f 	dsb	sy
 80122be:	f3bf 8f6f 	isb	sy
 80122c2:	e009      	b.n	80122d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	3310      	adds	r3, #16
 80122c8:	4618      	mov	r0, r3
 80122ca:	f7ff fef1 	bl	80120b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	3324      	adds	r3, #36	; 0x24
 80122d2:	4618      	mov	r0, r3
 80122d4:	f7ff feec 	bl	80120b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80122d8:	f002 f870 	bl	80143bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80122dc:	2301      	movs	r3, #1
}
 80122de:	4618      	mov	r0, r3
 80122e0:	3710      	adds	r7, #16
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}
 80122e6:	bf00      	nop
 80122e8:	e000ed04 	.word	0xe000ed04

080122ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b08e      	sub	sp, #56	; 0x38
 80122f0:	af02      	add	r7, sp, #8
 80122f2:	60f8      	str	r0, [r7, #12]
 80122f4:	60b9      	str	r1, [r7, #8]
 80122f6:	607a      	str	r2, [r7, #4]
 80122f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d10b      	bne.n	8012318 <xQueueGenericCreateStatic+0x2c>
 8012300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012304:	b672      	cpsid	i
 8012306:	f383 8811 	msr	BASEPRI, r3
 801230a:	f3bf 8f6f 	isb	sy
 801230e:	f3bf 8f4f 	dsb	sy
 8012312:	b662      	cpsie	i
 8012314:	62bb      	str	r3, [r7, #40]	; 0x28
 8012316:	e7fe      	b.n	8012316 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d10b      	bne.n	8012336 <xQueueGenericCreateStatic+0x4a>
 801231e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012322:	b672      	cpsid	i
 8012324:	f383 8811 	msr	BASEPRI, r3
 8012328:	f3bf 8f6f 	isb	sy
 801232c:	f3bf 8f4f 	dsb	sy
 8012330:	b662      	cpsie	i
 8012332:	627b      	str	r3, [r7, #36]	; 0x24
 8012334:	e7fe      	b.n	8012334 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d002      	beq.n	8012342 <xQueueGenericCreateStatic+0x56>
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d001      	beq.n	8012346 <xQueueGenericCreateStatic+0x5a>
 8012342:	2301      	movs	r3, #1
 8012344:	e000      	b.n	8012348 <xQueueGenericCreateStatic+0x5c>
 8012346:	2300      	movs	r3, #0
 8012348:	2b00      	cmp	r3, #0
 801234a:	d10b      	bne.n	8012364 <xQueueGenericCreateStatic+0x78>
 801234c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012350:	b672      	cpsid	i
 8012352:	f383 8811 	msr	BASEPRI, r3
 8012356:	f3bf 8f6f 	isb	sy
 801235a:	f3bf 8f4f 	dsb	sy
 801235e:	b662      	cpsie	i
 8012360:	623b      	str	r3, [r7, #32]
 8012362:	e7fe      	b.n	8012362 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d102      	bne.n	8012370 <xQueueGenericCreateStatic+0x84>
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d101      	bne.n	8012374 <xQueueGenericCreateStatic+0x88>
 8012370:	2301      	movs	r3, #1
 8012372:	e000      	b.n	8012376 <xQueueGenericCreateStatic+0x8a>
 8012374:	2300      	movs	r3, #0
 8012376:	2b00      	cmp	r3, #0
 8012378:	d10b      	bne.n	8012392 <xQueueGenericCreateStatic+0xa6>
 801237a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801237e:	b672      	cpsid	i
 8012380:	f383 8811 	msr	BASEPRI, r3
 8012384:	f3bf 8f6f 	isb	sy
 8012388:	f3bf 8f4f 	dsb	sy
 801238c:	b662      	cpsie	i
 801238e:	61fb      	str	r3, [r7, #28]
 8012390:	e7fe      	b.n	8012390 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012392:	2348      	movs	r3, #72	; 0x48
 8012394:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012396:	697b      	ldr	r3, [r7, #20]
 8012398:	2b48      	cmp	r3, #72	; 0x48
 801239a:	d00b      	beq.n	80123b4 <xQueueGenericCreateStatic+0xc8>
 801239c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a0:	b672      	cpsid	i
 80123a2:	f383 8811 	msr	BASEPRI, r3
 80123a6:	f3bf 8f6f 	isb	sy
 80123aa:	f3bf 8f4f 	dsb	sy
 80123ae:	b662      	cpsie	i
 80123b0:	61bb      	str	r3, [r7, #24]
 80123b2:	e7fe      	b.n	80123b2 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80123b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80123ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d00d      	beq.n	80123dc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80123c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123c2:	2201      	movs	r2, #1
 80123c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80123c8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80123cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ce:	9300      	str	r3, [sp, #0]
 80123d0:	4613      	mov	r3, r2
 80123d2:	687a      	ldr	r2, [r7, #4]
 80123d4:	68b9      	ldr	r1, [r7, #8]
 80123d6:	68f8      	ldr	r0, [r7, #12]
 80123d8:	f000 f846 	bl	8012468 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80123dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80123de:	4618      	mov	r0, r3
 80123e0:	3730      	adds	r7, #48	; 0x30
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}

080123e6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80123e6:	b580      	push	{r7, lr}
 80123e8:	b08a      	sub	sp, #40	; 0x28
 80123ea:	af02      	add	r7, sp, #8
 80123ec:	60f8      	str	r0, [r7, #12]
 80123ee:	60b9      	str	r1, [r7, #8]
 80123f0:	4613      	mov	r3, r2
 80123f2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d10b      	bne.n	8012412 <xQueueGenericCreate+0x2c>
 80123fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123fe:	b672      	cpsid	i
 8012400:	f383 8811 	msr	BASEPRI, r3
 8012404:	f3bf 8f6f 	isb	sy
 8012408:	f3bf 8f4f 	dsb	sy
 801240c:	b662      	cpsie	i
 801240e:	613b      	str	r3, [r7, #16]
 8012410:	e7fe      	b.n	8012410 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d102      	bne.n	801241e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012418:	2300      	movs	r3, #0
 801241a:	61fb      	str	r3, [r7, #28]
 801241c:	e004      	b.n	8012428 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	68ba      	ldr	r2, [r7, #8]
 8012422:	fb02 f303 	mul.w	r3, r2, r3
 8012426:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012428:	69fb      	ldr	r3, [r7, #28]
 801242a:	3348      	adds	r3, #72	; 0x48
 801242c:	4618      	mov	r0, r3
 801242e:	f002 f8b5 	bl	801459c <pvPortMalloc>
 8012432:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012434:	69bb      	ldr	r3, [r7, #24]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d011      	beq.n	801245e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801243a:	69bb      	ldr	r3, [r7, #24]
 801243c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801243e:	697b      	ldr	r3, [r7, #20]
 8012440:	3348      	adds	r3, #72	; 0x48
 8012442:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012444:	69bb      	ldr	r3, [r7, #24]
 8012446:	2200      	movs	r2, #0
 8012448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801244c:	79fa      	ldrb	r2, [r7, #7]
 801244e:	69bb      	ldr	r3, [r7, #24]
 8012450:	9300      	str	r3, [sp, #0]
 8012452:	4613      	mov	r3, r2
 8012454:	697a      	ldr	r2, [r7, #20]
 8012456:	68b9      	ldr	r1, [r7, #8]
 8012458:	68f8      	ldr	r0, [r7, #12]
 801245a:	f000 f805 	bl	8012468 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801245e:	69bb      	ldr	r3, [r7, #24]
	}
 8012460:	4618      	mov	r0, r3
 8012462:	3720      	adds	r7, #32
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}

08012468 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b084      	sub	sp, #16
 801246c:	af00      	add	r7, sp, #0
 801246e:	60f8      	str	r0, [r7, #12]
 8012470:	60b9      	str	r1, [r7, #8]
 8012472:	607a      	str	r2, [r7, #4]
 8012474:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d103      	bne.n	8012484 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801247c:	69bb      	ldr	r3, [r7, #24]
 801247e:	69ba      	ldr	r2, [r7, #24]
 8012480:	601a      	str	r2, [r3, #0]
 8012482:	e002      	b.n	801248a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012484:	69bb      	ldr	r3, [r7, #24]
 8012486:	687a      	ldr	r2, [r7, #4]
 8012488:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801248a:	69bb      	ldr	r3, [r7, #24]
 801248c:	68fa      	ldr	r2, [r7, #12]
 801248e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012490:	69bb      	ldr	r3, [r7, #24]
 8012492:	68ba      	ldr	r2, [r7, #8]
 8012494:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012496:	2101      	movs	r1, #1
 8012498:	69b8      	ldr	r0, [r7, #24]
 801249a:	f7ff febd 	bl	8012218 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801249e:	bf00      	nop
 80124a0:	3710      	adds	r7, #16
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}

080124a6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80124a6:	b580      	push	{r7, lr}
 80124a8:	b082      	sub	sp, #8
 80124aa:	af00      	add	r7, sp, #0
 80124ac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d00e      	beq.n	80124d2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2200      	movs	r2, #0
 80124b8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	2200      	movs	r2, #0
 80124be:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2200      	movs	r2, #0
 80124c4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80124c6:	2300      	movs	r3, #0
 80124c8:	2200      	movs	r2, #0
 80124ca:	2100      	movs	r1, #0
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f000 f837 	bl	8012540 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80124d2:	bf00      	nop
 80124d4:	3708      	adds	r7, #8
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}

080124da <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80124da:	b580      	push	{r7, lr}
 80124dc:	b086      	sub	sp, #24
 80124de:	af00      	add	r7, sp, #0
 80124e0:	4603      	mov	r3, r0
 80124e2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80124e4:	2301      	movs	r3, #1
 80124e6:	617b      	str	r3, [r7, #20]
 80124e8:	2300      	movs	r3, #0
 80124ea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80124ec:	79fb      	ldrb	r3, [r7, #7]
 80124ee:	461a      	mov	r2, r3
 80124f0:	6939      	ldr	r1, [r7, #16]
 80124f2:	6978      	ldr	r0, [r7, #20]
 80124f4:	f7ff ff77 	bl	80123e6 <xQueueGenericCreate>
 80124f8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80124fa:	68f8      	ldr	r0, [r7, #12]
 80124fc:	f7ff ffd3 	bl	80124a6 <prvInitialiseMutex>

		return xNewQueue;
 8012500:	68fb      	ldr	r3, [r7, #12]
	}
 8012502:	4618      	mov	r0, r3
 8012504:	3718      	adds	r7, #24
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}

0801250a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801250a:	b580      	push	{r7, lr}
 801250c:	b088      	sub	sp, #32
 801250e:	af02      	add	r7, sp, #8
 8012510:	4603      	mov	r3, r0
 8012512:	6039      	str	r1, [r7, #0]
 8012514:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012516:	2301      	movs	r3, #1
 8012518:	617b      	str	r3, [r7, #20]
 801251a:	2300      	movs	r3, #0
 801251c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801251e:	79fb      	ldrb	r3, [r7, #7]
 8012520:	9300      	str	r3, [sp, #0]
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	2200      	movs	r2, #0
 8012526:	6939      	ldr	r1, [r7, #16]
 8012528:	6978      	ldr	r0, [r7, #20]
 801252a:	f7ff fedf 	bl	80122ec <xQueueGenericCreateStatic>
 801252e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012530:	68f8      	ldr	r0, [r7, #12]
 8012532:	f7ff ffb8 	bl	80124a6 <prvInitialiseMutex>

		return xNewQueue;
 8012536:	68fb      	ldr	r3, [r7, #12]
	}
 8012538:	4618      	mov	r0, r3
 801253a:	3718      	adds	r7, #24
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}

08012540 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b08e      	sub	sp, #56	; 0x38
 8012544:	af00      	add	r7, sp, #0
 8012546:	60f8      	str	r0, [r7, #12]
 8012548:	60b9      	str	r1, [r7, #8]
 801254a:	607a      	str	r2, [r7, #4]
 801254c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801254e:	2300      	movs	r3, #0
 8012550:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012558:	2b00      	cmp	r3, #0
 801255a:	d10b      	bne.n	8012574 <xQueueGenericSend+0x34>
 801255c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012560:	b672      	cpsid	i
 8012562:	f383 8811 	msr	BASEPRI, r3
 8012566:	f3bf 8f6f 	isb	sy
 801256a:	f3bf 8f4f 	dsb	sy
 801256e:	b662      	cpsie	i
 8012570:	62bb      	str	r3, [r7, #40]	; 0x28
 8012572:	e7fe      	b.n	8012572 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012574:	68bb      	ldr	r3, [r7, #8]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d103      	bne.n	8012582 <xQueueGenericSend+0x42>
 801257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801257e:	2b00      	cmp	r3, #0
 8012580:	d101      	bne.n	8012586 <xQueueGenericSend+0x46>
 8012582:	2301      	movs	r3, #1
 8012584:	e000      	b.n	8012588 <xQueueGenericSend+0x48>
 8012586:	2300      	movs	r3, #0
 8012588:	2b00      	cmp	r3, #0
 801258a:	d10b      	bne.n	80125a4 <xQueueGenericSend+0x64>
 801258c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012590:	b672      	cpsid	i
 8012592:	f383 8811 	msr	BASEPRI, r3
 8012596:	f3bf 8f6f 	isb	sy
 801259a:	f3bf 8f4f 	dsb	sy
 801259e:	b662      	cpsie	i
 80125a0:	627b      	str	r3, [r7, #36]	; 0x24
 80125a2:	e7fe      	b.n	80125a2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80125a4:	683b      	ldr	r3, [r7, #0]
 80125a6:	2b02      	cmp	r3, #2
 80125a8:	d103      	bne.n	80125b2 <xQueueGenericSend+0x72>
 80125aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125ae:	2b01      	cmp	r3, #1
 80125b0:	d101      	bne.n	80125b6 <xQueueGenericSend+0x76>
 80125b2:	2301      	movs	r3, #1
 80125b4:	e000      	b.n	80125b8 <xQueueGenericSend+0x78>
 80125b6:	2300      	movs	r3, #0
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d10b      	bne.n	80125d4 <xQueueGenericSend+0x94>
 80125bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125c0:	b672      	cpsid	i
 80125c2:	f383 8811 	msr	BASEPRI, r3
 80125c6:	f3bf 8f6f 	isb	sy
 80125ca:	f3bf 8f4f 	dsb	sy
 80125ce:	b662      	cpsie	i
 80125d0:	623b      	str	r3, [r7, #32]
 80125d2:	e7fe      	b.n	80125d2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80125d4:	f001 fb78 	bl	8013cc8 <xTaskGetSchedulerState>
 80125d8:	4603      	mov	r3, r0
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d102      	bne.n	80125e4 <xQueueGenericSend+0xa4>
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d101      	bne.n	80125e8 <xQueueGenericSend+0xa8>
 80125e4:	2301      	movs	r3, #1
 80125e6:	e000      	b.n	80125ea <xQueueGenericSend+0xaa>
 80125e8:	2300      	movs	r3, #0
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d10b      	bne.n	8012606 <xQueueGenericSend+0xc6>
 80125ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125f2:	b672      	cpsid	i
 80125f4:	f383 8811 	msr	BASEPRI, r3
 80125f8:	f3bf 8f6f 	isb	sy
 80125fc:	f3bf 8f4f 	dsb	sy
 8012600:	b662      	cpsie	i
 8012602:	61fb      	str	r3, [r7, #28]
 8012604:	e7fe      	b.n	8012604 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012606:	f001 fea7 	bl	8014358 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801260c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012612:	429a      	cmp	r2, r3
 8012614:	d302      	bcc.n	801261c <xQueueGenericSend+0xdc>
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	2b02      	cmp	r3, #2
 801261a:	d129      	bne.n	8012670 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801261c:	683a      	ldr	r2, [r7, #0]
 801261e:	68b9      	ldr	r1, [r7, #8]
 8012620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012622:	f000 fc4a 	bl	8012eba <prvCopyDataToQueue>
 8012626:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801262c:	2b00      	cmp	r3, #0
 801262e:	d010      	beq.n	8012652 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012632:	3324      	adds	r3, #36	; 0x24
 8012634:	4618      	mov	r0, r3
 8012636:	f001 f989 	bl	801394c <xTaskRemoveFromEventList>
 801263a:	4603      	mov	r3, r0
 801263c:	2b00      	cmp	r3, #0
 801263e:	d013      	beq.n	8012668 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012640:	4b3f      	ldr	r3, [pc, #252]	; (8012740 <xQueueGenericSend+0x200>)
 8012642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012646:	601a      	str	r2, [r3, #0]
 8012648:	f3bf 8f4f 	dsb	sy
 801264c:	f3bf 8f6f 	isb	sy
 8012650:	e00a      	b.n	8012668 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012654:	2b00      	cmp	r3, #0
 8012656:	d007      	beq.n	8012668 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012658:	4b39      	ldr	r3, [pc, #228]	; (8012740 <xQueueGenericSend+0x200>)
 801265a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801265e:	601a      	str	r2, [r3, #0]
 8012660:	f3bf 8f4f 	dsb	sy
 8012664:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012668:	f001 fea8 	bl	80143bc <vPortExitCritical>
				return pdPASS;
 801266c:	2301      	movs	r3, #1
 801266e:	e063      	b.n	8012738 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d103      	bne.n	801267e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012676:	f001 fea1 	bl	80143bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801267a:	2300      	movs	r3, #0
 801267c:	e05c      	b.n	8012738 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801267e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012680:	2b00      	cmp	r3, #0
 8012682:	d106      	bne.n	8012692 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012684:	f107 0314 	add.w	r3, r7, #20
 8012688:	4618      	mov	r0, r3
 801268a:	f001 f9c3 	bl	8013a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801268e:	2301      	movs	r3, #1
 8012690:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012692:	f001 fe93 	bl	80143bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012696:	f000 ff4f 	bl	8013538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801269a:	f001 fe5d 	bl	8014358 <vPortEnterCritical>
 801269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80126a4:	b25b      	sxtb	r3, r3
 80126a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80126aa:	d103      	bne.n	80126b4 <xQueueGenericSend+0x174>
 80126ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ae:	2200      	movs	r2, #0
 80126b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80126b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80126ba:	b25b      	sxtb	r3, r3
 80126bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80126c0:	d103      	bne.n	80126ca <xQueueGenericSend+0x18a>
 80126c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c4:	2200      	movs	r2, #0
 80126c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80126ca:	f001 fe77 	bl	80143bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80126ce:	1d3a      	adds	r2, r7, #4
 80126d0:	f107 0314 	add.w	r3, r7, #20
 80126d4:	4611      	mov	r1, r2
 80126d6:	4618      	mov	r0, r3
 80126d8:	f001 f9b2 	bl	8013a40 <xTaskCheckForTimeOut>
 80126dc:	4603      	mov	r3, r0
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d124      	bne.n	801272c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80126e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126e4:	f000 fce1 	bl	80130aa <prvIsQueueFull>
 80126e8:	4603      	mov	r3, r0
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d018      	beq.n	8012720 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80126ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f0:	3310      	adds	r3, #16
 80126f2:	687a      	ldr	r2, [r7, #4]
 80126f4:	4611      	mov	r1, r2
 80126f6:	4618      	mov	r0, r3
 80126f8:	f001 f902 	bl	8013900 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80126fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126fe:	f000 fc6c 	bl	8012fda <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012702:	f000 ff27 	bl	8013554 <xTaskResumeAll>
 8012706:	4603      	mov	r3, r0
 8012708:	2b00      	cmp	r3, #0
 801270a:	f47f af7c 	bne.w	8012606 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801270e:	4b0c      	ldr	r3, [pc, #48]	; (8012740 <xQueueGenericSend+0x200>)
 8012710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012714:	601a      	str	r2, [r3, #0]
 8012716:	f3bf 8f4f 	dsb	sy
 801271a:	f3bf 8f6f 	isb	sy
 801271e:	e772      	b.n	8012606 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012722:	f000 fc5a 	bl	8012fda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012726:	f000 ff15 	bl	8013554 <xTaskResumeAll>
 801272a:	e76c      	b.n	8012606 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801272c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801272e:	f000 fc54 	bl	8012fda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012732:	f000 ff0f 	bl	8013554 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012736:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012738:	4618      	mov	r0, r3
 801273a:	3738      	adds	r7, #56	; 0x38
 801273c:	46bd      	mov	sp, r7
 801273e:	bd80      	pop	{r7, pc}
 8012740:	e000ed04 	.word	0xe000ed04

08012744 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b08e      	sub	sp, #56	; 0x38
 8012748:	af00      	add	r7, sp, #0
 801274a:	60f8      	str	r0, [r7, #12]
 801274c:	60b9      	str	r1, [r7, #8]
 801274e:	607a      	str	r2, [r7, #4]
 8012750:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012758:	2b00      	cmp	r3, #0
 801275a:	d10b      	bne.n	8012774 <xQueueGenericSendFromISR+0x30>
 801275c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012760:	b672      	cpsid	i
 8012762:	f383 8811 	msr	BASEPRI, r3
 8012766:	f3bf 8f6f 	isb	sy
 801276a:	f3bf 8f4f 	dsb	sy
 801276e:	b662      	cpsie	i
 8012770:	627b      	str	r3, [r7, #36]	; 0x24
 8012772:	e7fe      	b.n	8012772 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012774:	68bb      	ldr	r3, [r7, #8]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d103      	bne.n	8012782 <xQueueGenericSendFromISR+0x3e>
 801277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801277e:	2b00      	cmp	r3, #0
 8012780:	d101      	bne.n	8012786 <xQueueGenericSendFromISR+0x42>
 8012782:	2301      	movs	r3, #1
 8012784:	e000      	b.n	8012788 <xQueueGenericSendFromISR+0x44>
 8012786:	2300      	movs	r3, #0
 8012788:	2b00      	cmp	r3, #0
 801278a:	d10b      	bne.n	80127a4 <xQueueGenericSendFromISR+0x60>
 801278c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012790:	b672      	cpsid	i
 8012792:	f383 8811 	msr	BASEPRI, r3
 8012796:	f3bf 8f6f 	isb	sy
 801279a:	f3bf 8f4f 	dsb	sy
 801279e:	b662      	cpsie	i
 80127a0:	623b      	str	r3, [r7, #32]
 80127a2:	e7fe      	b.n	80127a2 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	2b02      	cmp	r3, #2
 80127a8:	d103      	bne.n	80127b2 <xQueueGenericSendFromISR+0x6e>
 80127aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127ae:	2b01      	cmp	r3, #1
 80127b0:	d101      	bne.n	80127b6 <xQueueGenericSendFromISR+0x72>
 80127b2:	2301      	movs	r3, #1
 80127b4:	e000      	b.n	80127b8 <xQueueGenericSendFromISR+0x74>
 80127b6:	2300      	movs	r3, #0
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d10b      	bne.n	80127d4 <xQueueGenericSendFromISR+0x90>
 80127bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127c0:	b672      	cpsid	i
 80127c2:	f383 8811 	msr	BASEPRI, r3
 80127c6:	f3bf 8f6f 	isb	sy
 80127ca:	f3bf 8f4f 	dsb	sy
 80127ce:	b662      	cpsie	i
 80127d0:	61fb      	str	r3, [r7, #28]
 80127d2:	e7fe      	b.n	80127d2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80127d4:	f001 fea0 	bl	8014518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80127d8:	f3ef 8211 	mrs	r2, BASEPRI
 80127dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127e0:	b672      	cpsid	i
 80127e2:	f383 8811 	msr	BASEPRI, r3
 80127e6:	f3bf 8f6f 	isb	sy
 80127ea:	f3bf 8f4f 	dsb	sy
 80127ee:	b662      	cpsie	i
 80127f0:	61ba      	str	r2, [r7, #24]
 80127f2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80127f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80127f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80127f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80127fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012800:	429a      	cmp	r2, r3
 8012802:	d302      	bcc.n	801280a <xQueueGenericSendFromISR+0xc6>
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	2b02      	cmp	r3, #2
 8012808:	d12c      	bne.n	8012864 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801280c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012814:	683a      	ldr	r2, [r7, #0]
 8012816:	68b9      	ldr	r1, [r7, #8]
 8012818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801281a:	f000 fb4e 	bl	8012eba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801281e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012826:	d112      	bne.n	801284e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801282c:	2b00      	cmp	r3, #0
 801282e:	d016      	beq.n	801285e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012832:	3324      	adds	r3, #36	; 0x24
 8012834:	4618      	mov	r0, r3
 8012836:	f001 f889 	bl	801394c <xTaskRemoveFromEventList>
 801283a:	4603      	mov	r3, r0
 801283c:	2b00      	cmp	r3, #0
 801283e:	d00e      	beq.n	801285e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d00b      	beq.n	801285e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	2201      	movs	r2, #1
 801284a:	601a      	str	r2, [r3, #0]
 801284c:	e007      	b.n	801285e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801284e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012852:	3301      	adds	r3, #1
 8012854:	b2db      	uxtb	r3, r3
 8012856:	b25a      	sxtb	r2, r3
 8012858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801285a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801285e:	2301      	movs	r3, #1
 8012860:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012862:	e001      	b.n	8012868 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012864:	2300      	movs	r3, #0
 8012866:	637b      	str	r3, [r7, #52]	; 0x34
 8012868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801286a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801286c:	693b      	ldr	r3, [r7, #16]
 801286e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012874:	4618      	mov	r0, r3
 8012876:	3738      	adds	r7, #56	; 0x38
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}

0801287c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b08e      	sub	sp, #56	; 0x38
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801288c:	2b00      	cmp	r3, #0
 801288e:	d10b      	bne.n	80128a8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8012890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012894:	b672      	cpsid	i
 8012896:	f383 8811 	msr	BASEPRI, r3
 801289a:	f3bf 8f6f 	isb	sy
 801289e:	f3bf 8f4f 	dsb	sy
 80128a2:	b662      	cpsie	i
 80128a4:	623b      	str	r3, [r7, #32]
 80128a6:	e7fe      	b.n	80128a6 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80128a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d00b      	beq.n	80128c8 <xQueueGiveFromISR+0x4c>
 80128b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128b4:	b672      	cpsid	i
 80128b6:	f383 8811 	msr	BASEPRI, r3
 80128ba:	f3bf 8f6f 	isb	sy
 80128be:	f3bf 8f4f 	dsb	sy
 80128c2:	b662      	cpsie	i
 80128c4:	61fb      	str	r3, [r7, #28]
 80128c6:	e7fe      	b.n	80128c6 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80128c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d103      	bne.n	80128d8 <xQueueGiveFromISR+0x5c>
 80128d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d2:	689b      	ldr	r3, [r3, #8]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d101      	bne.n	80128dc <xQueueGiveFromISR+0x60>
 80128d8:	2301      	movs	r3, #1
 80128da:	e000      	b.n	80128de <xQueueGiveFromISR+0x62>
 80128dc:	2300      	movs	r3, #0
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d10b      	bne.n	80128fa <xQueueGiveFromISR+0x7e>
 80128e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128e6:	b672      	cpsid	i
 80128e8:	f383 8811 	msr	BASEPRI, r3
 80128ec:	f3bf 8f6f 	isb	sy
 80128f0:	f3bf 8f4f 	dsb	sy
 80128f4:	b662      	cpsie	i
 80128f6:	61bb      	str	r3, [r7, #24]
 80128f8:	e7fe      	b.n	80128f8 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80128fa:	f001 fe0d 	bl	8014518 <vPortValidateInterruptPriority>
	__asm volatile
 80128fe:	f3ef 8211 	mrs	r2, BASEPRI
 8012902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012906:	b672      	cpsid	i
 8012908:	f383 8811 	msr	BASEPRI, r3
 801290c:	f3bf 8f6f 	isb	sy
 8012910:	f3bf 8f4f 	dsb	sy
 8012914:	b662      	cpsie	i
 8012916:	617a      	str	r2, [r7, #20]
 8012918:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801291a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801291c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012922:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801292a:	429a      	cmp	r2, r3
 801292c:	d22b      	bcs.n	8012986 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801292e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801293a:	1c5a      	adds	r2, r3, #1
 801293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801293e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012940:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012948:	d112      	bne.n	8012970 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801294a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801294e:	2b00      	cmp	r3, #0
 8012950:	d016      	beq.n	8012980 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012954:	3324      	adds	r3, #36	; 0x24
 8012956:	4618      	mov	r0, r3
 8012958:	f000 fff8 	bl	801394c <xTaskRemoveFromEventList>
 801295c:	4603      	mov	r3, r0
 801295e:	2b00      	cmp	r3, #0
 8012960:	d00e      	beq.n	8012980 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012962:	683b      	ldr	r3, [r7, #0]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d00b      	beq.n	8012980 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	2201      	movs	r2, #1
 801296c:	601a      	str	r2, [r3, #0]
 801296e:	e007      	b.n	8012980 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012974:	3301      	adds	r3, #1
 8012976:	b2db      	uxtb	r3, r3
 8012978:	b25a      	sxtb	r2, r3
 801297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801297c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012980:	2301      	movs	r3, #1
 8012982:	637b      	str	r3, [r7, #52]	; 0x34
 8012984:	e001      	b.n	801298a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012986:	2300      	movs	r3, #0
 8012988:	637b      	str	r3, [r7, #52]	; 0x34
 801298a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801298c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012996:	4618      	mov	r0, r3
 8012998:	3738      	adds	r7, #56	; 0x38
 801299a:	46bd      	mov	sp, r7
 801299c:	bd80      	pop	{r7, pc}
	...

080129a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b08c      	sub	sp, #48	; 0x30
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	60f8      	str	r0, [r7, #12]
 80129a8:	60b9      	str	r1, [r7, #8]
 80129aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80129ac:	2300      	movs	r3, #0
 80129ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80129b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d10b      	bne.n	80129d2 <xQueueReceive+0x32>
	__asm volatile
 80129ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129be:	b672      	cpsid	i
 80129c0:	f383 8811 	msr	BASEPRI, r3
 80129c4:	f3bf 8f6f 	isb	sy
 80129c8:	f3bf 8f4f 	dsb	sy
 80129cc:	b662      	cpsie	i
 80129ce:	623b      	str	r3, [r7, #32]
 80129d0:	e7fe      	b.n	80129d0 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d103      	bne.n	80129e0 <xQueueReceive+0x40>
 80129d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d101      	bne.n	80129e4 <xQueueReceive+0x44>
 80129e0:	2301      	movs	r3, #1
 80129e2:	e000      	b.n	80129e6 <xQueueReceive+0x46>
 80129e4:	2300      	movs	r3, #0
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d10b      	bne.n	8012a02 <xQueueReceive+0x62>
 80129ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ee:	b672      	cpsid	i
 80129f0:	f383 8811 	msr	BASEPRI, r3
 80129f4:	f3bf 8f6f 	isb	sy
 80129f8:	f3bf 8f4f 	dsb	sy
 80129fc:	b662      	cpsie	i
 80129fe:	61fb      	str	r3, [r7, #28]
 8012a00:	e7fe      	b.n	8012a00 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012a02:	f001 f961 	bl	8013cc8 <xTaskGetSchedulerState>
 8012a06:	4603      	mov	r3, r0
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d102      	bne.n	8012a12 <xQueueReceive+0x72>
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d101      	bne.n	8012a16 <xQueueReceive+0x76>
 8012a12:	2301      	movs	r3, #1
 8012a14:	e000      	b.n	8012a18 <xQueueReceive+0x78>
 8012a16:	2300      	movs	r3, #0
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d10b      	bne.n	8012a34 <xQueueReceive+0x94>
 8012a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a20:	b672      	cpsid	i
 8012a22:	f383 8811 	msr	BASEPRI, r3
 8012a26:	f3bf 8f6f 	isb	sy
 8012a2a:	f3bf 8f4f 	dsb	sy
 8012a2e:	b662      	cpsie	i
 8012a30:	61bb      	str	r3, [r7, #24]
 8012a32:	e7fe      	b.n	8012a32 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012a34:	f001 fc90 	bl	8014358 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a3c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d01f      	beq.n	8012a84 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012a44:	68b9      	ldr	r1, [r7, #8]
 8012a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a48:	f000 faa1 	bl	8012f8e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4e:	1e5a      	subs	r2, r3, #1
 8012a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a52:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a56:	691b      	ldr	r3, [r3, #16]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d00f      	beq.n	8012a7c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a5e:	3310      	adds	r3, #16
 8012a60:	4618      	mov	r0, r3
 8012a62:	f000 ff73 	bl	801394c <xTaskRemoveFromEventList>
 8012a66:	4603      	mov	r3, r0
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d007      	beq.n	8012a7c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012a6c:	4b3c      	ldr	r3, [pc, #240]	; (8012b60 <xQueueReceive+0x1c0>)
 8012a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a72:	601a      	str	r2, [r3, #0]
 8012a74:	f3bf 8f4f 	dsb	sy
 8012a78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012a7c:	f001 fc9e 	bl	80143bc <vPortExitCritical>
				return pdPASS;
 8012a80:	2301      	movs	r3, #1
 8012a82:	e069      	b.n	8012b58 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d103      	bne.n	8012a92 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012a8a:	f001 fc97 	bl	80143bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012a8e:	2300      	movs	r3, #0
 8012a90:	e062      	b.n	8012b58 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d106      	bne.n	8012aa6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012a98:	f107 0310 	add.w	r3, r7, #16
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f000 ffb9 	bl	8013a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012aa6:	f001 fc89 	bl	80143bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012aaa:	f000 fd45 	bl	8013538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012aae:	f001 fc53 	bl	8014358 <vPortEnterCritical>
 8012ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012ab8:	b25b      	sxtb	r3, r3
 8012aba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012abe:	d103      	bne.n	8012ac8 <xQueueReceive+0x128>
 8012ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ace:	b25b      	sxtb	r3, r3
 8012ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012ad4:	d103      	bne.n	8012ade <xQueueReceive+0x13e>
 8012ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ad8:	2200      	movs	r2, #0
 8012ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012ade:	f001 fc6d 	bl	80143bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012ae2:	1d3a      	adds	r2, r7, #4
 8012ae4:	f107 0310 	add.w	r3, r7, #16
 8012ae8:	4611      	mov	r1, r2
 8012aea:	4618      	mov	r0, r3
 8012aec:	f000 ffa8 	bl	8013a40 <xTaskCheckForTimeOut>
 8012af0:	4603      	mov	r3, r0
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d123      	bne.n	8012b3e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012af8:	f000 fac1 	bl	801307e <prvIsQueueEmpty>
 8012afc:	4603      	mov	r3, r0
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d017      	beq.n	8012b32 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b04:	3324      	adds	r3, #36	; 0x24
 8012b06:	687a      	ldr	r2, [r7, #4]
 8012b08:	4611      	mov	r1, r2
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	f000 fef8 	bl	8013900 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b12:	f000 fa62 	bl	8012fda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012b16:	f000 fd1d 	bl	8013554 <xTaskResumeAll>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d189      	bne.n	8012a34 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8012b20:	4b0f      	ldr	r3, [pc, #60]	; (8012b60 <xQueueReceive+0x1c0>)
 8012b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b26:	601a      	str	r2, [r3, #0]
 8012b28:	f3bf 8f4f 	dsb	sy
 8012b2c:	f3bf 8f6f 	isb	sy
 8012b30:	e780      	b.n	8012a34 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012b32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b34:	f000 fa51 	bl	8012fda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012b38:	f000 fd0c 	bl	8013554 <xTaskResumeAll>
 8012b3c:	e77a      	b.n	8012a34 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b40:	f000 fa4b 	bl	8012fda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012b44:	f000 fd06 	bl	8013554 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b4a:	f000 fa98 	bl	801307e <prvIsQueueEmpty>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	f43f af6f 	beq.w	8012a34 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012b56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012b58:	4618      	mov	r0, r3
 8012b5a:	3730      	adds	r7, #48	; 0x30
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}
 8012b60:	e000ed04 	.word	0xe000ed04

08012b64 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b08e      	sub	sp, #56	; 0x38
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012b76:	2300      	movs	r3, #0
 8012b78:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d10b      	bne.n	8012b98 <xQueueSemaphoreTake+0x34>
 8012b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b84:	b672      	cpsid	i
 8012b86:	f383 8811 	msr	BASEPRI, r3
 8012b8a:	f3bf 8f6f 	isb	sy
 8012b8e:	f3bf 8f4f 	dsb	sy
 8012b92:	b662      	cpsie	i
 8012b94:	623b      	str	r3, [r7, #32]
 8012b96:	e7fe      	b.n	8012b96 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d00b      	beq.n	8012bb8 <xQueueSemaphoreTake+0x54>
 8012ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ba4:	b672      	cpsid	i
 8012ba6:	f383 8811 	msr	BASEPRI, r3
 8012baa:	f3bf 8f6f 	isb	sy
 8012bae:	f3bf 8f4f 	dsb	sy
 8012bb2:	b662      	cpsie	i
 8012bb4:	61fb      	str	r3, [r7, #28]
 8012bb6:	e7fe      	b.n	8012bb6 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012bb8:	f001 f886 	bl	8013cc8 <xTaskGetSchedulerState>
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d102      	bne.n	8012bc8 <xQueueSemaphoreTake+0x64>
 8012bc2:	683b      	ldr	r3, [r7, #0]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d101      	bne.n	8012bcc <xQueueSemaphoreTake+0x68>
 8012bc8:	2301      	movs	r3, #1
 8012bca:	e000      	b.n	8012bce <xQueueSemaphoreTake+0x6a>
 8012bcc:	2300      	movs	r3, #0
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d10b      	bne.n	8012bea <xQueueSemaphoreTake+0x86>
 8012bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bd6:	b672      	cpsid	i
 8012bd8:	f383 8811 	msr	BASEPRI, r3
 8012bdc:	f3bf 8f6f 	isb	sy
 8012be0:	f3bf 8f4f 	dsb	sy
 8012be4:	b662      	cpsie	i
 8012be6:	61bb      	str	r3, [r7, #24]
 8012be8:	e7fe      	b.n	8012be8 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012bea:	f001 fbb5 	bl	8014358 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bf2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d024      	beq.n	8012c44 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bfc:	1e5a      	subs	r2, r3, #1
 8012bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c00:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d104      	bne.n	8012c14 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012c0a:	f001 fa1f 	bl	801404c <pvTaskIncrementMutexHeldCount>
 8012c0e:	4602      	mov	r2, r0
 8012c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c12:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c16:	691b      	ldr	r3, [r3, #16]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d00f      	beq.n	8012c3c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c1e:	3310      	adds	r3, #16
 8012c20:	4618      	mov	r0, r3
 8012c22:	f000 fe93 	bl	801394c <xTaskRemoveFromEventList>
 8012c26:	4603      	mov	r3, r0
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d007      	beq.n	8012c3c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012c2c:	4b54      	ldr	r3, [pc, #336]	; (8012d80 <xQueueSemaphoreTake+0x21c>)
 8012c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c32:	601a      	str	r2, [r3, #0]
 8012c34:	f3bf 8f4f 	dsb	sy
 8012c38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012c3c:	f001 fbbe 	bl	80143bc <vPortExitCritical>
				return pdPASS;
 8012c40:	2301      	movs	r3, #1
 8012c42:	e098      	b.n	8012d76 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d112      	bne.n	8012c70 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d00b      	beq.n	8012c68 <xQueueSemaphoreTake+0x104>
 8012c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c54:	b672      	cpsid	i
 8012c56:	f383 8811 	msr	BASEPRI, r3
 8012c5a:	f3bf 8f6f 	isb	sy
 8012c5e:	f3bf 8f4f 	dsb	sy
 8012c62:	b662      	cpsie	i
 8012c64:	617b      	str	r3, [r7, #20]
 8012c66:	e7fe      	b.n	8012c66 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012c68:	f001 fba8 	bl	80143bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	e082      	b.n	8012d76 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d106      	bne.n	8012c84 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012c76:	f107 030c 	add.w	r3, r7, #12
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f000 feca 	bl	8013a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012c80:	2301      	movs	r3, #1
 8012c82:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012c84:	f001 fb9a 	bl	80143bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012c88:	f000 fc56 	bl	8013538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012c8c:	f001 fb64 	bl	8014358 <vPortEnterCritical>
 8012c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012c96:	b25b      	sxtb	r3, r3
 8012c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c9c:	d103      	bne.n	8012ca6 <xQueueSemaphoreTake+0x142>
 8012c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012cac:	b25b      	sxtb	r3, r3
 8012cae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012cb2:	d103      	bne.n	8012cbc <xQueueSemaphoreTake+0x158>
 8012cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012cbc:	f001 fb7e 	bl	80143bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012cc0:	463a      	mov	r2, r7
 8012cc2:	f107 030c 	add.w	r3, r7, #12
 8012cc6:	4611      	mov	r1, r2
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f000 feb9 	bl	8013a40 <xTaskCheckForTimeOut>
 8012cce:	4603      	mov	r3, r0
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d132      	bne.n	8012d3a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012cd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012cd6:	f000 f9d2 	bl	801307e <prvIsQueueEmpty>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d026      	beq.n	8012d2e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d109      	bne.n	8012cfc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8012ce8:	f001 fb36 	bl	8014358 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cee:	689b      	ldr	r3, [r3, #8]
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f001 f807 	bl	8013d04 <xTaskPriorityInherit>
 8012cf6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012cf8:	f001 fb60 	bl	80143bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cfe:	3324      	adds	r3, #36	; 0x24
 8012d00:	683a      	ldr	r2, [r7, #0]
 8012d02:	4611      	mov	r1, r2
 8012d04:	4618      	mov	r0, r3
 8012d06:	f000 fdfb 	bl	8013900 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012d0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d0c:	f000 f965 	bl	8012fda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012d10:	f000 fc20 	bl	8013554 <xTaskResumeAll>
 8012d14:	4603      	mov	r3, r0
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	f47f af67 	bne.w	8012bea <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8012d1c:	4b18      	ldr	r3, [pc, #96]	; (8012d80 <xQueueSemaphoreTake+0x21c>)
 8012d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d22:	601a      	str	r2, [r3, #0]
 8012d24:	f3bf 8f4f 	dsb	sy
 8012d28:	f3bf 8f6f 	isb	sy
 8012d2c:	e75d      	b.n	8012bea <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012d2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d30:	f000 f953 	bl	8012fda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012d34:	f000 fc0e 	bl	8013554 <xTaskResumeAll>
 8012d38:	e757      	b.n	8012bea <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012d3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d3c:	f000 f94d 	bl	8012fda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012d40:	f000 fc08 	bl	8013554 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012d44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d46:	f000 f99a 	bl	801307e <prvIsQueueEmpty>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	f43f af4c 	beq.w	8012bea <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d00d      	beq.n	8012d74 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8012d58:	f001 fafe 	bl	8014358 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012d5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d5e:	f000 f894 	bl	8012e8a <prvGetDisinheritPriorityAfterTimeout>
 8012d62:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d66:	689b      	ldr	r3, [r3, #8]
 8012d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f001 f8d2 	bl	8013f14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012d70:	f001 fb24 	bl	80143bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012d74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	3738      	adds	r7, #56	; 0x38
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	e000ed04 	.word	0xe000ed04

08012d84 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b08e      	sub	sp, #56	; 0x38
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	60f8      	str	r0, [r7, #12]
 8012d8c:	60b9      	str	r1, [r7, #8]
 8012d8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d10b      	bne.n	8012db2 <xQueueReceiveFromISR+0x2e>
 8012d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d9e:	b672      	cpsid	i
 8012da0:	f383 8811 	msr	BASEPRI, r3
 8012da4:	f3bf 8f6f 	isb	sy
 8012da8:	f3bf 8f4f 	dsb	sy
 8012dac:	b662      	cpsie	i
 8012dae:	623b      	str	r3, [r7, #32]
 8012db0:	e7fe      	b.n	8012db0 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012db2:	68bb      	ldr	r3, [r7, #8]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d103      	bne.n	8012dc0 <xQueueReceiveFromISR+0x3c>
 8012db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d101      	bne.n	8012dc4 <xQueueReceiveFromISR+0x40>
 8012dc0:	2301      	movs	r3, #1
 8012dc2:	e000      	b.n	8012dc6 <xQueueReceiveFromISR+0x42>
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d10b      	bne.n	8012de2 <xQueueReceiveFromISR+0x5e>
 8012dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dce:	b672      	cpsid	i
 8012dd0:	f383 8811 	msr	BASEPRI, r3
 8012dd4:	f3bf 8f6f 	isb	sy
 8012dd8:	f3bf 8f4f 	dsb	sy
 8012ddc:	b662      	cpsie	i
 8012dde:	61fb      	str	r3, [r7, #28]
 8012de0:	e7fe      	b.n	8012de0 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012de2:	f001 fb99 	bl	8014518 <vPortValidateInterruptPriority>
	__asm volatile
 8012de6:	f3ef 8211 	mrs	r2, BASEPRI
 8012dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dee:	b672      	cpsid	i
 8012df0:	f383 8811 	msr	BASEPRI, r3
 8012df4:	f3bf 8f6f 	isb	sy
 8012df8:	f3bf 8f4f 	dsb	sy
 8012dfc:	b662      	cpsie	i
 8012dfe:	61ba      	str	r2, [r7, #24]
 8012e00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012e02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012e04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d02f      	beq.n	8012e72 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012e1c:	68b9      	ldr	r1, [r7, #8]
 8012e1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e20:	f000 f8b5 	bl	8012f8e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e26:	1e5a      	subs	r2, r3, #1
 8012e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012e2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012e34:	d112      	bne.n	8012e5c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e38:	691b      	ldr	r3, [r3, #16]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d016      	beq.n	8012e6c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e40:	3310      	adds	r3, #16
 8012e42:	4618      	mov	r0, r3
 8012e44:	f000 fd82 	bl	801394c <xTaskRemoveFromEventList>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d00e      	beq.n	8012e6c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d00b      	beq.n	8012e6c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	2201      	movs	r2, #1
 8012e58:	601a      	str	r2, [r3, #0]
 8012e5a:	e007      	b.n	8012e6c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e60:	3301      	adds	r3, #1
 8012e62:	b2db      	uxtb	r3, r3
 8012e64:	b25a      	sxtb	r2, r3
 8012e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8012e70:	e001      	b.n	8012e76 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8012e72:	2300      	movs	r3, #0
 8012e74:	637b      	str	r3, [r7, #52]	; 0x34
 8012e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012e82:	4618      	mov	r0, r3
 8012e84:	3738      	adds	r7, #56	; 0x38
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}

08012e8a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012e8a:	b480      	push	{r7}
 8012e8c:	b085      	sub	sp, #20
 8012e8e:	af00      	add	r7, sp, #0
 8012e90:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d006      	beq.n	8012ea8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	f1c3 0307 	rsb	r3, r3, #7
 8012ea4:	60fb      	str	r3, [r7, #12]
 8012ea6:	e001      	b.n	8012eac <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012eac:	68fb      	ldr	r3, [r7, #12]
	}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3714      	adds	r7, #20
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb8:	4770      	bx	lr

08012eba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012eba:	b580      	push	{r7, lr}
 8012ebc:	b086      	sub	sp, #24
 8012ebe:	af00      	add	r7, sp, #0
 8012ec0:	60f8      	str	r0, [r7, #12]
 8012ec2:	60b9      	str	r1, [r7, #8]
 8012ec4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ece:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d10d      	bne.n	8012ef4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d14d      	bne.n	8012f7c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	689b      	ldr	r3, [r3, #8]
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f000 ff8d 	bl	8013e04 <xTaskPriorityDisinherit>
 8012eea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	2200      	movs	r2, #0
 8012ef0:	609a      	str	r2, [r3, #8]
 8012ef2:	e043      	b.n	8012f7c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d119      	bne.n	8012f2e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	6858      	ldr	r0, [r3, #4]
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f02:	461a      	mov	r2, r3
 8012f04:	68b9      	ldr	r1, [r7, #8]
 8012f06:	f00d faf2 	bl	80204ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	685a      	ldr	r2, [r3, #4]
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f12:	441a      	add	r2, r3
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	685a      	ldr	r2, [r3, #4]
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	689b      	ldr	r3, [r3, #8]
 8012f20:	429a      	cmp	r2, r3
 8012f22:	d32b      	bcc.n	8012f7c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	681a      	ldr	r2, [r3, #0]
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	605a      	str	r2, [r3, #4]
 8012f2c:	e026      	b.n	8012f7c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	68d8      	ldr	r0, [r3, #12]
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f36:	461a      	mov	r2, r3
 8012f38:	68b9      	ldr	r1, [r7, #8]
 8012f3a:	f00d fad8 	bl	80204ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	68da      	ldr	r2, [r3, #12]
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f46:	425b      	negs	r3, r3
 8012f48:	441a      	add	r2, r3
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	68da      	ldr	r2, [r3, #12]
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	429a      	cmp	r2, r3
 8012f58:	d207      	bcs.n	8012f6a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	689a      	ldr	r2, [r3, #8]
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f62:	425b      	negs	r3, r3
 8012f64:	441a      	add	r2, r3
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2b02      	cmp	r3, #2
 8012f6e:	d105      	bne.n	8012f7c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012f70:	693b      	ldr	r3, [r7, #16]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d002      	beq.n	8012f7c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	3b01      	subs	r3, #1
 8012f7a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012f7c:	693b      	ldr	r3, [r7, #16]
 8012f7e:	1c5a      	adds	r2, r3, #1
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012f84:	697b      	ldr	r3, [r7, #20]
}
 8012f86:	4618      	mov	r0, r3
 8012f88:	3718      	adds	r7, #24
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	bd80      	pop	{r7, pc}

08012f8e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012f8e:	b580      	push	{r7, lr}
 8012f90:	b082      	sub	sp, #8
 8012f92:	af00      	add	r7, sp, #0
 8012f94:	6078      	str	r0, [r7, #4]
 8012f96:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d018      	beq.n	8012fd2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	68da      	ldr	r2, [r3, #12]
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fa8:	441a      	add	r2, r3
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	68da      	ldr	r2, [r3, #12]
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	689b      	ldr	r3, [r3, #8]
 8012fb6:	429a      	cmp	r2, r3
 8012fb8:	d303      	bcc.n	8012fc2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	681a      	ldr	r2, [r3, #0]
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	68d9      	ldr	r1, [r3, #12]
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fca:	461a      	mov	r2, r3
 8012fcc:	6838      	ldr	r0, [r7, #0]
 8012fce:	f00d fa8e 	bl	80204ee <memcpy>
	}
}
 8012fd2:	bf00      	nop
 8012fd4:	3708      	adds	r7, #8
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd80      	pop	{r7, pc}

08012fda <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012fda:	b580      	push	{r7, lr}
 8012fdc:	b084      	sub	sp, #16
 8012fde:	af00      	add	r7, sp, #0
 8012fe0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012fe2:	f001 f9b9 	bl	8014358 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012fec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012fee:	e011      	b.n	8013014 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d012      	beq.n	801301e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	3324      	adds	r3, #36	; 0x24
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f000 fca5 	bl	801394c <xTaskRemoveFromEventList>
 8013002:	4603      	mov	r3, r0
 8013004:	2b00      	cmp	r3, #0
 8013006:	d001      	beq.n	801300c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013008:	f000 fd7e 	bl	8013b08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801300c:	7bfb      	ldrb	r3, [r7, #15]
 801300e:	3b01      	subs	r3, #1
 8013010:	b2db      	uxtb	r3, r3
 8013012:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013018:	2b00      	cmp	r3, #0
 801301a:	dce9      	bgt.n	8012ff0 <prvUnlockQueue+0x16>
 801301c:	e000      	b.n	8013020 <prvUnlockQueue+0x46>
					break;
 801301e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	22ff      	movs	r2, #255	; 0xff
 8013024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013028:	f001 f9c8 	bl	80143bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801302c:	f001 f994 	bl	8014358 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013036:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013038:	e011      	b.n	801305e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	691b      	ldr	r3, [r3, #16]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d012      	beq.n	8013068 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	3310      	adds	r3, #16
 8013046:	4618      	mov	r0, r3
 8013048:	f000 fc80 	bl	801394c <xTaskRemoveFromEventList>
 801304c:	4603      	mov	r3, r0
 801304e:	2b00      	cmp	r3, #0
 8013050:	d001      	beq.n	8013056 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013052:	f000 fd59 	bl	8013b08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013056:	7bbb      	ldrb	r3, [r7, #14]
 8013058:	3b01      	subs	r3, #1
 801305a:	b2db      	uxtb	r3, r3
 801305c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801305e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013062:	2b00      	cmp	r3, #0
 8013064:	dce9      	bgt.n	801303a <prvUnlockQueue+0x60>
 8013066:	e000      	b.n	801306a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013068:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	22ff      	movs	r2, #255	; 0xff
 801306e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013072:	f001 f9a3 	bl	80143bc <vPortExitCritical>
}
 8013076:	bf00      	nop
 8013078:	3710      	adds	r7, #16
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}

0801307e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801307e:	b580      	push	{r7, lr}
 8013080:	b084      	sub	sp, #16
 8013082:	af00      	add	r7, sp, #0
 8013084:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013086:	f001 f967 	bl	8014358 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801308e:	2b00      	cmp	r3, #0
 8013090:	d102      	bne.n	8013098 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013092:	2301      	movs	r3, #1
 8013094:	60fb      	str	r3, [r7, #12]
 8013096:	e001      	b.n	801309c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013098:	2300      	movs	r3, #0
 801309a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801309c:	f001 f98e 	bl	80143bc <vPortExitCritical>

	return xReturn;
 80130a0:	68fb      	ldr	r3, [r7, #12]
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3710      	adds	r7, #16
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}

080130aa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80130aa:	b580      	push	{r7, lr}
 80130ac:	b084      	sub	sp, #16
 80130ae:	af00      	add	r7, sp, #0
 80130b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80130b2:	f001 f951 	bl	8014358 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130be:	429a      	cmp	r2, r3
 80130c0:	d102      	bne.n	80130c8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80130c2:	2301      	movs	r3, #1
 80130c4:	60fb      	str	r3, [r7, #12]
 80130c6:	e001      	b.n	80130cc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80130c8:	2300      	movs	r3, #0
 80130ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80130cc:	f001 f976 	bl	80143bc <vPortExitCritical>

	return xReturn;
 80130d0:	68fb      	ldr	r3, [r7, #12]
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	3710      	adds	r7, #16
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}

080130da <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80130da:	b580      	push	{r7, lr}
 80130dc:	b08e      	sub	sp, #56	; 0x38
 80130de:	af04      	add	r7, sp, #16
 80130e0:	60f8      	str	r0, [r7, #12]
 80130e2:	60b9      	str	r1, [r7, #8]
 80130e4:	607a      	str	r2, [r7, #4]
 80130e6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80130e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d10b      	bne.n	8013106 <xTaskCreateStatic+0x2c>
	__asm volatile
 80130ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130f2:	b672      	cpsid	i
 80130f4:	f383 8811 	msr	BASEPRI, r3
 80130f8:	f3bf 8f6f 	isb	sy
 80130fc:	f3bf 8f4f 	dsb	sy
 8013100:	b662      	cpsie	i
 8013102:	623b      	str	r3, [r7, #32]
 8013104:	e7fe      	b.n	8013104 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8013106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013108:	2b00      	cmp	r3, #0
 801310a:	d10b      	bne.n	8013124 <xTaskCreateStatic+0x4a>
 801310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013110:	b672      	cpsid	i
 8013112:	f383 8811 	msr	BASEPRI, r3
 8013116:	f3bf 8f6f 	isb	sy
 801311a:	f3bf 8f4f 	dsb	sy
 801311e:	b662      	cpsie	i
 8013120:	61fb      	str	r3, [r7, #28]
 8013122:	e7fe      	b.n	8013122 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013124:	2354      	movs	r3, #84	; 0x54
 8013126:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013128:	693b      	ldr	r3, [r7, #16]
 801312a:	2b54      	cmp	r3, #84	; 0x54
 801312c:	d00b      	beq.n	8013146 <xTaskCreateStatic+0x6c>
 801312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013132:	b672      	cpsid	i
 8013134:	f383 8811 	msr	BASEPRI, r3
 8013138:	f3bf 8f6f 	isb	sy
 801313c:	f3bf 8f4f 	dsb	sy
 8013140:	b662      	cpsie	i
 8013142:	61bb      	str	r3, [r7, #24]
 8013144:	e7fe      	b.n	8013144 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013146:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801314a:	2b00      	cmp	r3, #0
 801314c:	d01e      	beq.n	801318c <xTaskCreateStatic+0xb2>
 801314e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013150:	2b00      	cmp	r3, #0
 8013152:	d01b      	beq.n	801318c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013156:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801315c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013160:	2202      	movs	r2, #2
 8013162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013166:	2300      	movs	r3, #0
 8013168:	9303      	str	r3, [sp, #12]
 801316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801316c:	9302      	str	r3, [sp, #8]
 801316e:	f107 0314 	add.w	r3, r7, #20
 8013172:	9301      	str	r3, [sp, #4]
 8013174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013176:	9300      	str	r3, [sp, #0]
 8013178:	683b      	ldr	r3, [r7, #0]
 801317a:	687a      	ldr	r2, [r7, #4]
 801317c:	68b9      	ldr	r1, [r7, #8]
 801317e:	68f8      	ldr	r0, [r7, #12]
 8013180:	f000 f850 	bl	8013224 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013186:	f000 f8d5 	bl	8013334 <prvAddNewTaskToReadyList>
 801318a:	e001      	b.n	8013190 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801318c:	2300      	movs	r3, #0
 801318e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013190:	697b      	ldr	r3, [r7, #20]
	}
 8013192:	4618      	mov	r0, r3
 8013194:	3728      	adds	r7, #40	; 0x28
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}

0801319a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801319a:	b580      	push	{r7, lr}
 801319c:	b08c      	sub	sp, #48	; 0x30
 801319e:	af04      	add	r7, sp, #16
 80131a0:	60f8      	str	r0, [r7, #12]
 80131a2:	60b9      	str	r1, [r7, #8]
 80131a4:	603b      	str	r3, [r7, #0]
 80131a6:	4613      	mov	r3, r2
 80131a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80131aa:	88fb      	ldrh	r3, [r7, #6]
 80131ac:	009b      	lsls	r3, r3, #2
 80131ae:	4618      	mov	r0, r3
 80131b0:	f001 f9f4 	bl	801459c <pvPortMalloc>
 80131b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80131b6:	697b      	ldr	r3, [r7, #20]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d00e      	beq.n	80131da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80131bc:	2054      	movs	r0, #84	; 0x54
 80131be:	f001 f9ed 	bl	801459c <pvPortMalloc>
 80131c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80131c4:	69fb      	ldr	r3, [r7, #28]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d003      	beq.n	80131d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80131ca:	69fb      	ldr	r3, [r7, #28]
 80131cc:	697a      	ldr	r2, [r7, #20]
 80131ce:	631a      	str	r2, [r3, #48]	; 0x30
 80131d0:	e005      	b.n	80131de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80131d2:	6978      	ldr	r0, [r7, #20]
 80131d4:	f001 faaa 	bl	801472c <vPortFree>
 80131d8:	e001      	b.n	80131de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80131da:	2300      	movs	r3, #0
 80131dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80131de:	69fb      	ldr	r3, [r7, #28]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d017      	beq.n	8013214 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80131e4:	69fb      	ldr	r3, [r7, #28]
 80131e6:	2200      	movs	r2, #0
 80131e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80131ec:	88fa      	ldrh	r2, [r7, #6]
 80131ee:	2300      	movs	r3, #0
 80131f0:	9303      	str	r3, [sp, #12]
 80131f2:	69fb      	ldr	r3, [r7, #28]
 80131f4:	9302      	str	r3, [sp, #8]
 80131f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f8:	9301      	str	r3, [sp, #4]
 80131fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131fc:	9300      	str	r3, [sp, #0]
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	68b9      	ldr	r1, [r7, #8]
 8013202:	68f8      	ldr	r0, [r7, #12]
 8013204:	f000 f80e 	bl	8013224 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013208:	69f8      	ldr	r0, [r7, #28]
 801320a:	f000 f893 	bl	8013334 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801320e:	2301      	movs	r3, #1
 8013210:	61bb      	str	r3, [r7, #24]
 8013212:	e002      	b.n	801321a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013218:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801321a:	69bb      	ldr	r3, [r7, #24]
	}
 801321c:	4618      	mov	r0, r3
 801321e:	3720      	adds	r7, #32
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}

08013224 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b088      	sub	sp, #32
 8013228:	af00      	add	r7, sp, #0
 801322a:	60f8      	str	r0, [r7, #12]
 801322c:	60b9      	str	r1, [r7, #8]
 801322e:	607a      	str	r2, [r7, #4]
 8013230:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013236:	6879      	ldr	r1, [r7, #4]
 8013238:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801323c:	440b      	add	r3, r1
 801323e:	009b      	lsls	r3, r3, #2
 8013240:	4413      	add	r3, r2
 8013242:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013244:	69bb      	ldr	r3, [r7, #24]
 8013246:	f023 0307 	bic.w	r3, r3, #7
 801324a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801324c:	69bb      	ldr	r3, [r7, #24]
 801324e:	f003 0307 	and.w	r3, r3, #7
 8013252:	2b00      	cmp	r3, #0
 8013254:	d00b      	beq.n	801326e <prvInitialiseNewTask+0x4a>
 8013256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801325a:	b672      	cpsid	i
 801325c:	f383 8811 	msr	BASEPRI, r3
 8013260:	f3bf 8f6f 	isb	sy
 8013264:	f3bf 8f4f 	dsb	sy
 8013268:	b662      	cpsie	i
 801326a:	617b      	str	r3, [r7, #20]
 801326c:	e7fe      	b.n	801326c <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d01f      	beq.n	80132b4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013274:	2300      	movs	r3, #0
 8013276:	61fb      	str	r3, [r7, #28]
 8013278:	e012      	b.n	80132a0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801327a:	68ba      	ldr	r2, [r7, #8]
 801327c:	69fb      	ldr	r3, [r7, #28]
 801327e:	4413      	add	r3, r2
 8013280:	7819      	ldrb	r1, [r3, #0]
 8013282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013284:	69fb      	ldr	r3, [r7, #28]
 8013286:	4413      	add	r3, r2
 8013288:	3334      	adds	r3, #52	; 0x34
 801328a:	460a      	mov	r2, r1
 801328c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801328e:	68ba      	ldr	r2, [r7, #8]
 8013290:	69fb      	ldr	r3, [r7, #28]
 8013292:	4413      	add	r3, r2
 8013294:	781b      	ldrb	r3, [r3, #0]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d006      	beq.n	80132a8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801329a:	69fb      	ldr	r3, [r7, #28]
 801329c:	3301      	adds	r3, #1
 801329e:	61fb      	str	r3, [r7, #28]
 80132a0:	69fb      	ldr	r3, [r7, #28]
 80132a2:	2b0f      	cmp	r3, #15
 80132a4:	d9e9      	bls.n	801327a <prvInitialiseNewTask+0x56>
 80132a6:	e000      	b.n	80132aa <prvInitialiseNewTask+0x86>
			{
				break;
 80132a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80132aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ac:	2200      	movs	r2, #0
 80132ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80132b2:	e003      	b.n	80132bc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80132b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132b6:	2200      	movs	r2, #0
 80132b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80132bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132be:	2b06      	cmp	r3, #6
 80132c0:	d901      	bls.n	80132c6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80132c2:	2306      	movs	r3, #6
 80132c4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80132c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80132cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132d0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80132d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132d4:	2200      	movs	r2, #0
 80132d6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80132d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132da:	3304      	adds	r3, #4
 80132dc:	4618      	mov	r0, r3
 80132de:	f7fe ff07 	bl	80120f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80132e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e4:	3318      	adds	r3, #24
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7fe ff02 	bl	80120f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80132ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132f4:	f1c3 0207 	rsb	r2, r3, #7
 80132f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80132fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013300:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013304:	2200      	movs	r2, #0
 8013306:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801330a:	2200      	movs	r2, #0
 801330c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013310:	683a      	ldr	r2, [r7, #0]
 8013312:	68f9      	ldr	r1, [r7, #12]
 8013314:	69b8      	ldr	r0, [r7, #24]
 8013316:	f000 ff13 	bl	8014140 <pxPortInitialiseStack>
 801331a:	4602      	mov	r2, r0
 801331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801331e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013322:	2b00      	cmp	r3, #0
 8013324:	d002      	beq.n	801332c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801332a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801332c:	bf00      	nop
 801332e:	3720      	adds	r7, #32
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}

08013334 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b082      	sub	sp, #8
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801333c:	f001 f80c 	bl	8014358 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013340:	4b2a      	ldr	r3, [pc, #168]	; (80133ec <prvAddNewTaskToReadyList+0xb8>)
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	3301      	adds	r3, #1
 8013346:	4a29      	ldr	r2, [pc, #164]	; (80133ec <prvAddNewTaskToReadyList+0xb8>)
 8013348:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801334a:	4b29      	ldr	r3, [pc, #164]	; (80133f0 <prvAddNewTaskToReadyList+0xbc>)
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d109      	bne.n	8013366 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013352:	4a27      	ldr	r2, [pc, #156]	; (80133f0 <prvAddNewTaskToReadyList+0xbc>)
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013358:	4b24      	ldr	r3, [pc, #144]	; (80133ec <prvAddNewTaskToReadyList+0xb8>)
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	2b01      	cmp	r3, #1
 801335e:	d110      	bne.n	8013382 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013360:	f000 fbf6 	bl	8013b50 <prvInitialiseTaskLists>
 8013364:	e00d      	b.n	8013382 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013366:	4b23      	ldr	r3, [pc, #140]	; (80133f4 <prvAddNewTaskToReadyList+0xc0>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d109      	bne.n	8013382 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801336e:	4b20      	ldr	r3, [pc, #128]	; (80133f0 <prvAddNewTaskToReadyList+0xbc>)
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013378:	429a      	cmp	r2, r3
 801337a:	d802      	bhi.n	8013382 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801337c:	4a1c      	ldr	r2, [pc, #112]	; (80133f0 <prvAddNewTaskToReadyList+0xbc>)
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013382:	4b1d      	ldr	r3, [pc, #116]	; (80133f8 <prvAddNewTaskToReadyList+0xc4>)
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	3301      	adds	r3, #1
 8013388:	4a1b      	ldr	r2, [pc, #108]	; (80133f8 <prvAddNewTaskToReadyList+0xc4>)
 801338a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013390:	2201      	movs	r2, #1
 8013392:	409a      	lsls	r2, r3
 8013394:	4b19      	ldr	r3, [pc, #100]	; (80133fc <prvAddNewTaskToReadyList+0xc8>)
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	4313      	orrs	r3, r2
 801339a:	4a18      	ldr	r2, [pc, #96]	; (80133fc <prvAddNewTaskToReadyList+0xc8>)
 801339c:	6013      	str	r3, [r2, #0]
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133a2:	4613      	mov	r3, r2
 80133a4:	009b      	lsls	r3, r3, #2
 80133a6:	4413      	add	r3, r2
 80133a8:	009b      	lsls	r3, r3, #2
 80133aa:	4a15      	ldr	r2, [pc, #84]	; (8013400 <prvAddNewTaskToReadyList+0xcc>)
 80133ac:	441a      	add	r2, r3
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	3304      	adds	r3, #4
 80133b2:	4619      	mov	r1, r3
 80133b4:	4610      	mov	r0, r2
 80133b6:	f7fe fea8 	bl	801210a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80133ba:	f000 ffff 	bl	80143bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80133be:	4b0d      	ldr	r3, [pc, #52]	; (80133f4 <prvAddNewTaskToReadyList+0xc0>)
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d00e      	beq.n	80133e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80133c6:	4b0a      	ldr	r3, [pc, #40]	; (80133f0 <prvAddNewTaskToReadyList+0xbc>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d207      	bcs.n	80133e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80133d4:	4b0b      	ldr	r3, [pc, #44]	; (8013404 <prvAddNewTaskToReadyList+0xd0>)
 80133d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133da:	601a      	str	r2, [r3, #0]
 80133dc:	f3bf 8f4f 	dsb	sy
 80133e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80133e4:	bf00      	nop
 80133e6:	3708      	adds	r7, #8
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}
 80133ec:	2000044c 	.word	0x2000044c
 80133f0:	2000034c 	.word	0x2000034c
 80133f4:	20000458 	.word	0x20000458
 80133f8:	20000468 	.word	0x20000468
 80133fc:	20000454 	.word	0x20000454
 8013400:	20000350 	.word	0x20000350
 8013404:	e000ed04 	.word	0xe000ed04

08013408 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013408:	b580      	push	{r7, lr}
 801340a:	b084      	sub	sp, #16
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013410:	2300      	movs	r3, #0
 8013412:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d018      	beq.n	801344c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801341a:	4b14      	ldr	r3, [pc, #80]	; (801346c <vTaskDelay+0x64>)
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d00b      	beq.n	801343a <vTaskDelay+0x32>
 8013422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013426:	b672      	cpsid	i
 8013428:	f383 8811 	msr	BASEPRI, r3
 801342c:	f3bf 8f6f 	isb	sy
 8013430:	f3bf 8f4f 	dsb	sy
 8013434:	b662      	cpsie	i
 8013436:	60bb      	str	r3, [r7, #8]
 8013438:	e7fe      	b.n	8013438 <vTaskDelay+0x30>
			vTaskSuspendAll();
 801343a:	f000 f87d 	bl	8013538 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801343e:	2100      	movs	r1, #0
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f000 fe17 	bl	8014074 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013446:	f000 f885 	bl	8013554 <xTaskResumeAll>
 801344a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d107      	bne.n	8013462 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8013452:	4b07      	ldr	r3, [pc, #28]	; (8013470 <vTaskDelay+0x68>)
 8013454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013458:	601a      	str	r2, [r3, #0]
 801345a:	f3bf 8f4f 	dsb	sy
 801345e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013462:	bf00      	nop
 8013464:	3710      	adds	r7, #16
 8013466:	46bd      	mov	sp, r7
 8013468:	bd80      	pop	{r7, pc}
 801346a:	bf00      	nop
 801346c:	20000474 	.word	0x20000474
 8013470:	e000ed04 	.word	0xe000ed04

08013474 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b08a      	sub	sp, #40	; 0x28
 8013478:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801347a:	2300      	movs	r3, #0
 801347c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801347e:	2300      	movs	r3, #0
 8013480:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013482:	463a      	mov	r2, r7
 8013484:	1d39      	adds	r1, r7, #4
 8013486:	f107 0308 	add.w	r3, r7, #8
 801348a:	4618      	mov	r0, r3
 801348c:	f7f6 fb36 	bl	8009afc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013490:	6839      	ldr	r1, [r7, #0]
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	68ba      	ldr	r2, [r7, #8]
 8013496:	9202      	str	r2, [sp, #8]
 8013498:	9301      	str	r3, [sp, #4]
 801349a:	2300      	movs	r3, #0
 801349c:	9300      	str	r3, [sp, #0]
 801349e:	2300      	movs	r3, #0
 80134a0:	460a      	mov	r2, r1
 80134a2:	491f      	ldr	r1, [pc, #124]	; (8013520 <vTaskStartScheduler+0xac>)
 80134a4:	481f      	ldr	r0, [pc, #124]	; (8013524 <vTaskStartScheduler+0xb0>)
 80134a6:	f7ff fe18 	bl	80130da <xTaskCreateStatic>
 80134aa:	4602      	mov	r2, r0
 80134ac:	4b1e      	ldr	r3, [pc, #120]	; (8013528 <vTaskStartScheduler+0xb4>)
 80134ae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80134b0:	4b1d      	ldr	r3, [pc, #116]	; (8013528 <vTaskStartScheduler+0xb4>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d002      	beq.n	80134be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80134b8:	2301      	movs	r3, #1
 80134ba:	617b      	str	r3, [r7, #20]
 80134bc:	e001      	b.n	80134c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80134be:	2300      	movs	r3, #0
 80134c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80134c2:	697b      	ldr	r3, [r7, #20]
 80134c4:	2b01      	cmp	r3, #1
 80134c6:	d117      	bne.n	80134f8 <vTaskStartScheduler+0x84>
 80134c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134cc:	b672      	cpsid	i
 80134ce:	f383 8811 	msr	BASEPRI, r3
 80134d2:	f3bf 8f6f 	isb	sy
 80134d6:	f3bf 8f4f 	dsb	sy
 80134da:	b662      	cpsie	i
 80134dc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80134de:	4b13      	ldr	r3, [pc, #76]	; (801352c <vTaskStartScheduler+0xb8>)
 80134e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80134e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80134e6:	4b12      	ldr	r3, [pc, #72]	; (8013530 <vTaskStartScheduler+0xbc>)
 80134e8:	2201      	movs	r2, #1
 80134ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80134ec:	4b11      	ldr	r3, [pc, #68]	; (8013534 <vTaskStartScheduler+0xc0>)
 80134ee:	2200      	movs	r2, #0
 80134f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80134f2:	f000 feb5 	bl	8014260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80134f6:	e00f      	b.n	8013518 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80134f8:	697b      	ldr	r3, [r7, #20]
 80134fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80134fe:	d10b      	bne.n	8013518 <vTaskStartScheduler+0xa4>
 8013500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013504:	b672      	cpsid	i
 8013506:	f383 8811 	msr	BASEPRI, r3
 801350a:	f3bf 8f6f 	isb	sy
 801350e:	f3bf 8f4f 	dsb	sy
 8013512:	b662      	cpsie	i
 8013514:	60fb      	str	r3, [r7, #12]
 8013516:	e7fe      	b.n	8013516 <vTaskStartScheduler+0xa2>
}
 8013518:	bf00      	nop
 801351a:	3718      	adds	r7, #24
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}
 8013520:	08021950 	.word	0x08021950
 8013524:	08013b21 	.word	0x08013b21
 8013528:	20000470 	.word	0x20000470
 801352c:	2000046c 	.word	0x2000046c
 8013530:	20000458 	.word	0x20000458
 8013534:	20000450 	.word	0x20000450

08013538 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013538:	b480      	push	{r7}
 801353a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801353c:	4b04      	ldr	r3, [pc, #16]	; (8013550 <vTaskSuspendAll+0x18>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	3301      	adds	r3, #1
 8013542:	4a03      	ldr	r2, [pc, #12]	; (8013550 <vTaskSuspendAll+0x18>)
 8013544:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013546:	bf00      	nop
 8013548:	46bd      	mov	sp, r7
 801354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354e:	4770      	bx	lr
 8013550:	20000474 	.word	0x20000474

08013554 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b084      	sub	sp, #16
 8013558:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801355a:	2300      	movs	r3, #0
 801355c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801355e:	2300      	movs	r3, #0
 8013560:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013562:	4b42      	ldr	r3, [pc, #264]	; (801366c <xTaskResumeAll+0x118>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d10b      	bne.n	8013582 <xTaskResumeAll+0x2e>
 801356a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801356e:	b672      	cpsid	i
 8013570:	f383 8811 	msr	BASEPRI, r3
 8013574:	f3bf 8f6f 	isb	sy
 8013578:	f3bf 8f4f 	dsb	sy
 801357c:	b662      	cpsie	i
 801357e:	603b      	str	r3, [r7, #0]
 8013580:	e7fe      	b.n	8013580 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013582:	f000 fee9 	bl	8014358 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013586:	4b39      	ldr	r3, [pc, #228]	; (801366c <xTaskResumeAll+0x118>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	3b01      	subs	r3, #1
 801358c:	4a37      	ldr	r2, [pc, #220]	; (801366c <xTaskResumeAll+0x118>)
 801358e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013590:	4b36      	ldr	r3, [pc, #216]	; (801366c <xTaskResumeAll+0x118>)
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d161      	bne.n	801365c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013598:	4b35      	ldr	r3, [pc, #212]	; (8013670 <xTaskResumeAll+0x11c>)
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d05d      	beq.n	801365c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80135a0:	e02e      	b.n	8013600 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80135a2:	4b34      	ldr	r3, [pc, #208]	; (8013674 <xTaskResumeAll+0x120>)
 80135a4:	68db      	ldr	r3, [r3, #12]
 80135a6:	68db      	ldr	r3, [r3, #12]
 80135a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	3318      	adds	r3, #24
 80135ae:	4618      	mov	r0, r3
 80135b0:	f7fe fe08 	bl	80121c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	3304      	adds	r3, #4
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7fe fe03 	bl	80121c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135c2:	2201      	movs	r2, #1
 80135c4:	409a      	lsls	r2, r3
 80135c6:	4b2c      	ldr	r3, [pc, #176]	; (8013678 <xTaskResumeAll+0x124>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	4313      	orrs	r3, r2
 80135cc:	4a2a      	ldr	r2, [pc, #168]	; (8013678 <xTaskResumeAll+0x124>)
 80135ce:	6013      	str	r3, [r2, #0]
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135d4:	4613      	mov	r3, r2
 80135d6:	009b      	lsls	r3, r3, #2
 80135d8:	4413      	add	r3, r2
 80135da:	009b      	lsls	r3, r3, #2
 80135dc:	4a27      	ldr	r2, [pc, #156]	; (801367c <xTaskResumeAll+0x128>)
 80135de:	441a      	add	r2, r3
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	3304      	adds	r3, #4
 80135e4:	4619      	mov	r1, r3
 80135e6:	4610      	mov	r0, r2
 80135e8:	f7fe fd8f 	bl	801210a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135f0:	4b23      	ldr	r3, [pc, #140]	; (8013680 <xTaskResumeAll+0x12c>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d302      	bcc.n	8013600 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80135fa:	4b22      	ldr	r3, [pc, #136]	; (8013684 <xTaskResumeAll+0x130>)
 80135fc:	2201      	movs	r2, #1
 80135fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013600:	4b1c      	ldr	r3, [pc, #112]	; (8013674 <xTaskResumeAll+0x120>)
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d1cc      	bne.n	80135a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d001      	beq.n	8013612 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801360e:	f000 fb3b 	bl	8013c88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013612:	4b1d      	ldr	r3, [pc, #116]	; (8013688 <xTaskResumeAll+0x134>)
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d010      	beq.n	8013640 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801361e:	f000 f859 	bl	80136d4 <xTaskIncrementTick>
 8013622:	4603      	mov	r3, r0
 8013624:	2b00      	cmp	r3, #0
 8013626:	d002      	beq.n	801362e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013628:	4b16      	ldr	r3, [pc, #88]	; (8013684 <xTaskResumeAll+0x130>)
 801362a:	2201      	movs	r2, #1
 801362c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	3b01      	subs	r3, #1
 8013632:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d1f1      	bne.n	801361e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 801363a:	4b13      	ldr	r3, [pc, #76]	; (8013688 <xTaskResumeAll+0x134>)
 801363c:	2200      	movs	r2, #0
 801363e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013640:	4b10      	ldr	r3, [pc, #64]	; (8013684 <xTaskResumeAll+0x130>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d009      	beq.n	801365c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013648:	2301      	movs	r3, #1
 801364a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801364c:	4b0f      	ldr	r3, [pc, #60]	; (801368c <xTaskResumeAll+0x138>)
 801364e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013652:	601a      	str	r2, [r3, #0]
 8013654:	f3bf 8f4f 	dsb	sy
 8013658:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801365c:	f000 feae 	bl	80143bc <vPortExitCritical>

	return xAlreadyYielded;
 8013660:	68bb      	ldr	r3, [r7, #8]
}
 8013662:	4618      	mov	r0, r3
 8013664:	3710      	adds	r7, #16
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}
 801366a:	bf00      	nop
 801366c:	20000474 	.word	0x20000474
 8013670:	2000044c 	.word	0x2000044c
 8013674:	2000040c 	.word	0x2000040c
 8013678:	20000454 	.word	0x20000454
 801367c:	20000350 	.word	0x20000350
 8013680:	2000034c 	.word	0x2000034c
 8013684:	20000460 	.word	0x20000460
 8013688:	2000045c 	.word	0x2000045c
 801368c:	e000ed04 	.word	0xe000ed04

08013690 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013690:	b480      	push	{r7}
 8013692:	b083      	sub	sp, #12
 8013694:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013696:	4b05      	ldr	r3, [pc, #20]	; (80136ac <xTaskGetTickCount+0x1c>)
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801369c:	687b      	ldr	r3, [r7, #4]
}
 801369e:	4618      	mov	r0, r3
 80136a0:	370c      	adds	r7, #12
 80136a2:	46bd      	mov	sp, r7
 80136a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a8:	4770      	bx	lr
 80136aa:	bf00      	nop
 80136ac:	20000450 	.word	0x20000450

080136b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b082      	sub	sp, #8
 80136b4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80136b6:	f000 ff2f 	bl	8014518 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80136ba:	2300      	movs	r3, #0
 80136bc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80136be:	4b04      	ldr	r3, [pc, #16]	; (80136d0 <xTaskGetTickCountFromISR+0x20>)
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80136c4:	683b      	ldr	r3, [r7, #0]
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	3708      	adds	r7, #8
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}
 80136ce:	bf00      	nop
 80136d0:	20000450 	.word	0x20000450

080136d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b086      	sub	sp, #24
 80136d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80136da:	2300      	movs	r3, #0
 80136dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80136de:	4b4f      	ldr	r3, [pc, #316]	; (801381c <xTaskIncrementTick+0x148>)
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	f040 8089 	bne.w	80137fa <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80136e8:	4b4d      	ldr	r3, [pc, #308]	; (8013820 <xTaskIncrementTick+0x14c>)
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	3301      	adds	r3, #1
 80136ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80136f0:	4a4b      	ldr	r2, [pc, #300]	; (8013820 <xTaskIncrementTick+0x14c>)
 80136f2:	693b      	ldr	r3, [r7, #16]
 80136f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80136f6:	693b      	ldr	r3, [r7, #16]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d121      	bne.n	8013740 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80136fc:	4b49      	ldr	r3, [pc, #292]	; (8013824 <xTaskIncrementTick+0x150>)
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d00b      	beq.n	801371e <xTaskIncrementTick+0x4a>
 8013706:	f04f 0350 	mov.w	r3, #80	; 0x50
 801370a:	b672      	cpsid	i
 801370c:	f383 8811 	msr	BASEPRI, r3
 8013710:	f3bf 8f6f 	isb	sy
 8013714:	f3bf 8f4f 	dsb	sy
 8013718:	b662      	cpsie	i
 801371a:	603b      	str	r3, [r7, #0]
 801371c:	e7fe      	b.n	801371c <xTaskIncrementTick+0x48>
 801371e:	4b41      	ldr	r3, [pc, #260]	; (8013824 <xTaskIncrementTick+0x150>)
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	60fb      	str	r3, [r7, #12]
 8013724:	4b40      	ldr	r3, [pc, #256]	; (8013828 <xTaskIncrementTick+0x154>)
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	4a3e      	ldr	r2, [pc, #248]	; (8013824 <xTaskIncrementTick+0x150>)
 801372a:	6013      	str	r3, [r2, #0]
 801372c:	4a3e      	ldr	r2, [pc, #248]	; (8013828 <xTaskIncrementTick+0x154>)
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	6013      	str	r3, [r2, #0]
 8013732:	4b3e      	ldr	r3, [pc, #248]	; (801382c <xTaskIncrementTick+0x158>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	3301      	adds	r3, #1
 8013738:	4a3c      	ldr	r2, [pc, #240]	; (801382c <xTaskIncrementTick+0x158>)
 801373a:	6013      	str	r3, [r2, #0]
 801373c:	f000 faa4 	bl	8013c88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013740:	4b3b      	ldr	r3, [pc, #236]	; (8013830 <xTaskIncrementTick+0x15c>)
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	693a      	ldr	r2, [r7, #16]
 8013746:	429a      	cmp	r2, r3
 8013748:	d348      	bcc.n	80137dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801374a:	4b36      	ldr	r3, [pc, #216]	; (8013824 <xTaskIncrementTick+0x150>)
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d104      	bne.n	801375e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013754:	4b36      	ldr	r3, [pc, #216]	; (8013830 <xTaskIncrementTick+0x15c>)
 8013756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801375a:	601a      	str	r2, [r3, #0]
					break;
 801375c:	e03e      	b.n	80137dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801375e:	4b31      	ldr	r3, [pc, #196]	; (8013824 <xTaskIncrementTick+0x150>)
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	68db      	ldr	r3, [r3, #12]
 8013764:	68db      	ldr	r3, [r3, #12]
 8013766:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013768:	68bb      	ldr	r3, [r7, #8]
 801376a:	685b      	ldr	r3, [r3, #4]
 801376c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801376e:	693a      	ldr	r2, [r7, #16]
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	429a      	cmp	r2, r3
 8013774:	d203      	bcs.n	801377e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013776:	4a2e      	ldr	r2, [pc, #184]	; (8013830 <xTaskIncrementTick+0x15c>)
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801377c:	e02e      	b.n	80137dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	3304      	adds	r3, #4
 8013782:	4618      	mov	r0, r3
 8013784:	f7fe fd1e 	bl	80121c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801378c:	2b00      	cmp	r3, #0
 801378e:	d004      	beq.n	801379a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	3318      	adds	r3, #24
 8013794:	4618      	mov	r0, r3
 8013796:	f7fe fd15 	bl	80121c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801379a:	68bb      	ldr	r3, [r7, #8]
 801379c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801379e:	2201      	movs	r2, #1
 80137a0:	409a      	lsls	r2, r3
 80137a2:	4b24      	ldr	r3, [pc, #144]	; (8013834 <xTaskIncrementTick+0x160>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	4313      	orrs	r3, r2
 80137a8:	4a22      	ldr	r2, [pc, #136]	; (8013834 <xTaskIncrementTick+0x160>)
 80137aa:	6013      	str	r3, [r2, #0]
 80137ac:	68bb      	ldr	r3, [r7, #8]
 80137ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137b0:	4613      	mov	r3, r2
 80137b2:	009b      	lsls	r3, r3, #2
 80137b4:	4413      	add	r3, r2
 80137b6:	009b      	lsls	r3, r3, #2
 80137b8:	4a1f      	ldr	r2, [pc, #124]	; (8013838 <xTaskIncrementTick+0x164>)
 80137ba:	441a      	add	r2, r3
 80137bc:	68bb      	ldr	r3, [r7, #8]
 80137be:	3304      	adds	r3, #4
 80137c0:	4619      	mov	r1, r3
 80137c2:	4610      	mov	r0, r2
 80137c4:	f7fe fca1 	bl	801210a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80137c8:	68bb      	ldr	r3, [r7, #8]
 80137ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137cc:	4b1b      	ldr	r3, [pc, #108]	; (801383c <xTaskIncrementTick+0x168>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d3b9      	bcc.n	801374a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80137d6:	2301      	movs	r3, #1
 80137d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80137da:	e7b6      	b.n	801374a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80137dc:	4b17      	ldr	r3, [pc, #92]	; (801383c <xTaskIncrementTick+0x168>)
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137e2:	4915      	ldr	r1, [pc, #84]	; (8013838 <xTaskIncrementTick+0x164>)
 80137e4:	4613      	mov	r3, r2
 80137e6:	009b      	lsls	r3, r3, #2
 80137e8:	4413      	add	r3, r2
 80137ea:	009b      	lsls	r3, r3, #2
 80137ec:	440b      	add	r3, r1
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	2b01      	cmp	r3, #1
 80137f2:	d907      	bls.n	8013804 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80137f4:	2301      	movs	r3, #1
 80137f6:	617b      	str	r3, [r7, #20]
 80137f8:	e004      	b.n	8013804 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80137fa:	4b11      	ldr	r3, [pc, #68]	; (8013840 <xTaskIncrementTick+0x16c>)
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	3301      	adds	r3, #1
 8013800:	4a0f      	ldr	r2, [pc, #60]	; (8013840 <xTaskIncrementTick+0x16c>)
 8013802:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013804:	4b0f      	ldr	r3, [pc, #60]	; (8013844 <xTaskIncrementTick+0x170>)
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d001      	beq.n	8013810 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 801380c:	2301      	movs	r3, #1
 801380e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013810:	697b      	ldr	r3, [r7, #20]
}
 8013812:	4618      	mov	r0, r3
 8013814:	3718      	adds	r7, #24
 8013816:	46bd      	mov	sp, r7
 8013818:	bd80      	pop	{r7, pc}
 801381a:	bf00      	nop
 801381c:	20000474 	.word	0x20000474
 8013820:	20000450 	.word	0x20000450
 8013824:	20000404 	.word	0x20000404
 8013828:	20000408 	.word	0x20000408
 801382c:	20000464 	.word	0x20000464
 8013830:	2000046c 	.word	0x2000046c
 8013834:	20000454 	.word	0x20000454
 8013838:	20000350 	.word	0x20000350
 801383c:	2000034c 	.word	0x2000034c
 8013840:	2000045c 	.word	0x2000045c
 8013844:	20000460 	.word	0x20000460

08013848 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013848:	b480      	push	{r7}
 801384a:	b087      	sub	sp, #28
 801384c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801384e:	4b27      	ldr	r3, [pc, #156]	; (80138ec <vTaskSwitchContext+0xa4>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d003      	beq.n	801385e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013856:	4b26      	ldr	r3, [pc, #152]	; (80138f0 <vTaskSwitchContext+0xa8>)
 8013858:	2201      	movs	r2, #1
 801385a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801385c:	e040      	b.n	80138e0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801385e:	4b24      	ldr	r3, [pc, #144]	; (80138f0 <vTaskSwitchContext+0xa8>)
 8013860:	2200      	movs	r2, #0
 8013862:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013864:	4b23      	ldr	r3, [pc, #140]	; (80138f4 <vTaskSwitchContext+0xac>)
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	fab3 f383 	clz	r3, r3
 8013870:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013872:	7afb      	ldrb	r3, [r7, #11]
 8013874:	f1c3 031f 	rsb	r3, r3, #31
 8013878:	617b      	str	r3, [r7, #20]
 801387a:	491f      	ldr	r1, [pc, #124]	; (80138f8 <vTaskSwitchContext+0xb0>)
 801387c:	697a      	ldr	r2, [r7, #20]
 801387e:	4613      	mov	r3, r2
 8013880:	009b      	lsls	r3, r3, #2
 8013882:	4413      	add	r3, r2
 8013884:	009b      	lsls	r3, r3, #2
 8013886:	440b      	add	r3, r1
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d10b      	bne.n	80138a6 <vTaskSwitchContext+0x5e>
	__asm volatile
 801388e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013892:	b672      	cpsid	i
 8013894:	f383 8811 	msr	BASEPRI, r3
 8013898:	f3bf 8f6f 	isb	sy
 801389c:	f3bf 8f4f 	dsb	sy
 80138a0:	b662      	cpsie	i
 80138a2:	607b      	str	r3, [r7, #4]
 80138a4:	e7fe      	b.n	80138a4 <vTaskSwitchContext+0x5c>
 80138a6:	697a      	ldr	r2, [r7, #20]
 80138a8:	4613      	mov	r3, r2
 80138aa:	009b      	lsls	r3, r3, #2
 80138ac:	4413      	add	r3, r2
 80138ae:	009b      	lsls	r3, r3, #2
 80138b0:	4a11      	ldr	r2, [pc, #68]	; (80138f8 <vTaskSwitchContext+0xb0>)
 80138b2:	4413      	add	r3, r2
 80138b4:	613b      	str	r3, [r7, #16]
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	685b      	ldr	r3, [r3, #4]
 80138ba:	685a      	ldr	r2, [r3, #4]
 80138bc:	693b      	ldr	r3, [r7, #16]
 80138be:	605a      	str	r2, [r3, #4]
 80138c0:	693b      	ldr	r3, [r7, #16]
 80138c2:	685a      	ldr	r2, [r3, #4]
 80138c4:	693b      	ldr	r3, [r7, #16]
 80138c6:	3308      	adds	r3, #8
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d104      	bne.n	80138d6 <vTaskSwitchContext+0x8e>
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	685b      	ldr	r3, [r3, #4]
 80138d0:	685a      	ldr	r2, [r3, #4]
 80138d2:	693b      	ldr	r3, [r7, #16]
 80138d4:	605a      	str	r2, [r3, #4]
 80138d6:	693b      	ldr	r3, [r7, #16]
 80138d8:	685b      	ldr	r3, [r3, #4]
 80138da:	68db      	ldr	r3, [r3, #12]
 80138dc:	4a07      	ldr	r2, [pc, #28]	; (80138fc <vTaskSwitchContext+0xb4>)
 80138de:	6013      	str	r3, [r2, #0]
}
 80138e0:	bf00      	nop
 80138e2:	371c      	adds	r7, #28
 80138e4:	46bd      	mov	sp, r7
 80138e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ea:	4770      	bx	lr
 80138ec:	20000474 	.word	0x20000474
 80138f0:	20000460 	.word	0x20000460
 80138f4:	20000454 	.word	0x20000454
 80138f8:	20000350 	.word	0x20000350
 80138fc:	2000034c 	.word	0x2000034c

08013900 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b084      	sub	sp, #16
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d10b      	bne.n	8013928 <vTaskPlaceOnEventList+0x28>
 8013910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013914:	b672      	cpsid	i
 8013916:	f383 8811 	msr	BASEPRI, r3
 801391a:	f3bf 8f6f 	isb	sy
 801391e:	f3bf 8f4f 	dsb	sy
 8013922:	b662      	cpsie	i
 8013924:	60fb      	str	r3, [r7, #12]
 8013926:	e7fe      	b.n	8013926 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013928:	4b07      	ldr	r3, [pc, #28]	; (8013948 <vTaskPlaceOnEventList+0x48>)
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	3318      	adds	r3, #24
 801392e:	4619      	mov	r1, r3
 8013930:	6878      	ldr	r0, [r7, #4]
 8013932:	f7fe fc0e 	bl	8012152 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013936:	2101      	movs	r1, #1
 8013938:	6838      	ldr	r0, [r7, #0]
 801393a:	f000 fb9b 	bl	8014074 <prvAddCurrentTaskToDelayedList>
}
 801393e:	bf00      	nop
 8013940:	3710      	adds	r7, #16
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}
 8013946:	bf00      	nop
 8013948:	2000034c 	.word	0x2000034c

0801394c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b086      	sub	sp, #24
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	68db      	ldr	r3, [r3, #12]
 8013958:	68db      	ldr	r3, [r3, #12]
 801395a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801395c:	693b      	ldr	r3, [r7, #16]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d10b      	bne.n	801397a <xTaskRemoveFromEventList+0x2e>
 8013962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013966:	b672      	cpsid	i
 8013968:	f383 8811 	msr	BASEPRI, r3
 801396c:	f3bf 8f6f 	isb	sy
 8013970:	f3bf 8f4f 	dsb	sy
 8013974:	b662      	cpsie	i
 8013976:	60fb      	str	r3, [r7, #12]
 8013978:	e7fe      	b.n	8013978 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	3318      	adds	r3, #24
 801397e:	4618      	mov	r0, r3
 8013980:	f7fe fc20 	bl	80121c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013984:	4b1d      	ldr	r3, [pc, #116]	; (80139fc <xTaskRemoveFromEventList+0xb0>)
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d11c      	bne.n	80139c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801398c:	693b      	ldr	r3, [r7, #16]
 801398e:	3304      	adds	r3, #4
 8013990:	4618      	mov	r0, r3
 8013992:	f7fe fc17 	bl	80121c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013996:	693b      	ldr	r3, [r7, #16]
 8013998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801399a:	2201      	movs	r2, #1
 801399c:	409a      	lsls	r2, r3
 801399e:	4b18      	ldr	r3, [pc, #96]	; (8013a00 <xTaskRemoveFromEventList+0xb4>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	4313      	orrs	r3, r2
 80139a4:	4a16      	ldr	r2, [pc, #88]	; (8013a00 <xTaskRemoveFromEventList+0xb4>)
 80139a6:	6013      	str	r3, [r2, #0]
 80139a8:	693b      	ldr	r3, [r7, #16]
 80139aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139ac:	4613      	mov	r3, r2
 80139ae:	009b      	lsls	r3, r3, #2
 80139b0:	4413      	add	r3, r2
 80139b2:	009b      	lsls	r3, r3, #2
 80139b4:	4a13      	ldr	r2, [pc, #76]	; (8013a04 <xTaskRemoveFromEventList+0xb8>)
 80139b6:	441a      	add	r2, r3
 80139b8:	693b      	ldr	r3, [r7, #16]
 80139ba:	3304      	adds	r3, #4
 80139bc:	4619      	mov	r1, r3
 80139be:	4610      	mov	r0, r2
 80139c0:	f7fe fba3 	bl	801210a <vListInsertEnd>
 80139c4:	e005      	b.n	80139d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80139c6:	693b      	ldr	r3, [r7, #16]
 80139c8:	3318      	adds	r3, #24
 80139ca:	4619      	mov	r1, r3
 80139cc:	480e      	ldr	r0, [pc, #56]	; (8013a08 <xTaskRemoveFromEventList+0xbc>)
 80139ce:	f7fe fb9c 	bl	801210a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80139d2:	693b      	ldr	r3, [r7, #16]
 80139d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139d6:	4b0d      	ldr	r3, [pc, #52]	; (8013a0c <xTaskRemoveFromEventList+0xc0>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139dc:	429a      	cmp	r2, r3
 80139de:	d905      	bls.n	80139ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80139e0:	2301      	movs	r3, #1
 80139e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80139e4:	4b0a      	ldr	r3, [pc, #40]	; (8013a10 <xTaskRemoveFromEventList+0xc4>)
 80139e6:	2201      	movs	r2, #1
 80139e8:	601a      	str	r2, [r3, #0]
 80139ea:	e001      	b.n	80139f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80139ec:	2300      	movs	r3, #0
 80139ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80139f0:	697b      	ldr	r3, [r7, #20]
}
 80139f2:	4618      	mov	r0, r3
 80139f4:	3718      	adds	r7, #24
 80139f6:	46bd      	mov	sp, r7
 80139f8:	bd80      	pop	{r7, pc}
 80139fa:	bf00      	nop
 80139fc:	20000474 	.word	0x20000474
 8013a00:	20000454 	.word	0x20000454
 8013a04:	20000350 	.word	0x20000350
 8013a08:	2000040c 	.word	0x2000040c
 8013a0c:	2000034c 	.word	0x2000034c
 8013a10:	20000460 	.word	0x20000460

08013a14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013a14:	b480      	push	{r7}
 8013a16:	b083      	sub	sp, #12
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013a1c:	4b06      	ldr	r3, [pc, #24]	; (8013a38 <vTaskInternalSetTimeOutState+0x24>)
 8013a1e:	681a      	ldr	r2, [r3, #0]
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013a24:	4b05      	ldr	r3, [pc, #20]	; (8013a3c <vTaskInternalSetTimeOutState+0x28>)
 8013a26:	681a      	ldr	r2, [r3, #0]
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	605a      	str	r2, [r3, #4]
}
 8013a2c:	bf00      	nop
 8013a2e:	370c      	adds	r7, #12
 8013a30:	46bd      	mov	sp, r7
 8013a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a36:	4770      	bx	lr
 8013a38:	20000464 	.word	0x20000464
 8013a3c:	20000450 	.word	0x20000450

08013a40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b088      	sub	sp, #32
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
 8013a48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d10b      	bne.n	8013a68 <xTaskCheckForTimeOut+0x28>
 8013a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a54:	b672      	cpsid	i
 8013a56:	f383 8811 	msr	BASEPRI, r3
 8013a5a:	f3bf 8f6f 	isb	sy
 8013a5e:	f3bf 8f4f 	dsb	sy
 8013a62:	b662      	cpsie	i
 8013a64:	613b      	str	r3, [r7, #16]
 8013a66:	e7fe      	b.n	8013a66 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8013a68:	683b      	ldr	r3, [r7, #0]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d10b      	bne.n	8013a86 <xTaskCheckForTimeOut+0x46>
 8013a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a72:	b672      	cpsid	i
 8013a74:	f383 8811 	msr	BASEPRI, r3
 8013a78:	f3bf 8f6f 	isb	sy
 8013a7c:	f3bf 8f4f 	dsb	sy
 8013a80:	b662      	cpsie	i
 8013a82:	60fb      	str	r3, [r7, #12]
 8013a84:	e7fe      	b.n	8013a84 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8013a86:	f000 fc67 	bl	8014358 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013a8a:	4b1d      	ldr	r3, [pc, #116]	; (8013b00 <xTaskCheckForTimeOut+0xc0>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	685b      	ldr	r3, [r3, #4]
 8013a94:	69ba      	ldr	r2, [r7, #24]
 8013a96:	1ad3      	subs	r3, r2, r3
 8013a98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013a9a:	683b      	ldr	r3, [r7, #0]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013aa2:	d102      	bne.n	8013aaa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	61fb      	str	r3, [r7, #28]
 8013aa8:	e023      	b.n	8013af2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	681a      	ldr	r2, [r3, #0]
 8013aae:	4b15      	ldr	r3, [pc, #84]	; (8013b04 <xTaskCheckForTimeOut+0xc4>)
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	429a      	cmp	r2, r3
 8013ab4:	d007      	beq.n	8013ac6 <xTaskCheckForTimeOut+0x86>
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	685b      	ldr	r3, [r3, #4]
 8013aba:	69ba      	ldr	r2, [r7, #24]
 8013abc:	429a      	cmp	r2, r3
 8013abe:	d302      	bcc.n	8013ac6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013ac0:	2301      	movs	r3, #1
 8013ac2:	61fb      	str	r3, [r7, #28]
 8013ac4:	e015      	b.n	8013af2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	697a      	ldr	r2, [r7, #20]
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d20b      	bcs.n	8013ae8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013ad0:	683b      	ldr	r3, [r7, #0]
 8013ad2:	681a      	ldr	r2, [r3, #0]
 8013ad4:	697b      	ldr	r3, [r7, #20]
 8013ad6:	1ad2      	subs	r2, r2, r3
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013adc:	6878      	ldr	r0, [r7, #4]
 8013ade:	f7ff ff99 	bl	8013a14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	61fb      	str	r3, [r7, #28]
 8013ae6:	e004      	b.n	8013af2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8013ae8:	683b      	ldr	r3, [r7, #0]
 8013aea:	2200      	movs	r2, #0
 8013aec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013aee:	2301      	movs	r3, #1
 8013af0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013af2:	f000 fc63 	bl	80143bc <vPortExitCritical>

	return xReturn;
 8013af6:	69fb      	ldr	r3, [r7, #28]
}
 8013af8:	4618      	mov	r0, r3
 8013afa:	3720      	adds	r7, #32
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}
 8013b00:	20000450 	.word	0x20000450
 8013b04:	20000464 	.word	0x20000464

08013b08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013b08:	b480      	push	{r7}
 8013b0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013b0c:	4b03      	ldr	r3, [pc, #12]	; (8013b1c <vTaskMissedYield+0x14>)
 8013b0e:	2201      	movs	r2, #1
 8013b10:	601a      	str	r2, [r3, #0]
}
 8013b12:	bf00      	nop
 8013b14:	46bd      	mov	sp, r7
 8013b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1a:	4770      	bx	lr
 8013b1c:	20000460 	.word	0x20000460

08013b20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b082      	sub	sp, #8
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013b28:	f000 f852 	bl	8013bd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013b2c:	4b06      	ldr	r3, [pc, #24]	; (8013b48 <prvIdleTask+0x28>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	2b01      	cmp	r3, #1
 8013b32:	d9f9      	bls.n	8013b28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013b34:	4b05      	ldr	r3, [pc, #20]	; (8013b4c <prvIdleTask+0x2c>)
 8013b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b3a:	601a      	str	r2, [r3, #0]
 8013b3c:	f3bf 8f4f 	dsb	sy
 8013b40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013b44:	e7f0      	b.n	8013b28 <prvIdleTask+0x8>
 8013b46:	bf00      	nop
 8013b48:	20000350 	.word	0x20000350
 8013b4c:	e000ed04 	.word	0xe000ed04

08013b50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b082      	sub	sp, #8
 8013b54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013b56:	2300      	movs	r3, #0
 8013b58:	607b      	str	r3, [r7, #4]
 8013b5a:	e00c      	b.n	8013b76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013b5c:	687a      	ldr	r2, [r7, #4]
 8013b5e:	4613      	mov	r3, r2
 8013b60:	009b      	lsls	r3, r3, #2
 8013b62:	4413      	add	r3, r2
 8013b64:	009b      	lsls	r3, r3, #2
 8013b66:	4a12      	ldr	r2, [pc, #72]	; (8013bb0 <prvInitialiseTaskLists+0x60>)
 8013b68:	4413      	add	r3, r2
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f7fe faa0 	bl	80120b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	3301      	adds	r3, #1
 8013b74:	607b      	str	r3, [r7, #4]
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	2b06      	cmp	r3, #6
 8013b7a:	d9ef      	bls.n	8013b5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013b7c:	480d      	ldr	r0, [pc, #52]	; (8013bb4 <prvInitialiseTaskLists+0x64>)
 8013b7e:	f7fe fa97 	bl	80120b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013b82:	480d      	ldr	r0, [pc, #52]	; (8013bb8 <prvInitialiseTaskLists+0x68>)
 8013b84:	f7fe fa94 	bl	80120b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013b88:	480c      	ldr	r0, [pc, #48]	; (8013bbc <prvInitialiseTaskLists+0x6c>)
 8013b8a:	f7fe fa91 	bl	80120b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013b8e:	480c      	ldr	r0, [pc, #48]	; (8013bc0 <prvInitialiseTaskLists+0x70>)
 8013b90:	f7fe fa8e 	bl	80120b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013b94:	480b      	ldr	r0, [pc, #44]	; (8013bc4 <prvInitialiseTaskLists+0x74>)
 8013b96:	f7fe fa8b 	bl	80120b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013b9a:	4b0b      	ldr	r3, [pc, #44]	; (8013bc8 <prvInitialiseTaskLists+0x78>)
 8013b9c:	4a05      	ldr	r2, [pc, #20]	; (8013bb4 <prvInitialiseTaskLists+0x64>)
 8013b9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013ba0:	4b0a      	ldr	r3, [pc, #40]	; (8013bcc <prvInitialiseTaskLists+0x7c>)
 8013ba2:	4a05      	ldr	r2, [pc, #20]	; (8013bb8 <prvInitialiseTaskLists+0x68>)
 8013ba4:	601a      	str	r2, [r3, #0]
}
 8013ba6:	bf00      	nop
 8013ba8:	3708      	adds	r7, #8
 8013baa:	46bd      	mov	sp, r7
 8013bac:	bd80      	pop	{r7, pc}
 8013bae:	bf00      	nop
 8013bb0:	20000350 	.word	0x20000350
 8013bb4:	200003dc 	.word	0x200003dc
 8013bb8:	200003f0 	.word	0x200003f0
 8013bbc:	2000040c 	.word	0x2000040c
 8013bc0:	20000420 	.word	0x20000420
 8013bc4:	20000438 	.word	0x20000438
 8013bc8:	20000404 	.word	0x20000404
 8013bcc:	20000408 	.word	0x20000408

08013bd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b082      	sub	sp, #8
 8013bd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013bd6:	e019      	b.n	8013c0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013bd8:	f000 fbbe 	bl	8014358 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013bdc:	4b0f      	ldr	r3, [pc, #60]	; (8013c1c <prvCheckTasksWaitingTermination+0x4c>)
 8013bde:	68db      	ldr	r3, [r3, #12]
 8013be0:	68db      	ldr	r3, [r3, #12]
 8013be2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	3304      	adds	r3, #4
 8013be8:	4618      	mov	r0, r3
 8013bea:	f7fe faeb 	bl	80121c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013bee:	4b0c      	ldr	r3, [pc, #48]	; (8013c20 <prvCheckTasksWaitingTermination+0x50>)
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	3b01      	subs	r3, #1
 8013bf4:	4a0a      	ldr	r2, [pc, #40]	; (8013c20 <prvCheckTasksWaitingTermination+0x50>)
 8013bf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013bf8:	4b0a      	ldr	r3, [pc, #40]	; (8013c24 <prvCheckTasksWaitingTermination+0x54>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	3b01      	subs	r3, #1
 8013bfe:	4a09      	ldr	r2, [pc, #36]	; (8013c24 <prvCheckTasksWaitingTermination+0x54>)
 8013c00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013c02:	f000 fbdb 	bl	80143bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	f000 f80e 	bl	8013c28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013c0c:	4b05      	ldr	r3, [pc, #20]	; (8013c24 <prvCheckTasksWaitingTermination+0x54>)
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d1e1      	bne.n	8013bd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013c14:	bf00      	nop
 8013c16:	3708      	adds	r7, #8
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}
 8013c1c:	20000420 	.word	0x20000420
 8013c20:	2000044c 	.word	0x2000044c
 8013c24:	20000434 	.word	0x20000434

08013c28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b084      	sub	sp, #16
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d108      	bne.n	8013c4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f000 fd74 	bl	801472c <vPortFree>
				vPortFree( pxTCB );
 8013c44:	6878      	ldr	r0, [r7, #4]
 8013c46:	f000 fd71 	bl	801472c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013c4a:	e019      	b.n	8013c80 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013c52:	2b01      	cmp	r3, #1
 8013c54:	d103      	bne.n	8013c5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f000 fd68 	bl	801472c <vPortFree>
	}
 8013c5c:	e010      	b.n	8013c80 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013c64:	2b02      	cmp	r3, #2
 8013c66:	d00b      	beq.n	8013c80 <prvDeleteTCB+0x58>
 8013c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c6c:	b672      	cpsid	i
 8013c6e:	f383 8811 	msr	BASEPRI, r3
 8013c72:	f3bf 8f6f 	isb	sy
 8013c76:	f3bf 8f4f 	dsb	sy
 8013c7a:	b662      	cpsie	i
 8013c7c:	60fb      	str	r3, [r7, #12]
 8013c7e:	e7fe      	b.n	8013c7e <prvDeleteTCB+0x56>
	}
 8013c80:	bf00      	nop
 8013c82:	3710      	adds	r7, #16
 8013c84:	46bd      	mov	sp, r7
 8013c86:	bd80      	pop	{r7, pc}

08013c88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013c88:	b480      	push	{r7}
 8013c8a:	b083      	sub	sp, #12
 8013c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013c8e:	4b0c      	ldr	r3, [pc, #48]	; (8013cc0 <prvResetNextTaskUnblockTime+0x38>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d104      	bne.n	8013ca2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013c98:	4b0a      	ldr	r3, [pc, #40]	; (8013cc4 <prvResetNextTaskUnblockTime+0x3c>)
 8013c9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013ca0:	e008      	b.n	8013cb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ca2:	4b07      	ldr	r3, [pc, #28]	; (8013cc0 <prvResetNextTaskUnblockTime+0x38>)
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	68db      	ldr	r3, [r3, #12]
 8013ca8:	68db      	ldr	r3, [r3, #12]
 8013caa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	685b      	ldr	r3, [r3, #4]
 8013cb0:	4a04      	ldr	r2, [pc, #16]	; (8013cc4 <prvResetNextTaskUnblockTime+0x3c>)
 8013cb2:	6013      	str	r3, [r2, #0]
}
 8013cb4:	bf00      	nop
 8013cb6:	370c      	adds	r7, #12
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cbe:	4770      	bx	lr
 8013cc0:	20000404 	.word	0x20000404
 8013cc4:	2000046c 	.word	0x2000046c

08013cc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013cc8:	b480      	push	{r7}
 8013cca:	b083      	sub	sp, #12
 8013ccc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013cce:	4b0b      	ldr	r3, [pc, #44]	; (8013cfc <xTaskGetSchedulerState+0x34>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d102      	bne.n	8013cdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013cd6:	2301      	movs	r3, #1
 8013cd8:	607b      	str	r3, [r7, #4]
 8013cda:	e008      	b.n	8013cee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013cdc:	4b08      	ldr	r3, [pc, #32]	; (8013d00 <xTaskGetSchedulerState+0x38>)
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d102      	bne.n	8013cea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013ce4:	2302      	movs	r3, #2
 8013ce6:	607b      	str	r3, [r7, #4]
 8013ce8:	e001      	b.n	8013cee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013cea:	2300      	movs	r3, #0
 8013cec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013cee:	687b      	ldr	r3, [r7, #4]
	}
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	370c      	adds	r7, #12
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfa:	4770      	bx	lr
 8013cfc:	20000458 	.word	0x20000458
 8013d00:	20000474 	.word	0x20000474

08013d04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b084      	sub	sp, #16
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013d10:	2300      	movs	r3, #0
 8013d12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d069      	beq.n	8013dee <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d1e:	4b36      	ldr	r3, [pc, #216]	; (8013df8 <xTaskPriorityInherit+0xf4>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d24:	429a      	cmp	r2, r3
 8013d26:	d259      	bcs.n	8013ddc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013d28:	68bb      	ldr	r3, [r7, #8]
 8013d2a:	699b      	ldr	r3, [r3, #24]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	db06      	blt.n	8013d3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d30:	4b31      	ldr	r3, [pc, #196]	; (8013df8 <xTaskPriorityInherit+0xf4>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d36:	f1c3 0207 	rsb	r2, r3, #7
 8013d3a:	68bb      	ldr	r3, [r7, #8]
 8013d3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013d3e:	68bb      	ldr	r3, [r7, #8]
 8013d40:	6959      	ldr	r1, [r3, #20]
 8013d42:	68bb      	ldr	r3, [r7, #8]
 8013d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d46:	4613      	mov	r3, r2
 8013d48:	009b      	lsls	r3, r3, #2
 8013d4a:	4413      	add	r3, r2
 8013d4c:	009b      	lsls	r3, r3, #2
 8013d4e:	4a2b      	ldr	r2, [pc, #172]	; (8013dfc <xTaskPriorityInherit+0xf8>)
 8013d50:	4413      	add	r3, r2
 8013d52:	4299      	cmp	r1, r3
 8013d54:	d13a      	bne.n	8013dcc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013d56:	68bb      	ldr	r3, [r7, #8]
 8013d58:	3304      	adds	r3, #4
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f7fe fa32 	bl	80121c4 <uxListRemove>
 8013d60:	4603      	mov	r3, r0
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d115      	bne.n	8013d92 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8013d66:	68bb      	ldr	r3, [r7, #8]
 8013d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d6a:	4924      	ldr	r1, [pc, #144]	; (8013dfc <xTaskPriorityInherit+0xf8>)
 8013d6c:	4613      	mov	r3, r2
 8013d6e:	009b      	lsls	r3, r3, #2
 8013d70:	4413      	add	r3, r2
 8013d72:	009b      	lsls	r3, r3, #2
 8013d74:	440b      	add	r3, r1
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d10a      	bne.n	8013d92 <xTaskPriorityInherit+0x8e>
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d80:	2201      	movs	r2, #1
 8013d82:	fa02 f303 	lsl.w	r3, r2, r3
 8013d86:	43da      	mvns	r2, r3
 8013d88:	4b1d      	ldr	r3, [pc, #116]	; (8013e00 <xTaskPriorityInherit+0xfc>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	4013      	ands	r3, r2
 8013d8e:	4a1c      	ldr	r2, [pc, #112]	; (8013e00 <xTaskPriorityInherit+0xfc>)
 8013d90:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013d92:	4b19      	ldr	r3, [pc, #100]	; (8013df8 <xTaskPriorityInherit+0xf4>)
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d98:	68bb      	ldr	r3, [r7, #8]
 8013d9a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013da0:	2201      	movs	r2, #1
 8013da2:	409a      	lsls	r2, r3
 8013da4:	4b16      	ldr	r3, [pc, #88]	; (8013e00 <xTaskPriorityInherit+0xfc>)
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	4313      	orrs	r3, r2
 8013daa:	4a15      	ldr	r2, [pc, #84]	; (8013e00 <xTaskPriorityInherit+0xfc>)
 8013dac:	6013      	str	r3, [r2, #0]
 8013dae:	68bb      	ldr	r3, [r7, #8]
 8013db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013db2:	4613      	mov	r3, r2
 8013db4:	009b      	lsls	r3, r3, #2
 8013db6:	4413      	add	r3, r2
 8013db8:	009b      	lsls	r3, r3, #2
 8013dba:	4a10      	ldr	r2, [pc, #64]	; (8013dfc <xTaskPriorityInherit+0xf8>)
 8013dbc:	441a      	add	r2, r3
 8013dbe:	68bb      	ldr	r3, [r7, #8]
 8013dc0:	3304      	adds	r3, #4
 8013dc2:	4619      	mov	r1, r3
 8013dc4:	4610      	mov	r0, r2
 8013dc6:	f7fe f9a0 	bl	801210a <vListInsertEnd>
 8013dca:	e004      	b.n	8013dd6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013dcc:	4b0a      	ldr	r3, [pc, #40]	; (8013df8 <xTaskPriorityInherit+0xf4>)
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dd2:	68bb      	ldr	r3, [r7, #8]
 8013dd4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013dd6:	2301      	movs	r3, #1
 8013dd8:	60fb      	str	r3, [r7, #12]
 8013dda:	e008      	b.n	8013dee <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013ddc:	68bb      	ldr	r3, [r7, #8]
 8013dde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013de0:	4b05      	ldr	r3, [pc, #20]	; (8013df8 <xTaskPriorityInherit+0xf4>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013de6:	429a      	cmp	r2, r3
 8013de8:	d201      	bcs.n	8013dee <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013dea:	2301      	movs	r3, #1
 8013dec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013dee:	68fb      	ldr	r3, [r7, #12]
	}
 8013df0:	4618      	mov	r0, r3
 8013df2:	3710      	adds	r7, #16
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}
 8013df8:	2000034c 	.word	0x2000034c
 8013dfc:	20000350 	.word	0x20000350
 8013e00:	20000454 	.word	0x20000454

08013e04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b086      	sub	sp, #24
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013e10:	2300      	movs	r3, #0
 8013e12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d070      	beq.n	8013efc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013e1a:	4b3b      	ldr	r3, [pc, #236]	; (8013f08 <xTaskPriorityDisinherit+0x104>)
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	693a      	ldr	r2, [r7, #16]
 8013e20:	429a      	cmp	r2, r3
 8013e22:	d00b      	beq.n	8013e3c <xTaskPriorityDisinherit+0x38>
 8013e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e28:	b672      	cpsid	i
 8013e2a:	f383 8811 	msr	BASEPRI, r3
 8013e2e:	f3bf 8f6f 	isb	sy
 8013e32:	f3bf 8f4f 	dsb	sy
 8013e36:	b662      	cpsie	i
 8013e38:	60fb      	str	r3, [r7, #12]
 8013e3a:	e7fe      	b.n	8013e3a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8013e3c:	693b      	ldr	r3, [r7, #16]
 8013e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d10b      	bne.n	8013e5c <xTaskPriorityDisinherit+0x58>
 8013e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e48:	b672      	cpsid	i
 8013e4a:	f383 8811 	msr	BASEPRI, r3
 8013e4e:	f3bf 8f6f 	isb	sy
 8013e52:	f3bf 8f4f 	dsb	sy
 8013e56:	b662      	cpsie	i
 8013e58:	60bb      	str	r3, [r7, #8]
 8013e5a:	e7fe      	b.n	8013e5a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8013e5c:	693b      	ldr	r3, [r7, #16]
 8013e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e60:	1e5a      	subs	r2, r3, #1
 8013e62:	693b      	ldr	r3, [r7, #16]
 8013e64:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013e66:	693b      	ldr	r3, [r7, #16]
 8013e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e6a:	693b      	ldr	r3, [r7, #16]
 8013e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e6e:	429a      	cmp	r2, r3
 8013e70:	d044      	beq.n	8013efc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013e72:	693b      	ldr	r3, [r7, #16]
 8013e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d140      	bne.n	8013efc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013e7a:	693b      	ldr	r3, [r7, #16]
 8013e7c:	3304      	adds	r3, #4
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f7fe f9a0 	bl	80121c4 <uxListRemove>
 8013e84:	4603      	mov	r3, r0
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d115      	bne.n	8013eb6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e8e:	491f      	ldr	r1, [pc, #124]	; (8013f0c <xTaskPriorityDisinherit+0x108>)
 8013e90:	4613      	mov	r3, r2
 8013e92:	009b      	lsls	r3, r3, #2
 8013e94:	4413      	add	r3, r2
 8013e96:	009b      	lsls	r3, r3, #2
 8013e98:	440b      	add	r3, r1
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d10a      	bne.n	8013eb6 <xTaskPriorityDisinherit+0xb2>
 8013ea0:	693b      	ldr	r3, [r7, #16]
 8013ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ea4:	2201      	movs	r2, #1
 8013ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8013eaa:	43da      	mvns	r2, r3
 8013eac:	4b18      	ldr	r3, [pc, #96]	; (8013f10 <xTaskPriorityDisinherit+0x10c>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	4013      	ands	r3, r2
 8013eb2:	4a17      	ldr	r2, [pc, #92]	; (8013f10 <xTaskPriorityDisinherit+0x10c>)
 8013eb4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013eb6:	693b      	ldr	r3, [r7, #16]
 8013eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013eba:	693b      	ldr	r3, [r7, #16]
 8013ebc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013ebe:	693b      	ldr	r3, [r7, #16]
 8013ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ec2:	f1c3 0207 	rsb	r2, r3, #7
 8013ec6:	693b      	ldr	r3, [r7, #16]
 8013ec8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013eca:	693b      	ldr	r3, [r7, #16]
 8013ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ece:	2201      	movs	r2, #1
 8013ed0:	409a      	lsls	r2, r3
 8013ed2:	4b0f      	ldr	r3, [pc, #60]	; (8013f10 <xTaskPriorityDisinherit+0x10c>)
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	4313      	orrs	r3, r2
 8013ed8:	4a0d      	ldr	r2, [pc, #52]	; (8013f10 <xTaskPriorityDisinherit+0x10c>)
 8013eda:	6013      	str	r3, [r2, #0]
 8013edc:	693b      	ldr	r3, [r7, #16]
 8013ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ee0:	4613      	mov	r3, r2
 8013ee2:	009b      	lsls	r3, r3, #2
 8013ee4:	4413      	add	r3, r2
 8013ee6:	009b      	lsls	r3, r3, #2
 8013ee8:	4a08      	ldr	r2, [pc, #32]	; (8013f0c <xTaskPriorityDisinherit+0x108>)
 8013eea:	441a      	add	r2, r3
 8013eec:	693b      	ldr	r3, [r7, #16]
 8013eee:	3304      	adds	r3, #4
 8013ef0:	4619      	mov	r1, r3
 8013ef2:	4610      	mov	r0, r2
 8013ef4:	f7fe f909 	bl	801210a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013ef8:	2301      	movs	r3, #1
 8013efa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013efc:	697b      	ldr	r3, [r7, #20]
	}
 8013efe:	4618      	mov	r0, r3
 8013f00:	3718      	adds	r7, #24
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd80      	pop	{r7, pc}
 8013f06:	bf00      	nop
 8013f08:	2000034c 	.word	0x2000034c
 8013f0c:	20000350 	.word	0x20000350
 8013f10:	20000454 	.word	0x20000454

08013f14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b088      	sub	sp, #32
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
 8013f1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013f22:	2301      	movs	r3, #1
 8013f24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	f000 8085 	beq.w	8014038 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013f2e:	69bb      	ldr	r3, [r7, #24]
 8013f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d10b      	bne.n	8013f4e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8013f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f3a:	b672      	cpsid	i
 8013f3c:	f383 8811 	msr	BASEPRI, r3
 8013f40:	f3bf 8f6f 	isb	sy
 8013f44:	f3bf 8f4f 	dsb	sy
 8013f48:	b662      	cpsie	i
 8013f4a:	60fb      	str	r3, [r7, #12]
 8013f4c:	e7fe      	b.n	8013f4c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013f4e:	69bb      	ldr	r3, [r7, #24]
 8013f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f52:	683a      	ldr	r2, [r7, #0]
 8013f54:	429a      	cmp	r2, r3
 8013f56:	d902      	bls.n	8013f5e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013f58:	683b      	ldr	r3, [r7, #0]
 8013f5a:	61fb      	str	r3, [r7, #28]
 8013f5c:	e002      	b.n	8013f64 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013f5e:	69bb      	ldr	r3, [r7, #24]
 8013f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f62:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013f64:	69bb      	ldr	r3, [r7, #24]
 8013f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f68:	69fa      	ldr	r2, [r7, #28]
 8013f6a:	429a      	cmp	r2, r3
 8013f6c:	d064      	beq.n	8014038 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013f6e:	69bb      	ldr	r3, [r7, #24]
 8013f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f72:	697a      	ldr	r2, [r7, #20]
 8013f74:	429a      	cmp	r2, r3
 8013f76:	d15f      	bne.n	8014038 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013f78:	4b31      	ldr	r3, [pc, #196]	; (8014040 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	69ba      	ldr	r2, [r7, #24]
 8013f7e:	429a      	cmp	r2, r3
 8013f80:	d10b      	bne.n	8013f9a <vTaskPriorityDisinheritAfterTimeout+0x86>
 8013f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f86:	b672      	cpsid	i
 8013f88:	f383 8811 	msr	BASEPRI, r3
 8013f8c:	f3bf 8f6f 	isb	sy
 8013f90:	f3bf 8f4f 	dsb	sy
 8013f94:	b662      	cpsie	i
 8013f96:	60bb      	str	r3, [r7, #8]
 8013f98:	e7fe      	b.n	8013f98 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013f9a:	69bb      	ldr	r3, [r7, #24]
 8013f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f9e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013fa0:	69bb      	ldr	r3, [r7, #24]
 8013fa2:	69fa      	ldr	r2, [r7, #28]
 8013fa4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013fa6:	69bb      	ldr	r3, [r7, #24]
 8013fa8:	699b      	ldr	r3, [r3, #24]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	db04      	blt.n	8013fb8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013fae:	69fb      	ldr	r3, [r7, #28]
 8013fb0:	f1c3 0207 	rsb	r2, r3, #7
 8013fb4:	69bb      	ldr	r3, [r7, #24]
 8013fb6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013fb8:	69bb      	ldr	r3, [r7, #24]
 8013fba:	6959      	ldr	r1, [r3, #20]
 8013fbc:	693a      	ldr	r2, [r7, #16]
 8013fbe:	4613      	mov	r3, r2
 8013fc0:	009b      	lsls	r3, r3, #2
 8013fc2:	4413      	add	r3, r2
 8013fc4:	009b      	lsls	r3, r3, #2
 8013fc6:	4a1f      	ldr	r2, [pc, #124]	; (8014044 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8013fc8:	4413      	add	r3, r2
 8013fca:	4299      	cmp	r1, r3
 8013fcc:	d134      	bne.n	8014038 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013fce:	69bb      	ldr	r3, [r7, #24]
 8013fd0:	3304      	adds	r3, #4
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f7fe f8f6 	bl	80121c4 <uxListRemove>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d115      	bne.n	801400a <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013fde:	69bb      	ldr	r3, [r7, #24]
 8013fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fe2:	4918      	ldr	r1, [pc, #96]	; (8014044 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8013fe4:	4613      	mov	r3, r2
 8013fe6:	009b      	lsls	r3, r3, #2
 8013fe8:	4413      	add	r3, r2
 8013fea:	009b      	lsls	r3, r3, #2
 8013fec:	440b      	add	r3, r1
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d10a      	bne.n	801400a <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8013ff4:	69bb      	ldr	r3, [r7, #24]
 8013ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ff8:	2201      	movs	r2, #1
 8013ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8013ffe:	43da      	mvns	r2, r3
 8014000:	4b11      	ldr	r3, [pc, #68]	; (8014048 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	4013      	ands	r3, r2
 8014006:	4a10      	ldr	r2, [pc, #64]	; (8014048 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8014008:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801400a:	69bb      	ldr	r3, [r7, #24]
 801400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801400e:	2201      	movs	r2, #1
 8014010:	409a      	lsls	r2, r3
 8014012:	4b0d      	ldr	r3, [pc, #52]	; (8014048 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	4313      	orrs	r3, r2
 8014018:	4a0b      	ldr	r2, [pc, #44]	; (8014048 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801401a:	6013      	str	r3, [r2, #0]
 801401c:	69bb      	ldr	r3, [r7, #24]
 801401e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014020:	4613      	mov	r3, r2
 8014022:	009b      	lsls	r3, r3, #2
 8014024:	4413      	add	r3, r2
 8014026:	009b      	lsls	r3, r3, #2
 8014028:	4a06      	ldr	r2, [pc, #24]	; (8014044 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801402a:	441a      	add	r2, r3
 801402c:	69bb      	ldr	r3, [r7, #24]
 801402e:	3304      	adds	r3, #4
 8014030:	4619      	mov	r1, r3
 8014032:	4610      	mov	r0, r2
 8014034:	f7fe f869 	bl	801210a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014038:	bf00      	nop
 801403a:	3720      	adds	r7, #32
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}
 8014040:	2000034c 	.word	0x2000034c
 8014044:	20000350 	.word	0x20000350
 8014048:	20000454 	.word	0x20000454

0801404c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801404c:	b480      	push	{r7}
 801404e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014050:	4b07      	ldr	r3, [pc, #28]	; (8014070 <pvTaskIncrementMutexHeldCount+0x24>)
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d004      	beq.n	8014062 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014058:	4b05      	ldr	r3, [pc, #20]	; (8014070 <pvTaskIncrementMutexHeldCount+0x24>)
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801405e:	3201      	adds	r2, #1
 8014060:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8014062:	4b03      	ldr	r3, [pc, #12]	; (8014070 <pvTaskIncrementMutexHeldCount+0x24>)
 8014064:	681b      	ldr	r3, [r3, #0]
	}
 8014066:	4618      	mov	r0, r3
 8014068:	46bd      	mov	sp, r7
 801406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406e:	4770      	bx	lr
 8014070:	2000034c 	.word	0x2000034c

08014074 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b084      	sub	sp, #16
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
 801407c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801407e:	4b29      	ldr	r3, [pc, #164]	; (8014124 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014084:	4b28      	ldr	r3, [pc, #160]	; (8014128 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	3304      	adds	r3, #4
 801408a:	4618      	mov	r0, r3
 801408c:	f7fe f89a 	bl	80121c4 <uxListRemove>
 8014090:	4603      	mov	r3, r0
 8014092:	2b00      	cmp	r3, #0
 8014094:	d10b      	bne.n	80140ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014096:	4b24      	ldr	r3, [pc, #144]	; (8014128 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801409c:	2201      	movs	r2, #1
 801409e:	fa02 f303 	lsl.w	r3, r2, r3
 80140a2:	43da      	mvns	r2, r3
 80140a4:	4b21      	ldr	r3, [pc, #132]	; (801412c <prvAddCurrentTaskToDelayedList+0xb8>)
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	4013      	ands	r3, r2
 80140aa:	4a20      	ldr	r2, [pc, #128]	; (801412c <prvAddCurrentTaskToDelayedList+0xb8>)
 80140ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80140b4:	d10a      	bne.n	80140cc <prvAddCurrentTaskToDelayedList+0x58>
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d007      	beq.n	80140cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80140bc:	4b1a      	ldr	r3, [pc, #104]	; (8014128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	3304      	adds	r3, #4
 80140c2:	4619      	mov	r1, r3
 80140c4:	481a      	ldr	r0, [pc, #104]	; (8014130 <prvAddCurrentTaskToDelayedList+0xbc>)
 80140c6:	f7fe f820 	bl	801210a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80140ca:	e026      	b.n	801411a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80140cc:	68fa      	ldr	r2, [r7, #12]
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	4413      	add	r3, r2
 80140d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80140d4:	4b14      	ldr	r3, [pc, #80]	; (8014128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	68ba      	ldr	r2, [r7, #8]
 80140da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80140dc:	68ba      	ldr	r2, [r7, #8]
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	429a      	cmp	r2, r3
 80140e2:	d209      	bcs.n	80140f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80140e4:	4b13      	ldr	r3, [pc, #76]	; (8014134 <prvAddCurrentTaskToDelayedList+0xc0>)
 80140e6:	681a      	ldr	r2, [r3, #0]
 80140e8:	4b0f      	ldr	r3, [pc, #60]	; (8014128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	3304      	adds	r3, #4
 80140ee:	4619      	mov	r1, r3
 80140f0:	4610      	mov	r0, r2
 80140f2:	f7fe f82e 	bl	8012152 <vListInsert>
}
 80140f6:	e010      	b.n	801411a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80140f8:	4b0f      	ldr	r3, [pc, #60]	; (8014138 <prvAddCurrentTaskToDelayedList+0xc4>)
 80140fa:	681a      	ldr	r2, [r3, #0]
 80140fc:	4b0a      	ldr	r3, [pc, #40]	; (8014128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	3304      	adds	r3, #4
 8014102:	4619      	mov	r1, r3
 8014104:	4610      	mov	r0, r2
 8014106:	f7fe f824 	bl	8012152 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801410a:	4b0c      	ldr	r3, [pc, #48]	; (801413c <prvAddCurrentTaskToDelayedList+0xc8>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	68ba      	ldr	r2, [r7, #8]
 8014110:	429a      	cmp	r2, r3
 8014112:	d202      	bcs.n	801411a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014114:	4a09      	ldr	r2, [pc, #36]	; (801413c <prvAddCurrentTaskToDelayedList+0xc8>)
 8014116:	68bb      	ldr	r3, [r7, #8]
 8014118:	6013      	str	r3, [r2, #0]
}
 801411a:	bf00      	nop
 801411c:	3710      	adds	r7, #16
 801411e:	46bd      	mov	sp, r7
 8014120:	bd80      	pop	{r7, pc}
 8014122:	bf00      	nop
 8014124:	20000450 	.word	0x20000450
 8014128:	2000034c 	.word	0x2000034c
 801412c:	20000454 	.word	0x20000454
 8014130:	20000438 	.word	0x20000438
 8014134:	20000408 	.word	0x20000408
 8014138:	20000404 	.word	0x20000404
 801413c:	2000046c 	.word	0x2000046c

08014140 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014140:	b480      	push	{r7}
 8014142:	b085      	sub	sp, #20
 8014144:	af00      	add	r7, sp, #0
 8014146:	60f8      	str	r0, [r7, #12]
 8014148:	60b9      	str	r1, [r7, #8]
 801414a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	3b04      	subs	r3, #4
 8014150:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	3b04      	subs	r3, #4
 801415e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	f023 0201 	bic.w	r2, r3, #1
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	3b04      	subs	r3, #4
 801416e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014170:	4a0c      	ldr	r2, [pc, #48]	; (80141a4 <pxPortInitialiseStack+0x64>)
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	3b14      	subs	r3, #20
 801417a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801417c:	687a      	ldr	r2, [r7, #4]
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	3b04      	subs	r3, #4
 8014186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	f06f 0202 	mvn.w	r2, #2
 801418e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	3b20      	subs	r3, #32
 8014194:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014196:	68fb      	ldr	r3, [r7, #12]
}
 8014198:	4618      	mov	r0, r3
 801419a:	3714      	adds	r7, #20
 801419c:	46bd      	mov	sp, r7
 801419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a2:	4770      	bx	lr
 80141a4:	080141a9 	.word	0x080141a9

080141a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80141a8:	b480      	push	{r7}
 80141aa:	b085      	sub	sp, #20
 80141ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80141ae:	2300      	movs	r3, #0
 80141b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80141b2:	4b13      	ldr	r3, [pc, #76]	; (8014200 <prvTaskExitError+0x58>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80141ba:	d00b      	beq.n	80141d4 <prvTaskExitError+0x2c>
 80141bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c0:	b672      	cpsid	i
 80141c2:	f383 8811 	msr	BASEPRI, r3
 80141c6:	f3bf 8f6f 	isb	sy
 80141ca:	f3bf 8f4f 	dsb	sy
 80141ce:	b662      	cpsie	i
 80141d0:	60fb      	str	r3, [r7, #12]
 80141d2:	e7fe      	b.n	80141d2 <prvTaskExitError+0x2a>
 80141d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141d8:	b672      	cpsid	i
 80141da:	f383 8811 	msr	BASEPRI, r3
 80141de:	f3bf 8f6f 	isb	sy
 80141e2:	f3bf 8f4f 	dsb	sy
 80141e6:	b662      	cpsie	i
 80141e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80141ea:	bf00      	nop
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d0fc      	beq.n	80141ec <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80141f2:	bf00      	nop
 80141f4:	3714      	adds	r7, #20
 80141f6:	46bd      	mov	sp, r7
 80141f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fc:	4770      	bx	lr
 80141fe:	bf00      	nop
 8014200:	2000004c 	.word	0x2000004c
	...

08014210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014210:	4b07      	ldr	r3, [pc, #28]	; (8014230 <pxCurrentTCBConst2>)
 8014212:	6819      	ldr	r1, [r3, #0]
 8014214:	6808      	ldr	r0, [r1, #0]
 8014216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801421a:	f380 8809 	msr	PSP, r0
 801421e:	f3bf 8f6f 	isb	sy
 8014222:	f04f 0000 	mov.w	r0, #0
 8014226:	f380 8811 	msr	BASEPRI, r0
 801422a:	4770      	bx	lr
 801422c:	f3af 8000 	nop.w

08014230 <pxCurrentTCBConst2>:
 8014230:	2000034c 	.word	0x2000034c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014234:	bf00      	nop
 8014236:	bf00      	nop

08014238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014238:	4808      	ldr	r0, [pc, #32]	; (801425c <prvPortStartFirstTask+0x24>)
 801423a:	6800      	ldr	r0, [r0, #0]
 801423c:	6800      	ldr	r0, [r0, #0]
 801423e:	f380 8808 	msr	MSP, r0
 8014242:	f04f 0000 	mov.w	r0, #0
 8014246:	f380 8814 	msr	CONTROL, r0
 801424a:	b662      	cpsie	i
 801424c:	b661      	cpsie	f
 801424e:	f3bf 8f4f 	dsb	sy
 8014252:	f3bf 8f6f 	isb	sy
 8014256:	df00      	svc	0
 8014258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801425a:	bf00      	nop
 801425c:	e000ed08 	.word	0xe000ed08

08014260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b084      	sub	sp, #16
 8014264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014266:	4b36      	ldr	r3, [pc, #216]	; (8014340 <xPortStartScheduler+0xe0>)
 8014268:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	781b      	ldrb	r3, [r3, #0]
 801426e:	b2db      	uxtb	r3, r3
 8014270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	22ff      	movs	r2, #255	; 0xff
 8014276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	781b      	ldrb	r3, [r3, #0]
 801427c:	b2db      	uxtb	r3, r3
 801427e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014280:	78fb      	ldrb	r3, [r7, #3]
 8014282:	b2db      	uxtb	r3, r3
 8014284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014288:	b2da      	uxtb	r2, r3
 801428a:	4b2e      	ldr	r3, [pc, #184]	; (8014344 <xPortStartScheduler+0xe4>)
 801428c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801428e:	4b2e      	ldr	r3, [pc, #184]	; (8014348 <xPortStartScheduler+0xe8>)
 8014290:	2207      	movs	r2, #7
 8014292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014294:	e009      	b.n	80142aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014296:	4b2c      	ldr	r3, [pc, #176]	; (8014348 <xPortStartScheduler+0xe8>)
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	3b01      	subs	r3, #1
 801429c:	4a2a      	ldr	r2, [pc, #168]	; (8014348 <xPortStartScheduler+0xe8>)
 801429e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80142a0:	78fb      	ldrb	r3, [r7, #3]
 80142a2:	b2db      	uxtb	r3, r3
 80142a4:	005b      	lsls	r3, r3, #1
 80142a6:	b2db      	uxtb	r3, r3
 80142a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80142aa:	78fb      	ldrb	r3, [r7, #3]
 80142ac:	b2db      	uxtb	r3, r3
 80142ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80142b2:	2b80      	cmp	r3, #128	; 0x80
 80142b4:	d0ef      	beq.n	8014296 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80142b6:	4b24      	ldr	r3, [pc, #144]	; (8014348 <xPortStartScheduler+0xe8>)
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	f1c3 0307 	rsb	r3, r3, #7
 80142be:	2b04      	cmp	r3, #4
 80142c0:	d00b      	beq.n	80142da <xPortStartScheduler+0x7a>
 80142c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142c6:	b672      	cpsid	i
 80142c8:	f383 8811 	msr	BASEPRI, r3
 80142cc:	f3bf 8f6f 	isb	sy
 80142d0:	f3bf 8f4f 	dsb	sy
 80142d4:	b662      	cpsie	i
 80142d6:	60bb      	str	r3, [r7, #8]
 80142d8:	e7fe      	b.n	80142d8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80142da:	4b1b      	ldr	r3, [pc, #108]	; (8014348 <xPortStartScheduler+0xe8>)
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	021b      	lsls	r3, r3, #8
 80142e0:	4a19      	ldr	r2, [pc, #100]	; (8014348 <xPortStartScheduler+0xe8>)
 80142e2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80142e4:	4b18      	ldr	r3, [pc, #96]	; (8014348 <xPortStartScheduler+0xe8>)
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80142ec:	4a16      	ldr	r2, [pc, #88]	; (8014348 <xPortStartScheduler+0xe8>)
 80142ee:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	b2da      	uxtb	r2, r3
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80142f8:	4b14      	ldr	r3, [pc, #80]	; (801434c <xPortStartScheduler+0xec>)
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	4a13      	ldr	r2, [pc, #76]	; (801434c <xPortStartScheduler+0xec>)
 80142fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014302:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014304:	4b11      	ldr	r3, [pc, #68]	; (801434c <xPortStartScheduler+0xec>)
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	4a10      	ldr	r2, [pc, #64]	; (801434c <xPortStartScheduler+0xec>)
 801430a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801430e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014310:	f000 f8d4 	bl	80144bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014314:	4b0e      	ldr	r3, [pc, #56]	; (8014350 <xPortStartScheduler+0xf0>)
 8014316:	2200      	movs	r2, #0
 8014318:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801431a:	f000 f8f3 	bl	8014504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801431e:	4b0d      	ldr	r3, [pc, #52]	; (8014354 <xPortStartScheduler+0xf4>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	4a0c      	ldr	r2, [pc, #48]	; (8014354 <xPortStartScheduler+0xf4>)
 8014324:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014328:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801432a:	f7ff ff85 	bl	8014238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801432e:	f7ff fa8b 	bl	8013848 <vTaskSwitchContext>
	prvTaskExitError();
 8014332:	f7ff ff39 	bl	80141a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014336:	2300      	movs	r3, #0
}
 8014338:	4618      	mov	r0, r3
 801433a:	3710      	adds	r7, #16
 801433c:	46bd      	mov	sp, r7
 801433e:	bd80      	pop	{r7, pc}
 8014340:	e000e400 	.word	0xe000e400
 8014344:	20000478 	.word	0x20000478
 8014348:	2000047c 	.word	0x2000047c
 801434c:	e000ed20 	.word	0xe000ed20
 8014350:	2000004c 	.word	0x2000004c
 8014354:	e000ef34 	.word	0xe000ef34

08014358 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014358:	b480      	push	{r7}
 801435a:	b083      	sub	sp, #12
 801435c:	af00      	add	r7, sp, #0
 801435e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014362:	b672      	cpsid	i
 8014364:	f383 8811 	msr	BASEPRI, r3
 8014368:	f3bf 8f6f 	isb	sy
 801436c:	f3bf 8f4f 	dsb	sy
 8014370:	b662      	cpsie	i
 8014372:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014374:	4b0f      	ldr	r3, [pc, #60]	; (80143b4 <vPortEnterCritical+0x5c>)
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	3301      	adds	r3, #1
 801437a:	4a0e      	ldr	r2, [pc, #56]	; (80143b4 <vPortEnterCritical+0x5c>)
 801437c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801437e:	4b0d      	ldr	r3, [pc, #52]	; (80143b4 <vPortEnterCritical+0x5c>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	2b01      	cmp	r3, #1
 8014384:	d110      	bne.n	80143a8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014386:	4b0c      	ldr	r3, [pc, #48]	; (80143b8 <vPortEnterCritical+0x60>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	b2db      	uxtb	r3, r3
 801438c:	2b00      	cmp	r3, #0
 801438e:	d00b      	beq.n	80143a8 <vPortEnterCritical+0x50>
 8014390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014394:	b672      	cpsid	i
 8014396:	f383 8811 	msr	BASEPRI, r3
 801439a:	f3bf 8f6f 	isb	sy
 801439e:	f3bf 8f4f 	dsb	sy
 80143a2:	b662      	cpsie	i
 80143a4:	603b      	str	r3, [r7, #0]
 80143a6:	e7fe      	b.n	80143a6 <vPortEnterCritical+0x4e>
	}
}
 80143a8:	bf00      	nop
 80143aa:	370c      	adds	r7, #12
 80143ac:	46bd      	mov	sp, r7
 80143ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b2:	4770      	bx	lr
 80143b4:	2000004c 	.word	0x2000004c
 80143b8:	e000ed04 	.word	0xe000ed04

080143bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80143bc:	b480      	push	{r7}
 80143be:	b083      	sub	sp, #12
 80143c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80143c2:	4b12      	ldr	r3, [pc, #72]	; (801440c <vPortExitCritical+0x50>)
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d10b      	bne.n	80143e2 <vPortExitCritical+0x26>
 80143ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ce:	b672      	cpsid	i
 80143d0:	f383 8811 	msr	BASEPRI, r3
 80143d4:	f3bf 8f6f 	isb	sy
 80143d8:	f3bf 8f4f 	dsb	sy
 80143dc:	b662      	cpsie	i
 80143de:	607b      	str	r3, [r7, #4]
 80143e0:	e7fe      	b.n	80143e0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80143e2:	4b0a      	ldr	r3, [pc, #40]	; (801440c <vPortExitCritical+0x50>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	3b01      	subs	r3, #1
 80143e8:	4a08      	ldr	r2, [pc, #32]	; (801440c <vPortExitCritical+0x50>)
 80143ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80143ec:	4b07      	ldr	r3, [pc, #28]	; (801440c <vPortExitCritical+0x50>)
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d104      	bne.n	80143fe <vPortExitCritical+0x42>
 80143f4:	2300      	movs	r3, #0
 80143f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80143fe:	bf00      	nop
 8014400:	370c      	adds	r7, #12
 8014402:	46bd      	mov	sp, r7
 8014404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014408:	4770      	bx	lr
 801440a:	bf00      	nop
 801440c:	2000004c 	.word	0x2000004c

08014410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014410:	f3ef 8009 	mrs	r0, PSP
 8014414:	f3bf 8f6f 	isb	sy
 8014418:	4b15      	ldr	r3, [pc, #84]	; (8014470 <pxCurrentTCBConst>)
 801441a:	681a      	ldr	r2, [r3, #0]
 801441c:	f01e 0f10 	tst.w	lr, #16
 8014420:	bf08      	it	eq
 8014422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801442a:	6010      	str	r0, [r2, #0]
 801442c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014434:	b672      	cpsid	i
 8014436:	f380 8811 	msr	BASEPRI, r0
 801443a:	f3bf 8f4f 	dsb	sy
 801443e:	f3bf 8f6f 	isb	sy
 8014442:	b662      	cpsie	i
 8014444:	f7ff fa00 	bl	8013848 <vTaskSwitchContext>
 8014448:	f04f 0000 	mov.w	r0, #0
 801444c:	f380 8811 	msr	BASEPRI, r0
 8014450:	bc09      	pop	{r0, r3}
 8014452:	6819      	ldr	r1, [r3, #0]
 8014454:	6808      	ldr	r0, [r1, #0]
 8014456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801445a:	f01e 0f10 	tst.w	lr, #16
 801445e:	bf08      	it	eq
 8014460:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014464:	f380 8809 	msr	PSP, r0
 8014468:	f3bf 8f6f 	isb	sy
 801446c:	4770      	bx	lr
 801446e:	bf00      	nop

08014470 <pxCurrentTCBConst>:
 8014470:	2000034c 	.word	0x2000034c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014474:	bf00      	nop
 8014476:	bf00      	nop

08014478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b082      	sub	sp, #8
 801447c:	af00      	add	r7, sp, #0
	__asm volatile
 801447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014482:	b672      	cpsid	i
 8014484:	f383 8811 	msr	BASEPRI, r3
 8014488:	f3bf 8f6f 	isb	sy
 801448c:	f3bf 8f4f 	dsb	sy
 8014490:	b662      	cpsie	i
 8014492:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014494:	f7ff f91e 	bl	80136d4 <xTaskIncrementTick>
 8014498:	4603      	mov	r3, r0
 801449a:	2b00      	cmp	r3, #0
 801449c:	d003      	beq.n	80144a6 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801449e:	4b06      	ldr	r3, [pc, #24]	; (80144b8 <xPortSysTickHandler+0x40>)
 80144a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144a4:	601a      	str	r2, [r3, #0]
 80144a6:	2300      	movs	r3, #0
 80144a8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80144aa:	683b      	ldr	r3, [r7, #0]
 80144ac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80144b0:	bf00      	nop
 80144b2:	3708      	adds	r7, #8
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}
 80144b8:	e000ed04 	.word	0xe000ed04

080144bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80144bc:	b480      	push	{r7}
 80144be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80144c0:	4b0b      	ldr	r3, [pc, #44]	; (80144f0 <vPortSetupTimerInterrupt+0x34>)
 80144c2:	2200      	movs	r2, #0
 80144c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80144c6:	4b0b      	ldr	r3, [pc, #44]	; (80144f4 <vPortSetupTimerInterrupt+0x38>)
 80144c8:	2200      	movs	r2, #0
 80144ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80144cc:	4b0a      	ldr	r3, [pc, #40]	; (80144f8 <vPortSetupTimerInterrupt+0x3c>)
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	4a0a      	ldr	r2, [pc, #40]	; (80144fc <vPortSetupTimerInterrupt+0x40>)
 80144d2:	fba2 2303 	umull	r2, r3, r2, r3
 80144d6:	099b      	lsrs	r3, r3, #6
 80144d8:	4a09      	ldr	r2, [pc, #36]	; (8014500 <vPortSetupTimerInterrupt+0x44>)
 80144da:	3b01      	subs	r3, #1
 80144dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80144de:	4b04      	ldr	r3, [pc, #16]	; (80144f0 <vPortSetupTimerInterrupt+0x34>)
 80144e0:	2207      	movs	r2, #7
 80144e2:	601a      	str	r2, [r3, #0]
}
 80144e4:	bf00      	nop
 80144e6:	46bd      	mov	sp, r7
 80144e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ec:	4770      	bx	lr
 80144ee:	bf00      	nop
 80144f0:	e000e010 	.word	0xe000e010
 80144f4:	e000e018 	.word	0xe000e018
 80144f8:	20000040 	.word	0x20000040
 80144fc:	10624dd3 	.word	0x10624dd3
 8014500:	e000e014 	.word	0xe000e014

08014504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014514 <vPortEnableVFP+0x10>
 8014508:	6801      	ldr	r1, [r0, #0]
 801450a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801450e:	6001      	str	r1, [r0, #0]
 8014510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014512:	bf00      	nop
 8014514:	e000ed88 	.word	0xe000ed88

08014518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014518:	b480      	push	{r7}
 801451a:	b085      	sub	sp, #20
 801451c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801451e:	f3ef 8305 	mrs	r3, IPSR
 8014522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	2b0f      	cmp	r3, #15
 8014528:	d915      	bls.n	8014556 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801452a:	4a18      	ldr	r2, [pc, #96]	; (801458c <vPortValidateInterruptPriority+0x74>)
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	4413      	add	r3, r2
 8014530:	781b      	ldrb	r3, [r3, #0]
 8014532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014534:	4b16      	ldr	r3, [pc, #88]	; (8014590 <vPortValidateInterruptPriority+0x78>)
 8014536:	781b      	ldrb	r3, [r3, #0]
 8014538:	7afa      	ldrb	r2, [r7, #11]
 801453a:	429a      	cmp	r2, r3
 801453c:	d20b      	bcs.n	8014556 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014542:	b672      	cpsid	i
 8014544:	f383 8811 	msr	BASEPRI, r3
 8014548:	f3bf 8f6f 	isb	sy
 801454c:	f3bf 8f4f 	dsb	sy
 8014550:	b662      	cpsie	i
 8014552:	607b      	str	r3, [r7, #4]
 8014554:	e7fe      	b.n	8014554 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014556:	4b0f      	ldr	r3, [pc, #60]	; (8014594 <vPortValidateInterruptPriority+0x7c>)
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801455e:	4b0e      	ldr	r3, [pc, #56]	; (8014598 <vPortValidateInterruptPriority+0x80>)
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	429a      	cmp	r2, r3
 8014564:	d90b      	bls.n	801457e <vPortValidateInterruptPriority+0x66>
 8014566:	f04f 0350 	mov.w	r3, #80	; 0x50
 801456a:	b672      	cpsid	i
 801456c:	f383 8811 	msr	BASEPRI, r3
 8014570:	f3bf 8f6f 	isb	sy
 8014574:	f3bf 8f4f 	dsb	sy
 8014578:	b662      	cpsie	i
 801457a:	603b      	str	r3, [r7, #0]
 801457c:	e7fe      	b.n	801457c <vPortValidateInterruptPriority+0x64>
	}
 801457e:	bf00      	nop
 8014580:	3714      	adds	r7, #20
 8014582:	46bd      	mov	sp, r7
 8014584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014588:	4770      	bx	lr
 801458a:	bf00      	nop
 801458c:	e000e3f0 	.word	0xe000e3f0
 8014590:	20000478 	.word	0x20000478
 8014594:	e000ed0c 	.word	0xe000ed0c
 8014598:	2000047c 	.word	0x2000047c

0801459c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b08a      	sub	sp, #40	; 0x28
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80145a4:	2300      	movs	r3, #0
 80145a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80145a8:	f7fe ffc6 	bl	8013538 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80145ac:	4b5a      	ldr	r3, [pc, #360]	; (8014718 <pvPortMalloc+0x17c>)
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d101      	bne.n	80145b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80145b4:	f000 f916 	bl	80147e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80145b8:	4b58      	ldr	r3, [pc, #352]	; (801471c <pvPortMalloc+0x180>)
 80145ba:	681a      	ldr	r2, [r3, #0]
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	4013      	ands	r3, r2
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	f040 8090 	bne.w	80146e6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d01e      	beq.n	801460a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80145cc:	2208      	movs	r2, #8
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	4413      	add	r3, r2
 80145d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	f003 0307 	and.w	r3, r3, #7
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d015      	beq.n	801460a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	f023 0307 	bic.w	r3, r3, #7
 80145e4:	3308      	adds	r3, #8
 80145e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	f003 0307 	and.w	r3, r3, #7
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d00b      	beq.n	801460a <pvPortMalloc+0x6e>
 80145f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145f6:	b672      	cpsid	i
 80145f8:	f383 8811 	msr	BASEPRI, r3
 80145fc:	f3bf 8f6f 	isb	sy
 8014600:	f3bf 8f4f 	dsb	sy
 8014604:	b662      	cpsie	i
 8014606:	617b      	str	r3, [r7, #20]
 8014608:	e7fe      	b.n	8014608 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d06a      	beq.n	80146e6 <pvPortMalloc+0x14a>
 8014610:	4b43      	ldr	r3, [pc, #268]	; (8014720 <pvPortMalloc+0x184>)
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	687a      	ldr	r2, [r7, #4]
 8014616:	429a      	cmp	r2, r3
 8014618:	d865      	bhi.n	80146e6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801461a:	4b42      	ldr	r3, [pc, #264]	; (8014724 <pvPortMalloc+0x188>)
 801461c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801461e:	4b41      	ldr	r3, [pc, #260]	; (8014724 <pvPortMalloc+0x188>)
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014624:	e004      	b.n	8014630 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8014626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014628:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014632:	685b      	ldr	r3, [r3, #4]
 8014634:	687a      	ldr	r2, [r7, #4]
 8014636:	429a      	cmp	r2, r3
 8014638:	d903      	bls.n	8014642 <pvPortMalloc+0xa6>
 801463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d1f1      	bne.n	8014626 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014642:	4b35      	ldr	r3, [pc, #212]	; (8014718 <pvPortMalloc+0x17c>)
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014648:	429a      	cmp	r2, r3
 801464a:	d04c      	beq.n	80146e6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801464c:	6a3b      	ldr	r3, [r7, #32]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	2208      	movs	r2, #8
 8014652:	4413      	add	r3, r2
 8014654:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014658:	681a      	ldr	r2, [r3, #0]
 801465a:	6a3b      	ldr	r3, [r7, #32]
 801465c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014660:	685a      	ldr	r2, [r3, #4]
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	1ad2      	subs	r2, r2, r3
 8014666:	2308      	movs	r3, #8
 8014668:	005b      	lsls	r3, r3, #1
 801466a:	429a      	cmp	r2, r3
 801466c:	d920      	bls.n	80146b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801466e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	4413      	add	r3, r2
 8014674:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014676:	69bb      	ldr	r3, [r7, #24]
 8014678:	f003 0307 	and.w	r3, r3, #7
 801467c:	2b00      	cmp	r3, #0
 801467e:	d00b      	beq.n	8014698 <pvPortMalloc+0xfc>
 8014680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014684:	b672      	cpsid	i
 8014686:	f383 8811 	msr	BASEPRI, r3
 801468a:	f3bf 8f6f 	isb	sy
 801468e:	f3bf 8f4f 	dsb	sy
 8014692:	b662      	cpsie	i
 8014694:	613b      	str	r3, [r7, #16]
 8014696:	e7fe      	b.n	8014696 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801469a:	685a      	ldr	r2, [r3, #4]
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	1ad2      	subs	r2, r2, r3
 80146a0:	69bb      	ldr	r3, [r7, #24]
 80146a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80146a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146a6:	687a      	ldr	r2, [r7, #4]
 80146a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80146aa:	69b8      	ldr	r0, [r7, #24]
 80146ac:	f000 f8fc 	bl	80148a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80146b0:	4b1b      	ldr	r3, [pc, #108]	; (8014720 <pvPortMalloc+0x184>)
 80146b2:	681a      	ldr	r2, [r3, #0]
 80146b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b6:	685b      	ldr	r3, [r3, #4]
 80146b8:	1ad3      	subs	r3, r2, r3
 80146ba:	4a19      	ldr	r2, [pc, #100]	; (8014720 <pvPortMalloc+0x184>)
 80146bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80146be:	4b18      	ldr	r3, [pc, #96]	; (8014720 <pvPortMalloc+0x184>)
 80146c0:	681a      	ldr	r2, [r3, #0]
 80146c2:	4b19      	ldr	r3, [pc, #100]	; (8014728 <pvPortMalloc+0x18c>)
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	429a      	cmp	r2, r3
 80146c8:	d203      	bcs.n	80146d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80146ca:	4b15      	ldr	r3, [pc, #84]	; (8014720 <pvPortMalloc+0x184>)
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	4a16      	ldr	r2, [pc, #88]	; (8014728 <pvPortMalloc+0x18c>)
 80146d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80146d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d4:	685a      	ldr	r2, [r3, #4]
 80146d6:	4b11      	ldr	r3, [pc, #68]	; (801471c <pvPortMalloc+0x180>)
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	431a      	orrs	r2, r3
 80146dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80146e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e2:	2200      	movs	r2, #0
 80146e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80146e6:	f7fe ff35 	bl	8013554 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80146ea:	69fb      	ldr	r3, [r7, #28]
 80146ec:	f003 0307 	and.w	r3, r3, #7
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d00b      	beq.n	801470c <pvPortMalloc+0x170>
 80146f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146f8:	b672      	cpsid	i
 80146fa:	f383 8811 	msr	BASEPRI, r3
 80146fe:	f3bf 8f6f 	isb	sy
 8014702:	f3bf 8f4f 	dsb	sy
 8014706:	b662      	cpsie	i
 8014708:	60fb      	str	r3, [r7, #12]
 801470a:	e7fe      	b.n	801470a <pvPortMalloc+0x16e>
	return pvReturn;
 801470c:	69fb      	ldr	r3, [r7, #28]
}
 801470e:	4618      	mov	r0, r3
 8014710:	3728      	adds	r7, #40	; 0x28
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
 8014716:	bf00      	nop
 8014718:	20008ea8 	.word	0x20008ea8
 801471c:	20008eb4 	.word	0x20008eb4
 8014720:	20008eac 	.word	0x20008eac
 8014724:	20008ea0 	.word	0x20008ea0
 8014728:	20008eb0 	.word	0x20008eb0

0801472c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b086      	sub	sp, #24
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d04a      	beq.n	80147d4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801473e:	2308      	movs	r3, #8
 8014740:	425b      	negs	r3, r3
 8014742:	697a      	ldr	r2, [r7, #20]
 8014744:	4413      	add	r3, r2
 8014746:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014748:	697b      	ldr	r3, [r7, #20]
 801474a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801474c:	693b      	ldr	r3, [r7, #16]
 801474e:	685a      	ldr	r2, [r3, #4]
 8014750:	4b22      	ldr	r3, [pc, #136]	; (80147dc <vPortFree+0xb0>)
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	4013      	ands	r3, r2
 8014756:	2b00      	cmp	r3, #0
 8014758:	d10b      	bne.n	8014772 <vPortFree+0x46>
 801475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801475e:	b672      	cpsid	i
 8014760:	f383 8811 	msr	BASEPRI, r3
 8014764:	f3bf 8f6f 	isb	sy
 8014768:	f3bf 8f4f 	dsb	sy
 801476c:	b662      	cpsie	i
 801476e:	60fb      	str	r3, [r7, #12]
 8014770:	e7fe      	b.n	8014770 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014772:	693b      	ldr	r3, [r7, #16]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d00b      	beq.n	8014792 <vPortFree+0x66>
 801477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801477e:	b672      	cpsid	i
 8014780:	f383 8811 	msr	BASEPRI, r3
 8014784:	f3bf 8f6f 	isb	sy
 8014788:	f3bf 8f4f 	dsb	sy
 801478c:	b662      	cpsie	i
 801478e:	60bb      	str	r3, [r7, #8]
 8014790:	e7fe      	b.n	8014790 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014792:	693b      	ldr	r3, [r7, #16]
 8014794:	685a      	ldr	r2, [r3, #4]
 8014796:	4b11      	ldr	r3, [pc, #68]	; (80147dc <vPortFree+0xb0>)
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	4013      	ands	r3, r2
 801479c:	2b00      	cmp	r3, #0
 801479e:	d019      	beq.n	80147d4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80147a0:	693b      	ldr	r3, [r7, #16]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d115      	bne.n	80147d4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80147a8:	693b      	ldr	r3, [r7, #16]
 80147aa:	685a      	ldr	r2, [r3, #4]
 80147ac:	4b0b      	ldr	r3, [pc, #44]	; (80147dc <vPortFree+0xb0>)
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	43db      	mvns	r3, r3
 80147b2:	401a      	ands	r2, r3
 80147b4:	693b      	ldr	r3, [r7, #16]
 80147b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80147b8:	f7fe febe 	bl	8013538 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80147bc:	693b      	ldr	r3, [r7, #16]
 80147be:	685a      	ldr	r2, [r3, #4]
 80147c0:	4b07      	ldr	r3, [pc, #28]	; (80147e0 <vPortFree+0xb4>)
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	4413      	add	r3, r2
 80147c6:	4a06      	ldr	r2, [pc, #24]	; (80147e0 <vPortFree+0xb4>)
 80147c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80147ca:	6938      	ldr	r0, [r7, #16]
 80147cc:	f000 f86c 	bl	80148a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80147d0:	f7fe fec0 	bl	8013554 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80147d4:	bf00      	nop
 80147d6:	3718      	adds	r7, #24
 80147d8:	46bd      	mov	sp, r7
 80147da:	bd80      	pop	{r7, pc}
 80147dc:	20008eb4 	.word	0x20008eb4
 80147e0:	20008eac 	.word	0x20008eac

080147e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80147e4:	b480      	push	{r7}
 80147e6:	b085      	sub	sp, #20
 80147e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80147ea:	f648 2320 	movw	r3, #35360	; 0x8a20
 80147ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80147f0:	4b27      	ldr	r3, [pc, #156]	; (8014890 <prvHeapInit+0xac>)
 80147f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	f003 0307 	and.w	r3, r3, #7
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d00c      	beq.n	8014818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	3307      	adds	r3, #7
 8014802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	f023 0307 	bic.w	r3, r3, #7
 801480a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801480c:	68ba      	ldr	r2, [r7, #8]
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	1ad3      	subs	r3, r2, r3
 8014812:	4a1f      	ldr	r2, [pc, #124]	; (8014890 <prvHeapInit+0xac>)
 8014814:	4413      	add	r3, r2
 8014816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801481c:	4a1d      	ldr	r2, [pc, #116]	; (8014894 <prvHeapInit+0xb0>)
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014822:	4b1c      	ldr	r3, [pc, #112]	; (8014894 <prvHeapInit+0xb0>)
 8014824:	2200      	movs	r2, #0
 8014826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	68ba      	ldr	r2, [r7, #8]
 801482c:	4413      	add	r3, r2
 801482e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014830:	2208      	movs	r2, #8
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	1a9b      	subs	r3, r3, r2
 8014836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	f023 0307 	bic.w	r3, r3, #7
 801483e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	4a15      	ldr	r2, [pc, #84]	; (8014898 <prvHeapInit+0xb4>)
 8014844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014846:	4b14      	ldr	r3, [pc, #80]	; (8014898 <prvHeapInit+0xb4>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	2200      	movs	r2, #0
 801484c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801484e:	4b12      	ldr	r3, [pc, #72]	; (8014898 <prvHeapInit+0xb4>)
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	2200      	movs	r2, #0
 8014854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801485a:	683b      	ldr	r3, [r7, #0]
 801485c:	68fa      	ldr	r2, [r7, #12]
 801485e:	1ad2      	subs	r2, r2, r3
 8014860:	683b      	ldr	r3, [r7, #0]
 8014862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014864:	4b0c      	ldr	r3, [pc, #48]	; (8014898 <prvHeapInit+0xb4>)
 8014866:	681a      	ldr	r2, [r3, #0]
 8014868:	683b      	ldr	r3, [r7, #0]
 801486a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801486c:	683b      	ldr	r3, [r7, #0]
 801486e:	685b      	ldr	r3, [r3, #4]
 8014870:	4a0a      	ldr	r2, [pc, #40]	; (801489c <prvHeapInit+0xb8>)
 8014872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014874:	683b      	ldr	r3, [r7, #0]
 8014876:	685b      	ldr	r3, [r3, #4]
 8014878:	4a09      	ldr	r2, [pc, #36]	; (80148a0 <prvHeapInit+0xbc>)
 801487a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801487c:	4b09      	ldr	r3, [pc, #36]	; (80148a4 <prvHeapInit+0xc0>)
 801487e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014882:	601a      	str	r2, [r3, #0]
}
 8014884:	bf00      	nop
 8014886:	3714      	adds	r7, #20
 8014888:	46bd      	mov	sp, r7
 801488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488e:	4770      	bx	lr
 8014890:	20000480 	.word	0x20000480
 8014894:	20008ea0 	.word	0x20008ea0
 8014898:	20008ea8 	.word	0x20008ea8
 801489c:	20008eb0 	.word	0x20008eb0
 80148a0:	20008eac 	.word	0x20008eac
 80148a4:	20008eb4 	.word	0x20008eb4

080148a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80148a8:	b480      	push	{r7}
 80148aa:	b085      	sub	sp, #20
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80148b0:	4b28      	ldr	r3, [pc, #160]	; (8014954 <prvInsertBlockIntoFreeList+0xac>)
 80148b2:	60fb      	str	r3, [r7, #12]
 80148b4:	e002      	b.n	80148bc <prvInsertBlockIntoFreeList+0x14>
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	60fb      	str	r3, [r7, #12]
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	687a      	ldr	r2, [r7, #4]
 80148c2:	429a      	cmp	r2, r3
 80148c4:	d8f7      	bhi.n	80148b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	685b      	ldr	r3, [r3, #4]
 80148ce:	68ba      	ldr	r2, [r7, #8]
 80148d0:	4413      	add	r3, r2
 80148d2:	687a      	ldr	r2, [r7, #4]
 80148d4:	429a      	cmp	r2, r3
 80148d6:	d108      	bne.n	80148ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	685a      	ldr	r2, [r3, #4]
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	685b      	ldr	r3, [r3, #4]
 80148e0:	441a      	add	r2, r3
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	685b      	ldr	r3, [r3, #4]
 80148f2:	68ba      	ldr	r2, [r7, #8]
 80148f4:	441a      	add	r2, r3
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	429a      	cmp	r2, r3
 80148fc:	d118      	bne.n	8014930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	681a      	ldr	r2, [r3, #0]
 8014902:	4b15      	ldr	r3, [pc, #84]	; (8014958 <prvInsertBlockIntoFreeList+0xb0>)
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	429a      	cmp	r2, r3
 8014908:	d00d      	beq.n	8014926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	685a      	ldr	r2, [r3, #4]
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	685b      	ldr	r3, [r3, #4]
 8014914:	441a      	add	r2, r3
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	681a      	ldr	r2, [r3, #0]
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	601a      	str	r2, [r3, #0]
 8014924:	e008      	b.n	8014938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014926:	4b0c      	ldr	r3, [pc, #48]	; (8014958 <prvInsertBlockIntoFreeList+0xb0>)
 8014928:	681a      	ldr	r2, [r3, #0]
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	601a      	str	r2, [r3, #0]
 801492e:	e003      	b.n	8014938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	681a      	ldr	r2, [r3, #0]
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014938:	68fa      	ldr	r2, [r7, #12]
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	429a      	cmp	r2, r3
 801493e:	d002      	beq.n	8014946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	687a      	ldr	r2, [r7, #4]
 8014944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014946:	bf00      	nop
 8014948:	3714      	adds	r7, #20
 801494a:	46bd      	mov	sp, r7
 801494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014950:	4770      	bx	lr
 8014952:	bf00      	nop
 8014954:	20008ea0 	.word	0x20008ea0
 8014958:	20008ea8 	.word	0x20008ea8

0801495c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b084      	sub	sp, #16
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
 8014964:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8014966:	f008 ffcd 	bl	801d904 <sys_timeouts_sleeptime>
 801496a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014972:	d10b      	bne.n	801498c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8014974:	4813      	ldr	r0, [pc, #76]	; (80149c4 <tcpip_timeouts_mbox_fetch+0x68>)
 8014976:	f00b fd36 	bl	80203e6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801497a:	2200      	movs	r2, #0
 801497c:	6839      	ldr	r1, [r7, #0]
 801497e:	6878      	ldr	r0, [r7, #4]
 8014980:	f00b fca8 	bl	80202d4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8014984:	480f      	ldr	r0, [pc, #60]	; (80149c4 <tcpip_timeouts_mbox_fetch+0x68>)
 8014986:	f00b fd1f 	bl	80203c8 <sys_mutex_lock>
    return;
 801498a:	e018      	b.n	80149be <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d102      	bne.n	8014998 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8014992:	f008 ff7d 	bl	801d890 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8014996:	e7e6      	b.n	8014966 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8014998:	480a      	ldr	r0, [pc, #40]	; (80149c4 <tcpip_timeouts_mbox_fetch+0x68>)
 801499a:	f00b fd24 	bl	80203e6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801499e:	68fa      	ldr	r2, [r7, #12]
 80149a0:	6839      	ldr	r1, [r7, #0]
 80149a2:	6878      	ldr	r0, [r7, #4]
 80149a4:	f00b fc96 	bl	80202d4 <sys_arch_mbox_fetch>
 80149a8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80149aa:	4806      	ldr	r0, [pc, #24]	; (80149c4 <tcpip_timeouts_mbox_fetch+0x68>)
 80149ac:	f00b fd0c 	bl	80203c8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80149b0:	68bb      	ldr	r3, [r7, #8]
 80149b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80149b6:	d102      	bne.n	80149be <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80149b8:	f008 ff6a 	bl	801d890 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80149bc:	e7d3      	b.n	8014966 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80149be:	3710      	adds	r7, #16
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}
 80149c4:	2001c7d8 	.word	0x2001c7d8

080149c8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b084      	sub	sp, #16
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80149d0:	4810      	ldr	r0, [pc, #64]	; (8014a14 <tcpip_thread+0x4c>)
 80149d2:	f00b fcf9 	bl	80203c8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80149d6:	4b10      	ldr	r3, [pc, #64]	; (8014a18 <tcpip_thread+0x50>)
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d005      	beq.n	80149ea <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80149de:	4b0e      	ldr	r3, [pc, #56]	; (8014a18 <tcpip_thread+0x50>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	4a0e      	ldr	r2, [pc, #56]	; (8014a1c <tcpip_thread+0x54>)
 80149e4:	6812      	ldr	r2, [r2, #0]
 80149e6:	4610      	mov	r0, r2
 80149e8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80149ea:	f107 030c 	add.w	r3, r7, #12
 80149ee:	4619      	mov	r1, r3
 80149f0:	480b      	ldr	r0, [pc, #44]	; (8014a20 <tcpip_thread+0x58>)
 80149f2:	f7ff ffb3 	bl	801495c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d106      	bne.n	8014a0a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80149fc:	4b09      	ldr	r3, [pc, #36]	; (8014a24 <tcpip_thread+0x5c>)
 80149fe:	2291      	movs	r2, #145	; 0x91
 8014a00:	4909      	ldr	r1, [pc, #36]	; (8014a28 <tcpip_thread+0x60>)
 8014a02:	480a      	ldr	r0, [pc, #40]	; (8014a2c <tcpip_thread+0x64>)
 8014a04:	f00b fd86 	bl	8020514 <iprintf>
      continue;
 8014a08:	e003      	b.n	8014a12 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f000 f80f 	bl	8014a30 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8014a12:	e7ea      	b.n	80149ea <tcpip_thread+0x22>
 8014a14:	2001c7d8 	.word	0x2001c7d8
 8014a18:	20008eb8 	.word	0x20008eb8
 8014a1c:	20008ebc 	.word	0x20008ebc
 8014a20:	20008ec0 	.word	0x20008ec0
 8014a24:	08021958 	.word	0x08021958
 8014a28:	08021988 	.word	0x08021988
 8014a2c:	080219a8 	.word	0x080219a8

08014a30 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b082      	sub	sp, #8
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	781b      	ldrb	r3, [r3, #0]
 8014a3c:	2b01      	cmp	r3, #1
 8014a3e:	d018      	beq.n	8014a72 <tcpip_thread_handle_msg+0x42>
 8014a40:	2b02      	cmp	r3, #2
 8014a42:	d021      	beq.n	8014a88 <tcpip_thread_handle_msg+0x58>
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d126      	bne.n	8014a96 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	68db      	ldr	r3, [r3, #12]
 8014a4c:	687a      	ldr	r2, [r7, #4]
 8014a4e:	6850      	ldr	r0, [r2, #4]
 8014a50:	687a      	ldr	r2, [r7, #4]
 8014a52:	6892      	ldr	r2, [r2, #8]
 8014a54:	4611      	mov	r1, r2
 8014a56:	4798      	blx	r3
 8014a58:	4603      	mov	r3, r0
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d004      	beq.n	8014a68 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	685b      	ldr	r3, [r3, #4]
 8014a62:	4618      	mov	r0, r3
 8014a64:	f002 fb10 	bl	8017088 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8014a68:	6879      	ldr	r1, [r7, #4]
 8014a6a:	2009      	movs	r0, #9
 8014a6c:	f001 fc6c 	bl	8016348 <memp_free>
      break;
 8014a70:	e018      	b.n	8014aa4 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	685b      	ldr	r3, [r3, #4]
 8014a76:	687a      	ldr	r2, [r7, #4]
 8014a78:	6892      	ldr	r2, [r2, #8]
 8014a7a:	4610      	mov	r0, r2
 8014a7c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8014a7e:	6879      	ldr	r1, [r7, #4]
 8014a80:	2008      	movs	r0, #8
 8014a82:	f001 fc61 	bl	8016348 <memp_free>
      break;
 8014a86:	e00d      	b.n	8014aa4 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	685b      	ldr	r3, [r3, #4]
 8014a8c:	687a      	ldr	r2, [r7, #4]
 8014a8e:	6892      	ldr	r2, [r2, #8]
 8014a90:	4610      	mov	r0, r2
 8014a92:	4798      	blx	r3
      break;
 8014a94:	e006      	b.n	8014aa4 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8014a96:	4b05      	ldr	r3, [pc, #20]	; (8014aac <tcpip_thread_handle_msg+0x7c>)
 8014a98:	22cf      	movs	r2, #207	; 0xcf
 8014a9a:	4905      	ldr	r1, [pc, #20]	; (8014ab0 <tcpip_thread_handle_msg+0x80>)
 8014a9c:	4805      	ldr	r0, [pc, #20]	; (8014ab4 <tcpip_thread_handle_msg+0x84>)
 8014a9e:	f00b fd39 	bl	8020514 <iprintf>
      break;
 8014aa2:	bf00      	nop
  }
}
 8014aa4:	bf00      	nop
 8014aa6:	3708      	adds	r7, #8
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	bd80      	pop	{r7, pc}
 8014aac:	08021958 	.word	0x08021958
 8014ab0:	08021988 	.word	0x08021988
 8014ab4:	080219a8 	.word	0x080219a8

08014ab8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b086      	sub	sp, #24
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	60f8      	str	r0, [r7, #12]
 8014ac0:	60b9      	str	r1, [r7, #8]
 8014ac2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8014ac4:	481a      	ldr	r0, [pc, #104]	; (8014b30 <tcpip_inpkt+0x78>)
 8014ac6:	f00b fc44 	bl	8020352 <sys_mbox_valid>
 8014aca:	4603      	mov	r3, r0
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d105      	bne.n	8014adc <tcpip_inpkt+0x24>
 8014ad0:	4b18      	ldr	r3, [pc, #96]	; (8014b34 <tcpip_inpkt+0x7c>)
 8014ad2:	22fc      	movs	r2, #252	; 0xfc
 8014ad4:	4918      	ldr	r1, [pc, #96]	; (8014b38 <tcpip_inpkt+0x80>)
 8014ad6:	4819      	ldr	r0, [pc, #100]	; (8014b3c <tcpip_inpkt+0x84>)
 8014ad8:	f00b fd1c 	bl	8020514 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8014adc:	2009      	movs	r0, #9
 8014ade:	f001 fbe1 	bl	80162a4 <memp_malloc>
 8014ae2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d102      	bne.n	8014af0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8014aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014aee:	e01a      	b.n	8014b26 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8014af0:	697b      	ldr	r3, [r7, #20]
 8014af2:	2200      	movs	r2, #0
 8014af4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8014af6:	697b      	ldr	r3, [r7, #20]
 8014af8:	68fa      	ldr	r2, [r7, #12]
 8014afa:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8014afc:	697b      	ldr	r3, [r7, #20]
 8014afe:	68ba      	ldr	r2, [r7, #8]
 8014b00:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8014b02:	697b      	ldr	r3, [r7, #20]
 8014b04:	687a      	ldr	r2, [r7, #4]
 8014b06:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8014b08:	6979      	ldr	r1, [r7, #20]
 8014b0a:	4809      	ldr	r0, [pc, #36]	; (8014b30 <tcpip_inpkt+0x78>)
 8014b0c:	f00b fbc8 	bl	80202a0 <sys_mbox_trypost>
 8014b10:	4603      	mov	r3, r0
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d006      	beq.n	8014b24 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8014b16:	6979      	ldr	r1, [r7, #20]
 8014b18:	2009      	movs	r0, #9
 8014b1a:	f001 fc15 	bl	8016348 <memp_free>
    return ERR_MEM;
 8014b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b22:	e000      	b.n	8014b26 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8014b24:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8014b26:	4618      	mov	r0, r3
 8014b28:	3718      	adds	r7, #24
 8014b2a:	46bd      	mov	sp, r7
 8014b2c:	bd80      	pop	{r7, pc}
 8014b2e:	bf00      	nop
 8014b30:	20008ec0 	.word	0x20008ec0
 8014b34:	08021958 	.word	0x08021958
 8014b38:	080219d0 	.word	0x080219d0
 8014b3c:	080219a8 	.word	0x080219a8

08014b40 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b082      	sub	sp, #8
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
 8014b48:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8014b4a:	683b      	ldr	r3, [r7, #0]
 8014b4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014b50:	f003 0318 	and.w	r3, r3, #24
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d006      	beq.n	8014b66 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8014b58:	4a08      	ldr	r2, [pc, #32]	; (8014b7c <tcpip_input+0x3c>)
 8014b5a:	6839      	ldr	r1, [r7, #0]
 8014b5c:	6878      	ldr	r0, [r7, #4]
 8014b5e:	f7ff ffab 	bl	8014ab8 <tcpip_inpkt>
 8014b62:	4603      	mov	r3, r0
 8014b64:	e005      	b.n	8014b72 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8014b66:	4a06      	ldr	r2, [pc, #24]	; (8014b80 <tcpip_input+0x40>)
 8014b68:	6839      	ldr	r1, [r7, #0]
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f7ff ffa4 	bl	8014ab8 <tcpip_inpkt>
 8014b70:	4603      	mov	r3, r0
}
 8014b72:	4618      	mov	r0, r3
 8014b74:	3708      	adds	r7, #8
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}
 8014b7a:	bf00      	nop
 8014b7c:	080200b1 	.word	0x080200b1
 8014b80:	0801efd1 	.word	0x0801efd1

08014b84 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b084      	sub	sp, #16
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
 8014b8c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8014b8e:	4819      	ldr	r0, [pc, #100]	; (8014bf4 <tcpip_try_callback+0x70>)
 8014b90:	f00b fbdf 	bl	8020352 <sys_mbox_valid>
 8014b94:	4603      	mov	r3, r0
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d106      	bne.n	8014ba8 <tcpip_try_callback+0x24>
 8014b9a:	4b17      	ldr	r3, [pc, #92]	; (8014bf8 <tcpip_try_callback+0x74>)
 8014b9c:	f240 125d 	movw	r2, #349	; 0x15d
 8014ba0:	4916      	ldr	r1, [pc, #88]	; (8014bfc <tcpip_try_callback+0x78>)
 8014ba2:	4817      	ldr	r0, [pc, #92]	; (8014c00 <tcpip_try_callback+0x7c>)
 8014ba4:	f00b fcb6 	bl	8020514 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8014ba8:	2008      	movs	r0, #8
 8014baa:	f001 fb7b 	bl	80162a4 <memp_malloc>
 8014bae:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d102      	bne.n	8014bbc <tcpip_try_callback+0x38>
    return ERR_MEM;
 8014bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014bba:	e017      	b.n	8014bec <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	2201      	movs	r2, #1
 8014bc0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	687a      	ldr	r2, [r7, #4]
 8014bc6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	683a      	ldr	r2, [r7, #0]
 8014bcc:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8014bce:	68f9      	ldr	r1, [r7, #12]
 8014bd0:	4808      	ldr	r0, [pc, #32]	; (8014bf4 <tcpip_try_callback+0x70>)
 8014bd2:	f00b fb65 	bl	80202a0 <sys_mbox_trypost>
 8014bd6:	4603      	mov	r3, r0
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d006      	beq.n	8014bea <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8014bdc:	68f9      	ldr	r1, [r7, #12]
 8014bde:	2008      	movs	r0, #8
 8014be0:	f001 fbb2 	bl	8016348 <memp_free>
    return ERR_MEM;
 8014be4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014be8:	e000      	b.n	8014bec <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8014bea:	2300      	movs	r3, #0
}
 8014bec:	4618      	mov	r0, r3
 8014bee:	3710      	adds	r7, #16
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	bd80      	pop	{r7, pc}
 8014bf4:	20008ec0 	.word	0x20008ec0
 8014bf8:	08021958 	.word	0x08021958
 8014bfc:	080219d0 	.word	0x080219d0
 8014c00:	080219a8 	.word	0x080219a8

08014c04 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b084      	sub	sp, #16
 8014c08:	af02      	add	r7, sp, #8
 8014c0a:	6078      	str	r0, [r7, #4]
 8014c0c:	6039      	str	r1, [r7, #0]
  lwip_init();
 8014c0e:	f000 fec1 	bl	8015994 <lwip_init>

  tcpip_init_done = initfunc;
 8014c12:	4a17      	ldr	r2, [pc, #92]	; (8014c70 <tcpip_init+0x6c>)
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8014c18:	4a16      	ldr	r2, [pc, #88]	; (8014c74 <tcpip_init+0x70>)
 8014c1a:	683b      	ldr	r3, [r7, #0]
 8014c1c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8014c1e:	2106      	movs	r1, #6
 8014c20:	4815      	ldr	r0, [pc, #84]	; (8014c78 <tcpip_init+0x74>)
 8014c22:	f00b fb1b 	bl	802025c <sys_mbox_new>
 8014c26:	4603      	mov	r3, r0
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d006      	beq.n	8014c3a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8014c2c:	4b13      	ldr	r3, [pc, #76]	; (8014c7c <tcpip_init+0x78>)
 8014c2e:	f240 2261 	movw	r2, #609	; 0x261
 8014c32:	4913      	ldr	r1, [pc, #76]	; (8014c80 <tcpip_init+0x7c>)
 8014c34:	4813      	ldr	r0, [pc, #76]	; (8014c84 <tcpip_init+0x80>)
 8014c36:	f00b fc6d 	bl	8020514 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8014c3a:	4813      	ldr	r0, [pc, #76]	; (8014c88 <tcpip_init+0x84>)
 8014c3c:	f00b fba8 	bl	8020390 <sys_mutex_new>
 8014c40:	4603      	mov	r3, r0
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d006      	beq.n	8014c54 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8014c46:	4b0d      	ldr	r3, [pc, #52]	; (8014c7c <tcpip_init+0x78>)
 8014c48:	f240 2265 	movw	r2, #613	; 0x265
 8014c4c:	490f      	ldr	r1, [pc, #60]	; (8014c8c <tcpip_init+0x88>)
 8014c4e:	480d      	ldr	r0, [pc, #52]	; (8014c84 <tcpip_init+0x80>)
 8014c50:	f00b fc60 	bl	8020514 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8014c54:	2300      	movs	r3, #0
 8014c56:	9300      	str	r3, [sp, #0]
 8014c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	490c      	ldr	r1, [pc, #48]	; (8014c90 <tcpip_init+0x8c>)
 8014c60:	480c      	ldr	r0, [pc, #48]	; (8014c94 <tcpip_init+0x90>)
 8014c62:	f00b fbcd 	bl	8020400 <sys_thread_new>
}
 8014c66:	bf00      	nop
 8014c68:	3708      	adds	r7, #8
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	bd80      	pop	{r7, pc}
 8014c6e:	bf00      	nop
 8014c70:	20008eb8 	.word	0x20008eb8
 8014c74:	20008ebc 	.word	0x20008ebc
 8014c78:	20008ec0 	.word	0x20008ec0
 8014c7c:	08021958 	.word	0x08021958
 8014c80:	080219e0 	.word	0x080219e0
 8014c84:	080219a8 	.word	0x080219a8
 8014c88:	2001c7d8 	.word	0x2001c7d8
 8014c8c:	08021a04 	.word	0x08021a04
 8014c90:	080149c9 	.word	0x080149c9
 8014c94:	08021a28 	.word	0x08021a28

08014c98 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b084      	sub	sp, #16
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
 8014ca0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d002      	beq.n	8014cae <fs_open+0x16>
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d102      	bne.n	8014cb4 <fs_open+0x1c>
    return ERR_ARG;
 8014cae:	f06f 030f 	mvn.w	r3, #15
 8014cb2:	e028      	b.n	8014d06 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8014cb4:	4b16      	ldr	r3, [pc, #88]	; (8014d10 <fs_open+0x78>)
 8014cb6:	60fb      	str	r3, [r7, #12]
 8014cb8:	e020      	b.n	8014cfc <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	685b      	ldr	r3, [r3, #4]
 8014cbe:	4619      	mov	r1, r3
 8014cc0:	6838      	ldr	r0, [r7, #0]
 8014cc2:	f7f3 fabd 	bl	8008240 <strcmp>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d114      	bne.n	8014cf6 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	689a      	ldr	r2, [r3, #8]
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	68da      	ldr	r2, [r3, #12]
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	68da      	ldr	r2, [r3, #12]
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	7c1a      	ldrb	r2, [r3, #16]
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	e007      	b.n	8014d06 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	60fb      	str	r3, [r7, #12]
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d1db      	bne.n	8014cba <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8014d02:	f06f 0305 	mvn.w	r3, #5
}
 8014d06:	4618      	mov	r0, r3
 8014d08:	3710      	adds	r7, #16
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	bd80      	pop	{r7, pc}
 8014d0e:	bf00      	nop
 8014d10:	08035124 	.word	0x08035124

08014d14 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8014d14:	b480      	push	{r7}
 8014d16:	b083      	sub	sp, #12
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8014d1c:	bf00      	nop
 8014d1e:	370c      	adds	r7, #12
 8014d20:	46bd      	mov	sp, r7
 8014d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d26:	4770      	bx	lr

08014d28 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8014d28:	b480      	push	{r7}
 8014d2a:	b083      	sub	sp, #12
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	685a      	ldr	r2, [r3, #4]
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	689b      	ldr	r3, [r3, #8]
 8014d38:	1ad3      	subs	r3, r2, r3
}
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	370c      	adds	r7, #12
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d44:	4770      	bx	lr

08014d46 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8014d46:	b580      	push	{r7, lr}
 8014d48:	b082      	sub	sp, #8
 8014d4a:	af00      	add	r7, sp, #0
 8014d4c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8014d4e:	222c      	movs	r2, #44	; 0x2c
 8014d50:	2100      	movs	r1, #0
 8014d52:	6878      	ldr	r0, [r7, #4]
 8014d54:	f00b fbd6 	bl	8020504 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8014d58:	bf00      	nop
 8014d5a:	3708      	adds	r7, #8
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd80      	pop	{r7, pc}

08014d60 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b082      	sub	sp, #8
 8014d64:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8014d66:	202c      	movs	r0, #44	; 0x2c
 8014d68:	f001 f91a 	bl	8015fa0 <mem_malloc>
 8014d6c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d002      	beq.n	8014d7a <http_state_alloc+0x1a>
    http_state_init(ret);
 8014d74:	6878      	ldr	r0, [r7, #4]
 8014d76:	f7ff ffe6 	bl	8014d46 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8014d7a:	687b      	ldr	r3, [r7, #4]
}
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	3708      	adds	r7, #8
 8014d80:	46bd      	mov	sp, r7
 8014d82:	bd80      	pop	{r7, pc}

08014d84 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b082      	sub	sp, #8
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	695b      	ldr	r3, [r3, #20]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d007      	beq.n	8014da4 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	695b      	ldr	r3, [r3, #20]
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f7ff ffbb 	bl	8014d14 <fs_close>
    hs->handle = NULL;
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	2200      	movs	r2, #0
 8014da2:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	6a1b      	ldr	r3, [r3, #32]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d007      	beq.n	8014dbc <http_state_eof+0x38>
    pbuf_free(hs->req);
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	6a1b      	ldr	r3, [r3, #32]
 8014db0:	4618      	mov	r0, r3
 8014db2:	f002 f969 	bl	8017088 <pbuf_free>
    hs->req = NULL;
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	2200      	movs	r2, #0
 8014dba:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8014dbc:	bf00      	nop
 8014dbe:	3708      	adds	r7, #8
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	bd80      	pop	{r7, pc}

08014dc4 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8014dc4:	b580      	push	{r7, lr}
 8014dc6:	b082      	sub	sp, #8
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d005      	beq.n	8014dde <http_state_free+0x1a>
    http_state_eof(hs);
 8014dd2:	6878      	ldr	r0, [r7, #4]
 8014dd4:	f7ff ffd6 	bl	8014d84 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8014dd8:	6878      	ldr	r0, [r7, #4]
 8014dda:	f000 ff47 	bl	8015c6c <mem_free>
  }
}
 8014dde:	bf00      	nop
 8014de0:	3708      	adds	r7, #8
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd80      	pop	{r7, pc}
	...

08014de8 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b086      	sub	sp, #24
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	60f8      	str	r0, [r7, #12]
 8014df0:	60b9      	str	r1, [r7, #8]
 8014df2:	607a      	str	r2, [r7, #4]
 8014df4:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d106      	bne.n	8014e0a <http_write+0x22>
 8014dfc:	4b2c      	ldr	r3, [pc, #176]	; (8014eb0 <http_write+0xc8>)
 8014dfe:	f240 2219 	movw	r2, #537	; 0x219
 8014e02:	492c      	ldr	r1, [pc, #176]	; (8014eb4 <http_write+0xcc>)
 8014e04:	482c      	ldr	r0, [pc, #176]	; (8014eb8 <http_write+0xd0>)
 8014e06:	f00b fb85 	bl	8020514 <iprintf>
  len = *length;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	881b      	ldrh	r3, [r3, #0]
 8014e0e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8014e10:	8afb      	ldrh	r3, [r7, #22]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d101      	bne.n	8014e1a <http_write+0x32>
    return ERR_OK;
 8014e16:	2300      	movs	r3, #0
 8014e18:	e045      	b.n	8014ea6 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014e20:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8014e22:	8aba      	ldrh	r2, [r7, #20]
 8014e24:	8afb      	ldrh	r3, [r7, #22]
 8014e26:	429a      	cmp	r2, r3
 8014e28:	d201      	bcs.n	8014e2e <http_write+0x46>
    len = max_len;
 8014e2a:	8abb      	ldrh	r3, [r7, #20]
 8014e2c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e32:	005b      	lsls	r3, r3, #1
 8014e34:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8014e36:	8afa      	ldrh	r2, [r7, #22]
 8014e38:	8abb      	ldrh	r3, [r7, #20]
 8014e3a:	429a      	cmp	r2, r3
 8014e3c:	d901      	bls.n	8014e42 <http_write+0x5a>
    len = max_len;
 8014e3e:	8abb      	ldrh	r3, [r7, #20]
 8014e40:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8014e42:	78fb      	ldrb	r3, [r7, #3]
 8014e44:	8afa      	ldrh	r2, [r7, #22]
 8014e46:	68b9      	ldr	r1, [r7, #8]
 8014e48:	68f8      	ldr	r0, [r7, #12]
 8014e4a:	f006 fea7 	bl	801bb9c <tcp_write>
 8014e4e:	4603      	mov	r3, r0
 8014e50:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8014e52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014e5a:	d10f      	bne.n	8014e7c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d004      	beq.n	8014e70 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8014e6c:	2b08      	cmp	r3, #8
 8014e6e:	d902      	bls.n	8014e76 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8014e70:	2301      	movs	r3, #1
 8014e72:	82fb      	strh	r3, [r7, #22]
 8014e74:	e002      	b.n	8014e7c <http_write+0x94>
      } else {
        len /= 2;
 8014e76:	8afb      	ldrh	r3, [r7, #22]
 8014e78:	085b      	lsrs	r3, r3, #1
 8014e7a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8014e7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014e84:	d102      	bne.n	8014e8c <http_write+0xa4>
 8014e86:	8afb      	ldrh	r3, [r7, #22]
 8014e88:	2b01      	cmp	r3, #1
 8014e8a:	d8da      	bhi.n	8014e42 <http_write+0x5a>

  if (err == ERR_OK) {
 8014e8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d103      	bne.n	8014e9c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	8afa      	ldrh	r2, [r7, #22]
 8014e98:	801a      	strh	r2, [r3, #0]
 8014e9a:	e002      	b.n	8014ea2 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8014ea2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	3718      	adds	r7, #24
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bd80      	pop	{r7, pc}
 8014eae:	bf00      	nop
 8014eb0:	08021a78 	.word	0x08021a78
 8014eb4:	08021ab0 	.word	0x08021ab0
 8014eb8:	08021ac0 	.word	0x08021ac0

08014ebc <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b086      	sub	sp, #24
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	60f8      	str	r0, [r7, #12]
 8014ec4:	60b9      	str	r1, [r7, #8]
 8014ec6:	4613      	mov	r3, r2
 8014ec8:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8014eca:	2100      	movs	r1, #0
 8014ecc:	68f8      	ldr	r0, [r7, #12]
 8014ece:	f003 ff29 	bl	8018d24 <tcp_arg>
  altcp_recv(pcb, NULL);
 8014ed2:	2100      	movs	r1, #0
 8014ed4:	68f8      	ldr	r0, [r7, #12]
 8014ed6:	f003 ff37 	bl	8018d48 <tcp_recv>
  altcp_err(pcb, NULL);
 8014eda:	2100      	movs	r1, #0
 8014edc:	68f8      	ldr	r0, [r7, #12]
 8014ede:	f003 ff77 	bl	8018dd0 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	2100      	movs	r1, #0
 8014ee6:	68f8      	ldr	r0, [r7, #12]
 8014ee8:	f003 ffac 	bl	8018e44 <tcp_poll>
  altcp_sent(pcb, NULL);
 8014eec:	2100      	movs	r1, #0
 8014eee:	68f8      	ldr	r0, [r7, #12]
 8014ef0:	f003 ff4c 	bl	8018d8c <tcp_sent>
  if (hs != NULL) {
 8014ef4:	68bb      	ldr	r3, [r7, #8]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d002      	beq.n	8014f00 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8014efa:	68b8      	ldr	r0, [r7, #8]
 8014efc:	f7ff ff62 	bl	8014dc4 <http_state_free>
  }

  if (abort_conn) {
 8014f00:	79fb      	ldrb	r3, [r7, #7]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d004      	beq.n	8014f10 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8014f06:	68f8      	ldr	r0, [r7, #12]
 8014f08:	f002 fe4a 	bl	8017ba0 <tcp_abort>
    return ERR_OK;
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	e00f      	b.n	8014f30 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8014f10:	68f8      	ldr	r0, [r7, #12]
 8014f12:	f002 fd5b 	bl	80179cc <tcp_close>
 8014f16:	4603      	mov	r3, r0
 8014f18:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8014f1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d004      	beq.n	8014f2c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8014f22:	2204      	movs	r2, #4
 8014f24:	4904      	ldr	r1, [pc, #16]	; (8014f38 <http_close_or_abort_conn+0x7c>)
 8014f26:	68f8      	ldr	r0, [r7, #12]
 8014f28:	f003 ff8c 	bl	8018e44 <tcp_poll>
  }
  return err;
 8014f2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014f30:	4618      	mov	r0, r3
 8014f32:	3718      	adds	r7, #24
 8014f34:	46bd      	mov	sp, r7
 8014f36:	bd80      	pop	{r7, pc}
 8014f38:	080155ff 	.word	0x080155ff

08014f3c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b082      	sub	sp, #8
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8014f46:	2200      	movs	r2, #0
 8014f48:	6839      	ldr	r1, [r7, #0]
 8014f4a:	6878      	ldr	r0, [r7, #4]
 8014f4c:	f7ff ffb6 	bl	8014ebc <http_close_or_abort_conn>
 8014f50:	4603      	mov	r3, r0
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	3708      	adds	r7, #8
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bd80      	pop	{r7, pc}

08014f5a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8014f5a:	b580      	push	{r7, lr}
 8014f5c:	b082      	sub	sp, #8
 8014f5e:	af00      	add	r7, sp, #0
 8014f60:	6078      	str	r0, [r7, #4]
 8014f62:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8014f64:	6839      	ldr	r1, [r7, #0]
 8014f66:	6878      	ldr	r0, [r7, #4]
 8014f68:	f7ff ffe8 	bl	8014f3c <http_close_conn>
  }
}
 8014f6c:	bf00      	nop
 8014f6e:	3708      	adds	r7, #8
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}

08014f74 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b084      	sub	sp, #16
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	6078      	str	r0, [r7, #4]
 8014f7c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8014f7e:	683b      	ldr	r3, [r7, #0]
 8014f80:	695b      	ldr	r3, [r3, #20]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d105      	bne.n	8014f92 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8014f86:	6839      	ldr	r1, [r7, #0]
 8014f88:	6878      	ldr	r0, [r7, #4]
 8014f8a:	f7ff ffe6 	bl	8014f5a <http_eof>
    return 0;
 8014f8e:	2300      	movs	r3, #0
 8014f90:	e016      	b.n	8014fc0 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	695b      	ldr	r3, [r3, #20]
 8014f96:	4618      	mov	r0, r3
 8014f98:	f7ff fec6 	bl	8014d28 <fs_bytes_left>
 8014f9c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	dc05      	bgt.n	8014fb0 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8014fa4:	6839      	ldr	r1, [r7, #0]
 8014fa6:	6878      	ldr	r0, [r7, #4]
 8014fa8:	f7ff ffd7 	bl	8014f5a <http_eof>
    return 0;
 8014fac:	2300      	movs	r3, #0
 8014fae:	e007      	b.n	8014fc0 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8014fb0:	4b05      	ldr	r3, [pc, #20]	; (8014fc8 <http_check_eof+0x54>)
 8014fb2:	f240 429d 	movw	r2, #1181	; 0x49d
 8014fb6:	4905      	ldr	r1, [pc, #20]	; (8014fcc <http_check_eof+0x58>)
 8014fb8:	4805      	ldr	r0, [pc, #20]	; (8014fd0 <http_check_eof+0x5c>)
 8014fba:	f00b faab 	bl	8020514 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8014fbe:	2301      	movs	r3, #1
}
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	3710      	adds	r7, #16
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bd80      	pop	{r7, pc}
 8014fc8:	08021a78 	.word	0x08021a78
 8014fcc:	08021ae8 	.word	0x08021ae8
 8014fd0:	08021ac0 	.word	0x08021ac0

08014fd4 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b084      	sub	sp, #16
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
 8014fdc:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8014fde:	2300      	movs	r3, #0
 8014fe0:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fe6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014fea:	4293      	cmp	r3, r2
 8014fec:	d803      	bhi.n	8014ff6 <http_send_data_nonssi+0x22>
 8014fee:	683b      	ldr	r3, [r7, #0]
 8014ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ff2:	b29b      	uxth	r3, r3
 8014ff4:	e001      	b.n	8014ffa <http_send_data_nonssi+0x26>
 8014ff6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ffa:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014ffc:	683b      	ldr	r3, [r7, #0]
 8014ffe:	6999      	ldr	r1, [r3, #24]
 8015000:	f107 020c 	add.w	r2, r7, #12
 8015004:	2300      	movs	r3, #0
 8015006:	6878      	ldr	r0, [r7, #4]
 8015008:	f7ff feee 	bl	8014de8 <http_write>
 801500c:	4603      	mov	r3, r0
 801500e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8015010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d10d      	bne.n	8015034 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8015018:	2301      	movs	r3, #1
 801501a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 801501c:	683b      	ldr	r3, [r7, #0]
 801501e:	699b      	ldr	r3, [r3, #24]
 8015020:	89ba      	ldrh	r2, [r7, #12]
 8015022:	441a      	add	r2, r3
 8015024:	683b      	ldr	r3, [r7, #0]
 8015026:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8015028:	683b      	ldr	r3, [r7, #0]
 801502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801502c:	89ba      	ldrh	r2, [r7, #12]
 801502e:	1a9a      	subs	r2, r3, r2
 8015030:	683b      	ldr	r3, [r7, #0]
 8015032:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8015034:	7bfb      	ldrb	r3, [r7, #15]
}
 8015036:	4618      	mov	r0, r3
 8015038:	3710      	adds	r7, #16
 801503a:	46bd      	mov	sp, r7
 801503c:	bd80      	pop	{r7, pc}

0801503e <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 801503e:	b580      	push	{r7, lr}
 8015040:	b084      	sub	sp, #16
 8015042:	af00      	add	r7, sp, #0
 8015044:	6078      	str	r0, [r7, #4]
 8015046:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8015048:	2300      	movs	r3, #0
 801504a:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 801504c:	683b      	ldr	r3, [r7, #0]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d101      	bne.n	8015056 <http_send+0x18>
    return 0;
 8015052:	2300      	movs	r3, #0
 8015054:	e025      	b.n	80150a2 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8015056:	683b      	ldr	r3, [r7, #0]
 8015058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801505a:	2b00      	cmp	r3, #0
 801505c:	d108      	bne.n	8015070 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 801505e:	6839      	ldr	r1, [r7, #0]
 8015060:	6878      	ldr	r0, [r7, #4]
 8015062:	f7ff ff87 	bl	8014f74 <http_check_eof>
 8015066:	4603      	mov	r3, r0
 8015068:	2b00      	cmp	r3, #0
 801506a:	d101      	bne.n	8015070 <http_send+0x32>
      return 0;
 801506c:	2300      	movs	r3, #0
 801506e:	e018      	b.n	80150a2 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8015070:	6839      	ldr	r1, [r7, #0]
 8015072:	6878      	ldr	r0, [r7, #4]
 8015074:	f7ff ffae 	bl	8014fd4 <http_send_data_nonssi>
 8015078:	4603      	mov	r3, r0
 801507a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 801507c:	683b      	ldr	r3, [r7, #0]
 801507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015080:	2b00      	cmp	r3, #0
 8015082:	d10d      	bne.n	80150a0 <http_send+0x62>
 8015084:	683b      	ldr	r3, [r7, #0]
 8015086:	695b      	ldr	r3, [r3, #20]
 8015088:	4618      	mov	r0, r3
 801508a:	f7ff fe4d 	bl	8014d28 <fs_bytes_left>
 801508e:	4603      	mov	r3, r0
 8015090:	2b00      	cmp	r3, #0
 8015092:	dc05      	bgt.n	80150a0 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8015094:	6839      	ldr	r1, [r7, #0]
 8015096:	6878      	ldr	r0, [r7, #4]
 8015098:	f7ff ff5f 	bl	8014f5a <http_eof>
    return 0;
 801509c:	2300      	movs	r3, #0
 801509e:	e000      	b.n	80150a2 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 80150a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80150a2:	4618      	mov	r0, r3
 80150a4:	3710      	adds	r7, #16
 80150a6:	46bd      	mov	sp, r7
 80150a8:	bd80      	pop	{r7, pc}
	...

080150ac <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b084      	sub	sp, #16
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
 80150b4:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 80150b6:	683b      	ldr	r3, [r7, #0]
 80150b8:	4a1c      	ldr	r2, [pc, #112]	; (801512c <http_get_404_file+0x80>)
 80150ba:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 80150bc:	687a      	ldr	r2, [r7, #4]
 80150be:	683b      	ldr	r3, [r7, #0]
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	4619      	mov	r1, r3
 80150c4:	4610      	mov	r0, r2
 80150c6:	f7ff fde7 	bl	8014c98 <fs_open>
 80150ca:	4603      	mov	r3, r0
 80150cc:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80150ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d024      	beq.n	8015120 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	4a15      	ldr	r2, [pc, #84]	; (8015130 <http_get_404_file+0x84>)
 80150da:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 80150dc:	687a      	ldr	r2, [r7, #4]
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	4619      	mov	r1, r3
 80150e4:	4610      	mov	r0, r2
 80150e6:	f7ff fdd7 	bl	8014c98 <fs_open>
 80150ea:	4603      	mov	r3, r0
 80150ec:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80150ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d014      	beq.n	8015120 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 80150f6:	683b      	ldr	r3, [r7, #0]
 80150f8:	4a0e      	ldr	r2, [pc, #56]	; (8015134 <http_get_404_file+0x88>)
 80150fa:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 80150fc:	687a      	ldr	r2, [r7, #4]
 80150fe:	683b      	ldr	r3, [r7, #0]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	4619      	mov	r1, r3
 8015104:	4610      	mov	r0, r2
 8015106:	f7ff fdc7 	bl	8014c98 <fs_open>
 801510a:	4603      	mov	r3, r0
 801510c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 801510e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d004      	beq.n	8015120 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8015116:	683b      	ldr	r3, [r7, #0]
 8015118:	2200      	movs	r2, #0
 801511a:	601a      	str	r2, [r3, #0]
        return NULL;
 801511c:	2300      	movs	r3, #0
 801511e:	e000      	b.n	8015122 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8015120:	687b      	ldr	r3, [r7, #4]
}
 8015122:	4618      	mov	r0, r3
 8015124:	3710      	adds	r7, #16
 8015126:	46bd      	mov	sp, r7
 8015128:	bd80      	pop	{r7, pc}
 801512a:	bf00      	nop
 801512c:	08021b20 	.word	0x08021b20
 8015130:	08021b2c 	.word	0x08021b2c
 8015134:	08021b38 	.word	0x08021b38

08015138 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b08e      	sub	sp, #56	; 0x38
 801513c:	af00      	add	r7, sp, #0
 801513e:	60f8      	str	r0, [r7, #12]
 8015140:	60b9      	str	r1, [r7, #8]
 8015142:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8015148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801514a:	2b00      	cmp	r3, #0
 801514c:	d106      	bne.n	801515c <http_parse_request+0x24>
 801514e:	4b65      	ldr	r3, [pc, #404]	; (80152e4 <http_parse_request+0x1ac>)
 8015150:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8015154:	4964      	ldr	r1, [pc, #400]	; (80152e8 <http_parse_request+0x1b0>)
 8015156:	4865      	ldr	r0, [pc, #404]	; (80152ec <http_parse_request+0x1b4>)
 8015158:	f00b f9dc 	bl	8020514 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 801515c:	68bb      	ldr	r3, [r7, #8]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d106      	bne.n	8015170 <http_parse_request+0x38>
 8015162:	4b60      	ldr	r3, [pc, #384]	; (80152e4 <http_parse_request+0x1ac>)
 8015164:	f240 72af 	movw	r2, #1967	; 0x7af
 8015168:	4961      	ldr	r1, [pc, #388]	; (80152f0 <http_parse_request+0x1b8>)
 801516a:	4860      	ldr	r0, [pc, #384]	; (80152ec <http_parse_request+0x1b4>)
 801516c:	f00b f9d2 	bl	8020514 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8015170:	68bb      	ldr	r3, [r7, #8]
 8015172:	695b      	ldr	r3, [r3, #20]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d103      	bne.n	8015180 <http_parse_request+0x48>
 8015178:	68bb      	ldr	r3, [r7, #8]
 801517a:	699b      	ldr	r3, [r3, #24]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d002      	beq.n	8015186 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8015180:	f06f 0307 	mvn.w	r3, #7
 8015184:	e0aa      	b.n	80152dc <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8015186:	68bb      	ldr	r3, [r7, #8]
 8015188:	6a1b      	ldr	r3, [r3, #32]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d103      	bne.n	8015196 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 801518e:	68bb      	ldr	r3, [r7, #8]
 8015190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015192:	621a      	str	r2, [r3, #32]
 8015194:	e005      	b.n	80151a2 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8015196:	68bb      	ldr	r3, [r7, #8]
 8015198:	6a1b      	ldr	r3, [r3, #32]
 801519a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801519c:	4618      	mov	r0, r3
 801519e:	f002 f841 	bl	8017224 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80151a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80151a4:	f002 f816 	bl	80171d4 <pbuf_ref>

  if (hs->req->next != NULL) {
 80151a8:	68bb      	ldr	r3, [r7, #8]
 80151aa:	6a1b      	ldr	r3, [r3, #32]
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d012      	beq.n	80151d8 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80151b2:	68bb      	ldr	r3, [r7, #8]
 80151b4:	6a1b      	ldr	r3, [r3, #32]
 80151b6:	891b      	ldrh	r3, [r3, #8]
 80151b8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80151bc:	4293      	cmp	r3, r2
 80151be:	bf28      	it	cs
 80151c0:	4613      	movcs	r3, r2
 80151c2:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80151c4:	68bb      	ldr	r3, [r7, #8]
 80151c6:	6a18      	ldr	r0, [r3, #32]
 80151c8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80151ca:	2300      	movs	r3, #0
 80151cc:	4949      	ldr	r1, [pc, #292]	; (80152f4 <http_parse_request+0x1bc>)
 80151ce:	f002 f951 	bl	8017474 <pbuf_copy_partial>
    data = httpd_req_buf;
 80151d2:	4b48      	ldr	r3, [pc, #288]	; (80152f4 <http_parse_request+0x1bc>)
 80151d4:	637b      	str	r3, [r7, #52]	; 0x34
 80151d6:	e005      	b.n	80151e4 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 80151d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151da:	685b      	ldr	r3, [r3, #4]
 80151dc:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 80151de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151e0:	895b      	ldrh	r3, [r3, #10]
 80151e2:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 80151e4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80151e6:	2b06      	cmp	r3, #6
 80151e8:	d963      	bls.n	80152b2 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 80151ea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80151ec:	461a      	mov	r2, r3
 80151ee:	4942      	ldr	r1, [pc, #264]	; (80152f8 <http_parse_request+0x1c0>)
 80151f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80151f2:	f000 fb99 	bl	8015928 <lwip_strnstr>
 80151f6:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 80151f8:	6a3b      	ldr	r3, [r7, #32]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d059      	beq.n	80152b2 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 80151fe:	2300      	movs	r3, #0
 8015200:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8015202:	2204      	movs	r2, #4
 8015204:	493d      	ldr	r1, [pc, #244]	; (80152fc <http_parse_request+0x1c4>)
 8015206:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015208:	f00b f9dd 	bl	80205c6 <strncmp>
 801520c:	4603      	mov	r3, r0
 801520e:	2b00      	cmp	r3, #0
 8015210:	d117      	bne.n	8015242 <http_parse_request+0x10a>
        sp1 = data + 3;
 8015212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015214:	3303      	adds	r3, #3
 8015216:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8015218:	69fb      	ldr	r3, [r7, #28]
 801521a:	3301      	adds	r3, #1
 801521c:	461a      	mov	r2, r3
 801521e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015220:	1ad3      	subs	r3, r2, r3
 8015222:	b29b      	uxth	r3, r3
 8015224:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8015226:	1ad3      	subs	r3, r2, r3
 8015228:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 801522a:	69fb      	ldr	r3, [r7, #28]
 801522c:	3301      	adds	r3, #1
 801522e:	8b7a      	ldrh	r2, [r7, #26]
 8015230:	4933      	ldr	r1, [pc, #204]	; (8015300 <http_parse_request+0x1c8>)
 8015232:	4618      	mov	r0, r3
 8015234:	f000 fb78 	bl	8015928 <lwip_strnstr>
 8015238:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 801523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801523c:	2b00      	cmp	r3, #0
 801523e:	d111      	bne.n	8015264 <http_parse_request+0x12c>
 8015240:	e006      	b.n	8015250 <http_parse_request+0x118>
        data[4] = 0;
 8015242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015244:	3304      	adds	r3, #4
 8015246:	2200      	movs	r2, #0
 8015248:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 801524a:	f06f 030f 	mvn.w	r3, #15
 801524e:	e045      	b.n	80152dc <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8015250:	69fb      	ldr	r3, [r7, #28]
 8015252:	3301      	adds	r3, #1
 8015254:	8b7a      	ldrh	r2, [r7, #26]
 8015256:	4928      	ldr	r1, [pc, #160]	; (80152f8 <http_parse_request+0x1c0>)
 8015258:	4618      	mov	r0, r3
 801525a:	f000 fb65 	bl	8015928 <lwip_strnstr>
 801525e:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8015260:	2301      	movs	r3, #1
 8015262:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8015264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015266:	69fa      	ldr	r2, [r7, #28]
 8015268:	3201      	adds	r2, #1
 801526a:	1a9b      	subs	r3, r3, r2
 801526c:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 801526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015270:	2b00      	cmp	r3, #0
 8015272:	d01e      	beq.n	80152b2 <http_parse_request+0x17a>
 8015274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015276:	69fb      	ldr	r3, [r7, #28]
 8015278:	429a      	cmp	r2, r3
 801527a:	d91a      	bls.n	80152b2 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 801527c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801527e:	461a      	mov	r2, r3
 8015280:	4920      	ldr	r1, [pc, #128]	; (8015304 <http_parse_request+0x1cc>)
 8015282:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015284:	f000 fb50 	bl	8015928 <lwip_strnstr>
 8015288:	4603      	mov	r3, r0
 801528a:	2b00      	cmp	r3, #0
 801528c:	d011      	beq.n	80152b2 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 801528e:	69fb      	ldr	r3, [r7, #28]
 8015290:	3301      	adds	r3, #1
 8015292:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8015294:	69fb      	ldr	r3, [r7, #28]
 8015296:	2200      	movs	r2, #0
 8015298:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 801529a:	8b3b      	ldrh	r3, [r7, #24]
 801529c:	697a      	ldr	r2, [r7, #20]
 801529e:	4413      	add	r3, r2
 80152a0:	2200      	movs	r2, #0
 80152a2:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 80152a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80152a6:	6979      	ldr	r1, [r7, #20]
 80152a8:	68b8      	ldr	r0, [r7, #8]
 80152aa:	f000 f82d 	bl	8015308 <http_find_file>
 80152ae:	4603      	mov	r3, r0
 80152b0:	e014      	b.n	80152dc <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 80152b2:	68bb      	ldr	r3, [r7, #8]
 80152b4:	6a1b      	ldr	r3, [r3, #32]
 80152b6:	4618      	mov	r0, r3
 80152b8:	f001 ff74 	bl	80171a4 <pbuf_clen>
 80152bc:	4603      	mov	r3, r0
 80152be:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80152c0:	68bb      	ldr	r3, [r7, #8]
 80152c2:	6a1b      	ldr	r3, [r3, #32]
 80152c4:	891b      	ldrh	r3, [r3, #8]
 80152c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80152ca:	d205      	bcs.n	80152d8 <http_parse_request+0x1a0>
 80152cc:	8a7b      	ldrh	r3, [r7, #18]
 80152ce:	2b05      	cmp	r3, #5
 80152d0:	d802      	bhi.n	80152d8 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 80152d2:	f06f 0304 	mvn.w	r3, #4
 80152d6:	e001      	b.n	80152dc <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 80152d8:	f06f 030f 	mvn.w	r3, #15
  }
}
 80152dc:	4618      	mov	r0, r3
 80152de:	3738      	adds	r7, #56	; 0x38
 80152e0:	46bd      	mov	sp, r7
 80152e2:	bd80      	pop	{r7, pc}
 80152e4:	08021a78 	.word	0x08021a78
 80152e8:	08021b44 	.word	0x08021b44
 80152ec:	08021ac0 	.word	0x08021ac0
 80152f0:	08021b50 	.word	0x08021b50
 80152f4:	20008ec4 	.word	0x20008ec4
 80152f8:	08021b5c 	.word	0x08021b5c
 80152fc:	08021b60 	.word	0x08021b60
 8015300:	08021b68 	.word	0x08021b68
 8015304:	08021b6c 	.word	0x08021b6c

08015308 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b092      	sub	sp, #72	; 0x48
 801530c:	af02      	add	r7, sp, #8
 801530e:	60f8      	str	r0, [r7, #12]
 8015310:	60b9      	str	r1, [r7, #8]
 8015312:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8015314:	2300      	movs	r3, #0
 8015316:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8015318:	2300      	movs	r3, #0
 801531a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 801531c:	2300      	movs	r3, #0
 801531e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8015322:	68bb      	ldr	r3, [r7, #8]
 8015324:	4618      	mov	r0, r3
 8015326:	f7f2 ff95 	bl	8008254 <strlen>
 801532a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 801532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801532e:	2b00      	cmp	r3, #0
 8015330:	d06b      	beq.n	801540a <http_find_file+0x102>
 8015332:	68ba      	ldr	r2, [r7, #8]
 8015334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015336:	3b01      	subs	r3, #1
 8015338:	4413      	add	r3, r2
 801533a:	781b      	ldrb	r3, [r3, #0]
 801533c:	2b2f      	cmp	r3, #47	; 0x2f
 801533e:	d164      	bne.n	801540a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8015340:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8015342:	4a53      	ldr	r2, [pc, #332]	; (8015490 <http_find_file+0x188>)
 8015344:	4293      	cmp	r3, r2
 8015346:	d102      	bne.n	801534e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8015348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801534a:	2b01      	cmp	r3, #1
 801534c:	d15d      	bne.n	801540a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 801534e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015350:	3b01      	subs	r3, #1
 8015352:	2b3f      	cmp	r3, #63	; 0x3f
 8015354:	bf28      	it	cs
 8015356:	233f      	movcs	r3, #63	; 0x3f
 8015358:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 801535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801535c:	2b00      	cmp	r3, #0
 801535e:	d00a      	beq.n	8015376 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8015360:	68bb      	ldr	r3, [r7, #8]
 8015362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015364:	4619      	mov	r1, r3
 8015366:	484a      	ldr	r0, [pc, #296]	; (8015490 <http_find_file+0x188>)
 8015368:	f00b f8c1 	bl	80204ee <memcpy>
      http_uri_buf[copy_len] = 0;
 801536c:	4a48      	ldr	r2, [pc, #288]	; (8015490 <http_find_file+0x188>)
 801536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015370:	4413      	add	r3, r2
 8015372:	2200      	movs	r2, #0
 8015374:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8015376:	2300      	movs	r3, #0
 8015378:	63fb      	str	r3, [r7, #60]	; 0x3c
 801537a:	e043      	b.n	8015404 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 801537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801537e:	2b00      	cmp	r3, #0
 8015380:	d028      	beq.n	80153d4 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8015382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015384:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8015388:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 801538a:	6a3b      	ldr	r3, [r7, #32]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d01e      	beq.n	80153ce <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8015390:	4a40      	ldr	r2, [pc, #256]	; (8015494 <http_find_file+0x18c>)
 8015392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015394:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015398:	4618      	mov	r0, r3
 801539a:	f7f2 ff5b 	bl	8008254 <strlen>
 801539e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80153a0:	69fa      	ldr	r2, [r7, #28]
 80153a2:	6a3b      	ldr	r3, [r7, #32]
 80153a4:	4293      	cmp	r3, r2
 80153a6:	bf28      	it	cs
 80153a8:	4613      	movcs	r3, r2
 80153aa:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80153ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ae:	4a38      	ldr	r2, [pc, #224]	; (8015490 <http_find_file+0x188>)
 80153b0:	1898      	adds	r0, r3, r2
 80153b2:	4a38      	ldr	r2, [pc, #224]	; (8015494 <http_find_file+0x18c>)
 80153b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153b6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80153ba:	69ba      	ldr	r2, [r7, #24]
 80153bc:	4619      	mov	r1, r3
 80153be:	f00b f896 	bl	80204ee <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 80153c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153c4:	69bb      	ldr	r3, [r7, #24]
 80153c6:	4413      	add	r3, r2
 80153c8:	4a31      	ldr	r2, [pc, #196]	; (8015490 <http_find_file+0x188>)
 80153ca:	2100      	movs	r1, #0
 80153cc:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 80153ce:	4b30      	ldr	r3, [pc, #192]	; (8015490 <http_find_file+0x188>)
 80153d0:	633b      	str	r3, [r7, #48]	; 0x30
 80153d2:	e004      	b.n	80153de <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 80153d4:	4a2f      	ldr	r2, [pc, #188]	; (8015494 <http_find_file+0x18c>)
 80153d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80153dc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80153e2:	4618      	mov	r0, r3
 80153e4:	f7ff fc58 	bl	8014c98 <fs_open>
 80153e8:	4603      	mov	r3, r0
 80153ea:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 80153ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d104      	bne.n	80153fe <http_find_file+0xf6>
        uri = file_name;
 80153f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153f6:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 80153fc:	e005      	b.n	801540a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80153fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015400:	3301      	adds	r3, #1
 8015402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015406:	2b04      	cmp	r3, #4
 8015408:	d9b8      	bls.n	801537c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 801540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801540c:	2b00      	cmp	r3, #0
 801540e:	d124      	bne.n	801545a <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8015410:	68bb      	ldr	r3, [r7, #8]
 8015412:	213f      	movs	r1, #63	; 0x3f
 8015414:	4618      	mov	r0, r3
 8015416:	f00b f8c9 	bl	80205ac <strchr>
 801541a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 801541c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801541e:	2b00      	cmp	r3, #0
 8015420:	d005      	beq.n	801542e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8015422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015424:	2200      	movs	r2, #0
 8015426:	701a      	strb	r2, [r3, #0]
      params++;
 8015428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801542a:	3301      	adds	r3, #1
 801542c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	68ba      	ldr	r2, [r7, #8]
 8015432:	4611      	mov	r1, r2
 8015434:	4618      	mov	r0, r3
 8015436:	f7ff fc2f 	bl	8014c98 <fs_open>
 801543a:	4603      	mov	r3, r0
 801543c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 801543e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d102      	bne.n	801544c <http_find_file+0x144>
      file = &hs->file_handle;
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	63bb      	str	r3, [r7, #56]	; 0x38
 801544a:	e006      	b.n	801545a <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 801544c:	f107 0308 	add.w	r3, r7, #8
 8015450:	4619      	mov	r1, r3
 8015452:	68f8      	ldr	r0, [r7, #12]
 8015454:	f7ff fe2a 	bl	80150ac <http_get_404_file>
 8015458:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 801545a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801545c:	2b00      	cmp	r3, #0
 801545e:	d106      	bne.n	801546e <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8015460:	f107 0308 	add.w	r3, r7, #8
 8015464:	4619      	mov	r1, r3
 8015466:	68f8      	ldr	r0, [r7, #12]
 8015468:	f7ff fe20 	bl	80150ac <http_get_404_file>
 801546c:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 801546e:	68ba      	ldr	r2, [r7, #8]
 8015470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015472:	9301      	str	r3, [sp, #4]
 8015474:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015478:	9300      	str	r3, [sp, #0]
 801547a:	4613      	mov	r3, r2
 801547c:	687a      	ldr	r2, [r7, #4]
 801547e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015480:	68f8      	ldr	r0, [r7, #12]
 8015482:	f000 f809 	bl	8015498 <http_init_file>
 8015486:	4603      	mov	r3, r0
}
 8015488:	4618      	mov	r0, r3
 801548a:	3740      	adds	r7, #64	; 0x40
 801548c:	46bd      	mov	sp, r7
 801548e:	bd80      	pop	{r7, pc}
 8015490:	200092c4 	.word	0x200092c4
 8015494:	08035138 	.word	0x08035138

08015498 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8015498:	b580      	push	{r7, lr}
 801549a:	b086      	sub	sp, #24
 801549c:	af00      	add	r7, sp, #0
 801549e:	60f8      	str	r0, [r7, #12]
 80154a0:	60b9      	str	r1, [r7, #8]
 80154a2:	607a      	str	r2, [r7, #4]
 80154a4:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80154a6:	68bb      	ldr	r3, [r7, #8]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d05d      	beq.n	8015568 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80154ac:	68bb      	ldr	r3, [r7, #8]
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d106      	bne.n	80154c2 <http_init_file+0x2a>
 80154b4:	4b35      	ldr	r3, [pc, #212]	; (801558c <http_init_file+0xf4>)
 80154b6:	f640 120b 	movw	r2, #2315	; 0x90b
 80154ba:	4935      	ldr	r1, [pc, #212]	; (8015590 <http_init_file+0xf8>)
 80154bc:	4835      	ldr	r0, [pc, #212]	; (8015594 <http_init_file+0xfc>)
 80154be:	f00b f829 	bl	8020514 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	68ba      	ldr	r2, [r7, #8]
 80154c6:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 80154c8:	68bb      	ldr	r3, [r7, #8]
 80154ca:	681a      	ldr	r2, [r3, #0]
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80154d0:	68bb      	ldr	r3, [r7, #8]
 80154d2:	685b      	ldr	r3, [r3, #4]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	da06      	bge.n	80154e6 <http_init_file+0x4e>
 80154d8:	4b2c      	ldr	r3, [pc, #176]	; (801558c <http_init_file+0xf4>)
 80154da:	f640 1234 	movw	r2, #2356	; 0x934
 80154de:	492e      	ldr	r1, [pc, #184]	; (8015598 <http_init_file+0x100>)
 80154e0:	482c      	ldr	r0, [pc, #176]	; (8015594 <http_init_file+0xfc>)
 80154e2:	f00b f817 	bl	8020514 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 80154e6:	68bb      	ldr	r3, [r7, #8]
 80154e8:	685b      	ldr	r3, [r3, #4]
 80154ea:	461a      	mov	r2, r3
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	2200      	movs	r2, #0
 80154f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	695b      	ldr	r3, [r3, #20]
 80154fc:	7c1b      	ldrb	r3, [r3, #16]
 80154fe:	f003 0301 	and.w	r3, r3, #1
 8015502:	2b00      	cmp	r3, #0
 8015504:	d106      	bne.n	8015514 <http_init_file+0x7c>
 8015506:	4b21      	ldr	r3, [pc, #132]	; (801558c <http_init_file+0xf4>)
 8015508:	f640 1244 	movw	r2, #2372	; 0x944
 801550c:	4923      	ldr	r1, [pc, #140]	; (801559c <http_init_file+0x104>)
 801550e:	4821      	ldr	r0, [pc, #132]	; (8015594 <http_init_file+0xfc>)
 8015510:	f00b f800 	bl	8020514 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d033      	beq.n	8015582 <http_init_file+0xea>
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	695b      	ldr	r3, [r3, #20]
 801551e:	7c1b      	ldrb	r3, [r3, #16]
 8015520:	f003 0301 	and.w	r3, r3, #1
 8015524:	2b00      	cmp	r3, #0
 8015526:	d02c      	beq.n	8015582 <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	6998      	ldr	r0, [r3, #24]
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015530:	461a      	mov	r2, r3
 8015532:	491b      	ldr	r1, [pc, #108]	; (80155a0 <http_init_file+0x108>)
 8015534:	f000 f9f8 	bl	8015928 <lwip_strnstr>
 8015538:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 801553a:	697b      	ldr	r3, [r7, #20]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d020      	beq.n	8015582 <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	3304      	adds	r3, #4
 8015544:	461a      	mov	r2, r3
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	699b      	ldr	r3, [r3, #24]
 801554a:	1ad3      	subs	r3, r2, r3
 801554c:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	699a      	ldr	r2, [r3, #24]
 8015552:	693b      	ldr	r3, [r7, #16]
 8015554:	441a      	add	r2, r3
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801555e:	693b      	ldr	r3, [r7, #16]
 8015560:	1ad2      	subs	r2, r2, r3
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	625a      	str	r2, [r3, #36]	; 0x24
 8015566:	e00c      	b.n	8015582 <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	2200      	movs	r2, #0
 801556c:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	2200      	movs	r2, #0
 8015572:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	2200      	movs	r2, #0
 8015578:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	2200      	movs	r2, #0
 801557e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8015582:	2300      	movs	r3, #0
}
 8015584:	4618      	mov	r0, r3
 8015586:	3718      	adds	r7, #24
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}
 801558c:	08021a78 	.word	0x08021a78
 8015590:	08021b74 	.word	0x08021b74
 8015594:	08021ac0 	.word	0x08021ac0
 8015598:	08021b88 	.word	0x08021b88
 801559c:	08021ba8 	.word	0x08021ba8
 80155a0:	08021b6c 	.word	0x08021b6c

080155a4 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 80155a4:	b580      	push	{r7, lr}
 80155a6:	b084      	sub	sp, #16
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	6078      	str	r0, [r7, #4]
 80155ac:	460b      	mov	r3, r1
 80155ae:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d002      	beq.n	80155c0 <http_err+0x1c>
    http_state_free(hs);
 80155ba:	68f8      	ldr	r0, [r7, #12]
 80155bc:	f7ff fc02 	bl	8014dc4 <http_state_free>
  }
}
 80155c0:	bf00      	nop
 80155c2:	3710      	adds	r7, #16
 80155c4:	46bd      	mov	sp, r7
 80155c6:	bd80      	pop	{r7, pc}

080155c8 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 80155c8:	b580      	push	{r7, lr}
 80155ca:	b086      	sub	sp, #24
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	60f8      	str	r0, [r7, #12]
 80155d0:	60b9      	str	r1, [r7, #8]
 80155d2:	4613      	mov	r3, r2
 80155d4:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 80155da:	697b      	ldr	r3, [r7, #20]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d101      	bne.n	80155e4 <http_sent+0x1c>
    return ERR_OK;
 80155e0:	2300      	movs	r3, #0
 80155e2:	e008      	b.n	80155f6 <http_sent+0x2e>
  }

  hs->retries = 0;
 80155e4:	697b      	ldr	r3, [r7, #20]
 80155e6:	2200      	movs	r2, #0
 80155e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 80155ec:	6979      	ldr	r1, [r7, #20]
 80155ee:	68b8      	ldr	r0, [r7, #8]
 80155f0:	f7ff fd25 	bl	801503e <http_send>

  return ERR_OK;
 80155f4:	2300      	movs	r3, #0
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	3718      	adds	r7, #24
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bd80      	pop	{r7, pc}

080155fe <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 80155fe:	b580      	push	{r7, lr}
 8015600:	b084      	sub	sp, #16
 8015602:	af00      	add	r7, sp, #0
 8015604:	6078      	str	r0, [r7, #4]
 8015606:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d107      	bne.n	8015622 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8015612:	2100      	movs	r1, #0
 8015614:	6838      	ldr	r0, [r7, #0]
 8015616:	f7ff fc91 	bl	8014f3c <http_close_conn>
 801561a:	4603      	mov	r3, r0
 801561c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 801561e:	2300      	movs	r3, #0
 8015620:	e021      	b.n	8015666 <http_poll+0x68>
  } else {
    hs->retries++;
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015628:	3301      	adds	r3, #1
 801562a:	b2da      	uxtb	r2, r3
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015638:	2b04      	cmp	r3, #4
 801563a:	d105      	bne.n	8015648 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 801563c:	68f9      	ldr	r1, [r7, #12]
 801563e:	6838      	ldr	r0, [r7, #0]
 8015640:	f7ff fc7c 	bl	8014f3c <http_close_conn>
      return ERR_OK;
 8015644:	2300      	movs	r3, #0
 8015646:	e00e      	b.n	8015666 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	695b      	ldr	r3, [r3, #20]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d009      	beq.n	8015664 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8015650:	68f9      	ldr	r1, [r7, #12]
 8015652:	6838      	ldr	r0, [r7, #0]
 8015654:	f7ff fcf3 	bl	801503e <http_send>
 8015658:	4603      	mov	r3, r0
 801565a:	2b00      	cmp	r3, #0
 801565c:	d002      	beq.n	8015664 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 801565e:	6838      	ldr	r0, [r7, #0]
 8015660:	f007 f888 	bl	801c774 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8015664:	2300      	movs	r3, #0
}
 8015666:	4618      	mov	r0, r3
 8015668:	3710      	adds	r7, #16
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}
	...

08015670 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b086      	sub	sp, #24
 8015674:	af00      	add	r7, sp, #0
 8015676:	60f8      	str	r0, [r7, #12]
 8015678:	60b9      	str	r1, [r7, #8]
 801567a:	607a      	str	r2, [r7, #4]
 801567c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8015682:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d105      	bne.n	8015696 <http_recv+0x26>
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d002      	beq.n	8015696 <http_recv+0x26>
 8015690:	697b      	ldr	r3, [r7, #20]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d111      	bne.n	80156ba <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d008      	beq.n	80156ae <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	891b      	ldrh	r3, [r3, #8]
 80156a0:	4619      	mov	r1, r3
 80156a2:	68b8      	ldr	r0, [r7, #8]
 80156a4:	f002 fc56 	bl	8017f54 <tcp_recved>
      pbuf_free(p);
 80156a8:	6878      	ldr	r0, [r7, #4]
 80156aa:	f001 fced 	bl	8017088 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 80156ae:	6979      	ldr	r1, [r7, #20]
 80156b0:	68b8      	ldr	r0, [r7, #8]
 80156b2:	f7ff fc43 	bl	8014f3c <http_close_conn>
    return ERR_OK;
 80156b6:	2300      	movs	r3, #0
 80156b8:	e055      	b.n	8015766 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	891b      	ldrh	r3, [r3, #8]
 80156be:	4619      	mov	r1, r3
 80156c0:	68b8      	ldr	r0, [r7, #8]
 80156c2:	f002 fc47 	bl	8017f54 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	695b      	ldr	r3, [r3, #20]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d147      	bne.n	801575e <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 80156ce:	68ba      	ldr	r2, [r7, #8]
 80156d0:	6979      	ldr	r1, [r7, #20]
 80156d2:	6878      	ldr	r0, [r7, #4]
 80156d4:	f7ff fd30 	bl	8015138 <http_parse_request>
 80156d8:	4603      	mov	r3, r0
 80156da:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80156dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d015      	beq.n	8015710 <http_recv+0xa0>
 80156e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80156e8:	f113 0f05 	cmn.w	r3, #5
 80156ec:	d010      	beq.n	8015710 <http_recv+0xa0>
 80156ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80156f2:	f113 0f10 	cmn.w	r3, #16
 80156f6:	d00b      	beq.n	8015710 <http_recv+0xa0>
 80156f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80156fc:	f113 0f08 	cmn.w	r3, #8
 8015700:	d006      	beq.n	8015710 <http_recv+0xa0>
 8015702:	4b1b      	ldr	r3, [pc, #108]	; (8015770 <http_recv+0x100>)
 8015704:	f640 2205 	movw	r2, #2565	; 0xa05
 8015708:	491a      	ldr	r1, [pc, #104]	; (8015774 <http_recv+0x104>)
 801570a:	481b      	ldr	r0, [pc, #108]	; (8015778 <http_recv+0x108>)
 801570c:	f00a ff02 	bl	8020514 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8015710:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015714:	f113 0f05 	cmn.w	r3, #5
 8015718:	d00b      	beq.n	8015732 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 801571a:	697b      	ldr	r3, [r7, #20]
 801571c:	6a1b      	ldr	r3, [r3, #32]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d007      	beq.n	8015732 <http_recv+0xc2>
          pbuf_free(hs->req);
 8015722:	697b      	ldr	r3, [r7, #20]
 8015724:	6a1b      	ldr	r3, [r3, #32]
 8015726:	4618      	mov	r0, r3
 8015728:	f001 fcae 	bl	8017088 <pbuf_free>
          hs->req = NULL;
 801572c:	697b      	ldr	r3, [r7, #20]
 801572e:	2200      	movs	r2, #0
 8015730:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8015732:	6878      	ldr	r0, [r7, #4]
 8015734:	f001 fca8 	bl	8017088 <pbuf_free>
      if (parsed == ERR_OK) {
 8015738:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d104      	bne.n	801574a <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8015740:	6979      	ldr	r1, [r7, #20]
 8015742:	68b8      	ldr	r0, [r7, #8]
 8015744:	f7ff fc7b 	bl	801503e <http_send>
 8015748:	e00c      	b.n	8015764 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 801574a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801574e:	f113 0f10 	cmn.w	r3, #16
 8015752:	d107      	bne.n	8015764 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8015754:	6979      	ldr	r1, [r7, #20]
 8015756:	68b8      	ldr	r0, [r7, #8]
 8015758:	f7ff fbf0 	bl	8014f3c <http_close_conn>
 801575c:	e002      	b.n	8015764 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	f001 fc92 	bl	8017088 <pbuf_free>
    }
  }
  return ERR_OK;
 8015764:	2300      	movs	r3, #0
}
 8015766:	4618      	mov	r0, r3
 8015768:	3718      	adds	r7, #24
 801576a:	46bd      	mov	sp, r7
 801576c:	bd80      	pop	{r7, pc}
 801576e:	bf00      	nop
 8015770:	08021a78 	.word	0x08021a78
 8015774:	08021bd4 	.word	0x08021bd4
 8015778:	08021ac0 	.word	0x08021ac0

0801577c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 801577c:	b580      	push	{r7, lr}
 801577e:	b086      	sub	sp, #24
 8015780:	af00      	add	r7, sp, #0
 8015782:	60f8      	str	r0, [r7, #12]
 8015784:	60b9      	str	r1, [r7, #8]
 8015786:	4613      	mov	r3, r2
 8015788:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 801578a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d102      	bne.n	8015798 <http_accept+0x1c>
 8015792:	68bb      	ldr	r3, [r7, #8]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d102      	bne.n	801579e <http_accept+0x22>
    return ERR_VAL;
 8015798:	f06f 0305 	mvn.w	r3, #5
 801579c:	e025      	b.n	80157ea <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 801579e:	2101      	movs	r1, #1
 80157a0:	68b8      	ldr	r0, [r7, #8]
 80157a2:	f003 f8b7 	bl	8018914 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 80157a6:	f7ff fadb 	bl	8014d60 <http_state_alloc>
 80157aa:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 80157ac:	697b      	ldr	r3, [r7, #20]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d102      	bne.n	80157b8 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 80157b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80157b6:	e018      	b.n	80157ea <http_accept+0x6e>
  }
  hs->pcb = pcb;
 80157b8:	697b      	ldr	r3, [r7, #20]
 80157ba:	68ba      	ldr	r2, [r7, #8]
 80157bc:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 80157be:	6979      	ldr	r1, [r7, #20]
 80157c0:	68b8      	ldr	r0, [r7, #8]
 80157c2:	f003 faaf 	bl	8018d24 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 80157c6:	490b      	ldr	r1, [pc, #44]	; (80157f4 <http_accept+0x78>)
 80157c8:	68b8      	ldr	r0, [r7, #8]
 80157ca:	f003 fabd 	bl	8018d48 <tcp_recv>
  altcp_err(pcb, http_err);
 80157ce:	490a      	ldr	r1, [pc, #40]	; (80157f8 <http_accept+0x7c>)
 80157d0:	68b8      	ldr	r0, [r7, #8]
 80157d2:	f003 fafd 	bl	8018dd0 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80157d6:	2204      	movs	r2, #4
 80157d8:	4908      	ldr	r1, [pc, #32]	; (80157fc <http_accept+0x80>)
 80157da:	68b8      	ldr	r0, [r7, #8]
 80157dc:	f003 fb32 	bl	8018e44 <tcp_poll>
  altcp_sent(pcb, http_sent);
 80157e0:	4907      	ldr	r1, [pc, #28]	; (8015800 <http_accept+0x84>)
 80157e2:	68b8      	ldr	r0, [r7, #8]
 80157e4:	f003 fad2 	bl	8018d8c <tcp_sent>

  return ERR_OK;
 80157e8:	2300      	movs	r3, #0
}
 80157ea:	4618      	mov	r0, r3
 80157ec:	3718      	adds	r7, #24
 80157ee:	46bd      	mov	sp, r7
 80157f0:	bd80      	pop	{r7, pc}
 80157f2:	bf00      	nop
 80157f4:	08015671 	.word	0x08015671
 80157f8:	080155a5 	.word	0x080155a5
 80157fc:	080155ff 	.word	0x080155ff
 8015800:	080155c9 	.word	0x080155c9

08015804 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8015804:	b580      	push	{r7, lr}
 8015806:	b084      	sub	sp, #16
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]
 801580c:	460b      	mov	r3, r1
 801580e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d029      	beq.n	801586a <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8015816:	2101      	movs	r1, #1
 8015818:	6878      	ldr	r0, [r7, #4]
 801581a:	f003 f87b 	bl	8018914 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 801581e:	887b      	ldrh	r3, [r7, #2]
 8015820:	461a      	mov	r2, r3
 8015822:	4914      	ldr	r1, [pc, #80]	; (8015874 <httpd_init_pcb+0x70>)
 8015824:	6878      	ldr	r0, [r7, #4]
 8015826:	f002 f9c7 	bl	8017bb8 <tcp_bind>
 801582a:	4603      	mov	r3, r0
 801582c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 801582e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d006      	beq.n	8015844 <httpd_init_pcb+0x40>
 8015836:	4b10      	ldr	r3, [pc, #64]	; (8015878 <httpd_init_pcb+0x74>)
 8015838:	f640 2257 	movw	r2, #2647	; 0xa57
 801583c:	490f      	ldr	r1, [pc, #60]	; (801587c <httpd_init_pcb+0x78>)
 801583e:	4810      	ldr	r0, [pc, #64]	; (8015880 <httpd_init_pcb+0x7c>)
 8015840:	f00a fe68 	bl	8020514 <iprintf>
    pcb = altcp_listen(pcb);
 8015844:	21ff      	movs	r1, #255	; 0xff
 8015846:	6878      	ldr	r0, [r7, #4]
 8015848:	f002 fa6e 	bl	8017d28 <tcp_listen_with_backlog>
 801584c:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d106      	bne.n	8015862 <httpd_init_pcb+0x5e>
 8015854:	4b08      	ldr	r3, [pc, #32]	; (8015878 <httpd_init_pcb+0x74>)
 8015856:	f640 2259 	movw	r2, #2649	; 0xa59
 801585a:	490a      	ldr	r1, [pc, #40]	; (8015884 <httpd_init_pcb+0x80>)
 801585c:	4808      	ldr	r0, [pc, #32]	; (8015880 <httpd_init_pcb+0x7c>)
 801585e:	f00a fe59 	bl	8020514 <iprintf>
    altcp_accept(pcb, http_accept);
 8015862:	4909      	ldr	r1, [pc, #36]	; (8015888 <httpd_init_pcb+0x84>)
 8015864:	6878      	ldr	r0, [r7, #4]
 8015866:	f003 fad5 	bl	8018e14 <tcp_accept>
  }
}
 801586a:	bf00      	nop
 801586c:	3710      	adds	r7, #16
 801586e:	46bd      	mov	sp, r7
 8015870:	bd80      	pop	{r7, pc}
 8015872:	bf00      	nop
 8015874:	08035270 	.word	0x08035270
 8015878:	08021a78 	.word	0x08021a78
 801587c:	08021c00 	.word	0x08021c00
 8015880:	08021ac0 	.word	0x08021ac0
 8015884:	08021c1c 	.word	0x08021c1c
 8015888:	0801577d 	.word	0x0801577d

0801588c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b082      	sub	sp, #8
 8015890:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8015892:	202e      	movs	r0, #46	; 0x2e
 8015894:	f003 fa38 	bl	8018d08 <tcp_new_ip_type>
 8015898:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d106      	bne.n	80158ae <httpd_init+0x22>
 80158a0:	4b07      	ldr	r3, [pc, #28]	; (80158c0 <httpd_init+0x34>)
 80158a2:	f640 2272 	movw	r2, #2674	; 0xa72
 80158a6:	4907      	ldr	r1, [pc, #28]	; (80158c4 <httpd_init+0x38>)
 80158a8:	4807      	ldr	r0, [pc, #28]	; (80158c8 <httpd_init+0x3c>)
 80158aa:	f00a fe33 	bl	8020514 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 80158ae:	2150      	movs	r1, #80	; 0x50
 80158b0:	6878      	ldr	r0, [r7, #4]
 80158b2:	f7ff ffa7 	bl	8015804 <httpd_init_pcb>
}
 80158b6:	bf00      	nop
 80158b8:	3708      	adds	r7, #8
 80158ba:	46bd      	mov	sp, r7
 80158bc:	bd80      	pop	{r7, pc}
 80158be:	bf00      	nop
 80158c0:	08021a78 	.word	0x08021a78
 80158c4:	08021c3c 	.word	0x08021c3c
 80158c8:	08021ac0 	.word	0x08021ac0

080158cc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80158cc:	b480      	push	{r7}
 80158ce:	b083      	sub	sp, #12
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	4603      	mov	r3, r0
 80158d4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80158d6:	88fb      	ldrh	r3, [r7, #6]
 80158d8:	021b      	lsls	r3, r3, #8
 80158da:	b21a      	sxth	r2, r3
 80158dc:	88fb      	ldrh	r3, [r7, #6]
 80158de:	0a1b      	lsrs	r3, r3, #8
 80158e0:	b29b      	uxth	r3, r3
 80158e2:	b21b      	sxth	r3, r3
 80158e4:	4313      	orrs	r3, r2
 80158e6:	b21b      	sxth	r3, r3
 80158e8:	b29b      	uxth	r3, r3
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	370c      	adds	r7, #12
 80158ee:	46bd      	mov	sp, r7
 80158f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f4:	4770      	bx	lr

080158f6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80158f6:	b480      	push	{r7}
 80158f8:	b083      	sub	sp, #12
 80158fa:	af00      	add	r7, sp, #0
 80158fc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	061a      	lsls	r2, r3, #24
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	021b      	lsls	r3, r3, #8
 8015906:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801590a:	431a      	orrs	r2, r3
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	0a1b      	lsrs	r3, r3, #8
 8015910:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015914:	431a      	orrs	r2, r3
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	0e1b      	lsrs	r3, r3, #24
 801591a:	4313      	orrs	r3, r2
}
 801591c:	4618      	mov	r0, r3
 801591e:	370c      	adds	r7, #12
 8015920:	46bd      	mov	sp, r7
 8015922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015926:	4770      	bx	lr

08015928 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8015928:	b580      	push	{r7, lr}
 801592a:	b086      	sub	sp, #24
 801592c:	af00      	add	r7, sp, #0
 801592e:	60f8      	str	r0, [r7, #12]
 8015930:	60b9      	str	r1, [r7, #8]
 8015932:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8015934:	68b8      	ldr	r0, [r7, #8]
 8015936:	f7f2 fc8d 	bl	8008254 <strlen>
 801593a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 801593c:	693b      	ldr	r3, [r7, #16]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d101      	bne.n	8015946 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	e022      	b.n	801598c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	617b      	str	r3, [r7, #20]
 801594a:	e012      	b.n	8015972 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 801594c:	697b      	ldr	r3, [r7, #20]
 801594e:	781a      	ldrb	r2, [r3, #0]
 8015950:	68bb      	ldr	r3, [r7, #8]
 8015952:	781b      	ldrb	r3, [r3, #0]
 8015954:	429a      	cmp	r2, r3
 8015956:	d109      	bne.n	801596c <lwip_strnstr+0x44>
 8015958:	693a      	ldr	r2, [r7, #16]
 801595a:	68b9      	ldr	r1, [r7, #8]
 801595c:	6978      	ldr	r0, [r7, #20]
 801595e:	f00a fe32 	bl	80205c6 <strncmp>
 8015962:	4603      	mov	r3, r0
 8015964:	2b00      	cmp	r3, #0
 8015966:	d101      	bne.n	801596c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8015968:	697b      	ldr	r3, [r7, #20]
 801596a:	e00f      	b.n	801598c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801596c:	697b      	ldr	r3, [r7, #20]
 801596e:	3301      	adds	r3, #1
 8015970:	617b      	str	r3, [r7, #20]
 8015972:	697b      	ldr	r3, [r7, #20]
 8015974:	781b      	ldrb	r3, [r3, #0]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d007      	beq.n	801598a <lwip_strnstr+0x62>
 801597a:	697a      	ldr	r2, [r7, #20]
 801597c:	693b      	ldr	r3, [r7, #16]
 801597e:	441a      	add	r2, r3
 8015980:	68f9      	ldr	r1, [r7, #12]
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	440b      	add	r3, r1
 8015986:	429a      	cmp	r2, r3
 8015988:	d9e0      	bls.n	801594c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 801598a:	2300      	movs	r3, #0
}
 801598c:	4618      	mov	r0, r3
 801598e:	3718      	adds	r7, #24
 8015990:	46bd      	mov	sp, r7
 8015992:	bd80      	pop	{r7, pc}

08015994 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8015994:	b580      	push	{r7, lr}
 8015996:	b082      	sub	sp, #8
 8015998:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801599a:	2300      	movs	r3, #0
 801599c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801599e:	f00a fce9 	bl	8020374 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80159a2:	f000 f8d5 	bl	8015b50 <mem_init>
  memp_init();
 80159a6:	f000 fc31 	bl	801620c <memp_init>
  pbuf_init();
  netif_init();
 80159aa:	f000 fcf7 	bl	801639c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80159ae:	f007 ffe1 	bl	801d974 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80159b2:	f001 fe03 	bl	80175bc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80159b6:	f007 ff25 	bl	801d804 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80159ba:	bf00      	nop
 80159bc:	3708      	adds	r7, #8
 80159be:	46bd      	mov	sp, r7
 80159c0:	bd80      	pop	{r7, pc}
	...

080159c4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80159c4:	b480      	push	{r7}
 80159c6:	b083      	sub	sp, #12
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	4603      	mov	r3, r0
 80159cc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80159ce:	4b05      	ldr	r3, [pc, #20]	; (80159e4 <ptr_to_mem+0x20>)
 80159d0:	681a      	ldr	r2, [r3, #0]
 80159d2:	88fb      	ldrh	r3, [r7, #6]
 80159d4:	4413      	add	r3, r2
}
 80159d6:	4618      	mov	r0, r3
 80159d8:	370c      	adds	r7, #12
 80159da:	46bd      	mov	sp, r7
 80159dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e0:	4770      	bx	lr
 80159e2:	bf00      	nop
 80159e4:	20009304 	.word	0x20009304

080159e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80159e8:	b480      	push	{r7}
 80159ea:	b083      	sub	sp, #12
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	4a05      	ldr	r2, [pc, #20]	; (8015a08 <mem_to_ptr+0x20>)
 80159f4:	6812      	ldr	r2, [r2, #0]
 80159f6:	1a9b      	subs	r3, r3, r2
 80159f8:	b29b      	uxth	r3, r3
}
 80159fa:	4618      	mov	r0, r3
 80159fc:	370c      	adds	r7, #12
 80159fe:	46bd      	mov	sp, r7
 8015a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a04:	4770      	bx	lr
 8015a06:	bf00      	nop
 8015a08:	20009304 	.word	0x20009304

08015a0c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8015a0c:	b590      	push	{r4, r7, lr}
 8015a0e:	b085      	sub	sp, #20
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8015a14:	4b45      	ldr	r3, [pc, #276]	; (8015b2c <plug_holes+0x120>)
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	687a      	ldr	r2, [r7, #4]
 8015a1a:	429a      	cmp	r2, r3
 8015a1c:	d206      	bcs.n	8015a2c <plug_holes+0x20>
 8015a1e:	4b44      	ldr	r3, [pc, #272]	; (8015b30 <plug_holes+0x124>)
 8015a20:	f240 12df 	movw	r2, #479	; 0x1df
 8015a24:	4943      	ldr	r1, [pc, #268]	; (8015b34 <plug_holes+0x128>)
 8015a26:	4844      	ldr	r0, [pc, #272]	; (8015b38 <plug_holes+0x12c>)
 8015a28:	f00a fd74 	bl	8020514 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8015a2c:	4b43      	ldr	r3, [pc, #268]	; (8015b3c <plug_holes+0x130>)
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	687a      	ldr	r2, [r7, #4]
 8015a32:	429a      	cmp	r2, r3
 8015a34:	d306      	bcc.n	8015a44 <plug_holes+0x38>
 8015a36:	4b3e      	ldr	r3, [pc, #248]	; (8015b30 <plug_holes+0x124>)
 8015a38:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015a3c:	4940      	ldr	r1, [pc, #256]	; (8015b40 <plug_holes+0x134>)
 8015a3e:	483e      	ldr	r0, [pc, #248]	; (8015b38 <plug_holes+0x12c>)
 8015a40:	f00a fd68 	bl	8020514 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	791b      	ldrb	r3, [r3, #4]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d006      	beq.n	8015a5a <plug_holes+0x4e>
 8015a4c:	4b38      	ldr	r3, [pc, #224]	; (8015b30 <plug_holes+0x124>)
 8015a4e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8015a52:	493c      	ldr	r1, [pc, #240]	; (8015b44 <plug_holes+0x138>)
 8015a54:	4838      	ldr	r0, [pc, #224]	; (8015b38 <plug_holes+0x12c>)
 8015a56:	f00a fd5d 	bl	8020514 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	881b      	ldrh	r3, [r3, #0]
 8015a5e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015a62:	d906      	bls.n	8015a72 <plug_holes+0x66>
 8015a64:	4b32      	ldr	r3, [pc, #200]	; (8015b30 <plug_holes+0x124>)
 8015a66:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8015a6a:	4937      	ldr	r1, [pc, #220]	; (8015b48 <plug_holes+0x13c>)
 8015a6c:	4832      	ldr	r0, [pc, #200]	; (8015b38 <plug_holes+0x12c>)
 8015a6e:	f00a fd51 	bl	8020514 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	881b      	ldrh	r3, [r3, #0]
 8015a76:	4618      	mov	r0, r3
 8015a78:	f7ff ffa4 	bl	80159c4 <ptr_to_mem>
 8015a7c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8015a7e:	687a      	ldr	r2, [r7, #4]
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	429a      	cmp	r2, r3
 8015a84:	d024      	beq.n	8015ad0 <plug_holes+0xc4>
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	791b      	ldrb	r3, [r3, #4]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d120      	bne.n	8015ad0 <plug_holes+0xc4>
 8015a8e:	4b2b      	ldr	r3, [pc, #172]	; (8015b3c <plug_holes+0x130>)
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	68fa      	ldr	r2, [r7, #12]
 8015a94:	429a      	cmp	r2, r3
 8015a96:	d01b      	beq.n	8015ad0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8015a98:	4b2c      	ldr	r3, [pc, #176]	; (8015b4c <plug_holes+0x140>)
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	68fa      	ldr	r2, [r7, #12]
 8015a9e:	429a      	cmp	r2, r3
 8015aa0:	d102      	bne.n	8015aa8 <plug_holes+0x9c>
      lfree = mem;
 8015aa2:	4a2a      	ldr	r2, [pc, #168]	; (8015b4c <plug_holes+0x140>)
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	881a      	ldrh	r2, [r3, #0]
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	881b      	ldrh	r3, [r3, #0]
 8015ab4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015ab8:	d00a      	beq.n	8015ad0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	881b      	ldrh	r3, [r3, #0]
 8015abe:	4618      	mov	r0, r3
 8015ac0:	f7ff ff80 	bl	80159c4 <ptr_to_mem>
 8015ac4:	4604      	mov	r4, r0
 8015ac6:	6878      	ldr	r0, [r7, #4]
 8015ac8:	f7ff ff8e 	bl	80159e8 <mem_to_ptr>
 8015acc:	4603      	mov	r3, r0
 8015ace:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	885b      	ldrh	r3, [r3, #2]
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	f7ff ff75 	bl	80159c4 <ptr_to_mem>
 8015ada:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8015adc:	68ba      	ldr	r2, [r7, #8]
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	429a      	cmp	r2, r3
 8015ae2:	d01f      	beq.n	8015b24 <plug_holes+0x118>
 8015ae4:	68bb      	ldr	r3, [r7, #8]
 8015ae6:	791b      	ldrb	r3, [r3, #4]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d11b      	bne.n	8015b24 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8015aec:	4b17      	ldr	r3, [pc, #92]	; (8015b4c <plug_holes+0x140>)
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	687a      	ldr	r2, [r7, #4]
 8015af2:	429a      	cmp	r2, r3
 8015af4:	d102      	bne.n	8015afc <plug_holes+0xf0>
      lfree = pmem;
 8015af6:	4a15      	ldr	r2, [pc, #84]	; (8015b4c <plug_holes+0x140>)
 8015af8:	68bb      	ldr	r3, [r7, #8]
 8015afa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	881a      	ldrh	r2, [r3, #0]
 8015b00:	68bb      	ldr	r3, [r7, #8]
 8015b02:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	881b      	ldrh	r3, [r3, #0]
 8015b08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015b0c:	d00a      	beq.n	8015b24 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	881b      	ldrh	r3, [r3, #0]
 8015b12:	4618      	mov	r0, r3
 8015b14:	f7ff ff56 	bl	80159c4 <ptr_to_mem>
 8015b18:	4604      	mov	r4, r0
 8015b1a:	68b8      	ldr	r0, [r7, #8]
 8015b1c:	f7ff ff64 	bl	80159e8 <mem_to_ptr>
 8015b20:	4603      	mov	r3, r0
 8015b22:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8015b24:	bf00      	nop
 8015b26:	3714      	adds	r7, #20
 8015b28:	46bd      	mov	sp, r7
 8015b2a:	bd90      	pop	{r4, r7, pc}
 8015b2c:	20009304 	.word	0x20009304
 8015b30:	08021c58 	.word	0x08021c58
 8015b34:	08021c88 	.word	0x08021c88
 8015b38:	08021ca0 	.word	0x08021ca0
 8015b3c:	20009308 	.word	0x20009308
 8015b40:	08021cc8 	.word	0x08021cc8
 8015b44:	08021ce4 	.word	0x08021ce4
 8015b48:	08021d00 	.word	0x08021d00
 8015b4c:	20009310 	.word	0x20009310

08015b50 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b082      	sub	sp, #8
 8015b54:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8015b56:	4b1f      	ldr	r3, [pc, #124]	; (8015bd4 <mem_init+0x84>)
 8015b58:	3303      	adds	r3, #3
 8015b5a:	f023 0303 	bic.w	r3, r3, #3
 8015b5e:	461a      	mov	r2, r3
 8015b60:	4b1d      	ldr	r3, [pc, #116]	; (8015bd8 <mem_init+0x88>)
 8015b62:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8015b64:	4b1c      	ldr	r3, [pc, #112]	; (8015bd8 <mem_init+0x88>)
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8015b70:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	2200      	movs	r2, #0
 8015b76:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8015b7e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8015b82:	f7ff ff1f 	bl	80159c4 <ptr_to_mem>
 8015b86:	4602      	mov	r2, r0
 8015b88:	4b14      	ldr	r3, [pc, #80]	; (8015bdc <mem_init+0x8c>)
 8015b8a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8015b8c:	4b13      	ldr	r3, [pc, #76]	; (8015bdc <mem_init+0x8c>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	2201      	movs	r2, #1
 8015b92:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8015b94:	4b11      	ldr	r3, [pc, #68]	; (8015bdc <mem_init+0x8c>)
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8015b9c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8015b9e:	4b0f      	ldr	r3, [pc, #60]	; (8015bdc <mem_init+0x8c>)
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8015ba6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8015ba8:	4b0b      	ldr	r3, [pc, #44]	; (8015bd8 <mem_init+0x88>)
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	4a0c      	ldr	r2, [pc, #48]	; (8015be0 <mem_init+0x90>)
 8015bae:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8015bb0:	480c      	ldr	r0, [pc, #48]	; (8015be4 <mem_init+0x94>)
 8015bb2:	f00a fbed 	bl	8020390 <sys_mutex_new>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d006      	beq.n	8015bca <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8015bbc:	4b0a      	ldr	r3, [pc, #40]	; (8015be8 <mem_init+0x98>)
 8015bbe:	f240 221f 	movw	r2, #543	; 0x21f
 8015bc2:	490a      	ldr	r1, [pc, #40]	; (8015bec <mem_init+0x9c>)
 8015bc4:	480a      	ldr	r0, [pc, #40]	; (8015bf0 <mem_init+0xa0>)
 8015bc6:	f00a fca5 	bl	8020514 <iprintf>
  }
}
 8015bca:	bf00      	nop
 8015bcc:	3708      	adds	r7, #8
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	bd80      	pop	{r7, pc}
 8015bd2:	bf00      	nop
 8015bd4:	2001c7f4 	.word	0x2001c7f4
 8015bd8:	20009304 	.word	0x20009304
 8015bdc:	20009308 	.word	0x20009308
 8015be0:	20009310 	.word	0x20009310
 8015be4:	2000930c 	.word	0x2000930c
 8015be8:	08021c58 	.word	0x08021c58
 8015bec:	08021d2c 	.word	0x08021d2c
 8015bf0:	08021ca0 	.word	0x08021ca0

08015bf4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b086      	sub	sp, #24
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8015bfc:	6878      	ldr	r0, [r7, #4]
 8015bfe:	f7ff fef3 	bl	80159e8 <mem_to_ptr>
 8015c02:	4603      	mov	r3, r0
 8015c04:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	881b      	ldrh	r3, [r3, #0]
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	f7ff feda 	bl	80159c4 <ptr_to_mem>
 8015c10:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	885b      	ldrh	r3, [r3, #2]
 8015c16:	4618      	mov	r0, r3
 8015c18:	f7ff fed4 	bl	80159c4 <ptr_to_mem>
 8015c1c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	881b      	ldrh	r3, [r3, #0]
 8015c22:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015c26:	d818      	bhi.n	8015c5a <mem_link_valid+0x66>
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	885b      	ldrh	r3, [r3, #2]
 8015c2c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015c30:	d813      	bhi.n	8015c5a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8015c36:	8afa      	ldrh	r2, [r7, #22]
 8015c38:	429a      	cmp	r2, r3
 8015c3a:	d004      	beq.n	8015c46 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	881b      	ldrh	r3, [r3, #0]
 8015c40:	8afa      	ldrh	r2, [r7, #22]
 8015c42:	429a      	cmp	r2, r3
 8015c44:	d109      	bne.n	8015c5a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8015c46:	4b08      	ldr	r3, [pc, #32]	; (8015c68 <mem_link_valid+0x74>)
 8015c48:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8015c4a:	693a      	ldr	r2, [r7, #16]
 8015c4c:	429a      	cmp	r2, r3
 8015c4e:	d006      	beq.n	8015c5e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8015c50:	693b      	ldr	r3, [r7, #16]
 8015c52:	885b      	ldrh	r3, [r3, #2]
 8015c54:	8afa      	ldrh	r2, [r7, #22]
 8015c56:	429a      	cmp	r2, r3
 8015c58:	d001      	beq.n	8015c5e <mem_link_valid+0x6a>
    return 0;
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	e000      	b.n	8015c60 <mem_link_valid+0x6c>
  }
  return 1;
 8015c5e:	2301      	movs	r3, #1
}
 8015c60:	4618      	mov	r0, r3
 8015c62:	3718      	adds	r7, #24
 8015c64:	46bd      	mov	sp, r7
 8015c66:	bd80      	pop	{r7, pc}
 8015c68:	20009308 	.word	0x20009308

08015c6c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b088      	sub	sp, #32
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d070      	beq.n	8015d5c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	f003 0303 	and.w	r3, r3, #3
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d00d      	beq.n	8015ca0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8015c84:	4b37      	ldr	r3, [pc, #220]	; (8015d64 <mem_free+0xf8>)
 8015c86:	f240 2273 	movw	r2, #627	; 0x273
 8015c8a:	4937      	ldr	r1, [pc, #220]	; (8015d68 <mem_free+0xfc>)
 8015c8c:	4837      	ldr	r0, [pc, #220]	; (8015d6c <mem_free+0x100>)
 8015c8e:	f00a fc41 	bl	8020514 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015c92:	f00a fbdb 	bl	802044c <sys_arch_protect>
 8015c96:	60f8      	str	r0, [r7, #12]
 8015c98:	68f8      	ldr	r0, [r7, #12]
 8015c9a:	f00a fbe5 	bl	8020468 <sys_arch_unprotect>
    return;
 8015c9e:	e05e      	b.n	8015d5e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	3b08      	subs	r3, #8
 8015ca4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8015ca6:	4b32      	ldr	r3, [pc, #200]	; (8015d70 <mem_free+0x104>)
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	69fa      	ldr	r2, [r7, #28]
 8015cac:	429a      	cmp	r2, r3
 8015cae:	d306      	bcc.n	8015cbe <mem_free+0x52>
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	f103 020c 	add.w	r2, r3, #12
 8015cb6:	4b2f      	ldr	r3, [pc, #188]	; (8015d74 <mem_free+0x108>)
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	429a      	cmp	r2, r3
 8015cbc:	d90d      	bls.n	8015cda <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8015cbe:	4b29      	ldr	r3, [pc, #164]	; (8015d64 <mem_free+0xf8>)
 8015cc0:	f240 227f 	movw	r2, #639	; 0x27f
 8015cc4:	492c      	ldr	r1, [pc, #176]	; (8015d78 <mem_free+0x10c>)
 8015cc6:	4829      	ldr	r0, [pc, #164]	; (8015d6c <mem_free+0x100>)
 8015cc8:	f00a fc24 	bl	8020514 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015ccc:	f00a fbbe 	bl	802044c <sys_arch_protect>
 8015cd0:	6138      	str	r0, [r7, #16]
 8015cd2:	6938      	ldr	r0, [r7, #16]
 8015cd4:	f00a fbc8 	bl	8020468 <sys_arch_unprotect>
    return;
 8015cd8:	e041      	b.n	8015d5e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8015cda:	4828      	ldr	r0, [pc, #160]	; (8015d7c <mem_free+0x110>)
 8015cdc:	f00a fb74 	bl	80203c8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8015ce0:	69fb      	ldr	r3, [r7, #28]
 8015ce2:	791b      	ldrb	r3, [r3, #4]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d110      	bne.n	8015d0a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8015ce8:	4b1e      	ldr	r3, [pc, #120]	; (8015d64 <mem_free+0xf8>)
 8015cea:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8015cee:	4924      	ldr	r1, [pc, #144]	; (8015d80 <mem_free+0x114>)
 8015cf0:	481e      	ldr	r0, [pc, #120]	; (8015d6c <mem_free+0x100>)
 8015cf2:	f00a fc0f 	bl	8020514 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8015cf6:	4821      	ldr	r0, [pc, #132]	; (8015d7c <mem_free+0x110>)
 8015cf8:	f00a fb75 	bl	80203e6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015cfc:	f00a fba6 	bl	802044c <sys_arch_protect>
 8015d00:	6178      	str	r0, [r7, #20]
 8015d02:	6978      	ldr	r0, [r7, #20]
 8015d04:	f00a fbb0 	bl	8020468 <sys_arch_unprotect>
    return;
 8015d08:	e029      	b.n	8015d5e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8015d0a:	69f8      	ldr	r0, [r7, #28]
 8015d0c:	f7ff ff72 	bl	8015bf4 <mem_link_valid>
 8015d10:	4603      	mov	r3, r0
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d110      	bne.n	8015d38 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8015d16:	4b13      	ldr	r3, [pc, #76]	; (8015d64 <mem_free+0xf8>)
 8015d18:	f240 2295 	movw	r2, #661	; 0x295
 8015d1c:	4919      	ldr	r1, [pc, #100]	; (8015d84 <mem_free+0x118>)
 8015d1e:	4813      	ldr	r0, [pc, #76]	; (8015d6c <mem_free+0x100>)
 8015d20:	f00a fbf8 	bl	8020514 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8015d24:	4815      	ldr	r0, [pc, #84]	; (8015d7c <mem_free+0x110>)
 8015d26:	f00a fb5e 	bl	80203e6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015d2a:	f00a fb8f 	bl	802044c <sys_arch_protect>
 8015d2e:	61b8      	str	r0, [r7, #24]
 8015d30:	69b8      	ldr	r0, [r7, #24]
 8015d32:	f00a fb99 	bl	8020468 <sys_arch_unprotect>
    return;
 8015d36:	e012      	b.n	8015d5e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8015d38:	69fb      	ldr	r3, [r7, #28]
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8015d3e:	4b12      	ldr	r3, [pc, #72]	; (8015d88 <mem_free+0x11c>)
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	69fa      	ldr	r2, [r7, #28]
 8015d44:	429a      	cmp	r2, r3
 8015d46:	d202      	bcs.n	8015d4e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8015d48:	4a0f      	ldr	r2, [pc, #60]	; (8015d88 <mem_free+0x11c>)
 8015d4a:	69fb      	ldr	r3, [r7, #28]
 8015d4c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8015d4e:	69f8      	ldr	r0, [r7, #28]
 8015d50:	f7ff fe5c 	bl	8015a0c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8015d54:	4809      	ldr	r0, [pc, #36]	; (8015d7c <mem_free+0x110>)
 8015d56:	f00a fb46 	bl	80203e6 <sys_mutex_unlock>
 8015d5a:	e000      	b.n	8015d5e <mem_free+0xf2>
    return;
 8015d5c:	bf00      	nop
}
 8015d5e:	3720      	adds	r7, #32
 8015d60:	46bd      	mov	sp, r7
 8015d62:	bd80      	pop	{r7, pc}
 8015d64:	08021c58 	.word	0x08021c58
 8015d68:	08021d48 	.word	0x08021d48
 8015d6c:	08021ca0 	.word	0x08021ca0
 8015d70:	20009304 	.word	0x20009304
 8015d74:	20009308 	.word	0x20009308
 8015d78:	08021d6c 	.word	0x08021d6c
 8015d7c:	2000930c 	.word	0x2000930c
 8015d80:	08021d88 	.word	0x08021d88
 8015d84:	08021db0 	.word	0x08021db0
 8015d88:	20009310 	.word	0x20009310

08015d8c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b088      	sub	sp, #32
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
 8015d94:	460b      	mov	r3, r1
 8015d96:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8015d98:	887b      	ldrh	r3, [r7, #2]
 8015d9a:	3303      	adds	r3, #3
 8015d9c:	b29b      	uxth	r3, r3
 8015d9e:	f023 0303 	bic.w	r3, r3, #3
 8015da2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8015da4:	8bfb      	ldrh	r3, [r7, #30]
 8015da6:	2b0b      	cmp	r3, #11
 8015da8:	d801      	bhi.n	8015dae <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8015daa:	230c      	movs	r3, #12
 8015dac:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8015dae:	8bfb      	ldrh	r3, [r7, #30]
 8015db0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015db4:	d803      	bhi.n	8015dbe <mem_trim+0x32>
 8015db6:	8bfa      	ldrh	r2, [r7, #30]
 8015db8:	887b      	ldrh	r3, [r7, #2]
 8015dba:	429a      	cmp	r2, r3
 8015dbc:	d201      	bcs.n	8015dc2 <mem_trim+0x36>
    return NULL;
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	e0d8      	b.n	8015f74 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8015dc2:	4b6e      	ldr	r3, [pc, #440]	; (8015f7c <mem_trim+0x1f0>)
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	687a      	ldr	r2, [r7, #4]
 8015dc8:	429a      	cmp	r2, r3
 8015dca:	d304      	bcc.n	8015dd6 <mem_trim+0x4a>
 8015dcc:	4b6c      	ldr	r3, [pc, #432]	; (8015f80 <mem_trim+0x1f4>)
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	687a      	ldr	r2, [r7, #4]
 8015dd2:	429a      	cmp	r2, r3
 8015dd4:	d306      	bcc.n	8015de4 <mem_trim+0x58>
 8015dd6:	4b6b      	ldr	r3, [pc, #428]	; (8015f84 <mem_trim+0x1f8>)
 8015dd8:	f240 22d2 	movw	r2, #722	; 0x2d2
 8015ddc:	496a      	ldr	r1, [pc, #424]	; (8015f88 <mem_trim+0x1fc>)
 8015dde:	486b      	ldr	r0, [pc, #428]	; (8015f8c <mem_trim+0x200>)
 8015de0:	f00a fb98 	bl	8020514 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8015de4:	4b65      	ldr	r3, [pc, #404]	; (8015f7c <mem_trim+0x1f0>)
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	687a      	ldr	r2, [r7, #4]
 8015dea:	429a      	cmp	r2, r3
 8015dec:	d304      	bcc.n	8015df8 <mem_trim+0x6c>
 8015dee:	4b64      	ldr	r3, [pc, #400]	; (8015f80 <mem_trim+0x1f4>)
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	687a      	ldr	r2, [r7, #4]
 8015df4:	429a      	cmp	r2, r3
 8015df6:	d307      	bcc.n	8015e08 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015df8:	f00a fb28 	bl	802044c <sys_arch_protect>
 8015dfc:	60b8      	str	r0, [r7, #8]
 8015dfe:	68b8      	ldr	r0, [r7, #8]
 8015e00:	f00a fb32 	bl	8020468 <sys_arch_unprotect>
    return rmem;
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	e0b5      	b.n	8015f74 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	3b08      	subs	r3, #8
 8015e0c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8015e0e:	69b8      	ldr	r0, [r7, #24]
 8015e10:	f7ff fdea 	bl	80159e8 <mem_to_ptr>
 8015e14:	4603      	mov	r3, r0
 8015e16:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8015e18:	69bb      	ldr	r3, [r7, #24]
 8015e1a:	881a      	ldrh	r2, [r3, #0]
 8015e1c:	8afb      	ldrh	r3, [r7, #22]
 8015e1e:	1ad3      	subs	r3, r2, r3
 8015e20:	b29b      	uxth	r3, r3
 8015e22:	3b08      	subs	r3, #8
 8015e24:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8015e26:	8bfa      	ldrh	r2, [r7, #30]
 8015e28:	8abb      	ldrh	r3, [r7, #20]
 8015e2a:	429a      	cmp	r2, r3
 8015e2c:	d906      	bls.n	8015e3c <mem_trim+0xb0>
 8015e2e:	4b55      	ldr	r3, [pc, #340]	; (8015f84 <mem_trim+0x1f8>)
 8015e30:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8015e34:	4956      	ldr	r1, [pc, #344]	; (8015f90 <mem_trim+0x204>)
 8015e36:	4855      	ldr	r0, [pc, #340]	; (8015f8c <mem_trim+0x200>)
 8015e38:	f00a fb6c 	bl	8020514 <iprintf>
  if (newsize > size) {
 8015e3c:	8bfa      	ldrh	r2, [r7, #30]
 8015e3e:	8abb      	ldrh	r3, [r7, #20]
 8015e40:	429a      	cmp	r2, r3
 8015e42:	d901      	bls.n	8015e48 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8015e44:	2300      	movs	r3, #0
 8015e46:	e095      	b.n	8015f74 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8015e48:	8bfa      	ldrh	r2, [r7, #30]
 8015e4a:	8abb      	ldrh	r3, [r7, #20]
 8015e4c:	429a      	cmp	r2, r3
 8015e4e:	d101      	bne.n	8015e54 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	e08f      	b.n	8015f74 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8015e54:	484f      	ldr	r0, [pc, #316]	; (8015f94 <mem_trim+0x208>)
 8015e56:	f00a fab7 	bl	80203c8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8015e5a:	69bb      	ldr	r3, [r7, #24]
 8015e5c:	881b      	ldrh	r3, [r3, #0]
 8015e5e:	4618      	mov	r0, r3
 8015e60:	f7ff fdb0 	bl	80159c4 <ptr_to_mem>
 8015e64:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8015e66:	693b      	ldr	r3, [r7, #16]
 8015e68:	791b      	ldrb	r3, [r3, #4]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d13f      	bne.n	8015eee <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015e6e:	69bb      	ldr	r3, [r7, #24]
 8015e70:	881b      	ldrh	r3, [r3, #0]
 8015e72:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015e76:	d106      	bne.n	8015e86 <mem_trim+0xfa>
 8015e78:	4b42      	ldr	r3, [pc, #264]	; (8015f84 <mem_trim+0x1f8>)
 8015e7a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8015e7e:	4946      	ldr	r1, [pc, #280]	; (8015f98 <mem_trim+0x20c>)
 8015e80:	4842      	ldr	r0, [pc, #264]	; (8015f8c <mem_trim+0x200>)
 8015e82:	f00a fb47 	bl	8020514 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8015e86:	693b      	ldr	r3, [r7, #16]
 8015e88:	881b      	ldrh	r3, [r3, #0]
 8015e8a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015e8c:	8afa      	ldrh	r2, [r7, #22]
 8015e8e:	8bfb      	ldrh	r3, [r7, #30]
 8015e90:	4413      	add	r3, r2
 8015e92:	b29b      	uxth	r3, r3
 8015e94:	3308      	adds	r3, #8
 8015e96:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8015e98:	4b40      	ldr	r3, [pc, #256]	; (8015f9c <mem_trim+0x210>)
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	693a      	ldr	r2, [r7, #16]
 8015e9e:	429a      	cmp	r2, r3
 8015ea0:	d106      	bne.n	8015eb0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8015ea2:	89fb      	ldrh	r3, [r7, #14]
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	f7ff fd8d 	bl	80159c4 <ptr_to_mem>
 8015eaa:	4602      	mov	r2, r0
 8015eac:	4b3b      	ldr	r3, [pc, #236]	; (8015f9c <mem_trim+0x210>)
 8015eae:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8015eb0:	89fb      	ldrh	r3, [r7, #14]
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	f7ff fd86 	bl	80159c4 <ptr_to_mem>
 8015eb8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8015eba:	693b      	ldr	r3, [r7, #16]
 8015ebc:	2200      	movs	r2, #0
 8015ebe:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8015ec0:	693b      	ldr	r3, [r7, #16]
 8015ec2:	89ba      	ldrh	r2, [r7, #12]
 8015ec4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8015ec6:	693b      	ldr	r3, [r7, #16]
 8015ec8:	8afa      	ldrh	r2, [r7, #22]
 8015eca:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8015ecc:	69bb      	ldr	r3, [r7, #24]
 8015ece:	89fa      	ldrh	r2, [r7, #14]
 8015ed0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015ed2:	693b      	ldr	r3, [r7, #16]
 8015ed4:	881b      	ldrh	r3, [r3, #0]
 8015ed6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015eda:	d047      	beq.n	8015f6c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8015edc:	693b      	ldr	r3, [r7, #16]
 8015ede:	881b      	ldrh	r3, [r3, #0]
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f7ff fd6f 	bl	80159c4 <ptr_to_mem>
 8015ee6:	4602      	mov	r2, r0
 8015ee8:	89fb      	ldrh	r3, [r7, #14]
 8015eea:	8053      	strh	r3, [r2, #2]
 8015eec:	e03e      	b.n	8015f6c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8015eee:	8bfb      	ldrh	r3, [r7, #30]
 8015ef0:	f103 0214 	add.w	r2, r3, #20
 8015ef4:	8abb      	ldrh	r3, [r7, #20]
 8015ef6:	429a      	cmp	r2, r3
 8015ef8:	d838      	bhi.n	8015f6c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015efa:	8afa      	ldrh	r2, [r7, #22]
 8015efc:	8bfb      	ldrh	r3, [r7, #30]
 8015efe:	4413      	add	r3, r2
 8015f00:	b29b      	uxth	r3, r3
 8015f02:	3308      	adds	r3, #8
 8015f04:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015f06:	69bb      	ldr	r3, [r7, #24]
 8015f08:	881b      	ldrh	r3, [r3, #0]
 8015f0a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015f0e:	d106      	bne.n	8015f1e <mem_trim+0x192>
 8015f10:	4b1c      	ldr	r3, [pc, #112]	; (8015f84 <mem_trim+0x1f8>)
 8015f12:	f240 3216 	movw	r2, #790	; 0x316
 8015f16:	4920      	ldr	r1, [pc, #128]	; (8015f98 <mem_trim+0x20c>)
 8015f18:	481c      	ldr	r0, [pc, #112]	; (8015f8c <mem_trim+0x200>)
 8015f1a:	f00a fafb 	bl	8020514 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8015f1e:	89fb      	ldrh	r3, [r7, #14]
 8015f20:	4618      	mov	r0, r3
 8015f22:	f7ff fd4f 	bl	80159c4 <ptr_to_mem>
 8015f26:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8015f28:	4b1c      	ldr	r3, [pc, #112]	; (8015f9c <mem_trim+0x210>)
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	693a      	ldr	r2, [r7, #16]
 8015f2e:	429a      	cmp	r2, r3
 8015f30:	d202      	bcs.n	8015f38 <mem_trim+0x1ac>
      lfree = mem2;
 8015f32:	4a1a      	ldr	r2, [pc, #104]	; (8015f9c <mem_trim+0x210>)
 8015f34:	693b      	ldr	r3, [r7, #16]
 8015f36:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8015f38:	693b      	ldr	r3, [r7, #16]
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8015f3e:	69bb      	ldr	r3, [r7, #24]
 8015f40:	881a      	ldrh	r2, [r3, #0]
 8015f42:	693b      	ldr	r3, [r7, #16]
 8015f44:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8015f46:	693b      	ldr	r3, [r7, #16]
 8015f48:	8afa      	ldrh	r2, [r7, #22]
 8015f4a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8015f4c:	69bb      	ldr	r3, [r7, #24]
 8015f4e:	89fa      	ldrh	r2, [r7, #14]
 8015f50:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015f52:	693b      	ldr	r3, [r7, #16]
 8015f54:	881b      	ldrh	r3, [r3, #0]
 8015f56:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015f5a:	d007      	beq.n	8015f6c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8015f5c:	693b      	ldr	r3, [r7, #16]
 8015f5e:	881b      	ldrh	r3, [r3, #0]
 8015f60:	4618      	mov	r0, r3
 8015f62:	f7ff fd2f 	bl	80159c4 <ptr_to_mem>
 8015f66:	4602      	mov	r2, r0
 8015f68:	89fb      	ldrh	r3, [r7, #14]
 8015f6a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8015f6c:	4809      	ldr	r0, [pc, #36]	; (8015f94 <mem_trim+0x208>)
 8015f6e:	f00a fa3a 	bl	80203e6 <sys_mutex_unlock>
  return rmem;
 8015f72:	687b      	ldr	r3, [r7, #4]
}
 8015f74:	4618      	mov	r0, r3
 8015f76:	3720      	adds	r7, #32
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd80      	pop	{r7, pc}
 8015f7c:	20009304 	.word	0x20009304
 8015f80:	20009308 	.word	0x20009308
 8015f84:	08021c58 	.word	0x08021c58
 8015f88:	08021de4 	.word	0x08021de4
 8015f8c:	08021ca0 	.word	0x08021ca0
 8015f90:	08021dfc 	.word	0x08021dfc
 8015f94:	2000930c 	.word	0x2000930c
 8015f98:	08021e1c 	.word	0x08021e1c
 8015f9c:	20009310 	.word	0x20009310

08015fa0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b088      	sub	sp, #32
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8015faa:	88fb      	ldrh	r3, [r7, #6]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d101      	bne.n	8015fb4 <mem_malloc+0x14>
    return NULL;
 8015fb0:	2300      	movs	r3, #0
 8015fb2:	e0e2      	b.n	801617a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8015fb4:	88fb      	ldrh	r3, [r7, #6]
 8015fb6:	3303      	adds	r3, #3
 8015fb8:	b29b      	uxth	r3, r3
 8015fba:	f023 0303 	bic.w	r3, r3, #3
 8015fbe:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8015fc0:	8bbb      	ldrh	r3, [r7, #28]
 8015fc2:	2b0b      	cmp	r3, #11
 8015fc4:	d801      	bhi.n	8015fca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8015fc6:	230c      	movs	r3, #12
 8015fc8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8015fca:	8bbb      	ldrh	r3, [r7, #28]
 8015fcc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015fd0:	d803      	bhi.n	8015fda <mem_malloc+0x3a>
 8015fd2:	8bba      	ldrh	r2, [r7, #28]
 8015fd4:	88fb      	ldrh	r3, [r7, #6]
 8015fd6:	429a      	cmp	r2, r3
 8015fd8:	d201      	bcs.n	8015fde <mem_malloc+0x3e>
    return NULL;
 8015fda:	2300      	movs	r3, #0
 8015fdc:	e0cd      	b.n	801617a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8015fde:	4869      	ldr	r0, [pc, #420]	; (8016184 <mem_malloc+0x1e4>)
 8015fe0:	f00a f9f2 	bl	80203c8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015fe4:	4b68      	ldr	r3, [pc, #416]	; (8016188 <mem_malloc+0x1e8>)
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	4618      	mov	r0, r3
 8015fea:	f7ff fcfd 	bl	80159e8 <mem_to_ptr>
 8015fee:	4603      	mov	r3, r0
 8015ff0:	83fb      	strh	r3, [r7, #30]
 8015ff2:	e0b7      	b.n	8016164 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8015ff4:	8bfb      	ldrh	r3, [r7, #30]
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	f7ff fce4 	bl	80159c4 <ptr_to_mem>
 8015ffc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8015ffe:	697b      	ldr	r3, [r7, #20]
 8016000:	791b      	ldrb	r3, [r3, #4]
 8016002:	2b00      	cmp	r3, #0
 8016004:	f040 80a7 	bne.w	8016156 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8016008:	697b      	ldr	r3, [r7, #20]
 801600a:	881b      	ldrh	r3, [r3, #0]
 801600c:	461a      	mov	r2, r3
 801600e:	8bfb      	ldrh	r3, [r7, #30]
 8016010:	1ad3      	subs	r3, r2, r3
 8016012:	f1a3 0208 	sub.w	r2, r3, #8
 8016016:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8016018:	429a      	cmp	r2, r3
 801601a:	f0c0 809c 	bcc.w	8016156 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801601e:	697b      	ldr	r3, [r7, #20]
 8016020:	881b      	ldrh	r3, [r3, #0]
 8016022:	461a      	mov	r2, r3
 8016024:	8bfb      	ldrh	r3, [r7, #30]
 8016026:	1ad3      	subs	r3, r2, r3
 8016028:	f1a3 0208 	sub.w	r2, r3, #8
 801602c:	8bbb      	ldrh	r3, [r7, #28]
 801602e:	3314      	adds	r3, #20
 8016030:	429a      	cmp	r2, r3
 8016032:	d333      	bcc.n	801609c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8016034:	8bfa      	ldrh	r2, [r7, #30]
 8016036:	8bbb      	ldrh	r3, [r7, #28]
 8016038:	4413      	add	r3, r2
 801603a:	b29b      	uxth	r3, r3
 801603c:	3308      	adds	r3, #8
 801603e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8016040:	8a7b      	ldrh	r3, [r7, #18]
 8016042:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016046:	d106      	bne.n	8016056 <mem_malloc+0xb6>
 8016048:	4b50      	ldr	r3, [pc, #320]	; (801618c <mem_malloc+0x1ec>)
 801604a:	f240 3287 	movw	r2, #903	; 0x387
 801604e:	4950      	ldr	r1, [pc, #320]	; (8016190 <mem_malloc+0x1f0>)
 8016050:	4850      	ldr	r0, [pc, #320]	; (8016194 <mem_malloc+0x1f4>)
 8016052:	f00a fa5f 	bl	8020514 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8016056:	8a7b      	ldrh	r3, [r7, #18]
 8016058:	4618      	mov	r0, r3
 801605a:	f7ff fcb3 	bl	80159c4 <ptr_to_mem>
 801605e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	2200      	movs	r2, #0
 8016064:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8016066:	697b      	ldr	r3, [r7, #20]
 8016068:	881a      	ldrh	r2, [r3, #0]
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	8bfa      	ldrh	r2, [r7, #30]
 8016072:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8016074:	697b      	ldr	r3, [r7, #20]
 8016076:	8a7a      	ldrh	r2, [r7, #18]
 8016078:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801607a:	697b      	ldr	r3, [r7, #20]
 801607c:	2201      	movs	r2, #1
 801607e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	881b      	ldrh	r3, [r3, #0]
 8016084:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016088:	d00b      	beq.n	80160a2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	881b      	ldrh	r3, [r3, #0]
 801608e:	4618      	mov	r0, r3
 8016090:	f7ff fc98 	bl	80159c4 <ptr_to_mem>
 8016094:	4602      	mov	r2, r0
 8016096:	8a7b      	ldrh	r3, [r7, #18]
 8016098:	8053      	strh	r3, [r2, #2]
 801609a:	e002      	b.n	80160a2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801609c:	697b      	ldr	r3, [r7, #20]
 801609e:	2201      	movs	r2, #1
 80160a0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80160a2:	4b39      	ldr	r3, [pc, #228]	; (8016188 <mem_malloc+0x1e8>)
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	697a      	ldr	r2, [r7, #20]
 80160a8:	429a      	cmp	r2, r3
 80160aa:	d127      	bne.n	80160fc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80160ac:	4b36      	ldr	r3, [pc, #216]	; (8016188 <mem_malloc+0x1e8>)
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80160b2:	e005      	b.n	80160c0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80160b4:	69bb      	ldr	r3, [r7, #24]
 80160b6:	881b      	ldrh	r3, [r3, #0]
 80160b8:	4618      	mov	r0, r3
 80160ba:	f7ff fc83 	bl	80159c4 <ptr_to_mem>
 80160be:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80160c0:	69bb      	ldr	r3, [r7, #24]
 80160c2:	791b      	ldrb	r3, [r3, #4]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d004      	beq.n	80160d2 <mem_malloc+0x132>
 80160c8:	4b33      	ldr	r3, [pc, #204]	; (8016198 <mem_malloc+0x1f8>)
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	69ba      	ldr	r2, [r7, #24]
 80160ce:	429a      	cmp	r2, r3
 80160d0:	d1f0      	bne.n	80160b4 <mem_malloc+0x114>
          }
          lfree = cur;
 80160d2:	4a2d      	ldr	r2, [pc, #180]	; (8016188 <mem_malloc+0x1e8>)
 80160d4:	69bb      	ldr	r3, [r7, #24]
 80160d6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80160d8:	4b2b      	ldr	r3, [pc, #172]	; (8016188 <mem_malloc+0x1e8>)
 80160da:	681a      	ldr	r2, [r3, #0]
 80160dc:	4b2e      	ldr	r3, [pc, #184]	; (8016198 <mem_malloc+0x1f8>)
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	429a      	cmp	r2, r3
 80160e2:	d00b      	beq.n	80160fc <mem_malloc+0x15c>
 80160e4:	4b28      	ldr	r3, [pc, #160]	; (8016188 <mem_malloc+0x1e8>)
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	791b      	ldrb	r3, [r3, #4]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d006      	beq.n	80160fc <mem_malloc+0x15c>
 80160ee:	4b27      	ldr	r3, [pc, #156]	; (801618c <mem_malloc+0x1ec>)
 80160f0:	f240 32b5 	movw	r2, #949	; 0x3b5
 80160f4:	4929      	ldr	r1, [pc, #164]	; (801619c <mem_malloc+0x1fc>)
 80160f6:	4827      	ldr	r0, [pc, #156]	; (8016194 <mem_malloc+0x1f4>)
 80160f8:	f00a fa0c 	bl	8020514 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80160fc:	4821      	ldr	r0, [pc, #132]	; (8016184 <mem_malloc+0x1e4>)
 80160fe:	f00a f972 	bl	80203e6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8016102:	8bba      	ldrh	r2, [r7, #28]
 8016104:	697b      	ldr	r3, [r7, #20]
 8016106:	4413      	add	r3, r2
 8016108:	3308      	adds	r3, #8
 801610a:	4a23      	ldr	r2, [pc, #140]	; (8016198 <mem_malloc+0x1f8>)
 801610c:	6812      	ldr	r2, [r2, #0]
 801610e:	4293      	cmp	r3, r2
 8016110:	d906      	bls.n	8016120 <mem_malloc+0x180>
 8016112:	4b1e      	ldr	r3, [pc, #120]	; (801618c <mem_malloc+0x1ec>)
 8016114:	f240 32ba 	movw	r2, #954	; 0x3ba
 8016118:	4921      	ldr	r1, [pc, #132]	; (80161a0 <mem_malloc+0x200>)
 801611a:	481e      	ldr	r0, [pc, #120]	; (8016194 <mem_malloc+0x1f4>)
 801611c:	f00a f9fa 	bl	8020514 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8016120:	697b      	ldr	r3, [r7, #20]
 8016122:	f003 0303 	and.w	r3, r3, #3
 8016126:	2b00      	cmp	r3, #0
 8016128:	d006      	beq.n	8016138 <mem_malloc+0x198>
 801612a:	4b18      	ldr	r3, [pc, #96]	; (801618c <mem_malloc+0x1ec>)
 801612c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8016130:	491c      	ldr	r1, [pc, #112]	; (80161a4 <mem_malloc+0x204>)
 8016132:	4818      	ldr	r0, [pc, #96]	; (8016194 <mem_malloc+0x1f4>)
 8016134:	f00a f9ee 	bl	8020514 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8016138:	697b      	ldr	r3, [r7, #20]
 801613a:	f003 0303 	and.w	r3, r3, #3
 801613e:	2b00      	cmp	r3, #0
 8016140:	d006      	beq.n	8016150 <mem_malloc+0x1b0>
 8016142:	4b12      	ldr	r3, [pc, #72]	; (801618c <mem_malloc+0x1ec>)
 8016144:	f240 32be 	movw	r2, #958	; 0x3be
 8016148:	4917      	ldr	r1, [pc, #92]	; (80161a8 <mem_malloc+0x208>)
 801614a:	4812      	ldr	r0, [pc, #72]	; (8016194 <mem_malloc+0x1f4>)
 801614c:	f00a f9e2 	bl	8020514 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8016150:	697b      	ldr	r3, [r7, #20]
 8016152:	3308      	adds	r3, #8
 8016154:	e011      	b.n	801617a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8016156:	8bfb      	ldrh	r3, [r7, #30]
 8016158:	4618      	mov	r0, r3
 801615a:	f7ff fc33 	bl	80159c4 <ptr_to_mem>
 801615e:	4603      	mov	r3, r0
 8016160:	881b      	ldrh	r3, [r3, #0]
 8016162:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8016164:	8bfa      	ldrh	r2, [r7, #30]
 8016166:	8bbb      	ldrh	r3, [r7, #28]
 8016168:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801616c:	429a      	cmp	r2, r3
 801616e:	f4ff af41 	bcc.w	8015ff4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8016172:	4804      	ldr	r0, [pc, #16]	; (8016184 <mem_malloc+0x1e4>)
 8016174:	f00a f937 	bl	80203e6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8016178:	2300      	movs	r3, #0
}
 801617a:	4618      	mov	r0, r3
 801617c:	3720      	adds	r7, #32
 801617e:	46bd      	mov	sp, r7
 8016180:	bd80      	pop	{r7, pc}
 8016182:	bf00      	nop
 8016184:	2000930c 	.word	0x2000930c
 8016188:	20009310 	.word	0x20009310
 801618c:	08021c58 	.word	0x08021c58
 8016190:	08021e1c 	.word	0x08021e1c
 8016194:	08021ca0 	.word	0x08021ca0
 8016198:	20009308 	.word	0x20009308
 801619c:	08021e30 	.word	0x08021e30
 80161a0:	08021e4c 	.word	0x08021e4c
 80161a4:	08021e7c 	.word	0x08021e7c
 80161a8:	08021eac 	.word	0x08021eac

080161ac <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80161ac:	b480      	push	{r7}
 80161ae:	b085      	sub	sp, #20
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	689b      	ldr	r3, [r3, #8]
 80161b8:	2200      	movs	r2, #0
 80161ba:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	685b      	ldr	r3, [r3, #4]
 80161c0:	3303      	adds	r3, #3
 80161c2:	f023 0303 	bic.w	r3, r3, #3
 80161c6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80161c8:	2300      	movs	r3, #0
 80161ca:	60fb      	str	r3, [r7, #12]
 80161cc:	e011      	b.n	80161f2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	689b      	ldr	r3, [r3, #8]
 80161d2:	681a      	ldr	r2, [r3, #0]
 80161d4:	68bb      	ldr	r3, [r7, #8]
 80161d6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	689b      	ldr	r3, [r3, #8]
 80161dc:	68ba      	ldr	r2, [r7, #8]
 80161de:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	881b      	ldrh	r3, [r3, #0]
 80161e4:	461a      	mov	r2, r3
 80161e6:	68bb      	ldr	r3, [r7, #8]
 80161e8:	4413      	add	r3, r2
 80161ea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	3301      	adds	r3, #1
 80161f0:	60fb      	str	r3, [r7, #12]
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	885b      	ldrh	r3, [r3, #2]
 80161f6:	461a      	mov	r2, r3
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	4293      	cmp	r3, r2
 80161fc:	dbe7      	blt.n	80161ce <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80161fe:	bf00      	nop
 8016200:	3714      	adds	r7, #20
 8016202:	46bd      	mov	sp, r7
 8016204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016208:	4770      	bx	lr
	...

0801620c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801620c:	b580      	push	{r7, lr}
 801620e:	b082      	sub	sp, #8
 8016210:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8016212:	2300      	movs	r3, #0
 8016214:	80fb      	strh	r3, [r7, #6]
 8016216:	e009      	b.n	801622c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8016218:	88fb      	ldrh	r3, [r7, #6]
 801621a:	4a08      	ldr	r2, [pc, #32]	; (801623c <memp_init+0x30>)
 801621c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016220:	4618      	mov	r0, r3
 8016222:	f7ff ffc3 	bl	80161ac <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8016226:	88fb      	ldrh	r3, [r7, #6]
 8016228:	3301      	adds	r3, #1
 801622a:	80fb      	strh	r3, [r7, #6]
 801622c:	88fb      	ldrh	r3, [r7, #6]
 801622e:	2b0c      	cmp	r3, #12
 8016230:	d9f2      	bls.n	8016218 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8016232:	bf00      	nop
 8016234:	3708      	adds	r7, #8
 8016236:	46bd      	mov	sp, r7
 8016238:	bd80      	pop	{r7, pc}
 801623a:	bf00      	nop
 801623c:	080351fc 	.word	0x080351fc

08016240 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8016240:	b580      	push	{r7, lr}
 8016242:	b084      	sub	sp, #16
 8016244:	af00      	add	r7, sp, #0
 8016246:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8016248:	f00a f900 	bl	802044c <sys_arch_protect>
 801624c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	689b      	ldr	r3, [r3, #8]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8016256:	68bb      	ldr	r3, [r7, #8]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d015      	beq.n	8016288 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	689b      	ldr	r3, [r3, #8]
 8016260:	68ba      	ldr	r2, [r7, #8]
 8016262:	6812      	ldr	r2, [r2, #0]
 8016264:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8016266:	68bb      	ldr	r3, [r7, #8]
 8016268:	f003 0303 	and.w	r3, r3, #3
 801626c:	2b00      	cmp	r3, #0
 801626e:	d006      	beq.n	801627e <do_memp_malloc_pool+0x3e>
 8016270:	4b09      	ldr	r3, [pc, #36]	; (8016298 <do_memp_malloc_pool+0x58>)
 8016272:	f240 1219 	movw	r2, #281	; 0x119
 8016276:	4909      	ldr	r1, [pc, #36]	; (801629c <do_memp_malloc_pool+0x5c>)
 8016278:	4809      	ldr	r0, [pc, #36]	; (80162a0 <do_memp_malloc_pool+0x60>)
 801627a:	f00a f94b 	bl	8020514 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801627e:	68f8      	ldr	r0, [r7, #12]
 8016280:	f00a f8f2 	bl	8020468 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8016284:	68bb      	ldr	r3, [r7, #8]
 8016286:	e003      	b.n	8016290 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8016288:	68f8      	ldr	r0, [r7, #12]
 801628a:	f00a f8ed 	bl	8020468 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801628e:	2300      	movs	r3, #0
}
 8016290:	4618      	mov	r0, r3
 8016292:	3710      	adds	r7, #16
 8016294:	46bd      	mov	sp, r7
 8016296:	bd80      	pop	{r7, pc}
 8016298:	08021ed0 	.word	0x08021ed0
 801629c:	08021f00 	.word	0x08021f00
 80162a0:	08021f24 	.word	0x08021f24

080162a4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b084      	sub	sp, #16
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	4603      	mov	r3, r0
 80162ac:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80162ae:	79fb      	ldrb	r3, [r7, #7]
 80162b0:	2b0c      	cmp	r3, #12
 80162b2:	d908      	bls.n	80162c6 <memp_malloc+0x22>
 80162b4:	4b0a      	ldr	r3, [pc, #40]	; (80162e0 <memp_malloc+0x3c>)
 80162b6:	f240 1257 	movw	r2, #343	; 0x157
 80162ba:	490a      	ldr	r1, [pc, #40]	; (80162e4 <memp_malloc+0x40>)
 80162bc:	480a      	ldr	r0, [pc, #40]	; (80162e8 <memp_malloc+0x44>)
 80162be:	f00a f929 	bl	8020514 <iprintf>
 80162c2:	2300      	movs	r3, #0
 80162c4:	e008      	b.n	80162d8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80162c6:	79fb      	ldrb	r3, [r7, #7]
 80162c8:	4a08      	ldr	r2, [pc, #32]	; (80162ec <memp_malloc+0x48>)
 80162ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80162ce:	4618      	mov	r0, r3
 80162d0:	f7ff ffb6 	bl	8016240 <do_memp_malloc_pool>
 80162d4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80162d6:	68fb      	ldr	r3, [r7, #12]
}
 80162d8:	4618      	mov	r0, r3
 80162da:	3710      	adds	r7, #16
 80162dc:	46bd      	mov	sp, r7
 80162de:	bd80      	pop	{r7, pc}
 80162e0:	08021ed0 	.word	0x08021ed0
 80162e4:	08021f60 	.word	0x08021f60
 80162e8:	08021f24 	.word	0x08021f24
 80162ec:	080351fc 	.word	0x080351fc

080162f0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80162f0:	b580      	push	{r7, lr}
 80162f2:	b084      	sub	sp, #16
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	6078      	str	r0, [r7, #4]
 80162f8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80162fa:	683b      	ldr	r3, [r7, #0]
 80162fc:	f003 0303 	and.w	r3, r3, #3
 8016300:	2b00      	cmp	r3, #0
 8016302:	d006      	beq.n	8016312 <do_memp_free_pool+0x22>
 8016304:	4b0d      	ldr	r3, [pc, #52]	; (801633c <do_memp_free_pool+0x4c>)
 8016306:	f240 126d 	movw	r2, #365	; 0x16d
 801630a:	490d      	ldr	r1, [pc, #52]	; (8016340 <do_memp_free_pool+0x50>)
 801630c:	480d      	ldr	r0, [pc, #52]	; (8016344 <do_memp_free_pool+0x54>)
 801630e:	f00a f901 	bl	8020514 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8016312:	683b      	ldr	r3, [r7, #0]
 8016314:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8016316:	f00a f899 	bl	802044c <sys_arch_protect>
 801631a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	689b      	ldr	r3, [r3, #8]
 8016320:	681a      	ldr	r2, [r3, #0]
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	689b      	ldr	r3, [r3, #8]
 801632a:	68fa      	ldr	r2, [r7, #12]
 801632c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801632e:	68b8      	ldr	r0, [r7, #8]
 8016330:	f00a f89a 	bl	8020468 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8016334:	bf00      	nop
 8016336:	3710      	adds	r7, #16
 8016338:	46bd      	mov	sp, r7
 801633a:	bd80      	pop	{r7, pc}
 801633c:	08021ed0 	.word	0x08021ed0
 8016340:	08021f80 	.word	0x08021f80
 8016344:	08021f24 	.word	0x08021f24

08016348 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b082      	sub	sp, #8
 801634c:	af00      	add	r7, sp, #0
 801634e:	4603      	mov	r3, r0
 8016350:	6039      	str	r1, [r7, #0]
 8016352:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8016354:	79fb      	ldrb	r3, [r7, #7]
 8016356:	2b0c      	cmp	r3, #12
 8016358:	d907      	bls.n	801636a <memp_free+0x22>
 801635a:	4b0c      	ldr	r3, [pc, #48]	; (801638c <memp_free+0x44>)
 801635c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8016360:	490b      	ldr	r1, [pc, #44]	; (8016390 <memp_free+0x48>)
 8016362:	480c      	ldr	r0, [pc, #48]	; (8016394 <memp_free+0x4c>)
 8016364:	f00a f8d6 	bl	8020514 <iprintf>
 8016368:	e00c      	b.n	8016384 <memp_free+0x3c>

  if (mem == NULL) {
 801636a:	683b      	ldr	r3, [r7, #0]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d008      	beq.n	8016382 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8016370:	79fb      	ldrb	r3, [r7, #7]
 8016372:	4a09      	ldr	r2, [pc, #36]	; (8016398 <memp_free+0x50>)
 8016374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016378:	6839      	ldr	r1, [r7, #0]
 801637a:	4618      	mov	r0, r3
 801637c:	f7ff ffb8 	bl	80162f0 <do_memp_free_pool>
 8016380:	e000      	b.n	8016384 <memp_free+0x3c>
    return;
 8016382:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8016384:	3708      	adds	r7, #8
 8016386:	46bd      	mov	sp, r7
 8016388:	bd80      	pop	{r7, pc}
 801638a:	bf00      	nop
 801638c:	08021ed0 	.word	0x08021ed0
 8016390:	08021fa0 	.word	0x08021fa0
 8016394:	08021f24 	.word	0x08021f24
 8016398:	080351fc 	.word	0x080351fc

0801639c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801639c:	b480      	push	{r7}
 801639e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80163a0:	bf00      	nop
 80163a2:	46bd      	mov	sp, r7
 80163a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a8:	4770      	bx	lr
	...

080163ac <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80163ac:	b580      	push	{r7, lr}
 80163ae:	b086      	sub	sp, #24
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	60f8      	str	r0, [r7, #12]
 80163b4:	60b9      	str	r1, [r7, #8]
 80163b6:	607a      	str	r2, [r7, #4]
 80163b8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d108      	bne.n	80163d2 <netif_add+0x26>
 80163c0:	4b57      	ldr	r3, [pc, #348]	; (8016520 <netif_add+0x174>)
 80163c2:	f240 1227 	movw	r2, #295	; 0x127
 80163c6:	4957      	ldr	r1, [pc, #348]	; (8016524 <netif_add+0x178>)
 80163c8:	4857      	ldr	r0, [pc, #348]	; (8016528 <netif_add+0x17c>)
 80163ca:	f00a f8a3 	bl	8020514 <iprintf>
 80163ce:	2300      	movs	r3, #0
 80163d0:	e0a2      	b.n	8016518 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80163d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d108      	bne.n	80163ea <netif_add+0x3e>
 80163d8:	4b51      	ldr	r3, [pc, #324]	; (8016520 <netif_add+0x174>)
 80163da:	f44f 7294 	mov.w	r2, #296	; 0x128
 80163de:	4953      	ldr	r1, [pc, #332]	; (801652c <netif_add+0x180>)
 80163e0:	4851      	ldr	r0, [pc, #324]	; (8016528 <netif_add+0x17c>)
 80163e2:	f00a f897 	bl	8020514 <iprintf>
 80163e6:	2300      	movs	r3, #0
 80163e8:	e096      	b.n	8016518 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80163ea:	68bb      	ldr	r3, [r7, #8]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d101      	bne.n	80163f4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80163f0:	4b4f      	ldr	r3, [pc, #316]	; (8016530 <netif_add+0x184>)
 80163f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d101      	bne.n	80163fe <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80163fa:	4b4d      	ldr	r3, [pc, #308]	; (8016530 <netif_add+0x184>)
 80163fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80163fe:	683b      	ldr	r3, [r7, #0]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d101      	bne.n	8016408 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8016404:	4b4a      	ldr	r3, [pc, #296]	; (8016530 <netif_add+0x184>)
 8016406:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	2200      	movs	r2, #0
 801640c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	2200      	movs	r2, #0
 8016412:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	2200      	movs	r2, #0
 8016418:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	4a45      	ldr	r2, [pc, #276]	; (8016534 <netif_add+0x188>)
 801641e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	2200      	movs	r2, #0
 8016424:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	2200      	movs	r2, #0
 801642a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	2200      	movs	r2, #0
 8016432:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	6a3a      	ldr	r2, [r7, #32]
 8016438:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801643a:	4b3f      	ldr	r3, [pc, #252]	; (8016538 <netif_add+0x18c>)
 801643c:	781a      	ldrb	r2, [r3, #0]
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016448:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801644a:	683b      	ldr	r3, [r7, #0]
 801644c:	687a      	ldr	r2, [r7, #4]
 801644e:	68b9      	ldr	r1, [r7, #8]
 8016450:	68f8      	ldr	r0, [r7, #12]
 8016452:	f000 f913 	bl	801667c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8016456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016458:	68f8      	ldr	r0, [r7, #12]
 801645a:	4798      	blx	r3
 801645c:	4603      	mov	r3, r0
 801645e:	2b00      	cmp	r3, #0
 8016460:	d001      	beq.n	8016466 <netif_add+0xba>
    return NULL;
 8016462:	2300      	movs	r3, #0
 8016464:	e058      	b.n	8016518 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801646c:	2bff      	cmp	r3, #255	; 0xff
 801646e:	d103      	bne.n	8016478 <netif_add+0xcc>
        netif->num = 0;
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	2200      	movs	r2, #0
 8016474:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8016478:	2300      	movs	r3, #0
 801647a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801647c:	4b2f      	ldr	r3, [pc, #188]	; (801653c <netif_add+0x190>)
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	617b      	str	r3, [r7, #20]
 8016482:	e02b      	b.n	80164dc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8016484:	697a      	ldr	r2, [r7, #20]
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	429a      	cmp	r2, r3
 801648a:	d106      	bne.n	801649a <netif_add+0xee>
 801648c:	4b24      	ldr	r3, [pc, #144]	; (8016520 <netif_add+0x174>)
 801648e:	f240 128b 	movw	r2, #395	; 0x18b
 8016492:	492b      	ldr	r1, [pc, #172]	; (8016540 <netif_add+0x194>)
 8016494:	4824      	ldr	r0, [pc, #144]	; (8016528 <netif_add+0x17c>)
 8016496:	f00a f83d 	bl	8020514 <iprintf>
        num_netifs++;
 801649a:	693b      	ldr	r3, [r7, #16]
 801649c:	3301      	adds	r3, #1
 801649e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80164a0:	693b      	ldr	r3, [r7, #16]
 80164a2:	2bff      	cmp	r3, #255	; 0xff
 80164a4:	dd06      	ble.n	80164b4 <netif_add+0x108>
 80164a6:	4b1e      	ldr	r3, [pc, #120]	; (8016520 <netif_add+0x174>)
 80164a8:	f240 128d 	movw	r2, #397	; 0x18d
 80164ac:	4925      	ldr	r1, [pc, #148]	; (8016544 <netif_add+0x198>)
 80164ae:	481e      	ldr	r0, [pc, #120]	; (8016528 <netif_add+0x17c>)
 80164b0:	f00a f830 	bl	8020514 <iprintf>
        if (netif2->num == netif->num) {
 80164b4:	697b      	ldr	r3, [r7, #20]
 80164b6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80164c0:	429a      	cmp	r2, r3
 80164c2:	d108      	bne.n	80164d6 <netif_add+0x12a>
          netif->num++;
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80164ca:	3301      	adds	r3, #1
 80164cc:	b2da      	uxtb	r2, r3
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80164d4:	e005      	b.n	80164e2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80164d6:	697b      	ldr	r3, [r7, #20]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	617b      	str	r3, [r7, #20]
 80164dc:	697b      	ldr	r3, [r7, #20]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d1d0      	bne.n	8016484 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80164e2:	697b      	ldr	r3, [r7, #20]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d1be      	bne.n	8016466 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80164ee:	2bfe      	cmp	r3, #254	; 0xfe
 80164f0:	d103      	bne.n	80164fa <netif_add+0x14e>
    netif_num = 0;
 80164f2:	4b11      	ldr	r3, [pc, #68]	; (8016538 <netif_add+0x18c>)
 80164f4:	2200      	movs	r2, #0
 80164f6:	701a      	strb	r2, [r3, #0]
 80164f8:	e006      	b.n	8016508 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016500:	3301      	adds	r3, #1
 8016502:	b2da      	uxtb	r2, r3
 8016504:	4b0c      	ldr	r3, [pc, #48]	; (8016538 <netif_add+0x18c>)
 8016506:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8016508:	4b0c      	ldr	r3, [pc, #48]	; (801653c <netif_add+0x190>)
 801650a:	681a      	ldr	r2, [r3, #0]
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8016510:	4a0a      	ldr	r2, [pc, #40]	; (801653c <netif_add+0x190>)
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8016516:	68fb      	ldr	r3, [r7, #12]
}
 8016518:	4618      	mov	r0, r3
 801651a:	3718      	adds	r7, #24
 801651c:	46bd      	mov	sp, r7
 801651e:	bd80      	pop	{r7, pc}
 8016520:	08021fbc 	.word	0x08021fbc
 8016524:	08022050 	.word	0x08022050
 8016528:	0802200c 	.word	0x0802200c
 801652c:	0802206c 	.word	0x0802206c
 8016530:	08035270 	.word	0x08035270
 8016534:	08016957 	.word	0x08016957
 8016538:	20009348 	.word	0x20009348
 801653c:	2001fee0 	.word	0x2001fee0
 8016540:	08022090 	.word	0x08022090
 8016544:	080220a4 	.word	0x080220a4

08016548 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b082      	sub	sp, #8
 801654c:	af00      	add	r7, sp, #0
 801654e:	6078      	str	r0, [r7, #4]
 8016550:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8016552:	6839      	ldr	r1, [r7, #0]
 8016554:	6878      	ldr	r0, [r7, #4]
 8016556:	f002 fe1b 	bl	8019190 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801655a:	6839      	ldr	r1, [r7, #0]
 801655c:	6878      	ldr	r0, [r7, #4]
 801655e:	f007 fb93 	bl	801dc88 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8016562:	bf00      	nop
 8016564:	3708      	adds	r7, #8
 8016566:	46bd      	mov	sp, r7
 8016568:	bd80      	pop	{r7, pc}
	...

0801656c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b086      	sub	sp, #24
 8016570:	af00      	add	r7, sp, #0
 8016572:	60f8      	str	r0, [r7, #12]
 8016574:	60b9      	str	r1, [r7, #8]
 8016576:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8016578:	68bb      	ldr	r3, [r7, #8]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d106      	bne.n	801658c <netif_do_set_ipaddr+0x20>
 801657e:	4b1d      	ldr	r3, [pc, #116]	; (80165f4 <netif_do_set_ipaddr+0x88>)
 8016580:	f240 12cb 	movw	r2, #459	; 0x1cb
 8016584:	491c      	ldr	r1, [pc, #112]	; (80165f8 <netif_do_set_ipaddr+0x8c>)
 8016586:	481d      	ldr	r0, [pc, #116]	; (80165fc <netif_do_set_ipaddr+0x90>)
 8016588:	f009 ffc4 	bl	8020514 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d106      	bne.n	80165a0 <netif_do_set_ipaddr+0x34>
 8016592:	4b18      	ldr	r3, [pc, #96]	; (80165f4 <netif_do_set_ipaddr+0x88>)
 8016594:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8016598:	4917      	ldr	r1, [pc, #92]	; (80165f8 <netif_do_set_ipaddr+0x8c>)
 801659a:	4818      	ldr	r0, [pc, #96]	; (80165fc <netif_do_set_ipaddr+0x90>)
 801659c:	f009 ffba 	bl	8020514 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80165a0:	68bb      	ldr	r3, [r7, #8]
 80165a2:	681a      	ldr	r2, [r3, #0]
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	3304      	adds	r3, #4
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	429a      	cmp	r2, r3
 80165ac:	d01c      	beq.n	80165e8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80165ae:	68bb      	ldr	r3, [r7, #8]
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	3304      	adds	r3, #4
 80165b8:	681a      	ldr	r2, [r3, #0]
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80165be:	f107 0314 	add.w	r3, r7, #20
 80165c2:	4619      	mov	r1, r3
 80165c4:	6878      	ldr	r0, [r7, #4]
 80165c6:	f7ff ffbf 	bl	8016548 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80165ca:	68bb      	ldr	r3, [r7, #8]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d002      	beq.n	80165d6 <netif_do_set_ipaddr+0x6a>
 80165d0:	68bb      	ldr	r3, [r7, #8]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	e000      	b.n	80165d8 <netif_do_set_ipaddr+0x6c>
 80165d6:	2300      	movs	r3, #0
 80165d8:	68fa      	ldr	r2, [r7, #12]
 80165da:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80165dc:	2101      	movs	r1, #1
 80165de:	68f8      	ldr	r0, [r7, #12]
 80165e0:	f000 f8d2 	bl	8016788 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80165e4:	2301      	movs	r3, #1
 80165e6:	e000      	b.n	80165ea <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80165e8:	2300      	movs	r3, #0
}
 80165ea:	4618      	mov	r0, r3
 80165ec:	3718      	adds	r7, #24
 80165ee:	46bd      	mov	sp, r7
 80165f0:	bd80      	pop	{r7, pc}
 80165f2:	bf00      	nop
 80165f4:	08021fbc 	.word	0x08021fbc
 80165f8:	080220d4 	.word	0x080220d4
 80165fc:	0802200c 	.word	0x0802200c

08016600 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8016600:	b480      	push	{r7}
 8016602:	b085      	sub	sp, #20
 8016604:	af00      	add	r7, sp, #0
 8016606:	60f8      	str	r0, [r7, #12]
 8016608:	60b9      	str	r1, [r7, #8]
 801660a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801660c:	68bb      	ldr	r3, [r7, #8]
 801660e:	681a      	ldr	r2, [r3, #0]
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	3308      	adds	r3, #8
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	429a      	cmp	r2, r3
 8016618:	d00a      	beq.n	8016630 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801661a:	68bb      	ldr	r3, [r7, #8]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d002      	beq.n	8016626 <netif_do_set_netmask+0x26>
 8016620:	68bb      	ldr	r3, [r7, #8]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	e000      	b.n	8016628 <netif_do_set_netmask+0x28>
 8016626:	2300      	movs	r3, #0
 8016628:	68fa      	ldr	r2, [r7, #12]
 801662a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801662c:	2301      	movs	r3, #1
 801662e:	e000      	b.n	8016632 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8016630:	2300      	movs	r3, #0
}
 8016632:	4618      	mov	r0, r3
 8016634:	3714      	adds	r7, #20
 8016636:	46bd      	mov	sp, r7
 8016638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801663c:	4770      	bx	lr

0801663e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801663e:	b480      	push	{r7}
 8016640:	b085      	sub	sp, #20
 8016642:	af00      	add	r7, sp, #0
 8016644:	60f8      	str	r0, [r7, #12]
 8016646:	60b9      	str	r1, [r7, #8]
 8016648:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801664a:	68bb      	ldr	r3, [r7, #8]
 801664c:	681a      	ldr	r2, [r3, #0]
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	330c      	adds	r3, #12
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	429a      	cmp	r2, r3
 8016656:	d00a      	beq.n	801666e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8016658:	68bb      	ldr	r3, [r7, #8]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d002      	beq.n	8016664 <netif_do_set_gw+0x26>
 801665e:	68bb      	ldr	r3, [r7, #8]
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	e000      	b.n	8016666 <netif_do_set_gw+0x28>
 8016664:	2300      	movs	r3, #0
 8016666:	68fa      	ldr	r2, [r7, #12]
 8016668:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801666a:	2301      	movs	r3, #1
 801666c:	e000      	b.n	8016670 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801666e:	2300      	movs	r3, #0
}
 8016670:	4618      	mov	r0, r3
 8016672:	3714      	adds	r7, #20
 8016674:	46bd      	mov	sp, r7
 8016676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667a:	4770      	bx	lr

0801667c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801667c:	b580      	push	{r7, lr}
 801667e:	b088      	sub	sp, #32
 8016680:	af00      	add	r7, sp, #0
 8016682:	60f8      	str	r0, [r7, #12]
 8016684:	60b9      	str	r1, [r7, #8]
 8016686:	607a      	str	r2, [r7, #4]
 8016688:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801668a:	2300      	movs	r3, #0
 801668c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801668e:	2300      	movs	r3, #0
 8016690:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016692:	68bb      	ldr	r3, [r7, #8]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d101      	bne.n	801669c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8016698:	4b1c      	ldr	r3, [pc, #112]	; (801670c <netif_set_addr+0x90>)
 801669a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d101      	bne.n	80166a6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80166a2:	4b1a      	ldr	r3, [pc, #104]	; (801670c <netif_set_addr+0x90>)
 80166a4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80166a6:	683b      	ldr	r3, [r7, #0]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d101      	bne.n	80166b0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80166ac:	4b17      	ldr	r3, [pc, #92]	; (801670c <netif_set_addr+0x90>)
 80166ae:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80166b0:	68bb      	ldr	r3, [r7, #8]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d003      	beq.n	80166be <netif_set_addr+0x42>
 80166b6:	68bb      	ldr	r3, [r7, #8]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d101      	bne.n	80166c2 <netif_set_addr+0x46>
 80166be:	2301      	movs	r3, #1
 80166c0:	e000      	b.n	80166c4 <netif_set_addr+0x48>
 80166c2:	2300      	movs	r3, #0
 80166c4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80166c6:	697b      	ldr	r3, [r7, #20]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d006      	beq.n	80166da <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80166cc:	f107 0310 	add.w	r3, r7, #16
 80166d0:	461a      	mov	r2, r3
 80166d2:	68b9      	ldr	r1, [r7, #8]
 80166d4:	68f8      	ldr	r0, [r7, #12]
 80166d6:	f7ff ff49 	bl	801656c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80166da:	69fa      	ldr	r2, [r7, #28]
 80166dc:	6879      	ldr	r1, [r7, #4]
 80166de:	68f8      	ldr	r0, [r7, #12]
 80166e0:	f7ff ff8e 	bl	8016600 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80166e4:	69ba      	ldr	r2, [r7, #24]
 80166e6:	6839      	ldr	r1, [r7, #0]
 80166e8:	68f8      	ldr	r0, [r7, #12]
 80166ea:	f7ff ffa8 	bl	801663e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80166ee:	697b      	ldr	r3, [r7, #20]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d106      	bne.n	8016702 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80166f4:	f107 0310 	add.w	r3, r7, #16
 80166f8:	461a      	mov	r2, r3
 80166fa:	68b9      	ldr	r1, [r7, #8]
 80166fc:	68f8      	ldr	r0, [r7, #12]
 80166fe:	f7ff ff35 	bl	801656c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8016702:	bf00      	nop
 8016704:	3720      	adds	r7, #32
 8016706:	46bd      	mov	sp, r7
 8016708:	bd80      	pop	{r7, pc}
 801670a:	bf00      	nop
 801670c:	08035270 	.word	0x08035270

08016710 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8016710:	b480      	push	{r7}
 8016712:	b083      	sub	sp, #12
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8016718:	4a04      	ldr	r2, [pc, #16]	; (801672c <netif_set_default+0x1c>)
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801671e:	bf00      	nop
 8016720:	370c      	adds	r7, #12
 8016722:	46bd      	mov	sp, r7
 8016724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016728:	4770      	bx	lr
 801672a:	bf00      	nop
 801672c:	2001fee4 	.word	0x2001fee4

08016730 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8016730:	b580      	push	{r7, lr}
 8016732:	b082      	sub	sp, #8
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	2b00      	cmp	r3, #0
 801673c:	d107      	bne.n	801674e <netif_set_up+0x1e>
 801673e:	4b0f      	ldr	r3, [pc, #60]	; (801677c <netif_set_up+0x4c>)
 8016740:	f44f 7254 	mov.w	r2, #848	; 0x350
 8016744:	490e      	ldr	r1, [pc, #56]	; (8016780 <netif_set_up+0x50>)
 8016746:	480f      	ldr	r0, [pc, #60]	; (8016784 <netif_set_up+0x54>)
 8016748:	f009 fee4 	bl	8020514 <iprintf>
 801674c:	e013      	b.n	8016776 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016754:	f003 0301 	and.w	r3, r3, #1
 8016758:	2b00      	cmp	r3, #0
 801675a:	d10c      	bne.n	8016776 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016762:	f043 0301 	orr.w	r3, r3, #1
 8016766:	b2da      	uxtb	r2, r3
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801676e:	2103      	movs	r1, #3
 8016770:	6878      	ldr	r0, [r7, #4]
 8016772:	f000 f809 	bl	8016788 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8016776:	3708      	adds	r7, #8
 8016778:	46bd      	mov	sp, r7
 801677a:	bd80      	pop	{r7, pc}
 801677c:	08021fbc 	.word	0x08021fbc
 8016780:	08022144 	.word	0x08022144
 8016784:	0802200c 	.word	0x0802200c

08016788 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b082      	sub	sp, #8
 801678c:	af00      	add	r7, sp, #0
 801678e:	6078      	str	r0, [r7, #4]
 8016790:	460b      	mov	r3, r1
 8016792:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d106      	bne.n	80167a8 <netif_issue_reports+0x20>
 801679a:	4b18      	ldr	r3, [pc, #96]	; (80167fc <netif_issue_reports+0x74>)
 801679c:	f240 326d 	movw	r2, #877	; 0x36d
 80167a0:	4917      	ldr	r1, [pc, #92]	; (8016800 <netif_issue_reports+0x78>)
 80167a2:	4818      	ldr	r0, [pc, #96]	; (8016804 <netif_issue_reports+0x7c>)
 80167a4:	f009 feb6 	bl	8020514 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80167ae:	f003 0304 	and.w	r3, r3, #4
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d01e      	beq.n	80167f4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80167bc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d017      	beq.n	80167f4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80167c4:	78fb      	ldrb	r3, [r7, #3]
 80167c6:	f003 0301 	and.w	r3, r3, #1
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d013      	beq.n	80167f6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	3304      	adds	r3, #4
 80167d2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d00e      	beq.n	80167f6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80167de:	f003 0308 	and.w	r3, r3, #8
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d007      	beq.n	80167f6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	3304      	adds	r3, #4
 80167ea:	4619      	mov	r1, r3
 80167ec:	6878      	ldr	r0, [r7, #4]
 80167ee:	f008 f9b5 	bl	801eb5c <etharp_request>
 80167f2:	e000      	b.n	80167f6 <netif_issue_reports+0x6e>
    return;
 80167f4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80167f6:	3708      	adds	r7, #8
 80167f8:	46bd      	mov	sp, r7
 80167fa:	bd80      	pop	{r7, pc}
 80167fc:	08021fbc 	.word	0x08021fbc
 8016800:	08022160 	.word	0x08022160
 8016804:	0802200c 	.word	0x0802200c

08016808 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b082      	sub	sp, #8
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d107      	bne.n	8016826 <netif_set_down+0x1e>
 8016816:	4b12      	ldr	r3, [pc, #72]	; (8016860 <netif_set_down+0x58>)
 8016818:	f240 329b 	movw	r2, #923	; 0x39b
 801681c:	4911      	ldr	r1, [pc, #68]	; (8016864 <netif_set_down+0x5c>)
 801681e:	4812      	ldr	r0, [pc, #72]	; (8016868 <netif_set_down+0x60>)
 8016820:	f009 fe78 	bl	8020514 <iprintf>
 8016824:	e019      	b.n	801685a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801682c:	f003 0301 	and.w	r3, r3, #1
 8016830:	2b00      	cmp	r3, #0
 8016832:	d012      	beq.n	801685a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801683a:	f023 0301 	bic.w	r3, r3, #1
 801683e:	b2da      	uxtb	r2, r3
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801684c:	f003 0308 	and.w	r3, r3, #8
 8016850:	2b00      	cmp	r3, #0
 8016852:	d002      	beq.n	801685a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8016854:	6878      	ldr	r0, [r7, #4]
 8016856:	f007 fd3f 	bl	801e2d8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801685a:	3708      	adds	r7, #8
 801685c:	46bd      	mov	sp, r7
 801685e:	bd80      	pop	{r7, pc}
 8016860:	08021fbc 	.word	0x08021fbc
 8016864:	08022184 	.word	0x08022184
 8016868:	0802200c 	.word	0x0802200c

0801686c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b082      	sub	sp, #8
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d107      	bne.n	801688a <netif_set_link_up+0x1e>
 801687a:	4b13      	ldr	r3, [pc, #76]	; (80168c8 <netif_set_link_up+0x5c>)
 801687c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8016880:	4912      	ldr	r1, [pc, #72]	; (80168cc <netif_set_link_up+0x60>)
 8016882:	4813      	ldr	r0, [pc, #76]	; (80168d0 <netif_set_link_up+0x64>)
 8016884:	f009 fe46 	bl	8020514 <iprintf>
 8016888:	e01b      	b.n	80168c2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016890:	f003 0304 	and.w	r3, r3, #4
 8016894:	2b00      	cmp	r3, #0
 8016896:	d114      	bne.n	80168c2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801689e:	f043 0304 	orr.w	r3, r3, #4
 80168a2:	b2da      	uxtb	r2, r3
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80168aa:	2103      	movs	r1, #3
 80168ac:	6878      	ldr	r0, [r7, #4]
 80168ae:	f7ff ff6b 	bl	8016788 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	69db      	ldr	r3, [r3, #28]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d003      	beq.n	80168c2 <netif_set_link_up+0x56>
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	69db      	ldr	r3, [r3, #28]
 80168be:	6878      	ldr	r0, [r7, #4]
 80168c0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80168c2:	3708      	adds	r7, #8
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}
 80168c8:	08021fbc 	.word	0x08021fbc
 80168cc:	080221a4 	.word	0x080221a4
 80168d0:	0802200c 	.word	0x0802200c

080168d4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b082      	sub	sp, #8
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d107      	bne.n	80168f2 <netif_set_link_down+0x1e>
 80168e2:	4b11      	ldr	r3, [pc, #68]	; (8016928 <netif_set_link_down+0x54>)
 80168e4:	f240 4206 	movw	r2, #1030	; 0x406
 80168e8:	4910      	ldr	r1, [pc, #64]	; (801692c <netif_set_link_down+0x58>)
 80168ea:	4811      	ldr	r0, [pc, #68]	; (8016930 <netif_set_link_down+0x5c>)
 80168ec:	f009 fe12 	bl	8020514 <iprintf>
 80168f0:	e017      	b.n	8016922 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80168f8:	f003 0304 	and.w	r3, r3, #4
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d010      	beq.n	8016922 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016906:	f023 0304 	bic.w	r3, r3, #4
 801690a:	b2da      	uxtb	r2, r3
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	69db      	ldr	r3, [r3, #28]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d003      	beq.n	8016922 <netif_set_link_down+0x4e>
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	69db      	ldr	r3, [r3, #28]
 801691e:	6878      	ldr	r0, [r7, #4]
 8016920:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8016922:	3708      	adds	r7, #8
 8016924:	46bd      	mov	sp, r7
 8016926:	bd80      	pop	{r7, pc}
 8016928:	08021fbc 	.word	0x08021fbc
 801692c:	080221c8 	.word	0x080221c8
 8016930:	0802200c 	.word	0x0802200c

08016934 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8016934:	b480      	push	{r7}
 8016936:	b083      	sub	sp, #12
 8016938:	af00      	add	r7, sp, #0
 801693a:	6078      	str	r0, [r7, #4]
 801693c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d002      	beq.n	801694a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	683a      	ldr	r2, [r7, #0]
 8016948:	61da      	str	r2, [r3, #28]
  }
}
 801694a:	bf00      	nop
 801694c:	370c      	adds	r7, #12
 801694e:	46bd      	mov	sp, r7
 8016950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016954:	4770      	bx	lr

08016956 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8016956:	b480      	push	{r7}
 8016958:	b085      	sub	sp, #20
 801695a:	af00      	add	r7, sp, #0
 801695c:	60f8      	str	r0, [r7, #12]
 801695e:	60b9      	str	r1, [r7, #8]
 8016960:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8016962:	f06f 030b 	mvn.w	r3, #11
}
 8016966:	4618      	mov	r0, r3
 8016968:	3714      	adds	r7, #20
 801696a:	46bd      	mov	sp, r7
 801696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016970:	4770      	bx	lr
	...

08016974 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8016974:	b480      	push	{r7}
 8016976:	b085      	sub	sp, #20
 8016978:	af00      	add	r7, sp, #0
 801697a:	4603      	mov	r3, r0
 801697c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801697e:	79fb      	ldrb	r3, [r7, #7]
 8016980:	2b00      	cmp	r3, #0
 8016982:	d013      	beq.n	80169ac <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8016984:	4b0d      	ldr	r3, [pc, #52]	; (80169bc <netif_get_by_index+0x48>)
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	60fb      	str	r3, [r7, #12]
 801698a:	e00c      	b.n	80169a6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016992:	3301      	adds	r3, #1
 8016994:	b2db      	uxtb	r3, r3
 8016996:	79fa      	ldrb	r2, [r7, #7]
 8016998:	429a      	cmp	r2, r3
 801699a:	d101      	bne.n	80169a0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	e006      	b.n	80169ae <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	60fb      	str	r3, [r7, #12]
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d1ef      	bne.n	801698c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80169ac:	2300      	movs	r3, #0
}
 80169ae:	4618      	mov	r0, r3
 80169b0:	3714      	adds	r7, #20
 80169b2:	46bd      	mov	sp, r7
 80169b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b8:	4770      	bx	lr
 80169ba:	bf00      	nop
 80169bc:	2001fee0 	.word	0x2001fee0

080169c0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b082      	sub	sp, #8
 80169c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80169c6:	f009 fd41 	bl	802044c <sys_arch_protect>
 80169ca:	6038      	str	r0, [r7, #0]
 80169cc:	4b0d      	ldr	r3, [pc, #52]	; (8016a04 <pbuf_free_ooseq+0x44>)
 80169ce:	2200      	movs	r2, #0
 80169d0:	701a      	strb	r2, [r3, #0]
 80169d2:	6838      	ldr	r0, [r7, #0]
 80169d4:	f009 fd48 	bl	8020468 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80169d8:	4b0b      	ldr	r3, [pc, #44]	; (8016a08 <pbuf_free_ooseq+0x48>)
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	607b      	str	r3, [r7, #4]
 80169de:	e00a      	b.n	80169f6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d003      	beq.n	80169f0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80169e8:	6878      	ldr	r0, [r7, #4]
 80169ea:	f002 fc0f 	bl	801920c <tcp_free_ooseq>
      return;
 80169ee:	e005      	b.n	80169fc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	68db      	ldr	r3, [r3, #12]
 80169f4:	607b      	str	r3, [r7, #4]
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d1f1      	bne.n	80169e0 <pbuf_free_ooseq+0x20>
    }
  }
}
 80169fc:	3708      	adds	r7, #8
 80169fe:	46bd      	mov	sp, r7
 8016a00:	bd80      	pop	{r7, pc}
 8016a02:	bf00      	nop
 8016a04:	2001fee8 	.word	0x2001fee8
 8016a08:	2001fef0 	.word	0x2001fef0

08016a0c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b082      	sub	sp, #8
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8016a14:	f7ff ffd4 	bl	80169c0 <pbuf_free_ooseq>
}
 8016a18:	bf00      	nop
 8016a1a:	3708      	adds	r7, #8
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	bd80      	pop	{r7, pc}

08016a20 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b082      	sub	sp, #8
 8016a24:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8016a26:	f009 fd11 	bl	802044c <sys_arch_protect>
 8016a2a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8016a2c:	4b0f      	ldr	r3, [pc, #60]	; (8016a6c <pbuf_pool_is_empty+0x4c>)
 8016a2e:	781b      	ldrb	r3, [r3, #0]
 8016a30:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8016a32:	4b0e      	ldr	r3, [pc, #56]	; (8016a6c <pbuf_pool_is_empty+0x4c>)
 8016a34:	2201      	movs	r2, #1
 8016a36:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8016a38:	6878      	ldr	r0, [r7, #4]
 8016a3a:	f009 fd15 	bl	8020468 <sys_arch_unprotect>

  if (!queued) {
 8016a3e:	78fb      	ldrb	r3, [r7, #3]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d10f      	bne.n	8016a64 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8016a44:	2100      	movs	r1, #0
 8016a46:	480a      	ldr	r0, [pc, #40]	; (8016a70 <pbuf_pool_is_empty+0x50>)
 8016a48:	f7fe f89c 	bl	8014b84 <tcpip_try_callback>
 8016a4c:	4603      	mov	r3, r0
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d008      	beq.n	8016a64 <pbuf_pool_is_empty+0x44>
 8016a52:	f009 fcfb 	bl	802044c <sys_arch_protect>
 8016a56:	6078      	str	r0, [r7, #4]
 8016a58:	4b04      	ldr	r3, [pc, #16]	; (8016a6c <pbuf_pool_is_empty+0x4c>)
 8016a5a:	2200      	movs	r2, #0
 8016a5c:	701a      	strb	r2, [r3, #0]
 8016a5e:	6878      	ldr	r0, [r7, #4]
 8016a60:	f009 fd02 	bl	8020468 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8016a64:	bf00      	nop
 8016a66:	3708      	adds	r7, #8
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	bd80      	pop	{r7, pc}
 8016a6c:	2001fee8 	.word	0x2001fee8
 8016a70:	08016a0d 	.word	0x08016a0d

08016a74 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8016a74:	b480      	push	{r7}
 8016a76:	b085      	sub	sp, #20
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	60f8      	str	r0, [r7, #12]
 8016a7c:	60b9      	str	r1, [r7, #8]
 8016a7e:	4611      	mov	r1, r2
 8016a80:	461a      	mov	r2, r3
 8016a82:	460b      	mov	r3, r1
 8016a84:	80fb      	strh	r3, [r7, #6]
 8016a86:	4613      	mov	r3, r2
 8016a88:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	68ba      	ldr	r2, [r7, #8]
 8016a94:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	88fa      	ldrh	r2, [r7, #6]
 8016a9a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	88ba      	ldrh	r2, [r7, #4]
 8016aa0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8016aa2:	8b3b      	ldrh	r3, [r7, #24]
 8016aa4:	b2da      	uxtb	r2, r3
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	7f3a      	ldrb	r2, [r7, #28]
 8016aae:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	2201      	movs	r2, #1
 8016ab4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	2200      	movs	r2, #0
 8016aba:	73da      	strb	r2, [r3, #15]
}
 8016abc:	bf00      	nop
 8016abe:	3714      	adds	r7, #20
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac6:	4770      	bx	lr

08016ac8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b08c      	sub	sp, #48	; 0x30
 8016acc:	af02      	add	r7, sp, #8
 8016ace:	4603      	mov	r3, r0
 8016ad0:	71fb      	strb	r3, [r7, #7]
 8016ad2:	460b      	mov	r3, r1
 8016ad4:	80bb      	strh	r3, [r7, #4]
 8016ad6:	4613      	mov	r3, r2
 8016ad8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8016ada:	79fb      	ldrb	r3, [r7, #7]
 8016adc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8016ade:	887b      	ldrh	r3, [r7, #2]
 8016ae0:	2b41      	cmp	r3, #65	; 0x41
 8016ae2:	d00b      	beq.n	8016afc <pbuf_alloc+0x34>
 8016ae4:	2b41      	cmp	r3, #65	; 0x41
 8016ae6:	dc02      	bgt.n	8016aee <pbuf_alloc+0x26>
 8016ae8:	2b01      	cmp	r3, #1
 8016aea:	d007      	beq.n	8016afc <pbuf_alloc+0x34>
 8016aec:	e0c2      	b.n	8016c74 <pbuf_alloc+0x1ac>
 8016aee:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8016af2:	d00b      	beq.n	8016b0c <pbuf_alloc+0x44>
 8016af4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8016af8:	d070      	beq.n	8016bdc <pbuf_alloc+0x114>
 8016afa:	e0bb      	b.n	8016c74 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8016afc:	887a      	ldrh	r2, [r7, #2]
 8016afe:	88bb      	ldrh	r3, [r7, #4]
 8016b00:	4619      	mov	r1, r3
 8016b02:	2000      	movs	r0, #0
 8016b04:	f000 f8d2 	bl	8016cac <pbuf_alloc_reference>
 8016b08:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8016b0a:	e0bd      	b.n	8016c88 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8016b10:	2300      	movs	r3, #0
 8016b12:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8016b14:	88bb      	ldrh	r3, [r7, #4]
 8016b16:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8016b18:	200c      	movs	r0, #12
 8016b1a:	f7ff fbc3 	bl	80162a4 <memp_malloc>
 8016b1e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8016b20:	693b      	ldr	r3, [r7, #16]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d109      	bne.n	8016b3a <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8016b26:	f7ff ff7b 	bl	8016a20 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8016b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d002      	beq.n	8016b36 <pbuf_alloc+0x6e>
            pbuf_free(p);
 8016b30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b32:	f000 faa9 	bl	8017088 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8016b36:	2300      	movs	r3, #0
 8016b38:	e0a7      	b.n	8016c8a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8016b3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016b3c:	3303      	adds	r3, #3
 8016b3e:	b29b      	uxth	r3, r3
 8016b40:	f023 0303 	bic.w	r3, r3, #3
 8016b44:	b29b      	uxth	r3, r3
 8016b46:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8016b4a:	b29b      	uxth	r3, r3
 8016b4c:	8b7a      	ldrh	r2, [r7, #26]
 8016b4e:	4293      	cmp	r3, r2
 8016b50:	bf28      	it	cs
 8016b52:	4613      	movcs	r3, r2
 8016b54:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8016b56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016b58:	3310      	adds	r3, #16
 8016b5a:	693a      	ldr	r2, [r7, #16]
 8016b5c:	4413      	add	r3, r2
 8016b5e:	3303      	adds	r3, #3
 8016b60:	f023 0303 	bic.w	r3, r3, #3
 8016b64:	4618      	mov	r0, r3
 8016b66:	89f9      	ldrh	r1, [r7, #14]
 8016b68:	8b7a      	ldrh	r2, [r7, #26]
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	9301      	str	r3, [sp, #4]
 8016b6e:	887b      	ldrh	r3, [r7, #2]
 8016b70:	9300      	str	r3, [sp, #0]
 8016b72:	460b      	mov	r3, r1
 8016b74:	4601      	mov	r1, r0
 8016b76:	6938      	ldr	r0, [r7, #16]
 8016b78:	f7ff ff7c 	bl	8016a74 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8016b7c:	693b      	ldr	r3, [r7, #16]
 8016b7e:	685b      	ldr	r3, [r3, #4]
 8016b80:	f003 0303 	and.w	r3, r3, #3
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d006      	beq.n	8016b96 <pbuf_alloc+0xce>
 8016b88:	4b42      	ldr	r3, [pc, #264]	; (8016c94 <pbuf_alloc+0x1cc>)
 8016b8a:	f240 1201 	movw	r2, #257	; 0x101
 8016b8e:	4942      	ldr	r1, [pc, #264]	; (8016c98 <pbuf_alloc+0x1d0>)
 8016b90:	4842      	ldr	r0, [pc, #264]	; (8016c9c <pbuf_alloc+0x1d4>)
 8016b92:	f009 fcbf 	bl	8020514 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8016b96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016b98:	3303      	adds	r3, #3
 8016b9a:	f023 0303 	bic.w	r3, r3, #3
 8016b9e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8016ba2:	d106      	bne.n	8016bb2 <pbuf_alloc+0xea>
 8016ba4:	4b3b      	ldr	r3, [pc, #236]	; (8016c94 <pbuf_alloc+0x1cc>)
 8016ba6:	f240 1203 	movw	r2, #259	; 0x103
 8016baa:	493d      	ldr	r1, [pc, #244]	; (8016ca0 <pbuf_alloc+0x1d8>)
 8016bac:	483b      	ldr	r0, [pc, #236]	; (8016c9c <pbuf_alloc+0x1d4>)
 8016bae:	f009 fcb1 	bl	8020514 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8016bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d102      	bne.n	8016bbe <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8016bb8:	693b      	ldr	r3, [r7, #16]
 8016bba:	627b      	str	r3, [r7, #36]	; 0x24
 8016bbc:	e002      	b.n	8016bc4 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8016bbe:	69fb      	ldr	r3, [r7, #28]
 8016bc0:	693a      	ldr	r2, [r7, #16]
 8016bc2:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8016bc4:	693b      	ldr	r3, [r7, #16]
 8016bc6:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8016bc8:	8b7a      	ldrh	r2, [r7, #26]
 8016bca:	89fb      	ldrh	r3, [r7, #14]
 8016bcc:	1ad3      	subs	r3, r2, r3
 8016bce:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8016bd4:	8b7b      	ldrh	r3, [r7, #26]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d19e      	bne.n	8016b18 <pbuf_alloc+0x50>
      break;
 8016bda:	e055      	b.n	8016c88 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8016bdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016bde:	3303      	adds	r3, #3
 8016be0:	b29b      	uxth	r3, r3
 8016be2:	f023 0303 	bic.w	r3, r3, #3
 8016be6:	b29a      	uxth	r2, r3
 8016be8:	88bb      	ldrh	r3, [r7, #4]
 8016bea:	3303      	adds	r3, #3
 8016bec:	b29b      	uxth	r3, r3
 8016bee:	f023 0303 	bic.w	r3, r3, #3
 8016bf2:	b29b      	uxth	r3, r3
 8016bf4:	4413      	add	r3, r2
 8016bf6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8016bf8:	8b3b      	ldrh	r3, [r7, #24]
 8016bfa:	3310      	adds	r3, #16
 8016bfc:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016bfe:	8b3a      	ldrh	r2, [r7, #24]
 8016c00:	88bb      	ldrh	r3, [r7, #4]
 8016c02:	3303      	adds	r3, #3
 8016c04:	f023 0303 	bic.w	r3, r3, #3
 8016c08:	429a      	cmp	r2, r3
 8016c0a:	d306      	bcc.n	8016c1a <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8016c0c:	8afa      	ldrh	r2, [r7, #22]
 8016c0e:	88bb      	ldrh	r3, [r7, #4]
 8016c10:	3303      	adds	r3, #3
 8016c12:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016c16:	429a      	cmp	r2, r3
 8016c18:	d201      	bcs.n	8016c1e <pbuf_alloc+0x156>
        return NULL;
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	e035      	b.n	8016c8a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8016c1e:	8afb      	ldrh	r3, [r7, #22]
 8016c20:	4618      	mov	r0, r3
 8016c22:	f7ff f9bd 	bl	8015fa0 <mem_malloc>
 8016c26:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8016c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d101      	bne.n	8016c32 <pbuf_alloc+0x16a>
        return NULL;
 8016c2e:	2300      	movs	r3, #0
 8016c30:	e02b      	b.n	8016c8a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8016c32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016c34:	3310      	adds	r3, #16
 8016c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016c38:	4413      	add	r3, r2
 8016c3a:	3303      	adds	r3, #3
 8016c3c:	f023 0303 	bic.w	r3, r3, #3
 8016c40:	4618      	mov	r0, r3
 8016c42:	88b9      	ldrh	r1, [r7, #4]
 8016c44:	88ba      	ldrh	r2, [r7, #4]
 8016c46:	2300      	movs	r3, #0
 8016c48:	9301      	str	r3, [sp, #4]
 8016c4a:	887b      	ldrh	r3, [r7, #2]
 8016c4c:	9300      	str	r3, [sp, #0]
 8016c4e:	460b      	mov	r3, r1
 8016c50:	4601      	mov	r1, r0
 8016c52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c54:	f7ff ff0e 	bl	8016a74 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8016c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c5a:	685b      	ldr	r3, [r3, #4]
 8016c5c:	f003 0303 	and.w	r3, r3, #3
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d010      	beq.n	8016c86 <pbuf_alloc+0x1be>
 8016c64:	4b0b      	ldr	r3, [pc, #44]	; (8016c94 <pbuf_alloc+0x1cc>)
 8016c66:	f240 1223 	movw	r2, #291	; 0x123
 8016c6a:	490e      	ldr	r1, [pc, #56]	; (8016ca4 <pbuf_alloc+0x1dc>)
 8016c6c:	480b      	ldr	r0, [pc, #44]	; (8016c9c <pbuf_alloc+0x1d4>)
 8016c6e:	f009 fc51 	bl	8020514 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8016c72:	e008      	b.n	8016c86 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8016c74:	4b07      	ldr	r3, [pc, #28]	; (8016c94 <pbuf_alloc+0x1cc>)
 8016c76:	f240 1227 	movw	r2, #295	; 0x127
 8016c7a:	490b      	ldr	r1, [pc, #44]	; (8016ca8 <pbuf_alloc+0x1e0>)
 8016c7c:	4807      	ldr	r0, [pc, #28]	; (8016c9c <pbuf_alloc+0x1d4>)
 8016c7e:	f009 fc49 	bl	8020514 <iprintf>
      return NULL;
 8016c82:	2300      	movs	r3, #0
 8016c84:	e001      	b.n	8016c8a <pbuf_alloc+0x1c2>
      break;
 8016c86:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8016c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	3728      	adds	r7, #40	; 0x28
 8016c8e:	46bd      	mov	sp, r7
 8016c90:	bd80      	pop	{r7, pc}
 8016c92:	bf00      	nop
 8016c94:	080221ec 	.word	0x080221ec
 8016c98:	0802221c 	.word	0x0802221c
 8016c9c:	0802224c 	.word	0x0802224c
 8016ca0:	08022274 	.word	0x08022274
 8016ca4:	080222a8 	.word	0x080222a8
 8016ca8:	080222d4 	.word	0x080222d4

08016cac <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b086      	sub	sp, #24
 8016cb0:	af02      	add	r7, sp, #8
 8016cb2:	6078      	str	r0, [r7, #4]
 8016cb4:	460b      	mov	r3, r1
 8016cb6:	807b      	strh	r3, [r7, #2]
 8016cb8:	4613      	mov	r3, r2
 8016cba:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8016cbc:	883b      	ldrh	r3, [r7, #0]
 8016cbe:	2b41      	cmp	r3, #65	; 0x41
 8016cc0:	d009      	beq.n	8016cd6 <pbuf_alloc_reference+0x2a>
 8016cc2:	883b      	ldrh	r3, [r7, #0]
 8016cc4:	2b01      	cmp	r3, #1
 8016cc6:	d006      	beq.n	8016cd6 <pbuf_alloc_reference+0x2a>
 8016cc8:	4b0f      	ldr	r3, [pc, #60]	; (8016d08 <pbuf_alloc_reference+0x5c>)
 8016cca:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8016cce:	490f      	ldr	r1, [pc, #60]	; (8016d0c <pbuf_alloc_reference+0x60>)
 8016cd0:	480f      	ldr	r0, [pc, #60]	; (8016d10 <pbuf_alloc_reference+0x64>)
 8016cd2:	f009 fc1f 	bl	8020514 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8016cd6:	200b      	movs	r0, #11
 8016cd8:	f7ff fae4 	bl	80162a4 <memp_malloc>
 8016cdc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d101      	bne.n	8016ce8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8016ce4:	2300      	movs	r3, #0
 8016ce6:	e00b      	b.n	8016d00 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8016ce8:	8879      	ldrh	r1, [r7, #2]
 8016cea:	887a      	ldrh	r2, [r7, #2]
 8016cec:	2300      	movs	r3, #0
 8016cee:	9301      	str	r3, [sp, #4]
 8016cf0:	883b      	ldrh	r3, [r7, #0]
 8016cf2:	9300      	str	r3, [sp, #0]
 8016cf4:	460b      	mov	r3, r1
 8016cf6:	6879      	ldr	r1, [r7, #4]
 8016cf8:	68f8      	ldr	r0, [r7, #12]
 8016cfa:	f7ff febb 	bl	8016a74 <pbuf_init_alloced_pbuf>
  return p;
 8016cfe:	68fb      	ldr	r3, [r7, #12]
}
 8016d00:	4618      	mov	r0, r3
 8016d02:	3710      	adds	r7, #16
 8016d04:	46bd      	mov	sp, r7
 8016d06:	bd80      	pop	{r7, pc}
 8016d08:	080221ec 	.word	0x080221ec
 8016d0c:	080222f0 	.word	0x080222f0
 8016d10:	0802224c 	.word	0x0802224c

08016d14 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8016d14:	b580      	push	{r7, lr}
 8016d16:	b088      	sub	sp, #32
 8016d18:	af02      	add	r7, sp, #8
 8016d1a:	607b      	str	r3, [r7, #4]
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	73fb      	strb	r3, [r7, #15]
 8016d20:	460b      	mov	r3, r1
 8016d22:	81bb      	strh	r3, [r7, #12]
 8016d24:	4613      	mov	r3, r2
 8016d26:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8016d28:	7bfb      	ldrb	r3, [r7, #15]
 8016d2a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8016d2c:	8a7b      	ldrh	r3, [r7, #18]
 8016d2e:	3303      	adds	r3, #3
 8016d30:	f023 0203 	bic.w	r2, r3, #3
 8016d34:	89bb      	ldrh	r3, [r7, #12]
 8016d36:	441a      	add	r2, r3
 8016d38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016d3a:	429a      	cmp	r2, r3
 8016d3c:	d901      	bls.n	8016d42 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8016d3e:	2300      	movs	r3, #0
 8016d40:	e018      	b.n	8016d74 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8016d42:	6a3b      	ldr	r3, [r7, #32]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d007      	beq.n	8016d58 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8016d48:	8a7b      	ldrh	r3, [r7, #18]
 8016d4a:	3303      	adds	r3, #3
 8016d4c:	f023 0303 	bic.w	r3, r3, #3
 8016d50:	6a3a      	ldr	r2, [r7, #32]
 8016d52:	4413      	add	r3, r2
 8016d54:	617b      	str	r3, [r7, #20]
 8016d56:	e001      	b.n	8016d5c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8016d58:	2300      	movs	r3, #0
 8016d5a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8016d5c:	6878      	ldr	r0, [r7, #4]
 8016d5e:	89b9      	ldrh	r1, [r7, #12]
 8016d60:	89ba      	ldrh	r2, [r7, #12]
 8016d62:	2302      	movs	r3, #2
 8016d64:	9301      	str	r3, [sp, #4]
 8016d66:	897b      	ldrh	r3, [r7, #10]
 8016d68:	9300      	str	r3, [sp, #0]
 8016d6a:	460b      	mov	r3, r1
 8016d6c:	6979      	ldr	r1, [r7, #20]
 8016d6e:	f7ff fe81 	bl	8016a74 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8016d72:	687b      	ldr	r3, [r7, #4]
}
 8016d74:	4618      	mov	r0, r3
 8016d76:	3718      	adds	r7, #24
 8016d78:	46bd      	mov	sp, r7
 8016d7a:	bd80      	pop	{r7, pc}

08016d7c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b084      	sub	sp, #16
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
 8016d84:	460b      	mov	r3, r1
 8016d86:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d106      	bne.n	8016d9c <pbuf_realloc+0x20>
 8016d8e:	4b3a      	ldr	r3, [pc, #232]	; (8016e78 <pbuf_realloc+0xfc>)
 8016d90:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8016d94:	4939      	ldr	r1, [pc, #228]	; (8016e7c <pbuf_realloc+0x100>)
 8016d96:	483a      	ldr	r0, [pc, #232]	; (8016e80 <pbuf_realloc+0x104>)
 8016d98:	f009 fbbc 	bl	8020514 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	891b      	ldrh	r3, [r3, #8]
 8016da0:	887a      	ldrh	r2, [r7, #2]
 8016da2:	429a      	cmp	r2, r3
 8016da4:	d264      	bcs.n	8016e70 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	891a      	ldrh	r2, [r3, #8]
 8016daa:	887b      	ldrh	r3, [r7, #2]
 8016dac:	1ad3      	subs	r3, r2, r3
 8016dae:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8016db0:	887b      	ldrh	r3, [r7, #2]
 8016db2:	817b      	strh	r3, [r7, #10]
  q = p;
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8016db8:	e018      	b.n	8016dec <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	895b      	ldrh	r3, [r3, #10]
 8016dbe:	897a      	ldrh	r2, [r7, #10]
 8016dc0:	1ad3      	subs	r3, r2, r3
 8016dc2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	891a      	ldrh	r2, [r3, #8]
 8016dc8:	893b      	ldrh	r3, [r7, #8]
 8016dca:	1ad3      	subs	r3, r2, r3
 8016dcc:	b29a      	uxth	r2, r3
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d106      	bne.n	8016dec <pbuf_realloc+0x70>
 8016dde:	4b26      	ldr	r3, [pc, #152]	; (8016e78 <pbuf_realloc+0xfc>)
 8016de0:	f240 12af 	movw	r2, #431	; 0x1af
 8016de4:	4927      	ldr	r1, [pc, #156]	; (8016e84 <pbuf_realloc+0x108>)
 8016de6:	4826      	ldr	r0, [pc, #152]	; (8016e80 <pbuf_realloc+0x104>)
 8016de8:	f009 fb94 	bl	8020514 <iprintf>
  while (rem_len > q->len) {
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	895b      	ldrh	r3, [r3, #10]
 8016df0:	897a      	ldrh	r2, [r7, #10]
 8016df2:	429a      	cmp	r2, r3
 8016df4:	d8e1      	bhi.n	8016dba <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	7b1b      	ldrb	r3, [r3, #12]
 8016dfa:	f003 030f 	and.w	r3, r3, #15
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d122      	bne.n	8016e48 <pbuf_realloc+0xcc>
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	895b      	ldrh	r3, [r3, #10]
 8016e06:	897a      	ldrh	r2, [r7, #10]
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	d01d      	beq.n	8016e48 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	7b5b      	ldrb	r3, [r3, #13]
 8016e10:	f003 0302 	and.w	r3, r3, #2
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d117      	bne.n	8016e48 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	685b      	ldr	r3, [r3, #4]
 8016e1c:	461a      	mov	r2, r3
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	1ad3      	subs	r3, r2, r3
 8016e22:	b29a      	uxth	r2, r3
 8016e24:	897b      	ldrh	r3, [r7, #10]
 8016e26:	4413      	add	r3, r2
 8016e28:	b29b      	uxth	r3, r3
 8016e2a:	4619      	mov	r1, r3
 8016e2c:	68f8      	ldr	r0, [r7, #12]
 8016e2e:	f7fe ffad 	bl	8015d8c <mem_trim>
 8016e32:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d106      	bne.n	8016e48 <pbuf_realloc+0xcc>
 8016e3a:	4b0f      	ldr	r3, [pc, #60]	; (8016e78 <pbuf_realloc+0xfc>)
 8016e3c:	f240 12bd 	movw	r2, #445	; 0x1bd
 8016e40:	4911      	ldr	r1, [pc, #68]	; (8016e88 <pbuf_realloc+0x10c>)
 8016e42:	480f      	ldr	r0, [pc, #60]	; (8016e80 <pbuf_realloc+0x104>)
 8016e44:	f009 fb66 	bl	8020514 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	897a      	ldrh	r2, [r7, #10]
 8016e4c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	895a      	ldrh	r2, [r3, #10]
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d004      	beq.n	8016e68 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	4618      	mov	r0, r3
 8016e64:	f000 f910 	bl	8017088 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	2200      	movs	r2, #0
 8016e6c:	601a      	str	r2, [r3, #0]
 8016e6e:	e000      	b.n	8016e72 <pbuf_realloc+0xf6>
    return;
 8016e70:	bf00      	nop

}
 8016e72:	3710      	adds	r7, #16
 8016e74:	46bd      	mov	sp, r7
 8016e76:	bd80      	pop	{r7, pc}
 8016e78:	080221ec 	.word	0x080221ec
 8016e7c:	08022304 	.word	0x08022304
 8016e80:	0802224c 	.word	0x0802224c
 8016e84:	0802231c 	.word	0x0802231c
 8016e88:	08022334 	.word	0x08022334

08016e8c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b086      	sub	sp, #24
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	60f8      	str	r0, [r7, #12]
 8016e94:	60b9      	str	r1, [r7, #8]
 8016e96:	4613      	mov	r3, r2
 8016e98:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d106      	bne.n	8016eae <pbuf_add_header_impl+0x22>
 8016ea0:	4b2b      	ldr	r3, [pc, #172]	; (8016f50 <pbuf_add_header_impl+0xc4>)
 8016ea2:	f240 12df 	movw	r2, #479	; 0x1df
 8016ea6:	492b      	ldr	r1, [pc, #172]	; (8016f54 <pbuf_add_header_impl+0xc8>)
 8016ea8:	482b      	ldr	r0, [pc, #172]	; (8016f58 <pbuf_add_header_impl+0xcc>)
 8016eaa:	f009 fb33 	bl	8020514 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d003      	beq.n	8016ebc <pbuf_add_header_impl+0x30>
 8016eb4:	68bb      	ldr	r3, [r7, #8]
 8016eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016eba:	d301      	bcc.n	8016ec0 <pbuf_add_header_impl+0x34>
    return 1;
 8016ebc:	2301      	movs	r3, #1
 8016ebe:	e043      	b.n	8016f48 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8016ec0:	68bb      	ldr	r3, [r7, #8]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d101      	bne.n	8016eca <pbuf_add_header_impl+0x3e>
    return 0;
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	e03e      	b.n	8016f48 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8016eca:	68bb      	ldr	r3, [r7, #8]
 8016ecc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	891a      	ldrh	r2, [r3, #8]
 8016ed2:	8a7b      	ldrh	r3, [r7, #18]
 8016ed4:	4413      	add	r3, r2
 8016ed6:	b29b      	uxth	r3, r3
 8016ed8:	8a7a      	ldrh	r2, [r7, #18]
 8016eda:	429a      	cmp	r2, r3
 8016edc:	d901      	bls.n	8016ee2 <pbuf_add_header_impl+0x56>
    return 1;
 8016ede:	2301      	movs	r3, #1
 8016ee0:	e032      	b.n	8016f48 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	7b1b      	ldrb	r3, [r3, #12]
 8016ee6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8016ee8:	8a3b      	ldrh	r3, [r7, #16]
 8016eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d00c      	beq.n	8016f0c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	685a      	ldr	r2, [r3, #4]
 8016ef6:	68bb      	ldr	r3, [r7, #8]
 8016ef8:	425b      	negs	r3, r3
 8016efa:	4413      	add	r3, r2
 8016efc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	3310      	adds	r3, #16
 8016f02:	697a      	ldr	r2, [r7, #20]
 8016f04:	429a      	cmp	r2, r3
 8016f06:	d20d      	bcs.n	8016f24 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8016f08:	2301      	movs	r3, #1
 8016f0a:	e01d      	b.n	8016f48 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8016f0c:	79fb      	ldrb	r3, [r7, #7]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d006      	beq.n	8016f20 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	685a      	ldr	r2, [r3, #4]
 8016f16:	68bb      	ldr	r3, [r7, #8]
 8016f18:	425b      	negs	r3, r3
 8016f1a:	4413      	add	r3, r2
 8016f1c:	617b      	str	r3, [r7, #20]
 8016f1e:	e001      	b.n	8016f24 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8016f20:	2301      	movs	r3, #1
 8016f22:	e011      	b.n	8016f48 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	697a      	ldr	r2, [r7, #20]
 8016f28:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	895a      	ldrh	r2, [r3, #10]
 8016f2e:	8a7b      	ldrh	r3, [r7, #18]
 8016f30:	4413      	add	r3, r2
 8016f32:	b29a      	uxth	r2, r3
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	891a      	ldrh	r2, [r3, #8]
 8016f3c:	8a7b      	ldrh	r3, [r7, #18]
 8016f3e:	4413      	add	r3, r2
 8016f40:	b29a      	uxth	r2, r3
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	811a      	strh	r2, [r3, #8]


  return 0;
 8016f46:	2300      	movs	r3, #0
}
 8016f48:	4618      	mov	r0, r3
 8016f4a:	3718      	adds	r7, #24
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	bd80      	pop	{r7, pc}
 8016f50:	080221ec 	.word	0x080221ec
 8016f54:	08022350 	.word	0x08022350
 8016f58:	0802224c 	.word	0x0802224c

08016f5c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b082      	sub	sp, #8
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	6078      	str	r0, [r7, #4]
 8016f64:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8016f66:	2200      	movs	r2, #0
 8016f68:	6839      	ldr	r1, [r7, #0]
 8016f6a:	6878      	ldr	r0, [r7, #4]
 8016f6c:	f7ff ff8e 	bl	8016e8c <pbuf_add_header_impl>
 8016f70:	4603      	mov	r3, r0
}
 8016f72:	4618      	mov	r0, r3
 8016f74:	3708      	adds	r7, #8
 8016f76:	46bd      	mov	sp, r7
 8016f78:	bd80      	pop	{r7, pc}
	...

08016f7c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8016f7c:	b580      	push	{r7, lr}
 8016f7e:	b084      	sub	sp, #16
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	6078      	str	r0, [r7, #4]
 8016f84:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d106      	bne.n	8016f9a <pbuf_remove_header+0x1e>
 8016f8c:	4b20      	ldr	r3, [pc, #128]	; (8017010 <pbuf_remove_header+0x94>)
 8016f8e:	f240 224b 	movw	r2, #587	; 0x24b
 8016f92:	4920      	ldr	r1, [pc, #128]	; (8017014 <pbuf_remove_header+0x98>)
 8016f94:	4820      	ldr	r0, [pc, #128]	; (8017018 <pbuf_remove_header+0x9c>)
 8016f96:	f009 fabd 	bl	8020514 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d003      	beq.n	8016fa8 <pbuf_remove_header+0x2c>
 8016fa0:	683b      	ldr	r3, [r7, #0]
 8016fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016fa6:	d301      	bcc.n	8016fac <pbuf_remove_header+0x30>
    return 1;
 8016fa8:	2301      	movs	r3, #1
 8016faa:	e02c      	b.n	8017006 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8016fac:	683b      	ldr	r3, [r7, #0]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d101      	bne.n	8016fb6 <pbuf_remove_header+0x3a>
    return 0;
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	e027      	b.n	8017006 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8016fb6:	683b      	ldr	r3, [r7, #0]
 8016fb8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	895b      	ldrh	r3, [r3, #10]
 8016fbe:	89fa      	ldrh	r2, [r7, #14]
 8016fc0:	429a      	cmp	r2, r3
 8016fc2:	d908      	bls.n	8016fd6 <pbuf_remove_header+0x5a>
 8016fc4:	4b12      	ldr	r3, [pc, #72]	; (8017010 <pbuf_remove_header+0x94>)
 8016fc6:	f240 2255 	movw	r2, #597	; 0x255
 8016fca:	4914      	ldr	r1, [pc, #80]	; (801701c <pbuf_remove_header+0xa0>)
 8016fcc:	4812      	ldr	r0, [pc, #72]	; (8017018 <pbuf_remove_header+0x9c>)
 8016fce:	f009 faa1 	bl	8020514 <iprintf>
 8016fd2:	2301      	movs	r3, #1
 8016fd4:	e017      	b.n	8017006 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	685b      	ldr	r3, [r3, #4]
 8016fda:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	685a      	ldr	r2, [r3, #4]
 8016fe0:	683b      	ldr	r3, [r7, #0]
 8016fe2:	441a      	add	r2, r3
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	895a      	ldrh	r2, [r3, #10]
 8016fec:	89fb      	ldrh	r3, [r7, #14]
 8016fee:	1ad3      	subs	r3, r2, r3
 8016ff0:	b29a      	uxth	r2, r3
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	891a      	ldrh	r2, [r3, #8]
 8016ffa:	89fb      	ldrh	r3, [r7, #14]
 8016ffc:	1ad3      	subs	r3, r2, r3
 8016ffe:	b29a      	uxth	r2, r3
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8017004:	2300      	movs	r3, #0
}
 8017006:	4618      	mov	r0, r3
 8017008:	3710      	adds	r7, #16
 801700a:	46bd      	mov	sp, r7
 801700c:	bd80      	pop	{r7, pc}
 801700e:	bf00      	nop
 8017010:	080221ec 	.word	0x080221ec
 8017014:	08022350 	.word	0x08022350
 8017018:	0802224c 	.word	0x0802224c
 801701c:	0802235c 	.word	0x0802235c

08017020 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8017020:	b580      	push	{r7, lr}
 8017022:	b082      	sub	sp, #8
 8017024:	af00      	add	r7, sp, #0
 8017026:	6078      	str	r0, [r7, #4]
 8017028:	460b      	mov	r3, r1
 801702a:	807b      	strh	r3, [r7, #2]
 801702c:	4613      	mov	r3, r2
 801702e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8017030:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017034:	2b00      	cmp	r3, #0
 8017036:	da08      	bge.n	801704a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8017038:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801703c:	425b      	negs	r3, r3
 801703e:	4619      	mov	r1, r3
 8017040:	6878      	ldr	r0, [r7, #4]
 8017042:	f7ff ff9b 	bl	8016f7c <pbuf_remove_header>
 8017046:	4603      	mov	r3, r0
 8017048:	e007      	b.n	801705a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801704a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801704e:	787a      	ldrb	r2, [r7, #1]
 8017050:	4619      	mov	r1, r3
 8017052:	6878      	ldr	r0, [r7, #4]
 8017054:	f7ff ff1a 	bl	8016e8c <pbuf_add_header_impl>
 8017058:	4603      	mov	r3, r0
  }
}
 801705a:	4618      	mov	r0, r3
 801705c:	3708      	adds	r7, #8
 801705e:	46bd      	mov	sp, r7
 8017060:	bd80      	pop	{r7, pc}

08017062 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8017062:	b580      	push	{r7, lr}
 8017064:	b082      	sub	sp, #8
 8017066:	af00      	add	r7, sp, #0
 8017068:	6078      	str	r0, [r7, #4]
 801706a:	460b      	mov	r3, r1
 801706c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801706e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017072:	2201      	movs	r2, #1
 8017074:	4619      	mov	r1, r3
 8017076:	6878      	ldr	r0, [r7, #4]
 8017078:	f7ff ffd2 	bl	8017020 <pbuf_header_impl>
 801707c:	4603      	mov	r3, r0
}
 801707e:	4618      	mov	r0, r3
 8017080:	3708      	adds	r7, #8
 8017082:	46bd      	mov	sp, r7
 8017084:	bd80      	pop	{r7, pc}
	...

08017088 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8017088:	b580      	push	{r7, lr}
 801708a:	b088      	sub	sp, #32
 801708c:	af00      	add	r7, sp, #0
 801708e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d10b      	bne.n	80170ae <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d106      	bne.n	80170aa <pbuf_free+0x22>
 801709c:	4b3b      	ldr	r3, [pc, #236]	; (801718c <pbuf_free+0x104>)
 801709e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80170a2:	493b      	ldr	r1, [pc, #236]	; (8017190 <pbuf_free+0x108>)
 80170a4:	483b      	ldr	r0, [pc, #236]	; (8017194 <pbuf_free+0x10c>)
 80170a6:	f009 fa35 	bl	8020514 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80170aa:	2300      	movs	r3, #0
 80170ac:	e069      	b.n	8017182 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80170ae:	2300      	movs	r3, #0
 80170b0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80170b2:	e062      	b.n	801717a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80170b4:	f009 f9ca 	bl	802044c <sys_arch_protect>
 80170b8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	7b9b      	ldrb	r3, [r3, #14]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d106      	bne.n	80170d0 <pbuf_free+0x48>
 80170c2:	4b32      	ldr	r3, [pc, #200]	; (801718c <pbuf_free+0x104>)
 80170c4:	f240 22f1 	movw	r2, #753	; 0x2f1
 80170c8:	4933      	ldr	r1, [pc, #204]	; (8017198 <pbuf_free+0x110>)
 80170ca:	4832      	ldr	r0, [pc, #200]	; (8017194 <pbuf_free+0x10c>)
 80170cc:	f009 fa22 	bl	8020514 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	7b9b      	ldrb	r3, [r3, #14]
 80170d4:	3b01      	subs	r3, #1
 80170d6:	b2da      	uxtb	r2, r3
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	739a      	strb	r2, [r3, #14]
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	7b9b      	ldrb	r3, [r3, #14]
 80170e0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80170e2:	69b8      	ldr	r0, [r7, #24]
 80170e4:	f009 f9c0 	bl	8020468 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80170e8:	7dfb      	ldrb	r3, [r7, #23]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d143      	bne.n	8017176 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	7b1b      	ldrb	r3, [r3, #12]
 80170f8:	f003 030f 	and.w	r3, r3, #15
 80170fc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	7b5b      	ldrb	r3, [r3, #13]
 8017102:	f003 0302 	and.w	r3, r3, #2
 8017106:	2b00      	cmp	r3, #0
 8017108:	d011      	beq.n	801712e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801710e:	68bb      	ldr	r3, [r7, #8]
 8017110:	691b      	ldr	r3, [r3, #16]
 8017112:	2b00      	cmp	r3, #0
 8017114:	d106      	bne.n	8017124 <pbuf_free+0x9c>
 8017116:	4b1d      	ldr	r3, [pc, #116]	; (801718c <pbuf_free+0x104>)
 8017118:	f240 22ff 	movw	r2, #767	; 0x2ff
 801711c:	491f      	ldr	r1, [pc, #124]	; (801719c <pbuf_free+0x114>)
 801711e:	481d      	ldr	r0, [pc, #116]	; (8017194 <pbuf_free+0x10c>)
 8017120:	f009 f9f8 	bl	8020514 <iprintf>
        pc->custom_free_function(p);
 8017124:	68bb      	ldr	r3, [r7, #8]
 8017126:	691b      	ldr	r3, [r3, #16]
 8017128:	6878      	ldr	r0, [r7, #4]
 801712a:	4798      	blx	r3
 801712c:	e01d      	b.n	801716a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801712e:	7bfb      	ldrb	r3, [r7, #15]
 8017130:	2b02      	cmp	r3, #2
 8017132:	d104      	bne.n	801713e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8017134:	6879      	ldr	r1, [r7, #4]
 8017136:	200c      	movs	r0, #12
 8017138:	f7ff f906 	bl	8016348 <memp_free>
 801713c:	e015      	b.n	801716a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801713e:	7bfb      	ldrb	r3, [r7, #15]
 8017140:	2b01      	cmp	r3, #1
 8017142:	d104      	bne.n	801714e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8017144:	6879      	ldr	r1, [r7, #4]
 8017146:	200b      	movs	r0, #11
 8017148:	f7ff f8fe 	bl	8016348 <memp_free>
 801714c:	e00d      	b.n	801716a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801714e:	7bfb      	ldrb	r3, [r7, #15]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d103      	bne.n	801715c <pbuf_free+0xd4>
          mem_free(p);
 8017154:	6878      	ldr	r0, [r7, #4]
 8017156:	f7fe fd89 	bl	8015c6c <mem_free>
 801715a:	e006      	b.n	801716a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801715c:	4b0b      	ldr	r3, [pc, #44]	; (801718c <pbuf_free+0x104>)
 801715e:	f240 320f 	movw	r2, #783	; 0x30f
 8017162:	490f      	ldr	r1, [pc, #60]	; (80171a0 <pbuf_free+0x118>)
 8017164:	480b      	ldr	r0, [pc, #44]	; (8017194 <pbuf_free+0x10c>)
 8017166:	f009 f9d5 	bl	8020514 <iprintf>
        }
      }
      count++;
 801716a:	7ffb      	ldrb	r3, [r7, #31]
 801716c:	3301      	adds	r3, #1
 801716e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8017170:	693b      	ldr	r3, [r7, #16]
 8017172:	607b      	str	r3, [r7, #4]
 8017174:	e001      	b.n	801717a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8017176:	2300      	movs	r3, #0
 8017178:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d199      	bne.n	80170b4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8017180:	7ffb      	ldrb	r3, [r7, #31]
}
 8017182:	4618      	mov	r0, r3
 8017184:	3720      	adds	r7, #32
 8017186:	46bd      	mov	sp, r7
 8017188:	bd80      	pop	{r7, pc}
 801718a:	bf00      	nop
 801718c:	080221ec 	.word	0x080221ec
 8017190:	08022350 	.word	0x08022350
 8017194:	0802224c 	.word	0x0802224c
 8017198:	0802237c 	.word	0x0802237c
 801719c:	08022394 	.word	0x08022394
 80171a0:	080223b8 	.word	0x080223b8

080171a4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80171a4:	b480      	push	{r7}
 80171a6:	b085      	sub	sp, #20
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80171ac:	2300      	movs	r3, #0
 80171ae:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80171b0:	e005      	b.n	80171be <pbuf_clen+0x1a>
    ++len;
 80171b2:	89fb      	ldrh	r3, [r7, #14]
 80171b4:	3301      	adds	r3, #1
 80171b6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d1f6      	bne.n	80171b2 <pbuf_clen+0xe>
  }
  return len;
 80171c4:	89fb      	ldrh	r3, [r7, #14]
}
 80171c6:	4618      	mov	r0, r3
 80171c8:	3714      	adds	r7, #20
 80171ca:	46bd      	mov	sp, r7
 80171cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d0:	4770      	bx	lr
	...

080171d4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80171d4:	b580      	push	{r7, lr}
 80171d6:	b084      	sub	sp, #16
 80171d8:	af00      	add	r7, sp, #0
 80171da:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d016      	beq.n	8017210 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80171e2:	f009 f933 	bl	802044c <sys_arch_protect>
 80171e6:	60f8      	str	r0, [r7, #12]
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	7b9b      	ldrb	r3, [r3, #14]
 80171ec:	3301      	adds	r3, #1
 80171ee:	b2da      	uxtb	r2, r3
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	739a      	strb	r2, [r3, #14]
 80171f4:	68f8      	ldr	r0, [r7, #12]
 80171f6:	f009 f937 	bl	8020468 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	7b9b      	ldrb	r3, [r3, #14]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d106      	bne.n	8017210 <pbuf_ref+0x3c>
 8017202:	4b05      	ldr	r3, [pc, #20]	; (8017218 <pbuf_ref+0x44>)
 8017204:	f240 3242 	movw	r2, #834	; 0x342
 8017208:	4904      	ldr	r1, [pc, #16]	; (801721c <pbuf_ref+0x48>)
 801720a:	4805      	ldr	r0, [pc, #20]	; (8017220 <pbuf_ref+0x4c>)
 801720c:	f009 f982 	bl	8020514 <iprintf>
  }
}
 8017210:	bf00      	nop
 8017212:	3710      	adds	r7, #16
 8017214:	46bd      	mov	sp, r7
 8017216:	bd80      	pop	{r7, pc}
 8017218:	080221ec 	.word	0x080221ec
 801721c:	080223cc 	.word	0x080223cc
 8017220:	0802224c 	.word	0x0802224c

08017224 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8017224:	b580      	push	{r7, lr}
 8017226:	b084      	sub	sp, #16
 8017228:	af00      	add	r7, sp, #0
 801722a:	6078      	str	r0, [r7, #4]
 801722c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d002      	beq.n	801723a <pbuf_cat+0x16>
 8017234:	683b      	ldr	r3, [r7, #0]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d107      	bne.n	801724a <pbuf_cat+0x26>
 801723a:	4b20      	ldr	r3, [pc, #128]	; (80172bc <pbuf_cat+0x98>)
 801723c:	f240 325a 	movw	r2, #858	; 0x35a
 8017240:	491f      	ldr	r1, [pc, #124]	; (80172c0 <pbuf_cat+0x9c>)
 8017242:	4820      	ldr	r0, [pc, #128]	; (80172c4 <pbuf_cat+0xa0>)
 8017244:	f009 f966 	bl	8020514 <iprintf>
 8017248:	e034      	b.n	80172b4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	60fb      	str	r3, [r7, #12]
 801724e:	e00a      	b.n	8017266 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	891a      	ldrh	r2, [r3, #8]
 8017254:	683b      	ldr	r3, [r7, #0]
 8017256:	891b      	ldrh	r3, [r3, #8]
 8017258:	4413      	add	r3, r2
 801725a:	b29a      	uxth	r2, r3
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	60fb      	str	r3, [r7, #12]
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d1f0      	bne.n	8017250 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	891a      	ldrh	r2, [r3, #8]
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	895b      	ldrh	r3, [r3, #10]
 8017276:	429a      	cmp	r2, r3
 8017278:	d006      	beq.n	8017288 <pbuf_cat+0x64>
 801727a:	4b10      	ldr	r3, [pc, #64]	; (80172bc <pbuf_cat+0x98>)
 801727c:	f240 3262 	movw	r2, #866	; 0x362
 8017280:	4911      	ldr	r1, [pc, #68]	; (80172c8 <pbuf_cat+0xa4>)
 8017282:	4810      	ldr	r0, [pc, #64]	; (80172c4 <pbuf_cat+0xa0>)
 8017284:	f009 f946 	bl	8020514 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	2b00      	cmp	r3, #0
 801728e:	d006      	beq.n	801729e <pbuf_cat+0x7a>
 8017290:	4b0a      	ldr	r3, [pc, #40]	; (80172bc <pbuf_cat+0x98>)
 8017292:	f240 3263 	movw	r2, #867	; 0x363
 8017296:	490d      	ldr	r1, [pc, #52]	; (80172cc <pbuf_cat+0xa8>)
 8017298:	480a      	ldr	r0, [pc, #40]	; (80172c4 <pbuf_cat+0xa0>)
 801729a:	f009 f93b 	bl	8020514 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	891a      	ldrh	r2, [r3, #8]
 80172a2:	683b      	ldr	r3, [r7, #0]
 80172a4:	891b      	ldrh	r3, [r3, #8]
 80172a6:	4413      	add	r3, r2
 80172a8:	b29a      	uxth	r2, r3
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	683a      	ldr	r2, [r7, #0]
 80172b2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80172b4:	3710      	adds	r7, #16
 80172b6:	46bd      	mov	sp, r7
 80172b8:	bd80      	pop	{r7, pc}
 80172ba:	bf00      	nop
 80172bc:	080221ec 	.word	0x080221ec
 80172c0:	080223e0 	.word	0x080223e0
 80172c4:	0802224c 	.word	0x0802224c
 80172c8:	08022418 	.word	0x08022418
 80172cc:	08022448 	.word	0x08022448

080172d0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b086      	sub	sp, #24
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	6078      	str	r0, [r7, #4]
 80172d8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80172da:	2300      	movs	r3, #0
 80172dc:	617b      	str	r3, [r7, #20]
 80172de:	2300      	movs	r3, #0
 80172e0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d008      	beq.n	80172fa <pbuf_copy+0x2a>
 80172e8:	683b      	ldr	r3, [r7, #0]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d005      	beq.n	80172fa <pbuf_copy+0x2a>
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	891a      	ldrh	r2, [r3, #8]
 80172f2:	683b      	ldr	r3, [r7, #0]
 80172f4:	891b      	ldrh	r3, [r3, #8]
 80172f6:	429a      	cmp	r2, r3
 80172f8:	d209      	bcs.n	801730e <pbuf_copy+0x3e>
 80172fa:	4b57      	ldr	r3, [pc, #348]	; (8017458 <pbuf_copy+0x188>)
 80172fc:	f240 32ca 	movw	r2, #970	; 0x3ca
 8017300:	4956      	ldr	r1, [pc, #344]	; (801745c <pbuf_copy+0x18c>)
 8017302:	4857      	ldr	r0, [pc, #348]	; (8017460 <pbuf_copy+0x190>)
 8017304:	f009 f906 	bl	8020514 <iprintf>
 8017308:	f06f 030f 	mvn.w	r3, #15
 801730c:	e09f      	b.n	801744e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	895b      	ldrh	r3, [r3, #10]
 8017312:	461a      	mov	r2, r3
 8017314:	697b      	ldr	r3, [r7, #20]
 8017316:	1ad2      	subs	r2, r2, r3
 8017318:	683b      	ldr	r3, [r7, #0]
 801731a:	895b      	ldrh	r3, [r3, #10]
 801731c:	4619      	mov	r1, r3
 801731e:	693b      	ldr	r3, [r7, #16]
 8017320:	1acb      	subs	r3, r1, r3
 8017322:	429a      	cmp	r2, r3
 8017324:	d306      	bcc.n	8017334 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8017326:	683b      	ldr	r3, [r7, #0]
 8017328:	895b      	ldrh	r3, [r3, #10]
 801732a:	461a      	mov	r2, r3
 801732c:	693b      	ldr	r3, [r7, #16]
 801732e:	1ad3      	subs	r3, r2, r3
 8017330:	60fb      	str	r3, [r7, #12]
 8017332:	e005      	b.n	8017340 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	895b      	ldrh	r3, [r3, #10]
 8017338:	461a      	mov	r2, r3
 801733a:	697b      	ldr	r3, [r7, #20]
 801733c:	1ad3      	subs	r3, r2, r3
 801733e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	685a      	ldr	r2, [r3, #4]
 8017344:	697b      	ldr	r3, [r7, #20]
 8017346:	18d0      	adds	r0, r2, r3
 8017348:	683b      	ldr	r3, [r7, #0]
 801734a:	685a      	ldr	r2, [r3, #4]
 801734c:	693b      	ldr	r3, [r7, #16]
 801734e:	4413      	add	r3, r2
 8017350:	68fa      	ldr	r2, [r7, #12]
 8017352:	4619      	mov	r1, r3
 8017354:	f009 f8cb 	bl	80204ee <memcpy>
    offset_to += len;
 8017358:	697a      	ldr	r2, [r7, #20]
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	4413      	add	r3, r2
 801735e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8017360:	693a      	ldr	r2, [r7, #16]
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	4413      	add	r3, r2
 8017366:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	895b      	ldrh	r3, [r3, #10]
 801736c:	461a      	mov	r2, r3
 801736e:	697b      	ldr	r3, [r7, #20]
 8017370:	4293      	cmp	r3, r2
 8017372:	d906      	bls.n	8017382 <pbuf_copy+0xb2>
 8017374:	4b38      	ldr	r3, [pc, #224]	; (8017458 <pbuf_copy+0x188>)
 8017376:	f240 32d9 	movw	r2, #985	; 0x3d9
 801737a:	493a      	ldr	r1, [pc, #232]	; (8017464 <pbuf_copy+0x194>)
 801737c:	4838      	ldr	r0, [pc, #224]	; (8017460 <pbuf_copy+0x190>)
 801737e:	f009 f8c9 	bl	8020514 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8017382:	683b      	ldr	r3, [r7, #0]
 8017384:	895b      	ldrh	r3, [r3, #10]
 8017386:	461a      	mov	r2, r3
 8017388:	693b      	ldr	r3, [r7, #16]
 801738a:	4293      	cmp	r3, r2
 801738c:	d906      	bls.n	801739c <pbuf_copy+0xcc>
 801738e:	4b32      	ldr	r3, [pc, #200]	; (8017458 <pbuf_copy+0x188>)
 8017390:	f240 32da 	movw	r2, #986	; 0x3da
 8017394:	4934      	ldr	r1, [pc, #208]	; (8017468 <pbuf_copy+0x198>)
 8017396:	4832      	ldr	r0, [pc, #200]	; (8017460 <pbuf_copy+0x190>)
 8017398:	f009 f8bc 	bl	8020514 <iprintf>
    if (offset_from >= p_from->len) {
 801739c:	683b      	ldr	r3, [r7, #0]
 801739e:	895b      	ldrh	r3, [r3, #10]
 80173a0:	461a      	mov	r2, r3
 80173a2:	693b      	ldr	r3, [r7, #16]
 80173a4:	4293      	cmp	r3, r2
 80173a6:	d304      	bcc.n	80173b2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80173a8:	2300      	movs	r3, #0
 80173aa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80173ac:	683b      	ldr	r3, [r7, #0]
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	895b      	ldrh	r3, [r3, #10]
 80173b6:	461a      	mov	r2, r3
 80173b8:	697b      	ldr	r3, [r7, #20]
 80173ba:	4293      	cmp	r3, r2
 80173bc:	d114      	bne.n	80173e8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80173be:	2300      	movs	r3, #0
 80173c0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d10c      	bne.n	80173e8 <pbuf_copy+0x118>
 80173ce:	683b      	ldr	r3, [r7, #0]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d009      	beq.n	80173e8 <pbuf_copy+0x118>
 80173d4:	4b20      	ldr	r3, [pc, #128]	; (8017458 <pbuf_copy+0x188>)
 80173d6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80173da:	4924      	ldr	r1, [pc, #144]	; (801746c <pbuf_copy+0x19c>)
 80173dc:	4820      	ldr	r0, [pc, #128]	; (8017460 <pbuf_copy+0x190>)
 80173de:	f009 f899 	bl	8020514 <iprintf>
 80173e2:	f06f 030f 	mvn.w	r3, #15
 80173e6:	e032      	b.n	801744e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80173e8:	683b      	ldr	r3, [r7, #0]
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d013      	beq.n	8017416 <pbuf_copy+0x146>
 80173ee:	683b      	ldr	r3, [r7, #0]
 80173f0:	895a      	ldrh	r2, [r3, #10]
 80173f2:	683b      	ldr	r3, [r7, #0]
 80173f4:	891b      	ldrh	r3, [r3, #8]
 80173f6:	429a      	cmp	r2, r3
 80173f8:	d10d      	bne.n	8017416 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80173fa:	683b      	ldr	r3, [r7, #0]
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d009      	beq.n	8017416 <pbuf_copy+0x146>
 8017402:	4b15      	ldr	r3, [pc, #84]	; (8017458 <pbuf_copy+0x188>)
 8017404:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8017408:	4919      	ldr	r1, [pc, #100]	; (8017470 <pbuf_copy+0x1a0>)
 801740a:	4815      	ldr	r0, [pc, #84]	; (8017460 <pbuf_copy+0x190>)
 801740c:	f009 f882 	bl	8020514 <iprintf>
 8017410:	f06f 0305 	mvn.w	r3, #5
 8017414:	e01b      	b.n	801744e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d013      	beq.n	8017444 <pbuf_copy+0x174>
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	895a      	ldrh	r2, [r3, #10]
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	891b      	ldrh	r3, [r3, #8]
 8017424:	429a      	cmp	r2, r3
 8017426:	d10d      	bne.n	8017444 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d009      	beq.n	8017444 <pbuf_copy+0x174>
 8017430:	4b09      	ldr	r3, [pc, #36]	; (8017458 <pbuf_copy+0x188>)
 8017432:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8017436:	490e      	ldr	r1, [pc, #56]	; (8017470 <pbuf_copy+0x1a0>)
 8017438:	4809      	ldr	r0, [pc, #36]	; (8017460 <pbuf_copy+0x190>)
 801743a:	f009 f86b 	bl	8020514 <iprintf>
 801743e:	f06f 0305 	mvn.w	r3, #5
 8017442:	e004      	b.n	801744e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8017444:	683b      	ldr	r3, [r7, #0]
 8017446:	2b00      	cmp	r3, #0
 8017448:	f47f af61 	bne.w	801730e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801744c:	2300      	movs	r3, #0
}
 801744e:	4618      	mov	r0, r3
 8017450:	3718      	adds	r7, #24
 8017452:	46bd      	mov	sp, r7
 8017454:	bd80      	pop	{r7, pc}
 8017456:	bf00      	nop
 8017458:	080221ec 	.word	0x080221ec
 801745c:	08022494 	.word	0x08022494
 8017460:	0802224c 	.word	0x0802224c
 8017464:	080224c4 	.word	0x080224c4
 8017468:	080224dc 	.word	0x080224dc
 801746c:	080224f8 	.word	0x080224f8
 8017470:	08022508 	.word	0x08022508

08017474 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8017474:	b580      	push	{r7, lr}
 8017476:	b088      	sub	sp, #32
 8017478:	af00      	add	r7, sp, #0
 801747a:	60f8      	str	r0, [r7, #12]
 801747c:	60b9      	str	r1, [r7, #8]
 801747e:	4611      	mov	r1, r2
 8017480:	461a      	mov	r2, r3
 8017482:	460b      	mov	r3, r1
 8017484:	80fb      	strh	r3, [r7, #6]
 8017486:	4613      	mov	r3, r2
 8017488:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801748a:	2300      	movs	r3, #0
 801748c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801748e:	2300      	movs	r3, #0
 8017490:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	2b00      	cmp	r3, #0
 8017496:	d108      	bne.n	80174aa <pbuf_copy_partial+0x36>
 8017498:	4b2b      	ldr	r3, [pc, #172]	; (8017548 <pbuf_copy_partial+0xd4>)
 801749a:	f240 420a 	movw	r2, #1034	; 0x40a
 801749e:	492b      	ldr	r1, [pc, #172]	; (801754c <pbuf_copy_partial+0xd8>)
 80174a0:	482b      	ldr	r0, [pc, #172]	; (8017550 <pbuf_copy_partial+0xdc>)
 80174a2:	f009 f837 	bl	8020514 <iprintf>
 80174a6:	2300      	movs	r3, #0
 80174a8:	e04a      	b.n	8017540 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80174aa:	68bb      	ldr	r3, [r7, #8]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d108      	bne.n	80174c2 <pbuf_copy_partial+0x4e>
 80174b0:	4b25      	ldr	r3, [pc, #148]	; (8017548 <pbuf_copy_partial+0xd4>)
 80174b2:	f240 420b 	movw	r2, #1035	; 0x40b
 80174b6:	4927      	ldr	r1, [pc, #156]	; (8017554 <pbuf_copy_partial+0xe0>)
 80174b8:	4825      	ldr	r0, [pc, #148]	; (8017550 <pbuf_copy_partial+0xdc>)
 80174ba:	f009 f82b 	bl	8020514 <iprintf>
 80174be:	2300      	movs	r3, #0
 80174c0:	e03e      	b.n	8017540 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	61fb      	str	r3, [r7, #28]
 80174c6:	e034      	b.n	8017532 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80174c8:	88bb      	ldrh	r3, [r7, #4]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d00a      	beq.n	80174e4 <pbuf_copy_partial+0x70>
 80174ce:	69fb      	ldr	r3, [r7, #28]
 80174d0:	895b      	ldrh	r3, [r3, #10]
 80174d2:	88ba      	ldrh	r2, [r7, #4]
 80174d4:	429a      	cmp	r2, r3
 80174d6:	d305      	bcc.n	80174e4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80174d8:	69fb      	ldr	r3, [r7, #28]
 80174da:	895b      	ldrh	r3, [r3, #10]
 80174dc:	88ba      	ldrh	r2, [r7, #4]
 80174de:	1ad3      	subs	r3, r2, r3
 80174e0:	80bb      	strh	r3, [r7, #4]
 80174e2:	e023      	b.n	801752c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80174e4:	69fb      	ldr	r3, [r7, #28]
 80174e6:	895a      	ldrh	r2, [r3, #10]
 80174e8:	88bb      	ldrh	r3, [r7, #4]
 80174ea:	1ad3      	subs	r3, r2, r3
 80174ec:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80174ee:	8b3a      	ldrh	r2, [r7, #24]
 80174f0:	88fb      	ldrh	r3, [r7, #6]
 80174f2:	429a      	cmp	r2, r3
 80174f4:	d901      	bls.n	80174fa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80174f6:	88fb      	ldrh	r3, [r7, #6]
 80174f8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80174fa:	8b7b      	ldrh	r3, [r7, #26]
 80174fc:	68ba      	ldr	r2, [r7, #8]
 80174fe:	18d0      	adds	r0, r2, r3
 8017500:	69fb      	ldr	r3, [r7, #28]
 8017502:	685a      	ldr	r2, [r3, #4]
 8017504:	88bb      	ldrh	r3, [r7, #4]
 8017506:	4413      	add	r3, r2
 8017508:	8b3a      	ldrh	r2, [r7, #24]
 801750a:	4619      	mov	r1, r3
 801750c:	f008 ffef 	bl	80204ee <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8017510:	8afa      	ldrh	r2, [r7, #22]
 8017512:	8b3b      	ldrh	r3, [r7, #24]
 8017514:	4413      	add	r3, r2
 8017516:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8017518:	8b7a      	ldrh	r2, [r7, #26]
 801751a:	8b3b      	ldrh	r3, [r7, #24]
 801751c:	4413      	add	r3, r2
 801751e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8017520:	88fa      	ldrh	r2, [r7, #6]
 8017522:	8b3b      	ldrh	r3, [r7, #24]
 8017524:	1ad3      	subs	r3, r2, r3
 8017526:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8017528:	2300      	movs	r3, #0
 801752a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801752c:	69fb      	ldr	r3, [r7, #28]
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	61fb      	str	r3, [r7, #28]
 8017532:	88fb      	ldrh	r3, [r7, #6]
 8017534:	2b00      	cmp	r3, #0
 8017536:	d002      	beq.n	801753e <pbuf_copy_partial+0xca>
 8017538:	69fb      	ldr	r3, [r7, #28]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d1c4      	bne.n	80174c8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801753e:	8afb      	ldrh	r3, [r7, #22]
}
 8017540:	4618      	mov	r0, r3
 8017542:	3720      	adds	r7, #32
 8017544:	46bd      	mov	sp, r7
 8017546:	bd80      	pop	{r7, pc}
 8017548:	080221ec 	.word	0x080221ec
 801754c:	08022534 	.word	0x08022534
 8017550:	0802224c 	.word	0x0802224c
 8017554:	08022554 	.word	0x08022554

08017558 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8017558:	b580      	push	{r7, lr}
 801755a:	b084      	sub	sp, #16
 801755c:	af00      	add	r7, sp, #0
 801755e:	4603      	mov	r3, r0
 8017560:	603a      	str	r2, [r7, #0]
 8017562:	71fb      	strb	r3, [r7, #7]
 8017564:	460b      	mov	r3, r1
 8017566:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8017568:	683b      	ldr	r3, [r7, #0]
 801756a:	8919      	ldrh	r1, [r3, #8]
 801756c:	88ba      	ldrh	r2, [r7, #4]
 801756e:	79fb      	ldrb	r3, [r7, #7]
 8017570:	4618      	mov	r0, r3
 8017572:	f7ff faa9 	bl	8016ac8 <pbuf_alloc>
 8017576:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d101      	bne.n	8017582 <pbuf_clone+0x2a>
    return NULL;
 801757e:	2300      	movs	r3, #0
 8017580:	e011      	b.n	80175a6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8017582:	6839      	ldr	r1, [r7, #0]
 8017584:	68f8      	ldr	r0, [r7, #12]
 8017586:	f7ff fea3 	bl	80172d0 <pbuf_copy>
 801758a:	4603      	mov	r3, r0
 801758c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801758e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d006      	beq.n	80175a4 <pbuf_clone+0x4c>
 8017596:	4b06      	ldr	r3, [pc, #24]	; (80175b0 <pbuf_clone+0x58>)
 8017598:	f240 5224 	movw	r2, #1316	; 0x524
 801759c:	4905      	ldr	r1, [pc, #20]	; (80175b4 <pbuf_clone+0x5c>)
 801759e:	4806      	ldr	r0, [pc, #24]	; (80175b8 <pbuf_clone+0x60>)
 80175a0:	f008 ffb8 	bl	8020514 <iprintf>
  return q;
 80175a4:	68fb      	ldr	r3, [r7, #12]
}
 80175a6:	4618      	mov	r0, r3
 80175a8:	3710      	adds	r7, #16
 80175aa:	46bd      	mov	sp, r7
 80175ac:	bd80      	pop	{r7, pc}
 80175ae:	bf00      	nop
 80175b0:	080221ec 	.word	0x080221ec
 80175b4:	08022660 	.word	0x08022660
 80175b8:	0802224c 	.word	0x0802224c

080175bc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80175bc:	b580      	push	{r7, lr}
 80175be:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80175c0:	f008 ffc0 	bl	8020544 <rand>
 80175c4:	4603      	mov	r3, r0
 80175c6:	b29b      	uxth	r3, r3
 80175c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80175cc:	b29b      	uxth	r3, r3
 80175ce:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80175d2:	b29a      	uxth	r2, r3
 80175d4:	4b01      	ldr	r3, [pc, #4]	; (80175dc <tcp_init+0x20>)
 80175d6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80175d8:	bf00      	nop
 80175da:	bd80      	pop	{r7, pc}
 80175dc:	20000050 	.word	0x20000050

080175e0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80175e0:	b580      	push	{r7, lr}
 80175e2:	b082      	sub	sp, #8
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	7d1b      	ldrb	r3, [r3, #20]
 80175ec:	2b01      	cmp	r3, #1
 80175ee:	d105      	bne.n	80175fc <tcp_free+0x1c>
 80175f0:	4b06      	ldr	r3, [pc, #24]	; (801760c <tcp_free+0x2c>)
 80175f2:	22d4      	movs	r2, #212	; 0xd4
 80175f4:	4906      	ldr	r1, [pc, #24]	; (8017610 <tcp_free+0x30>)
 80175f6:	4807      	ldr	r0, [pc, #28]	; (8017614 <tcp_free+0x34>)
 80175f8:	f008 ff8c 	bl	8020514 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80175fc:	6879      	ldr	r1, [r7, #4]
 80175fe:	2001      	movs	r0, #1
 8017600:	f7fe fea2 	bl	8016348 <memp_free>
}
 8017604:	bf00      	nop
 8017606:	3708      	adds	r7, #8
 8017608:	46bd      	mov	sp, r7
 801760a:	bd80      	pop	{r7, pc}
 801760c:	080226ec 	.word	0x080226ec
 8017610:	0802271c 	.word	0x0802271c
 8017614:	08022730 	.word	0x08022730

08017618 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8017618:	b580      	push	{r7, lr}
 801761a:	b082      	sub	sp, #8
 801761c:	af00      	add	r7, sp, #0
 801761e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	7d1b      	ldrb	r3, [r3, #20]
 8017624:	2b01      	cmp	r3, #1
 8017626:	d105      	bne.n	8017634 <tcp_free_listen+0x1c>
 8017628:	4b06      	ldr	r3, [pc, #24]	; (8017644 <tcp_free_listen+0x2c>)
 801762a:	22df      	movs	r2, #223	; 0xdf
 801762c:	4906      	ldr	r1, [pc, #24]	; (8017648 <tcp_free_listen+0x30>)
 801762e:	4807      	ldr	r0, [pc, #28]	; (801764c <tcp_free_listen+0x34>)
 8017630:	f008 ff70 	bl	8020514 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8017634:	6879      	ldr	r1, [r7, #4]
 8017636:	2002      	movs	r0, #2
 8017638:	f7fe fe86 	bl	8016348 <memp_free>
}
 801763c:	bf00      	nop
 801763e:	3708      	adds	r7, #8
 8017640:	46bd      	mov	sp, r7
 8017642:	bd80      	pop	{r7, pc}
 8017644:	080226ec 	.word	0x080226ec
 8017648:	08022758 	.word	0x08022758
 801764c:	08022730 	.word	0x08022730

08017650 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8017650:	b580      	push	{r7, lr}
 8017652:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8017654:	f001 f852 	bl	80186fc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8017658:	4b07      	ldr	r3, [pc, #28]	; (8017678 <tcp_tmr+0x28>)
 801765a:	781b      	ldrb	r3, [r3, #0]
 801765c:	3301      	adds	r3, #1
 801765e:	b2da      	uxtb	r2, r3
 8017660:	4b05      	ldr	r3, [pc, #20]	; (8017678 <tcp_tmr+0x28>)
 8017662:	701a      	strb	r2, [r3, #0]
 8017664:	4b04      	ldr	r3, [pc, #16]	; (8017678 <tcp_tmr+0x28>)
 8017666:	781b      	ldrb	r3, [r3, #0]
 8017668:	f003 0301 	and.w	r3, r3, #1
 801766c:	2b00      	cmp	r3, #0
 801766e:	d001      	beq.n	8017674 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8017670:	f000 fd06 	bl	8018080 <tcp_slowtmr>
  }
}
 8017674:	bf00      	nop
 8017676:	bd80      	pop	{r7, pc}
 8017678:	20009349 	.word	0x20009349

0801767c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801767c:	b580      	push	{r7, lr}
 801767e:	b084      	sub	sp, #16
 8017680:	af00      	add	r7, sp, #0
 8017682:	6078      	str	r0, [r7, #4]
 8017684:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8017686:	683b      	ldr	r3, [r7, #0]
 8017688:	2b00      	cmp	r3, #0
 801768a:	d105      	bne.n	8017698 <tcp_remove_listener+0x1c>
 801768c:	4b0d      	ldr	r3, [pc, #52]	; (80176c4 <tcp_remove_listener+0x48>)
 801768e:	22ff      	movs	r2, #255	; 0xff
 8017690:	490d      	ldr	r1, [pc, #52]	; (80176c8 <tcp_remove_listener+0x4c>)
 8017692:	480e      	ldr	r0, [pc, #56]	; (80176cc <tcp_remove_listener+0x50>)
 8017694:	f008 ff3e 	bl	8020514 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	60fb      	str	r3, [r7, #12]
 801769c:	e00a      	b.n	80176b4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80176a2:	683a      	ldr	r2, [r7, #0]
 80176a4:	429a      	cmp	r2, r3
 80176a6:	d102      	bne.n	80176ae <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	2200      	movs	r2, #0
 80176ac:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	68db      	ldr	r3, [r3, #12]
 80176b2:	60fb      	str	r3, [r7, #12]
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d1f1      	bne.n	801769e <tcp_remove_listener+0x22>
    }
  }
}
 80176ba:	bf00      	nop
 80176bc:	3710      	adds	r7, #16
 80176be:	46bd      	mov	sp, r7
 80176c0:	bd80      	pop	{r7, pc}
 80176c2:	bf00      	nop
 80176c4:	080226ec 	.word	0x080226ec
 80176c8:	08022774 	.word	0x08022774
 80176cc:	08022730 	.word	0x08022730

080176d0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b084      	sub	sp, #16
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d106      	bne.n	80176ec <tcp_listen_closed+0x1c>
 80176de:	4b14      	ldr	r3, [pc, #80]	; (8017730 <tcp_listen_closed+0x60>)
 80176e0:	f240 1211 	movw	r2, #273	; 0x111
 80176e4:	4913      	ldr	r1, [pc, #76]	; (8017734 <tcp_listen_closed+0x64>)
 80176e6:	4814      	ldr	r0, [pc, #80]	; (8017738 <tcp_listen_closed+0x68>)
 80176e8:	f008 ff14 	bl	8020514 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	7d1b      	ldrb	r3, [r3, #20]
 80176f0:	2b01      	cmp	r3, #1
 80176f2:	d006      	beq.n	8017702 <tcp_listen_closed+0x32>
 80176f4:	4b0e      	ldr	r3, [pc, #56]	; (8017730 <tcp_listen_closed+0x60>)
 80176f6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80176fa:	4910      	ldr	r1, [pc, #64]	; (801773c <tcp_listen_closed+0x6c>)
 80176fc:	480e      	ldr	r0, [pc, #56]	; (8017738 <tcp_listen_closed+0x68>)
 80176fe:	f008 ff09 	bl	8020514 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8017702:	2301      	movs	r3, #1
 8017704:	60fb      	str	r3, [r7, #12]
 8017706:	e00b      	b.n	8017720 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8017708:	4a0d      	ldr	r2, [pc, #52]	; (8017740 <tcp_listen_closed+0x70>)
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	6879      	ldr	r1, [r7, #4]
 8017714:	4618      	mov	r0, r3
 8017716:	f7ff ffb1 	bl	801767c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	3301      	adds	r3, #1
 801771e:	60fb      	str	r3, [r7, #12]
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	2b03      	cmp	r3, #3
 8017724:	d9f0      	bls.n	8017708 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8017726:	bf00      	nop
 8017728:	3710      	adds	r7, #16
 801772a:	46bd      	mov	sp, r7
 801772c:	bd80      	pop	{r7, pc}
 801772e:	bf00      	nop
 8017730:	080226ec 	.word	0x080226ec
 8017734:	0802279c 	.word	0x0802279c
 8017738:	08022730 	.word	0x08022730
 801773c:	080227a8 	.word	0x080227a8
 8017740:	08035248 	.word	0x08035248

08017744 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8017744:	b5b0      	push	{r4, r5, r7, lr}
 8017746:	b088      	sub	sp, #32
 8017748:	af04      	add	r7, sp, #16
 801774a:	6078      	str	r0, [r7, #4]
 801774c:	460b      	mov	r3, r1
 801774e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d106      	bne.n	8017764 <tcp_close_shutdown+0x20>
 8017756:	4b61      	ldr	r3, [pc, #388]	; (80178dc <tcp_close_shutdown+0x198>)
 8017758:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801775c:	4960      	ldr	r1, [pc, #384]	; (80178e0 <tcp_close_shutdown+0x19c>)
 801775e:	4861      	ldr	r0, [pc, #388]	; (80178e4 <tcp_close_shutdown+0x1a0>)
 8017760:	f008 fed8 	bl	8020514 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8017764:	78fb      	ldrb	r3, [r7, #3]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d066      	beq.n	8017838 <tcp_close_shutdown+0xf4>
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	7d1b      	ldrb	r3, [r3, #20]
 801776e:	2b04      	cmp	r3, #4
 8017770:	d003      	beq.n	801777a <tcp_close_shutdown+0x36>
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	7d1b      	ldrb	r3, [r3, #20]
 8017776:	2b07      	cmp	r3, #7
 8017778:	d15e      	bne.n	8017838 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801777e:	2b00      	cmp	r3, #0
 8017780:	d104      	bne.n	801778c <tcp_close_shutdown+0x48>
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017786:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801778a:	d055      	beq.n	8017838 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	8b5b      	ldrh	r3, [r3, #26]
 8017790:	f003 0310 	and.w	r3, r3, #16
 8017794:	2b00      	cmp	r3, #0
 8017796:	d106      	bne.n	80177a6 <tcp_close_shutdown+0x62>
 8017798:	4b50      	ldr	r3, [pc, #320]	; (80178dc <tcp_close_shutdown+0x198>)
 801779a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801779e:	4952      	ldr	r1, [pc, #328]	; (80178e8 <tcp_close_shutdown+0x1a4>)
 80177a0:	4850      	ldr	r0, [pc, #320]	; (80178e4 <tcp_close_shutdown+0x1a0>)
 80177a2:	f008 feb7 	bl	8020514 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80177ae:	687d      	ldr	r5, [r7, #4]
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	3304      	adds	r3, #4
 80177b4:	687a      	ldr	r2, [r7, #4]
 80177b6:	8ad2      	ldrh	r2, [r2, #22]
 80177b8:	6879      	ldr	r1, [r7, #4]
 80177ba:	8b09      	ldrh	r1, [r1, #24]
 80177bc:	9102      	str	r1, [sp, #8]
 80177be:	9201      	str	r2, [sp, #4]
 80177c0:	9300      	str	r3, [sp, #0]
 80177c2:	462b      	mov	r3, r5
 80177c4:	4622      	mov	r2, r4
 80177c6:	4601      	mov	r1, r0
 80177c8:	6878      	ldr	r0, [r7, #4]
 80177ca:	f005 fd99 	bl	801d300 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80177ce:	6878      	ldr	r0, [r7, #4]
 80177d0:	f001 fb68 	bl	8018ea4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80177d4:	4b45      	ldr	r3, [pc, #276]	; (80178ec <tcp_close_shutdown+0x1a8>)
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	687a      	ldr	r2, [r7, #4]
 80177da:	429a      	cmp	r2, r3
 80177dc:	d105      	bne.n	80177ea <tcp_close_shutdown+0xa6>
 80177de:	4b43      	ldr	r3, [pc, #268]	; (80178ec <tcp_close_shutdown+0x1a8>)
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	68db      	ldr	r3, [r3, #12]
 80177e4:	4a41      	ldr	r2, [pc, #260]	; (80178ec <tcp_close_shutdown+0x1a8>)
 80177e6:	6013      	str	r3, [r2, #0]
 80177e8:	e013      	b.n	8017812 <tcp_close_shutdown+0xce>
 80177ea:	4b40      	ldr	r3, [pc, #256]	; (80178ec <tcp_close_shutdown+0x1a8>)
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	60fb      	str	r3, [r7, #12]
 80177f0:	e00c      	b.n	801780c <tcp_close_shutdown+0xc8>
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	68db      	ldr	r3, [r3, #12]
 80177f6:	687a      	ldr	r2, [r7, #4]
 80177f8:	429a      	cmp	r2, r3
 80177fa:	d104      	bne.n	8017806 <tcp_close_shutdown+0xc2>
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	68da      	ldr	r2, [r3, #12]
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	60da      	str	r2, [r3, #12]
 8017804:	e005      	b.n	8017812 <tcp_close_shutdown+0xce>
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	68db      	ldr	r3, [r3, #12]
 801780a:	60fb      	str	r3, [r7, #12]
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	2b00      	cmp	r3, #0
 8017810:	d1ef      	bne.n	80177f2 <tcp_close_shutdown+0xae>
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	2200      	movs	r2, #0
 8017816:	60da      	str	r2, [r3, #12]
 8017818:	4b35      	ldr	r3, [pc, #212]	; (80178f0 <tcp_close_shutdown+0x1ac>)
 801781a:	2201      	movs	r2, #1
 801781c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801781e:	4b35      	ldr	r3, [pc, #212]	; (80178f4 <tcp_close_shutdown+0x1b0>)
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	687a      	ldr	r2, [r7, #4]
 8017824:	429a      	cmp	r2, r3
 8017826:	d102      	bne.n	801782e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8017828:	f003 fffa 	bl	801b820 <tcp_trigger_input_pcb_close>
 801782c:	e002      	b.n	8017834 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801782e:	6878      	ldr	r0, [r7, #4]
 8017830:	f7ff fed6 	bl	80175e0 <tcp_free>
      }
      return ERR_OK;
 8017834:	2300      	movs	r3, #0
 8017836:	e04d      	b.n	80178d4 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	7d1b      	ldrb	r3, [r3, #20]
 801783c:	2b01      	cmp	r3, #1
 801783e:	d02d      	beq.n	801789c <tcp_close_shutdown+0x158>
 8017840:	2b02      	cmp	r3, #2
 8017842:	d036      	beq.n	80178b2 <tcp_close_shutdown+0x16e>
 8017844:	2b00      	cmp	r3, #0
 8017846:	d13f      	bne.n	80178c8 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	8adb      	ldrh	r3, [r3, #22]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d021      	beq.n	8017894 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017850:	4b29      	ldr	r3, [pc, #164]	; (80178f8 <tcp_close_shutdown+0x1b4>)
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	687a      	ldr	r2, [r7, #4]
 8017856:	429a      	cmp	r2, r3
 8017858:	d105      	bne.n	8017866 <tcp_close_shutdown+0x122>
 801785a:	4b27      	ldr	r3, [pc, #156]	; (80178f8 <tcp_close_shutdown+0x1b4>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	68db      	ldr	r3, [r3, #12]
 8017860:	4a25      	ldr	r2, [pc, #148]	; (80178f8 <tcp_close_shutdown+0x1b4>)
 8017862:	6013      	str	r3, [r2, #0]
 8017864:	e013      	b.n	801788e <tcp_close_shutdown+0x14a>
 8017866:	4b24      	ldr	r3, [pc, #144]	; (80178f8 <tcp_close_shutdown+0x1b4>)
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	60bb      	str	r3, [r7, #8]
 801786c:	e00c      	b.n	8017888 <tcp_close_shutdown+0x144>
 801786e:	68bb      	ldr	r3, [r7, #8]
 8017870:	68db      	ldr	r3, [r3, #12]
 8017872:	687a      	ldr	r2, [r7, #4]
 8017874:	429a      	cmp	r2, r3
 8017876:	d104      	bne.n	8017882 <tcp_close_shutdown+0x13e>
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	68da      	ldr	r2, [r3, #12]
 801787c:	68bb      	ldr	r3, [r7, #8]
 801787e:	60da      	str	r2, [r3, #12]
 8017880:	e005      	b.n	801788e <tcp_close_shutdown+0x14a>
 8017882:	68bb      	ldr	r3, [r7, #8]
 8017884:	68db      	ldr	r3, [r3, #12]
 8017886:	60bb      	str	r3, [r7, #8]
 8017888:	68bb      	ldr	r3, [r7, #8]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d1ef      	bne.n	801786e <tcp_close_shutdown+0x12a>
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	2200      	movs	r2, #0
 8017892:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8017894:	6878      	ldr	r0, [r7, #4]
 8017896:	f7ff fea3 	bl	80175e0 <tcp_free>
      break;
 801789a:	e01a      	b.n	80178d2 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 801789c:	6878      	ldr	r0, [r7, #4]
 801789e:	f7ff ff17 	bl	80176d0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80178a2:	6879      	ldr	r1, [r7, #4]
 80178a4:	4815      	ldr	r0, [pc, #84]	; (80178fc <tcp_close_shutdown+0x1b8>)
 80178a6:	f001 fb4d 	bl	8018f44 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80178aa:	6878      	ldr	r0, [r7, #4]
 80178ac:	f7ff feb4 	bl	8017618 <tcp_free_listen>
      break;
 80178b0:	e00f      	b.n	80178d2 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80178b2:	6879      	ldr	r1, [r7, #4]
 80178b4:	480d      	ldr	r0, [pc, #52]	; (80178ec <tcp_close_shutdown+0x1a8>)
 80178b6:	f001 fb45 	bl	8018f44 <tcp_pcb_remove>
 80178ba:	4b0d      	ldr	r3, [pc, #52]	; (80178f0 <tcp_close_shutdown+0x1ac>)
 80178bc:	2201      	movs	r2, #1
 80178be:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80178c0:	6878      	ldr	r0, [r7, #4]
 80178c2:	f7ff fe8d 	bl	80175e0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80178c6:	e004      	b.n	80178d2 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 80178c8:	6878      	ldr	r0, [r7, #4]
 80178ca:	f000 f819 	bl	8017900 <tcp_close_shutdown_fin>
 80178ce:	4603      	mov	r3, r0
 80178d0:	e000      	b.n	80178d4 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 80178d2:	2300      	movs	r3, #0
}
 80178d4:	4618      	mov	r0, r3
 80178d6:	3710      	adds	r7, #16
 80178d8:	46bd      	mov	sp, r7
 80178da:	bdb0      	pop	{r4, r5, r7, pc}
 80178dc:	080226ec 	.word	0x080226ec
 80178e0:	080227c0 	.word	0x080227c0
 80178e4:	08022730 	.word	0x08022730
 80178e8:	080227e0 	.word	0x080227e0
 80178ec:	2001fef0 	.word	0x2001fef0
 80178f0:	2001feec 	.word	0x2001feec
 80178f4:	2001ff04 	.word	0x2001ff04
 80178f8:	2001fefc 	.word	0x2001fefc
 80178fc:	2001fef8 	.word	0x2001fef8

08017900 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8017900:	b580      	push	{r7, lr}
 8017902:	b084      	sub	sp, #16
 8017904:	af00      	add	r7, sp, #0
 8017906:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	2b00      	cmp	r3, #0
 801790c:	d106      	bne.n	801791c <tcp_close_shutdown_fin+0x1c>
 801790e:	4b2c      	ldr	r3, [pc, #176]	; (80179c0 <tcp_close_shutdown_fin+0xc0>)
 8017910:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8017914:	492b      	ldr	r1, [pc, #172]	; (80179c4 <tcp_close_shutdown_fin+0xc4>)
 8017916:	482c      	ldr	r0, [pc, #176]	; (80179c8 <tcp_close_shutdown_fin+0xc8>)
 8017918:	f008 fdfc 	bl	8020514 <iprintf>

  switch (pcb->state) {
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	7d1b      	ldrb	r3, [r3, #20]
 8017920:	2b04      	cmp	r3, #4
 8017922:	d010      	beq.n	8017946 <tcp_close_shutdown_fin+0x46>
 8017924:	2b07      	cmp	r3, #7
 8017926:	d01b      	beq.n	8017960 <tcp_close_shutdown_fin+0x60>
 8017928:	2b03      	cmp	r3, #3
 801792a:	d126      	bne.n	801797a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801792c:	6878      	ldr	r0, [r7, #4]
 801792e:	f004 fde3 	bl	801c4f8 <tcp_send_fin>
 8017932:	4603      	mov	r3, r0
 8017934:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8017936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d11f      	bne.n	801797e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	2205      	movs	r2, #5
 8017942:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017944:	e01b      	b.n	801797e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8017946:	6878      	ldr	r0, [r7, #4]
 8017948:	f004 fdd6 	bl	801c4f8 <tcp_send_fin>
 801794c:	4603      	mov	r3, r0
 801794e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8017950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d114      	bne.n	8017982 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	2205      	movs	r2, #5
 801795c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801795e:	e010      	b.n	8017982 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8017960:	6878      	ldr	r0, [r7, #4]
 8017962:	f004 fdc9 	bl	801c4f8 <tcp_send_fin>
 8017966:	4603      	mov	r3, r0
 8017968:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801796a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d109      	bne.n	8017986 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	2209      	movs	r2, #9
 8017976:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017978:	e005      	b.n	8017986 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801797a:	2300      	movs	r3, #0
 801797c:	e01c      	b.n	80179b8 <tcp_close_shutdown_fin+0xb8>
      break;
 801797e:	bf00      	nop
 8017980:	e002      	b.n	8017988 <tcp_close_shutdown_fin+0x88>
      break;
 8017982:	bf00      	nop
 8017984:	e000      	b.n	8017988 <tcp_close_shutdown_fin+0x88>
      break;
 8017986:	bf00      	nop
  }

  if (err == ERR_OK) {
 8017988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d103      	bne.n	8017998 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8017990:	6878      	ldr	r0, [r7, #4]
 8017992:	f004 feef 	bl	801c774 <tcp_output>
 8017996:	e00d      	b.n	80179b4 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8017998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801799c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80179a0:	d108      	bne.n	80179b4 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	8b5b      	ldrh	r3, [r3, #26]
 80179a6:	f043 0308 	orr.w	r3, r3, #8
 80179aa:	b29a      	uxth	r2, r3
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80179b0:	2300      	movs	r3, #0
 80179b2:	e001      	b.n	80179b8 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 80179b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80179b8:	4618      	mov	r0, r3
 80179ba:	3710      	adds	r7, #16
 80179bc:	46bd      	mov	sp, r7
 80179be:	bd80      	pop	{r7, pc}
 80179c0:	080226ec 	.word	0x080226ec
 80179c4:	0802279c 	.word	0x0802279c
 80179c8:	08022730 	.word	0x08022730

080179cc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80179cc:	b580      	push	{r7, lr}
 80179ce:	b082      	sub	sp, #8
 80179d0:	af00      	add	r7, sp, #0
 80179d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d109      	bne.n	80179ee <tcp_close+0x22>
 80179da:	4b0f      	ldr	r3, [pc, #60]	; (8017a18 <tcp_close+0x4c>)
 80179dc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80179e0:	490e      	ldr	r1, [pc, #56]	; (8017a1c <tcp_close+0x50>)
 80179e2:	480f      	ldr	r0, [pc, #60]	; (8017a20 <tcp_close+0x54>)
 80179e4:	f008 fd96 	bl	8020514 <iprintf>
 80179e8:	f06f 030f 	mvn.w	r3, #15
 80179ec:	e00f      	b.n	8017a0e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	7d1b      	ldrb	r3, [r3, #20]
 80179f2:	2b01      	cmp	r3, #1
 80179f4:	d006      	beq.n	8017a04 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	8b5b      	ldrh	r3, [r3, #26]
 80179fa:	f043 0310 	orr.w	r3, r3, #16
 80179fe:	b29a      	uxth	r2, r3
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8017a04:	2101      	movs	r1, #1
 8017a06:	6878      	ldr	r0, [r7, #4]
 8017a08:	f7ff fe9c 	bl	8017744 <tcp_close_shutdown>
 8017a0c:	4603      	mov	r3, r0
}
 8017a0e:	4618      	mov	r0, r3
 8017a10:	3708      	adds	r7, #8
 8017a12:	46bd      	mov	sp, r7
 8017a14:	bd80      	pop	{r7, pc}
 8017a16:	bf00      	nop
 8017a18:	080226ec 	.word	0x080226ec
 8017a1c:	080227fc 	.word	0x080227fc
 8017a20:	08022730 	.word	0x08022730

08017a24 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8017a24:	b580      	push	{r7, lr}
 8017a26:	b08e      	sub	sp, #56	; 0x38
 8017a28:	af04      	add	r7, sp, #16
 8017a2a:	6078      	str	r0, [r7, #4]
 8017a2c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d107      	bne.n	8017a44 <tcp_abandon+0x20>
 8017a34:	4b52      	ldr	r3, [pc, #328]	; (8017b80 <tcp_abandon+0x15c>)
 8017a36:	f240 223d 	movw	r2, #573	; 0x23d
 8017a3a:	4952      	ldr	r1, [pc, #328]	; (8017b84 <tcp_abandon+0x160>)
 8017a3c:	4852      	ldr	r0, [pc, #328]	; (8017b88 <tcp_abandon+0x164>)
 8017a3e:	f008 fd69 	bl	8020514 <iprintf>
 8017a42:	e099      	b.n	8017b78 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	7d1b      	ldrb	r3, [r3, #20]
 8017a48:	2b01      	cmp	r3, #1
 8017a4a:	d106      	bne.n	8017a5a <tcp_abandon+0x36>
 8017a4c:	4b4c      	ldr	r3, [pc, #304]	; (8017b80 <tcp_abandon+0x15c>)
 8017a4e:	f240 2241 	movw	r2, #577	; 0x241
 8017a52:	494e      	ldr	r1, [pc, #312]	; (8017b8c <tcp_abandon+0x168>)
 8017a54:	484c      	ldr	r0, [pc, #304]	; (8017b88 <tcp_abandon+0x164>)
 8017a56:	f008 fd5d 	bl	8020514 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	7d1b      	ldrb	r3, [r3, #20]
 8017a5e:	2b0a      	cmp	r3, #10
 8017a60:	d107      	bne.n	8017a72 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8017a62:	6879      	ldr	r1, [r7, #4]
 8017a64:	484a      	ldr	r0, [pc, #296]	; (8017b90 <tcp_abandon+0x16c>)
 8017a66:	f001 fa6d 	bl	8018f44 <tcp_pcb_remove>
    tcp_free(pcb);
 8017a6a:	6878      	ldr	r0, [r7, #4]
 8017a6c:	f7ff fdb8 	bl	80175e0 <tcp_free>
 8017a70:	e082      	b.n	8017b78 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8017a72:	2300      	movs	r3, #0
 8017a74:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8017a76:	2300      	movs	r3, #0
 8017a78:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a7e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a84:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017a8c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	691b      	ldr	r3, [r3, #16]
 8017a92:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	7d1b      	ldrb	r3, [r3, #20]
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d126      	bne.n	8017aea <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	8adb      	ldrh	r3, [r3, #22]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d02e      	beq.n	8017b02 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017aa4:	4b3b      	ldr	r3, [pc, #236]	; (8017b94 <tcp_abandon+0x170>)
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	687a      	ldr	r2, [r7, #4]
 8017aaa:	429a      	cmp	r2, r3
 8017aac:	d105      	bne.n	8017aba <tcp_abandon+0x96>
 8017aae:	4b39      	ldr	r3, [pc, #228]	; (8017b94 <tcp_abandon+0x170>)
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	68db      	ldr	r3, [r3, #12]
 8017ab4:	4a37      	ldr	r2, [pc, #220]	; (8017b94 <tcp_abandon+0x170>)
 8017ab6:	6013      	str	r3, [r2, #0]
 8017ab8:	e013      	b.n	8017ae2 <tcp_abandon+0xbe>
 8017aba:	4b36      	ldr	r3, [pc, #216]	; (8017b94 <tcp_abandon+0x170>)
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	61fb      	str	r3, [r7, #28]
 8017ac0:	e00c      	b.n	8017adc <tcp_abandon+0xb8>
 8017ac2:	69fb      	ldr	r3, [r7, #28]
 8017ac4:	68db      	ldr	r3, [r3, #12]
 8017ac6:	687a      	ldr	r2, [r7, #4]
 8017ac8:	429a      	cmp	r2, r3
 8017aca:	d104      	bne.n	8017ad6 <tcp_abandon+0xb2>
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	68da      	ldr	r2, [r3, #12]
 8017ad0:	69fb      	ldr	r3, [r7, #28]
 8017ad2:	60da      	str	r2, [r3, #12]
 8017ad4:	e005      	b.n	8017ae2 <tcp_abandon+0xbe>
 8017ad6:	69fb      	ldr	r3, [r7, #28]
 8017ad8:	68db      	ldr	r3, [r3, #12]
 8017ada:	61fb      	str	r3, [r7, #28]
 8017adc:	69fb      	ldr	r3, [r7, #28]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d1ef      	bne.n	8017ac2 <tcp_abandon+0x9e>
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	2200      	movs	r2, #0
 8017ae6:	60da      	str	r2, [r3, #12]
 8017ae8:	e00b      	b.n	8017b02 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8017aea:	683b      	ldr	r3, [r7, #0]
 8017aec:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	8adb      	ldrh	r3, [r3, #22]
 8017af2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8017af4:	6879      	ldr	r1, [r7, #4]
 8017af6:	4828      	ldr	r0, [pc, #160]	; (8017b98 <tcp_abandon+0x174>)
 8017af8:	f001 fa24 	bl	8018f44 <tcp_pcb_remove>
 8017afc:	4b27      	ldr	r3, [pc, #156]	; (8017b9c <tcp_abandon+0x178>)
 8017afe:	2201      	movs	r2, #1
 8017b00:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d004      	beq.n	8017b14 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017b0e:	4618      	mov	r0, r3
 8017b10:	f000 fed4 	bl	80188bc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d004      	beq.n	8017b26 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017b20:	4618      	mov	r0, r3
 8017b22:	f000 fecb 	bl	80188bc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d004      	beq.n	8017b38 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017b32:	4618      	mov	r0, r3
 8017b34:	f000 fec2 	bl	80188bc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8017b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d00e      	beq.n	8017b5c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8017b3e:	6879      	ldr	r1, [r7, #4]
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	3304      	adds	r3, #4
 8017b44:	687a      	ldr	r2, [r7, #4]
 8017b46:	8b12      	ldrh	r2, [r2, #24]
 8017b48:	9202      	str	r2, [sp, #8]
 8017b4a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017b4c:	9201      	str	r2, [sp, #4]
 8017b4e:	9300      	str	r3, [sp, #0]
 8017b50:	460b      	mov	r3, r1
 8017b52:	697a      	ldr	r2, [r7, #20]
 8017b54:	69b9      	ldr	r1, [r7, #24]
 8017b56:	6878      	ldr	r0, [r7, #4]
 8017b58:	f005 fbd2 	bl	801d300 <tcp_rst>
    }
    last_state = pcb->state;
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	7d1b      	ldrb	r3, [r3, #20]
 8017b60:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8017b62:	6878      	ldr	r0, [r7, #4]
 8017b64:	f7ff fd3c 	bl	80175e0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8017b68:	693b      	ldr	r3, [r7, #16]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d004      	beq.n	8017b78 <tcp_abandon+0x154>
 8017b6e:	693b      	ldr	r3, [r7, #16]
 8017b70:	f06f 010c 	mvn.w	r1, #12
 8017b74:	68f8      	ldr	r0, [r7, #12]
 8017b76:	4798      	blx	r3
  }
}
 8017b78:	3728      	adds	r7, #40	; 0x28
 8017b7a:	46bd      	mov	sp, r7
 8017b7c:	bd80      	pop	{r7, pc}
 8017b7e:	bf00      	nop
 8017b80:	080226ec 	.word	0x080226ec
 8017b84:	08022830 	.word	0x08022830
 8017b88:	08022730 	.word	0x08022730
 8017b8c:	0802284c 	.word	0x0802284c
 8017b90:	2001ff00 	.word	0x2001ff00
 8017b94:	2001fefc 	.word	0x2001fefc
 8017b98:	2001fef0 	.word	0x2001fef0
 8017b9c:	2001feec 	.word	0x2001feec

08017ba0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b082      	sub	sp, #8
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8017ba8:	2101      	movs	r1, #1
 8017baa:	6878      	ldr	r0, [r7, #4]
 8017bac:	f7ff ff3a 	bl	8017a24 <tcp_abandon>
}
 8017bb0:	bf00      	nop
 8017bb2:	3708      	adds	r7, #8
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd80      	pop	{r7, pc}

08017bb8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b088      	sub	sp, #32
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	60f8      	str	r0, [r7, #12]
 8017bc0:	60b9      	str	r1, [r7, #8]
 8017bc2:	4613      	mov	r3, r2
 8017bc4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8017bc6:	2304      	movs	r3, #4
 8017bc8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8017bca:	68bb      	ldr	r3, [r7, #8]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d101      	bne.n	8017bd4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8017bd0:	4b3e      	ldr	r3, [pc, #248]	; (8017ccc <tcp_bind+0x114>)
 8017bd2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d109      	bne.n	8017bee <tcp_bind+0x36>
 8017bda:	4b3d      	ldr	r3, [pc, #244]	; (8017cd0 <tcp_bind+0x118>)
 8017bdc:	f240 22a9 	movw	r2, #681	; 0x2a9
 8017be0:	493c      	ldr	r1, [pc, #240]	; (8017cd4 <tcp_bind+0x11c>)
 8017be2:	483d      	ldr	r0, [pc, #244]	; (8017cd8 <tcp_bind+0x120>)
 8017be4:	f008 fc96 	bl	8020514 <iprintf>
 8017be8:	f06f 030f 	mvn.w	r3, #15
 8017bec:	e06a      	b.n	8017cc4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	7d1b      	ldrb	r3, [r3, #20]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d009      	beq.n	8017c0a <tcp_bind+0x52>
 8017bf6:	4b36      	ldr	r3, [pc, #216]	; (8017cd0 <tcp_bind+0x118>)
 8017bf8:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017bfc:	4937      	ldr	r1, [pc, #220]	; (8017cdc <tcp_bind+0x124>)
 8017bfe:	4836      	ldr	r0, [pc, #216]	; (8017cd8 <tcp_bind+0x120>)
 8017c00:	f008 fc88 	bl	8020514 <iprintf>
 8017c04:	f06f 0305 	mvn.w	r3, #5
 8017c08:	e05c      	b.n	8017cc4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8017c0a:	88fb      	ldrh	r3, [r7, #6]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d109      	bne.n	8017c24 <tcp_bind+0x6c>
    port = tcp_new_port();
 8017c10:	f000 f9f0 	bl	8017ff4 <tcp_new_port>
 8017c14:	4603      	mov	r3, r0
 8017c16:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8017c18:	88fb      	ldrh	r3, [r7, #6]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d135      	bne.n	8017c8a <tcp_bind+0xd2>
      return ERR_BUF;
 8017c1e:	f06f 0301 	mvn.w	r3, #1
 8017c22:	e04f      	b.n	8017cc4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8017c24:	2300      	movs	r3, #0
 8017c26:	61fb      	str	r3, [r7, #28]
 8017c28:	e02b      	b.n	8017c82 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8017c2a:	4a2d      	ldr	r2, [pc, #180]	; (8017ce0 <tcp_bind+0x128>)
 8017c2c:	69fb      	ldr	r3, [r7, #28]
 8017c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	61bb      	str	r3, [r7, #24]
 8017c36:	e01e      	b.n	8017c76 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8017c38:	69bb      	ldr	r3, [r7, #24]
 8017c3a:	8adb      	ldrh	r3, [r3, #22]
 8017c3c:	88fa      	ldrh	r2, [r7, #6]
 8017c3e:	429a      	cmp	r2, r3
 8017c40:	d116      	bne.n	8017c70 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8017c42:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d010      	beq.n	8017c6a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8017c48:	69bb      	ldr	r3, [r7, #24]
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d00c      	beq.n	8017c6a <tcp_bind+0xb2>
 8017c50:	68bb      	ldr	r3, [r7, #8]
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d009      	beq.n	8017c6a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8017c56:	68bb      	ldr	r3, [r7, #8]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d005      	beq.n	8017c6a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8017c5e:	69bb      	ldr	r3, [r7, #24]
 8017c60:	681a      	ldr	r2, [r3, #0]
 8017c62:	68bb      	ldr	r3, [r7, #8]
 8017c64:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8017c66:	429a      	cmp	r2, r3
 8017c68:	d102      	bne.n	8017c70 <tcp_bind+0xb8>
              return ERR_USE;
 8017c6a:	f06f 0307 	mvn.w	r3, #7
 8017c6e:	e029      	b.n	8017cc4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8017c70:	69bb      	ldr	r3, [r7, #24]
 8017c72:	68db      	ldr	r3, [r3, #12]
 8017c74:	61bb      	str	r3, [r7, #24]
 8017c76:	69bb      	ldr	r3, [r7, #24]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d1dd      	bne.n	8017c38 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8017c7c:	69fb      	ldr	r3, [r7, #28]
 8017c7e:	3301      	adds	r3, #1
 8017c80:	61fb      	str	r3, [r7, #28]
 8017c82:	69fa      	ldr	r2, [r7, #28]
 8017c84:	697b      	ldr	r3, [r7, #20]
 8017c86:	429a      	cmp	r2, r3
 8017c88:	dbcf      	blt.n	8017c2a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8017c8a:	68bb      	ldr	r3, [r7, #8]
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d00c      	beq.n	8017caa <tcp_bind+0xf2>
 8017c90:	68bb      	ldr	r3, [r7, #8]
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d008      	beq.n	8017caa <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8017c98:	68bb      	ldr	r3, [r7, #8]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d002      	beq.n	8017ca4 <tcp_bind+0xec>
 8017c9e:	68bb      	ldr	r3, [r7, #8]
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	e000      	b.n	8017ca6 <tcp_bind+0xee>
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	68fa      	ldr	r2, [r7, #12]
 8017ca8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	88fa      	ldrh	r2, [r7, #6]
 8017cae:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8017cb0:	4b0c      	ldr	r3, [pc, #48]	; (8017ce4 <tcp_bind+0x12c>)
 8017cb2:	681a      	ldr	r2, [r3, #0]
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	60da      	str	r2, [r3, #12]
 8017cb8:	4a0a      	ldr	r2, [pc, #40]	; (8017ce4 <tcp_bind+0x12c>)
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	6013      	str	r3, [r2, #0]
 8017cbe:	f005 fce1 	bl	801d684 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8017cc2:	2300      	movs	r3, #0
}
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	3720      	adds	r7, #32
 8017cc8:	46bd      	mov	sp, r7
 8017cca:	bd80      	pop	{r7, pc}
 8017ccc:	08035270 	.word	0x08035270
 8017cd0:	080226ec 	.word	0x080226ec
 8017cd4:	08022880 	.word	0x08022880
 8017cd8:	08022730 	.word	0x08022730
 8017cdc:	08022898 	.word	0x08022898
 8017ce0:	08035248 	.word	0x08035248
 8017ce4:	2001fefc 	.word	0x2001fefc

08017ce8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b084      	sub	sp, #16
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	60f8      	str	r0, [r7, #12]
 8017cf0:	60b9      	str	r1, [r7, #8]
 8017cf2:	4613      	mov	r3, r2
 8017cf4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8017cf6:	68bb      	ldr	r3, [r7, #8]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d106      	bne.n	8017d0a <tcp_accept_null+0x22>
 8017cfc:	4b07      	ldr	r3, [pc, #28]	; (8017d1c <tcp_accept_null+0x34>)
 8017cfe:	f240 320f 	movw	r2, #783	; 0x30f
 8017d02:	4907      	ldr	r1, [pc, #28]	; (8017d20 <tcp_accept_null+0x38>)
 8017d04:	4807      	ldr	r0, [pc, #28]	; (8017d24 <tcp_accept_null+0x3c>)
 8017d06:	f008 fc05 	bl	8020514 <iprintf>

  tcp_abort(pcb);
 8017d0a:	68b8      	ldr	r0, [r7, #8]
 8017d0c:	f7ff ff48 	bl	8017ba0 <tcp_abort>

  return ERR_ABRT;
 8017d10:	f06f 030c 	mvn.w	r3, #12
}
 8017d14:	4618      	mov	r0, r3
 8017d16:	3710      	adds	r7, #16
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	bd80      	pop	{r7, pc}
 8017d1c:	080226ec 	.word	0x080226ec
 8017d20:	080228c0 	.word	0x080228c0
 8017d24:	08022730 	.word	0x08022730

08017d28 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b082      	sub	sp, #8
 8017d2c:	af00      	add	r7, sp, #0
 8017d2e:	6078      	str	r0, [r7, #4]
 8017d30:	460b      	mov	r3, r1
 8017d32:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8017d34:	78fb      	ldrb	r3, [r7, #3]
 8017d36:	2200      	movs	r2, #0
 8017d38:	4619      	mov	r1, r3
 8017d3a:	6878      	ldr	r0, [r7, #4]
 8017d3c:	f000 f806 	bl	8017d4c <tcp_listen_with_backlog_and_err>
 8017d40:	4603      	mov	r3, r0
}
 8017d42:	4618      	mov	r0, r3
 8017d44:	3708      	adds	r7, #8
 8017d46:	46bd      	mov	sp, r7
 8017d48:	bd80      	pop	{r7, pc}
	...

08017d4c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8017d4c:	b580      	push	{r7, lr}
 8017d4e:	b088      	sub	sp, #32
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	60f8      	str	r0, [r7, #12]
 8017d54:	460b      	mov	r3, r1
 8017d56:	607a      	str	r2, [r7, #4]
 8017d58:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d109      	bne.n	8017d78 <tcp_listen_with_backlog_and_err+0x2c>
 8017d64:	4b47      	ldr	r3, [pc, #284]	; (8017e84 <tcp_listen_with_backlog_and_err+0x138>)
 8017d66:	f240 3259 	movw	r2, #857	; 0x359
 8017d6a:	4947      	ldr	r1, [pc, #284]	; (8017e88 <tcp_listen_with_backlog_and_err+0x13c>)
 8017d6c:	4847      	ldr	r0, [pc, #284]	; (8017e8c <tcp_listen_with_backlog_and_err+0x140>)
 8017d6e:	f008 fbd1 	bl	8020514 <iprintf>
 8017d72:	23f0      	movs	r3, #240	; 0xf0
 8017d74:	76fb      	strb	r3, [r7, #27]
 8017d76:	e079      	b.n	8017e6c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	7d1b      	ldrb	r3, [r3, #20]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d009      	beq.n	8017d94 <tcp_listen_with_backlog_and_err+0x48>
 8017d80:	4b40      	ldr	r3, [pc, #256]	; (8017e84 <tcp_listen_with_backlog_and_err+0x138>)
 8017d82:	f240 325a 	movw	r2, #858	; 0x35a
 8017d86:	4942      	ldr	r1, [pc, #264]	; (8017e90 <tcp_listen_with_backlog_and_err+0x144>)
 8017d88:	4840      	ldr	r0, [pc, #256]	; (8017e8c <tcp_listen_with_backlog_and_err+0x140>)
 8017d8a:	f008 fbc3 	bl	8020514 <iprintf>
 8017d8e:	23f1      	movs	r3, #241	; 0xf1
 8017d90:	76fb      	strb	r3, [r7, #27]
 8017d92:	e06b      	b.n	8017e6c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	7d1b      	ldrb	r3, [r3, #20]
 8017d98:	2b01      	cmp	r3, #1
 8017d9a:	d104      	bne.n	8017da6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8017da0:	23f7      	movs	r3, #247	; 0xf7
 8017da2:	76fb      	strb	r3, [r7, #27]
    goto done;
 8017da4:	e062      	b.n	8017e6c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8017da6:	2002      	movs	r0, #2
 8017da8:	f7fe fa7c 	bl	80162a4 <memp_malloc>
 8017dac:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8017dae:	69fb      	ldr	r3, [r7, #28]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d102      	bne.n	8017dba <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8017db4:	23ff      	movs	r3, #255	; 0xff
 8017db6:	76fb      	strb	r3, [r7, #27]
    goto done;
 8017db8:	e058      	b.n	8017e6c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	691a      	ldr	r2, [r3, #16]
 8017dbe:	69fb      	ldr	r3, [r7, #28]
 8017dc0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8017dc2:	68fb      	ldr	r3, [r7, #12]
 8017dc4:	8ada      	ldrh	r2, [r3, #22]
 8017dc6:	69fb      	ldr	r3, [r7, #28]
 8017dc8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8017dca:	69fb      	ldr	r3, [r7, #28]
 8017dcc:	2201      	movs	r2, #1
 8017dce:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	7d5a      	ldrb	r2, [r3, #21]
 8017dd4:	69fb      	ldr	r3, [r7, #28]
 8017dd6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	7a5a      	ldrb	r2, [r3, #9]
 8017ddc:	69fb      	ldr	r3, [r7, #28]
 8017dde:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8017de0:	69fb      	ldr	r3, [r7, #28]
 8017de2:	2200      	movs	r2, #0
 8017de4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	7ada      	ldrb	r2, [r3, #11]
 8017dea:	69fb      	ldr	r3, [r7, #28]
 8017dec:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	7a9a      	ldrb	r2, [r3, #10]
 8017df2:	69fb      	ldr	r3, [r7, #28]
 8017df4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	681a      	ldr	r2, [r3, #0]
 8017dfa:	69fb      	ldr	r3, [r7, #28]
 8017dfc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	8adb      	ldrh	r3, [r3, #22]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d021      	beq.n	8017e4a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8017e06:	4b23      	ldr	r3, [pc, #140]	; (8017e94 <tcp_listen_with_backlog_and_err+0x148>)
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	68fa      	ldr	r2, [r7, #12]
 8017e0c:	429a      	cmp	r2, r3
 8017e0e:	d105      	bne.n	8017e1c <tcp_listen_with_backlog_and_err+0xd0>
 8017e10:	4b20      	ldr	r3, [pc, #128]	; (8017e94 <tcp_listen_with_backlog_and_err+0x148>)
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	68db      	ldr	r3, [r3, #12]
 8017e16:	4a1f      	ldr	r2, [pc, #124]	; (8017e94 <tcp_listen_with_backlog_and_err+0x148>)
 8017e18:	6013      	str	r3, [r2, #0]
 8017e1a:	e013      	b.n	8017e44 <tcp_listen_with_backlog_and_err+0xf8>
 8017e1c:	4b1d      	ldr	r3, [pc, #116]	; (8017e94 <tcp_listen_with_backlog_and_err+0x148>)
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	617b      	str	r3, [r7, #20]
 8017e22:	e00c      	b.n	8017e3e <tcp_listen_with_backlog_and_err+0xf2>
 8017e24:	697b      	ldr	r3, [r7, #20]
 8017e26:	68db      	ldr	r3, [r3, #12]
 8017e28:	68fa      	ldr	r2, [r7, #12]
 8017e2a:	429a      	cmp	r2, r3
 8017e2c:	d104      	bne.n	8017e38 <tcp_listen_with_backlog_and_err+0xec>
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	68da      	ldr	r2, [r3, #12]
 8017e32:	697b      	ldr	r3, [r7, #20]
 8017e34:	60da      	str	r2, [r3, #12]
 8017e36:	e005      	b.n	8017e44 <tcp_listen_with_backlog_and_err+0xf8>
 8017e38:	697b      	ldr	r3, [r7, #20]
 8017e3a:	68db      	ldr	r3, [r3, #12]
 8017e3c:	617b      	str	r3, [r7, #20]
 8017e3e:	697b      	ldr	r3, [r7, #20]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d1ef      	bne.n	8017e24 <tcp_listen_with_backlog_and_err+0xd8>
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	2200      	movs	r2, #0
 8017e48:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8017e4a:	68f8      	ldr	r0, [r7, #12]
 8017e4c:	f7ff fbc8 	bl	80175e0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8017e50:	69fb      	ldr	r3, [r7, #28]
 8017e52:	4a11      	ldr	r2, [pc, #68]	; (8017e98 <tcp_listen_with_backlog_and_err+0x14c>)
 8017e54:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8017e56:	4b11      	ldr	r3, [pc, #68]	; (8017e9c <tcp_listen_with_backlog_and_err+0x150>)
 8017e58:	681a      	ldr	r2, [r3, #0]
 8017e5a:	69fb      	ldr	r3, [r7, #28]
 8017e5c:	60da      	str	r2, [r3, #12]
 8017e5e:	4a0f      	ldr	r2, [pc, #60]	; (8017e9c <tcp_listen_with_backlog_and_err+0x150>)
 8017e60:	69fb      	ldr	r3, [r7, #28]
 8017e62:	6013      	str	r3, [r2, #0]
 8017e64:	f005 fc0e 	bl	801d684 <tcp_timer_needed>
  res = ERR_OK;
 8017e68:	2300      	movs	r3, #0
 8017e6a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d002      	beq.n	8017e78 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	7efa      	ldrb	r2, [r7, #27]
 8017e76:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8017e78:	69fb      	ldr	r3, [r7, #28]
}
 8017e7a:	4618      	mov	r0, r3
 8017e7c:	3720      	adds	r7, #32
 8017e7e:	46bd      	mov	sp, r7
 8017e80:	bd80      	pop	{r7, pc}
 8017e82:	bf00      	nop
 8017e84:	080226ec 	.word	0x080226ec
 8017e88:	080228e0 	.word	0x080228e0
 8017e8c:	08022730 	.word	0x08022730
 8017e90:	08022910 	.word	0x08022910
 8017e94:	2001fefc 	.word	0x2001fefc
 8017e98:	08017ce9 	.word	0x08017ce9
 8017e9c:	2001fef8 	.word	0x2001fef8

08017ea0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8017ea0:	b580      	push	{r7, lr}
 8017ea2:	b084      	sub	sp, #16
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d106      	bne.n	8017ebc <tcp_update_rcv_ann_wnd+0x1c>
 8017eae:	4b25      	ldr	r3, [pc, #148]	; (8017f44 <tcp_update_rcv_ann_wnd+0xa4>)
 8017eb0:	f240 32a6 	movw	r2, #934	; 0x3a6
 8017eb4:	4924      	ldr	r1, [pc, #144]	; (8017f48 <tcp_update_rcv_ann_wnd+0xa8>)
 8017eb6:	4825      	ldr	r0, [pc, #148]	; (8017f4c <tcp_update_rcv_ann_wnd+0xac>)
 8017eb8:	f008 fb2c 	bl	8020514 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ec0:	687a      	ldr	r2, [r7, #4]
 8017ec2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8017ec4:	4413      	add	r3, r2
 8017ec6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ecc:	687a      	ldr	r2, [r7, #4]
 8017ece:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8017ed0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8017ed4:	bf28      	it	cs
 8017ed6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8017eda:	b292      	uxth	r2, r2
 8017edc:	4413      	add	r3, r2
 8017ede:	68fa      	ldr	r2, [r7, #12]
 8017ee0:	1ad3      	subs	r3, r2, r3
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	db08      	blt.n	8017ef8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ef2:	68fa      	ldr	r2, [r7, #12]
 8017ef4:	1ad3      	subs	r3, r2, r3
 8017ef6:	e020      	b.n	8017f3a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f00:	1ad3      	subs	r3, r2, r3
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	dd03      	ble.n	8017f0e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	2200      	movs	r2, #0
 8017f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017f0c:	e014      	b.n	8017f38 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f16:	1ad3      	subs	r3, r2, r3
 8017f18:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8017f1a:	68bb      	ldr	r3, [r7, #8]
 8017f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017f20:	d306      	bcc.n	8017f30 <tcp_update_rcv_ann_wnd+0x90>
 8017f22:	4b08      	ldr	r3, [pc, #32]	; (8017f44 <tcp_update_rcv_ann_wnd+0xa4>)
 8017f24:	f240 32b6 	movw	r2, #950	; 0x3b6
 8017f28:	4909      	ldr	r1, [pc, #36]	; (8017f50 <tcp_update_rcv_ann_wnd+0xb0>)
 8017f2a:	4808      	ldr	r0, [pc, #32]	; (8017f4c <tcp_update_rcv_ann_wnd+0xac>)
 8017f2c:	f008 faf2 	bl	8020514 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8017f30:	68bb      	ldr	r3, [r7, #8]
 8017f32:	b29a      	uxth	r2, r3
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8017f38:	2300      	movs	r3, #0
  }
}
 8017f3a:	4618      	mov	r0, r3
 8017f3c:	3710      	adds	r7, #16
 8017f3e:	46bd      	mov	sp, r7
 8017f40:	bd80      	pop	{r7, pc}
 8017f42:	bf00      	nop
 8017f44:	080226ec 	.word	0x080226ec
 8017f48:	08022948 	.word	0x08022948
 8017f4c:	08022730 	.word	0x08022730
 8017f50:	0802296c 	.word	0x0802296c

08017f54 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b084      	sub	sp, #16
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	6078      	str	r0, [r7, #4]
 8017f5c:	460b      	mov	r3, r1
 8017f5e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d107      	bne.n	8017f76 <tcp_recved+0x22>
 8017f66:	4b1f      	ldr	r3, [pc, #124]	; (8017fe4 <tcp_recved+0x90>)
 8017f68:	f240 32cf 	movw	r2, #975	; 0x3cf
 8017f6c:	491e      	ldr	r1, [pc, #120]	; (8017fe8 <tcp_recved+0x94>)
 8017f6e:	481f      	ldr	r0, [pc, #124]	; (8017fec <tcp_recved+0x98>)
 8017f70:	f008 fad0 	bl	8020514 <iprintf>
 8017f74:	e032      	b.n	8017fdc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	7d1b      	ldrb	r3, [r3, #20]
 8017f7a:	2b01      	cmp	r3, #1
 8017f7c:	d106      	bne.n	8017f8c <tcp_recved+0x38>
 8017f7e:	4b19      	ldr	r3, [pc, #100]	; (8017fe4 <tcp_recved+0x90>)
 8017f80:	f240 32d3 	movw	r2, #979	; 0x3d3
 8017f84:	491a      	ldr	r1, [pc, #104]	; (8017ff0 <tcp_recved+0x9c>)
 8017f86:	4819      	ldr	r0, [pc, #100]	; (8017fec <tcp_recved+0x98>)
 8017f88:	f008 fac4 	bl	8020514 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017f90:	887b      	ldrh	r3, [r7, #2]
 8017f92:	4413      	add	r3, r2
 8017f94:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8017f96:	89fb      	ldrh	r3, [r7, #14]
 8017f98:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017f9c:	d804      	bhi.n	8017fa8 <tcp_recved+0x54>
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017fa2:	89fa      	ldrh	r2, [r7, #14]
 8017fa4:	429a      	cmp	r2, r3
 8017fa6:	d204      	bcs.n	8017fb2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8017fae:	851a      	strh	r2, [r3, #40]	; 0x28
 8017fb0:	e002      	b.n	8017fb8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	89fa      	ldrh	r2, [r7, #14]
 8017fb6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8017fb8:	6878      	ldr	r0, [r7, #4]
 8017fba:	f7ff ff71 	bl	8017ea0 <tcp_update_rcv_ann_wnd>
 8017fbe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8017fc0:	68bb      	ldr	r3, [r7, #8]
 8017fc2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8017fc6:	d309      	bcc.n	8017fdc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	8b5b      	ldrh	r3, [r3, #26]
 8017fcc:	f043 0302 	orr.w	r3, r3, #2
 8017fd0:	b29a      	uxth	r2, r3
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017fd6:	6878      	ldr	r0, [r7, #4]
 8017fd8:	f004 fbcc 	bl	801c774 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8017fdc:	3710      	adds	r7, #16
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	bd80      	pop	{r7, pc}
 8017fe2:	bf00      	nop
 8017fe4:	080226ec 	.word	0x080226ec
 8017fe8:	08022988 	.word	0x08022988
 8017fec:	08022730 	.word	0x08022730
 8017ff0:	080229a0 	.word	0x080229a0

08017ff4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8017ff4:	b480      	push	{r7}
 8017ff6:	b083      	sub	sp, #12
 8017ff8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8017ffe:	4b1e      	ldr	r3, [pc, #120]	; (8018078 <tcp_new_port+0x84>)
 8018000:	881b      	ldrh	r3, [r3, #0]
 8018002:	3301      	adds	r3, #1
 8018004:	b29a      	uxth	r2, r3
 8018006:	4b1c      	ldr	r3, [pc, #112]	; (8018078 <tcp_new_port+0x84>)
 8018008:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801800a:	4b1b      	ldr	r3, [pc, #108]	; (8018078 <tcp_new_port+0x84>)
 801800c:	881b      	ldrh	r3, [r3, #0]
 801800e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018012:	4293      	cmp	r3, r2
 8018014:	d103      	bne.n	801801e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8018016:	4b18      	ldr	r3, [pc, #96]	; (8018078 <tcp_new_port+0x84>)
 8018018:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801801c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801801e:	2300      	movs	r3, #0
 8018020:	71fb      	strb	r3, [r7, #7]
 8018022:	e01e      	b.n	8018062 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8018024:	79fb      	ldrb	r3, [r7, #7]
 8018026:	4a15      	ldr	r2, [pc, #84]	; (801807c <tcp_new_port+0x88>)
 8018028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	603b      	str	r3, [r7, #0]
 8018030:	e011      	b.n	8018056 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8018032:	683b      	ldr	r3, [r7, #0]
 8018034:	8ada      	ldrh	r2, [r3, #22]
 8018036:	4b10      	ldr	r3, [pc, #64]	; (8018078 <tcp_new_port+0x84>)
 8018038:	881b      	ldrh	r3, [r3, #0]
 801803a:	429a      	cmp	r2, r3
 801803c:	d108      	bne.n	8018050 <tcp_new_port+0x5c>
        n++;
 801803e:	88bb      	ldrh	r3, [r7, #4]
 8018040:	3301      	adds	r3, #1
 8018042:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8018044:	88bb      	ldrh	r3, [r7, #4]
 8018046:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801804a:	d3d8      	bcc.n	8017ffe <tcp_new_port+0xa>
          return 0;
 801804c:	2300      	movs	r3, #0
 801804e:	e00d      	b.n	801806c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8018050:	683b      	ldr	r3, [r7, #0]
 8018052:	68db      	ldr	r3, [r3, #12]
 8018054:	603b      	str	r3, [r7, #0]
 8018056:	683b      	ldr	r3, [r7, #0]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d1ea      	bne.n	8018032 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801805c:	79fb      	ldrb	r3, [r7, #7]
 801805e:	3301      	adds	r3, #1
 8018060:	71fb      	strb	r3, [r7, #7]
 8018062:	79fb      	ldrb	r3, [r7, #7]
 8018064:	2b03      	cmp	r3, #3
 8018066:	d9dd      	bls.n	8018024 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8018068:	4b03      	ldr	r3, [pc, #12]	; (8018078 <tcp_new_port+0x84>)
 801806a:	881b      	ldrh	r3, [r3, #0]
}
 801806c:	4618      	mov	r0, r3
 801806e:	370c      	adds	r7, #12
 8018070:	46bd      	mov	sp, r7
 8018072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018076:	4770      	bx	lr
 8018078:	20000050 	.word	0x20000050
 801807c:	08035248 	.word	0x08035248

08018080 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8018080:	b5b0      	push	{r4, r5, r7, lr}
 8018082:	b090      	sub	sp, #64	; 0x40
 8018084:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8018086:	2300      	movs	r3, #0
 8018088:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801808c:	4b94      	ldr	r3, [pc, #592]	; (80182e0 <tcp_slowtmr+0x260>)
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	3301      	adds	r3, #1
 8018092:	4a93      	ldr	r2, [pc, #588]	; (80182e0 <tcp_slowtmr+0x260>)
 8018094:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8018096:	4b93      	ldr	r3, [pc, #588]	; (80182e4 <tcp_slowtmr+0x264>)
 8018098:	781b      	ldrb	r3, [r3, #0]
 801809a:	3301      	adds	r3, #1
 801809c:	b2da      	uxtb	r2, r3
 801809e:	4b91      	ldr	r3, [pc, #580]	; (80182e4 <tcp_slowtmr+0x264>)
 80180a0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80180a2:	2300      	movs	r3, #0
 80180a4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80180a6:	4b90      	ldr	r3, [pc, #576]	; (80182e8 <tcp_slowtmr+0x268>)
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80180ac:	e29d      	b.n	80185ea <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80180ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180b0:	7d1b      	ldrb	r3, [r3, #20]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d106      	bne.n	80180c4 <tcp_slowtmr+0x44>
 80180b6:	4b8d      	ldr	r3, [pc, #564]	; (80182ec <tcp_slowtmr+0x26c>)
 80180b8:	f240 42be 	movw	r2, #1214	; 0x4be
 80180bc:	498c      	ldr	r1, [pc, #560]	; (80182f0 <tcp_slowtmr+0x270>)
 80180be:	488d      	ldr	r0, [pc, #564]	; (80182f4 <tcp_slowtmr+0x274>)
 80180c0:	f008 fa28 	bl	8020514 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80180c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180c6:	7d1b      	ldrb	r3, [r3, #20]
 80180c8:	2b01      	cmp	r3, #1
 80180ca:	d106      	bne.n	80180da <tcp_slowtmr+0x5a>
 80180cc:	4b87      	ldr	r3, [pc, #540]	; (80182ec <tcp_slowtmr+0x26c>)
 80180ce:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80180d2:	4989      	ldr	r1, [pc, #548]	; (80182f8 <tcp_slowtmr+0x278>)
 80180d4:	4887      	ldr	r0, [pc, #540]	; (80182f4 <tcp_slowtmr+0x274>)
 80180d6:	f008 fa1d 	bl	8020514 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80180da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180dc:	7d1b      	ldrb	r3, [r3, #20]
 80180de:	2b0a      	cmp	r3, #10
 80180e0:	d106      	bne.n	80180f0 <tcp_slowtmr+0x70>
 80180e2:	4b82      	ldr	r3, [pc, #520]	; (80182ec <tcp_slowtmr+0x26c>)
 80180e4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80180e8:	4984      	ldr	r1, [pc, #528]	; (80182fc <tcp_slowtmr+0x27c>)
 80180ea:	4882      	ldr	r0, [pc, #520]	; (80182f4 <tcp_slowtmr+0x274>)
 80180ec:	f008 fa12 	bl	8020514 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80180f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180f2:	7f9a      	ldrb	r2, [r3, #30]
 80180f4:	4b7b      	ldr	r3, [pc, #492]	; (80182e4 <tcp_slowtmr+0x264>)
 80180f6:	781b      	ldrb	r3, [r3, #0]
 80180f8:	429a      	cmp	r2, r3
 80180fa:	d105      	bne.n	8018108 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80180fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180fe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8018100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018102:	68db      	ldr	r3, [r3, #12]
 8018104:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8018106:	e270      	b.n	80185ea <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8018108:	4b76      	ldr	r3, [pc, #472]	; (80182e4 <tcp_slowtmr+0x264>)
 801810a:	781a      	ldrb	r2, [r3, #0]
 801810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801810e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8018110:	2300      	movs	r3, #0
 8018112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8018116:	2300      	movs	r3, #0
 8018118:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801811c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801811e:	7d1b      	ldrb	r3, [r3, #20]
 8018120:	2b02      	cmp	r3, #2
 8018122:	d10a      	bne.n	801813a <tcp_slowtmr+0xba>
 8018124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018126:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801812a:	2b05      	cmp	r3, #5
 801812c:	d905      	bls.n	801813a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801812e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018132:	3301      	adds	r3, #1
 8018134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018138:	e11e      	b.n	8018378 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801813c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018140:	2b0b      	cmp	r3, #11
 8018142:	d905      	bls.n	8018150 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8018144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018148:	3301      	adds	r3, #1
 801814a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801814e:	e113      	b.n	8018378 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8018150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018152:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018156:	2b00      	cmp	r3, #0
 8018158:	d075      	beq.n	8018246 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801815a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801815c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801815e:	2b00      	cmp	r3, #0
 8018160:	d006      	beq.n	8018170 <tcp_slowtmr+0xf0>
 8018162:	4b62      	ldr	r3, [pc, #392]	; (80182ec <tcp_slowtmr+0x26c>)
 8018164:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8018168:	4965      	ldr	r1, [pc, #404]	; (8018300 <tcp_slowtmr+0x280>)
 801816a:	4862      	ldr	r0, [pc, #392]	; (80182f4 <tcp_slowtmr+0x274>)
 801816c:	f008 f9d2 	bl	8020514 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8018170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018174:	2b00      	cmp	r3, #0
 8018176:	d106      	bne.n	8018186 <tcp_slowtmr+0x106>
 8018178:	4b5c      	ldr	r3, [pc, #368]	; (80182ec <tcp_slowtmr+0x26c>)
 801817a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801817e:	4961      	ldr	r1, [pc, #388]	; (8018304 <tcp_slowtmr+0x284>)
 8018180:	485c      	ldr	r0, [pc, #368]	; (80182f4 <tcp_slowtmr+0x274>)
 8018182:	f008 f9c7 	bl	8020514 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8018186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018188:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801818c:	2b0b      	cmp	r3, #11
 801818e:	d905      	bls.n	801819c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8018190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018194:	3301      	adds	r3, #1
 8018196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801819a:	e0ed      	b.n	8018378 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801819c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801819e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80181a2:	3b01      	subs	r3, #1
 80181a4:	4a58      	ldr	r2, [pc, #352]	; (8018308 <tcp_slowtmr+0x288>)
 80181a6:	5cd3      	ldrb	r3, [r2, r3]
 80181a8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80181aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80181b0:	7c7a      	ldrb	r2, [r7, #17]
 80181b2:	429a      	cmp	r2, r3
 80181b4:	d907      	bls.n	80181c6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80181b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80181bc:	3301      	adds	r3, #1
 80181be:	b2da      	uxtb	r2, r3
 80181c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181c2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80181c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80181cc:	7c7a      	ldrb	r2, [r7, #17]
 80181ce:	429a      	cmp	r2, r3
 80181d0:	f200 80d2 	bhi.w	8018378 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80181d4:	2301      	movs	r3, #1
 80181d6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80181d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d108      	bne.n	80181f4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80181e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80181e4:	f005 f980 	bl	801d4e8 <tcp_zero_window_probe>
 80181e8:	4603      	mov	r3, r0
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d014      	beq.n	8018218 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80181ee:	2300      	movs	r3, #0
 80181f0:	623b      	str	r3, [r7, #32]
 80181f2:	e011      	b.n	8018218 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80181f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80181fa:	4619      	mov	r1, r3
 80181fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80181fe:	f004 f833 	bl	801c268 <tcp_split_unsent_seg>
 8018202:	4603      	mov	r3, r0
 8018204:	2b00      	cmp	r3, #0
 8018206:	d107      	bne.n	8018218 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8018208:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801820a:	f004 fab3 	bl	801c774 <tcp_output>
 801820e:	4603      	mov	r3, r0
 8018210:	2b00      	cmp	r3, #0
 8018212:	d101      	bne.n	8018218 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8018214:	2300      	movs	r3, #0
 8018216:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8018218:	6a3b      	ldr	r3, [r7, #32]
 801821a:	2b00      	cmp	r3, #0
 801821c:	f000 80ac 	beq.w	8018378 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8018220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018222:	2200      	movs	r2, #0
 8018224:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8018228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801822a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801822e:	2b06      	cmp	r3, #6
 8018230:	f200 80a2 	bhi.w	8018378 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8018234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018236:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801823a:	3301      	adds	r3, #1
 801823c:	b2da      	uxtb	r2, r3
 801823e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018240:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8018244:	e098      	b.n	8018378 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8018246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018248:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801824c:	2b00      	cmp	r3, #0
 801824e:	db0f      	blt.n	8018270 <tcp_slowtmr+0x1f0>
 8018250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018252:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018256:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801825a:	4293      	cmp	r3, r2
 801825c:	d008      	beq.n	8018270 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801825e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018260:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018264:	b29b      	uxth	r3, r3
 8018266:	3301      	adds	r3, #1
 8018268:	b29b      	uxth	r3, r3
 801826a:	b21a      	sxth	r2, r3
 801826c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801826e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8018270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018272:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8018276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018278:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801827c:	429a      	cmp	r2, r3
 801827e:	db7b      	blt.n	8018378 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8018280:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018282:	f004 fd6f 	bl	801cd64 <tcp_rexmit_rto_prepare>
 8018286:	4603      	mov	r3, r0
 8018288:	2b00      	cmp	r3, #0
 801828a:	d007      	beq.n	801829c <tcp_slowtmr+0x21c>
 801828c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801828e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018290:	2b00      	cmp	r3, #0
 8018292:	d171      	bne.n	8018378 <tcp_slowtmr+0x2f8>
 8018294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018298:	2b00      	cmp	r3, #0
 801829a:	d06d      	beq.n	8018378 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801829c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801829e:	7d1b      	ldrb	r3, [r3, #20]
 80182a0:	2b02      	cmp	r3, #2
 80182a2:	d03a      	beq.n	801831a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80182a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80182aa:	2b0c      	cmp	r3, #12
 80182ac:	bf28      	it	cs
 80182ae:	230c      	movcs	r3, #12
 80182b0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80182b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80182b8:	10db      	asrs	r3, r3, #3
 80182ba:	b21b      	sxth	r3, r3
 80182bc:	461a      	mov	r2, r3
 80182be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80182c4:	4413      	add	r3, r2
 80182c6:	7efa      	ldrb	r2, [r7, #27]
 80182c8:	4910      	ldr	r1, [pc, #64]	; (801830c <tcp_slowtmr+0x28c>)
 80182ca:	5c8a      	ldrb	r2, [r1, r2]
 80182cc:	4093      	lsls	r3, r2
 80182ce:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80182d0:	697b      	ldr	r3, [r7, #20]
 80182d2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80182d6:	4293      	cmp	r3, r2
 80182d8:	dc1a      	bgt.n	8018310 <tcp_slowtmr+0x290>
 80182da:	697b      	ldr	r3, [r7, #20]
 80182dc:	b21a      	sxth	r2, r3
 80182de:	e019      	b.n	8018314 <tcp_slowtmr+0x294>
 80182e0:	2001fef4 	.word	0x2001fef4
 80182e4:	2000934a 	.word	0x2000934a
 80182e8:	2001fef0 	.word	0x2001fef0
 80182ec:	080226ec 	.word	0x080226ec
 80182f0:	08022a30 	.word	0x08022a30
 80182f4:	08022730 	.word	0x08022730
 80182f8:	08022a5c 	.word	0x08022a5c
 80182fc:	08022a88 	.word	0x08022a88
 8018300:	08022ab8 	.word	0x08022ab8
 8018304:	08022aec 	.word	0x08022aec
 8018308:	08035240 	.word	0x08035240
 801830c:	08035230 	.word	0x08035230
 8018310:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018316:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801831a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801831c:	2200      	movs	r2, #0
 801831e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8018320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018322:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018328:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801832c:	4293      	cmp	r3, r2
 801832e:	bf28      	it	cs
 8018330:	4613      	movcs	r3, r2
 8018332:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8018334:	8a7b      	ldrh	r3, [r7, #18]
 8018336:	085b      	lsrs	r3, r3, #1
 8018338:	b29a      	uxth	r2, r3
 801833a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801833c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8018340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018342:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801834a:	005b      	lsls	r3, r3, #1
 801834c:	b29b      	uxth	r3, r3
 801834e:	429a      	cmp	r2, r3
 8018350:	d206      	bcs.n	8018360 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8018352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018354:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018356:	005b      	lsls	r3, r3, #1
 8018358:	b29a      	uxth	r2, r3
 801835a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801835c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8018360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018362:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8018364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018366:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801836c:	2200      	movs	r2, #0
 801836e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8018372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018374:	f004 fd66 	bl	801ce44 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8018378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801837a:	7d1b      	ldrb	r3, [r3, #20]
 801837c:	2b06      	cmp	r3, #6
 801837e:	d111      	bne.n	80183a4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8018380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018382:	8b5b      	ldrh	r3, [r3, #26]
 8018384:	f003 0310 	and.w	r3, r3, #16
 8018388:	2b00      	cmp	r3, #0
 801838a:	d00b      	beq.n	80183a4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801838c:	4b9c      	ldr	r3, [pc, #624]	; (8018600 <tcp_slowtmr+0x580>)
 801838e:	681a      	ldr	r2, [r3, #0]
 8018390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018392:	6a1b      	ldr	r3, [r3, #32]
 8018394:	1ad3      	subs	r3, r2, r3
 8018396:	2b28      	cmp	r3, #40	; 0x28
 8018398:	d904      	bls.n	80183a4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801839a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801839e:	3301      	adds	r3, #1
 80183a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80183a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183a6:	7a5b      	ldrb	r3, [r3, #9]
 80183a8:	f003 0308 	and.w	r3, r3, #8
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d04a      	beq.n	8018446 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80183b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183b2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80183b4:	2b04      	cmp	r3, #4
 80183b6:	d003      	beq.n	80183c0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80183b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ba:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80183bc:	2b07      	cmp	r3, #7
 80183be:	d142      	bne.n	8018446 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80183c0:	4b8f      	ldr	r3, [pc, #572]	; (8018600 <tcp_slowtmr+0x580>)
 80183c2:	681a      	ldr	r2, [r3, #0]
 80183c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183c6:	6a1b      	ldr	r3, [r3, #32]
 80183c8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80183ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183cc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80183d0:	4b8c      	ldr	r3, [pc, #560]	; (8018604 <tcp_slowtmr+0x584>)
 80183d2:	440b      	add	r3, r1
 80183d4:	498c      	ldr	r1, [pc, #560]	; (8018608 <tcp_slowtmr+0x588>)
 80183d6:	fba1 1303 	umull	r1, r3, r1, r3
 80183da:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80183dc:	429a      	cmp	r2, r3
 80183de:	d90a      	bls.n	80183f6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80183e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80183e4:	3301      	adds	r3, #1
 80183e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80183ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80183ee:	3301      	adds	r3, #1
 80183f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80183f4:	e027      	b.n	8018446 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80183f6:	4b82      	ldr	r3, [pc, #520]	; (8018600 <tcp_slowtmr+0x580>)
 80183f8:	681a      	ldr	r2, [r3, #0]
 80183fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183fc:	6a1b      	ldr	r3, [r3, #32]
 80183fe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8018400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018402:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8018406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018408:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801840c:	4618      	mov	r0, r3
 801840e:	4b7f      	ldr	r3, [pc, #508]	; (801860c <tcp_slowtmr+0x58c>)
 8018410:	fb03 f300 	mul.w	r3, r3, r0
 8018414:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8018416:	497c      	ldr	r1, [pc, #496]	; (8018608 <tcp_slowtmr+0x588>)
 8018418:	fba1 1303 	umull	r1, r3, r1, r3
 801841c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801841e:	429a      	cmp	r2, r3
 8018420:	d911      	bls.n	8018446 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8018422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018424:	f005 f820 	bl	801d468 <tcp_keepalive>
 8018428:	4603      	mov	r3, r0
 801842a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801842e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8018432:	2b00      	cmp	r3, #0
 8018434:	d107      	bne.n	8018446 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8018436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018438:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801843c:	3301      	adds	r3, #1
 801843e:	b2da      	uxtb	r2, r3
 8018440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018442:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8018446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801844a:	2b00      	cmp	r3, #0
 801844c:	d011      	beq.n	8018472 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801844e:	4b6c      	ldr	r3, [pc, #432]	; (8018600 <tcp_slowtmr+0x580>)
 8018450:	681a      	ldr	r2, [r3, #0]
 8018452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018454:	6a1b      	ldr	r3, [r3, #32]
 8018456:	1ad2      	subs	r2, r2, r3
 8018458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801845a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801845e:	4619      	mov	r1, r3
 8018460:	460b      	mov	r3, r1
 8018462:	005b      	lsls	r3, r3, #1
 8018464:	440b      	add	r3, r1
 8018466:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8018468:	429a      	cmp	r2, r3
 801846a:	d302      	bcc.n	8018472 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801846c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801846e:	f000 fecd 	bl	801920c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8018472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018474:	7d1b      	ldrb	r3, [r3, #20]
 8018476:	2b03      	cmp	r3, #3
 8018478:	d10b      	bne.n	8018492 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801847a:	4b61      	ldr	r3, [pc, #388]	; (8018600 <tcp_slowtmr+0x580>)
 801847c:	681a      	ldr	r2, [r3, #0]
 801847e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018480:	6a1b      	ldr	r3, [r3, #32]
 8018482:	1ad3      	subs	r3, r2, r3
 8018484:	2b28      	cmp	r3, #40	; 0x28
 8018486:	d904      	bls.n	8018492 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8018488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801848c:	3301      	adds	r3, #1
 801848e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8018492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018494:	7d1b      	ldrb	r3, [r3, #20]
 8018496:	2b09      	cmp	r3, #9
 8018498:	d10b      	bne.n	80184b2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801849a:	4b59      	ldr	r3, [pc, #356]	; (8018600 <tcp_slowtmr+0x580>)
 801849c:	681a      	ldr	r2, [r3, #0]
 801849e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184a0:	6a1b      	ldr	r3, [r3, #32]
 80184a2:	1ad3      	subs	r3, r2, r3
 80184a4:	2bf0      	cmp	r3, #240	; 0xf0
 80184a6:	d904      	bls.n	80184b2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 80184a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80184ac:	3301      	adds	r3, #1
 80184ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80184b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d060      	beq.n	801857c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80184ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80184c0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80184c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80184c4:	f000 fcee 	bl	8018ea4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80184c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d010      	beq.n	80184f0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80184ce:	4b50      	ldr	r3, [pc, #320]	; (8018610 <tcp_slowtmr+0x590>)
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80184d4:	429a      	cmp	r2, r3
 80184d6:	d106      	bne.n	80184e6 <tcp_slowtmr+0x466>
 80184d8:	4b4e      	ldr	r3, [pc, #312]	; (8018614 <tcp_slowtmr+0x594>)
 80184da:	f240 526d 	movw	r2, #1389	; 0x56d
 80184de:	494e      	ldr	r1, [pc, #312]	; (8018618 <tcp_slowtmr+0x598>)
 80184e0:	484e      	ldr	r0, [pc, #312]	; (801861c <tcp_slowtmr+0x59c>)
 80184e2:	f008 f817 	bl	8020514 <iprintf>
        prev->next = pcb->next;
 80184e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184e8:	68da      	ldr	r2, [r3, #12]
 80184ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184ec:	60da      	str	r2, [r3, #12]
 80184ee:	e00f      	b.n	8018510 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80184f0:	4b47      	ldr	r3, [pc, #284]	; (8018610 <tcp_slowtmr+0x590>)
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80184f6:	429a      	cmp	r2, r3
 80184f8:	d006      	beq.n	8018508 <tcp_slowtmr+0x488>
 80184fa:	4b46      	ldr	r3, [pc, #280]	; (8018614 <tcp_slowtmr+0x594>)
 80184fc:	f240 5271 	movw	r2, #1393	; 0x571
 8018500:	4947      	ldr	r1, [pc, #284]	; (8018620 <tcp_slowtmr+0x5a0>)
 8018502:	4846      	ldr	r0, [pc, #280]	; (801861c <tcp_slowtmr+0x59c>)
 8018504:	f008 f806 	bl	8020514 <iprintf>
        tcp_active_pcbs = pcb->next;
 8018508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801850a:	68db      	ldr	r3, [r3, #12]
 801850c:	4a40      	ldr	r2, [pc, #256]	; (8018610 <tcp_slowtmr+0x590>)
 801850e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8018510:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018514:	2b00      	cmp	r3, #0
 8018516:	d013      	beq.n	8018540 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8018518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801851a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801851c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801851e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018520:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8018522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018524:	3304      	adds	r3, #4
 8018526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018528:	8ad2      	ldrh	r2, [r2, #22]
 801852a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801852c:	8b09      	ldrh	r1, [r1, #24]
 801852e:	9102      	str	r1, [sp, #8]
 8018530:	9201      	str	r2, [sp, #4]
 8018532:	9300      	str	r3, [sp, #0]
 8018534:	462b      	mov	r3, r5
 8018536:	4622      	mov	r2, r4
 8018538:	4601      	mov	r1, r0
 801853a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801853c:	f004 fee0 	bl	801d300 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8018540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018542:	691b      	ldr	r3, [r3, #16]
 8018544:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8018546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018548:	7d1b      	ldrb	r3, [r3, #20]
 801854a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801854c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801854e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8018550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018552:	68db      	ldr	r3, [r3, #12]
 8018554:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8018556:	6838      	ldr	r0, [r7, #0]
 8018558:	f7ff f842 	bl	80175e0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801855c:	4b31      	ldr	r3, [pc, #196]	; (8018624 <tcp_slowtmr+0x5a4>)
 801855e:	2200      	movs	r2, #0
 8018560:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d004      	beq.n	8018572 <tcp_slowtmr+0x4f2>
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	f06f 010c 	mvn.w	r1, #12
 801856e:	68b8      	ldr	r0, [r7, #8]
 8018570:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8018572:	4b2c      	ldr	r3, [pc, #176]	; (8018624 <tcp_slowtmr+0x5a4>)
 8018574:	781b      	ldrb	r3, [r3, #0]
 8018576:	2b00      	cmp	r3, #0
 8018578:	d037      	beq.n	80185ea <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801857a:	e592      	b.n	80180a2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801857e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8018580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018582:	68db      	ldr	r3, [r3, #12]
 8018584:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8018586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018588:	7f1b      	ldrb	r3, [r3, #28]
 801858a:	3301      	adds	r3, #1
 801858c:	b2da      	uxtb	r2, r3
 801858e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018590:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8018592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018594:	7f1a      	ldrb	r2, [r3, #28]
 8018596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018598:	7f5b      	ldrb	r3, [r3, #29]
 801859a:	429a      	cmp	r2, r3
 801859c:	d325      	bcc.n	80185ea <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801859e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185a0:	2200      	movs	r2, #0
 80185a2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80185a4:	4b1f      	ldr	r3, [pc, #124]	; (8018624 <tcp_slowtmr+0x5a4>)
 80185a6:	2200      	movs	r2, #0
 80185a8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80185aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d00b      	beq.n	80185cc <tcp_slowtmr+0x54c>
 80185b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80185ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80185bc:	6912      	ldr	r2, [r2, #16]
 80185be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80185c0:	4610      	mov	r0, r2
 80185c2:	4798      	blx	r3
 80185c4:	4603      	mov	r3, r0
 80185c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80185ca:	e002      	b.n	80185d2 <tcp_slowtmr+0x552>
 80185cc:	2300      	movs	r3, #0
 80185ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80185d2:	4b14      	ldr	r3, [pc, #80]	; (8018624 <tcp_slowtmr+0x5a4>)
 80185d4:	781b      	ldrb	r3, [r3, #0]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d000      	beq.n	80185dc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80185da:	e562      	b.n	80180a2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80185dc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d102      	bne.n	80185ea <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80185e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80185e6:	f004 f8c5 	bl	801c774 <tcp_output>
  while (pcb != NULL) {
 80185ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	f47f ad5e 	bne.w	80180ae <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80185f2:	2300      	movs	r3, #0
 80185f4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80185f6:	4b0c      	ldr	r3, [pc, #48]	; (8018628 <tcp_slowtmr+0x5a8>)
 80185f8:	681b      	ldr	r3, [r3, #0]
 80185fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80185fc:	e069      	b.n	80186d2 <tcp_slowtmr+0x652>
 80185fe:	bf00      	nop
 8018600:	2001fef4 	.word	0x2001fef4
 8018604:	000a4cb8 	.word	0x000a4cb8
 8018608:	10624dd3 	.word	0x10624dd3
 801860c:	000124f8 	.word	0x000124f8
 8018610:	2001fef0 	.word	0x2001fef0
 8018614:	080226ec 	.word	0x080226ec
 8018618:	08022b24 	.word	0x08022b24
 801861c:	08022730 	.word	0x08022730
 8018620:	08022b50 	.word	0x08022b50
 8018624:	2001feec 	.word	0x2001feec
 8018628:	2001ff00 	.word	0x2001ff00
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801862c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801862e:	7d1b      	ldrb	r3, [r3, #20]
 8018630:	2b0a      	cmp	r3, #10
 8018632:	d006      	beq.n	8018642 <tcp_slowtmr+0x5c2>
 8018634:	4b2a      	ldr	r3, [pc, #168]	; (80186e0 <tcp_slowtmr+0x660>)
 8018636:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801863a:	492a      	ldr	r1, [pc, #168]	; (80186e4 <tcp_slowtmr+0x664>)
 801863c:	482a      	ldr	r0, [pc, #168]	; (80186e8 <tcp_slowtmr+0x668>)
 801863e:	f007 ff69 	bl	8020514 <iprintf>
    pcb_remove = 0;
 8018642:	2300      	movs	r3, #0
 8018644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8018648:	4b28      	ldr	r3, [pc, #160]	; (80186ec <tcp_slowtmr+0x66c>)
 801864a:	681a      	ldr	r2, [r3, #0]
 801864c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801864e:	6a1b      	ldr	r3, [r3, #32]
 8018650:	1ad3      	subs	r3, r2, r3
 8018652:	2bf0      	cmp	r3, #240	; 0xf0
 8018654:	d904      	bls.n	8018660 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8018656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801865a:	3301      	adds	r3, #1
 801865c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8018660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018664:	2b00      	cmp	r3, #0
 8018666:	d02f      	beq.n	80186c8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8018668:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801866a:	f000 fc1b 	bl	8018ea4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801866e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018670:	2b00      	cmp	r3, #0
 8018672:	d010      	beq.n	8018696 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8018674:	4b1e      	ldr	r3, [pc, #120]	; (80186f0 <tcp_slowtmr+0x670>)
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801867a:	429a      	cmp	r2, r3
 801867c:	d106      	bne.n	801868c <tcp_slowtmr+0x60c>
 801867e:	4b18      	ldr	r3, [pc, #96]	; (80186e0 <tcp_slowtmr+0x660>)
 8018680:	f240 52af 	movw	r2, #1455	; 0x5af
 8018684:	491b      	ldr	r1, [pc, #108]	; (80186f4 <tcp_slowtmr+0x674>)
 8018686:	4818      	ldr	r0, [pc, #96]	; (80186e8 <tcp_slowtmr+0x668>)
 8018688:	f007 ff44 	bl	8020514 <iprintf>
        prev->next = pcb->next;
 801868c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801868e:	68da      	ldr	r2, [r3, #12]
 8018690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018692:	60da      	str	r2, [r3, #12]
 8018694:	e00f      	b.n	80186b6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8018696:	4b16      	ldr	r3, [pc, #88]	; (80186f0 <tcp_slowtmr+0x670>)
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801869c:	429a      	cmp	r2, r3
 801869e:	d006      	beq.n	80186ae <tcp_slowtmr+0x62e>
 80186a0:	4b0f      	ldr	r3, [pc, #60]	; (80186e0 <tcp_slowtmr+0x660>)
 80186a2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80186a6:	4914      	ldr	r1, [pc, #80]	; (80186f8 <tcp_slowtmr+0x678>)
 80186a8:	480f      	ldr	r0, [pc, #60]	; (80186e8 <tcp_slowtmr+0x668>)
 80186aa:	f007 ff33 	bl	8020514 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80186ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186b0:	68db      	ldr	r3, [r3, #12]
 80186b2:	4a0f      	ldr	r2, [pc, #60]	; (80186f0 <tcp_slowtmr+0x670>)
 80186b4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80186b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186b8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80186ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186bc:	68db      	ldr	r3, [r3, #12]
 80186be:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80186c0:	69f8      	ldr	r0, [r7, #28]
 80186c2:	f7fe ff8d 	bl	80175e0 <tcp_free>
 80186c6:	e004      	b.n	80186d2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80186c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80186cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186ce:	68db      	ldr	r3, [r3, #12]
 80186d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80186d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d1a9      	bne.n	801862c <tcp_slowtmr+0x5ac>
    }
  }
}
 80186d8:	bf00      	nop
 80186da:	3730      	adds	r7, #48	; 0x30
 80186dc:	46bd      	mov	sp, r7
 80186de:	bdb0      	pop	{r4, r5, r7, pc}
 80186e0:	080226ec 	.word	0x080226ec
 80186e4:	08022b7c 	.word	0x08022b7c
 80186e8:	08022730 	.word	0x08022730
 80186ec:	2001fef4 	.word	0x2001fef4
 80186f0:	2001ff00 	.word	0x2001ff00
 80186f4:	08022bac 	.word	0x08022bac
 80186f8:	08022bd4 	.word	0x08022bd4

080186fc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	b082      	sub	sp, #8
 8018700:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8018702:	4b2d      	ldr	r3, [pc, #180]	; (80187b8 <tcp_fasttmr+0xbc>)
 8018704:	781b      	ldrb	r3, [r3, #0]
 8018706:	3301      	adds	r3, #1
 8018708:	b2da      	uxtb	r2, r3
 801870a:	4b2b      	ldr	r3, [pc, #172]	; (80187b8 <tcp_fasttmr+0xbc>)
 801870c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801870e:	4b2b      	ldr	r3, [pc, #172]	; (80187bc <tcp_fasttmr+0xc0>)
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8018714:	e048      	b.n	80187a8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	7f9a      	ldrb	r2, [r3, #30]
 801871a:	4b27      	ldr	r3, [pc, #156]	; (80187b8 <tcp_fasttmr+0xbc>)
 801871c:	781b      	ldrb	r3, [r3, #0]
 801871e:	429a      	cmp	r2, r3
 8018720:	d03f      	beq.n	80187a2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8018722:	4b25      	ldr	r3, [pc, #148]	; (80187b8 <tcp_fasttmr+0xbc>)
 8018724:	781a      	ldrb	r2, [r3, #0]
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	8b5b      	ldrh	r3, [r3, #26]
 801872e:	f003 0301 	and.w	r3, r3, #1
 8018732:	2b00      	cmp	r3, #0
 8018734:	d010      	beq.n	8018758 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	8b5b      	ldrh	r3, [r3, #26]
 801873a:	f043 0302 	orr.w	r3, r3, #2
 801873e:	b29a      	uxth	r2, r3
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8018744:	6878      	ldr	r0, [r7, #4]
 8018746:	f004 f815 	bl	801c774 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	8b5b      	ldrh	r3, [r3, #26]
 801874e:	f023 0303 	bic.w	r3, r3, #3
 8018752:	b29a      	uxth	r2, r3
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	8b5b      	ldrh	r3, [r3, #26]
 801875c:	f003 0308 	and.w	r3, r3, #8
 8018760:	2b00      	cmp	r3, #0
 8018762:	d009      	beq.n	8018778 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	8b5b      	ldrh	r3, [r3, #26]
 8018768:	f023 0308 	bic.w	r3, r3, #8
 801876c:	b29a      	uxth	r2, r3
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8018772:	6878      	ldr	r0, [r7, #4]
 8018774:	f7ff f8c4 	bl	8017900 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	68db      	ldr	r3, [r3, #12]
 801877c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018782:	2b00      	cmp	r3, #0
 8018784:	d00a      	beq.n	801879c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8018786:	4b0e      	ldr	r3, [pc, #56]	; (80187c0 <tcp_fasttmr+0xc4>)
 8018788:	2200      	movs	r2, #0
 801878a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801878c:	6878      	ldr	r0, [r7, #4]
 801878e:	f000 f819 	bl	80187c4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8018792:	4b0b      	ldr	r3, [pc, #44]	; (80187c0 <tcp_fasttmr+0xc4>)
 8018794:	781b      	ldrb	r3, [r3, #0]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d000      	beq.n	801879c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801879a:	e7b8      	b.n	801870e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801879c:	683b      	ldr	r3, [r7, #0]
 801879e:	607b      	str	r3, [r7, #4]
 80187a0:	e002      	b.n	80187a8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	68db      	ldr	r3, [r3, #12]
 80187a6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d1b3      	bne.n	8018716 <tcp_fasttmr+0x1a>
    }
  }
}
 80187ae:	bf00      	nop
 80187b0:	3708      	adds	r7, #8
 80187b2:	46bd      	mov	sp, r7
 80187b4:	bd80      	pop	{r7, pc}
 80187b6:	bf00      	nop
 80187b8:	2000934a 	.word	0x2000934a
 80187bc:	2001fef0 	.word	0x2001fef0
 80187c0:	2001feec 	.word	0x2001feec

080187c4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80187c4:	b590      	push	{r4, r7, lr}
 80187c6:	b085      	sub	sp, #20
 80187c8:	af00      	add	r7, sp, #0
 80187ca:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d109      	bne.n	80187e6 <tcp_process_refused_data+0x22>
 80187d2:	4b37      	ldr	r3, [pc, #220]	; (80188b0 <tcp_process_refused_data+0xec>)
 80187d4:	f240 6209 	movw	r2, #1545	; 0x609
 80187d8:	4936      	ldr	r1, [pc, #216]	; (80188b4 <tcp_process_refused_data+0xf0>)
 80187da:	4837      	ldr	r0, [pc, #220]	; (80188b8 <tcp_process_refused_data+0xf4>)
 80187dc:	f007 fe9a 	bl	8020514 <iprintf>
 80187e0:	f06f 030f 	mvn.w	r3, #15
 80187e4:	e060      	b.n	80188a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80187ea:	7b5b      	ldrb	r3, [r3, #13]
 80187ec:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80187f2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	2200      	movs	r2, #0
 80187f8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018800:	2b00      	cmp	r3, #0
 8018802:	d00b      	beq.n	801881c <tcp_process_refused_data+0x58>
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	6918      	ldr	r0, [r3, #16]
 801880e:	2300      	movs	r3, #0
 8018810:	68ba      	ldr	r2, [r7, #8]
 8018812:	6879      	ldr	r1, [r7, #4]
 8018814:	47a0      	blx	r4
 8018816:	4603      	mov	r3, r0
 8018818:	73fb      	strb	r3, [r7, #15]
 801881a:	e007      	b.n	801882c <tcp_process_refused_data+0x68>
 801881c:	2300      	movs	r3, #0
 801881e:	68ba      	ldr	r2, [r7, #8]
 8018820:	6879      	ldr	r1, [r7, #4]
 8018822:	2000      	movs	r0, #0
 8018824:	f000 f8c0 	bl	80189a8 <tcp_recv_null>
 8018828:	4603      	mov	r3, r0
 801882a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801882c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018830:	2b00      	cmp	r3, #0
 8018832:	d12a      	bne.n	801888a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8018834:	7bbb      	ldrb	r3, [r7, #14]
 8018836:	f003 0320 	and.w	r3, r3, #32
 801883a:	2b00      	cmp	r3, #0
 801883c:	d033      	beq.n	80188a6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018842:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8018846:	d005      	beq.n	8018854 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801884c:	3301      	adds	r3, #1
 801884e:	b29a      	uxth	r2, r3
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801885a:	2b00      	cmp	r3, #0
 801885c:	d00b      	beq.n	8018876 <tcp_process_refused_data+0xb2>
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	6918      	ldr	r0, [r3, #16]
 8018868:	2300      	movs	r3, #0
 801886a:	2200      	movs	r2, #0
 801886c:	6879      	ldr	r1, [r7, #4]
 801886e:	47a0      	blx	r4
 8018870:	4603      	mov	r3, r0
 8018872:	73fb      	strb	r3, [r7, #15]
 8018874:	e001      	b.n	801887a <tcp_process_refused_data+0xb6>
 8018876:	2300      	movs	r3, #0
 8018878:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801887a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801887e:	f113 0f0d 	cmn.w	r3, #13
 8018882:	d110      	bne.n	80188a6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8018884:	f06f 030c 	mvn.w	r3, #12
 8018888:	e00e      	b.n	80188a8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801888a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801888e:	f113 0f0d 	cmn.w	r3, #13
 8018892:	d102      	bne.n	801889a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8018894:	f06f 030c 	mvn.w	r3, #12
 8018898:	e006      	b.n	80188a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	68ba      	ldr	r2, [r7, #8]
 801889e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80188a0:	f06f 0304 	mvn.w	r3, #4
 80188a4:	e000      	b.n	80188a8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80188a6:	2300      	movs	r3, #0
}
 80188a8:	4618      	mov	r0, r3
 80188aa:	3714      	adds	r7, #20
 80188ac:	46bd      	mov	sp, r7
 80188ae:	bd90      	pop	{r4, r7, pc}
 80188b0:	080226ec 	.word	0x080226ec
 80188b4:	08022bfc 	.word	0x08022bfc
 80188b8:	08022730 	.word	0x08022730

080188bc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80188bc:	b580      	push	{r7, lr}
 80188be:	b084      	sub	sp, #16
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80188c4:	e007      	b.n	80188d6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80188cc:	6878      	ldr	r0, [r7, #4]
 80188ce:	f000 f809 	bl	80188e4 <tcp_seg_free>
    seg = next;
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d1f4      	bne.n	80188c6 <tcp_segs_free+0xa>
  }
}
 80188dc:	bf00      	nop
 80188de:	3710      	adds	r7, #16
 80188e0:	46bd      	mov	sp, r7
 80188e2:	bd80      	pop	{r7, pc}

080188e4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80188e4:	b580      	push	{r7, lr}
 80188e6:	b082      	sub	sp, #8
 80188e8:	af00      	add	r7, sp, #0
 80188ea:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d00c      	beq.n	801890c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	685b      	ldr	r3, [r3, #4]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d004      	beq.n	8018904 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	685b      	ldr	r3, [r3, #4]
 80188fe:	4618      	mov	r0, r3
 8018900:	f7fe fbc2 	bl	8017088 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8018904:	6879      	ldr	r1, [r7, #4]
 8018906:	2003      	movs	r0, #3
 8018908:	f7fd fd1e 	bl	8016348 <memp_free>
  }
}
 801890c:	bf00      	nop
 801890e:	3708      	adds	r7, #8
 8018910:	46bd      	mov	sp, r7
 8018912:	bd80      	pop	{r7, pc}

08018914 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8018914:	b580      	push	{r7, lr}
 8018916:	b082      	sub	sp, #8
 8018918:	af00      	add	r7, sp, #0
 801891a:	6078      	str	r0, [r7, #4]
 801891c:	460b      	mov	r3, r1
 801891e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	2b00      	cmp	r3, #0
 8018924:	d107      	bne.n	8018936 <tcp_setprio+0x22>
 8018926:	4b07      	ldr	r3, [pc, #28]	; (8018944 <tcp_setprio+0x30>)
 8018928:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 801892c:	4906      	ldr	r1, [pc, #24]	; (8018948 <tcp_setprio+0x34>)
 801892e:	4807      	ldr	r0, [pc, #28]	; (801894c <tcp_setprio+0x38>)
 8018930:	f007 fdf0 	bl	8020514 <iprintf>
 8018934:	e002      	b.n	801893c <tcp_setprio+0x28>

  pcb->prio = prio;
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	78fa      	ldrb	r2, [r7, #3]
 801893a:	755a      	strb	r2, [r3, #21]
}
 801893c:	3708      	adds	r7, #8
 801893e:	46bd      	mov	sp, r7
 8018940:	bd80      	pop	{r7, pc}
 8018942:	bf00      	nop
 8018944:	080226ec 	.word	0x080226ec
 8018948:	08022c24 	.word	0x08022c24
 801894c:	08022730 	.word	0x08022730

08018950 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8018950:	b580      	push	{r7, lr}
 8018952:	b084      	sub	sp, #16
 8018954:	af00      	add	r7, sp, #0
 8018956:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	2b00      	cmp	r3, #0
 801895c:	d106      	bne.n	801896c <tcp_seg_copy+0x1c>
 801895e:	4b0f      	ldr	r3, [pc, #60]	; (801899c <tcp_seg_copy+0x4c>)
 8018960:	f240 6282 	movw	r2, #1666	; 0x682
 8018964:	490e      	ldr	r1, [pc, #56]	; (80189a0 <tcp_seg_copy+0x50>)
 8018966:	480f      	ldr	r0, [pc, #60]	; (80189a4 <tcp_seg_copy+0x54>)
 8018968:	f007 fdd4 	bl	8020514 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801896c:	2003      	movs	r0, #3
 801896e:	f7fd fc99 	bl	80162a4 <memp_malloc>
 8018972:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8018974:	68fb      	ldr	r3, [r7, #12]
 8018976:	2b00      	cmp	r3, #0
 8018978:	d101      	bne.n	801897e <tcp_seg_copy+0x2e>
    return NULL;
 801897a:	2300      	movs	r3, #0
 801897c:	e00a      	b.n	8018994 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801897e:	2210      	movs	r2, #16
 8018980:	6879      	ldr	r1, [r7, #4]
 8018982:	68f8      	ldr	r0, [r7, #12]
 8018984:	f007 fdb3 	bl	80204ee <memcpy>
  pbuf_ref(cseg->p);
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	685b      	ldr	r3, [r3, #4]
 801898c:	4618      	mov	r0, r3
 801898e:	f7fe fc21 	bl	80171d4 <pbuf_ref>
  return cseg;
 8018992:	68fb      	ldr	r3, [r7, #12]
}
 8018994:	4618      	mov	r0, r3
 8018996:	3710      	adds	r7, #16
 8018998:	46bd      	mov	sp, r7
 801899a:	bd80      	pop	{r7, pc}
 801899c:	080226ec 	.word	0x080226ec
 80189a0:	08022c40 	.word	0x08022c40
 80189a4:	08022730 	.word	0x08022730

080189a8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80189a8:	b580      	push	{r7, lr}
 80189aa:	b084      	sub	sp, #16
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	60f8      	str	r0, [r7, #12]
 80189b0:	60b9      	str	r1, [r7, #8]
 80189b2:	607a      	str	r2, [r7, #4]
 80189b4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80189b6:	68bb      	ldr	r3, [r7, #8]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d109      	bne.n	80189d0 <tcp_recv_null+0x28>
 80189bc:	4b12      	ldr	r3, [pc, #72]	; (8018a08 <tcp_recv_null+0x60>)
 80189be:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80189c2:	4912      	ldr	r1, [pc, #72]	; (8018a0c <tcp_recv_null+0x64>)
 80189c4:	4812      	ldr	r0, [pc, #72]	; (8018a10 <tcp_recv_null+0x68>)
 80189c6:	f007 fda5 	bl	8020514 <iprintf>
 80189ca:	f06f 030f 	mvn.w	r3, #15
 80189ce:	e016      	b.n	80189fe <tcp_recv_null+0x56>

  if (p != NULL) {
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d009      	beq.n	80189ea <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	891b      	ldrh	r3, [r3, #8]
 80189da:	4619      	mov	r1, r3
 80189dc:	68b8      	ldr	r0, [r7, #8]
 80189de:	f7ff fab9 	bl	8017f54 <tcp_recved>
    pbuf_free(p);
 80189e2:	6878      	ldr	r0, [r7, #4]
 80189e4:	f7fe fb50 	bl	8017088 <pbuf_free>
 80189e8:	e008      	b.n	80189fc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80189ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d104      	bne.n	80189fc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80189f2:	68b8      	ldr	r0, [r7, #8]
 80189f4:	f7fe ffea 	bl	80179cc <tcp_close>
 80189f8:	4603      	mov	r3, r0
 80189fa:	e000      	b.n	80189fe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80189fc:	2300      	movs	r3, #0
}
 80189fe:	4618      	mov	r0, r3
 8018a00:	3710      	adds	r7, #16
 8018a02:	46bd      	mov	sp, r7
 8018a04:	bd80      	pop	{r7, pc}
 8018a06:	bf00      	nop
 8018a08:	080226ec 	.word	0x080226ec
 8018a0c:	08022c5c 	.word	0x08022c5c
 8018a10:	08022730 	.word	0x08022730

08018a14 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8018a14:	b580      	push	{r7, lr}
 8018a16:	b086      	sub	sp, #24
 8018a18:	af00      	add	r7, sp, #0
 8018a1a:	4603      	mov	r3, r0
 8018a1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8018a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	db01      	blt.n	8018a2a <tcp_kill_prio+0x16>
 8018a26:	79fb      	ldrb	r3, [r7, #7]
 8018a28:	e000      	b.n	8018a2c <tcp_kill_prio+0x18>
 8018a2a:	237f      	movs	r3, #127	; 0x7f
 8018a2c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8018a2e:	7afb      	ldrb	r3, [r7, #11]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d034      	beq.n	8018a9e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8018a34:	7afb      	ldrb	r3, [r7, #11]
 8018a36:	3b01      	subs	r3, #1
 8018a38:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8018a3a:	2300      	movs	r3, #0
 8018a3c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8018a3e:	2300      	movs	r3, #0
 8018a40:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018a42:	4b19      	ldr	r3, [pc, #100]	; (8018aa8 <tcp_kill_prio+0x94>)
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	617b      	str	r3, [r7, #20]
 8018a48:	e01f      	b.n	8018a8a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8018a4a:	697b      	ldr	r3, [r7, #20]
 8018a4c:	7d5b      	ldrb	r3, [r3, #21]
 8018a4e:	7afa      	ldrb	r2, [r7, #11]
 8018a50:	429a      	cmp	r2, r3
 8018a52:	d80c      	bhi.n	8018a6e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8018a54:	697b      	ldr	r3, [r7, #20]
 8018a56:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8018a58:	7afa      	ldrb	r2, [r7, #11]
 8018a5a:	429a      	cmp	r2, r3
 8018a5c:	d112      	bne.n	8018a84 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8018a5e:	4b13      	ldr	r3, [pc, #76]	; (8018aac <tcp_kill_prio+0x98>)
 8018a60:	681a      	ldr	r2, [r3, #0]
 8018a62:	697b      	ldr	r3, [r7, #20]
 8018a64:	6a1b      	ldr	r3, [r3, #32]
 8018a66:	1ad3      	subs	r3, r2, r3
 8018a68:	68fa      	ldr	r2, [r7, #12]
 8018a6a:	429a      	cmp	r2, r3
 8018a6c:	d80a      	bhi.n	8018a84 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8018a6e:	4b0f      	ldr	r3, [pc, #60]	; (8018aac <tcp_kill_prio+0x98>)
 8018a70:	681a      	ldr	r2, [r3, #0]
 8018a72:	697b      	ldr	r3, [r7, #20]
 8018a74:	6a1b      	ldr	r3, [r3, #32]
 8018a76:	1ad3      	subs	r3, r2, r3
 8018a78:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8018a7a:	697b      	ldr	r3, [r7, #20]
 8018a7c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8018a7e:	697b      	ldr	r3, [r7, #20]
 8018a80:	7d5b      	ldrb	r3, [r3, #21]
 8018a82:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018a84:	697b      	ldr	r3, [r7, #20]
 8018a86:	68db      	ldr	r3, [r3, #12]
 8018a88:	617b      	str	r3, [r7, #20]
 8018a8a:	697b      	ldr	r3, [r7, #20]
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d1dc      	bne.n	8018a4a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8018a90:	693b      	ldr	r3, [r7, #16]
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d004      	beq.n	8018aa0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8018a96:	6938      	ldr	r0, [r7, #16]
 8018a98:	f7ff f882 	bl	8017ba0 <tcp_abort>
 8018a9c:	e000      	b.n	8018aa0 <tcp_kill_prio+0x8c>
    return;
 8018a9e:	bf00      	nop
  }
}
 8018aa0:	3718      	adds	r7, #24
 8018aa2:	46bd      	mov	sp, r7
 8018aa4:	bd80      	pop	{r7, pc}
 8018aa6:	bf00      	nop
 8018aa8:	2001fef0 	.word	0x2001fef0
 8018aac:	2001fef4 	.word	0x2001fef4

08018ab0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b086      	sub	sp, #24
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	4603      	mov	r3, r0
 8018ab8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8018aba:	79fb      	ldrb	r3, [r7, #7]
 8018abc:	2b08      	cmp	r3, #8
 8018abe:	d009      	beq.n	8018ad4 <tcp_kill_state+0x24>
 8018ac0:	79fb      	ldrb	r3, [r7, #7]
 8018ac2:	2b09      	cmp	r3, #9
 8018ac4:	d006      	beq.n	8018ad4 <tcp_kill_state+0x24>
 8018ac6:	4b1a      	ldr	r3, [pc, #104]	; (8018b30 <tcp_kill_state+0x80>)
 8018ac8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8018acc:	4919      	ldr	r1, [pc, #100]	; (8018b34 <tcp_kill_state+0x84>)
 8018ace:	481a      	ldr	r0, [pc, #104]	; (8018b38 <tcp_kill_state+0x88>)
 8018ad0:	f007 fd20 	bl	8020514 <iprintf>

  inactivity = 0;
 8018ad4:	2300      	movs	r3, #0
 8018ad6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8018ad8:	2300      	movs	r3, #0
 8018ada:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018adc:	4b17      	ldr	r3, [pc, #92]	; (8018b3c <tcp_kill_state+0x8c>)
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	617b      	str	r3, [r7, #20]
 8018ae2:	e017      	b.n	8018b14 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8018ae4:	697b      	ldr	r3, [r7, #20]
 8018ae6:	7d1b      	ldrb	r3, [r3, #20]
 8018ae8:	79fa      	ldrb	r2, [r7, #7]
 8018aea:	429a      	cmp	r2, r3
 8018aec:	d10f      	bne.n	8018b0e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018aee:	4b14      	ldr	r3, [pc, #80]	; (8018b40 <tcp_kill_state+0x90>)
 8018af0:	681a      	ldr	r2, [r3, #0]
 8018af2:	697b      	ldr	r3, [r7, #20]
 8018af4:	6a1b      	ldr	r3, [r3, #32]
 8018af6:	1ad3      	subs	r3, r2, r3
 8018af8:	68fa      	ldr	r2, [r7, #12]
 8018afa:	429a      	cmp	r2, r3
 8018afc:	d807      	bhi.n	8018b0e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8018afe:	4b10      	ldr	r3, [pc, #64]	; (8018b40 <tcp_kill_state+0x90>)
 8018b00:	681a      	ldr	r2, [r3, #0]
 8018b02:	697b      	ldr	r3, [r7, #20]
 8018b04:	6a1b      	ldr	r3, [r3, #32]
 8018b06:	1ad3      	subs	r3, r2, r3
 8018b08:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8018b0a:	697b      	ldr	r3, [r7, #20]
 8018b0c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018b0e:	697b      	ldr	r3, [r7, #20]
 8018b10:	68db      	ldr	r3, [r3, #12]
 8018b12:	617b      	str	r3, [r7, #20]
 8018b14:	697b      	ldr	r3, [r7, #20]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d1e4      	bne.n	8018ae4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8018b1a:	693b      	ldr	r3, [r7, #16]
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d003      	beq.n	8018b28 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8018b20:	2100      	movs	r1, #0
 8018b22:	6938      	ldr	r0, [r7, #16]
 8018b24:	f7fe ff7e 	bl	8017a24 <tcp_abandon>
  }
}
 8018b28:	bf00      	nop
 8018b2a:	3718      	adds	r7, #24
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	bd80      	pop	{r7, pc}
 8018b30:	080226ec 	.word	0x080226ec
 8018b34:	08022c78 	.word	0x08022c78
 8018b38:	08022730 	.word	0x08022730
 8018b3c:	2001fef0 	.word	0x2001fef0
 8018b40:	2001fef4 	.word	0x2001fef4

08018b44 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8018b44:	b580      	push	{r7, lr}
 8018b46:	b084      	sub	sp, #16
 8018b48:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8018b4a:	2300      	movs	r3, #0
 8018b4c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8018b4e:	2300      	movs	r3, #0
 8018b50:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018b52:	4b12      	ldr	r3, [pc, #72]	; (8018b9c <tcp_kill_timewait+0x58>)
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	60fb      	str	r3, [r7, #12]
 8018b58:	e012      	b.n	8018b80 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018b5a:	4b11      	ldr	r3, [pc, #68]	; (8018ba0 <tcp_kill_timewait+0x5c>)
 8018b5c:	681a      	ldr	r2, [r3, #0]
 8018b5e:	68fb      	ldr	r3, [r7, #12]
 8018b60:	6a1b      	ldr	r3, [r3, #32]
 8018b62:	1ad3      	subs	r3, r2, r3
 8018b64:	687a      	ldr	r2, [r7, #4]
 8018b66:	429a      	cmp	r2, r3
 8018b68:	d807      	bhi.n	8018b7a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8018b6a:	4b0d      	ldr	r3, [pc, #52]	; (8018ba0 <tcp_kill_timewait+0x5c>)
 8018b6c:	681a      	ldr	r2, [r3, #0]
 8018b6e:	68fb      	ldr	r3, [r7, #12]
 8018b70:	6a1b      	ldr	r3, [r3, #32]
 8018b72:	1ad3      	subs	r3, r2, r3
 8018b74:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018b7a:	68fb      	ldr	r3, [r7, #12]
 8018b7c:	68db      	ldr	r3, [r3, #12]
 8018b7e:	60fb      	str	r3, [r7, #12]
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d1e9      	bne.n	8018b5a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8018b86:	68bb      	ldr	r3, [r7, #8]
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d002      	beq.n	8018b92 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8018b8c:	68b8      	ldr	r0, [r7, #8]
 8018b8e:	f7ff f807 	bl	8017ba0 <tcp_abort>
  }
}
 8018b92:	bf00      	nop
 8018b94:	3710      	adds	r7, #16
 8018b96:	46bd      	mov	sp, r7
 8018b98:	bd80      	pop	{r7, pc}
 8018b9a:	bf00      	nop
 8018b9c:	2001ff00 	.word	0x2001ff00
 8018ba0:	2001fef4 	.word	0x2001fef4

08018ba4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8018ba4:	b580      	push	{r7, lr}
 8018ba6:	b082      	sub	sp, #8
 8018ba8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8018baa:	4b10      	ldr	r3, [pc, #64]	; (8018bec <tcp_handle_closepend+0x48>)
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8018bb0:	e014      	b.n	8018bdc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	68db      	ldr	r3, [r3, #12]
 8018bb6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	8b5b      	ldrh	r3, [r3, #26]
 8018bbc:	f003 0308 	and.w	r3, r3, #8
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d009      	beq.n	8018bd8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	8b5b      	ldrh	r3, [r3, #26]
 8018bc8:	f023 0308 	bic.w	r3, r3, #8
 8018bcc:	b29a      	uxth	r2, r3
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8018bd2:	6878      	ldr	r0, [r7, #4]
 8018bd4:	f7fe fe94 	bl	8017900 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8018bd8:	683b      	ldr	r3, [r7, #0]
 8018bda:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d1e7      	bne.n	8018bb2 <tcp_handle_closepend+0xe>
  }
}
 8018be2:	bf00      	nop
 8018be4:	3708      	adds	r7, #8
 8018be6:	46bd      	mov	sp, r7
 8018be8:	bd80      	pop	{r7, pc}
 8018bea:	bf00      	nop
 8018bec:	2001fef0 	.word	0x2001fef0

08018bf0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8018bf0:	b580      	push	{r7, lr}
 8018bf2:	b084      	sub	sp, #16
 8018bf4:	af00      	add	r7, sp, #0
 8018bf6:	4603      	mov	r3, r0
 8018bf8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018bfa:	2001      	movs	r0, #1
 8018bfc:	f7fd fb52 	bl	80162a4 <memp_malloc>
 8018c00:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d126      	bne.n	8018c56 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8018c08:	f7ff ffcc 	bl	8018ba4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8018c0c:	f7ff ff9a 	bl	8018b44 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018c10:	2001      	movs	r0, #1
 8018c12:	f7fd fb47 	bl	80162a4 <memp_malloc>
 8018c16:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	d11b      	bne.n	8018c56 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8018c1e:	2009      	movs	r0, #9
 8018c20:	f7ff ff46 	bl	8018ab0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018c24:	2001      	movs	r0, #1
 8018c26:	f7fd fb3d 	bl	80162a4 <memp_malloc>
 8018c2a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d111      	bne.n	8018c56 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8018c32:	2008      	movs	r0, #8
 8018c34:	f7ff ff3c 	bl	8018ab0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018c38:	2001      	movs	r0, #1
 8018c3a:	f7fd fb33 	bl	80162a4 <memp_malloc>
 8018c3e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8018c40:	68fb      	ldr	r3, [r7, #12]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d107      	bne.n	8018c56 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8018c46:	79fb      	ldrb	r3, [r7, #7]
 8018c48:	4618      	mov	r0, r3
 8018c4a:	f7ff fee3 	bl	8018a14 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018c4e:	2001      	movs	r0, #1
 8018c50:	f7fd fb28 	bl	80162a4 <memp_malloc>
 8018c54:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8018c56:	68fb      	ldr	r3, [r7, #12]
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d03f      	beq.n	8018cdc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8018c5c:	229c      	movs	r2, #156	; 0x9c
 8018c5e:	2100      	movs	r1, #0
 8018c60:	68f8      	ldr	r0, [r7, #12]
 8018c62:	f007 fc4f 	bl	8020504 <memset>
    pcb->prio = prio;
 8018c66:	68fb      	ldr	r3, [r7, #12]
 8018c68:	79fa      	ldrb	r2, [r7, #7]
 8018c6a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8018c6c:	68fb      	ldr	r3, [r7, #12]
 8018c6e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8018c72:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8018c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8018c7e:	68fb      	ldr	r3, [r7, #12]
 8018c80:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8018c82:	68fb      	ldr	r3, [r7, #12]
 8018c84:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	22ff      	movs	r2, #255	; 0xff
 8018c8a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8018c8c:	68fb      	ldr	r3, [r7, #12]
 8018c8e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018c92:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8018c94:	68fb      	ldr	r3, [r7, #12]
 8018c96:	2206      	movs	r2, #6
 8018c98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	2206      	movs	r2, #6
 8018ca0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018ca8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	2201      	movs	r2, #1
 8018cae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8018cb2:	4b0d      	ldr	r3, [pc, #52]	; (8018ce8 <tcp_alloc+0xf8>)
 8018cb4:	681a      	ldr	r2, [r3, #0]
 8018cb6:	68fb      	ldr	r3, [r7, #12]
 8018cb8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8018cba:	4b0c      	ldr	r3, [pc, #48]	; (8018cec <tcp_alloc+0xfc>)
 8018cbc:	781a      	ldrb	r2, [r3, #0]
 8018cbe:	68fb      	ldr	r3, [r7, #12]
 8018cc0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8018cc2:	68fb      	ldr	r3, [r7, #12]
 8018cc4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8018cc8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8018ccc:	68fb      	ldr	r3, [r7, #12]
 8018cce:	4a08      	ldr	r2, [pc, #32]	; (8018cf0 <tcp_alloc+0x100>)
 8018cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	4a07      	ldr	r2, [pc, #28]	; (8018cf4 <tcp_alloc+0x104>)
 8018cd8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8018cdc:	68fb      	ldr	r3, [r7, #12]
}
 8018cde:	4618      	mov	r0, r3
 8018ce0:	3710      	adds	r7, #16
 8018ce2:	46bd      	mov	sp, r7
 8018ce4:	bd80      	pop	{r7, pc}
 8018ce6:	bf00      	nop
 8018ce8:	2001fef4 	.word	0x2001fef4
 8018cec:	2000934a 	.word	0x2000934a
 8018cf0:	080189a9 	.word	0x080189a9
 8018cf4:	006ddd00 	.word	0x006ddd00

08018cf8 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8018cf8:	b580      	push	{r7, lr}
 8018cfa:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8018cfc:	2040      	movs	r0, #64	; 0x40
 8018cfe:	f7ff ff77 	bl	8018bf0 <tcp_alloc>
 8018d02:	4603      	mov	r3, r0
}
 8018d04:	4618      	mov	r0, r3
 8018d06:	bd80      	pop	{r7, pc}

08018d08 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	b084      	sub	sp, #16
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	4603      	mov	r3, r0
 8018d10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8018d12:	2040      	movs	r0, #64	; 0x40
 8018d14:	f7ff ff6c 	bl	8018bf0 <tcp_alloc>
 8018d18:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8018d1a:	68fb      	ldr	r3, [r7, #12]
}
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	3710      	adds	r7, #16
 8018d20:	46bd      	mov	sp, r7
 8018d22:	bd80      	pop	{r7, pc}

08018d24 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8018d24:	b480      	push	{r7}
 8018d26:	b083      	sub	sp, #12
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	6078      	str	r0, [r7, #4]
 8018d2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d002      	beq.n	8018d3a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	683a      	ldr	r2, [r7, #0]
 8018d38:	611a      	str	r2, [r3, #16]
  }
}
 8018d3a:	bf00      	nop
 8018d3c:	370c      	adds	r7, #12
 8018d3e:	46bd      	mov	sp, r7
 8018d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d44:	4770      	bx	lr
	...

08018d48 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8018d48:	b580      	push	{r7, lr}
 8018d4a:	b082      	sub	sp, #8
 8018d4c:	af00      	add	r7, sp, #0
 8018d4e:	6078      	str	r0, [r7, #4]
 8018d50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d00e      	beq.n	8018d76 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	7d1b      	ldrb	r3, [r3, #20]
 8018d5c:	2b01      	cmp	r3, #1
 8018d5e:	d106      	bne.n	8018d6e <tcp_recv+0x26>
 8018d60:	4b07      	ldr	r3, [pc, #28]	; (8018d80 <tcp_recv+0x38>)
 8018d62:	f240 72df 	movw	r2, #2015	; 0x7df
 8018d66:	4907      	ldr	r1, [pc, #28]	; (8018d84 <tcp_recv+0x3c>)
 8018d68:	4807      	ldr	r0, [pc, #28]	; (8018d88 <tcp_recv+0x40>)
 8018d6a:	f007 fbd3 	bl	8020514 <iprintf>
    pcb->recv = recv;
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	683a      	ldr	r2, [r7, #0]
 8018d72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8018d76:	bf00      	nop
 8018d78:	3708      	adds	r7, #8
 8018d7a:	46bd      	mov	sp, r7
 8018d7c:	bd80      	pop	{r7, pc}
 8018d7e:	bf00      	nop
 8018d80:	080226ec 	.word	0x080226ec
 8018d84:	08022c88 	.word	0x08022c88
 8018d88:	08022730 	.word	0x08022730

08018d8c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8018d8c:	b580      	push	{r7, lr}
 8018d8e:	b082      	sub	sp, #8
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	6078      	str	r0, [r7, #4]
 8018d94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d00e      	beq.n	8018dba <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	7d1b      	ldrb	r3, [r3, #20]
 8018da0:	2b01      	cmp	r3, #1
 8018da2:	d106      	bne.n	8018db2 <tcp_sent+0x26>
 8018da4:	4b07      	ldr	r3, [pc, #28]	; (8018dc4 <tcp_sent+0x38>)
 8018da6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8018daa:	4907      	ldr	r1, [pc, #28]	; (8018dc8 <tcp_sent+0x3c>)
 8018dac:	4807      	ldr	r0, [pc, #28]	; (8018dcc <tcp_sent+0x40>)
 8018dae:	f007 fbb1 	bl	8020514 <iprintf>
    pcb->sent = sent;
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	683a      	ldr	r2, [r7, #0]
 8018db6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8018dba:	bf00      	nop
 8018dbc:	3708      	adds	r7, #8
 8018dbe:	46bd      	mov	sp, r7
 8018dc0:	bd80      	pop	{r7, pc}
 8018dc2:	bf00      	nop
 8018dc4:	080226ec 	.word	0x080226ec
 8018dc8:	08022cb0 	.word	0x08022cb0
 8018dcc:	08022730 	.word	0x08022730

08018dd0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b082      	sub	sp, #8
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	6078      	str	r0, [r7, #4]
 8018dd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d00e      	beq.n	8018dfe <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	7d1b      	ldrb	r3, [r3, #20]
 8018de4:	2b01      	cmp	r3, #1
 8018de6:	d106      	bne.n	8018df6 <tcp_err+0x26>
 8018de8:	4b07      	ldr	r3, [pc, #28]	; (8018e08 <tcp_err+0x38>)
 8018dea:	f640 020d 	movw	r2, #2061	; 0x80d
 8018dee:	4907      	ldr	r1, [pc, #28]	; (8018e0c <tcp_err+0x3c>)
 8018df0:	4807      	ldr	r0, [pc, #28]	; (8018e10 <tcp_err+0x40>)
 8018df2:	f007 fb8f 	bl	8020514 <iprintf>
    pcb->errf = err;
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	683a      	ldr	r2, [r7, #0]
 8018dfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8018dfe:	bf00      	nop
 8018e00:	3708      	adds	r7, #8
 8018e02:	46bd      	mov	sp, r7
 8018e04:	bd80      	pop	{r7, pc}
 8018e06:	bf00      	nop
 8018e08:	080226ec 	.word	0x080226ec
 8018e0c:	08022cd8 	.word	0x08022cd8
 8018e10:	08022730 	.word	0x08022730

08018e14 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8018e14:	b480      	push	{r7}
 8018e16:	b085      	sub	sp, #20
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	6078      	str	r0, [r7, #4]
 8018e1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d008      	beq.n	8018e36 <tcp_accept+0x22>
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	7d1b      	ldrb	r3, [r3, #20]
 8018e28:	2b01      	cmp	r3, #1
 8018e2a:	d104      	bne.n	8018e36 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	683a      	ldr	r2, [r7, #0]
 8018e34:	619a      	str	r2, [r3, #24]
  }
}
 8018e36:	bf00      	nop
 8018e38:	3714      	adds	r7, #20
 8018e3a:	46bd      	mov	sp, r7
 8018e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e40:	4770      	bx	lr
	...

08018e44 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8018e44:	b580      	push	{r7, lr}
 8018e46:	b084      	sub	sp, #16
 8018e48:	af00      	add	r7, sp, #0
 8018e4a:	60f8      	str	r0, [r7, #12]
 8018e4c:	60b9      	str	r1, [r7, #8]
 8018e4e:	4613      	mov	r3, r2
 8018e50:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d107      	bne.n	8018e68 <tcp_poll+0x24>
 8018e58:	4b0e      	ldr	r3, [pc, #56]	; (8018e94 <tcp_poll+0x50>)
 8018e5a:	f640 023d 	movw	r2, #2109	; 0x83d
 8018e5e:	490e      	ldr	r1, [pc, #56]	; (8018e98 <tcp_poll+0x54>)
 8018e60:	480e      	ldr	r0, [pc, #56]	; (8018e9c <tcp_poll+0x58>)
 8018e62:	f007 fb57 	bl	8020514 <iprintf>
 8018e66:	e011      	b.n	8018e8c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8018e68:	68fb      	ldr	r3, [r7, #12]
 8018e6a:	7d1b      	ldrb	r3, [r3, #20]
 8018e6c:	2b01      	cmp	r3, #1
 8018e6e:	d106      	bne.n	8018e7e <tcp_poll+0x3a>
 8018e70:	4b08      	ldr	r3, [pc, #32]	; (8018e94 <tcp_poll+0x50>)
 8018e72:	f640 023e 	movw	r2, #2110	; 0x83e
 8018e76:	490a      	ldr	r1, [pc, #40]	; (8018ea0 <tcp_poll+0x5c>)
 8018e78:	4808      	ldr	r0, [pc, #32]	; (8018e9c <tcp_poll+0x58>)
 8018e7a:	f007 fb4b 	bl	8020514 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8018e7e:	68fb      	ldr	r3, [r7, #12]
 8018e80:	68ba      	ldr	r2, [r7, #8]
 8018e82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8018e86:	68fb      	ldr	r3, [r7, #12]
 8018e88:	79fa      	ldrb	r2, [r7, #7]
 8018e8a:	775a      	strb	r2, [r3, #29]
}
 8018e8c:	3710      	adds	r7, #16
 8018e8e:	46bd      	mov	sp, r7
 8018e90:	bd80      	pop	{r7, pc}
 8018e92:	bf00      	nop
 8018e94:	080226ec 	.word	0x080226ec
 8018e98:	08022d00 	.word	0x08022d00
 8018e9c:	08022730 	.word	0x08022730
 8018ea0:	08022d18 	.word	0x08022d18

08018ea4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b082      	sub	sp, #8
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d107      	bne.n	8018ec2 <tcp_pcb_purge+0x1e>
 8018eb2:	4b21      	ldr	r3, [pc, #132]	; (8018f38 <tcp_pcb_purge+0x94>)
 8018eb4:	f640 0251 	movw	r2, #2129	; 0x851
 8018eb8:	4920      	ldr	r1, [pc, #128]	; (8018f3c <tcp_pcb_purge+0x98>)
 8018eba:	4821      	ldr	r0, [pc, #132]	; (8018f40 <tcp_pcb_purge+0x9c>)
 8018ebc:	f007 fb2a 	bl	8020514 <iprintf>
 8018ec0:	e037      	b.n	8018f32 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	7d1b      	ldrb	r3, [r3, #20]
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d033      	beq.n	8018f32 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8018ece:	2b0a      	cmp	r3, #10
 8018ed0:	d02f      	beq.n	8018f32 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8018ed6:	2b01      	cmp	r3, #1
 8018ed8:	d02b      	beq.n	8018f32 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d007      	beq.n	8018ef2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	f7fe f8ce 	bl	8017088 <pbuf_free>
      pcb->refused_data = NULL;
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	2200      	movs	r2, #0
 8018ef0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d002      	beq.n	8018f00 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8018efa:	6878      	ldr	r0, [r7, #4]
 8018efc:	f000 f986 	bl	801920c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018f06:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f0c:	4618      	mov	r0, r3
 8018f0e:	f7ff fcd5 	bl	80188bc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018f16:	4618      	mov	r0, r3
 8018f18:	f7ff fcd0 	bl	80188bc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	2200      	movs	r2, #0
 8018f20:	66da      	str	r2, [r3, #108]	; 0x6c
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	2200      	movs	r2, #0
 8018f2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8018f32:	3708      	adds	r7, #8
 8018f34:	46bd      	mov	sp, r7
 8018f36:	bd80      	pop	{r7, pc}
 8018f38:	080226ec 	.word	0x080226ec
 8018f3c:	08022d38 	.word	0x08022d38
 8018f40:	08022730 	.word	0x08022730

08018f44 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8018f44:	b580      	push	{r7, lr}
 8018f46:	b084      	sub	sp, #16
 8018f48:	af00      	add	r7, sp, #0
 8018f4a:	6078      	str	r0, [r7, #4]
 8018f4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8018f4e:	683b      	ldr	r3, [r7, #0]
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d106      	bne.n	8018f62 <tcp_pcb_remove+0x1e>
 8018f54:	4b3e      	ldr	r3, [pc, #248]	; (8019050 <tcp_pcb_remove+0x10c>)
 8018f56:	f640 0283 	movw	r2, #2179	; 0x883
 8018f5a:	493e      	ldr	r1, [pc, #248]	; (8019054 <tcp_pcb_remove+0x110>)
 8018f5c:	483e      	ldr	r0, [pc, #248]	; (8019058 <tcp_pcb_remove+0x114>)
 8018f5e:	f007 fad9 	bl	8020514 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d106      	bne.n	8018f76 <tcp_pcb_remove+0x32>
 8018f68:	4b39      	ldr	r3, [pc, #228]	; (8019050 <tcp_pcb_remove+0x10c>)
 8018f6a:	f640 0284 	movw	r2, #2180	; 0x884
 8018f6e:	493b      	ldr	r1, [pc, #236]	; (801905c <tcp_pcb_remove+0x118>)
 8018f70:	4839      	ldr	r0, [pc, #228]	; (8019058 <tcp_pcb_remove+0x114>)
 8018f72:	f007 facf 	bl	8020514 <iprintf>

  TCP_RMV(pcblist, pcb);
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	683a      	ldr	r2, [r7, #0]
 8018f7c:	429a      	cmp	r2, r3
 8018f7e:	d105      	bne.n	8018f8c <tcp_pcb_remove+0x48>
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	68da      	ldr	r2, [r3, #12]
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	601a      	str	r2, [r3, #0]
 8018f8a:	e013      	b.n	8018fb4 <tcp_pcb_remove+0x70>
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	60fb      	str	r3, [r7, #12]
 8018f92:	e00c      	b.n	8018fae <tcp_pcb_remove+0x6a>
 8018f94:	68fb      	ldr	r3, [r7, #12]
 8018f96:	68db      	ldr	r3, [r3, #12]
 8018f98:	683a      	ldr	r2, [r7, #0]
 8018f9a:	429a      	cmp	r2, r3
 8018f9c:	d104      	bne.n	8018fa8 <tcp_pcb_remove+0x64>
 8018f9e:	683b      	ldr	r3, [r7, #0]
 8018fa0:	68da      	ldr	r2, [r3, #12]
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	60da      	str	r2, [r3, #12]
 8018fa6:	e005      	b.n	8018fb4 <tcp_pcb_remove+0x70>
 8018fa8:	68fb      	ldr	r3, [r7, #12]
 8018faa:	68db      	ldr	r3, [r3, #12]
 8018fac:	60fb      	str	r3, [r7, #12]
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d1ef      	bne.n	8018f94 <tcp_pcb_remove+0x50>
 8018fb4:	683b      	ldr	r3, [r7, #0]
 8018fb6:	2200      	movs	r2, #0
 8018fb8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8018fba:	6838      	ldr	r0, [r7, #0]
 8018fbc:	f7ff ff72 	bl	8018ea4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8018fc0:	683b      	ldr	r3, [r7, #0]
 8018fc2:	7d1b      	ldrb	r3, [r3, #20]
 8018fc4:	2b0a      	cmp	r3, #10
 8018fc6:	d013      	beq.n	8018ff0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8018fc8:	683b      	ldr	r3, [r7, #0]
 8018fca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8018fcc:	2b01      	cmp	r3, #1
 8018fce:	d00f      	beq.n	8018ff0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8018fd0:	683b      	ldr	r3, [r7, #0]
 8018fd2:	8b5b      	ldrh	r3, [r3, #26]
 8018fd4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d009      	beq.n	8018ff0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8018fdc:	683b      	ldr	r3, [r7, #0]
 8018fde:	8b5b      	ldrh	r3, [r3, #26]
 8018fe0:	f043 0302 	orr.w	r3, r3, #2
 8018fe4:	b29a      	uxth	r2, r3
 8018fe6:	683b      	ldr	r3, [r7, #0]
 8018fe8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018fea:	6838      	ldr	r0, [r7, #0]
 8018fec:	f003 fbc2 	bl	801c774 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8018ff0:	683b      	ldr	r3, [r7, #0]
 8018ff2:	7d1b      	ldrb	r3, [r3, #20]
 8018ff4:	2b01      	cmp	r3, #1
 8018ff6:	d020      	beq.n	801903a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8018ff8:	683b      	ldr	r3, [r7, #0]
 8018ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d006      	beq.n	801900e <tcp_pcb_remove+0xca>
 8019000:	4b13      	ldr	r3, [pc, #76]	; (8019050 <tcp_pcb_remove+0x10c>)
 8019002:	f640 0293 	movw	r2, #2195	; 0x893
 8019006:	4916      	ldr	r1, [pc, #88]	; (8019060 <tcp_pcb_remove+0x11c>)
 8019008:	4813      	ldr	r0, [pc, #76]	; (8019058 <tcp_pcb_remove+0x114>)
 801900a:	f007 fa83 	bl	8020514 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801900e:	683b      	ldr	r3, [r7, #0]
 8019010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019012:	2b00      	cmp	r3, #0
 8019014:	d006      	beq.n	8019024 <tcp_pcb_remove+0xe0>
 8019016:	4b0e      	ldr	r3, [pc, #56]	; (8019050 <tcp_pcb_remove+0x10c>)
 8019018:	f640 0294 	movw	r2, #2196	; 0x894
 801901c:	4911      	ldr	r1, [pc, #68]	; (8019064 <tcp_pcb_remove+0x120>)
 801901e:	480e      	ldr	r0, [pc, #56]	; (8019058 <tcp_pcb_remove+0x114>)
 8019020:	f007 fa78 	bl	8020514 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8019024:	683b      	ldr	r3, [r7, #0]
 8019026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019028:	2b00      	cmp	r3, #0
 801902a:	d006      	beq.n	801903a <tcp_pcb_remove+0xf6>
 801902c:	4b08      	ldr	r3, [pc, #32]	; (8019050 <tcp_pcb_remove+0x10c>)
 801902e:	f640 0296 	movw	r2, #2198	; 0x896
 8019032:	490d      	ldr	r1, [pc, #52]	; (8019068 <tcp_pcb_remove+0x124>)
 8019034:	4808      	ldr	r0, [pc, #32]	; (8019058 <tcp_pcb_remove+0x114>)
 8019036:	f007 fa6d 	bl	8020514 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801903a:	683b      	ldr	r3, [r7, #0]
 801903c:	2200      	movs	r2, #0
 801903e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8019040:	683b      	ldr	r3, [r7, #0]
 8019042:	2200      	movs	r2, #0
 8019044:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8019046:	bf00      	nop
 8019048:	3710      	adds	r7, #16
 801904a:	46bd      	mov	sp, r7
 801904c:	bd80      	pop	{r7, pc}
 801904e:	bf00      	nop
 8019050:	080226ec 	.word	0x080226ec
 8019054:	08022d54 	.word	0x08022d54
 8019058:	08022730 	.word	0x08022730
 801905c:	08022d70 	.word	0x08022d70
 8019060:	08022d90 	.word	0x08022d90
 8019064:	08022da8 	.word	0x08022da8
 8019068:	08022dc4 	.word	0x08022dc4

0801906c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801906c:	b580      	push	{r7, lr}
 801906e:	b082      	sub	sp, #8
 8019070:	af00      	add	r7, sp, #0
 8019072:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	2b00      	cmp	r3, #0
 8019078:	d106      	bne.n	8019088 <tcp_next_iss+0x1c>
 801907a:	4b0a      	ldr	r3, [pc, #40]	; (80190a4 <tcp_next_iss+0x38>)
 801907c:	f640 02af 	movw	r2, #2223	; 0x8af
 8019080:	4909      	ldr	r1, [pc, #36]	; (80190a8 <tcp_next_iss+0x3c>)
 8019082:	480a      	ldr	r0, [pc, #40]	; (80190ac <tcp_next_iss+0x40>)
 8019084:	f007 fa46 	bl	8020514 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8019088:	4b09      	ldr	r3, [pc, #36]	; (80190b0 <tcp_next_iss+0x44>)
 801908a:	681a      	ldr	r2, [r3, #0]
 801908c:	4b09      	ldr	r3, [pc, #36]	; (80190b4 <tcp_next_iss+0x48>)
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	4413      	add	r3, r2
 8019092:	4a07      	ldr	r2, [pc, #28]	; (80190b0 <tcp_next_iss+0x44>)
 8019094:	6013      	str	r3, [r2, #0]
  return iss;
 8019096:	4b06      	ldr	r3, [pc, #24]	; (80190b0 <tcp_next_iss+0x44>)
 8019098:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801909a:	4618      	mov	r0, r3
 801909c:	3708      	adds	r7, #8
 801909e:	46bd      	mov	sp, r7
 80190a0:	bd80      	pop	{r7, pc}
 80190a2:	bf00      	nop
 80190a4:	080226ec 	.word	0x080226ec
 80190a8:	08022ddc 	.word	0x08022ddc
 80190ac:	08022730 	.word	0x08022730
 80190b0:	20000054 	.word	0x20000054
 80190b4:	2001fef4 	.word	0x2001fef4

080190b8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80190b8:	b580      	push	{r7, lr}
 80190ba:	b086      	sub	sp, #24
 80190bc:	af00      	add	r7, sp, #0
 80190be:	4603      	mov	r3, r0
 80190c0:	60b9      	str	r1, [r7, #8]
 80190c2:	607a      	str	r2, [r7, #4]
 80190c4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d106      	bne.n	80190da <tcp_eff_send_mss_netif+0x22>
 80190cc:	4b14      	ldr	r3, [pc, #80]	; (8019120 <tcp_eff_send_mss_netif+0x68>)
 80190ce:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80190d2:	4914      	ldr	r1, [pc, #80]	; (8019124 <tcp_eff_send_mss_netif+0x6c>)
 80190d4:	4814      	ldr	r0, [pc, #80]	; (8019128 <tcp_eff_send_mss_netif+0x70>)
 80190d6:	f007 fa1d 	bl	8020514 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80190da:	68bb      	ldr	r3, [r7, #8]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d101      	bne.n	80190e4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80190e0:	89fb      	ldrh	r3, [r7, #14]
 80190e2:	e019      	b.n	8019118 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80190e4:	68bb      	ldr	r3, [r7, #8]
 80190e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80190e8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80190ea:	8afb      	ldrh	r3, [r7, #22]
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d012      	beq.n	8019116 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80190f0:	2328      	movs	r3, #40	; 0x28
 80190f2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80190f4:	8afa      	ldrh	r2, [r7, #22]
 80190f6:	8abb      	ldrh	r3, [r7, #20]
 80190f8:	429a      	cmp	r2, r3
 80190fa:	d904      	bls.n	8019106 <tcp_eff_send_mss_netif+0x4e>
 80190fc:	8afa      	ldrh	r2, [r7, #22]
 80190fe:	8abb      	ldrh	r3, [r7, #20]
 8019100:	1ad3      	subs	r3, r2, r3
 8019102:	b29b      	uxth	r3, r3
 8019104:	e000      	b.n	8019108 <tcp_eff_send_mss_netif+0x50>
 8019106:	2300      	movs	r3, #0
 8019108:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801910a:	8a7a      	ldrh	r2, [r7, #18]
 801910c:	89fb      	ldrh	r3, [r7, #14]
 801910e:	4293      	cmp	r3, r2
 8019110:	bf28      	it	cs
 8019112:	4613      	movcs	r3, r2
 8019114:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8019116:	89fb      	ldrh	r3, [r7, #14]
}
 8019118:	4618      	mov	r0, r3
 801911a:	3718      	adds	r7, #24
 801911c:	46bd      	mov	sp, r7
 801911e:	bd80      	pop	{r7, pc}
 8019120:	080226ec 	.word	0x080226ec
 8019124:	08022df8 	.word	0x08022df8
 8019128:	08022730 	.word	0x08022730

0801912c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801912c:	b580      	push	{r7, lr}
 801912e:	b084      	sub	sp, #16
 8019130:	af00      	add	r7, sp, #0
 8019132:	6078      	str	r0, [r7, #4]
 8019134:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8019136:	683b      	ldr	r3, [r7, #0]
 8019138:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	2b00      	cmp	r3, #0
 801913e:	d119      	bne.n	8019174 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8019140:	4b10      	ldr	r3, [pc, #64]	; (8019184 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8019142:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8019146:	4910      	ldr	r1, [pc, #64]	; (8019188 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8019148:	4810      	ldr	r0, [pc, #64]	; (801918c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801914a:	f007 f9e3 	bl	8020514 <iprintf>

  while (pcb != NULL) {
 801914e:	e011      	b.n	8019174 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8019150:	68fb      	ldr	r3, [r7, #12]
 8019152:	681a      	ldr	r2, [r3, #0]
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	429a      	cmp	r2, r3
 801915a:	d108      	bne.n	801916e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	68db      	ldr	r3, [r3, #12]
 8019160:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8019162:	68f8      	ldr	r0, [r7, #12]
 8019164:	f7fe fd1c 	bl	8017ba0 <tcp_abort>
      pcb = next;
 8019168:	68bb      	ldr	r3, [r7, #8]
 801916a:	60fb      	str	r3, [r7, #12]
 801916c:	e002      	b.n	8019174 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801916e:	68fb      	ldr	r3, [r7, #12]
 8019170:	68db      	ldr	r3, [r3, #12]
 8019172:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d1ea      	bne.n	8019150 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801917a:	bf00      	nop
 801917c:	3710      	adds	r7, #16
 801917e:	46bd      	mov	sp, r7
 8019180:	bd80      	pop	{r7, pc}
 8019182:	bf00      	nop
 8019184:	080226ec 	.word	0x080226ec
 8019188:	08022e20 	.word	0x08022e20
 801918c:	08022730 	.word	0x08022730

08019190 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019190:	b580      	push	{r7, lr}
 8019192:	b084      	sub	sp, #16
 8019194:	af00      	add	r7, sp, #0
 8019196:	6078      	str	r0, [r7, #4]
 8019198:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	2b00      	cmp	r3, #0
 801919e:	d02a      	beq.n	80191f6 <tcp_netif_ip_addr_changed+0x66>
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d026      	beq.n	80191f6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80191a8:	4b15      	ldr	r3, [pc, #84]	; (8019200 <tcp_netif_ip_addr_changed+0x70>)
 80191aa:	681b      	ldr	r3, [r3, #0]
 80191ac:	4619      	mov	r1, r3
 80191ae:	6878      	ldr	r0, [r7, #4]
 80191b0:	f7ff ffbc 	bl	801912c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80191b4:	4b13      	ldr	r3, [pc, #76]	; (8019204 <tcp_netif_ip_addr_changed+0x74>)
 80191b6:	681b      	ldr	r3, [r3, #0]
 80191b8:	4619      	mov	r1, r3
 80191ba:	6878      	ldr	r0, [r7, #4]
 80191bc:	f7ff ffb6 	bl	801912c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80191c0:	683b      	ldr	r3, [r7, #0]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d017      	beq.n	80191f6 <tcp_netif_ip_addr_changed+0x66>
 80191c6:	683b      	ldr	r3, [r7, #0]
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d013      	beq.n	80191f6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80191ce:	4b0e      	ldr	r3, [pc, #56]	; (8019208 <tcp_netif_ip_addr_changed+0x78>)
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	60fb      	str	r3, [r7, #12]
 80191d4:	e00c      	b.n	80191f0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	681a      	ldr	r2, [r3, #0]
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	429a      	cmp	r2, r3
 80191e0:	d103      	bne.n	80191ea <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80191e2:	683b      	ldr	r3, [r7, #0]
 80191e4:	681a      	ldr	r2, [r3, #0]
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	68db      	ldr	r3, [r3, #12]
 80191ee:	60fb      	str	r3, [r7, #12]
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d1ef      	bne.n	80191d6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80191f6:	bf00      	nop
 80191f8:	3710      	adds	r7, #16
 80191fa:	46bd      	mov	sp, r7
 80191fc:	bd80      	pop	{r7, pc}
 80191fe:	bf00      	nop
 8019200:	2001fef0 	.word	0x2001fef0
 8019204:	2001fefc 	.word	0x2001fefc
 8019208:	2001fef8 	.word	0x2001fef8

0801920c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b082      	sub	sp, #8
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019218:	2b00      	cmp	r3, #0
 801921a:	d007      	beq.n	801922c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019220:	4618      	mov	r0, r3
 8019222:	f7ff fb4b 	bl	80188bc <tcp_segs_free>
    pcb->ooseq = NULL;
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	2200      	movs	r2, #0
 801922a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801922c:	bf00      	nop
 801922e:	3708      	adds	r7, #8
 8019230:	46bd      	mov	sp, r7
 8019232:	bd80      	pop	{r7, pc}

08019234 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8019234:	b590      	push	{r4, r7, lr}
 8019236:	b08d      	sub	sp, #52	; 0x34
 8019238:	af04      	add	r7, sp, #16
 801923a:	6078      	str	r0, [r7, #4]
 801923c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	2b00      	cmp	r3, #0
 8019242:	d105      	bne.n	8019250 <tcp_input+0x1c>
 8019244:	4b9b      	ldr	r3, [pc, #620]	; (80194b4 <tcp_input+0x280>)
 8019246:	2283      	movs	r2, #131	; 0x83
 8019248:	499b      	ldr	r1, [pc, #620]	; (80194b8 <tcp_input+0x284>)
 801924a:	489c      	ldr	r0, [pc, #624]	; (80194bc <tcp_input+0x288>)
 801924c:	f007 f962 	bl	8020514 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	685b      	ldr	r3, [r3, #4]
 8019254:	4a9a      	ldr	r2, [pc, #616]	; (80194c0 <tcp_input+0x28c>)
 8019256:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	895b      	ldrh	r3, [r3, #10]
 801925c:	2b13      	cmp	r3, #19
 801925e:	f240 83c4 	bls.w	80199ea <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8019262:	4b98      	ldr	r3, [pc, #608]	; (80194c4 <tcp_input+0x290>)
 8019264:	695a      	ldr	r2, [r3, #20]
 8019266:	4b97      	ldr	r3, [pc, #604]	; (80194c4 <tcp_input+0x290>)
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	4619      	mov	r1, r3
 801926c:	4610      	mov	r0, r2
 801926e:	f006 f8a9 	bl	801f3c4 <ip4_addr_isbroadcast_u32>
 8019272:	4603      	mov	r3, r0
 8019274:	2b00      	cmp	r3, #0
 8019276:	f040 83ba 	bne.w	80199ee <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801927a:	4b92      	ldr	r3, [pc, #584]	; (80194c4 <tcp_input+0x290>)
 801927c:	695b      	ldr	r3, [r3, #20]
 801927e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8019282:	2be0      	cmp	r3, #224	; 0xe0
 8019284:	f000 83b3 	beq.w	80199ee <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8019288:	4b8d      	ldr	r3, [pc, #564]	; (80194c0 <tcp_input+0x28c>)
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	899b      	ldrh	r3, [r3, #12]
 801928e:	b29b      	uxth	r3, r3
 8019290:	4618      	mov	r0, r3
 8019292:	f7fc fb1b 	bl	80158cc <lwip_htons>
 8019296:	4603      	mov	r3, r0
 8019298:	0b1b      	lsrs	r3, r3, #12
 801929a:	b29b      	uxth	r3, r3
 801929c:	b2db      	uxtb	r3, r3
 801929e:	009b      	lsls	r3, r3, #2
 80192a0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80192a2:	7cbb      	ldrb	r3, [r7, #18]
 80192a4:	2b13      	cmp	r3, #19
 80192a6:	f240 83a2 	bls.w	80199ee <tcp_input+0x7ba>
 80192aa:	7cbb      	ldrb	r3, [r7, #18]
 80192ac:	b29a      	uxth	r2, r3
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	891b      	ldrh	r3, [r3, #8]
 80192b2:	429a      	cmp	r2, r3
 80192b4:	f200 839b 	bhi.w	80199ee <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80192b8:	7cbb      	ldrb	r3, [r7, #18]
 80192ba:	b29b      	uxth	r3, r3
 80192bc:	3b14      	subs	r3, #20
 80192be:	b29a      	uxth	r2, r3
 80192c0:	4b81      	ldr	r3, [pc, #516]	; (80194c8 <tcp_input+0x294>)
 80192c2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80192c4:	4b81      	ldr	r3, [pc, #516]	; (80194cc <tcp_input+0x298>)
 80192c6:	2200      	movs	r2, #0
 80192c8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	895a      	ldrh	r2, [r3, #10]
 80192ce:	7cbb      	ldrb	r3, [r7, #18]
 80192d0:	b29b      	uxth	r3, r3
 80192d2:	429a      	cmp	r2, r3
 80192d4:	d309      	bcc.n	80192ea <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80192d6:	4b7c      	ldr	r3, [pc, #496]	; (80194c8 <tcp_input+0x294>)
 80192d8:	881a      	ldrh	r2, [r3, #0]
 80192da:	4b7d      	ldr	r3, [pc, #500]	; (80194d0 <tcp_input+0x29c>)
 80192dc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80192de:	7cbb      	ldrb	r3, [r7, #18]
 80192e0:	4619      	mov	r1, r3
 80192e2:	6878      	ldr	r0, [r7, #4]
 80192e4:	f7fd fe4a 	bl	8016f7c <pbuf_remove_header>
 80192e8:	e04e      	b.n	8019388 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d105      	bne.n	80192fe <tcp_input+0xca>
 80192f2:	4b70      	ldr	r3, [pc, #448]	; (80194b4 <tcp_input+0x280>)
 80192f4:	22c2      	movs	r2, #194	; 0xc2
 80192f6:	4977      	ldr	r1, [pc, #476]	; (80194d4 <tcp_input+0x2a0>)
 80192f8:	4870      	ldr	r0, [pc, #448]	; (80194bc <tcp_input+0x288>)
 80192fa:	f007 f90b 	bl	8020514 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80192fe:	2114      	movs	r1, #20
 8019300:	6878      	ldr	r0, [r7, #4]
 8019302:	f7fd fe3b 	bl	8016f7c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	895a      	ldrh	r2, [r3, #10]
 801930a:	4b71      	ldr	r3, [pc, #452]	; (80194d0 <tcp_input+0x29c>)
 801930c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801930e:	4b6e      	ldr	r3, [pc, #440]	; (80194c8 <tcp_input+0x294>)
 8019310:	881a      	ldrh	r2, [r3, #0]
 8019312:	4b6f      	ldr	r3, [pc, #444]	; (80194d0 <tcp_input+0x29c>)
 8019314:	881b      	ldrh	r3, [r3, #0]
 8019316:	1ad3      	subs	r3, r2, r3
 8019318:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801931a:	4b6d      	ldr	r3, [pc, #436]	; (80194d0 <tcp_input+0x29c>)
 801931c:	881b      	ldrh	r3, [r3, #0]
 801931e:	4619      	mov	r1, r3
 8019320:	6878      	ldr	r0, [r7, #4]
 8019322:	f7fd fe2b 	bl	8016f7c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	895b      	ldrh	r3, [r3, #10]
 801932c:	8a3a      	ldrh	r2, [r7, #16]
 801932e:	429a      	cmp	r2, r3
 8019330:	f200 835f 	bhi.w	80199f2 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	685b      	ldr	r3, [r3, #4]
 801933a:	4a64      	ldr	r2, [pc, #400]	; (80194cc <tcp_input+0x298>)
 801933c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	8a3a      	ldrh	r2, [r7, #16]
 8019344:	4611      	mov	r1, r2
 8019346:	4618      	mov	r0, r3
 8019348:	f7fd fe18 	bl	8016f7c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	891a      	ldrh	r2, [r3, #8]
 8019350:	8a3b      	ldrh	r3, [r7, #16]
 8019352:	1ad3      	subs	r3, r2, r3
 8019354:	b29a      	uxth	r2, r3
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	895b      	ldrh	r3, [r3, #10]
 801935e:	2b00      	cmp	r3, #0
 8019360:	d005      	beq.n	801936e <tcp_input+0x13a>
 8019362:	4b54      	ldr	r3, [pc, #336]	; (80194b4 <tcp_input+0x280>)
 8019364:	22df      	movs	r2, #223	; 0xdf
 8019366:	495c      	ldr	r1, [pc, #368]	; (80194d8 <tcp_input+0x2a4>)
 8019368:	4854      	ldr	r0, [pc, #336]	; (80194bc <tcp_input+0x288>)
 801936a:	f007 f8d3 	bl	8020514 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	891a      	ldrh	r2, [r3, #8]
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	891b      	ldrh	r3, [r3, #8]
 8019378:	429a      	cmp	r2, r3
 801937a:	d005      	beq.n	8019388 <tcp_input+0x154>
 801937c:	4b4d      	ldr	r3, [pc, #308]	; (80194b4 <tcp_input+0x280>)
 801937e:	22e0      	movs	r2, #224	; 0xe0
 8019380:	4956      	ldr	r1, [pc, #344]	; (80194dc <tcp_input+0x2a8>)
 8019382:	484e      	ldr	r0, [pc, #312]	; (80194bc <tcp_input+0x288>)
 8019384:	f007 f8c6 	bl	8020514 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8019388:	4b4d      	ldr	r3, [pc, #308]	; (80194c0 <tcp_input+0x28c>)
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	881b      	ldrh	r3, [r3, #0]
 801938e:	b29a      	uxth	r2, r3
 8019390:	4b4b      	ldr	r3, [pc, #300]	; (80194c0 <tcp_input+0x28c>)
 8019392:	681c      	ldr	r4, [r3, #0]
 8019394:	4610      	mov	r0, r2
 8019396:	f7fc fa99 	bl	80158cc <lwip_htons>
 801939a:	4603      	mov	r3, r0
 801939c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801939e:	4b48      	ldr	r3, [pc, #288]	; (80194c0 <tcp_input+0x28c>)
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	885b      	ldrh	r3, [r3, #2]
 80193a4:	b29a      	uxth	r2, r3
 80193a6:	4b46      	ldr	r3, [pc, #280]	; (80194c0 <tcp_input+0x28c>)
 80193a8:	681c      	ldr	r4, [r3, #0]
 80193aa:	4610      	mov	r0, r2
 80193ac:	f7fc fa8e 	bl	80158cc <lwip_htons>
 80193b0:	4603      	mov	r3, r0
 80193b2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80193b4:	4b42      	ldr	r3, [pc, #264]	; (80194c0 <tcp_input+0x28c>)
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	685a      	ldr	r2, [r3, #4]
 80193ba:	4b41      	ldr	r3, [pc, #260]	; (80194c0 <tcp_input+0x28c>)
 80193bc:	681c      	ldr	r4, [r3, #0]
 80193be:	4610      	mov	r0, r2
 80193c0:	f7fc fa99 	bl	80158f6 <lwip_htonl>
 80193c4:	4603      	mov	r3, r0
 80193c6:	6063      	str	r3, [r4, #4]
 80193c8:	6863      	ldr	r3, [r4, #4]
 80193ca:	4a45      	ldr	r2, [pc, #276]	; (80194e0 <tcp_input+0x2ac>)
 80193cc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80193ce:	4b3c      	ldr	r3, [pc, #240]	; (80194c0 <tcp_input+0x28c>)
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	689a      	ldr	r2, [r3, #8]
 80193d4:	4b3a      	ldr	r3, [pc, #232]	; (80194c0 <tcp_input+0x28c>)
 80193d6:	681c      	ldr	r4, [r3, #0]
 80193d8:	4610      	mov	r0, r2
 80193da:	f7fc fa8c 	bl	80158f6 <lwip_htonl>
 80193de:	4603      	mov	r3, r0
 80193e0:	60a3      	str	r3, [r4, #8]
 80193e2:	68a3      	ldr	r3, [r4, #8]
 80193e4:	4a3f      	ldr	r2, [pc, #252]	; (80194e4 <tcp_input+0x2b0>)
 80193e6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80193e8:	4b35      	ldr	r3, [pc, #212]	; (80194c0 <tcp_input+0x28c>)
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	89db      	ldrh	r3, [r3, #14]
 80193ee:	b29a      	uxth	r2, r3
 80193f0:	4b33      	ldr	r3, [pc, #204]	; (80194c0 <tcp_input+0x28c>)
 80193f2:	681c      	ldr	r4, [r3, #0]
 80193f4:	4610      	mov	r0, r2
 80193f6:	f7fc fa69 	bl	80158cc <lwip_htons>
 80193fa:	4603      	mov	r3, r0
 80193fc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80193fe:	4b30      	ldr	r3, [pc, #192]	; (80194c0 <tcp_input+0x28c>)
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	899b      	ldrh	r3, [r3, #12]
 8019404:	b29b      	uxth	r3, r3
 8019406:	4618      	mov	r0, r3
 8019408:	f7fc fa60 	bl	80158cc <lwip_htons>
 801940c:	4603      	mov	r3, r0
 801940e:	b2db      	uxtb	r3, r3
 8019410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019414:	b2da      	uxtb	r2, r3
 8019416:	4b34      	ldr	r3, [pc, #208]	; (80194e8 <tcp_input+0x2b4>)
 8019418:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	891a      	ldrh	r2, [r3, #8]
 801941e:	4b33      	ldr	r3, [pc, #204]	; (80194ec <tcp_input+0x2b8>)
 8019420:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8019422:	4b31      	ldr	r3, [pc, #196]	; (80194e8 <tcp_input+0x2b4>)
 8019424:	781b      	ldrb	r3, [r3, #0]
 8019426:	f003 0303 	and.w	r3, r3, #3
 801942a:	2b00      	cmp	r3, #0
 801942c:	d00c      	beq.n	8019448 <tcp_input+0x214>
    tcplen++;
 801942e:	4b2f      	ldr	r3, [pc, #188]	; (80194ec <tcp_input+0x2b8>)
 8019430:	881b      	ldrh	r3, [r3, #0]
 8019432:	3301      	adds	r3, #1
 8019434:	b29a      	uxth	r2, r3
 8019436:	4b2d      	ldr	r3, [pc, #180]	; (80194ec <tcp_input+0x2b8>)
 8019438:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	891a      	ldrh	r2, [r3, #8]
 801943e:	4b2b      	ldr	r3, [pc, #172]	; (80194ec <tcp_input+0x2b8>)
 8019440:	881b      	ldrh	r3, [r3, #0]
 8019442:	429a      	cmp	r2, r3
 8019444:	f200 82d7 	bhi.w	80199f6 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8019448:	2300      	movs	r3, #0
 801944a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801944c:	4b28      	ldr	r3, [pc, #160]	; (80194f0 <tcp_input+0x2bc>)
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	61fb      	str	r3, [r7, #28]
 8019452:	e09d      	b.n	8019590 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8019454:	69fb      	ldr	r3, [r7, #28]
 8019456:	7d1b      	ldrb	r3, [r3, #20]
 8019458:	2b00      	cmp	r3, #0
 801945a:	d105      	bne.n	8019468 <tcp_input+0x234>
 801945c:	4b15      	ldr	r3, [pc, #84]	; (80194b4 <tcp_input+0x280>)
 801945e:	22fb      	movs	r2, #251	; 0xfb
 8019460:	4924      	ldr	r1, [pc, #144]	; (80194f4 <tcp_input+0x2c0>)
 8019462:	4816      	ldr	r0, [pc, #88]	; (80194bc <tcp_input+0x288>)
 8019464:	f007 f856 	bl	8020514 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8019468:	69fb      	ldr	r3, [r7, #28]
 801946a:	7d1b      	ldrb	r3, [r3, #20]
 801946c:	2b0a      	cmp	r3, #10
 801946e:	d105      	bne.n	801947c <tcp_input+0x248>
 8019470:	4b10      	ldr	r3, [pc, #64]	; (80194b4 <tcp_input+0x280>)
 8019472:	22fc      	movs	r2, #252	; 0xfc
 8019474:	4920      	ldr	r1, [pc, #128]	; (80194f8 <tcp_input+0x2c4>)
 8019476:	4811      	ldr	r0, [pc, #68]	; (80194bc <tcp_input+0x288>)
 8019478:	f007 f84c 	bl	8020514 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801947c:	69fb      	ldr	r3, [r7, #28]
 801947e:	7d1b      	ldrb	r3, [r3, #20]
 8019480:	2b01      	cmp	r3, #1
 8019482:	d105      	bne.n	8019490 <tcp_input+0x25c>
 8019484:	4b0b      	ldr	r3, [pc, #44]	; (80194b4 <tcp_input+0x280>)
 8019486:	22fd      	movs	r2, #253	; 0xfd
 8019488:	491c      	ldr	r1, [pc, #112]	; (80194fc <tcp_input+0x2c8>)
 801948a:	480c      	ldr	r0, [pc, #48]	; (80194bc <tcp_input+0x288>)
 801948c:	f007 f842 	bl	8020514 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019490:	69fb      	ldr	r3, [r7, #28]
 8019492:	7a1b      	ldrb	r3, [r3, #8]
 8019494:	2b00      	cmp	r3, #0
 8019496:	d033      	beq.n	8019500 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019498:	69fb      	ldr	r3, [r7, #28]
 801949a:	7a1a      	ldrb	r2, [r3, #8]
 801949c:	4b09      	ldr	r3, [pc, #36]	; (80194c4 <tcp_input+0x290>)
 801949e:	685b      	ldr	r3, [r3, #4]
 80194a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80194a4:	3301      	adds	r3, #1
 80194a6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80194a8:	429a      	cmp	r2, r3
 80194aa:	d029      	beq.n	8019500 <tcp_input+0x2cc>
      prev = pcb;
 80194ac:	69fb      	ldr	r3, [r7, #28]
 80194ae:	61bb      	str	r3, [r7, #24]
      continue;
 80194b0:	e06b      	b.n	801958a <tcp_input+0x356>
 80194b2:	bf00      	nop
 80194b4:	08022e54 	.word	0x08022e54
 80194b8:	08022e88 	.word	0x08022e88
 80194bc:	08022ea0 	.word	0x08022ea0
 80194c0:	2000935c 	.word	0x2000935c
 80194c4:	2001c7dc 	.word	0x2001c7dc
 80194c8:	20009360 	.word	0x20009360
 80194cc:	20009364 	.word	0x20009364
 80194d0:	20009362 	.word	0x20009362
 80194d4:	08022ec8 	.word	0x08022ec8
 80194d8:	08022ed8 	.word	0x08022ed8
 80194dc:	08022ee4 	.word	0x08022ee4
 80194e0:	2000936c 	.word	0x2000936c
 80194e4:	20009370 	.word	0x20009370
 80194e8:	20009378 	.word	0x20009378
 80194ec:	20009376 	.word	0x20009376
 80194f0:	2001fef0 	.word	0x2001fef0
 80194f4:	08022f04 	.word	0x08022f04
 80194f8:	08022f2c 	.word	0x08022f2c
 80194fc:	08022f58 	.word	0x08022f58
    }

    if (pcb->remote_port == tcphdr->src &&
 8019500:	69fb      	ldr	r3, [r7, #28]
 8019502:	8b1a      	ldrh	r2, [r3, #24]
 8019504:	4b94      	ldr	r3, [pc, #592]	; (8019758 <tcp_input+0x524>)
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	881b      	ldrh	r3, [r3, #0]
 801950a:	b29b      	uxth	r3, r3
 801950c:	429a      	cmp	r2, r3
 801950e:	d13a      	bne.n	8019586 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8019510:	69fb      	ldr	r3, [r7, #28]
 8019512:	8ada      	ldrh	r2, [r3, #22]
 8019514:	4b90      	ldr	r3, [pc, #576]	; (8019758 <tcp_input+0x524>)
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	885b      	ldrh	r3, [r3, #2]
 801951a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801951c:	429a      	cmp	r2, r3
 801951e:	d132      	bne.n	8019586 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8019520:	69fb      	ldr	r3, [r7, #28]
 8019522:	685a      	ldr	r2, [r3, #4]
 8019524:	4b8d      	ldr	r3, [pc, #564]	; (801975c <tcp_input+0x528>)
 8019526:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8019528:	429a      	cmp	r2, r3
 801952a:	d12c      	bne.n	8019586 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801952c:	69fb      	ldr	r3, [r7, #28]
 801952e:	681a      	ldr	r2, [r3, #0]
 8019530:	4b8a      	ldr	r3, [pc, #552]	; (801975c <tcp_input+0x528>)
 8019532:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8019534:	429a      	cmp	r2, r3
 8019536:	d126      	bne.n	8019586 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8019538:	69fb      	ldr	r3, [r7, #28]
 801953a:	68db      	ldr	r3, [r3, #12]
 801953c:	69fa      	ldr	r2, [r7, #28]
 801953e:	429a      	cmp	r2, r3
 8019540:	d106      	bne.n	8019550 <tcp_input+0x31c>
 8019542:	4b87      	ldr	r3, [pc, #540]	; (8019760 <tcp_input+0x52c>)
 8019544:	f240 120d 	movw	r2, #269	; 0x10d
 8019548:	4986      	ldr	r1, [pc, #536]	; (8019764 <tcp_input+0x530>)
 801954a:	4887      	ldr	r0, [pc, #540]	; (8019768 <tcp_input+0x534>)
 801954c:	f006 ffe2 	bl	8020514 <iprintf>
      if (prev != NULL) {
 8019550:	69bb      	ldr	r3, [r7, #24]
 8019552:	2b00      	cmp	r3, #0
 8019554:	d00a      	beq.n	801956c <tcp_input+0x338>
        prev->next = pcb->next;
 8019556:	69fb      	ldr	r3, [r7, #28]
 8019558:	68da      	ldr	r2, [r3, #12]
 801955a:	69bb      	ldr	r3, [r7, #24]
 801955c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801955e:	4b83      	ldr	r3, [pc, #524]	; (801976c <tcp_input+0x538>)
 8019560:	681a      	ldr	r2, [r3, #0]
 8019562:	69fb      	ldr	r3, [r7, #28]
 8019564:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8019566:	4a81      	ldr	r2, [pc, #516]	; (801976c <tcp_input+0x538>)
 8019568:	69fb      	ldr	r3, [r7, #28]
 801956a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801956c:	69fb      	ldr	r3, [r7, #28]
 801956e:	68db      	ldr	r3, [r3, #12]
 8019570:	69fa      	ldr	r2, [r7, #28]
 8019572:	429a      	cmp	r2, r3
 8019574:	d111      	bne.n	801959a <tcp_input+0x366>
 8019576:	4b7a      	ldr	r3, [pc, #488]	; (8019760 <tcp_input+0x52c>)
 8019578:	f240 1215 	movw	r2, #277	; 0x115
 801957c:	497c      	ldr	r1, [pc, #496]	; (8019770 <tcp_input+0x53c>)
 801957e:	487a      	ldr	r0, [pc, #488]	; (8019768 <tcp_input+0x534>)
 8019580:	f006 ffc8 	bl	8020514 <iprintf>
      break;
 8019584:	e009      	b.n	801959a <tcp_input+0x366>
    }
    prev = pcb;
 8019586:	69fb      	ldr	r3, [r7, #28]
 8019588:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801958a:	69fb      	ldr	r3, [r7, #28]
 801958c:	68db      	ldr	r3, [r3, #12]
 801958e:	61fb      	str	r3, [r7, #28]
 8019590:	69fb      	ldr	r3, [r7, #28]
 8019592:	2b00      	cmp	r3, #0
 8019594:	f47f af5e 	bne.w	8019454 <tcp_input+0x220>
 8019598:	e000      	b.n	801959c <tcp_input+0x368>
      break;
 801959a:	bf00      	nop
  }

  if (pcb == NULL) {
 801959c:	69fb      	ldr	r3, [r7, #28]
 801959e:	2b00      	cmp	r3, #0
 80195a0:	f040 8095 	bne.w	80196ce <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80195a4:	4b73      	ldr	r3, [pc, #460]	; (8019774 <tcp_input+0x540>)
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	61fb      	str	r3, [r7, #28]
 80195aa:	e03f      	b.n	801962c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80195ac:	69fb      	ldr	r3, [r7, #28]
 80195ae:	7d1b      	ldrb	r3, [r3, #20]
 80195b0:	2b0a      	cmp	r3, #10
 80195b2:	d006      	beq.n	80195c2 <tcp_input+0x38e>
 80195b4:	4b6a      	ldr	r3, [pc, #424]	; (8019760 <tcp_input+0x52c>)
 80195b6:	f240 121f 	movw	r2, #287	; 0x11f
 80195ba:	496f      	ldr	r1, [pc, #444]	; (8019778 <tcp_input+0x544>)
 80195bc:	486a      	ldr	r0, [pc, #424]	; (8019768 <tcp_input+0x534>)
 80195be:	f006 ffa9 	bl	8020514 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80195c2:	69fb      	ldr	r3, [r7, #28]
 80195c4:	7a1b      	ldrb	r3, [r3, #8]
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d009      	beq.n	80195de <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80195ca:	69fb      	ldr	r3, [r7, #28]
 80195cc:	7a1a      	ldrb	r2, [r3, #8]
 80195ce:	4b63      	ldr	r3, [pc, #396]	; (801975c <tcp_input+0x528>)
 80195d0:	685b      	ldr	r3, [r3, #4]
 80195d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80195d6:	3301      	adds	r3, #1
 80195d8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80195da:	429a      	cmp	r2, r3
 80195dc:	d122      	bne.n	8019624 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80195de:	69fb      	ldr	r3, [r7, #28]
 80195e0:	8b1a      	ldrh	r2, [r3, #24]
 80195e2:	4b5d      	ldr	r3, [pc, #372]	; (8019758 <tcp_input+0x524>)
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	881b      	ldrh	r3, [r3, #0]
 80195e8:	b29b      	uxth	r3, r3
 80195ea:	429a      	cmp	r2, r3
 80195ec:	d11b      	bne.n	8019626 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80195ee:	69fb      	ldr	r3, [r7, #28]
 80195f0:	8ada      	ldrh	r2, [r3, #22]
 80195f2:	4b59      	ldr	r3, [pc, #356]	; (8019758 <tcp_input+0x524>)
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	885b      	ldrh	r3, [r3, #2]
 80195f8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80195fa:	429a      	cmp	r2, r3
 80195fc:	d113      	bne.n	8019626 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80195fe:	69fb      	ldr	r3, [r7, #28]
 8019600:	685a      	ldr	r2, [r3, #4]
 8019602:	4b56      	ldr	r3, [pc, #344]	; (801975c <tcp_input+0x528>)
 8019604:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8019606:	429a      	cmp	r2, r3
 8019608:	d10d      	bne.n	8019626 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801960a:	69fb      	ldr	r3, [r7, #28]
 801960c:	681a      	ldr	r2, [r3, #0]
 801960e:	4b53      	ldr	r3, [pc, #332]	; (801975c <tcp_input+0x528>)
 8019610:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8019612:	429a      	cmp	r2, r3
 8019614:	d107      	bne.n	8019626 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8019616:	69f8      	ldr	r0, [r7, #28]
 8019618:	f000 fb52 	bl	8019cc0 <tcp_timewait_input>
        }
        pbuf_free(p);
 801961c:	6878      	ldr	r0, [r7, #4]
 801961e:	f7fd fd33 	bl	8017088 <pbuf_free>
        return;
 8019622:	e1ee      	b.n	8019a02 <tcp_input+0x7ce>
        continue;
 8019624:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019626:	69fb      	ldr	r3, [r7, #28]
 8019628:	68db      	ldr	r3, [r3, #12]
 801962a:	61fb      	str	r3, [r7, #28]
 801962c:	69fb      	ldr	r3, [r7, #28]
 801962e:	2b00      	cmp	r3, #0
 8019630:	d1bc      	bne.n	80195ac <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8019632:	2300      	movs	r3, #0
 8019634:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019636:	4b51      	ldr	r3, [pc, #324]	; (801977c <tcp_input+0x548>)
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	617b      	str	r3, [r7, #20]
 801963c:	e02a      	b.n	8019694 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801963e:	697b      	ldr	r3, [r7, #20]
 8019640:	7a1b      	ldrb	r3, [r3, #8]
 8019642:	2b00      	cmp	r3, #0
 8019644:	d00c      	beq.n	8019660 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019646:	697b      	ldr	r3, [r7, #20]
 8019648:	7a1a      	ldrb	r2, [r3, #8]
 801964a:	4b44      	ldr	r3, [pc, #272]	; (801975c <tcp_input+0x528>)
 801964c:	685b      	ldr	r3, [r3, #4]
 801964e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019652:	3301      	adds	r3, #1
 8019654:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8019656:	429a      	cmp	r2, r3
 8019658:	d002      	beq.n	8019660 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801965a:	697b      	ldr	r3, [r7, #20]
 801965c:	61bb      	str	r3, [r7, #24]
        continue;
 801965e:	e016      	b.n	801968e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8019660:	697b      	ldr	r3, [r7, #20]
 8019662:	8ada      	ldrh	r2, [r3, #22]
 8019664:	4b3c      	ldr	r3, [pc, #240]	; (8019758 <tcp_input+0x524>)
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	885b      	ldrh	r3, [r3, #2]
 801966a:	b29b      	uxth	r3, r3
 801966c:	429a      	cmp	r2, r3
 801966e:	d10c      	bne.n	801968a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8019670:	697b      	ldr	r3, [r7, #20]
 8019672:	681a      	ldr	r2, [r3, #0]
 8019674:	4b39      	ldr	r3, [pc, #228]	; (801975c <tcp_input+0x528>)
 8019676:	695b      	ldr	r3, [r3, #20]
 8019678:	429a      	cmp	r2, r3
 801967a:	d00f      	beq.n	801969c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801967c:	697b      	ldr	r3, [r7, #20]
 801967e:	2b00      	cmp	r3, #0
 8019680:	d00d      	beq.n	801969e <tcp_input+0x46a>
 8019682:	697b      	ldr	r3, [r7, #20]
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	2b00      	cmp	r3, #0
 8019688:	d009      	beq.n	801969e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801968a:	697b      	ldr	r3, [r7, #20]
 801968c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801968e:	697b      	ldr	r3, [r7, #20]
 8019690:	68db      	ldr	r3, [r3, #12]
 8019692:	617b      	str	r3, [r7, #20]
 8019694:	697b      	ldr	r3, [r7, #20]
 8019696:	2b00      	cmp	r3, #0
 8019698:	d1d1      	bne.n	801963e <tcp_input+0x40a>
 801969a:	e000      	b.n	801969e <tcp_input+0x46a>
            break;
 801969c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801969e:	697b      	ldr	r3, [r7, #20]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d014      	beq.n	80196ce <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80196a4:	69bb      	ldr	r3, [r7, #24]
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d00a      	beq.n	80196c0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80196aa:	697b      	ldr	r3, [r7, #20]
 80196ac:	68da      	ldr	r2, [r3, #12]
 80196ae:	69bb      	ldr	r3, [r7, #24]
 80196b0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80196b2:	4b32      	ldr	r3, [pc, #200]	; (801977c <tcp_input+0x548>)
 80196b4:	681a      	ldr	r2, [r3, #0]
 80196b6:	697b      	ldr	r3, [r7, #20]
 80196b8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80196ba:	4a30      	ldr	r2, [pc, #192]	; (801977c <tcp_input+0x548>)
 80196bc:	697b      	ldr	r3, [r7, #20]
 80196be:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80196c0:	6978      	ldr	r0, [r7, #20]
 80196c2:	f000 f9ff 	bl	8019ac4 <tcp_listen_input>
      }
      pbuf_free(p);
 80196c6:	6878      	ldr	r0, [r7, #4]
 80196c8:	f7fd fcde 	bl	8017088 <pbuf_free>
      return;
 80196cc:	e199      	b.n	8019a02 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80196ce:	69fb      	ldr	r3, [r7, #28]
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	f000 8160 	beq.w	8019996 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80196d6:	4b2a      	ldr	r3, [pc, #168]	; (8019780 <tcp_input+0x54c>)
 80196d8:	2200      	movs	r2, #0
 80196da:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	891a      	ldrh	r2, [r3, #8]
 80196e0:	4b27      	ldr	r3, [pc, #156]	; (8019780 <tcp_input+0x54c>)
 80196e2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80196e4:	4a26      	ldr	r2, [pc, #152]	; (8019780 <tcp_input+0x54c>)
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80196ea:	4b1b      	ldr	r3, [pc, #108]	; (8019758 <tcp_input+0x524>)
 80196ec:	681b      	ldr	r3, [r3, #0]
 80196ee:	4a24      	ldr	r2, [pc, #144]	; (8019780 <tcp_input+0x54c>)
 80196f0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80196f2:	4b24      	ldr	r3, [pc, #144]	; (8019784 <tcp_input+0x550>)
 80196f4:	2200      	movs	r2, #0
 80196f6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80196f8:	4b23      	ldr	r3, [pc, #140]	; (8019788 <tcp_input+0x554>)
 80196fa:	2200      	movs	r2, #0
 80196fc:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80196fe:	4b23      	ldr	r3, [pc, #140]	; (801978c <tcp_input+0x558>)
 8019700:	2200      	movs	r2, #0
 8019702:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8019704:	4b22      	ldr	r3, [pc, #136]	; (8019790 <tcp_input+0x55c>)
 8019706:	781b      	ldrb	r3, [r3, #0]
 8019708:	f003 0308 	and.w	r3, r3, #8
 801970c:	2b00      	cmp	r3, #0
 801970e:	d006      	beq.n	801971e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	7b5b      	ldrb	r3, [r3, #13]
 8019714:	f043 0301 	orr.w	r3, r3, #1
 8019718:	b2da      	uxtb	r2, r3
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801971e:	69fb      	ldr	r3, [r7, #28]
 8019720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019722:	2b00      	cmp	r3, #0
 8019724:	d038      	beq.n	8019798 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8019726:	69f8      	ldr	r0, [r7, #28]
 8019728:	f7ff f84c 	bl	80187c4 <tcp_process_refused_data>
 801972c:	4603      	mov	r3, r0
 801972e:	f113 0f0d 	cmn.w	r3, #13
 8019732:	d007      	beq.n	8019744 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8019734:	69fb      	ldr	r3, [r7, #28]
 8019736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8019738:	2b00      	cmp	r3, #0
 801973a:	d02d      	beq.n	8019798 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801973c:	4b15      	ldr	r3, [pc, #84]	; (8019794 <tcp_input+0x560>)
 801973e:	881b      	ldrh	r3, [r3, #0]
 8019740:	2b00      	cmp	r3, #0
 8019742:	d029      	beq.n	8019798 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8019744:	69fb      	ldr	r3, [r7, #28]
 8019746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019748:	2b00      	cmp	r3, #0
 801974a:	f040 8104 	bne.w	8019956 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801974e:	69f8      	ldr	r0, [r7, #28]
 8019750:	f003 fe28 	bl	801d3a4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8019754:	e0ff      	b.n	8019956 <tcp_input+0x722>
 8019756:	bf00      	nop
 8019758:	2000935c 	.word	0x2000935c
 801975c:	2001c7dc 	.word	0x2001c7dc
 8019760:	08022e54 	.word	0x08022e54
 8019764:	08022f80 	.word	0x08022f80
 8019768:	08022ea0 	.word	0x08022ea0
 801976c:	2001fef0 	.word	0x2001fef0
 8019770:	08022fac 	.word	0x08022fac
 8019774:	2001ff00 	.word	0x2001ff00
 8019778:	08022fd8 	.word	0x08022fd8
 801977c:	2001fef8 	.word	0x2001fef8
 8019780:	2000934c 	.word	0x2000934c
 8019784:	2000937c 	.word	0x2000937c
 8019788:	20009379 	.word	0x20009379
 801978c:	20009374 	.word	0x20009374
 8019790:	20009378 	.word	0x20009378
 8019794:	20009376 	.word	0x20009376
      }
    }
    tcp_input_pcb = pcb;
 8019798:	4a9b      	ldr	r2, [pc, #620]	; (8019a08 <tcp_input+0x7d4>)
 801979a:	69fb      	ldr	r3, [r7, #28]
 801979c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801979e:	69f8      	ldr	r0, [r7, #28]
 80197a0:	f000 fb0a 	bl	8019db8 <tcp_process>
 80197a4:	4603      	mov	r3, r0
 80197a6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80197a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80197ac:	f113 0f0d 	cmn.w	r3, #13
 80197b0:	f000 80d3 	beq.w	801995a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80197b4:	4b95      	ldr	r3, [pc, #596]	; (8019a0c <tcp_input+0x7d8>)
 80197b6:	781b      	ldrb	r3, [r3, #0]
 80197b8:	f003 0308 	and.w	r3, r3, #8
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d015      	beq.n	80197ec <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80197c0:	69fb      	ldr	r3, [r7, #28]
 80197c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d008      	beq.n	80197dc <tcp_input+0x5a8>
 80197ca:	69fb      	ldr	r3, [r7, #28]
 80197cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80197d0:	69fa      	ldr	r2, [r7, #28]
 80197d2:	6912      	ldr	r2, [r2, #16]
 80197d4:	f06f 010d 	mvn.w	r1, #13
 80197d8:	4610      	mov	r0, r2
 80197da:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80197dc:	69f9      	ldr	r1, [r7, #28]
 80197de:	488c      	ldr	r0, [pc, #560]	; (8019a10 <tcp_input+0x7dc>)
 80197e0:	f7ff fbb0 	bl	8018f44 <tcp_pcb_remove>
        tcp_free(pcb);
 80197e4:	69f8      	ldr	r0, [r7, #28]
 80197e6:	f7fd fefb 	bl	80175e0 <tcp_free>
 80197ea:	e0c1      	b.n	8019970 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80197ec:	2300      	movs	r3, #0
 80197ee:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80197f0:	4b88      	ldr	r3, [pc, #544]	; (8019a14 <tcp_input+0x7e0>)
 80197f2:	881b      	ldrh	r3, [r3, #0]
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d01d      	beq.n	8019834 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80197f8:	4b86      	ldr	r3, [pc, #536]	; (8019a14 <tcp_input+0x7e0>)
 80197fa:	881b      	ldrh	r3, [r3, #0]
 80197fc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80197fe:	69fb      	ldr	r3, [r7, #28]
 8019800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019804:	2b00      	cmp	r3, #0
 8019806:	d00a      	beq.n	801981e <tcp_input+0x5ea>
 8019808:	69fb      	ldr	r3, [r7, #28]
 801980a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801980e:	69fa      	ldr	r2, [r7, #28]
 8019810:	6910      	ldr	r0, [r2, #16]
 8019812:	89fa      	ldrh	r2, [r7, #14]
 8019814:	69f9      	ldr	r1, [r7, #28]
 8019816:	4798      	blx	r3
 8019818:	4603      	mov	r3, r0
 801981a:	74fb      	strb	r3, [r7, #19]
 801981c:	e001      	b.n	8019822 <tcp_input+0x5ee>
 801981e:	2300      	movs	r3, #0
 8019820:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8019822:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019826:	f113 0f0d 	cmn.w	r3, #13
 801982a:	f000 8098 	beq.w	801995e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801982e:	4b79      	ldr	r3, [pc, #484]	; (8019a14 <tcp_input+0x7e0>)
 8019830:	2200      	movs	r2, #0
 8019832:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8019834:	69f8      	ldr	r0, [r7, #28]
 8019836:	f000 f905 	bl	8019a44 <tcp_input_delayed_close>
 801983a:	4603      	mov	r3, r0
 801983c:	2b00      	cmp	r3, #0
 801983e:	f040 8090 	bne.w	8019962 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8019842:	4b75      	ldr	r3, [pc, #468]	; (8019a18 <tcp_input+0x7e4>)
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	2b00      	cmp	r3, #0
 8019848:	d041      	beq.n	80198ce <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801984a:	69fb      	ldr	r3, [r7, #28]
 801984c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801984e:	2b00      	cmp	r3, #0
 8019850:	d006      	beq.n	8019860 <tcp_input+0x62c>
 8019852:	4b72      	ldr	r3, [pc, #456]	; (8019a1c <tcp_input+0x7e8>)
 8019854:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8019858:	4971      	ldr	r1, [pc, #452]	; (8019a20 <tcp_input+0x7ec>)
 801985a:	4872      	ldr	r0, [pc, #456]	; (8019a24 <tcp_input+0x7f0>)
 801985c:	f006 fe5a 	bl	8020514 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8019860:	69fb      	ldr	r3, [r7, #28]
 8019862:	8b5b      	ldrh	r3, [r3, #26]
 8019864:	f003 0310 	and.w	r3, r3, #16
 8019868:	2b00      	cmp	r3, #0
 801986a:	d008      	beq.n	801987e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801986c:	4b6a      	ldr	r3, [pc, #424]	; (8019a18 <tcp_input+0x7e4>)
 801986e:	681b      	ldr	r3, [r3, #0]
 8019870:	4618      	mov	r0, r3
 8019872:	f7fd fc09 	bl	8017088 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8019876:	69f8      	ldr	r0, [r7, #28]
 8019878:	f7fe f992 	bl	8017ba0 <tcp_abort>
            goto aborted;
 801987c:	e078      	b.n	8019970 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801987e:	69fb      	ldr	r3, [r7, #28]
 8019880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019884:	2b00      	cmp	r3, #0
 8019886:	d00c      	beq.n	80198a2 <tcp_input+0x66e>
 8019888:	69fb      	ldr	r3, [r7, #28]
 801988a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801988e:	69fb      	ldr	r3, [r7, #28]
 8019890:	6918      	ldr	r0, [r3, #16]
 8019892:	4b61      	ldr	r3, [pc, #388]	; (8019a18 <tcp_input+0x7e4>)
 8019894:	681a      	ldr	r2, [r3, #0]
 8019896:	2300      	movs	r3, #0
 8019898:	69f9      	ldr	r1, [r7, #28]
 801989a:	47a0      	blx	r4
 801989c:	4603      	mov	r3, r0
 801989e:	74fb      	strb	r3, [r7, #19]
 80198a0:	e008      	b.n	80198b4 <tcp_input+0x680>
 80198a2:	4b5d      	ldr	r3, [pc, #372]	; (8019a18 <tcp_input+0x7e4>)
 80198a4:	681a      	ldr	r2, [r3, #0]
 80198a6:	2300      	movs	r3, #0
 80198a8:	69f9      	ldr	r1, [r7, #28]
 80198aa:	2000      	movs	r0, #0
 80198ac:	f7ff f87c 	bl	80189a8 <tcp_recv_null>
 80198b0:	4603      	mov	r3, r0
 80198b2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80198b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80198b8:	f113 0f0d 	cmn.w	r3, #13
 80198bc:	d053      	beq.n	8019966 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80198be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	d003      	beq.n	80198ce <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80198c6:	4b54      	ldr	r3, [pc, #336]	; (8019a18 <tcp_input+0x7e4>)
 80198c8:	681a      	ldr	r2, [r3, #0]
 80198ca:	69fb      	ldr	r3, [r7, #28]
 80198cc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80198ce:	4b4f      	ldr	r3, [pc, #316]	; (8019a0c <tcp_input+0x7d8>)
 80198d0:	781b      	ldrb	r3, [r3, #0]
 80198d2:	f003 0320 	and.w	r3, r3, #32
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d030      	beq.n	801993c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80198da:	69fb      	ldr	r3, [r7, #28]
 80198dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80198de:	2b00      	cmp	r3, #0
 80198e0:	d009      	beq.n	80198f6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80198e2:	69fb      	ldr	r3, [r7, #28]
 80198e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80198e6:	7b5a      	ldrb	r2, [r3, #13]
 80198e8:	69fb      	ldr	r3, [r7, #28]
 80198ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80198ec:	f042 0220 	orr.w	r2, r2, #32
 80198f0:	b2d2      	uxtb	r2, r2
 80198f2:	735a      	strb	r2, [r3, #13]
 80198f4:	e022      	b.n	801993c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80198f6:	69fb      	ldr	r3, [r7, #28]
 80198f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80198fa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80198fe:	d005      	beq.n	801990c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8019900:	69fb      	ldr	r3, [r7, #28]
 8019902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019904:	3301      	adds	r3, #1
 8019906:	b29a      	uxth	r2, r3
 8019908:	69fb      	ldr	r3, [r7, #28]
 801990a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801990c:	69fb      	ldr	r3, [r7, #28]
 801990e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019912:	2b00      	cmp	r3, #0
 8019914:	d00b      	beq.n	801992e <tcp_input+0x6fa>
 8019916:	69fb      	ldr	r3, [r7, #28]
 8019918:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801991c:	69fb      	ldr	r3, [r7, #28]
 801991e:	6918      	ldr	r0, [r3, #16]
 8019920:	2300      	movs	r3, #0
 8019922:	2200      	movs	r2, #0
 8019924:	69f9      	ldr	r1, [r7, #28]
 8019926:	47a0      	blx	r4
 8019928:	4603      	mov	r3, r0
 801992a:	74fb      	strb	r3, [r7, #19]
 801992c:	e001      	b.n	8019932 <tcp_input+0x6fe>
 801992e:	2300      	movs	r3, #0
 8019930:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8019932:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019936:	f113 0f0d 	cmn.w	r3, #13
 801993a:	d016      	beq.n	801996a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801993c:	4b32      	ldr	r3, [pc, #200]	; (8019a08 <tcp_input+0x7d4>)
 801993e:	2200      	movs	r2, #0
 8019940:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8019942:	69f8      	ldr	r0, [r7, #28]
 8019944:	f000 f87e 	bl	8019a44 <tcp_input_delayed_close>
 8019948:	4603      	mov	r3, r0
 801994a:	2b00      	cmp	r3, #0
 801994c:	d10f      	bne.n	801996e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801994e:	69f8      	ldr	r0, [r7, #28]
 8019950:	f002 ff10 	bl	801c774 <tcp_output>
 8019954:	e00c      	b.n	8019970 <tcp_input+0x73c>
        goto aborted;
 8019956:	bf00      	nop
 8019958:	e00a      	b.n	8019970 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801995a:	bf00      	nop
 801995c:	e008      	b.n	8019970 <tcp_input+0x73c>
              goto aborted;
 801995e:	bf00      	nop
 8019960:	e006      	b.n	8019970 <tcp_input+0x73c>
          goto aborted;
 8019962:	bf00      	nop
 8019964:	e004      	b.n	8019970 <tcp_input+0x73c>
            goto aborted;
 8019966:	bf00      	nop
 8019968:	e002      	b.n	8019970 <tcp_input+0x73c>
              goto aborted;
 801996a:	bf00      	nop
 801996c:	e000      	b.n	8019970 <tcp_input+0x73c>
          goto aborted;
 801996e:	bf00      	nop
    tcp_input_pcb = NULL;
 8019970:	4b25      	ldr	r3, [pc, #148]	; (8019a08 <tcp_input+0x7d4>)
 8019972:	2200      	movs	r2, #0
 8019974:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8019976:	4b28      	ldr	r3, [pc, #160]	; (8019a18 <tcp_input+0x7e4>)
 8019978:	2200      	movs	r2, #0
 801997a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801997c:	4b2a      	ldr	r3, [pc, #168]	; (8019a28 <tcp_input+0x7f4>)
 801997e:	685b      	ldr	r3, [r3, #4]
 8019980:	2b00      	cmp	r3, #0
 8019982:	d03d      	beq.n	8019a00 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8019984:	4b28      	ldr	r3, [pc, #160]	; (8019a28 <tcp_input+0x7f4>)
 8019986:	685b      	ldr	r3, [r3, #4]
 8019988:	4618      	mov	r0, r3
 801998a:	f7fd fb7d 	bl	8017088 <pbuf_free>
      inseg.p = NULL;
 801998e:	4b26      	ldr	r3, [pc, #152]	; (8019a28 <tcp_input+0x7f4>)
 8019990:	2200      	movs	r2, #0
 8019992:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8019994:	e034      	b.n	8019a00 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8019996:	4b25      	ldr	r3, [pc, #148]	; (8019a2c <tcp_input+0x7f8>)
 8019998:	681b      	ldr	r3, [r3, #0]
 801999a:	899b      	ldrh	r3, [r3, #12]
 801999c:	b29b      	uxth	r3, r3
 801999e:	4618      	mov	r0, r3
 80199a0:	f7fb ff94 	bl	80158cc <lwip_htons>
 80199a4:	4603      	mov	r3, r0
 80199a6:	b2db      	uxtb	r3, r3
 80199a8:	f003 0304 	and.w	r3, r3, #4
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d118      	bne.n	80199e2 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80199b0:	4b1f      	ldr	r3, [pc, #124]	; (8019a30 <tcp_input+0x7fc>)
 80199b2:	6819      	ldr	r1, [r3, #0]
 80199b4:	4b1f      	ldr	r3, [pc, #124]	; (8019a34 <tcp_input+0x800>)
 80199b6:	881b      	ldrh	r3, [r3, #0]
 80199b8:	461a      	mov	r2, r3
 80199ba:	4b1f      	ldr	r3, [pc, #124]	; (8019a38 <tcp_input+0x804>)
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80199c0:	4b1a      	ldr	r3, [pc, #104]	; (8019a2c <tcp_input+0x7f8>)
 80199c2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80199c4:	885b      	ldrh	r3, [r3, #2]
 80199c6:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80199c8:	4a18      	ldr	r2, [pc, #96]	; (8019a2c <tcp_input+0x7f8>)
 80199ca:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80199cc:	8812      	ldrh	r2, [r2, #0]
 80199ce:	b292      	uxth	r2, r2
 80199d0:	9202      	str	r2, [sp, #8]
 80199d2:	9301      	str	r3, [sp, #4]
 80199d4:	4b19      	ldr	r3, [pc, #100]	; (8019a3c <tcp_input+0x808>)
 80199d6:	9300      	str	r3, [sp, #0]
 80199d8:	4b19      	ldr	r3, [pc, #100]	; (8019a40 <tcp_input+0x80c>)
 80199da:	4602      	mov	r2, r0
 80199dc:	2000      	movs	r0, #0
 80199de:	f003 fc8f 	bl	801d300 <tcp_rst>
    pbuf_free(p);
 80199e2:	6878      	ldr	r0, [r7, #4]
 80199e4:	f7fd fb50 	bl	8017088 <pbuf_free>
  return;
 80199e8:	e00a      	b.n	8019a00 <tcp_input+0x7cc>
    goto dropped;
 80199ea:	bf00      	nop
 80199ec:	e004      	b.n	80199f8 <tcp_input+0x7c4>
dropped:
 80199ee:	bf00      	nop
 80199f0:	e002      	b.n	80199f8 <tcp_input+0x7c4>
      goto dropped;
 80199f2:	bf00      	nop
 80199f4:	e000      	b.n	80199f8 <tcp_input+0x7c4>
      goto dropped;
 80199f6:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80199f8:	6878      	ldr	r0, [r7, #4]
 80199fa:	f7fd fb45 	bl	8017088 <pbuf_free>
 80199fe:	e000      	b.n	8019a02 <tcp_input+0x7ce>
  return;
 8019a00:	bf00      	nop
}
 8019a02:	3724      	adds	r7, #36	; 0x24
 8019a04:	46bd      	mov	sp, r7
 8019a06:	bd90      	pop	{r4, r7, pc}
 8019a08:	2001ff04 	.word	0x2001ff04
 8019a0c:	20009379 	.word	0x20009379
 8019a10:	2001fef0 	.word	0x2001fef0
 8019a14:	20009374 	.word	0x20009374
 8019a18:	2000937c 	.word	0x2000937c
 8019a1c:	08022e54 	.word	0x08022e54
 8019a20:	08023008 	.word	0x08023008
 8019a24:	08022ea0 	.word	0x08022ea0
 8019a28:	2000934c 	.word	0x2000934c
 8019a2c:	2000935c 	.word	0x2000935c
 8019a30:	20009370 	.word	0x20009370
 8019a34:	20009376 	.word	0x20009376
 8019a38:	2000936c 	.word	0x2000936c
 8019a3c:	2001c7ec 	.word	0x2001c7ec
 8019a40:	2001c7f0 	.word	0x2001c7f0

08019a44 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8019a44:	b580      	push	{r7, lr}
 8019a46:	b082      	sub	sp, #8
 8019a48:	af00      	add	r7, sp, #0
 8019a4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d106      	bne.n	8019a60 <tcp_input_delayed_close+0x1c>
 8019a52:	4b17      	ldr	r3, [pc, #92]	; (8019ab0 <tcp_input_delayed_close+0x6c>)
 8019a54:	f240 225a 	movw	r2, #602	; 0x25a
 8019a58:	4916      	ldr	r1, [pc, #88]	; (8019ab4 <tcp_input_delayed_close+0x70>)
 8019a5a:	4817      	ldr	r0, [pc, #92]	; (8019ab8 <tcp_input_delayed_close+0x74>)
 8019a5c:	f006 fd5a 	bl	8020514 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8019a60:	4b16      	ldr	r3, [pc, #88]	; (8019abc <tcp_input_delayed_close+0x78>)
 8019a62:	781b      	ldrb	r3, [r3, #0]
 8019a64:	f003 0310 	and.w	r3, r3, #16
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d01c      	beq.n	8019aa6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	8b5b      	ldrh	r3, [r3, #26]
 8019a70:	f003 0310 	and.w	r3, r3, #16
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d10d      	bne.n	8019a94 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d008      	beq.n	8019a94 <tcp_input_delayed_close+0x50>
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019a88:	687a      	ldr	r2, [r7, #4]
 8019a8a:	6912      	ldr	r2, [r2, #16]
 8019a8c:	f06f 010e 	mvn.w	r1, #14
 8019a90:	4610      	mov	r0, r2
 8019a92:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8019a94:	6879      	ldr	r1, [r7, #4]
 8019a96:	480a      	ldr	r0, [pc, #40]	; (8019ac0 <tcp_input_delayed_close+0x7c>)
 8019a98:	f7ff fa54 	bl	8018f44 <tcp_pcb_remove>
    tcp_free(pcb);
 8019a9c:	6878      	ldr	r0, [r7, #4]
 8019a9e:	f7fd fd9f 	bl	80175e0 <tcp_free>
    return 1;
 8019aa2:	2301      	movs	r3, #1
 8019aa4:	e000      	b.n	8019aa8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8019aa6:	2300      	movs	r3, #0
}
 8019aa8:	4618      	mov	r0, r3
 8019aaa:	3708      	adds	r7, #8
 8019aac:	46bd      	mov	sp, r7
 8019aae:	bd80      	pop	{r7, pc}
 8019ab0:	08022e54 	.word	0x08022e54
 8019ab4:	08023024 	.word	0x08023024
 8019ab8:	08022ea0 	.word	0x08022ea0
 8019abc:	20009379 	.word	0x20009379
 8019ac0:	2001fef0 	.word	0x2001fef0

08019ac4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8019ac4:	b590      	push	{r4, r7, lr}
 8019ac6:	b08b      	sub	sp, #44	; 0x2c
 8019ac8:	af04      	add	r7, sp, #16
 8019aca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8019acc:	4b6f      	ldr	r3, [pc, #444]	; (8019c8c <tcp_listen_input+0x1c8>)
 8019ace:	781b      	ldrb	r3, [r3, #0]
 8019ad0:	f003 0304 	and.w	r3, r3, #4
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	f040 80d3 	bne.w	8019c80 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d106      	bne.n	8019aee <tcp_listen_input+0x2a>
 8019ae0:	4b6b      	ldr	r3, [pc, #428]	; (8019c90 <tcp_listen_input+0x1cc>)
 8019ae2:	f240 2281 	movw	r2, #641	; 0x281
 8019ae6:	496b      	ldr	r1, [pc, #428]	; (8019c94 <tcp_listen_input+0x1d0>)
 8019ae8:	486b      	ldr	r0, [pc, #428]	; (8019c98 <tcp_listen_input+0x1d4>)
 8019aea:	f006 fd13 	bl	8020514 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8019aee:	4b67      	ldr	r3, [pc, #412]	; (8019c8c <tcp_listen_input+0x1c8>)
 8019af0:	781b      	ldrb	r3, [r3, #0]
 8019af2:	f003 0310 	and.w	r3, r3, #16
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d019      	beq.n	8019b2e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019afa:	4b68      	ldr	r3, [pc, #416]	; (8019c9c <tcp_listen_input+0x1d8>)
 8019afc:	6819      	ldr	r1, [r3, #0]
 8019afe:	4b68      	ldr	r3, [pc, #416]	; (8019ca0 <tcp_listen_input+0x1dc>)
 8019b00:	881b      	ldrh	r3, [r3, #0]
 8019b02:	461a      	mov	r2, r3
 8019b04:	4b67      	ldr	r3, [pc, #412]	; (8019ca4 <tcp_listen_input+0x1e0>)
 8019b06:	681b      	ldr	r3, [r3, #0]
 8019b08:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019b0a:	4b67      	ldr	r3, [pc, #412]	; (8019ca8 <tcp_listen_input+0x1e4>)
 8019b0c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019b0e:	885b      	ldrh	r3, [r3, #2]
 8019b10:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019b12:	4a65      	ldr	r2, [pc, #404]	; (8019ca8 <tcp_listen_input+0x1e4>)
 8019b14:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019b16:	8812      	ldrh	r2, [r2, #0]
 8019b18:	b292      	uxth	r2, r2
 8019b1a:	9202      	str	r2, [sp, #8]
 8019b1c:	9301      	str	r3, [sp, #4]
 8019b1e:	4b63      	ldr	r3, [pc, #396]	; (8019cac <tcp_listen_input+0x1e8>)
 8019b20:	9300      	str	r3, [sp, #0]
 8019b22:	4b63      	ldr	r3, [pc, #396]	; (8019cb0 <tcp_listen_input+0x1ec>)
 8019b24:	4602      	mov	r2, r0
 8019b26:	6878      	ldr	r0, [r7, #4]
 8019b28:	f003 fbea 	bl	801d300 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8019b2c:	e0aa      	b.n	8019c84 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8019b2e:	4b57      	ldr	r3, [pc, #348]	; (8019c8c <tcp_listen_input+0x1c8>)
 8019b30:	781b      	ldrb	r3, [r3, #0]
 8019b32:	f003 0302 	and.w	r3, r3, #2
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	f000 80a4 	beq.w	8019c84 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	7d5b      	ldrb	r3, [r3, #21]
 8019b40:	4618      	mov	r0, r3
 8019b42:	f7ff f855 	bl	8018bf0 <tcp_alloc>
 8019b46:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8019b48:	697b      	ldr	r3, [r7, #20]
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d111      	bne.n	8019b72 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	699b      	ldr	r3, [r3, #24]
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d00a      	beq.n	8019b6c <tcp_listen_input+0xa8>
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	699b      	ldr	r3, [r3, #24]
 8019b5a:	687a      	ldr	r2, [r7, #4]
 8019b5c:	6910      	ldr	r0, [r2, #16]
 8019b5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019b62:	2100      	movs	r1, #0
 8019b64:	4798      	blx	r3
 8019b66:	4603      	mov	r3, r0
 8019b68:	73bb      	strb	r3, [r7, #14]
      return;
 8019b6a:	e08c      	b.n	8019c86 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8019b6c:	23f0      	movs	r3, #240	; 0xf0
 8019b6e:	73bb      	strb	r3, [r7, #14]
      return;
 8019b70:	e089      	b.n	8019c86 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8019b72:	4b50      	ldr	r3, [pc, #320]	; (8019cb4 <tcp_listen_input+0x1f0>)
 8019b74:	695a      	ldr	r2, [r3, #20]
 8019b76:	697b      	ldr	r3, [r7, #20]
 8019b78:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8019b7a:	4b4e      	ldr	r3, [pc, #312]	; (8019cb4 <tcp_listen_input+0x1f0>)
 8019b7c:	691a      	ldr	r2, [r3, #16]
 8019b7e:	697b      	ldr	r3, [r7, #20]
 8019b80:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	8ada      	ldrh	r2, [r3, #22]
 8019b86:	697b      	ldr	r3, [r7, #20]
 8019b88:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8019b8a:	4b47      	ldr	r3, [pc, #284]	; (8019ca8 <tcp_listen_input+0x1e4>)
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	881b      	ldrh	r3, [r3, #0]
 8019b90:	b29a      	uxth	r2, r3
 8019b92:	697b      	ldr	r3, [r7, #20]
 8019b94:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8019b96:	697b      	ldr	r3, [r7, #20]
 8019b98:	2203      	movs	r2, #3
 8019b9a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8019b9c:	4b41      	ldr	r3, [pc, #260]	; (8019ca4 <tcp_listen_input+0x1e0>)
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	1c5a      	adds	r2, r3, #1
 8019ba2:	697b      	ldr	r3, [r7, #20]
 8019ba4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8019ba6:	697b      	ldr	r3, [r7, #20]
 8019ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019baa:	697b      	ldr	r3, [r7, #20]
 8019bac:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8019bae:	6978      	ldr	r0, [r7, #20]
 8019bb0:	f7ff fa5c 	bl	801906c <tcp_next_iss>
 8019bb4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8019bb6:	697b      	ldr	r3, [r7, #20]
 8019bb8:	693a      	ldr	r2, [r7, #16]
 8019bba:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8019bbc:	697b      	ldr	r3, [r7, #20]
 8019bbe:	693a      	ldr	r2, [r7, #16]
 8019bc0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8019bc2:	697b      	ldr	r3, [r7, #20]
 8019bc4:	693a      	ldr	r2, [r7, #16]
 8019bc6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8019bc8:	697b      	ldr	r3, [r7, #20]
 8019bca:	693a      	ldr	r2, [r7, #16]
 8019bcc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8019bce:	4b35      	ldr	r3, [pc, #212]	; (8019ca4 <tcp_listen_input+0x1e0>)
 8019bd0:	681b      	ldr	r3, [r3, #0]
 8019bd2:	1e5a      	subs	r2, r3, #1
 8019bd4:	697b      	ldr	r3, [r7, #20]
 8019bd6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	691a      	ldr	r2, [r3, #16]
 8019bdc:	697b      	ldr	r3, [r7, #20]
 8019bde:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8019be0:	697b      	ldr	r3, [r7, #20]
 8019be2:	687a      	ldr	r2, [r7, #4]
 8019be4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	7a5b      	ldrb	r3, [r3, #9]
 8019bea:	f003 030c 	and.w	r3, r3, #12
 8019bee:	b2da      	uxtb	r2, r3
 8019bf0:	697b      	ldr	r3, [r7, #20]
 8019bf2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	7a1a      	ldrb	r2, [r3, #8]
 8019bf8:	697b      	ldr	r3, [r7, #20]
 8019bfa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8019bfc:	4b2e      	ldr	r3, [pc, #184]	; (8019cb8 <tcp_listen_input+0x1f4>)
 8019bfe:	681a      	ldr	r2, [r3, #0]
 8019c00:	697b      	ldr	r3, [r7, #20]
 8019c02:	60da      	str	r2, [r3, #12]
 8019c04:	4a2c      	ldr	r2, [pc, #176]	; (8019cb8 <tcp_listen_input+0x1f4>)
 8019c06:	697b      	ldr	r3, [r7, #20]
 8019c08:	6013      	str	r3, [r2, #0]
 8019c0a:	f003 fd3b 	bl	801d684 <tcp_timer_needed>
 8019c0e:	4b2b      	ldr	r3, [pc, #172]	; (8019cbc <tcp_listen_input+0x1f8>)
 8019c10:	2201      	movs	r2, #1
 8019c12:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8019c14:	6978      	ldr	r0, [r7, #20]
 8019c16:	f001 fd8f 	bl	801b738 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8019c1a:	4b23      	ldr	r3, [pc, #140]	; (8019ca8 <tcp_listen_input+0x1e4>)
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	89db      	ldrh	r3, [r3, #14]
 8019c20:	b29a      	uxth	r2, r3
 8019c22:	697b      	ldr	r3, [r7, #20]
 8019c24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8019c28:	697b      	ldr	r3, [r7, #20]
 8019c2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019c2e:	697b      	ldr	r3, [r7, #20]
 8019c30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019c34:	697b      	ldr	r3, [r7, #20]
 8019c36:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8019c38:	697b      	ldr	r3, [r7, #20]
 8019c3a:	3304      	adds	r3, #4
 8019c3c:	4618      	mov	r0, r3
 8019c3e:	f005 f92d 	bl	801ee9c <ip4_route>
 8019c42:	4601      	mov	r1, r0
 8019c44:	697b      	ldr	r3, [r7, #20]
 8019c46:	3304      	adds	r3, #4
 8019c48:	461a      	mov	r2, r3
 8019c4a:	4620      	mov	r0, r4
 8019c4c:	f7ff fa34 	bl	80190b8 <tcp_eff_send_mss_netif>
 8019c50:	4603      	mov	r3, r0
 8019c52:	461a      	mov	r2, r3
 8019c54:	697b      	ldr	r3, [r7, #20]
 8019c56:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8019c58:	2112      	movs	r1, #18
 8019c5a:	6978      	ldr	r0, [r7, #20]
 8019c5c:	f002 fc9c 	bl	801c598 <tcp_enqueue_flags>
 8019c60:	4603      	mov	r3, r0
 8019c62:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8019c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d004      	beq.n	8019c76 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8019c6c:	2100      	movs	r1, #0
 8019c6e:	6978      	ldr	r0, [r7, #20]
 8019c70:	f7fd fed8 	bl	8017a24 <tcp_abandon>
      return;
 8019c74:	e007      	b.n	8019c86 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8019c76:	6978      	ldr	r0, [r7, #20]
 8019c78:	f002 fd7c 	bl	801c774 <tcp_output>
  return;
 8019c7c:	bf00      	nop
 8019c7e:	e001      	b.n	8019c84 <tcp_listen_input+0x1c0>
    return;
 8019c80:	bf00      	nop
 8019c82:	e000      	b.n	8019c86 <tcp_listen_input+0x1c2>
  return;
 8019c84:	bf00      	nop
}
 8019c86:	371c      	adds	r7, #28
 8019c88:	46bd      	mov	sp, r7
 8019c8a:	bd90      	pop	{r4, r7, pc}
 8019c8c:	20009378 	.word	0x20009378
 8019c90:	08022e54 	.word	0x08022e54
 8019c94:	0802304c 	.word	0x0802304c
 8019c98:	08022ea0 	.word	0x08022ea0
 8019c9c:	20009370 	.word	0x20009370
 8019ca0:	20009376 	.word	0x20009376
 8019ca4:	2000936c 	.word	0x2000936c
 8019ca8:	2000935c 	.word	0x2000935c
 8019cac:	2001c7ec 	.word	0x2001c7ec
 8019cb0:	2001c7f0 	.word	0x2001c7f0
 8019cb4:	2001c7dc 	.word	0x2001c7dc
 8019cb8:	2001fef0 	.word	0x2001fef0
 8019cbc:	2001feec 	.word	0x2001feec

08019cc0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8019cc0:	b580      	push	{r7, lr}
 8019cc2:	b086      	sub	sp, #24
 8019cc4:	af04      	add	r7, sp, #16
 8019cc6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8019cc8:	4b30      	ldr	r3, [pc, #192]	; (8019d8c <tcp_timewait_input+0xcc>)
 8019cca:	781b      	ldrb	r3, [r3, #0]
 8019ccc:	f003 0304 	and.w	r3, r3, #4
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d154      	bne.n	8019d7e <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d106      	bne.n	8019ce8 <tcp_timewait_input+0x28>
 8019cda:	4b2d      	ldr	r3, [pc, #180]	; (8019d90 <tcp_timewait_input+0xd0>)
 8019cdc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8019ce0:	492c      	ldr	r1, [pc, #176]	; (8019d94 <tcp_timewait_input+0xd4>)
 8019ce2:	482d      	ldr	r0, [pc, #180]	; (8019d98 <tcp_timewait_input+0xd8>)
 8019ce4:	f006 fc16 	bl	8020514 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8019ce8:	4b28      	ldr	r3, [pc, #160]	; (8019d8c <tcp_timewait_input+0xcc>)
 8019cea:	781b      	ldrb	r3, [r3, #0]
 8019cec:	f003 0302 	and.w	r3, r3, #2
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	d02a      	beq.n	8019d4a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8019cf4:	4b29      	ldr	r3, [pc, #164]	; (8019d9c <tcp_timewait_input+0xdc>)
 8019cf6:	681a      	ldr	r2, [r3, #0]
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cfc:	1ad3      	subs	r3, r2, r3
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	db2d      	blt.n	8019d5e <tcp_timewait_input+0x9e>
 8019d02:	4b26      	ldr	r3, [pc, #152]	; (8019d9c <tcp_timewait_input+0xdc>)
 8019d04:	681a      	ldr	r2, [r3, #0]
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d0a:	6879      	ldr	r1, [r7, #4]
 8019d0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019d0e:	440b      	add	r3, r1
 8019d10:	1ad3      	subs	r3, r2, r3
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	dc23      	bgt.n	8019d5e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019d16:	4b22      	ldr	r3, [pc, #136]	; (8019da0 <tcp_timewait_input+0xe0>)
 8019d18:	6819      	ldr	r1, [r3, #0]
 8019d1a:	4b22      	ldr	r3, [pc, #136]	; (8019da4 <tcp_timewait_input+0xe4>)
 8019d1c:	881b      	ldrh	r3, [r3, #0]
 8019d1e:	461a      	mov	r2, r3
 8019d20:	4b1e      	ldr	r3, [pc, #120]	; (8019d9c <tcp_timewait_input+0xdc>)
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019d26:	4b20      	ldr	r3, [pc, #128]	; (8019da8 <tcp_timewait_input+0xe8>)
 8019d28:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019d2a:	885b      	ldrh	r3, [r3, #2]
 8019d2c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019d2e:	4a1e      	ldr	r2, [pc, #120]	; (8019da8 <tcp_timewait_input+0xe8>)
 8019d30:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019d32:	8812      	ldrh	r2, [r2, #0]
 8019d34:	b292      	uxth	r2, r2
 8019d36:	9202      	str	r2, [sp, #8]
 8019d38:	9301      	str	r3, [sp, #4]
 8019d3a:	4b1c      	ldr	r3, [pc, #112]	; (8019dac <tcp_timewait_input+0xec>)
 8019d3c:	9300      	str	r3, [sp, #0]
 8019d3e:	4b1c      	ldr	r3, [pc, #112]	; (8019db0 <tcp_timewait_input+0xf0>)
 8019d40:	4602      	mov	r2, r0
 8019d42:	6878      	ldr	r0, [r7, #4]
 8019d44:	f003 fadc 	bl	801d300 <tcp_rst>
      return;
 8019d48:	e01c      	b.n	8019d84 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8019d4a:	4b10      	ldr	r3, [pc, #64]	; (8019d8c <tcp_timewait_input+0xcc>)
 8019d4c:	781b      	ldrb	r3, [r3, #0]
 8019d4e:	f003 0301 	and.w	r3, r3, #1
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d003      	beq.n	8019d5e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8019d56:	4b17      	ldr	r3, [pc, #92]	; (8019db4 <tcp_timewait_input+0xf4>)
 8019d58:	681a      	ldr	r2, [r3, #0]
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8019d5e:	4b11      	ldr	r3, [pc, #68]	; (8019da4 <tcp_timewait_input+0xe4>)
 8019d60:	881b      	ldrh	r3, [r3, #0]
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	d00d      	beq.n	8019d82 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	8b5b      	ldrh	r3, [r3, #26]
 8019d6a:	f043 0302 	orr.w	r3, r3, #2
 8019d6e:	b29a      	uxth	r2, r3
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8019d74:	6878      	ldr	r0, [r7, #4]
 8019d76:	f002 fcfd 	bl	801c774 <tcp_output>
  }
  return;
 8019d7a:	bf00      	nop
 8019d7c:	e001      	b.n	8019d82 <tcp_timewait_input+0xc2>
    return;
 8019d7e:	bf00      	nop
 8019d80:	e000      	b.n	8019d84 <tcp_timewait_input+0xc4>
  return;
 8019d82:	bf00      	nop
}
 8019d84:	3708      	adds	r7, #8
 8019d86:	46bd      	mov	sp, r7
 8019d88:	bd80      	pop	{r7, pc}
 8019d8a:	bf00      	nop
 8019d8c:	20009378 	.word	0x20009378
 8019d90:	08022e54 	.word	0x08022e54
 8019d94:	0802306c 	.word	0x0802306c
 8019d98:	08022ea0 	.word	0x08022ea0
 8019d9c:	2000936c 	.word	0x2000936c
 8019da0:	20009370 	.word	0x20009370
 8019da4:	20009376 	.word	0x20009376
 8019da8:	2000935c 	.word	0x2000935c
 8019dac:	2001c7ec 	.word	0x2001c7ec
 8019db0:	2001c7f0 	.word	0x2001c7f0
 8019db4:	2001fef4 	.word	0x2001fef4

08019db8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8019db8:	b590      	push	{r4, r7, lr}
 8019dba:	b08d      	sub	sp, #52	; 0x34
 8019dbc:	af04      	add	r7, sp, #16
 8019dbe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8019dc0:	2300      	movs	r3, #0
 8019dc2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d106      	bne.n	8019ddc <tcp_process+0x24>
 8019dce:	4ba5      	ldr	r3, [pc, #660]	; (801a064 <tcp_process+0x2ac>)
 8019dd0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8019dd4:	49a4      	ldr	r1, [pc, #656]	; (801a068 <tcp_process+0x2b0>)
 8019dd6:	48a5      	ldr	r0, [pc, #660]	; (801a06c <tcp_process+0x2b4>)
 8019dd8:	f006 fb9c 	bl	8020514 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8019ddc:	4ba4      	ldr	r3, [pc, #656]	; (801a070 <tcp_process+0x2b8>)
 8019dde:	781b      	ldrb	r3, [r3, #0]
 8019de0:	f003 0304 	and.w	r3, r3, #4
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d04e      	beq.n	8019e86 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	7d1b      	ldrb	r3, [r3, #20]
 8019dec:	2b02      	cmp	r3, #2
 8019dee:	d108      	bne.n	8019e02 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019df4:	4b9f      	ldr	r3, [pc, #636]	; (801a074 <tcp_process+0x2bc>)
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	429a      	cmp	r2, r3
 8019dfa:	d123      	bne.n	8019e44 <tcp_process+0x8c>
        acceptable = 1;
 8019dfc:	2301      	movs	r3, #1
 8019dfe:	76fb      	strb	r3, [r7, #27]
 8019e00:	e020      	b.n	8019e44 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019e06:	4b9c      	ldr	r3, [pc, #624]	; (801a078 <tcp_process+0x2c0>)
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	429a      	cmp	r2, r3
 8019e0c:	d102      	bne.n	8019e14 <tcp_process+0x5c>
        acceptable = 1;
 8019e0e:	2301      	movs	r3, #1
 8019e10:	76fb      	strb	r3, [r7, #27]
 8019e12:	e017      	b.n	8019e44 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019e14:	4b98      	ldr	r3, [pc, #608]	; (801a078 <tcp_process+0x2c0>)
 8019e16:	681a      	ldr	r2, [r3, #0]
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e1c:	1ad3      	subs	r3, r2, r3
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	db10      	blt.n	8019e44 <tcp_process+0x8c>
 8019e22:	4b95      	ldr	r3, [pc, #596]	; (801a078 <tcp_process+0x2c0>)
 8019e24:	681a      	ldr	r2, [r3, #0]
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e2a:	6879      	ldr	r1, [r7, #4]
 8019e2c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019e2e:	440b      	add	r3, r1
 8019e30:	1ad3      	subs	r3, r2, r3
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	dc06      	bgt.n	8019e44 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	8b5b      	ldrh	r3, [r3, #26]
 8019e3a:	f043 0302 	orr.w	r3, r3, #2
 8019e3e:	b29a      	uxth	r2, r3
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8019e44:	7efb      	ldrb	r3, [r7, #27]
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d01b      	beq.n	8019e82 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	7d1b      	ldrb	r3, [r3, #20]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d106      	bne.n	8019e60 <tcp_process+0xa8>
 8019e52:	4b84      	ldr	r3, [pc, #528]	; (801a064 <tcp_process+0x2ac>)
 8019e54:	f44f 724e 	mov.w	r2, #824	; 0x338
 8019e58:	4988      	ldr	r1, [pc, #544]	; (801a07c <tcp_process+0x2c4>)
 8019e5a:	4884      	ldr	r0, [pc, #528]	; (801a06c <tcp_process+0x2b4>)
 8019e5c:	f006 fb5a 	bl	8020514 <iprintf>
      recv_flags |= TF_RESET;
 8019e60:	4b87      	ldr	r3, [pc, #540]	; (801a080 <tcp_process+0x2c8>)
 8019e62:	781b      	ldrb	r3, [r3, #0]
 8019e64:	f043 0308 	orr.w	r3, r3, #8
 8019e68:	b2da      	uxtb	r2, r3
 8019e6a:	4b85      	ldr	r3, [pc, #532]	; (801a080 <tcp_process+0x2c8>)
 8019e6c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	8b5b      	ldrh	r3, [r3, #26]
 8019e72:	f023 0301 	bic.w	r3, r3, #1
 8019e76:	b29a      	uxth	r2, r3
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8019e7c:	f06f 030d 	mvn.w	r3, #13
 8019e80:	e37a      	b.n	801a578 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8019e82:	2300      	movs	r3, #0
 8019e84:	e378      	b.n	801a578 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8019e86:	4b7a      	ldr	r3, [pc, #488]	; (801a070 <tcp_process+0x2b8>)
 8019e88:	781b      	ldrb	r3, [r3, #0]
 8019e8a:	f003 0302 	and.w	r3, r3, #2
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d010      	beq.n	8019eb4 <tcp_process+0xfc>
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	7d1b      	ldrb	r3, [r3, #20]
 8019e96:	2b02      	cmp	r3, #2
 8019e98:	d00c      	beq.n	8019eb4 <tcp_process+0xfc>
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	7d1b      	ldrb	r3, [r3, #20]
 8019e9e:	2b03      	cmp	r3, #3
 8019ea0:	d008      	beq.n	8019eb4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	8b5b      	ldrh	r3, [r3, #26]
 8019ea6:	f043 0302 	orr.w	r3, r3, #2
 8019eaa:	b29a      	uxth	r2, r3
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8019eb0:	2300      	movs	r3, #0
 8019eb2:	e361      	b.n	801a578 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	8b5b      	ldrh	r3, [r3, #26]
 8019eb8:	f003 0310 	and.w	r3, r3, #16
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d103      	bne.n	8019ec8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8019ec0:	4b70      	ldr	r3, [pc, #448]	; (801a084 <tcp_process+0x2cc>)
 8019ec2:	681a      	ldr	r2, [r3, #0]
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	2200      	movs	r2, #0
 8019ecc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	2200      	movs	r2, #0
 8019ed4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8019ed8:	6878      	ldr	r0, [r7, #4]
 8019eda:	f001 fc2d 	bl	801b738 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	7d1b      	ldrb	r3, [r3, #20]
 8019ee2:	3b02      	subs	r3, #2
 8019ee4:	2b07      	cmp	r3, #7
 8019ee6:	f200 8337 	bhi.w	801a558 <tcp_process+0x7a0>
 8019eea:	a201      	add	r2, pc, #4	; (adr r2, 8019ef0 <tcp_process+0x138>)
 8019eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ef0:	08019f11 	.word	0x08019f11
 8019ef4:	0801a141 	.word	0x0801a141
 8019ef8:	0801a2b9 	.word	0x0801a2b9
 8019efc:	0801a2e3 	.word	0x0801a2e3
 8019f00:	0801a407 	.word	0x0801a407
 8019f04:	0801a2b9 	.word	0x0801a2b9
 8019f08:	0801a493 	.word	0x0801a493
 8019f0c:	0801a523 	.word	0x0801a523
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8019f10:	4b57      	ldr	r3, [pc, #348]	; (801a070 <tcp_process+0x2b8>)
 8019f12:	781b      	ldrb	r3, [r3, #0]
 8019f14:	f003 0310 	and.w	r3, r3, #16
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	f000 80e4 	beq.w	801a0e6 <tcp_process+0x32e>
 8019f1e:	4b54      	ldr	r3, [pc, #336]	; (801a070 <tcp_process+0x2b8>)
 8019f20:	781b      	ldrb	r3, [r3, #0]
 8019f22:	f003 0302 	and.w	r3, r3, #2
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	f000 80dd 	beq.w	801a0e6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f30:	1c5a      	adds	r2, r3, #1
 8019f32:	4b50      	ldr	r3, [pc, #320]	; (801a074 <tcp_process+0x2bc>)
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	429a      	cmp	r2, r3
 8019f38:	f040 80d5 	bne.w	801a0e6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8019f3c:	4b4e      	ldr	r3, [pc, #312]	; (801a078 <tcp_process+0x2c0>)
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	1c5a      	adds	r2, r3, #1
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8019f4e:	4b49      	ldr	r3, [pc, #292]	; (801a074 <tcp_process+0x2bc>)
 8019f50:	681a      	ldr	r2, [r3, #0]
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8019f56:	4b4c      	ldr	r3, [pc, #304]	; (801a088 <tcp_process+0x2d0>)
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	89db      	ldrh	r3, [r3, #14]
 8019f5c:	b29a      	uxth	r2, r3
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8019f70:	4b41      	ldr	r3, [pc, #260]	; (801a078 <tcp_process+0x2c0>)
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	1e5a      	subs	r2, r3, #1
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	2204      	movs	r2, #4
 8019f7e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	3304      	adds	r3, #4
 8019f88:	4618      	mov	r0, r3
 8019f8a:	f004 ff87 	bl	801ee9c <ip4_route>
 8019f8e:	4601      	mov	r1, r0
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	3304      	adds	r3, #4
 8019f94:	461a      	mov	r2, r3
 8019f96:	4620      	mov	r0, r4
 8019f98:	f7ff f88e 	bl	80190b8 <tcp_eff_send_mss_netif>
 8019f9c:	4603      	mov	r3, r0
 8019f9e:	461a      	mov	r2, r3
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019fa8:	009a      	lsls	r2, r3, #2
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019fae:	005b      	lsls	r3, r3, #1
 8019fb0:	f241 111c 	movw	r1, #4380	; 0x111c
 8019fb4:	428b      	cmp	r3, r1
 8019fb6:	bf38      	it	cc
 8019fb8:	460b      	movcc	r3, r1
 8019fba:	429a      	cmp	r2, r3
 8019fbc:	d204      	bcs.n	8019fc8 <tcp_process+0x210>
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019fc2:	009b      	lsls	r3, r3, #2
 8019fc4:	b29b      	uxth	r3, r3
 8019fc6:	e00d      	b.n	8019fe4 <tcp_process+0x22c>
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019fcc:	005b      	lsls	r3, r3, #1
 8019fce:	f241 121c 	movw	r2, #4380	; 0x111c
 8019fd2:	4293      	cmp	r3, r2
 8019fd4:	d904      	bls.n	8019fe0 <tcp_process+0x228>
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019fda:	005b      	lsls	r3, r3, #1
 8019fdc:	b29b      	uxth	r3, r3
 8019fde:	e001      	b.n	8019fe4 <tcp_process+0x22c>
 8019fe0:	f241 131c 	movw	r3, #4380	; 0x111c
 8019fe4:	687a      	ldr	r2, [r7, #4]
 8019fe6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	d106      	bne.n	801a002 <tcp_process+0x24a>
 8019ff4:	4b1b      	ldr	r3, [pc, #108]	; (801a064 <tcp_process+0x2ac>)
 8019ff6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8019ffa:	4924      	ldr	r1, [pc, #144]	; (801a08c <tcp_process+0x2d4>)
 8019ffc:	481b      	ldr	r0, [pc, #108]	; (801a06c <tcp_process+0x2b4>)
 8019ffe:	f006 fa89 	bl	8020514 <iprintf>
        --pcb->snd_queuelen;
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a008:	3b01      	subs	r3, #1
 801a00a:	b29a      	uxth	r2, r3
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a016:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801a018:	69fb      	ldr	r3, [r7, #28]
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d111      	bne.n	801a042 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a022:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801a024:	69fb      	ldr	r3, [r7, #28]
 801a026:	2b00      	cmp	r3, #0
 801a028:	d106      	bne.n	801a038 <tcp_process+0x280>
 801a02a:	4b0e      	ldr	r3, [pc, #56]	; (801a064 <tcp_process+0x2ac>)
 801a02c:	f44f 725d 	mov.w	r2, #884	; 0x374
 801a030:	4917      	ldr	r1, [pc, #92]	; (801a090 <tcp_process+0x2d8>)
 801a032:	480e      	ldr	r0, [pc, #56]	; (801a06c <tcp_process+0x2b4>)
 801a034:	f006 fa6e 	bl	8020514 <iprintf>
          pcb->unsent = rseg->next;
 801a038:	69fb      	ldr	r3, [r7, #28]
 801a03a:	681a      	ldr	r2, [r3, #0]
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	66da      	str	r2, [r3, #108]	; 0x6c
 801a040:	e003      	b.n	801a04a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801a042:	69fb      	ldr	r3, [r7, #28]
 801a044:	681a      	ldr	r2, [r3, #0]
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801a04a:	69f8      	ldr	r0, [r7, #28]
 801a04c:	f7fe fc4a 	bl	80188e4 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a054:	2b00      	cmp	r3, #0
 801a056:	d11d      	bne.n	801a094 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a05e:	861a      	strh	r2, [r3, #48]	; 0x30
 801a060:	e01f      	b.n	801a0a2 <tcp_process+0x2ea>
 801a062:	bf00      	nop
 801a064:	08022e54 	.word	0x08022e54
 801a068:	0802308c 	.word	0x0802308c
 801a06c:	08022ea0 	.word	0x08022ea0
 801a070:	20009378 	.word	0x20009378
 801a074:	20009370 	.word	0x20009370
 801a078:	2000936c 	.word	0x2000936c
 801a07c:	080230a8 	.word	0x080230a8
 801a080:	20009379 	.word	0x20009379
 801a084:	2001fef4 	.word	0x2001fef4
 801a088:	2000935c 	.word	0x2000935c
 801a08c:	080230c8 	.word	0x080230c8
 801a090:	080230e0 	.word	0x080230e0
        } else {
          pcb->rtime = 0;
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	2200      	movs	r2, #0
 801a098:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	2200      	movs	r2, #0
 801a09e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	d00a      	beq.n	801a0c2 <tcp_process+0x30a>
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a0b2:	687a      	ldr	r2, [r7, #4]
 801a0b4:	6910      	ldr	r0, [r2, #16]
 801a0b6:	2200      	movs	r2, #0
 801a0b8:	6879      	ldr	r1, [r7, #4]
 801a0ba:	4798      	blx	r3
 801a0bc:	4603      	mov	r3, r0
 801a0be:	76bb      	strb	r3, [r7, #26]
 801a0c0:	e001      	b.n	801a0c6 <tcp_process+0x30e>
 801a0c2:	2300      	movs	r3, #0
 801a0c4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801a0c6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801a0ca:	f113 0f0d 	cmn.w	r3, #13
 801a0ce:	d102      	bne.n	801a0d6 <tcp_process+0x31e>
          return ERR_ABRT;
 801a0d0:	f06f 030c 	mvn.w	r3, #12
 801a0d4:	e250      	b.n	801a578 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	8b5b      	ldrh	r3, [r3, #26]
 801a0da:	f043 0302 	orr.w	r3, r3, #2
 801a0de:	b29a      	uxth	r2, r3
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801a0e4:	e23a      	b.n	801a55c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801a0e6:	4b9d      	ldr	r3, [pc, #628]	; (801a35c <tcp_process+0x5a4>)
 801a0e8:	781b      	ldrb	r3, [r3, #0]
 801a0ea:	f003 0310 	and.w	r3, r3, #16
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	f000 8234 	beq.w	801a55c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a0f4:	4b9a      	ldr	r3, [pc, #616]	; (801a360 <tcp_process+0x5a8>)
 801a0f6:	6819      	ldr	r1, [r3, #0]
 801a0f8:	4b9a      	ldr	r3, [pc, #616]	; (801a364 <tcp_process+0x5ac>)
 801a0fa:	881b      	ldrh	r3, [r3, #0]
 801a0fc:	461a      	mov	r2, r3
 801a0fe:	4b9a      	ldr	r3, [pc, #616]	; (801a368 <tcp_process+0x5b0>)
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a104:	4b99      	ldr	r3, [pc, #612]	; (801a36c <tcp_process+0x5b4>)
 801a106:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a108:	885b      	ldrh	r3, [r3, #2]
 801a10a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a10c:	4a97      	ldr	r2, [pc, #604]	; (801a36c <tcp_process+0x5b4>)
 801a10e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a110:	8812      	ldrh	r2, [r2, #0]
 801a112:	b292      	uxth	r2, r2
 801a114:	9202      	str	r2, [sp, #8]
 801a116:	9301      	str	r3, [sp, #4]
 801a118:	4b95      	ldr	r3, [pc, #596]	; (801a370 <tcp_process+0x5b8>)
 801a11a:	9300      	str	r3, [sp, #0]
 801a11c:	4b95      	ldr	r3, [pc, #596]	; (801a374 <tcp_process+0x5bc>)
 801a11e:	4602      	mov	r2, r0
 801a120:	6878      	ldr	r0, [r7, #4]
 801a122:	f003 f8ed 	bl	801d300 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a12c:	2b05      	cmp	r3, #5
 801a12e:	f200 8215 	bhi.w	801a55c <tcp_process+0x7a4>
          pcb->rtime = 0;
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	2200      	movs	r2, #0
 801a136:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801a138:	6878      	ldr	r0, [r7, #4]
 801a13a:	f002 feab 	bl	801ce94 <tcp_rexmit_rto>
      break;
 801a13e:	e20d      	b.n	801a55c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801a140:	4b86      	ldr	r3, [pc, #536]	; (801a35c <tcp_process+0x5a4>)
 801a142:	781b      	ldrb	r3, [r3, #0]
 801a144:	f003 0310 	and.w	r3, r3, #16
 801a148:	2b00      	cmp	r3, #0
 801a14a:	f000 80a1 	beq.w	801a290 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a14e:	4b84      	ldr	r3, [pc, #528]	; (801a360 <tcp_process+0x5a8>)
 801a150:	681a      	ldr	r2, [r3, #0]
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a156:	1ad3      	subs	r3, r2, r3
 801a158:	3b01      	subs	r3, #1
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	db7e      	blt.n	801a25c <tcp_process+0x4a4>
 801a15e:	4b80      	ldr	r3, [pc, #512]	; (801a360 <tcp_process+0x5a8>)
 801a160:	681a      	ldr	r2, [r3, #0]
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a166:	1ad3      	subs	r3, r2, r3
 801a168:	2b00      	cmp	r3, #0
 801a16a:	dc77      	bgt.n	801a25c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	2204      	movs	r2, #4
 801a170:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a176:	2b00      	cmp	r3, #0
 801a178:	d102      	bne.n	801a180 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801a17a:	23fa      	movs	r3, #250	; 0xfa
 801a17c:	76bb      	strb	r3, [r7, #26]
 801a17e:	e01d      	b.n	801a1bc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a184:	699b      	ldr	r3, [r3, #24]
 801a186:	2b00      	cmp	r3, #0
 801a188:	d106      	bne.n	801a198 <tcp_process+0x3e0>
 801a18a:	4b7b      	ldr	r3, [pc, #492]	; (801a378 <tcp_process+0x5c0>)
 801a18c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801a190:	497a      	ldr	r1, [pc, #488]	; (801a37c <tcp_process+0x5c4>)
 801a192:	487b      	ldr	r0, [pc, #492]	; (801a380 <tcp_process+0x5c8>)
 801a194:	f006 f9be 	bl	8020514 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a19c:	699b      	ldr	r3, [r3, #24]
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d00a      	beq.n	801a1b8 <tcp_process+0x400>
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a1a6:	699b      	ldr	r3, [r3, #24]
 801a1a8:	687a      	ldr	r2, [r7, #4]
 801a1aa:	6910      	ldr	r0, [r2, #16]
 801a1ac:	2200      	movs	r2, #0
 801a1ae:	6879      	ldr	r1, [r7, #4]
 801a1b0:	4798      	blx	r3
 801a1b2:	4603      	mov	r3, r0
 801a1b4:	76bb      	strb	r3, [r7, #26]
 801a1b6:	e001      	b.n	801a1bc <tcp_process+0x404>
 801a1b8:	23f0      	movs	r3, #240	; 0xf0
 801a1ba:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801a1bc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d00a      	beq.n	801a1da <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801a1c4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801a1c8:	f113 0f0d 	cmn.w	r3, #13
 801a1cc:	d002      	beq.n	801a1d4 <tcp_process+0x41c>
              tcp_abort(pcb);
 801a1ce:	6878      	ldr	r0, [r7, #4]
 801a1d0:	f7fd fce6 	bl	8017ba0 <tcp_abort>
            }
            return ERR_ABRT;
 801a1d4:	f06f 030c 	mvn.w	r3, #12
 801a1d8:	e1ce      	b.n	801a578 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801a1da:	6878      	ldr	r0, [r7, #4]
 801a1dc:	f000 fae0 	bl	801a7a0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801a1e0:	4b68      	ldr	r3, [pc, #416]	; (801a384 <tcp_process+0x5cc>)
 801a1e2:	881b      	ldrh	r3, [r3, #0]
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d005      	beq.n	801a1f4 <tcp_process+0x43c>
            recv_acked--;
 801a1e8:	4b66      	ldr	r3, [pc, #408]	; (801a384 <tcp_process+0x5cc>)
 801a1ea:	881b      	ldrh	r3, [r3, #0]
 801a1ec:	3b01      	subs	r3, #1
 801a1ee:	b29a      	uxth	r2, r3
 801a1f0:	4b64      	ldr	r3, [pc, #400]	; (801a384 <tcp_process+0x5cc>)
 801a1f2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a1f8:	009a      	lsls	r2, r3, #2
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a1fe:	005b      	lsls	r3, r3, #1
 801a200:	f241 111c 	movw	r1, #4380	; 0x111c
 801a204:	428b      	cmp	r3, r1
 801a206:	bf38      	it	cc
 801a208:	460b      	movcc	r3, r1
 801a20a:	429a      	cmp	r2, r3
 801a20c:	d204      	bcs.n	801a218 <tcp_process+0x460>
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a212:	009b      	lsls	r3, r3, #2
 801a214:	b29b      	uxth	r3, r3
 801a216:	e00d      	b.n	801a234 <tcp_process+0x47c>
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a21c:	005b      	lsls	r3, r3, #1
 801a21e:	f241 121c 	movw	r2, #4380	; 0x111c
 801a222:	4293      	cmp	r3, r2
 801a224:	d904      	bls.n	801a230 <tcp_process+0x478>
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a22a:	005b      	lsls	r3, r3, #1
 801a22c:	b29b      	uxth	r3, r3
 801a22e:	e001      	b.n	801a234 <tcp_process+0x47c>
 801a230:	f241 131c 	movw	r3, #4380	; 0x111c
 801a234:	687a      	ldr	r2, [r7, #4]
 801a236:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801a23a:	4b53      	ldr	r3, [pc, #332]	; (801a388 <tcp_process+0x5d0>)
 801a23c:	781b      	ldrb	r3, [r3, #0]
 801a23e:	f003 0320 	and.w	r3, r3, #32
 801a242:	2b00      	cmp	r3, #0
 801a244:	d037      	beq.n	801a2b6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	8b5b      	ldrh	r3, [r3, #26]
 801a24a:	f043 0302 	orr.w	r3, r3, #2
 801a24e:	b29a      	uxth	r2, r3
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	2207      	movs	r2, #7
 801a258:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801a25a:	e02c      	b.n	801a2b6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a25c:	4b40      	ldr	r3, [pc, #256]	; (801a360 <tcp_process+0x5a8>)
 801a25e:	6819      	ldr	r1, [r3, #0]
 801a260:	4b40      	ldr	r3, [pc, #256]	; (801a364 <tcp_process+0x5ac>)
 801a262:	881b      	ldrh	r3, [r3, #0]
 801a264:	461a      	mov	r2, r3
 801a266:	4b40      	ldr	r3, [pc, #256]	; (801a368 <tcp_process+0x5b0>)
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a26c:	4b3f      	ldr	r3, [pc, #252]	; (801a36c <tcp_process+0x5b4>)
 801a26e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a270:	885b      	ldrh	r3, [r3, #2]
 801a272:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a274:	4a3d      	ldr	r2, [pc, #244]	; (801a36c <tcp_process+0x5b4>)
 801a276:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a278:	8812      	ldrh	r2, [r2, #0]
 801a27a:	b292      	uxth	r2, r2
 801a27c:	9202      	str	r2, [sp, #8]
 801a27e:	9301      	str	r3, [sp, #4]
 801a280:	4b3b      	ldr	r3, [pc, #236]	; (801a370 <tcp_process+0x5b8>)
 801a282:	9300      	str	r3, [sp, #0]
 801a284:	4b3b      	ldr	r3, [pc, #236]	; (801a374 <tcp_process+0x5bc>)
 801a286:	4602      	mov	r2, r0
 801a288:	6878      	ldr	r0, [r7, #4]
 801a28a:	f003 f839 	bl	801d300 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801a28e:	e167      	b.n	801a560 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801a290:	4b32      	ldr	r3, [pc, #200]	; (801a35c <tcp_process+0x5a4>)
 801a292:	781b      	ldrb	r3, [r3, #0]
 801a294:	f003 0302 	and.w	r3, r3, #2
 801a298:	2b00      	cmp	r3, #0
 801a29a:	f000 8161 	beq.w	801a560 <tcp_process+0x7a8>
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2a2:	1e5a      	subs	r2, r3, #1
 801a2a4:	4b30      	ldr	r3, [pc, #192]	; (801a368 <tcp_process+0x5b0>)
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	429a      	cmp	r2, r3
 801a2aa:	f040 8159 	bne.w	801a560 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801a2ae:	6878      	ldr	r0, [r7, #4]
 801a2b0:	f002 fe12 	bl	801ced8 <tcp_rexmit>
      break;
 801a2b4:	e154      	b.n	801a560 <tcp_process+0x7a8>
 801a2b6:	e153      	b.n	801a560 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801a2b8:	6878      	ldr	r0, [r7, #4]
 801a2ba:	f000 fa71 	bl	801a7a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801a2be:	4b32      	ldr	r3, [pc, #200]	; (801a388 <tcp_process+0x5d0>)
 801a2c0:	781b      	ldrb	r3, [r3, #0]
 801a2c2:	f003 0320 	and.w	r3, r3, #32
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	f000 814c 	beq.w	801a564 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	8b5b      	ldrh	r3, [r3, #26]
 801a2d0:	f043 0302 	orr.w	r3, r3, #2
 801a2d4:	b29a      	uxth	r2, r3
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	2207      	movs	r2, #7
 801a2de:	751a      	strb	r2, [r3, #20]
      }
      break;
 801a2e0:	e140      	b.n	801a564 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801a2e2:	6878      	ldr	r0, [r7, #4]
 801a2e4:	f000 fa5c 	bl	801a7a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801a2e8:	4b27      	ldr	r3, [pc, #156]	; (801a388 <tcp_process+0x5d0>)
 801a2ea:	781b      	ldrb	r3, [r3, #0]
 801a2ec:	f003 0320 	and.w	r3, r3, #32
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d071      	beq.n	801a3d8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a2f4:	4b19      	ldr	r3, [pc, #100]	; (801a35c <tcp_process+0x5a4>)
 801a2f6:	781b      	ldrb	r3, [r3, #0]
 801a2f8:	f003 0310 	and.w	r3, r3, #16
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d060      	beq.n	801a3c2 <tcp_process+0x60a>
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a304:	4b16      	ldr	r3, [pc, #88]	; (801a360 <tcp_process+0x5a8>)
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	429a      	cmp	r2, r3
 801a30a:	d15a      	bne.n	801a3c2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a310:	2b00      	cmp	r3, #0
 801a312:	d156      	bne.n	801a3c2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	8b5b      	ldrh	r3, [r3, #26]
 801a318:	f043 0302 	orr.w	r3, r3, #2
 801a31c:	b29a      	uxth	r2, r3
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801a322:	6878      	ldr	r0, [r7, #4]
 801a324:	f7fe fdbe 	bl	8018ea4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801a328:	4b18      	ldr	r3, [pc, #96]	; (801a38c <tcp_process+0x5d4>)
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	687a      	ldr	r2, [r7, #4]
 801a32e:	429a      	cmp	r2, r3
 801a330:	d105      	bne.n	801a33e <tcp_process+0x586>
 801a332:	4b16      	ldr	r3, [pc, #88]	; (801a38c <tcp_process+0x5d4>)
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	68db      	ldr	r3, [r3, #12]
 801a338:	4a14      	ldr	r2, [pc, #80]	; (801a38c <tcp_process+0x5d4>)
 801a33a:	6013      	str	r3, [r2, #0]
 801a33c:	e02e      	b.n	801a39c <tcp_process+0x5e4>
 801a33e:	4b13      	ldr	r3, [pc, #76]	; (801a38c <tcp_process+0x5d4>)
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	617b      	str	r3, [r7, #20]
 801a344:	e027      	b.n	801a396 <tcp_process+0x5de>
 801a346:	697b      	ldr	r3, [r7, #20]
 801a348:	68db      	ldr	r3, [r3, #12]
 801a34a:	687a      	ldr	r2, [r7, #4]
 801a34c:	429a      	cmp	r2, r3
 801a34e:	d11f      	bne.n	801a390 <tcp_process+0x5d8>
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	68da      	ldr	r2, [r3, #12]
 801a354:	697b      	ldr	r3, [r7, #20]
 801a356:	60da      	str	r2, [r3, #12]
 801a358:	e020      	b.n	801a39c <tcp_process+0x5e4>
 801a35a:	bf00      	nop
 801a35c:	20009378 	.word	0x20009378
 801a360:	20009370 	.word	0x20009370
 801a364:	20009376 	.word	0x20009376
 801a368:	2000936c 	.word	0x2000936c
 801a36c:	2000935c 	.word	0x2000935c
 801a370:	2001c7ec 	.word	0x2001c7ec
 801a374:	2001c7f0 	.word	0x2001c7f0
 801a378:	08022e54 	.word	0x08022e54
 801a37c:	080230f4 	.word	0x080230f4
 801a380:	08022ea0 	.word	0x08022ea0
 801a384:	20009374 	.word	0x20009374
 801a388:	20009379 	.word	0x20009379
 801a38c:	2001fef0 	.word	0x2001fef0
 801a390:	697b      	ldr	r3, [r7, #20]
 801a392:	68db      	ldr	r3, [r3, #12]
 801a394:	617b      	str	r3, [r7, #20]
 801a396:	697b      	ldr	r3, [r7, #20]
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d1d4      	bne.n	801a346 <tcp_process+0x58e>
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	2200      	movs	r2, #0
 801a3a0:	60da      	str	r2, [r3, #12]
 801a3a2:	4b77      	ldr	r3, [pc, #476]	; (801a580 <tcp_process+0x7c8>)
 801a3a4:	2201      	movs	r2, #1
 801a3a6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	220a      	movs	r2, #10
 801a3ac:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801a3ae:	4b75      	ldr	r3, [pc, #468]	; (801a584 <tcp_process+0x7cc>)
 801a3b0:	681a      	ldr	r2, [r3, #0]
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	60da      	str	r2, [r3, #12]
 801a3b6:	4a73      	ldr	r2, [pc, #460]	; (801a584 <tcp_process+0x7cc>)
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	6013      	str	r3, [r2, #0]
 801a3bc:	f003 f962 	bl	801d684 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801a3c0:	e0d2      	b.n	801a568 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	8b5b      	ldrh	r3, [r3, #26]
 801a3c6:	f043 0302 	orr.w	r3, r3, #2
 801a3ca:	b29a      	uxth	r2, r3
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	2208      	movs	r2, #8
 801a3d4:	751a      	strb	r2, [r3, #20]
      break;
 801a3d6:	e0c7      	b.n	801a568 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a3d8:	4b6b      	ldr	r3, [pc, #428]	; (801a588 <tcp_process+0x7d0>)
 801a3da:	781b      	ldrb	r3, [r3, #0]
 801a3dc:	f003 0310 	and.w	r3, r3, #16
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	f000 80c1 	beq.w	801a568 <tcp_process+0x7b0>
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a3ea:	4b68      	ldr	r3, [pc, #416]	; (801a58c <tcp_process+0x7d4>)
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	429a      	cmp	r2, r3
 801a3f0:	f040 80ba 	bne.w	801a568 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	f040 80b5 	bne.w	801a568 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	2206      	movs	r2, #6
 801a402:	751a      	strb	r2, [r3, #20]
      break;
 801a404:	e0b0      	b.n	801a568 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801a406:	6878      	ldr	r0, [r7, #4]
 801a408:	f000 f9ca 	bl	801a7a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801a40c:	4b60      	ldr	r3, [pc, #384]	; (801a590 <tcp_process+0x7d8>)
 801a40e:	781b      	ldrb	r3, [r3, #0]
 801a410:	f003 0320 	and.w	r3, r3, #32
 801a414:	2b00      	cmp	r3, #0
 801a416:	f000 80a9 	beq.w	801a56c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	8b5b      	ldrh	r3, [r3, #26]
 801a41e:	f043 0302 	orr.w	r3, r3, #2
 801a422:	b29a      	uxth	r2, r3
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801a428:	6878      	ldr	r0, [r7, #4]
 801a42a:	f7fe fd3b 	bl	8018ea4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801a42e:	4b59      	ldr	r3, [pc, #356]	; (801a594 <tcp_process+0x7dc>)
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	687a      	ldr	r2, [r7, #4]
 801a434:	429a      	cmp	r2, r3
 801a436:	d105      	bne.n	801a444 <tcp_process+0x68c>
 801a438:	4b56      	ldr	r3, [pc, #344]	; (801a594 <tcp_process+0x7dc>)
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	68db      	ldr	r3, [r3, #12]
 801a43e:	4a55      	ldr	r2, [pc, #340]	; (801a594 <tcp_process+0x7dc>)
 801a440:	6013      	str	r3, [r2, #0]
 801a442:	e013      	b.n	801a46c <tcp_process+0x6b4>
 801a444:	4b53      	ldr	r3, [pc, #332]	; (801a594 <tcp_process+0x7dc>)
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	613b      	str	r3, [r7, #16]
 801a44a:	e00c      	b.n	801a466 <tcp_process+0x6ae>
 801a44c:	693b      	ldr	r3, [r7, #16]
 801a44e:	68db      	ldr	r3, [r3, #12]
 801a450:	687a      	ldr	r2, [r7, #4]
 801a452:	429a      	cmp	r2, r3
 801a454:	d104      	bne.n	801a460 <tcp_process+0x6a8>
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	68da      	ldr	r2, [r3, #12]
 801a45a:	693b      	ldr	r3, [r7, #16]
 801a45c:	60da      	str	r2, [r3, #12]
 801a45e:	e005      	b.n	801a46c <tcp_process+0x6b4>
 801a460:	693b      	ldr	r3, [r7, #16]
 801a462:	68db      	ldr	r3, [r3, #12]
 801a464:	613b      	str	r3, [r7, #16]
 801a466:	693b      	ldr	r3, [r7, #16]
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d1ef      	bne.n	801a44c <tcp_process+0x694>
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	2200      	movs	r2, #0
 801a470:	60da      	str	r2, [r3, #12]
 801a472:	4b43      	ldr	r3, [pc, #268]	; (801a580 <tcp_process+0x7c8>)
 801a474:	2201      	movs	r2, #1
 801a476:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	220a      	movs	r2, #10
 801a47c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801a47e:	4b41      	ldr	r3, [pc, #260]	; (801a584 <tcp_process+0x7cc>)
 801a480:	681a      	ldr	r2, [r3, #0]
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	60da      	str	r2, [r3, #12]
 801a486:	4a3f      	ldr	r2, [pc, #252]	; (801a584 <tcp_process+0x7cc>)
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	6013      	str	r3, [r2, #0]
 801a48c:	f003 f8fa 	bl	801d684 <tcp_timer_needed>
      }
      break;
 801a490:	e06c      	b.n	801a56c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801a492:	6878      	ldr	r0, [r7, #4]
 801a494:	f000 f984 	bl	801a7a0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801a498:	4b3b      	ldr	r3, [pc, #236]	; (801a588 <tcp_process+0x7d0>)
 801a49a:	781b      	ldrb	r3, [r3, #0]
 801a49c:	f003 0310 	and.w	r3, r3, #16
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d065      	beq.n	801a570 <tcp_process+0x7b8>
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a4a8:	4b38      	ldr	r3, [pc, #224]	; (801a58c <tcp_process+0x7d4>)
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	429a      	cmp	r2, r3
 801a4ae:	d15f      	bne.n	801a570 <tcp_process+0x7b8>
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d15b      	bne.n	801a570 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801a4b8:	6878      	ldr	r0, [r7, #4]
 801a4ba:	f7fe fcf3 	bl	8018ea4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801a4be:	4b35      	ldr	r3, [pc, #212]	; (801a594 <tcp_process+0x7dc>)
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	687a      	ldr	r2, [r7, #4]
 801a4c4:	429a      	cmp	r2, r3
 801a4c6:	d105      	bne.n	801a4d4 <tcp_process+0x71c>
 801a4c8:	4b32      	ldr	r3, [pc, #200]	; (801a594 <tcp_process+0x7dc>)
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	68db      	ldr	r3, [r3, #12]
 801a4ce:	4a31      	ldr	r2, [pc, #196]	; (801a594 <tcp_process+0x7dc>)
 801a4d0:	6013      	str	r3, [r2, #0]
 801a4d2:	e013      	b.n	801a4fc <tcp_process+0x744>
 801a4d4:	4b2f      	ldr	r3, [pc, #188]	; (801a594 <tcp_process+0x7dc>)
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	60fb      	str	r3, [r7, #12]
 801a4da:	e00c      	b.n	801a4f6 <tcp_process+0x73e>
 801a4dc:	68fb      	ldr	r3, [r7, #12]
 801a4de:	68db      	ldr	r3, [r3, #12]
 801a4e0:	687a      	ldr	r2, [r7, #4]
 801a4e2:	429a      	cmp	r2, r3
 801a4e4:	d104      	bne.n	801a4f0 <tcp_process+0x738>
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	68da      	ldr	r2, [r3, #12]
 801a4ea:	68fb      	ldr	r3, [r7, #12]
 801a4ec:	60da      	str	r2, [r3, #12]
 801a4ee:	e005      	b.n	801a4fc <tcp_process+0x744>
 801a4f0:	68fb      	ldr	r3, [r7, #12]
 801a4f2:	68db      	ldr	r3, [r3, #12]
 801a4f4:	60fb      	str	r3, [r7, #12]
 801a4f6:	68fb      	ldr	r3, [r7, #12]
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	d1ef      	bne.n	801a4dc <tcp_process+0x724>
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	2200      	movs	r2, #0
 801a500:	60da      	str	r2, [r3, #12]
 801a502:	4b1f      	ldr	r3, [pc, #124]	; (801a580 <tcp_process+0x7c8>)
 801a504:	2201      	movs	r2, #1
 801a506:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	220a      	movs	r2, #10
 801a50c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801a50e:	4b1d      	ldr	r3, [pc, #116]	; (801a584 <tcp_process+0x7cc>)
 801a510:	681a      	ldr	r2, [r3, #0]
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	60da      	str	r2, [r3, #12]
 801a516:	4a1b      	ldr	r2, [pc, #108]	; (801a584 <tcp_process+0x7cc>)
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	6013      	str	r3, [r2, #0]
 801a51c:	f003 f8b2 	bl	801d684 <tcp_timer_needed>
      }
      break;
 801a520:	e026      	b.n	801a570 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801a522:	6878      	ldr	r0, [r7, #4]
 801a524:	f000 f93c 	bl	801a7a0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801a528:	4b17      	ldr	r3, [pc, #92]	; (801a588 <tcp_process+0x7d0>)
 801a52a:	781b      	ldrb	r3, [r3, #0]
 801a52c:	f003 0310 	and.w	r3, r3, #16
 801a530:	2b00      	cmp	r3, #0
 801a532:	d01f      	beq.n	801a574 <tcp_process+0x7bc>
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a538:	4b14      	ldr	r3, [pc, #80]	; (801a58c <tcp_process+0x7d4>)
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	429a      	cmp	r2, r3
 801a53e:	d119      	bne.n	801a574 <tcp_process+0x7bc>
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a544:	2b00      	cmp	r3, #0
 801a546:	d115      	bne.n	801a574 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801a548:	4b11      	ldr	r3, [pc, #68]	; (801a590 <tcp_process+0x7d8>)
 801a54a:	781b      	ldrb	r3, [r3, #0]
 801a54c:	f043 0310 	orr.w	r3, r3, #16
 801a550:	b2da      	uxtb	r2, r3
 801a552:	4b0f      	ldr	r3, [pc, #60]	; (801a590 <tcp_process+0x7d8>)
 801a554:	701a      	strb	r2, [r3, #0]
      }
      break;
 801a556:	e00d      	b.n	801a574 <tcp_process+0x7bc>
    default:
      break;
 801a558:	bf00      	nop
 801a55a:	e00c      	b.n	801a576 <tcp_process+0x7be>
      break;
 801a55c:	bf00      	nop
 801a55e:	e00a      	b.n	801a576 <tcp_process+0x7be>
      break;
 801a560:	bf00      	nop
 801a562:	e008      	b.n	801a576 <tcp_process+0x7be>
      break;
 801a564:	bf00      	nop
 801a566:	e006      	b.n	801a576 <tcp_process+0x7be>
      break;
 801a568:	bf00      	nop
 801a56a:	e004      	b.n	801a576 <tcp_process+0x7be>
      break;
 801a56c:	bf00      	nop
 801a56e:	e002      	b.n	801a576 <tcp_process+0x7be>
      break;
 801a570:	bf00      	nop
 801a572:	e000      	b.n	801a576 <tcp_process+0x7be>
      break;
 801a574:	bf00      	nop
  }
  return ERR_OK;
 801a576:	2300      	movs	r3, #0
}
 801a578:	4618      	mov	r0, r3
 801a57a:	3724      	adds	r7, #36	; 0x24
 801a57c:	46bd      	mov	sp, r7
 801a57e:	bd90      	pop	{r4, r7, pc}
 801a580:	2001feec 	.word	0x2001feec
 801a584:	2001ff00 	.word	0x2001ff00
 801a588:	20009378 	.word	0x20009378
 801a58c:	20009370 	.word	0x20009370
 801a590:	20009379 	.word	0x20009379
 801a594:	2001fef0 	.word	0x2001fef0

0801a598 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801a598:	b590      	push	{r4, r7, lr}
 801a59a:	b085      	sub	sp, #20
 801a59c:	af00      	add	r7, sp, #0
 801a59e:	6078      	str	r0, [r7, #4]
 801a5a0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d106      	bne.n	801a5b6 <tcp_oos_insert_segment+0x1e>
 801a5a8:	4b3b      	ldr	r3, [pc, #236]	; (801a698 <tcp_oos_insert_segment+0x100>)
 801a5aa:	f240 421f 	movw	r2, #1055	; 0x41f
 801a5ae:	493b      	ldr	r1, [pc, #236]	; (801a69c <tcp_oos_insert_segment+0x104>)
 801a5b0:	483b      	ldr	r0, [pc, #236]	; (801a6a0 <tcp_oos_insert_segment+0x108>)
 801a5b2:	f005 ffaf 	bl	8020514 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	68db      	ldr	r3, [r3, #12]
 801a5ba:	899b      	ldrh	r3, [r3, #12]
 801a5bc:	b29b      	uxth	r3, r3
 801a5be:	4618      	mov	r0, r3
 801a5c0:	f7fb f984 	bl	80158cc <lwip_htons>
 801a5c4:	4603      	mov	r3, r0
 801a5c6:	b2db      	uxtb	r3, r3
 801a5c8:	f003 0301 	and.w	r3, r3, #1
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d028      	beq.n	801a622 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801a5d0:	6838      	ldr	r0, [r7, #0]
 801a5d2:	f7fe f973 	bl	80188bc <tcp_segs_free>
    next = NULL;
 801a5d6:	2300      	movs	r3, #0
 801a5d8:	603b      	str	r3, [r7, #0]
 801a5da:	e056      	b.n	801a68a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a5dc:	683b      	ldr	r3, [r7, #0]
 801a5de:	68db      	ldr	r3, [r3, #12]
 801a5e0:	899b      	ldrh	r3, [r3, #12]
 801a5e2:	b29b      	uxth	r3, r3
 801a5e4:	4618      	mov	r0, r3
 801a5e6:	f7fb f971 	bl	80158cc <lwip_htons>
 801a5ea:	4603      	mov	r3, r0
 801a5ec:	b2db      	uxtb	r3, r3
 801a5ee:	f003 0301 	and.w	r3, r3, #1
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d00d      	beq.n	801a612 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	68db      	ldr	r3, [r3, #12]
 801a5fa:	899b      	ldrh	r3, [r3, #12]
 801a5fc:	b29c      	uxth	r4, r3
 801a5fe:	2001      	movs	r0, #1
 801a600:	f7fb f964 	bl	80158cc <lwip_htons>
 801a604:	4603      	mov	r3, r0
 801a606:	461a      	mov	r2, r3
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	68db      	ldr	r3, [r3, #12]
 801a60c:	4322      	orrs	r2, r4
 801a60e:	b292      	uxth	r2, r2
 801a610:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801a612:	683b      	ldr	r3, [r7, #0]
 801a614:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801a616:	683b      	ldr	r3, [r7, #0]
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801a61c:	68f8      	ldr	r0, [r7, #12]
 801a61e:	f7fe f961 	bl	80188e4 <tcp_seg_free>
    while (next &&
 801a622:	683b      	ldr	r3, [r7, #0]
 801a624:	2b00      	cmp	r3, #0
 801a626:	d00e      	beq.n	801a646 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	891b      	ldrh	r3, [r3, #8]
 801a62c:	461a      	mov	r2, r3
 801a62e:	4b1d      	ldr	r3, [pc, #116]	; (801a6a4 <tcp_oos_insert_segment+0x10c>)
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	441a      	add	r2, r3
 801a634:	683b      	ldr	r3, [r7, #0]
 801a636:	68db      	ldr	r3, [r3, #12]
 801a638:	685b      	ldr	r3, [r3, #4]
 801a63a:	6839      	ldr	r1, [r7, #0]
 801a63c:	8909      	ldrh	r1, [r1, #8]
 801a63e:	440b      	add	r3, r1
 801a640:	1ad3      	subs	r3, r2, r3
    while (next &&
 801a642:	2b00      	cmp	r3, #0
 801a644:	daca      	bge.n	801a5dc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801a646:	683b      	ldr	r3, [r7, #0]
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d01e      	beq.n	801a68a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	891b      	ldrh	r3, [r3, #8]
 801a650:	461a      	mov	r2, r3
 801a652:	4b14      	ldr	r3, [pc, #80]	; (801a6a4 <tcp_oos_insert_segment+0x10c>)
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	441a      	add	r2, r3
 801a658:	683b      	ldr	r3, [r7, #0]
 801a65a:	68db      	ldr	r3, [r3, #12]
 801a65c:	685b      	ldr	r3, [r3, #4]
 801a65e:	1ad3      	subs	r3, r2, r3
    if (next &&
 801a660:	2b00      	cmp	r3, #0
 801a662:	dd12      	ble.n	801a68a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801a664:	683b      	ldr	r3, [r7, #0]
 801a666:	68db      	ldr	r3, [r3, #12]
 801a668:	685b      	ldr	r3, [r3, #4]
 801a66a:	b29a      	uxth	r2, r3
 801a66c:	4b0d      	ldr	r3, [pc, #52]	; (801a6a4 <tcp_oos_insert_segment+0x10c>)
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	b29b      	uxth	r3, r3
 801a672:	1ad3      	subs	r3, r2, r3
 801a674:	b29a      	uxth	r2, r3
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	685a      	ldr	r2, [r3, #4]
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	891b      	ldrh	r3, [r3, #8]
 801a682:	4619      	mov	r1, r3
 801a684:	4610      	mov	r0, r2
 801a686:	f7fc fb79 	bl	8016d7c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	683a      	ldr	r2, [r7, #0]
 801a68e:	601a      	str	r2, [r3, #0]
}
 801a690:	bf00      	nop
 801a692:	3714      	adds	r7, #20
 801a694:	46bd      	mov	sp, r7
 801a696:	bd90      	pop	{r4, r7, pc}
 801a698:	08022e54 	.word	0x08022e54
 801a69c:	08023114 	.word	0x08023114
 801a6a0:	08022ea0 	.word	0x08022ea0
 801a6a4:	2000936c 	.word	0x2000936c

0801a6a8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801a6a8:	b5b0      	push	{r4, r5, r7, lr}
 801a6aa:	b086      	sub	sp, #24
 801a6ac:	af00      	add	r7, sp, #0
 801a6ae:	60f8      	str	r0, [r7, #12]
 801a6b0:	60b9      	str	r1, [r7, #8]
 801a6b2:	607a      	str	r2, [r7, #4]
 801a6b4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801a6b6:	e03e      	b.n	801a736 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801a6b8:	68bb      	ldr	r3, [r7, #8]
 801a6ba:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801a6bc:	68bb      	ldr	r3, [r7, #8]
 801a6be:	681b      	ldr	r3, [r3, #0]
 801a6c0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801a6c2:	697b      	ldr	r3, [r7, #20]
 801a6c4:	685b      	ldr	r3, [r3, #4]
 801a6c6:	4618      	mov	r0, r3
 801a6c8:	f7fc fd6c 	bl	80171a4 <pbuf_clen>
 801a6cc:	4603      	mov	r3, r0
 801a6ce:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801a6d0:	68fb      	ldr	r3, [r7, #12]
 801a6d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a6d6:	8a7a      	ldrh	r2, [r7, #18]
 801a6d8:	429a      	cmp	r2, r3
 801a6da:	d906      	bls.n	801a6ea <tcp_free_acked_segments+0x42>
 801a6dc:	4b2a      	ldr	r3, [pc, #168]	; (801a788 <tcp_free_acked_segments+0xe0>)
 801a6de:	f240 4257 	movw	r2, #1111	; 0x457
 801a6e2:	492a      	ldr	r1, [pc, #168]	; (801a78c <tcp_free_acked_segments+0xe4>)
 801a6e4:	482a      	ldr	r0, [pc, #168]	; (801a790 <tcp_free_acked_segments+0xe8>)
 801a6e6:	f005 ff15 	bl	8020514 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801a6ea:	68fb      	ldr	r3, [r7, #12]
 801a6ec:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801a6f0:	8a7b      	ldrh	r3, [r7, #18]
 801a6f2:	1ad3      	subs	r3, r2, r3
 801a6f4:	b29a      	uxth	r2, r3
 801a6f6:	68fb      	ldr	r3, [r7, #12]
 801a6f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801a6fc:	697b      	ldr	r3, [r7, #20]
 801a6fe:	891a      	ldrh	r2, [r3, #8]
 801a700:	4b24      	ldr	r3, [pc, #144]	; (801a794 <tcp_free_acked_segments+0xec>)
 801a702:	881b      	ldrh	r3, [r3, #0]
 801a704:	4413      	add	r3, r2
 801a706:	b29a      	uxth	r2, r3
 801a708:	4b22      	ldr	r3, [pc, #136]	; (801a794 <tcp_free_acked_segments+0xec>)
 801a70a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801a70c:	6978      	ldr	r0, [r7, #20]
 801a70e:	f7fe f8e9 	bl	80188e4 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801a712:	68fb      	ldr	r3, [r7, #12]
 801a714:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d00c      	beq.n	801a736 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801a71c:	68bb      	ldr	r3, [r7, #8]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d109      	bne.n	801a736 <tcp_free_acked_segments+0x8e>
 801a722:	683b      	ldr	r3, [r7, #0]
 801a724:	2b00      	cmp	r3, #0
 801a726:	d106      	bne.n	801a736 <tcp_free_acked_segments+0x8e>
 801a728:	4b17      	ldr	r3, [pc, #92]	; (801a788 <tcp_free_acked_segments+0xe0>)
 801a72a:	f240 4262 	movw	r2, #1122	; 0x462
 801a72e:	491a      	ldr	r1, [pc, #104]	; (801a798 <tcp_free_acked_segments+0xf0>)
 801a730:	4817      	ldr	r0, [pc, #92]	; (801a790 <tcp_free_acked_segments+0xe8>)
 801a732:	f005 feef 	bl	8020514 <iprintf>
  while (seg_list != NULL &&
 801a736:	68bb      	ldr	r3, [r7, #8]
 801a738:	2b00      	cmp	r3, #0
 801a73a:	d020      	beq.n	801a77e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801a73c:	68bb      	ldr	r3, [r7, #8]
 801a73e:	68db      	ldr	r3, [r3, #12]
 801a740:	685b      	ldr	r3, [r3, #4]
 801a742:	4618      	mov	r0, r3
 801a744:	f7fb f8d7 	bl	80158f6 <lwip_htonl>
 801a748:	4604      	mov	r4, r0
 801a74a:	68bb      	ldr	r3, [r7, #8]
 801a74c:	891b      	ldrh	r3, [r3, #8]
 801a74e:	461d      	mov	r5, r3
 801a750:	68bb      	ldr	r3, [r7, #8]
 801a752:	68db      	ldr	r3, [r3, #12]
 801a754:	899b      	ldrh	r3, [r3, #12]
 801a756:	b29b      	uxth	r3, r3
 801a758:	4618      	mov	r0, r3
 801a75a:	f7fb f8b7 	bl	80158cc <lwip_htons>
 801a75e:	4603      	mov	r3, r0
 801a760:	b2db      	uxtb	r3, r3
 801a762:	f003 0303 	and.w	r3, r3, #3
 801a766:	2b00      	cmp	r3, #0
 801a768:	d001      	beq.n	801a76e <tcp_free_acked_segments+0xc6>
 801a76a:	2301      	movs	r3, #1
 801a76c:	e000      	b.n	801a770 <tcp_free_acked_segments+0xc8>
 801a76e:	2300      	movs	r3, #0
 801a770:	442b      	add	r3, r5
 801a772:	18e2      	adds	r2, r4, r3
 801a774:	4b09      	ldr	r3, [pc, #36]	; (801a79c <tcp_free_acked_segments+0xf4>)
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	dd9c      	ble.n	801a6b8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801a77e:	68bb      	ldr	r3, [r7, #8]
}
 801a780:	4618      	mov	r0, r3
 801a782:	3718      	adds	r7, #24
 801a784:	46bd      	mov	sp, r7
 801a786:	bdb0      	pop	{r4, r5, r7, pc}
 801a788:	08022e54 	.word	0x08022e54
 801a78c:	0802313c 	.word	0x0802313c
 801a790:	08022ea0 	.word	0x08022ea0
 801a794:	20009374 	.word	0x20009374
 801a798:	08023164 	.word	0x08023164
 801a79c:	20009370 	.word	0x20009370

0801a7a0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801a7a0:	b5b0      	push	{r4, r5, r7, lr}
 801a7a2:	b094      	sub	sp, #80	; 0x50
 801a7a4:	af00      	add	r7, sp, #0
 801a7a6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801a7a8:	2300      	movs	r3, #0
 801a7aa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d106      	bne.n	801a7c0 <tcp_receive+0x20>
 801a7b2:	4ba6      	ldr	r3, [pc, #664]	; (801aa4c <tcp_receive+0x2ac>)
 801a7b4:	f240 427b 	movw	r2, #1147	; 0x47b
 801a7b8:	49a5      	ldr	r1, [pc, #660]	; (801aa50 <tcp_receive+0x2b0>)
 801a7ba:	48a6      	ldr	r0, [pc, #664]	; (801aa54 <tcp_receive+0x2b4>)
 801a7bc:	f005 feaa 	bl	8020514 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	7d1b      	ldrb	r3, [r3, #20]
 801a7c4:	2b03      	cmp	r3, #3
 801a7c6:	d806      	bhi.n	801a7d6 <tcp_receive+0x36>
 801a7c8:	4ba0      	ldr	r3, [pc, #640]	; (801aa4c <tcp_receive+0x2ac>)
 801a7ca:	f240 427c 	movw	r2, #1148	; 0x47c
 801a7ce:	49a2      	ldr	r1, [pc, #648]	; (801aa58 <tcp_receive+0x2b8>)
 801a7d0:	48a0      	ldr	r0, [pc, #640]	; (801aa54 <tcp_receive+0x2b4>)
 801a7d2:	f005 fe9f 	bl	8020514 <iprintf>

  if (flags & TCP_ACK) {
 801a7d6:	4ba1      	ldr	r3, [pc, #644]	; (801aa5c <tcp_receive+0x2bc>)
 801a7d8:	781b      	ldrb	r3, [r3, #0]
 801a7da:	f003 0310 	and.w	r3, r3, #16
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	f000 8263 	beq.w	801acaa <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a7ea:	461a      	mov	r2, r3
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a7f0:	4413      	add	r3, r2
 801a7f2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a7f8:	4b99      	ldr	r3, [pc, #612]	; (801aa60 <tcp_receive+0x2c0>)
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	1ad3      	subs	r3, r2, r3
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	db1b      	blt.n	801a83a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a806:	4b96      	ldr	r3, [pc, #600]	; (801aa60 <tcp_receive+0x2c0>)
 801a808:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801a80a:	429a      	cmp	r2, r3
 801a80c:	d106      	bne.n	801a81c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a812:	4b94      	ldr	r3, [pc, #592]	; (801aa64 <tcp_receive+0x2c4>)
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	1ad3      	subs	r3, r2, r3
 801a818:	2b00      	cmp	r3, #0
 801a81a:	db0e      	blt.n	801a83a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a820:	4b90      	ldr	r3, [pc, #576]	; (801aa64 <tcp_receive+0x2c4>)
 801a822:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801a824:	429a      	cmp	r2, r3
 801a826:	d125      	bne.n	801a874 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801a828:	4b8f      	ldr	r3, [pc, #572]	; (801aa68 <tcp_receive+0x2c8>)
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	89db      	ldrh	r3, [r3, #14]
 801a82e:	b29a      	uxth	r2, r3
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a836:	429a      	cmp	r2, r3
 801a838:	d91c      	bls.n	801a874 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801a83a:	4b8b      	ldr	r3, [pc, #556]	; (801aa68 <tcp_receive+0x2c8>)
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	89db      	ldrh	r3, [r3, #14]
 801a840:	b29a      	uxth	r2, r3
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a854:	429a      	cmp	r2, r3
 801a856:	d205      	bcs.n	801a864 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801a864:	4b7e      	ldr	r3, [pc, #504]	; (801aa60 <tcp_receive+0x2c0>)
 801a866:	681a      	ldr	r2, [r3, #0]
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801a86c:	4b7d      	ldr	r3, [pc, #500]	; (801aa64 <tcp_receive+0x2c4>)
 801a86e:	681a      	ldr	r2, [r3, #0]
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801a874:	4b7b      	ldr	r3, [pc, #492]	; (801aa64 <tcp_receive+0x2c4>)
 801a876:	681a      	ldr	r2, [r3, #0]
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a87c:	1ad3      	subs	r3, r2, r3
 801a87e:	2b00      	cmp	r3, #0
 801a880:	dc58      	bgt.n	801a934 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801a882:	4b7a      	ldr	r3, [pc, #488]	; (801aa6c <tcp_receive+0x2cc>)
 801a884:	881b      	ldrh	r3, [r3, #0]
 801a886:	2b00      	cmp	r3, #0
 801a888:	d14b      	bne.n	801a922 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a88e:	687a      	ldr	r2, [r7, #4]
 801a890:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801a894:	4413      	add	r3, r2
 801a896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a898:	429a      	cmp	r2, r3
 801a89a:	d142      	bne.n	801a922 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	db3d      	blt.n	801a922 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a8aa:	4b6e      	ldr	r3, [pc, #440]	; (801aa64 <tcp_receive+0x2c4>)
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	429a      	cmp	r2, r3
 801a8b0:	d137      	bne.n	801a922 <tcp_receive+0x182>
              found_dupack = 1;
 801a8b2:	2301      	movs	r3, #1
 801a8b4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a8bc:	2bff      	cmp	r3, #255	; 0xff
 801a8be:	d007      	beq.n	801a8d0 <tcp_receive+0x130>
                ++pcb->dupacks;
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a8c6:	3301      	adds	r3, #1
 801a8c8:	b2da      	uxtb	r2, r3
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a8d6:	2b03      	cmp	r3, #3
 801a8d8:	d91b      	bls.n	801a912 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a8e4:	4413      	add	r3, r2
 801a8e6:	b29a      	uxth	r2, r3
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a8ee:	429a      	cmp	r2, r3
 801a8f0:	d30a      	bcc.n	801a908 <tcp_receive+0x168>
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a8fc:	4413      	add	r3, r2
 801a8fe:	b29a      	uxth	r2, r3
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801a906:	e004      	b.n	801a912 <tcp_receive+0x172>
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a90e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a918:	2b02      	cmp	r3, #2
 801a91a:	d902      	bls.n	801a922 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801a91c:	6878      	ldr	r0, [r7, #4]
 801a91e:	f002 fb47 	bl	801cfb0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801a922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a924:	2b00      	cmp	r3, #0
 801a926:	f040 8160 	bne.w	801abea <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	2200      	movs	r2, #0
 801a92e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a932:	e15a      	b.n	801abea <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a934:	4b4b      	ldr	r3, [pc, #300]	; (801aa64 <tcp_receive+0x2c4>)
 801a936:	681a      	ldr	r2, [r3, #0]
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a93c:	1ad3      	subs	r3, r2, r3
 801a93e:	3b01      	subs	r3, #1
 801a940:	2b00      	cmp	r3, #0
 801a942:	f2c0 814d 	blt.w	801abe0 <tcp_receive+0x440>
 801a946:	4b47      	ldr	r3, [pc, #284]	; (801aa64 <tcp_receive+0x2c4>)
 801a948:	681a      	ldr	r2, [r3, #0]
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a94e:	1ad3      	subs	r3, r2, r3
 801a950:	2b00      	cmp	r3, #0
 801a952:	f300 8145 	bgt.w	801abe0 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	8b5b      	ldrh	r3, [r3, #26]
 801a95a:	f003 0304 	and.w	r3, r3, #4
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d010      	beq.n	801a984 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	8b5b      	ldrh	r3, [r3, #26]
 801a966:	f023 0304 	bic.w	r3, r3, #4
 801a96a:	b29a      	uxth	r2, r3
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	2200      	movs	r2, #0
 801a980:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	2200      	movs	r2, #0
 801a988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a992:	10db      	asrs	r3, r3, #3
 801a994:	b21b      	sxth	r3, r3
 801a996:	b29a      	uxth	r2, r3
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a99e:	b29b      	uxth	r3, r3
 801a9a0:	4413      	add	r3, r2
 801a9a2:	b29b      	uxth	r3, r3
 801a9a4:	b21a      	sxth	r2, r3
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801a9ac:	4b2d      	ldr	r3, [pc, #180]	; (801aa64 <tcp_receive+0x2c4>)
 801a9ae:	681b      	ldr	r3, [r3, #0]
 801a9b0:	b29a      	uxth	r2, r3
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a9b6:	b29b      	uxth	r3, r3
 801a9b8:	1ad3      	subs	r3, r2, r3
 801a9ba:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	2200      	movs	r2, #0
 801a9c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801a9c4:	4b27      	ldr	r3, [pc, #156]	; (801aa64 <tcp_receive+0x2c4>)
 801a9c6:	681a      	ldr	r2, [r3, #0]
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	7d1b      	ldrb	r3, [r3, #20]
 801a9d0:	2b03      	cmp	r3, #3
 801a9d2:	f240 8096 	bls.w	801ab02 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801a9e2:	429a      	cmp	r2, r3
 801a9e4:	d244      	bcs.n	801aa70 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	8b5b      	ldrh	r3, [r3, #26]
 801a9ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d001      	beq.n	801a9f6 <tcp_receive+0x256>
 801a9f2:	2301      	movs	r3, #1
 801a9f4:	e000      	b.n	801a9f8 <tcp_receive+0x258>
 801a9f6:	2302      	movs	r3, #2
 801a9f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801a9fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801aa00:	b29a      	uxth	r2, r3
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801aa06:	fb12 f303 	smulbb	r3, r2, r3
 801aa0a:	b29b      	uxth	r3, r3
 801aa0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801aa0e:	4293      	cmp	r3, r2
 801aa10:	bf28      	it	cs
 801aa12:	4613      	movcs	r3, r2
 801aa14:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801aa1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801aa1e:	4413      	add	r3, r2
 801aa20:	b29a      	uxth	r2, r3
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801aa28:	429a      	cmp	r2, r3
 801aa2a:	d309      	bcc.n	801aa40 <tcp_receive+0x2a0>
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801aa32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801aa34:	4413      	add	r3, r2
 801aa36:	b29a      	uxth	r2, r3
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801aa3e:	e060      	b.n	801ab02 <tcp_receive+0x362>
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aa46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801aa4a:	e05a      	b.n	801ab02 <tcp_receive+0x362>
 801aa4c:	08022e54 	.word	0x08022e54
 801aa50:	08023184 	.word	0x08023184
 801aa54:	08022ea0 	.word	0x08022ea0
 801aa58:	080231a0 	.word	0x080231a0
 801aa5c:	20009378 	.word	0x20009378
 801aa60:	2000936c 	.word	0x2000936c
 801aa64:	20009370 	.word	0x20009370
 801aa68:	2000935c 	.word	0x2000935c
 801aa6c:	20009376 	.word	0x20009376
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801aa76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801aa78:	4413      	add	r3, r2
 801aa7a:	b29a      	uxth	r2, r3
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801aa82:	429a      	cmp	r2, r3
 801aa84:	d309      	bcc.n	801aa9a <tcp_receive+0x2fa>
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801aa8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801aa8e:	4413      	add	r3, r2
 801aa90:	b29a      	uxth	r2, r3
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801aa98:	e004      	b.n	801aaa4 <tcp_receive+0x304>
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aaa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801aab0:	429a      	cmp	r2, r3
 801aab2:	d326      	bcc.n	801ab02 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801aac0:	1ad3      	subs	r3, r2, r3
 801aac2:	b29a      	uxth	r2, r3
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801aad4:	4413      	add	r3, r2
 801aad6:	b29a      	uxth	r2, r3
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801aade:	429a      	cmp	r2, r3
 801aae0:	d30a      	bcc.n	801aaf8 <tcp_receive+0x358>
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801aaec:	4413      	add	r3, r2
 801aaee:	b29a      	uxth	r2, r3
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801aaf6:	e004      	b.n	801ab02 <tcp_receive+0x362>
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aafe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab0a:	4a98      	ldr	r2, [pc, #608]	; (801ad6c <tcp_receive+0x5cc>)
 801ab0c:	6878      	ldr	r0, [r7, #4]
 801ab0e:	f7ff fdcb 	bl	801a6a8 <tcp_free_acked_segments>
 801ab12:	4602      	mov	r2, r0
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab20:	4a93      	ldr	r2, [pc, #588]	; (801ad70 <tcp_receive+0x5d0>)
 801ab22:	6878      	ldr	r0, [r7, #4]
 801ab24:	f7ff fdc0 	bl	801a6a8 <tcp_free_acked_segments>
 801ab28:	4602      	mov	r2, r0
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	d104      	bne.n	801ab40 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ab3c:	861a      	strh	r2, [r3, #48]	; 0x30
 801ab3e:	e002      	b.n	801ab46 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	2200      	movs	r2, #0
 801ab44:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	2200      	movs	r2, #0
 801ab4a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d103      	bne.n	801ab5c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	2200      	movs	r2, #0
 801ab58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801ab62:	4b84      	ldr	r3, [pc, #528]	; (801ad74 <tcp_receive+0x5d4>)
 801ab64:	881b      	ldrh	r3, [r3, #0]
 801ab66:	4413      	add	r3, r2
 801ab68:	b29a      	uxth	r2, r3
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	8b5b      	ldrh	r3, [r3, #26]
 801ab74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d035      	beq.n	801abe8 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d118      	bne.n	801abb6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	d00c      	beq.n	801aba6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab94:	68db      	ldr	r3, [r3, #12]
 801ab96:	685b      	ldr	r3, [r3, #4]
 801ab98:	4618      	mov	r0, r3
 801ab9a:	f7fa feac 	bl	80158f6 <lwip_htonl>
 801ab9e:	4603      	mov	r3, r0
 801aba0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	dc20      	bgt.n	801abe8 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	8b5b      	ldrh	r3, [r3, #26]
 801abaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801abae:	b29a      	uxth	r2, r3
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801abb4:	e018      	b.n	801abe8 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801abbe:	68db      	ldr	r3, [r3, #12]
 801abc0:	685b      	ldr	r3, [r3, #4]
 801abc2:	4618      	mov	r0, r3
 801abc4:	f7fa fe97 	bl	80158f6 <lwip_htonl>
 801abc8:	4603      	mov	r3, r0
 801abca:	1ae3      	subs	r3, r4, r3
 801abcc:	2b00      	cmp	r3, #0
 801abce:	dc0b      	bgt.n	801abe8 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	8b5b      	ldrh	r3, [r3, #26]
 801abd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801abd8:	b29a      	uxth	r2, r3
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801abde:	e003      	b.n	801abe8 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801abe0:	6878      	ldr	r0, [r7, #4]
 801abe2:	f002 fbdf 	bl	801d3a4 <tcp_send_empty_ack>
 801abe6:	e000      	b.n	801abea <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801abe8:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801abee:	2b00      	cmp	r3, #0
 801abf0:	d05b      	beq.n	801acaa <tcp_receive+0x50a>
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801abf6:	4b60      	ldr	r3, [pc, #384]	; (801ad78 <tcp_receive+0x5d8>)
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	1ad3      	subs	r3, r2, r3
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	da54      	bge.n	801acaa <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801ac00:	4b5e      	ldr	r3, [pc, #376]	; (801ad7c <tcp_receive+0x5dc>)
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	b29a      	uxth	r2, r3
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ac0a:	b29b      	uxth	r3, r3
 801ac0c:	1ad3      	subs	r3, r2, r3
 801ac0e:	b29b      	uxth	r3, r3
 801ac10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801ac14:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801ac1e:	10db      	asrs	r3, r3, #3
 801ac20:	b21b      	sxth	r3, r3
 801ac22:	b29b      	uxth	r3, r3
 801ac24:	1ad3      	subs	r3, r2, r3
 801ac26:	b29b      	uxth	r3, r3
 801ac28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801ac32:	b29a      	uxth	r2, r3
 801ac34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801ac38:	4413      	add	r3, r2
 801ac3a:	b29b      	uxth	r3, r3
 801ac3c:	b21a      	sxth	r2, r3
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801ac42:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	da05      	bge.n	801ac56 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801ac4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801ac4e:	425b      	negs	r3, r3
 801ac50:	b29b      	uxth	r3, r3
 801ac52:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801ac56:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801ac60:	109b      	asrs	r3, r3, #2
 801ac62:	b21b      	sxth	r3, r3
 801ac64:	b29b      	uxth	r3, r3
 801ac66:	1ad3      	subs	r3, r2, r3
 801ac68:	b29b      	uxth	r3, r3
 801ac6a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801ac74:	b29a      	uxth	r2, r3
 801ac76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801ac7a:	4413      	add	r3, r2
 801ac7c:	b29b      	uxth	r3, r3
 801ac7e:	b21a      	sxth	r2, r3
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801ac8a:	10db      	asrs	r3, r3, #3
 801ac8c:	b21b      	sxth	r3, r3
 801ac8e:	b29a      	uxth	r2, r3
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801ac96:	b29b      	uxth	r3, r3
 801ac98:	4413      	add	r3, r2
 801ac9a:	b29b      	uxth	r3, r3
 801ac9c:	b21a      	sxth	r2, r3
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	2200      	movs	r2, #0
 801aca8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801acaa:	4b35      	ldr	r3, [pc, #212]	; (801ad80 <tcp_receive+0x5e0>)
 801acac:	881b      	ldrh	r3, [r3, #0]
 801acae:	2b00      	cmp	r3, #0
 801acb0:	f000 84e1 	beq.w	801b676 <tcp_receive+0xed6>
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	7d1b      	ldrb	r3, [r3, #20]
 801acb8:	2b06      	cmp	r3, #6
 801acba:	f200 84dc 	bhi.w	801b676 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801acc2:	4b30      	ldr	r3, [pc, #192]	; (801ad84 <tcp_receive+0x5e4>)
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	1ad3      	subs	r3, r2, r3
 801acc8:	3b01      	subs	r3, #1
 801acca:	2b00      	cmp	r3, #0
 801accc:	f2c0 808e 	blt.w	801adec <tcp_receive+0x64c>
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801acd4:	4b2a      	ldr	r3, [pc, #168]	; (801ad80 <tcp_receive+0x5e0>)
 801acd6:	881b      	ldrh	r3, [r3, #0]
 801acd8:	4619      	mov	r1, r3
 801acda:	4b2a      	ldr	r3, [pc, #168]	; (801ad84 <tcp_receive+0x5e4>)
 801acdc:	681b      	ldr	r3, [r3, #0]
 801acde:	440b      	add	r3, r1
 801ace0:	1ad3      	subs	r3, r2, r3
 801ace2:	3301      	adds	r3, #1
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	f300 8081 	bgt.w	801adec <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801acea:	4b27      	ldr	r3, [pc, #156]	; (801ad88 <tcp_receive+0x5e8>)
 801acec:	685b      	ldr	r3, [r3, #4]
 801acee:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801acf4:	4b23      	ldr	r3, [pc, #140]	; (801ad84 <tcp_receive+0x5e4>)
 801acf6:	681b      	ldr	r3, [r3, #0]
 801acf8:	1ad3      	subs	r3, r2, r3
 801acfa:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801acfc:	4b22      	ldr	r3, [pc, #136]	; (801ad88 <tcp_receive+0x5e8>)
 801acfe:	685b      	ldr	r3, [r3, #4]
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	d106      	bne.n	801ad12 <tcp_receive+0x572>
 801ad04:	4b21      	ldr	r3, [pc, #132]	; (801ad8c <tcp_receive+0x5ec>)
 801ad06:	f240 5294 	movw	r2, #1428	; 0x594
 801ad0a:	4921      	ldr	r1, [pc, #132]	; (801ad90 <tcp_receive+0x5f0>)
 801ad0c:	4821      	ldr	r0, [pc, #132]	; (801ad94 <tcp_receive+0x5f4>)
 801ad0e:	f005 fc01 	bl	8020514 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801ad12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad14:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ad18:	4293      	cmp	r3, r2
 801ad1a:	d906      	bls.n	801ad2a <tcp_receive+0x58a>
 801ad1c:	4b1b      	ldr	r3, [pc, #108]	; (801ad8c <tcp_receive+0x5ec>)
 801ad1e:	f240 5295 	movw	r2, #1429	; 0x595
 801ad22:	491d      	ldr	r1, [pc, #116]	; (801ad98 <tcp_receive+0x5f8>)
 801ad24:	481b      	ldr	r0, [pc, #108]	; (801ad94 <tcp_receive+0x5f4>)
 801ad26:	f005 fbf5 	bl	8020514 <iprintf>
      off = (u16_t)off32;
 801ad2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad2c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801ad30:	4b15      	ldr	r3, [pc, #84]	; (801ad88 <tcp_receive+0x5e8>)
 801ad32:	685b      	ldr	r3, [r3, #4]
 801ad34:	891b      	ldrh	r3, [r3, #8]
 801ad36:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ad3a:	429a      	cmp	r2, r3
 801ad3c:	d906      	bls.n	801ad4c <tcp_receive+0x5ac>
 801ad3e:	4b13      	ldr	r3, [pc, #76]	; (801ad8c <tcp_receive+0x5ec>)
 801ad40:	f240 5297 	movw	r2, #1431	; 0x597
 801ad44:	4915      	ldr	r1, [pc, #84]	; (801ad9c <tcp_receive+0x5fc>)
 801ad46:	4813      	ldr	r0, [pc, #76]	; (801ad94 <tcp_receive+0x5f4>)
 801ad48:	f005 fbe4 	bl	8020514 <iprintf>
      inseg.len -= off;
 801ad4c:	4b0e      	ldr	r3, [pc, #56]	; (801ad88 <tcp_receive+0x5e8>)
 801ad4e:	891a      	ldrh	r2, [r3, #8]
 801ad50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ad54:	1ad3      	subs	r3, r2, r3
 801ad56:	b29a      	uxth	r2, r3
 801ad58:	4b0b      	ldr	r3, [pc, #44]	; (801ad88 <tcp_receive+0x5e8>)
 801ad5a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801ad5c:	4b0a      	ldr	r3, [pc, #40]	; (801ad88 <tcp_receive+0x5e8>)
 801ad5e:	685b      	ldr	r3, [r3, #4]
 801ad60:	891a      	ldrh	r2, [r3, #8]
 801ad62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ad66:	1ad3      	subs	r3, r2, r3
 801ad68:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801ad6a:	e029      	b.n	801adc0 <tcp_receive+0x620>
 801ad6c:	080231bc 	.word	0x080231bc
 801ad70:	080231c4 	.word	0x080231c4
 801ad74:	20009374 	.word	0x20009374
 801ad78:	20009370 	.word	0x20009370
 801ad7c:	2001fef4 	.word	0x2001fef4
 801ad80:	20009376 	.word	0x20009376
 801ad84:	2000936c 	.word	0x2000936c
 801ad88:	2000934c 	.word	0x2000934c
 801ad8c:	08022e54 	.word	0x08022e54
 801ad90:	080231cc 	.word	0x080231cc
 801ad94:	08022ea0 	.word	0x08022ea0
 801ad98:	080231dc 	.word	0x080231dc
 801ad9c:	080231ec 	.word	0x080231ec
        off -= p->len;
 801ada0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ada2:	895b      	ldrh	r3, [r3, #10]
 801ada4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ada8:	1ad3      	subs	r3, r2, r3
 801adaa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801adae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801adb0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801adb2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801adb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801adb6:	2200      	movs	r2, #0
 801adb8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801adba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801adbc:	681b      	ldr	r3, [r3, #0]
 801adbe:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801adc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801adc2:	895b      	ldrh	r3, [r3, #10]
 801adc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801adc8:	429a      	cmp	r2, r3
 801adca:	d8e9      	bhi.n	801ada0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801adcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801add0:	4619      	mov	r1, r3
 801add2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801add4:	f7fc f8d2 	bl	8016f7c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801addc:	4a91      	ldr	r2, [pc, #580]	; (801b024 <tcp_receive+0x884>)
 801adde:	6013      	str	r3, [r2, #0]
 801ade0:	4b91      	ldr	r3, [pc, #580]	; (801b028 <tcp_receive+0x888>)
 801ade2:	68db      	ldr	r3, [r3, #12]
 801ade4:	4a8f      	ldr	r2, [pc, #572]	; (801b024 <tcp_receive+0x884>)
 801ade6:	6812      	ldr	r2, [r2, #0]
 801ade8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801adea:	e00d      	b.n	801ae08 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801adec:	4b8d      	ldr	r3, [pc, #564]	; (801b024 <tcp_receive+0x884>)
 801adee:	681a      	ldr	r2, [r3, #0]
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801adf4:	1ad3      	subs	r3, r2, r3
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	da06      	bge.n	801ae08 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	8b5b      	ldrh	r3, [r3, #26]
 801adfe:	f043 0302 	orr.w	r3, r3, #2
 801ae02:	b29a      	uxth	r2, r3
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801ae08:	4b86      	ldr	r3, [pc, #536]	; (801b024 <tcp_receive+0x884>)
 801ae0a:	681a      	ldr	r2, [r3, #0]
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae10:	1ad3      	subs	r3, r2, r3
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	f2c0 842a 	blt.w	801b66c <tcp_receive+0xecc>
 801ae18:	4b82      	ldr	r3, [pc, #520]	; (801b024 <tcp_receive+0x884>)
 801ae1a:	681a      	ldr	r2, [r3, #0]
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae20:	6879      	ldr	r1, [r7, #4]
 801ae22:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801ae24:	440b      	add	r3, r1
 801ae26:	1ad3      	subs	r3, r2, r3
 801ae28:	3301      	adds	r3, #1
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	f300 841e 	bgt.w	801b66c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ae34:	4b7b      	ldr	r3, [pc, #492]	; (801b024 <tcp_receive+0x884>)
 801ae36:	681b      	ldr	r3, [r3, #0]
 801ae38:	429a      	cmp	r2, r3
 801ae3a:	f040 829a 	bne.w	801b372 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801ae3e:	4b7a      	ldr	r3, [pc, #488]	; (801b028 <tcp_receive+0x888>)
 801ae40:	891c      	ldrh	r4, [r3, #8]
 801ae42:	4b79      	ldr	r3, [pc, #484]	; (801b028 <tcp_receive+0x888>)
 801ae44:	68db      	ldr	r3, [r3, #12]
 801ae46:	899b      	ldrh	r3, [r3, #12]
 801ae48:	b29b      	uxth	r3, r3
 801ae4a:	4618      	mov	r0, r3
 801ae4c:	f7fa fd3e 	bl	80158cc <lwip_htons>
 801ae50:	4603      	mov	r3, r0
 801ae52:	b2db      	uxtb	r3, r3
 801ae54:	f003 0303 	and.w	r3, r3, #3
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d001      	beq.n	801ae60 <tcp_receive+0x6c0>
 801ae5c:	2301      	movs	r3, #1
 801ae5e:	e000      	b.n	801ae62 <tcp_receive+0x6c2>
 801ae60:	2300      	movs	r3, #0
 801ae62:	4423      	add	r3, r4
 801ae64:	b29a      	uxth	r2, r3
 801ae66:	4b71      	ldr	r3, [pc, #452]	; (801b02c <tcp_receive+0x88c>)
 801ae68:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801ae6e:	4b6f      	ldr	r3, [pc, #444]	; (801b02c <tcp_receive+0x88c>)
 801ae70:	881b      	ldrh	r3, [r3, #0]
 801ae72:	429a      	cmp	r2, r3
 801ae74:	d275      	bcs.n	801af62 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ae76:	4b6c      	ldr	r3, [pc, #432]	; (801b028 <tcp_receive+0x888>)
 801ae78:	68db      	ldr	r3, [r3, #12]
 801ae7a:	899b      	ldrh	r3, [r3, #12]
 801ae7c:	b29b      	uxth	r3, r3
 801ae7e:	4618      	mov	r0, r3
 801ae80:	f7fa fd24 	bl	80158cc <lwip_htons>
 801ae84:	4603      	mov	r3, r0
 801ae86:	b2db      	uxtb	r3, r3
 801ae88:	f003 0301 	and.w	r3, r3, #1
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d01f      	beq.n	801aed0 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801ae90:	4b65      	ldr	r3, [pc, #404]	; (801b028 <tcp_receive+0x888>)
 801ae92:	68db      	ldr	r3, [r3, #12]
 801ae94:	899b      	ldrh	r3, [r3, #12]
 801ae96:	b29b      	uxth	r3, r3
 801ae98:	b21b      	sxth	r3, r3
 801ae9a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801ae9e:	b21c      	sxth	r4, r3
 801aea0:	4b61      	ldr	r3, [pc, #388]	; (801b028 <tcp_receive+0x888>)
 801aea2:	68db      	ldr	r3, [r3, #12]
 801aea4:	899b      	ldrh	r3, [r3, #12]
 801aea6:	b29b      	uxth	r3, r3
 801aea8:	4618      	mov	r0, r3
 801aeaa:	f7fa fd0f 	bl	80158cc <lwip_htons>
 801aeae:	4603      	mov	r3, r0
 801aeb0:	b2db      	uxtb	r3, r3
 801aeb2:	b29b      	uxth	r3, r3
 801aeb4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801aeb8:	b29b      	uxth	r3, r3
 801aeba:	4618      	mov	r0, r3
 801aebc:	f7fa fd06 	bl	80158cc <lwip_htons>
 801aec0:	4603      	mov	r3, r0
 801aec2:	b21b      	sxth	r3, r3
 801aec4:	4323      	orrs	r3, r4
 801aec6:	b21a      	sxth	r2, r3
 801aec8:	4b57      	ldr	r3, [pc, #348]	; (801b028 <tcp_receive+0x888>)
 801aeca:	68db      	ldr	r3, [r3, #12]
 801aecc:	b292      	uxth	r2, r2
 801aece:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801aed4:	4b54      	ldr	r3, [pc, #336]	; (801b028 <tcp_receive+0x888>)
 801aed6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801aed8:	4b53      	ldr	r3, [pc, #332]	; (801b028 <tcp_receive+0x888>)
 801aeda:	68db      	ldr	r3, [r3, #12]
 801aedc:	899b      	ldrh	r3, [r3, #12]
 801aede:	b29b      	uxth	r3, r3
 801aee0:	4618      	mov	r0, r3
 801aee2:	f7fa fcf3 	bl	80158cc <lwip_htons>
 801aee6:	4603      	mov	r3, r0
 801aee8:	b2db      	uxtb	r3, r3
 801aeea:	f003 0302 	and.w	r3, r3, #2
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	d005      	beq.n	801aefe <tcp_receive+0x75e>
            inseg.len -= 1;
 801aef2:	4b4d      	ldr	r3, [pc, #308]	; (801b028 <tcp_receive+0x888>)
 801aef4:	891b      	ldrh	r3, [r3, #8]
 801aef6:	3b01      	subs	r3, #1
 801aef8:	b29a      	uxth	r2, r3
 801aefa:	4b4b      	ldr	r3, [pc, #300]	; (801b028 <tcp_receive+0x888>)
 801aefc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801aefe:	4b4a      	ldr	r3, [pc, #296]	; (801b028 <tcp_receive+0x888>)
 801af00:	685a      	ldr	r2, [r3, #4]
 801af02:	4b49      	ldr	r3, [pc, #292]	; (801b028 <tcp_receive+0x888>)
 801af04:	891b      	ldrh	r3, [r3, #8]
 801af06:	4619      	mov	r1, r3
 801af08:	4610      	mov	r0, r2
 801af0a:	f7fb ff37 	bl	8016d7c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801af0e:	4b46      	ldr	r3, [pc, #280]	; (801b028 <tcp_receive+0x888>)
 801af10:	891c      	ldrh	r4, [r3, #8]
 801af12:	4b45      	ldr	r3, [pc, #276]	; (801b028 <tcp_receive+0x888>)
 801af14:	68db      	ldr	r3, [r3, #12]
 801af16:	899b      	ldrh	r3, [r3, #12]
 801af18:	b29b      	uxth	r3, r3
 801af1a:	4618      	mov	r0, r3
 801af1c:	f7fa fcd6 	bl	80158cc <lwip_htons>
 801af20:	4603      	mov	r3, r0
 801af22:	b2db      	uxtb	r3, r3
 801af24:	f003 0303 	and.w	r3, r3, #3
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d001      	beq.n	801af30 <tcp_receive+0x790>
 801af2c:	2301      	movs	r3, #1
 801af2e:	e000      	b.n	801af32 <tcp_receive+0x792>
 801af30:	2300      	movs	r3, #0
 801af32:	4423      	add	r3, r4
 801af34:	b29a      	uxth	r2, r3
 801af36:	4b3d      	ldr	r3, [pc, #244]	; (801b02c <tcp_receive+0x88c>)
 801af38:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801af3a:	4b3c      	ldr	r3, [pc, #240]	; (801b02c <tcp_receive+0x88c>)
 801af3c:	881b      	ldrh	r3, [r3, #0]
 801af3e:	461a      	mov	r2, r3
 801af40:	4b38      	ldr	r3, [pc, #224]	; (801b024 <tcp_receive+0x884>)
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	441a      	add	r2, r3
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af4a:	6879      	ldr	r1, [r7, #4]
 801af4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801af4e:	440b      	add	r3, r1
 801af50:	429a      	cmp	r2, r3
 801af52:	d006      	beq.n	801af62 <tcp_receive+0x7c2>
 801af54:	4b36      	ldr	r3, [pc, #216]	; (801b030 <tcp_receive+0x890>)
 801af56:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801af5a:	4936      	ldr	r1, [pc, #216]	; (801b034 <tcp_receive+0x894>)
 801af5c:	4836      	ldr	r0, [pc, #216]	; (801b038 <tcp_receive+0x898>)
 801af5e:	f005 fad9 	bl	8020514 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801af66:	2b00      	cmp	r3, #0
 801af68:	f000 80e7 	beq.w	801b13a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801af6c:	4b2e      	ldr	r3, [pc, #184]	; (801b028 <tcp_receive+0x888>)
 801af6e:	68db      	ldr	r3, [r3, #12]
 801af70:	899b      	ldrh	r3, [r3, #12]
 801af72:	b29b      	uxth	r3, r3
 801af74:	4618      	mov	r0, r3
 801af76:	f7fa fca9 	bl	80158cc <lwip_htons>
 801af7a:	4603      	mov	r3, r0
 801af7c:	b2db      	uxtb	r3, r3
 801af7e:	f003 0301 	and.w	r3, r3, #1
 801af82:	2b00      	cmp	r3, #0
 801af84:	d010      	beq.n	801afa8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801af86:	e00a      	b.n	801af9e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801af8c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801af92:	681a      	ldr	r2, [r3, #0]
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801af98:	68f8      	ldr	r0, [r7, #12]
 801af9a:	f7fd fca3 	bl	80188e4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d1f0      	bne.n	801af88 <tcp_receive+0x7e8>
 801afa6:	e0c8      	b.n	801b13a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801afac:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801afae:	e052      	b.n	801b056 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801afb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801afb2:	68db      	ldr	r3, [r3, #12]
 801afb4:	899b      	ldrh	r3, [r3, #12]
 801afb6:	b29b      	uxth	r3, r3
 801afb8:	4618      	mov	r0, r3
 801afba:	f7fa fc87 	bl	80158cc <lwip_htons>
 801afbe:	4603      	mov	r3, r0
 801afc0:	b2db      	uxtb	r3, r3
 801afc2:	f003 0301 	and.w	r3, r3, #1
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d03d      	beq.n	801b046 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801afca:	4b17      	ldr	r3, [pc, #92]	; (801b028 <tcp_receive+0x888>)
 801afcc:	68db      	ldr	r3, [r3, #12]
 801afce:	899b      	ldrh	r3, [r3, #12]
 801afd0:	b29b      	uxth	r3, r3
 801afd2:	4618      	mov	r0, r3
 801afd4:	f7fa fc7a 	bl	80158cc <lwip_htons>
 801afd8:	4603      	mov	r3, r0
 801afda:	b2db      	uxtb	r3, r3
 801afdc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	d130      	bne.n	801b046 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801afe4:	4b10      	ldr	r3, [pc, #64]	; (801b028 <tcp_receive+0x888>)
 801afe6:	68db      	ldr	r3, [r3, #12]
 801afe8:	899b      	ldrh	r3, [r3, #12]
 801afea:	b29c      	uxth	r4, r3
 801afec:	2001      	movs	r0, #1
 801afee:	f7fa fc6d 	bl	80158cc <lwip_htons>
 801aff2:	4603      	mov	r3, r0
 801aff4:	461a      	mov	r2, r3
 801aff6:	4b0c      	ldr	r3, [pc, #48]	; (801b028 <tcp_receive+0x888>)
 801aff8:	68db      	ldr	r3, [r3, #12]
 801affa:	4322      	orrs	r2, r4
 801affc:	b292      	uxth	r2, r2
 801affe:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801b000:	4b09      	ldr	r3, [pc, #36]	; (801b028 <tcp_receive+0x888>)
 801b002:	891c      	ldrh	r4, [r3, #8]
 801b004:	4b08      	ldr	r3, [pc, #32]	; (801b028 <tcp_receive+0x888>)
 801b006:	68db      	ldr	r3, [r3, #12]
 801b008:	899b      	ldrh	r3, [r3, #12]
 801b00a:	b29b      	uxth	r3, r3
 801b00c:	4618      	mov	r0, r3
 801b00e:	f7fa fc5d 	bl	80158cc <lwip_htons>
 801b012:	4603      	mov	r3, r0
 801b014:	b2db      	uxtb	r3, r3
 801b016:	f003 0303 	and.w	r3, r3, #3
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d00e      	beq.n	801b03c <tcp_receive+0x89c>
 801b01e:	2301      	movs	r3, #1
 801b020:	e00d      	b.n	801b03e <tcp_receive+0x89e>
 801b022:	bf00      	nop
 801b024:	2000936c 	.word	0x2000936c
 801b028:	2000934c 	.word	0x2000934c
 801b02c:	20009376 	.word	0x20009376
 801b030:	08022e54 	.word	0x08022e54
 801b034:	080231fc 	.word	0x080231fc
 801b038:	08022ea0 	.word	0x08022ea0
 801b03c:	2300      	movs	r3, #0
 801b03e:	4423      	add	r3, r4
 801b040:	b29a      	uxth	r2, r3
 801b042:	4b98      	ldr	r3, [pc, #608]	; (801b2a4 <tcp_receive+0xb04>)
 801b044:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801b046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b048:	613b      	str	r3, [r7, #16]
              next = next->next;
 801b04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801b050:	6938      	ldr	r0, [r7, #16]
 801b052:	f7fd fc47 	bl	80188e4 <tcp_seg_free>
            while (next &&
 801b056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d00e      	beq.n	801b07a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801b05c:	4b91      	ldr	r3, [pc, #580]	; (801b2a4 <tcp_receive+0xb04>)
 801b05e:	881b      	ldrh	r3, [r3, #0]
 801b060:	461a      	mov	r2, r3
 801b062:	4b91      	ldr	r3, [pc, #580]	; (801b2a8 <tcp_receive+0xb08>)
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	441a      	add	r2, r3
 801b068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b06a:	68db      	ldr	r3, [r3, #12]
 801b06c:	685b      	ldr	r3, [r3, #4]
 801b06e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801b070:	8909      	ldrh	r1, [r1, #8]
 801b072:	440b      	add	r3, r1
 801b074:	1ad3      	subs	r3, r2, r3
            while (next &&
 801b076:	2b00      	cmp	r3, #0
 801b078:	da9a      	bge.n	801afb0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801b07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d059      	beq.n	801b134 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801b080:	4b88      	ldr	r3, [pc, #544]	; (801b2a4 <tcp_receive+0xb04>)
 801b082:	881b      	ldrh	r3, [r3, #0]
 801b084:	461a      	mov	r2, r3
 801b086:	4b88      	ldr	r3, [pc, #544]	; (801b2a8 <tcp_receive+0xb08>)
 801b088:	681b      	ldr	r3, [r3, #0]
 801b08a:	441a      	add	r2, r3
 801b08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b08e:	68db      	ldr	r3, [r3, #12]
 801b090:	685b      	ldr	r3, [r3, #4]
 801b092:	1ad3      	subs	r3, r2, r3
            if (next &&
 801b094:	2b00      	cmp	r3, #0
 801b096:	dd4d      	ble.n	801b134 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801b098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b09a:	68db      	ldr	r3, [r3, #12]
 801b09c:	685b      	ldr	r3, [r3, #4]
 801b09e:	b29a      	uxth	r2, r3
 801b0a0:	4b81      	ldr	r3, [pc, #516]	; (801b2a8 <tcp_receive+0xb08>)
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	b29b      	uxth	r3, r3
 801b0a6:	1ad3      	subs	r3, r2, r3
 801b0a8:	b29a      	uxth	r2, r3
 801b0aa:	4b80      	ldr	r3, [pc, #512]	; (801b2ac <tcp_receive+0xb0c>)
 801b0ac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801b0ae:	4b7f      	ldr	r3, [pc, #508]	; (801b2ac <tcp_receive+0xb0c>)
 801b0b0:	68db      	ldr	r3, [r3, #12]
 801b0b2:	899b      	ldrh	r3, [r3, #12]
 801b0b4:	b29b      	uxth	r3, r3
 801b0b6:	4618      	mov	r0, r3
 801b0b8:	f7fa fc08 	bl	80158cc <lwip_htons>
 801b0bc:	4603      	mov	r3, r0
 801b0be:	b2db      	uxtb	r3, r3
 801b0c0:	f003 0302 	and.w	r3, r3, #2
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d005      	beq.n	801b0d4 <tcp_receive+0x934>
                inseg.len -= 1;
 801b0c8:	4b78      	ldr	r3, [pc, #480]	; (801b2ac <tcp_receive+0xb0c>)
 801b0ca:	891b      	ldrh	r3, [r3, #8]
 801b0cc:	3b01      	subs	r3, #1
 801b0ce:	b29a      	uxth	r2, r3
 801b0d0:	4b76      	ldr	r3, [pc, #472]	; (801b2ac <tcp_receive+0xb0c>)
 801b0d2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801b0d4:	4b75      	ldr	r3, [pc, #468]	; (801b2ac <tcp_receive+0xb0c>)
 801b0d6:	685a      	ldr	r2, [r3, #4]
 801b0d8:	4b74      	ldr	r3, [pc, #464]	; (801b2ac <tcp_receive+0xb0c>)
 801b0da:	891b      	ldrh	r3, [r3, #8]
 801b0dc:	4619      	mov	r1, r3
 801b0de:	4610      	mov	r0, r2
 801b0e0:	f7fb fe4c 	bl	8016d7c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801b0e4:	4b71      	ldr	r3, [pc, #452]	; (801b2ac <tcp_receive+0xb0c>)
 801b0e6:	891c      	ldrh	r4, [r3, #8]
 801b0e8:	4b70      	ldr	r3, [pc, #448]	; (801b2ac <tcp_receive+0xb0c>)
 801b0ea:	68db      	ldr	r3, [r3, #12]
 801b0ec:	899b      	ldrh	r3, [r3, #12]
 801b0ee:	b29b      	uxth	r3, r3
 801b0f0:	4618      	mov	r0, r3
 801b0f2:	f7fa fbeb 	bl	80158cc <lwip_htons>
 801b0f6:	4603      	mov	r3, r0
 801b0f8:	b2db      	uxtb	r3, r3
 801b0fa:	f003 0303 	and.w	r3, r3, #3
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d001      	beq.n	801b106 <tcp_receive+0x966>
 801b102:	2301      	movs	r3, #1
 801b104:	e000      	b.n	801b108 <tcp_receive+0x968>
 801b106:	2300      	movs	r3, #0
 801b108:	4423      	add	r3, r4
 801b10a:	b29a      	uxth	r2, r3
 801b10c:	4b65      	ldr	r3, [pc, #404]	; (801b2a4 <tcp_receive+0xb04>)
 801b10e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801b110:	4b64      	ldr	r3, [pc, #400]	; (801b2a4 <tcp_receive+0xb04>)
 801b112:	881b      	ldrh	r3, [r3, #0]
 801b114:	461a      	mov	r2, r3
 801b116:	4b64      	ldr	r3, [pc, #400]	; (801b2a8 <tcp_receive+0xb08>)
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	441a      	add	r2, r3
 801b11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b11e:	68db      	ldr	r3, [r3, #12]
 801b120:	685b      	ldr	r3, [r3, #4]
 801b122:	429a      	cmp	r2, r3
 801b124:	d006      	beq.n	801b134 <tcp_receive+0x994>
 801b126:	4b62      	ldr	r3, [pc, #392]	; (801b2b0 <tcp_receive+0xb10>)
 801b128:	f240 52fd 	movw	r2, #1533	; 0x5fd
 801b12c:	4961      	ldr	r1, [pc, #388]	; (801b2b4 <tcp_receive+0xb14>)
 801b12e:	4862      	ldr	r0, [pc, #392]	; (801b2b8 <tcp_receive+0xb18>)
 801b130:	f005 f9f0 	bl	8020514 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b138:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801b13a:	4b5a      	ldr	r3, [pc, #360]	; (801b2a4 <tcp_receive+0xb04>)
 801b13c:	881b      	ldrh	r3, [r3, #0]
 801b13e:	461a      	mov	r2, r3
 801b140:	4b59      	ldr	r3, [pc, #356]	; (801b2a8 <tcp_receive+0xb08>)
 801b142:	681b      	ldr	r3, [r3, #0]
 801b144:	441a      	add	r2, r3
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b14e:	4b55      	ldr	r3, [pc, #340]	; (801b2a4 <tcp_receive+0xb04>)
 801b150:	881b      	ldrh	r3, [r3, #0]
 801b152:	429a      	cmp	r2, r3
 801b154:	d206      	bcs.n	801b164 <tcp_receive+0x9c4>
 801b156:	4b56      	ldr	r3, [pc, #344]	; (801b2b0 <tcp_receive+0xb10>)
 801b158:	f240 6207 	movw	r2, #1543	; 0x607
 801b15c:	4957      	ldr	r1, [pc, #348]	; (801b2bc <tcp_receive+0xb1c>)
 801b15e:	4856      	ldr	r0, [pc, #344]	; (801b2b8 <tcp_receive+0xb18>)
 801b160:	f005 f9d8 	bl	8020514 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b168:	4b4e      	ldr	r3, [pc, #312]	; (801b2a4 <tcp_receive+0xb04>)
 801b16a:	881b      	ldrh	r3, [r3, #0]
 801b16c:	1ad3      	subs	r3, r2, r3
 801b16e:	b29a      	uxth	r2, r3
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801b174:	6878      	ldr	r0, [r7, #4]
 801b176:	f7fc fe93 	bl	8017ea0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801b17a:	4b4c      	ldr	r3, [pc, #304]	; (801b2ac <tcp_receive+0xb0c>)
 801b17c:	685b      	ldr	r3, [r3, #4]
 801b17e:	891b      	ldrh	r3, [r3, #8]
 801b180:	2b00      	cmp	r3, #0
 801b182:	d006      	beq.n	801b192 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801b184:	4b49      	ldr	r3, [pc, #292]	; (801b2ac <tcp_receive+0xb0c>)
 801b186:	685b      	ldr	r3, [r3, #4]
 801b188:	4a4d      	ldr	r2, [pc, #308]	; (801b2c0 <tcp_receive+0xb20>)
 801b18a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801b18c:	4b47      	ldr	r3, [pc, #284]	; (801b2ac <tcp_receive+0xb0c>)
 801b18e:	2200      	movs	r2, #0
 801b190:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801b192:	4b46      	ldr	r3, [pc, #280]	; (801b2ac <tcp_receive+0xb0c>)
 801b194:	68db      	ldr	r3, [r3, #12]
 801b196:	899b      	ldrh	r3, [r3, #12]
 801b198:	b29b      	uxth	r3, r3
 801b19a:	4618      	mov	r0, r3
 801b19c:	f7fa fb96 	bl	80158cc <lwip_htons>
 801b1a0:	4603      	mov	r3, r0
 801b1a2:	b2db      	uxtb	r3, r3
 801b1a4:	f003 0301 	and.w	r3, r3, #1
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	f000 80b8 	beq.w	801b31e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801b1ae:	4b45      	ldr	r3, [pc, #276]	; (801b2c4 <tcp_receive+0xb24>)
 801b1b0:	781b      	ldrb	r3, [r3, #0]
 801b1b2:	f043 0320 	orr.w	r3, r3, #32
 801b1b6:	b2da      	uxtb	r2, r3
 801b1b8:	4b42      	ldr	r3, [pc, #264]	; (801b2c4 <tcp_receive+0xb24>)
 801b1ba:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801b1bc:	e0af      	b.n	801b31e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801b1be:	687b      	ldr	r3, [r7, #4]
 801b1c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b1c2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b1c8:	68db      	ldr	r3, [r3, #12]
 801b1ca:	685b      	ldr	r3, [r3, #4]
 801b1cc:	4a36      	ldr	r2, [pc, #216]	; (801b2a8 <tcp_receive+0xb08>)
 801b1ce:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801b1d0:	68bb      	ldr	r3, [r7, #8]
 801b1d2:	891b      	ldrh	r3, [r3, #8]
 801b1d4:	461c      	mov	r4, r3
 801b1d6:	68bb      	ldr	r3, [r7, #8]
 801b1d8:	68db      	ldr	r3, [r3, #12]
 801b1da:	899b      	ldrh	r3, [r3, #12]
 801b1dc:	b29b      	uxth	r3, r3
 801b1de:	4618      	mov	r0, r3
 801b1e0:	f7fa fb74 	bl	80158cc <lwip_htons>
 801b1e4:	4603      	mov	r3, r0
 801b1e6:	b2db      	uxtb	r3, r3
 801b1e8:	f003 0303 	and.w	r3, r3, #3
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d001      	beq.n	801b1f4 <tcp_receive+0xa54>
 801b1f0:	2301      	movs	r3, #1
 801b1f2:	e000      	b.n	801b1f6 <tcp_receive+0xa56>
 801b1f4:	2300      	movs	r3, #0
 801b1f6:	191a      	adds	r2, r3, r4
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b1fc:	441a      	add	r2, r3
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b206:	461c      	mov	r4, r3
 801b208:	68bb      	ldr	r3, [r7, #8]
 801b20a:	891b      	ldrh	r3, [r3, #8]
 801b20c:	461d      	mov	r5, r3
 801b20e:	68bb      	ldr	r3, [r7, #8]
 801b210:	68db      	ldr	r3, [r3, #12]
 801b212:	899b      	ldrh	r3, [r3, #12]
 801b214:	b29b      	uxth	r3, r3
 801b216:	4618      	mov	r0, r3
 801b218:	f7fa fb58 	bl	80158cc <lwip_htons>
 801b21c:	4603      	mov	r3, r0
 801b21e:	b2db      	uxtb	r3, r3
 801b220:	f003 0303 	and.w	r3, r3, #3
 801b224:	2b00      	cmp	r3, #0
 801b226:	d001      	beq.n	801b22c <tcp_receive+0xa8c>
 801b228:	2301      	movs	r3, #1
 801b22a:	e000      	b.n	801b22e <tcp_receive+0xa8e>
 801b22c:	2300      	movs	r3, #0
 801b22e:	442b      	add	r3, r5
 801b230:	429c      	cmp	r4, r3
 801b232:	d206      	bcs.n	801b242 <tcp_receive+0xaa2>
 801b234:	4b1e      	ldr	r3, [pc, #120]	; (801b2b0 <tcp_receive+0xb10>)
 801b236:	f240 622c 	movw	r2, #1580	; 0x62c
 801b23a:	4923      	ldr	r1, [pc, #140]	; (801b2c8 <tcp_receive+0xb28>)
 801b23c:	481e      	ldr	r0, [pc, #120]	; (801b2b8 <tcp_receive+0xb18>)
 801b23e:	f005 f969 	bl	8020514 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801b242:	68bb      	ldr	r3, [r7, #8]
 801b244:	891b      	ldrh	r3, [r3, #8]
 801b246:	461c      	mov	r4, r3
 801b248:	68bb      	ldr	r3, [r7, #8]
 801b24a:	68db      	ldr	r3, [r3, #12]
 801b24c:	899b      	ldrh	r3, [r3, #12]
 801b24e:	b29b      	uxth	r3, r3
 801b250:	4618      	mov	r0, r3
 801b252:	f7fa fb3b 	bl	80158cc <lwip_htons>
 801b256:	4603      	mov	r3, r0
 801b258:	b2db      	uxtb	r3, r3
 801b25a:	f003 0303 	and.w	r3, r3, #3
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d001      	beq.n	801b266 <tcp_receive+0xac6>
 801b262:	2301      	movs	r3, #1
 801b264:	e000      	b.n	801b268 <tcp_receive+0xac8>
 801b266:	2300      	movs	r3, #0
 801b268:	1919      	adds	r1, r3, r4
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b26e:	b28b      	uxth	r3, r1
 801b270:	1ad3      	subs	r3, r2, r3
 801b272:	b29a      	uxth	r2, r3
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801b278:	6878      	ldr	r0, [r7, #4]
 801b27a:	f7fc fe11 	bl	8017ea0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801b27e:	68bb      	ldr	r3, [r7, #8]
 801b280:	685b      	ldr	r3, [r3, #4]
 801b282:	891b      	ldrh	r3, [r3, #8]
 801b284:	2b00      	cmp	r3, #0
 801b286:	d028      	beq.n	801b2da <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801b288:	4b0d      	ldr	r3, [pc, #52]	; (801b2c0 <tcp_receive+0xb20>)
 801b28a:	681b      	ldr	r3, [r3, #0]
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d01d      	beq.n	801b2cc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801b290:	4b0b      	ldr	r3, [pc, #44]	; (801b2c0 <tcp_receive+0xb20>)
 801b292:	681a      	ldr	r2, [r3, #0]
 801b294:	68bb      	ldr	r3, [r7, #8]
 801b296:	685b      	ldr	r3, [r3, #4]
 801b298:	4619      	mov	r1, r3
 801b29a:	4610      	mov	r0, r2
 801b29c:	f7fb ffc2 	bl	8017224 <pbuf_cat>
 801b2a0:	e018      	b.n	801b2d4 <tcp_receive+0xb34>
 801b2a2:	bf00      	nop
 801b2a4:	20009376 	.word	0x20009376
 801b2a8:	2000936c 	.word	0x2000936c
 801b2ac:	2000934c 	.word	0x2000934c
 801b2b0:	08022e54 	.word	0x08022e54
 801b2b4:	08023234 	.word	0x08023234
 801b2b8:	08022ea0 	.word	0x08022ea0
 801b2bc:	08023270 	.word	0x08023270
 801b2c0:	2000937c 	.word	0x2000937c
 801b2c4:	20009379 	.word	0x20009379
 801b2c8:	08023290 	.word	0x08023290
            } else {
              recv_data = cseg->p;
 801b2cc:	68bb      	ldr	r3, [r7, #8]
 801b2ce:	685b      	ldr	r3, [r3, #4]
 801b2d0:	4a70      	ldr	r2, [pc, #448]	; (801b494 <tcp_receive+0xcf4>)
 801b2d2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801b2d4:	68bb      	ldr	r3, [r7, #8]
 801b2d6:	2200      	movs	r2, #0
 801b2d8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801b2da:	68bb      	ldr	r3, [r7, #8]
 801b2dc:	68db      	ldr	r3, [r3, #12]
 801b2de:	899b      	ldrh	r3, [r3, #12]
 801b2e0:	b29b      	uxth	r3, r3
 801b2e2:	4618      	mov	r0, r3
 801b2e4:	f7fa faf2 	bl	80158cc <lwip_htons>
 801b2e8:	4603      	mov	r3, r0
 801b2ea:	b2db      	uxtb	r3, r3
 801b2ec:	f003 0301 	and.w	r3, r3, #1
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d00d      	beq.n	801b310 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801b2f4:	4b68      	ldr	r3, [pc, #416]	; (801b498 <tcp_receive+0xcf8>)
 801b2f6:	781b      	ldrb	r3, [r3, #0]
 801b2f8:	f043 0320 	orr.w	r3, r3, #32
 801b2fc:	b2da      	uxtb	r2, r3
 801b2fe:	4b66      	ldr	r3, [pc, #408]	; (801b498 <tcp_receive+0xcf8>)
 801b300:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	7d1b      	ldrb	r3, [r3, #20]
 801b306:	2b04      	cmp	r3, #4
 801b308:	d102      	bne.n	801b310 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	2207      	movs	r2, #7
 801b30e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801b310:	68bb      	ldr	r3, [r7, #8]
 801b312:	681a      	ldr	r2, [r3, #0]
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801b318:	68b8      	ldr	r0, [r7, #8]
 801b31a:	f7fd fae3 	bl	80188e4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b322:	2b00      	cmp	r3, #0
 801b324:	d008      	beq.n	801b338 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b32a:	68db      	ldr	r3, [r3, #12]
 801b32c:	685a      	ldr	r2, [r3, #4]
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801b332:	429a      	cmp	r2, r3
 801b334:	f43f af43 	beq.w	801b1be <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	8b5b      	ldrh	r3, [r3, #26]
 801b33c:	f003 0301 	and.w	r3, r3, #1
 801b340:	2b00      	cmp	r3, #0
 801b342:	d00e      	beq.n	801b362 <tcp_receive+0xbc2>
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	8b5b      	ldrh	r3, [r3, #26]
 801b348:	f023 0301 	bic.w	r3, r3, #1
 801b34c:	b29a      	uxth	r2, r3
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	835a      	strh	r2, [r3, #26]
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	8b5b      	ldrh	r3, [r3, #26]
 801b356:	f043 0302 	orr.w	r3, r3, #2
 801b35a:	b29a      	uxth	r2, r3
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801b360:	e188      	b.n	801b674 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	8b5b      	ldrh	r3, [r3, #26]
 801b366:	f043 0301 	orr.w	r3, r3, #1
 801b36a:	b29a      	uxth	r2, r3
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801b370:	e180      	b.n	801b674 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b376:	2b00      	cmp	r3, #0
 801b378:	d106      	bne.n	801b388 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801b37a:	4848      	ldr	r0, [pc, #288]	; (801b49c <tcp_receive+0xcfc>)
 801b37c:	f7fd fae8 	bl	8018950 <tcp_seg_copy>
 801b380:	4602      	mov	r2, r0
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	675a      	str	r2, [r3, #116]	; 0x74
 801b386:	e16d      	b.n	801b664 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801b388:	2300      	movs	r3, #0
 801b38a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b390:	63bb      	str	r3, [r7, #56]	; 0x38
 801b392:	e157      	b.n	801b644 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801b394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b396:	68db      	ldr	r3, [r3, #12]
 801b398:	685a      	ldr	r2, [r3, #4]
 801b39a:	4b41      	ldr	r3, [pc, #260]	; (801b4a0 <tcp_receive+0xd00>)
 801b39c:	681b      	ldr	r3, [r3, #0]
 801b39e:	429a      	cmp	r2, r3
 801b3a0:	d11d      	bne.n	801b3de <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801b3a2:	4b3e      	ldr	r3, [pc, #248]	; (801b49c <tcp_receive+0xcfc>)
 801b3a4:	891a      	ldrh	r2, [r3, #8]
 801b3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b3a8:	891b      	ldrh	r3, [r3, #8]
 801b3aa:	429a      	cmp	r2, r3
 801b3ac:	f240 814f 	bls.w	801b64e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801b3b0:	483a      	ldr	r0, [pc, #232]	; (801b49c <tcp_receive+0xcfc>)
 801b3b2:	f7fd facd 	bl	8018950 <tcp_seg_copy>
 801b3b6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801b3b8:	697b      	ldr	r3, [r7, #20]
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	f000 8149 	beq.w	801b652 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801b3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d003      	beq.n	801b3ce <tcp_receive+0xc2e>
                    prev->next = cseg;
 801b3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3c8:	697a      	ldr	r2, [r7, #20]
 801b3ca:	601a      	str	r2, [r3, #0]
 801b3cc:	e002      	b.n	801b3d4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	697a      	ldr	r2, [r7, #20]
 801b3d2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801b3d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b3d6:	6978      	ldr	r0, [r7, #20]
 801b3d8:	f7ff f8de 	bl	801a598 <tcp_oos_insert_segment>
                }
                break;
 801b3dc:	e139      	b.n	801b652 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801b3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	d117      	bne.n	801b414 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801b3e4:	4b2e      	ldr	r3, [pc, #184]	; (801b4a0 <tcp_receive+0xd00>)
 801b3e6:	681a      	ldr	r2, [r3, #0]
 801b3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b3ea:	68db      	ldr	r3, [r3, #12]
 801b3ec:	685b      	ldr	r3, [r3, #4]
 801b3ee:	1ad3      	subs	r3, r2, r3
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	da57      	bge.n	801b4a4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801b3f4:	4829      	ldr	r0, [pc, #164]	; (801b49c <tcp_receive+0xcfc>)
 801b3f6:	f7fd faab 	bl	8018950 <tcp_seg_copy>
 801b3fa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801b3fc:	69bb      	ldr	r3, [r7, #24]
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	f000 8129 	beq.w	801b656 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	69ba      	ldr	r2, [r7, #24]
 801b408:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801b40a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b40c:	69b8      	ldr	r0, [r7, #24]
 801b40e:	f7ff f8c3 	bl	801a598 <tcp_oos_insert_segment>
                  }
                  break;
 801b412:	e120      	b.n	801b656 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801b414:	4b22      	ldr	r3, [pc, #136]	; (801b4a0 <tcp_receive+0xd00>)
 801b416:	681a      	ldr	r2, [r3, #0]
 801b418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b41a:	68db      	ldr	r3, [r3, #12]
 801b41c:	685b      	ldr	r3, [r3, #4]
 801b41e:	1ad3      	subs	r3, r2, r3
 801b420:	3b01      	subs	r3, #1
 801b422:	2b00      	cmp	r3, #0
 801b424:	db3e      	blt.n	801b4a4 <tcp_receive+0xd04>
 801b426:	4b1e      	ldr	r3, [pc, #120]	; (801b4a0 <tcp_receive+0xd00>)
 801b428:	681a      	ldr	r2, [r3, #0]
 801b42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b42c:	68db      	ldr	r3, [r3, #12]
 801b42e:	685b      	ldr	r3, [r3, #4]
 801b430:	1ad3      	subs	r3, r2, r3
 801b432:	3301      	adds	r3, #1
 801b434:	2b00      	cmp	r3, #0
 801b436:	dc35      	bgt.n	801b4a4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801b438:	4818      	ldr	r0, [pc, #96]	; (801b49c <tcp_receive+0xcfc>)
 801b43a:	f7fd fa89 	bl	8018950 <tcp_seg_copy>
 801b43e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801b440:	69fb      	ldr	r3, [r7, #28]
 801b442:	2b00      	cmp	r3, #0
 801b444:	f000 8109 	beq.w	801b65a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801b448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b44a:	68db      	ldr	r3, [r3, #12]
 801b44c:	685b      	ldr	r3, [r3, #4]
 801b44e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b450:	8912      	ldrh	r2, [r2, #8]
 801b452:	441a      	add	r2, r3
 801b454:	4b12      	ldr	r3, [pc, #72]	; (801b4a0 <tcp_receive+0xd00>)
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	1ad3      	subs	r3, r2, r3
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	dd12      	ble.n	801b484 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801b45e:	4b10      	ldr	r3, [pc, #64]	; (801b4a0 <tcp_receive+0xd00>)
 801b460:	681b      	ldr	r3, [r3, #0]
 801b462:	b29a      	uxth	r2, r3
 801b464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b466:	68db      	ldr	r3, [r3, #12]
 801b468:	685b      	ldr	r3, [r3, #4]
 801b46a:	b29b      	uxth	r3, r3
 801b46c:	1ad3      	subs	r3, r2, r3
 801b46e:	b29a      	uxth	r2, r3
 801b470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b472:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801b474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b476:	685a      	ldr	r2, [r3, #4]
 801b478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b47a:	891b      	ldrh	r3, [r3, #8]
 801b47c:	4619      	mov	r1, r3
 801b47e:	4610      	mov	r0, r2
 801b480:	f7fb fc7c 	bl	8016d7c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801b484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b486:	69fa      	ldr	r2, [r7, #28]
 801b488:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801b48a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b48c:	69f8      	ldr	r0, [r7, #28]
 801b48e:	f7ff f883 	bl	801a598 <tcp_oos_insert_segment>
                  }
                  break;
 801b492:	e0e2      	b.n	801b65a <tcp_receive+0xeba>
 801b494:	2000937c 	.word	0x2000937c
 801b498:	20009379 	.word	0x20009379
 801b49c:	2000934c 	.word	0x2000934c
 801b4a0:	2000936c 	.word	0x2000936c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801b4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b4a6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801b4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b4aa:	681b      	ldr	r3, [r3, #0]
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	f040 80c6 	bne.w	801b63e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801b4b2:	4b80      	ldr	r3, [pc, #512]	; (801b6b4 <tcp_receive+0xf14>)
 801b4b4:	681a      	ldr	r2, [r3, #0]
 801b4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b4b8:	68db      	ldr	r3, [r3, #12]
 801b4ba:	685b      	ldr	r3, [r3, #4]
 801b4bc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	f340 80bd 	ble.w	801b63e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801b4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b4c6:	68db      	ldr	r3, [r3, #12]
 801b4c8:	899b      	ldrh	r3, [r3, #12]
 801b4ca:	b29b      	uxth	r3, r3
 801b4cc:	4618      	mov	r0, r3
 801b4ce:	f7fa f9fd 	bl	80158cc <lwip_htons>
 801b4d2:	4603      	mov	r3, r0
 801b4d4:	b2db      	uxtb	r3, r3
 801b4d6:	f003 0301 	and.w	r3, r3, #1
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	f040 80bf 	bne.w	801b65e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801b4e0:	4875      	ldr	r0, [pc, #468]	; (801b6b8 <tcp_receive+0xf18>)
 801b4e2:	f7fd fa35 	bl	8018950 <tcp_seg_copy>
 801b4e6:	4602      	mov	r2, r0
 801b4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b4ea:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801b4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	f000 80b6 	beq.w	801b662 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801b4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b4f8:	68db      	ldr	r3, [r3, #12]
 801b4fa:	685b      	ldr	r3, [r3, #4]
 801b4fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b4fe:	8912      	ldrh	r2, [r2, #8]
 801b500:	441a      	add	r2, r3
 801b502:	4b6c      	ldr	r3, [pc, #432]	; (801b6b4 <tcp_receive+0xf14>)
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	1ad3      	subs	r3, r2, r3
 801b508:	2b00      	cmp	r3, #0
 801b50a:	dd12      	ble.n	801b532 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801b50c:	4b69      	ldr	r3, [pc, #420]	; (801b6b4 <tcp_receive+0xf14>)
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	b29a      	uxth	r2, r3
 801b512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b514:	68db      	ldr	r3, [r3, #12]
 801b516:	685b      	ldr	r3, [r3, #4]
 801b518:	b29b      	uxth	r3, r3
 801b51a:	1ad3      	subs	r3, r2, r3
 801b51c:	b29a      	uxth	r2, r3
 801b51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b520:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801b522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b524:	685a      	ldr	r2, [r3, #4]
 801b526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b528:	891b      	ldrh	r3, [r3, #8]
 801b52a:	4619      	mov	r1, r3
 801b52c:	4610      	mov	r0, r2
 801b52e:	f7fb fc25 	bl	8016d7c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801b532:	4b62      	ldr	r3, [pc, #392]	; (801b6bc <tcp_receive+0xf1c>)
 801b534:	881b      	ldrh	r3, [r3, #0]
 801b536:	461a      	mov	r2, r3
 801b538:	4b5e      	ldr	r3, [pc, #376]	; (801b6b4 <tcp_receive+0xf14>)
 801b53a:	681b      	ldr	r3, [r3, #0]
 801b53c:	441a      	add	r2, r3
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b542:	6879      	ldr	r1, [r7, #4]
 801b544:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b546:	440b      	add	r3, r1
 801b548:	1ad3      	subs	r3, r2, r3
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	f340 8089 	ble.w	801b662 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801b550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b552:	681b      	ldr	r3, [r3, #0]
 801b554:	68db      	ldr	r3, [r3, #12]
 801b556:	899b      	ldrh	r3, [r3, #12]
 801b558:	b29b      	uxth	r3, r3
 801b55a:	4618      	mov	r0, r3
 801b55c:	f7fa f9b6 	bl	80158cc <lwip_htons>
 801b560:	4603      	mov	r3, r0
 801b562:	b2db      	uxtb	r3, r3
 801b564:	f003 0301 	and.w	r3, r3, #1
 801b568:	2b00      	cmp	r3, #0
 801b56a:	d022      	beq.n	801b5b2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801b56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b56e:	681b      	ldr	r3, [r3, #0]
 801b570:	68db      	ldr	r3, [r3, #12]
 801b572:	899b      	ldrh	r3, [r3, #12]
 801b574:	b29b      	uxth	r3, r3
 801b576:	b21b      	sxth	r3, r3
 801b578:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b57c:	b21c      	sxth	r4, r3
 801b57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b580:	681b      	ldr	r3, [r3, #0]
 801b582:	68db      	ldr	r3, [r3, #12]
 801b584:	899b      	ldrh	r3, [r3, #12]
 801b586:	b29b      	uxth	r3, r3
 801b588:	4618      	mov	r0, r3
 801b58a:	f7fa f99f 	bl	80158cc <lwip_htons>
 801b58e:	4603      	mov	r3, r0
 801b590:	b2db      	uxtb	r3, r3
 801b592:	b29b      	uxth	r3, r3
 801b594:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801b598:	b29b      	uxth	r3, r3
 801b59a:	4618      	mov	r0, r3
 801b59c:	f7fa f996 	bl	80158cc <lwip_htons>
 801b5a0:	4603      	mov	r3, r0
 801b5a2:	b21b      	sxth	r3, r3
 801b5a4:	4323      	orrs	r3, r4
 801b5a6:	b21a      	sxth	r2, r3
 801b5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5aa:	681b      	ldr	r3, [r3, #0]
 801b5ac:	68db      	ldr	r3, [r3, #12]
 801b5ae:	b292      	uxth	r2, r2
 801b5b0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b5b6:	b29a      	uxth	r2, r3
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b5bc:	4413      	add	r3, r2
 801b5be:	b299      	uxth	r1, r3
 801b5c0:	4b3c      	ldr	r3, [pc, #240]	; (801b6b4 <tcp_receive+0xf14>)
 801b5c2:	681b      	ldr	r3, [r3, #0]
 801b5c4:	b29a      	uxth	r2, r3
 801b5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5c8:	681b      	ldr	r3, [r3, #0]
 801b5ca:	1a8a      	subs	r2, r1, r2
 801b5cc:	b292      	uxth	r2, r2
 801b5ce:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801b5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5d2:	681b      	ldr	r3, [r3, #0]
 801b5d4:	685a      	ldr	r2, [r3, #4]
 801b5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	891b      	ldrh	r3, [r3, #8]
 801b5dc:	4619      	mov	r1, r3
 801b5de:	4610      	mov	r0, r2
 801b5e0:	f7fb fbcc 	bl	8016d7c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801b5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5e6:	681b      	ldr	r3, [r3, #0]
 801b5e8:	891c      	ldrh	r4, [r3, #8]
 801b5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5ec:	681b      	ldr	r3, [r3, #0]
 801b5ee:	68db      	ldr	r3, [r3, #12]
 801b5f0:	899b      	ldrh	r3, [r3, #12]
 801b5f2:	b29b      	uxth	r3, r3
 801b5f4:	4618      	mov	r0, r3
 801b5f6:	f7fa f969 	bl	80158cc <lwip_htons>
 801b5fa:	4603      	mov	r3, r0
 801b5fc:	b2db      	uxtb	r3, r3
 801b5fe:	f003 0303 	and.w	r3, r3, #3
 801b602:	2b00      	cmp	r3, #0
 801b604:	d001      	beq.n	801b60a <tcp_receive+0xe6a>
 801b606:	2301      	movs	r3, #1
 801b608:	e000      	b.n	801b60c <tcp_receive+0xe6c>
 801b60a:	2300      	movs	r3, #0
 801b60c:	4423      	add	r3, r4
 801b60e:	b29a      	uxth	r2, r3
 801b610:	4b2a      	ldr	r3, [pc, #168]	; (801b6bc <tcp_receive+0xf1c>)
 801b612:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801b614:	4b29      	ldr	r3, [pc, #164]	; (801b6bc <tcp_receive+0xf1c>)
 801b616:	881b      	ldrh	r3, [r3, #0]
 801b618:	461a      	mov	r2, r3
 801b61a:	4b26      	ldr	r3, [pc, #152]	; (801b6b4 <tcp_receive+0xf14>)
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	441a      	add	r2, r3
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b624:	6879      	ldr	r1, [r7, #4]
 801b626:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b628:	440b      	add	r3, r1
 801b62a:	429a      	cmp	r2, r3
 801b62c:	d019      	beq.n	801b662 <tcp_receive+0xec2>
 801b62e:	4b24      	ldr	r3, [pc, #144]	; (801b6c0 <tcp_receive+0xf20>)
 801b630:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801b634:	4923      	ldr	r1, [pc, #140]	; (801b6c4 <tcp_receive+0xf24>)
 801b636:	4824      	ldr	r0, [pc, #144]	; (801b6c8 <tcp_receive+0xf28>)
 801b638:	f004 ff6c 	bl	8020514 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801b63c:	e011      	b.n	801b662 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801b63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	63bb      	str	r3, [r7, #56]	; 0x38
 801b644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b646:	2b00      	cmp	r3, #0
 801b648:	f47f aea4 	bne.w	801b394 <tcp_receive+0xbf4>
 801b64c:	e00a      	b.n	801b664 <tcp_receive+0xec4>
                break;
 801b64e:	bf00      	nop
 801b650:	e008      	b.n	801b664 <tcp_receive+0xec4>
                break;
 801b652:	bf00      	nop
 801b654:	e006      	b.n	801b664 <tcp_receive+0xec4>
                  break;
 801b656:	bf00      	nop
 801b658:	e004      	b.n	801b664 <tcp_receive+0xec4>
                  break;
 801b65a:	bf00      	nop
 801b65c:	e002      	b.n	801b664 <tcp_receive+0xec4>
                  break;
 801b65e:	bf00      	nop
 801b660:	e000      	b.n	801b664 <tcp_receive+0xec4>
                break;
 801b662:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801b664:	6878      	ldr	r0, [r7, #4]
 801b666:	f001 fe9d 	bl	801d3a4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801b66a:	e003      	b.n	801b674 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801b66c:	6878      	ldr	r0, [r7, #4]
 801b66e:	f001 fe99 	bl	801d3a4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801b672:	e01a      	b.n	801b6aa <tcp_receive+0xf0a>
 801b674:	e019      	b.n	801b6aa <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801b676:	4b0f      	ldr	r3, [pc, #60]	; (801b6b4 <tcp_receive+0xf14>)
 801b678:	681a      	ldr	r2, [r3, #0]
 801b67a:	687b      	ldr	r3, [r7, #4]
 801b67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b67e:	1ad3      	subs	r3, r2, r3
 801b680:	2b00      	cmp	r3, #0
 801b682:	db0a      	blt.n	801b69a <tcp_receive+0xefa>
 801b684:	4b0b      	ldr	r3, [pc, #44]	; (801b6b4 <tcp_receive+0xf14>)
 801b686:	681a      	ldr	r2, [r3, #0]
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b68c:	6879      	ldr	r1, [r7, #4]
 801b68e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b690:	440b      	add	r3, r1
 801b692:	1ad3      	subs	r3, r2, r3
 801b694:	3301      	adds	r3, #1
 801b696:	2b00      	cmp	r3, #0
 801b698:	dd07      	ble.n	801b6aa <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	8b5b      	ldrh	r3, [r3, #26]
 801b69e:	f043 0302 	orr.w	r3, r3, #2
 801b6a2:	b29a      	uxth	r2, r3
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801b6a8:	e7ff      	b.n	801b6aa <tcp_receive+0xf0a>
 801b6aa:	bf00      	nop
 801b6ac:	3750      	adds	r7, #80	; 0x50
 801b6ae:	46bd      	mov	sp, r7
 801b6b0:	bdb0      	pop	{r4, r5, r7, pc}
 801b6b2:	bf00      	nop
 801b6b4:	2000936c 	.word	0x2000936c
 801b6b8:	2000934c 	.word	0x2000934c
 801b6bc:	20009376 	.word	0x20009376
 801b6c0:	08022e54 	.word	0x08022e54
 801b6c4:	080231fc 	.word	0x080231fc
 801b6c8:	08022ea0 	.word	0x08022ea0

0801b6cc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801b6cc:	b480      	push	{r7}
 801b6ce:	b083      	sub	sp, #12
 801b6d0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801b6d2:	4b15      	ldr	r3, [pc, #84]	; (801b728 <tcp_get_next_optbyte+0x5c>)
 801b6d4:	881b      	ldrh	r3, [r3, #0]
 801b6d6:	1c5a      	adds	r2, r3, #1
 801b6d8:	b291      	uxth	r1, r2
 801b6da:	4a13      	ldr	r2, [pc, #76]	; (801b728 <tcp_get_next_optbyte+0x5c>)
 801b6dc:	8011      	strh	r1, [r2, #0]
 801b6de:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801b6e0:	4b12      	ldr	r3, [pc, #72]	; (801b72c <tcp_get_next_optbyte+0x60>)
 801b6e2:	681b      	ldr	r3, [r3, #0]
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	d004      	beq.n	801b6f2 <tcp_get_next_optbyte+0x26>
 801b6e8:	4b11      	ldr	r3, [pc, #68]	; (801b730 <tcp_get_next_optbyte+0x64>)
 801b6ea:	881b      	ldrh	r3, [r3, #0]
 801b6ec:	88fa      	ldrh	r2, [r7, #6]
 801b6ee:	429a      	cmp	r2, r3
 801b6f0:	d208      	bcs.n	801b704 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801b6f2:	4b10      	ldr	r3, [pc, #64]	; (801b734 <tcp_get_next_optbyte+0x68>)
 801b6f4:	681b      	ldr	r3, [r3, #0]
 801b6f6:	3314      	adds	r3, #20
 801b6f8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801b6fa:	88fb      	ldrh	r3, [r7, #6]
 801b6fc:	683a      	ldr	r2, [r7, #0]
 801b6fe:	4413      	add	r3, r2
 801b700:	781b      	ldrb	r3, [r3, #0]
 801b702:	e00b      	b.n	801b71c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801b704:	88fb      	ldrh	r3, [r7, #6]
 801b706:	b2da      	uxtb	r2, r3
 801b708:	4b09      	ldr	r3, [pc, #36]	; (801b730 <tcp_get_next_optbyte+0x64>)
 801b70a:	881b      	ldrh	r3, [r3, #0]
 801b70c:	b2db      	uxtb	r3, r3
 801b70e:	1ad3      	subs	r3, r2, r3
 801b710:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801b712:	4b06      	ldr	r3, [pc, #24]	; (801b72c <tcp_get_next_optbyte+0x60>)
 801b714:	681a      	ldr	r2, [r3, #0]
 801b716:	797b      	ldrb	r3, [r7, #5]
 801b718:	4413      	add	r3, r2
 801b71a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801b71c:	4618      	mov	r0, r3
 801b71e:	370c      	adds	r7, #12
 801b720:	46bd      	mov	sp, r7
 801b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b726:	4770      	bx	lr
 801b728:	20009368 	.word	0x20009368
 801b72c:	20009364 	.word	0x20009364
 801b730:	20009362 	.word	0x20009362
 801b734:	2000935c 	.word	0x2000935c

0801b738 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801b738:	b580      	push	{r7, lr}
 801b73a:	b084      	sub	sp, #16
 801b73c:	af00      	add	r7, sp, #0
 801b73e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	2b00      	cmp	r3, #0
 801b744:	d106      	bne.n	801b754 <tcp_parseopt+0x1c>
 801b746:	4b31      	ldr	r3, [pc, #196]	; (801b80c <tcp_parseopt+0xd4>)
 801b748:	f240 727d 	movw	r2, #1917	; 0x77d
 801b74c:	4930      	ldr	r1, [pc, #192]	; (801b810 <tcp_parseopt+0xd8>)
 801b74e:	4831      	ldr	r0, [pc, #196]	; (801b814 <tcp_parseopt+0xdc>)
 801b750:	f004 fee0 	bl	8020514 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801b754:	4b30      	ldr	r3, [pc, #192]	; (801b818 <tcp_parseopt+0xe0>)
 801b756:	881b      	ldrh	r3, [r3, #0]
 801b758:	2b00      	cmp	r3, #0
 801b75a:	d053      	beq.n	801b804 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801b75c:	4b2f      	ldr	r3, [pc, #188]	; (801b81c <tcp_parseopt+0xe4>)
 801b75e:	2200      	movs	r2, #0
 801b760:	801a      	strh	r2, [r3, #0]
 801b762:	e043      	b.n	801b7ec <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 801b764:	f7ff ffb2 	bl	801b6cc <tcp_get_next_optbyte>
 801b768:	4603      	mov	r3, r0
 801b76a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801b76c:	7bfb      	ldrb	r3, [r7, #15]
 801b76e:	2b01      	cmp	r3, #1
 801b770:	d03c      	beq.n	801b7ec <tcp_parseopt+0xb4>
 801b772:	2b02      	cmp	r3, #2
 801b774:	d002      	beq.n	801b77c <tcp_parseopt+0x44>
 801b776:	2b00      	cmp	r3, #0
 801b778:	d03f      	beq.n	801b7fa <tcp_parseopt+0xc2>
 801b77a:	e026      	b.n	801b7ca <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801b77c:	f7ff ffa6 	bl	801b6cc <tcp_get_next_optbyte>
 801b780:	4603      	mov	r3, r0
 801b782:	2b04      	cmp	r3, #4
 801b784:	d13b      	bne.n	801b7fe <tcp_parseopt+0xc6>
 801b786:	4b25      	ldr	r3, [pc, #148]	; (801b81c <tcp_parseopt+0xe4>)
 801b788:	881b      	ldrh	r3, [r3, #0]
 801b78a:	3302      	adds	r3, #2
 801b78c:	4a22      	ldr	r2, [pc, #136]	; (801b818 <tcp_parseopt+0xe0>)
 801b78e:	8812      	ldrh	r2, [r2, #0]
 801b790:	4293      	cmp	r3, r2
 801b792:	dc34      	bgt.n	801b7fe <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801b794:	f7ff ff9a 	bl	801b6cc <tcp_get_next_optbyte>
 801b798:	4603      	mov	r3, r0
 801b79a:	b29b      	uxth	r3, r3
 801b79c:	021b      	lsls	r3, r3, #8
 801b79e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801b7a0:	f7ff ff94 	bl	801b6cc <tcp_get_next_optbyte>
 801b7a4:	4603      	mov	r3, r0
 801b7a6:	b29a      	uxth	r2, r3
 801b7a8:	89bb      	ldrh	r3, [r7, #12]
 801b7aa:	4313      	orrs	r3, r2
 801b7ac:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801b7ae:	89bb      	ldrh	r3, [r7, #12]
 801b7b0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801b7b4:	d804      	bhi.n	801b7c0 <tcp_parseopt+0x88>
 801b7b6:	89bb      	ldrh	r3, [r7, #12]
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	d001      	beq.n	801b7c0 <tcp_parseopt+0x88>
 801b7bc:	89ba      	ldrh	r2, [r7, #12]
 801b7be:	e001      	b.n	801b7c4 <tcp_parseopt+0x8c>
 801b7c0:	f44f 7206 	mov.w	r2, #536	; 0x218
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801b7c8:	e010      	b.n	801b7ec <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801b7ca:	f7ff ff7f 	bl	801b6cc <tcp_get_next_optbyte>
 801b7ce:	4603      	mov	r3, r0
 801b7d0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801b7d2:	7afb      	ldrb	r3, [r7, #11]
 801b7d4:	2b01      	cmp	r3, #1
 801b7d6:	d914      	bls.n	801b802 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801b7d8:	7afb      	ldrb	r3, [r7, #11]
 801b7da:	b29a      	uxth	r2, r3
 801b7dc:	4b0f      	ldr	r3, [pc, #60]	; (801b81c <tcp_parseopt+0xe4>)
 801b7de:	881b      	ldrh	r3, [r3, #0]
 801b7e0:	4413      	add	r3, r2
 801b7e2:	b29b      	uxth	r3, r3
 801b7e4:	3b02      	subs	r3, #2
 801b7e6:	b29a      	uxth	r2, r3
 801b7e8:	4b0c      	ldr	r3, [pc, #48]	; (801b81c <tcp_parseopt+0xe4>)
 801b7ea:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801b7ec:	4b0b      	ldr	r3, [pc, #44]	; (801b81c <tcp_parseopt+0xe4>)
 801b7ee:	881a      	ldrh	r2, [r3, #0]
 801b7f0:	4b09      	ldr	r3, [pc, #36]	; (801b818 <tcp_parseopt+0xe0>)
 801b7f2:	881b      	ldrh	r3, [r3, #0]
 801b7f4:	429a      	cmp	r2, r3
 801b7f6:	d3b5      	bcc.n	801b764 <tcp_parseopt+0x2c>
 801b7f8:	e004      	b.n	801b804 <tcp_parseopt+0xcc>
          return;
 801b7fa:	bf00      	nop
 801b7fc:	e002      	b.n	801b804 <tcp_parseopt+0xcc>
            return;
 801b7fe:	bf00      	nop
 801b800:	e000      	b.n	801b804 <tcp_parseopt+0xcc>
            return;
 801b802:	bf00      	nop
      }
    }
  }
}
 801b804:	3710      	adds	r7, #16
 801b806:	46bd      	mov	sp, r7
 801b808:	bd80      	pop	{r7, pc}
 801b80a:	bf00      	nop
 801b80c:	08022e54 	.word	0x08022e54
 801b810:	080232b8 	.word	0x080232b8
 801b814:	08022ea0 	.word	0x08022ea0
 801b818:	20009360 	.word	0x20009360
 801b81c:	20009368 	.word	0x20009368

0801b820 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801b820:	b480      	push	{r7}
 801b822:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801b824:	4b05      	ldr	r3, [pc, #20]	; (801b83c <tcp_trigger_input_pcb_close+0x1c>)
 801b826:	781b      	ldrb	r3, [r3, #0]
 801b828:	f043 0310 	orr.w	r3, r3, #16
 801b82c:	b2da      	uxtb	r2, r3
 801b82e:	4b03      	ldr	r3, [pc, #12]	; (801b83c <tcp_trigger_input_pcb_close+0x1c>)
 801b830:	701a      	strb	r2, [r3, #0]
}
 801b832:	bf00      	nop
 801b834:	46bd      	mov	sp, r7
 801b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b83a:	4770      	bx	lr
 801b83c:	20009379 	.word	0x20009379

0801b840 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801b840:	b580      	push	{r7, lr}
 801b842:	b084      	sub	sp, #16
 801b844:	af00      	add	r7, sp, #0
 801b846:	60f8      	str	r0, [r7, #12]
 801b848:	60b9      	str	r1, [r7, #8]
 801b84a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801b84c:	68fb      	ldr	r3, [r7, #12]
 801b84e:	2b00      	cmp	r3, #0
 801b850:	d00a      	beq.n	801b868 <tcp_route+0x28>
 801b852:	68fb      	ldr	r3, [r7, #12]
 801b854:	7a1b      	ldrb	r3, [r3, #8]
 801b856:	2b00      	cmp	r3, #0
 801b858:	d006      	beq.n	801b868 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801b85a:	68fb      	ldr	r3, [r7, #12]
 801b85c:	7a1b      	ldrb	r3, [r3, #8]
 801b85e:	4618      	mov	r0, r3
 801b860:	f7fb f888 	bl	8016974 <netif_get_by_index>
 801b864:	4603      	mov	r3, r0
 801b866:	e003      	b.n	801b870 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801b868:	6878      	ldr	r0, [r7, #4]
 801b86a:	f003 fb17 	bl	801ee9c <ip4_route>
 801b86e:	4603      	mov	r3, r0
  }
}
 801b870:	4618      	mov	r0, r3
 801b872:	3710      	adds	r7, #16
 801b874:	46bd      	mov	sp, r7
 801b876:	bd80      	pop	{r7, pc}

0801b878 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801b878:	b590      	push	{r4, r7, lr}
 801b87a:	b087      	sub	sp, #28
 801b87c:	af00      	add	r7, sp, #0
 801b87e:	60f8      	str	r0, [r7, #12]
 801b880:	60b9      	str	r1, [r7, #8]
 801b882:	603b      	str	r3, [r7, #0]
 801b884:	4613      	mov	r3, r2
 801b886:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801b888:	68fb      	ldr	r3, [r7, #12]
 801b88a:	2b00      	cmp	r3, #0
 801b88c:	d105      	bne.n	801b89a <tcp_create_segment+0x22>
 801b88e:	4b44      	ldr	r3, [pc, #272]	; (801b9a0 <tcp_create_segment+0x128>)
 801b890:	22a3      	movs	r2, #163	; 0xa3
 801b892:	4944      	ldr	r1, [pc, #272]	; (801b9a4 <tcp_create_segment+0x12c>)
 801b894:	4844      	ldr	r0, [pc, #272]	; (801b9a8 <tcp_create_segment+0x130>)
 801b896:	f004 fe3d 	bl	8020514 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801b89a:	68bb      	ldr	r3, [r7, #8]
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	d105      	bne.n	801b8ac <tcp_create_segment+0x34>
 801b8a0:	4b3f      	ldr	r3, [pc, #252]	; (801b9a0 <tcp_create_segment+0x128>)
 801b8a2:	22a4      	movs	r2, #164	; 0xa4
 801b8a4:	4941      	ldr	r1, [pc, #260]	; (801b9ac <tcp_create_segment+0x134>)
 801b8a6:	4840      	ldr	r0, [pc, #256]	; (801b9a8 <tcp_create_segment+0x130>)
 801b8a8:	f004 fe34 	bl	8020514 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b8ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b8b0:	009b      	lsls	r3, r3, #2
 801b8b2:	b2db      	uxtb	r3, r3
 801b8b4:	f003 0304 	and.w	r3, r3, #4
 801b8b8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801b8ba:	2003      	movs	r0, #3
 801b8bc:	f7fa fcf2 	bl	80162a4 <memp_malloc>
 801b8c0:	6138      	str	r0, [r7, #16]
 801b8c2:	693b      	ldr	r3, [r7, #16]
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	d104      	bne.n	801b8d2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801b8c8:	68b8      	ldr	r0, [r7, #8]
 801b8ca:	f7fb fbdd 	bl	8017088 <pbuf_free>
    return NULL;
 801b8ce:	2300      	movs	r3, #0
 801b8d0:	e061      	b.n	801b996 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801b8d2:	693b      	ldr	r3, [r7, #16]
 801b8d4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801b8d8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801b8da:	693b      	ldr	r3, [r7, #16]
 801b8dc:	2200      	movs	r2, #0
 801b8de:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801b8e0:	693b      	ldr	r3, [r7, #16]
 801b8e2:	68ba      	ldr	r2, [r7, #8]
 801b8e4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801b8e6:	68bb      	ldr	r3, [r7, #8]
 801b8e8:	891a      	ldrh	r2, [r3, #8]
 801b8ea:	7dfb      	ldrb	r3, [r7, #23]
 801b8ec:	b29b      	uxth	r3, r3
 801b8ee:	429a      	cmp	r2, r3
 801b8f0:	d205      	bcs.n	801b8fe <tcp_create_segment+0x86>
 801b8f2:	4b2b      	ldr	r3, [pc, #172]	; (801b9a0 <tcp_create_segment+0x128>)
 801b8f4:	22b0      	movs	r2, #176	; 0xb0
 801b8f6:	492e      	ldr	r1, [pc, #184]	; (801b9b0 <tcp_create_segment+0x138>)
 801b8f8:	482b      	ldr	r0, [pc, #172]	; (801b9a8 <tcp_create_segment+0x130>)
 801b8fa:	f004 fe0b 	bl	8020514 <iprintf>
  seg->len = p->tot_len - optlen;
 801b8fe:	68bb      	ldr	r3, [r7, #8]
 801b900:	891a      	ldrh	r2, [r3, #8]
 801b902:	7dfb      	ldrb	r3, [r7, #23]
 801b904:	b29b      	uxth	r3, r3
 801b906:	1ad3      	subs	r3, r2, r3
 801b908:	b29a      	uxth	r2, r3
 801b90a:	693b      	ldr	r3, [r7, #16]
 801b90c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801b90e:	2114      	movs	r1, #20
 801b910:	68b8      	ldr	r0, [r7, #8]
 801b912:	f7fb fb23 	bl	8016f5c <pbuf_add_header>
 801b916:	4603      	mov	r3, r0
 801b918:	2b00      	cmp	r3, #0
 801b91a:	d004      	beq.n	801b926 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801b91c:	6938      	ldr	r0, [r7, #16]
 801b91e:	f7fc ffe1 	bl	80188e4 <tcp_seg_free>
    return NULL;
 801b922:	2300      	movs	r3, #0
 801b924:	e037      	b.n	801b996 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801b926:	693b      	ldr	r3, [r7, #16]
 801b928:	685b      	ldr	r3, [r3, #4]
 801b92a:	685a      	ldr	r2, [r3, #4]
 801b92c:	693b      	ldr	r3, [r7, #16]
 801b92e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801b930:	68fb      	ldr	r3, [r7, #12]
 801b932:	8ada      	ldrh	r2, [r3, #22]
 801b934:	693b      	ldr	r3, [r7, #16]
 801b936:	68dc      	ldr	r4, [r3, #12]
 801b938:	4610      	mov	r0, r2
 801b93a:	f7f9 ffc7 	bl	80158cc <lwip_htons>
 801b93e:	4603      	mov	r3, r0
 801b940:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801b942:	68fb      	ldr	r3, [r7, #12]
 801b944:	8b1a      	ldrh	r2, [r3, #24]
 801b946:	693b      	ldr	r3, [r7, #16]
 801b948:	68dc      	ldr	r4, [r3, #12]
 801b94a:	4610      	mov	r0, r2
 801b94c:	f7f9 ffbe 	bl	80158cc <lwip_htons>
 801b950:	4603      	mov	r3, r0
 801b952:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801b954:	693b      	ldr	r3, [r7, #16]
 801b956:	68dc      	ldr	r4, [r3, #12]
 801b958:	6838      	ldr	r0, [r7, #0]
 801b95a:	f7f9 ffcc 	bl	80158f6 <lwip_htonl>
 801b95e:	4603      	mov	r3, r0
 801b960:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801b962:	7dfb      	ldrb	r3, [r7, #23]
 801b964:	089b      	lsrs	r3, r3, #2
 801b966:	b2db      	uxtb	r3, r3
 801b968:	b29b      	uxth	r3, r3
 801b96a:	3305      	adds	r3, #5
 801b96c:	b29b      	uxth	r3, r3
 801b96e:	031b      	lsls	r3, r3, #12
 801b970:	b29a      	uxth	r2, r3
 801b972:	79fb      	ldrb	r3, [r7, #7]
 801b974:	b29b      	uxth	r3, r3
 801b976:	4313      	orrs	r3, r2
 801b978:	b29a      	uxth	r2, r3
 801b97a:	693b      	ldr	r3, [r7, #16]
 801b97c:	68dc      	ldr	r4, [r3, #12]
 801b97e:	4610      	mov	r0, r2
 801b980:	f7f9 ffa4 	bl	80158cc <lwip_htons>
 801b984:	4603      	mov	r3, r0
 801b986:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801b988:	693b      	ldr	r3, [r7, #16]
 801b98a:	68db      	ldr	r3, [r3, #12]
 801b98c:	2200      	movs	r2, #0
 801b98e:	749a      	strb	r2, [r3, #18]
 801b990:	2200      	movs	r2, #0
 801b992:	74da      	strb	r2, [r3, #19]
  return seg;
 801b994:	693b      	ldr	r3, [r7, #16]
}
 801b996:	4618      	mov	r0, r3
 801b998:	371c      	adds	r7, #28
 801b99a:	46bd      	mov	sp, r7
 801b99c:	bd90      	pop	{r4, r7, pc}
 801b99e:	bf00      	nop
 801b9a0:	080232d4 	.word	0x080232d4
 801b9a4:	08023308 	.word	0x08023308
 801b9a8:	08023328 	.word	0x08023328
 801b9ac:	08023350 	.word	0x08023350
 801b9b0:	08023374 	.word	0x08023374

0801b9b4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801b9b4:	b580      	push	{r7, lr}
 801b9b6:	b086      	sub	sp, #24
 801b9b8:	af00      	add	r7, sp, #0
 801b9ba:	607b      	str	r3, [r7, #4]
 801b9bc:	4603      	mov	r3, r0
 801b9be:	73fb      	strb	r3, [r7, #15]
 801b9c0:	460b      	mov	r3, r1
 801b9c2:	81bb      	strh	r3, [r7, #12]
 801b9c4:	4613      	mov	r3, r2
 801b9c6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801b9c8:	89bb      	ldrh	r3, [r7, #12]
 801b9ca:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d105      	bne.n	801b9de <tcp_pbuf_prealloc+0x2a>
 801b9d2:	4b30      	ldr	r3, [pc, #192]	; (801ba94 <tcp_pbuf_prealloc+0xe0>)
 801b9d4:	22e8      	movs	r2, #232	; 0xe8
 801b9d6:	4930      	ldr	r1, [pc, #192]	; (801ba98 <tcp_pbuf_prealloc+0xe4>)
 801b9d8:	4830      	ldr	r0, [pc, #192]	; (801ba9c <tcp_pbuf_prealloc+0xe8>)
 801b9da:	f004 fd9b 	bl	8020514 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801b9de:	6a3b      	ldr	r3, [r7, #32]
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	d105      	bne.n	801b9f0 <tcp_pbuf_prealloc+0x3c>
 801b9e4:	4b2b      	ldr	r3, [pc, #172]	; (801ba94 <tcp_pbuf_prealloc+0xe0>)
 801b9e6:	22e9      	movs	r2, #233	; 0xe9
 801b9e8:	492d      	ldr	r1, [pc, #180]	; (801baa0 <tcp_pbuf_prealloc+0xec>)
 801b9ea:	482c      	ldr	r0, [pc, #176]	; (801ba9c <tcp_pbuf_prealloc+0xe8>)
 801b9ec:	f004 fd92 	bl	8020514 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801b9f0:	89ba      	ldrh	r2, [r7, #12]
 801b9f2:	897b      	ldrh	r3, [r7, #10]
 801b9f4:	429a      	cmp	r2, r3
 801b9f6:	d221      	bcs.n	801ba3c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b9f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b9fc:	f003 0302 	and.w	r3, r3, #2
 801ba00:	2b00      	cmp	r3, #0
 801ba02:	d111      	bne.n	801ba28 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801ba04:	6a3b      	ldr	r3, [r7, #32]
 801ba06:	8b5b      	ldrh	r3, [r3, #26]
 801ba08:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801ba0c:	2b00      	cmp	r3, #0
 801ba0e:	d115      	bne.n	801ba3c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801ba10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801ba14:	2b00      	cmp	r3, #0
 801ba16:	d007      	beq.n	801ba28 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801ba18:	6a3b      	ldr	r3, [r7, #32]
 801ba1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d103      	bne.n	801ba28 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801ba20:	6a3b      	ldr	r3, [r7, #32]
 801ba22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	d009      	beq.n	801ba3c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801ba28:	89bb      	ldrh	r3, [r7, #12]
 801ba2a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801ba2e:	f023 0203 	bic.w	r2, r3, #3
 801ba32:	897b      	ldrh	r3, [r7, #10]
 801ba34:	4293      	cmp	r3, r2
 801ba36:	bf28      	it	cs
 801ba38:	4613      	movcs	r3, r2
 801ba3a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801ba3c:	8af9      	ldrh	r1, [r7, #22]
 801ba3e:	7bfb      	ldrb	r3, [r7, #15]
 801ba40:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ba44:	4618      	mov	r0, r3
 801ba46:	f7fb f83f 	bl	8016ac8 <pbuf_alloc>
 801ba4a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ba4c:	693b      	ldr	r3, [r7, #16]
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	d101      	bne.n	801ba56 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801ba52:	2300      	movs	r3, #0
 801ba54:	e019      	b.n	801ba8a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801ba56:	693b      	ldr	r3, [r7, #16]
 801ba58:	681b      	ldr	r3, [r3, #0]
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	d006      	beq.n	801ba6c <tcp_pbuf_prealloc+0xb8>
 801ba5e:	4b0d      	ldr	r3, [pc, #52]	; (801ba94 <tcp_pbuf_prealloc+0xe0>)
 801ba60:	f240 120b 	movw	r2, #267	; 0x10b
 801ba64:	490f      	ldr	r1, [pc, #60]	; (801baa4 <tcp_pbuf_prealloc+0xf0>)
 801ba66:	480d      	ldr	r0, [pc, #52]	; (801ba9c <tcp_pbuf_prealloc+0xe8>)
 801ba68:	f004 fd54 	bl	8020514 <iprintf>
  *oversize = p->len - length;
 801ba6c:	693b      	ldr	r3, [r7, #16]
 801ba6e:	895a      	ldrh	r2, [r3, #10]
 801ba70:	89bb      	ldrh	r3, [r7, #12]
 801ba72:	1ad3      	subs	r3, r2, r3
 801ba74:	b29a      	uxth	r2, r3
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801ba7a:	693b      	ldr	r3, [r7, #16]
 801ba7c:	89ba      	ldrh	r2, [r7, #12]
 801ba7e:	811a      	strh	r2, [r3, #8]
 801ba80:	693b      	ldr	r3, [r7, #16]
 801ba82:	891a      	ldrh	r2, [r3, #8]
 801ba84:	693b      	ldr	r3, [r7, #16]
 801ba86:	815a      	strh	r2, [r3, #10]
  return p;
 801ba88:	693b      	ldr	r3, [r7, #16]
}
 801ba8a:	4618      	mov	r0, r3
 801ba8c:	3718      	adds	r7, #24
 801ba8e:	46bd      	mov	sp, r7
 801ba90:	bd80      	pop	{r7, pc}
 801ba92:	bf00      	nop
 801ba94:	080232d4 	.word	0x080232d4
 801ba98:	0802338c 	.word	0x0802338c
 801ba9c:	08023328 	.word	0x08023328
 801baa0:	080233b0 	.word	0x080233b0
 801baa4:	080233d0 	.word	0x080233d0

0801baa8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801baa8:	b580      	push	{r7, lr}
 801baaa:	b082      	sub	sp, #8
 801baac:	af00      	add	r7, sp, #0
 801baae:	6078      	str	r0, [r7, #4]
 801bab0:	460b      	mov	r3, r1
 801bab2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d106      	bne.n	801bac8 <tcp_write_checks+0x20>
 801baba:	4b33      	ldr	r3, [pc, #204]	; (801bb88 <tcp_write_checks+0xe0>)
 801babc:	f240 1233 	movw	r2, #307	; 0x133
 801bac0:	4932      	ldr	r1, [pc, #200]	; (801bb8c <tcp_write_checks+0xe4>)
 801bac2:	4833      	ldr	r0, [pc, #204]	; (801bb90 <tcp_write_checks+0xe8>)
 801bac4:	f004 fd26 	bl	8020514 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	7d1b      	ldrb	r3, [r3, #20]
 801bacc:	2b04      	cmp	r3, #4
 801bace:	d00e      	beq.n	801baee <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801bad4:	2b07      	cmp	r3, #7
 801bad6:	d00a      	beq.n	801baee <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801badc:	2b02      	cmp	r3, #2
 801bade:	d006      	beq.n	801baee <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801bae4:	2b03      	cmp	r3, #3
 801bae6:	d002      	beq.n	801baee <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801bae8:	f06f 030a 	mvn.w	r3, #10
 801baec:	e048      	b.n	801bb80 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801baee:	887b      	ldrh	r3, [r7, #2]
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	d101      	bne.n	801baf8 <tcp_write_checks+0x50>
    return ERR_OK;
 801baf4:	2300      	movs	r3, #0
 801baf6:	e043      	b.n	801bb80 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801bafe:	887a      	ldrh	r2, [r7, #2]
 801bb00:	429a      	cmp	r2, r3
 801bb02:	d909      	bls.n	801bb18 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	8b5b      	ldrh	r3, [r3, #26]
 801bb08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bb0c:	b29a      	uxth	r2, r3
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801bb12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bb16:	e033      	b.n	801bb80 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bb1e:	2b08      	cmp	r3, #8
 801bb20:	d909      	bls.n	801bb36 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	8b5b      	ldrh	r3, [r3, #26]
 801bb26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bb2a:	b29a      	uxth	r2, r3
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801bb30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bb34:	e024      	b.n	801bb80 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d00f      	beq.n	801bb60 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bb44:	2b00      	cmp	r3, #0
 801bb46:	d11a      	bne.n	801bb7e <tcp_write_checks+0xd6>
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d116      	bne.n	801bb7e <tcp_write_checks+0xd6>
 801bb50:	4b0d      	ldr	r3, [pc, #52]	; (801bb88 <tcp_write_checks+0xe0>)
 801bb52:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801bb56:	490f      	ldr	r1, [pc, #60]	; (801bb94 <tcp_write_checks+0xec>)
 801bb58:	480d      	ldr	r0, [pc, #52]	; (801bb90 <tcp_write_checks+0xe8>)
 801bb5a:	f004 fcdb 	bl	8020514 <iprintf>
 801bb5e:	e00e      	b.n	801bb7e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d103      	bne.n	801bb70 <tcp_write_checks+0xc8>
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d006      	beq.n	801bb7e <tcp_write_checks+0xd6>
 801bb70:	4b05      	ldr	r3, [pc, #20]	; (801bb88 <tcp_write_checks+0xe0>)
 801bb72:	f240 1259 	movw	r2, #345	; 0x159
 801bb76:	4908      	ldr	r1, [pc, #32]	; (801bb98 <tcp_write_checks+0xf0>)
 801bb78:	4805      	ldr	r0, [pc, #20]	; (801bb90 <tcp_write_checks+0xe8>)
 801bb7a:	f004 fccb 	bl	8020514 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801bb7e:	2300      	movs	r3, #0
}
 801bb80:	4618      	mov	r0, r3
 801bb82:	3708      	adds	r7, #8
 801bb84:	46bd      	mov	sp, r7
 801bb86:	bd80      	pop	{r7, pc}
 801bb88:	080232d4 	.word	0x080232d4
 801bb8c:	080233e4 	.word	0x080233e4
 801bb90:	08023328 	.word	0x08023328
 801bb94:	08023404 	.word	0x08023404
 801bb98:	08023440 	.word	0x08023440

0801bb9c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801bb9c:	b590      	push	{r4, r7, lr}
 801bb9e:	b09b      	sub	sp, #108	; 0x6c
 801bba0:	af04      	add	r7, sp, #16
 801bba2:	60f8      	str	r0, [r7, #12]
 801bba4:	60b9      	str	r1, [r7, #8]
 801bba6:	4611      	mov	r1, r2
 801bba8:	461a      	mov	r2, r3
 801bbaa:	460b      	mov	r3, r1
 801bbac:	80fb      	strh	r3, [r7, #6]
 801bbae:	4613      	mov	r3, r2
 801bbb0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801bbb2:	2300      	movs	r3, #0
 801bbb4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801bbb6:	2300      	movs	r3, #0
 801bbb8:	653b      	str	r3, [r7, #80]	; 0x50
 801bbba:	2300      	movs	r3, #0
 801bbbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 801bbbe:	2300      	movs	r3, #0
 801bbc0:	64bb      	str	r3, [r7, #72]	; 0x48
 801bbc2:	2300      	movs	r3, #0
 801bbc4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801bbc6:	2300      	movs	r3, #0
 801bbc8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801bbcc:	2300      	movs	r3, #0
 801bbce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801bbd2:	2300      	movs	r3, #0
 801bbd4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801bbd6:	2300      	movs	r3, #0
 801bbd8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801bbda:	2300      	movs	r3, #0
 801bbdc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801bbde:	68fb      	ldr	r3, [r7, #12]
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	d109      	bne.n	801bbf8 <tcp_write+0x5c>
 801bbe4:	4ba5      	ldr	r3, [pc, #660]	; (801be7c <tcp_write+0x2e0>)
 801bbe6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801bbea:	49a5      	ldr	r1, [pc, #660]	; (801be80 <tcp_write+0x2e4>)
 801bbec:	48a5      	ldr	r0, [pc, #660]	; (801be84 <tcp_write+0x2e8>)
 801bbee:	f004 fc91 	bl	8020514 <iprintf>
 801bbf2:	f06f 030f 	mvn.w	r3, #15
 801bbf6:	e32c      	b.n	801c252 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801bbf8:	68fb      	ldr	r3, [r7, #12]
 801bbfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801bbfe:	085b      	lsrs	r3, r3, #1
 801bc00:	b29a      	uxth	r2, r3
 801bc02:	68fb      	ldr	r3, [r7, #12]
 801bc04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bc06:	4293      	cmp	r3, r2
 801bc08:	bf28      	it	cs
 801bc0a:	4613      	movcs	r3, r2
 801bc0c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801bc0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	d102      	bne.n	801bc1a <tcp_write+0x7e>
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bc18:	e000      	b.n	801bc1c <tcp_write+0x80>
 801bc1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc1c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801bc1e:	68bb      	ldr	r3, [r7, #8]
 801bc20:	2b00      	cmp	r3, #0
 801bc22:	d109      	bne.n	801bc38 <tcp_write+0x9c>
 801bc24:	4b95      	ldr	r3, [pc, #596]	; (801be7c <tcp_write+0x2e0>)
 801bc26:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 801bc2a:	4997      	ldr	r1, [pc, #604]	; (801be88 <tcp_write+0x2ec>)
 801bc2c:	4895      	ldr	r0, [pc, #596]	; (801be84 <tcp_write+0x2e8>)
 801bc2e:	f004 fc71 	bl	8020514 <iprintf>
 801bc32:	f06f 030f 	mvn.w	r3, #15
 801bc36:	e30c      	b.n	801c252 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801bc38:	88fb      	ldrh	r3, [r7, #6]
 801bc3a:	4619      	mov	r1, r3
 801bc3c:	68f8      	ldr	r0, [r7, #12]
 801bc3e:	f7ff ff33 	bl	801baa8 <tcp_write_checks>
 801bc42:	4603      	mov	r3, r0
 801bc44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801bc48:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801bc4c:	2b00      	cmp	r3, #0
 801bc4e:	d002      	beq.n	801bc56 <tcp_write+0xba>
    return err;
 801bc50:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801bc54:	e2fd      	b.n	801c252 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 801bc56:	68fb      	ldr	r3, [r7, #12]
 801bc58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bc5c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801bc60:	2300      	movs	r3, #0
 801bc62:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801bc66:	68fb      	ldr	r3, [r7, #12]
 801bc68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	f000 80f7 	beq.w	801be5e <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801bc70:	68fb      	ldr	r3, [r7, #12]
 801bc72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bc74:	653b      	str	r3, [r7, #80]	; 0x50
 801bc76:	e002      	b.n	801bc7e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801bc78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801bc7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bc80:	681b      	ldr	r3, [r3, #0]
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	d1f8      	bne.n	801bc78 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801bc86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bc88:	7a9b      	ldrb	r3, [r3, #10]
 801bc8a:	009b      	lsls	r3, r3, #2
 801bc8c:	b29b      	uxth	r3, r3
 801bc8e:	f003 0304 	and.w	r3, r3, #4
 801bc92:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801bc94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bc96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bc98:	891b      	ldrh	r3, [r3, #8]
 801bc9a:	4619      	mov	r1, r3
 801bc9c:	8c3b      	ldrh	r3, [r7, #32]
 801bc9e:	440b      	add	r3, r1
 801bca0:	429a      	cmp	r2, r3
 801bca2:	da06      	bge.n	801bcb2 <tcp_write+0x116>
 801bca4:	4b75      	ldr	r3, [pc, #468]	; (801be7c <tcp_write+0x2e0>)
 801bca6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801bcaa:	4978      	ldr	r1, [pc, #480]	; (801be8c <tcp_write+0x2f0>)
 801bcac:	4875      	ldr	r0, [pc, #468]	; (801be84 <tcp_write+0x2e8>)
 801bcae:	f004 fc31 	bl	8020514 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801bcb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bcb4:	891a      	ldrh	r2, [r3, #8]
 801bcb6:	8c3b      	ldrh	r3, [r7, #32]
 801bcb8:	4413      	add	r3, r2
 801bcba:	b29b      	uxth	r3, r3
 801bcbc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bcbe:	1ad3      	subs	r3, r2, r3
 801bcc0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801bcc2:	68fb      	ldr	r3, [r7, #12]
 801bcc4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801bcc8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801bcca:	8a7b      	ldrh	r3, [r7, #18]
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d027      	beq.n	801bd20 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801bcd0:	8a7b      	ldrh	r3, [r7, #18]
 801bcd2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801bcd4:	429a      	cmp	r2, r3
 801bcd6:	d206      	bcs.n	801bce6 <tcp_write+0x14a>
 801bcd8:	4b68      	ldr	r3, [pc, #416]	; (801be7c <tcp_write+0x2e0>)
 801bcda:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801bcde:	496c      	ldr	r1, [pc, #432]	; (801be90 <tcp_write+0x2f4>)
 801bce0:	4868      	ldr	r0, [pc, #416]	; (801be84 <tcp_write+0x2e8>)
 801bce2:	f004 fc17 	bl	8020514 <iprintf>
      seg = last_unsent;
 801bce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bce8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801bcea:	8a7b      	ldrh	r3, [r7, #18]
 801bcec:	88fa      	ldrh	r2, [r7, #6]
 801bcee:	429a      	cmp	r2, r3
 801bcf0:	d901      	bls.n	801bcf6 <tcp_write+0x15a>
 801bcf2:	8a7b      	ldrh	r3, [r7, #18]
 801bcf4:	e000      	b.n	801bcf8 <tcp_write+0x15c>
 801bcf6:	88fb      	ldrh	r3, [r7, #6]
 801bcf8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801bcfa:	4293      	cmp	r3, r2
 801bcfc:	bfa8      	it	ge
 801bcfe:	4613      	movge	r3, r2
 801bd00:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801bd02:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bd06:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bd08:	4413      	add	r3, r2
 801bd0a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801bd0e:	8a7a      	ldrh	r2, [r7, #18]
 801bd10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bd12:	1ad3      	subs	r3, r2, r3
 801bd14:	b29b      	uxth	r3, r3
 801bd16:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801bd18:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801bd1a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bd1c:	1ad3      	subs	r3, r2, r3
 801bd1e:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801bd20:	8a7b      	ldrh	r3, [r7, #18]
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d00b      	beq.n	801bd3e <tcp_write+0x1a2>
 801bd26:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bd2a:	88fb      	ldrh	r3, [r7, #6]
 801bd2c:	429a      	cmp	r2, r3
 801bd2e:	d006      	beq.n	801bd3e <tcp_write+0x1a2>
 801bd30:	4b52      	ldr	r3, [pc, #328]	; (801be7c <tcp_write+0x2e0>)
 801bd32:	f44f 7200 	mov.w	r2, #512	; 0x200
 801bd36:	4957      	ldr	r1, [pc, #348]	; (801be94 <tcp_write+0x2f8>)
 801bd38:	4852      	ldr	r0, [pc, #328]	; (801be84 <tcp_write+0x2e8>)
 801bd3a:	f004 fbeb 	bl	8020514 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801bd3e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bd42:	88fb      	ldrh	r3, [r7, #6]
 801bd44:	429a      	cmp	r2, r3
 801bd46:	f080 8168 	bcs.w	801c01a <tcp_write+0x47e>
 801bd4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	f000 8164 	beq.w	801c01a <tcp_write+0x47e>
 801bd52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bd54:	891b      	ldrh	r3, [r3, #8]
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	f000 815f 	beq.w	801c01a <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801bd5c:	88fa      	ldrh	r2, [r7, #6]
 801bd5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bd62:	1ad2      	subs	r2, r2, r3
 801bd64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bd66:	4293      	cmp	r3, r2
 801bd68:	bfa8      	it	ge
 801bd6a:	4613      	movge	r3, r2
 801bd6c:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801bd6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bd70:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801bd72:	797b      	ldrb	r3, [r7, #5]
 801bd74:	f003 0301 	and.w	r3, r3, #1
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	d027      	beq.n	801bdcc <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801bd7c:	f107 0012 	add.w	r0, r7, #18
 801bd80:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801bd82:	8bf9      	ldrh	r1, [r7, #30]
 801bd84:	2301      	movs	r3, #1
 801bd86:	9302      	str	r3, [sp, #8]
 801bd88:	797b      	ldrb	r3, [r7, #5]
 801bd8a:	9301      	str	r3, [sp, #4]
 801bd8c:	68fb      	ldr	r3, [r7, #12]
 801bd8e:	9300      	str	r3, [sp, #0]
 801bd90:	4603      	mov	r3, r0
 801bd92:	2000      	movs	r0, #0
 801bd94:	f7ff fe0e 	bl	801b9b4 <tcp_pbuf_prealloc>
 801bd98:	6578      	str	r0, [r7, #84]	; 0x54
 801bd9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	f000 8226 	beq.w	801c1ee <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801bda2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bda4:	6858      	ldr	r0, [r3, #4]
 801bda6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bdaa:	68ba      	ldr	r2, [r7, #8]
 801bdac:	4413      	add	r3, r2
 801bdae:	8bfa      	ldrh	r2, [r7, #30]
 801bdb0:	4619      	mov	r1, r3
 801bdb2:	f004 fb9c 	bl	80204ee <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801bdb6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801bdb8:	f7fb f9f4 	bl	80171a4 <pbuf_clen>
 801bdbc:	4603      	mov	r3, r0
 801bdbe:	461a      	mov	r2, r3
 801bdc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801bdc4:	4413      	add	r3, r2
 801bdc6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801bdca:	e041      	b.n	801be50 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801bdcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bdce:	685b      	ldr	r3, [r3, #4]
 801bdd0:	637b      	str	r3, [r7, #52]	; 0x34
 801bdd2:	e002      	b.n	801bdda <tcp_write+0x23e>
 801bdd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	637b      	str	r3, [r7, #52]	; 0x34
 801bdda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bddc:	681b      	ldr	r3, [r3, #0]
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d1f8      	bne.n	801bdd4 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801bde2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bde4:	7b1b      	ldrb	r3, [r3, #12]
 801bde6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	d115      	bne.n	801be1a <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801bdee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bdf0:	685b      	ldr	r3, [r3, #4]
 801bdf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bdf4:	8952      	ldrh	r2, [r2, #10]
 801bdf6:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801bdf8:	68ba      	ldr	r2, [r7, #8]
 801bdfa:	429a      	cmp	r2, r3
 801bdfc:	d10d      	bne.n	801be1a <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801bdfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801be02:	2b00      	cmp	r3, #0
 801be04:	d006      	beq.n	801be14 <tcp_write+0x278>
 801be06:	4b1d      	ldr	r3, [pc, #116]	; (801be7c <tcp_write+0x2e0>)
 801be08:	f240 2231 	movw	r2, #561	; 0x231
 801be0c:	4922      	ldr	r1, [pc, #136]	; (801be98 <tcp_write+0x2fc>)
 801be0e:	481d      	ldr	r0, [pc, #116]	; (801be84 <tcp_write+0x2e8>)
 801be10:	f004 fb80 	bl	8020514 <iprintf>
          extendlen = seglen;
 801be14:	8bfb      	ldrh	r3, [r7, #30]
 801be16:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801be18:	e01a      	b.n	801be50 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801be1a:	8bfb      	ldrh	r3, [r7, #30]
 801be1c:	2201      	movs	r2, #1
 801be1e:	4619      	mov	r1, r3
 801be20:	2000      	movs	r0, #0
 801be22:	f7fa fe51 	bl	8016ac8 <pbuf_alloc>
 801be26:	6578      	str	r0, [r7, #84]	; 0x54
 801be28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	f000 81e1 	beq.w	801c1f2 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801be30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801be34:	68ba      	ldr	r2, [r7, #8]
 801be36:	441a      	add	r2, r3
 801be38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801be3a:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801be3c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801be3e:	f7fb f9b1 	bl	80171a4 <pbuf_clen>
 801be42:	4603      	mov	r3, r0
 801be44:	461a      	mov	r2, r3
 801be46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801be4a:	4413      	add	r3, r2
 801be4c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801be50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801be54:	8bfb      	ldrh	r3, [r7, #30]
 801be56:	4413      	add	r3, r2
 801be58:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801be5c:	e0dd      	b.n	801c01a <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801be5e:	68fb      	ldr	r3, [r7, #12]
 801be60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801be64:	2b00      	cmp	r3, #0
 801be66:	f000 80d8 	beq.w	801c01a <tcp_write+0x47e>
 801be6a:	4b04      	ldr	r3, [pc, #16]	; (801be7c <tcp_write+0x2e0>)
 801be6c:	f240 224b 	movw	r2, #587	; 0x24b
 801be70:	490a      	ldr	r1, [pc, #40]	; (801be9c <tcp_write+0x300>)
 801be72:	4804      	ldr	r0, [pc, #16]	; (801be84 <tcp_write+0x2e8>)
 801be74:	f004 fb4e 	bl	8020514 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801be78:	e0cf      	b.n	801c01a <tcp_write+0x47e>
 801be7a:	bf00      	nop
 801be7c:	080232d4 	.word	0x080232d4
 801be80:	08023474 	.word	0x08023474
 801be84:	08023328 	.word	0x08023328
 801be88:	0802348c 	.word	0x0802348c
 801be8c:	080234c0 	.word	0x080234c0
 801be90:	080234d8 	.word	0x080234d8
 801be94:	080234f8 	.word	0x080234f8
 801be98:	08023518 	.word	0x08023518
 801be9c:	08023544 	.word	0x08023544
    struct pbuf *p;
    u16_t left = len - pos;
 801bea0:	88fa      	ldrh	r2, [r7, #6]
 801bea2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bea6:	1ad3      	subs	r3, r2, r3
 801bea8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801beaa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801beae:	b29b      	uxth	r3, r3
 801beb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801beb2:	1ad3      	subs	r3, r2, r3
 801beb4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801beb6:	8b7a      	ldrh	r2, [r7, #26]
 801beb8:	8bbb      	ldrh	r3, [r7, #28]
 801beba:	4293      	cmp	r3, r2
 801bebc:	bf28      	it	cs
 801bebe:	4613      	movcs	r3, r2
 801bec0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801bec2:	797b      	ldrb	r3, [r7, #5]
 801bec4:	f003 0301 	and.w	r3, r3, #1
 801bec8:	2b00      	cmp	r3, #0
 801beca:	d036      	beq.n	801bf3a <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801becc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801bed0:	b29a      	uxth	r2, r3
 801bed2:	8b3b      	ldrh	r3, [r7, #24]
 801bed4:	4413      	add	r3, r2
 801bed6:	b299      	uxth	r1, r3
 801bed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801beda:	2b00      	cmp	r3, #0
 801bedc:	bf0c      	ite	eq
 801bede:	2301      	moveq	r3, #1
 801bee0:	2300      	movne	r3, #0
 801bee2:	b2db      	uxtb	r3, r3
 801bee4:	f107 0012 	add.w	r0, r7, #18
 801bee8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801beea:	9302      	str	r3, [sp, #8]
 801beec:	797b      	ldrb	r3, [r7, #5]
 801beee:	9301      	str	r3, [sp, #4]
 801bef0:	68fb      	ldr	r3, [r7, #12]
 801bef2:	9300      	str	r3, [sp, #0]
 801bef4:	4603      	mov	r3, r0
 801bef6:	2036      	movs	r0, #54	; 0x36
 801bef8:	f7ff fd5c 	bl	801b9b4 <tcp_pbuf_prealloc>
 801befc:	6338      	str	r0, [r7, #48]	; 0x30
 801befe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	f000 8178 	beq.w	801c1f6 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801bf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf08:	895b      	ldrh	r3, [r3, #10]
 801bf0a:	8b3a      	ldrh	r2, [r7, #24]
 801bf0c:	429a      	cmp	r2, r3
 801bf0e:	d906      	bls.n	801bf1e <tcp_write+0x382>
 801bf10:	4b8c      	ldr	r3, [pc, #560]	; (801c144 <tcp_write+0x5a8>)
 801bf12:	f240 2267 	movw	r2, #615	; 0x267
 801bf16:	498c      	ldr	r1, [pc, #560]	; (801c148 <tcp_write+0x5ac>)
 801bf18:	488c      	ldr	r0, [pc, #560]	; (801c14c <tcp_write+0x5b0>)
 801bf1a:	f004 fafb 	bl	8020514 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801bf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf20:	685a      	ldr	r2, [r3, #4]
 801bf22:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801bf26:	18d0      	adds	r0, r2, r3
 801bf28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bf2c:	68ba      	ldr	r2, [r7, #8]
 801bf2e:	4413      	add	r3, r2
 801bf30:	8b3a      	ldrh	r2, [r7, #24]
 801bf32:	4619      	mov	r1, r3
 801bf34:	f004 fadb 	bl	80204ee <memcpy>
 801bf38:	e02f      	b.n	801bf9a <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801bf3a:	8a7b      	ldrh	r3, [r7, #18]
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	d006      	beq.n	801bf4e <tcp_write+0x3b2>
 801bf40:	4b80      	ldr	r3, [pc, #512]	; (801c144 <tcp_write+0x5a8>)
 801bf42:	f240 2271 	movw	r2, #625	; 0x271
 801bf46:	4982      	ldr	r1, [pc, #520]	; (801c150 <tcp_write+0x5b4>)
 801bf48:	4880      	ldr	r0, [pc, #512]	; (801c14c <tcp_write+0x5b0>)
 801bf4a:	f004 fae3 	bl	8020514 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801bf4e:	8b3b      	ldrh	r3, [r7, #24]
 801bf50:	2201      	movs	r2, #1
 801bf52:	4619      	mov	r1, r3
 801bf54:	2036      	movs	r0, #54	; 0x36
 801bf56:	f7fa fdb7 	bl	8016ac8 <pbuf_alloc>
 801bf5a:	6178      	str	r0, [r7, #20]
 801bf5c:	697b      	ldr	r3, [r7, #20]
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	f000 814b 	beq.w	801c1fa <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801bf64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bf68:	68ba      	ldr	r2, [r7, #8]
 801bf6a:	441a      	add	r2, r3
 801bf6c:	697b      	ldr	r3, [r7, #20]
 801bf6e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801bf70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801bf74:	b29b      	uxth	r3, r3
 801bf76:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bf7a:	4619      	mov	r1, r3
 801bf7c:	2036      	movs	r0, #54	; 0x36
 801bf7e:	f7fa fda3 	bl	8016ac8 <pbuf_alloc>
 801bf82:	6338      	str	r0, [r7, #48]	; 0x30
 801bf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	d103      	bne.n	801bf92 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801bf8a:	6978      	ldr	r0, [r7, #20]
 801bf8c:	f7fb f87c 	bl	8017088 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801bf90:	e136      	b.n	801c200 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801bf92:	6979      	ldr	r1, [r7, #20]
 801bf94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bf96:	f7fb f945 	bl	8017224 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801bf9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bf9c:	f7fb f902 	bl	80171a4 <pbuf_clen>
 801bfa0:	4603      	mov	r3, r0
 801bfa2:	461a      	mov	r2, r3
 801bfa4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801bfa8:	4413      	add	r3, r2
 801bfaa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801bfae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801bfb2:	2b09      	cmp	r3, #9
 801bfb4:	d903      	bls.n	801bfbe <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801bfb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bfb8:	f7fb f866 	bl	8017088 <pbuf_free>
      goto memerr;
 801bfbc:	e120      	b.n	801c200 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801bfbe:	68fb      	ldr	r3, [r7, #12]
 801bfc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801bfc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bfc6:	441a      	add	r2, r3
 801bfc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bfcc:	9300      	str	r3, [sp, #0]
 801bfce:	4613      	mov	r3, r2
 801bfd0:	2200      	movs	r2, #0
 801bfd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bfd4:	68f8      	ldr	r0, [r7, #12]
 801bfd6:	f7ff fc4f 	bl	801b878 <tcp_create_segment>
 801bfda:	64f8      	str	r0, [r7, #76]	; 0x4c
 801bfdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	f000 810d 	beq.w	801c1fe <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801bfe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d102      	bne.n	801bff0 <tcp_write+0x454>
      queue = seg;
 801bfea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bfec:	647b      	str	r3, [r7, #68]	; 0x44
 801bfee:	e00c      	b.n	801c00a <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801bff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d106      	bne.n	801c004 <tcp_write+0x468>
 801bff6:	4b53      	ldr	r3, [pc, #332]	; (801c144 <tcp_write+0x5a8>)
 801bff8:	f240 22ab 	movw	r2, #683	; 0x2ab
 801bffc:	4955      	ldr	r1, [pc, #340]	; (801c154 <tcp_write+0x5b8>)
 801bffe:	4853      	ldr	r0, [pc, #332]	; (801c14c <tcp_write+0x5b0>)
 801c000:	f004 fa88 	bl	8020514 <iprintf>
      prev_seg->next = seg;
 801c004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c008:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801c00a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c00c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801c00e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c012:	8b3b      	ldrh	r3, [r7, #24]
 801c014:	4413      	add	r3, r2
 801c016:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801c01a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c01e:	88fb      	ldrh	r3, [r7, #6]
 801c020:	429a      	cmp	r2, r3
 801c022:	f4ff af3d 	bcc.w	801bea0 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801c026:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c028:	2b00      	cmp	r3, #0
 801c02a:	d02c      	beq.n	801c086 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801c02c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c02e:	685b      	ldr	r3, [r3, #4]
 801c030:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c032:	e01e      	b.n	801c072 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 801c034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c036:	891a      	ldrh	r2, [r3, #8]
 801c038:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c03a:	4413      	add	r3, r2
 801c03c:	b29a      	uxth	r2, r3
 801c03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c040:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801c042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c044:	681b      	ldr	r3, [r3, #0]
 801c046:	2b00      	cmp	r3, #0
 801c048:	d110      	bne.n	801c06c <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801c04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c04c:	685b      	ldr	r3, [r3, #4]
 801c04e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c050:	8952      	ldrh	r2, [r2, #10]
 801c052:	4413      	add	r3, r2
 801c054:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801c056:	68b9      	ldr	r1, [r7, #8]
 801c058:	4618      	mov	r0, r3
 801c05a:	f004 fa48 	bl	80204ee <memcpy>
        p->len += oversize_used;
 801c05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c060:	895a      	ldrh	r2, [r3, #10]
 801c062:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c064:	4413      	add	r3, r2
 801c066:	b29a      	uxth	r2, r3
 801c068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c06a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801c06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c06e:	681b      	ldr	r3, [r3, #0]
 801c070:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c074:	2b00      	cmp	r3, #0
 801c076:	d1dd      	bne.n	801c034 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 801c078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c07a:	891a      	ldrh	r2, [r3, #8]
 801c07c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c07e:	4413      	add	r3, r2
 801c080:	b29a      	uxth	r2, r3
 801c082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c084:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801c086:	8a7a      	ldrh	r2, [r7, #18]
 801c088:	68fb      	ldr	r3, [r7, #12]
 801c08a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801c08e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c090:	2b00      	cmp	r3, #0
 801c092:	d018      	beq.n	801c0c6 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801c094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c096:	2b00      	cmp	r3, #0
 801c098:	d106      	bne.n	801c0a8 <tcp_write+0x50c>
 801c09a:	4b2a      	ldr	r3, [pc, #168]	; (801c144 <tcp_write+0x5a8>)
 801c09c:	f240 22e1 	movw	r2, #737	; 0x2e1
 801c0a0:	492d      	ldr	r1, [pc, #180]	; (801c158 <tcp_write+0x5bc>)
 801c0a2:	482a      	ldr	r0, [pc, #168]	; (801c14c <tcp_write+0x5b0>)
 801c0a4:	f004 fa36 	bl	8020514 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801c0a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c0aa:	685b      	ldr	r3, [r3, #4]
 801c0ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c0ae:	4618      	mov	r0, r3
 801c0b0:	f7fb f8b8 	bl	8017224 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801c0b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c0b6:	891a      	ldrh	r2, [r3, #8]
 801c0b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c0ba:	891b      	ldrh	r3, [r3, #8]
 801c0bc:	4413      	add	r3, r2
 801c0be:	b29a      	uxth	r2, r3
 801c0c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c0c2:	811a      	strh	r2, [r3, #8]
 801c0c4:	e037      	b.n	801c136 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 801c0c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c0c8:	2b00      	cmp	r3, #0
 801c0ca:	d034      	beq.n	801c136 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801c0cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	d003      	beq.n	801c0da <tcp_write+0x53e>
 801c0d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c0d4:	685b      	ldr	r3, [r3, #4]
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d106      	bne.n	801c0e8 <tcp_write+0x54c>
 801c0da:	4b1a      	ldr	r3, [pc, #104]	; (801c144 <tcp_write+0x5a8>)
 801c0dc:	f240 22e7 	movw	r2, #743	; 0x2e7
 801c0e0:	491e      	ldr	r1, [pc, #120]	; (801c15c <tcp_write+0x5c0>)
 801c0e2:	481a      	ldr	r0, [pc, #104]	; (801c14c <tcp_write+0x5b0>)
 801c0e4:	f004 fa16 	bl	8020514 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801c0e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c0ea:	685b      	ldr	r3, [r3, #4]
 801c0ec:	62bb      	str	r3, [r7, #40]	; 0x28
 801c0ee:	e009      	b.n	801c104 <tcp_write+0x568>
      p->tot_len += extendlen;
 801c0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c0f2:	891a      	ldrh	r2, [r3, #8]
 801c0f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c0f6:	4413      	add	r3, r2
 801c0f8:	b29a      	uxth	r2, r3
 801c0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c0fc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801c0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c100:	681b      	ldr	r3, [r3, #0]
 801c102:	62bb      	str	r3, [r7, #40]	; 0x28
 801c104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c106:	681b      	ldr	r3, [r3, #0]
 801c108:	2b00      	cmp	r3, #0
 801c10a:	d1f1      	bne.n	801c0f0 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 801c10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c10e:	891a      	ldrh	r2, [r3, #8]
 801c110:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c112:	4413      	add	r3, r2
 801c114:	b29a      	uxth	r2, r3
 801c116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c118:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801c11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c11c:	895a      	ldrh	r2, [r3, #10]
 801c11e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c120:	4413      	add	r3, r2
 801c122:	b29a      	uxth	r2, r3
 801c124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c126:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801c128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c12a:	891a      	ldrh	r2, [r3, #8]
 801c12c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c12e:	4413      	add	r3, r2
 801c130:	b29a      	uxth	r2, r3
 801c132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c134:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801c136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c138:	2b00      	cmp	r3, #0
 801c13a:	d111      	bne.n	801c160 <tcp_write+0x5c4>
    pcb->unsent = queue;
 801c13c:	68fb      	ldr	r3, [r7, #12]
 801c13e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c140:	66da      	str	r2, [r3, #108]	; 0x6c
 801c142:	e010      	b.n	801c166 <tcp_write+0x5ca>
 801c144:	080232d4 	.word	0x080232d4
 801c148:	08023574 	.word	0x08023574
 801c14c:	08023328 	.word	0x08023328
 801c150:	080235b4 	.word	0x080235b4
 801c154:	080235c4 	.word	0x080235c4
 801c158:	080235d8 	.word	0x080235d8
 801c15c:	08023610 	.word	0x08023610
  } else {
    last_unsent->next = queue;
 801c160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c162:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c164:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801c166:	68fb      	ldr	r3, [r7, #12]
 801c168:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801c16a:	88fb      	ldrh	r3, [r7, #6]
 801c16c:	441a      	add	r2, r3
 801c16e:	68fb      	ldr	r3, [r7, #12]
 801c170:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801c172:	68fb      	ldr	r3, [r7, #12]
 801c174:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801c178:	88fb      	ldrh	r3, [r7, #6]
 801c17a:	1ad3      	subs	r3, r2, r3
 801c17c:	b29a      	uxth	r2, r3
 801c17e:	68fb      	ldr	r3, [r7, #12]
 801c180:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801c184:	68fb      	ldr	r3, [r7, #12]
 801c186:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801c18a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801c18e:	68fb      	ldr	r3, [r7, #12]
 801c190:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c194:	2b00      	cmp	r3, #0
 801c196:	d00e      	beq.n	801c1b6 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 801c198:	68fb      	ldr	r3, [r7, #12]
 801c19a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	d10a      	bne.n	801c1b6 <tcp_write+0x61a>
 801c1a0:	68fb      	ldr	r3, [r7, #12]
 801c1a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	d106      	bne.n	801c1b6 <tcp_write+0x61a>
 801c1a8:	4b2c      	ldr	r3, [pc, #176]	; (801c25c <tcp_write+0x6c0>)
 801c1aa:	f240 3213 	movw	r2, #787	; 0x313
 801c1ae:	492c      	ldr	r1, [pc, #176]	; (801c260 <tcp_write+0x6c4>)
 801c1b0:	482c      	ldr	r0, [pc, #176]	; (801c264 <tcp_write+0x6c8>)
 801c1b2:	f004 f9af 	bl	8020514 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801c1b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	d016      	beq.n	801c1ea <tcp_write+0x64e>
 801c1bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1be:	68db      	ldr	r3, [r3, #12]
 801c1c0:	2b00      	cmp	r3, #0
 801c1c2:	d012      	beq.n	801c1ea <tcp_write+0x64e>
 801c1c4:	797b      	ldrb	r3, [r7, #5]
 801c1c6:	f003 0302 	and.w	r3, r3, #2
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d10d      	bne.n	801c1ea <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801c1ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1d0:	68db      	ldr	r3, [r3, #12]
 801c1d2:	899b      	ldrh	r3, [r3, #12]
 801c1d4:	b29c      	uxth	r4, r3
 801c1d6:	2008      	movs	r0, #8
 801c1d8:	f7f9 fb78 	bl	80158cc <lwip_htons>
 801c1dc:	4603      	mov	r3, r0
 801c1de:	461a      	mov	r2, r3
 801c1e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1e2:	68db      	ldr	r3, [r3, #12]
 801c1e4:	4322      	orrs	r2, r4
 801c1e6:	b292      	uxth	r2, r2
 801c1e8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801c1ea:	2300      	movs	r3, #0
 801c1ec:	e031      	b.n	801c252 <tcp_write+0x6b6>
          goto memerr;
 801c1ee:	bf00      	nop
 801c1f0:	e006      	b.n	801c200 <tcp_write+0x664>
            goto memerr;
 801c1f2:	bf00      	nop
 801c1f4:	e004      	b.n	801c200 <tcp_write+0x664>
        goto memerr;
 801c1f6:	bf00      	nop
 801c1f8:	e002      	b.n	801c200 <tcp_write+0x664>
        goto memerr;
 801c1fa:	bf00      	nop
 801c1fc:	e000      	b.n	801c200 <tcp_write+0x664>
      goto memerr;
 801c1fe:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c200:	68fb      	ldr	r3, [r7, #12]
 801c202:	8b5b      	ldrh	r3, [r3, #26]
 801c204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c208:	b29a      	uxth	r2, r3
 801c20a:	68fb      	ldr	r3, [r7, #12]
 801c20c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801c20e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c210:	2b00      	cmp	r3, #0
 801c212:	d002      	beq.n	801c21a <tcp_write+0x67e>
    pbuf_free(concat_p);
 801c214:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801c216:	f7fa ff37 	bl	8017088 <pbuf_free>
  }
  if (queue != NULL) {
 801c21a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d002      	beq.n	801c226 <tcp_write+0x68a>
    tcp_segs_free(queue);
 801c220:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801c222:	f7fc fb4b 	bl	80188bc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801c226:	68fb      	ldr	r3, [r7, #12]
 801c228:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	d00e      	beq.n	801c24e <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801c230:	68fb      	ldr	r3, [r7, #12]
 801c232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c234:	2b00      	cmp	r3, #0
 801c236:	d10a      	bne.n	801c24e <tcp_write+0x6b2>
 801c238:	68fb      	ldr	r3, [r7, #12]
 801c23a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d106      	bne.n	801c24e <tcp_write+0x6b2>
 801c240:	4b06      	ldr	r3, [pc, #24]	; (801c25c <tcp_write+0x6c0>)
 801c242:	f44f 724a 	mov.w	r2, #808	; 0x328
 801c246:	4906      	ldr	r1, [pc, #24]	; (801c260 <tcp_write+0x6c4>)
 801c248:	4806      	ldr	r0, [pc, #24]	; (801c264 <tcp_write+0x6c8>)
 801c24a:	f004 f963 	bl	8020514 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801c24e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801c252:	4618      	mov	r0, r3
 801c254:	375c      	adds	r7, #92	; 0x5c
 801c256:	46bd      	mov	sp, r7
 801c258:	bd90      	pop	{r4, r7, pc}
 801c25a:	bf00      	nop
 801c25c:	080232d4 	.word	0x080232d4
 801c260:	08023648 	.word	0x08023648
 801c264:	08023328 	.word	0x08023328

0801c268 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801c268:	b590      	push	{r4, r7, lr}
 801c26a:	b08b      	sub	sp, #44	; 0x2c
 801c26c:	af02      	add	r7, sp, #8
 801c26e:	6078      	str	r0, [r7, #4]
 801c270:	460b      	mov	r3, r1
 801c272:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801c274:	2300      	movs	r3, #0
 801c276:	61fb      	str	r3, [r7, #28]
 801c278:	2300      	movs	r3, #0
 801c27a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801c27c:	2300      	movs	r3, #0
 801c27e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	2b00      	cmp	r3, #0
 801c284:	d106      	bne.n	801c294 <tcp_split_unsent_seg+0x2c>
 801c286:	4b95      	ldr	r3, [pc, #596]	; (801c4dc <tcp_split_unsent_seg+0x274>)
 801c288:	f240 324b 	movw	r2, #843	; 0x34b
 801c28c:	4994      	ldr	r1, [pc, #592]	; (801c4e0 <tcp_split_unsent_seg+0x278>)
 801c28e:	4895      	ldr	r0, [pc, #596]	; (801c4e4 <tcp_split_unsent_seg+0x27c>)
 801c290:	f004 f940 	bl	8020514 <iprintf>

  useg = pcb->unsent;
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c298:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801c29a:	697b      	ldr	r3, [r7, #20]
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	d102      	bne.n	801c2a6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801c2a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c2a4:	e116      	b.n	801c4d4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801c2a6:	887b      	ldrh	r3, [r7, #2]
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	d109      	bne.n	801c2c0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801c2ac:	4b8b      	ldr	r3, [pc, #556]	; (801c4dc <tcp_split_unsent_seg+0x274>)
 801c2ae:	f240 3253 	movw	r2, #851	; 0x353
 801c2b2:	498d      	ldr	r1, [pc, #564]	; (801c4e8 <tcp_split_unsent_seg+0x280>)
 801c2b4:	488b      	ldr	r0, [pc, #556]	; (801c4e4 <tcp_split_unsent_seg+0x27c>)
 801c2b6:	f004 f92d 	bl	8020514 <iprintf>
    return ERR_VAL;
 801c2ba:	f06f 0305 	mvn.w	r3, #5
 801c2be:	e109      	b.n	801c4d4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801c2c0:	697b      	ldr	r3, [r7, #20]
 801c2c2:	891b      	ldrh	r3, [r3, #8]
 801c2c4:	887a      	ldrh	r2, [r7, #2]
 801c2c6:	429a      	cmp	r2, r3
 801c2c8:	d301      	bcc.n	801c2ce <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801c2ca:	2300      	movs	r3, #0
 801c2cc:	e102      	b.n	801c4d4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801c2ce:	687b      	ldr	r3, [r7, #4]
 801c2d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c2d2:	887a      	ldrh	r2, [r7, #2]
 801c2d4:	429a      	cmp	r2, r3
 801c2d6:	d906      	bls.n	801c2e6 <tcp_split_unsent_seg+0x7e>
 801c2d8:	4b80      	ldr	r3, [pc, #512]	; (801c4dc <tcp_split_unsent_seg+0x274>)
 801c2da:	f240 325b 	movw	r2, #859	; 0x35b
 801c2de:	4983      	ldr	r1, [pc, #524]	; (801c4ec <tcp_split_unsent_seg+0x284>)
 801c2e0:	4880      	ldr	r0, [pc, #512]	; (801c4e4 <tcp_split_unsent_seg+0x27c>)
 801c2e2:	f004 f917 	bl	8020514 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801c2e6:	697b      	ldr	r3, [r7, #20]
 801c2e8:	891b      	ldrh	r3, [r3, #8]
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	d106      	bne.n	801c2fc <tcp_split_unsent_seg+0x94>
 801c2ee:	4b7b      	ldr	r3, [pc, #492]	; (801c4dc <tcp_split_unsent_seg+0x274>)
 801c2f0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801c2f4:	497e      	ldr	r1, [pc, #504]	; (801c4f0 <tcp_split_unsent_seg+0x288>)
 801c2f6:	487b      	ldr	r0, [pc, #492]	; (801c4e4 <tcp_split_unsent_seg+0x27c>)
 801c2f8:	f004 f90c 	bl	8020514 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801c2fc:	697b      	ldr	r3, [r7, #20]
 801c2fe:	7a9b      	ldrb	r3, [r3, #10]
 801c300:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801c302:	7bfb      	ldrb	r3, [r7, #15]
 801c304:	009b      	lsls	r3, r3, #2
 801c306:	b2db      	uxtb	r3, r3
 801c308:	f003 0304 	and.w	r3, r3, #4
 801c30c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801c30e:	697b      	ldr	r3, [r7, #20]
 801c310:	891a      	ldrh	r2, [r3, #8]
 801c312:	887b      	ldrh	r3, [r7, #2]
 801c314:	1ad3      	subs	r3, r2, r3
 801c316:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801c318:	7bbb      	ldrb	r3, [r7, #14]
 801c31a:	b29a      	uxth	r2, r3
 801c31c:	89bb      	ldrh	r3, [r7, #12]
 801c31e:	4413      	add	r3, r2
 801c320:	b29b      	uxth	r3, r3
 801c322:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c326:	4619      	mov	r1, r3
 801c328:	2036      	movs	r0, #54	; 0x36
 801c32a:	f7fa fbcd 	bl	8016ac8 <pbuf_alloc>
 801c32e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c330:	693b      	ldr	r3, [r7, #16]
 801c332:	2b00      	cmp	r3, #0
 801c334:	f000 80b7 	beq.w	801c4a6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801c338:	697b      	ldr	r3, [r7, #20]
 801c33a:	685b      	ldr	r3, [r3, #4]
 801c33c:	891a      	ldrh	r2, [r3, #8]
 801c33e:	697b      	ldr	r3, [r7, #20]
 801c340:	891b      	ldrh	r3, [r3, #8]
 801c342:	1ad3      	subs	r3, r2, r3
 801c344:	b29a      	uxth	r2, r3
 801c346:	887b      	ldrh	r3, [r7, #2]
 801c348:	4413      	add	r3, r2
 801c34a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801c34c:	697b      	ldr	r3, [r7, #20]
 801c34e:	6858      	ldr	r0, [r3, #4]
 801c350:	693b      	ldr	r3, [r7, #16]
 801c352:	685a      	ldr	r2, [r3, #4]
 801c354:	7bbb      	ldrb	r3, [r7, #14]
 801c356:	18d1      	adds	r1, r2, r3
 801c358:	897b      	ldrh	r3, [r7, #10]
 801c35a:	89ba      	ldrh	r2, [r7, #12]
 801c35c:	f7fb f88a 	bl	8017474 <pbuf_copy_partial>
 801c360:	4603      	mov	r3, r0
 801c362:	461a      	mov	r2, r3
 801c364:	89bb      	ldrh	r3, [r7, #12]
 801c366:	4293      	cmp	r3, r2
 801c368:	f040 809f 	bne.w	801c4aa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801c36c:	697b      	ldr	r3, [r7, #20]
 801c36e:	68db      	ldr	r3, [r3, #12]
 801c370:	899b      	ldrh	r3, [r3, #12]
 801c372:	b29b      	uxth	r3, r3
 801c374:	4618      	mov	r0, r3
 801c376:	f7f9 faa9 	bl	80158cc <lwip_htons>
 801c37a:	4603      	mov	r3, r0
 801c37c:	b2db      	uxtb	r3, r3
 801c37e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c382:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801c384:	2300      	movs	r3, #0
 801c386:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801c388:	7efb      	ldrb	r3, [r7, #27]
 801c38a:	f003 0308 	and.w	r3, r3, #8
 801c38e:	2b00      	cmp	r3, #0
 801c390:	d007      	beq.n	801c3a2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801c392:	7efb      	ldrb	r3, [r7, #27]
 801c394:	f023 0308 	bic.w	r3, r3, #8
 801c398:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801c39a:	7ebb      	ldrb	r3, [r7, #26]
 801c39c:	f043 0308 	orr.w	r3, r3, #8
 801c3a0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801c3a2:	7efb      	ldrb	r3, [r7, #27]
 801c3a4:	f003 0301 	and.w	r3, r3, #1
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	d007      	beq.n	801c3bc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801c3ac:	7efb      	ldrb	r3, [r7, #27]
 801c3ae:	f023 0301 	bic.w	r3, r3, #1
 801c3b2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801c3b4:	7ebb      	ldrb	r3, [r7, #26]
 801c3b6:	f043 0301 	orr.w	r3, r3, #1
 801c3ba:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801c3bc:	697b      	ldr	r3, [r7, #20]
 801c3be:	68db      	ldr	r3, [r3, #12]
 801c3c0:	685b      	ldr	r3, [r3, #4]
 801c3c2:	4618      	mov	r0, r3
 801c3c4:	f7f9 fa97 	bl	80158f6 <lwip_htonl>
 801c3c8:	4602      	mov	r2, r0
 801c3ca:	887b      	ldrh	r3, [r7, #2]
 801c3cc:	18d1      	adds	r1, r2, r3
 801c3ce:	7eba      	ldrb	r2, [r7, #26]
 801c3d0:	7bfb      	ldrb	r3, [r7, #15]
 801c3d2:	9300      	str	r3, [sp, #0]
 801c3d4:	460b      	mov	r3, r1
 801c3d6:	6939      	ldr	r1, [r7, #16]
 801c3d8:	6878      	ldr	r0, [r7, #4]
 801c3da:	f7ff fa4d 	bl	801b878 <tcp_create_segment>
 801c3de:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801c3e0:	69fb      	ldr	r3, [r7, #28]
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	d063      	beq.n	801c4ae <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801c3e6:	697b      	ldr	r3, [r7, #20]
 801c3e8:	685b      	ldr	r3, [r3, #4]
 801c3ea:	4618      	mov	r0, r3
 801c3ec:	f7fa feda 	bl	80171a4 <pbuf_clen>
 801c3f0:	4603      	mov	r3, r0
 801c3f2:	461a      	mov	r2, r3
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c3fa:	1a9b      	subs	r3, r3, r2
 801c3fc:	b29a      	uxth	r2, r3
 801c3fe:	687b      	ldr	r3, [r7, #4]
 801c400:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801c404:	697b      	ldr	r3, [r7, #20]
 801c406:	6858      	ldr	r0, [r3, #4]
 801c408:	697b      	ldr	r3, [r7, #20]
 801c40a:	685b      	ldr	r3, [r3, #4]
 801c40c:	891a      	ldrh	r2, [r3, #8]
 801c40e:	89bb      	ldrh	r3, [r7, #12]
 801c410:	1ad3      	subs	r3, r2, r3
 801c412:	b29b      	uxth	r3, r3
 801c414:	4619      	mov	r1, r3
 801c416:	f7fa fcb1 	bl	8016d7c <pbuf_realloc>
  useg->len -= remainder;
 801c41a:	697b      	ldr	r3, [r7, #20]
 801c41c:	891a      	ldrh	r2, [r3, #8]
 801c41e:	89bb      	ldrh	r3, [r7, #12]
 801c420:	1ad3      	subs	r3, r2, r3
 801c422:	b29a      	uxth	r2, r3
 801c424:	697b      	ldr	r3, [r7, #20]
 801c426:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801c428:	697b      	ldr	r3, [r7, #20]
 801c42a:	68db      	ldr	r3, [r3, #12]
 801c42c:	899b      	ldrh	r3, [r3, #12]
 801c42e:	b29c      	uxth	r4, r3
 801c430:	7efb      	ldrb	r3, [r7, #27]
 801c432:	b29b      	uxth	r3, r3
 801c434:	4618      	mov	r0, r3
 801c436:	f7f9 fa49 	bl	80158cc <lwip_htons>
 801c43a:	4603      	mov	r3, r0
 801c43c:	461a      	mov	r2, r3
 801c43e:	697b      	ldr	r3, [r7, #20]
 801c440:	68db      	ldr	r3, [r3, #12]
 801c442:	4322      	orrs	r2, r4
 801c444:	b292      	uxth	r2, r2
 801c446:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801c448:	697b      	ldr	r3, [r7, #20]
 801c44a:	685b      	ldr	r3, [r3, #4]
 801c44c:	4618      	mov	r0, r3
 801c44e:	f7fa fea9 	bl	80171a4 <pbuf_clen>
 801c452:	4603      	mov	r3, r0
 801c454:	461a      	mov	r2, r3
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c45c:	4413      	add	r3, r2
 801c45e:	b29a      	uxth	r2, r3
 801c460:	687b      	ldr	r3, [r7, #4]
 801c462:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801c466:	69fb      	ldr	r3, [r7, #28]
 801c468:	685b      	ldr	r3, [r3, #4]
 801c46a:	4618      	mov	r0, r3
 801c46c:	f7fa fe9a 	bl	80171a4 <pbuf_clen>
 801c470:	4603      	mov	r3, r0
 801c472:	461a      	mov	r2, r3
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c47a:	4413      	add	r3, r2
 801c47c:	b29a      	uxth	r2, r3
 801c47e:	687b      	ldr	r3, [r7, #4]
 801c480:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801c484:	697b      	ldr	r3, [r7, #20]
 801c486:	681a      	ldr	r2, [r3, #0]
 801c488:	69fb      	ldr	r3, [r7, #28]
 801c48a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801c48c:	697b      	ldr	r3, [r7, #20]
 801c48e:	69fa      	ldr	r2, [r7, #28]
 801c490:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801c492:	69fb      	ldr	r3, [r7, #28]
 801c494:	681b      	ldr	r3, [r3, #0]
 801c496:	2b00      	cmp	r3, #0
 801c498:	d103      	bne.n	801c4a2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	2200      	movs	r2, #0
 801c49e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801c4a2:	2300      	movs	r3, #0
 801c4a4:	e016      	b.n	801c4d4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801c4a6:	bf00      	nop
 801c4a8:	e002      	b.n	801c4b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801c4aa:	bf00      	nop
 801c4ac:	e000      	b.n	801c4b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801c4ae:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801c4b0:	69fb      	ldr	r3, [r7, #28]
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d006      	beq.n	801c4c4 <tcp_split_unsent_seg+0x25c>
 801c4b6:	4b09      	ldr	r3, [pc, #36]	; (801c4dc <tcp_split_unsent_seg+0x274>)
 801c4b8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801c4bc:	490d      	ldr	r1, [pc, #52]	; (801c4f4 <tcp_split_unsent_seg+0x28c>)
 801c4be:	4809      	ldr	r0, [pc, #36]	; (801c4e4 <tcp_split_unsent_seg+0x27c>)
 801c4c0:	f004 f828 	bl	8020514 <iprintf>
  if (p != NULL) {
 801c4c4:	693b      	ldr	r3, [r7, #16]
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	d002      	beq.n	801c4d0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801c4ca:	6938      	ldr	r0, [r7, #16]
 801c4cc:	f7fa fddc 	bl	8017088 <pbuf_free>
  }

  return ERR_MEM;
 801c4d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801c4d4:	4618      	mov	r0, r3
 801c4d6:	3724      	adds	r7, #36	; 0x24
 801c4d8:	46bd      	mov	sp, r7
 801c4da:	bd90      	pop	{r4, r7, pc}
 801c4dc:	080232d4 	.word	0x080232d4
 801c4e0:	08023668 	.word	0x08023668
 801c4e4:	08023328 	.word	0x08023328
 801c4e8:	0802368c 	.word	0x0802368c
 801c4ec:	080236b0 	.word	0x080236b0
 801c4f0:	080236c0 	.word	0x080236c0
 801c4f4:	080236d0 	.word	0x080236d0

0801c4f8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801c4f8:	b590      	push	{r4, r7, lr}
 801c4fa:	b085      	sub	sp, #20
 801c4fc:	af00      	add	r7, sp, #0
 801c4fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	2b00      	cmp	r3, #0
 801c504:	d106      	bne.n	801c514 <tcp_send_fin+0x1c>
 801c506:	4b21      	ldr	r3, [pc, #132]	; (801c58c <tcp_send_fin+0x94>)
 801c508:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801c50c:	4920      	ldr	r1, [pc, #128]	; (801c590 <tcp_send_fin+0x98>)
 801c50e:	4821      	ldr	r0, [pc, #132]	; (801c594 <tcp_send_fin+0x9c>)
 801c510:	f004 f800 	bl	8020514 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c518:	2b00      	cmp	r3, #0
 801c51a:	d02e      	beq.n	801c57a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c520:	60fb      	str	r3, [r7, #12]
 801c522:	e002      	b.n	801c52a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801c524:	68fb      	ldr	r3, [r7, #12]
 801c526:	681b      	ldr	r3, [r3, #0]
 801c528:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c52a:	68fb      	ldr	r3, [r7, #12]
 801c52c:	681b      	ldr	r3, [r3, #0]
 801c52e:	2b00      	cmp	r3, #0
 801c530:	d1f8      	bne.n	801c524 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801c532:	68fb      	ldr	r3, [r7, #12]
 801c534:	68db      	ldr	r3, [r3, #12]
 801c536:	899b      	ldrh	r3, [r3, #12]
 801c538:	b29b      	uxth	r3, r3
 801c53a:	4618      	mov	r0, r3
 801c53c:	f7f9 f9c6 	bl	80158cc <lwip_htons>
 801c540:	4603      	mov	r3, r0
 801c542:	b2db      	uxtb	r3, r3
 801c544:	f003 0307 	and.w	r3, r3, #7
 801c548:	2b00      	cmp	r3, #0
 801c54a:	d116      	bne.n	801c57a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	68db      	ldr	r3, [r3, #12]
 801c550:	899b      	ldrh	r3, [r3, #12]
 801c552:	b29c      	uxth	r4, r3
 801c554:	2001      	movs	r0, #1
 801c556:	f7f9 f9b9 	bl	80158cc <lwip_htons>
 801c55a:	4603      	mov	r3, r0
 801c55c:	461a      	mov	r2, r3
 801c55e:	68fb      	ldr	r3, [r7, #12]
 801c560:	68db      	ldr	r3, [r3, #12]
 801c562:	4322      	orrs	r2, r4
 801c564:	b292      	uxth	r2, r2
 801c566:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	8b5b      	ldrh	r3, [r3, #26]
 801c56c:	f043 0320 	orr.w	r3, r3, #32
 801c570:	b29a      	uxth	r2, r3
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801c576:	2300      	movs	r3, #0
 801c578:	e004      	b.n	801c584 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801c57a:	2101      	movs	r1, #1
 801c57c:	6878      	ldr	r0, [r7, #4]
 801c57e:	f000 f80b 	bl	801c598 <tcp_enqueue_flags>
 801c582:	4603      	mov	r3, r0
}
 801c584:	4618      	mov	r0, r3
 801c586:	3714      	adds	r7, #20
 801c588:	46bd      	mov	sp, r7
 801c58a:	bd90      	pop	{r4, r7, pc}
 801c58c:	080232d4 	.word	0x080232d4
 801c590:	080236dc 	.word	0x080236dc
 801c594:	08023328 	.word	0x08023328

0801c598 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801c598:	b580      	push	{r7, lr}
 801c59a:	b08a      	sub	sp, #40	; 0x28
 801c59c:	af02      	add	r7, sp, #8
 801c59e:	6078      	str	r0, [r7, #4]
 801c5a0:	460b      	mov	r3, r1
 801c5a2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801c5a4:	2300      	movs	r3, #0
 801c5a6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801c5a8:	2300      	movs	r3, #0
 801c5aa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801c5ac:	78fb      	ldrb	r3, [r7, #3]
 801c5ae:	f003 0303 	and.w	r3, r3, #3
 801c5b2:	2b00      	cmp	r3, #0
 801c5b4:	d106      	bne.n	801c5c4 <tcp_enqueue_flags+0x2c>
 801c5b6:	4b67      	ldr	r3, [pc, #412]	; (801c754 <tcp_enqueue_flags+0x1bc>)
 801c5b8:	f240 4212 	movw	r2, #1042	; 0x412
 801c5bc:	4966      	ldr	r1, [pc, #408]	; (801c758 <tcp_enqueue_flags+0x1c0>)
 801c5be:	4867      	ldr	r0, [pc, #412]	; (801c75c <tcp_enqueue_flags+0x1c4>)
 801c5c0:	f003 ffa8 	bl	8020514 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	2b00      	cmp	r3, #0
 801c5c8:	d106      	bne.n	801c5d8 <tcp_enqueue_flags+0x40>
 801c5ca:	4b62      	ldr	r3, [pc, #392]	; (801c754 <tcp_enqueue_flags+0x1bc>)
 801c5cc:	f240 4213 	movw	r2, #1043	; 0x413
 801c5d0:	4963      	ldr	r1, [pc, #396]	; (801c760 <tcp_enqueue_flags+0x1c8>)
 801c5d2:	4862      	ldr	r0, [pc, #392]	; (801c75c <tcp_enqueue_flags+0x1c4>)
 801c5d4:	f003 ff9e 	bl	8020514 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801c5d8:	78fb      	ldrb	r3, [r7, #3]
 801c5da:	f003 0302 	and.w	r3, r3, #2
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d001      	beq.n	801c5e6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801c5e2:	2301      	movs	r3, #1
 801c5e4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801c5e6:	7ffb      	ldrb	r3, [r7, #31]
 801c5e8:	009b      	lsls	r3, r3, #2
 801c5ea:	b2db      	uxtb	r3, r3
 801c5ec:	f003 0304 	and.w	r3, r3, #4
 801c5f0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801c5f2:	7dfb      	ldrb	r3, [r7, #23]
 801c5f4:	b29b      	uxth	r3, r3
 801c5f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c5fa:	4619      	mov	r1, r3
 801c5fc:	2036      	movs	r0, #54	; 0x36
 801c5fe:	f7fa fa63 	bl	8016ac8 <pbuf_alloc>
 801c602:	6138      	str	r0, [r7, #16]
 801c604:	693b      	ldr	r3, [r7, #16]
 801c606:	2b00      	cmp	r3, #0
 801c608:	d109      	bne.n	801c61e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c60a:	687b      	ldr	r3, [r7, #4]
 801c60c:	8b5b      	ldrh	r3, [r3, #26]
 801c60e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c612:	b29a      	uxth	r2, r3
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801c618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c61c:	e095      	b.n	801c74a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801c61e:	693b      	ldr	r3, [r7, #16]
 801c620:	895a      	ldrh	r2, [r3, #10]
 801c622:	7dfb      	ldrb	r3, [r7, #23]
 801c624:	b29b      	uxth	r3, r3
 801c626:	429a      	cmp	r2, r3
 801c628:	d206      	bcs.n	801c638 <tcp_enqueue_flags+0xa0>
 801c62a:	4b4a      	ldr	r3, [pc, #296]	; (801c754 <tcp_enqueue_flags+0x1bc>)
 801c62c:	f240 423a 	movw	r2, #1082	; 0x43a
 801c630:	494c      	ldr	r1, [pc, #304]	; (801c764 <tcp_enqueue_flags+0x1cc>)
 801c632:	484a      	ldr	r0, [pc, #296]	; (801c75c <tcp_enqueue_flags+0x1c4>)
 801c634:	f003 ff6e 	bl	8020514 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801c63c:	78fa      	ldrb	r2, [r7, #3]
 801c63e:	7ffb      	ldrb	r3, [r7, #31]
 801c640:	9300      	str	r3, [sp, #0]
 801c642:	460b      	mov	r3, r1
 801c644:	6939      	ldr	r1, [r7, #16]
 801c646:	6878      	ldr	r0, [r7, #4]
 801c648:	f7ff f916 	bl	801b878 <tcp_create_segment>
 801c64c:	60f8      	str	r0, [r7, #12]
 801c64e:	68fb      	ldr	r3, [r7, #12]
 801c650:	2b00      	cmp	r3, #0
 801c652:	d109      	bne.n	801c668 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	8b5b      	ldrh	r3, [r3, #26]
 801c658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c65c:	b29a      	uxth	r2, r3
 801c65e:	687b      	ldr	r3, [r7, #4]
 801c660:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801c662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c666:	e070      	b.n	801c74a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801c668:	68fb      	ldr	r3, [r7, #12]
 801c66a:	68db      	ldr	r3, [r3, #12]
 801c66c:	f003 0303 	and.w	r3, r3, #3
 801c670:	2b00      	cmp	r3, #0
 801c672:	d006      	beq.n	801c682 <tcp_enqueue_flags+0xea>
 801c674:	4b37      	ldr	r3, [pc, #220]	; (801c754 <tcp_enqueue_flags+0x1bc>)
 801c676:	f240 4242 	movw	r2, #1090	; 0x442
 801c67a:	493b      	ldr	r1, [pc, #236]	; (801c768 <tcp_enqueue_flags+0x1d0>)
 801c67c:	4837      	ldr	r0, [pc, #220]	; (801c75c <tcp_enqueue_flags+0x1c4>)
 801c67e:	f003 ff49 	bl	8020514 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801c682:	68fb      	ldr	r3, [r7, #12]
 801c684:	891b      	ldrh	r3, [r3, #8]
 801c686:	2b00      	cmp	r3, #0
 801c688:	d006      	beq.n	801c698 <tcp_enqueue_flags+0x100>
 801c68a:	4b32      	ldr	r3, [pc, #200]	; (801c754 <tcp_enqueue_flags+0x1bc>)
 801c68c:	f240 4243 	movw	r2, #1091	; 0x443
 801c690:	4936      	ldr	r1, [pc, #216]	; (801c76c <tcp_enqueue_flags+0x1d4>)
 801c692:	4832      	ldr	r0, [pc, #200]	; (801c75c <tcp_enqueue_flags+0x1c4>)
 801c694:	f003 ff3e 	bl	8020514 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d103      	bne.n	801c6a8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	68fa      	ldr	r2, [r7, #12]
 801c6a4:	66da      	str	r2, [r3, #108]	; 0x6c
 801c6a6:	e00d      	b.n	801c6c4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c6ac:	61bb      	str	r3, [r7, #24]
 801c6ae:	e002      	b.n	801c6b6 <tcp_enqueue_flags+0x11e>
 801c6b0:	69bb      	ldr	r3, [r7, #24]
 801c6b2:	681b      	ldr	r3, [r3, #0]
 801c6b4:	61bb      	str	r3, [r7, #24]
 801c6b6:	69bb      	ldr	r3, [r7, #24]
 801c6b8:	681b      	ldr	r3, [r3, #0]
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	d1f8      	bne.n	801c6b0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801c6be:	69bb      	ldr	r3, [r7, #24]
 801c6c0:	68fa      	ldr	r2, [r7, #12]
 801c6c2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	2200      	movs	r2, #0
 801c6c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801c6cc:	78fb      	ldrb	r3, [r7, #3]
 801c6ce:	f003 0302 	and.w	r3, r3, #2
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	d104      	bne.n	801c6e0 <tcp_enqueue_flags+0x148>
 801c6d6:	78fb      	ldrb	r3, [r7, #3]
 801c6d8:	f003 0301 	and.w	r3, r3, #1
 801c6dc:	2b00      	cmp	r3, #0
 801c6de:	d004      	beq.n	801c6ea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c6e4:	1c5a      	adds	r2, r3, #1
 801c6e6:	687b      	ldr	r3, [r7, #4]
 801c6e8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801c6ea:	78fb      	ldrb	r3, [r7, #3]
 801c6ec:	f003 0301 	and.w	r3, r3, #1
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	d006      	beq.n	801c702 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801c6f4:	687b      	ldr	r3, [r7, #4]
 801c6f6:	8b5b      	ldrh	r3, [r3, #26]
 801c6f8:	f043 0320 	orr.w	r3, r3, #32
 801c6fc:	b29a      	uxth	r2, r3
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	685b      	ldr	r3, [r3, #4]
 801c706:	4618      	mov	r0, r3
 801c708:	f7fa fd4c 	bl	80171a4 <pbuf_clen>
 801c70c:	4603      	mov	r3, r0
 801c70e:	461a      	mov	r2, r3
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c716:	4413      	add	r3, r2
 801c718:	b29a      	uxth	r2, r3
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801c720:	687b      	ldr	r3, [r7, #4]
 801c722:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c726:	2b00      	cmp	r3, #0
 801c728:	d00e      	beq.n	801c748 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c72e:	2b00      	cmp	r3, #0
 801c730:	d10a      	bne.n	801c748 <tcp_enqueue_flags+0x1b0>
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c736:	2b00      	cmp	r3, #0
 801c738:	d106      	bne.n	801c748 <tcp_enqueue_flags+0x1b0>
 801c73a:	4b06      	ldr	r3, [pc, #24]	; (801c754 <tcp_enqueue_flags+0x1bc>)
 801c73c:	f240 4266 	movw	r2, #1126	; 0x466
 801c740:	490b      	ldr	r1, [pc, #44]	; (801c770 <tcp_enqueue_flags+0x1d8>)
 801c742:	4806      	ldr	r0, [pc, #24]	; (801c75c <tcp_enqueue_flags+0x1c4>)
 801c744:	f003 fee6 	bl	8020514 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801c748:	2300      	movs	r3, #0
}
 801c74a:	4618      	mov	r0, r3
 801c74c:	3720      	adds	r7, #32
 801c74e:	46bd      	mov	sp, r7
 801c750:	bd80      	pop	{r7, pc}
 801c752:	bf00      	nop
 801c754:	080232d4 	.word	0x080232d4
 801c758:	080236f8 	.word	0x080236f8
 801c75c:	08023328 	.word	0x08023328
 801c760:	08023750 	.word	0x08023750
 801c764:	08023770 	.word	0x08023770
 801c768:	080237ac 	.word	0x080237ac
 801c76c:	080237c4 	.word	0x080237c4
 801c770:	080237f0 	.word	0x080237f0

0801c774 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801c774:	b5b0      	push	{r4, r5, r7, lr}
 801c776:	b08a      	sub	sp, #40	; 0x28
 801c778:	af00      	add	r7, sp, #0
 801c77a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d106      	bne.n	801c790 <tcp_output+0x1c>
 801c782:	4ba0      	ldr	r3, [pc, #640]	; (801ca04 <tcp_output+0x290>)
 801c784:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801c788:	499f      	ldr	r1, [pc, #636]	; (801ca08 <tcp_output+0x294>)
 801c78a:	48a0      	ldr	r0, [pc, #640]	; (801ca0c <tcp_output+0x298>)
 801c78c:	f003 fec2 	bl	8020514 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	7d1b      	ldrb	r3, [r3, #20]
 801c794:	2b01      	cmp	r3, #1
 801c796:	d106      	bne.n	801c7a6 <tcp_output+0x32>
 801c798:	4b9a      	ldr	r3, [pc, #616]	; (801ca04 <tcp_output+0x290>)
 801c79a:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801c79e:	499c      	ldr	r1, [pc, #624]	; (801ca10 <tcp_output+0x29c>)
 801c7a0:	489a      	ldr	r0, [pc, #616]	; (801ca0c <tcp_output+0x298>)
 801c7a2:	f003 feb7 	bl	8020514 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801c7a6:	4b9b      	ldr	r3, [pc, #620]	; (801ca14 <tcp_output+0x2a0>)
 801c7a8:	681b      	ldr	r3, [r3, #0]
 801c7aa:	687a      	ldr	r2, [r7, #4]
 801c7ac:	429a      	cmp	r2, r3
 801c7ae:	d101      	bne.n	801c7b4 <tcp_output+0x40>
    return ERR_OK;
 801c7b0:	2300      	movs	r3, #0
 801c7b2:	e1d2      	b.n	801cb5a <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801c7ba:	687b      	ldr	r3, [r7, #4]
 801c7bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c7c0:	429a      	cmp	r2, r3
 801c7c2:	d203      	bcs.n	801c7cc <tcp_output+0x58>
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c7ca:	e002      	b.n	801c7d2 <tcp_output+0x5e>
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c7d2:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c7d8:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801c7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d10b      	bne.n	801c7f8 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	8b5b      	ldrh	r3, [r3, #26]
 801c7e4:	f003 0302 	and.w	r3, r3, #2
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	f000 81a9 	beq.w	801cb40 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801c7ee:	6878      	ldr	r0, [r7, #4]
 801c7f0:	f000 fdd8 	bl	801d3a4 <tcp_send_empty_ack>
 801c7f4:	4603      	mov	r3, r0
 801c7f6:	e1b0      	b.n	801cb5a <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801c7f8:	6879      	ldr	r1, [r7, #4]
 801c7fa:	687b      	ldr	r3, [r7, #4]
 801c7fc:	3304      	adds	r3, #4
 801c7fe:	461a      	mov	r2, r3
 801c800:	6878      	ldr	r0, [r7, #4]
 801c802:	f7ff f81d 	bl	801b840 <tcp_route>
 801c806:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801c808:	697b      	ldr	r3, [r7, #20]
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d102      	bne.n	801c814 <tcp_output+0xa0>
    return ERR_RTE;
 801c80e:	f06f 0303 	mvn.w	r3, #3
 801c812:	e1a2      	b.n	801cb5a <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	2b00      	cmp	r3, #0
 801c818:	d003      	beq.n	801c822 <tcp_output+0xae>
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	681b      	ldr	r3, [r3, #0]
 801c81e:	2b00      	cmp	r3, #0
 801c820:	d111      	bne.n	801c846 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801c822:	697b      	ldr	r3, [r7, #20]
 801c824:	2b00      	cmp	r3, #0
 801c826:	d002      	beq.n	801c82e <tcp_output+0xba>
 801c828:	697b      	ldr	r3, [r7, #20]
 801c82a:	3304      	adds	r3, #4
 801c82c:	e000      	b.n	801c830 <tcp_output+0xbc>
 801c82e:	2300      	movs	r3, #0
 801c830:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801c832:	693b      	ldr	r3, [r7, #16]
 801c834:	2b00      	cmp	r3, #0
 801c836:	d102      	bne.n	801c83e <tcp_output+0xca>
      return ERR_RTE;
 801c838:	f06f 0303 	mvn.w	r3, #3
 801c83c:	e18d      	b.n	801cb5a <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801c83e:	693b      	ldr	r3, [r7, #16]
 801c840:	681a      	ldr	r2, [r3, #0]
 801c842:	687b      	ldr	r3, [r7, #4]
 801c844:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801c846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c848:	68db      	ldr	r3, [r3, #12]
 801c84a:	685b      	ldr	r3, [r3, #4]
 801c84c:	4618      	mov	r0, r3
 801c84e:	f7f9 f852 	bl	80158f6 <lwip_htonl>
 801c852:	4602      	mov	r2, r0
 801c854:	687b      	ldr	r3, [r7, #4]
 801c856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c858:	1ad3      	subs	r3, r2, r3
 801c85a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c85c:	8912      	ldrh	r2, [r2, #8]
 801c85e:	4413      	add	r3, r2
 801c860:	69ba      	ldr	r2, [r7, #24]
 801c862:	429a      	cmp	r2, r3
 801c864:	d227      	bcs.n	801c8b6 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c86c:	461a      	mov	r2, r3
 801c86e:	69bb      	ldr	r3, [r7, #24]
 801c870:	4293      	cmp	r3, r2
 801c872:	d114      	bne.n	801c89e <tcp_output+0x12a>
 801c874:	687b      	ldr	r3, [r7, #4]
 801c876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c878:	2b00      	cmp	r3, #0
 801c87a:	d110      	bne.n	801c89e <tcp_output+0x12a>
 801c87c:	687b      	ldr	r3, [r7, #4]
 801c87e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801c882:	2b00      	cmp	r3, #0
 801c884:	d10b      	bne.n	801c89e <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 801c886:	687b      	ldr	r3, [r7, #4]
 801c888:	2200      	movs	r2, #0
 801c88a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	2201      	movs	r2, #1
 801c892:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801c896:	687b      	ldr	r3, [r7, #4]
 801c898:	2200      	movs	r2, #0
 801c89a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801c89e:	687b      	ldr	r3, [r7, #4]
 801c8a0:	8b5b      	ldrh	r3, [r3, #26]
 801c8a2:	f003 0302 	and.w	r3, r3, #2
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	f000 814c 	beq.w	801cb44 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801c8ac:	6878      	ldr	r0, [r7, #4]
 801c8ae:	f000 fd79 	bl	801d3a4 <tcp_send_empty_ack>
 801c8b2:	4603      	mov	r3, r0
 801c8b4:	e151      	b.n	801cb5a <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801c8b6:	687b      	ldr	r3, [r7, #4]
 801c8b8:	2200      	movs	r2, #0
 801c8ba:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c8c2:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801c8c4:	6a3b      	ldr	r3, [r7, #32]
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	f000 811b 	beq.w	801cb02 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801c8cc:	e002      	b.n	801c8d4 <tcp_output+0x160>
 801c8ce:	6a3b      	ldr	r3, [r7, #32]
 801c8d0:	681b      	ldr	r3, [r3, #0]
 801c8d2:	623b      	str	r3, [r7, #32]
 801c8d4:	6a3b      	ldr	r3, [r7, #32]
 801c8d6:	681b      	ldr	r3, [r3, #0]
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d1f8      	bne.n	801c8ce <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801c8dc:	e111      	b.n	801cb02 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801c8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8e0:	68db      	ldr	r3, [r3, #12]
 801c8e2:	899b      	ldrh	r3, [r3, #12]
 801c8e4:	b29b      	uxth	r3, r3
 801c8e6:	4618      	mov	r0, r3
 801c8e8:	f7f8 fff0 	bl	80158cc <lwip_htons>
 801c8ec:	4603      	mov	r3, r0
 801c8ee:	b2db      	uxtb	r3, r3
 801c8f0:	f003 0304 	and.w	r3, r3, #4
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	d006      	beq.n	801c906 <tcp_output+0x192>
 801c8f8:	4b42      	ldr	r3, [pc, #264]	; (801ca04 <tcp_output+0x290>)
 801c8fa:	f240 5237 	movw	r2, #1335	; 0x537
 801c8fe:	4946      	ldr	r1, [pc, #280]	; (801ca18 <tcp_output+0x2a4>)
 801c900:	4842      	ldr	r0, [pc, #264]	; (801ca0c <tcp_output+0x298>)
 801c902:	f003 fe07 	bl	8020514 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801c906:	687b      	ldr	r3, [r7, #4]
 801c908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c90a:	2b00      	cmp	r3, #0
 801c90c:	d01f      	beq.n	801c94e <tcp_output+0x1da>
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	8b5b      	ldrh	r3, [r3, #26]
 801c912:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801c916:	2b00      	cmp	r3, #0
 801c918:	d119      	bne.n	801c94e <tcp_output+0x1da>
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d00b      	beq.n	801c93a <tcp_output+0x1c6>
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c926:	681b      	ldr	r3, [r3, #0]
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d110      	bne.n	801c94e <tcp_output+0x1da>
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c930:	891a      	ldrh	r2, [r3, #8]
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c936:	429a      	cmp	r2, r3
 801c938:	d209      	bcs.n	801c94e <tcp_output+0x1da>
 801c93a:	687b      	ldr	r3, [r7, #4]
 801c93c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801c940:	2b00      	cmp	r3, #0
 801c942:	d004      	beq.n	801c94e <tcp_output+0x1da>
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c94a:	2b08      	cmp	r3, #8
 801c94c:	d901      	bls.n	801c952 <tcp_output+0x1de>
 801c94e:	2301      	movs	r3, #1
 801c950:	e000      	b.n	801c954 <tcp_output+0x1e0>
 801c952:	2300      	movs	r3, #0
 801c954:	2b00      	cmp	r3, #0
 801c956:	d106      	bne.n	801c966 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801c958:	687b      	ldr	r3, [r7, #4]
 801c95a:	8b5b      	ldrh	r3, [r3, #26]
 801c95c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801c960:	2b00      	cmp	r3, #0
 801c962:	f000 80e3 	beq.w	801cb2c <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	7d1b      	ldrb	r3, [r3, #20]
 801c96a:	2b02      	cmp	r3, #2
 801c96c:	d00d      	beq.n	801c98a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801c96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c970:	68db      	ldr	r3, [r3, #12]
 801c972:	899b      	ldrh	r3, [r3, #12]
 801c974:	b29c      	uxth	r4, r3
 801c976:	2010      	movs	r0, #16
 801c978:	f7f8 ffa8 	bl	80158cc <lwip_htons>
 801c97c:	4603      	mov	r3, r0
 801c97e:	461a      	mov	r2, r3
 801c980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c982:	68db      	ldr	r3, [r3, #12]
 801c984:	4322      	orrs	r2, r4
 801c986:	b292      	uxth	r2, r2
 801c988:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801c98a:	697a      	ldr	r2, [r7, #20]
 801c98c:	6879      	ldr	r1, [r7, #4]
 801c98e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c990:	f000 f908 	bl	801cba4 <tcp_output_segment>
 801c994:	4603      	mov	r3, r0
 801c996:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801c998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d009      	beq.n	801c9b4 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	8b5b      	ldrh	r3, [r3, #26]
 801c9a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c9a8:	b29a      	uxth	r2, r3
 801c9aa:	687b      	ldr	r3, [r7, #4]
 801c9ac:	835a      	strh	r2, [r3, #26]
      return err;
 801c9ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c9b2:	e0d2      	b.n	801cb5a <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801c9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9b6:	681a      	ldr	r2, [r3, #0]
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	7d1b      	ldrb	r3, [r3, #20]
 801c9c0:	2b02      	cmp	r3, #2
 801c9c2:	d006      	beq.n	801c9d2 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	8b5b      	ldrh	r3, [r3, #26]
 801c9c8:	f023 0303 	bic.w	r3, r3, #3
 801c9cc:	b29a      	uxth	r2, r3
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801c9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9d4:	68db      	ldr	r3, [r3, #12]
 801c9d6:	685b      	ldr	r3, [r3, #4]
 801c9d8:	4618      	mov	r0, r3
 801c9da:	f7f8 ff8c 	bl	80158f6 <lwip_htonl>
 801c9de:	4604      	mov	r4, r0
 801c9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9e2:	891b      	ldrh	r3, [r3, #8]
 801c9e4:	461d      	mov	r5, r3
 801c9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9e8:	68db      	ldr	r3, [r3, #12]
 801c9ea:	899b      	ldrh	r3, [r3, #12]
 801c9ec:	b29b      	uxth	r3, r3
 801c9ee:	4618      	mov	r0, r3
 801c9f0:	f7f8 ff6c 	bl	80158cc <lwip_htons>
 801c9f4:	4603      	mov	r3, r0
 801c9f6:	b2db      	uxtb	r3, r3
 801c9f8:	f003 0303 	and.w	r3, r3, #3
 801c9fc:	2b00      	cmp	r3, #0
 801c9fe:	d00d      	beq.n	801ca1c <tcp_output+0x2a8>
 801ca00:	2301      	movs	r3, #1
 801ca02:	e00c      	b.n	801ca1e <tcp_output+0x2aa>
 801ca04:	080232d4 	.word	0x080232d4
 801ca08:	08023818 	.word	0x08023818
 801ca0c:	08023328 	.word	0x08023328
 801ca10:	08023830 	.word	0x08023830
 801ca14:	2001ff04 	.word	0x2001ff04
 801ca18:	08023858 	.word	0x08023858
 801ca1c:	2300      	movs	r3, #0
 801ca1e:	442b      	add	r3, r5
 801ca20:	4423      	add	r3, r4
 801ca22:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ca28:	68bb      	ldr	r3, [r7, #8]
 801ca2a:	1ad3      	subs	r3, r2, r3
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	da02      	bge.n	801ca36 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	68ba      	ldr	r2, [r7, #8]
 801ca34:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801ca36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca38:	891b      	ldrh	r3, [r3, #8]
 801ca3a:	461c      	mov	r4, r3
 801ca3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca3e:	68db      	ldr	r3, [r3, #12]
 801ca40:	899b      	ldrh	r3, [r3, #12]
 801ca42:	b29b      	uxth	r3, r3
 801ca44:	4618      	mov	r0, r3
 801ca46:	f7f8 ff41 	bl	80158cc <lwip_htons>
 801ca4a:	4603      	mov	r3, r0
 801ca4c:	b2db      	uxtb	r3, r3
 801ca4e:	f003 0303 	and.w	r3, r3, #3
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	d001      	beq.n	801ca5a <tcp_output+0x2e6>
 801ca56:	2301      	movs	r3, #1
 801ca58:	e000      	b.n	801ca5c <tcp_output+0x2e8>
 801ca5a:	2300      	movs	r3, #0
 801ca5c:	4423      	add	r3, r4
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d049      	beq.n	801caf6 <tcp_output+0x382>
      seg->next = NULL;
 801ca62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca64:	2200      	movs	r2, #0
 801ca66:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ca6c:	2b00      	cmp	r3, #0
 801ca6e:	d105      	bne.n	801ca7c <tcp_output+0x308>
        pcb->unacked = seg;
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ca74:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801ca76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca78:	623b      	str	r3, [r7, #32]
 801ca7a:	e03f      	b.n	801cafc <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801ca7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca7e:	68db      	ldr	r3, [r3, #12]
 801ca80:	685b      	ldr	r3, [r3, #4]
 801ca82:	4618      	mov	r0, r3
 801ca84:	f7f8 ff37 	bl	80158f6 <lwip_htonl>
 801ca88:	4604      	mov	r4, r0
 801ca8a:	6a3b      	ldr	r3, [r7, #32]
 801ca8c:	68db      	ldr	r3, [r3, #12]
 801ca8e:	685b      	ldr	r3, [r3, #4]
 801ca90:	4618      	mov	r0, r3
 801ca92:	f7f8 ff30 	bl	80158f6 <lwip_htonl>
 801ca96:	4603      	mov	r3, r0
 801ca98:	1ae3      	subs	r3, r4, r3
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	da24      	bge.n	801cae8 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	3370      	adds	r3, #112	; 0x70
 801caa2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801caa4:	e002      	b.n	801caac <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801caa6:	69fb      	ldr	r3, [r7, #28]
 801caa8:	681b      	ldr	r3, [r3, #0]
 801caaa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801caac:	69fb      	ldr	r3, [r7, #28]
 801caae:	681b      	ldr	r3, [r3, #0]
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	d011      	beq.n	801cad8 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801cab4:	69fb      	ldr	r3, [r7, #28]
 801cab6:	681b      	ldr	r3, [r3, #0]
 801cab8:	68db      	ldr	r3, [r3, #12]
 801caba:	685b      	ldr	r3, [r3, #4]
 801cabc:	4618      	mov	r0, r3
 801cabe:	f7f8 ff1a 	bl	80158f6 <lwip_htonl>
 801cac2:	4604      	mov	r4, r0
 801cac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cac6:	68db      	ldr	r3, [r3, #12]
 801cac8:	685b      	ldr	r3, [r3, #4]
 801caca:	4618      	mov	r0, r3
 801cacc:	f7f8 ff13 	bl	80158f6 <lwip_htonl>
 801cad0:	4603      	mov	r3, r0
 801cad2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	dbe6      	blt.n	801caa6 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 801cad8:	69fb      	ldr	r3, [r7, #28]
 801cada:	681a      	ldr	r2, [r3, #0]
 801cadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cade:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801cae0:	69fb      	ldr	r3, [r7, #28]
 801cae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cae4:	601a      	str	r2, [r3, #0]
 801cae6:	e009      	b.n	801cafc <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801cae8:	6a3b      	ldr	r3, [r7, #32]
 801caea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801caec:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801caee:	6a3b      	ldr	r3, [r7, #32]
 801caf0:	681b      	ldr	r3, [r3, #0]
 801caf2:	623b      	str	r3, [r7, #32]
 801caf4:	e002      	b.n	801cafc <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801caf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801caf8:	f7fb fef4 	bl	80188e4 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cb00:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801cb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb04:	2b00      	cmp	r3, #0
 801cb06:	d012      	beq.n	801cb2e <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801cb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb0a:	68db      	ldr	r3, [r3, #12]
 801cb0c:	685b      	ldr	r3, [r3, #4]
 801cb0e:	4618      	mov	r0, r3
 801cb10:	f7f8 fef1 	bl	80158f6 <lwip_htonl>
 801cb14:	4602      	mov	r2, r0
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cb1a:	1ad3      	subs	r3, r2, r3
 801cb1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cb1e:	8912      	ldrh	r2, [r2, #8]
 801cb20:	4413      	add	r3, r2
  while (seg != NULL &&
 801cb22:	69ba      	ldr	r2, [r7, #24]
 801cb24:	429a      	cmp	r2, r3
 801cb26:	f4bf aeda 	bcs.w	801c8de <tcp_output+0x16a>
 801cb2a:	e000      	b.n	801cb2e <tcp_output+0x3ba>
      break;
 801cb2c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cb32:	2b00      	cmp	r3, #0
 801cb34:	d108      	bne.n	801cb48 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	2200      	movs	r2, #0
 801cb3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801cb3e:	e004      	b.n	801cb4a <tcp_output+0x3d6>
    goto output_done;
 801cb40:	bf00      	nop
 801cb42:	e002      	b.n	801cb4a <tcp_output+0x3d6>
    goto output_done;
 801cb44:	bf00      	nop
 801cb46:	e000      	b.n	801cb4a <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801cb48:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	8b5b      	ldrh	r3, [r3, #26]
 801cb4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801cb52:	b29a      	uxth	r2, r3
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801cb58:	2300      	movs	r3, #0
}
 801cb5a:	4618      	mov	r0, r3
 801cb5c:	3728      	adds	r7, #40	; 0x28
 801cb5e:	46bd      	mov	sp, r7
 801cb60:	bdb0      	pop	{r4, r5, r7, pc}
 801cb62:	bf00      	nop

0801cb64 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801cb64:	b580      	push	{r7, lr}
 801cb66:	b082      	sub	sp, #8
 801cb68:	af00      	add	r7, sp, #0
 801cb6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801cb6c:	687b      	ldr	r3, [r7, #4]
 801cb6e:	2b00      	cmp	r3, #0
 801cb70:	d106      	bne.n	801cb80 <tcp_output_segment_busy+0x1c>
 801cb72:	4b09      	ldr	r3, [pc, #36]	; (801cb98 <tcp_output_segment_busy+0x34>)
 801cb74:	f240 529a 	movw	r2, #1434	; 0x59a
 801cb78:	4908      	ldr	r1, [pc, #32]	; (801cb9c <tcp_output_segment_busy+0x38>)
 801cb7a:	4809      	ldr	r0, [pc, #36]	; (801cba0 <tcp_output_segment_busy+0x3c>)
 801cb7c:	f003 fcca 	bl	8020514 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	685b      	ldr	r3, [r3, #4]
 801cb84:	7b9b      	ldrb	r3, [r3, #14]
 801cb86:	2b01      	cmp	r3, #1
 801cb88:	d001      	beq.n	801cb8e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801cb8a:	2301      	movs	r3, #1
 801cb8c:	e000      	b.n	801cb90 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801cb8e:	2300      	movs	r3, #0
}
 801cb90:	4618      	mov	r0, r3
 801cb92:	3708      	adds	r7, #8
 801cb94:	46bd      	mov	sp, r7
 801cb96:	bd80      	pop	{r7, pc}
 801cb98:	080232d4 	.word	0x080232d4
 801cb9c:	08023870 	.word	0x08023870
 801cba0:	08023328 	.word	0x08023328

0801cba4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801cba4:	b5b0      	push	{r4, r5, r7, lr}
 801cba6:	b08c      	sub	sp, #48	; 0x30
 801cba8:	af04      	add	r7, sp, #16
 801cbaa:	60f8      	str	r0, [r7, #12]
 801cbac:	60b9      	str	r1, [r7, #8]
 801cbae:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801cbb0:	68fb      	ldr	r3, [r7, #12]
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	d106      	bne.n	801cbc4 <tcp_output_segment+0x20>
 801cbb6:	4b64      	ldr	r3, [pc, #400]	; (801cd48 <tcp_output_segment+0x1a4>)
 801cbb8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801cbbc:	4963      	ldr	r1, [pc, #396]	; (801cd4c <tcp_output_segment+0x1a8>)
 801cbbe:	4864      	ldr	r0, [pc, #400]	; (801cd50 <tcp_output_segment+0x1ac>)
 801cbc0:	f003 fca8 	bl	8020514 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801cbc4:	68bb      	ldr	r3, [r7, #8]
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	d106      	bne.n	801cbd8 <tcp_output_segment+0x34>
 801cbca:	4b5f      	ldr	r3, [pc, #380]	; (801cd48 <tcp_output_segment+0x1a4>)
 801cbcc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801cbd0:	4960      	ldr	r1, [pc, #384]	; (801cd54 <tcp_output_segment+0x1b0>)
 801cbd2:	485f      	ldr	r0, [pc, #380]	; (801cd50 <tcp_output_segment+0x1ac>)
 801cbd4:	f003 fc9e 	bl	8020514 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	2b00      	cmp	r3, #0
 801cbdc:	d106      	bne.n	801cbec <tcp_output_segment+0x48>
 801cbde:	4b5a      	ldr	r3, [pc, #360]	; (801cd48 <tcp_output_segment+0x1a4>)
 801cbe0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801cbe4:	495c      	ldr	r1, [pc, #368]	; (801cd58 <tcp_output_segment+0x1b4>)
 801cbe6:	485a      	ldr	r0, [pc, #360]	; (801cd50 <tcp_output_segment+0x1ac>)
 801cbe8:	f003 fc94 	bl	8020514 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801cbec:	68f8      	ldr	r0, [r7, #12]
 801cbee:	f7ff ffb9 	bl	801cb64 <tcp_output_segment_busy>
 801cbf2:	4603      	mov	r3, r0
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	d001      	beq.n	801cbfc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801cbf8:	2300      	movs	r3, #0
 801cbfa:	e0a0      	b.n	801cd3e <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801cbfc:	68bb      	ldr	r3, [r7, #8]
 801cbfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cc00:	68fb      	ldr	r3, [r7, #12]
 801cc02:	68dc      	ldr	r4, [r3, #12]
 801cc04:	4610      	mov	r0, r2
 801cc06:	f7f8 fe76 	bl	80158f6 <lwip_htonl>
 801cc0a:	4603      	mov	r3, r0
 801cc0c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801cc0e:	68bb      	ldr	r3, [r7, #8]
 801cc10:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801cc12:	68fb      	ldr	r3, [r7, #12]
 801cc14:	68dc      	ldr	r4, [r3, #12]
 801cc16:	4610      	mov	r0, r2
 801cc18:	f7f8 fe58 	bl	80158cc <lwip_htons>
 801cc1c:	4603      	mov	r3, r0
 801cc1e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801cc20:	68bb      	ldr	r3, [r7, #8]
 801cc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc24:	68ba      	ldr	r2, [r7, #8]
 801cc26:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801cc28:	441a      	add	r2, r3
 801cc2a:	68bb      	ldr	r3, [r7, #8]
 801cc2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801cc2e:	68fb      	ldr	r3, [r7, #12]
 801cc30:	68db      	ldr	r3, [r3, #12]
 801cc32:	3314      	adds	r3, #20
 801cc34:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801cc36:	68fb      	ldr	r3, [r7, #12]
 801cc38:	7a9b      	ldrb	r3, [r3, #10]
 801cc3a:	f003 0301 	and.w	r3, r3, #1
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	d015      	beq.n	801cc6e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801cc42:	68bb      	ldr	r3, [r7, #8]
 801cc44:	3304      	adds	r3, #4
 801cc46:	461a      	mov	r2, r3
 801cc48:	6879      	ldr	r1, [r7, #4]
 801cc4a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801cc4e:	f7fc fa33 	bl	80190b8 <tcp_eff_send_mss_netif>
 801cc52:	4603      	mov	r3, r0
 801cc54:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801cc56:	8b7b      	ldrh	r3, [r7, #26]
 801cc58:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801cc5c:	4618      	mov	r0, r3
 801cc5e:	f7f8 fe4a 	bl	80158f6 <lwip_htonl>
 801cc62:	4602      	mov	r2, r0
 801cc64:	69fb      	ldr	r3, [r7, #28]
 801cc66:	601a      	str	r2, [r3, #0]
    opts += 1;
 801cc68:	69fb      	ldr	r3, [r7, #28]
 801cc6a:	3304      	adds	r3, #4
 801cc6c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801cc6e:	68bb      	ldr	r3, [r7, #8]
 801cc70:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	da02      	bge.n	801cc7e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801cc78:	68bb      	ldr	r3, [r7, #8]
 801cc7a:	2200      	movs	r2, #0
 801cc7c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801cc7e:	68bb      	ldr	r3, [r7, #8]
 801cc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	d10c      	bne.n	801cca0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801cc86:	4b35      	ldr	r3, [pc, #212]	; (801cd5c <tcp_output_segment+0x1b8>)
 801cc88:	681a      	ldr	r2, [r3, #0]
 801cc8a:	68bb      	ldr	r3, [r7, #8]
 801cc8c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801cc8e:	68fb      	ldr	r3, [r7, #12]
 801cc90:	68db      	ldr	r3, [r3, #12]
 801cc92:	685b      	ldr	r3, [r3, #4]
 801cc94:	4618      	mov	r0, r3
 801cc96:	f7f8 fe2e 	bl	80158f6 <lwip_htonl>
 801cc9a:	4602      	mov	r2, r0
 801cc9c:	68bb      	ldr	r3, [r7, #8]
 801cc9e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801cca0:	68fb      	ldr	r3, [r7, #12]
 801cca2:	68db      	ldr	r3, [r3, #12]
 801cca4:	461a      	mov	r2, r3
 801cca6:	68fb      	ldr	r3, [r7, #12]
 801cca8:	685b      	ldr	r3, [r3, #4]
 801ccaa:	685b      	ldr	r3, [r3, #4]
 801ccac:	1ad3      	subs	r3, r2, r3
 801ccae:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801ccb0:	68fb      	ldr	r3, [r7, #12]
 801ccb2:	685b      	ldr	r3, [r3, #4]
 801ccb4:	8959      	ldrh	r1, [r3, #10]
 801ccb6:	68fb      	ldr	r3, [r7, #12]
 801ccb8:	685b      	ldr	r3, [r3, #4]
 801ccba:	8b3a      	ldrh	r2, [r7, #24]
 801ccbc:	1a8a      	subs	r2, r1, r2
 801ccbe:	b292      	uxth	r2, r2
 801ccc0:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801ccc2:	68fb      	ldr	r3, [r7, #12]
 801ccc4:	685b      	ldr	r3, [r3, #4]
 801ccc6:	8919      	ldrh	r1, [r3, #8]
 801ccc8:	68fb      	ldr	r3, [r7, #12]
 801ccca:	685b      	ldr	r3, [r3, #4]
 801cccc:	8b3a      	ldrh	r2, [r7, #24]
 801ccce:	1a8a      	subs	r2, r1, r2
 801ccd0:	b292      	uxth	r2, r2
 801ccd2:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801ccd4:	68fb      	ldr	r3, [r7, #12]
 801ccd6:	685b      	ldr	r3, [r3, #4]
 801ccd8:	68fa      	ldr	r2, [r7, #12]
 801ccda:	68d2      	ldr	r2, [r2, #12]
 801ccdc:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801ccde:	68fb      	ldr	r3, [r7, #12]
 801cce0:	68db      	ldr	r3, [r3, #12]
 801cce2:	2200      	movs	r2, #0
 801cce4:	741a      	strb	r2, [r3, #16]
 801cce6:	2200      	movs	r2, #0
 801cce8:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801ccea:	68fb      	ldr	r3, [r7, #12]
 801ccec:	68db      	ldr	r3, [r3, #12]
 801ccee:	f103 0214 	add.w	r2, r3, #20
 801ccf2:	68fb      	ldr	r3, [r7, #12]
 801ccf4:	7a9b      	ldrb	r3, [r3, #10]
 801ccf6:	009b      	lsls	r3, r3, #2
 801ccf8:	f003 0304 	and.w	r3, r3, #4
 801ccfc:	4413      	add	r3, r2
 801ccfe:	69fa      	ldr	r2, [r7, #28]
 801cd00:	429a      	cmp	r2, r3
 801cd02:	d006      	beq.n	801cd12 <tcp_output_segment+0x16e>
 801cd04:	4b10      	ldr	r3, [pc, #64]	; (801cd48 <tcp_output_segment+0x1a4>)
 801cd06:	f240 621c 	movw	r2, #1564	; 0x61c
 801cd0a:	4915      	ldr	r1, [pc, #84]	; (801cd60 <tcp_output_segment+0x1bc>)
 801cd0c:	4810      	ldr	r0, [pc, #64]	; (801cd50 <tcp_output_segment+0x1ac>)
 801cd0e:	f003 fc01 	bl	8020514 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801cd12:	68fb      	ldr	r3, [r7, #12]
 801cd14:	6858      	ldr	r0, [r3, #4]
 801cd16:	68b9      	ldr	r1, [r7, #8]
 801cd18:	68bb      	ldr	r3, [r7, #8]
 801cd1a:	1d1c      	adds	r4, r3, #4
 801cd1c:	68bb      	ldr	r3, [r7, #8]
 801cd1e:	7add      	ldrb	r5, [r3, #11]
 801cd20:	68bb      	ldr	r3, [r7, #8]
 801cd22:	7a9b      	ldrb	r3, [r3, #10]
 801cd24:	687a      	ldr	r2, [r7, #4]
 801cd26:	9202      	str	r2, [sp, #8]
 801cd28:	2206      	movs	r2, #6
 801cd2a:	9201      	str	r2, [sp, #4]
 801cd2c:	9300      	str	r3, [sp, #0]
 801cd2e:	462b      	mov	r3, r5
 801cd30:	4622      	mov	r2, r4
 801cd32:	f002 fa6f 	bl	801f214 <ip4_output_if>
 801cd36:	4603      	mov	r3, r0
 801cd38:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801cd3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801cd3e:	4618      	mov	r0, r3
 801cd40:	3720      	adds	r7, #32
 801cd42:	46bd      	mov	sp, r7
 801cd44:	bdb0      	pop	{r4, r5, r7, pc}
 801cd46:	bf00      	nop
 801cd48:	080232d4 	.word	0x080232d4
 801cd4c:	08023898 	.word	0x08023898
 801cd50:	08023328 	.word	0x08023328
 801cd54:	080238b8 	.word	0x080238b8
 801cd58:	080238d8 	.word	0x080238d8
 801cd5c:	2001fef4 	.word	0x2001fef4
 801cd60:	080238fc 	.word	0x080238fc

0801cd64 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801cd64:	b5b0      	push	{r4, r5, r7, lr}
 801cd66:	b084      	sub	sp, #16
 801cd68:	af00      	add	r7, sp, #0
 801cd6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801cd6c:	687b      	ldr	r3, [r7, #4]
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	d106      	bne.n	801cd80 <tcp_rexmit_rto_prepare+0x1c>
 801cd72:	4b31      	ldr	r3, [pc, #196]	; (801ce38 <tcp_rexmit_rto_prepare+0xd4>)
 801cd74:	f240 6263 	movw	r2, #1635	; 0x663
 801cd78:	4930      	ldr	r1, [pc, #192]	; (801ce3c <tcp_rexmit_rto_prepare+0xd8>)
 801cd7a:	4831      	ldr	r0, [pc, #196]	; (801ce40 <tcp_rexmit_rto_prepare+0xdc>)
 801cd7c:	f003 fbca 	bl	8020514 <iprintf>

  if (pcb->unacked == NULL) {
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cd84:	2b00      	cmp	r3, #0
 801cd86:	d102      	bne.n	801cd8e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801cd88:	f06f 0305 	mvn.w	r3, #5
 801cd8c:	e050      	b.n	801ce30 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801cd8e:	687b      	ldr	r3, [r7, #4]
 801cd90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cd92:	60fb      	str	r3, [r7, #12]
 801cd94:	e00b      	b.n	801cdae <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801cd96:	68f8      	ldr	r0, [r7, #12]
 801cd98:	f7ff fee4 	bl	801cb64 <tcp_output_segment_busy>
 801cd9c:	4603      	mov	r3, r0
 801cd9e:	2b00      	cmp	r3, #0
 801cda0:	d002      	beq.n	801cda8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801cda2:	f06f 0305 	mvn.w	r3, #5
 801cda6:	e043      	b.n	801ce30 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801cda8:	68fb      	ldr	r3, [r7, #12]
 801cdaa:	681b      	ldr	r3, [r3, #0]
 801cdac:	60fb      	str	r3, [r7, #12]
 801cdae:	68fb      	ldr	r3, [r7, #12]
 801cdb0:	681b      	ldr	r3, [r3, #0]
 801cdb2:	2b00      	cmp	r3, #0
 801cdb4:	d1ef      	bne.n	801cd96 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801cdb6:	68f8      	ldr	r0, [r7, #12]
 801cdb8:	f7ff fed4 	bl	801cb64 <tcp_output_segment_busy>
 801cdbc:	4603      	mov	r3, r0
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d002      	beq.n	801cdc8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801cdc2:	f06f 0305 	mvn.w	r3, #5
 801cdc6:	e033      	b.n	801ce30 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801cdcc:	68fb      	ldr	r3, [r7, #12]
 801cdce:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	2200      	movs	r2, #0
 801cddc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801cdde:	687b      	ldr	r3, [r7, #4]
 801cde0:	8b5b      	ldrh	r3, [r3, #26]
 801cde2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801cde6:	b29a      	uxth	r2, r3
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801cdec:	68fb      	ldr	r3, [r7, #12]
 801cdee:	68db      	ldr	r3, [r3, #12]
 801cdf0:	685b      	ldr	r3, [r3, #4]
 801cdf2:	4618      	mov	r0, r3
 801cdf4:	f7f8 fd7f 	bl	80158f6 <lwip_htonl>
 801cdf8:	4604      	mov	r4, r0
 801cdfa:	68fb      	ldr	r3, [r7, #12]
 801cdfc:	891b      	ldrh	r3, [r3, #8]
 801cdfe:	461d      	mov	r5, r3
 801ce00:	68fb      	ldr	r3, [r7, #12]
 801ce02:	68db      	ldr	r3, [r3, #12]
 801ce04:	899b      	ldrh	r3, [r3, #12]
 801ce06:	b29b      	uxth	r3, r3
 801ce08:	4618      	mov	r0, r3
 801ce0a:	f7f8 fd5f 	bl	80158cc <lwip_htons>
 801ce0e:	4603      	mov	r3, r0
 801ce10:	b2db      	uxtb	r3, r3
 801ce12:	f003 0303 	and.w	r3, r3, #3
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	d001      	beq.n	801ce1e <tcp_rexmit_rto_prepare+0xba>
 801ce1a:	2301      	movs	r3, #1
 801ce1c:	e000      	b.n	801ce20 <tcp_rexmit_rto_prepare+0xbc>
 801ce1e:	2300      	movs	r3, #0
 801ce20:	442b      	add	r3, r5
 801ce22:	18e2      	adds	r2, r4, r3
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	2200      	movs	r2, #0
 801ce2c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801ce2e:	2300      	movs	r3, #0
}
 801ce30:	4618      	mov	r0, r3
 801ce32:	3710      	adds	r7, #16
 801ce34:	46bd      	mov	sp, r7
 801ce36:	bdb0      	pop	{r4, r5, r7, pc}
 801ce38:	080232d4 	.word	0x080232d4
 801ce3c:	08023910 	.word	0x08023910
 801ce40:	08023328 	.word	0x08023328

0801ce44 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801ce44:	b580      	push	{r7, lr}
 801ce46:	b082      	sub	sp, #8
 801ce48:	af00      	add	r7, sp, #0
 801ce4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	2b00      	cmp	r3, #0
 801ce50:	d106      	bne.n	801ce60 <tcp_rexmit_rto_commit+0x1c>
 801ce52:	4b0d      	ldr	r3, [pc, #52]	; (801ce88 <tcp_rexmit_rto_commit+0x44>)
 801ce54:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801ce58:	490c      	ldr	r1, [pc, #48]	; (801ce8c <tcp_rexmit_rto_commit+0x48>)
 801ce5a:	480d      	ldr	r0, [pc, #52]	; (801ce90 <tcp_rexmit_rto_commit+0x4c>)
 801ce5c:	f003 fb5a 	bl	8020514 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ce66:	2bff      	cmp	r3, #255	; 0xff
 801ce68:	d007      	beq.n	801ce7a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ce70:	3301      	adds	r3, #1
 801ce72:	b2da      	uxtb	r2, r3
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801ce7a:	6878      	ldr	r0, [r7, #4]
 801ce7c:	f7ff fc7a 	bl	801c774 <tcp_output>
}
 801ce80:	bf00      	nop
 801ce82:	3708      	adds	r7, #8
 801ce84:	46bd      	mov	sp, r7
 801ce86:	bd80      	pop	{r7, pc}
 801ce88:	080232d4 	.word	0x080232d4
 801ce8c:	08023934 	.word	0x08023934
 801ce90:	08023328 	.word	0x08023328

0801ce94 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801ce94:	b580      	push	{r7, lr}
 801ce96:	b082      	sub	sp, #8
 801ce98:	af00      	add	r7, sp, #0
 801ce9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	d106      	bne.n	801ceb0 <tcp_rexmit_rto+0x1c>
 801cea2:	4b0a      	ldr	r3, [pc, #40]	; (801cecc <tcp_rexmit_rto+0x38>)
 801cea4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801cea8:	4909      	ldr	r1, [pc, #36]	; (801ced0 <tcp_rexmit_rto+0x3c>)
 801ceaa:	480a      	ldr	r0, [pc, #40]	; (801ced4 <tcp_rexmit_rto+0x40>)
 801ceac:	f003 fb32 	bl	8020514 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801ceb0:	6878      	ldr	r0, [r7, #4]
 801ceb2:	f7ff ff57 	bl	801cd64 <tcp_rexmit_rto_prepare>
 801ceb6:	4603      	mov	r3, r0
 801ceb8:	2b00      	cmp	r3, #0
 801ceba:	d102      	bne.n	801cec2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801cebc:	6878      	ldr	r0, [r7, #4]
 801cebe:	f7ff ffc1 	bl	801ce44 <tcp_rexmit_rto_commit>
  }
}
 801cec2:	bf00      	nop
 801cec4:	3708      	adds	r7, #8
 801cec6:	46bd      	mov	sp, r7
 801cec8:	bd80      	pop	{r7, pc}
 801ceca:	bf00      	nop
 801cecc:	080232d4 	.word	0x080232d4
 801ced0:	08023958 	.word	0x08023958
 801ced4:	08023328 	.word	0x08023328

0801ced8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801ced8:	b590      	push	{r4, r7, lr}
 801ceda:	b085      	sub	sp, #20
 801cedc:	af00      	add	r7, sp, #0
 801cede:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d106      	bne.n	801cef4 <tcp_rexmit+0x1c>
 801cee6:	4b2f      	ldr	r3, [pc, #188]	; (801cfa4 <tcp_rexmit+0xcc>)
 801cee8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801ceec:	492e      	ldr	r1, [pc, #184]	; (801cfa8 <tcp_rexmit+0xd0>)
 801ceee:	482f      	ldr	r0, [pc, #188]	; (801cfac <tcp_rexmit+0xd4>)
 801cef0:	f003 fb10 	bl	8020514 <iprintf>

  if (pcb->unacked == NULL) {
 801cef4:	687b      	ldr	r3, [r7, #4]
 801cef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cef8:	2b00      	cmp	r3, #0
 801cefa:	d102      	bne.n	801cf02 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801cefc:	f06f 0305 	mvn.w	r3, #5
 801cf00:	e04c      	b.n	801cf9c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801cf02:	687b      	ldr	r3, [r7, #4]
 801cf04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cf06:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801cf08:	68b8      	ldr	r0, [r7, #8]
 801cf0a:	f7ff fe2b 	bl	801cb64 <tcp_output_segment_busy>
 801cf0e:	4603      	mov	r3, r0
 801cf10:	2b00      	cmp	r3, #0
 801cf12:	d002      	beq.n	801cf1a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801cf14:	f06f 0305 	mvn.w	r3, #5
 801cf18:	e040      	b.n	801cf9c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801cf1a:	68bb      	ldr	r3, [r7, #8]
 801cf1c:	681a      	ldr	r2, [r3, #0]
 801cf1e:	687b      	ldr	r3, [r7, #4]
 801cf20:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	336c      	adds	r3, #108	; 0x6c
 801cf26:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801cf28:	e002      	b.n	801cf30 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801cf2a:	68fb      	ldr	r3, [r7, #12]
 801cf2c:	681b      	ldr	r3, [r3, #0]
 801cf2e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801cf30:	68fb      	ldr	r3, [r7, #12]
 801cf32:	681b      	ldr	r3, [r3, #0]
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	d011      	beq.n	801cf5c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801cf38:	68fb      	ldr	r3, [r7, #12]
 801cf3a:	681b      	ldr	r3, [r3, #0]
 801cf3c:	68db      	ldr	r3, [r3, #12]
 801cf3e:	685b      	ldr	r3, [r3, #4]
 801cf40:	4618      	mov	r0, r3
 801cf42:	f7f8 fcd8 	bl	80158f6 <lwip_htonl>
 801cf46:	4604      	mov	r4, r0
 801cf48:	68bb      	ldr	r3, [r7, #8]
 801cf4a:	68db      	ldr	r3, [r3, #12]
 801cf4c:	685b      	ldr	r3, [r3, #4]
 801cf4e:	4618      	mov	r0, r3
 801cf50:	f7f8 fcd1 	bl	80158f6 <lwip_htonl>
 801cf54:	4603      	mov	r3, r0
 801cf56:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801cf58:	2b00      	cmp	r3, #0
 801cf5a:	dbe6      	blt.n	801cf2a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801cf5c:	68fb      	ldr	r3, [r7, #12]
 801cf5e:	681a      	ldr	r2, [r3, #0]
 801cf60:	68bb      	ldr	r3, [r7, #8]
 801cf62:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801cf64:	68fb      	ldr	r3, [r7, #12]
 801cf66:	68ba      	ldr	r2, [r7, #8]
 801cf68:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801cf6a:	68bb      	ldr	r3, [r7, #8]
 801cf6c:	681b      	ldr	r3, [r3, #0]
 801cf6e:	2b00      	cmp	r3, #0
 801cf70:	d103      	bne.n	801cf7a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	2200      	movs	r2, #0
 801cf76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801cf80:	2bff      	cmp	r3, #255	; 0xff
 801cf82:	d007      	beq.n	801cf94 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801cf8a:	3301      	adds	r3, #1
 801cf8c:	b2da      	uxtb	r2, r3
 801cf8e:	687b      	ldr	r3, [r7, #4]
 801cf90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	2200      	movs	r2, #0
 801cf98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801cf9a:	2300      	movs	r3, #0
}
 801cf9c:	4618      	mov	r0, r3
 801cf9e:	3714      	adds	r7, #20
 801cfa0:	46bd      	mov	sp, r7
 801cfa2:	bd90      	pop	{r4, r7, pc}
 801cfa4:	080232d4 	.word	0x080232d4
 801cfa8:	08023974 	.word	0x08023974
 801cfac:	08023328 	.word	0x08023328

0801cfb0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801cfb0:	b580      	push	{r7, lr}
 801cfb2:	b082      	sub	sp, #8
 801cfb4:	af00      	add	r7, sp, #0
 801cfb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	d106      	bne.n	801cfcc <tcp_rexmit_fast+0x1c>
 801cfbe:	4b2f      	ldr	r3, [pc, #188]	; (801d07c <tcp_rexmit_fast+0xcc>)
 801cfc0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801cfc4:	492e      	ldr	r1, [pc, #184]	; (801d080 <tcp_rexmit_fast+0xd0>)
 801cfc6:	482f      	ldr	r0, [pc, #188]	; (801d084 <tcp_rexmit_fast+0xd4>)
 801cfc8:	f003 faa4 	bl	8020514 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cfd0:	2b00      	cmp	r3, #0
 801cfd2:	d04f      	beq.n	801d074 <tcp_rexmit_fast+0xc4>
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	8b5b      	ldrh	r3, [r3, #26]
 801cfd8:	f003 0304 	and.w	r3, r3, #4
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	d149      	bne.n	801d074 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801cfe0:	6878      	ldr	r0, [r7, #4]
 801cfe2:	f7ff ff79 	bl	801ced8 <tcp_rexmit>
 801cfe6:	4603      	mov	r3, r0
 801cfe8:	2b00      	cmp	r3, #0
 801cfea:	d143      	bne.n	801d074 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801cfec:	687b      	ldr	r3, [r7, #4]
 801cfee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801cff8:	429a      	cmp	r2, r3
 801cffa:	d208      	bcs.n	801d00e <tcp_rexmit_fast+0x5e>
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801d002:	2b00      	cmp	r3, #0
 801d004:	da00      	bge.n	801d008 <tcp_rexmit_fast+0x58>
 801d006:	3301      	adds	r3, #1
 801d008:	105b      	asrs	r3, r3, #1
 801d00a:	b29b      	uxth	r3, r3
 801d00c:	e007      	b.n	801d01e <tcp_rexmit_fast+0x6e>
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d014:	2b00      	cmp	r3, #0
 801d016:	da00      	bge.n	801d01a <tcp_rexmit_fast+0x6a>
 801d018:	3301      	adds	r3, #1
 801d01a:	105b      	asrs	r3, r3, #1
 801d01c:	b29b      	uxth	r3, r3
 801d01e:	687a      	ldr	r2, [r7, #4]
 801d020:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801d02a:	461a      	mov	r2, r3
 801d02c:	687b      	ldr	r3, [r7, #4]
 801d02e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d030:	005b      	lsls	r3, r3, #1
 801d032:	429a      	cmp	r2, r3
 801d034:	d206      	bcs.n	801d044 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801d036:	687b      	ldr	r3, [r7, #4]
 801d038:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d03a:	005b      	lsls	r3, r3, #1
 801d03c:	b29a      	uxth	r2, r3
 801d03e:	687b      	ldr	r3, [r7, #4]
 801d040:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d04e:	4619      	mov	r1, r3
 801d050:	0049      	lsls	r1, r1, #1
 801d052:	440b      	add	r3, r1
 801d054:	b29b      	uxth	r3, r3
 801d056:	4413      	add	r3, r2
 801d058:	b29a      	uxth	r2, r3
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	8b5b      	ldrh	r3, [r3, #26]
 801d064:	f043 0304 	orr.w	r3, r3, #4
 801d068:	b29a      	uxth	r2, r3
 801d06a:	687b      	ldr	r3, [r7, #4]
 801d06c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	2200      	movs	r2, #0
 801d072:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801d074:	bf00      	nop
 801d076:	3708      	adds	r7, #8
 801d078:	46bd      	mov	sp, r7
 801d07a:	bd80      	pop	{r7, pc}
 801d07c:	080232d4 	.word	0x080232d4
 801d080:	0802398c 	.word	0x0802398c
 801d084:	08023328 	.word	0x08023328

0801d088 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801d088:	b580      	push	{r7, lr}
 801d08a:	b086      	sub	sp, #24
 801d08c:	af00      	add	r7, sp, #0
 801d08e:	60f8      	str	r0, [r7, #12]
 801d090:	607b      	str	r3, [r7, #4]
 801d092:	460b      	mov	r3, r1
 801d094:	817b      	strh	r3, [r7, #10]
 801d096:	4613      	mov	r3, r2
 801d098:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801d09a:	897a      	ldrh	r2, [r7, #10]
 801d09c:	893b      	ldrh	r3, [r7, #8]
 801d09e:	4413      	add	r3, r2
 801d0a0:	b29b      	uxth	r3, r3
 801d0a2:	3314      	adds	r3, #20
 801d0a4:	b29b      	uxth	r3, r3
 801d0a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d0aa:	4619      	mov	r1, r3
 801d0ac:	2022      	movs	r0, #34	; 0x22
 801d0ae:	f7f9 fd0b 	bl	8016ac8 <pbuf_alloc>
 801d0b2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801d0b4:	697b      	ldr	r3, [r7, #20]
 801d0b6:	2b00      	cmp	r3, #0
 801d0b8:	d04e      	beq.n	801d158 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801d0ba:	697b      	ldr	r3, [r7, #20]
 801d0bc:	895b      	ldrh	r3, [r3, #10]
 801d0be:	461a      	mov	r2, r3
 801d0c0:	897b      	ldrh	r3, [r7, #10]
 801d0c2:	3314      	adds	r3, #20
 801d0c4:	429a      	cmp	r2, r3
 801d0c6:	da06      	bge.n	801d0d6 <tcp_output_alloc_header_common+0x4e>
 801d0c8:	4b26      	ldr	r3, [pc, #152]	; (801d164 <tcp_output_alloc_header_common+0xdc>)
 801d0ca:	f240 7224 	movw	r2, #1828	; 0x724
 801d0ce:	4926      	ldr	r1, [pc, #152]	; (801d168 <tcp_output_alloc_header_common+0xe0>)
 801d0d0:	4826      	ldr	r0, [pc, #152]	; (801d16c <tcp_output_alloc_header_common+0xe4>)
 801d0d2:	f003 fa1f 	bl	8020514 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801d0d6:	697b      	ldr	r3, [r7, #20]
 801d0d8:	685b      	ldr	r3, [r3, #4]
 801d0da:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801d0dc:	8c3b      	ldrh	r3, [r7, #32]
 801d0de:	4618      	mov	r0, r3
 801d0e0:	f7f8 fbf4 	bl	80158cc <lwip_htons>
 801d0e4:	4603      	mov	r3, r0
 801d0e6:	461a      	mov	r2, r3
 801d0e8:	693b      	ldr	r3, [r7, #16]
 801d0ea:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801d0ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d0ee:	4618      	mov	r0, r3
 801d0f0:	f7f8 fbec 	bl	80158cc <lwip_htons>
 801d0f4:	4603      	mov	r3, r0
 801d0f6:	461a      	mov	r2, r3
 801d0f8:	693b      	ldr	r3, [r7, #16]
 801d0fa:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801d0fc:	693b      	ldr	r3, [r7, #16]
 801d0fe:	687a      	ldr	r2, [r7, #4]
 801d100:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801d102:	68f8      	ldr	r0, [r7, #12]
 801d104:	f7f8 fbf7 	bl	80158f6 <lwip_htonl>
 801d108:	4602      	mov	r2, r0
 801d10a:	693b      	ldr	r3, [r7, #16]
 801d10c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801d10e:	897b      	ldrh	r3, [r7, #10]
 801d110:	089b      	lsrs	r3, r3, #2
 801d112:	b29b      	uxth	r3, r3
 801d114:	3305      	adds	r3, #5
 801d116:	b29b      	uxth	r3, r3
 801d118:	031b      	lsls	r3, r3, #12
 801d11a:	b29a      	uxth	r2, r3
 801d11c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d120:	b29b      	uxth	r3, r3
 801d122:	4313      	orrs	r3, r2
 801d124:	b29b      	uxth	r3, r3
 801d126:	4618      	mov	r0, r3
 801d128:	f7f8 fbd0 	bl	80158cc <lwip_htons>
 801d12c:	4603      	mov	r3, r0
 801d12e:	461a      	mov	r2, r3
 801d130:	693b      	ldr	r3, [r7, #16]
 801d132:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801d134:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801d136:	4618      	mov	r0, r3
 801d138:	f7f8 fbc8 	bl	80158cc <lwip_htons>
 801d13c:	4603      	mov	r3, r0
 801d13e:	461a      	mov	r2, r3
 801d140:	693b      	ldr	r3, [r7, #16]
 801d142:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801d144:	693b      	ldr	r3, [r7, #16]
 801d146:	2200      	movs	r2, #0
 801d148:	741a      	strb	r2, [r3, #16]
 801d14a:	2200      	movs	r2, #0
 801d14c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801d14e:	693b      	ldr	r3, [r7, #16]
 801d150:	2200      	movs	r2, #0
 801d152:	749a      	strb	r2, [r3, #18]
 801d154:	2200      	movs	r2, #0
 801d156:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801d158:	697b      	ldr	r3, [r7, #20]
}
 801d15a:	4618      	mov	r0, r3
 801d15c:	3718      	adds	r7, #24
 801d15e:	46bd      	mov	sp, r7
 801d160:	bd80      	pop	{r7, pc}
 801d162:	bf00      	nop
 801d164:	080232d4 	.word	0x080232d4
 801d168:	080239ac 	.word	0x080239ac
 801d16c:	08023328 	.word	0x08023328

0801d170 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801d170:	b5b0      	push	{r4, r5, r7, lr}
 801d172:	b08a      	sub	sp, #40	; 0x28
 801d174:	af04      	add	r7, sp, #16
 801d176:	60f8      	str	r0, [r7, #12]
 801d178:	607b      	str	r3, [r7, #4]
 801d17a:	460b      	mov	r3, r1
 801d17c:	817b      	strh	r3, [r7, #10]
 801d17e:	4613      	mov	r3, r2
 801d180:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801d182:	68fb      	ldr	r3, [r7, #12]
 801d184:	2b00      	cmp	r3, #0
 801d186:	d106      	bne.n	801d196 <tcp_output_alloc_header+0x26>
 801d188:	4b15      	ldr	r3, [pc, #84]	; (801d1e0 <tcp_output_alloc_header+0x70>)
 801d18a:	f240 7242 	movw	r2, #1858	; 0x742
 801d18e:	4915      	ldr	r1, [pc, #84]	; (801d1e4 <tcp_output_alloc_header+0x74>)
 801d190:	4815      	ldr	r0, [pc, #84]	; (801d1e8 <tcp_output_alloc_header+0x78>)
 801d192:	f003 f9bf 	bl	8020514 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801d196:	68fb      	ldr	r3, [r7, #12]
 801d198:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801d19a:	68fb      	ldr	r3, [r7, #12]
 801d19c:	8adb      	ldrh	r3, [r3, #22]
 801d19e:	68fa      	ldr	r2, [r7, #12]
 801d1a0:	8b12      	ldrh	r2, [r2, #24]
 801d1a2:	68f9      	ldr	r1, [r7, #12]
 801d1a4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801d1a6:	893d      	ldrh	r5, [r7, #8]
 801d1a8:	897c      	ldrh	r4, [r7, #10]
 801d1aa:	9103      	str	r1, [sp, #12]
 801d1ac:	2110      	movs	r1, #16
 801d1ae:	9102      	str	r1, [sp, #8]
 801d1b0:	9201      	str	r2, [sp, #4]
 801d1b2:	9300      	str	r3, [sp, #0]
 801d1b4:	687b      	ldr	r3, [r7, #4]
 801d1b6:	462a      	mov	r2, r5
 801d1b8:	4621      	mov	r1, r4
 801d1ba:	f7ff ff65 	bl	801d088 <tcp_output_alloc_header_common>
 801d1be:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801d1c0:	697b      	ldr	r3, [r7, #20]
 801d1c2:	2b00      	cmp	r3, #0
 801d1c4:	d006      	beq.n	801d1d4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801d1c6:	68fb      	ldr	r3, [r7, #12]
 801d1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1ca:	68fa      	ldr	r2, [r7, #12]
 801d1cc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801d1ce:	441a      	add	r2, r3
 801d1d0:	68fb      	ldr	r3, [r7, #12]
 801d1d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801d1d4:	697b      	ldr	r3, [r7, #20]
}
 801d1d6:	4618      	mov	r0, r3
 801d1d8:	3718      	adds	r7, #24
 801d1da:	46bd      	mov	sp, r7
 801d1dc:	bdb0      	pop	{r4, r5, r7, pc}
 801d1de:	bf00      	nop
 801d1e0:	080232d4 	.word	0x080232d4
 801d1e4:	080239dc 	.word	0x080239dc
 801d1e8:	08023328 	.word	0x08023328

0801d1ec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801d1ec:	b580      	push	{r7, lr}
 801d1ee:	b088      	sub	sp, #32
 801d1f0:	af00      	add	r7, sp, #0
 801d1f2:	60f8      	str	r0, [r7, #12]
 801d1f4:	60b9      	str	r1, [r7, #8]
 801d1f6:	4611      	mov	r1, r2
 801d1f8:	461a      	mov	r2, r3
 801d1fa:	460b      	mov	r3, r1
 801d1fc:	71fb      	strb	r3, [r7, #7]
 801d1fe:	4613      	mov	r3, r2
 801d200:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801d202:	2300      	movs	r3, #0
 801d204:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801d206:	68bb      	ldr	r3, [r7, #8]
 801d208:	2b00      	cmp	r3, #0
 801d20a:	d106      	bne.n	801d21a <tcp_output_fill_options+0x2e>
 801d20c:	4b13      	ldr	r3, [pc, #76]	; (801d25c <tcp_output_fill_options+0x70>)
 801d20e:	f240 7256 	movw	r2, #1878	; 0x756
 801d212:	4913      	ldr	r1, [pc, #76]	; (801d260 <tcp_output_fill_options+0x74>)
 801d214:	4813      	ldr	r0, [pc, #76]	; (801d264 <tcp_output_fill_options+0x78>)
 801d216:	f003 f97d 	bl	8020514 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801d21a:	68bb      	ldr	r3, [r7, #8]
 801d21c:	685b      	ldr	r3, [r3, #4]
 801d21e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801d220:	69bb      	ldr	r3, [r7, #24]
 801d222:	3314      	adds	r3, #20
 801d224:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801d226:	69bb      	ldr	r3, [r7, #24]
 801d228:	f103 0214 	add.w	r2, r3, #20
 801d22c:	8bfb      	ldrh	r3, [r7, #30]
 801d22e:	009b      	lsls	r3, r3, #2
 801d230:	4619      	mov	r1, r3
 801d232:	79fb      	ldrb	r3, [r7, #7]
 801d234:	009b      	lsls	r3, r3, #2
 801d236:	f003 0304 	and.w	r3, r3, #4
 801d23a:	440b      	add	r3, r1
 801d23c:	4413      	add	r3, r2
 801d23e:	697a      	ldr	r2, [r7, #20]
 801d240:	429a      	cmp	r2, r3
 801d242:	d006      	beq.n	801d252 <tcp_output_fill_options+0x66>
 801d244:	4b05      	ldr	r3, [pc, #20]	; (801d25c <tcp_output_fill_options+0x70>)
 801d246:	f240 7275 	movw	r2, #1909	; 0x775
 801d24a:	4907      	ldr	r1, [pc, #28]	; (801d268 <tcp_output_fill_options+0x7c>)
 801d24c:	4805      	ldr	r0, [pc, #20]	; (801d264 <tcp_output_fill_options+0x78>)
 801d24e:	f003 f961 	bl	8020514 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801d252:	bf00      	nop
 801d254:	3720      	adds	r7, #32
 801d256:	46bd      	mov	sp, r7
 801d258:	bd80      	pop	{r7, pc}
 801d25a:	bf00      	nop
 801d25c:	080232d4 	.word	0x080232d4
 801d260:	08023a04 	.word	0x08023a04
 801d264:	08023328 	.word	0x08023328
 801d268:	080238fc 	.word	0x080238fc

0801d26c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801d26c:	b580      	push	{r7, lr}
 801d26e:	b08a      	sub	sp, #40	; 0x28
 801d270:	af04      	add	r7, sp, #16
 801d272:	60f8      	str	r0, [r7, #12]
 801d274:	60b9      	str	r1, [r7, #8]
 801d276:	607a      	str	r2, [r7, #4]
 801d278:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801d27a:	68bb      	ldr	r3, [r7, #8]
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	d106      	bne.n	801d28e <tcp_output_control_segment+0x22>
 801d280:	4b1c      	ldr	r3, [pc, #112]	; (801d2f4 <tcp_output_control_segment+0x88>)
 801d282:	f240 7287 	movw	r2, #1927	; 0x787
 801d286:	491c      	ldr	r1, [pc, #112]	; (801d2f8 <tcp_output_control_segment+0x8c>)
 801d288:	481c      	ldr	r0, [pc, #112]	; (801d2fc <tcp_output_control_segment+0x90>)
 801d28a:	f003 f943 	bl	8020514 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801d28e:	683a      	ldr	r2, [r7, #0]
 801d290:	6879      	ldr	r1, [r7, #4]
 801d292:	68f8      	ldr	r0, [r7, #12]
 801d294:	f7fe fad4 	bl	801b840 <tcp_route>
 801d298:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801d29a:	693b      	ldr	r3, [r7, #16]
 801d29c:	2b00      	cmp	r3, #0
 801d29e:	d102      	bne.n	801d2a6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801d2a0:	23fc      	movs	r3, #252	; 0xfc
 801d2a2:	75fb      	strb	r3, [r7, #23]
 801d2a4:	e01c      	b.n	801d2e0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801d2a6:	68fb      	ldr	r3, [r7, #12]
 801d2a8:	2b00      	cmp	r3, #0
 801d2aa:	d006      	beq.n	801d2ba <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801d2ac:	68fb      	ldr	r3, [r7, #12]
 801d2ae:	7adb      	ldrb	r3, [r3, #11]
 801d2b0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801d2b2:	68fb      	ldr	r3, [r7, #12]
 801d2b4:	7a9b      	ldrb	r3, [r3, #10]
 801d2b6:	757b      	strb	r3, [r7, #21]
 801d2b8:	e003      	b.n	801d2c2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801d2ba:	23ff      	movs	r3, #255	; 0xff
 801d2bc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801d2be:	2300      	movs	r3, #0
 801d2c0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801d2c2:	7dba      	ldrb	r2, [r7, #22]
 801d2c4:	693b      	ldr	r3, [r7, #16]
 801d2c6:	9302      	str	r3, [sp, #8]
 801d2c8:	2306      	movs	r3, #6
 801d2ca:	9301      	str	r3, [sp, #4]
 801d2cc:	7d7b      	ldrb	r3, [r7, #21]
 801d2ce:	9300      	str	r3, [sp, #0]
 801d2d0:	4613      	mov	r3, r2
 801d2d2:	683a      	ldr	r2, [r7, #0]
 801d2d4:	6879      	ldr	r1, [r7, #4]
 801d2d6:	68b8      	ldr	r0, [r7, #8]
 801d2d8:	f001 ff9c 	bl	801f214 <ip4_output_if>
 801d2dc:	4603      	mov	r3, r0
 801d2de:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801d2e0:	68b8      	ldr	r0, [r7, #8]
 801d2e2:	f7f9 fed1 	bl	8017088 <pbuf_free>
  return err;
 801d2e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d2ea:	4618      	mov	r0, r3
 801d2ec:	3718      	adds	r7, #24
 801d2ee:	46bd      	mov	sp, r7
 801d2f0:	bd80      	pop	{r7, pc}
 801d2f2:	bf00      	nop
 801d2f4:	080232d4 	.word	0x080232d4
 801d2f8:	08023a2c 	.word	0x08023a2c
 801d2fc:	08023328 	.word	0x08023328

0801d300 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801d300:	b590      	push	{r4, r7, lr}
 801d302:	b08b      	sub	sp, #44	; 0x2c
 801d304:	af04      	add	r7, sp, #16
 801d306:	60f8      	str	r0, [r7, #12]
 801d308:	60b9      	str	r1, [r7, #8]
 801d30a:	607a      	str	r2, [r7, #4]
 801d30c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801d30e:	683b      	ldr	r3, [r7, #0]
 801d310:	2b00      	cmp	r3, #0
 801d312:	d106      	bne.n	801d322 <tcp_rst+0x22>
 801d314:	4b1f      	ldr	r3, [pc, #124]	; (801d394 <tcp_rst+0x94>)
 801d316:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801d31a:	491f      	ldr	r1, [pc, #124]	; (801d398 <tcp_rst+0x98>)
 801d31c:	481f      	ldr	r0, [pc, #124]	; (801d39c <tcp_rst+0x9c>)
 801d31e:	f003 f8f9 	bl	8020514 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801d322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d324:	2b00      	cmp	r3, #0
 801d326:	d106      	bne.n	801d336 <tcp_rst+0x36>
 801d328:	4b1a      	ldr	r3, [pc, #104]	; (801d394 <tcp_rst+0x94>)
 801d32a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801d32e:	491c      	ldr	r1, [pc, #112]	; (801d3a0 <tcp_rst+0xa0>)
 801d330:	481a      	ldr	r0, [pc, #104]	; (801d39c <tcp_rst+0x9c>)
 801d332:	f003 f8ef 	bl	8020514 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801d336:	2300      	movs	r3, #0
 801d338:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801d33a:	f246 0308 	movw	r3, #24584	; 0x6008
 801d33e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801d340:	7dfb      	ldrb	r3, [r7, #23]
 801d342:	b29c      	uxth	r4, r3
 801d344:	68b8      	ldr	r0, [r7, #8]
 801d346:	f7f8 fad6 	bl	80158f6 <lwip_htonl>
 801d34a:	4602      	mov	r2, r0
 801d34c:	8abb      	ldrh	r3, [r7, #20]
 801d34e:	9303      	str	r3, [sp, #12]
 801d350:	2314      	movs	r3, #20
 801d352:	9302      	str	r3, [sp, #8]
 801d354:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801d356:	9301      	str	r3, [sp, #4]
 801d358:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801d35a:	9300      	str	r3, [sp, #0]
 801d35c:	4613      	mov	r3, r2
 801d35e:	2200      	movs	r2, #0
 801d360:	4621      	mov	r1, r4
 801d362:	6878      	ldr	r0, [r7, #4]
 801d364:	f7ff fe90 	bl	801d088 <tcp_output_alloc_header_common>
 801d368:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801d36a:	693b      	ldr	r3, [r7, #16]
 801d36c:	2b00      	cmp	r3, #0
 801d36e:	d00c      	beq.n	801d38a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801d370:	7dfb      	ldrb	r3, [r7, #23]
 801d372:	2200      	movs	r2, #0
 801d374:	6939      	ldr	r1, [r7, #16]
 801d376:	68f8      	ldr	r0, [r7, #12]
 801d378:	f7ff ff38 	bl	801d1ec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801d37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d37e:	683a      	ldr	r2, [r7, #0]
 801d380:	6939      	ldr	r1, [r7, #16]
 801d382:	68f8      	ldr	r0, [r7, #12]
 801d384:	f7ff ff72 	bl	801d26c <tcp_output_control_segment>
 801d388:	e000      	b.n	801d38c <tcp_rst+0x8c>
    return;
 801d38a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801d38c:	371c      	adds	r7, #28
 801d38e:	46bd      	mov	sp, r7
 801d390:	bd90      	pop	{r4, r7, pc}
 801d392:	bf00      	nop
 801d394:	080232d4 	.word	0x080232d4
 801d398:	08023a58 	.word	0x08023a58
 801d39c:	08023328 	.word	0x08023328
 801d3a0:	08023a74 	.word	0x08023a74

0801d3a4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801d3a4:	b590      	push	{r4, r7, lr}
 801d3a6:	b087      	sub	sp, #28
 801d3a8:	af00      	add	r7, sp, #0
 801d3aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801d3ac:	2300      	movs	r3, #0
 801d3ae:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801d3b0:	2300      	movs	r3, #0
 801d3b2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801d3b4:	687b      	ldr	r3, [r7, #4]
 801d3b6:	2b00      	cmp	r3, #0
 801d3b8:	d106      	bne.n	801d3c8 <tcp_send_empty_ack+0x24>
 801d3ba:	4b28      	ldr	r3, [pc, #160]	; (801d45c <tcp_send_empty_ack+0xb8>)
 801d3bc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801d3c0:	4927      	ldr	r1, [pc, #156]	; (801d460 <tcp_send_empty_ack+0xbc>)
 801d3c2:	4828      	ldr	r0, [pc, #160]	; (801d464 <tcp_send_empty_ack+0xc0>)
 801d3c4:	f003 f8a6 	bl	8020514 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d3c8:	7dfb      	ldrb	r3, [r7, #23]
 801d3ca:	009b      	lsls	r3, r3, #2
 801d3cc:	b2db      	uxtb	r3, r3
 801d3ce:	f003 0304 	and.w	r3, r3, #4
 801d3d2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801d3d4:	7d7b      	ldrb	r3, [r7, #21]
 801d3d6:	b29c      	uxth	r4, r3
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d3dc:	4618      	mov	r0, r3
 801d3de:	f7f8 fa8a 	bl	80158f6 <lwip_htonl>
 801d3e2:	4603      	mov	r3, r0
 801d3e4:	2200      	movs	r2, #0
 801d3e6:	4621      	mov	r1, r4
 801d3e8:	6878      	ldr	r0, [r7, #4]
 801d3ea:	f7ff fec1 	bl	801d170 <tcp_output_alloc_header>
 801d3ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d3f0:	693b      	ldr	r3, [r7, #16]
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	d109      	bne.n	801d40a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	8b5b      	ldrh	r3, [r3, #26]
 801d3fa:	f043 0303 	orr.w	r3, r3, #3
 801d3fe:	b29a      	uxth	r2, r3
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801d404:	f06f 0301 	mvn.w	r3, #1
 801d408:	e023      	b.n	801d452 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801d40a:	7dbb      	ldrb	r3, [r7, #22]
 801d40c:	7dfa      	ldrb	r2, [r7, #23]
 801d40e:	6939      	ldr	r1, [r7, #16]
 801d410:	6878      	ldr	r0, [r7, #4]
 801d412:	f7ff feeb 	bl	801d1ec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801d416:	687a      	ldr	r2, [r7, #4]
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	3304      	adds	r3, #4
 801d41c:	6939      	ldr	r1, [r7, #16]
 801d41e:	6878      	ldr	r0, [r7, #4]
 801d420:	f7ff ff24 	bl	801d26c <tcp_output_control_segment>
 801d424:	4603      	mov	r3, r0
 801d426:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801d428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d42c:	2b00      	cmp	r3, #0
 801d42e:	d007      	beq.n	801d440 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	8b5b      	ldrh	r3, [r3, #26]
 801d434:	f043 0303 	orr.w	r3, r3, #3
 801d438:	b29a      	uxth	r2, r3
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	835a      	strh	r2, [r3, #26]
 801d43e:	e006      	b.n	801d44e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	8b5b      	ldrh	r3, [r3, #26]
 801d444:	f023 0303 	bic.w	r3, r3, #3
 801d448:	b29a      	uxth	r2, r3
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801d44e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d452:	4618      	mov	r0, r3
 801d454:	371c      	adds	r7, #28
 801d456:	46bd      	mov	sp, r7
 801d458:	bd90      	pop	{r4, r7, pc}
 801d45a:	bf00      	nop
 801d45c:	080232d4 	.word	0x080232d4
 801d460:	08023a90 	.word	0x08023a90
 801d464:	08023328 	.word	0x08023328

0801d468 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801d468:	b590      	push	{r4, r7, lr}
 801d46a:	b087      	sub	sp, #28
 801d46c:	af00      	add	r7, sp, #0
 801d46e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801d470:	2300      	movs	r3, #0
 801d472:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	2b00      	cmp	r3, #0
 801d478:	d106      	bne.n	801d488 <tcp_keepalive+0x20>
 801d47a:	4b18      	ldr	r3, [pc, #96]	; (801d4dc <tcp_keepalive+0x74>)
 801d47c:	f640 0224 	movw	r2, #2084	; 0x824
 801d480:	4917      	ldr	r1, [pc, #92]	; (801d4e0 <tcp_keepalive+0x78>)
 801d482:	4818      	ldr	r0, [pc, #96]	; (801d4e4 <tcp_keepalive+0x7c>)
 801d484:	f003 f846 	bl	8020514 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801d488:	7dfb      	ldrb	r3, [r7, #23]
 801d48a:	b29c      	uxth	r4, r3
 801d48c:	687b      	ldr	r3, [r7, #4]
 801d48e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d490:	3b01      	subs	r3, #1
 801d492:	4618      	mov	r0, r3
 801d494:	f7f8 fa2f 	bl	80158f6 <lwip_htonl>
 801d498:	4603      	mov	r3, r0
 801d49a:	2200      	movs	r2, #0
 801d49c:	4621      	mov	r1, r4
 801d49e:	6878      	ldr	r0, [r7, #4]
 801d4a0:	f7ff fe66 	bl	801d170 <tcp_output_alloc_header>
 801d4a4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d4a6:	693b      	ldr	r3, [r7, #16]
 801d4a8:	2b00      	cmp	r3, #0
 801d4aa:	d102      	bne.n	801d4b2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801d4ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d4b0:	e010      	b.n	801d4d4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801d4b2:	7dfb      	ldrb	r3, [r7, #23]
 801d4b4:	2200      	movs	r2, #0
 801d4b6:	6939      	ldr	r1, [r7, #16]
 801d4b8:	6878      	ldr	r0, [r7, #4]
 801d4ba:	f7ff fe97 	bl	801d1ec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801d4be:	687a      	ldr	r2, [r7, #4]
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	3304      	adds	r3, #4
 801d4c4:	6939      	ldr	r1, [r7, #16]
 801d4c6:	6878      	ldr	r0, [r7, #4]
 801d4c8:	f7ff fed0 	bl	801d26c <tcp_output_control_segment>
 801d4cc:	4603      	mov	r3, r0
 801d4ce:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801d4d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d4d4:	4618      	mov	r0, r3
 801d4d6:	371c      	adds	r7, #28
 801d4d8:	46bd      	mov	sp, r7
 801d4da:	bd90      	pop	{r4, r7, pc}
 801d4dc:	080232d4 	.word	0x080232d4
 801d4e0:	08023ab0 	.word	0x08023ab0
 801d4e4:	08023328 	.word	0x08023328

0801d4e8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801d4e8:	b590      	push	{r4, r7, lr}
 801d4ea:	b08b      	sub	sp, #44	; 0x2c
 801d4ec:	af00      	add	r7, sp, #0
 801d4ee:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801d4f0:	2300      	movs	r3, #0
 801d4f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801d4f6:	687b      	ldr	r3, [r7, #4]
 801d4f8:	2b00      	cmp	r3, #0
 801d4fa:	d106      	bne.n	801d50a <tcp_zero_window_probe+0x22>
 801d4fc:	4b4c      	ldr	r3, [pc, #304]	; (801d630 <tcp_zero_window_probe+0x148>)
 801d4fe:	f640 024f 	movw	r2, #2127	; 0x84f
 801d502:	494c      	ldr	r1, [pc, #304]	; (801d634 <tcp_zero_window_probe+0x14c>)
 801d504:	484c      	ldr	r0, [pc, #304]	; (801d638 <tcp_zero_window_probe+0x150>)
 801d506:	f003 f805 	bl	8020514 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d50e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801d510:	6a3b      	ldr	r3, [r7, #32]
 801d512:	2b00      	cmp	r3, #0
 801d514:	d101      	bne.n	801d51a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801d516:	2300      	movs	r3, #0
 801d518:	e086      	b.n	801d628 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801d51a:	687b      	ldr	r3, [r7, #4]
 801d51c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801d520:	2bff      	cmp	r3, #255	; 0xff
 801d522:	d007      	beq.n	801d534 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801d524:	687b      	ldr	r3, [r7, #4]
 801d526:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801d52a:	3301      	adds	r3, #1
 801d52c:	b2da      	uxtb	r2, r3
 801d52e:	687b      	ldr	r3, [r7, #4]
 801d530:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801d534:	6a3b      	ldr	r3, [r7, #32]
 801d536:	68db      	ldr	r3, [r3, #12]
 801d538:	899b      	ldrh	r3, [r3, #12]
 801d53a:	b29b      	uxth	r3, r3
 801d53c:	4618      	mov	r0, r3
 801d53e:	f7f8 f9c5 	bl	80158cc <lwip_htons>
 801d542:	4603      	mov	r3, r0
 801d544:	b2db      	uxtb	r3, r3
 801d546:	f003 0301 	and.w	r3, r3, #1
 801d54a:	2b00      	cmp	r3, #0
 801d54c:	d005      	beq.n	801d55a <tcp_zero_window_probe+0x72>
 801d54e:	6a3b      	ldr	r3, [r7, #32]
 801d550:	891b      	ldrh	r3, [r3, #8]
 801d552:	2b00      	cmp	r3, #0
 801d554:	d101      	bne.n	801d55a <tcp_zero_window_probe+0x72>
 801d556:	2301      	movs	r3, #1
 801d558:	e000      	b.n	801d55c <tcp_zero_window_probe+0x74>
 801d55a:	2300      	movs	r3, #0
 801d55c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801d55e:	7ffb      	ldrb	r3, [r7, #31]
 801d560:	2b00      	cmp	r3, #0
 801d562:	bf0c      	ite	eq
 801d564:	2301      	moveq	r3, #1
 801d566:	2300      	movne	r3, #0
 801d568:	b2db      	uxtb	r3, r3
 801d56a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801d56c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d570:	b299      	uxth	r1, r3
 801d572:	6a3b      	ldr	r3, [r7, #32]
 801d574:	68db      	ldr	r3, [r3, #12]
 801d576:	685b      	ldr	r3, [r3, #4]
 801d578:	8bba      	ldrh	r2, [r7, #28]
 801d57a:	6878      	ldr	r0, [r7, #4]
 801d57c:	f7ff fdf8 	bl	801d170 <tcp_output_alloc_header>
 801d580:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801d582:	69bb      	ldr	r3, [r7, #24]
 801d584:	2b00      	cmp	r3, #0
 801d586:	d102      	bne.n	801d58e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801d588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d58c:	e04c      	b.n	801d628 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801d58e:	69bb      	ldr	r3, [r7, #24]
 801d590:	685b      	ldr	r3, [r3, #4]
 801d592:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801d594:	7ffb      	ldrb	r3, [r7, #31]
 801d596:	2b00      	cmp	r3, #0
 801d598:	d011      	beq.n	801d5be <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801d59a:	697b      	ldr	r3, [r7, #20]
 801d59c:	899b      	ldrh	r3, [r3, #12]
 801d59e:	b29b      	uxth	r3, r3
 801d5a0:	b21b      	sxth	r3, r3
 801d5a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801d5a6:	b21c      	sxth	r4, r3
 801d5a8:	2011      	movs	r0, #17
 801d5aa:	f7f8 f98f 	bl	80158cc <lwip_htons>
 801d5ae:	4603      	mov	r3, r0
 801d5b0:	b21b      	sxth	r3, r3
 801d5b2:	4323      	orrs	r3, r4
 801d5b4:	b21b      	sxth	r3, r3
 801d5b6:	b29a      	uxth	r2, r3
 801d5b8:	697b      	ldr	r3, [r7, #20]
 801d5ba:	819a      	strh	r2, [r3, #12]
 801d5bc:	e010      	b.n	801d5e0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801d5be:	69bb      	ldr	r3, [r7, #24]
 801d5c0:	685b      	ldr	r3, [r3, #4]
 801d5c2:	3314      	adds	r3, #20
 801d5c4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801d5c6:	6a3b      	ldr	r3, [r7, #32]
 801d5c8:	6858      	ldr	r0, [r3, #4]
 801d5ca:	6a3b      	ldr	r3, [r7, #32]
 801d5cc:	685b      	ldr	r3, [r3, #4]
 801d5ce:	891a      	ldrh	r2, [r3, #8]
 801d5d0:	6a3b      	ldr	r3, [r7, #32]
 801d5d2:	891b      	ldrh	r3, [r3, #8]
 801d5d4:	1ad3      	subs	r3, r2, r3
 801d5d6:	b29b      	uxth	r3, r3
 801d5d8:	2201      	movs	r2, #1
 801d5da:	6939      	ldr	r1, [r7, #16]
 801d5dc:	f7f9 ff4a 	bl	8017474 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801d5e0:	6a3b      	ldr	r3, [r7, #32]
 801d5e2:	68db      	ldr	r3, [r3, #12]
 801d5e4:	685b      	ldr	r3, [r3, #4]
 801d5e6:	4618      	mov	r0, r3
 801d5e8:	f7f8 f985 	bl	80158f6 <lwip_htonl>
 801d5ec:	4603      	mov	r3, r0
 801d5ee:	3301      	adds	r3, #1
 801d5f0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801d5f2:	687b      	ldr	r3, [r7, #4]
 801d5f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d5f6:	68fb      	ldr	r3, [r7, #12]
 801d5f8:	1ad3      	subs	r3, r2, r3
 801d5fa:	2b00      	cmp	r3, #0
 801d5fc:	da02      	bge.n	801d604 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801d5fe:	687b      	ldr	r3, [r7, #4]
 801d600:	68fa      	ldr	r2, [r7, #12]
 801d602:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801d604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d608:	2200      	movs	r2, #0
 801d60a:	69b9      	ldr	r1, [r7, #24]
 801d60c:	6878      	ldr	r0, [r7, #4]
 801d60e:	f7ff fded 	bl	801d1ec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801d612:	687a      	ldr	r2, [r7, #4]
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	3304      	adds	r3, #4
 801d618:	69b9      	ldr	r1, [r7, #24]
 801d61a:	6878      	ldr	r0, [r7, #4]
 801d61c:	f7ff fe26 	bl	801d26c <tcp_output_control_segment>
 801d620:	4603      	mov	r3, r0
 801d622:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801d624:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801d628:	4618      	mov	r0, r3
 801d62a:	372c      	adds	r7, #44	; 0x2c
 801d62c:	46bd      	mov	sp, r7
 801d62e:	bd90      	pop	{r4, r7, pc}
 801d630:	080232d4 	.word	0x080232d4
 801d634:	08023acc 	.word	0x08023acc
 801d638:	08023328 	.word	0x08023328

0801d63c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801d63c:	b580      	push	{r7, lr}
 801d63e:	b082      	sub	sp, #8
 801d640:	af00      	add	r7, sp, #0
 801d642:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801d644:	f7fa f804 	bl	8017650 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801d648:	4b0a      	ldr	r3, [pc, #40]	; (801d674 <tcpip_tcp_timer+0x38>)
 801d64a:	681b      	ldr	r3, [r3, #0]
 801d64c:	2b00      	cmp	r3, #0
 801d64e:	d103      	bne.n	801d658 <tcpip_tcp_timer+0x1c>
 801d650:	4b09      	ldr	r3, [pc, #36]	; (801d678 <tcpip_tcp_timer+0x3c>)
 801d652:	681b      	ldr	r3, [r3, #0]
 801d654:	2b00      	cmp	r3, #0
 801d656:	d005      	beq.n	801d664 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801d658:	2200      	movs	r2, #0
 801d65a:	4908      	ldr	r1, [pc, #32]	; (801d67c <tcpip_tcp_timer+0x40>)
 801d65c:	20fa      	movs	r0, #250	; 0xfa
 801d65e:	f000 f8f1 	bl	801d844 <sys_timeout>
 801d662:	e002      	b.n	801d66a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801d664:	4b06      	ldr	r3, [pc, #24]	; (801d680 <tcpip_tcp_timer+0x44>)
 801d666:	2200      	movs	r2, #0
 801d668:	601a      	str	r2, [r3, #0]
  }
}
 801d66a:	bf00      	nop
 801d66c:	3708      	adds	r7, #8
 801d66e:	46bd      	mov	sp, r7
 801d670:	bd80      	pop	{r7, pc}
 801d672:	bf00      	nop
 801d674:	2001fef0 	.word	0x2001fef0
 801d678:	2001ff00 	.word	0x2001ff00
 801d67c:	0801d63d 	.word	0x0801d63d
 801d680:	20009388 	.word	0x20009388

0801d684 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801d684:	b580      	push	{r7, lr}
 801d686:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801d688:	4b0a      	ldr	r3, [pc, #40]	; (801d6b4 <tcp_timer_needed+0x30>)
 801d68a:	681b      	ldr	r3, [r3, #0]
 801d68c:	2b00      	cmp	r3, #0
 801d68e:	d10f      	bne.n	801d6b0 <tcp_timer_needed+0x2c>
 801d690:	4b09      	ldr	r3, [pc, #36]	; (801d6b8 <tcp_timer_needed+0x34>)
 801d692:	681b      	ldr	r3, [r3, #0]
 801d694:	2b00      	cmp	r3, #0
 801d696:	d103      	bne.n	801d6a0 <tcp_timer_needed+0x1c>
 801d698:	4b08      	ldr	r3, [pc, #32]	; (801d6bc <tcp_timer_needed+0x38>)
 801d69a:	681b      	ldr	r3, [r3, #0]
 801d69c:	2b00      	cmp	r3, #0
 801d69e:	d007      	beq.n	801d6b0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801d6a0:	4b04      	ldr	r3, [pc, #16]	; (801d6b4 <tcp_timer_needed+0x30>)
 801d6a2:	2201      	movs	r2, #1
 801d6a4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801d6a6:	2200      	movs	r2, #0
 801d6a8:	4905      	ldr	r1, [pc, #20]	; (801d6c0 <tcp_timer_needed+0x3c>)
 801d6aa:	20fa      	movs	r0, #250	; 0xfa
 801d6ac:	f000 f8ca 	bl	801d844 <sys_timeout>
  }
}
 801d6b0:	bf00      	nop
 801d6b2:	bd80      	pop	{r7, pc}
 801d6b4:	20009388 	.word	0x20009388
 801d6b8:	2001fef0 	.word	0x2001fef0
 801d6bc:	2001ff00 	.word	0x2001ff00
 801d6c0:	0801d63d 	.word	0x0801d63d

0801d6c4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801d6c4:	b580      	push	{r7, lr}
 801d6c6:	b086      	sub	sp, #24
 801d6c8:	af00      	add	r7, sp, #0
 801d6ca:	60f8      	str	r0, [r7, #12]
 801d6cc:	60b9      	str	r1, [r7, #8]
 801d6ce:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801d6d0:	200a      	movs	r0, #10
 801d6d2:	f7f8 fde7 	bl	80162a4 <memp_malloc>
 801d6d6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801d6d8:	693b      	ldr	r3, [r7, #16]
 801d6da:	2b00      	cmp	r3, #0
 801d6dc:	d109      	bne.n	801d6f2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801d6de:	693b      	ldr	r3, [r7, #16]
 801d6e0:	2b00      	cmp	r3, #0
 801d6e2:	d151      	bne.n	801d788 <sys_timeout_abs+0xc4>
 801d6e4:	4b2a      	ldr	r3, [pc, #168]	; (801d790 <sys_timeout_abs+0xcc>)
 801d6e6:	22be      	movs	r2, #190	; 0xbe
 801d6e8:	492a      	ldr	r1, [pc, #168]	; (801d794 <sys_timeout_abs+0xd0>)
 801d6ea:	482b      	ldr	r0, [pc, #172]	; (801d798 <sys_timeout_abs+0xd4>)
 801d6ec:	f002 ff12 	bl	8020514 <iprintf>
    return;
 801d6f0:	e04a      	b.n	801d788 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801d6f2:	693b      	ldr	r3, [r7, #16]
 801d6f4:	2200      	movs	r2, #0
 801d6f6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801d6f8:	693b      	ldr	r3, [r7, #16]
 801d6fa:	68ba      	ldr	r2, [r7, #8]
 801d6fc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801d6fe:	693b      	ldr	r3, [r7, #16]
 801d700:	687a      	ldr	r2, [r7, #4]
 801d702:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801d704:	693b      	ldr	r3, [r7, #16]
 801d706:	68fa      	ldr	r2, [r7, #12]
 801d708:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801d70a:	4b24      	ldr	r3, [pc, #144]	; (801d79c <sys_timeout_abs+0xd8>)
 801d70c:	681b      	ldr	r3, [r3, #0]
 801d70e:	2b00      	cmp	r3, #0
 801d710:	d103      	bne.n	801d71a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801d712:	4a22      	ldr	r2, [pc, #136]	; (801d79c <sys_timeout_abs+0xd8>)
 801d714:	693b      	ldr	r3, [r7, #16]
 801d716:	6013      	str	r3, [r2, #0]
    return;
 801d718:	e037      	b.n	801d78a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801d71a:	693b      	ldr	r3, [r7, #16]
 801d71c:	685a      	ldr	r2, [r3, #4]
 801d71e:	4b1f      	ldr	r3, [pc, #124]	; (801d79c <sys_timeout_abs+0xd8>)
 801d720:	681b      	ldr	r3, [r3, #0]
 801d722:	685b      	ldr	r3, [r3, #4]
 801d724:	1ad3      	subs	r3, r2, r3
 801d726:	0fdb      	lsrs	r3, r3, #31
 801d728:	f003 0301 	and.w	r3, r3, #1
 801d72c:	b2db      	uxtb	r3, r3
 801d72e:	2b00      	cmp	r3, #0
 801d730:	d007      	beq.n	801d742 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801d732:	4b1a      	ldr	r3, [pc, #104]	; (801d79c <sys_timeout_abs+0xd8>)
 801d734:	681a      	ldr	r2, [r3, #0]
 801d736:	693b      	ldr	r3, [r7, #16]
 801d738:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801d73a:	4a18      	ldr	r2, [pc, #96]	; (801d79c <sys_timeout_abs+0xd8>)
 801d73c:	693b      	ldr	r3, [r7, #16]
 801d73e:	6013      	str	r3, [r2, #0]
 801d740:	e023      	b.n	801d78a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801d742:	4b16      	ldr	r3, [pc, #88]	; (801d79c <sys_timeout_abs+0xd8>)
 801d744:	681b      	ldr	r3, [r3, #0]
 801d746:	617b      	str	r3, [r7, #20]
 801d748:	e01a      	b.n	801d780 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801d74a:	697b      	ldr	r3, [r7, #20]
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	2b00      	cmp	r3, #0
 801d750:	d00b      	beq.n	801d76a <sys_timeout_abs+0xa6>
 801d752:	693b      	ldr	r3, [r7, #16]
 801d754:	685a      	ldr	r2, [r3, #4]
 801d756:	697b      	ldr	r3, [r7, #20]
 801d758:	681b      	ldr	r3, [r3, #0]
 801d75a:	685b      	ldr	r3, [r3, #4]
 801d75c:	1ad3      	subs	r3, r2, r3
 801d75e:	0fdb      	lsrs	r3, r3, #31
 801d760:	f003 0301 	and.w	r3, r3, #1
 801d764:	b2db      	uxtb	r3, r3
 801d766:	2b00      	cmp	r3, #0
 801d768:	d007      	beq.n	801d77a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801d76a:	697b      	ldr	r3, [r7, #20]
 801d76c:	681a      	ldr	r2, [r3, #0]
 801d76e:	693b      	ldr	r3, [r7, #16]
 801d770:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801d772:	697b      	ldr	r3, [r7, #20]
 801d774:	693a      	ldr	r2, [r7, #16]
 801d776:	601a      	str	r2, [r3, #0]
        break;
 801d778:	e007      	b.n	801d78a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801d77a:	697b      	ldr	r3, [r7, #20]
 801d77c:	681b      	ldr	r3, [r3, #0]
 801d77e:	617b      	str	r3, [r7, #20]
 801d780:	697b      	ldr	r3, [r7, #20]
 801d782:	2b00      	cmp	r3, #0
 801d784:	d1e1      	bne.n	801d74a <sys_timeout_abs+0x86>
 801d786:	e000      	b.n	801d78a <sys_timeout_abs+0xc6>
    return;
 801d788:	bf00      	nop
      }
    }
  }
}
 801d78a:	3718      	adds	r7, #24
 801d78c:	46bd      	mov	sp, r7
 801d78e:	bd80      	pop	{r7, pc}
 801d790:	08023af0 	.word	0x08023af0
 801d794:	08023b24 	.word	0x08023b24
 801d798:	08023b64 	.word	0x08023b64
 801d79c:	20009380 	.word	0x20009380

0801d7a0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801d7a0:	b580      	push	{r7, lr}
 801d7a2:	b086      	sub	sp, #24
 801d7a4:	af00      	add	r7, sp, #0
 801d7a6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801d7a8:	687b      	ldr	r3, [r7, #4]
 801d7aa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801d7ac:	697b      	ldr	r3, [r7, #20]
 801d7ae:	685b      	ldr	r3, [r3, #4]
 801d7b0:	4798      	blx	r3

  now = sys_now();
 801d7b2:	f7f4 f8df 	bl	8011974 <sys_now>
 801d7b6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801d7b8:	697b      	ldr	r3, [r7, #20]
 801d7ba:	681a      	ldr	r2, [r3, #0]
 801d7bc:	4b0f      	ldr	r3, [pc, #60]	; (801d7fc <lwip_cyclic_timer+0x5c>)
 801d7be:	681b      	ldr	r3, [r3, #0]
 801d7c0:	4413      	add	r3, r2
 801d7c2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801d7c4:	68fa      	ldr	r2, [r7, #12]
 801d7c6:	693b      	ldr	r3, [r7, #16]
 801d7c8:	1ad3      	subs	r3, r2, r3
 801d7ca:	0fdb      	lsrs	r3, r3, #31
 801d7cc:	f003 0301 	and.w	r3, r3, #1
 801d7d0:	b2db      	uxtb	r3, r3
 801d7d2:	2b00      	cmp	r3, #0
 801d7d4:	d009      	beq.n	801d7ea <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801d7d6:	697b      	ldr	r3, [r7, #20]
 801d7d8:	681a      	ldr	r2, [r3, #0]
 801d7da:	693b      	ldr	r3, [r7, #16]
 801d7dc:	4413      	add	r3, r2
 801d7de:	687a      	ldr	r2, [r7, #4]
 801d7e0:	4907      	ldr	r1, [pc, #28]	; (801d800 <lwip_cyclic_timer+0x60>)
 801d7e2:	4618      	mov	r0, r3
 801d7e4:	f7ff ff6e 	bl	801d6c4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801d7e8:	e004      	b.n	801d7f4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801d7ea:	687a      	ldr	r2, [r7, #4]
 801d7ec:	4904      	ldr	r1, [pc, #16]	; (801d800 <lwip_cyclic_timer+0x60>)
 801d7ee:	68f8      	ldr	r0, [r7, #12]
 801d7f0:	f7ff ff68 	bl	801d6c4 <sys_timeout_abs>
}
 801d7f4:	bf00      	nop
 801d7f6:	3718      	adds	r7, #24
 801d7f8:	46bd      	mov	sp, r7
 801d7fa:	bd80      	pop	{r7, pc}
 801d7fc:	20009384 	.word	0x20009384
 801d800:	0801d7a1 	.word	0x0801d7a1

0801d804 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801d804:	b580      	push	{r7, lr}
 801d806:	b082      	sub	sp, #8
 801d808:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801d80a:	2301      	movs	r3, #1
 801d80c:	607b      	str	r3, [r7, #4]
 801d80e:	e00e      	b.n	801d82e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801d810:	4a0a      	ldr	r2, [pc, #40]	; (801d83c <sys_timeouts_init+0x38>)
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	00db      	lsls	r3, r3, #3
 801d81c:	4a07      	ldr	r2, [pc, #28]	; (801d83c <sys_timeouts_init+0x38>)
 801d81e:	4413      	add	r3, r2
 801d820:	461a      	mov	r2, r3
 801d822:	4907      	ldr	r1, [pc, #28]	; (801d840 <sys_timeouts_init+0x3c>)
 801d824:	f000 f80e 	bl	801d844 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801d828:	687b      	ldr	r3, [r7, #4]
 801d82a:	3301      	adds	r3, #1
 801d82c:	607b      	str	r3, [r7, #4]
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	2b02      	cmp	r3, #2
 801d832:	d9ed      	bls.n	801d810 <sys_timeouts_init+0xc>
  }
}
 801d834:	bf00      	nop
 801d836:	3708      	adds	r7, #8
 801d838:	46bd      	mov	sp, r7
 801d83a:	bd80      	pop	{r7, pc}
 801d83c:	08035258 	.word	0x08035258
 801d840:	0801d7a1 	.word	0x0801d7a1

0801d844 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801d844:	b580      	push	{r7, lr}
 801d846:	b086      	sub	sp, #24
 801d848:	af00      	add	r7, sp, #0
 801d84a:	60f8      	str	r0, [r7, #12]
 801d84c:	60b9      	str	r1, [r7, #8]
 801d84e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801d850:	68fb      	ldr	r3, [r7, #12]
 801d852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d856:	d306      	bcc.n	801d866 <sys_timeout+0x22>
 801d858:	4b0a      	ldr	r3, [pc, #40]	; (801d884 <sys_timeout+0x40>)
 801d85a:	f240 1229 	movw	r2, #297	; 0x129
 801d85e:	490a      	ldr	r1, [pc, #40]	; (801d888 <sys_timeout+0x44>)
 801d860:	480a      	ldr	r0, [pc, #40]	; (801d88c <sys_timeout+0x48>)
 801d862:	f002 fe57 	bl	8020514 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801d866:	f7f4 f885 	bl	8011974 <sys_now>
 801d86a:	4602      	mov	r2, r0
 801d86c:	68fb      	ldr	r3, [r7, #12]
 801d86e:	4413      	add	r3, r2
 801d870:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801d872:	687a      	ldr	r2, [r7, #4]
 801d874:	68b9      	ldr	r1, [r7, #8]
 801d876:	6978      	ldr	r0, [r7, #20]
 801d878:	f7ff ff24 	bl	801d6c4 <sys_timeout_abs>
#endif
}
 801d87c:	bf00      	nop
 801d87e:	3718      	adds	r7, #24
 801d880:	46bd      	mov	sp, r7
 801d882:	bd80      	pop	{r7, pc}
 801d884:	08023af0 	.word	0x08023af0
 801d888:	08023b8c 	.word	0x08023b8c
 801d88c:	08023b64 	.word	0x08023b64

0801d890 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801d890:	b580      	push	{r7, lr}
 801d892:	b084      	sub	sp, #16
 801d894:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801d896:	f7f4 f86d 	bl	8011974 <sys_now>
 801d89a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801d89c:	4b17      	ldr	r3, [pc, #92]	; (801d8fc <sys_check_timeouts+0x6c>)
 801d89e:	681b      	ldr	r3, [r3, #0]
 801d8a0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801d8a2:	68bb      	ldr	r3, [r7, #8]
 801d8a4:	2b00      	cmp	r3, #0
 801d8a6:	d022      	beq.n	801d8ee <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801d8a8:	68bb      	ldr	r3, [r7, #8]
 801d8aa:	685b      	ldr	r3, [r3, #4]
 801d8ac:	68fa      	ldr	r2, [r7, #12]
 801d8ae:	1ad3      	subs	r3, r2, r3
 801d8b0:	0fdb      	lsrs	r3, r3, #31
 801d8b2:	f003 0301 	and.w	r3, r3, #1
 801d8b6:	b2db      	uxtb	r3, r3
 801d8b8:	2b00      	cmp	r3, #0
 801d8ba:	d11a      	bne.n	801d8f2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801d8bc:	68bb      	ldr	r3, [r7, #8]
 801d8be:	681b      	ldr	r3, [r3, #0]
 801d8c0:	4a0e      	ldr	r2, [pc, #56]	; (801d8fc <sys_check_timeouts+0x6c>)
 801d8c2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801d8c4:	68bb      	ldr	r3, [r7, #8]
 801d8c6:	689b      	ldr	r3, [r3, #8]
 801d8c8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801d8ca:	68bb      	ldr	r3, [r7, #8]
 801d8cc:	68db      	ldr	r3, [r3, #12]
 801d8ce:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801d8d0:	68bb      	ldr	r3, [r7, #8]
 801d8d2:	685b      	ldr	r3, [r3, #4]
 801d8d4:	4a0a      	ldr	r2, [pc, #40]	; (801d900 <sys_check_timeouts+0x70>)
 801d8d6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801d8d8:	68b9      	ldr	r1, [r7, #8]
 801d8da:	200a      	movs	r0, #10
 801d8dc:	f7f8 fd34 	bl	8016348 <memp_free>
    if (handler != NULL) {
 801d8e0:	687b      	ldr	r3, [r7, #4]
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	d0da      	beq.n	801d89c <sys_check_timeouts+0xc>
      handler(arg);
 801d8e6:	687b      	ldr	r3, [r7, #4]
 801d8e8:	6838      	ldr	r0, [r7, #0]
 801d8ea:	4798      	blx	r3
  do {
 801d8ec:	e7d6      	b.n	801d89c <sys_check_timeouts+0xc>
      return;
 801d8ee:	bf00      	nop
 801d8f0:	e000      	b.n	801d8f4 <sys_check_timeouts+0x64>
      return;
 801d8f2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801d8f4:	3710      	adds	r7, #16
 801d8f6:	46bd      	mov	sp, r7
 801d8f8:	bd80      	pop	{r7, pc}
 801d8fa:	bf00      	nop
 801d8fc:	20009380 	.word	0x20009380
 801d900:	20009384 	.word	0x20009384

0801d904 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801d904:	b580      	push	{r7, lr}
 801d906:	b082      	sub	sp, #8
 801d908:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801d90a:	4b16      	ldr	r3, [pc, #88]	; (801d964 <sys_timeouts_sleeptime+0x60>)
 801d90c:	681b      	ldr	r3, [r3, #0]
 801d90e:	2b00      	cmp	r3, #0
 801d910:	d102      	bne.n	801d918 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801d912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d916:	e020      	b.n	801d95a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801d918:	f7f4 f82c 	bl	8011974 <sys_now>
 801d91c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801d91e:	4b11      	ldr	r3, [pc, #68]	; (801d964 <sys_timeouts_sleeptime+0x60>)
 801d920:	681b      	ldr	r3, [r3, #0]
 801d922:	685a      	ldr	r2, [r3, #4]
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	1ad3      	subs	r3, r2, r3
 801d928:	0fdb      	lsrs	r3, r3, #31
 801d92a:	f003 0301 	and.w	r3, r3, #1
 801d92e:	b2db      	uxtb	r3, r3
 801d930:	2b00      	cmp	r3, #0
 801d932:	d001      	beq.n	801d938 <sys_timeouts_sleeptime+0x34>
    return 0;
 801d934:	2300      	movs	r3, #0
 801d936:	e010      	b.n	801d95a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801d938:	4b0a      	ldr	r3, [pc, #40]	; (801d964 <sys_timeouts_sleeptime+0x60>)
 801d93a:	681b      	ldr	r3, [r3, #0]
 801d93c:	685a      	ldr	r2, [r3, #4]
 801d93e:	687b      	ldr	r3, [r7, #4]
 801d940:	1ad3      	subs	r3, r2, r3
 801d942:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801d944:	683b      	ldr	r3, [r7, #0]
 801d946:	2b00      	cmp	r3, #0
 801d948:	da06      	bge.n	801d958 <sys_timeouts_sleeptime+0x54>
 801d94a:	4b07      	ldr	r3, [pc, #28]	; (801d968 <sys_timeouts_sleeptime+0x64>)
 801d94c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801d950:	4906      	ldr	r1, [pc, #24]	; (801d96c <sys_timeouts_sleeptime+0x68>)
 801d952:	4807      	ldr	r0, [pc, #28]	; (801d970 <sys_timeouts_sleeptime+0x6c>)
 801d954:	f002 fdde 	bl	8020514 <iprintf>
    return ret;
 801d958:	683b      	ldr	r3, [r7, #0]
  }
}
 801d95a:	4618      	mov	r0, r3
 801d95c:	3708      	adds	r7, #8
 801d95e:	46bd      	mov	sp, r7
 801d960:	bd80      	pop	{r7, pc}
 801d962:	bf00      	nop
 801d964:	20009380 	.word	0x20009380
 801d968:	08023af0 	.word	0x08023af0
 801d96c:	08023bc4 	.word	0x08023bc4
 801d970:	08023b64 	.word	0x08023b64

0801d974 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801d974:	b580      	push	{r7, lr}
 801d976:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801d978:	f002 fde4 	bl	8020544 <rand>
 801d97c:	4603      	mov	r3, r0
 801d97e:	b29b      	uxth	r3, r3
 801d980:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801d984:	b29b      	uxth	r3, r3
 801d986:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801d98a:	b29a      	uxth	r2, r3
 801d98c:	4b01      	ldr	r3, [pc, #4]	; (801d994 <udp_init+0x20>)
 801d98e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801d990:	bf00      	nop
 801d992:	bd80      	pop	{r7, pc}
 801d994:	20000058 	.word	0x20000058

0801d998 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801d998:	b580      	push	{r7, lr}
 801d99a:	b084      	sub	sp, #16
 801d99c:	af00      	add	r7, sp, #0
 801d99e:	60f8      	str	r0, [r7, #12]
 801d9a0:	60b9      	str	r1, [r7, #8]
 801d9a2:	4613      	mov	r3, r2
 801d9a4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801d9a6:	68fb      	ldr	r3, [r7, #12]
 801d9a8:	2b00      	cmp	r3, #0
 801d9aa:	d105      	bne.n	801d9b8 <udp_input_local_match+0x20>
 801d9ac:	4b27      	ldr	r3, [pc, #156]	; (801da4c <udp_input_local_match+0xb4>)
 801d9ae:	2287      	movs	r2, #135	; 0x87
 801d9b0:	4927      	ldr	r1, [pc, #156]	; (801da50 <udp_input_local_match+0xb8>)
 801d9b2:	4828      	ldr	r0, [pc, #160]	; (801da54 <udp_input_local_match+0xbc>)
 801d9b4:	f002 fdae 	bl	8020514 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801d9b8:	68bb      	ldr	r3, [r7, #8]
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	d105      	bne.n	801d9ca <udp_input_local_match+0x32>
 801d9be:	4b23      	ldr	r3, [pc, #140]	; (801da4c <udp_input_local_match+0xb4>)
 801d9c0:	2288      	movs	r2, #136	; 0x88
 801d9c2:	4925      	ldr	r1, [pc, #148]	; (801da58 <udp_input_local_match+0xc0>)
 801d9c4:	4823      	ldr	r0, [pc, #140]	; (801da54 <udp_input_local_match+0xbc>)
 801d9c6:	f002 fda5 	bl	8020514 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d9ca:	68fb      	ldr	r3, [r7, #12]
 801d9cc:	7a1b      	ldrb	r3, [r3, #8]
 801d9ce:	2b00      	cmp	r3, #0
 801d9d0:	d00b      	beq.n	801d9ea <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d9d2:	68fb      	ldr	r3, [r7, #12]
 801d9d4:	7a1a      	ldrb	r2, [r3, #8]
 801d9d6:	4b21      	ldr	r3, [pc, #132]	; (801da5c <udp_input_local_match+0xc4>)
 801d9d8:	685b      	ldr	r3, [r3, #4]
 801d9da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d9de:	3301      	adds	r3, #1
 801d9e0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d9e2:	429a      	cmp	r2, r3
 801d9e4:	d001      	beq.n	801d9ea <udp_input_local_match+0x52>
    return 0;
 801d9e6:	2300      	movs	r3, #0
 801d9e8:	e02b      	b.n	801da42 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801d9ea:	79fb      	ldrb	r3, [r7, #7]
 801d9ec:	2b00      	cmp	r3, #0
 801d9ee:	d018      	beq.n	801da22 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d9f0:	68fb      	ldr	r3, [r7, #12]
 801d9f2:	2b00      	cmp	r3, #0
 801d9f4:	d013      	beq.n	801da1e <udp_input_local_match+0x86>
 801d9f6:	68fb      	ldr	r3, [r7, #12]
 801d9f8:	681b      	ldr	r3, [r3, #0]
 801d9fa:	2b00      	cmp	r3, #0
 801d9fc:	d00f      	beq.n	801da1e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801d9fe:	4b17      	ldr	r3, [pc, #92]	; (801da5c <udp_input_local_match+0xc4>)
 801da00:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801da02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801da06:	d00a      	beq.n	801da1e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801da08:	68fb      	ldr	r3, [r7, #12]
 801da0a:	681a      	ldr	r2, [r3, #0]
 801da0c:	4b13      	ldr	r3, [pc, #76]	; (801da5c <udp_input_local_match+0xc4>)
 801da0e:	695b      	ldr	r3, [r3, #20]
 801da10:	405a      	eors	r2, r3
 801da12:	68bb      	ldr	r3, [r7, #8]
 801da14:	3308      	adds	r3, #8
 801da16:	681b      	ldr	r3, [r3, #0]
 801da18:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801da1a:	2b00      	cmp	r3, #0
 801da1c:	d110      	bne.n	801da40 <udp_input_local_match+0xa8>
          return 1;
 801da1e:	2301      	movs	r3, #1
 801da20:	e00f      	b.n	801da42 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801da22:	68fb      	ldr	r3, [r7, #12]
 801da24:	2b00      	cmp	r3, #0
 801da26:	d009      	beq.n	801da3c <udp_input_local_match+0xa4>
 801da28:	68fb      	ldr	r3, [r7, #12]
 801da2a:	681b      	ldr	r3, [r3, #0]
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	d005      	beq.n	801da3c <udp_input_local_match+0xa4>
 801da30:	68fb      	ldr	r3, [r7, #12]
 801da32:	681a      	ldr	r2, [r3, #0]
 801da34:	4b09      	ldr	r3, [pc, #36]	; (801da5c <udp_input_local_match+0xc4>)
 801da36:	695b      	ldr	r3, [r3, #20]
 801da38:	429a      	cmp	r2, r3
 801da3a:	d101      	bne.n	801da40 <udp_input_local_match+0xa8>
        return 1;
 801da3c:	2301      	movs	r3, #1
 801da3e:	e000      	b.n	801da42 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801da40:	2300      	movs	r3, #0
}
 801da42:	4618      	mov	r0, r3
 801da44:	3710      	adds	r7, #16
 801da46:	46bd      	mov	sp, r7
 801da48:	bd80      	pop	{r7, pc}
 801da4a:	bf00      	nop
 801da4c:	08023bd8 	.word	0x08023bd8
 801da50:	08023c08 	.word	0x08023c08
 801da54:	08023c2c 	.word	0x08023c2c
 801da58:	08023c54 	.word	0x08023c54
 801da5c:	2001c7dc 	.word	0x2001c7dc

0801da60 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801da60:	b590      	push	{r4, r7, lr}
 801da62:	b08d      	sub	sp, #52	; 0x34
 801da64:	af02      	add	r7, sp, #8
 801da66:	6078      	str	r0, [r7, #4]
 801da68:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801da6a:	2300      	movs	r3, #0
 801da6c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801da6e:	687b      	ldr	r3, [r7, #4]
 801da70:	2b00      	cmp	r3, #0
 801da72:	d105      	bne.n	801da80 <udp_input+0x20>
 801da74:	4b7c      	ldr	r3, [pc, #496]	; (801dc68 <udp_input+0x208>)
 801da76:	22cf      	movs	r2, #207	; 0xcf
 801da78:	497c      	ldr	r1, [pc, #496]	; (801dc6c <udp_input+0x20c>)
 801da7a:	487d      	ldr	r0, [pc, #500]	; (801dc70 <udp_input+0x210>)
 801da7c:	f002 fd4a 	bl	8020514 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801da80:	683b      	ldr	r3, [r7, #0]
 801da82:	2b00      	cmp	r3, #0
 801da84:	d105      	bne.n	801da92 <udp_input+0x32>
 801da86:	4b78      	ldr	r3, [pc, #480]	; (801dc68 <udp_input+0x208>)
 801da88:	22d0      	movs	r2, #208	; 0xd0
 801da8a:	497a      	ldr	r1, [pc, #488]	; (801dc74 <udp_input+0x214>)
 801da8c:	4878      	ldr	r0, [pc, #480]	; (801dc70 <udp_input+0x210>)
 801da8e:	f002 fd41 	bl	8020514 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	895b      	ldrh	r3, [r3, #10]
 801da96:	2b07      	cmp	r3, #7
 801da98:	d803      	bhi.n	801daa2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801da9a:	6878      	ldr	r0, [r7, #4]
 801da9c:	f7f9 faf4 	bl	8017088 <pbuf_free>
    goto end;
 801daa0:	e0de      	b.n	801dc60 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801daa2:	687b      	ldr	r3, [r7, #4]
 801daa4:	685b      	ldr	r3, [r3, #4]
 801daa6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801daa8:	4b73      	ldr	r3, [pc, #460]	; (801dc78 <udp_input+0x218>)
 801daaa:	695a      	ldr	r2, [r3, #20]
 801daac:	4b72      	ldr	r3, [pc, #456]	; (801dc78 <udp_input+0x218>)
 801daae:	681b      	ldr	r3, [r3, #0]
 801dab0:	4619      	mov	r1, r3
 801dab2:	4610      	mov	r0, r2
 801dab4:	f001 fc86 	bl	801f3c4 <ip4_addr_isbroadcast_u32>
 801dab8:	4603      	mov	r3, r0
 801daba:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801dabc:	697b      	ldr	r3, [r7, #20]
 801dabe:	881b      	ldrh	r3, [r3, #0]
 801dac0:	b29b      	uxth	r3, r3
 801dac2:	4618      	mov	r0, r3
 801dac4:	f7f7 ff02 	bl	80158cc <lwip_htons>
 801dac8:	4603      	mov	r3, r0
 801daca:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801dacc:	697b      	ldr	r3, [r7, #20]
 801dace:	885b      	ldrh	r3, [r3, #2]
 801dad0:	b29b      	uxth	r3, r3
 801dad2:	4618      	mov	r0, r3
 801dad4:	f7f7 fefa 	bl	80158cc <lwip_htons>
 801dad8:	4603      	mov	r3, r0
 801dada:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801dadc:	2300      	movs	r3, #0
 801dade:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801dae0:	2300      	movs	r3, #0
 801dae2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801dae4:	2300      	movs	r3, #0
 801dae6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801dae8:	4b64      	ldr	r3, [pc, #400]	; (801dc7c <udp_input+0x21c>)
 801daea:	681b      	ldr	r3, [r3, #0]
 801daec:	627b      	str	r3, [r7, #36]	; 0x24
 801daee:	e054      	b.n	801db9a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801daf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daf2:	8a5b      	ldrh	r3, [r3, #18]
 801daf4:	89fa      	ldrh	r2, [r7, #14]
 801daf6:	429a      	cmp	r2, r3
 801daf8:	d14a      	bne.n	801db90 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801dafa:	7cfb      	ldrb	r3, [r7, #19]
 801dafc:	461a      	mov	r2, r3
 801dafe:	6839      	ldr	r1, [r7, #0]
 801db00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801db02:	f7ff ff49 	bl	801d998 <udp_input_local_match>
 801db06:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801db08:	2b00      	cmp	r3, #0
 801db0a:	d041      	beq.n	801db90 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801db0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db0e:	7c1b      	ldrb	r3, [r3, #16]
 801db10:	f003 0304 	and.w	r3, r3, #4
 801db14:	2b00      	cmp	r3, #0
 801db16:	d11d      	bne.n	801db54 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801db18:	69fb      	ldr	r3, [r7, #28]
 801db1a:	2b00      	cmp	r3, #0
 801db1c:	d102      	bne.n	801db24 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801db1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db20:	61fb      	str	r3, [r7, #28]
 801db22:	e017      	b.n	801db54 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801db24:	7cfb      	ldrb	r3, [r7, #19]
 801db26:	2b00      	cmp	r3, #0
 801db28:	d014      	beq.n	801db54 <udp_input+0xf4>
 801db2a:	4b53      	ldr	r3, [pc, #332]	; (801dc78 <udp_input+0x218>)
 801db2c:	695b      	ldr	r3, [r3, #20]
 801db2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801db32:	d10f      	bne.n	801db54 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801db34:	69fb      	ldr	r3, [r7, #28]
 801db36:	681a      	ldr	r2, [r3, #0]
 801db38:	683b      	ldr	r3, [r7, #0]
 801db3a:	3304      	adds	r3, #4
 801db3c:	681b      	ldr	r3, [r3, #0]
 801db3e:	429a      	cmp	r2, r3
 801db40:	d008      	beq.n	801db54 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801db42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db44:	681a      	ldr	r2, [r3, #0]
 801db46:	683b      	ldr	r3, [r7, #0]
 801db48:	3304      	adds	r3, #4
 801db4a:	681b      	ldr	r3, [r3, #0]
 801db4c:	429a      	cmp	r2, r3
 801db4e:	d101      	bne.n	801db54 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801db50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db52:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801db54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db56:	8a9b      	ldrh	r3, [r3, #20]
 801db58:	8a3a      	ldrh	r2, [r7, #16]
 801db5a:	429a      	cmp	r2, r3
 801db5c:	d118      	bne.n	801db90 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801db5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db60:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801db62:	2b00      	cmp	r3, #0
 801db64:	d005      	beq.n	801db72 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801db66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db68:	685a      	ldr	r2, [r3, #4]
 801db6a:	4b43      	ldr	r3, [pc, #268]	; (801dc78 <udp_input+0x218>)
 801db6c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801db6e:	429a      	cmp	r2, r3
 801db70:	d10e      	bne.n	801db90 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801db72:	6a3b      	ldr	r3, [r7, #32]
 801db74:	2b00      	cmp	r3, #0
 801db76:	d014      	beq.n	801dba2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801db78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db7a:	68da      	ldr	r2, [r3, #12]
 801db7c:	6a3b      	ldr	r3, [r7, #32]
 801db7e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801db80:	4b3e      	ldr	r3, [pc, #248]	; (801dc7c <udp_input+0x21c>)
 801db82:	681a      	ldr	r2, [r3, #0]
 801db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db86:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801db88:	4a3c      	ldr	r2, [pc, #240]	; (801dc7c <udp_input+0x21c>)
 801db8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db8c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801db8e:	e008      	b.n	801dba2 <udp_input+0x142>
      }
    }

    prev = pcb;
 801db90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db92:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801db94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db96:	68db      	ldr	r3, [r3, #12]
 801db98:	627b      	str	r3, [r7, #36]	; 0x24
 801db9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db9c:	2b00      	cmp	r3, #0
 801db9e:	d1a7      	bne.n	801daf0 <udp_input+0x90>
 801dba0:	e000      	b.n	801dba4 <udp_input+0x144>
        break;
 801dba2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801dba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dba6:	2b00      	cmp	r3, #0
 801dba8:	d101      	bne.n	801dbae <udp_input+0x14e>
    pcb = uncon_pcb;
 801dbaa:	69fb      	ldr	r3, [r7, #28]
 801dbac:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801dbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbb0:	2b00      	cmp	r3, #0
 801dbb2:	d002      	beq.n	801dbba <udp_input+0x15a>
    for_us = 1;
 801dbb4:	2301      	movs	r3, #1
 801dbb6:	76fb      	strb	r3, [r7, #27]
 801dbb8:	e00a      	b.n	801dbd0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801dbba:	683b      	ldr	r3, [r7, #0]
 801dbbc:	3304      	adds	r3, #4
 801dbbe:	681a      	ldr	r2, [r3, #0]
 801dbc0:	4b2d      	ldr	r3, [pc, #180]	; (801dc78 <udp_input+0x218>)
 801dbc2:	695b      	ldr	r3, [r3, #20]
 801dbc4:	429a      	cmp	r2, r3
 801dbc6:	bf0c      	ite	eq
 801dbc8:	2301      	moveq	r3, #1
 801dbca:	2300      	movne	r3, #0
 801dbcc:	b2db      	uxtb	r3, r3
 801dbce:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801dbd0:	7efb      	ldrb	r3, [r7, #27]
 801dbd2:	2b00      	cmp	r3, #0
 801dbd4:	d041      	beq.n	801dc5a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801dbd6:	2108      	movs	r1, #8
 801dbd8:	6878      	ldr	r0, [r7, #4]
 801dbda:	f7f9 f9cf 	bl	8016f7c <pbuf_remove_header>
 801dbde:	4603      	mov	r3, r0
 801dbe0:	2b00      	cmp	r3, #0
 801dbe2:	d00a      	beq.n	801dbfa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801dbe4:	4b20      	ldr	r3, [pc, #128]	; (801dc68 <udp_input+0x208>)
 801dbe6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801dbea:	4925      	ldr	r1, [pc, #148]	; (801dc80 <udp_input+0x220>)
 801dbec:	4820      	ldr	r0, [pc, #128]	; (801dc70 <udp_input+0x210>)
 801dbee:	f002 fc91 	bl	8020514 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801dbf2:	6878      	ldr	r0, [r7, #4]
 801dbf4:	f7f9 fa48 	bl	8017088 <pbuf_free>
      goto end;
 801dbf8:	e032      	b.n	801dc60 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801dbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbfc:	2b00      	cmp	r3, #0
 801dbfe:	d012      	beq.n	801dc26 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801dc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc02:	699b      	ldr	r3, [r3, #24]
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	d00a      	beq.n	801dc1e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801dc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc0a:	699c      	ldr	r4, [r3, #24]
 801dc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc0e:	69d8      	ldr	r0, [r3, #28]
 801dc10:	8a3b      	ldrh	r3, [r7, #16]
 801dc12:	9300      	str	r3, [sp, #0]
 801dc14:	4b1b      	ldr	r3, [pc, #108]	; (801dc84 <udp_input+0x224>)
 801dc16:	687a      	ldr	r2, [r7, #4]
 801dc18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801dc1a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801dc1c:	e021      	b.n	801dc62 <udp_input+0x202>
        pbuf_free(p);
 801dc1e:	6878      	ldr	r0, [r7, #4]
 801dc20:	f7f9 fa32 	bl	8017088 <pbuf_free>
        goto end;
 801dc24:	e01c      	b.n	801dc60 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801dc26:	7cfb      	ldrb	r3, [r7, #19]
 801dc28:	2b00      	cmp	r3, #0
 801dc2a:	d112      	bne.n	801dc52 <udp_input+0x1f2>
 801dc2c:	4b12      	ldr	r3, [pc, #72]	; (801dc78 <udp_input+0x218>)
 801dc2e:	695b      	ldr	r3, [r3, #20]
 801dc30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801dc34:	2be0      	cmp	r3, #224	; 0xe0
 801dc36:	d00c      	beq.n	801dc52 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801dc38:	4b0f      	ldr	r3, [pc, #60]	; (801dc78 <udp_input+0x218>)
 801dc3a:	899b      	ldrh	r3, [r3, #12]
 801dc3c:	3308      	adds	r3, #8
 801dc3e:	b29b      	uxth	r3, r3
 801dc40:	b21b      	sxth	r3, r3
 801dc42:	4619      	mov	r1, r3
 801dc44:	6878      	ldr	r0, [r7, #4]
 801dc46:	f7f9 fa0c 	bl	8017062 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801dc4a:	2103      	movs	r1, #3
 801dc4c:	6878      	ldr	r0, [r7, #4]
 801dc4e:	f001 f89b 	bl	801ed88 <icmp_dest_unreach>
      pbuf_free(p);
 801dc52:	6878      	ldr	r0, [r7, #4]
 801dc54:	f7f9 fa18 	bl	8017088 <pbuf_free>
  return;
 801dc58:	e003      	b.n	801dc62 <udp_input+0x202>
    pbuf_free(p);
 801dc5a:	6878      	ldr	r0, [r7, #4]
 801dc5c:	f7f9 fa14 	bl	8017088 <pbuf_free>
  return;
 801dc60:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801dc62:	372c      	adds	r7, #44	; 0x2c
 801dc64:	46bd      	mov	sp, r7
 801dc66:	bd90      	pop	{r4, r7, pc}
 801dc68:	08023bd8 	.word	0x08023bd8
 801dc6c:	08023c7c 	.word	0x08023c7c
 801dc70:	08023c2c 	.word	0x08023c2c
 801dc74:	08023c94 	.word	0x08023c94
 801dc78:	2001c7dc 	.word	0x2001c7dc
 801dc7c:	2001ff08 	.word	0x2001ff08
 801dc80:	08023cb0 	.word	0x08023cb0
 801dc84:	2001c7ec 	.word	0x2001c7ec

0801dc88 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801dc88:	b480      	push	{r7}
 801dc8a:	b085      	sub	sp, #20
 801dc8c:	af00      	add	r7, sp, #0
 801dc8e:	6078      	str	r0, [r7, #4]
 801dc90:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	2b00      	cmp	r3, #0
 801dc96:	d01e      	beq.n	801dcd6 <udp_netif_ip_addr_changed+0x4e>
 801dc98:	687b      	ldr	r3, [r7, #4]
 801dc9a:	681b      	ldr	r3, [r3, #0]
 801dc9c:	2b00      	cmp	r3, #0
 801dc9e:	d01a      	beq.n	801dcd6 <udp_netif_ip_addr_changed+0x4e>
 801dca0:	683b      	ldr	r3, [r7, #0]
 801dca2:	2b00      	cmp	r3, #0
 801dca4:	d017      	beq.n	801dcd6 <udp_netif_ip_addr_changed+0x4e>
 801dca6:	683b      	ldr	r3, [r7, #0]
 801dca8:	681b      	ldr	r3, [r3, #0]
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	d013      	beq.n	801dcd6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801dcae:	4b0d      	ldr	r3, [pc, #52]	; (801dce4 <udp_netif_ip_addr_changed+0x5c>)
 801dcb0:	681b      	ldr	r3, [r3, #0]
 801dcb2:	60fb      	str	r3, [r7, #12]
 801dcb4:	e00c      	b.n	801dcd0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801dcb6:	68fb      	ldr	r3, [r7, #12]
 801dcb8:	681a      	ldr	r2, [r3, #0]
 801dcba:	687b      	ldr	r3, [r7, #4]
 801dcbc:	681b      	ldr	r3, [r3, #0]
 801dcbe:	429a      	cmp	r2, r3
 801dcc0:	d103      	bne.n	801dcca <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801dcc2:	683b      	ldr	r3, [r7, #0]
 801dcc4:	681a      	ldr	r2, [r3, #0]
 801dcc6:	68fb      	ldr	r3, [r7, #12]
 801dcc8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801dcca:	68fb      	ldr	r3, [r7, #12]
 801dccc:	68db      	ldr	r3, [r3, #12]
 801dcce:	60fb      	str	r3, [r7, #12]
 801dcd0:	68fb      	ldr	r3, [r7, #12]
 801dcd2:	2b00      	cmp	r3, #0
 801dcd4:	d1ef      	bne.n	801dcb6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801dcd6:	bf00      	nop
 801dcd8:	3714      	adds	r7, #20
 801dcda:	46bd      	mov	sp, r7
 801dcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dce0:	4770      	bx	lr
 801dce2:	bf00      	nop
 801dce4:	2001ff08 	.word	0x2001ff08

0801dce8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801dce8:	b580      	push	{r7, lr}
 801dcea:	b082      	sub	sp, #8
 801dcec:	af00      	add	r7, sp, #0
 801dcee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801dcf0:	4915      	ldr	r1, [pc, #84]	; (801dd48 <etharp_free_entry+0x60>)
 801dcf2:	687a      	ldr	r2, [r7, #4]
 801dcf4:	4613      	mov	r3, r2
 801dcf6:	005b      	lsls	r3, r3, #1
 801dcf8:	4413      	add	r3, r2
 801dcfa:	00db      	lsls	r3, r3, #3
 801dcfc:	440b      	add	r3, r1
 801dcfe:	681b      	ldr	r3, [r3, #0]
 801dd00:	2b00      	cmp	r3, #0
 801dd02:	d013      	beq.n	801dd2c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801dd04:	4910      	ldr	r1, [pc, #64]	; (801dd48 <etharp_free_entry+0x60>)
 801dd06:	687a      	ldr	r2, [r7, #4]
 801dd08:	4613      	mov	r3, r2
 801dd0a:	005b      	lsls	r3, r3, #1
 801dd0c:	4413      	add	r3, r2
 801dd0e:	00db      	lsls	r3, r3, #3
 801dd10:	440b      	add	r3, r1
 801dd12:	681b      	ldr	r3, [r3, #0]
 801dd14:	4618      	mov	r0, r3
 801dd16:	f7f9 f9b7 	bl	8017088 <pbuf_free>
    arp_table[i].q = NULL;
 801dd1a:	490b      	ldr	r1, [pc, #44]	; (801dd48 <etharp_free_entry+0x60>)
 801dd1c:	687a      	ldr	r2, [r7, #4]
 801dd1e:	4613      	mov	r3, r2
 801dd20:	005b      	lsls	r3, r3, #1
 801dd22:	4413      	add	r3, r2
 801dd24:	00db      	lsls	r3, r3, #3
 801dd26:	440b      	add	r3, r1
 801dd28:	2200      	movs	r2, #0
 801dd2a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801dd2c:	4906      	ldr	r1, [pc, #24]	; (801dd48 <etharp_free_entry+0x60>)
 801dd2e:	687a      	ldr	r2, [r7, #4]
 801dd30:	4613      	mov	r3, r2
 801dd32:	005b      	lsls	r3, r3, #1
 801dd34:	4413      	add	r3, r2
 801dd36:	00db      	lsls	r3, r3, #3
 801dd38:	440b      	add	r3, r1
 801dd3a:	3314      	adds	r3, #20
 801dd3c:	2200      	movs	r2, #0
 801dd3e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801dd40:	bf00      	nop
 801dd42:	3708      	adds	r7, #8
 801dd44:	46bd      	mov	sp, r7
 801dd46:	bd80      	pop	{r7, pc}
 801dd48:	2000938c 	.word	0x2000938c

0801dd4c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801dd4c:	b580      	push	{r7, lr}
 801dd4e:	b082      	sub	sp, #8
 801dd50:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801dd52:	2300      	movs	r3, #0
 801dd54:	607b      	str	r3, [r7, #4]
 801dd56:	e096      	b.n	801de86 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801dd58:	494f      	ldr	r1, [pc, #316]	; (801de98 <etharp_tmr+0x14c>)
 801dd5a:	687a      	ldr	r2, [r7, #4]
 801dd5c:	4613      	mov	r3, r2
 801dd5e:	005b      	lsls	r3, r3, #1
 801dd60:	4413      	add	r3, r2
 801dd62:	00db      	lsls	r3, r3, #3
 801dd64:	440b      	add	r3, r1
 801dd66:	3314      	adds	r3, #20
 801dd68:	781b      	ldrb	r3, [r3, #0]
 801dd6a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801dd6c:	78fb      	ldrb	r3, [r7, #3]
 801dd6e:	2b00      	cmp	r3, #0
 801dd70:	f000 8086 	beq.w	801de80 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801dd74:	4948      	ldr	r1, [pc, #288]	; (801de98 <etharp_tmr+0x14c>)
 801dd76:	687a      	ldr	r2, [r7, #4]
 801dd78:	4613      	mov	r3, r2
 801dd7a:	005b      	lsls	r3, r3, #1
 801dd7c:	4413      	add	r3, r2
 801dd7e:	00db      	lsls	r3, r3, #3
 801dd80:	440b      	add	r3, r1
 801dd82:	3312      	adds	r3, #18
 801dd84:	881b      	ldrh	r3, [r3, #0]
 801dd86:	3301      	adds	r3, #1
 801dd88:	b298      	uxth	r0, r3
 801dd8a:	4943      	ldr	r1, [pc, #268]	; (801de98 <etharp_tmr+0x14c>)
 801dd8c:	687a      	ldr	r2, [r7, #4]
 801dd8e:	4613      	mov	r3, r2
 801dd90:	005b      	lsls	r3, r3, #1
 801dd92:	4413      	add	r3, r2
 801dd94:	00db      	lsls	r3, r3, #3
 801dd96:	440b      	add	r3, r1
 801dd98:	3312      	adds	r3, #18
 801dd9a:	4602      	mov	r2, r0
 801dd9c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801dd9e:	493e      	ldr	r1, [pc, #248]	; (801de98 <etharp_tmr+0x14c>)
 801dda0:	687a      	ldr	r2, [r7, #4]
 801dda2:	4613      	mov	r3, r2
 801dda4:	005b      	lsls	r3, r3, #1
 801dda6:	4413      	add	r3, r2
 801dda8:	00db      	lsls	r3, r3, #3
 801ddaa:	440b      	add	r3, r1
 801ddac:	3312      	adds	r3, #18
 801ddae:	881b      	ldrh	r3, [r3, #0]
 801ddb0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801ddb4:	d215      	bcs.n	801dde2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ddb6:	4938      	ldr	r1, [pc, #224]	; (801de98 <etharp_tmr+0x14c>)
 801ddb8:	687a      	ldr	r2, [r7, #4]
 801ddba:	4613      	mov	r3, r2
 801ddbc:	005b      	lsls	r3, r3, #1
 801ddbe:	4413      	add	r3, r2
 801ddc0:	00db      	lsls	r3, r3, #3
 801ddc2:	440b      	add	r3, r1
 801ddc4:	3314      	adds	r3, #20
 801ddc6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ddc8:	2b01      	cmp	r3, #1
 801ddca:	d10e      	bne.n	801ddea <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801ddcc:	4932      	ldr	r1, [pc, #200]	; (801de98 <etharp_tmr+0x14c>)
 801ddce:	687a      	ldr	r2, [r7, #4]
 801ddd0:	4613      	mov	r3, r2
 801ddd2:	005b      	lsls	r3, r3, #1
 801ddd4:	4413      	add	r3, r2
 801ddd6:	00db      	lsls	r3, r3, #3
 801ddd8:	440b      	add	r3, r1
 801ddda:	3312      	adds	r3, #18
 801dddc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ddde:	2b04      	cmp	r3, #4
 801dde0:	d903      	bls.n	801ddea <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801dde2:	6878      	ldr	r0, [r7, #4]
 801dde4:	f7ff ff80 	bl	801dce8 <etharp_free_entry>
 801dde8:	e04a      	b.n	801de80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801ddea:	492b      	ldr	r1, [pc, #172]	; (801de98 <etharp_tmr+0x14c>)
 801ddec:	687a      	ldr	r2, [r7, #4]
 801ddee:	4613      	mov	r3, r2
 801ddf0:	005b      	lsls	r3, r3, #1
 801ddf2:	4413      	add	r3, r2
 801ddf4:	00db      	lsls	r3, r3, #3
 801ddf6:	440b      	add	r3, r1
 801ddf8:	3314      	adds	r3, #20
 801ddfa:	781b      	ldrb	r3, [r3, #0]
 801ddfc:	2b03      	cmp	r3, #3
 801ddfe:	d10a      	bne.n	801de16 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801de00:	4925      	ldr	r1, [pc, #148]	; (801de98 <etharp_tmr+0x14c>)
 801de02:	687a      	ldr	r2, [r7, #4]
 801de04:	4613      	mov	r3, r2
 801de06:	005b      	lsls	r3, r3, #1
 801de08:	4413      	add	r3, r2
 801de0a:	00db      	lsls	r3, r3, #3
 801de0c:	440b      	add	r3, r1
 801de0e:	3314      	adds	r3, #20
 801de10:	2204      	movs	r2, #4
 801de12:	701a      	strb	r2, [r3, #0]
 801de14:	e034      	b.n	801de80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801de16:	4920      	ldr	r1, [pc, #128]	; (801de98 <etharp_tmr+0x14c>)
 801de18:	687a      	ldr	r2, [r7, #4]
 801de1a:	4613      	mov	r3, r2
 801de1c:	005b      	lsls	r3, r3, #1
 801de1e:	4413      	add	r3, r2
 801de20:	00db      	lsls	r3, r3, #3
 801de22:	440b      	add	r3, r1
 801de24:	3314      	adds	r3, #20
 801de26:	781b      	ldrb	r3, [r3, #0]
 801de28:	2b04      	cmp	r3, #4
 801de2a:	d10a      	bne.n	801de42 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801de2c:	491a      	ldr	r1, [pc, #104]	; (801de98 <etharp_tmr+0x14c>)
 801de2e:	687a      	ldr	r2, [r7, #4]
 801de30:	4613      	mov	r3, r2
 801de32:	005b      	lsls	r3, r3, #1
 801de34:	4413      	add	r3, r2
 801de36:	00db      	lsls	r3, r3, #3
 801de38:	440b      	add	r3, r1
 801de3a:	3314      	adds	r3, #20
 801de3c:	2202      	movs	r2, #2
 801de3e:	701a      	strb	r2, [r3, #0]
 801de40:	e01e      	b.n	801de80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801de42:	4915      	ldr	r1, [pc, #84]	; (801de98 <etharp_tmr+0x14c>)
 801de44:	687a      	ldr	r2, [r7, #4]
 801de46:	4613      	mov	r3, r2
 801de48:	005b      	lsls	r3, r3, #1
 801de4a:	4413      	add	r3, r2
 801de4c:	00db      	lsls	r3, r3, #3
 801de4e:	440b      	add	r3, r1
 801de50:	3314      	adds	r3, #20
 801de52:	781b      	ldrb	r3, [r3, #0]
 801de54:	2b01      	cmp	r3, #1
 801de56:	d113      	bne.n	801de80 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801de58:	490f      	ldr	r1, [pc, #60]	; (801de98 <etharp_tmr+0x14c>)
 801de5a:	687a      	ldr	r2, [r7, #4]
 801de5c:	4613      	mov	r3, r2
 801de5e:	005b      	lsls	r3, r3, #1
 801de60:	4413      	add	r3, r2
 801de62:	00db      	lsls	r3, r3, #3
 801de64:	440b      	add	r3, r1
 801de66:	3308      	adds	r3, #8
 801de68:	6818      	ldr	r0, [r3, #0]
 801de6a:	687a      	ldr	r2, [r7, #4]
 801de6c:	4613      	mov	r3, r2
 801de6e:	005b      	lsls	r3, r3, #1
 801de70:	4413      	add	r3, r2
 801de72:	00db      	lsls	r3, r3, #3
 801de74:	4a08      	ldr	r2, [pc, #32]	; (801de98 <etharp_tmr+0x14c>)
 801de76:	4413      	add	r3, r2
 801de78:	3304      	adds	r3, #4
 801de7a:	4619      	mov	r1, r3
 801de7c:	f000 fe6e 	bl	801eb5c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801de80:	687b      	ldr	r3, [r7, #4]
 801de82:	3301      	adds	r3, #1
 801de84:	607b      	str	r3, [r7, #4]
 801de86:	687b      	ldr	r3, [r7, #4]
 801de88:	2b09      	cmp	r3, #9
 801de8a:	f77f af65 	ble.w	801dd58 <etharp_tmr+0xc>
      }
    }
  }
}
 801de8e:	bf00      	nop
 801de90:	3708      	adds	r7, #8
 801de92:	46bd      	mov	sp, r7
 801de94:	bd80      	pop	{r7, pc}
 801de96:	bf00      	nop
 801de98:	2000938c 	.word	0x2000938c

0801de9c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801de9c:	b580      	push	{r7, lr}
 801de9e:	b08a      	sub	sp, #40	; 0x28
 801dea0:	af00      	add	r7, sp, #0
 801dea2:	60f8      	str	r0, [r7, #12]
 801dea4:	460b      	mov	r3, r1
 801dea6:	607a      	str	r2, [r7, #4]
 801dea8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801deaa:	230a      	movs	r3, #10
 801deac:	84fb      	strh	r3, [r7, #38]	; 0x26
 801deae:	230a      	movs	r3, #10
 801deb0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801deb2:	230a      	movs	r3, #10
 801deb4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801deb6:	2300      	movs	r3, #0
 801deb8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801deba:	230a      	movs	r3, #10
 801debc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801debe:	2300      	movs	r3, #0
 801dec0:	83bb      	strh	r3, [r7, #28]
 801dec2:	2300      	movs	r3, #0
 801dec4:	837b      	strh	r3, [r7, #26]
 801dec6:	2300      	movs	r3, #0
 801dec8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801deca:	2300      	movs	r3, #0
 801decc:	843b      	strh	r3, [r7, #32]
 801dece:	e0ae      	b.n	801e02e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801ded0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ded4:	49a6      	ldr	r1, [pc, #664]	; (801e170 <etharp_find_entry+0x2d4>)
 801ded6:	4613      	mov	r3, r2
 801ded8:	005b      	lsls	r3, r3, #1
 801deda:	4413      	add	r3, r2
 801dedc:	00db      	lsls	r3, r3, #3
 801dede:	440b      	add	r3, r1
 801dee0:	3314      	adds	r3, #20
 801dee2:	781b      	ldrb	r3, [r3, #0]
 801dee4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801dee6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801deea:	2b0a      	cmp	r3, #10
 801deec:	d105      	bne.n	801defa <etharp_find_entry+0x5e>
 801deee:	7dfb      	ldrb	r3, [r7, #23]
 801def0:	2b00      	cmp	r3, #0
 801def2:	d102      	bne.n	801defa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801def4:	8c3b      	ldrh	r3, [r7, #32]
 801def6:	847b      	strh	r3, [r7, #34]	; 0x22
 801def8:	e095      	b.n	801e026 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801defa:	7dfb      	ldrb	r3, [r7, #23]
 801defc:	2b00      	cmp	r3, #0
 801defe:	f000 8092 	beq.w	801e026 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801df02:	7dfb      	ldrb	r3, [r7, #23]
 801df04:	2b01      	cmp	r3, #1
 801df06:	d009      	beq.n	801df1c <etharp_find_entry+0x80>
 801df08:	7dfb      	ldrb	r3, [r7, #23]
 801df0a:	2b01      	cmp	r3, #1
 801df0c:	d806      	bhi.n	801df1c <etharp_find_entry+0x80>
 801df0e:	4b99      	ldr	r3, [pc, #612]	; (801e174 <etharp_find_entry+0x2d8>)
 801df10:	f44f 7292 	mov.w	r2, #292	; 0x124
 801df14:	4998      	ldr	r1, [pc, #608]	; (801e178 <etharp_find_entry+0x2dc>)
 801df16:	4899      	ldr	r0, [pc, #612]	; (801e17c <etharp_find_entry+0x2e0>)
 801df18:	f002 fafc 	bl	8020514 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801df1c:	68fb      	ldr	r3, [r7, #12]
 801df1e:	2b00      	cmp	r3, #0
 801df20:	d020      	beq.n	801df64 <etharp_find_entry+0xc8>
 801df22:	68fb      	ldr	r3, [r7, #12]
 801df24:	6819      	ldr	r1, [r3, #0]
 801df26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801df2a:	4891      	ldr	r0, [pc, #580]	; (801e170 <etharp_find_entry+0x2d4>)
 801df2c:	4613      	mov	r3, r2
 801df2e:	005b      	lsls	r3, r3, #1
 801df30:	4413      	add	r3, r2
 801df32:	00db      	lsls	r3, r3, #3
 801df34:	4403      	add	r3, r0
 801df36:	3304      	adds	r3, #4
 801df38:	681b      	ldr	r3, [r3, #0]
 801df3a:	4299      	cmp	r1, r3
 801df3c:	d112      	bne.n	801df64 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801df3e:	687b      	ldr	r3, [r7, #4]
 801df40:	2b00      	cmp	r3, #0
 801df42:	d00c      	beq.n	801df5e <etharp_find_entry+0xc2>
 801df44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801df48:	4989      	ldr	r1, [pc, #548]	; (801e170 <etharp_find_entry+0x2d4>)
 801df4a:	4613      	mov	r3, r2
 801df4c:	005b      	lsls	r3, r3, #1
 801df4e:	4413      	add	r3, r2
 801df50:	00db      	lsls	r3, r3, #3
 801df52:	440b      	add	r3, r1
 801df54:	3308      	adds	r3, #8
 801df56:	681b      	ldr	r3, [r3, #0]
 801df58:	687a      	ldr	r2, [r7, #4]
 801df5a:	429a      	cmp	r2, r3
 801df5c:	d102      	bne.n	801df64 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801df5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801df62:	e100      	b.n	801e166 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801df64:	7dfb      	ldrb	r3, [r7, #23]
 801df66:	2b01      	cmp	r3, #1
 801df68:	d140      	bne.n	801dfec <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801df6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801df6e:	4980      	ldr	r1, [pc, #512]	; (801e170 <etharp_find_entry+0x2d4>)
 801df70:	4613      	mov	r3, r2
 801df72:	005b      	lsls	r3, r3, #1
 801df74:	4413      	add	r3, r2
 801df76:	00db      	lsls	r3, r3, #3
 801df78:	440b      	add	r3, r1
 801df7a:	681b      	ldr	r3, [r3, #0]
 801df7c:	2b00      	cmp	r3, #0
 801df7e:	d01a      	beq.n	801dfb6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801df80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801df84:	497a      	ldr	r1, [pc, #488]	; (801e170 <etharp_find_entry+0x2d4>)
 801df86:	4613      	mov	r3, r2
 801df88:	005b      	lsls	r3, r3, #1
 801df8a:	4413      	add	r3, r2
 801df8c:	00db      	lsls	r3, r3, #3
 801df8e:	440b      	add	r3, r1
 801df90:	3312      	adds	r3, #18
 801df92:	881b      	ldrh	r3, [r3, #0]
 801df94:	8bba      	ldrh	r2, [r7, #28]
 801df96:	429a      	cmp	r2, r3
 801df98:	d845      	bhi.n	801e026 <etharp_find_entry+0x18a>
            old_queue = i;
 801df9a:	8c3b      	ldrh	r3, [r7, #32]
 801df9c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801df9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801dfa2:	4973      	ldr	r1, [pc, #460]	; (801e170 <etharp_find_entry+0x2d4>)
 801dfa4:	4613      	mov	r3, r2
 801dfa6:	005b      	lsls	r3, r3, #1
 801dfa8:	4413      	add	r3, r2
 801dfaa:	00db      	lsls	r3, r3, #3
 801dfac:	440b      	add	r3, r1
 801dfae:	3312      	adds	r3, #18
 801dfb0:	881b      	ldrh	r3, [r3, #0]
 801dfb2:	83bb      	strh	r3, [r7, #28]
 801dfb4:	e037      	b.n	801e026 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801dfb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801dfba:	496d      	ldr	r1, [pc, #436]	; (801e170 <etharp_find_entry+0x2d4>)
 801dfbc:	4613      	mov	r3, r2
 801dfbe:	005b      	lsls	r3, r3, #1
 801dfc0:	4413      	add	r3, r2
 801dfc2:	00db      	lsls	r3, r3, #3
 801dfc4:	440b      	add	r3, r1
 801dfc6:	3312      	adds	r3, #18
 801dfc8:	881b      	ldrh	r3, [r3, #0]
 801dfca:	8b7a      	ldrh	r2, [r7, #26]
 801dfcc:	429a      	cmp	r2, r3
 801dfce:	d82a      	bhi.n	801e026 <etharp_find_entry+0x18a>
            old_pending = i;
 801dfd0:	8c3b      	ldrh	r3, [r7, #32]
 801dfd2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801dfd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801dfd8:	4965      	ldr	r1, [pc, #404]	; (801e170 <etharp_find_entry+0x2d4>)
 801dfda:	4613      	mov	r3, r2
 801dfdc:	005b      	lsls	r3, r3, #1
 801dfde:	4413      	add	r3, r2
 801dfe0:	00db      	lsls	r3, r3, #3
 801dfe2:	440b      	add	r3, r1
 801dfe4:	3312      	adds	r3, #18
 801dfe6:	881b      	ldrh	r3, [r3, #0]
 801dfe8:	837b      	strh	r3, [r7, #26]
 801dfea:	e01c      	b.n	801e026 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801dfec:	7dfb      	ldrb	r3, [r7, #23]
 801dfee:	2b01      	cmp	r3, #1
 801dff0:	d919      	bls.n	801e026 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801dff2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801dff6:	495e      	ldr	r1, [pc, #376]	; (801e170 <etharp_find_entry+0x2d4>)
 801dff8:	4613      	mov	r3, r2
 801dffa:	005b      	lsls	r3, r3, #1
 801dffc:	4413      	add	r3, r2
 801dffe:	00db      	lsls	r3, r3, #3
 801e000:	440b      	add	r3, r1
 801e002:	3312      	adds	r3, #18
 801e004:	881b      	ldrh	r3, [r3, #0]
 801e006:	8b3a      	ldrh	r2, [r7, #24]
 801e008:	429a      	cmp	r2, r3
 801e00a:	d80c      	bhi.n	801e026 <etharp_find_entry+0x18a>
            old_stable = i;
 801e00c:	8c3b      	ldrh	r3, [r7, #32]
 801e00e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801e010:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e014:	4956      	ldr	r1, [pc, #344]	; (801e170 <etharp_find_entry+0x2d4>)
 801e016:	4613      	mov	r3, r2
 801e018:	005b      	lsls	r3, r3, #1
 801e01a:	4413      	add	r3, r2
 801e01c:	00db      	lsls	r3, r3, #3
 801e01e:	440b      	add	r3, r1
 801e020:	3312      	adds	r3, #18
 801e022:	881b      	ldrh	r3, [r3, #0]
 801e024:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e026:	8c3b      	ldrh	r3, [r7, #32]
 801e028:	3301      	adds	r3, #1
 801e02a:	b29b      	uxth	r3, r3
 801e02c:	843b      	strh	r3, [r7, #32]
 801e02e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e032:	2b09      	cmp	r3, #9
 801e034:	f77f af4c 	ble.w	801ded0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801e038:	7afb      	ldrb	r3, [r7, #11]
 801e03a:	f003 0302 	and.w	r3, r3, #2
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d108      	bne.n	801e054 <etharp_find_entry+0x1b8>
 801e042:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e046:	2b0a      	cmp	r3, #10
 801e048:	d107      	bne.n	801e05a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801e04a:	7afb      	ldrb	r3, [r7, #11]
 801e04c:	f003 0301 	and.w	r3, r3, #1
 801e050:	2b00      	cmp	r3, #0
 801e052:	d102      	bne.n	801e05a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801e054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e058:	e085      	b.n	801e166 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801e05a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e05e:	2b09      	cmp	r3, #9
 801e060:	dc02      	bgt.n	801e068 <etharp_find_entry+0x1cc>
    i = empty;
 801e062:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e064:	843b      	strh	r3, [r7, #32]
 801e066:	e039      	b.n	801e0dc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801e068:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801e06c:	2b09      	cmp	r3, #9
 801e06e:	dc14      	bgt.n	801e09a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801e070:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e072:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801e074:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e078:	493d      	ldr	r1, [pc, #244]	; (801e170 <etharp_find_entry+0x2d4>)
 801e07a:	4613      	mov	r3, r2
 801e07c:	005b      	lsls	r3, r3, #1
 801e07e:	4413      	add	r3, r2
 801e080:	00db      	lsls	r3, r3, #3
 801e082:	440b      	add	r3, r1
 801e084:	681b      	ldr	r3, [r3, #0]
 801e086:	2b00      	cmp	r3, #0
 801e088:	d018      	beq.n	801e0bc <etharp_find_entry+0x220>
 801e08a:	4b3a      	ldr	r3, [pc, #232]	; (801e174 <etharp_find_entry+0x2d8>)
 801e08c:	f240 126d 	movw	r2, #365	; 0x16d
 801e090:	493b      	ldr	r1, [pc, #236]	; (801e180 <etharp_find_entry+0x2e4>)
 801e092:	483a      	ldr	r0, [pc, #232]	; (801e17c <etharp_find_entry+0x2e0>)
 801e094:	f002 fa3e 	bl	8020514 <iprintf>
 801e098:	e010      	b.n	801e0bc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801e09a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801e09e:	2b09      	cmp	r3, #9
 801e0a0:	dc02      	bgt.n	801e0a8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801e0a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e0a4:	843b      	strh	r3, [r7, #32]
 801e0a6:	e009      	b.n	801e0bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801e0a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801e0ac:	2b09      	cmp	r3, #9
 801e0ae:	dc02      	bgt.n	801e0b6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801e0b0:	8bfb      	ldrh	r3, [r7, #30]
 801e0b2:	843b      	strh	r3, [r7, #32]
 801e0b4:	e002      	b.n	801e0bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801e0b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e0ba:	e054      	b.n	801e166 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e0bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e0c0:	2b09      	cmp	r3, #9
 801e0c2:	dd06      	ble.n	801e0d2 <etharp_find_entry+0x236>
 801e0c4:	4b2b      	ldr	r3, [pc, #172]	; (801e174 <etharp_find_entry+0x2d8>)
 801e0c6:	f240 127f 	movw	r2, #383	; 0x17f
 801e0ca:	492e      	ldr	r1, [pc, #184]	; (801e184 <etharp_find_entry+0x2e8>)
 801e0cc:	482b      	ldr	r0, [pc, #172]	; (801e17c <etharp_find_entry+0x2e0>)
 801e0ce:	f002 fa21 	bl	8020514 <iprintf>
    etharp_free_entry(i);
 801e0d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e0d6:	4618      	mov	r0, r3
 801e0d8:	f7ff fe06 	bl	801dce8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e0dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e0e0:	2b09      	cmp	r3, #9
 801e0e2:	dd06      	ble.n	801e0f2 <etharp_find_entry+0x256>
 801e0e4:	4b23      	ldr	r3, [pc, #140]	; (801e174 <etharp_find_entry+0x2d8>)
 801e0e6:	f240 1283 	movw	r2, #387	; 0x183
 801e0ea:	4926      	ldr	r1, [pc, #152]	; (801e184 <etharp_find_entry+0x2e8>)
 801e0ec:	4823      	ldr	r0, [pc, #140]	; (801e17c <etharp_find_entry+0x2e0>)
 801e0ee:	f002 fa11 	bl	8020514 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801e0f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e0f6:	491e      	ldr	r1, [pc, #120]	; (801e170 <etharp_find_entry+0x2d4>)
 801e0f8:	4613      	mov	r3, r2
 801e0fa:	005b      	lsls	r3, r3, #1
 801e0fc:	4413      	add	r3, r2
 801e0fe:	00db      	lsls	r3, r3, #3
 801e100:	440b      	add	r3, r1
 801e102:	3314      	adds	r3, #20
 801e104:	781b      	ldrb	r3, [r3, #0]
 801e106:	2b00      	cmp	r3, #0
 801e108:	d006      	beq.n	801e118 <etharp_find_entry+0x27c>
 801e10a:	4b1a      	ldr	r3, [pc, #104]	; (801e174 <etharp_find_entry+0x2d8>)
 801e10c:	f240 1285 	movw	r2, #389	; 0x185
 801e110:	491d      	ldr	r1, [pc, #116]	; (801e188 <etharp_find_entry+0x2ec>)
 801e112:	481a      	ldr	r0, [pc, #104]	; (801e17c <etharp_find_entry+0x2e0>)
 801e114:	f002 f9fe 	bl	8020514 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801e118:	68fb      	ldr	r3, [r7, #12]
 801e11a:	2b00      	cmp	r3, #0
 801e11c:	d00b      	beq.n	801e136 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801e11e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e122:	68fb      	ldr	r3, [r7, #12]
 801e124:	6819      	ldr	r1, [r3, #0]
 801e126:	4812      	ldr	r0, [pc, #72]	; (801e170 <etharp_find_entry+0x2d4>)
 801e128:	4613      	mov	r3, r2
 801e12a:	005b      	lsls	r3, r3, #1
 801e12c:	4413      	add	r3, r2
 801e12e:	00db      	lsls	r3, r3, #3
 801e130:	4403      	add	r3, r0
 801e132:	3304      	adds	r3, #4
 801e134:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801e136:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e13a:	490d      	ldr	r1, [pc, #52]	; (801e170 <etharp_find_entry+0x2d4>)
 801e13c:	4613      	mov	r3, r2
 801e13e:	005b      	lsls	r3, r3, #1
 801e140:	4413      	add	r3, r2
 801e142:	00db      	lsls	r3, r3, #3
 801e144:	440b      	add	r3, r1
 801e146:	3312      	adds	r3, #18
 801e148:	2200      	movs	r2, #0
 801e14a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801e14c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e150:	4907      	ldr	r1, [pc, #28]	; (801e170 <etharp_find_entry+0x2d4>)
 801e152:	4613      	mov	r3, r2
 801e154:	005b      	lsls	r3, r3, #1
 801e156:	4413      	add	r3, r2
 801e158:	00db      	lsls	r3, r3, #3
 801e15a:	440b      	add	r3, r1
 801e15c:	3308      	adds	r3, #8
 801e15e:	687a      	ldr	r2, [r7, #4]
 801e160:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801e162:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801e166:	4618      	mov	r0, r3
 801e168:	3728      	adds	r7, #40	; 0x28
 801e16a:	46bd      	mov	sp, r7
 801e16c:	bd80      	pop	{r7, pc}
 801e16e:	bf00      	nop
 801e170:	2000938c 	.word	0x2000938c
 801e174:	08023f3c 	.word	0x08023f3c
 801e178:	08023f74 	.word	0x08023f74
 801e17c:	08023fb4 	.word	0x08023fb4
 801e180:	08023fdc 	.word	0x08023fdc
 801e184:	08023ff4 	.word	0x08023ff4
 801e188:	08024008 	.word	0x08024008

0801e18c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801e18c:	b580      	push	{r7, lr}
 801e18e:	b088      	sub	sp, #32
 801e190:	af02      	add	r7, sp, #8
 801e192:	60f8      	str	r0, [r7, #12]
 801e194:	60b9      	str	r1, [r7, #8]
 801e196:	607a      	str	r2, [r7, #4]
 801e198:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801e19a:	68fb      	ldr	r3, [r7, #12]
 801e19c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801e1a0:	2b06      	cmp	r3, #6
 801e1a2:	d006      	beq.n	801e1b2 <etharp_update_arp_entry+0x26>
 801e1a4:	4b48      	ldr	r3, [pc, #288]	; (801e2c8 <etharp_update_arp_entry+0x13c>)
 801e1a6:	f240 12a9 	movw	r2, #425	; 0x1a9
 801e1aa:	4948      	ldr	r1, [pc, #288]	; (801e2cc <etharp_update_arp_entry+0x140>)
 801e1ac:	4848      	ldr	r0, [pc, #288]	; (801e2d0 <etharp_update_arp_entry+0x144>)
 801e1ae:	f002 f9b1 	bl	8020514 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801e1b2:	68bb      	ldr	r3, [r7, #8]
 801e1b4:	2b00      	cmp	r3, #0
 801e1b6:	d012      	beq.n	801e1de <etharp_update_arp_entry+0x52>
 801e1b8:	68bb      	ldr	r3, [r7, #8]
 801e1ba:	681b      	ldr	r3, [r3, #0]
 801e1bc:	2b00      	cmp	r3, #0
 801e1be:	d00e      	beq.n	801e1de <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e1c0:	68bb      	ldr	r3, [r7, #8]
 801e1c2:	681b      	ldr	r3, [r3, #0]
 801e1c4:	68f9      	ldr	r1, [r7, #12]
 801e1c6:	4618      	mov	r0, r3
 801e1c8:	f001 f8fc 	bl	801f3c4 <ip4_addr_isbroadcast_u32>
 801e1cc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801e1ce:	2b00      	cmp	r3, #0
 801e1d0:	d105      	bne.n	801e1de <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801e1d2:	68bb      	ldr	r3, [r7, #8]
 801e1d4:	681b      	ldr	r3, [r3, #0]
 801e1d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e1da:	2be0      	cmp	r3, #224	; 0xe0
 801e1dc:	d102      	bne.n	801e1e4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801e1de:	f06f 030f 	mvn.w	r3, #15
 801e1e2:	e06c      	b.n	801e2be <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801e1e4:	78fb      	ldrb	r3, [r7, #3]
 801e1e6:	68fa      	ldr	r2, [r7, #12]
 801e1e8:	4619      	mov	r1, r3
 801e1ea:	68b8      	ldr	r0, [r7, #8]
 801e1ec:	f7ff fe56 	bl	801de9c <etharp_find_entry>
 801e1f0:	4603      	mov	r3, r0
 801e1f2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801e1f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	da02      	bge.n	801e202 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801e1fc:	8afb      	ldrh	r3, [r7, #22]
 801e1fe:	b25b      	sxtb	r3, r3
 801e200:	e05d      	b.n	801e2be <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801e202:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e206:	4933      	ldr	r1, [pc, #204]	; (801e2d4 <etharp_update_arp_entry+0x148>)
 801e208:	4613      	mov	r3, r2
 801e20a:	005b      	lsls	r3, r3, #1
 801e20c:	4413      	add	r3, r2
 801e20e:	00db      	lsls	r3, r3, #3
 801e210:	440b      	add	r3, r1
 801e212:	3314      	adds	r3, #20
 801e214:	2202      	movs	r2, #2
 801e216:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801e218:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e21c:	492d      	ldr	r1, [pc, #180]	; (801e2d4 <etharp_update_arp_entry+0x148>)
 801e21e:	4613      	mov	r3, r2
 801e220:	005b      	lsls	r3, r3, #1
 801e222:	4413      	add	r3, r2
 801e224:	00db      	lsls	r3, r3, #3
 801e226:	440b      	add	r3, r1
 801e228:	3308      	adds	r3, #8
 801e22a:	68fa      	ldr	r2, [r7, #12]
 801e22c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801e22e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e232:	4613      	mov	r3, r2
 801e234:	005b      	lsls	r3, r3, #1
 801e236:	4413      	add	r3, r2
 801e238:	00db      	lsls	r3, r3, #3
 801e23a:	3308      	adds	r3, #8
 801e23c:	4a25      	ldr	r2, [pc, #148]	; (801e2d4 <etharp_update_arp_entry+0x148>)
 801e23e:	4413      	add	r3, r2
 801e240:	3304      	adds	r3, #4
 801e242:	2206      	movs	r2, #6
 801e244:	6879      	ldr	r1, [r7, #4]
 801e246:	4618      	mov	r0, r3
 801e248:	f002 f951 	bl	80204ee <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801e24c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e250:	4920      	ldr	r1, [pc, #128]	; (801e2d4 <etharp_update_arp_entry+0x148>)
 801e252:	4613      	mov	r3, r2
 801e254:	005b      	lsls	r3, r3, #1
 801e256:	4413      	add	r3, r2
 801e258:	00db      	lsls	r3, r3, #3
 801e25a:	440b      	add	r3, r1
 801e25c:	3312      	adds	r3, #18
 801e25e:	2200      	movs	r2, #0
 801e260:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801e262:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e266:	491b      	ldr	r1, [pc, #108]	; (801e2d4 <etharp_update_arp_entry+0x148>)
 801e268:	4613      	mov	r3, r2
 801e26a:	005b      	lsls	r3, r3, #1
 801e26c:	4413      	add	r3, r2
 801e26e:	00db      	lsls	r3, r3, #3
 801e270:	440b      	add	r3, r1
 801e272:	681b      	ldr	r3, [r3, #0]
 801e274:	2b00      	cmp	r3, #0
 801e276:	d021      	beq.n	801e2bc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801e278:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e27c:	4915      	ldr	r1, [pc, #84]	; (801e2d4 <etharp_update_arp_entry+0x148>)
 801e27e:	4613      	mov	r3, r2
 801e280:	005b      	lsls	r3, r3, #1
 801e282:	4413      	add	r3, r2
 801e284:	00db      	lsls	r3, r3, #3
 801e286:	440b      	add	r3, r1
 801e288:	681b      	ldr	r3, [r3, #0]
 801e28a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801e28c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e290:	4910      	ldr	r1, [pc, #64]	; (801e2d4 <etharp_update_arp_entry+0x148>)
 801e292:	4613      	mov	r3, r2
 801e294:	005b      	lsls	r3, r3, #1
 801e296:	4413      	add	r3, r2
 801e298:	00db      	lsls	r3, r3, #3
 801e29a:	440b      	add	r3, r1
 801e29c:	2200      	movs	r2, #0
 801e29e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801e2a0:	68fb      	ldr	r3, [r7, #12]
 801e2a2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801e2a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e2aa:	9300      	str	r3, [sp, #0]
 801e2ac:	687b      	ldr	r3, [r7, #4]
 801e2ae:	6939      	ldr	r1, [r7, #16]
 801e2b0:	68f8      	ldr	r0, [r7, #12]
 801e2b2:	f001 ff8b 	bl	80201cc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801e2b6:	6938      	ldr	r0, [r7, #16]
 801e2b8:	f7f8 fee6 	bl	8017088 <pbuf_free>
  }
  return ERR_OK;
 801e2bc:	2300      	movs	r3, #0
}
 801e2be:	4618      	mov	r0, r3
 801e2c0:	3718      	adds	r7, #24
 801e2c2:	46bd      	mov	sp, r7
 801e2c4:	bd80      	pop	{r7, pc}
 801e2c6:	bf00      	nop
 801e2c8:	08023f3c 	.word	0x08023f3c
 801e2cc:	08024034 	.word	0x08024034
 801e2d0:	08023fb4 	.word	0x08023fb4
 801e2d4:	2000938c 	.word	0x2000938c

0801e2d8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801e2d8:	b580      	push	{r7, lr}
 801e2da:	b084      	sub	sp, #16
 801e2dc:	af00      	add	r7, sp, #0
 801e2de:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e2e0:	2300      	movs	r3, #0
 801e2e2:	60fb      	str	r3, [r7, #12]
 801e2e4:	e01e      	b.n	801e324 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801e2e6:	4913      	ldr	r1, [pc, #76]	; (801e334 <etharp_cleanup_netif+0x5c>)
 801e2e8:	68fa      	ldr	r2, [r7, #12]
 801e2ea:	4613      	mov	r3, r2
 801e2ec:	005b      	lsls	r3, r3, #1
 801e2ee:	4413      	add	r3, r2
 801e2f0:	00db      	lsls	r3, r3, #3
 801e2f2:	440b      	add	r3, r1
 801e2f4:	3314      	adds	r3, #20
 801e2f6:	781b      	ldrb	r3, [r3, #0]
 801e2f8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801e2fa:	7afb      	ldrb	r3, [r7, #11]
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	d00e      	beq.n	801e31e <etharp_cleanup_netif+0x46>
 801e300:	490c      	ldr	r1, [pc, #48]	; (801e334 <etharp_cleanup_netif+0x5c>)
 801e302:	68fa      	ldr	r2, [r7, #12]
 801e304:	4613      	mov	r3, r2
 801e306:	005b      	lsls	r3, r3, #1
 801e308:	4413      	add	r3, r2
 801e30a:	00db      	lsls	r3, r3, #3
 801e30c:	440b      	add	r3, r1
 801e30e:	3308      	adds	r3, #8
 801e310:	681b      	ldr	r3, [r3, #0]
 801e312:	687a      	ldr	r2, [r7, #4]
 801e314:	429a      	cmp	r2, r3
 801e316:	d102      	bne.n	801e31e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801e318:	68f8      	ldr	r0, [r7, #12]
 801e31a:	f7ff fce5 	bl	801dce8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e31e:	68fb      	ldr	r3, [r7, #12]
 801e320:	3301      	adds	r3, #1
 801e322:	60fb      	str	r3, [r7, #12]
 801e324:	68fb      	ldr	r3, [r7, #12]
 801e326:	2b09      	cmp	r3, #9
 801e328:	dddd      	ble.n	801e2e6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801e32a:	bf00      	nop
 801e32c:	3710      	adds	r7, #16
 801e32e:	46bd      	mov	sp, r7
 801e330:	bd80      	pop	{r7, pc}
 801e332:	bf00      	nop
 801e334:	2000938c 	.word	0x2000938c

0801e338 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801e338:	b5b0      	push	{r4, r5, r7, lr}
 801e33a:	b08a      	sub	sp, #40	; 0x28
 801e33c:	af04      	add	r7, sp, #16
 801e33e:	6078      	str	r0, [r7, #4]
 801e340:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801e342:	683b      	ldr	r3, [r7, #0]
 801e344:	2b00      	cmp	r3, #0
 801e346:	d107      	bne.n	801e358 <etharp_input+0x20>
 801e348:	4b3d      	ldr	r3, [pc, #244]	; (801e440 <etharp_input+0x108>)
 801e34a:	f240 228a 	movw	r2, #650	; 0x28a
 801e34e:	493d      	ldr	r1, [pc, #244]	; (801e444 <etharp_input+0x10c>)
 801e350:	483d      	ldr	r0, [pc, #244]	; (801e448 <etharp_input+0x110>)
 801e352:	f002 f8df 	bl	8020514 <iprintf>
 801e356:	e06f      	b.n	801e438 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801e358:	687b      	ldr	r3, [r7, #4]
 801e35a:	685b      	ldr	r3, [r3, #4]
 801e35c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801e35e:	693b      	ldr	r3, [r7, #16]
 801e360:	881b      	ldrh	r3, [r3, #0]
 801e362:	b29b      	uxth	r3, r3
 801e364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e368:	d10c      	bne.n	801e384 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801e36a:	693b      	ldr	r3, [r7, #16]
 801e36c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801e36e:	2b06      	cmp	r3, #6
 801e370:	d108      	bne.n	801e384 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801e372:	693b      	ldr	r3, [r7, #16]
 801e374:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801e376:	2b04      	cmp	r3, #4
 801e378:	d104      	bne.n	801e384 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801e37a:	693b      	ldr	r3, [r7, #16]
 801e37c:	885b      	ldrh	r3, [r3, #2]
 801e37e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801e380:	2b08      	cmp	r3, #8
 801e382:	d003      	beq.n	801e38c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801e384:	6878      	ldr	r0, [r7, #4]
 801e386:	f7f8 fe7f 	bl	8017088 <pbuf_free>
    return;
 801e38a:	e055      	b.n	801e438 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801e38c:	693b      	ldr	r3, [r7, #16]
 801e38e:	330e      	adds	r3, #14
 801e390:	681b      	ldr	r3, [r3, #0]
 801e392:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801e394:	693b      	ldr	r3, [r7, #16]
 801e396:	3318      	adds	r3, #24
 801e398:	681b      	ldr	r3, [r3, #0]
 801e39a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e39c:	683b      	ldr	r3, [r7, #0]
 801e39e:	3304      	adds	r3, #4
 801e3a0:	681b      	ldr	r3, [r3, #0]
 801e3a2:	2b00      	cmp	r3, #0
 801e3a4:	d102      	bne.n	801e3ac <etharp_input+0x74>
    for_us = 0;
 801e3a6:	2300      	movs	r3, #0
 801e3a8:	75fb      	strb	r3, [r7, #23]
 801e3aa:	e009      	b.n	801e3c0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801e3ac:	68ba      	ldr	r2, [r7, #8]
 801e3ae:	683b      	ldr	r3, [r7, #0]
 801e3b0:	3304      	adds	r3, #4
 801e3b2:	681b      	ldr	r3, [r3, #0]
 801e3b4:	429a      	cmp	r2, r3
 801e3b6:	bf0c      	ite	eq
 801e3b8:	2301      	moveq	r3, #1
 801e3ba:	2300      	movne	r3, #0
 801e3bc:	b2db      	uxtb	r3, r3
 801e3be:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801e3c0:	693b      	ldr	r3, [r7, #16]
 801e3c2:	f103 0208 	add.w	r2, r3, #8
 801e3c6:	7dfb      	ldrb	r3, [r7, #23]
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	d001      	beq.n	801e3d0 <etharp_input+0x98>
 801e3cc:	2301      	movs	r3, #1
 801e3ce:	e000      	b.n	801e3d2 <etharp_input+0x9a>
 801e3d0:	2302      	movs	r3, #2
 801e3d2:	f107 010c 	add.w	r1, r7, #12
 801e3d6:	6838      	ldr	r0, [r7, #0]
 801e3d8:	f7ff fed8 	bl	801e18c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801e3dc:	693b      	ldr	r3, [r7, #16]
 801e3de:	88db      	ldrh	r3, [r3, #6]
 801e3e0:	b29b      	uxth	r3, r3
 801e3e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e3e6:	d003      	beq.n	801e3f0 <etharp_input+0xb8>
 801e3e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e3ec:	d01e      	beq.n	801e42c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801e3ee:	e020      	b.n	801e432 <etharp_input+0xfa>
      if (for_us) {
 801e3f0:	7dfb      	ldrb	r3, [r7, #23]
 801e3f2:	2b00      	cmp	r3, #0
 801e3f4:	d01c      	beq.n	801e430 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801e3f6:	683b      	ldr	r3, [r7, #0]
 801e3f8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801e3fc:	693b      	ldr	r3, [r7, #16]
 801e3fe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801e402:	683b      	ldr	r3, [r7, #0]
 801e404:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801e408:	683b      	ldr	r3, [r7, #0]
 801e40a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801e40c:	693a      	ldr	r2, [r7, #16]
 801e40e:	3208      	adds	r2, #8
        etharp_raw(netif,
 801e410:	2102      	movs	r1, #2
 801e412:	9103      	str	r1, [sp, #12]
 801e414:	f107 010c 	add.w	r1, r7, #12
 801e418:	9102      	str	r1, [sp, #8]
 801e41a:	9201      	str	r2, [sp, #4]
 801e41c:	9300      	str	r3, [sp, #0]
 801e41e:	462b      	mov	r3, r5
 801e420:	4622      	mov	r2, r4
 801e422:	4601      	mov	r1, r0
 801e424:	6838      	ldr	r0, [r7, #0]
 801e426:	f000 faeb 	bl	801ea00 <etharp_raw>
      break;
 801e42a:	e001      	b.n	801e430 <etharp_input+0xf8>
      break;
 801e42c:	bf00      	nop
 801e42e:	e000      	b.n	801e432 <etharp_input+0xfa>
      break;
 801e430:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801e432:	6878      	ldr	r0, [r7, #4]
 801e434:	f7f8 fe28 	bl	8017088 <pbuf_free>
}
 801e438:	3718      	adds	r7, #24
 801e43a:	46bd      	mov	sp, r7
 801e43c:	bdb0      	pop	{r4, r5, r7, pc}
 801e43e:	bf00      	nop
 801e440:	08023f3c 	.word	0x08023f3c
 801e444:	0802408c 	.word	0x0802408c
 801e448:	08023fb4 	.word	0x08023fb4

0801e44c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801e44c:	b580      	push	{r7, lr}
 801e44e:	b086      	sub	sp, #24
 801e450:	af02      	add	r7, sp, #8
 801e452:	60f8      	str	r0, [r7, #12]
 801e454:	60b9      	str	r1, [r7, #8]
 801e456:	4613      	mov	r3, r2
 801e458:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801e45a:	79fa      	ldrb	r2, [r7, #7]
 801e45c:	4944      	ldr	r1, [pc, #272]	; (801e570 <etharp_output_to_arp_index+0x124>)
 801e45e:	4613      	mov	r3, r2
 801e460:	005b      	lsls	r3, r3, #1
 801e462:	4413      	add	r3, r2
 801e464:	00db      	lsls	r3, r3, #3
 801e466:	440b      	add	r3, r1
 801e468:	3314      	adds	r3, #20
 801e46a:	781b      	ldrb	r3, [r3, #0]
 801e46c:	2b01      	cmp	r3, #1
 801e46e:	d806      	bhi.n	801e47e <etharp_output_to_arp_index+0x32>
 801e470:	4b40      	ldr	r3, [pc, #256]	; (801e574 <etharp_output_to_arp_index+0x128>)
 801e472:	f240 22ef 	movw	r2, #751	; 0x2ef
 801e476:	4940      	ldr	r1, [pc, #256]	; (801e578 <etharp_output_to_arp_index+0x12c>)
 801e478:	4840      	ldr	r0, [pc, #256]	; (801e57c <etharp_output_to_arp_index+0x130>)
 801e47a:	f002 f84b 	bl	8020514 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801e47e:	79fa      	ldrb	r2, [r7, #7]
 801e480:	493b      	ldr	r1, [pc, #236]	; (801e570 <etharp_output_to_arp_index+0x124>)
 801e482:	4613      	mov	r3, r2
 801e484:	005b      	lsls	r3, r3, #1
 801e486:	4413      	add	r3, r2
 801e488:	00db      	lsls	r3, r3, #3
 801e48a:	440b      	add	r3, r1
 801e48c:	3314      	adds	r3, #20
 801e48e:	781b      	ldrb	r3, [r3, #0]
 801e490:	2b02      	cmp	r3, #2
 801e492:	d153      	bne.n	801e53c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801e494:	79fa      	ldrb	r2, [r7, #7]
 801e496:	4936      	ldr	r1, [pc, #216]	; (801e570 <etharp_output_to_arp_index+0x124>)
 801e498:	4613      	mov	r3, r2
 801e49a:	005b      	lsls	r3, r3, #1
 801e49c:	4413      	add	r3, r2
 801e49e:	00db      	lsls	r3, r3, #3
 801e4a0:	440b      	add	r3, r1
 801e4a2:	3312      	adds	r3, #18
 801e4a4:	881b      	ldrh	r3, [r3, #0]
 801e4a6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801e4aa:	d919      	bls.n	801e4e0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801e4ac:	79fa      	ldrb	r2, [r7, #7]
 801e4ae:	4613      	mov	r3, r2
 801e4b0:	005b      	lsls	r3, r3, #1
 801e4b2:	4413      	add	r3, r2
 801e4b4:	00db      	lsls	r3, r3, #3
 801e4b6:	4a2e      	ldr	r2, [pc, #184]	; (801e570 <etharp_output_to_arp_index+0x124>)
 801e4b8:	4413      	add	r3, r2
 801e4ba:	3304      	adds	r3, #4
 801e4bc:	4619      	mov	r1, r3
 801e4be:	68f8      	ldr	r0, [r7, #12]
 801e4c0:	f000 fb4c 	bl	801eb5c <etharp_request>
 801e4c4:	4603      	mov	r3, r0
 801e4c6:	2b00      	cmp	r3, #0
 801e4c8:	d138      	bne.n	801e53c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801e4ca:	79fa      	ldrb	r2, [r7, #7]
 801e4cc:	4928      	ldr	r1, [pc, #160]	; (801e570 <etharp_output_to_arp_index+0x124>)
 801e4ce:	4613      	mov	r3, r2
 801e4d0:	005b      	lsls	r3, r3, #1
 801e4d2:	4413      	add	r3, r2
 801e4d4:	00db      	lsls	r3, r3, #3
 801e4d6:	440b      	add	r3, r1
 801e4d8:	3314      	adds	r3, #20
 801e4da:	2203      	movs	r2, #3
 801e4dc:	701a      	strb	r2, [r3, #0]
 801e4de:	e02d      	b.n	801e53c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801e4e0:	79fa      	ldrb	r2, [r7, #7]
 801e4e2:	4923      	ldr	r1, [pc, #140]	; (801e570 <etharp_output_to_arp_index+0x124>)
 801e4e4:	4613      	mov	r3, r2
 801e4e6:	005b      	lsls	r3, r3, #1
 801e4e8:	4413      	add	r3, r2
 801e4ea:	00db      	lsls	r3, r3, #3
 801e4ec:	440b      	add	r3, r1
 801e4ee:	3312      	adds	r3, #18
 801e4f0:	881b      	ldrh	r3, [r3, #0]
 801e4f2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801e4f6:	d321      	bcc.n	801e53c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801e4f8:	79fa      	ldrb	r2, [r7, #7]
 801e4fa:	4613      	mov	r3, r2
 801e4fc:	005b      	lsls	r3, r3, #1
 801e4fe:	4413      	add	r3, r2
 801e500:	00db      	lsls	r3, r3, #3
 801e502:	4a1b      	ldr	r2, [pc, #108]	; (801e570 <etharp_output_to_arp_index+0x124>)
 801e504:	4413      	add	r3, r2
 801e506:	1d19      	adds	r1, r3, #4
 801e508:	79fa      	ldrb	r2, [r7, #7]
 801e50a:	4613      	mov	r3, r2
 801e50c:	005b      	lsls	r3, r3, #1
 801e50e:	4413      	add	r3, r2
 801e510:	00db      	lsls	r3, r3, #3
 801e512:	3308      	adds	r3, #8
 801e514:	4a16      	ldr	r2, [pc, #88]	; (801e570 <etharp_output_to_arp_index+0x124>)
 801e516:	4413      	add	r3, r2
 801e518:	3304      	adds	r3, #4
 801e51a:	461a      	mov	r2, r3
 801e51c:	68f8      	ldr	r0, [r7, #12]
 801e51e:	f000 fafb 	bl	801eb18 <etharp_request_dst>
 801e522:	4603      	mov	r3, r0
 801e524:	2b00      	cmp	r3, #0
 801e526:	d109      	bne.n	801e53c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801e528:	79fa      	ldrb	r2, [r7, #7]
 801e52a:	4911      	ldr	r1, [pc, #68]	; (801e570 <etharp_output_to_arp_index+0x124>)
 801e52c:	4613      	mov	r3, r2
 801e52e:	005b      	lsls	r3, r3, #1
 801e530:	4413      	add	r3, r2
 801e532:	00db      	lsls	r3, r3, #3
 801e534:	440b      	add	r3, r1
 801e536:	3314      	adds	r3, #20
 801e538:	2203      	movs	r2, #3
 801e53a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801e53c:	68fb      	ldr	r3, [r7, #12]
 801e53e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801e542:	79fa      	ldrb	r2, [r7, #7]
 801e544:	4613      	mov	r3, r2
 801e546:	005b      	lsls	r3, r3, #1
 801e548:	4413      	add	r3, r2
 801e54a:	00db      	lsls	r3, r3, #3
 801e54c:	3308      	adds	r3, #8
 801e54e:	4a08      	ldr	r2, [pc, #32]	; (801e570 <etharp_output_to_arp_index+0x124>)
 801e550:	4413      	add	r3, r2
 801e552:	1d1a      	adds	r2, r3, #4
 801e554:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e558:	9300      	str	r3, [sp, #0]
 801e55a:	4613      	mov	r3, r2
 801e55c:	460a      	mov	r2, r1
 801e55e:	68b9      	ldr	r1, [r7, #8]
 801e560:	68f8      	ldr	r0, [r7, #12]
 801e562:	f001 fe33 	bl	80201cc <ethernet_output>
 801e566:	4603      	mov	r3, r0
}
 801e568:	4618      	mov	r0, r3
 801e56a:	3710      	adds	r7, #16
 801e56c:	46bd      	mov	sp, r7
 801e56e:	bd80      	pop	{r7, pc}
 801e570:	2000938c 	.word	0x2000938c
 801e574:	08023f3c 	.word	0x08023f3c
 801e578:	080240ac 	.word	0x080240ac
 801e57c:	08023fb4 	.word	0x08023fb4

0801e580 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801e580:	b580      	push	{r7, lr}
 801e582:	b08a      	sub	sp, #40	; 0x28
 801e584:	af02      	add	r7, sp, #8
 801e586:	60f8      	str	r0, [r7, #12]
 801e588:	60b9      	str	r1, [r7, #8]
 801e58a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801e590:	68fb      	ldr	r3, [r7, #12]
 801e592:	2b00      	cmp	r3, #0
 801e594:	d106      	bne.n	801e5a4 <etharp_output+0x24>
 801e596:	4b73      	ldr	r3, [pc, #460]	; (801e764 <etharp_output+0x1e4>)
 801e598:	f240 321e 	movw	r2, #798	; 0x31e
 801e59c:	4972      	ldr	r1, [pc, #456]	; (801e768 <etharp_output+0x1e8>)
 801e59e:	4873      	ldr	r0, [pc, #460]	; (801e76c <etharp_output+0x1ec>)
 801e5a0:	f001 ffb8 	bl	8020514 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801e5a4:	68bb      	ldr	r3, [r7, #8]
 801e5a6:	2b00      	cmp	r3, #0
 801e5a8:	d106      	bne.n	801e5b8 <etharp_output+0x38>
 801e5aa:	4b6e      	ldr	r3, [pc, #440]	; (801e764 <etharp_output+0x1e4>)
 801e5ac:	f240 321f 	movw	r2, #799	; 0x31f
 801e5b0:	496f      	ldr	r1, [pc, #444]	; (801e770 <etharp_output+0x1f0>)
 801e5b2:	486e      	ldr	r0, [pc, #440]	; (801e76c <etharp_output+0x1ec>)
 801e5b4:	f001 ffae 	bl	8020514 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801e5b8:	687b      	ldr	r3, [r7, #4]
 801e5ba:	2b00      	cmp	r3, #0
 801e5bc:	d106      	bne.n	801e5cc <etharp_output+0x4c>
 801e5be:	4b69      	ldr	r3, [pc, #420]	; (801e764 <etharp_output+0x1e4>)
 801e5c0:	f44f 7248 	mov.w	r2, #800	; 0x320
 801e5c4:	496b      	ldr	r1, [pc, #428]	; (801e774 <etharp_output+0x1f4>)
 801e5c6:	4869      	ldr	r0, [pc, #420]	; (801e76c <etharp_output+0x1ec>)
 801e5c8:	f001 ffa4 	bl	8020514 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801e5cc:	687b      	ldr	r3, [r7, #4]
 801e5ce:	681b      	ldr	r3, [r3, #0]
 801e5d0:	68f9      	ldr	r1, [r7, #12]
 801e5d2:	4618      	mov	r0, r3
 801e5d4:	f000 fef6 	bl	801f3c4 <ip4_addr_isbroadcast_u32>
 801e5d8:	4603      	mov	r3, r0
 801e5da:	2b00      	cmp	r3, #0
 801e5dc:	d002      	beq.n	801e5e4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801e5de:	4b66      	ldr	r3, [pc, #408]	; (801e778 <etharp_output+0x1f8>)
 801e5e0:	61fb      	str	r3, [r7, #28]
 801e5e2:	e0af      	b.n	801e744 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801e5e4:	687b      	ldr	r3, [r7, #4]
 801e5e6:	681b      	ldr	r3, [r3, #0]
 801e5e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e5ec:	2be0      	cmp	r3, #224	; 0xe0
 801e5ee:	d118      	bne.n	801e622 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801e5f0:	2301      	movs	r3, #1
 801e5f2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801e5f4:	2300      	movs	r3, #0
 801e5f6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801e5f8:	235e      	movs	r3, #94	; 0x5e
 801e5fa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801e5fc:	687b      	ldr	r3, [r7, #4]
 801e5fe:	3301      	adds	r3, #1
 801e600:	781b      	ldrb	r3, [r3, #0]
 801e602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e606:	b2db      	uxtb	r3, r3
 801e608:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801e60a:	687b      	ldr	r3, [r7, #4]
 801e60c:	3302      	adds	r3, #2
 801e60e:	781b      	ldrb	r3, [r3, #0]
 801e610:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	3303      	adds	r3, #3
 801e616:	781b      	ldrb	r3, [r3, #0]
 801e618:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801e61a:	f107 0310 	add.w	r3, r7, #16
 801e61e:	61fb      	str	r3, [r7, #28]
 801e620:	e090      	b.n	801e744 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801e622:	687b      	ldr	r3, [r7, #4]
 801e624:	681a      	ldr	r2, [r3, #0]
 801e626:	68fb      	ldr	r3, [r7, #12]
 801e628:	3304      	adds	r3, #4
 801e62a:	681b      	ldr	r3, [r3, #0]
 801e62c:	405a      	eors	r2, r3
 801e62e:	68fb      	ldr	r3, [r7, #12]
 801e630:	3308      	adds	r3, #8
 801e632:	681b      	ldr	r3, [r3, #0]
 801e634:	4013      	ands	r3, r2
 801e636:	2b00      	cmp	r3, #0
 801e638:	d012      	beq.n	801e660 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801e63a:	687b      	ldr	r3, [r7, #4]
 801e63c:	681b      	ldr	r3, [r3, #0]
 801e63e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801e640:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801e644:	4293      	cmp	r3, r2
 801e646:	d00b      	beq.n	801e660 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801e648:	68fb      	ldr	r3, [r7, #12]
 801e64a:	330c      	adds	r3, #12
 801e64c:	681b      	ldr	r3, [r3, #0]
 801e64e:	2b00      	cmp	r3, #0
 801e650:	d003      	beq.n	801e65a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801e652:	68fb      	ldr	r3, [r7, #12]
 801e654:	330c      	adds	r3, #12
 801e656:	61bb      	str	r3, [r7, #24]
 801e658:	e002      	b.n	801e660 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801e65a:	f06f 0303 	mvn.w	r3, #3
 801e65e:	e07d      	b.n	801e75c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801e660:	4b46      	ldr	r3, [pc, #280]	; (801e77c <etharp_output+0x1fc>)
 801e662:	781b      	ldrb	r3, [r3, #0]
 801e664:	4619      	mov	r1, r3
 801e666:	4a46      	ldr	r2, [pc, #280]	; (801e780 <etharp_output+0x200>)
 801e668:	460b      	mov	r3, r1
 801e66a:	005b      	lsls	r3, r3, #1
 801e66c:	440b      	add	r3, r1
 801e66e:	00db      	lsls	r3, r3, #3
 801e670:	4413      	add	r3, r2
 801e672:	3314      	adds	r3, #20
 801e674:	781b      	ldrb	r3, [r3, #0]
 801e676:	2b01      	cmp	r3, #1
 801e678:	d925      	bls.n	801e6c6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801e67a:	4b40      	ldr	r3, [pc, #256]	; (801e77c <etharp_output+0x1fc>)
 801e67c:	781b      	ldrb	r3, [r3, #0]
 801e67e:	4619      	mov	r1, r3
 801e680:	4a3f      	ldr	r2, [pc, #252]	; (801e780 <etharp_output+0x200>)
 801e682:	460b      	mov	r3, r1
 801e684:	005b      	lsls	r3, r3, #1
 801e686:	440b      	add	r3, r1
 801e688:	00db      	lsls	r3, r3, #3
 801e68a:	4413      	add	r3, r2
 801e68c:	3308      	adds	r3, #8
 801e68e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801e690:	68fa      	ldr	r2, [r7, #12]
 801e692:	429a      	cmp	r2, r3
 801e694:	d117      	bne.n	801e6c6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801e696:	69bb      	ldr	r3, [r7, #24]
 801e698:	681a      	ldr	r2, [r3, #0]
 801e69a:	4b38      	ldr	r3, [pc, #224]	; (801e77c <etharp_output+0x1fc>)
 801e69c:	781b      	ldrb	r3, [r3, #0]
 801e69e:	4618      	mov	r0, r3
 801e6a0:	4937      	ldr	r1, [pc, #220]	; (801e780 <etharp_output+0x200>)
 801e6a2:	4603      	mov	r3, r0
 801e6a4:	005b      	lsls	r3, r3, #1
 801e6a6:	4403      	add	r3, r0
 801e6a8:	00db      	lsls	r3, r3, #3
 801e6aa:	440b      	add	r3, r1
 801e6ac:	3304      	adds	r3, #4
 801e6ae:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801e6b0:	429a      	cmp	r2, r3
 801e6b2:	d108      	bne.n	801e6c6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801e6b4:	4b31      	ldr	r3, [pc, #196]	; (801e77c <etharp_output+0x1fc>)
 801e6b6:	781b      	ldrb	r3, [r3, #0]
 801e6b8:	461a      	mov	r2, r3
 801e6ba:	68b9      	ldr	r1, [r7, #8]
 801e6bc:	68f8      	ldr	r0, [r7, #12]
 801e6be:	f7ff fec5 	bl	801e44c <etharp_output_to_arp_index>
 801e6c2:	4603      	mov	r3, r0
 801e6c4:	e04a      	b.n	801e75c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801e6c6:	2300      	movs	r3, #0
 801e6c8:	75fb      	strb	r3, [r7, #23]
 801e6ca:	e031      	b.n	801e730 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801e6cc:	7dfa      	ldrb	r2, [r7, #23]
 801e6ce:	492c      	ldr	r1, [pc, #176]	; (801e780 <etharp_output+0x200>)
 801e6d0:	4613      	mov	r3, r2
 801e6d2:	005b      	lsls	r3, r3, #1
 801e6d4:	4413      	add	r3, r2
 801e6d6:	00db      	lsls	r3, r3, #3
 801e6d8:	440b      	add	r3, r1
 801e6da:	3314      	adds	r3, #20
 801e6dc:	781b      	ldrb	r3, [r3, #0]
 801e6de:	2b01      	cmp	r3, #1
 801e6e0:	d923      	bls.n	801e72a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801e6e2:	7dfa      	ldrb	r2, [r7, #23]
 801e6e4:	4926      	ldr	r1, [pc, #152]	; (801e780 <etharp_output+0x200>)
 801e6e6:	4613      	mov	r3, r2
 801e6e8:	005b      	lsls	r3, r3, #1
 801e6ea:	4413      	add	r3, r2
 801e6ec:	00db      	lsls	r3, r3, #3
 801e6ee:	440b      	add	r3, r1
 801e6f0:	3308      	adds	r3, #8
 801e6f2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801e6f4:	68fa      	ldr	r2, [r7, #12]
 801e6f6:	429a      	cmp	r2, r3
 801e6f8:	d117      	bne.n	801e72a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801e6fa:	69bb      	ldr	r3, [r7, #24]
 801e6fc:	6819      	ldr	r1, [r3, #0]
 801e6fe:	7dfa      	ldrb	r2, [r7, #23]
 801e700:	481f      	ldr	r0, [pc, #124]	; (801e780 <etharp_output+0x200>)
 801e702:	4613      	mov	r3, r2
 801e704:	005b      	lsls	r3, r3, #1
 801e706:	4413      	add	r3, r2
 801e708:	00db      	lsls	r3, r3, #3
 801e70a:	4403      	add	r3, r0
 801e70c:	3304      	adds	r3, #4
 801e70e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801e710:	4299      	cmp	r1, r3
 801e712:	d10a      	bne.n	801e72a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801e714:	4a19      	ldr	r2, [pc, #100]	; (801e77c <etharp_output+0x1fc>)
 801e716:	7dfb      	ldrb	r3, [r7, #23]
 801e718:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801e71a:	7dfb      	ldrb	r3, [r7, #23]
 801e71c:	461a      	mov	r2, r3
 801e71e:	68b9      	ldr	r1, [r7, #8]
 801e720:	68f8      	ldr	r0, [r7, #12]
 801e722:	f7ff fe93 	bl	801e44c <etharp_output_to_arp_index>
 801e726:	4603      	mov	r3, r0
 801e728:	e018      	b.n	801e75c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801e72a:	7dfb      	ldrb	r3, [r7, #23]
 801e72c:	3301      	adds	r3, #1
 801e72e:	75fb      	strb	r3, [r7, #23]
 801e730:	7dfb      	ldrb	r3, [r7, #23]
 801e732:	2b09      	cmp	r3, #9
 801e734:	d9ca      	bls.n	801e6cc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801e736:	68ba      	ldr	r2, [r7, #8]
 801e738:	69b9      	ldr	r1, [r7, #24]
 801e73a:	68f8      	ldr	r0, [r7, #12]
 801e73c:	f000 f822 	bl	801e784 <etharp_query>
 801e740:	4603      	mov	r3, r0
 801e742:	e00b      	b.n	801e75c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801e744:	68fb      	ldr	r3, [r7, #12]
 801e746:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801e74a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e74e:	9300      	str	r3, [sp, #0]
 801e750:	69fb      	ldr	r3, [r7, #28]
 801e752:	68b9      	ldr	r1, [r7, #8]
 801e754:	68f8      	ldr	r0, [r7, #12]
 801e756:	f001 fd39 	bl	80201cc <ethernet_output>
 801e75a:	4603      	mov	r3, r0
}
 801e75c:	4618      	mov	r0, r3
 801e75e:	3720      	adds	r7, #32
 801e760:	46bd      	mov	sp, r7
 801e762:	bd80      	pop	{r7, pc}
 801e764:	08023f3c 	.word	0x08023f3c
 801e768:	0802408c 	.word	0x0802408c
 801e76c:	08023fb4 	.word	0x08023fb4
 801e770:	080240dc 	.word	0x080240dc
 801e774:	0802407c 	.word	0x0802407c
 801e778:	08035274 	.word	0x08035274
 801e77c:	2000947c 	.word	0x2000947c
 801e780:	2000938c 	.word	0x2000938c

0801e784 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801e784:	b580      	push	{r7, lr}
 801e786:	b08c      	sub	sp, #48	; 0x30
 801e788:	af02      	add	r7, sp, #8
 801e78a:	60f8      	str	r0, [r7, #12]
 801e78c:	60b9      	str	r1, [r7, #8]
 801e78e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801e790:	68fb      	ldr	r3, [r7, #12]
 801e792:	3326      	adds	r3, #38	; 0x26
 801e794:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801e796:	23ff      	movs	r3, #255	; 0xff
 801e798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801e79c:	2300      	movs	r3, #0
 801e79e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801e7a0:	68bb      	ldr	r3, [r7, #8]
 801e7a2:	681b      	ldr	r3, [r3, #0]
 801e7a4:	68f9      	ldr	r1, [r7, #12]
 801e7a6:	4618      	mov	r0, r3
 801e7a8:	f000 fe0c 	bl	801f3c4 <ip4_addr_isbroadcast_u32>
 801e7ac:	4603      	mov	r3, r0
 801e7ae:	2b00      	cmp	r3, #0
 801e7b0:	d10c      	bne.n	801e7cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801e7b2:	68bb      	ldr	r3, [r7, #8]
 801e7b4:	681b      	ldr	r3, [r3, #0]
 801e7b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801e7ba:	2be0      	cmp	r3, #224	; 0xe0
 801e7bc:	d006      	beq.n	801e7cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801e7be:	68bb      	ldr	r3, [r7, #8]
 801e7c0:	2b00      	cmp	r3, #0
 801e7c2:	d003      	beq.n	801e7cc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801e7c4:	68bb      	ldr	r3, [r7, #8]
 801e7c6:	681b      	ldr	r3, [r3, #0]
 801e7c8:	2b00      	cmp	r3, #0
 801e7ca:	d102      	bne.n	801e7d2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801e7cc:	f06f 030f 	mvn.w	r3, #15
 801e7d0:	e102      	b.n	801e9d8 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801e7d2:	68fa      	ldr	r2, [r7, #12]
 801e7d4:	2101      	movs	r1, #1
 801e7d6:	68b8      	ldr	r0, [r7, #8]
 801e7d8:	f7ff fb60 	bl	801de9c <etharp_find_entry>
 801e7dc:	4603      	mov	r3, r0
 801e7de:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801e7e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801e7e4:	2b00      	cmp	r3, #0
 801e7e6:	da02      	bge.n	801e7ee <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801e7e8:	8a7b      	ldrh	r3, [r7, #18]
 801e7ea:	b25b      	sxtb	r3, r3
 801e7ec:	e0f4      	b.n	801e9d8 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801e7ee:	8a7b      	ldrh	r3, [r7, #18]
 801e7f0:	2b7e      	cmp	r3, #126	; 0x7e
 801e7f2:	d906      	bls.n	801e802 <etharp_query+0x7e>
 801e7f4:	4b7a      	ldr	r3, [pc, #488]	; (801e9e0 <etharp_query+0x25c>)
 801e7f6:	f240 32c1 	movw	r2, #961	; 0x3c1
 801e7fa:	497a      	ldr	r1, [pc, #488]	; (801e9e4 <etharp_query+0x260>)
 801e7fc:	487a      	ldr	r0, [pc, #488]	; (801e9e8 <etharp_query+0x264>)
 801e7fe:	f001 fe89 	bl	8020514 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801e802:	8a7b      	ldrh	r3, [r7, #18]
 801e804:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801e806:	7c7a      	ldrb	r2, [r7, #17]
 801e808:	4978      	ldr	r1, [pc, #480]	; (801e9ec <etharp_query+0x268>)
 801e80a:	4613      	mov	r3, r2
 801e80c:	005b      	lsls	r3, r3, #1
 801e80e:	4413      	add	r3, r2
 801e810:	00db      	lsls	r3, r3, #3
 801e812:	440b      	add	r3, r1
 801e814:	3314      	adds	r3, #20
 801e816:	781b      	ldrb	r3, [r3, #0]
 801e818:	2b00      	cmp	r3, #0
 801e81a:	d115      	bne.n	801e848 <etharp_query+0xc4>
    is_new_entry = 1;
 801e81c:	2301      	movs	r3, #1
 801e81e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801e820:	7c7a      	ldrb	r2, [r7, #17]
 801e822:	4972      	ldr	r1, [pc, #456]	; (801e9ec <etharp_query+0x268>)
 801e824:	4613      	mov	r3, r2
 801e826:	005b      	lsls	r3, r3, #1
 801e828:	4413      	add	r3, r2
 801e82a:	00db      	lsls	r3, r3, #3
 801e82c:	440b      	add	r3, r1
 801e82e:	3314      	adds	r3, #20
 801e830:	2201      	movs	r2, #1
 801e832:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801e834:	7c7a      	ldrb	r2, [r7, #17]
 801e836:	496d      	ldr	r1, [pc, #436]	; (801e9ec <etharp_query+0x268>)
 801e838:	4613      	mov	r3, r2
 801e83a:	005b      	lsls	r3, r3, #1
 801e83c:	4413      	add	r3, r2
 801e83e:	00db      	lsls	r3, r3, #3
 801e840:	440b      	add	r3, r1
 801e842:	3308      	adds	r3, #8
 801e844:	68fa      	ldr	r2, [r7, #12]
 801e846:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801e848:	7c7a      	ldrb	r2, [r7, #17]
 801e84a:	4968      	ldr	r1, [pc, #416]	; (801e9ec <etharp_query+0x268>)
 801e84c:	4613      	mov	r3, r2
 801e84e:	005b      	lsls	r3, r3, #1
 801e850:	4413      	add	r3, r2
 801e852:	00db      	lsls	r3, r3, #3
 801e854:	440b      	add	r3, r1
 801e856:	3314      	adds	r3, #20
 801e858:	781b      	ldrb	r3, [r3, #0]
 801e85a:	2b01      	cmp	r3, #1
 801e85c:	d011      	beq.n	801e882 <etharp_query+0xfe>
 801e85e:	7c7a      	ldrb	r2, [r7, #17]
 801e860:	4962      	ldr	r1, [pc, #392]	; (801e9ec <etharp_query+0x268>)
 801e862:	4613      	mov	r3, r2
 801e864:	005b      	lsls	r3, r3, #1
 801e866:	4413      	add	r3, r2
 801e868:	00db      	lsls	r3, r3, #3
 801e86a:	440b      	add	r3, r1
 801e86c:	3314      	adds	r3, #20
 801e86e:	781b      	ldrb	r3, [r3, #0]
 801e870:	2b01      	cmp	r3, #1
 801e872:	d806      	bhi.n	801e882 <etharp_query+0xfe>
 801e874:	4b5a      	ldr	r3, [pc, #360]	; (801e9e0 <etharp_query+0x25c>)
 801e876:	f240 32cf 	movw	r2, #975	; 0x3cf
 801e87a:	495d      	ldr	r1, [pc, #372]	; (801e9f0 <etharp_query+0x26c>)
 801e87c:	485a      	ldr	r0, [pc, #360]	; (801e9e8 <etharp_query+0x264>)
 801e87e:	f001 fe49 	bl	8020514 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801e882:	6a3b      	ldr	r3, [r7, #32]
 801e884:	2b00      	cmp	r3, #0
 801e886:	d102      	bne.n	801e88e <etharp_query+0x10a>
 801e888:	687b      	ldr	r3, [r7, #4]
 801e88a:	2b00      	cmp	r3, #0
 801e88c:	d10c      	bne.n	801e8a8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801e88e:	68b9      	ldr	r1, [r7, #8]
 801e890:	68f8      	ldr	r0, [r7, #12]
 801e892:	f000 f963 	bl	801eb5c <etharp_request>
 801e896:	4603      	mov	r3, r0
 801e898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801e89c:	687b      	ldr	r3, [r7, #4]
 801e89e:	2b00      	cmp	r3, #0
 801e8a0:	d102      	bne.n	801e8a8 <etharp_query+0x124>
      return result;
 801e8a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801e8a6:	e097      	b.n	801e9d8 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801e8a8:	687b      	ldr	r3, [r7, #4]
 801e8aa:	2b00      	cmp	r3, #0
 801e8ac:	d106      	bne.n	801e8bc <etharp_query+0x138>
 801e8ae:	4b4c      	ldr	r3, [pc, #304]	; (801e9e0 <etharp_query+0x25c>)
 801e8b0:	f240 32e1 	movw	r2, #993	; 0x3e1
 801e8b4:	494f      	ldr	r1, [pc, #316]	; (801e9f4 <etharp_query+0x270>)
 801e8b6:	484c      	ldr	r0, [pc, #304]	; (801e9e8 <etharp_query+0x264>)
 801e8b8:	f001 fe2c 	bl	8020514 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801e8bc:	7c7a      	ldrb	r2, [r7, #17]
 801e8be:	494b      	ldr	r1, [pc, #300]	; (801e9ec <etharp_query+0x268>)
 801e8c0:	4613      	mov	r3, r2
 801e8c2:	005b      	lsls	r3, r3, #1
 801e8c4:	4413      	add	r3, r2
 801e8c6:	00db      	lsls	r3, r3, #3
 801e8c8:	440b      	add	r3, r1
 801e8ca:	3314      	adds	r3, #20
 801e8cc:	781b      	ldrb	r3, [r3, #0]
 801e8ce:	2b01      	cmp	r3, #1
 801e8d0:	d918      	bls.n	801e904 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801e8d2:	4a49      	ldr	r2, [pc, #292]	; (801e9f8 <etharp_query+0x274>)
 801e8d4:	7c7b      	ldrb	r3, [r7, #17]
 801e8d6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801e8d8:	7c7a      	ldrb	r2, [r7, #17]
 801e8da:	4613      	mov	r3, r2
 801e8dc:	005b      	lsls	r3, r3, #1
 801e8de:	4413      	add	r3, r2
 801e8e0:	00db      	lsls	r3, r3, #3
 801e8e2:	3308      	adds	r3, #8
 801e8e4:	4a41      	ldr	r2, [pc, #260]	; (801e9ec <etharp_query+0x268>)
 801e8e6:	4413      	add	r3, r2
 801e8e8:	1d1a      	adds	r2, r3, #4
 801e8ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e8ee:	9300      	str	r3, [sp, #0]
 801e8f0:	4613      	mov	r3, r2
 801e8f2:	697a      	ldr	r2, [r7, #20]
 801e8f4:	6879      	ldr	r1, [r7, #4]
 801e8f6:	68f8      	ldr	r0, [r7, #12]
 801e8f8:	f001 fc68 	bl	80201cc <ethernet_output>
 801e8fc:	4603      	mov	r3, r0
 801e8fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801e902:	e067      	b.n	801e9d4 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801e904:	7c7a      	ldrb	r2, [r7, #17]
 801e906:	4939      	ldr	r1, [pc, #228]	; (801e9ec <etharp_query+0x268>)
 801e908:	4613      	mov	r3, r2
 801e90a:	005b      	lsls	r3, r3, #1
 801e90c:	4413      	add	r3, r2
 801e90e:	00db      	lsls	r3, r3, #3
 801e910:	440b      	add	r3, r1
 801e912:	3314      	adds	r3, #20
 801e914:	781b      	ldrb	r3, [r3, #0]
 801e916:	2b01      	cmp	r3, #1
 801e918:	d15c      	bne.n	801e9d4 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801e91a:	2300      	movs	r3, #0
 801e91c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801e91e:	687b      	ldr	r3, [r7, #4]
 801e920:	61fb      	str	r3, [r7, #28]
    while (p) {
 801e922:	e01c      	b.n	801e95e <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801e924:	69fb      	ldr	r3, [r7, #28]
 801e926:	895a      	ldrh	r2, [r3, #10]
 801e928:	69fb      	ldr	r3, [r7, #28]
 801e92a:	891b      	ldrh	r3, [r3, #8]
 801e92c:	429a      	cmp	r2, r3
 801e92e:	d10a      	bne.n	801e946 <etharp_query+0x1c2>
 801e930:	69fb      	ldr	r3, [r7, #28]
 801e932:	681b      	ldr	r3, [r3, #0]
 801e934:	2b00      	cmp	r3, #0
 801e936:	d006      	beq.n	801e946 <etharp_query+0x1c2>
 801e938:	4b29      	ldr	r3, [pc, #164]	; (801e9e0 <etharp_query+0x25c>)
 801e93a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801e93e:	492f      	ldr	r1, [pc, #188]	; (801e9fc <etharp_query+0x278>)
 801e940:	4829      	ldr	r0, [pc, #164]	; (801e9e8 <etharp_query+0x264>)
 801e942:	f001 fde7 	bl	8020514 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801e946:	69fb      	ldr	r3, [r7, #28]
 801e948:	7b1b      	ldrb	r3, [r3, #12]
 801e94a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e94e:	2b00      	cmp	r3, #0
 801e950:	d002      	beq.n	801e958 <etharp_query+0x1d4>
        copy_needed = 1;
 801e952:	2301      	movs	r3, #1
 801e954:	61bb      	str	r3, [r7, #24]
        break;
 801e956:	e005      	b.n	801e964 <etharp_query+0x1e0>
      }
      p = p->next;
 801e958:	69fb      	ldr	r3, [r7, #28]
 801e95a:	681b      	ldr	r3, [r3, #0]
 801e95c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801e95e:	69fb      	ldr	r3, [r7, #28]
 801e960:	2b00      	cmp	r3, #0
 801e962:	d1df      	bne.n	801e924 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 801e964:	69bb      	ldr	r3, [r7, #24]
 801e966:	2b00      	cmp	r3, #0
 801e968:	d007      	beq.n	801e97a <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801e96a:	687a      	ldr	r2, [r7, #4]
 801e96c:	f44f 7120 	mov.w	r1, #640	; 0x280
 801e970:	200e      	movs	r0, #14
 801e972:	f7f8 fdf1 	bl	8017558 <pbuf_clone>
 801e976:	61f8      	str	r0, [r7, #28]
 801e978:	e004      	b.n	801e984 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801e97a:	687b      	ldr	r3, [r7, #4]
 801e97c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801e97e:	69f8      	ldr	r0, [r7, #28]
 801e980:	f7f8 fc28 	bl	80171d4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801e984:	69fb      	ldr	r3, [r7, #28]
 801e986:	2b00      	cmp	r3, #0
 801e988:	d021      	beq.n	801e9ce <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801e98a:	7c7a      	ldrb	r2, [r7, #17]
 801e98c:	4917      	ldr	r1, [pc, #92]	; (801e9ec <etharp_query+0x268>)
 801e98e:	4613      	mov	r3, r2
 801e990:	005b      	lsls	r3, r3, #1
 801e992:	4413      	add	r3, r2
 801e994:	00db      	lsls	r3, r3, #3
 801e996:	440b      	add	r3, r1
 801e998:	681b      	ldr	r3, [r3, #0]
 801e99a:	2b00      	cmp	r3, #0
 801e99c:	d00a      	beq.n	801e9b4 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801e99e:	7c7a      	ldrb	r2, [r7, #17]
 801e9a0:	4912      	ldr	r1, [pc, #72]	; (801e9ec <etharp_query+0x268>)
 801e9a2:	4613      	mov	r3, r2
 801e9a4:	005b      	lsls	r3, r3, #1
 801e9a6:	4413      	add	r3, r2
 801e9a8:	00db      	lsls	r3, r3, #3
 801e9aa:	440b      	add	r3, r1
 801e9ac:	681b      	ldr	r3, [r3, #0]
 801e9ae:	4618      	mov	r0, r3
 801e9b0:	f7f8 fb6a 	bl	8017088 <pbuf_free>
      }
      arp_table[i].q = p;
 801e9b4:	7c7a      	ldrb	r2, [r7, #17]
 801e9b6:	490d      	ldr	r1, [pc, #52]	; (801e9ec <etharp_query+0x268>)
 801e9b8:	4613      	mov	r3, r2
 801e9ba:	005b      	lsls	r3, r3, #1
 801e9bc:	4413      	add	r3, r2
 801e9be:	00db      	lsls	r3, r3, #3
 801e9c0:	440b      	add	r3, r1
 801e9c2:	69fa      	ldr	r2, [r7, #28]
 801e9c4:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801e9c6:	2300      	movs	r3, #0
 801e9c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801e9cc:	e002      	b.n	801e9d4 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801e9ce:	23ff      	movs	r3, #255	; 0xff
 801e9d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801e9d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801e9d8:	4618      	mov	r0, r3
 801e9da:	3728      	adds	r7, #40	; 0x28
 801e9dc:	46bd      	mov	sp, r7
 801e9de:	bd80      	pop	{r7, pc}
 801e9e0:	08023f3c 	.word	0x08023f3c
 801e9e4:	080240e8 	.word	0x080240e8
 801e9e8:	08023fb4 	.word	0x08023fb4
 801e9ec:	2000938c 	.word	0x2000938c
 801e9f0:	080240f8 	.word	0x080240f8
 801e9f4:	080240dc 	.word	0x080240dc
 801e9f8:	2000947c 	.word	0x2000947c
 801e9fc:	08024120 	.word	0x08024120

0801ea00 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801ea00:	b580      	push	{r7, lr}
 801ea02:	b08a      	sub	sp, #40	; 0x28
 801ea04:	af02      	add	r7, sp, #8
 801ea06:	60f8      	str	r0, [r7, #12]
 801ea08:	60b9      	str	r1, [r7, #8]
 801ea0a:	607a      	str	r2, [r7, #4]
 801ea0c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801ea0e:	2300      	movs	r3, #0
 801ea10:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ea12:	68fb      	ldr	r3, [r7, #12]
 801ea14:	2b00      	cmp	r3, #0
 801ea16:	d106      	bne.n	801ea26 <etharp_raw+0x26>
 801ea18:	4b3a      	ldr	r3, [pc, #232]	; (801eb04 <etharp_raw+0x104>)
 801ea1a:	f240 4257 	movw	r2, #1111	; 0x457
 801ea1e:	493a      	ldr	r1, [pc, #232]	; (801eb08 <etharp_raw+0x108>)
 801ea20:	483a      	ldr	r0, [pc, #232]	; (801eb0c <etharp_raw+0x10c>)
 801ea22:	f001 fd77 	bl	8020514 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801ea26:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ea2a:	211c      	movs	r1, #28
 801ea2c:	200e      	movs	r0, #14
 801ea2e:	f7f8 f84b 	bl	8016ac8 <pbuf_alloc>
 801ea32:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801ea34:	69bb      	ldr	r3, [r7, #24]
 801ea36:	2b00      	cmp	r3, #0
 801ea38:	d102      	bne.n	801ea40 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801ea3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ea3e:	e05d      	b.n	801eafc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801ea40:	69bb      	ldr	r3, [r7, #24]
 801ea42:	895b      	ldrh	r3, [r3, #10]
 801ea44:	2b1b      	cmp	r3, #27
 801ea46:	d806      	bhi.n	801ea56 <etharp_raw+0x56>
 801ea48:	4b2e      	ldr	r3, [pc, #184]	; (801eb04 <etharp_raw+0x104>)
 801ea4a:	f240 4263 	movw	r2, #1123	; 0x463
 801ea4e:	4930      	ldr	r1, [pc, #192]	; (801eb10 <etharp_raw+0x110>)
 801ea50:	482e      	ldr	r0, [pc, #184]	; (801eb0c <etharp_raw+0x10c>)
 801ea52:	f001 fd5f 	bl	8020514 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801ea56:	69bb      	ldr	r3, [r7, #24]
 801ea58:	685b      	ldr	r3, [r3, #4]
 801ea5a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801ea5c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801ea5e:	4618      	mov	r0, r3
 801ea60:	f7f6 ff34 	bl	80158cc <lwip_htons>
 801ea64:	4603      	mov	r3, r0
 801ea66:	461a      	mov	r2, r3
 801ea68:	697b      	ldr	r3, [r7, #20]
 801ea6a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801ea6c:	68fb      	ldr	r3, [r7, #12]
 801ea6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801ea72:	2b06      	cmp	r3, #6
 801ea74:	d006      	beq.n	801ea84 <etharp_raw+0x84>
 801ea76:	4b23      	ldr	r3, [pc, #140]	; (801eb04 <etharp_raw+0x104>)
 801ea78:	f240 426a 	movw	r2, #1130	; 0x46a
 801ea7c:	4925      	ldr	r1, [pc, #148]	; (801eb14 <etharp_raw+0x114>)
 801ea7e:	4823      	ldr	r0, [pc, #140]	; (801eb0c <etharp_raw+0x10c>)
 801ea80:	f001 fd48 	bl	8020514 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801ea84:	697b      	ldr	r3, [r7, #20]
 801ea86:	3308      	adds	r3, #8
 801ea88:	2206      	movs	r2, #6
 801ea8a:	6839      	ldr	r1, [r7, #0]
 801ea8c:	4618      	mov	r0, r3
 801ea8e:	f001 fd2e 	bl	80204ee <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801ea92:	697b      	ldr	r3, [r7, #20]
 801ea94:	3312      	adds	r3, #18
 801ea96:	2206      	movs	r2, #6
 801ea98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ea9a:	4618      	mov	r0, r3
 801ea9c:	f001 fd27 	bl	80204ee <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801eaa0:	697b      	ldr	r3, [r7, #20]
 801eaa2:	330e      	adds	r3, #14
 801eaa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801eaa6:	6812      	ldr	r2, [r2, #0]
 801eaa8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801eaaa:	697b      	ldr	r3, [r7, #20]
 801eaac:	3318      	adds	r3, #24
 801eaae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801eab0:	6812      	ldr	r2, [r2, #0]
 801eab2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801eab4:	697b      	ldr	r3, [r7, #20]
 801eab6:	2200      	movs	r2, #0
 801eab8:	701a      	strb	r2, [r3, #0]
 801eaba:	2200      	movs	r2, #0
 801eabc:	f042 0201 	orr.w	r2, r2, #1
 801eac0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801eac2:	697b      	ldr	r3, [r7, #20]
 801eac4:	2200      	movs	r2, #0
 801eac6:	f042 0208 	orr.w	r2, r2, #8
 801eaca:	709a      	strb	r2, [r3, #2]
 801eacc:	2200      	movs	r2, #0
 801eace:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801ead0:	697b      	ldr	r3, [r7, #20]
 801ead2:	2206      	movs	r2, #6
 801ead4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801ead6:	697b      	ldr	r3, [r7, #20]
 801ead8:	2204      	movs	r2, #4
 801eada:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801eadc:	f640 0306 	movw	r3, #2054	; 0x806
 801eae0:	9300      	str	r3, [sp, #0]
 801eae2:	687b      	ldr	r3, [r7, #4]
 801eae4:	68ba      	ldr	r2, [r7, #8]
 801eae6:	69b9      	ldr	r1, [r7, #24]
 801eae8:	68f8      	ldr	r0, [r7, #12]
 801eaea:	f001 fb6f 	bl	80201cc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801eaee:	69b8      	ldr	r0, [r7, #24]
 801eaf0:	f7f8 faca 	bl	8017088 <pbuf_free>
  p = NULL;
 801eaf4:	2300      	movs	r3, #0
 801eaf6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801eaf8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801eafc:	4618      	mov	r0, r3
 801eafe:	3720      	adds	r7, #32
 801eb00:	46bd      	mov	sp, r7
 801eb02:	bd80      	pop	{r7, pc}
 801eb04:	08023f3c 	.word	0x08023f3c
 801eb08:	0802408c 	.word	0x0802408c
 801eb0c:	08023fb4 	.word	0x08023fb4
 801eb10:	0802413c 	.word	0x0802413c
 801eb14:	08024170 	.word	0x08024170

0801eb18 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801eb18:	b580      	push	{r7, lr}
 801eb1a:	b088      	sub	sp, #32
 801eb1c:	af04      	add	r7, sp, #16
 801eb1e:	60f8      	str	r0, [r7, #12]
 801eb20:	60b9      	str	r1, [r7, #8]
 801eb22:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801eb24:	68fb      	ldr	r3, [r7, #12]
 801eb26:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801eb2a:	68fb      	ldr	r3, [r7, #12]
 801eb2c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801eb30:	68fb      	ldr	r3, [r7, #12]
 801eb32:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801eb34:	2201      	movs	r2, #1
 801eb36:	9203      	str	r2, [sp, #12]
 801eb38:	68ba      	ldr	r2, [r7, #8]
 801eb3a:	9202      	str	r2, [sp, #8]
 801eb3c:	4a06      	ldr	r2, [pc, #24]	; (801eb58 <etharp_request_dst+0x40>)
 801eb3e:	9201      	str	r2, [sp, #4]
 801eb40:	9300      	str	r3, [sp, #0]
 801eb42:	4603      	mov	r3, r0
 801eb44:	687a      	ldr	r2, [r7, #4]
 801eb46:	68f8      	ldr	r0, [r7, #12]
 801eb48:	f7ff ff5a 	bl	801ea00 <etharp_raw>
 801eb4c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801eb4e:	4618      	mov	r0, r3
 801eb50:	3710      	adds	r7, #16
 801eb52:	46bd      	mov	sp, r7
 801eb54:	bd80      	pop	{r7, pc}
 801eb56:	bf00      	nop
 801eb58:	0803527c 	.word	0x0803527c

0801eb5c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801eb5c:	b580      	push	{r7, lr}
 801eb5e:	b082      	sub	sp, #8
 801eb60:	af00      	add	r7, sp, #0
 801eb62:	6078      	str	r0, [r7, #4]
 801eb64:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801eb66:	4a05      	ldr	r2, [pc, #20]	; (801eb7c <etharp_request+0x20>)
 801eb68:	6839      	ldr	r1, [r7, #0]
 801eb6a:	6878      	ldr	r0, [r7, #4]
 801eb6c:	f7ff ffd4 	bl	801eb18 <etharp_request_dst>
 801eb70:	4603      	mov	r3, r0
}
 801eb72:	4618      	mov	r0, r3
 801eb74:	3708      	adds	r7, #8
 801eb76:	46bd      	mov	sp, r7
 801eb78:	bd80      	pop	{r7, pc}
 801eb7a:	bf00      	nop
 801eb7c:	08035274 	.word	0x08035274

0801eb80 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801eb80:	b580      	push	{r7, lr}
 801eb82:	b08e      	sub	sp, #56	; 0x38
 801eb84:	af04      	add	r7, sp, #16
 801eb86:	6078      	str	r0, [r7, #4]
 801eb88:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801eb8a:	4b79      	ldr	r3, [pc, #484]	; (801ed70 <icmp_input+0x1f0>)
 801eb8c:	689b      	ldr	r3, [r3, #8]
 801eb8e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801eb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb92:	781b      	ldrb	r3, [r3, #0]
 801eb94:	f003 030f 	and.w	r3, r3, #15
 801eb98:	b2db      	uxtb	r3, r3
 801eb9a:	009b      	lsls	r3, r3, #2
 801eb9c:	b2db      	uxtb	r3, r3
 801eb9e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801eba0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801eba2:	2b13      	cmp	r3, #19
 801eba4:	f240 80cd 	bls.w	801ed42 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	895b      	ldrh	r3, [r3, #10]
 801ebac:	2b03      	cmp	r3, #3
 801ebae:	f240 80ca 	bls.w	801ed46 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801ebb2:	687b      	ldr	r3, [r7, #4]
 801ebb4:	685b      	ldr	r3, [r3, #4]
 801ebb6:	781b      	ldrb	r3, [r3, #0]
 801ebb8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801ebbc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801ebc0:	2b00      	cmp	r3, #0
 801ebc2:	f000 80b7 	beq.w	801ed34 <icmp_input+0x1b4>
 801ebc6:	2b08      	cmp	r3, #8
 801ebc8:	f040 80b7 	bne.w	801ed3a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801ebcc:	4b69      	ldr	r3, [pc, #420]	; (801ed74 <icmp_input+0x1f4>)
 801ebce:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ebd0:	4b67      	ldr	r3, [pc, #412]	; (801ed70 <icmp_input+0x1f0>)
 801ebd2:	695b      	ldr	r3, [r3, #20]
 801ebd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ebd8:	2be0      	cmp	r3, #224	; 0xe0
 801ebda:	f000 80bb 	beq.w	801ed54 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801ebde:	4b64      	ldr	r3, [pc, #400]	; (801ed70 <icmp_input+0x1f0>)
 801ebe0:	695a      	ldr	r2, [r3, #20]
 801ebe2:	4b63      	ldr	r3, [pc, #396]	; (801ed70 <icmp_input+0x1f0>)
 801ebe4:	681b      	ldr	r3, [r3, #0]
 801ebe6:	4619      	mov	r1, r3
 801ebe8:	4610      	mov	r0, r2
 801ebea:	f000 fbeb 	bl	801f3c4 <ip4_addr_isbroadcast_u32>
 801ebee:	4603      	mov	r3, r0
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	f040 80b1 	bne.w	801ed58 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801ebf6:	687b      	ldr	r3, [r7, #4]
 801ebf8:	891b      	ldrh	r3, [r3, #8]
 801ebfa:	2b07      	cmp	r3, #7
 801ebfc:	f240 80a5 	bls.w	801ed4a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ec00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ec02:	330e      	adds	r3, #14
 801ec04:	4619      	mov	r1, r3
 801ec06:	6878      	ldr	r0, [r7, #4]
 801ec08:	f7f8 f9a8 	bl	8016f5c <pbuf_add_header>
 801ec0c:	4603      	mov	r3, r0
 801ec0e:	2b00      	cmp	r3, #0
 801ec10:	d04b      	beq.n	801ecaa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801ec12:	687b      	ldr	r3, [r7, #4]
 801ec14:	891a      	ldrh	r2, [r3, #8]
 801ec16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ec18:	4413      	add	r3, r2
 801ec1a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801ec1c:	687b      	ldr	r3, [r7, #4]
 801ec1e:	891b      	ldrh	r3, [r3, #8]
 801ec20:	8b7a      	ldrh	r2, [r7, #26]
 801ec22:	429a      	cmp	r2, r3
 801ec24:	f0c0 809a 	bcc.w	801ed5c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801ec28:	8b7b      	ldrh	r3, [r7, #26]
 801ec2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ec2e:	4619      	mov	r1, r3
 801ec30:	200e      	movs	r0, #14
 801ec32:	f7f7 ff49 	bl	8016ac8 <pbuf_alloc>
 801ec36:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801ec38:	697b      	ldr	r3, [r7, #20]
 801ec3a:	2b00      	cmp	r3, #0
 801ec3c:	f000 8090 	beq.w	801ed60 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801ec40:	697b      	ldr	r3, [r7, #20]
 801ec42:	895b      	ldrh	r3, [r3, #10]
 801ec44:	461a      	mov	r2, r3
 801ec46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ec48:	3308      	adds	r3, #8
 801ec4a:	429a      	cmp	r2, r3
 801ec4c:	d203      	bcs.n	801ec56 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801ec4e:	6978      	ldr	r0, [r7, #20]
 801ec50:	f7f8 fa1a 	bl	8017088 <pbuf_free>
          goto icmperr;
 801ec54:	e085      	b.n	801ed62 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801ec56:	697b      	ldr	r3, [r7, #20]
 801ec58:	685b      	ldr	r3, [r3, #4]
 801ec5a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ec5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ec5e:	4618      	mov	r0, r3
 801ec60:	f001 fc45 	bl	80204ee <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801ec64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ec66:	4619      	mov	r1, r3
 801ec68:	6978      	ldr	r0, [r7, #20]
 801ec6a:	f7f8 f987 	bl	8016f7c <pbuf_remove_header>
 801ec6e:	4603      	mov	r3, r0
 801ec70:	2b00      	cmp	r3, #0
 801ec72:	d009      	beq.n	801ec88 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801ec74:	4b40      	ldr	r3, [pc, #256]	; (801ed78 <icmp_input+0x1f8>)
 801ec76:	22b6      	movs	r2, #182	; 0xb6
 801ec78:	4940      	ldr	r1, [pc, #256]	; (801ed7c <icmp_input+0x1fc>)
 801ec7a:	4841      	ldr	r0, [pc, #260]	; (801ed80 <icmp_input+0x200>)
 801ec7c:	f001 fc4a 	bl	8020514 <iprintf>
          pbuf_free(r);
 801ec80:	6978      	ldr	r0, [r7, #20]
 801ec82:	f7f8 fa01 	bl	8017088 <pbuf_free>
          goto icmperr;
 801ec86:	e06c      	b.n	801ed62 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801ec88:	6879      	ldr	r1, [r7, #4]
 801ec8a:	6978      	ldr	r0, [r7, #20]
 801ec8c:	f7f8 fb20 	bl	80172d0 <pbuf_copy>
 801ec90:	4603      	mov	r3, r0
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	d003      	beq.n	801ec9e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801ec96:	6978      	ldr	r0, [r7, #20]
 801ec98:	f7f8 f9f6 	bl	8017088 <pbuf_free>
          goto icmperr;
 801ec9c:	e061      	b.n	801ed62 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801ec9e:	6878      	ldr	r0, [r7, #4]
 801eca0:	f7f8 f9f2 	bl	8017088 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801eca4:	697b      	ldr	r3, [r7, #20]
 801eca6:	607b      	str	r3, [r7, #4]
 801eca8:	e00f      	b.n	801ecca <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ecaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ecac:	330e      	adds	r3, #14
 801ecae:	4619      	mov	r1, r3
 801ecb0:	6878      	ldr	r0, [r7, #4]
 801ecb2:	f7f8 f963 	bl	8016f7c <pbuf_remove_header>
 801ecb6:	4603      	mov	r3, r0
 801ecb8:	2b00      	cmp	r3, #0
 801ecba:	d006      	beq.n	801ecca <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801ecbc:	4b2e      	ldr	r3, [pc, #184]	; (801ed78 <icmp_input+0x1f8>)
 801ecbe:	22c7      	movs	r2, #199	; 0xc7
 801ecc0:	4930      	ldr	r1, [pc, #192]	; (801ed84 <icmp_input+0x204>)
 801ecc2:	482f      	ldr	r0, [pc, #188]	; (801ed80 <icmp_input+0x200>)
 801ecc4:	f001 fc26 	bl	8020514 <iprintf>
          goto icmperr;
 801ecc8:	e04b      	b.n	801ed62 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801ecca:	687b      	ldr	r3, [r7, #4]
 801eccc:	685b      	ldr	r3, [r3, #4]
 801ecce:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801ecd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ecd2:	4619      	mov	r1, r3
 801ecd4:	6878      	ldr	r0, [r7, #4]
 801ecd6:	f7f8 f941 	bl	8016f5c <pbuf_add_header>
 801ecda:	4603      	mov	r3, r0
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	d12b      	bne.n	801ed38 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801ece0:	687b      	ldr	r3, [r7, #4]
 801ece2:	685b      	ldr	r3, [r3, #4]
 801ece4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801ece6:	69fb      	ldr	r3, [r7, #28]
 801ece8:	681a      	ldr	r2, [r3, #0]
 801ecea:	68fb      	ldr	r3, [r7, #12]
 801ecec:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801ecee:	4b20      	ldr	r3, [pc, #128]	; (801ed70 <icmp_input+0x1f0>)
 801ecf0:	691a      	ldr	r2, [r3, #16]
 801ecf2:	68fb      	ldr	r3, [r7, #12]
 801ecf4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801ecf6:	693b      	ldr	r3, [r7, #16]
 801ecf8:	2200      	movs	r2, #0
 801ecfa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801ecfc:	693b      	ldr	r3, [r7, #16]
 801ecfe:	2200      	movs	r2, #0
 801ed00:	709a      	strb	r2, [r3, #2]
 801ed02:	2200      	movs	r2, #0
 801ed04:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801ed06:	68fb      	ldr	r3, [r7, #12]
 801ed08:	22ff      	movs	r2, #255	; 0xff
 801ed0a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801ed0c:	68fb      	ldr	r3, [r7, #12]
 801ed0e:	2200      	movs	r2, #0
 801ed10:	729a      	strb	r2, [r3, #10]
 801ed12:	2200      	movs	r2, #0
 801ed14:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801ed16:	683b      	ldr	r3, [r7, #0]
 801ed18:	9302      	str	r3, [sp, #8]
 801ed1a:	2301      	movs	r3, #1
 801ed1c:	9301      	str	r3, [sp, #4]
 801ed1e:	2300      	movs	r3, #0
 801ed20:	9300      	str	r3, [sp, #0]
 801ed22:	23ff      	movs	r3, #255	; 0xff
 801ed24:	2200      	movs	r2, #0
 801ed26:	69f9      	ldr	r1, [r7, #28]
 801ed28:	6878      	ldr	r0, [r7, #4]
 801ed2a:	f000 fa73 	bl	801f214 <ip4_output_if>
 801ed2e:	4603      	mov	r3, r0
 801ed30:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801ed32:	e001      	b.n	801ed38 <icmp_input+0x1b8>
      break;
 801ed34:	bf00      	nop
 801ed36:	e000      	b.n	801ed3a <icmp_input+0x1ba>
      break;
 801ed38:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801ed3a:	6878      	ldr	r0, [r7, #4]
 801ed3c:	f7f8 f9a4 	bl	8017088 <pbuf_free>
  return;
 801ed40:	e013      	b.n	801ed6a <icmp_input+0x1ea>
    goto lenerr;
 801ed42:	bf00      	nop
 801ed44:	e002      	b.n	801ed4c <icmp_input+0x1cc>
    goto lenerr;
 801ed46:	bf00      	nop
 801ed48:	e000      	b.n	801ed4c <icmp_input+0x1cc>
        goto lenerr;
 801ed4a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801ed4c:	6878      	ldr	r0, [r7, #4]
 801ed4e:	f7f8 f99b 	bl	8017088 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801ed52:	e00a      	b.n	801ed6a <icmp_input+0x1ea>
        goto icmperr;
 801ed54:	bf00      	nop
 801ed56:	e004      	b.n	801ed62 <icmp_input+0x1e2>
        goto icmperr;
 801ed58:	bf00      	nop
 801ed5a:	e002      	b.n	801ed62 <icmp_input+0x1e2>
          goto icmperr;
 801ed5c:	bf00      	nop
 801ed5e:	e000      	b.n	801ed62 <icmp_input+0x1e2>
          goto icmperr;
 801ed60:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801ed62:	6878      	ldr	r0, [r7, #4]
 801ed64:	f7f8 f990 	bl	8017088 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801ed68:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801ed6a:	3728      	adds	r7, #40	; 0x28
 801ed6c:	46bd      	mov	sp, r7
 801ed6e:	bd80      	pop	{r7, pc}
 801ed70:	2001c7dc 	.word	0x2001c7dc
 801ed74:	2001c7f0 	.word	0x2001c7f0
 801ed78:	080241b4 	.word	0x080241b4
 801ed7c:	080241ec 	.word	0x080241ec
 801ed80:	08024224 	.word	0x08024224
 801ed84:	0802424c 	.word	0x0802424c

0801ed88 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801ed88:	b580      	push	{r7, lr}
 801ed8a:	b082      	sub	sp, #8
 801ed8c:	af00      	add	r7, sp, #0
 801ed8e:	6078      	str	r0, [r7, #4]
 801ed90:	460b      	mov	r3, r1
 801ed92:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801ed94:	78fb      	ldrb	r3, [r7, #3]
 801ed96:	461a      	mov	r2, r3
 801ed98:	2103      	movs	r1, #3
 801ed9a:	6878      	ldr	r0, [r7, #4]
 801ed9c:	f000 f814 	bl	801edc8 <icmp_send_response>
}
 801eda0:	bf00      	nop
 801eda2:	3708      	adds	r7, #8
 801eda4:	46bd      	mov	sp, r7
 801eda6:	bd80      	pop	{r7, pc}

0801eda8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801eda8:	b580      	push	{r7, lr}
 801edaa:	b082      	sub	sp, #8
 801edac:	af00      	add	r7, sp, #0
 801edae:	6078      	str	r0, [r7, #4]
 801edb0:	460b      	mov	r3, r1
 801edb2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801edb4:	78fb      	ldrb	r3, [r7, #3]
 801edb6:	461a      	mov	r2, r3
 801edb8:	210b      	movs	r1, #11
 801edba:	6878      	ldr	r0, [r7, #4]
 801edbc:	f000 f804 	bl	801edc8 <icmp_send_response>
}
 801edc0:	bf00      	nop
 801edc2:	3708      	adds	r7, #8
 801edc4:	46bd      	mov	sp, r7
 801edc6:	bd80      	pop	{r7, pc}

0801edc8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801edc8:	b580      	push	{r7, lr}
 801edca:	b08c      	sub	sp, #48	; 0x30
 801edcc:	af04      	add	r7, sp, #16
 801edce:	6078      	str	r0, [r7, #4]
 801edd0:	460b      	mov	r3, r1
 801edd2:	70fb      	strb	r3, [r7, #3]
 801edd4:	4613      	mov	r3, r2
 801edd6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801edd8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801eddc:	2124      	movs	r1, #36	; 0x24
 801edde:	2022      	movs	r0, #34	; 0x22
 801ede0:	f7f7 fe72 	bl	8016ac8 <pbuf_alloc>
 801ede4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801ede6:	69fb      	ldr	r3, [r7, #28]
 801ede8:	2b00      	cmp	r3, #0
 801edea:	d04c      	beq.n	801ee86 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801edec:	69fb      	ldr	r3, [r7, #28]
 801edee:	895b      	ldrh	r3, [r3, #10]
 801edf0:	2b23      	cmp	r3, #35	; 0x23
 801edf2:	d806      	bhi.n	801ee02 <icmp_send_response+0x3a>
 801edf4:	4b26      	ldr	r3, [pc, #152]	; (801ee90 <icmp_send_response+0xc8>)
 801edf6:	f240 1269 	movw	r2, #361	; 0x169
 801edfa:	4926      	ldr	r1, [pc, #152]	; (801ee94 <icmp_send_response+0xcc>)
 801edfc:	4826      	ldr	r0, [pc, #152]	; (801ee98 <icmp_send_response+0xd0>)
 801edfe:	f001 fb89 	bl	8020514 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801ee02:	687b      	ldr	r3, [r7, #4]
 801ee04:	685b      	ldr	r3, [r3, #4]
 801ee06:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801ee08:	69fb      	ldr	r3, [r7, #28]
 801ee0a:	685b      	ldr	r3, [r3, #4]
 801ee0c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801ee0e:	697b      	ldr	r3, [r7, #20]
 801ee10:	78fa      	ldrb	r2, [r7, #3]
 801ee12:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801ee14:	697b      	ldr	r3, [r7, #20]
 801ee16:	78ba      	ldrb	r2, [r7, #2]
 801ee18:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801ee1a:	697b      	ldr	r3, [r7, #20]
 801ee1c:	2200      	movs	r2, #0
 801ee1e:	711a      	strb	r2, [r3, #4]
 801ee20:	2200      	movs	r2, #0
 801ee22:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801ee24:	697b      	ldr	r3, [r7, #20]
 801ee26:	2200      	movs	r2, #0
 801ee28:	719a      	strb	r2, [r3, #6]
 801ee2a:	2200      	movs	r2, #0
 801ee2c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801ee2e:	69fb      	ldr	r3, [r7, #28]
 801ee30:	685b      	ldr	r3, [r3, #4]
 801ee32:	f103 0008 	add.w	r0, r3, #8
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	685b      	ldr	r3, [r3, #4]
 801ee3a:	221c      	movs	r2, #28
 801ee3c:	4619      	mov	r1, r3
 801ee3e:	f001 fb56 	bl	80204ee <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801ee42:	69bb      	ldr	r3, [r7, #24]
 801ee44:	68db      	ldr	r3, [r3, #12]
 801ee46:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801ee48:	f107 030c 	add.w	r3, r7, #12
 801ee4c:	4618      	mov	r0, r3
 801ee4e:	f000 f825 	bl	801ee9c <ip4_route>
 801ee52:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801ee54:	693b      	ldr	r3, [r7, #16]
 801ee56:	2b00      	cmp	r3, #0
 801ee58:	d011      	beq.n	801ee7e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801ee5a:	697b      	ldr	r3, [r7, #20]
 801ee5c:	2200      	movs	r2, #0
 801ee5e:	709a      	strb	r2, [r3, #2]
 801ee60:	2200      	movs	r2, #0
 801ee62:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801ee64:	f107 020c 	add.w	r2, r7, #12
 801ee68:	693b      	ldr	r3, [r7, #16]
 801ee6a:	9302      	str	r3, [sp, #8]
 801ee6c:	2301      	movs	r3, #1
 801ee6e:	9301      	str	r3, [sp, #4]
 801ee70:	2300      	movs	r3, #0
 801ee72:	9300      	str	r3, [sp, #0]
 801ee74:	23ff      	movs	r3, #255	; 0xff
 801ee76:	2100      	movs	r1, #0
 801ee78:	69f8      	ldr	r0, [r7, #28]
 801ee7a:	f000 f9cb 	bl	801f214 <ip4_output_if>
  }
  pbuf_free(q);
 801ee7e:	69f8      	ldr	r0, [r7, #28]
 801ee80:	f7f8 f902 	bl	8017088 <pbuf_free>
 801ee84:	e000      	b.n	801ee88 <icmp_send_response+0xc0>
    return;
 801ee86:	bf00      	nop
}
 801ee88:	3720      	adds	r7, #32
 801ee8a:	46bd      	mov	sp, r7
 801ee8c:	bd80      	pop	{r7, pc}
 801ee8e:	bf00      	nop
 801ee90:	080241b4 	.word	0x080241b4
 801ee94:	08024280 	.word	0x08024280
 801ee98:	08024224 	.word	0x08024224

0801ee9c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801ee9c:	b480      	push	{r7}
 801ee9e:	b085      	sub	sp, #20
 801eea0:	af00      	add	r7, sp, #0
 801eea2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801eea4:	4b33      	ldr	r3, [pc, #204]	; (801ef74 <ip4_route+0xd8>)
 801eea6:	681b      	ldr	r3, [r3, #0]
 801eea8:	60fb      	str	r3, [r7, #12]
 801eeaa:	e036      	b.n	801ef1a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801eeac:	68fb      	ldr	r3, [r7, #12]
 801eeae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801eeb2:	f003 0301 	and.w	r3, r3, #1
 801eeb6:	b2db      	uxtb	r3, r3
 801eeb8:	2b00      	cmp	r3, #0
 801eeba:	d02b      	beq.n	801ef14 <ip4_route+0x78>
 801eebc:	68fb      	ldr	r3, [r7, #12]
 801eebe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801eec2:	089b      	lsrs	r3, r3, #2
 801eec4:	f003 0301 	and.w	r3, r3, #1
 801eec8:	b2db      	uxtb	r3, r3
 801eeca:	2b00      	cmp	r3, #0
 801eecc:	d022      	beq.n	801ef14 <ip4_route+0x78>
 801eece:	68fb      	ldr	r3, [r7, #12]
 801eed0:	3304      	adds	r3, #4
 801eed2:	681b      	ldr	r3, [r3, #0]
 801eed4:	2b00      	cmp	r3, #0
 801eed6:	d01d      	beq.n	801ef14 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801eed8:	687b      	ldr	r3, [r7, #4]
 801eeda:	681a      	ldr	r2, [r3, #0]
 801eedc:	68fb      	ldr	r3, [r7, #12]
 801eede:	3304      	adds	r3, #4
 801eee0:	681b      	ldr	r3, [r3, #0]
 801eee2:	405a      	eors	r2, r3
 801eee4:	68fb      	ldr	r3, [r7, #12]
 801eee6:	3308      	adds	r3, #8
 801eee8:	681b      	ldr	r3, [r3, #0]
 801eeea:	4013      	ands	r3, r2
 801eeec:	2b00      	cmp	r3, #0
 801eeee:	d101      	bne.n	801eef4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801eef0:	68fb      	ldr	r3, [r7, #12]
 801eef2:	e038      	b.n	801ef66 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801eef4:	68fb      	ldr	r3, [r7, #12]
 801eef6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801eefa:	f003 0302 	and.w	r3, r3, #2
 801eefe:	2b00      	cmp	r3, #0
 801ef00:	d108      	bne.n	801ef14 <ip4_route+0x78>
 801ef02:	687b      	ldr	r3, [r7, #4]
 801ef04:	681a      	ldr	r2, [r3, #0]
 801ef06:	68fb      	ldr	r3, [r7, #12]
 801ef08:	330c      	adds	r3, #12
 801ef0a:	681b      	ldr	r3, [r3, #0]
 801ef0c:	429a      	cmp	r2, r3
 801ef0e:	d101      	bne.n	801ef14 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801ef10:	68fb      	ldr	r3, [r7, #12]
 801ef12:	e028      	b.n	801ef66 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801ef14:	68fb      	ldr	r3, [r7, #12]
 801ef16:	681b      	ldr	r3, [r3, #0]
 801ef18:	60fb      	str	r3, [r7, #12]
 801ef1a:	68fb      	ldr	r3, [r7, #12]
 801ef1c:	2b00      	cmp	r3, #0
 801ef1e:	d1c5      	bne.n	801eeac <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ef20:	4b15      	ldr	r3, [pc, #84]	; (801ef78 <ip4_route+0xdc>)
 801ef22:	681b      	ldr	r3, [r3, #0]
 801ef24:	2b00      	cmp	r3, #0
 801ef26:	d01a      	beq.n	801ef5e <ip4_route+0xc2>
 801ef28:	4b13      	ldr	r3, [pc, #76]	; (801ef78 <ip4_route+0xdc>)
 801ef2a:	681b      	ldr	r3, [r3, #0]
 801ef2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ef30:	f003 0301 	and.w	r3, r3, #1
 801ef34:	2b00      	cmp	r3, #0
 801ef36:	d012      	beq.n	801ef5e <ip4_route+0xc2>
 801ef38:	4b0f      	ldr	r3, [pc, #60]	; (801ef78 <ip4_route+0xdc>)
 801ef3a:	681b      	ldr	r3, [r3, #0]
 801ef3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ef40:	f003 0304 	and.w	r3, r3, #4
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	d00a      	beq.n	801ef5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ef48:	4b0b      	ldr	r3, [pc, #44]	; (801ef78 <ip4_route+0xdc>)
 801ef4a:	681b      	ldr	r3, [r3, #0]
 801ef4c:	3304      	adds	r3, #4
 801ef4e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ef50:	2b00      	cmp	r3, #0
 801ef52:	d004      	beq.n	801ef5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ef54:	687b      	ldr	r3, [r7, #4]
 801ef56:	681b      	ldr	r3, [r3, #0]
 801ef58:	b2db      	uxtb	r3, r3
 801ef5a:	2b7f      	cmp	r3, #127	; 0x7f
 801ef5c:	d101      	bne.n	801ef62 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801ef5e:	2300      	movs	r3, #0
 801ef60:	e001      	b.n	801ef66 <ip4_route+0xca>
  }

  return netif_default;
 801ef62:	4b05      	ldr	r3, [pc, #20]	; (801ef78 <ip4_route+0xdc>)
 801ef64:	681b      	ldr	r3, [r3, #0]
}
 801ef66:	4618      	mov	r0, r3
 801ef68:	3714      	adds	r7, #20
 801ef6a:	46bd      	mov	sp, r7
 801ef6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef70:	4770      	bx	lr
 801ef72:	bf00      	nop
 801ef74:	2001fee0 	.word	0x2001fee0
 801ef78:	2001fee4 	.word	0x2001fee4

0801ef7c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801ef7c:	b580      	push	{r7, lr}
 801ef7e:	b082      	sub	sp, #8
 801ef80:	af00      	add	r7, sp, #0
 801ef82:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801ef84:	687b      	ldr	r3, [r7, #4]
 801ef86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ef8a:	f003 0301 	and.w	r3, r3, #1
 801ef8e:	b2db      	uxtb	r3, r3
 801ef90:	2b00      	cmp	r3, #0
 801ef92:	d016      	beq.n	801efc2 <ip4_input_accept+0x46>
 801ef94:	687b      	ldr	r3, [r7, #4]
 801ef96:	3304      	adds	r3, #4
 801ef98:	681b      	ldr	r3, [r3, #0]
 801ef9a:	2b00      	cmp	r3, #0
 801ef9c:	d011      	beq.n	801efc2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ef9e:	4b0b      	ldr	r3, [pc, #44]	; (801efcc <ip4_input_accept+0x50>)
 801efa0:	695a      	ldr	r2, [r3, #20]
 801efa2:	687b      	ldr	r3, [r7, #4]
 801efa4:	3304      	adds	r3, #4
 801efa6:	681b      	ldr	r3, [r3, #0]
 801efa8:	429a      	cmp	r2, r3
 801efaa:	d008      	beq.n	801efbe <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801efac:	4b07      	ldr	r3, [pc, #28]	; (801efcc <ip4_input_accept+0x50>)
 801efae:	695b      	ldr	r3, [r3, #20]
 801efb0:	6879      	ldr	r1, [r7, #4]
 801efb2:	4618      	mov	r0, r3
 801efb4:	f000 fa06 	bl	801f3c4 <ip4_addr_isbroadcast_u32>
 801efb8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801efba:	2b00      	cmp	r3, #0
 801efbc:	d001      	beq.n	801efc2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801efbe:	2301      	movs	r3, #1
 801efc0:	e000      	b.n	801efc4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801efc2:	2300      	movs	r3, #0
}
 801efc4:	4618      	mov	r0, r3
 801efc6:	3708      	adds	r7, #8
 801efc8:	46bd      	mov	sp, r7
 801efca:	bd80      	pop	{r7, pc}
 801efcc:	2001c7dc 	.word	0x2001c7dc

0801efd0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801efd0:	b580      	push	{r7, lr}
 801efd2:	b086      	sub	sp, #24
 801efd4:	af00      	add	r7, sp, #0
 801efd6:	6078      	str	r0, [r7, #4]
 801efd8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801efda:	687b      	ldr	r3, [r7, #4]
 801efdc:	685b      	ldr	r3, [r3, #4]
 801efde:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801efe0:	697b      	ldr	r3, [r7, #20]
 801efe2:	781b      	ldrb	r3, [r3, #0]
 801efe4:	091b      	lsrs	r3, r3, #4
 801efe6:	b2db      	uxtb	r3, r3
 801efe8:	2b04      	cmp	r3, #4
 801efea:	d004      	beq.n	801eff6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801efec:	6878      	ldr	r0, [r7, #4]
 801efee:	f7f8 f84b 	bl	8017088 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801eff2:	2300      	movs	r3, #0
 801eff4:	e105      	b.n	801f202 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801eff6:	697b      	ldr	r3, [r7, #20]
 801eff8:	781b      	ldrb	r3, [r3, #0]
 801effa:	f003 030f 	and.w	r3, r3, #15
 801effe:	b2db      	uxtb	r3, r3
 801f000:	009b      	lsls	r3, r3, #2
 801f002:	b2db      	uxtb	r3, r3
 801f004:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801f006:	697b      	ldr	r3, [r7, #20]
 801f008:	885b      	ldrh	r3, [r3, #2]
 801f00a:	b29b      	uxth	r3, r3
 801f00c:	4618      	mov	r0, r3
 801f00e:	f7f6 fc5d 	bl	80158cc <lwip_htons>
 801f012:	4603      	mov	r3, r0
 801f014:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801f016:	687b      	ldr	r3, [r7, #4]
 801f018:	891b      	ldrh	r3, [r3, #8]
 801f01a:	89ba      	ldrh	r2, [r7, #12]
 801f01c:	429a      	cmp	r2, r3
 801f01e:	d204      	bcs.n	801f02a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801f020:	89bb      	ldrh	r3, [r7, #12]
 801f022:	4619      	mov	r1, r3
 801f024:	6878      	ldr	r0, [r7, #4]
 801f026:	f7f7 fea9 	bl	8016d7c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801f02a:	687b      	ldr	r3, [r7, #4]
 801f02c:	895b      	ldrh	r3, [r3, #10]
 801f02e:	89fa      	ldrh	r2, [r7, #14]
 801f030:	429a      	cmp	r2, r3
 801f032:	d807      	bhi.n	801f044 <ip4_input+0x74>
 801f034:	687b      	ldr	r3, [r7, #4]
 801f036:	891b      	ldrh	r3, [r3, #8]
 801f038:	89ba      	ldrh	r2, [r7, #12]
 801f03a:	429a      	cmp	r2, r3
 801f03c:	d802      	bhi.n	801f044 <ip4_input+0x74>
 801f03e:	89fb      	ldrh	r3, [r7, #14]
 801f040:	2b13      	cmp	r3, #19
 801f042:	d804      	bhi.n	801f04e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801f044:	6878      	ldr	r0, [r7, #4]
 801f046:	f7f8 f81f 	bl	8017088 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801f04a:	2300      	movs	r3, #0
 801f04c:	e0d9      	b.n	801f202 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801f04e:	697b      	ldr	r3, [r7, #20]
 801f050:	691b      	ldr	r3, [r3, #16]
 801f052:	4a6e      	ldr	r2, [pc, #440]	; (801f20c <ip4_input+0x23c>)
 801f054:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801f056:	697b      	ldr	r3, [r7, #20]
 801f058:	68db      	ldr	r3, [r3, #12]
 801f05a:	4a6c      	ldr	r2, [pc, #432]	; (801f20c <ip4_input+0x23c>)
 801f05c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f05e:	4b6b      	ldr	r3, [pc, #428]	; (801f20c <ip4_input+0x23c>)
 801f060:	695b      	ldr	r3, [r3, #20]
 801f062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f066:	2be0      	cmp	r3, #224	; 0xe0
 801f068:	d112      	bne.n	801f090 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801f06a:	683b      	ldr	r3, [r7, #0]
 801f06c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801f070:	f003 0301 	and.w	r3, r3, #1
 801f074:	b2db      	uxtb	r3, r3
 801f076:	2b00      	cmp	r3, #0
 801f078:	d007      	beq.n	801f08a <ip4_input+0xba>
 801f07a:	683b      	ldr	r3, [r7, #0]
 801f07c:	3304      	adds	r3, #4
 801f07e:	681b      	ldr	r3, [r3, #0]
 801f080:	2b00      	cmp	r3, #0
 801f082:	d002      	beq.n	801f08a <ip4_input+0xba>
      netif = inp;
 801f084:	683b      	ldr	r3, [r7, #0]
 801f086:	613b      	str	r3, [r7, #16]
 801f088:	e02a      	b.n	801f0e0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801f08a:	2300      	movs	r3, #0
 801f08c:	613b      	str	r3, [r7, #16]
 801f08e:	e027      	b.n	801f0e0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801f090:	6838      	ldr	r0, [r7, #0]
 801f092:	f7ff ff73 	bl	801ef7c <ip4_input_accept>
 801f096:	4603      	mov	r3, r0
 801f098:	2b00      	cmp	r3, #0
 801f09a:	d002      	beq.n	801f0a2 <ip4_input+0xd2>
      netif = inp;
 801f09c:	683b      	ldr	r3, [r7, #0]
 801f09e:	613b      	str	r3, [r7, #16]
 801f0a0:	e01e      	b.n	801f0e0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801f0a2:	2300      	movs	r3, #0
 801f0a4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801f0a6:	4b59      	ldr	r3, [pc, #356]	; (801f20c <ip4_input+0x23c>)
 801f0a8:	695b      	ldr	r3, [r3, #20]
 801f0aa:	b2db      	uxtb	r3, r3
 801f0ac:	2b7f      	cmp	r3, #127	; 0x7f
 801f0ae:	d017      	beq.n	801f0e0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801f0b0:	4b57      	ldr	r3, [pc, #348]	; (801f210 <ip4_input+0x240>)
 801f0b2:	681b      	ldr	r3, [r3, #0]
 801f0b4:	613b      	str	r3, [r7, #16]
 801f0b6:	e00e      	b.n	801f0d6 <ip4_input+0x106>
          if (netif == inp) {
 801f0b8:	693a      	ldr	r2, [r7, #16]
 801f0ba:	683b      	ldr	r3, [r7, #0]
 801f0bc:	429a      	cmp	r2, r3
 801f0be:	d006      	beq.n	801f0ce <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801f0c0:	6938      	ldr	r0, [r7, #16]
 801f0c2:	f7ff ff5b 	bl	801ef7c <ip4_input_accept>
 801f0c6:	4603      	mov	r3, r0
 801f0c8:	2b00      	cmp	r3, #0
 801f0ca:	d108      	bne.n	801f0de <ip4_input+0x10e>
 801f0cc:	e000      	b.n	801f0d0 <ip4_input+0x100>
            continue;
 801f0ce:	bf00      	nop
        NETIF_FOREACH(netif) {
 801f0d0:	693b      	ldr	r3, [r7, #16]
 801f0d2:	681b      	ldr	r3, [r3, #0]
 801f0d4:	613b      	str	r3, [r7, #16]
 801f0d6:	693b      	ldr	r3, [r7, #16]
 801f0d8:	2b00      	cmp	r3, #0
 801f0da:	d1ed      	bne.n	801f0b8 <ip4_input+0xe8>
 801f0dc:	e000      	b.n	801f0e0 <ip4_input+0x110>
            break;
 801f0de:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f0e0:	4b4a      	ldr	r3, [pc, #296]	; (801f20c <ip4_input+0x23c>)
 801f0e2:	691b      	ldr	r3, [r3, #16]
 801f0e4:	6839      	ldr	r1, [r7, #0]
 801f0e6:	4618      	mov	r0, r3
 801f0e8:	f000 f96c 	bl	801f3c4 <ip4_addr_isbroadcast_u32>
 801f0ec:	4603      	mov	r3, r0
 801f0ee:	2b00      	cmp	r3, #0
 801f0f0:	d105      	bne.n	801f0fe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801f0f2:	4b46      	ldr	r3, [pc, #280]	; (801f20c <ip4_input+0x23c>)
 801f0f4:	691b      	ldr	r3, [r3, #16]
 801f0f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f0fa:	2be0      	cmp	r3, #224	; 0xe0
 801f0fc:	d104      	bne.n	801f108 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801f0fe:	6878      	ldr	r0, [r7, #4]
 801f100:	f7f7 ffc2 	bl	8017088 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801f104:	2300      	movs	r3, #0
 801f106:	e07c      	b.n	801f202 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801f108:	693b      	ldr	r3, [r7, #16]
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	d104      	bne.n	801f118 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801f10e:	6878      	ldr	r0, [r7, #4]
 801f110:	f7f7 ffba 	bl	8017088 <pbuf_free>
    return ERR_OK;
 801f114:	2300      	movs	r3, #0
 801f116:	e074      	b.n	801f202 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801f118:	697b      	ldr	r3, [r7, #20]
 801f11a:	88db      	ldrh	r3, [r3, #6]
 801f11c:	b29b      	uxth	r3, r3
 801f11e:	461a      	mov	r2, r3
 801f120:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801f124:	4013      	ands	r3, r2
 801f126:	2b00      	cmp	r3, #0
 801f128:	d00b      	beq.n	801f142 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801f12a:	6878      	ldr	r0, [r7, #4]
 801f12c:	f000 fc90 	bl	801fa50 <ip4_reass>
 801f130:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801f132:	687b      	ldr	r3, [r7, #4]
 801f134:	2b00      	cmp	r3, #0
 801f136:	d101      	bne.n	801f13c <ip4_input+0x16c>
      return ERR_OK;
 801f138:	2300      	movs	r3, #0
 801f13a:	e062      	b.n	801f202 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801f13c:	687b      	ldr	r3, [r7, #4]
 801f13e:	685b      	ldr	r3, [r3, #4]
 801f140:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801f142:	4a32      	ldr	r2, [pc, #200]	; (801f20c <ip4_input+0x23c>)
 801f144:	693b      	ldr	r3, [r7, #16]
 801f146:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801f148:	4a30      	ldr	r2, [pc, #192]	; (801f20c <ip4_input+0x23c>)
 801f14a:	683b      	ldr	r3, [r7, #0]
 801f14c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801f14e:	4a2f      	ldr	r2, [pc, #188]	; (801f20c <ip4_input+0x23c>)
 801f150:	697b      	ldr	r3, [r7, #20]
 801f152:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801f154:	697b      	ldr	r3, [r7, #20]
 801f156:	781b      	ldrb	r3, [r3, #0]
 801f158:	f003 030f 	and.w	r3, r3, #15
 801f15c:	b2db      	uxtb	r3, r3
 801f15e:	009b      	lsls	r3, r3, #2
 801f160:	b2db      	uxtb	r3, r3
 801f162:	b29a      	uxth	r2, r3
 801f164:	4b29      	ldr	r3, [pc, #164]	; (801f20c <ip4_input+0x23c>)
 801f166:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801f168:	89fb      	ldrh	r3, [r7, #14]
 801f16a:	4619      	mov	r1, r3
 801f16c:	6878      	ldr	r0, [r7, #4]
 801f16e:	f7f7 ff05 	bl	8016f7c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801f172:	697b      	ldr	r3, [r7, #20]
 801f174:	7a5b      	ldrb	r3, [r3, #9]
 801f176:	2b06      	cmp	r3, #6
 801f178:	d009      	beq.n	801f18e <ip4_input+0x1be>
 801f17a:	2b11      	cmp	r3, #17
 801f17c:	d002      	beq.n	801f184 <ip4_input+0x1b4>
 801f17e:	2b01      	cmp	r3, #1
 801f180:	d00a      	beq.n	801f198 <ip4_input+0x1c8>
 801f182:	e00e      	b.n	801f1a2 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801f184:	6839      	ldr	r1, [r7, #0]
 801f186:	6878      	ldr	r0, [r7, #4]
 801f188:	f7fe fc6a 	bl	801da60 <udp_input>
        break;
 801f18c:	e026      	b.n	801f1dc <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801f18e:	6839      	ldr	r1, [r7, #0]
 801f190:	6878      	ldr	r0, [r7, #4]
 801f192:	f7fa f84f 	bl	8019234 <tcp_input>
        break;
 801f196:	e021      	b.n	801f1dc <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801f198:	6839      	ldr	r1, [r7, #0]
 801f19a:	6878      	ldr	r0, [r7, #4]
 801f19c:	f7ff fcf0 	bl	801eb80 <icmp_input>
        break;
 801f1a0:	e01c      	b.n	801f1dc <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f1a2:	4b1a      	ldr	r3, [pc, #104]	; (801f20c <ip4_input+0x23c>)
 801f1a4:	695b      	ldr	r3, [r3, #20]
 801f1a6:	6939      	ldr	r1, [r7, #16]
 801f1a8:	4618      	mov	r0, r3
 801f1aa:	f000 f90b 	bl	801f3c4 <ip4_addr_isbroadcast_u32>
 801f1ae:	4603      	mov	r3, r0
 801f1b0:	2b00      	cmp	r3, #0
 801f1b2:	d10f      	bne.n	801f1d4 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f1b4:	4b15      	ldr	r3, [pc, #84]	; (801f20c <ip4_input+0x23c>)
 801f1b6:	695b      	ldr	r3, [r3, #20]
 801f1b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f1bc:	2be0      	cmp	r3, #224	; 0xe0
 801f1be:	d009      	beq.n	801f1d4 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801f1c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801f1c4:	4619      	mov	r1, r3
 801f1c6:	6878      	ldr	r0, [r7, #4]
 801f1c8:	f7f7 ff4b 	bl	8017062 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801f1cc:	2102      	movs	r1, #2
 801f1ce:	6878      	ldr	r0, [r7, #4]
 801f1d0:	f7ff fdda 	bl	801ed88 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801f1d4:	6878      	ldr	r0, [r7, #4]
 801f1d6:	f7f7 ff57 	bl	8017088 <pbuf_free>
        break;
 801f1da:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801f1dc:	4b0b      	ldr	r3, [pc, #44]	; (801f20c <ip4_input+0x23c>)
 801f1de:	2200      	movs	r2, #0
 801f1e0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801f1e2:	4b0a      	ldr	r3, [pc, #40]	; (801f20c <ip4_input+0x23c>)
 801f1e4:	2200      	movs	r2, #0
 801f1e6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801f1e8:	4b08      	ldr	r3, [pc, #32]	; (801f20c <ip4_input+0x23c>)
 801f1ea:	2200      	movs	r2, #0
 801f1ec:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801f1ee:	4b07      	ldr	r3, [pc, #28]	; (801f20c <ip4_input+0x23c>)
 801f1f0:	2200      	movs	r2, #0
 801f1f2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801f1f4:	4b05      	ldr	r3, [pc, #20]	; (801f20c <ip4_input+0x23c>)
 801f1f6:	2200      	movs	r2, #0
 801f1f8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801f1fa:	4b04      	ldr	r3, [pc, #16]	; (801f20c <ip4_input+0x23c>)
 801f1fc:	2200      	movs	r2, #0
 801f1fe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801f200:	2300      	movs	r3, #0
}
 801f202:	4618      	mov	r0, r3
 801f204:	3718      	adds	r7, #24
 801f206:	46bd      	mov	sp, r7
 801f208:	bd80      	pop	{r7, pc}
 801f20a:	bf00      	nop
 801f20c:	2001c7dc 	.word	0x2001c7dc
 801f210:	2001fee0 	.word	0x2001fee0

0801f214 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801f214:	b580      	push	{r7, lr}
 801f216:	b08a      	sub	sp, #40	; 0x28
 801f218:	af04      	add	r7, sp, #16
 801f21a:	60f8      	str	r0, [r7, #12]
 801f21c:	60b9      	str	r1, [r7, #8]
 801f21e:	607a      	str	r2, [r7, #4]
 801f220:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801f222:	68bb      	ldr	r3, [r7, #8]
 801f224:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	2b00      	cmp	r3, #0
 801f22a:	d009      	beq.n	801f240 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801f22c:	68bb      	ldr	r3, [r7, #8]
 801f22e:	2b00      	cmp	r3, #0
 801f230:	d003      	beq.n	801f23a <ip4_output_if+0x26>
 801f232:	68bb      	ldr	r3, [r7, #8]
 801f234:	681b      	ldr	r3, [r3, #0]
 801f236:	2b00      	cmp	r3, #0
 801f238:	d102      	bne.n	801f240 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801f23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f23c:	3304      	adds	r3, #4
 801f23e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801f240:	78fa      	ldrb	r2, [r7, #3]
 801f242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f244:	9302      	str	r3, [sp, #8]
 801f246:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f24a:	9301      	str	r3, [sp, #4]
 801f24c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f250:	9300      	str	r3, [sp, #0]
 801f252:	4613      	mov	r3, r2
 801f254:	687a      	ldr	r2, [r7, #4]
 801f256:	6979      	ldr	r1, [r7, #20]
 801f258:	68f8      	ldr	r0, [r7, #12]
 801f25a:	f000 f805 	bl	801f268 <ip4_output_if_src>
 801f25e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801f260:	4618      	mov	r0, r3
 801f262:	3718      	adds	r7, #24
 801f264:	46bd      	mov	sp, r7
 801f266:	bd80      	pop	{r7, pc}

0801f268 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801f268:	b580      	push	{r7, lr}
 801f26a:	b088      	sub	sp, #32
 801f26c:	af00      	add	r7, sp, #0
 801f26e:	60f8      	str	r0, [r7, #12]
 801f270:	60b9      	str	r1, [r7, #8]
 801f272:	607a      	str	r2, [r7, #4]
 801f274:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801f276:	68fb      	ldr	r3, [r7, #12]
 801f278:	7b9b      	ldrb	r3, [r3, #14]
 801f27a:	2b01      	cmp	r3, #1
 801f27c:	d006      	beq.n	801f28c <ip4_output_if_src+0x24>
 801f27e:	4b4b      	ldr	r3, [pc, #300]	; (801f3ac <ip4_output_if_src+0x144>)
 801f280:	f44f 7255 	mov.w	r2, #852	; 0x354
 801f284:	494a      	ldr	r1, [pc, #296]	; (801f3b0 <ip4_output_if_src+0x148>)
 801f286:	484b      	ldr	r0, [pc, #300]	; (801f3b4 <ip4_output_if_src+0x14c>)
 801f288:	f001 f944 	bl	8020514 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801f28c:	687b      	ldr	r3, [r7, #4]
 801f28e:	2b00      	cmp	r3, #0
 801f290:	d060      	beq.n	801f354 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801f292:	2314      	movs	r3, #20
 801f294:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801f296:	2114      	movs	r1, #20
 801f298:	68f8      	ldr	r0, [r7, #12]
 801f29a:	f7f7 fe5f 	bl	8016f5c <pbuf_add_header>
 801f29e:	4603      	mov	r3, r0
 801f2a0:	2b00      	cmp	r3, #0
 801f2a2:	d002      	beq.n	801f2aa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801f2a4:	f06f 0301 	mvn.w	r3, #1
 801f2a8:	e07c      	b.n	801f3a4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801f2aa:	68fb      	ldr	r3, [r7, #12]
 801f2ac:	685b      	ldr	r3, [r3, #4]
 801f2ae:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801f2b0:	68fb      	ldr	r3, [r7, #12]
 801f2b2:	895b      	ldrh	r3, [r3, #10]
 801f2b4:	2b13      	cmp	r3, #19
 801f2b6:	d806      	bhi.n	801f2c6 <ip4_output_if_src+0x5e>
 801f2b8:	4b3c      	ldr	r3, [pc, #240]	; (801f3ac <ip4_output_if_src+0x144>)
 801f2ba:	f240 3289 	movw	r2, #905	; 0x389
 801f2be:	493e      	ldr	r1, [pc, #248]	; (801f3b8 <ip4_output_if_src+0x150>)
 801f2c0:	483c      	ldr	r0, [pc, #240]	; (801f3b4 <ip4_output_if_src+0x14c>)
 801f2c2:	f001 f927 	bl	8020514 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801f2c6:	69fb      	ldr	r3, [r7, #28]
 801f2c8:	78fa      	ldrb	r2, [r7, #3]
 801f2ca:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801f2cc:	69fb      	ldr	r3, [r7, #28]
 801f2ce:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801f2d2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801f2d4:	687b      	ldr	r3, [r7, #4]
 801f2d6:	681a      	ldr	r2, [r3, #0]
 801f2d8:	69fb      	ldr	r3, [r7, #28]
 801f2da:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801f2dc:	8b7b      	ldrh	r3, [r7, #26]
 801f2de:	089b      	lsrs	r3, r3, #2
 801f2e0:	b29b      	uxth	r3, r3
 801f2e2:	b2db      	uxtb	r3, r3
 801f2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f2e8:	b2da      	uxtb	r2, r3
 801f2ea:	69fb      	ldr	r3, [r7, #28]
 801f2ec:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801f2ee:	69fb      	ldr	r3, [r7, #28]
 801f2f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801f2f4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801f2f6:	68fb      	ldr	r3, [r7, #12]
 801f2f8:	891b      	ldrh	r3, [r3, #8]
 801f2fa:	4618      	mov	r0, r3
 801f2fc:	f7f6 fae6 	bl	80158cc <lwip_htons>
 801f300:	4603      	mov	r3, r0
 801f302:	461a      	mov	r2, r3
 801f304:	69fb      	ldr	r3, [r7, #28]
 801f306:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801f308:	69fb      	ldr	r3, [r7, #28]
 801f30a:	2200      	movs	r2, #0
 801f30c:	719a      	strb	r2, [r3, #6]
 801f30e:	2200      	movs	r2, #0
 801f310:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801f312:	4b2a      	ldr	r3, [pc, #168]	; (801f3bc <ip4_output_if_src+0x154>)
 801f314:	881b      	ldrh	r3, [r3, #0]
 801f316:	4618      	mov	r0, r3
 801f318:	f7f6 fad8 	bl	80158cc <lwip_htons>
 801f31c:	4603      	mov	r3, r0
 801f31e:	461a      	mov	r2, r3
 801f320:	69fb      	ldr	r3, [r7, #28]
 801f322:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801f324:	4b25      	ldr	r3, [pc, #148]	; (801f3bc <ip4_output_if_src+0x154>)
 801f326:	881b      	ldrh	r3, [r3, #0]
 801f328:	3301      	adds	r3, #1
 801f32a:	b29a      	uxth	r2, r3
 801f32c:	4b23      	ldr	r3, [pc, #140]	; (801f3bc <ip4_output_if_src+0x154>)
 801f32e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801f330:	68bb      	ldr	r3, [r7, #8]
 801f332:	2b00      	cmp	r3, #0
 801f334:	d104      	bne.n	801f340 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801f336:	4b22      	ldr	r3, [pc, #136]	; (801f3c0 <ip4_output_if_src+0x158>)
 801f338:	681a      	ldr	r2, [r3, #0]
 801f33a:	69fb      	ldr	r3, [r7, #28]
 801f33c:	60da      	str	r2, [r3, #12]
 801f33e:	e003      	b.n	801f348 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801f340:	68bb      	ldr	r3, [r7, #8]
 801f342:	681a      	ldr	r2, [r3, #0]
 801f344:	69fb      	ldr	r3, [r7, #28]
 801f346:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801f348:	69fb      	ldr	r3, [r7, #28]
 801f34a:	2200      	movs	r2, #0
 801f34c:	729a      	strb	r2, [r3, #10]
 801f34e:	2200      	movs	r2, #0
 801f350:	72da      	strb	r2, [r3, #11]
 801f352:	e00f      	b.n	801f374 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801f354:	68fb      	ldr	r3, [r7, #12]
 801f356:	895b      	ldrh	r3, [r3, #10]
 801f358:	2b13      	cmp	r3, #19
 801f35a:	d802      	bhi.n	801f362 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801f35c:	f06f 0301 	mvn.w	r3, #1
 801f360:	e020      	b.n	801f3a4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801f362:	68fb      	ldr	r3, [r7, #12]
 801f364:	685b      	ldr	r3, [r3, #4]
 801f366:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801f368:	69fb      	ldr	r3, [r7, #28]
 801f36a:	691b      	ldr	r3, [r3, #16]
 801f36c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801f36e:	f107 0314 	add.w	r3, r7, #20
 801f372:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801f374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f376:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801f378:	2b00      	cmp	r3, #0
 801f37a:	d00c      	beq.n	801f396 <ip4_output_if_src+0x12e>
 801f37c:	68fb      	ldr	r3, [r7, #12]
 801f37e:	891a      	ldrh	r2, [r3, #8]
 801f380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f382:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801f384:	429a      	cmp	r2, r3
 801f386:	d906      	bls.n	801f396 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801f388:	687a      	ldr	r2, [r7, #4]
 801f38a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801f38c:	68f8      	ldr	r0, [r7, #12]
 801f38e:	f000 fd4b 	bl	801fe28 <ip4_frag>
 801f392:	4603      	mov	r3, r0
 801f394:	e006      	b.n	801f3a4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801f396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f398:	695b      	ldr	r3, [r3, #20]
 801f39a:	687a      	ldr	r2, [r7, #4]
 801f39c:	68f9      	ldr	r1, [r7, #12]
 801f39e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f3a0:	4798      	blx	r3
 801f3a2:	4603      	mov	r3, r0
}
 801f3a4:	4618      	mov	r0, r3
 801f3a6:	3720      	adds	r7, #32
 801f3a8:	46bd      	mov	sp, r7
 801f3aa:	bd80      	pop	{r7, pc}
 801f3ac:	080242ac 	.word	0x080242ac
 801f3b0:	080242e0 	.word	0x080242e0
 801f3b4:	080242ec 	.word	0x080242ec
 801f3b8:	08024314 	.word	0x08024314
 801f3bc:	2000947e 	.word	0x2000947e
 801f3c0:	08035270 	.word	0x08035270

0801f3c4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801f3c4:	b480      	push	{r7}
 801f3c6:	b085      	sub	sp, #20
 801f3c8:	af00      	add	r7, sp, #0
 801f3ca:	6078      	str	r0, [r7, #4]
 801f3cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801f3ce:	687b      	ldr	r3, [r7, #4]
 801f3d0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801f3d2:	687b      	ldr	r3, [r7, #4]
 801f3d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f3d8:	d002      	beq.n	801f3e0 <ip4_addr_isbroadcast_u32+0x1c>
 801f3da:	687b      	ldr	r3, [r7, #4]
 801f3dc:	2b00      	cmp	r3, #0
 801f3de:	d101      	bne.n	801f3e4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801f3e0:	2301      	movs	r3, #1
 801f3e2:	e02a      	b.n	801f43a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801f3e4:	683b      	ldr	r3, [r7, #0]
 801f3e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801f3ea:	f003 0302 	and.w	r3, r3, #2
 801f3ee:	2b00      	cmp	r3, #0
 801f3f0:	d101      	bne.n	801f3f6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801f3f2:	2300      	movs	r3, #0
 801f3f4:	e021      	b.n	801f43a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801f3f6:	683b      	ldr	r3, [r7, #0]
 801f3f8:	3304      	adds	r3, #4
 801f3fa:	681b      	ldr	r3, [r3, #0]
 801f3fc:	687a      	ldr	r2, [r7, #4]
 801f3fe:	429a      	cmp	r2, r3
 801f400:	d101      	bne.n	801f406 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801f402:	2300      	movs	r3, #0
 801f404:	e019      	b.n	801f43a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801f406:	68fa      	ldr	r2, [r7, #12]
 801f408:	683b      	ldr	r3, [r7, #0]
 801f40a:	3304      	adds	r3, #4
 801f40c:	681b      	ldr	r3, [r3, #0]
 801f40e:	405a      	eors	r2, r3
 801f410:	683b      	ldr	r3, [r7, #0]
 801f412:	3308      	adds	r3, #8
 801f414:	681b      	ldr	r3, [r3, #0]
 801f416:	4013      	ands	r3, r2
 801f418:	2b00      	cmp	r3, #0
 801f41a:	d10d      	bne.n	801f438 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801f41c:	683b      	ldr	r3, [r7, #0]
 801f41e:	3308      	adds	r3, #8
 801f420:	681b      	ldr	r3, [r3, #0]
 801f422:	43da      	mvns	r2, r3
 801f424:	687b      	ldr	r3, [r7, #4]
 801f426:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801f428:	683b      	ldr	r3, [r7, #0]
 801f42a:	3308      	adds	r3, #8
 801f42c:	681b      	ldr	r3, [r3, #0]
 801f42e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801f430:	429a      	cmp	r2, r3
 801f432:	d101      	bne.n	801f438 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801f434:	2301      	movs	r3, #1
 801f436:	e000      	b.n	801f43a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801f438:	2300      	movs	r3, #0
  }
}
 801f43a:	4618      	mov	r0, r3
 801f43c:	3714      	adds	r7, #20
 801f43e:	46bd      	mov	sp, r7
 801f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f444:	4770      	bx	lr
	...

0801f448 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801f448:	b580      	push	{r7, lr}
 801f44a:	b084      	sub	sp, #16
 801f44c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801f44e:	2300      	movs	r3, #0
 801f450:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801f452:	4b12      	ldr	r3, [pc, #72]	; (801f49c <ip_reass_tmr+0x54>)
 801f454:	681b      	ldr	r3, [r3, #0]
 801f456:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801f458:	e018      	b.n	801f48c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801f45a:	68fb      	ldr	r3, [r7, #12]
 801f45c:	7fdb      	ldrb	r3, [r3, #31]
 801f45e:	2b00      	cmp	r3, #0
 801f460:	d00b      	beq.n	801f47a <ip_reass_tmr+0x32>
      r->timer--;
 801f462:	68fb      	ldr	r3, [r7, #12]
 801f464:	7fdb      	ldrb	r3, [r3, #31]
 801f466:	3b01      	subs	r3, #1
 801f468:	b2da      	uxtb	r2, r3
 801f46a:	68fb      	ldr	r3, [r7, #12]
 801f46c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801f46e:	68fb      	ldr	r3, [r7, #12]
 801f470:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801f472:	68fb      	ldr	r3, [r7, #12]
 801f474:	681b      	ldr	r3, [r3, #0]
 801f476:	60fb      	str	r3, [r7, #12]
 801f478:	e008      	b.n	801f48c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801f47a:	68fb      	ldr	r3, [r7, #12]
 801f47c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801f47e:	68fb      	ldr	r3, [r7, #12]
 801f480:	681b      	ldr	r3, [r3, #0]
 801f482:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801f484:	68b9      	ldr	r1, [r7, #8]
 801f486:	6878      	ldr	r0, [r7, #4]
 801f488:	f000 f80a 	bl	801f4a0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801f48c:	68fb      	ldr	r3, [r7, #12]
 801f48e:	2b00      	cmp	r3, #0
 801f490:	d1e3      	bne.n	801f45a <ip_reass_tmr+0x12>
    }
  }
}
 801f492:	bf00      	nop
 801f494:	3710      	adds	r7, #16
 801f496:	46bd      	mov	sp, r7
 801f498:	bd80      	pop	{r7, pc}
 801f49a:	bf00      	nop
 801f49c:	20009480 	.word	0x20009480

0801f4a0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801f4a0:	b580      	push	{r7, lr}
 801f4a2:	b088      	sub	sp, #32
 801f4a4:	af00      	add	r7, sp, #0
 801f4a6:	6078      	str	r0, [r7, #4]
 801f4a8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801f4aa:	2300      	movs	r3, #0
 801f4ac:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801f4ae:	683a      	ldr	r2, [r7, #0]
 801f4b0:	687b      	ldr	r3, [r7, #4]
 801f4b2:	429a      	cmp	r2, r3
 801f4b4:	d105      	bne.n	801f4c2 <ip_reass_free_complete_datagram+0x22>
 801f4b6:	4b45      	ldr	r3, [pc, #276]	; (801f5cc <ip_reass_free_complete_datagram+0x12c>)
 801f4b8:	22ab      	movs	r2, #171	; 0xab
 801f4ba:	4945      	ldr	r1, [pc, #276]	; (801f5d0 <ip_reass_free_complete_datagram+0x130>)
 801f4bc:	4845      	ldr	r0, [pc, #276]	; (801f5d4 <ip_reass_free_complete_datagram+0x134>)
 801f4be:	f001 f829 	bl	8020514 <iprintf>
  if (prev != NULL) {
 801f4c2:	683b      	ldr	r3, [r7, #0]
 801f4c4:	2b00      	cmp	r3, #0
 801f4c6:	d00a      	beq.n	801f4de <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801f4c8:	683b      	ldr	r3, [r7, #0]
 801f4ca:	681b      	ldr	r3, [r3, #0]
 801f4cc:	687a      	ldr	r2, [r7, #4]
 801f4ce:	429a      	cmp	r2, r3
 801f4d0:	d005      	beq.n	801f4de <ip_reass_free_complete_datagram+0x3e>
 801f4d2:	4b3e      	ldr	r3, [pc, #248]	; (801f5cc <ip_reass_free_complete_datagram+0x12c>)
 801f4d4:	22ad      	movs	r2, #173	; 0xad
 801f4d6:	4940      	ldr	r1, [pc, #256]	; (801f5d8 <ip_reass_free_complete_datagram+0x138>)
 801f4d8:	483e      	ldr	r0, [pc, #248]	; (801f5d4 <ip_reass_free_complete_datagram+0x134>)
 801f4da:	f001 f81b 	bl	8020514 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801f4de:	687b      	ldr	r3, [r7, #4]
 801f4e0:	685b      	ldr	r3, [r3, #4]
 801f4e2:	685b      	ldr	r3, [r3, #4]
 801f4e4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801f4e6:	697b      	ldr	r3, [r7, #20]
 801f4e8:	889b      	ldrh	r3, [r3, #4]
 801f4ea:	b29b      	uxth	r3, r3
 801f4ec:	2b00      	cmp	r3, #0
 801f4ee:	d12a      	bne.n	801f546 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801f4f0:	687b      	ldr	r3, [r7, #4]
 801f4f2:	685b      	ldr	r3, [r3, #4]
 801f4f4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801f4f6:	697b      	ldr	r3, [r7, #20]
 801f4f8:	681a      	ldr	r2, [r3, #0]
 801f4fa:	687b      	ldr	r3, [r7, #4]
 801f4fc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801f4fe:	69bb      	ldr	r3, [r7, #24]
 801f500:	6858      	ldr	r0, [r3, #4]
 801f502:	687b      	ldr	r3, [r7, #4]
 801f504:	3308      	adds	r3, #8
 801f506:	2214      	movs	r2, #20
 801f508:	4619      	mov	r1, r3
 801f50a:	f000 fff0 	bl	80204ee <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801f50e:	2101      	movs	r1, #1
 801f510:	69b8      	ldr	r0, [r7, #24]
 801f512:	f7ff fc49 	bl	801eda8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801f516:	69b8      	ldr	r0, [r7, #24]
 801f518:	f7f7 fe44 	bl	80171a4 <pbuf_clen>
 801f51c:	4603      	mov	r3, r0
 801f51e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801f520:	8bfa      	ldrh	r2, [r7, #30]
 801f522:	8a7b      	ldrh	r3, [r7, #18]
 801f524:	4413      	add	r3, r2
 801f526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f52a:	db05      	blt.n	801f538 <ip_reass_free_complete_datagram+0x98>
 801f52c:	4b27      	ldr	r3, [pc, #156]	; (801f5cc <ip_reass_free_complete_datagram+0x12c>)
 801f52e:	22bc      	movs	r2, #188	; 0xbc
 801f530:	492a      	ldr	r1, [pc, #168]	; (801f5dc <ip_reass_free_complete_datagram+0x13c>)
 801f532:	4828      	ldr	r0, [pc, #160]	; (801f5d4 <ip_reass_free_complete_datagram+0x134>)
 801f534:	f000 ffee 	bl	8020514 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801f538:	8bfa      	ldrh	r2, [r7, #30]
 801f53a:	8a7b      	ldrh	r3, [r7, #18]
 801f53c:	4413      	add	r3, r2
 801f53e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801f540:	69b8      	ldr	r0, [r7, #24]
 801f542:	f7f7 fda1 	bl	8017088 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801f546:	687b      	ldr	r3, [r7, #4]
 801f548:	685b      	ldr	r3, [r3, #4]
 801f54a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801f54c:	e01f      	b.n	801f58e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801f54e:	69bb      	ldr	r3, [r7, #24]
 801f550:	685b      	ldr	r3, [r3, #4]
 801f552:	617b      	str	r3, [r7, #20]
    pcur = p;
 801f554:	69bb      	ldr	r3, [r7, #24]
 801f556:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801f558:	697b      	ldr	r3, [r7, #20]
 801f55a:	681b      	ldr	r3, [r3, #0]
 801f55c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801f55e:	68f8      	ldr	r0, [r7, #12]
 801f560:	f7f7 fe20 	bl	80171a4 <pbuf_clen>
 801f564:	4603      	mov	r3, r0
 801f566:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801f568:	8bfa      	ldrh	r2, [r7, #30]
 801f56a:	8a7b      	ldrh	r3, [r7, #18]
 801f56c:	4413      	add	r3, r2
 801f56e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f572:	db05      	blt.n	801f580 <ip_reass_free_complete_datagram+0xe0>
 801f574:	4b15      	ldr	r3, [pc, #84]	; (801f5cc <ip_reass_free_complete_datagram+0x12c>)
 801f576:	22cc      	movs	r2, #204	; 0xcc
 801f578:	4918      	ldr	r1, [pc, #96]	; (801f5dc <ip_reass_free_complete_datagram+0x13c>)
 801f57a:	4816      	ldr	r0, [pc, #88]	; (801f5d4 <ip_reass_free_complete_datagram+0x134>)
 801f57c:	f000 ffca 	bl	8020514 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801f580:	8bfa      	ldrh	r2, [r7, #30]
 801f582:	8a7b      	ldrh	r3, [r7, #18]
 801f584:	4413      	add	r3, r2
 801f586:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801f588:	68f8      	ldr	r0, [r7, #12]
 801f58a:	f7f7 fd7d 	bl	8017088 <pbuf_free>
  while (p != NULL) {
 801f58e:	69bb      	ldr	r3, [r7, #24]
 801f590:	2b00      	cmp	r3, #0
 801f592:	d1dc      	bne.n	801f54e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801f594:	6839      	ldr	r1, [r7, #0]
 801f596:	6878      	ldr	r0, [r7, #4]
 801f598:	f000 f8c2 	bl	801f720 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801f59c:	4b10      	ldr	r3, [pc, #64]	; (801f5e0 <ip_reass_free_complete_datagram+0x140>)
 801f59e:	881b      	ldrh	r3, [r3, #0]
 801f5a0:	8bfa      	ldrh	r2, [r7, #30]
 801f5a2:	429a      	cmp	r2, r3
 801f5a4:	d905      	bls.n	801f5b2 <ip_reass_free_complete_datagram+0x112>
 801f5a6:	4b09      	ldr	r3, [pc, #36]	; (801f5cc <ip_reass_free_complete_datagram+0x12c>)
 801f5a8:	22d2      	movs	r2, #210	; 0xd2
 801f5aa:	490e      	ldr	r1, [pc, #56]	; (801f5e4 <ip_reass_free_complete_datagram+0x144>)
 801f5ac:	4809      	ldr	r0, [pc, #36]	; (801f5d4 <ip_reass_free_complete_datagram+0x134>)
 801f5ae:	f000 ffb1 	bl	8020514 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801f5b2:	4b0b      	ldr	r3, [pc, #44]	; (801f5e0 <ip_reass_free_complete_datagram+0x140>)
 801f5b4:	881a      	ldrh	r2, [r3, #0]
 801f5b6:	8bfb      	ldrh	r3, [r7, #30]
 801f5b8:	1ad3      	subs	r3, r2, r3
 801f5ba:	b29a      	uxth	r2, r3
 801f5bc:	4b08      	ldr	r3, [pc, #32]	; (801f5e0 <ip_reass_free_complete_datagram+0x140>)
 801f5be:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801f5c0:	8bfb      	ldrh	r3, [r7, #30]
}
 801f5c2:	4618      	mov	r0, r3
 801f5c4:	3720      	adds	r7, #32
 801f5c6:	46bd      	mov	sp, r7
 801f5c8:	bd80      	pop	{r7, pc}
 801f5ca:	bf00      	nop
 801f5cc:	08024344 	.word	0x08024344
 801f5d0:	08024380 	.word	0x08024380
 801f5d4:	0802438c 	.word	0x0802438c
 801f5d8:	080243b4 	.word	0x080243b4
 801f5dc:	080243c8 	.word	0x080243c8
 801f5e0:	20009484 	.word	0x20009484
 801f5e4:	080243e8 	.word	0x080243e8

0801f5e8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801f5e8:	b580      	push	{r7, lr}
 801f5ea:	b08a      	sub	sp, #40	; 0x28
 801f5ec:	af00      	add	r7, sp, #0
 801f5ee:	6078      	str	r0, [r7, #4]
 801f5f0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801f5f2:	2300      	movs	r3, #0
 801f5f4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801f5f6:	2300      	movs	r3, #0
 801f5f8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801f5fa:	2300      	movs	r3, #0
 801f5fc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801f5fe:	2300      	movs	r3, #0
 801f600:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801f602:	2300      	movs	r3, #0
 801f604:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801f606:	4b28      	ldr	r3, [pc, #160]	; (801f6a8 <ip_reass_remove_oldest_datagram+0xc0>)
 801f608:	681b      	ldr	r3, [r3, #0]
 801f60a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801f60c:	e030      	b.n	801f670 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801f60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f610:	695a      	ldr	r2, [r3, #20]
 801f612:	687b      	ldr	r3, [r7, #4]
 801f614:	68db      	ldr	r3, [r3, #12]
 801f616:	429a      	cmp	r2, r3
 801f618:	d10c      	bne.n	801f634 <ip_reass_remove_oldest_datagram+0x4c>
 801f61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f61c:	699a      	ldr	r2, [r3, #24]
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	691b      	ldr	r3, [r3, #16]
 801f622:	429a      	cmp	r2, r3
 801f624:	d106      	bne.n	801f634 <ip_reass_remove_oldest_datagram+0x4c>
 801f626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f628:	899a      	ldrh	r2, [r3, #12]
 801f62a:	687b      	ldr	r3, [r7, #4]
 801f62c:	889b      	ldrh	r3, [r3, #4]
 801f62e:	b29b      	uxth	r3, r3
 801f630:	429a      	cmp	r2, r3
 801f632:	d014      	beq.n	801f65e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801f634:	693b      	ldr	r3, [r7, #16]
 801f636:	3301      	adds	r3, #1
 801f638:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801f63a:	6a3b      	ldr	r3, [r7, #32]
 801f63c:	2b00      	cmp	r3, #0
 801f63e:	d104      	bne.n	801f64a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801f640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f642:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801f644:	69fb      	ldr	r3, [r7, #28]
 801f646:	61bb      	str	r3, [r7, #24]
 801f648:	e009      	b.n	801f65e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801f64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f64c:	7fda      	ldrb	r2, [r3, #31]
 801f64e:	6a3b      	ldr	r3, [r7, #32]
 801f650:	7fdb      	ldrb	r3, [r3, #31]
 801f652:	429a      	cmp	r2, r3
 801f654:	d803      	bhi.n	801f65e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801f656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f658:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801f65a:	69fb      	ldr	r3, [r7, #28]
 801f65c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801f65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f660:	681b      	ldr	r3, [r3, #0]
 801f662:	2b00      	cmp	r3, #0
 801f664:	d001      	beq.n	801f66a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801f666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f668:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801f66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f66c:	681b      	ldr	r3, [r3, #0]
 801f66e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801f670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f672:	2b00      	cmp	r3, #0
 801f674:	d1cb      	bne.n	801f60e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801f676:	6a3b      	ldr	r3, [r7, #32]
 801f678:	2b00      	cmp	r3, #0
 801f67a:	d008      	beq.n	801f68e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801f67c:	69b9      	ldr	r1, [r7, #24]
 801f67e:	6a38      	ldr	r0, [r7, #32]
 801f680:	f7ff ff0e 	bl	801f4a0 <ip_reass_free_complete_datagram>
 801f684:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801f686:	697a      	ldr	r2, [r7, #20]
 801f688:	68fb      	ldr	r3, [r7, #12]
 801f68a:	4413      	add	r3, r2
 801f68c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801f68e:	697a      	ldr	r2, [r7, #20]
 801f690:	683b      	ldr	r3, [r7, #0]
 801f692:	429a      	cmp	r2, r3
 801f694:	da02      	bge.n	801f69c <ip_reass_remove_oldest_datagram+0xb4>
 801f696:	693b      	ldr	r3, [r7, #16]
 801f698:	2b01      	cmp	r3, #1
 801f69a:	dcac      	bgt.n	801f5f6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801f69c:	697b      	ldr	r3, [r7, #20]
}
 801f69e:	4618      	mov	r0, r3
 801f6a0:	3728      	adds	r7, #40	; 0x28
 801f6a2:	46bd      	mov	sp, r7
 801f6a4:	bd80      	pop	{r7, pc}
 801f6a6:	bf00      	nop
 801f6a8:	20009480 	.word	0x20009480

0801f6ac <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801f6ac:	b580      	push	{r7, lr}
 801f6ae:	b084      	sub	sp, #16
 801f6b0:	af00      	add	r7, sp, #0
 801f6b2:	6078      	str	r0, [r7, #4]
 801f6b4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801f6b6:	2004      	movs	r0, #4
 801f6b8:	f7f6 fdf4 	bl	80162a4 <memp_malloc>
 801f6bc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801f6be:	68fb      	ldr	r3, [r7, #12]
 801f6c0:	2b00      	cmp	r3, #0
 801f6c2:	d110      	bne.n	801f6e6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801f6c4:	6839      	ldr	r1, [r7, #0]
 801f6c6:	6878      	ldr	r0, [r7, #4]
 801f6c8:	f7ff ff8e 	bl	801f5e8 <ip_reass_remove_oldest_datagram>
 801f6cc:	4602      	mov	r2, r0
 801f6ce:	683b      	ldr	r3, [r7, #0]
 801f6d0:	4293      	cmp	r3, r2
 801f6d2:	dc03      	bgt.n	801f6dc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801f6d4:	2004      	movs	r0, #4
 801f6d6:	f7f6 fde5 	bl	80162a4 <memp_malloc>
 801f6da:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801f6dc:	68fb      	ldr	r3, [r7, #12]
 801f6de:	2b00      	cmp	r3, #0
 801f6e0:	d101      	bne.n	801f6e6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801f6e2:	2300      	movs	r3, #0
 801f6e4:	e016      	b.n	801f714 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801f6e6:	2220      	movs	r2, #32
 801f6e8:	2100      	movs	r1, #0
 801f6ea:	68f8      	ldr	r0, [r7, #12]
 801f6ec:	f000 ff0a 	bl	8020504 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801f6f0:	68fb      	ldr	r3, [r7, #12]
 801f6f2:	220f      	movs	r2, #15
 801f6f4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801f6f6:	4b09      	ldr	r3, [pc, #36]	; (801f71c <ip_reass_enqueue_new_datagram+0x70>)
 801f6f8:	681a      	ldr	r2, [r3, #0]
 801f6fa:	68fb      	ldr	r3, [r7, #12]
 801f6fc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801f6fe:	4a07      	ldr	r2, [pc, #28]	; (801f71c <ip_reass_enqueue_new_datagram+0x70>)
 801f700:	68fb      	ldr	r3, [r7, #12]
 801f702:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801f704:	68fb      	ldr	r3, [r7, #12]
 801f706:	3308      	adds	r3, #8
 801f708:	2214      	movs	r2, #20
 801f70a:	6879      	ldr	r1, [r7, #4]
 801f70c:	4618      	mov	r0, r3
 801f70e:	f000 feee 	bl	80204ee <memcpy>
  return ipr;
 801f712:	68fb      	ldr	r3, [r7, #12]
}
 801f714:	4618      	mov	r0, r3
 801f716:	3710      	adds	r7, #16
 801f718:	46bd      	mov	sp, r7
 801f71a:	bd80      	pop	{r7, pc}
 801f71c:	20009480 	.word	0x20009480

0801f720 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801f720:	b580      	push	{r7, lr}
 801f722:	b082      	sub	sp, #8
 801f724:	af00      	add	r7, sp, #0
 801f726:	6078      	str	r0, [r7, #4]
 801f728:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801f72a:	4b10      	ldr	r3, [pc, #64]	; (801f76c <ip_reass_dequeue_datagram+0x4c>)
 801f72c:	681b      	ldr	r3, [r3, #0]
 801f72e:	687a      	ldr	r2, [r7, #4]
 801f730:	429a      	cmp	r2, r3
 801f732:	d104      	bne.n	801f73e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801f734:	687b      	ldr	r3, [r7, #4]
 801f736:	681b      	ldr	r3, [r3, #0]
 801f738:	4a0c      	ldr	r2, [pc, #48]	; (801f76c <ip_reass_dequeue_datagram+0x4c>)
 801f73a:	6013      	str	r3, [r2, #0]
 801f73c:	e00d      	b.n	801f75a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801f73e:	683b      	ldr	r3, [r7, #0]
 801f740:	2b00      	cmp	r3, #0
 801f742:	d106      	bne.n	801f752 <ip_reass_dequeue_datagram+0x32>
 801f744:	4b0a      	ldr	r3, [pc, #40]	; (801f770 <ip_reass_dequeue_datagram+0x50>)
 801f746:	f240 1245 	movw	r2, #325	; 0x145
 801f74a:	490a      	ldr	r1, [pc, #40]	; (801f774 <ip_reass_dequeue_datagram+0x54>)
 801f74c:	480a      	ldr	r0, [pc, #40]	; (801f778 <ip_reass_dequeue_datagram+0x58>)
 801f74e:	f000 fee1 	bl	8020514 <iprintf>
    prev->next = ipr->next;
 801f752:	687b      	ldr	r3, [r7, #4]
 801f754:	681a      	ldr	r2, [r3, #0]
 801f756:	683b      	ldr	r3, [r7, #0]
 801f758:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801f75a:	6879      	ldr	r1, [r7, #4]
 801f75c:	2004      	movs	r0, #4
 801f75e:	f7f6 fdf3 	bl	8016348 <memp_free>
}
 801f762:	bf00      	nop
 801f764:	3708      	adds	r7, #8
 801f766:	46bd      	mov	sp, r7
 801f768:	bd80      	pop	{r7, pc}
 801f76a:	bf00      	nop
 801f76c:	20009480 	.word	0x20009480
 801f770:	08024344 	.word	0x08024344
 801f774:	0802440c 	.word	0x0802440c
 801f778:	0802438c 	.word	0x0802438c

0801f77c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801f77c:	b580      	push	{r7, lr}
 801f77e:	b08c      	sub	sp, #48	; 0x30
 801f780:	af00      	add	r7, sp, #0
 801f782:	60f8      	str	r0, [r7, #12]
 801f784:	60b9      	str	r1, [r7, #8]
 801f786:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801f788:	2300      	movs	r3, #0
 801f78a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801f78c:	2301      	movs	r3, #1
 801f78e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801f790:	68bb      	ldr	r3, [r7, #8]
 801f792:	685b      	ldr	r3, [r3, #4]
 801f794:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801f796:	69fb      	ldr	r3, [r7, #28]
 801f798:	885b      	ldrh	r3, [r3, #2]
 801f79a:	b29b      	uxth	r3, r3
 801f79c:	4618      	mov	r0, r3
 801f79e:	f7f6 f895 	bl	80158cc <lwip_htons>
 801f7a2:	4603      	mov	r3, r0
 801f7a4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801f7a6:	69fb      	ldr	r3, [r7, #28]
 801f7a8:	781b      	ldrb	r3, [r3, #0]
 801f7aa:	f003 030f 	and.w	r3, r3, #15
 801f7ae:	b2db      	uxtb	r3, r3
 801f7b0:	009b      	lsls	r3, r3, #2
 801f7b2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801f7b4:	7e7b      	ldrb	r3, [r7, #25]
 801f7b6:	b29b      	uxth	r3, r3
 801f7b8:	8b7a      	ldrh	r2, [r7, #26]
 801f7ba:	429a      	cmp	r2, r3
 801f7bc:	d202      	bcs.n	801f7c4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f7be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f7c2:	e135      	b.n	801fa30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801f7c4:	7e7b      	ldrb	r3, [r7, #25]
 801f7c6:	b29b      	uxth	r3, r3
 801f7c8:	8b7a      	ldrh	r2, [r7, #26]
 801f7ca:	1ad3      	subs	r3, r2, r3
 801f7cc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801f7ce:	69fb      	ldr	r3, [r7, #28]
 801f7d0:	88db      	ldrh	r3, [r3, #6]
 801f7d2:	b29b      	uxth	r3, r3
 801f7d4:	4618      	mov	r0, r3
 801f7d6:	f7f6 f879 	bl	80158cc <lwip_htons>
 801f7da:	4603      	mov	r3, r0
 801f7dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f7e0:	b29b      	uxth	r3, r3
 801f7e2:	00db      	lsls	r3, r3, #3
 801f7e4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801f7e6:	68bb      	ldr	r3, [r7, #8]
 801f7e8:	685b      	ldr	r3, [r3, #4]
 801f7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801f7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f7ee:	2200      	movs	r2, #0
 801f7f0:	701a      	strb	r2, [r3, #0]
 801f7f2:	2200      	movs	r2, #0
 801f7f4:	705a      	strb	r2, [r3, #1]
 801f7f6:	2200      	movs	r2, #0
 801f7f8:	709a      	strb	r2, [r3, #2]
 801f7fa:	2200      	movs	r2, #0
 801f7fc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801f7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f800:	8afa      	ldrh	r2, [r7, #22]
 801f802:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801f804:	8afa      	ldrh	r2, [r7, #22]
 801f806:	8b7b      	ldrh	r3, [r7, #26]
 801f808:	4413      	add	r3, r2
 801f80a:	b29a      	uxth	r2, r3
 801f80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f80e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801f810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f812:	88db      	ldrh	r3, [r3, #6]
 801f814:	b29b      	uxth	r3, r3
 801f816:	8afa      	ldrh	r2, [r7, #22]
 801f818:	429a      	cmp	r2, r3
 801f81a:	d902      	bls.n	801f822 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f81c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f820:	e106      	b.n	801fa30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801f822:	68fb      	ldr	r3, [r7, #12]
 801f824:	685b      	ldr	r3, [r3, #4]
 801f826:	627b      	str	r3, [r7, #36]	; 0x24
 801f828:	e068      	b.n	801f8fc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801f82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f82c:	685b      	ldr	r3, [r3, #4]
 801f82e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801f830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f832:	889b      	ldrh	r3, [r3, #4]
 801f834:	b29a      	uxth	r2, r3
 801f836:	693b      	ldr	r3, [r7, #16]
 801f838:	889b      	ldrh	r3, [r3, #4]
 801f83a:	b29b      	uxth	r3, r3
 801f83c:	429a      	cmp	r2, r3
 801f83e:	d235      	bcs.n	801f8ac <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801f840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f844:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801f846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f848:	2b00      	cmp	r3, #0
 801f84a:	d020      	beq.n	801f88e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801f84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f84e:	889b      	ldrh	r3, [r3, #4]
 801f850:	b29a      	uxth	r2, r3
 801f852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f854:	88db      	ldrh	r3, [r3, #6]
 801f856:	b29b      	uxth	r3, r3
 801f858:	429a      	cmp	r2, r3
 801f85a:	d307      	bcc.n	801f86c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801f85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f85e:	88db      	ldrh	r3, [r3, #6]
 801f860:	b29a      	uxth	r2, r3
 801f862:	693b      	ldr	r3, [r7, #16]
 801f864:	889b      	ldrh	r3, [r3, #4]
 801f866:	b29b      	uxth	r3, r3
 801f868:	429a      	cmp	r2, r3
 801f86a:	d902      	bls.n	801f872 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f86c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f870:	e0de      	b.n	801fa30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801f872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f874:	68ba      	ldr	r2, [r7, #8]
 801f876:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801f878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f87a:	88db      	ldrh	r3, [r3, #6]
 801f87c:	b29a      	uxth	r2, r3
 801f87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f880:	889b      	ldrh	r3, [r3, #4]
 801f882:	b29b      	uxth	r3, r3
 801f884:	429a      	cmp	r2, r3
 801f886:	d03d      	beq.n	801f904 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801f888:	2300      	movs	r3, #0
 801f88a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801f88c:	e03a      	b.n	801f904 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801f88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f890:	88db      	ldrh	r3, [r3, #6]
 801f892:	b29a      	uxth	r2, r3
 801f894:	693b      	ldr	r3, [r7, #16]
 801f896:	889b      	ldrh	r3, [r3, #4]
 801f898:	b29b      	uxth	r3, r3
 801f89a:	429a      	cmp	r2, r3
 801f89c:	d902      	bls.n	801f8a4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f89e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f8a2:	e0c5      	b.n	801fa30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801f8a4:	68fb      	ldr	r3, [r7, #12]
 801f8a6:	68ba      	ldr	r2, [r7, #8]
 801f8a8:	605a      	str	r2, [r3, #4]
      break;
 801f8aa:	e02b      	b.n	801f904 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801f8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f8ae:	889b      	ldrh	r3, [r3, #4]
 801f8b0:	b29a      	uxth	r2, r3
 801f8b2:	693b      	ldr	r3, [r7, #16]
 801f8b4:	889b      	ldrh	r3, [r3, #4]
 801f8b6:	b29b      	uxth	r3, r3
 801f8b8:	429a      	cmp	r2, r3
 801f8ba:	d102      	bne.n	801f8c2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f8bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f8c0:	e0b6      	b.n	801fa30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801f8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f8c4:	889b      	ldrh	r3, [r3, #4]
 801f8c6:	b29a      	uxth	r2, r3
 801f8c8:	693b      	ldr	r3, [r7, #16]
 801f8ca:	88db      	ldrh	r3, [r3, #6]
 801f8cc:	b29b      	uxth	r3, r3
 801f8ce:	429a      	cmp	r2, r3
 801f8d0:	d202      	bcs.n	801f8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f8d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f8d6:	e0ab      	b.n	801fa30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801f8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f8da:	2b00      	cmp	r3, #0
 801f8dc:	d009      	beq.n	801f8f2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801f8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f8e0:	88db      	ldrh	r3, [r3, #6]
 801f8e2:	b29a      	uxth	r2, r3
 801f8e4:	693b      	ldr	r3, [r7, #16]
 801f8e6:	889b      	ldrh	r3, [r3, #4]
 801f8e8:	b29b      	uxth	r3, r3
 801f8ea:	429a      	cmp	r2, r3
 801f8ec:	d001      	beq.n	801f8f2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801f8ee:	2300      	movs	r3, #0
 801f8f0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801f8f2:	693b      	ldr	r3, [r7, #16]
 801f8f4:	681b      	ldr	r3, [r3, #0]
 801f8f6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801f8f8:	693b      	ldr	r3, [r7, #16]
 801f8fa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801f8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8fe:	2b00      	cmp	r3, #0
 801f900:	d193      	bne.n	801f82a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801f902:	e000      	b.n	801f906 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801f904:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801f906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f908:	2b00      	cmp	r3, #0
 801f90a:	d12d      	bne.n	801f968 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801f90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f90e:	2b00      	cmp	r3, #0
 801f910:	d01c      	beq.n	801f94c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801f912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f914:	88db      	ldrh	r3, [r3, #6]
 801f916:	b29a      	uxth	r2, r3
 801f918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f91a:	889b      	ldrh	r3, [r3, #4]
 801f91c:	b29b      	uxth	r3, r3
 801f91e:	429a      	cmp	r2, r3
 801f920:	d906      	bls.n	801f930 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801f922:	4b45      	ldr	r3, [pc, #276]	; (801fa38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f924:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801f928:	4944      	ldr	r1, [pc, #272]	; (801fa3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801f92a:	4845      	ldr	r0, [pc, #276]	; (801fa40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f92c:	f000 fdf2 	bl	8020514 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801f930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f932:	68ba      	ldr	r2, [r7, #8]
 801f934:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801f936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f938:	88db      	ldrh	r3, [r3, #6]
 801f93a:	b29a      	uxth	r2, r3
 801f93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f93e:	889b      	ldrh	r3, [r3, #4]
 801f940:	b29b      	uxth	r3, r3
 801f942:	429a      	cmp	r2, r3
 801f944:	d010      	beq.n	801f968 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801f946:	2300      	movs	r3, #0
 801f948:	623b      	str	r3, [r7, #32]
 801f94a:	e00d      	b.n	801f968 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801f94c:	68fb      	ldr	r3, [r7, #12]
 801f94e:	685b      	ldr	r3, [r3, #4]
 801f950:	2b00      	cmp	r3, #0
 801f952:	d006      	beq.n	801f962 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801f954:	4b38      	ldr	r3, [pc, #224]	; (801fa38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f956:	f240 12bf 	movw	r2, #447	; 0x1bf
 801f95a:	493a      	ldr	r1, [pc, #232]	; (801fa44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801f95c:	4838      	ldr	r0, [pc, #224]	; (801fa40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f95e:	f000 fdd9 	bl	8020514 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801f962:	68fb      	ldr	r3, [r7, #12]
 801f964:	68ba      	ldr	r2, [r7, #8]
 801f966:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801f968:	687b      	ldr	r3, [r7, #4]
 801f96a:	2b00      	cmp	r3, #0
 801f96c:	d105      	bne.n	801f97a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801f96e:	68fb      	ldr	r3, [r7, #12]
 801f970:	7f9b      	ldrb	r3, [r3, #30]
 801f972:	f003 0301 	and.w	r3, r3, #1
 801f976:	2b00      	cmp	r3, #0
 801f978:	d059      	beq.n	801fa2e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801f97a:	6a3b      	ldr	r3, [r7, #32]
 801f97c:	2b00      	cmp	r3, #0
 801f97e:	d04f      	beq.n	801fa20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801f980:	68fb      	ldr	r3, [r7, #12]
 801f982:	685b      	ldr	r3, [r3, #4]
 801f984:	2b00      	cmp	r3, #0
 801f986:	d006      	beq.n	801f996 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801f988:	68fb      	ldr	r3, [r7, #12]
 801f98a:	685b      	ldr	r3, [r3, #4]
 801f98c:	685b      	ldr	r3, [r3, #4]
 801f98e:	889b      	ldrh	r3, [r3, #4]
 801f990:	b29b      	uxth	r3, r3
 801f992:	2b00      	cmp	r3, #0
 801f994:	d002      	beq.n	801f99c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801f996:	2300      	movs	r3, #0
 801f998:	623b      	str	r3, [r7, #32]
 801f99a:	e041      	b.n	801fa20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801f99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f99e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801f9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f9a2:	681b      	ldr	r3, [r3, #0]
 801f9a4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801f9a6:	e012      	b.n	801f9ce <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801f9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9aa:	685b      	ldr	r3, [r3, #4]
 801f9ac:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801f9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f9b0:	88db      	ldrh	r3, [r3, #6]
 801f9b2:	b29a      	uxth	r2, r3
 801f9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f9b6:	889b      	ldrh	r3, [r3, #4]
 801f9b8:	b29b      	uxth	r3, r3
 801f9ba:	429a      	cmp	r2, r3
 801f9bc:	d002      	beq.n	801f9c4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801f9be:	2300      	movs	r3, #0
 801f9c0:	623b      	str	r3, [r7, #32]
            break;
 801f9c2:	e007      	b.n	801f9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801f9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f9c6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801f9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f9ca:	681b      	ldr	r3, [r3, #0]
 801f9cc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801f9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9d0:	2b00      	cmp	r3, #0
 801f9d2:	d1e9      	bne.n	801f9a8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801f9d4:	6a3b      	ldr	r3, [r7, #32]
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	d022      	beq.n	801fa20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801f9da:	68fb      	ldr	r3, [r7, #12]
 801f9dc:	685b      	ldr	r3, [r3, #4]
 801f9de:	2b00      	cmp	r3, #0
 801f9e0:	d106      	bne.n	801f9f0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801f9e2:	4b15      	ldr	r3, [pc, #84]	; (801fa38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f9e4:	f240 12df 	movw	r2, #479	; 0x1df
 801f9e8:	4917      	ldr	r1, [pc, #92]	; (801fa48 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801f9ea:	4815      	ldr	r0, [pc, #84]	; (801fa40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f9ec:	f000 fd92 	bl	8020514 <iprintf>
          LWIP_ASSERT("sanity check",
 801f9f0:	68fb      	ldr	r3, [r7, #12]
 801f9f2:	685b      	ldr	r3, [r3, #4]
 801f9f4:	685b      	ldr	r3, [r3, #4]
 801f9f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f9f8:	429a      	cmp	r2, r3
 801f9fa:	d106      	bne.n	801fa0a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801f9fc:	4b0e      	ldr	r3, [pc, #56]	; (801fa38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f9fe:	f240 12e1 	movw	r2, #481	; 0x1e1
 801fa02:	4911      	ldr	r1, [pc, #68]	; (801fa48 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801fa04:	480e      	ldr	r0, [pc, #56]	; (801fa40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801fa06:	f000 fd85 	bl	8020514 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801fa0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fa0c:	681b      	ldr	r3, [r3, #0]
 801fa0e:	2b00      	cmp	r3, #0
 801fa10:	d006      	beq.n	801fa20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801fa12:	4b09      	ldr	r3, [pc, #36]	; (801fa38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801fa14:	f240 12e3 	movw	r2, #483	; 0x1e3
 801fa18:	490c      	ldr	r1, [pc, #48]	; (801fa4c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801fa1a:	4809      	ldr	r0, [pc, #36]	; (801fa40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801fa1c:	f000 fd7a 	bl	8020514 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801fa20:	6a3b      	ldr	r3, [r7, #32]
 801fa22:	2b00      	cmp	r3, #0
 801fa24:	bf14      	ite	ne
 801fa26:	2301      	movne	r3, #1
 801fa28:	2300      	moveq	r3, #0
 801fa2a:	b2db      	uxtb	r3, r3
 801fa2c:	e000      	b.n	801fa30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801fa2e:	2300      	movs	r3, #0
}
 801fa30:	4618      	mov	r0, r3
 801fa32:	3730      	adds	r7, #48	; 0x30
 801fa34:	46bd      	mov	sp, r7
 801fa36:	bd80      	pop	{r7, pc}
 801fa38:	08024344 	.word	0x08024344
 801fa3c:	08024428 	.word	0x08024428
 801fa40:	0802438c 	.word	0x0802438c
 801fa44:	08024448 	.word	0x08024448
 801fa48:	08024480 	.word	0x08024480
 801fa4c:	08024490 	.word	0x08024490

0801fa50 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801fa50:	b580      	push	{r7, lr}
 801fa52:	b08e      	sub	sp, #56	; 0x38
 801fa54:	af00      	add	r7, sp, #0
 801fa56:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801fa58:	687b      	ldr	r3, [r7, #4]
 801fa5a:	685b      	ldr	r3, [r3, #4]
 801fa5c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801fa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fa60:	781b      	ldrb	r3, [r3, #0]
 801fa62:	f003 030f 	and.w	r3, r3, #15
 801fa66:	b2db      	uxtb	r3, r3
 801fa68:	009b      	lsls	r3, r3, #2
 801fa6a:	b2db      	uxtb	r3, r3
 801fa6c:	2b14      	cmp	r3, #20
 801fa6e:	f040 8167 	bne.w	801fd40 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801fa72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fa74:	88db      	ldrh	r3, [r3, #6]
 801fa76:	b29b      	uxth	r3, r3
 801fa78:	4618      	mov	r0, r3
 801fa7a:	f7f5 ff27 	bl	80158cc <lwip_htons>
 801fa7e:	4603      	mov	r3, r0
 801fa80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fa84:	b29b      	uxth	r3, r3
 801fa86:	00db      	lsls	r3, r3, #3
 801fa88:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801fa8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fa8c:	885b      	ldrh	r3, [r3, #2]
 801fa8e:	b29b      	uxth	r3, r3
 801fa90:	4618      	mov	r0, r3
 801fa92:	f7f5 ff1b 	bl	80158cc <lwip_htons>
 801fa96:	4603      	mov	r3, r0
 801fa98:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801fa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fa9c:	781b      	ldrb	r3, [r3, #0]
 801fa9e:	f003 030f 	and.w	r3, r3, #15
 801faa2:	b2db      	uxtb	r3, r3
 801faa4:	009b      	lsls	r3, r3, #2
 801faa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801faaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801faae:	b29b      	uxth	r3, r3
 801fab0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801fab2:	429a      	cmp	r2, r3
 801fab4:	f0c0 8146 	bcc.w	801fd44 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801fab8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801fabc:	b29b      	uxth	r3, r3
 801fabe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801fac0:	1ad3      	subs	r3, r2, r3
 801fac2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801fac4:	6878      	ldr	r0, [r7, #4]
 801fac6:	f7f7 fb6d 	bl	80171a4 <pbuf_clen>
 801faca:	4603      	mov	r3, r0
 801facc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801face:	4ba3      	ldr	r3, [pc, #652]	; (801fd5c <ip4_reass+0x30c>)
 801fad0:	881b      	ldrh	r3, [r3, #0]
 801fad2:	461a      	mov	r2, r3
 801fad4:	8c3b      	ldrh	r3, [r7, #32]
 801fad6:	4413      	add	r3, r2
 801fad8:	2b0a      	cmp	r3, #10
 801fada:	dd10      	ble.n	801fafe <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801fadc:	8c3b      	ldrh	r3, [r7, #32]
 801fade:	4619      	mov	r1, r3
 801fae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801fae2:	f7ff fd81 	bl	801f5e8 <ip_reass_remove_oldest_datagram>
 801fae6:	4603      	mov	r3, r0
 801fae8:	2b00      	cmp	r3, #0
 801faea:	f000 812d 	beq.w	801fd48 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801faee:	4b9b      	ldr	r3, [pc, #620]	; (801fd5c <ip4_reass+0x30c>)
 801faf0:	881b      	ldrh	r3, [r3, #0]
 801faf2:	461a      	mov	r2, r3
 801faf4:	8c3b      	ldrh	r3, [r7, #32]
 801faf6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801faf8:	2b0a      	cmp	r3, #10
 801fafa:	f300 8125 	bgt.w	801fd48 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801fafe:	4b98      	ldr	r3, [pc, #608]	; (801fd60 <ip4_reass+0x310>)
 801fb00:	681b      	ldr	r3, [r3, #0]
 801fb02:	633b      	str	r3, [r7, #48]	; 0x30
 801fb04:	e015      	b.n	801fb32 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801fb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fb08:	695a      	ldr	r2, [r3, #20]
 801fb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fb0c:	68db      	ldr	r3, [r3, #12]
 801fb0e:	429a      	cmp	r2, r3
 801fb10:	d10c      	bne.n	801fb2c <ip4_reass+0xdc>
 801fb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fb14:	699a      	ldr	r2, [r3, #24]
 801fb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fb18:	691b      	ldr	r3, [r3, #16]
 801fb1a:	429a      	cmp	r2, r3
 801fb1c:	d106      	bne.n	801fb2c <ip4_reass+0xdc>
 801fb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fb20:	899a      	ldrh	r2, [r3, #12]
 801fb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fb24:	889b      	ldrh	r3, [r3, #4]
 801fb26:	b29b      	uxth	r3, r3
 801fb28:	429a      	cmp	r2, r3
 801fb2a:	d006      	beq.n	801fb3a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801fb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fb2e:	681b      	ldr	r3, [r3, #0]
 801fb30:	633b      	str	r3, [r7, #48]	; 0x30
 801fb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fb34:	2b00      	cmp	r3, #0
 801fb36:	d1e6      	bne.n	801fb06 <ip4_reass+0xb6>
 801fb38:	e000      	b.n	801fb3c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801fb3a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801fb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fb3e:	2b00      	cmp	r3, #0
 801fb40:	d109      	bne.n	801fb56 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801fb42:	8c3b      	ldrh	r3, [r7, #32]
 801fb44:	4619      	mov	r1, r3
 801fb46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801fb48:	f7ff fdb0 	bl	801f6ac <ip_reass_enqueue_new_datagram>
 801fb4c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801fb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fb50:	2b00      	cmp	r3, #0
 801fb52:	d11c      	bne.n	801fb8e <ip4_reass+0x13e>
      goto nullreturn;
 801fb54:	e0f9      	b.n	801fd4a <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801fb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fb58:	88db      	ldrh	r3, [r3, #6]
 801fb5a:	b29b      	uxth	r3, r3
 801fb5c:	4618      	mov	r0, r3
 801fb5e:	f7f5 feb5 	bl	80158cc <lwip_htons>
 801fb62:	4603      	mov	r3, r0
 801fb64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fb68:	2b00      	cmp	r3, #0
 801fb6a:	d110      	bne.n	801fb8e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801fb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fb6e:	89db      	ldrh	r3, [r3, #14]
 801fb70:	4618      	mov	r0, r3
 801fb72:	f7f5 feab 	bl	80158cc <lwip_htons>
 801fb76:	4603      	mov	r3, r0
 801fb78:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801fb7c:	2b00      	cmp	r3, #0
 801fb7e:	d006      	beq.n	801fb8e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801fb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fb82:	3308      	adds	r3, #8
 801fb84:	2214      	movs	r2, #20
 801fb86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801fb88:	4618      	mov	r0, r3
 801fb8a:	f000 fcb0 	bl	80204ee <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801fb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fb90:	88db      	ldrh	r3, [r3, #6]
 801fb92:	b29b      	uxth	r3, r3
 801fb94:	f003 0320 	and.w	r3, r3, #32
 801fb98:	2b00      	cmp	r3, #0
 801fb9a:	bf0c      	ite	eq
 801fb9c:	2301      	moveq	r3, #1
 801fb9e:	2300      	movne	r3, #0
 801fba0:	b2db      	uxtb	r3, r3
 801fba2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801fba4:	69fb      	ldr	r3, [r7, #28]
 801fba6:	2b00      	cmp	r3, #0
 801fba8:	d00e      	beq.n	801fbc8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801fbaa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801fbac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fbae:	4413      	add	r3, r2
 801fbb0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801fbb2:	8b7a      	ldrh	r2, [r7, #26]
 801fbb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801fbb6:	429a      	cmp	r2, r3
 801fbb8:	f0c0 80a0 	bcc.w	801fcfc <ip4_reass+0x2ac>
 801fbbc:	8b7b      	ldrh	r3, [r7, #26]
 801fbbe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801fbc2:	4293      	cmp	r3, r2
 801fbc4:	f200 809a 	bhi.w	801fcfc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801fbc8:	69fa      	ldr	r2, [r7, #28]
 801fbca:	6879      	ldr	r1, [r7, #4]
 801fbcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801fbce:	f7ff fdd5 	bl	801f77c <ip_reass_chain_frag_into_datagram_and_validate>
 801fbd2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801fbd4:	697b      	ldr	r3, [r7, #20]
 801fbd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801fbda:	f000 8091 	beq.w	801fd00 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801fbde:	4b5f      	ldr	r3, [pc, #380]	; (801fd5c <ip4_reass+0x30c>)
 801fbe0:	881a      	ldrh	r2, [r3, #0]
 801fbe2:	8c3b      	ldrh	r3, [r7, #32]
 801fbe4:	4413      	add	r3, r2
 801fbe6:	b29a      	uxth	r2, r3
 801fbe8:	4b5c      	ldr	r3, [pc, #368]	; (801fd5c <ip4_reass+0x30c>)
 801fbea:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801fbec:	69fb      	ldr	r3, [r7, #28]
 801fbee:	2b00      	cmp	r3, #0
 801fbf0:	d00d      	beq.n	801fc0e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801fbf2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801fbf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fbf6:	4413      	add	r3, r2
 801fbf8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801fbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fbfc:	8a7a      	ldrh	r2, [r7, #18]
 801fbfe:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801fc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fc02:	7f9b      	ldrb	r3, [r3, #30]
 801fc04:	f043 0301 	orr.w	r3, r3, #1
 801fc08:	b2da      	uxtb	r2, r3
 801fc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fc0c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801fc0e:	697b      	ldr	r3, [r7, #20]
 801fc10:	2b01      	cmp	r3, #1
 801fc12:	d171      	bne.n	801fcf8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801fc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fc16:	8b9b      	ldrh	r3, [r3, #28]
 801fc18:	3314      	adds	r3, #20
 801fc1a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801fc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fc1e:	685b      	ldr	r3, [r3, #4]
 801fc20:	685b      	ldr	r3, [r3, #4]
 801fc22:	681b      	ldr	r3, [r3, #0]
 801fc24:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801fc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fc28:	685b      	ldr	r3, [r3, #4]
 801fc2a:	685b      	ldr	r3, [r3, #4]
 801fc2c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801fc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fc30:	3308      	adds	r3, #8
 801fc32:	2214      	movs	r2, #20
 801fc34:	4619      	mov	r1, r3
 801fc36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801fc38:	f000 fc59 	bl	80204ee <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801fc3c:	8a3b      	ldrh	r3, [r7, #16]
 801fc3e:	4618      	mov	r0, r3
 801fc40:	f7f5 fe44 	bl	80158cc <lwip_htons>
 801fc44:	4603      	mov	r3, r0
 801fc46:	461a      	mov	r2, r3
 801fc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fc4a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801fc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fc4e:	2200      	movs	r2, #0
 801fc50:	719a      	strb	r2, [r3, #6]
 801fc52:	2200      	movs	r2, #0
 801fc54:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801fc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fc58:	2200      	movs	r2, #0
 801fc5a:	729a      	strb	r2, [r3, #10]
 801fc5c:	2200      	movs	r2, #0
 801fc5e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801fc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fc62:	685b      	ldr	r3, [r3, #4]
 801fc64:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801fc66:	e00d      	b.n	801fc84 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801fc68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fc6a:	685b      	ldr	r3, [r3, #4]
 801fc6c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801fc6e:	2114      	movs	r1, #20
 801fc70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801fc72:	f7f7 f983 	bl	8016f7c <pbuf_remove_header>
      pbuf_cat(p, r);
 801fc76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801fc78:	6878      	ldr	r0, [r7, #4]
 801fc7a:	f7f7 fad3 	bl	8017224 <pbuf_cat>
      r = iprh->next_pbuf;
 801fc7e:	68fb      	ldr	r3, [r7, #12]
 801fc80:	681b      	ldr	r3, [r3, #0]
 801fc82:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801fc84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fc86:	2b00      	cmp	r3, #0
 801fc88:	d1ee      	bne.n	801fc68 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801fc8a:	4b35      	ldr	r3, [pc, #212]	; (801fd60 <ip4_reass+0x310>)
 801fc8c:	681b      	ldr	r3, [r3, #0]
 801fc8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fc90:	429a      	cmp	r2, r3
 801fc92:	d102      	bne.n	801fc9a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801fc94:	2300      	movs	r3, #0
 801fc96:	62fb      	str	r3, [r7, #44]	; 0x2c
 801fc98:	e010      	b.n	801fcbc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801fc9a:	4b31      	ldr	r3, [pc, #196]	; (801fd60 <ip4_reass+0x310>)
 801fc9c:	681b      	ldr	r3, [r3, #0]
 801fc9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801fca0:	e007      	b.n	801fcb2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801fca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fca4:	681b      	ldr	r3, [r3, #0]
 801fca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fca8:	429a      	cmp	r2, r3
 801fcaa:	d006      	beq.n	801fcba <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801fcac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fcae:	681b      	ldr	r3, [r3, #0]
 801fcb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801fcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fcb4:	2b00      	cmp	r3, #0
 801fcb6:	d1f4      	bne.n	801fca2 <ip4_reass+0x252>
 801fcb8:	e000      	b.n	801fcbc <ip4_reass+0x26c>
          break;
 801fcba:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801fcbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801fcbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801fcc0:	f7ff fd2e 	bl	801f720 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801fcc4:	6878      	ldr	r0, [r7, #4]
 801fcc6:	f7f7 fa6d 	bl	80171a4 <pbuf_clen>
 801fcca:	4603      	mov	r3, r0
 801fccc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801fcce:	4b23      	ldr	r3, [pc, #140]	; (801fd5c <ip4_reass+0x30c>)
 801fcd0:	881b      	ldrh	r3, [r3, #0]
 801fcd2:	8c3a      	ldrh	r2, [r7, #32]
 801fcd4:	429a      	cmp	r2, r3
 801fcd6:	d906      	bls.n	801fce6 <ip4_reass+0x296>
 801fcd8:	4b22      	ldr	r3, [pc, #136]	; (801fd64 <ip4_reass+0x314>)
 801fcda:	f240 229b 	movw	r2, #667	; 0x29b
 801fcde:	4922      	ldr	r1, [pc, #136]	; (801fd68 <ip4_reass+0x318>)
 801fce0:	4822      	ldr	r0, [pc, #136]	; (801fd6c <ip4_reass+0x31c>)
 801fce2:	f000 fc17 	bl	8020514 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801fce6:	4b1d      	ldr	r3, [pc, #116]	; (801fd5c <ip4_reass+0x30c>)
 801fce8:	881a      	ldrh	r2, [r3, #0]
 801fcea:	8c3b      	ldrh	r3, [r7, #32]
 801fcec:	1ad3      	subs	r3, r2, r3
 801fcee:	b29a      	uxth	r2, r3
 801fcf0:	4b1a      	ldr	r3, [pc, #104]	; (801fd5c <ip4_reass+0x30c>)
 801fcf2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801fcf4:	687b      	ldr	r3, [r7, #4]
 801fcf6:	e02c      	b.n	801fd52 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801fcf8:	2300      	movs	r3, #0
 801fcfa:	e02a      	b.n	801fd52 <ip4_reass+0x302>

nullreturn_ipr:
 801fcfc:	bf00      	nop
 801fcfe:	e000      	b.n	801fd02 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801fd00:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801fd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd04:	2b00      	cmp	r3, #0
 801fd06:	d106      	bne.n	801fd16 <ip4_reass+0x2c6>
 801fd08:	4b16      	ldr	r3, [pc, #88]	; (801fd64 <ip4_reass+0x314>)
 801fd0a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801fd0e:	4918      	ldr	r1, [pc, #96]	; (801fd70 <ip4_reass+0x320>)
 801fd10:	4816      	ldr	r0, [pc, #88]	; (801fd6c <ip4_reass+0x31c>)
 801fd12:	f000 fbff 	bl	8020514 <iprintf>
  if (ipr->p == NULL) {
 801fd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd18:	685b      	ldr	r3, [r3, #4]
 801fd1a:	2b00      	cmp	r3, #0
 801fd1c:	d114      	bne.n	801fd48 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801fd1e:	4b10      	ldr	r3, [pc, #64]	; (801fd60 <ip4_reass+0x310>)
 801fd20:	681b      	ldr	r3, [r3, #0]
 801fd22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fd24:	429a      	cmp	r2, r3
 801fd26:	d006      	beq.n	801fd36 <ip4_reass+0x2e6>
 801fd28:	4b0e      	ldr	r3, [pc, #56]	; (801fd64 <ip4_reass+0x314>)
 801fd2a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801fd2e:	4911      	ldr	r1, [pc, #68]	; (801fd74 <ip4_reass+0x324>)
 801fd30:	480e      	ldr	r0, [pc, #56]	; (801fd6c <ip4_reass+0x31c>)
 801fd32:	f000 fbef 	bl	8020514 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801fd36:	2100      	movs	r1, #0
 801fd38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801fd3a:	f7ff fcf1 	bl	801f720 <ip_reass_dequeue_datagram>
 801fd3e:	e004      	b.n	801fd4a <ip4_reass+0x2fa>
    goto nullreturn;
 801fd40:	bf00      	nop
 801fd42:	e002      	b.n	801fd4a <ip4_reass+0x2fa>
    goto nullreturn;
 801fd44:	bf00      	nop
 801fd46:	e000      	b.n	801fd4a <ip4_reass+0x2fa>
  }

nullreturn:
 801fd48:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801fd4a:	6878      	ldr	r0, [r7, #4]
 801fd4c:	f7f7 f99c 	bl	8017088 <pbuf_free>
  return NULL;
 801fd50:	2300      	movs	r3, #0
}
 801fd52:	4618      	mov	r0, r3
 801fd54:	3738      	adds	r7, #56	; 0x38
 801fd56:	46bd      	mov	sp, r7
 801fd58:	bd80      	pop	{r7, pc}
 801fd5a:	bf00      	nop
 801fd5c:	20009484 	.word	0x20009484
 801fd60:	20009480 	.word	0x20009480
 801fd64:	08024344 	.word	0x08024344
 801fd68:	080244b4 	.word	0x080244b4
 801fd6c:	0802438c 	.word	0x0802438c
 801fd70:	080244d0 	.word	0x080244d0
 801fd74:	080244dc 	.word	0x080244dc

0801fd78 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801fd78:	b580      	push	{r7, lr}
 801fd7a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801fd7c:	2005      	movs	r0, #5
 801fd7e:	f7f6 fa91 	bl	80162a4 <memp_malloc>
 801fd82:	4603      	mov	r3, r0
}
 801fd84:	4618      	mov	r0, r3
 801fd86:	bd80      	pop	{r7, pc}

0801fd88 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801fd88:	b580      	push	{r7, lr}
 801fd8a:	b082      	sub	sp, #8
 801fd8c:	af00      	add	r7, sp, #0
 801fd8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801fd90:	687b      	ldr	r3, [r7, #4]
 801fd92:	2b00      	cmp	r3, #0
 801fd94:	d106      	bne.n	801fda4 <ip_frag_free_pbuf_custom_ref+0x1c>
 801fd96:	4b07      	ldr	r3, [pc, #28]	; (801fdb4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801fd98:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801fd9c:	4906      	ldr	r1, [pc, #24]	; (801fdb8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801fd9e:	4807      	ldr	r0, [pc, #28]	; (801fdbc <ip_frag_free_pbuf_custom_ref+0x34>)
 801fda0:	f000 fbb8 	bl	8020514 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801fda4:	6879      	ldr	r1, [r7, #4]
 801fda6:	2005      	movs	r0, #5
 801fda8:	f7f6 face 	bl	8016348 <memp_free>
}
 801fdac:	bf00      	nop
 801fdae:	3708      	adds	r7, #8
 801fdb0:	46bd      	mov	sp, r7
 801fdb2:	bd80      	pop	{r7, pc}
 801fdb4:	08024344 	.word	0x08024344
 801fdb8:	080244fc 	.word	0x080244fc
 801fdbc:	0802438c 	.word	0x0802438c

0801fdc0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801fdc0:	b580      	push	{r7, lr}
 801fdc2:	b084      	sub	sp, #16
 801fdc4:	af00      	add	r7, sp, #0
 801fdc6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801fdc8:	687b      	ldr	r3, [r7, #4]
 801fdca:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801fdcc:	68fb      	ldr	r3, [r7, #12]
 801fdce:	2b00      	cmp	r3, #0
 801fdd0:	d106      	bne.n	801fde0 <ipfrag_free_pbuf_custom+0x20>
 801fdd2:	4b11      	ldr	r3, [pc, #68]	; (801fe18 <ipfrag_free_pbuf_custom+0x58>)
 801fdd4:	f240 22ce 	movw	r2, #718	; 0x2ce
 801fdd8:	4910      	ldr	r1, [pc, #64]	; (801fe1c <ipfrag_free_pbuf_custom+0x5c>)
 801fdda:	4811      	ldr	r0, [pc, #68]	; (801fe20 <ipfrag_free_pbuf_custom+0x60>)
 801fddc:	f000 fb9a 	bl	8020514 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801fde0:	68fa      	ldr	r2, [r7, #12]
 801fde2:	687b      	ldr	r3, [r7, #4]
 801fde4:	429a      	cmp	r2, r3
 801fde6:	d006      	beq.n	801fdf6 <ipfrag_free_pbuf_custom+0x36>
 801fde8:	4b0b      	ldr	r3, [pc, #44]	; (801fe18 <ipfrag_free_pbuf_custom+0x58>)
 801fdea:	f240 22cf 	movw	r2, #719	; 0x2cf
 801fdee:	490d      	ldr	r1, [pc, #52]	; (801fe24 <ipfrag_free_pbuf_custom+0x64>)
 801fdf0:	480b      	ldr	r0, [pc, #44]	; (801fe20 <ipfrag_free_pbuf_custom+0x60>)
 801fdf2:	f000 fb8f 	bl	8020514 <iprintf>
  if (pcr->original != NULL) {
 801fdf6:	68fb      	ldr	r3, [r7, #12]
 801fdf8:	695b      	ldr	r3, [r3, #20]
 801fdfa:	2b00      	cmp	r3, #0
 801fdfc:	d004      	beq.n	801fe08 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801fdfe:	68fb      	ldr	r3, [r7, #12]
 801fe00:	695b      	ldr	r3, [r3, #20]
 801fe02:	4618      	mov	r0, r3
 801fe04:	f7f7 f940 	bl	8017088 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801fe08:	68f8      	ldr	r0, [r7, #12]
 801fe0a:	f7ff ffbd 	bl	801fd88 <ip_frag_free_pbuf_custom_ref>
}
 801fe0e:	bf00      	nop
 801fe10:	3710      	adds	r7, #16
 801fe12:	46bd      	mov	sp, r7
 801fe14:	bd80      	pop	{r7, pc}
 801fe16:	bf00      	nop
 801fe18:	08024344 	.word	0x08024344
 801fe1c:	08024508 	.word	0x08024508
 801fe20:	0802438c 	.word	0x0802438c
 801fe24:	08024514 	.word	0x08024514

0801fe28 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801fe28:	b580      	push	{r7, lr}
 801fe2a:	b094      	sub	sp, #80	; 0x50
 801fe2c:	af02      	add	r7, sp, #8
 801fe2e:	60f8      	str	r0, [r7, #12]
 801fe30:	60b9      	str	r1, [r7, #8]
 801fe32:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801fe34:	2300      	movs	r3, #0
 801fe36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801fe3a:	68bb      	ldr	r3, [r7, #8]
 801fe3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801fe3e:	3b14      	subs	r3, #20
 801fe40:	2b00      	cmp	r3, #0
 801fe42:	da00      	bge.n	801fe46 <ip4_frag+0x1e>
 801fe44:	3307      	adds	r3, #7
 801fe46:	10db      	asrs	r3, r3, #3
 801fe48:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801fe4a:	2314      	movs	r3, #20
 801fe4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801fe4e:	68fb      	ldr	r3, [r7, #12]
 801fe50:	685b      	ldr	r3, [r3, #4]
 801fe52:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801fe54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fe56:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801fe58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fe5a:	781b      	ldrb	r3, [r3, #0]
 801fe5c:	f003 030f 	and.w	r3, r3, #15
 801fe60:	b2db      	uxtb	r3, r3
 801fe62:	009b      	lsls	r3, r3, #2
 801fe64:	b2db      	uxtb	r3, r3
 801fe66:	2b14      	cmp	r3, #20
 801fe68:	d002      	beq.n	801fe70 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801fe6a:	f06f 0305 	mvn.w	r3, #5
 801fe6e:	e10f      	b.n	8020090 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801fe70:	68fb      	ldr	r3, [r7, #12]
 801fe72:	895b      	ldrh	r3, [r3, #10]
 801fe74:	2b13      	cmp	r3, #19
 801fe76:	d809      	bhi.n	801fe8c <ip4_frag+0x64>
 801fe78:	4b87      	ldr	r3, [pc, #540]	; (8020098 <ip4_frag+0x270>)
 801fe7a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801fe7e:	4987      	ldr	r1, [pc, #540]	; (802009c <ip4_frag+0x274>)
 801fe80:	4887      	ldr	r0, [pc, #540]	; (80200a0 <ip4_frag+0x278>)
 801fe82:	f000 fb47 	bl	8020514 <iprintf>
 801fe86:	f06f 0305 	mvn.w	r3, #5
 801fe8a:	e101      	b.n	8020090 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801fe8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fe8e:	88db      	ldrh	r3, [r3, #6]
 801fe90:	b29b      	uxth	r3, r3
 801fe92:	4618      	mov	r0, r3
 801fe94:	f7f5 fd1a 	bl	80158cc <lwip_htons>
 801fe98:	4603      	mov	r3, r0
 801fe9a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801fe9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801fe9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fea2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801fea6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801fea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801feac:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801feae:	68fb      	ldr	r3, [r7, #12]
 801feb0:	891b      	ldrh	r3, [r3, #8]
 801feb2:	3b14      	subs	r3, #20
 801feb4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801feb8:	e0e0      	b.n	802007c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801feba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801febc:	00db      	lsls	r3, r3, #3
 801febe:	b29b      	uxth	r3, r3
 801fec0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801fec4:	4293      	cmp	r3, r2
 801fec6:	bf28      	it	cs
 801fec8:	4613      	movcs	r3, r2
 801feca:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801fecc:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fed0:	2114      	movs	r1, #20
 801fed2:	200e      	movs	r0, #14
 801fed4:	f7f6 fdf8 	bl	8016ac8 <pbuf_alloc>
 801fed8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801feda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fedc:	2b00      	cmp	r3, #0
 801fede:	f000 80d4 	beq.w	802008a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801fee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fee4:	895b      	ldrh	r3, [r3, #10]
 801fee6:	2b13      	cmp	r3, #19
 801fee8:	d806      	bhi.n	801fef8 <ip4_frag+0xd0>
 801feea:	4b6b      	ldr	r3, [pc, #428]	; (8020098 <ip4_frag+0x270>)
 801feec:	f240 3225 	movw	r2, #805	; 0x325
 801fef0:	496c      	ldr	r1, [pc, #432]	; (80200a4 <ip4_frag+0x27c>)
 801fef2:	486b      	ldr	r0, [pc, #428]	; (80200a0 <ip4_frag+0x278>)
 801fef4:	f000 fb0e 	bl	8020514 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801fef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fefa:	685b      	ldr	r3, [r3, #4]
 801fefc:	2214      	movs	r2, #20
 801fefe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ff00:	4618      	mov	r0, r3
 801ff02:	f000 faf4 	bl	80204ee <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801ff06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ff08:	685b      	ldr	r3, [r3, #4]
 801ff0a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801ff0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ff0e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801ff12:	e064      	b.n	801ffde <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ff14:	68fb      	ldr	r3, [r7, #12]
 801ff16:	895a      	ldrh	r2, [r3, #10]
 801ff18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ff1a:	1ad3      	subs	r3, r2, r3
 801ff1c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ff1e:	68fb      	ldr	r3, [r7, #12]
 801ff20:	895b      	ldrh	r3, [r3, #10]
 801ff22:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ff24:	429a      	cmp	r2, r3
 801ff26:	d906      	bls.n	801ff36 <ip4_frag+0x10e>
 801ff28:	4b5b      	ldr	r3, [pc, #364]	; (8020098 <ip4_frag+0x270>)
 801ff2a:	f240 322d 	movw	r2, #813	; 0x32d
 801ff2e:	495e      	ldr	r1, [pc, #376]	; (80200a8 <ip4_frag+0x280>)
 801ff30:	485b      	ldr	r0, [pc, #364]	; (80200a0 <ip4_frag+0x278>)
 801ff32:	f000 faef 	bl	8020514 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801ff36:	8bfa      	ldrh	r2, [r7, #30]
 801ff38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ff3c:	4293      	cmp	r3, r2
 801ff3e:	bf28      	it	cs
 801ff40:	4613      	movcs	r3, r2
 801ff42:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801ff46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ff4a:	2b00      	cmp	r3, #0
 801ff4c:	d105      	bne.n	801ff5a <ip4_frag+0x132>
        poff = 0;
 801ff4e:	2300      	movs	r3, #0
 801ff50:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801ff52:	68fb      	ldr	r3, [r7, #12]
 801ff54:	681b      	ldr	r3, [r3, #0]
 801ff56:	60fb      	str	r3, [r7, #12]
        continue;
 801ff58:	e041      	b.n	801ffde <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801ff5a:	f7ff ff0d 	bl	801fd78 <ip_frag_alloc_pbuf_custom_ref>
 801ff5e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801ff60:	69bb      	ldr	r3, [r7, #24]
 801ff62:	2b00      	cmp	r3, #0
 801ff64:	d103      	bne.n	801ff6e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801ff66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ff68:	f7f7 f88e 	bl	8017088 <pbuf_free>
        goto memerr;
 801ff6c:	e08e      	b.n	802008c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ff6e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801ff70:	68fb      	ldr	r3, [r7, #12]
 801ff72:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ff74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ff76:	4413      	add	r3, r2
 801ff78:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801ff7c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ff80:	9201      	str	r2, [sp, #4]
 801ff82:	9300      	str	r3, [sp, #0]
 801ff84:	4603      	mov	r3, r0
 801ff86:	2241      	movs	r2, #65	; 0x41
 801ff88:	2000      	movs	r0, #0
 801ff8a:	f7f6 fec3 	bl	8016d14 <pbuf_alloced_custom>
 801ff8e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801ff90:	697b      	ldr	r3, [r7, #20]
 801ff92:	2b00      	cmp	r3, #0
 801ff94:	d106      	bne.n	801ffa4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801ff96:	69b8      	ldr	r0, [r7, #24]
 801ff98:	f7ff fef6 	bl	801fd88 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801ff9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ff9e:	f7f7 f873 	bl	8017088 <pbuf_free>
        goto memerr;
 801ffa2:	e073      	b.n	802008c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 801ffa4:	68f8      	ldr	r0, [r7, #12]
 801ffa6:	f7f7 f915 	bl	80171d4 <pbuf_ref>
      pcr->original = p;
 801ffaa:	69bb      	ldr	r3, [r7, #24]
 801ffac:	68fa      	ldr	r2, [r7, #12]
 801ffae:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801ffb0:	69bb      	ldr	r3, [r7, #24]
 801ffb2:	4a3e      	ldr	r2, [pc, #248]	; (80200ac <ip4_frag+0x284>)
 801ffb4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801ffb6:	6979      	ldr	r1, [r7, #20]
 801ffb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ffba:	f7f7 f933 	bl	8017224 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801ffbe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801ffc2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ffc6:	1ad3      	subs	r3, r2, r3
 801ffc8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801ffcc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ffd0:	2b00      	cmp	r3, #0
 801ffd2:	d004      	beq.n	801ffde <ip4_frag+0x1b6>
        poff = 0;
 801ffd4:	2300      	movs	r3, #0
 801ffd6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801ffd8:	68fb      	ldr	r3, [r7, #12]
 801ffda:	681b      	ldr	r3, [r3, #0]
 801ffdc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801ffde:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ffe2:	2b00      	cmp	r3, #0
 801ffe4:	d196      	bne.n	801ff14 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801ffe6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ffe8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ffec:	4413      	add	r3, r2
 801ffee:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801fff0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801fff4:	68bb      	ldr	r3, [r7, #8]
 801fff6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801fff8:	3b14      	subs	r3, #20
 801fffa:	429a      	cmp	r2, r3
 801fffc:	bfd4      	ite	le
 801fffe:	2301      	movle	r3, #1
 8020000:	2300      	movgt	r3, #0
 8020002:	b2db      	uxtb	r3, r3
 8020004:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8020006:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802000a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802000e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8020010:	6a3b      	ldr	r3, [r7, #32]
 8020012:	2b00      	cmp	r3, #0
 8020014:	d002      	beq.n	802001c <ip4_frag+0x1f4>
 8020016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020018:	2b00      	cmp	r3, #0
 802001a:	d003      	beq.n	8020024 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 802001c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802001e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8020022:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8020024:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020026:	4618      	mov	r0, r3
 8020028:	f7f5 fc50 	bl	80158cc <lwip_htons>
 802002c:	4603      	mov	r3, r0
 802002e:	461a      	mov	r2, r3
 8020030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020032:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8020034:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8020036:	3314      	adds	r3, #20
 8020038:	b29b      	uxth	r3, r3
 802003a:	4618      	mov	r0, r3
 802003c:	f7f5 fc46 	bl	80158cc <lwip_htons>
 8020040:	4603      	mov	r3, r0
 8020042:	461a      	mov	r2, r3
 8020044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020046:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8020048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802004a:	2200      	movs	r2, #0
 802004c:	729a      	strb	r2, [r3, #10]
 802004e:	2200      	movs	r2, #0
 8020050:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8020052:	68bb      	ldr	r3, [r7, #8]
 8020054:	695b      	ldr	r3, [r3, #20]
 8020056:	687a      	ldr	r2, [r7, #4]
 8020058:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802005a:	68b8      	ldr	r0, [r7, #8]
 802005c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 802005e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020060:	f7f7 f812 	bl	8017088 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8020064:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8020068:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802006a:	1ad3      	subs	r3, r2, r3
 802006c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8020070:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8020074:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8020076:	4413      	add	r3, r2
 8020078:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 802007c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8020080:	2b00      	cmp	r3, #0
 8020082:	f47f af1a 	bne.w	801feba <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8020086:	2300      	movs	r3, #0
 8020088:	e002      	b.n	8020090 <ip4_frag+0x268>
      goto memerr;
 802008a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 802008c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8020090:	4618      	mov	r0, r3
 8020092:	3748      	adds	r7, #72	; 0x48
 8020094:	46bd      	mov	sp, r7
 8020096:	bd80      	pop	{r7, pc}
 8020098:	08024344 	.word	0x08024344
 802009c:	08024520 	.word	0x08024520
 80200a0:	0802438c 	.word	0x0802438c
 80200a4:	0802453c 	.word	0x0802453c
 80200a8:	0802455c 	.word	0x0802455c
 80200ac:	0801fdc1 	.word	0x0801fdc1

080200b0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80200b0:	b580      	push	{r7, lr}
 80200b2:	b086      	sub	sp, #24
 80200b4:	af00      	add	r7, sp, #0
 80200b6:	6078      	str	r0, [r7, #4]
 80200b8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80200ba:	230e      	movs	r3, #14
 80200bc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80200be:	687b      	ldr	r3, [r7, #4]
 80200c0:	895b      	ldrh	r3, [r3, #10]
 80200c2:	2b0e      	cmp	r3, #14
 80200c4:	d96e      	bls.n	80201a4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80200c6:	687b      	ldr	r3, [r7, #4]
 80200c8:	7bdb      	ldrb	r3, [r3, #15]
 80200ca:	2b00      	cmp	r3, #0
 80200cc:	d106      	bne.n	80200dc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80200ce:	683b      	ldr	r3, [r7, #0]
 80200d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80200d4:	3301      	adds	r3, #1
 80200d6:	b2da      	uxtb	r2, r3
 80200d8:	687b      	ldr	r3, [r7, #4]
 80200da:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80200dc:	687b      	ldr	r3, [r7, #4]
 80200de:	685b      	ldr	r3, [r3, #4]
 80200e0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80200e2:	693b      	ldr	r3, [r7, #16]
 80200e4:	7b1a      	ldrb	r2, [r3, #12]
 80200e6:	7b5b      	ldrb	r3, [r3, #13]
 80200e8:	021b      	lsls	r3, r3, #8
 80200ea:	4313      	orrs	r3, r2
 80200ec:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80200ee:	693b      	ldr	r3, [r7, #16]
 80200f0:	781b      	ldrb	r3, [r3, #0]
 80200f2:	f003 0301 	and.w	r3, r3, #1
 80200f6:	2b00      	cmp	r3, #0
 80200f8:	d023      	beq.n	8020142 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80200fa:	693b      	ldr	r3, [r7, #16]
 80200fc:	781b      	ldrb	r3, [r3, #0]
 80200fe:	2b01      	cmp	r3, #1
 8020100:	d10f      	bne.n	8020122 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8020102:	693b      	ldr	r3, [r7, #16]
 8020104:	785b      	ldrb	r3, [r3, #1]
 8020106:	2b00      	cmp	r3, #0
 8020108:	d11b      	bne.n	8020142 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 802010a:	693b      	ldr	r3, [r7, #16]
 802010c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802010e:	2b5e      	cmp	r3, #94	; 0x5e
 8020110:	d117      	bne.n	8020142 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8020112:	687b      	ldr	r3, [r7, #4]
 8020114:	7b5b      	ldrb	r3, [r3, #13]
 8020116:	f043 0310 	orr.w	r3, r3, #16
 802011a:	b2da      	uxtb	r2, r3
 802011c:	687b      	ldr	r3, [r7, #4]
 802011e:	735a      	strb	r2, [r3, #13]
 8020120:	e00f      	b.n	8020142 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8020122:	693b      	ldr	r3, [r7, #16]
 8020124:	2206      	movs	r2, #6
 8020126:	4928      	ldr	r1, [pc, #160]	; (80201c8 <ethernet_input+0x118>)
 8020128:	4618      	mov	r0, r3
 802012a:	f000 f9d1 	bl	80204d0 <memcmp>
 802012e:	4603      	mov	r3, r0
 8020130:	2b00      	cmp	r3, #0
 8020132:	d106      	bne.n	8020142 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8020134:	687b      	ldr	r3, [r7, #4]
 8020136:	7b5b      	ldrb	r3, [r3, #13]
 8020138:	f043 0308 	orr.w	r3, r3, #8
 802013c:	b2da      	uxtb	r2, r3
 802013e:	687b      	ldr	r3, [r7, #4]
 8020140:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8020142:	89fb      	ldrh	r3, [r7, #14]
 8020144:	2b08      	cmp	r3, #8
 8020146:	d003      	beq.n	8020150 <ethernet_input+0xa0>
 8020148:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 802014c:	d014      	beq.n	8020178 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 802014e:	e032      	b.n	80201b6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8020150:	683b      	ldr	r3, [r7, #0]
 8020152:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8020156:	f003 0308 	and.w	r3, r3, #8
 802015a:	2b00      	cmp	r3, #0
 802015c:	d024      	beq.n	80201a8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802015e:	8afb      	ldrh	r3, [r7, #22]
 8020160:	4619      	mov	r1, r3
 8020162:	6878      	ldr	r0, [r7, #4]
 8020164:	f7f6 ff0a 	bl	8016f7c <pbuf_remove_header>
 8020168:	4603      	mov	r3, r0
 802016a:	2b00      	cmp	r3, #0
 802016c:	d11e      	bne.n	80201ac <ethernet_input+0xfc>
        ip4_input(p, netif);
 802016e:	6839      	ldr	r1, [r7, #0]
 8020170:	6878      	ldr	r0, [r7, #4]
 8020172:	f7fe ff2d 	bl	801efd0 <ip4_input>
      break;
 8020176:	e013      	b.n	80201a0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8020178:	683b      	ldr	r3, [r7, #0]
 802017a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802017e:	f003 0308 	and.w	r3, r3, #8
 8020182:	2b00      	cmp	r3, #0
 8020184:	d014      	beq.n	80201b0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8020186:	8afb      	ldrh	r3, [r7, #22]
 8020188:	4619      	mov	r1, r3
 802018a:	6878      	ldr	r0, [r7, #4]
 802018c:	f7f6 fef6 	bl	8016f7c <pbuf_remove_header>
 8020190:	4603      	mov	r3, r0
 8020192:	2b00      	cmp	r3, #0
 8020194:	d10e      	bne.n	80201b4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8020196:	6839      	ldr	r1, [r7, #0]
 8020198:	6878      	ldr	r0, [r7, #4]
 802019a:	f7fe f8cd 	bl	801e338 <etharp_input>
      break;
 802019e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80201a0:	2300      	movs	r3, #0
 80201a2:	e00c      	b.n	80201be <ethernet_input+0x10e>
    goto free_and_return;
 80201a4:	bf00      	nop
 80201a6:	e006      	b.n	80201b6 <ethernet_input+0x106>
        goto free_and_return;
 80201a8:	bf00      	nop
 80201aa:	e004      	b.n	80201b6 <ethernet_input+0x106>
        goto free_and_return;
 80201ac:	bf00      	nop
 80201ae:	e002      	b.n	80201b6 <ethernet_input+0x106>
        goto free_and_return;
 80201b0:	bf00      	nop
 80201b2:	e000      	b.n	80201b6 <ethernet_input+0x106>
        goto free_and_return;
 80201b4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80201b6:	6878      	ldr	r0, [r7, #4]
 80201b8:	f7f6 ff66 	bl	8017088 <pbuf_free>
  return ERR_OK;
 80201bc:	2300      	movs	r3, #0
}
 80201be:	4618      	mov	r0, r3
 80201c0:	3718      	adds	r7, #24
 80201c2:	46bd      	mov	sp, r7
 80201c4:	bd80      	pop	{r7, pc}
 80201c6:	bf00      	nop
 80201c8:	08035274 	.word	0x08035274

080201cc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80201cc:	b580      	push	{r7, lr}
 80201ce:	b086      	sub	sp, #24
 80201d0:	af00      	add	r7, sp, #0
 80201d2:	60f8      	str	r0, [r7, #12]
 80201d4:	60b9      	str	r1, [r7, #8]
 80201d6:	607a      	str	r2, [r7, #4]
 80201d8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80201da:	8c3b      	ldrh	r3, [r7, #32]
 80201dc:	4618      	mov	r0, r3
 80201de:	f7f5 fb75 	bl	80158cc <lwip_htons>
 80201e2:	4603      	mov	r3, r0
 80201e4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80201e6:	210e      	movs	r1, #14
 80201e8:	68b8      	ldr	r0, [r7, #8]
 80201ea:	f7f6 feb7 	bl	8016f5c <pbuf_add_header>
 80201ee:	4603      	mov	r3, r0
 80201f0:	2b00      	cmp	r3, #0
 80201f2:	d125      	bne.n	8020240 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80201f4:	68bb      	ldr	r3, [r7, #8]
 80201f6:	685b      	ldr	r3, [r3, #4]
 80201f8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80201fa:	693b      	ldr	r3, [r7, #16]
 80201fc:	8afa      	ldrh	r2, [r7, #22]
 80201fe:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8020200:	693b      	ldr	r3, [r7, #16]
 8020202:	2206      	movs	r2, #6
 8020204:	6839      	ldr	r1, [r7, #0]
 8020206:	4618      	mov	r0, r3
 8020208:	f000 f971 	bl	80204ee <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 802020c:	693b      	ldr	r3, [r7, #16]
 802020e:	3306      	adds	r3, #6
 8020210:	2206      	movs	r2, #6
 8020212:	6879      	ldr	r1, [r7, #4]
 8020214:	4618      	mov	r0, r3
 8020216:	f000 f96a 	bl	80204ee <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 802021a:	68fb      	ldr	r3, [r7, #12]
 802021c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8020220:	2b06      	cmp	r3, #6
 8020222:	d006      	beq.n	8020232 <ethernet_output+0x66>
 8020224:	4b0a      	ldr	r3, [pc, #40]	; (8020250 <ethernet_output+0x84>)
 8020226:	f240 1233 	movw	r2, #307	; 0x133
 802022a:	490a      	ldr	r1, [pc, #40]	; (8020254 <ethernet_output+0x88>)
 802022c:	480a      	ldr	r0, [pc, #40]	; (8020258 <ethernet_output+0x8c>)
 802022e:	f000 f971 	bl	8020514 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8020232:	68fb      	ldr	r3, [r7, #12]
 8020234:	699b      	ldr	r3, [r3, #24]
 8020236:	68b9      	ldr	r1, [r7, #8]
 8020238:	68f8      	ldr	r0, [r7, #12]
 802023a:	4798      	blx	r3
 802023c:	4603      	mov	r3, r0
 802023e:	e002      	b.n	8020246 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8020240:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8020242:	f06f 0301 	mvn.w	r3, #1
}
 8020246:	4618      	mov	r0, r3
 8020248:	3718      	adds	r7, #24
 802024a:	46bd      	mov	sp, r7
 802024c:	bd80      	pop	{r7, pc}
 802024e:	bf00      	nop
 8020250:	0802456c 	.word	0x0802456c
 8020254:	080245a4 	.word	0x080245a4
 8020258:	080245d8 	.word	0x080245d8

0802025c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 802025c:	b580      	push	{r7, lr}
 802025e:	b086      	sub	sp, #24
 8020260:	af00      	add	r7, sp, #0
 8020262:	6078      	str	r0, [r7, #4]
 8020264:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8020266:	683b      	ldr	r3, [r7, #0]
 8020268:	60bb      	str	r3, [r7, #8]
 802026a:	2304      	movs	r3, #4
 802026c:	60fb      	str	r3, [r7, #12]
 802026e:	2300      	movs	r3, #0
 8020270:	613b      	str	r3, [r7, #16]
 8020272:	2300      	movs	r3, #0
 8020274:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8020276:	f107 0308 	add.w	r3, r7, #8
 802027a:	2100      	movs	r1, #0
 802027c:	4618      	mov	r0, r3
 802027e:	f7f1 fe39 	bl	8011ef4 <osMessageCreate>
 8020282:	4602      	mov	r2, r0
 8020284:	687b      	ldr	r3, [r7, #4]
 8020286:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8020288:	687b      	ldr	r3, [r7, #4]
 802028a:	681b      	ldr	r3, [r3, #0]
 802028c:	2b00      	cmp	r3, #0
 802028e:	d102      	bne.n	8020296 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8020290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020294:	e000      	b.n	8020298 <sys_mbox_new+0x3c>

  return ERR_OK;
 8020296:	2300      	movs	r3, #0
}
 8020298:	4618      	mov	r0, r3
 802029a:	3718      	adds	r7, #24
 802029c:	46bd      	mov	sp, r7
 802029e:	bd80      	pop	{r7, pc}

080202a0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80202a0:	b580      	push	{r7, lr}
 80202a2:	b084      	sub	sp, #16
 80202a4:	af00      	add	r7, sp, #0
 80202a6:	6078      	str	r0, [r7, #4]
 80202a8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80202aa:	687b      	ldr	r3, [r7, #4]
 80202ac:	681b      	ldr	r3, [r3, #0]
 80202ae:	6839      	ldr	r1, [r7, #0]
 80202b0:	2200      	movs	r2, #0
 80202b2:	4618      	mov	r0, r3
 80202b4:	f7f1 fe48 	bl	8011f48 <osMessagePut>
 80202b8:	4603      	mov	r3, r0
 80202ba:	2b00      	cmp	r3, #0
 80202bc:	d102      	bne.n	80202c4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80202be:	2300      	movs	r3, #0
 80202c0:	73fb      	strb	r3, [r7, #15]
 80202c2:	e001      	b.n	80202c8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80202c4:	23ff      	movs	r3, #255	; 0xff
 80202c6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80202c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80202cc:	4618      	mov	r0, r3
 80202ce:	3710      	adds	r7, #16
 80202d0:	46bd      	mov	sp, r7
 80202d2:	bd80      	pop	{r7, pc}

080202d4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80202d4:	b580      	push	{r7, lr}
 80202d6:	b08c      	sub	sp, #48	; 0x30
 80202d8:	af00      	add	r7, sp, #0
 80202da:	61f8      	str	r0, [r7, #28]
 80202dc:	61b9      	str	r1, [r7, #24]
 80202de:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80202e0:	f7f1 fc43 	bl	8011b6a <osKernelSysTick>
 80202e4:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80202e6:	697b      	ldr	r3, [r7, #20]
 80202e8:	2b00      	cmp	r3, #0
 80202ea:	d017      	beq.n	802031c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80202ec:	69fb      	ldr	r3, [r7, #28]
 80202ee:	6819      	ldr	r1, [r3, #0]
 80202f0:	f107 0320 	add.w	r3, r7, #32
 80202f4:	697a      	ldr	r2, [r7, #20]
 80202f6:	4618      	mov	r0, r3
 80202f8:	f7f1 fe66 	bl	8011fc8 <osMessageGet>

    if(event.status == osEventMessage)
 80202fc:	6a3b      	ldr	r3, [r7, #32]
 80202fe:	2b10      	cmp	r3, #16
 8020300:	d109      	bne.n	8020316 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8020302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020304:	461a      	mov	r2, r3
 8020306:	69bb      	ldr	r3, [r7, #24]
 8020308:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 802030a:	f7f1 fc2e 	bl	8011b6a <osKernelSysTick>
 802030e:	4602      	mov	r2, r0
 8020310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020312:	1ad3      	subs	r3, r2, r3
 8020314:	e019      	b.n	802034a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8020316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802031a:	e016      	b.n	802034a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 802031c:	69fb      	ldr	r3, [r7, #28]
 802031e:	6819      	ldr	r1, [r3, #0]
 8020320:	463b      	mov	r3, r7
 8020322:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020326:	4618      	mov	r0, r3
 8020328:	f7f1 fe4e 	bl	8011fc8 <osMessageGet>
 802032c:	f107 0320 	add.w	r3, r7, #32
 8020330:	463a      	mov	r2, r7
 8020332:	ca07      	ldmia	r2, {r0, r1, r2}
 8020334:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8020338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802033a:	461a      	mov	r2, r3
 802033c:	69bb      	ldr	r3, [r7, #24]
 802033e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8020340:	f7f1 fc13 	bl	8011b6a <osKernelSysTick>
 8020344:	4602      	mov	r2, r0
 8020346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020348:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 802034a:	4618      	mov	r0, r3
 802034c:	3730      	adds	r7, #48	; 0x30
 802034e:	46bd      	mov	sp, r7
 8020350:	bd80      	pop	{r7, pc}

08020352 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8020352:	b480      	push	{r7}
 8020354:	b083      	sub	sp, #12
 8020356:	af00      	add	r7, sp, #0
 8020358:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 802035a:	687b      	ldr	r3, [r7, #4]
 802035c:	681b      	ldr	r3, [r3, #0]
 802035e:	2b00      	cmp	r3, #0
 8020360:	d101      	bne.n	8020366 <sys_mbox_valid+0x14>
    return 0;
 8020362:	2300      	movs	r3, #0
 8020364:	e000      	b.n	8020368 <sys_mbox_valid+0x16>
  else
    return 1;
 8020366:	2301      	movs	r3, #1
}
 8020368:	4618      	mov	r0, r3
 802036a:	370c      	adds	r7, #12
 802036c:	46bd      	mov	sp, r7
 802036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020372:	4770      	bx	lr

08020374 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8020374:	b580      	push	{r7, lr}
 8020376:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8020378:	4803      	ldr	r0, [pc, #12]	; (8020388 <sys_init+0x14>)
 802037a:	f7f1 fc66 	bl	8011c4a <osMutexCreate>
 802037e:	4602      	mov	r2, r0
 8020380:	4b02      	ldr	r3, [pc, #8]	; (802038c <sys_init+0x18>)
 8020382:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8020384:	bf00      	nop
 8020386:	bd80      	pop	{r7, pc}
 8020388:	08035284 	.word	0x08035284
 802038c:	2001ff10 	.word	0x2001ff10

08020390 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8020390:	b580      	push	{r7, lr}
 8020392:	b084      	sub	sp, #16
 8020394:	af00      	add	r7, sp, #0
 8020396:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8020398:	2300      	movs	r3, #0
 802039a:	60bb      	str	r3, [r7, #8]
 802039c:	2300      	movs	r3, #0
 802039e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80203a0:	f107 0308 	add.w	r3, r7, #8
 80203a4:	4618      	mov	r0, r3
 80203a6:	f7f1 fc50 	bl	8011c4a <osMutexCreate>
 80203aa:	4602      	mov	r2, r0
 80203ac:	687b      	ldr	r3, [r7, #4]
 80203ae:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80203b0:	687b      	ldr	r3, [r7, #4]
 80203b2:	681b      	ldr	r3, [r3, #0]
 80203b4:	2b00      	cmp	r3, #0
 80203b6:	d102      	bne.n	80203be <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80203b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80203bc:	e000      	b.n	80203c0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80203be:	2300      	movs	r3, #0
}
 80203c0:	4618      	mov	r0, r3
 80203c2:	3710      	adds	r7, #16
 80203c4:	46bd      	mov	sp, r7
 80203c6:	bd80      	pop	{r7, pc}

080203c8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80203c8:	b580      	push	{r7, lr}
 80203ca:	b082      	sub	sp, #8
 80203cc:	af00      	add	r7, sp, #0
 80203ce:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80203d0:	687b      	ldr	r3, [r7, #4]
 80203d2:	681b      	ldr	r3, [r3, #0]
 80203d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80203d8:	4618      	mov	r0, r3
 80203da:	f7f1 fc4f 	bl	8011c7c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80203de:	bf00      	nop
 80203e0:	3708      	adds	r7, #8
 80203e2:	46bd      	mov	sp, r7
 80203e4:	bd80      	pop	{r7, pc}

080203e6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80203e6:	b580      	push	{r7, lr}
 80203e8:	b082      	sub	sp, #8
 80203ea:	af00      	add	r7, sp, #0
 80203ec:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80203ee:	687b      	ldr	r3, [r7, #4]
 80203f0:	681b      	ldr	r3, [r3, #0]
 80203f2:	4618      	mov	r0, r3
 80203f4:	f7f1 fc90 	bl	8011d18 <osMutexRelease>
}
 80203f8:	bf00      	nop
 80203fa:	3708      	adds	r7, #8
 80203fc:	46bd      	mov	sp, r7
 80203fe:	bd80      	pop	{r7, pc}

08020400 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8020400:	b580      	push	{r7, lr}
 8020402:	b08c      	sub	sp, #48	; 0x30
 8020404:	af00      	add	r7, sp, #0
 8020406:	60f8      	str	r0, [r7, #12]
 8020408:	60b9      	str	r1, [r7, #8]
 802040a:	607a      	str	r2, [r7, #4]
 802040c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 802040e:	f107 0314 	add.w	r3, r7, #20
 8020412:	2200      	movs	r2, #0
 8020414:	601a      	str	r2, [r3, #0]
 8020416:	605a      	str	r2, [r3, #4]
 8020418:	609a      	str	r2, [r3, #8]
 802041a:	60da      	str	r2, [r3, #12]
 802041c:	611a      	str	r2, [r3, #16]
 802041e:	615a      	str	r2, [r3, #20]
 8020420:	619a      	str	r2, [r3, #24]
 8020422:	68fb      	ldr	r3, [r7, #12]
 8020424:	617b      	str	r3, [r7, #20]
 8020426:	68bb      	ldr	r3, [r7, #8]
 8020428:	61bb      	str	r3, [r7, #24]
 802042a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802042c:	b21b      	sxth	r3, r3
 802042e:	83bb      	strh	r3, [r7, #28]
 8020430:	683b      	ldr	r3, [r7, #0]
 8020432:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8020434:	f107 0314 	add.w	r3, r7, #20
 8020438:	6879      	ldr	r1, [r7, #4]
 802043a:	4618      	mov	r0, r3
 802043c:	f7f1 fba5 	bl	8011b8a <osThreadCreate>
 8020440:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8020442:	4618      	mov	r0, r3
 8020444:	3730      	adds	r7, #48	; 0x30
 8020446:	46bd      	mov	sp, r7
 8020448:	bd80      	pop	{r7, pc}
	...

0802044c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 802044c:	b580      	push	{r7, lr}
 802044e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8020450:	4b04      	ldr	r3, [pc, #16]	; (8020464 <sys_arch_protect+0x18>)
 8020452:	681b      	ldr	r3, [r3, #0]
 8020454:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020458:	4618      	mov	r0, r3
 802045a:	f7f1 fc0f 	bl	8011c7c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 802045e:	2301      	movs	r3, #1
}
 8020460:	4618      	mov	r0, r3
 8020462:	bd80      	pop	{r7, pc}
 8020464:	2001ff10 	.word	0x2001ff10

08020468 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8020468:	b580      	push	{r7, lr}
 802046a:	b082      	sub	sp, #8
 802046c:	af00      	add	r7, sp, #0
 802046e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8020470:	4b04      	ldr	r3, [pc, #16]	; (8020484 <sys_arch_unprotect+0x1c>)
 8020472:	681b      	ldr	r3, [r3, #0]
 8020474:	4618      	mov	r0, r3
 8020476:	f7f1 fc4f 	bl	8011d18 <osMutexRelease>
}
 802047a:	bf00      	nop
 802047c:	3708      	adds	r7, #8
 802047e:	46bd      	mov	sp, r7
 8020480:	bd80      	pop	{r7, pc}
 8020482:	bf00      	nop
 8020484:	2001ff10 	.word	0x2001ff10

08020488 <__libc_init_array>:
 8020488:	b570      	push	{r4, r5, r6, lr}
 802048a:	4e0d      	ldr	r6, [pc, #52]	; (80204c0 <__libc_init_array+0x38>)
 802048c:	4c0d      	ldr	r4, [pc, #52]	; (80204c4 <__libc_init_array+0x3c>)
 802048e:	1ba4      	subs	r4, r4, r6
 8020490:	10a4      	asrs	r4, r4, #2
 8020492:	2500      	movs	r5, #0
 8020494:	42a5      	cmp	r5, r4
 8020496:	d109      	bne.n	80204ac <__libc_init_array+0x24>
 8020498:	4e0b      	ldr	r6, [pc, #44]	; (80204c8 <__libc_init_array+0x40>)
 802049a:	4c0c      	ldr	r4, [pc, #48]	; (80204cc <__libc_init_array+0x44>)
 802049c:	f001 f9d8 	bl	8021850 <_init>
 80204a0:	1ba4      	subs	r4, r4, r6
 80204a2:	10a4      	asrs	r4, r4, #2
 80204a4:	2500      	movs	r5, #0
 80204a6:	42a5      	cmp	r5, r4
 80204a8:	d105      	bne.n	80204b6 <__libc_init_array+0x2e>
 80204aa:	bd70      	pop	{r4, r5, r6, pc}
 80204ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80204b0:	4798      	blx	r3
 80204b2:	3501      	adds	r5, #1
 80204b4:	e7ee      	b.n	8020494 <__libc_init_array+0xc>
 80204b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80204ba:	4798      	blx	r3
 80204bc:	3501      	adds	r5, #1
 80204be:	e7f2      	b.n	80204a6 <__libc_init_array+0x1e>
 80204c0:	08035338 	.word	0x08035338
 80204c4:	08035338 	.word	0x08035338
 80204c8:	08035338 	.word	0x08035338
 80204cc:	0803533c 	.word	0x0803533c

080204d0 <memcmp>:
 80204d0:	b530      	push	{r4, r5, lr}
 80204d2:	2400      	movs	r4, #0
 80204d4:	42a2      	cmp	r2, r4
 80204d6:	d101      	bne.n	80204dc <memcmp+0xc>
 80204d8:	2000      	movs	r0, #0
 80204da:	e007      	b.n	80204ec <memcmp+0x1c>
 80204dc:	5d03      	ldrb	r3, [r0, r4]
 80204de:	3401      	adds	r4, #1
 80204e0:	190d      	adds	r5, r1, r4
 80204e2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80204e6:	42ab      	cmp	r3, r5
 80204e8:	d0f4      	beq.n	80204d4 <memcmp+0x4>
 80204ea:	1b58      	subs	r0, r3, r5
 80204ec:	bd30      	pop	{r4, r5, pc}

080204ee <memcpy>:
 80204ee:	b510      	push	{r4, lr}
 80204f0:	1e43      	subs	r3, r0, #1
 80204f2:	440a      	add	r2, r1
 80204f4:	4291      	cmp	r1, r2
 80204f6:	d100      	bne.n	80204fa <memcpy+0xc>
 80204f8:	bd10      	pop	{r4, pc}
 80204fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80204fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020502:	e7f7      	b.n	80204f4 <memcpy+0x6>

08020504 <memset>:
 8020504:	4402      	add	r2, r0
 8020506:	4603      	mov	r3, r0
 8020508:	4293      	cmp	r3, r2
 802050a:	d100      	bne.n	802050e <memset+0xa>
 802050c:	4770      	bx	lr
 802050e:	f803 1b01 	strb.w	r1, [r3], #1
 8020512:	e7f9      	b.n	8020508 <memset+0x4>

08020514 <iprintf>:
 8020514:	b40f      	push	{r0, r1, r2, r3}
 8020516:	4b0a      	ldr	r3, [pc, #40]	; (8020540 <iprintf+0x2c>)
 8020518:	b513      	push	{r0, r1, r4, lr}
 802051a:	681c      	ldr	r4, [r3, #0]
 802051c:	b124      	cbz	r4, 8020528 <iprintf+0x14>
 802051e:	69a3      	ldr	r3, [r4, #24]
 8020520:	b913      	cbnz	r3, 8020528 <iprintf+0x14>
 8020522:	4620      	mov	r0, r4
 8020524:	f000 f8a2 	bl	802066c <__sinit>
 8020528:	ab05      	add	r3, sp, #20
 802052a:	9a04      	ldr	r2, [sp, #16]
 802052c:	68a1      	ldr	r1, [r4, #8]
 802052e:	9301      	str	r3, [sp, #4]
 8020530:	4620      	mov	r0, r4
 8020532:	f000 f9ff 	bl	8020934 <_vfiprintf_r>
 8020536:	b002      	add	sp, #8
 8020538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802053c:	b004      	add	sp, #16
 802053e:	4770      	bx	lr
 8020540:	2000005c 	.word	0x2000005c

08020544 <rand>:
 8020544:	b538      	push	{r3, r4, r5, lr}
 8020546:	4b13      	ldr	r3, [pc, #76]	; (8020594 <rand+0x50>)
 8020548:	681c      	ldr	r4, [r3, #0]
 802054a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802054c:	b97b      	cbnz	r3, 802056e <rand+0x2a>
 802054e:	2018      	movs	r0, #24
 8020550:	f000 f916 	bl	8020780 <malloc>
 8020554:	4a10      	ldr	r2, [pc, #64]	; (8020598 <rand+0x54>)
 8020556:	4b11      	ldr	r3, [pc, #68]	; (802059c <rand+0x58>)
 8020558:	63a0      	str	r0, [r4, #56]	; 0x38
 802055a:	e9c0 2300 	strd	r2, r3, [r0]
 802055e:	4b10      	ldr	r3, [pc, #64]	; (80205a0 <rand+0x5c>)
 8020560:	6083      	str	r3, [r0, #8]
 8020562:	230b      	movs	r3, #11
 8020564:	8183      	strh	r3, [r0, #12]
 8020566:	2201      	movs	r2, #1
 8020568:	2300      	movs	r3, #0
 802056a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 802056e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020570:	480c      	ldr	r0, [pc, #48]	; (80205a4 <rand+0x60>)
 8020572:	690a      	ldr	r2, [r1, #16]
 8020574:	694b      	ldr	r3, [r1, #20]
 8020576:	4c0c      	ldr	r4, [pc, #48]	; (80205a8 <rand+0x64>)
 8020578:	4350      	muls	r0, r2
 802057a:	fb04 0003 	mla	r0, r4, r3, r0
 802057e:	fba2 2304 	umull	r2, r3, r2, r4
 8020582:	4403      	add	r3, r0
 8020584:	1c54      	adds	r4, r2, #1
 8020586:	f143 0500 	adc.w	r5, r3, #0
 802058a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 802058e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8020592:	bd38      	pop	{r3, r4, r5, pc}
 8020594:	2000005c 	.word	0x2000005c
 8020598:	abcd330e 	.word	0xabcd330e
 802059c:	e66d1234 	.word	0xe66d1234
 80205a0:	0005deec 	.word	0x0005deec
 80205a4:	5851f42d 	.word	0x5851f42d
 80205a8:	4c957f2d 	.word	0x4c957f2d

080205ac <strchr>:
 80205ac:	b2c9      	uxtb	r1, r1
 80205ae:	4603      	mov	r3, r0
 80205b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80205b4:	b11a      	cbz	r2, 80205be <strchr+0x12>
 80205b6:	428a      	cmp	r2, r1
 80205b8:	d1f9      	bne.n	80205ae <strchr+0x2>
 80205ba:	4618      	mov	r0, r3
 80205bc:	4770      	bx	lr
 80205be:	2900      	cmp	r1, #0
 80205c0:	bf18      	it	ne
 80205c2:	2300      	movne	r3, #0
 80205c4:	e7f9      	b.n	80205ba <strchr+0xe>

080205c6 <strncmp>:
 80205c6:	b510      	push	{r4, lr}
 80205c8:	b16a      	cbz	r2, 80205e6 <strncmp+0x20>
 80205ca:	3901      	subs	r1, #1
 80205cc:	1884      	adds	r4, r0, r2
 80205ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80205d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80205d6:	4293      	cmp	r3, r2
 80205d8:	d103      	bne.n	80205e2 <strncmp+0x1c>
 80205da:	42a0      	cmp	r0, r4
 80205dc:	d001      	beq.n	80205e2 <strncmp+0x1c>
 80205de:	2b00      	cmp	r3, #0
 80205e0:	d1f5      	bne.n	80205ce <strncmp+0x8>
 80205e2:	1a98      	subs	r0, r3, r2
 80205e4:	bd10      	pop	{r4, pc}
 80205e6:	4610      	mov	r0, r2
 80205e8:	e7fc      	b.n	80205e4 <strncmp+0x1e>
	...

080205ec <std>:
 80205ec:	2300      	movs	r3, #0
 80205ee:	b510      	push	{r4, lr}
 80205f0:	4604      	mov	r4, r0
 80205f2:	e9c0 3300 	strd	r3, r3, [r0]
 80205f6:	6083      	str	r3, [r0, #8]
 80205f8:	8181      	strh	r1, [r0, #12]
 80205fa:	6643      	str	r3, [r0, #100]	; 0x64
 80205fc:	81c2      	strh	r2, [r0, #14]
 80205fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020602:	6183      	str	r3, [r0, #24]
 8020604:	4619      	mov	r1, r3
 8020606:	2208      	movs	r2, #8
 8020608:	305c      	adds	r0, #92	; 0x5c
 802060a:	f7ff ff7b 	bl	8020504 <memset>
 802060e:	4b05      	ldr	r3, [pc, #20]	; (8020624 <std+0x38>)
 8020610:	6263      	str	r3, [r4, #36]	; 0x24
 8020612:	4b05      	ldr	r3, [pc, #20]	; (8020628 <std+0x3c>)
 8020614:	62a3      	str	r3, [r4, #40]	; 0x28
 8020616:	4b05      	ldr	r3, [pc, #20]	; (802062c <std+0x40>)
 8020618:	62e3      	str	r3, [r4, #44]	; 0x2c
 802061a:	4b05      	ldr	r3, [pc, #20]	; (8020630 <std+0x44>)
 802061c:	6224      	str	r4, [r4, #32]
 802061e:	6323      	str	r3, [r4, #48]	; 0x30
 8020620:	bd10      	pop	{r4, pc}
 8020622:	bf00      	nop
 8020624:	08020e91 	.word	0x08020e91
 8020628:	08020eb3 	.word	0x08020eb3
 802062c:	08020eeb 	.word	0x08020eeb
 8020630:	08020f0f 	.word	0x08020f0f

08020634 <_cleanup_r>:
 8020634:	4901      	ldr	r1, [pc, #4]	; (802063c <_cleanup_r+0x8>)
 8020636:	f000 b885 	b.w	8020744 <_fwalk_reent>
 802063a:	bf00      	nop
 802063c:	080211e9 	.word	0x080211e9

08020640 <__sfmoreglue>:
 8020640:	b570      	push	{r4, r5, r6, lr}
 8020642:	1e4a      	subs	r2, r1, #1
 8020644:	2568      	movs	r5, #104	; 0x68
 8020646:	4355      	muls	r5, r2
 8020648:	460e      	mov	r6, r1
 802064a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802064e:	f000 f8ed 	bl	802082c <_malloc_r>
 8020652:	4604      	mov	r4, r0
 8020654:	b140      	cbz	r0, 8020668 <__sfmoreglue+0x28>
 8020656:	2100      	movs	r1, #0
 8020658:	e9c0 1600 	strd	r1, r6, [r0]
 802065c:	300c      	adds	r0, #12
 802065e:	60a0      	str	r0, [r4, #8]
 8020660:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020664:	f7ff ff4e 	bl	8020504 <memset>
 8020668:	4620      	mov	r0, r4
 802066a:	bd70      	pop	{r4, r5, r6, pc}

0802066c <__sinit>:
 802066c:	6983      	ldr	r3, [r0, #24]
 802066e:	b510      	push	{r4, lr}
 8020670:	4604      	mov	r4, r0
 8020672:	bb33      	cbnz	r3, 80206c2 <__sinit+0x56>
 8020674:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8020678:	6503      	str	r3, [r0, #80]	; 0x50
 802067a:	4b12      	ldr	r3, [pc, #72]	; (80206c4 <__sinit+0x58>)
 802067c:	4a12      	ldr	r2, [pc, #72]	; (80206c8 <__sinit+0x5c>)
 802067e:	681b      	ldr	r3, [r3, #0]
 8020680:	6282      	str	r2, [r0, #40]	; 0x28
 8020682:	4298      	cmp	r0, r3
 8020684:	bf04      	itt	eq
 8020686:	2301      	moveq	r3, #1
 8020688:	6183      	streq	r3, [r0, #24]
 802068a:	f000 f81f 	bl	80206cc <__sfp>
 802068e:	6060      	str	r0, [r4, #4]
 8020690:	4620      	mov	r0, r4
 8020692:	f000 f81b 	bl	80206cc <__sfp>
 8020696:	60a0      	str	r0, [r4, #8]
 8020698:	4620      	mov	r0, r4
 802069a:	f000 f817 	bl	80206cc <__sfp>
 802069e:	2200      	movs	r2, #0
 80206a0:	60e0      	str	r0, [r4, #12]
 80206a2:	2104      	movs	r1, #4
 80206a4:	6860      	ldr	r0, [r4, #4]
 80206a6:	f7ff ffa1 	bl	80205ec <std>
 80206aa:	2201      	movs	r2, #1
 80206ac:	2109      	movs	r1, #9
 80206ae:	68a0      	ldr	r0, [r4, #8]
 80206b0:	f7ff ff9c 	bl	80205ec <std>
 80206b4:	2202      	movs	r2, #2
 80206b6:	2112      	movs	r1, #18
 80206b8:	68e0      	ldr	r0, [r4, #12]
 80206ba:	f7ff ff97 	bl	80205ec <std>
 80206be:	2301      	movs	r3, #1
 80206c0:	61a3      	str	r3, [r4, #24]
 80206c2:	bd10      	pop	{r4, pc}
 80206c4:	0803528c 	.word	0x0803528c
 80206c8:	08020635 	.word	0x08020635

080206cc <__sfp>:
 80206cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80206ce:	4b1b      	ldr	r3, [pc, #108]	; (802073c <__sfp+0x70>)
 80206d0:	681e      	ldr	r6, [r3, #0]
 80206d2:	69b3      	ldr	r3, [r6, #24]
 80206d4:	4607      	mov	r7, r0
 80206d6:	b913      	cbnz	r3, 80206de <__sfp+0x12>
 80206d8:	4630      	mov	r0, r6
 80206da:	f7ff ffc7 	bl	802066c <__sinit>
 80206de:	3648      	adds	r6, #72	; 0x48
 80206e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80206e4:	3b01      	subs	r3, #1
 80206e6:	d503      	bpl.n	80206f0 <__sfp+0x24>
 80206e8:	6833      	ldr	r3, [r6, #0]
 80206ea:	b133      	cbz	r3, 80206fa <__sfp+0x2e>
 80206ec:	6836      	ldr	r6, [r6, #0]
 80206ee:	e7f7      	b.n	80206e0 <__sfp+0x14>
 80206f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80206f4:	b16d      	cbz	r5, 8020712 <__sfp+0x46>
 80206f6:	3468      	adds	r4, #104	; 0x68
 80206f8:	e7f4      	b.n	80206e4 <__sfp+0x18>
 80206fa:	2104      	movs	r1, #4
 80206fc:	4638      	mov	r0, r7
 80206fe:	f7ff ff9f 	bl	8020640 <__sfmoreglue>
 8020702:	6030      	str	r0, [r6, #0]
 8020704:	2800      	cmp	r0, #0
 8020706:	d1f1      	bne.n	80206ec <__sfp+0x20>
 8020708:	230c      	movs	r3, #12
 802070a:	603b      	str	r3, [r7, #0]
 802070c:	4604      	mov	r4, r0
 802070e:	4620      	mov	r0, r4
 8020710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020712:	4b0b      	ldr	r3, [pc, #44]	; (8020740 <__sfp+0x74>)
 8020714:	6665      	str	r5, [r4, #100]	; 0x64
 8020716:	e9c4 5500 	strd	r5, r5, [r4]
 802071a:	60a5      	str	r5, [r4, #8]
 802071c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8020720:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8020724:	2208      	movs	r2, #8
 8020726:	4629      	mov	r1, r5
 8020728:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802072c:	f7ff feea 	bl	8020504 <memset>
 8020730:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020734:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020738:	e7e9      	b.n	802070e <__sfp+0x42>
 802073a:	bf00      	nop
 802073c:	0803528c 	.word	0x0803528c
 8020740:	ffff0001 	.word	0xffff0001

08020744 <_fwalk_reent>:
 8020744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020748:	4680      	mov	r8, r0
 802074a:	4689      	mov	r9, r1
 802074c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020750:	2600      	movs	r6, #0
 8020752:	b914      	cbnz	r4, 802075a <_fwalk_reent+0x16>
 8020754:	4630      	mov	r0, r6
 8020756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802075a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802075e:	3f01      	subs	r7, #1
 8020760:	d501      	bpl.n	8020766 <_fwalk_reent+0x22>
 8020762:	6824      	ldr	r4, [r4, #0]
 8020764:	e7f5      	b.n	8020752 <_fwalk_reent+0xe>
 8020766:	89ab      	ldrh	r3, [r5, #12]
 8020768:	2b01      	cmp	r3, #1
 802076a:	d907      	bls.n	802077c <_fwalk_reent+0x38>
 802076c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020770:	3301      	adds	r3, #1
 8020772:	d003      	beq.n	802077c <_fwalk_reent+0x38>
 8020774:	4629      	mov	r1, r5
 8020776:	4640      	mov	r0, r8
 8020778:	47c8      	blx	r9
 802077a:	4306      	orrs	r6, r0
 802077c:	3568      	adds	r5, #104	; 0x68
 802077e:	e7ee      	b.n	802075e <_fwalk_reent+0x1a>

08020780 <malloc>:
 8020780:	4b02      	ldr	r3, [pc, #8]	; (802078c <malloc+0xc>)
 8020782:	4601      	mov	r1, r0
 8020784:	6818      	ldr	r0, [r3, #0]
 8020786:	f000 b851 	b.w	802082c <_malloc_r>
 802078a:	bf00      	nop
 802078c:	2000005c 	.word	0x2000005c

08020790 <_free_r>:
 8020790:	b538      	push	{r3, r4, r5, lr}
 8020792:	4605      	mov	r5, r0
 8020794:	2900      	cmp	r1, #0
 8020796:	d045      	beq.n	8020824 <_free_r+0x94>
 8020798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802079c:	1f0c      	subs	r4, r1, #4
 802079e:	2b00      	cmp	r3, #0
 80207a0:	bfb8      	it	lt
 80207a2:	18e4      	addlt	r4, r4, r3
 80207a4:	f000 fdc0 	bl	8021328 <__malloc_lock>
 80207a8:	4a1f      	ldr	r2, [pc, #124]	; (8020828 <_free_r+0x98>)
 80207aa:	6813      	ldr	r3, [r2, #0]
 80207ac:	4610      	mov	r0, r2
 80207ae:	b933      	cbnz	r3, 80207be <_free_r+0x2e>
 80207b0:	6063      	str	r3, [r4, #4]
 80207b2:	6014      	str	r4, [r2, #0]
 80207b4:	4628      	mov	r0, r5
 80207b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80207ba:	f000 bdb6 	b.w	802132a <__malloc_unlock>
 80207be:	42a3      	cmp	r3, r4
 80207c0:	d90c      	bls.n	80207dc <_free_r+0x4c>
 80207c2:	6821      	ldr	r1, [r4, #0]
 80207c4:	1862      	adds	r2, r4, r1
 80207c6:	4293      	cmp	r3, r2
 80207c8:	bf04      	itt	eq
 80207ca:	681a      	ldreq	r2, [r3, #0]
 80207cc:	685b      	ldreq	r3, [r3, #4]
 80207ce:	6063      	str	r3, [r4, #4]
 80207d0:	bf04      	itt	eq
 80207d2:	1852      	addeq	r2, r2, r1
 80207d4:	6022      	streq	r2, [r4, #0]
 80207d6:	6004      	str	r4, [r0, #0]
 80207d8:	e7ec      	b.n	80207b4 <_free_r+0x24>
 80207da:	4613      	mov	r3, r2
 80207dc:	685a      	ldr	r2, [r3, #4]
 80207de:	b10a      	cbz	r2, 80207e4 <_free_r+0x54>
 80207e0:	42a2      	cmp	r2, r4
 80207e2:	d9fa      	bls.n	80207da <_free_r+0x4a>
 80207e4:	6819      	ldr	r1, [r3, #0]
 80207e6:	1858      	adds	r0, r3, r1
 80207e8:	42a0      	cmp	r0, r4
 80207ea:	d10b      	bne.n	8020804 <_free_r+0x74>
 80207ec:	6820      	ldr	r0, [r4, #0]
 80207ee:	4401      	add	r1, r0
 80207f0:	1858      	adds	r0, r3, r1
 80207f2:	4282      	cmp	r2, r0
 80207f4:	6019      	str	r1, [r3, #0]
 80207f6:	d1dd      	bne.n	80207b4 <_free_r+0x24>
 80207f8:	6810      	ldr	r0, [r2, #0]
 80207fa:	6852      	ldr	r2, [r2, #4]
 80207fc:	605a      	str	r2, [r3, #4]
 80207fe:	4401      	add	r1, r0
 8020800:	6019      	str	r1, [r3, #0]
 8020802:	e7d7      	b.n	80207b4 <_free_r+0x24>
 8020804:	d902      	bls.n	802080c <_free_r+0x7c>
 8020806:	230c      	movs	r3, #12
 8020808:	602b      	str	r3, [r5, #0]
 802080a:	e7d3      	b.n	80207b4 <_free_r+0x24>
 802080c:	6820      	ldr	r0, [r4, #0]
 802080e:	1821      	adds	r1, r4, r0
 8020810:	428a      	cmp	r2, r1
 8020812:	bf04      	itt	eq
 8020814:	6811      	ldreq	r1, [r2, #0]
 8020816:	6852      	ldreq	r2, [r2, #4]
 8020818:	6062      	str	r2, [r4, #4]
 802081a:	bf04      	itt	eq
 802081c:	1809      	addeq	r1, r1, r0
 802081e:	6021      	streq	r1, [r4, #0]
 8020820:	605c      	str	r4, [r3, #4]
 8020822:	e7c7      	b.n	80207b4 <_free_r+0x24>
 8020824:	bd38      	pop	{r3, r4, r5, pc}
 8020826:	bf00      	nop
 8020828:	20009488 	.word	0x20009488

0802082c <_malloc_r>:
 802082c:	b570      	push	{r4, r5, r6, lr}
 802082e:	1ccd      	adds	r5, r1, #3
 8020830:	f025 0503 	bic.w	r5, r5, #3
 8020834:	3508      	adds	r5, #8
 8020836:	2d0c      	cmp	r5, #12
 8020838:	bf38      	it	cc
 802083a:	250c      	movcc	r5, #12
 802083c:	2d00      	cmp	r5, #0
 802083e:	4606      	mov	r6, r0
 8020840:	db01      	blt.n	8020846 <_malloc_r+0x1a>
 8020842:	42a9      	cmp	r1, r5
 8020844:	d903      	bls.n	802084e <_malloc_r+0x22>
 8020846:	230c      	movs	r3, #12
 8020848:	6033      	str	r3, [r6, #0]
 802084a:	2000      	movs	r0, #0
 802084c:	bd70      	pop	{r4, r5, r6, pc}
 802084e:	f000 fd6b 	bl	8021328 <__malloc_lock>
 8020852:	4a21      	ldr	r2, [pc, #132]	; (80208d8 <_malloc_r+0xac>)
 8020854:	6814      	ldr	r4, [r2, #0]
 8020856:	4621      	mov	r1, r4
 8020858:	b991      	cbnz	r1, 8020880 <_malloc_r+0x54>
 802085a:	4c20      	ldr	r4, [pc, #128]	; (80208dc <_malloc_r+0xb0>)
 802085c:	6823      	ldr	r3, [r4, #0]
 802085e:	b91b      	cbnz	r3, 8020868 <_malloc_r+0x3c>
 8020860:	4630      	mov	r0, r6
 8020862:	f000 fb05 	bl	8020e70 <_sbrk_r>
 8020866:	6020      	str	r0, [r4, #0]
 8020868:	4629      	mov	r1, r5
 802086a:	4630      	mov	r0, r6
 802086c:	f000 fb00 	bl	8020e70 <_sbrk_r>
 8020870:	1c43      	adds	r3, r0, #1
 8020872:	d124      	bne.n	80208be <_malloc_r+0x92>
 8020874:	230c      	movs	r3, #12
 8020876:	6033      	str	r3, [r6, #0]
 8020878:	4630      	mov	r0, r6
 802087a:	f000 fd56 	bl	802132a <__malloc_unlock>
 802087e:	e7e4      	b.n	802084a <_malloc_r+0x1e>
 8020880:	680b      	ldr	r3, [r1, #0]
 8020882:	1b5b      	subs	r3, r3, r5
 8020884:	d418      	bmi.n	80208b8 <_malloc_r+0x8c>
 8020886:	2b0b      	cmp	r3, #11
 8020888:	d90f      	bls.n	80208aa <_malloc_r+0x7e>
 802088a:	600b      	str	r3, [r1, #0]
 802088c:	50cd      	str	r5, [r1, r3]
 802088e:	18cc      	adds	r4, r1, r3
 8020890:	4630      	mov	r0, r6
 8020892:	f000 fd4a 	bl	802132a <__malloc_unlock>
 8020896:	f104 000b 	add.w	r0, r4, #11
 802089a:	1d23      	adds	r3, r4, #4
 802089c:	f020 0007 	bic.w	r0, r0, #7
 80208a0:	1ac3      	subs	r3, r0, r3
 80208a2:	d0d3      	beq.n	802084c <_malloc_r+0x20>
 80208a4:	425a      	negs	r2, r3
 80208a6:	50e2      	str	r2, [r4, r3]
 80208a8:	e7d0      	b.n	802084c <_malloc_r+0x20>
 80208aa:	428c      	cmp	r4, r1
 80208ac:	684b      	ldr	r3, [r1, #4]
 80208ae:	bf16      	itet	ne
 80208b0:	6063      	strne	r3, [r4, #4]
 80208b2:	6013      	streq	r3, [r2, #0]
 80208b4:	460c      	movne	r4, r1
 80208b6:	e7eb      	b.n	8020890 <_malloc_r+0x64>
 80208b8:	460c      	mov	r4, r1
 80208ba:	6849      	ldr	r1, [r1, #4]
 80208bc:	e7cc      	b.n	8020858 <_malloc_r+0x2c>
 80208be:	1cc4      	adds	r4, r0, #3
 80208c0:	f024 0403 	bic.w	r4, r4, #3
 80208c4:	42a0      	cmp	r0, r4
 80208c6:	d005      	beq.n	80208d4 <_malloc_r+0xa8>
 80208c8:	1a21      	subs	r1, r4, r0
 80208ca:	4630      	mov	r0, r6
 80208cc:	f000 fad0 	bl	8020e70 <_sbrk_r>
 80208d0:	3001      	adds	r0, #1
 80208d2:	d0cf      	beq.n	8020874 <_malloc_r+0x48>
 80208d4:	6025      	str	r5, [r4, #0]
 80208d6:	e7db      	b.n	8020890 <_malloc_r+0x64>
 80208d8:	20009488 	.word	0x20009488
 80208dc:	2000948c 	.word	0x2000948c

080208e0 <__sfputc_r>:
 80208e0:	6893      	ldr	r3, [r2, #8]
 80208e2:	3b01      	subs	r3, #1
 80208e4:	2b00      	cmp	r3, #0
 80208e6:	b410      	push	{r4}
 80208e8:	6093      	str	r3, [r2, #8]
 80208ea:	da08      	bge.n	80208fe <__sfputc_r+0x1e>
 80208ec:	6994      	ldr	r4, [r2, #24]
 80208ee:	42a3      	cmp	r3, r4
 80208f0:	db01      	blt.n	80208f6 <__sfputc_r+0x16>
 80208f2:	290a      	cmp	r1, #10
 80208f4:	d103      	bne.n	80208fe <__sfputc_r+0x1e>
 80208f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80208fa:	f000 bb0d 	b.w	8020f18 <__swbuf_r>
 80208fe:	6813      	ldr	r3, [r2, #0]
 8020900:	1c58      	adds	r0, r3, #1
 8020902:	6010      	str	r0, [r2, #0]
 8020904:	7019      	strb	r1, [r3, #0]
 8020906:	4608      	mov	r0, r1
 8020908:	f85d 4b04 	ldr.w	r4, [sp], #4
 802090c:	4770      	bx	lr

0802090e <__sfputs_r>:
 802090e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020910:	4606      	mov	r6, r0
 8020912:	460f      	mov	r7, r1
 8020914:	4614      	mov	r4, r2
 8020916:	18d5      	adds	r5, r2, r3
 8020918:	42ac      	cmp	r4, r5
 802091a:	d101      	bne.n	8020920 <__sfputs_r+0x12>
 802091c:	2000      	movs	r0, #0
 802091e:	e007      	b.n	8020930 <__sfputs_r+0x22>
 8020920:	463a      	mov	r2, r7
 8020922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020926:	4630      	mov	r0, r6
 8020928:	f7ff ffda 	bl	80208e0 <__sfputc_r>
 802092c:	1c43      	adds	r3, r0, #1
 802092e:	d1f3      	bne.n	8020918 <__sfputs_r+0xa>
 8020930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020934 <_vfiprintf_r>:
 8020934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020938:	460c      	mov	r4, r1
 802093a:	b09d      	sub	sp, #116	; 0x74
 802093c:	4617      	mov	r7, r2
 802093e:	461d      	mov	r5, r3
 8020940:	4606      	mov	r6, r0
 8020942:	b118      	cbz	r0, 802094c <_vfiprintf_r+0x18>
 8020944:	6983      	ldr	r3, [r0, #24]
 8020946:	b90b      	cbnz	r3, 802094c <_vfiprintf_r+0x18>
 8020948:	f7ff fe90 	bl	802066c <__sinit>
 802094c:	4b7c      	ldr	r3, [pc, #496]	; (8020b40 <_vfiprintf_r+0x20c>)
 802094e:	429c      	cmp	r4, r3
 8020950:	d158      	bne.n	8020a04 <_vfiprintf_r+0xd0>
 8020952:	6874      	ldr	r4, [r6, #4]
 8020954:	89a3      	ldrh	r3, [r4, #12]
 8020956:	0718      	lsls	r0, r3, #28
 8020958:	d55e      	bpl.n	8020a18 <_vfiprintf_r+0xe4>
 802095a:	6923      	ldr	r3, [r4, #16]
 802095c:	2b00      	cmp	r3, #0
 802095e:	d05b      	beq.n	8020a18 <_vfiprintf_r+0xe4>
 8020960:	2300      	movs	r3, #0
 8020962:	9309      	str	r3, [sp, #36]	; 0x24
 8020964:	2320      	movs	r3, #32
 8020966:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802096a:	2330      	movs	r3, #48	; 0x30
 802096c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020970:	9503      	str	r5, [sp, #12]
 8020972:	f04f 0b01 	mov.w	fp, #1
 8020976:	46b8      	mov	r8, r7
 8020978:	4645      	mov	r5, r8
 802097a:	f815 3b01 	ldrb.w	r3, [r5], #1
 802097e:	b10b      	cbz	r3, 8020984 <_vfiprintf_r+0x50>
 8020980:	2b25      	cmp	r3, #37	; 0x25
 8020982:	d154      	bne.n	8020a2e <_vfiprintf_r+0xfa>
 8020984:	ebb8 0a07 	subs.w	sl, r8, r7
 8020988:	d00b      	beq.n	80209a2 <_vfiprintf_r+0x6e>
 802098a:	4653      	mov	r3, sl
 802098c:	463a      	mov	r2, r7
 802098e:	4621      	mov	r1, r4
 8020990:	4630      	mov	r0, r6
 8020992:	f7ff ffbc 	bl	802090e <__sfputs_r>
 8020996:	3001      	adds	r0, #1
 8020998:	f000 80c2 	beq.w	8020b20 <_vfiprintf_r+0x1ec>
 802099c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802099e:	4453      	add	r3, sl
 80209a0:	9309      	str	r3, [sp, #36]	; 0x24
 80209a2:	f898 3000 	ldrb.w	r3, [r8]
 80209a6:	2b00      	cmp	r3, #0
 80209a8:	f000 80ba 	beq.w	8020b20 <_vfiprintf_r+0x1ec>
 80209ac:	2300      	movs	r3, #0
 80209ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80209b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80209b6:	9304      	str	r3, [sp, #16]
 80209b8:	9307      	str	r3, [sp, #28]
 80209ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80209be:	931a      	str	r3, [sp, #104]	; 0x68
 80209c0:	46a8      	mov	r8, r5
 80209c2:	2205      	movs	r2, #5
 80209c4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80209c8:	485e      	ldr	r0, [pc, #376]	; (8020b44 <_vfiprintf_r+0x210>)
 80209ca:	f7e7 fc51 	bl	8008270 <memchr>
 80209ce:	9b04      	ldr	r3, [sp, #16]
 80209d0:	bb78      	cbnz	r0, 8020a32 <_vfiprintf_r+0xfe>
 80209d2:	06d9      	lsls	r1, r3, #27
 80209d4:	bf44      	itt	mi
 80209d6:	2220      	movmi	r2, #32
 80209d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80209dc:	071a      	lsls	r2, r3, #28
 80209de:	bf44      	itt	mi
 80209e0:	222b      	movmi	r2, #43	; 0x2b
 80209e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80209e6:	782a      	ldrb	r2, [r5, #0]
 80209e8:	2a2a      	cmp	r2, #42	; 0x2a
 80209ea:	d02a      	beq.n	8020a42 <_vfiprintf_r+0x10e>
 80209ec:	9a07      	ldr	r2, [sp, #28]
 80209ee:	46a8      	mov	r8, r5
 80209f0:	2000      	movs	r0, #0
 80209f2:	250a      	movs	r5, #10
 80209f4:	4641      	mov	r1, r8
 80209f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80209fa:	3b30      	subs	r3, #48	; 0x30
 80209fc:	2b09      	cmp	r3, #9
 80209fe:	d969      	bls.n	8020ad4 <_vfiprintf_r+0x1a0>
 8020a00:	b360      	cbz	r0, 8020a5c <_vfiprintf_r+0x128>
 8020a02:	e024      	b.n	8020a4e <_vfiprintf_r+0x11a>
 8020a04:	4b50      	ldr	r3, [pc, #320]	; (8020b48 <_vfiprintf_r+0x214>)
 8020a06:	429c      	cmp	r4, r3
 8020a08:	d101      	bne.n	8020a0e <_vfiprintf_r+0xda>
 8020a0a:	68b4      	ldr	r4, [r6, #8]
 8020a0c:	e7a2      	b.n	8020954 <_vfiprintf_r+0x20>
 8020a0e:	4b4f      	ldr	r3, [pc, #316]	; (8020b4c <_vfiprintf_r+0x218>)
 8020a10:	429c      	cmp	r4, r3
 8020a12:	bf08      	it	eq
 8020a14:	68f4      	ldreq	r4, [r6, #12]
 8020a16:	e79d      	b.n	8020954 <_vfiprintf_r+0x20>
 8020a18:	4621      	mov	r1, r4
 8020a1a:	4630      	mov	r0, r6
 8020a1c:	f000 fae0 	bl	8020fe0 <__swsetup_r>
 8020a20:	2800      	cmp	r0, #0
 8020a22:	d09d      	beq.n	8020960 <_vfiprintf_r+0x2c>
 8020a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020a28:	b01d      	add	sp, #116	; 0x74
 8020a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a2e:	46a8      	mov	r8, r5
 8020a30:	e7a2      	b.n	8020978 <_vfiprintf_r+0x44>
 8020a32:	4a44      	ldr	r2, [pc, #272]	; (8020b44 <_vfiprintf_r+0x210>)
 8020a34:	1a80      	subs	r0, r0, r2
 8020a36:	fa0b f000 	lsl.w	r0, fp, r0
 8020a3a:	4318      	orrs	r0, r3
 8020a3c:	9004      	str	r0, [sp, #16]
 8020a3e:	4645      	mov	r5, r8
 8020a40:	e7be      	b.n	80209c0 <_vfiprintf_r+0x8c>
 8020a42:	9a03      	ldr	r2, [sp, #12]
 8020a44:	1d11      	adds	r1, r2, #4
 8020a46:	6812      	ldr	r2, [r2, #0]
 8020a48:	9103      	str	r1, [sp, #12]
 8020a4a:	2a00      	cmp	r2, #0
 8020a4c:	db01      	blt.n	8020a52 <_vfiprintf_r+0x11e>
 8020a4e:	9207      	str	r2, [sp, #28]
 8020a50:	e004      	b.n	8020a5c <_vfiprintf_r+0x128>
 8020a52:	4252      	negs	r2, r2
 8020a54:	f043 0302 	orr.w	r3, r3, #2
 8020a58:	9207      	str	r2, [sp, #28]
 8020a5a:	9304      	str	r3, [sp, #16]
 8020a5c:	f898 3000 	ldrb.w	r3, [r8]
 8020a60:	2b2e      	cmp	r3, #46	; 0x2e
 8020a62:	d10e      	bne.n	8020a82 <_vfiprintf_r+0x14e>
 8020a64:	f898 3001 	ldrb.w	r3, [r8, #1]
 8020a68:	2b2a      	cmp	r3, #42	; 0x2a
 8020a6a:	d138      	bne.n	8020ade <_vfiprintf_r+0x1aa>
 8020a6c:	9b03      	ldr	r3, [sp, #12]
 8020a6e:	1d1a      	adds	r2, r3, #4
 8020a70:	681b      	ldr	r3, [r3, #0]
 8020a72:	9203      	str	r2, [sp, #12]
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	bfb8      	it	lt
 8020a78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8020a7c:	f108 0802 	add.w	r8, r8, #2
 8020a80:	9305      	str	r3, [sp, #20]
 8020a82:	4d33      	ldr	r5, [pc, #204]	; (8020b50 <_vfiprintf_r+0x21c>)
 8020a84:	f898 1000 	ldrb.w	r1, [r8]
 8020a88:	2203      	movs	r2, #3
 8020a8a:	4628      	mov	r0, r5
 8020a8c:	f7e7 fbf0 	bl	8008270 <memchr>
 8020a90:	b140      	cbz	r0, 8020aa4 <_vfiprintf_r+0x170>
 8020a92:	2340      	movs	r3, #64	; 0x40
 8020a94:	1b40      	subs	r0, r0, r5
 8020a96:	fa03 f000 	lsl.w	r0, r3, r0
 8020a9a:	9b04      	ldr	r3, [sp, #16]
 8020a9c:	4303      	orrs	r3, r0
 8020a9e:	f108 0801 	add.w	r8, r8, #1
 8020aa2:	9304      	str	r3, [sp, #16]
 8020aa4:	f898 1000 	ldrb.w	r1, [r8]
 8020aa8:	482a      	ldr	r0, [pc, #168]	; (8020b54 <_vfiprintf_r+0x220>)
 8020aaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020aae:	2206      	movs	r2, #6
 8020ab0:	f108 0701 	add.w	r7, r8, #1
 8020ab4:	f7e7 fbdc 	bl	8008270 <memchr>
 8020ab8:	2800      	cmp	r0, #0
 8020aba:	d037      	beq.n	8020b2c <_vfiprintf_r+0x1f8>
 8020abc:	4b26      	ldr	r3, [pc, #152]	; (8020b58 <_vfiprintf_r+0x224>)
 8020abe:	bb1b      	cbnz	r3, 8020b08 <_vfiprintf_r+0x1d4>
 8020ac0:	9b03      	ldr	r3, [sp, #12]
 8020ac2:	3307      	adds	r3, #7
 8020ac4:	f023 0307 	bic.w	r3, r3, #7
 8020ac8:	3308      	adds	r3, #8
 8020aca:	9303      	str	r3, [sp, #12]
 8020acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ace:	444b      	add	r3, r9
 8020ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8020ad2:	e750      	b.n	8020976 <_vfiprintf_r+0x42>
 8020ad4:	fb05 3202 	mla	r2, r5, r2, r3
 8020ad8:	2001      	movs	r0, #1
 8020ada:	4688      	mov	r8, r1
 8020adc:	e78a      	b.n	80209f4 <_vfiprintf_r+0xc0>
 8020ade:	2300      	movs	r3, #0
 8020ae0:	f108 0801 	add.w	r8, r8, #1
 8020ae4:	9305      	str	r3, [sp, #20]
 8020ae6:	4619      	mov	r1, r3
 8020ae8:	250a      	movs	r5, #10
 8020aea:	4640      	mov	r0, r8
 8020aec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020af0:	3a30      	subs	r2, #48	; 0x30
 8020af2:	2a09      	cmp	r2, #9
 8020af4:	d903      	bls.n	8020afe <_vfiprintf_r+0x1ca>
 8020af6:	2b00      	cmp	r3, #0
 8020af8:	d0c3      	beq.n	8020a82 <_vfiprintf_r+0x14e>
 8020afa:	9105      	str	r1, [sp, #20]
 8020afc:	e7c1      	b.n	8020a82 <_vfiprintf_r+0x14e>
 8020afe:	fb05 2101 	mla	r1, r5, r1, r2
 8020b02:	2301      	movs	r3, #1
 8020b04:	4680      	mov	r8, r0
 8020b06:	e7f0      	b.n	8020aea <_vfiprintf_r+0x1b6>
 8020b08:	ab03      	add	r3, sp, #12
 8020b0a:	9300      	str	r3, [sp, #0]
 8020b0c:	4622      	mov	r2, r4
 8020b0e:	4b13      	ldr	r3, [pc, #76]	; (8020b5c <_vfiprintf_r+0x228>)
 8020b10:	a904      	add	r1, sp, #16
 8020b12:	4630      	mov	r0, r6
 8020b14:	f3af 8000 	nop.w
 8020b18:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8020b1c:	4681      	mov	r9, r0
 8020b1e:	d1d5      	bne.n	8020acc <_vfiprintf_r+0x198>
 8020b20:	89a3      	ldrh	r3, [r4, #12]
 8020b22:	065b      	lsls	r3, r3, #25
 8020b24:	f53f af7e 	bmi.w	8020a24 <_vfiprintf_r+0xf0>
 8020b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020b2a:	e77d      	b.n	8020a28 <_vfiprintf_r+0xf4>
 8020b2c:	ab03      	add	r3, sp, #12
 8020b2e:	9300      	str	r3, [sp, #0]
 8020b30:	4622      	mov	r2, r4
 8020b32:	4b0a      	ldr	r3, [pc, #40]	; (8020b5c <_vfiprintf_r+0x228>)
 8020b34:	a904      	add	r1, sp, #16
 8020b36:	4630      	mov	r0, r6
 8020b38:	f000 f888 	bl	8020c4c <_printf_i>
 8020b3c:	e7ec      	b.n	8020b18 <_vfiprintf_r+0x1e4>
 8020b3e:	bf00      	nop
 8020b40:	080352b0 	.word	0x080352b0
 8020b44:	080352f0 	.word	0x080352f0
 8020b48:	080352d0 	.word	0x080352d0
 8020b4c:	08035290 	.word	0x08035290
 8020b50:	080352f6 	.word	0x080352f6
 8020b54:	080352fa 	.word	0x080352fa
 8020b58:	00000000 	.word	0x00000000
 8020b5c:	0802090f 	.word	0x0802090f

08020b60 <_printf_common>:
 8020b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020b64:	4691      	mov	r9, r2
 8020b66:	461f      	mov	r7, r3
 8020b68:	688a      	ldr	r2, [r1, #8]
 8020b6a:	690b      	ldr	r3, [r1, #16]
 8020b6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020b70:	4293      	cmp	r3, r2
 8020b72:	bfb8      	it	lt
 8020b74:	4613      	movlt	r3, r2
 8020b76:	f8c9 3000 	str.w	r3, [r9]
 8020b7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020b7e:	4606      	mov	r6, r0
 8020b80:	460c      	mov	r4, r1
 8020b82:	b112      	cbz	r2, 8020b8a <_printf_common+0x2a>
 8020b84:	3301      	adds	r3, #1
 8020b86:	f8c9 3000 	str.w	r3, [r9]
 8020b8a:	6823      	ldr	r3, [r4, #0]
 8020b8c:	0699      	lsls	r1, r3, #26
 8020b8e:	bf42      	ittt	mi
 8020b90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8020b94:	3302      	addmi	r3, #2
 8020b96:	f8c9 3000 	strmi.w	r3, [r9]
 8020b9a:	6825      	ldr	r5, [r4, #0]
 8020b9c:	f015 0506 	ands.w	r5, r5, #6
 8020ba0:	d107      	bne.n	8020bb2 <_printf_common+0x52>
 8020ba2:	f104 0a19 	add.w	sl, r4, #25
 8020ba6:	68e3      	ldr	r3, [r4, #12]
 8020ba8:	f8d9 2000 	ldr.w	r2, [r9]
 8020bac:	1a9b      	subs	r3, r3, r2
 8020bae:	42ab      	cmp	r3, r5
 8020bb0:	dc28      	bgt.n	8020c04 <_printf_common+0xa4>
 8020bb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8020bb6:	6822      	ldr	r2, [r4, #0]
 8020bb8:	3300      	adds	r3, #0
 8020bba:	bf18      	it	ne
 8020bbc:	2301      	movne	r3, #1
 8020bbe:	0692      	lsls	r2, r2, #26
 8020bc0:	d42d      	bmi.n	8020c1e <_printf_common+0xbe>
 8020bc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020bc6:	4639      	mov	r1, r7
 8020bc8:	4630      	mov	r0, r6
 8020bca:	47c0      	blx	r8
 8020bcc:	3001      	adds	r0, #1
 8020bce:	d020      	beq.n	8020c12 <_printf_common+0xb2>
 8020bd0:	6823      	ldr	r3, [r4, #0]
 8020bd2:	68e5      	ldr	r5, [r4, #12]
 8020bd4:	f8d9 2000 	ldr.w	r2, [r9]
 8020bd8:	f003 0306 	and.w	r3, r3, #6
 8020bdc:	2b04      	cmp	r3, #4
 8020bde:	bf08      	it	eq
 8020be0:	1aad      	subeq	r5, r5, r2
 8020be2:	68a3      	ldr	r3, [r4, #8]
 8020be4:	6922      	ldr	r2, [r4, #16]
 8020be6:	bf0c      	ite	eq
 8020be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020bec:	2500      	movne	r5, #0
 8020bee:	4293      	cmp	r3, r2
 8020bf0:	bfc4      	itt	gt
 8020bf2:	1a9b      	subgt	r3, r3, r2
 8020bf4:	18ed      	addgt	r5, r5, r3
 8020bf6:	f04f 0900 	mov.w	r9, #0
 8020bfa:	341a      	adds	r4, #26
 8020bfc:	454d      	cmp	r5, r9
 8020bfe:	d11a      	bne.n	8020c36 <_printf_common+0xd6>
 8020c00:	2000      	movs	r0, #0
 8020c02:	e008      	b.n	8020c16 <_printf_common+0xb6>
 8020c04:	2301      	movs	r3, #1
 8020c06:	4652      	mov	r2, sl
 8020c08:	4639      	mov	r1, r7
 8020c0a:	4630      	mov	r0, r6
 8020c0c:	47c0      	blx	r8
 8020c0e:	3001      	adds	r0, #1
 8020c10:	d103      	bne.n	8020c1a <_printf_common+0xba>
 8020c12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c1a:	3501      	adds	r5, #1
 8020c1c:	e7c3      	b.n	8020ba6 <_printf_common+0x46>
 8020c1e:	18e1      	adds	r1, r4, r3
 8020c20:	1c5a      	adds	r2, r3, #1
 8020c22:	2030      	movs	r0, #48	; 0x30
 8020c24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020c28:	4422      	add	r2, r4
 8020c2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020c2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020c32:	3302      	adds	r3, #2
 8020c34:	e7c5      	b.n	8020bc2 <_printf_common+0x62>
 8020c36:	2301      	movs	r3, #1
 8020c38:	4622      	mov	r2, r4
 8020c3a:	4639      	mov	r1, r7
 8020c3c:	4630      	mov	r0, r6
 8020c3e:	47c0      	blx	r8
 8020c40:	3001      	adds	r0, #1
 8020c42:	d0e6      	beq.n	8020c12 <_printf_common+0xb2>
 8020c44:	f109 0901 	add.w	r9, r9, #1
 8020c48:	e7d8      	b.n	8020bfc <_printf_common+0x9c>
	...

08020c4c <_printf_i>:
 8020c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020c50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8020c54:	460c      	mov	r4, r1
 8020c56:	7e09      	ldrb	r1, [r1, #24]
 8020c58:	b085      	sub	sp, #20
 8020c5a:	296e      	cmp	r1, #110	; 0x6e
 8020c5c:	4617      	mov	r7, r2
 8020c5e:	4606      	mov	r6, r0
 8020c60:	4698      	mov	r8, r3
 8020c62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020c64:	f000 80b3 	beq.w	8020dce <_printf_i+0x182>
 8020c68:	d822      	bhi.n	8020cb0 <_printf_i+0x64>
 8020c6a:	2963      	cmp	r1, #99	; 0x63
 8020c6c:	d036      	beq.n	8020cdc <_printf_i+0x90>
 8020c6e:	d80a      	bhi.n	8020c86 <_printf_i+0x3a>
 8020c70:	2900      	cmp	r1, #0
 8020c72:	f000 80b9 	beq.w	8020de8 <_printf_i+0x19c>
 8020c76:	2958      	cmp	r1, #88	; 0x58
 8020c78:	f000 8083 	beq.w	8020d82 <_printf_i+0x136>
 8020c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020c80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8020c84:	e032      	b.n	8020cec <_printf_i+0xa0>
 8020c86:	2964      	cmp	r1, #100	; 0x64
 8020c88:	d001      	beq.n	8020c8e <_printf_i+0x42>
 8020c8a:	2969      	cmp	r1, #105	; 0x69
 8020c8c:	d1f6      	bne.n	8020c7c <_printf_i+0x30>
 8020c8e:	6820      	ldr	r0, [r4, #0]
 8020c90:	6813      	ldr	r3, [r2, #0]
 8020c92:	0605      	lsls	r5, r0, #24
 8020c94:	f103 0104 	add.w	r1, r3, #4
 8020c98:	d52a      	bpl.n	8020cf0 <_printf_i+0xa4>
 8020c9a:	681b      	ldr	r3, [r3, #0]
 8020c9c:	6011      	str	r1, [r2, #0]
 8020c9e:	2b00      	cmp	r3, #0
 8020ca0:	da03      	bge.n	8020caa <_printf_i+0x5e>
 8020ca2:	222d      	movs	r2, #45	; 0x2d
 8020ca4:	425b      	negs	r3, r3
 8020ca6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8020caa:	486f      	ldr	r0, [pc, #444]	; (8020e68 <_printf_i+0x21c>)
 8020cac:	220a      	movs	r2, #10
 8020cae:	e039      	b.n	8020d24 <_printf_i+0xd8>
 8020cb0:	2973      	cmp	r1, #115	; 0x73
 8020cb2:	f000 809d 	beq.w	8020df0 <_printf_i+0x1a4>
 8020cb6:	d808      	bhi.n	8020cca <_printf_i+0x7e>
 8020cb8:	296f      	cmp	r1, #111	; 0x6f
 8020cba:	d020      	beq.n	8020cfe <_printf_i+0xb2>
 8020cbc:	2970      	cmp	r1, #112	; 0x70
 8020cbe:	d1dd      	bne.n	8020c7c <_printf_i+0x30>
 8020cc0:	6823      	ldr	r3, [r4, #0]
 8020cc2:	f043 0320 	orr.w	r3, r3, #32
 8020cc6:	6023      	str	r3, [r4, #0]
 8020cc8:	e003      	b.n	8020cd2 <_printf_i+0x86>
 8020cca:	2975      	cmp	r1, #117	; 0x75
 8020ccc:	d017      	beq.n	8020cfe <_printf_i+0xb2>
 8020cce:	2978      	cmp	r1, #120	; 0x78
 8020cd0:	d1d4      	bne.n	8020c7c <_printf_i+0x30>
 8020cd2:	2378      	movs	r3, #120	; 0x78
 8020cd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020cd8:	4864      	ldr	r0, [pc, #400]	; (8020e6c <_printf_i+0x220>)
 8020cda:	e055      	b.n	8020d88 <_printf_i+0x13c>
 8020cdc:	6813      	ldr	r3, [r2, #0]
 8020cde:	1d19      	adds	r1, r3, #4
 8020ce0:	681b      	ldr	r3, [r3, #0]
 8020ce2:	6011      	str	r1, [r2, #0]
 8020ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020cec:	2301      	movs	r3, #1
 8020cee:	e08c      	b.n	8020e0a <_printf_i+0x1be>
 8020cf0:	681b      	ldr	r3, [r3, #0]
 8020cf2:	6011      	str	r1, [r2, #0]
 8020cf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020cf8:	bf18      	it	ne
 8020cfa:	b21b      	sxthne	r3, r3
 8020cfc:	e7cf      	b.n	8020c9e <_printf_i+0x52>
 8020cfe:	6813      	ldr	r3, [r2, #0]
 8020d00:	6825      	ldr	r5, [r4, #0]
 8020d02:	1d18      	adds	r0, r3, #4
 8020d04:	6010      	str	r0, [r2, #0]
 8020d06:	0628      	lsls	r0, r5, #24
 8020d08:	d501      	bpl.n	8020d0e <_printf_i+0xc2>
 8020d0a:	681b      	ldr	r3, [r3, #0]
 8020d0c:	e002      	b.n	8020d14 <_printf_i+0xc8>
 8020d0e:	0668      	lsls	r0, r5, #25
 8020d10:	d5fb      	bpl.n	8020d0a <_printf_i+0xbe>
 8020d12:	881b      	ldrh	r3, [r3, #0]
 8020d14:	4854      	ldr	r0, [pc, #336]	; (8020e68 <_printf_i+0x21c>)
 8020d16:	296f      	cmp	r1, #111	; 0x6f
 8020d18:	bf14      	ite	ne
 8020d1a:	220a      	movne	r2, #10
 8020d1c:	2208      	moveq	r2, #8
 8020d1e:	2100      	movs	r1, #0
 8020d20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020d24:	6865      	ldr	r5, [r4, #4]
 8020d26:	60a5      	str	r5, [r4, #8]
 8020d28:	2d00      	cmp	r5, #0
 8020d2a:	f2c0 8095 	blt.w	8020e58 <_printf_i+0x20c>
 8020d2e:	6821      	ldr	r1, [r4, #0]
 8020d30:	f021 0104 	bic.w	r1, r1, #4
 8020d34:	6021      	str	r1, [r4, #0]
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	d13d      	bne.n	8020db6 <_printf_i+0x16a>
 8020d3a:	2d00      	cmp	r5, #0
 8020d3c:	f040 808e 	bne.w	8020e5c <_printf_i+0x210>
 8020d40:	4665      	mov	r5, ip
 8020d42:	2a08      	cmp	r2, #8
 8020d44:	d10b      	bne.n	8020d5e <_printf_i+0x112>
 8020d46:	6823      	ldr	r3, [r4, #0]
 8020d48:	07db      	lsls	r3, r3, #31
 8020d4a:	d508      	bpl.n	8020d5e <_printf_i+0x112>
 8020d4c:	6923      	ldr	r3, [r4, #16]
 8020d4e:	6862      	ldr	r2, [r4, #4]
 8020d50:	429a      	cmp	r2, r3
 8020d52:	bfde      	ittt	le
 8020d54:	2330      	movle	r3, #48	; 0x30
 8020d56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020d5a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8020d5e:	ebac 0305 	sub.w	r3, ip, r5
 8020d62:	6123      	str	r3, [r4, #16]
 8020d64:	f8cd 8000 	str.w	r8, [sp]
 8020d68:	463b      	mov	r3, r7
 8020d6a:	aa03      	add	r2, sp, #12
 8020d6c:	4621      	mov	r1, r4
 8020d6e:	4630      	mov	r0, r6
 8020d70:	f7ff fef6 	bl	8020b60 <_printf_common>
 8020d74:	3001      	adds	r0, #1
 8020d76:	d14d      	bne.n	8020e14 <_printf_i+0x1c8>
 8020d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020d7c:	b005      	add	sp, #20
 8020d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020d82:	4839      	ldr	r0, [pc, #228]	; (8020e68 <_printf_i+0x21c>)
 8020d84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8020d88:	6813      	ldr	r3, [r2, #0]
 8020d8a:	6821      	ldr	r1, [r4, #0]
 8020d8c:	1d1d      	adds	r5, r3, #4
 8020d8e:	681b      	ldr	r3, [r3, #0]
 8020d90:	6015      	str	r5, [r2, #0]
 8020d92:	060a      	lsls	r2, r1, #24
 8020d94:	d50b      	bpl.n	8020dae <_printf_i+0x162>
 8020d96:	07ca      	lsls	r2, r1, #31
 8020d98:	bf44      	itt	mi
 8020d9a:	f041 0120 	orrmi.w	r1, r1, #32
 8020d9e:	6021      	strmi	r1, [r4, #0]
 8020da0:	b91b      	cbnz	r3, 8020daa <_printf_i+0x15e>
 8020da2:	6822      	ldr	r2, [r4, #0]
 8020da4:	f022 0220 	bic.w	r2, r2, #32
 8020da8:	6022      	str	r2, [r4, #0]
 8020daa:	2210      	movs	r2, #16
 8020dac:	e7b7      	b.n	8020d1e <_printf_i+0xd2>
 8020dae:	064d      	lsls	r5, r1, #25
 8020db0:	bf48      	it	mi
 8020db2:	b29b      	uxthmi	r3, r3
 8020db4:	e7ef      	b.n	8020d96 <_printf_i+0x14a>
 8020db6:	4665      	mov	r5, ip
 8020db8:	fbb3 f1f2 	udiv	r1, r3, r2
 8020dbc:	fb02 3311 	mls	r3, r2, r1, r3
 8020dc0:	5cc3      	ldrb	r3, [r0, r3]
 8020dc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8020dc6:	460b      	mov	r3, r1
 8020dc8:	2900      	cmp	r1, #0
 8020dca:	d1f5      	bne.n	8020db8 <_printf_i+0x16c>
 8020dcc:	e7b9      	b.n	8020d42 <_printf_i+0xf6>
 8020dce:	6813      	ldr	r3, [r2, #0]
 8020dd0:	6825      	ldr	r5, [r4, #0]
 8020dd2:	6961      	ldr	r1, [r4, #20]
 8020dd4:	1d18      	adds	r0, r3, #4
 8020dd6:	6010      	str	r0, [r2, #0]
 8020dd8:	0628      	lsls	r0, r5, #24
 8020dda:	681b      	ldr	r3, [r3, #0]
 8020ddc:	d501      	bpl.n	8020de2 <_printf_i+0x196>
 8020dde:	6019      	str	r1, [r3, #0]
 8020de0:	e002      	b.n	8020de8 <_printf_i+0x19c>
 8020de2:	066a      	lsls	r2, r5, #25
 8020de4:	d5fb      	bpl.n	8020dde <_printf_i+0x192>
 8020de6:	8019      	strh	r1, [r3, #0]
 8020de8:	2300      	movs	r3, #0
 8020dea:	6123      	str	r3, [r4, #16]
 8020dec:	4665      	mov	r5, ip
 8020dee:	e7b9      	b.n	8020d64 <_printf_i+0x118>
 8020df0:	6813      	ldr	r3, [r2, #0]
 8020df2:	1d19      	adds	r1, r3, #4
 8020df4:	6011      	str	r1, [r2, #0]
 8020df6:	681d      	ldr	r5, [r3, #0]
 8020df8:	6862      	ldr	r2, [r4, #4]
 8020dfa:	2100      	movs	r1, #0
 8020dfc:	4628      	mov	r0, r5
 8020dfe:	f7e7 fa37 	bl	8008270 <memchr>
 8020e02:	b108      	cbz	r0, 8020e08 <_printf_i+0x1bc>
 8020e04:	1b40      	subs	r0, r0, r5
 8020e06:	6060      	str	r0, [r4, #4]
 8020e08:	6863      	ldr	r3, [r4, #4]
 8020e0a:	6123      	str	r3, [r4, #16]
 8020e0c:	2300      	movs	r3, #0
 8020e0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020e12:	e7a7      	b.n	8020d64 <_printf_i+0x118>
 8020e14:	6923      	ldr	r3, [r4, #16]
 8020e16:	462a      	mov	r2, r5
 8020e18:	4639      	mov	r1, r7
 8020e1a:	4630      	mov	r0, r6
 8020e1c:	47c0      	blx	r8
 8020e1e:	3001      	adds	r0, #1
 8020e20:	d0aa      	beq.n	8020d78 <_printf_i+0x12c>
 8020e22:	6823      	ldr	r3, [r4, #0]
 8020e24:	079b      	lsls	r3, r3, #30
 8020e26:	d413      	bmi.n	8020e50 <_printf_i+0x204>
 8020e28:	68e0      	ldr	r0, [r4, #12]
 8020e2a:	9b03      	ldr	r3, [sp, #12]
 8020e2c:	4298      	cmp	r0, r3
 8020e2e:	bfb8      	it	lt
 8020e30:	4618      	movlt	r0, r3
 8020e32:	e7a3      	b.n	8020d7c <_printf_i+0x130>
 8020e34:	2301      	movs	r3, #1
 8020e36:	464a      	mov	r2, r9
 8020e38:	4639      	mov	r1, r7
 8020e3a:	4630      	mov	r0, r6
 8020e3c:	47c0      	blx	r8
 8020e3e:	3001      	adds	r0, #1
 8020e40:	d09a      	beq.n	8020d78 <_printf_i+0x12c>
 8020e42:	3501      	adds	r5, #1
 8020e44:	68e3      	ldr	r3, [r4, #12]
 8020e46:	9a03      	ldr	r2, [sp, #12]
 8020e48:	1a9b      	subs	r3, r3, r2
 8020e4a:	42ab      	cmp	r3, r5
 8020e4c:	dcf2      	bgt.n	8020e34 <_printf_i+0x1e8>
 8020e4e:	e7eb      	b.n	8020e28 <_printf_i+0x1dc>
 8020e50:	2500      	movs	r5, #0
 8020e52:	f104 0919 	add.w	r9, r4, #25
 8020e56:	e7f5      	b.n	8020e44 <_printf_i+0x1f8>
 8020e58:	2b00      	cmp	r3, #0
 8020e5a:	d1ac      	bne.n	8020db6 <_printf_i+0x16a>
 8020e5c:	7803      	ldrb	r3, [r0, #0]
 8020e5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020e62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020e66:	e76c      	b.n	8020d42 <_printf_i+0xf6>
 8020e68:	08035301 	.word	0x08035301
 8020e6c:	08035312 	.word	0x08035312

08020e70 <_sbrk_r>:
 8020e70:	b538      	push	{r3, r4, r5, lr}
 8020e72:	4c06      	ldr	r4, [pc, #24]	; (8020e8c <_sbrk_r+0x1c>)
 8020e74:	2300      	movs	r3, #0
 8020e76:	4605      	mov	r5, r0
 8020e78:	4608      	mov	r0, r1
 8020e7a:	6023      	str	r3, [r4, #0]
 8020e7c:	f7ea f96a 	bl	800b154 <_sbrk>
 8020e80:	1c43      	adds	r3, r0, #1
 8020e82:	d102      	bne.n	8020e8a <_sbrk_r+0x1a>
 8020e84:	6823      	ldr	r3, [r4, #0]
 8020e86:	b103      	cbz	r3, 8020e8a <_sbrk_r+0x1a>
 8020e88:	602b      	str	r3, [r5, #0]
 8020e8a:	bd38      	pop	{r3, r4, r5, pc}
 8020e8c:	2001ff0c 	.word	0x2001ff0c

08020e90 <__sread>:
 8020e90:	b510      	push	{r4, lr}
 8020e92:	460c      	mov	r4, r1
 8020e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020e98:	f000 fa48 	bl	802132c <_read_r>
 8020e9c:	2800      	cmp	r0, #0
 8020e9e:	bfab      	itete	ge
 8020ea0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020ea2:	89a3      	ldrhlt	r3, [r4, #12]
 8020ea4:	181b      	addge	r3, r3, r0
 8020ea6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020eaa:	bfac      	ite	ge
 8020eac:	6563      	strge	r3, [r4, #84]	; 0x54
 8020eae:	81a3      	strhlt	r3, [r4, #12]
 8020eb0:	bd10      	pop	{r4, pc}

08020eb2 <__swrite>:
 8020eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020eb6:	461f      	mov	r7, r3
 8020eb8:	898b      	ldrh	r3, [r1, #12]
 8020eba:	05db      	lsls	r3, r3, #23
 8020ebc:	4605      	mov	r5, r0
 8020ebe:	460c      	mov	r4, r1
 8020ec0:	4616      	mov	r6, r2
 8020ec2:	d505      	bpl.n	8020ed0 <__swrite+0x1e>
 8020ec4:	2302      	movs	r3, #2
 8020ec6:	2200      	movs	r2, #0
 8020ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020ecc:	f000 f9b6 	bl	802123c <_lseek_r>
 8020ed0:	89a3      	ldrh	r3, [r4, #12]
 8020ed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020ed6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020eda:	81a3      	strh	r3, [r4, #12]
 8020edc:	4632      	mov	r2, r6
 8020ede:	463b      	mov	r3, r7
 8020ee0:	4628      	mov	r0, r5
 8020ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020ee6:	f000 b869 	b.w	8020fbc <_write_r>

08020eea <__sseek>:
 8020eea:	b510      	push	{r4, lr}
 8020eec:	460c      	mov	r4, r1
 8020eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020ef2:	f000 f9a3 	bl	802123c <_lseek_r>
 8020ef6:	1c43      	adds	r3, r0, #1
 8020ef8:	89a3      	ldrh	r3, [r4, #12]
 8020efa:	bf15      	itete	ne
 8020efc:	6560      	strne	r0, [r4, #84]	; 0x54
 8020efe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020f02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020f06:	81a3      	strheq	r3, [r4, #12]
 8020f08:	bf18      	it	ne
 8020f0a:	81a3      	strhne	r3, [r4, #12]
 8020f0c:	bd10      	pop	{r4, pc}

08020f0e <__sclose>:
 8020f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020f12:	f000 b8d3 	b.w	80210bc <_close_r>
	...

08020f18 <__swbuf_r>:
 8020f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020f1a:	460e      	mov	r6, r1
 8020f1c:	4614      	mov	r4, r2
 8020f1e:	4605      	mov	r5, r0
 8020f20:	b118      	cbz	r0, 8020f2a <__swbuf_r+0x12>
 8020f22:	6983      	ldr	r3, [r0, #24]
 8020f24:	b90b      	cbnz	r3, 8020f2a <__swbuf_r+0x12>
 8020f26:	f7ff fba1 	bl	802066c <__sinit>
 8020f2a:	4b21      	ldr	r3, [pc, #132]	; (8020fb0 <__swbuf_r+0x98>)
 8020f2c:	429c      	cmp	r4, r3
 8020f2e:	d12a      	bne.n	8020f86 <__swbuf_r+0x6e>
 8020f30:	686c      	ldr	r4, [r5, #4]
 8020f32:	69a3      	ldr	r3, [r4, #24]
 8020f34:	60a3      	str	r3, [r4, #8]
 8020f36:	89a3      	ldrh	r3, [r4, #12]
 8020f38:	071a      	lsls	r2, r3, #28
 8020f3a:	d52e      	bpl.n	8020f9a <__swbuf_r+0x82>
 8020f3c:	6923      	ldr	r3, [r4, #16]
 8020f3e:	b363      	cbz	r3, 8020f9a <__swbuf_r+0x82>
 8020f40:	6923      	ldr	r3, [r4, #16]
 8020f42:	6820      	ldr	r0, [r4, #0]
 8020f44:	1ac0      	subs	r0, r0, r3
 8020f46:	6963      	ldr	r3, [r4, #20]
 8020f48:	b2f6      	uxtb	r6, r6
 8020f4a:	4283      	cmp	r3, r0
 8020f4c:	4637      	mov	r7, r6
 8020f4e:	dc04      	bgt.n	8020f5a <__swbuf_r+0x42>
 8020f50:	4621      	mov	r1, r4
 8020f52:	4628      	mov	r0, r5
 8020f54:	f000 f948 	bl	80211e8 <_fflush_r>
 8020f58:	bb28      	cbnz	r0, 8020fa6 <__swbuf_r+0x8e>
 8020f5a:	68a3      	ldr	r3, [r4, #8]
 8020f5c:	3b01      	subs	r3, #1
 8020f5e:	60a3      	str	r3, [r4, #8]
 8020f60:	6823      	ldr	r3, [r4, #0]
 8020f62:	1c5a      	adds	r2, r3, #1
 8020f64:	6022      	str	r2, [r4, #0]
 8020f66:	701e      	strb	r6, [r3, #0]
 8020f68:	6963      	ldr	r3, [r4, #20]
 8020f6a:	3001      	adds	r0, #1
 8020f6c:	4283      	cmp	r3, r0
 8020f6e:	d004      	beq.n	8020f7a <__swbuf_r+0x62>
 8020f70:	89a3      	ldrh	r3, [r4, #12]
 8020f72:	07db      	lsls	r3, r3, #31
 8020f74:	d519      	bpl.n	8020faa <__swbuf_r+0x92>
 8020f76:	2e0a      	cmp	r6, #10
 8020f78:	d117      	bne.n	8020faa <__swbuf_r+0x92>
 8020f7a:	4621      	mov	r1, r4
 8020f7c:	4628      	mov	r0, r5
 8020f7e:	f000 f933 	bl	80211e8 <_fflush_r>
 8020f82:	b190      	cbz	r0, 8020faa <__swbuf_r+0x92>
 8020f84:	e00f      	b.n	8020fa6 <__swbuf_r+0x8e>
 8020f86:	4b0b      	ldr	r3, [pc, #44]	; (8020fb4 <__swbuf_r+0x9c>)
 8020f88:	429c      	cmp	r4, r3
 8020f8a:	d101      	bne.n	8020f90 <__swbuf_r+0x78>
 8020f8c:	68ac      	ldr	r4, [r5, #8]
 8020f8e:	e7d0      	b.n	8020f32 <__swbuf_r+0x1a>
 8020f90:	4b09      	ldr	r3, [pc, #36]	; (8020fb8 <__swbuf_r+0xa0>)
 8020f92:	429c      	cmp	r4, r3
 8020f94:	bf08      	it	eq
 8020f96:	68ec      	ldreq	r4, [r5, #12]
 8020f98:	e7cb      	b.n	8020f32 <__swbuf_r+0x1a>
 8020f9a:	4621      	mov	r1, r4
 8020f9c:	4628      	mov	r0, r5
 8020f9e:	f000 f81f 	bl	8020fe0 <__swsetup_r>
 8020fa2:	2800      	cmp	r0, #0
 8020fa4:	d0cc      	beq.n	8020f40 <__swbuf_r+0x28>
 8020fa6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8020faa:	4638      	mov	r0, r7
 8020fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020fae:	bf00      	nop
 8020fb0:	080352b0 	.word	0x080352b0
 8020fb4:	080352d0 	.word	0x080352d0
 8020fb8:	08035290 	.word	0x08035290

08020fbc <_write_r>:
 8020fbc:	b538      	push	{r3, r4, r5, lr}
 8020fbe:	4c07      	ldr	r4, [pc, #28]	; (8020fdc <_write_r+0x20>)
 8020fc0:	4605      	mov	r5, r0
 8020fc2:	4608      	mov	r0, r1
 8020fc4:	4611      	mov	r1, r2
 8020fc6:	2200      	movs	r2, #0
 8020fc8:	6022      	str	r2, [r4, #0]
 8020fca:	461a      	mov	r2, r3
 8020fcc:	f7ea f871 	bl	800b0b2 <_write>
 8020fd0:	1c43      	adds	r3, r0, #1
 8020fd2:	d102      	bne.n	8020fda <_write_r+0x1e>
 8020fd4:	6823      	ldr	r3, [r4, #0]
 8020fd6:	b103      	cbz	r3, 8020fda <_write_r+0x1e>
 8020fd8:	602b      	str	r3, [r5, #0]
 8020fda:	bd38      	pop	{r3, r4, r5, pc}
 8020fdc:	2001ff0c 	.word	0x2001ff0c

08020fe0 <__swsetup_r>:
 8020fe0:	4b32      	ldr	r3, [pc, #200]	; (80210ac <__swsetup_r+0xcc>)
 8020fe2:	b570      	push	{r4, r5, r6, lr}
 8020fe4:	681d      	ldr	r5, [r3, #0]
 8020fe6:	4606      	mov	r6, r0
 8020fe8:	460c      	mov	r4, r1
 8020fea:	b125      	cbz	r5, 8020ff6 <__swsetup_r+0x16>
 8020fec:	69ab      	ldr	r3, [r5, #24]
 8020fee:	b913      	cbnz	r3, 8020ff6 <__swsetup_r+0x16>
 8020ff0:	4628      	mov	r0, r5
 8020ff2:	f7ff fb3b 	bl	802066c <__sinit>
 8020ff6:	4b2e      	ldr	r3, [pc, #184]	; (80210b0 <__swsetup_r+0xd0>)
 8020ff8:	429c      	cmp	r4, r3
 8020ffa:	d10f      	bne.n	802101c <__swsetup_r+0x3c>
 8020ffc:	686c      	ldr	r4, [r5, #4]
 8020ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021002:	b29a      	uxth	r2, r3
 8021004:	0715      	lsls	r5, r2, #28
 8021006:	d42c      	bmi.n	8021062 <__swsetup_r+0x82>
 8021008:	06d0      	lsls	r0, r2, #27
 802100a:	d411      	bmi.n	8021030 <__swsetup_r+0x50>
 802100c:	2209      	movs	r2, #9
 802100e:	6032      	str	r2, [r6, #0]
 8021010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021014:	81a3      	strh	r3, [r4, #12]
 8021016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802101a:	e03e      	b.n	802109a <__swsetup_r+0xba>
 802101c:	4b25      	ldr	r3, [pc, #148]	; (80210b4 <__swsetup_r+0xd4>)
 802101e:	429c      	cmp	r4, r3
 8021020:	d101      	bne.n	8021026 <__swsetup_r+0x46>
 8021022:	68ac      	ldr	r4, [r5, #8]
 8021024:	e7eb      	b.n	8020ffe <__swsetup_r+0x1e>
 8021026:	4b24      	ldr	r3, [pc, #144]	; (80210b8 <__swsetup_r+0xd8>)
 8021028:	429c      	cmp	r4, r3
 802102a:	bf08      	it	eq
 802102c:	68ec      	ldreq	r4, [r5, #12]
 802102e:	e7e6      	b.n	8020ffe <__swsetup_r+0x1e>
 8021030:	0751      	lsls	r1, r2, #29
 8021032:	d512      	bpl.n	802105a <__swsetup_r+0x7a>
 8021034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021036:	b141      	cbz	r1, 802104a <__swsetup_r+0x6a>
 8021038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802103c:	4299      	cmp	r1, r3
 802103e:	d002      	beq.n	8021046 <__swsetup_r+0x66>
 8021040:	4630      	mov	r0, r6
 8021042:	f7ff fba5 	bl	8020790 <_free_r>
 8021046:	2300      	movs	r3, #0
 8021048:	6363      	str	r3, [r4, #52]	; 0x34
 802104a:	89a3      	ldrh	r3, [r4, #12]
 802104c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021050:	81a3      	strh	r3, [r4, #12]
 8021052:	2300      	movs	r3, #0
 8021054:	6063      	str	r3, [r4, #4]
 8021056:	6923      	ldr	r3, [r4, #16]
 8021058:	6023      	str	r3, [r4, #0]
 802105a:	89a3      	ldrh	r3, [r4, #12]
 802105c:	f043 0308 	orr.w	r3, r3, #8
 8021060:	81a3      	strh	r3, [r4, #12]
 8021062:	6923      	ldr	r3, [r4, #16]
 8021064:	b94b      	cbnz	r3, 802107a <__swsetup_r+0x9a>
 8021066:	89a3      	ldrh	r3, [r4, #12]
 8021068:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802106c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021070:	d003      	beq.n	802107a <__swsetup_r+0x9a>
 8021072:	4621      	mov	r1, r4
 8021074:	4630      	mov	r0, r6
 8021076:	f000 f917 	bl	80212a8 <__smakebuf_r>
 802107a:	89a2      	ldrh	r2, [r4, #12]
 802107c:	f012 0301 	ands.w	r3, r2, #1
 8021080:	d00c      	beq.n	802109c <__swsetup_r+0xbc>
 8021082:	2300      	movs	r3, #0
 8021084:	60a3      	str	r3, [r4, #8]
 8021086:	6963      	ldr	r3, [r4, #20]
 8021088:	425b      	negs	r3, r3
 802108a:	61a3      	str	r3, [r4, #24]
 802108c:	6923      	ldr	r3, [r4, #16]
 802108e:	b953      	cbnz	r3, 80210a6 <__swsetup_r+0xc6>
 8021090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021094:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8021098:	d1ba      	bne.n	8021010 <__swsetup_r+0x30>
 802109a:	bd70      	pop	{r4, r5, r6, pc}
 802109c:	0792      	lsls	r2, r2, #30
 802109e:	bf58      	it	pl
 80210a0:	6963      	ldrpl	r3, [r4, #20]
 80210a2:	60a3      	str	r3, [r4, #8]
 80210a4:	e7f2      	b.n	802108c <__swsetup_r+0xac>
 80210a6:	2000      	movs	r0, #0
 80210a8:	e7f7      	b.n	802109a <__swsetup_r+0xba>
 80210aa:	bf00      	nop
 80210ac:	2000005c 	.word	0x2000005c
 80210b0:	080352b0 	.word	0x080352b0
 80210b4:	080352d0 	.word	0x080352d0
 80210b8:	08035290 	.word	0x08035290

080210bc <_close_r>:
 80210bc:	b538      	push	{r3, r4, r5, lr}
 80210be:	4c06      	ldr	r4, [pc, #24]	; (80210d8 <_close_r+0x1c>)
 80210c0:	2300      	movs	r3, #0
 80210c2:	4605      	mov	r5, r0
 80210c4:	4608      	mov	r0, r1
 80210c6:	6023      	str	r3, [r4, #0]
 80210c8:	f7ea f80f 	bl	800b0ea <_close>
 80210cc:	1c43      	adds	r3, r0, #1
 80210ce:	d102      	bne.n	80210d6 <_close_r+0x1a>
 80210d0:	6823      	ldr	r3, [r4, #0]
 80210d2:	b103      	cbz	r3, 80210d6 <_close_r+0x1a>
 80210d4:	602b      	str	r3, [r5, #0]
 80210d6:	bd38      	pop	{r3, r4, r5, pc}
 80210d8:	2001ff0c 	.word	0x2001ff0c

080210dc <__sflush_r>:
 80210dc:	898a      	ldrh	r2, [r1, #12]
 80210de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80210e2:	4605      	mov	r5, r0
 80210e4:	0710      	lsls	r0, r2, #28
 80210e6:	460c      	mov	r4, r1
 80210e8:	d458      	bmi.n	802119c <__sflush_r+0xc0>
 80210ea:	684b      	ldr	r3, [r1, #4]
 80210ec:	2b00      	cmp	r3, #0
 80210ee:	dc05      	bgt.n	80210fc <__sflush_r+0x20>
 80210f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80210f2:	2b00      	cmp	r3, #0
 80210f4:	dc02      	bgt.n	80210fc <__sflush_r+0x20>
 80210f6:	2000      	movs	r0, #0
 80210f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80210fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80210fe:	2e00      	cmp	r6, #0
 8021100:	d0f9      	beq.n	80210f6 <__sflush_r+0x1a>
 8021102:	2300      	movs	r3, #0
 8021104:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021108:	682f      	ldr	r7, [r5, #0]
 802110a:	6a21      	ldr	r1, [r4, #32]
 802110c:	602b      	str	r3, [r5, #0]
 802110e:	d032      	beq.n	8021176 <__sflush_r+0x9a>
 8021110:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021112:	89a3      	ldrh	r3, [r4, #12]
 8021114:	075a      	lsls	r2, r3, #29
 8021116:	d505      	bpl.n	8021124 <__sflush_r+0x48>
 8021118:	6863      	ldr	r3, [r4, #4]
 802111a:	1ac0      	subs	r0, r0, r3
 802111c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802111e:	b10b      	cbz	r3, 8021124 <__sflush_r+0x48>
 8021120:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021122:	1ac0      	subs	r0, r0, r3
 8021124:	2300      	movs	r3, #0
 8021126:	4602      	mov	r2, r0
 8021128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802112a:	6a21      	ldr	r1, [r4, #32]
 802112c:	4628      	mov	r0, r5
 802112e:	47b0      	blx	r6
 8021130:	1c43      	adds	r3, r0, #1
 8021132:	89a3      	ldrh	r3, [r4, #12]
 8021134:	d106      	bne.n	8021144 <__sflush_r+0x68>
 8021136:	6829      	ldr	r1, [r5, #0]
 8021138:	291d      	cmp	r1, #29
 802113a:	d848      	bhi.n	80211ce <__sflush_r+0xf2>
 802113c:	4a29      	ldr	r2, [pc, #164]	; (80211e4 <__sflush_r+0x108>)
 802113e:	40ca      	lsrs	r2, r1
 8021140:	07d6      	lsls	r6, r2, #31
 8021142:	d544      	bpl.n	80211ce <__sflush_r+0xf2>
 8021144:	2200      	movs	r2, #0
 8021146:	6062      	str	r2, [r4, #4]
 8021148:	04d9      	lsls	r1, r3, #19
 802114a:	6922      	ldr	r2, [r4, #16]
 802114c:	6022      	str	r2, [r4, #0]
 802114e:	d504      	bpl.n	802115a <__sflush_r+0x7e>
 8021150:	1c42      	adds	r2, r0, #1
 8021152:	d101      	bne.n	8021158 <__sflush_r+0x7c>
 8021154:	682b      	ldr	r3, [r5, #0]
 8021156:	b903      	cbnz	r3, 802115a <__sflush_r+0x7e>
 8021158:	6560      	str	r0, [r4, #84]	; 0x54
 802115a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802115c:	602f      	str	r7, [r5, #0]
 802115e:	2900      	cmp	r1, #0
 8021160:	d0c9      	beq.n	80210f6 <__sflush_r+0x1a>
 8021162:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021166:	4299      	cmp	r1, r3
 8021168:	d002      	beq.n	8021170 <__sflush_r+0x94>
 802116a:	4628      	mov	r0, r5
 802116c:	f7ff fb10 	bl	8020790 <_free_r>
 8021170:	2000      	movs	r0, #0
 8021172:	6360      	str	r0, [r4, #52]	; 0x34
 8021174:	e7c0      	b.n	80210f8 <__sflush_r+0x1c>
 8021176:	2301      	movs	r3, #1
 8021178:	4628      	mov	r0, r5
 802117a:	47b0      	blx	r6
 802117c:	1c41      	adds	r1, r0, #1
 802117e:	d1c8      	bne.n	8021112 <__sflush_r+0x36>
 8021180:	682b      	ldr	r3, [r5, #0]
 8021182:	2b00      	cmp	r3, #0
 8021184:	d0c5      	beq.n	8021112 <__sflush_r+0x36>
 8021186:	2b1d      	cmp	r3, #29
 8021188:	d001      	beq.n	802118e <__sflush_r+0xb2>
 802118a:	2b16      	cmp	r3, #22
 802118c:	d101      	bne.n	8021192 <__sflush_r+0xb6>
 802118e:	602f      	str	r7, [r5, #0]
 8021190:	e7b1      	b.n	80210f6 <__sflush_r+0x1a>
 8021192:	89a3      	ldrh	r3, [r4, #12]
 8021194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021198:	81a3      	strh	r3, [r4, #12]
 802119a:	e7ad      	b.n	80210f8 <__sflush_r+0x1c>
 802119c:	690f      	ldr	r7, [r1, #16]
 802119e:	2f00      	cmp	r7, #0
 80211a0:	d0a9      	beq.n	80210f6 <__sflush_r+0x1a>
 80211a2:	0793      	lsls	r3, r2, #30
 80211a4:	680e      	ldr	r6, [r1, #0]
 80211a6:	bf08      	it	eq
 80211a8:	694b      	ldreq	r3, [r1, #20]
 80211aa:	600f      	str	r7, [r1, #0]
 80211ac:	bf18      	it	ne
 80211ae:	2300      	movne	r3, #0
 80211b0:	eba6 0807 	sub.w	r8, r6, r7
 80211b4:	608b      	str	r3, [r1, #8]
 80211b6:	f1b8 0f00 	cmp.w	r8, #0
 80211ba:	dd9c      	ble.n	80210f6 <__sflush_r+0x1a>
 80211bc:	4643      	mov	r3, r8
 80211be:	463a      	mov	r2, r7
 80211c0:	6a21      	ldr	r1, [r4, #32]
 80211c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80211c4:	4628      	mov	r0, r5
 80211c6:	47b0      	blx	r6
 80211c8:	2800      	cmp	r0, #0
 80211ca:	dc06      	bgt.n	80211da <__sflush_r+0xfe>
 80211cc:	89a3      	ldrh	r3, [r4, #12]
 80211ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80211d2:	81a3      	strh	r3, [r4, #12]
 80211d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80211d8:	e78e      	b.n	80210f8 <__sflush_r+0x1c>
 80211da:	4407      	add	r7, r0
 80211dc:	eba8 0800 	sub.w	r8, r8, r0
 80211e0:	e7e9      	b.n	80211b6 <__sflush_r+0xda>
 80211e2:	bf00      	nop
 80211e4:	20400001 	.word	0x20400001

080211e8 <_fflush_r>:
 80211e8:	b538      	push	{r3, r4, r5, lr}
 80211ea:	690b      	ldr	r3, [r1, #16]
 80211ec:	4605      	mov	r5, r0
 80211ee:	460c      	mov	r4, r1
 80211f0:	b1db      	cbz	r3, 802122a <_fflush_r+0x42>
 80211f2:	b118      	cbz	r0, 80211fc <_fflush_r+0x14>
 80211f4:	6983      	ldr	r3, [r0, #24]
 80211f6:	b90b      	cbnz	r3, 80211fc <_fflush_r+0x14>
 80211f8:	f7ff fa38 	bl	802066c <__sinit>
 80211fc:	4b0c      	ldr	r3, [pc, #48]	; (8021230 <_fflush_r+0x48>)
 80211fe:	429c      	cmp	r4, r3
 8021200:	d109      	bne.n	8021216 <_fflush_r+0x2e>
 8021202:	686c      	ldr	r4, [r5, #4]
 8021204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021208:	b17b      	cbz	r3, 802122a <_fflush_r+0x42>
 802120a:	4621      	mov	r1, r4
 802120c:	4628      	mov	r0, r5
 802120e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021212:	f7ff bf63 	b.w	80210dc <__sflush_r>
 8021216:	4b07      	ldr	r3, [pc, #28]	; (8021234 <_fflush_r+0x4c>)
 8021218:	429c      	cmp	r4, r3
 802121a:	d101      	bne.n	8021220 <_fflush_r+0x38>
 802121c:	68ac      	ldr	r4, [r5, #8]
 802121e:	e7f1      	b.n	8021204 <_fflush_r+0x1c>
 8021220:	4b05      	ldr	r3, [pc, #20]	; (8021238 <_fflush_r+0x50>)
 8021222:	429c      	cmp	r4, r3
 8021224:	bf08      	it	eq
 8021226:	68ec      	ldreq	r4, [r5, #12]
 8021228:	e7ec      	b.n	8021204 <_fflush_r+0x1c>
 802122a:	2000      	movs	r0, #0
 802122c:	bd38      	pop	{r3, r4, r5, pc}
 802122e:	bf00      	nop
 8021230:	080352b0 	.word	0x080352b0
 8021234:	080352d0 	.word	0x080352d0
 8021238:	08035290 	.word	0x08035290

0802123c <_lseek_r>:
 802123c:	b538      	push	{r3, r4, r5, lr}
 802123e:	4c07      	ldr	r4, [pc, #28]	; (802125c <_lseek_r+0x20>)
 8021240:	4605      	mov	r5, r0
 8021242:	4608      	mov	r0, r1
 8021244:	4611      	mov	r1, r2
 8021246:	2200      	movs	r2, #0
 8021248:	6022      	str	r2, [r4, #0]
 802124a:	461a      	mov	r2, r3
 802124c:	f7e9 ff74 	bl	800b138 <_lseek>
 8021250:	1c43      	adds	r3, r0, #1
 8021252:	d102      	bne.n	802125a <_lseek_r+0x1e>
 8021254:	6823      	ldr	r3, [r4, #0]
 8021256:	b103      	cbz	r3, 802125a <_lseek_r+0x1e>
 8021258:	602b      	str	r3, [r5, #0]
 802125a:	bd38      	pop	{r3, r4, r5, pc}
 802125c:	2001ff0c 	.word	0x2001ff0c

08021260 <__swhatbuf_r>:
 8021260:	b570      	push	{r4, r5, r6, lr}
 8021262:	460e      	mov	r6, r1
 8021264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021268:	2900      	cmp	r1, #0
 802126a:	b096      	sub	sp, #88	; 0x58
 802126c:	4614      	mov	r4, r2
 802126e:	461d      	mov	r5, r3
 8021270:	da07      	bge.n	8021282 <__swhatbuf_r+0x22>
 8021272:	2300      	movs	r3, #0
 8021274:	602b      	str	r3, [r5, #0]
 8021276:	89b3      	ldrh	r3, [r6, #12]
 8021278:	061a      	lsls	r2, r3, #24
 802127a:	d410      	bmi.n	802129e <__swhatbuf_r+0x3e>
 802127c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021280:	e00e      	b.n	80212a0 <__swhatbuf_r+0x40>
 8021282:	466a      	mov	r2, sp
 8021284:	f000 f864 	bl	8021350 <_fstat_r>
 8021288:	2800      	cmp	r0, #0
 802128a:	dbf2      	blt.n	8021272 <__swhatbuf_r+0x12>
 802128c:	9a01      	ldr	r2, [sp, #4]
 802128e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021292:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021296:	425a      	negs	r2, r3
 8021298:	415a      	adcs	r2, r3
 802129a:	602a      	str	r2, [r5, #0]
 802129c:	e7ee      	b.n	802127c <__swhatbuf_r+0x1c>
 802129e:	2340      	movs	r3, #64	; 0x40
 80212a0:	2000      	movs	r0, #0
 80212a2:	6023      	str	r3, [r4, #0]
 80212a4:	b016      	add	sp, #88	; 0x58
 80212a6:	bd70      	pop	{r4, r5, r6, pc}

080212a8 <__smakebuf_r>:
 80212a8:	898b      	ldrh	r3, [r1, #12]
 80212aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80212ac:	079d      	lsls	r5, r3, #30
 80212ae:	4606      	mov	r6, r0
 80212b0:	460c      	mov	r4, r1
 80212b2:	d507      	bpl.n	80212c4 <__smakebuf_r+0x1c>
 80212b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80212b8:	6023      	str	r3, [r4, #0]
 80212ba:	6123      	str	r3, [r4, #16]
 80212bc:	2301      	movs	r3, #1
 80212be:	6163      	str	r3, [r4, #20]
 80212c0:	b002      	add	sp, #8
 80212c2:	bd70      	pop	{r4, r5, r6, pc}
 80212c4:	ab01      	add	r3, sp, #4
 80212c6:	466a      	mov	r2, sp
 80212c8:	f7ff ffca 	bl	8021260 <__swhatbuf_r>
 80212cc:	9900      	ldr	r1, [sp, #0]
 80212ce:	4605      	mov	r5, r0
 80212d0:	4630      	mov	r0, r6
 80212d2:	f7ff faab 	bl	802082c <_malloc_r>
 80212d6:	b948      	cbnz	r0, 80212ec <__smakebuf_r+0x44>
 80212d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80212dc:	059a      	lsls	r2, r3, #22
 80212de:	d4ef      	bmi.n	80212c0 <__smakebuf_r+0x18>
 80212e0:	f023 0303 	bic.w	r3, r3, #3
 80212e4:	f043 0302 	orr.w	r3, r3, #2
 80212e8:	81a3      	strh	r3, [r4, #12]
 80212ea:	e7e3      	b.n	80212b4 <__smakebuf_r+0xc>
 80212ec:	4b0d      	ldr	r3, [pc, #52]	; (8021324 <__smakebuf_r+0x7c>)
 80212ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80212f0:	89a3      	ldrh	r3, [r4, #12]
 80212f2:	6020      	str	r0, [r4, #0]
 80212f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80212f8:	81a3      	strh	r3, [r4, #12]
 80212fa:	9b00      	ldr	r3, [sp, #0]
 80212fc:	6163      	str	r3, [r4, #20]
 80212fe:	9b01      	ldr	r3, [sp, #4]
 8021300:	6120      	str	r0, [r4, #16]
 8021302:	b15b      	cbz	r3, 802131c <__smakebuf_r+0x74>
 8021304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021308:	4630      	mov	r0, r6
 802130a:	f000 f833 	bl	8021374 <_isatty_r>
 802130e:	b128      	cbz	r0, 802131c <__smakebuf_r+0x74>
 8021310:	89a3      	ldrh	r3, [r4, #12]
 8021312:	f023 0303 	bic.w	r3, r3, #3
 8021316:	f043 0301 	orr.w	r3, r3, #1
 802131a:	81a3      	strh	r3, [r4, #12]
 802131c:	89a3      	ldrh	r3, [r4, #12]
 802131e:	431d      	orrs	r5, r3
 8021320:	81a5      	strh	r5, [r4, #12]
 8021322:	e7cd      	b.n	80212c0 <__smakebuf_r+0x18>
 8021324:	08020635 	.word	0x08020635

08021328 <__malloc_lock>:
 8021328:	4770      	bx	lr

0802132a <__malloc_unlock>:
 802132a:	4770      	bx	lr

0802132c <_read_r>:
 802132c:	b538      	push	{r3, r4, r5, lr}
 802132e:	4c07      	ldr	r4, [pc, #28]	; (802134c <_read_r+0x20>)
 8021330:	4605      	mov	r5, r0
 8021332:	4608      	mov	r0, r1
 8021334:	4611      	mov	r1, r2
 8021336:	2200      	movs	r2, #0
 8021338:	6022      	str	r2, [r4, #0]
 802133a:	461a      	mov	r2, r3
 802133c:	f7e9 fe9c 	bl	800b078 <_read>
 8021340:	1c43      	adds	r3, r0, #1
 8021342:	d102      	bne.n	802134a <_read_r+0x1e>
 8021344:	6823      	ldr	r3, [r4, #0]
 8021346:	b103      	cbz	r3, 802134a <_read_r+0x1e>
 8021348:	602b      	str	r3, [r5, #0]
 802134a:	bd38      	pop	{r3, r4, r5, pc}
 802134c:	2001ff0c 	.word	0x2001ff0c

08021350 <_fstat_r>:
 8021350:	b538      	push	{r3, r4, r5, lr}
 8021352:	4c07      	ldr	r4, [pc, #28]	; (8021370 <_fstat_r+0x20>)
 8021354:	2300      	movs	r3, #0
 8021356:	4605      	mov	r5, r0
 8021358:	4608      	mov	r0, r1
 802135a:	4611      	mov	r1, r2
 802135c:	6023      	str	r3, [r4, #0]
 802135e:	f7e9 fed0 	bl	800b102 <_fstat>
 8021362:	1c43      	adds	r3, r0, #1
 8021364:	d102      	bne.n	802136c <_fstat_r+0x1c>
 8021366:	6823      	ldr	r3, [r4, #0]
 8021368:	b103      	cbz	r3, 802136c <_fstat_r+0x1c>
 802136a:	602b      	str	r3, [r5, #0]
 802136c:	bd38      	pop	{r3, r4, r5, pc}
 802136e:	bf00      	nop
 8021370:	2001ff0c 	.word	0x2001ff0c

08021374 <_isatty_r>:
 8021374:	b538      	push	{r3, r4, r5, lr}
 8021376:	4c06      	ldr	r4, [pc, #24]	; (8021390 <_isatty_r+0x1c>)
 8021378:	2300      	movs	r3, #0
 802137a:	4605      	mov	r5, r0
 802137c:	4608      	mov	r0, r1
 802137e:	6023      	str	r3, [r4, #0]
 8021380:	f7e9 fecf 	bl	800b122 <_isatty>
 8021384:	1c43      	adds	r3, r0, #1
 8021386:	d102      	bne.n	802138e <_isatty_r+0x1a>
 8021388:	6823      	ldr	r3, [r4, #0]
 802138a:	b103      	cbz	r3, 802138e <_isatty_r+0x1a>
 802138c:	602b      	str	r3, [r5, #0]
 802138e:	bd38      	pop	{r3, r4, r5, pc}
 8021390:	2001ff0c 	.word	0x2001ff0c

08021394 <log10>:
 8021394:	b500      	push	{lr}
 8021396:	ed2d 8b02 	vpush	{d8}
 802139a:	eeb0 8b40 	vmov.f64	d8, d0
 802139e:	b08b      	sub	sp, #44	; 0x2c
 80213a0:	f000 f8b2 	bl	8021508 <__ieee754_log10>
 80213a4:	4b2d      	ldr	r3, [pc, #180]	; (802145c <log10+0xc8>)
 80213a6:	f993 3000 	ldrsb.w	r3, [r3]
 80213aa:	1c5a      	adds	r2, r3, #1
 80213ac:	d051      	beq.n	8021452 <log10+0xbe>
 80213ae:	eeb4 8b48 	vcmp.f64	d8, d8
 80213b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213b6:	d64c      	bvs.n	8021452 <log10+0xbe>
 80213b8:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 80213bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213c0:	d847      	bhi.n	8021452 <log10+0xbe>
 80213c2:	4a27      	ldr	r2, [pc, #156]	; (8021460 <log10+0xcc>)
 80213c4:	9201      	str	r2, [sp, #4]
 80213c6:	2200      	movs	r2, #0
 80213c8:	9208      	str	r2, [sp, #32]
 80213ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80213ce:	ed8d 8b04 	vstr	d8, [sp, #16]
 80213d2:	b993      	cbnz	r3, 80213fa <log10+0x66>
 80213d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80213d8:	4922      	ldr	r1, [pc, #136]	; (8021464 <log10+0xd0>)
 80213da:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 80213de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80213e6:	d025      	beq.n	8021434 <log10+0xa0>
 80213e8:	2201      	movs	r2, #1
 80213ea:	2b02      	cmp	r3, #2
 80213ec:	9200      	str	r2, [sp, #0]
 80213ee:	d116      	bne.n	802141e <log10+0x8a>
 80213f0:	f000 fa28 	bl	8021844 <__errno>
 80213f4:	2321      	movs	r3, #33	; 0x21
 80213f6:	6003      	str	r3, [r0, #0]
 80213f8:	e016      	b.n	8021428 <log10+0x94>
 80213fa:	491b      	ldr	r1, [pc, #108]	; (8021468 <log10+0xd4>)
 80213fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8021400:	2000      	movs	r0, #0
 8021402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021406:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802140a:	d1ed      	bne.n	80213e8 <log10+0x54>
 802140c:	2202      	movs	r2, #2
 802140e:	4293      	cmp	r3, r2
 8021410:	9200      	str	r2, [sp, #0]
 8021412:	d111      	bne.n	8021438 <log10+0xa4>
 8021414:	f000 fa16 	bl	8021844 <__errno>
 8021418:	2322      	movs	r3, #34	; 0x22
 802141a:	6003      	str	r3, [r0, #0]
 802141c:	e011      	b.n	8021442 <log10+0xae>
 802141e:	4668      	mov	r0, sp
 8021420:	f000 f8eb 	bl	80215fa <matherr>
 8021424:	2800      	cmp	r0, #0
 8021426:	d0e3      	beq.n	80213f0 <log10+0x5c>
 8021428:	4810      	ldr	r0, [pc, #64]	; (802146c <log10+0xd8>)
 802142a:	f000 f8e9 	bl	8021600 <nan>
 802142e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8021432:	e006      	b.n	8021442 <log10+0xae>
 8021434:	2302      	movs	r3, #2
 8021436:	9300      	str	r3, [sp, #0]
 8021438:	4668      	mov	r0, sp
 802143a:	f000 f8de 	bl	80215fa <matherr>
 802143e:	2800      	cmp	r0, #0
 8021440:	d0e8      	beq.n	8021414 <log10+0x80>
 8021442:	9b08      	ldr	r3, [sp, #32]
 8021444:	b11b      	cbz	r3, 802144e <log10+0xba>
 8021446:	f000 f9fd 	bl	8021844 <__errno>
 802144a:	9b08      	ldr	r3, [sp, #32]
 802144c:	6003      	str	r3, [r0, #0]
 802144e:	ed9d 0b06 	vldr	d0, [sp, #24]
 8021452:	b00b      	add	sp, #44	; 0x2c
 8021454:	ecbd 8b02 	vpop	{d8}
 8021458:	f85d fb04 	ldr.w	pc, [sp], #4
 802145c:	200000c0 	.word	0x200000c0
 8021460:	08035323 	.word	0x08035323
 8021464:	c7efffff 	.word	0xc7efffff
 8021468:	fff00000 	.word	0xfff00000
 802146c:	080352f5 	.word	0x080352f5

08021470 <sqrt>:
 8021470:	b500      	push	{lr}
 8021472:	ed2d 8b02 	vpush	{d8}
 8021476:	eeb0 8b40 	vmov.f64	d8, d0
 802147a:	b08b      	sub	sp, #44	; 0x2c
 802147c:	f000 f8ba 	bl	80215f4 <__ieee754_sqrt>
 8021480:	4b1f      	ldr	r3, [pc, #124]	; (8021500 <sqrt+0x90>)
 8021482:	f993 3000 	ldrsb.w	r3, [r3]
 8021486:	1c5a      	adds	r2, r3, #1
 8021488:	d024      	beq.n	80214d4 <sqrt+0x64>
 802148a:	eeb4 8b48 	vcmp.f64	d8, d8
 802148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021492:	d61f      	bvs.n	80214d4 <sqrt+0x64>
 8021494:	ed9f 7b18 	vldr	d7, [pc, #96]	; 80214f8 <sqrt+0x88>
 8021498:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214a0:	d518      	bpl.n	80214d4 <sqrt+0x64>
 80214a2:	2201      	movs	r2, #1
 80214a4:	9200      	str	r2, [sp, #0]
 80214a6:	4a17      	ldr	r2, [pc, #92]	; (8021504 <sqrt+0x94>)
 80214a8:	9201      	str	r2, [sp, #4]
 80214aa:	2200      	movs	r2, #0
 80214ac:	9208      	str	r2, [sp, #32]
 80214ae:	ed8d 8b04 	vstr	d8, [sp, #16]
 80214b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80214b6:	b993      	cbnz	r3, 80214de <sqrt+0x6e>
 80214b8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80214bc:	4668      	mov	r0, sp
 80214be:	f000 f89c 	bl	80215fa <matherr>
 80214c2:	b190      	cbz	r0, 80214ea <sqrt+0x7a>
 80214c4:	9b08      	ldr	r3, [sp, #32]
 80214c6:	b11b      	cbz	r3, 80214d0 <sqrt+0x60>
 80214c8:	f000 f9bc 	bl	8021844 <__errno>
 80214cc:	9b08      	ldr	r3, [sp, #32]
 80214ce:	6003      	str	r3, [r0, #0]
 80214d0:	ed9d 0b06 	vldr	d0, [sp, #24]
 80214d4:	b00b      	add	sp, #44	; 0x2c
 80214d6:	ecbd 8b02 	vpop	{d8}
 80214da:	f85d fb04 	ldr.w	pc, [sp], #4
 80214de:	2b02      	cmp	r3, #2
 80214e0:	ee87 6b07 	vdiv.f64	d6, d7, d7
 80214e4:	ed8d 6b06 	vstr	d6, [sp, #24]
 80214e8:	d1e8      	bne.n	80214bc <sqrt+0x4c>
 80214ea:	f000 f9ab 	bl	8021844 <__errno>
 80214ee:	2321      	movs	r3, #33	; 0x21
 80214f0:	6003      	str	r3, [r0, #0]
 80214f2:	e7e7      	b.n	80214c4 <sqrt+0x54>
 80214f4:	f3af 8000 	nop.w
	...
 8021500:	200000c0 	.word	0x200000c0
 8021504:	08035329 	.word	0x08035329

08021508 <__ieee754_log10>:
 8021508:	b500      	push	{lr}
 802150a:	ed2d 8b02 	vpush	{d8}
 802150e:	b083      	sub	sp, #12
 8021510:	ed8d 0b00 	vstr	d0, [sp]
 8021514:	9a01      	ldr	r2, [sp, #4]
 8021516:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 802151a:	da29      	bge.n	8021570 <__ieee754_log10+0x68>
 802151c:	9900      	ldr	r1, [sp, #0]
 802151e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8021522:	430b      	orrs	r3, r1
 8021524:	d10a      	bne.n	802153c <__ieee754_log10+0x34>
 8021526:	ed9f 6b26 	vldr	d6, [pc, #152]	; 80215c0 <__ieee754_log10+0xb8>
 802152a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80215c8 <__ieee754_log10+0xc0>
 802152e:	ee86 0b07 	vdiv.f64	d0, d6, d7
 8021532:	b003      	add	sp, #12
 8021534:	ecbd 8b02 	vpop	{d8}
 8021538:	f85d fb04 	ldr.w	pc, [sp], #4
 802153c:	2a00      	cmp	r2, #0
 802153e:	da04      	bge.n	802154a <__ieee754_log10+0x42>
 8021540:	ed9d 7b00 	vldr	d7, [sp]
 8021544:	ee37 6b47 	vsub.f64	d6, d7, d7
 8021548:	e7ef      	b.n	802152a <__ieee754_log10+0x22>
 802154a:	ed9d 6b00 	vldr	d6, [sp]
 802154e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80215d0 <__ieee754_log10+0xc8>
 8021552:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021556:	ed8d 7b00 	vstr	d7, [sp]
 802155a:	9a01      	ldr	r2, [sp, #4]
 802155c:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8021560:	4b23      	ldr	r3, [pc, #140]	; (80215f0 <__ieee754_log10+0xe8>)
 8021562:	429a      	cmp	r2, r3
 8021564:	dd06      	ble.n	8021574 <__ieee754_log10+0x6c>
 8021566:	ed9d 7b00 	vldr	d7, [sp]
 802156a:	ee37 0b07 	vadd.f64	d0, d7, d7
 802156e:	e7e0      	b.n	8021532 <__ieee754_log10+0x2a>
 8021570:	2100      	movs	r1, #0
 8021572:	e7f5      	b.n	8021560 <__ieee754_log10+0x58>
 8021574:	1513      	asrs	r3, r2, #20
 8021576:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802157a:	440b      	add	r3, r1
 802157c:	0fd8      	lsrs	r0, r3, #31
 802157e:	4403      	add	r3, r0
 8021580:	ee07 3a90 	vmov	s15, r3
 8021584:	f3c2 0113 	ubfx	r1, r2, #0, #20
 8021588:	f5c0 707f 	rsb	r0, r0, #1020	; 0x3fc
 802158c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021590:	3003      	adds	r0, #3
 8021592:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8021596:	ec43 2b10 	vmov	d0, r2, r3
 802159a:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 802159e:	f000 f837 	bl	8021610 <__ieee754_log>
 80215a2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80215d8 <__ieee754_log10+0xd0>
 80215a6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80215aa:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80215e0 <__ieee754_log10+0xd8>
 80215ae:	eea8 0b07 	vfma.f64	d0, d8, d7
 80215b2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80215e8 <__ieee754_log10+0xe0>
 80215b6:	eea8 0b07 	vfma.f64	d0, d8, d7
 80215ba:	e7ba      	b.n	8021532 <__ieee754_log10+0x2a>
 80215bc:	f3af 8000 	nop.w
 80215c0:	00000000 	.word	0x00000000
 80215c4:	c3500000 	.word	0xc3500000
	...
 80215d4:	43500000 	.word	0x43500000
 80215d8:	1526e50e 	.word	0x1526e50e
 80215dc:	3fdbcb7b 	.word	0x3fdbcb7b
 80215e0:	11f12b36 	.word	0x11f12b36
 80215e4:	3d59fef3 	.word	0x3d59fef3
 80215e8:	509f6000 	.word	0x509f6000
 80215ec:	3fd34413 	.word	0x3fd34413
 80215f0:	7fefffff 	.word	0x7fefffff

080215f4 <__ieee754_sqrt>:
 80215f4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80215f8:	4770      	bx	lr

080215fa <matherr>:
 80215fa:	2000      	movs	r0, #0
 80215fc:	4770      	bx	lr
	...

08021600 <nan>:
 8021600:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8021608 <nan+0x8>
 8021604:	4770      	bx	lr
 8021606:	bf00      	nop
 8021608:	00000000 	.word	0x00000000
 802160c:	7ff80000 	.word	0x7ff80000

08021610 <__ieee754_log>:
 8021610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021612:	ed8d 0b00 	vstr	d0, [sp]
 8021616:	9a01      	ldr	r2, [sp, #4]
 8021618:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 802161c:	da26      	bge.n	802166c <__ieee754_log+0x5c>
 802161e:	9900      	ldr	r1, [sp, #0]
 8021620:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8021624:	430b      	orrs	r3, r1
 8021626:	d107      	bne.n	8021638 <__ieee754_log+0x28>
 8021628:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 80217d8 <__ieee754_log+0x1c8>
 802162c:	ed9f 7b6c 	vldr	d7, [pc, #432]	; 80217e0 <__ieee754_log+0x1d0>
 8021630:	ee86 0b07 	vdiv.f64	d0, d6, d7
 8021634:	b003      	add	sp, #12
 8021636:	bd30      	pop	{r4, r5, pc}
 8021638:	2a00      	cmp	r2, #0
 802163a:	da04      	bge.n	8021646 <__ieee754_log+0x36>
 802163c:	ed9d 7b00 	vldr	d7, [sp]
 8021640:	ee37 6b47 	vsub.f64	d6, d7, d7
 8021644:	e7f2      	b.n	802162c <__ieee754_log+0x1c>
 8021646:	ed9d 6b00 	vldr	d6, [sp]
 802164a:	ed9f 7b67 	vldr	d7, [pc, #412]	; 80217e8 <__ieee754_log+0x1d8>
 802164e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021652:	ed8d 7b00 	vstr	d7, [sp]
 8021656:	9a01      	ldr	r2, [sp, #4]
 8021658:	f06f 0135 	mvn.w	r1, #53	; 0x35
 802165c:	4b78      	ldr	r3, [pc, #480]	; (8021840 <__ieee754_log+0x230>)
 802165e:	429a      	cmp	r2, r3
 8021660:	dd06      	ble.n	8021670 <__ieee754_log+0x60>
 8021662:	ed9d 7b00 	vldr	d7, [sp]
 8021666:	ee37 0b07 	vadd.f64	d0, d7, d7
 802166a:	e7e3      	b.n	8021634 <__ieee754_log+0x24>
 802166c:	2100      	movs	r1, #0
 802166e:	e7f5      	b.n	802165c <__ieee754_log+0x4c>
 8021670:	1513      	asrs	r3, r2, #20
 8021672:	f3c2 0013 	ubfx	r0, r2, #0, #20
 8021676:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802167a:	4419      	add	r1, r3
 802167c:	f500 2315 	add.w	r3, r0, #610304	; 0x95000
 8021680:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8021684:	f403 1480 	and.w	r4, r3, #1048576	; 0x100000
 8021688:	f084 557f 	eor.w	r5, r4, #1069547520	; 0x3fc00000
 802168c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021690:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8021694:	f485 1540 	eor.w	r5, r5, #3145728	; 0x300000
 8021698:	ea45 0300 	orr.w	r3, r5, r0
 802169c:	ec43 2b10 	vmov	d0, r2, r3
 80216a0:	1c82      	adds	r2, r0, #2
 80216a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80216a6:	2a02      	cmp	r2, #2
 80216a8:	eb01 5414 	add.w	r4, r1, r4, lsr #20
 80216ac:	ee30 0b47 	vsub.f64	d0, d0, d7
 80216b0:	dc31      	bgt.n	8021716 <__ieee754_log+0x106>
 80216b2:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80216b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80216ba:	d10f      	bne.n	80216dc <__ieee754_log+0xcc>
 80216bc:	2c00      	cmp	r4, #0
 80216be:	f000 8086 	beq.w	80217ce <__ieee754_log+0x1be>
 80216c2:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80217f0 <__ieee754_log+0x1e0>
 80216c6:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 80217f8 <__ieee754_log+0x1e8>
 80216ca:	ee07 4a90 	vmov	s15, r4
 80216ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80216d2:	ee27 0b00 	vmul.f64	d0, d7, d0
 80216d6:	eea7 0b06 	vfma.f64	d0, d7, d6
 80216da:	e7ab      	b.n	8021634 <__ieee754_log+0x24>
 80216dc:	ed9f 7b48 	vldr	d7, [pc, #288]	; 8021800 <__ieee754_log+0x1f0>
 80216e0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80216e4:	eea0 6b47 	vfms.f64	d6, d0, d7
 80216e8:	ee20 7b00 	vmul.f64	d7, d0, d0
 80216ec:	ee26 6b07 	vmul.f64	d6, d6, d7
 80216f0:	b914      	cbnz	r4, 80216f8 <__ieee754_log+0xe8>
 80216f2:	ee30 0b46 	vsub.f64	d0, d0, d6
 80216f6:	e79d      	b.n	8021634 <__ieee754_log+0x24>
 80216f8:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 80217f0 <__ieee754_log+0x1e0>
 80216fc:	ee07 4a90 	vmov	s15, r4
 8021700:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8021704:	eea7 6b45 	vfms.f64	d6, d7, d5
 8021708:	ee36 0b40 	vsub.f64	d0, d6, d0
 802170c:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 80217f8 <__ieee754_log+0x1e8>
 8021710:	ee97 0b06 	vfnms.f64	d0, d7, d6
 8021714:	e78e      	b.n	8021634 <__ieee754_log+0x24>
 8021716:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 802171a:	ee30 7b07 	vadd.f64	d7, d0, d7
 802171e:	ee80 4b07 	vdiv.f64	d4, d0, d7
 8021722:	ee07 4a90 	vmov	s15, r4
 8021726:	ee24 2b04 	vmul.f64	d2, d4, d4
 802172a:	ed9f 3b37 	vldr	d3, [pc, #220]	; 8021808 <__ieee754_log+0x1f8>
 802172e:	ee22 5b02 	vmul.f64	d5, d2, d2
 8021732:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8021736:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8021810 <__ieee754_log+0x200>
 802173a:	eea5 7b03 	vfma.f64	d7, d5, d3
 802173e:	ed9f 3b36 	vldr	d3, [pc, #216]	; 8021818 <__ieee754_log+0x208>
 8021742:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8021820 <__ieee754_log+0x210>
 8021746:	eea7 3b05 	vfma.f64	d3, d7, d5
 802174a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8021828 <__ieee754_log+0x218>
 802174e:	eea5 7b01 	vfma.f64	d7, d5, d1
 8021752:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8021830 <__ieee754_log+0x220>
 8021756:	f5a0 21c2 	sub.w	r1, r0, #397312	; 0x61000
 802175a:	f5c0 22d7 	rsb	r2, r0, #440320	; 0x6b800
 802175e:	eea7 1b05 	vfma.f64	d1, d7, d5
 8021762:	f2a1 417a 	subw	r1, r1, #1146	; 0x47a
 8021766:	ed9f 7b34 	vldr	d7, [pc, #208]	; 8021838 <__ieee754_log+0x228>
 802176a:	3251      	adds	r2, #81	; 0x51
 802176c:	430a      	orrs	r2, r1
 802176e:	2a00      	cmp	r2, #0
 8021770:	eea1 7b05 	vfma.f64	d7, d1, d5
 8021774:	ee27 7b02 	vmul.f64	d7, d7, d2
 8021778:	eea3 7b05 	vfma.f64	d7, d3, d5
 802177c:	dd1c      	ble.n	80217b8 <__ieee754_log+0x1a8>
 802177e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8021782:	ee20 5b05 	vmul.f64	d5, d0, d5
 8021786:	ee25 5b00 	vmul.f64	d5, d5, d0
 802178a:	ee37 7b05 	vadd.f64	d7, d7, d5
 802178e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8021792:	b924      	cbnz	r4, 802179e <__ieee754_log+0x18e>
 8021794:	ee35 7b47 	vsub.f64	d7, d5, d7
 8021798:	ee30 0b47 	vsub.f64	d0, d0, d7
 802179c:	e74a      	b.n	8021634 <__ieee754_log+0x24>
 802179e:	ed9f 4b14 	vldr	d4, [pc, #80]	; 80217f0 <__ieee754_log+0x1e0>
 80217a2:	eea6 7b04 	vfma.f64	d7, d6, d4
 80217a6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80217aa:	ee37 0b40 	vsub.f64	d0, d7, d0
 80217ae:	ed9f 7b12 	vldr	d7, [pc, #72]	; 80217f8 <__ieee754_log+0x1e8>
 80217b2:	ee96 0b07 	vfnms.f64	d0, d6, d7
 80217b6:	e73d      	b.n	8021634 <__ieee754_log+0x24>
 80217b8:	ee30 7b47 	vsub.f64	d7, d0, d7
 80217bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80217c0:	2c00      	cmp	r4, #0
 80217c2:	d0e9      	beq.n	8021798 <__ieee754_log+0x188>
 80217c4:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80217f0 <__ieee754_log+0x1e0>
 80217c8:	eea6 7b45 	vfms.f64	d7, d6, d5
 80217cc:	e7ed      	b.n	80217aa <__ieee754_log+0x19a>
 80217ce:	ed9f 0b04 	vldr	d0, [pc, #16]	; 80217e0 <__ieee754_log+0x1d0>
 80217d2:	e72f      	b.n	8021634 <__ieee754_log+0x24>
 80217d4:	f3af 8000 	nop.w
 80217d8:	00000000 	.word	0x00000000
 80217dc:	c3500000 	.word	0xc3500000
	...
 80217ec:	43500000 	.word	0x43500000
 80217f0:	35793c76 	.word	0x35793c76
 80217f4:	3dea39ef 	.word	0x3dea39ef
 80217f8:	fee00000 	.word	0xfee00000
 80217fc:	3fe62e42 	.word	0x3fe62e42
 8021800:	55555555 	.word	0x55555555
 8021804:	3fd55555 	.word	0x3fd55555
 8021808:	d078c69f 	.word	0xd078c69f
 802180c:	3fc39a09 	.word	0x3fc39a09
 8021810:	1d8e78af 	.word	0x1d8e78af
 8021814:	3fcc71c5 	.word	0x3fcc71c5
 8021818:	9997fa04 	.word	0x9997fa04
 802181c:	3fd99999 	.word	0x3fd99999
 8021820:	df3e5244 	.word	0xdf3e5244
 8021824:	3fc2f112 	.word	0x3fc2f112
 8021828:	96cb03de 	.word	0x96cb03de
 802182c:	3fc74664 	.word	0x3fc74664
 8021830:	94229359 	.word	0x94229359
 8021834:	3fd24924 	.word	0x3fd24924
 8021838:	55555593 	.word	0x55555593
 802183c:	3fe55555 	.word	0x3fe55555
 8021840:	7fefffff 	.word	0x7fefffff

08021844 <__errno>:
 8021844:	4b01      	ldr	r3, [pc, #4]	; (802184c <__errno+0x8>)
 8021846:	6818      	ldr	r0, [r3, #0]
 8021848:	4770      	bx	lr
 802184a:	bf00      	nop
 802184c:	2000005c 	.word	0x2000005c

08021850 <_init>:
 8021850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021852:	bf00      	nop
 8021854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021856:	bc08      	pop	{r3}
 8021858:	469e      	mov	lr, r3
 802185a:	4770      	bx	lr

0802185c <_fini>:
 802185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802185e:	bf00      	nop
 8021860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021862:	bc08      	pop	{r3}
 8021864:	469e      	mov	lr, r3
 8021866:	4770      	bx	lr
