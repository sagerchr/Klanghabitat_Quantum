
MainEngine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .shared       00000040  20000000  20000000  00050000  2**2
                  ALLOC
  1 .isr_vector   000001fc  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00017c1c  08008200  08008200  00008200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00013a98  0801fe1c  0801fe1c  0001fe1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  080338b4  080338b4  000338b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  080338bc  080338bc  000338bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080338c0  080338c0  000338c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000080  20000040  080338c4  00040040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00013c90  200000c0  08033944  000400c0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20013d50  08033944  00043d50  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00050a10  00000000  00000000  000400ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008de6  00000000  00000000  00090afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000029d0  00000000  00000000  000998e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002778  00000000  00000000  0009c2b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00014c25  00000000  00000000  0009ea30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000337f9  00000000  00000000  000b3655  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00127bda  00000000  00000000  000e6e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0020ea28  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000b270  00000000  00000000  0020eaa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008200 <__do_global_dtors_aux>:
 8008200:	b510      	push	{r4, lr}
 8008202:	4c05      	ldr	r4, [pc, #20]	; (8008218 <__do_global_dtors_aux+0x18>)
 8008204:	7823      	ldrb	r3, [r4, #0]
 8008206:	b933      	cbnz	r3, 8008216 <__do_global_dtors_aux+0x16>
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <__do_global_dtors_aux+0x1c>)
 800820a:	b113      	cbz	r3, 8008212 <__do_global_dtors_aux+0x12>
 800820c:	4804      	ldr	r0, [pc, #16]	; (8008220 <__do_global_dtors_aux+0x20>)
 800820e:	f3af 8000 	nop.w
 8008212:	2301      	movs	r3, #1
 8008214:	7023      	strb	r3, [r4, #0]
 8008216:	bd10      	pop	{r4, pc}
 8008218:	200000c0 	.word	0x200000c0
 800821c:	00000000 	.word	0x00000000
 8008220:	0801fe04 	.word	0x0801fe04

08008224 <frame_dummy>:
 8008224:	b508      	push	{r3, lr}
 8008226:	4b03      	ldr	r3, [pc, #12]	; (8008234 <frame_dummy+0x10>)
 8008228:	b11b      	cbz	r3, 8008232 <frame_dummy+0xe>
 800822a:	4903      	ldr	r1, [pc, #12]	; (8008238 <frame_dummy+0x14>)
 800822c:	4803      	ldr	r0, [pc, #12]	; (800823c <frame_dummy+0x18>)
 800822e:	f3af 8000 	nop.w
 8008232:	bd08      	pop	{r3, pc}
 8008234:	00000000 	.word	0x00000000
 8008238:	200000c4 	.word	0x200000c4
 800823c:	0801fe04 	.word	0x0801fe04

08008240 <strcmp>:
 8008240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008248:	2a01      	cmp	r2, #1
 800824a:	bf28      	it	cs
 800824c:	429a      	cmpcs	r2, r3
 800824e:	d0f7      	beq.n	8008240 <strcmp>
 8008250:	1ad0      	subs	r0, r2, r3
 8008252:	4770      	bx	lr

08008254 <strlen>:
 8008254:	4603      	mov	r3, r0
 8008256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800825a:	2a00      	cmp	r2, #0
 800825c:	d1fb      	bne.n	8008256 <strlen+0x2>
 800825e:	1a18      	subs	r0, r3, r0
 8008260:	3801      	subs	r0, #1
 8008262:	4770      	bx	lr
	...

08008270 <memchr>:
 8008270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008274:	2a10      	cmp	r2, #16
 8008276:	db2b      	blt.n	80082d0 <memchr+0x60>
 8008278:	f010 0f07 	tst.w	r0, #7
 800827c:	d008      	beq.n	8008290 <memchr+0x20>
 800827e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008282:	3a01      	subs	r2, #1
 8008284:	428b      	cmp	r3, r1
 8008286:	d02d      	beq.n	80082e4 <memchr+0x74>
 8008288:	f010 0f07 	tst.w	r0, #7
 800828c:	b342      	cbz	r2, 80082e0 <memchr+0x70>
 800828e:	d1f6      	bne.n	800827e <memchr+0xe>
 8008290:	b4f0      	push	{r4, r5, r6, r7}
 8008292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800829a:	f022 0407 	bic.w	r4, r2, #7
 800829e:	f07f 0700 	mvns.w	r7, #0
 80082a2:	2300      	movs	r3, #0
 80082a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80082a8:	3c08      	subs	r4, #8
 80082aa:	ea85 0501 	eor.w	r5, r5, r1
 80082ae:	ea86 0601 	eor.w	r6, r6, r1
 80082b2:	fa85 f547 	uadd8	r5, r5, r7
 80082b6:	faa3 f587 	sel	r5, r3, r7
 80082ba:	fa86 f647 	uadd8	r6, r6, r7
 80082be:	faa5 f687 	sel	r6, r5, r7
 80082c2:	b98e      	cbnz	r6, 80082e8 <memchr+0x78>
 80082c4:	d1ee      	bne.n	80082a4 <memchr+0x34>
 80082c6:	bcf0      	pop	{r4, r5, r6, r7}
 80082c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80082cc:	f002 0207 	and.w	r2, r2, #7
 80082d0:	b132      	cbz	r2, 80082e0 <memchr+0x70>
 80082d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80082d6:	3a01      	subs	r2, #1
 80082d8:	ea83 0301 	eor.w	r3, r3, r1
 80082dc:	b113      	cbz	r3, 80082e4 <memchr+0x74>
 80082de:	d1f8      	bne.n	80082d2 <memchr+0x62>
 80082e0:	2000      	movs	r0, #0
 80082e2:	4770      	bx	lr
 80082e4:	3801      	subs	r0, #1
 80082e6:	4770      	bx	lr
 80082e8:	2d00      	cmp	r5, #0
 80082ea:	bf06      	itte	eq
 80082ec:	4635      	moveq	r5, r6
 80082ee:	3803      	subeq	r0, #3
 80082f0:	3807      	subne	r0, #7
 80082f2:	f015 0f01 	tst.w	r5, #1
 80082f6:	d107      	bne.n	8008308 <memchr+0x98>
 80082f8:	3001      	adds	r0, #1
 80082fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80082fe:	bf02      	ittt	eq
 8008300:	3001      	addeq	r0, #1
 8008302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008306:	3001      	addeq	r0, #1
 8008308:	bcf0      	pop	{r4, r5, r6, r7}
 800830a:	3801      	subs	r0, #1
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop

08008310 <__aeabi_uldivmod>:
 8008310:	b953      	cbnz	r3, 8008328 <__aeabi_uldivmod+0x18>
 8008312:	b94a      	cbnz	r2, 8008328 <__aeabi_uldivmod+0x18>
 8008314:	2900      	cmp	r1, #0
 8008316:	bf08      	it	eq
 8008318:	2800      	cmpeq	r0, #0
 800831a:	bf1c      	itt	ne
 800831c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8008320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008324:	f000 b972 	b.w	800860c <__aeabi_idiv0>
 8008328:	f1ad 0c08 	sub.w	ip, sp, #8
 800832c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008330:	f000 f806 	bl	8008340 <__udivmoddi4>
 8008334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800833c:	b004      	add	sp, #16
 800833e:	4770      	bx	lr

08008340 <__udivmoddi4>:
 8008340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008344:	9e08      	ldr	r6, [sp, #32]
 8008346:	4604      	mov	r4, r0
 8008348:	4688      	mov	r8, r1
 800834a:	2b00      	cmp	r3, #0
 800834c:	d14b      	bne.n	80083e6 <__udivmoddi4+0xa6>
 800834e:	428a      	cmp	r2, r1
 8008350:	4615      	mov	r5, r2
 8008352:	d967      	bls.n	8008424 <__udivmoddi4+0xe4>
 8008354:	fab2 f282 	clz	r2, r2
 8008358:	b14a      	cbz	r2, 800836e <__udivmoddi4+0x2e>
 800835a:	f1c2 0720 	rsb	r7, r2, #32
 800835e:	fa01 f302 	lsl.w	r3, r1, r2
 8008362:	fa20 f707 	lsr.w	r7, r0, r7
 8008366:	4095      	lsls	r5, r2
 8008368:	ea47 0803 	orr.w	r8, r7, r3
 800836c:	4094      	lsls	r4, r2
 800836e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008372:	0c23      	lsrs	r3, r4, #16
 8008374:	fbb8 f7fe 	udiv	r7, r8, lr
 8008378:	fa1f fc85 	uxth.w	ip, r5
 800837c:	fb0e 8817 	mls	r8, lr, r7, r8
 8008380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008384:	fb07 f10c 	mul.w	r1, r7, ip
 8008388:	4299      	cmp	r1, r3
 800838a:	d909      	bls.n	80083a0 <__udivmoddi4+0x60>
 800838c:	18eb      	adds	r3, r5, r3
 800838e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8008392:	f080 811b 	bcs.w	80085cc <__udivmoddi4+0x28c>
 8008396:	4299      	cmp	r1, r3
 8008398:	f240 8118 	bls.w	80085cc <__udivmoddi4+0x28c>
 800839c:	3f02      	subs	r7, #2
 800839e:	442b      	add	r3, r5
 80083a0:	1a5b      	subs	r3, r3, r1
 80083a2:	b2a4      	uxth	r4, r4
 80083a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80083a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80083ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80083b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80083b4:	45a4      	cmp	ip, r4
 80083b6:	d909      	bls.n	80083cc <__udivmoddi4+0x8c>
 80083b8:	192c      	adds	r4, r5, r4
 80083ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80083be:	f080 8107 	bcs.w	80085d0 <__udivmoddi4+0x290>
 80083c2:	45a4      	cmp	ip, r4
 80083c4:	f240 8104 	bls.w	80085d0 <__udivmoddi4+0x290>
 80083c8:	3802      	subs	r0, #2
 80083ca:	442c      	add	r4, r5
 80083cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80083d0:	eba4 040c 	sub.w	r4, r4, ip
 80083d4:	2700      	movs	r7, #0
 80083d6:	b11e      	cbz	r6, 80083e0 <__udivmoddi4+0xa0>
 80083d8:	40d4      	lsrs	r4, r2
 80083da:	2300      	movs	r3, #0
 80083dc:	e9c6 4300 	strd	r4, r3, [r6]
 80083e0:	4639      	mov	r1, r7
 80083e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e6:	428b      	cmp	r3, r1
 80083e8:	d909      	bls.n	80083fe <__udivmoddi4+0xbe>
 80083ea:	2e00      	cmp	r6, #0
 80083ec:	f000 80eb 	beq.w	80085c6 <__udivmoddi4+0x286>
 80083f0:	2700      	movs	r7, #0
 80083f2:	e9c6 0100 	strd	r0, r1, [r6]
 80083f6:	4638      	mov	r0, r7
 80083f8:	4639      	mov	r1, r7
 80083fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083fe:	fab3 f783 	clz	r7, r3
 8008402:	2f00      	cmp	r7, #0
 8008404:	d147      	bne.n	8008496 <__udivmoddi4+0x156>
 8008406:	428b      	cmp	r3, r1
 8008408:	d302      	bcc.n	8008410 <__udivmoddi4+0xd0>
 800840a:	4282      	cmp	r2, r0
 800840c:	f200 80fa 	bhi.w	8008604 <__udivmoddi4+0x2c4>
 8008410:	1a84      	subs	r4, r0, r2
 8008412:	eb61 0303 	sbc.w	r3, r1, r3
 8008416:	2001      	movs	r0, #1
 8008418:	4698      	mov	r8, r3
 800841a:	2e00      	cmp	r6, #0
 800841c:	d0e0      	beq.n	80083e0 <__udivmoddi4+0xa0>
 800841e:	e9c6 4800 	strd	r4, r8, [r6]
 8008422:	e7dd      	b.n	80083e0 <__udivmoddi4+0xa0>
 8008424:	b902      	cbnz	r2, 8008428 <__udivmoddi4+0xe8>
 8008426:	deff      	udf	#255	; 0xff
 8008428:	fab2 f282 	clz	r2, r2
 800842c:	2a00      	cmp	r2, #0
 800842e:	f040 808f 	bne.w	8008550 <__udivmoddi4+0x210>
 8008432:	1b49      	subs	r1, r1, r5
 8008434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008438:	fa1f f885 	uxth.w	r8, r5
 800843c:	2701      	movs	r7, #1
 800843e:	fbb1 fcfe 	udiv	ip, r1, lr
 8008442:	0c23      	lsrs	r3, r4, #16
 8008444:	fb0e 111c 	mls	r1, lr, ip, r1
 8008448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800844c:	fb08 f10c 	mul.w	r1, r8, ip
 8008450:	4299      	cmp	r1, r3
 8008452:	d907      	bls.n	8008464 <__udivmoddi4+0x124>
 8008454:	18eb      	adds	r3, r5, r3
 8008456:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800845a:	d202      	bcs.n	8008462 <__udivmoddi4+0x122>
 800845c:	4299      	cmp	r1, r3
 800845e:	f200 80cd 	bhi.w	80085fc <__udivmoddi4+0x2bc>
 8008462:	4684      	mov	ip, r0
 8008464:	1a59      	subs	r1, r3, r1
 8008466:	b2a3      	uxth	r3, r4
 8008468:	fbb1 f0fe 	udiv	r0, r1, lr
 800846c:	fb0e 1410 	mls	r4, lr, r0, r1
 8008470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008474:	fb08 f800 	mul.w	r8, r8, r0
 8008478:	45a0      	cmp	r8, r4
 800847a:	d907      	bls.n	800848c <__udivmoddi4+0x14c>
 800847c:	192c      	adds	r4, r5, r4
 800847e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008482:	d202      	bcs.n	800848a <__udivmoddi4+0x14a>
 8008484:	45a0      	cmp	r8, r4
 8008486:	f200 80b6 	bhi.w	80085f6 <__udivmoddi4+0x2b6>
 800848a:	4618      	mov	r0, r3
 800848c:	eba4 0408 	sub.w	r4, r4, r8
 8008490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008494:	e79f      	b.n	80083d6 <__udivmoddi4+0x96>
 8008496:	f1c7 0c20 	rsb	ip, r7, #32
 800849a:	40bb      	lsls	r3, r7
 800849c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80084a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80084a4:	fa01 f407 	lsl.w	r4, r1, r7
 80084a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80084ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80084b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80084b4:	4325      	orrs	r5, r4
 80084b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80084ba:	0c2c      	lsrs	r4, r5, #16
 80084bc:	fb08 3319 	mls	r3, r8, r9, r3
 80084c0:	fa1f fa8e 	uxth.w	sl, lr
 80084c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80084c8:	fb09 f40a 	mul.w	r4, r9, sl
 80084cc:	429c      	cmp	r4, r3
 80084ce:	fa02 f207 	lsl.w	r2, r2, r7
 80084d2:	fa00 f107 	lsl.w	r1, r0, r7
 80084d6:	d90b      	bls.n	80084f0 <__udivmoddi4+0x1b0>
 80084d8:	eb1e 0303 	adds.w	r3, lr, r3
 80084dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80084e0:	f080 8087 	bcs.w	80085f2 <__udivmoddi4+0x2b2>
 80084e4:	429c      	cmp	r4, r3
 80084e6:	f240 8084 	bls.w	80085f2 <__udivmoddi4+0x2b2>
 80084ea:	f1a9 0902 	sub.w	r9, r9, #2
 80084ee:	4473      	add	r3, lr
 80084f0:	1b1b      	subs	r3, r3, r4
 80084f2:	b2ad      	uxth	r5, r5
 80084f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80084f8:	fb08 3310 	mls	r3, r8, r0, r3
 80084fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008500:	fb00 fa0a 	mul.w	sl, r0, sl
 8008504:	45a2      	cmp	sl, r4
 8008506:	d908      	bls.n	800851a <__udivmoddi4+0x1da>
 8008508:	eb1e 0404 	adds.w	r4, lr, r4
 800850c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008510:	d26b      	bcs.n	80085ea <__udivmoddi4+0x2aa>
 8008512:	45a2      	cmp	sl, r4
 8008514:	d969      	bls.n	80085ea <__udivmoddi4+0x2aa>
 8008516:	3802      	subs	r0, #2
 8008518:	4474      	add	r4, lr
 800851a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800851e:	fba0 8902 	umull	r8, r9, r0, r2
 8008522:	eba4 040a 	sub.w	r4, r4, sl
 8008526:	454c      	cmp	r4, r9
 8008528:	46c2      	mov	sl, r8
 800852a:	464b      	mov	r3, r9
 800852c:	d354      	bcc.n	80085d8 <__udivmoddi4+0x298>
 800852e:	d051      	beq.n	80085d4 <__udivmoddi4+0x294>
 8008530:	2e00      	cmp	r6, #0
 8008532:	d069      	beq.n	8008608 <__udivmoddi4+0x2c8>
 8008534:	ebb1 050a 	subs.w	r5, r1, sl
 8008538:	eb64 0403 	sbc.w	r4, r4, r3
 800853c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008540:	40fd      	lsrs	r5, r7
 8008542:	40fc      	lsrs	r4, r7
 8008544:	ea4c 0505 	orr.w	r5, ip, r5
 8008548:	e9c6 5400 	strd	r5, r4, [r6]
 800854c:	2700      	movs	r7, #0
 800854e:	e747      	b.n	80083e0 <__udivmoddi4+0xa0>
 8008550:	f1c2 0320 	rsb	r3, r2, #32
 8008554:	fa20 f703 	lsr.w	r7, r0, r3
 8008558:	4095      	lsls	r5, r2
 800855a:	fa01 f002 	lsl.w	r0, r1, r2
 800855e:	fa21 f303 	lsr.w	r3, r1, r3
 8008562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008566:	4338      	orrs	r0, r7
 8008568:	0c01      	lsrs	r1, r0, #16
 800856a:	fbb3 f7fe 	udiv	r7, r3, lr
 800856e:	fa1f f885 	uxth.w	r8, r5
 8008572:	fb0e 3317 	mls	r3, lr, r7, r3
 8008576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800857a:	fb07 f308 	mul.w	r3, r7, r8
 800857e:	428b      	cmp	r3, r1
 8008580:	fa04 f402 	lsl.w	r4, r4, r2
 8008584:	d907      	bls.n	8008596 <__udivmoddi4+0x256>
 8008586:	1869      	adds	r1, r5, r1
 8008588:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800858c:	d22f      	bcs.n	80085ee <__udivmoddi4+0x2ae>
 800858e:	428b      	cmp	r3, r1
 8008590:	d92d      	bls.n	80085ee <__udivmoddi4+0x2ae>
 8008592:	3f02      	subs	r7, #2
 8008594:	4429      	add	r1, r5
 8008596:	1acb      	subs	r3, r1, r3
 8008598:	b281      	uxth	r1, r0
 800859a:	fbb3 f0fe 	udiv	r0, r3, lr
 800859e:	fb0e 3310 	mls	r3, lr, r0, r3
 80085a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80085a6:	fb00 f308 	mul.w	r3, r0, r8
 80085aa:	428b      	cmp	r3, r1
 80085ac:	d907      	bls.n	80085be <__udivmoddi4+0x27e>
 80085ae:	1869      	adds	r1, r5, r1
 80085b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80085b4:	d217      	bcs.n	80085e6 <__udivmoddi4+0x2a6>
 80085b6:	428b      	cmp	r3, r1
 80085b8:	d915      	bls.n	80085e6 <__udivmoddi4+0x2a6>
 80085ba:	3802      	subs	r0, #2
 80085bc:	4429      	add	r1, r5
 80085be:	1ac9      	subs	r1, r1, r3
 80085c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80085c4:	e73b      	b.n	800843e <__udivmoddi4+0xfe>
 80085c6:	4637      	mov	r7, r6
 80085c8:	4630      	mov	r0, r6
 80085ca:	e709      	b.n	80083e0 <__udivmoddi4+0xa0>
 80085cc:	4607      	mov	r7, r0
 80085ce:	e6e7      	b.n	80083a0 <__udivmoddi4+0x60>
 80085d0:	4618      	mov	r0, r3
 80085d2:	e6fb      	b.n	80083cc <__udivmoddi4+0x8c>
 80085d4:	4541      	cmp	r1, r8
 80085d6:	d2ab      	bcs.n	8008530 <__udivmoddi4+0x1f0>
 80085d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80085dc:	eb69 020e 	sbc.w	r2, r9, lr
 80085e0:	3801      	subs	r0, #1
 80085e2:	4613      	mov	r3, r2
 80085e4:	e7a4      	b.n	8008530 <__udivmoddi4+0x1f0>
 80085e6:	4660      	mov	r0, ip
 80085e8:	e7e9      	b.n	80085be <__udivmoddi4+0x27e>
 80085ea:	4618      	mov	r0, r3
 80085ec:	e795      	b.n	800851a <__udivmoddi4+0x1da>
 80085ee:	4667      	mov	r7, ip
 80085f0:	e7d1      	b.n	8008596 <__udivmoddi4+0x256>
 80085f2:	4681      	mov	r9, r0
 80085f4:	e77c      	b.n	80084f0 <__udivmoddi4+0x1b0>
 80085f6:	3802      	subs	r0, #2
 80085f8:	442c      	add	r4, r5
 80085fa:	e747      	b.n	800848c <__udivmoddi4+0x14c>
 80085fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8008600:	442b      	add	r3, r5
 8008602:	e72f      	b.n	8008464 <__udivmoddi4+0x124>
 8008604:	4638      	mov	r0, r7
 8008606:	e708      	b.n	800841a <__udivmoddi4+0xda>
 8008608:	4637      	mov	r7, r6
 800860a:	e6e9      	b.n	80083e0 <__udivmoddi4+0xa0>

0800860c <__aeabi_idiv0>:
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop

08008610 <UartBridge_init>:

extern UART_HandleTypeDef huart1;

void
UartBridge_init(void)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
  echo_pcb = tcp_new();
 8008616:	f00f f8a7 	bl	8017768 <tcp_new>
 800861a:	4602      	mov	r2, r0
 800861c:	4b12      	ldr	r3, [pc, #72]	; (8008668 <UartBridge_init+0x58>)
 800861e:	601a      	str	r2, [r3, #0]
  if (echo_pcb != NULL)
 8008620:	4b11      	ldr	r3, [pc, #68]	; (8008668 <UartBridge_init+0x58>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01b      	beq.n	8008660 <UartBridge_init+0x50>
  {
    err_t err;

    err = tcp_bind(echo_pcb, IP_ADDR_ANY, 7);
 8008628:	4b0f      	ldr	r3, [pc, #60]	; (8008668 <UartBridge_init+0x58>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2207      	movs	r2, #7
 800862e:	490f      	ldr	r1, [pc, #60]	; (800866c <UartBridge_init+0x5c>)
 8008630:	4618      	mov	r0, r3
 8008632:	f00d fff9 	bl	8016628 <tcp_bind>
 8008636:	4603      	mov	r3, r0
 8008638:	71fb      	strb	r3, [r7, #7]
    if (err == ERR_OK)
 800863a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10e      	bne.n	8008660 <UartBridge_init+0x50>
    {
      echo_pcb = tcp_listen(echo_pcb);
 8008642:	4b09      	ldr	r3, [pc, #36]	; (8008668 <UartBridge_init+0x58>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	21ff      	movs	r1, #255	; 0xff
 8008648:	4618      	mov	r0, r3
 800864a:	f00e f8a5 	bl	8016798 <tcp_listen_with_backlog>
 800864e:	4602      	mov	r2, r0
 8008650:	4b05      	ldr	r3, [pc, #20]	; (8008668 <UartBridge_init+0x58>)
 8008652:	601a      	str	r2, [r3, #0]
      tcp_accept(echo_pcb, echo_accept);
 8008654:	4b04      	ldr	r3, [pc, #16]	; (8008668 <UartBridge_init+0x58>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4905      	ldr	r1, [pc, #20]	; (8008670 <UartBridge_init+0x60>)
 800865a:	4618      	mov	r0, r3
 800865c:	f00f f912 	bl	8017884 <tcp_accept>
  }
  else
  {
    /* abort? output diagnostic? */
  }
}
 8008660:	bf00      	nop
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	200000dc 	.word	0x200000dc
 800866c:	08033800 	.word	0x08033800
 8008670:	08008675 	.word	0x08008675

08008674 <echo_accept>:
uint32_t count = 0;

err_t
echo_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	4613      	mov	r3, r2
 8008680:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* commonly observed practive to call tcp_setprio(), why? */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8008682:	2101      	movs	r1, #1
 8008684:	68b8      	ldr	r0, [r7, #8]
 8008686:	f00e fe7d 	bl	8017384 <tcp_setprio>

  es = (struct echo_state *)mem_malloc(sizeof(struct echo_state));
 800868a:	200c      	movs	r0, #12
 800868c:	f00c f9c0 	bl	8014a10 <mem_malloc>
 8008690:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d019      	beq.n	80086cc <echo_accept+0x58>
  {
    es->state = ES_ACCEPTED;
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	2201      	movs	r2, #1
 800869c:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	2200      	movs	r2, #0
 80086a8:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	2200      	movs	r2, #0
 80086ae:	609a      	str	r2, [r3, #8]
    /* pass newly allocated es to our callbacks */
    tcp_arg(newpcb, es);
 80086b0:	6939      	ldr	r1, [r7, #16]
 80086b2:	68b8      	ldr	r0, [r7, #8]
 80086b4:	f00f f86e 	bl	8017794 <tcp_arg>
    tcp_recv(newpcb, echo_recv);
 80086b8:	4908      	ldr	r1, [pc, #32]	; (80086dc <echo_accept+0x68>)
 80086ba:	68b8      	ldr	r0, [r7, #8]
 80086bc:	f00f f87c 	bl	80177b8 <tcp_recv>
    count = 0;
 80086c0:	4b07      	ldr	r3, [pc, #28]	; (80086e0 <echo_accept+0x6c>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	601a      	str	r2, [r3, #0]
    ret_err = ERR_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	75fb      	strb	r3, [r7, #23]
 80086ca:	e001      	b.n	80086d0 <echo_accept+0x5c>

  }
  else
  {
    ret_err = ERR_MEM;
 80086cc:	23ff      	movs	r3, #255	; 0xff
 80086ce:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 80086d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	080086e5 	.word	0x080086e5
 80086e0:	200000e0 	.word	0x200000e0

080086e4 <echo_recv>:

err_t
echo_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80086e4:	b5b0      	push	{r4, r5, r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
 80086f0:	70fb      	strb	r3, [r7, #3]


	if (!p) {
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10a      	bne.n	800870e <echo_recv+0x2a>
        tcp_close(tpcb);
 80086f8:	68b8      	ldr	r0, [r7, #8]
 80086fa:	f00d fe9f 	bl	801643c <tcp_close>
        tcp_recv(tpcb, NULL);
 80086fe:	2100      	movs	r1, #0
 8008700:	68b8      	ldr	r0, [r7, #8]
 8008702:	f00f f859 	bl	80177b8 <tcp_recv>
        HAL_FLASH_Lock();
 8008706:	f003 fba9 	bl	800be5c <HAL_FLASH_Lock>
        return ERR_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	e086      	b.n	800881c <echo_recv+0x138>
    }

    /* indicate that the packet has been received */
    tcp_recved(tpcb, p->len);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	895b      	ldrh	r3, [r3, #10]
 8008712:	4619      	mov	r1, r3
 8008714:	68b8      	ldr	r0, [r7, #8]
 8008716:	f00e f955 	bl	80169c4 <tcp_recved>

    pbuf_free(p);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f00d f9ec 	bl	8015af8 <pbuf_free>

    count = count + p->len;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	895b      	ldrh	r3, [r3, #10]
 8008724:	461a      	mov	r2, r3
 8008726:	4b3f      	ldr	r3, [pc, #252]	; (8008824 <echo_recv+0x140>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4413      	add	r3, r2
 800872c:	4a3d      	ldr	r2, [pc, #244]	; (8008824 <echo_recv+0x140>)
 800872e:	6013      	str	r3, [r2, #0]

    for(int i=0;i<100;i++){
 8008730:	2300      	movs	r3, #0
 8008732:	61fb      	str	r3, [r7, #28]
 8008734:	e007      	b.n	8008746 <echo_recv+0x62>
    	pData[i]=0x00;
 8008736:	4a3c      	ldr	r2, [pc, #240]	; (8008828 <echo_recv+0x144>)
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	4413      	add	r3, r2
 800873c:	2200      	movs	r2, #0
 800873e:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<100;i++){
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	3301      	adds	r3, #1
 8008744:	61fb      	str	r3, [r7, #28]
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	2b63      	cmp	r3, #99	; 0x63
 800874a:	ddf4      	ble.n	8008736 <echo_recv+0x52>
    }

    HAL_UART_DMAStop(&huart1); //Stop the HUART
 800874c:	4837      	ldr	r0, [pc, #220]	; (800882c <echo_recv+0x148>)
 800874e:	f006 f81f 	bl	800e790 <HAL_UART_DMAStop>
    huart1.hdmarx->Instance->NDTR = 100; //Set DMA counter back to Strat posotion
 8008752:	4b36      	ldr	r3, [pc, #216]	; (800882c <echo_recv+0x148>)
 8008754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2264      	movs	r2, #100	; 0x64
 800875a:	605a      	str	r2, [r3, #4]
    HAL_UART_Receive_DMA(&huart1, pData, 100); //Init the DMA to Recive data
 800875c:	2264      	movs	r2, #100	; 0x64
 800875e:	4932      	ldr	r1, [pc, #200]	; (8008828 <echo_recv+0x144>)
 8008760:	4832      	ldr	r0, [pc, #200]	; (800882c <echo_recv+0x148>)
 8008762:	f005 ff91 	bl	800e688 <HAL_UART_Receive_DMA>

    HAL_UART_Transmit(&huart1, p->payload, p->len, 10); //Send data to Display recived via Ethernet
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6859      	ldr	r1, [r3, #4]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	895a      	ldrh	r2, [r3, #10]
 800876e:	230a      	movs	r3, #10
 8008770:	482e      	ldr	r0, [pc, #184]	; (800882c <echo_recv+0x148>)
 8008772:	f005 fef7 	bl	800e564 <HAL_UART_Transmit>

    char cmd[p->len]; //Identify the CMD
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	8958      	ldrh	r0, [r3, #10]
 800877a:	466b      	mov	r3, sp
 800877c:	461d      	mov	r5, r3
 800877e:	4603      	mov	r3, r0
 8008780:	3b01      	subs	r3, #1
 8008782:	61bb      	str	r3, [r7, #24]
 8008784:	b281      	uxth	r1, r0
 8008786:	f04f 0200 	mov.w	r2, #0
 800878a:	f04f 0300 	mov.w	r3, #0
 800878e:	f04f 0400 	mov.w	r4, #0
 8008792:	00d4      	lsls	r4, r2, #3
 8008794:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008798:	00cb      	lsls	r3, r1, #3
 800879a:	b281      	uxth	r1, r0
 800879c:	f04f 0200 	mov.w	r2, #0
 80087a0:	f04f 0300 	mov.w	r3, #0
 80087a4:	f04f 0400 	mov.w	r4, #0
 80087a8:	00d4      	lsls	r4, r2, #3
 80087aa:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80087ae:	00cb      	lsls	r3, r1, #3
 80087b0:	4603      	mov	r3, r0
 80087b2:	3307      	adds	r3, #7
 80087b4:	08db      	lsrs	r3, r3, #3
 80087b6:	00db      	lsls	r3, r3, #3
 80087b8:	ebad 0d03 	sub.w	sp, sp, r3
 80087bc:	466b      	mov	r3, sp
 80087be:	3300      	adds	r3, #0
 80087c0:	617b      	str	r3, [r7, #20]

    memcpy(cmd, p->payload,p->len); //Save the CMD to variable
 80087c2:	6978      	ldr	r0, [r7, #20]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6859      	ldr	r1, [r3, #4]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	895b      	ldrh	r3, [r3, #10]
 80087cc:	461a      	mov	r2, r3
 80087ce:	f016 fbc6 	bl	801ef5e <memcpy>

    if((cmd[1] == 0xD1)||(cmd[1] == 0xD0)||(cmd[1] == 0xF6)||(cmd[1] == 0x0F)){
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	785b      	ldrb	r3, [r3, #1]
 80087d6:	2bd1      	cmp	r3, #209	; 0xd1
 80087d8:	d00b      	beq.n	80087f2 <echo_recv+0x10e>
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	785b      	ldrb	r3, [r3, #1]
 80087de:	2bd0      	cmp	r3, #208	; 0xd0
 80087e0:	d007      	beq.n	80087f2 <echo_recv+0x10e>
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	785b      	ldrb	r3, [r3, #1]
 80087e6:	2bf6      	cmp	r3, #246	; 0xf6
 80087e8:	d003      	beq.n	80087f2 <echo_recv+0x10e>
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	785b      	ldrb	r3, [r3, #1]
 80087ee:	2b0f      	cmp	r3, #15
 80087f0:	d105      	bne.n	80087fe <echo_recv+0x11a>
        while(pData[1] == 0x00){
 80087f2:	bf00      	nop
 80087f4:	4b0c      	ldr	r3, [pc, #48]	; (8008828 <echo_recv+0x144>)
 80087f6:	785b      	ldrb	r3, [r3, #1]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d0fb      	beq.n	80087f4 <echo_recv+0x110>
    if((cmd[1] == 0xD1)||(cmd[1] == 0xD0)||(cmd[1] == 0xF6)||(cmd[1] == 0x0F)){
 80087fc:	e002      	b.n	8008804 <echo_recv+0x120>

        }
    }
    else
    {
        	HAL_Delay(10);
 80087fe:	200a      	movs	r0, #10
 8008800:	f001 fb92 	bl	8009f28 <HAL_Delay>
    }

   tcp_write(tpcb, pData, pData[0]+1, 1); //Write back answer to HOST Software
 8008804:	4b08      	ldr	r3, [pc, #32]	; (8008828 <echo_recv+0x144>)
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	b29b      	uxth	r3, r3
 800880a:	3301      	adds	r3, #1
 800880c:	b29a      	uxth	r2, r3
 800880e:	2301      	movs	r3, #1
 8008810:	4905      	ldr	r1, [pc, #20]	; (8008828 <echo_recv+0x144>)
 8008812:	68b8      	ldr	r0, [r7, #8]
 8008814:	f011 fefa 	bl	801a60c <tcp_write>

    return ERR_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	46ad      	mov	sp, r5
}
 800881c:	4618      	mov	r0, r3
 800881e:	3720      	adds	r7, #32
 8008820:	46bd      	mov	sp, r7
 8008822:	bdb0      	pop	{r4, r5, r7, pc}
 8008824:	200000e0 	.word	0x200000e0
 8008828:	20006404 	.word	0x20006404
 800882c:	2000d33c 	.word	0x2000d33c

08008830 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008830:	b480      	push	{r7}
 8008832:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008834:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008838:	4b05      	ldr	r3, [pc, #20]	; (8008850 <__NVIC_SystemReset+0x20>)
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008840:	4903      	ldr	r1, [pc, #12]	; (8008850 <__NVIC_SystemReset+0x20>)
 8008842:	4b04      	ldr	r3, [pc, #16]	; (8008854 <__NVIC_SystemReset+0x24>)
 8008844:	4313      	orrs	r3, r2
 8008846:	60cb      	str	r3, [r1, #12]
 8008848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800884c:	bf00      	nop
 800884e:	e7fd      	b.n	800884c <__NVIC_SystemReset+0x1c>
 8008850:	e000ed00 	.word	0xe000ed00
 8008854:	05fa0004 	.word	0x05fa0004

08008858 <BootActivate>:
** \brief     Bootloader activation function.
** \return    none.
**
****************************************************************************************/
void BootActivate(void)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	af00      	add	r7, sp, #0
  /* perform software reset to activate the bootoader again */
  NVIC_SystemReset();
 800885c:	f7ff ffe8 	bl	8008830 <__NVIC_SystemReset>

08008860 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4a07      	ldr	r2, [pc, #28]	; (800888c <vApplicationGetIdleTaskMemory+0x2c>)
 8008870:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	4a06      	ldr	r2, [pc, #24]	; (8008890 <vApplicationGetIdleTaskMemory+0x30>)
 8008876:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2280      	movs	r2, #128	; 0x80
 800887c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800887e:	bf00      	nop
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	200000e4 	.word	0x200000e4
 8008890:	20000138 	.word	0x20000138

08008894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008894:	b5b0      	push	{r4, r5, r7, lr}
 8008896:	b08a      	sub	sp, #40	; 0x28
 8008898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	VectorBase_Config();
 800889a:	f000 fcc7 	bl	800922c <VectorBase_Config>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800889e:	f001 fae6 	bl	8009e6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80088a2:	f000 f861 	bl	8008968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80088a6:	f000 fba7 	bl	8008ff8 <MX_GPIO_Init>
  MX_DMA_Init();
 80088aa:	f000 fb77 	bl	8008f9c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80088ae:	f000 fae7 	bl	8008e80 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80088b2:	f000 fb45 	bl	8008f40 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80088b6:	f000 f963 	bl	8008b80 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80088ba:	f000 fab1 	bl	8008e20 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80088be:	f000 f921 	bl	8008b04 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 80088c2:	f000 fb0d 	bl	8008ee0 <MX_USART6_UART_Init>
  MX_DAC_Init();
 80088c6:	f000 f8e9 	bl	8008a9c <MX_DAC_Init>
  MX_TIM5_Init();
 80088ca:	f000 f9a9 	bl	8008c20 <MX_TIM5_Init>
  MX_TIM6_Init();
 80088ce:	f000 f9f5 	bl	8008cbc <MX_TIM6_Init>
  MX_TIM7_Init();
 80088d2:	f000 fa29 	bl	8008d28 <MX_TIM7_Init>
  MX_TIM10_Init();
 80088d6:	f000 fa5d 	bl	8008d94 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  SharedParamsWriteByIndex(0, 0);
 80088da:	2100      	movs	r1, #0
 80088dc:	2000      	movs	r0, #0
 80088de:	f000 fd57 	bl	8009390 <SharedParamsWriteByIndex>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80088e2:	4b1e      	ldr	r3, [pc, #120]	; (800895c <main+0xc8>)
 80088e4:	1d3c      	adds	r4, r7, #4
 80088e6:	461d      	mov	r5, r3
 80088e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80088f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80088f4:	1d3b      	adds	r3, r7, #4
 80088f6:	2100      	movs	r1, #0
 80088f8:	4618      	mov	r0, r3
 80088fa:	f007 fe82 	bl	8010602 <osThreadCreate>
 80088fe:	4602      	mov	r2, r0
 8008900:	4b17      	ldr	r3, [pc, #92]	; (8008960 <main+0xcc>)
 8008902:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8008904:	f007 fe66 	bl	80105d4 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for(int i= 0; i <10 ; i++){
 8008908:	2300      	movs	r3, #0
 800890a:	627b      	str	r3, [r7, #36]	; 0x24
 800890c:	e00b      	b.n	8008926 <main+0x92>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 800890e:	f244 0181 	movw	r1, #16513	; 0x4081
 8008912:	4814      	ldr	r0, [pc, #80]	; (8008964 <main+0xd0>)
 8008914:	f003 fc75 	bl	800c202 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8008918:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800891c:	f001 fb04 	bl	8009f28 <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	3301      	adds	r3, #1
 8008924:	627b      	str	r3, [r7, #36]	; 0x24
 8008926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008928:	2b09      	cmp	r3, #9
 800892a:	ddf0      	ble.n	800890e <main+0x7a>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i= 0; i <10 ; i++){
 800892c:	2300      	movs	r3, #0
 800892e:	623b      	str	r3, [r7, #32]
 8008930:	e00a      	b.n	8008948 <main+0xb4>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 8008932:	f244 0181 	movw	r1, #16513	; 0x4081
 8008936:	480b      	ldr	r0, [pc, #44]	; (8008964 <main+0xd0>)
 8008938:	f003 fc63 	bl	800c202 <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 800893c:	2032      	movs	r0, #50	; 0x32
 800893e:	f001 faf3 	bl	8009f28 <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 8008942:	6a3b      	ldr	r3, [r7, #32]
 8008944:	3301      	adds	r3, #1
 8008946:	623b      	str	r3, [r7, #32]
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	2b09      	cmp	r3, #9
 800894c:	ddf1      	ble.n	8008932 <main+0x9e>
	  }
      SharedParamsWriteByIndex(0, 1);
 800894e:	2101      	movs	r1, #1
 8008950:	2000      	movs	r0, #0
 8008952:	f000 fd1d 	bl	8009390 <SharedParamsWriteByIndex>
      /* connection request received so start the bootloader */
      BootActivate();
 8008956:	f7ff ff7f 	bl	8008858 <BootActivate>
	  for(int i= 0; i <10 ; i++){
 800895a:	e7d5      	b.n	8008908 <main+0x74>
 800895c:	0801fe28 	.word	0x0801fe28
 8008960:	2000cc70 	.word	0x2000cc70
 8008964:	40020400 	.word	0x40020400

08008968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b0b8      	sub	sp, #224	; 0xe0
 800896c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800896e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008972:	2234      	movs	r2, #52	; 0x34
 8008974:	2100      	movs	r1, #0
 8008976:	4618      	mov	r0, r3
 8008978:	f016 fafc 	bl	801ef74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800897c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	605a      	str	r2, [r3, #4]
 8008986:	609a      	str	r2, [r3, #8]
 8008988:	60da      	str	r2, [r3, #12]
 800898a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800898c:	f107 0308 	add.w	r3, r7, #8
 8008990:	2290      	movs	r2, #144	; 0x90
 8008992:	2100      	movs	r1, #0
 8008994:	4618      	mov	r0, r3
 8008996:	f016 faed 	bl	801ef74 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800899a:	f003 fd95 	bl	800c4c8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800899e:	4b3c      	ldr	r3, [pc, #240]	; (8008a90 <SystemClock_Config+0x128>)
 80089a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a2:	4a3b      	ldr	r2, [pc, #236]	; (8008a90 <SystemClock_Config+0x128>)
 80089a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089a8:	6413      	str	r3, [r2, #64]	; 0x40
 80089aa:	4b39      	ldr	r3, [pc, #228]	; (8008a90 <SystemClock_Config+0x128>)
 80089ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089b2:	607b      	str	r3, [r7, #4]
 80089b4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80089b6:	4b37      	ldr	r3, [pc, #220]	; (8008a94 <SystemClock_Config+0x12c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a36      	ldr	r2, [pc, #216]	; (8008a94 <SystemClock_Config+0x12c>)
 80089bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80089c0:	6013      	str	r3, [r2, #0]
 80089c2:	4b34      	ldr	r3, [pc, #208]	; (8008a94 <SystemClock_Config+0x12c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80089ca:	603b      	str	r3, [r7, #0]
 80089cc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80089ce:	2301      	movs	r3, #1
 80089d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80089d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80089d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80089dc:	2302      	movs	r3, #2
 80089de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80089e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80089e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80089ea:	2304      	movs	r3, #4
 80089ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80089f0:	23d8      	movs	r3, #216	; 0xd8
 80089f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80089f6:	2302      	movs	r3, #2
 80089f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80089fc:	2309      	movs	r3, #9
 80089fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008a02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008a06:	4618      	mov	r0, r3
 8008a08:	f003 fdbe 	bl	800c588 <HAL_RCC_OscConfig>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8008a12:	f000 fcb5 	bl	8009380 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008a16:	f003 fd67 	bl	800c4e8 <HAL_PWREx_EnableOverDrive>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8008a20:	f000 fcae 	bl	8009380 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008a24:	230f      	movs	r3, #15
 8008a26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008a30:	2300      	movs	r3, #0
 8008a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008a36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008a46:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008a4a:	2107      	movs	r1, #7
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f004 f849 	bl	800cae4 <HAL_RCC_ClockConfig>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d001      	beq.n	8008a5c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8008a58:	f000 fc92 	bl	8009380 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8008a5c:	4b0e      	ldr	r3, [pc, #56]	; (8008a98 <SystemClock_Config+0x130>)
 8008a5e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008a60:	2300      	movs	r3, #0
 8008a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008a64:	2300      	movs	r3, #0
 8008a66:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008a72:	f107 0308 	add.w	r3, r7, #8
 8008a76:	4618      	mov	r0, r3
 8008a78:	f004 fa2c 	bl	800ced4 <HAL_RCCEx_PeriphCLKConfig>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8008a82:	f000 fc7d 	bl	8009380 <Error_Handler>
  }
}
 8008a86:	bf00      	nop
 8008a88:	37e0      	adds	r7, #224	; 0xe0
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	40023800 	.word	0x40023800
 8008a94:	40007000 	.word	0x40007000
 8008a98:	00200940 	.word	0x00200940

08008a9c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8008aa2:	463b      	mov	r3, r7
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	601a      	str	r2, [r3, #0]
 8008aa8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8008aaa:	4b14      	ldr	r3, [pc, #80]	; (8008afc <MX_DAC_Init+0x60>)
 8008aac:	4a14      	ldr	r2, [pc, #80]	; (8008b00 <MX_DAC_Init+0x64>)
 8008aae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8008ab0:	4812      	ldr	r0, [pc, #72]	; (8008afc <MX_DAC_Init+0x60>)
 8008ab2:	f001 fb6c 	bl	800a18e <HAL_DAC_Init>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8008abc:	f000 fc60 	bl	8009380 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8008ac8:	463b      	mov	r3, r7
 8008aca:	2200      	movs	r2, #0
 8008acc:	4619      	mov	r1, r3
 8008ace:	480b      	ldr	r0, [pc, #44]	; (8008afc <MX_DAC_Init+0x60>)
 8008ad0:	f001 fbd3 	bl	800a27a <HAL_DAC_ConfigChannel>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8008ada:	f000 fc51 	bl	8009380 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8008ade:	463b      	mov	r3, r7
 8008ae0:	2210      	movs	r2, #16
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4805      	ldr	r0, [pc, #20]	; (8008afc <MX_DAC_Init+0x60>)
 8008ae6:	f001 fbc8 	bl	800a27a <HAL_DAC_ConfigChannel>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8008af0:	f000 fc46 	bl	8009380 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8008af4:	bf00      	nop
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	2000d3bc 	.word	0x2000d3bc
 8008b00:	40007400 	.word	0x40007400

08008b04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8008b08:	4b1b      	ldr	r3, [pc, #108]	; (8008b78 <MX_SPI2_Init+0x74>)
 8008b0a:	4a1c      	ldr	r2, [pc, #112]	; (8008b7c <MX_SPI2_Init+0x78>)
 8008b0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008b0e:	4b1a      	ldr	r3, [pc, #104]	; (8008b78 <MX_SPI2_Init+0x74>)
 8008b10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008b14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008b16:	4b18      	ldr	r3, [pc, #96]	; (8008b78 <MX_SPI2_Init+0x74>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8008b1c:	4b16      	ldr	r3, [pc, #88]	; (8008b78 <MX_SPI2_Init+0x74>)
 8008b1e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8008b22:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b24:	4b14      	ldr	r3, [pc, #80]	; (8008b78 <MX_SPI2_Init+0x74>)
 8008b26:	2200      	movs	r2, #0
 8008b28:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008b2a:	4b13      	ldr	r3, [pc, #76]	; (8008b78 <MX_SPI2_Init+0x74>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008b30:	4b11      	ldr	r3, [pc, #68]	; (8008b78 <MX_SPI2_Init+0x74>)
 8008b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b36:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b38:	4b0f      	ldr	r3, [pc, #60]	; (8008b78 <MX_SPI2_Init+0x74>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008b3e:	4b0e      	ldr	r3, [pc, #56]	; (8008b78 <MX_SPI2_Init+0x74>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008b44:	4b0c      	ldr	r3, [pc, #48]	; (8008b78 <MX_SPI2_Init+0x74>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b4a:	4b0b      	ldr	r3, [pc, #44]	; (8008b78 <MX_SPI2_Init+0x74>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8008b50:	4b09      	ldr	r3, [pc, #36]	; (8008b78 <MX_SPI2_Init+0x74>)
 8008b52:	2207      	movs	r2, #7
 8008b54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008b56:	4b08      	ldr	r3, [pc, #32]	; (8008b78 <MX_SPI2_Init+0x74>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008b5c:	4b06      	ldr	r3, [pc, #24]	; (8008b78 <MX_SPI2_Init+0x74>)
 8008b5e:	2208      	movs	r2, #8
 8008b60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008b62:	4805      	ldr	r0, [pc, #20]	; (8008b78 <MX_SPI2_Init+0x74>)
 8008b64:	f004 fddc 	bl	800d720 <HAL_SPI_Init>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8008b6e:	f000 fc07 	bl	8009380 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8008b72:	bf00      	nop
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	2000ccd4 	.word	0x2000ccd4
 8008b7c:	40003800 	.word	0x40003800

08008b80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b088      	sub	sp, #32
 8008b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008b86:	f107 0310 	add.w	r3, r7, #16
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	605a      	str	r2, [r3, #4]
 8008b90:	609a      	str	r2, [r3, #8]
 8008b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b94:	1d3b      	adds	r3, r7, #4
 8008b96:	2200      	movs	r2, #0
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	605a      	str	r2, [r3, #4]
 8008b9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008b9e:	4b1d      	ldr	r3, [pc, #116]	; (8008c14 <MX_TIM3_Init+0x94>)
 8008ba0:	4a1d      	ldr	r2, [pc, #116]	; (8008c18 <MX_TIM3_Init+0x98>)
 8008ba2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 216;
 8008ba4:	4b1b      	ldr	r3, [pc, #108]	; (8008c14 <MX_TIM3_Init+0x94>)
 8008ba6:	22d8      	movs	r2, #216	; 0xd8
 8008ba8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008baa:	4b1a      	ldr	r3, [pc, #104]	; (8008c14 <MX_TIM3_Init+0x94>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100000;
 8008bb0:	4b18      	ldr	r3, [pc, #96]	; (8008c14 <MX_TIM3_Init+0x94>)
 8008bb2:	4a1a      	ldr	r2, [pc, #104]	; (8008c1c <MX_TIM3_Init+0x9c>)
 8008bb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008bb6:	4b17      	ldr	r3, [pc, #92]	; (8008c14 <MX_TIM3_Init+0x94>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008bbc:	4b15      	ldr	r3, [pc, #84]	; (8008c14 <MX_TIM3_Init+0x94>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008bc2:	4814      	ldr	r0, [pc, #80]	; (8008c14 <MX_TIM3_Init+0x94>)
 8008bc4:	f004 fe3e 	bl	800d844 <HAL_TIM_Base_Init>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8008bce:	f000 fbd7 	bl	8009380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008bd8:	f107 0310 	add.w	r3, r7, #16
 8008bdc:	4619      	mov	r1, r3
 8008bde:	480d      	ldr	r0, [pc, #52]	; (8008c14 <MX_TIM3_Init+0x94>)
 8008be0:	f005 f876 	bl	800dcd0 <HAL_TIM_ConfigClockSource>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8008bea:	f000 fbc9 	bl	8009380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008bf6:	1d3b      	adds	r3, r7, #4
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4806      	ldr	r0, [pc, #24]	; (8008c14 <MX_TIM3_Init+0x94>)
 8008bfc:	f005 fbb8 	bl	800e370 <HAL_TIMEx_MasterConfigSynchronization>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8008c06:	f000 fbbb 	bl	8009380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8008c0a:	bf00      	nop
 8008c0c:	3720      	adds	r7, #32
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	2000d23c 	.word	0x2000d23c
 8008c18:	40000400 	.word	0x40000400
 8008c1c:	000186a0 	.word	0x000186a0

08008c20 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b088      	sub	sp, #32
 8008c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008c26:	f107 0310 	add.w	r3, r7, #16
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	601a      	str	r2, [r3, #0]
 8008c2e:	605a      	str	r2, [r3, #4]
 8008c30:	609a      	str	r2, [r3, #8]
 8008c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c34:	1d3b      	adds	r3, r7, #4
 8008c36:	2200      	movs	r2, #0
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	605a      	str	r2, [r3, #4]
 8008c3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8008c3e:	4b1d      	ldr	r3, [pc, #116]	; (8008cb4 <MX_TIM5_Init+0x94>)
 8008c40:	4a1d      	ldr	r2, [pc, #116]	; (8008cb8 <MX_TIM5_Init+0x98>)
 8008c42:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 216;
 8008c44:	4b1b      	ldr	r3, [pc, #108]	; (8008cb4 <MX_TIM5_Init+0x94>)
 8008c46:	22d8      	movs	r2, #216	; 0xd8
 8008c48:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c4a:	4b1a      	ldr	r3, [pc, #104]	; (8008cb4 <MX_TIM5_Init+0x94>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8008c50:	4b18      	ldr	r3, [pc, #96]	; (8008cb4 <MX_TIM5_Init+0x94>)
 8008c52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c56:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c58:	4b16      	ldr	r3, [pc, #88]	; (8008cb4 <MX_TIM5_Init+0x94>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c5e:	4b15      	ldr	r3, [pc, #84]	; (8008cb4 <MX_TIM5_Init+0x94>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8008c64:	4813      	ldr	r0, [pc, #76]	; (8008cb4 <MX_TIM5_Init+0x94>)
 8008c66:	f004 fded 	bl	800d844 <HAL_TIM_Base_Init>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8008c70:	f000 fb86 	bl	8009380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8008c7a:	f107 0310 	add.w	r3, r7, #16
 8008c7e:	4619      	mov	r1, r3
 8008c80:	480c      	ldr	r0, [pc, #48]	; (8008cb4 <MX_TIM5_Init+0x94>)
 8008c82:	f005 f825 	bl	800dcd0 <HAL_TIM_ConfigClockSource>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8008c8c:	f000 fb78 	bl	8009380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008c90:	2320      	movs	r3, #32
 8008c92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008c94:	2300      	movs	r3, #0
 8008c96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008c98:	1d3b      	adds	r3, r7, #4
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	4805      	ldr	r0, [pc, #20]	; (8008cb4 <MX_TIM5_Init+0x94>)
 8008c9e:	f005 fb67 	bl	800e370 <HAL_TIMEx_MasterConfigSynchronization>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d001      	beq.n	8008cac <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8008ca8:	f000 fb6a 	bl	8009380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8008cac:	bf00      	nop
 8008cae:	3720      	adds	r7, #32
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	2000d1fc 	.word	0x2000d1fc
 8008cb8:	40000c00 	.word	0x40000c00

08008cbc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008cc2:	1d3b      	adds	r3, r7, #4
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	601a      	str	r2, [r3, #0]
 8008cc8:	605a      	str	r2, [r3, #4]
 8008cca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8008ccc:	4b14      	ldr	r3, [pc, #80]	; (8008d20 <MX_TIM6_Init+0x64>)
 8008cce:	4a15      	ldr	r2, [pc, #84]	; (8008d24 <MX_TIM6_Init+0x68>)
 8008cd0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 107;
 8008cd2:	4b13      	ldr	r3, [pc, #76]	; (8008d20 <MX_TIM6_Init+0x64>)
 8008cd4:	226b      	movs	r2, #107	; 0x6b
 8008cd6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008cd8:	4b11      	ldr	r3, [pc, #68]	; (8008d20 <MX_TIM6_Init+0x64>)
 8008cda:	2200      	movs	r2, #0
 8008cdc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8008cde:	4b10      	ldr	r3, [pc, #64]	; (8008d20 <MX_TIM6_Init+0x64>)
 8008ce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ce4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ce6:	4b0e      	ldr	r3, [pc, #56]	; (8008d20 <MX_TIM6_Init+0x64>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8008cec:	480c      	ldr	r0, [pc, #48]	; (8008d20 <MX_TIM6_Init+0x64>)
 8008cee:	f004 fda9 	bl	800d844 <HAL_TIM_Base_Init>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8008cf8:	f000 fb42 	bl	8009380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008d00:	2300      	movs	r3, #0
 8008d02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008d04:	1d3b      	adds	r3, r7, #4
 8008d06:	4619      	mov	r1, r3
 8008d08:	4805      	ldr	r0, [pc, #20]	; (8008d20 <MX_TIM6_Init+0x64>)
 8008d0a:	f005 fb31 	bl	800e370 <HAL_TIMEx_MasterConfigSynchronization>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d001      	beq.n	8008d18 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8008d14:	f000 fb34 	bl	8009380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8008d18:	bf00      	nop
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	2000d3d4 	.word	0x2000d3d4
 8008d24:	40001000 	.word	0x40001000

08008d28 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008d2e:	1d3b      	adds	r3, r7, #4
 8008d30:	2200      	movs	r2, #0
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	605a      	str	r2, [r3, #4]
 8008d36:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8008d38:	4b14      	ldr	r3, [pc, #80]	; (8008d8c <MX_TIM7_Init+0x64>)
 8008d3a:	4a15      	ldr	r2, [pc, #84]	; (8008d90 <MX_TIM7_Init+0x68>)
 8008d3c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 8008d3e:	4b13      	ldr	r3, [pc, #76]	; (8008d8c <MX_TIM7_Init+0x64>)
 8008d40:	226b      	movs	r2, #107	; 0x6b
 8008d42:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d44:	4b11      	ldr	r3, [pc, #68]	; (8008d8c <MX_TIM7_Init+0x64>)
 8008d46:	2200      	movs	r2, #0
 8008d48:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8008d4a:	4b10      	ldr	r3, [pc, #64]	; (8008d8c <MX_TIM7_Init+0x64>)
 8008d4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d50:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008d52:	4b0e      	ldr	r3, [pc, #56]	; (8008d8c <MX_TIM7_Init+0x64>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8008d58:	480c      	ldr	r0, [pc, #48]	; (8008d8c <MX_TIM7_Init+0x64>)
 8008d5a:	f004 fd73 	bl	800d844 <HAL_TIM_Base_Init>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8008d64:	f000 fb0c 	bl	8009380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8008d70:	1d3b      	adds	r3, r7, #4
 8008d72:	4619      	mov	r1, r3
 8008d74:	4805      	ldr	r0, [pc, #20]	; (8008d8c <MX_TIM7_Init+0x64>)
 8008d76:	f005 fafb 	bl	800e370 <HAL_TIMEx_MasterConfigSynchronization>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8008d80:	f000 fafe 	bl	8009380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8008d84:	bf00      	nop
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	2000d494 	.word	0x2000d494
 8008d90:	40001400 	.word	0x40001400

08008d94 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8008d9a:	463b      	mov	r3, r7
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	605a      	str	r2, [r3, #4]
 8008da2:	609a      	str	r2, [r3, #8]
 8008da4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8008da6:	4b1c      	ldr	r3, [pc, #112]	; (8008e18 <MX_TIM10_Init+0x84>)
 8008da8:	4a1c      	ldr	r2, [pc, #112]	; (8008e1c <MX_TIM10_Init+0x88>)
 8008daa:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 107;
 8008dac:	4b1a      	ldr	r3, [pc, #104]	; (8008e18 <MX_TIM10_Init+0x84>)
 8008dae:	226b      	movs	r2, #107	; 0x6b
 8008db0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008db2:	4b19      	ldr	r3, [pc, #100]	; (8008e18 <MX_TIM10_Init+0x84>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0;
 8008db8:	4b17      	ldr	r3, [pc, #92]	; (8008e18 <MX_TIM10_Init+0x84>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008dbe:	4b16      	ldr	r3, [pc, #88]	; (8008e18 <MX_TIM10_Init+0x84>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008dc4:	4b14      	ldr	r3, [pc, #80]	; (8008e18 <MX_TIM10_Init+0x84>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8008dca:	4813      	ldr	r0, [pc, #76]	; (8008e18 <MX_TIM10_Init+0x84>)
 8008dcc:	f004 fd3a 	bl	800d844 <HAL_TIM_Base_Init>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <MX_TIM10_Init+0x46>
  {
    Error_Handler();
 8008dd6:	f000 fad3 	bl	8009380 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 8008dda:	480f      	ldr	r0, [pc, #60]	; (8008e18 <MX_TIM10_Init+0x84>)
 8008ddc:	f004 fd88 	bl	800d8f0 <HAL_TIM_IC_Init>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <MX_TIM10_Init+0x56>
  {
    Error_Handler();
 8008de6:	f000 facb 	bl	8009380 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8008dea:	2302      	movs	r3, #2
 8008dec:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008dee:	2301      	movs	r3, #1
 8008df0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008df2:	2300      	movs	r3, #0
 8008df4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008dfa:	463b      	mov	r3, r7
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	4619      	mov	r1, r3
 8008e00:	4805      	ldr	r0, [pc, #20]	; (8008e18 <MX_TIM10_Init+0x84>)
 8008e02:	f004 fec9 	bl	800db98 <HAL_TIM_IC_ConfigChannel>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d001      	beq.n	8008e10 <MX_TIM10_Init+0x7c>
  {
    Error_Handler();
 8008e0c:	f000 fab8 	bl	8009380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8008e10:	bf00      	nop
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	2000cdb8 	.word	0x2000cdb8
 8008e1c:	40014400 	.word	0x40014400

08008e20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008e24:	4b13      	ldr	r3, [pc, #76]	; (8008e74 <MX_USART1_UART_Init+0x54>)
 8008e26:	4a14      	ldr	r2, [pc, #80]	; (8008e78 <MX_USART1_UART_Init+0x58>)
 8008e28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8008e2a:	4b12      	ldr	r3, [pc, #72]	; (8008e74 <MX_USART1_UART_Init+0x54>)
 8008e2c:	4a13      	ldr	r2, [pc, #76]	; (8008e7c <MX_USART1_UART_Init+0x5c>)
 8008e2e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008e30:	4b10      	ldr	r3, [pc, #64]	; (8008e74 <MX_USART1_UART_Init+0x54>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008e36:	4b0f      	ldr	r3, [pc, #60]	; (8008e74 <MX_USART1_UART_Init+0x54>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008e3c:	4b0d      	ldr	r3, [pc, #52]	; (8008e74 <MX_USART1_UART_Init+0x54>)
 8008e3e:	2200      	movs	r2, #0
 8008e40:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008e42:	4b0c      	ldr	r3, [pc, #48]	; (8008e74 <MX_USART1_UART_Init+0x54>)
 8008e44:	220c      	movs	r2, #12
 8008e46:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e48:	4b0a      	ldr	r3, [pc, #40]	; (8008e74 <MX_USART1_UART_Init+0x54>)
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008e4e:	4b09      	ldr	r3, [pc, #36]	; (8008e74 <MX_USART1_UART_Init+0x54>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008e54:	4b07      	ldr	r3, [pc, #28]	; (8008e74 <MX_USART1_UART_Init+0x54>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008e5a:	4b06      	ldr	r3, [pc, #24]	; (8008e74 <MX_USART1_UART_Init+0x54>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008e60:	4804      	ldr	r0, [pc, #16]	; (8008e74 <MX_USART1_UART_Init+0x54>)
 8008e62:	f005 fb31 	bl	800e4c8 <HAL_UART_Init>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8008e6c:	f000 fa88 	bl	8009380 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008e70:	bf00      	nop
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	2000d33c 	.word	0x2000d33c
 8008e78:	40011000 	.word	0x40011000
 8008e7c:	001e8480 	.word	0x001e8480

08008e80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008e84:	4b14      	ldr	r3, [pc, #80]	; (8008ed8 <MX_USART3_UART_Init+0x58>)
 8008e86:	4a15      	ldr	r2, [pc, #84]	; (8008edc <MX_USART3_UART_Init+0x5c>)
 8008e88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008e8a:	4b13      	ldr	r3, [pc, #76]	; (8008ed8 <MX_USART3_UART_Init+0x58>)
 8008e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008e90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008e92:	4b11      	ldr	r3, [pc, #68]	; (8008ed8 <MX_USART3_UART_Init+0x58>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008e98:	4b0f      	ldr	r3, [pc, #60]	; (8008ed8 <MX_USART3_UART_Init+0x58>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008e9e:	4b0e      	ldr	r3, [pc, #56]	; (8008ed8 <MX_USART3_UART_Init+0x58>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008ea4:	4b0c      	ldr	r3, [pc, #48]	; (8008ed8 <MX_USART3_UART_Init+0x58>)
 8008ea6:	220c      	movs	r2, #12
 8008ea8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008eaa:	4b0b      	ldr	r3, [pc, #44]	; (8008ed8 <MX_USART3_UART_Init+0x58>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008eb0:	4b09      	ldr	r3, [pc, #36]	; (8008ed8 <MX_USART3_UART_Init+0x58>)
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008eb6:	4b08      	ldr	r3, [pc, #32]	; (8008ed8 <MX_USART3_UART_Init+0x58>)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008ebc:	4b06      	ldr	r3, [pc, #24]	; (8008ed8 <MX_USART3_UART_Init+0x58>)
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008ec2:	4805      	ldr	r0, [pc, #20]	; (8008ed8 <MX_USART3_UART_Init+0x58>)
 8008ec4:	f005 fb00 	bl	800e4c8 <HAL_UART_Init>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8008ece:	f000 fa57 	bl	8009380 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008ed2:	bf00      	nop
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	2000cd38 	.word	0x2000cd38
 8008edc:	40004800 	.word	0x40004800

08008ee0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8008ee4:	4b14      	ldr	r3, [pc, #80]	; (8008f38 <MX_USART6_UART_Init+0x58>)
 8008ee6:	4a15      	ldr	r2, [pc, #84]	; (8008f3c <MX_USART6_UART_Init+0x5c>)
 8008ee8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8008eea:	4b13      	ldr	r3, [pc, #76]	; (8008f38 <MX_USART6_UART_Init+0x58>)
 8008eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008ef0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8008ef2:	4b11      	ldr	r3, [pc, #68]	; (8008f38 <MX_USART6_UART_Init+0x58>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8008ef8:	4b0f      	ldr	r3, [pc, #60]	; (8008f38 <MX_USART6_UART_Init+0x58>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8008efe:	4b0e      	ldr	r3, [pc, #56]	; (8008f38 <MX_USART6_UART_Init+0x58>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8008f04:	4b0c      	ldr	r3, [pc, #48]	; (8008f38 <MX_USART6_UART_Init+0x58>)
 8008f06:	220c      	movs	r2, #12
 8008f08:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008f0a:	4b0b      	ldr	r3, [pc, #44]	; (8008f38 <MX_USART6_UART_Init+0x58>)
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8008f10:	4b09      	ldr	r3, [pc, #36]	; (8008f38 <MX_USART6_UART_Init+0x58>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008f16:	4b08      	ldr	r3, [pc, #32]	; (8008f38 <MX_USART6_UART_Init+0x58>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008f1c:	4b06      	ldr	r3, [pc, #24]	; (8008f38 <MX_USART6_UART_Init+0x58>)
 8008f1e:	2200      	movs	r2, #0
 8008f20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8008f22:	4805      	ldr	r0, [pc, #20]	; (8008f38 <MX_USART6_UART_Init+0x58>)
 8008f24:	f005 fad0 	bl	800e4c8 <HAL_UART_Init>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8008f2e:	f000 fa27 	bl	8009380 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8008f32:	bf00      	nop
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	2000d414 	.word	0x2000d414
 8008f3c:	40011400 	.word	0x40011400

08008f40 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f44:	4b14      	ldr	r3, [pc, #80]	; (8008f98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008f4c:	4b12      	ldr	r3, [pc, #72]	; (8008f98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f4e:	2206      	movs	r2, #6
 8008f50:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f52:	4b11      	ldr	r3, [pc, #68]	; (8008f98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f54:	2202      	movs	r2, #2
 8008f56:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f58:	4b0f      	ldr	r3, [pc, #60]	; (8008f98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f5e:	4b0e      	ldr	r3, [pc, #56]	; (8008f98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f60:	2202      	movs	r2, #2
 8008f62:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008f64:	4b0c      	ldr	r3, [pc, #48]	; (8008f98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f66:	2201      	movs	r2, #1
 8008f68:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f6a:	4b0b      	ldr	r3, [pc, #44]	; (8008f98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008f70:	4b09      	ldr	r3, [pc, #36]	; (8008f98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008f76:	4b08      	ldr	r3, [pc, #32]	; (8008f98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f78:	2201      	movs	r2, #1
 8008f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008f7c:	4b06      	ldr	r3, [pc, #24]	; (8008f98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008f82:	4805      	ldr	r0, [pc, #20]	; (8008f98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f84:	f003 f957 	bl	800c236 <HAL_PCD_Init>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8008f8e:	f000 f9f7 	bl	8009380 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8008f92:	bf00      	nop
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	2000cdf8 	.word	0x2000cdf8

08008f9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008fa2:	4b14      	ldr	r3, [pc, #80]	; (8008ff4 <MX_DMA_Init+0x58>)
 8008fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa6:	4a13      	ldr	r2, [pc, #76]	; (8008ff4 <MX_DMA_Init+0x58>)
 8008fa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008fac:	6313      	str	r3, [r2, #48]	; 0x30
 8008fae:	4b11      	ldr	r3, [pc, #68]	; (8008ff4 <MX_DMA_Init+0x58>)
 8008fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fb6:	607b      	str	r3, [r7, #4]
 8008fb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 1, 0);
 8008fba:	2200      	movs	r2, #0
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	2039      	movs	r0, #57	; 0x39
 8008fc0:	f001 f8af 	bl	800a122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8008fc4:	2039      	movs	r0, #57	; 0x39
 8008fc6:	f001 f8c8 	bl	800a15a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 8008fca:	2200      	movs	r2, #0
 8008fcc:	2101      	movs	r1, #1
 8008fce:	203a      	movs	r0, #58	; 0x3a
 8008fd0:	f001 f8a7 	bl	800a122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8008fd4:	203a      	movs	r0, #58	; 0x3a
 8008fd6:	f001 f8c0 	bl	800a15a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 1, 0);
 8008fda:	2200      	movs	r2, #0
 8008fdc:	2101      	movs	r1, #1
 8008fde:	2045      	movs	r0, #69	; 0x45
 8008fe0:	f001 f89f 	bl	800a122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8008fe4:	2045      	movs	r0, #69	; 0x45
 8008fe6:	f001 f8b8 	bl	800a15a <HAL_NVIC_EnableIRQ>

}
 8008fea:	bf00      	nop
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	40023800 	.word	0x40023800

08008ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b08e      	sub	sp, #56	; 0x38
 8008ffc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009002:	2200      	movs	r2, #0
 8009004:	601a      	str	r2, [r3, #0]
 8009006:	605a      	str	r2, [r3, #4]
 8009008:	609a      	str	r2, [r3, #8]
 800900a:	60da      	str	r2, [r3, #12]
 800900c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800900e:	4b7f      	ldr	r3, [pc, #508]	; (800920c <MX_GPIO_Init+0x214>)
 8009010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009012:	4a7e      	ldr	r2, [pc, #504]	; (800920c <MX_GPIO_Init+0x214>)
 8009014:	f043 0310 	orr.w	r3, r3, #16
 8009018:	6313      	str	r3, [r2, #48]	; 0x30
 800901a:	4b7c      	ldr	r3, [pc, #496]	; (800920c <MX_GPIO_Init+0x214>)
 800901c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901e:	f003 0310 	and.w	r3, r3, #16
 8009022:	623b      	str	r3, [r7, #32]
 8009024:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009026:	4b79      	ldr	r3, [pc, #484]	; (800920c <MX_GPIO_Init+0x214>)
 8009028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902a:	4a78      	ldr	r2, [pc, #480]	; (800920c <MX_GPIO_Init+0x214>)
 800902c:	f043 0304 	orr.w	r3, r3, #4
 8009030:	6313      	str	r3, [r2, #48]	; 0x30
 8009032:	4b76      	ldr	r3, [pc, #472]	; (800920c <MX_GPIO_Init+0x214>)
 8009034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009036:	f003 0304 	and.w	r3, r3, #4
 800903a:	61fb      	str	r3, [r7, #28]
 800903c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800903e:	4b73      	ldr	r3, [pc, #460]	; (800920c <MX_GPIO_Init+0x214>)
 8009040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009042:	4a72      	ldr	r2, [pc, #456]	; (800920c <MX_GPIO_Init+0x214>)
 8009044:	f043 0320 	orr.w	r3, r3, #32
 8009048:	6313      	str	r3, [r2, #48]	; 0x30
 800904a:	4b70      	ldr	r3, [pc, #448]	; (800920c <MX_GPIO_Init+0x214>)
 800904c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904e:	f003 0320 	and.w	r3, r3, #32
 8009052:	61bb      	str	r3, [r7, #24]
 8009054:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009056:	4b6d      	ldr	r3, [pc, #436]	; (800920c <MX_GPIO_Init+0x214>)
 8009058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905a:	4a6c      	ldr	r2, [pc, #432]	; (800920c <MX_GPIO_Init+0x214>)
 800905c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009060:	6313      	str	r3, [r2, #48]	; 0x30
 8009062:	4b6a      	ldr	r3, [pc, #424]	; (800920c <MX_GPIO_Init+0x214>)
 8009064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800906e:	4b67      	ldr	r3, [pc, #412]	; (800920c <MX_GPIO_Init+0x214>)
 8009070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009072:	4a66      	ldr	r2, [pc, #408]	; (800920c <MX_GPIO_Init+0x214>)
 8009074:	f043 0301 	orr.w	r3, r3, #1
 8009078:	6313      	str	r3, [r2, #48]	; 0x30
 800907a:	4b64      	ldr	r3, [pc, #400]	; (800920c <MX_GPIO_Init+0x214>)
 800907c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	613b      	str	r3, [r7, #16]
 8009084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009086:	4b61      	ldr	r3, [pc, #388]	; (800920c <MX_GPIO_Init+0x214>)
 8009088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908a:	4a60      	ldr	r2, [pc, #384]	; (800920c <MX_GPIO_Init+0x214>)
 800908c:	f043 0302 	orr.w	r3, r3, #2
 8009090:	6313      	str	r3, [r2, #48]	; 0x30
 8009092:	4b5e      	ldr	r3, [pc, #376]	; (800920c <MX_GPIO_Init+0x214>)
 8009094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009096:	f003 0302 	and.w	r3, r3, #2
 800909a:	60fb      	str	r3, [r7, #12]
 800909c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800909e:	4b5b      	ldr	r3, [pc, #364]	; (800920c <MX_GPIO_Init+0x214>)
 80090a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a2:	4a5a      	ldr	r2, [pc, #360]	; (800920c <MX_GPIO_Init+0x214>)
 80090a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090a8:	6313      	str	r3, [r2, #48]	; 0x30
 80090aa:	4b58      	ldr	r3, [pc, #352]	; (800920c <MX_GPIO_Init+0x214>)
 80090ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b2:	60bb      	str	r3, [r7, #8]
 80090b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80090b6:	4b55      	ldr	r3, [pc, #340]	; (800920c <MX_GPIO_Init+0x214>)
 80090b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ba:	4a54      	ldr	r2, [pc, #336]	; (800920c <MX_GPIO_Init+0x214>)
 80090bc:	f043 0308 	orr.w	r3, r3, #8
 80090c0:	6313      	str	r3, [r2, #48]	; 0x30
 80090c2:	4b52      	ldr	r3, [pc, #328]	; (800920c <MX_GPIO_Init+0x214>)
 80090c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c6:	f003 0308 	and.w	r3, r3, #8
 80090ca:	607b      	str	r3, [r7, #4]
 80090cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG1_GPIO_Port, DEBUG1_Pin, GPIO_PIN_RESET);
 80090ce:	2200      	movs	r2, #0
 80090d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80090d4:	484e      	ldr	r0, [pc, #312]	; (8009210 <MX_GPIO_Init+0x218>)
 80090d6:	f003 f87b 	bl	800c1d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|PB12_Pin|LD3_Pin|CS_DAC1_Pin
 80090da:	2200      	movs	r2, #0
 80090dc:	f245 01b1 	movw	r1, #20657	; 0x50b1
 80090e0:	484c      	ldr	r0, [pc, #304]	; (8009214 <MX_GPIO_Init+0x21c>)
 80090e2:	f003 f875 	bl	800c1d0 <HAL_GPIO_WritePin>
                          |CS_DIGPOT_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MUTE_POTI_Pin|ZCEN_Pin|DEBUG2_Pin|RD_Pin
 80090e6:	2200      	movs	r2, #0
 80090e8:	f640 4186 	movw	r1, #3206	; 0xc86
 80090ec:	484a      	ldr	r0, [pc, #296]	; (8009218 <MX_GPIO_Init+0x220>)
 80090ee:	f003 f86f 	bl	800c1d0 <HAL_GPIO_WritePin>
                          |CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, RESET_Pin|USB_PowerSwitchOn_Pin|Relais6_Pin|Relais4_Pin
 80090f2:	2200      	movs	r2, #0
 80090f4:	f249 6144 	movw	r1, #38468	; 0x9644
 80090f8:	4848      	ldr	r0, [pc, #288]	; (800921c <MX_GPIO_Init+0x224>)
 80090fa:	f003 f869 	bl	800c1d0 <HAL_GPIO_WritePin>
                          |Relais5_Pin|Relais3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OS0_Pin|OS1_Pin|OS2_Pin|RANGE_Pin
 80090fe:	2200      	movs	r2, #0
 8009100:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8009104:	4846      	ldr	r0, [pc, #280]	; (8009220 <MX_GPIO_Init+0x228>)
 8009106:	f003 f863 	bl	800c1d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DB2_Pin DB3_Pin DB4_Pin DB5_Pin
                           DB6_Pin DB7_Pin DB8_Pin DB9_Pin
                           DB10_Pin DB11_Pin DB12_Pin DB13_Pin
                           DB14_Pin DB15_Pin DB0_Pin DB1_Pin */
  GPIO_InitStruct.Pin = DB2_Pin|DB3_Pin|DB4_Pin|DB5_Pin
 800910a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800910e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DB6_Pin|DB7_Pin|DB8_Pin|DB9_Pin
                          |DB10_Pin|DB11_Pin|DB12_Pin|DB13_Pin
                          |DB14_Pin|DB15_Pin|DB0_Pin|DB1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009110:	2300      	movs	r3, #0
 8009112:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009114:	2300      	movs	r3, #0
 8009116:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800911c:	4619      	mov	r1, r3
 800911e:	4841      	ldr	r0, [pc, #260]	; (8009224 <MX_GPIO_Init+0x22c>)
 8009120:	f002 feac 	bl	800be7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8009124:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800912a:	4b3f      	ldr	r3, [pc, #252]	; (8009228 <MX_GPIO_Init+0x230>)
 800912c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800912e:	2300      	movs	r3, #0
 8009130:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8009132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009136:	4619      	mov	r1, r3
 8009138:	4839      	ldr	r0, [pc, #228]	; (8009220 <MX_GPIO_Init+0x228>)
 800913a:	f002 fe9f 	bl	800be7c <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG1_Pin */
  GPIO_InitStruct.Pin = DEBUG1_Pin;
 800913e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009142:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009144:	2301      	movs	r3, #1
 8009146:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009148:	2300      	movs	r3, #0
 800914a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800914c:	2300      	movs	r3, #0
 800914e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DEBUG1_GPIO_Port, &GPIO_InitStruct);
 8009150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009154:	4619      	mov	r1, r3
 8009156:	482e      	ldr	r0, [pc, #184]	; (8009210 <MX_GPIO_Init+0x218>)
 8009158:	f002 fe90 	bl	800be7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB12_Pin LD3_Pin CS_DAC1_Pin
                           CS_DIGPOT_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|PB12_Pin|LD3_Pin|CS_DAC1_Pin
 800915c:	f245 03b1 	movw	r3, #20657	; 0x50b1
 8009160:	627b      	str	r3, [r7, #36]	; 0x24
                          |CS_DIGPOT_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009162:	2301      	movs	r3, #1
 8009164:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009166:	2300      	movs	r3, #0
 8009168:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800916a:	2300      	movs	r3, #0
 800916c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800916e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009172:	4619      	mov	r1, r3
 8009174:	4827      	ldr	r0, [pc, #156]	; (8009214 <MX_GPIO_Init+0x21c>)
 8009176:	f002 fe81 	bl	800be7c <HAL_GPIO_Init>

  /*Configure GPIO pins : Relais2_Pin Relais1_Pin BUSY_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = Relais2_Pin|Relais1_Pin|BUSY_Pin|USB_OverCurrent_Pin;
 800917a:	238b      	movs	r3, #139	; 0x8b
 800917c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800917e:	2300      	movs	r3, #0
 8009180:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009182:	2300      	movs	r3, #0
 8009184:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800918a:	4619      	mov	r1, r3
 800918c:	4823      	ldr	r0, [pc, #140]	; (800921c <MX_GPIO_Init+0x224>)
 800918e:	f002 fe75 	bl	800be7c <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_POTI_Pin ZCEN_Pin DEBUG2_Pin RD_Pin
                           CS_Pin */
  GPIO_InitStruct.Pin = MUTE_POTI_Pin|ZCEN_Pin|DEBUG2_Pin|RD_Pin
 8009192:	f640 4386 	movw	r3, #3206	; 0xc86
 8009196:	627b      	str	r3, [r7, #36]	; 0x24
                          |CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009198:	2301      	movs	r3, #1
 800919a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800919c:	2300      	movs	r3, #0
 800919e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091a0:	2300      	movs	r3, #0
 80091a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80091a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091a8:	4619      	mov	r1, r3
 80091aa:	481b      	ldr	r0, [pc, #108]	; (8009218 <MX_GPIO_Init+0x220>)
 80091ac:	f002 fe66 	bl	800be7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin USB_PowerSwitchOn_Pin Relais6_Pin Relais4_Pin
                           Relais5_Pin Relais3_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|USB_PowerSwitchOn_Pin|Relais6_Pin|Relais4_Pin
 80091b0:	f249 6344 	movw	r3, #38468	; 0x9644
 80091b4:	627b      	str	r3, [r7, #36]	; 0x24
                          |Relais5_Pin|Relais3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091b6:	2301      	movs	r3, #1
 80091b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091ba:	2300      	movs	r3, #0
 80091bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091be:	2300      	movs	r3, #0
 80091c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80091c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091c6:	4619      	mov	r1, r3
 80091c8:	4814      	ldr	r0, [pc, #80]	; (800921c <MX_GPIO_Init+0x224>)
 80091ca:	f002 fe57 	bl	800be7c <HAL_GPIO_Init>

  /*Configure GPIO pins : OS0_Pin OS1_Pin OS2_Pin RANGE_Pin
                           CV_A_B_Pin */
  GPIO_InitStruct.Pin = OS0_Pin|OS1_Pin|OS2_Pin|RANGE_Pin
 80091ce:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80091d2:	627b      	str	r3, [r7, #36]	; 0x24
                          |CV_A_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091d4:	2301      	movs	r3, #1
 80091d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d8:	2300      	movs	r3, #0
 80091da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091dc:	2300      	movs	r3, #0
 80091de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80091e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091e4:	4619      	mov	r1, r3
 80091e6:	480e      	ldr	r0, [pc, #56]	; (8009220 <MX_GPIO_Init+0x228>)
 80091e8:	f002 fe48 	bl	800be7c <HAL_GPIO_Init>

  /*Configure GPIO pin : FRST_Pin */
  GPIO_InitStruct.Pin = FRST_Pin;
 80091ec:	2340      	movs	r3, #64	; 0x40
 80091ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091f0:	2300      	movs	r3, #0
 80091f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091f4:	2300      	movs	r3, #0
 80091f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(FRST_GPIO_Port, &GPIO_InitStruct);
 80091f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091fc:	4619      	mov	r1, r3
 80091fe:	4806      	ldr	r0, [pc, #24]	; (8009218 <MX_GPIO_Init+0x220>)
 8009200:	f002 fe3c 	bl	800be7c <HAL_GPIO_Init>

}
 8009204:	bf00      	nop
 8009206:	3738      	adds	r7, #56	; 0x38
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	40023800 	.word	0x40023800
 8009210:	40021400 	.word	0x40021400
 8009214:	40020400 	.word	0x40020400
 8009218:	40020c00 	.word	0x40020c00
 800921c:	40021800 	.word	0x40021800
 8009220:	40020800 	.word	0x40020800
 8009224:	40021000 	.word	0x40021000
 8009228:	10110000 	.word	0x10110000

0800922c <VectorBase_Config>:

/* USER CODE BEGIN 4 */
static void VectorBase_Config(void)
{
 800922c:	b480      	push	{r7}
 800922e:	af00      	add	r7, sp, #0
   * c-startup code.
   */
  extern const unsigned long g_pfnVectors[];

  /* Remap the vector table to where the vector table is located for this program. */
  SCB->VTOR = (unsigned long)&g_pfnVectors[0];
 8009230:	4b03      	ldr	r3, [pc, #12]	; (8009240 <VectorBase_Config+0x14>)
 8009232:	4a04      	ldr	r2, [pc, #16]	; (8009244 <VectorBase_Config+0x18>)
 8009234:	609a      	str	r2, [r3, #8]
}
 8009236:	bf00      	nop
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	e000ed00 	.word	0xe000ed00
 8009244:	08008000 	.word	0x08008000

08009248 <recv_callback>:
//When we recive something we come here to accept the connection wish or not

err_t err;

err_t
recv_callback(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err){
 8009248:	b580      	push	{r7, lr}
 800924a:	b092      	sub	sp, #72	; 0x48
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
 8009254:	70fb      	strb	r3, [r7, #3]

	char recived[50];
	tcp_recved(tpcb, p->len);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	895b      	ldrh	r3, [r3, #10]
 800925a:	4619      	mov	r1, r3
 800925c:	68b8      	ldr	r0, [r7, #8]
 800925e:	f00d fbb1 	bl	80169c4 <tcp_recved>
	memcpy(recived, p -> payload, p -> len); //put the incoming udp data to UDP_RECIVE
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6859      	ldr	r1, [r3, #4]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	895b      	ldrh	r3, [r3, #10]
 800926a:	461a      	mov	r2, r3
 800926c:	f107 0314 	add.w	r3, r7, #20
 8009270:	4618      	mov	r0, r3
 8009272:	f015 fe74 	bl	801ef5e <memcpy>
	pbuf_free(p);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f00c fc3e 	bl	8015af8 <pbuf_free>
}
 800927c:	bf00      	nop
 800927e:	4618      	mov	r0, r3
 8009280:	3748      	adds	r7, #72	; 0x48
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
	...

08009288 <accept_callback>:

err_t
accept_callback(void *arg, struct tcp_pcb *newpcb, err_t err){
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	4613      	mov	r3, r2
 8009294:	71fb      	strb	r3, [r7, #7]
	tcp_arg(newpcb,NULL);
 8009296:	2100      	movs	r1, #0
 8009298:	68b8      	ldr	r0, [r7, #8]
 800929a:	f00e fa7b 	bl	8017794 <tcp_arg>
	tcp_recv(newpcb, recv_callback);
 800929e:	4907      	ldr	r1, [pc, #28]	; (80092bc <accept_callback+0x34>)
 80092a0:	68b8      	ldr	r0, [r7, #8]
 80092a2:	f00e fa89 	bl	80177b8 <tcp_recv>

	//Fire the Bootloader
	SharedParamsWriteByIndex(0, 1);
 80092a6:	2101      	movs	r1, #1
 80092a8:	2000      	movs	r0, #0
 80092aa:	f000 f871 	bl	8009390 <SharedParamsWriteByIndex>
	BootActivate();
 80092ae:	f7ff fad3 	bl	8008858 <BootActivate>
}
 80092b2:	bf00      	nop
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	08009249 	.word	0x08009249

080092c0 <StartDefaultTask>:
//##################################################################################//


/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80092c8:	f006 fbe2 	bl	800fa90 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  httpd_init();
 80092cc:	f00b f816 	bl	80142fc <httpd_init>


  HAL_TIM_Base_Start_IT(&htim3);
 80092d0:	4826      	ldr	r0, [pc, #152]	; (800936c <StartDefaultTask+0xac>)
 80092d2:	f004 fae3 	bl	800d89c <HAL_TIM_Base_Start_IT>

  UartBridge_init();
 80092d6:	f7ff f99b 	bl	8008610 <UartBridge_init>

  //########create pcb for firmware  upgrade on port 1000#########//
  static struct tcp_pcb *pcb;
  err_t err;
  pcb = tcp_new();
 80092da:	f00e fa45 	bl	8017768 <tcp_new>
 80092de:	4602      	mov	r2, r0
 80092e0:	4b23      	ldr	r3, [pc, #140]	; (8009370 <StartDefaultTask+0xb0>)
 80092e2:	601a      	str	r2, [r3, #0]
  err = tcp_bind(pcb, IP_ADDR_ANY, 1000);
 80092e4:	4b22      	ldr	r3, [pc, #136]	; (8009370 <StartDefaultTask+0xb0>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092ec:	4921      	ldr	r1, [pc, #132]	; (8009374 <StartDefaultTask+0xb4>)
 80092ee:	4618      	mov	r0, r3
 80092f0:	f00d f99a 	bl	8016628 <tcp_bind>
 80092f4:	4603      	mov	r3, r0
 80092f6:	73fb      	strb	r3, [r7, #15]
  tcp_arg(pcb,NULL);
 80092f8:	4b1d      	ldr	r3, [pc, #116]	; (8009370 <StartDefaultTask+0xb0>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2100      	movs	r1, #0
 80092fe:	4618      	mov	r0, r3
 8009300:	f00e fa48 	bl	8017794 <tcp_arg>
  pcb = tcp_listen(pcb);
 8009304:	4b1a      	ldr	r3, [pc, #104]	; (8009370 <StartDefaultTask+0xb0>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	21ff      	movs	r1, #255	; 0xff
 800930a:	4618      	mov	r0, r3
 800930c:	f00d fa44 	bl	8016798 <tcp_listen_with_backlog>
 8009310:	4602      	mov	r2, r0
 8009312:	4b17      	ldr	r3, [pc, #92]	; (8009370 <StartDefaultTask+0xb0>)
 8009314:	601a      	str	r2, [r3, #0]
  tcp_accept(pcb, accept_callback);
 8009316:	4b16      	ldr	r3, [pc, #88]	; (8009370 <StartDefaultTask+0xb0>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4917      	ldr	r1, [pc, #92]	; (8009378 <StartDefaultTask+0xb8>)
 800931c:	4618      	mov	r0, r3
 800931e:	f00e fab1 	bl	8017884 <tcp_accept>
  //###############################################################//

  /* Infinite loop */
  for(;;)
  {
	  for(int i= 0; i <30; i++){
 8009322:	2300      	movs	r3, #0
 8009324:	617b      	str	r3, [r7, #20]
 8009326:	e009      	b.n	800933c <StartDefaultTask+0x7c>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8009328:	2101      	movs	r1, #1
 800932a:	4814      	ldr	r0, [pc, #80]	; (800937c <StartDefaultTask+0xbc>)
 800932c:	f002 ff69 	bl	800c202 <HAL_GPIO_TogglePin>
		  HAL_Delay(250);
 8009330:	20fa      	movs	r0, #250	; 0xfa
 8009332:	f000 fdf9 	bl	8009f28 <HAL_Delay>
	  for(int i= 0; i <30; i++){
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	3301      	adds	r3, #1
 800933a:	617b      	str	r3, [r7, #20]
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	2b1d      	cmp	r3, #29
 8009340:	ddf2      	ble.n	8009328 <StartDefaultTask+0x68>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i= 0; i <10 ; i++){
 8009342:	2300      	movs	r3, #0
 8009344:	613b      	str	r3, [r7, #16]
 8009346:	e00d      	b.n	8009364 <StartDefaultTask+0xa4>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8009348:	2101      	movs	r1, #1
 800934a:	480c      	ldr	r0, [pc, #48]	; (800937c <StartDefaultTask+0xbc>)
 800934c:	f002 ff59 	bl	800c202 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8009350:	2180      	movs	r1, #128	; 0x80
 8009352:	480a      	ldr	r0, [pc, #40]	; (800937c <StartDefaultTask+0xbc>)
 8009354:	f002 ff55 	bl	800c202 <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 8009358:	2032      	movs	r0, #50	; 0x32
 800935a:	f000 fde5 	bl	8009f28 <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	3301      	adds	r3, #1
 8009362:	613b      	str	r3, [r7, #16]
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	2b09      	cmp	r3, #9
 8009368:	ddee      	ble.n	8009348 <StartDefaultTask+0x88>
	  for(int i= 0; i <30; i++){
 800936a:	e7da      	b.n	8009322 <StartDefaultTask+0x62>
 800936c:	2000d23c 	.word	0x2000d23c
 8009370:	20000338 	.word	0x20000338
 8009374:	08033800 	.word	0x08033800
 8009378:	08009289 	.word	0x08009289
 800937c:	40020400 	.word	0x40020400

08009380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009380:	b480      	push	{r7}
 8009382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009384:	bf00      	nop
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
	...

08009390 <SharedParamsWriteByIndex>:
** \param     value Value to write.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
bool SharedParamsWriteByIndex(uint32_t idx, uint8_t value)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	460b      	mov	r3, r1
 800939a:	70fb      	strb	r3, [r7, #3]
  bool result = false;
 800939c:	2300      	movs	r3, #0
 800939e:	73fb      	strb	r3, [r7, #15]

  /* Only continue if the buffer and the specified parameters are valid. */
  if ( (SharedParamsValidateBuffer()) &&
 80093a0:	f000 f818 	bl	80093d4 <SharedParamsValidateBuffer>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00c      	beq.n	80093c4 <SharedParamsWriteByIndex+0x34>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2b37      	cmp	r3, #55	; 0x37
 80093ae:	d809      	bhi.n	80093c4 <SharedParamsWriteByIndex+0x34>
       (idx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN) )
  {
    /* Write the value. */
    sharedParamsBuffer.data[idx] = value;
 80093b0:	4a07      	ldr	r2, [pc, #28]	; (80093d0 <SharedParamsWriteByIndex+0x40>)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4413      	add	r3, r2
 80093b6:	3304      	adds	r3, #4
 80093b8:	78fa      	ldrb	r2, [r7, #3]
 80093ba:	701a      	strb	r2, [r3, #0]
    /* Update the checksum since the contents were just changed. */
    SharedParamsWriteChecksum();
 80093bc:	f000 f824 	bl	8009408 <SharedParamsWriteChecksum>
    /* Update the result. */
    result = true;
 80093c0:	2301      	movs	r3, #1
 80093c2:	73fb      	strb	r3, [r7, #15]
  }
  /* Give the result back to the caller. */
  return result;
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of SharedParamsWriteByIndex ***/
 80093c6:	4618      	mov	r0, r3
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	20000000 	.word	0x20000000

080093d4 <SharedParamsValidateBuffer>:
**            identifier and verifying its checksum.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
static bool SharedParamsValidateBuffer(void)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
  bool result = false;
 80093da:	2300      	movs	r3, #0
 80093dc:	71fb      	strb	r3, [r7, #7]

  /* Perform validation. */
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 80093de:	4b08      	ldr	r3, [pc, #32]	; (8009400 <SharedParamsValidateBuffer+0x2c>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a08      	ldr	r2, [pc, #32]	; (8009404 <SharedParamsValidateBuffer+0x30>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d106      	bne.n	80093f6 <SharedParamsValidateBuffer+0x22>
       (SharedParamsVerifyChecksum()) )
 80093e8:	f000 f81a 	bl	8009420 <SharedParamsVerifyChecksum>
 80093ec:	4603      	mov	r3, r0
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <SharedParamsValidateBuffer+0x22>
  {
    /* The shared parameter buffer is valid, so update the result value. */
    result = true;
 80093f2:	2301      	movs	r3, #1
 80093f4:	71fb      	strb	r3, [r7, #7]
  }
  /* Give the result back to the caller. */
  return result;
 80093f6:	79fb      	ldrb	r3, [r7, #7]
} /*** end of SharedParamsValitabeTable ***/
 80093f8:	4618      	mov	r0, r3
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	20000000 	.word	0x20000000
 8009404:	ce42e7a2 	.word	0xce42e7a2

08009408 <SharedParamsWriteChecksum>:
** \brief     Calculates and writes the checksum into the buffer.
** \return    none.
**
****************************************************************************************/
static void SharedParamsWriteChecksum(void)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	af00      	add	r7, sp, #0
  /* Calculate and write the checksum. */
  sharedParamsBuffer.checksum = SharedParamsCalculateChecksum();
 800940c:	f000 f81e 	bl	800944c <SharedParamsCalculateChecksum>
 8009410:	4603      	mov	r3, r0
 8009412:	461a      	mov	r2, r3
 8009414:	4b01      	ldr	r3, [pc, #4]	; (800941c <SharedParamsWriteChecksum+0x14>)
 8009416:	879a      	strh	r2, [r3, #60]	; 0x3c
} /*** end of SharedParamsWriteChecksum ***/
 8009418:	bf00      	nop
 800941a:	bd80      	pop	{r7, pc}
 800941c:	20000000 	.word	0x20000000

08009420 <SharedParamsVerifyChecksum>:
**            buffer.
** \return    True is the checksum is correct, false otherwise.
**
****************************************************************************************/
static bool SharedParamsVerifyChecksum(void)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
  bool result = false;
 8009426:	2300      	movs	r3, #0
 8009428:	71fb      	strb	r3, [r7, #7]

  /* Calculate and verify the checksum. */
  if (SharedParamsCalculateChecksum() == sharedParamsBuffer.checksum)
 800942a:	f000 f80f 	bl	800944c <SharedParamsCalculateChecksum>
 800942e:	4603      	mov	r3, r0
 8009430:	461a      	mov	r2, r3
 8009432:	4b05      	ldr	r3, [pc, #20]	; (8009448 <SharedParamsVerifyChecksum+0x28>)
 8009434:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8009436:	429a      	cmp	r2, r3
 8009438:	d101      	bne.n	800943e <SharedParamsVerifyChecksum+0x1e>
  {
    /* Checksum is correct, so update the result value. */
    result = true;
 800943a:	2301      	movs	r3, #1
 800943c:	71fb      	strb	r3, [r7, #7]
  }
  /* Give the result back to the caller. */
  return result;
 800943e:	79fb      	ldrb	r3, [r7, #7]
} /*** end of SharedParamsVerifyChecksum ***/
 8009440:	4618      	mov	r0, r3
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	20000000 	.word	0x20000000

0800944c <SharedParamsCalculateChecksum>:
**            two's complement value of it.
** \return    The calculated checksum value.
**
****************************************************************************************/
static uint16_t SharedParamsCalculateChecksum(void)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
  uint16_t result = 0;
 8009452:	2300      	movs	r3, #0
 8009454:	80fb      	strh	r3, [r7, #6]
  uint32_t byteIdx;

  /* Add the identifier bytes to the checksum. */
  result += (uint8_t)sharedParamsBuffer.identifier;
 8009456:	4b1f      	ldr	r3, [pc, #124]	; (80094d4 <SharedParamsCalculateChecksum+0x88>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	b2db      	uxtb	r3, r3
 800945c:	b29a      	uxth	r2, r3
 800945e:	88fb      	ldrh	r3, [r7, #6]
 8009460:	4413      	add	r3, r2
 8009462:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 8u);
 8009464:	4b1b      	ldr	r3, [pc, #108]	; (80094d4 <SharedParamsCalculateChecksum+0x88>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	0a1b      	lsrs	r3, r3, #8
 800946a:	b2db      	uxtb	r3, r3
 800946c:	b29a      	uxth	r2, r3
 800946e:	88fb      	ldrh	r3, [r7, #6]
 8009470:	4413      	add	r3, r2
 8009472:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 16u);
 8009474:	4b17      	ldr	r3, [pc, #92]	; (80094d4 <SharedParamsCalculateChecksum+0x88>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	0c1b      	lsrs	r3, r3, #16
 800947a:	b2db      	uxtb	r3, r3
 800947c:	b29a      	uxth	r2, r3
 800947e:	88fb      	ldrh	r3, [r7, #6]
 8009480:	4413      	add	r3, r2
 8009482:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 24u);
 8009484:	4b13      	ldr	r3, [pc, #76]	; (80094d4 <SharedParamsCalculateChecksum+0x88>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	0e1b      	lsrs	r3, r3, #24
 800948a:	b2db      	uxtb	r3, r3
 800948c:	b29a      	uxth	r2, r3
 800948e:	88fb      	ldrh	r3, [r7, #6]
 8009490:	4413      	add	r3, r2
 8009492:	80fb      	strh	r3, [r7, #6]
  /* Loop through the parameter data array. */
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8009494:	2300      	movs	r3, #0
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	e00b      	b.n	80094b2 <SharedParamsCalculateChecksum+0x66>
  {
    /* Add parameter data byte to the checksum. */
    result += (uint8_t)sharedParamsBuffer.data[byteIdx];
 800949a:	4a0e      	ldr	r2, [pc, #56]	; (80094d4 <SharedParamsCalculateChecksum+0x88>)
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	4413      	add	r3, r2
 80094a0:	3304      	adds	r3, #4
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	88fb      	ldrh	r3, [r7, #6]
 80094a8:	4413      	add	r3, r2
 80094aa:	80fb      	strh	r3, [r7, #6]
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	3301      	adds	r3, #1
 80094b0:	603b      	str	r3, [r7, #0]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	2b37      	cmp	r3, #55	; 0x37
 80094b6:	d9f0      	bls.n	800949a <SharedParamsCalculateChecksum+0x4e>
  }
  /* Determine one's complement. */
  result = ~result;
 80094b8:	88fb      	ldrh	r3, [r7, #6]
 80094ba:	43db      	mvns	r3, r3
 80094bc:	80fb      	strh	r3, [r7, #6]
  /* Determine two's complement. */
  result += 1;
 80094be:	88fb      	ldrh	r3, [r7, #6]
 80094c0:	3301      	adds	r3, #1
 80094c2:	80fb      	strh	r3, [r7, #6]
  /* Give the result back to the caller. */
  return result;
 80094c4:	88fb      	ldrh	r3, [r7, #6]
} /*** end of SharedParamsCalculateChecksum ***/
 80094c6:	4618      	mov	r0, r3
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	20000000 	.word	0x20000000

080094d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80094de:	4b1d      	ldr	r3, [pc, #116]	; (8009554 <HAL_MspInit+0x7c>)
 80094e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e2:	4a1c      	ldr	r2, [pc, #112]	; (8009554 <HAL_MspInit+0x7c>)
 80094e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094e8:	6413      	str	r3, [r2, #64]	; 0x40
 80094ea:	4b1a      	ldr	r3, [pc, #104]	; (8009554 <HAL_MspInit+0x7c>)
 80094ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094f2:	607b      	str	r3, [r7, #4]
 80094f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80094f6:	4b17      	ldr	r3, [pc, #92]	; (8009554 <HAL_MspInit+0x7c>)
 80094f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094fa:	4a16      	ldr	r2, [pc, #88]	; (8009554 <HAL_MspInit+0x7c>)
 80094fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009500:	6453      	str	r3, [r2, #68]	; 0x44
 8009502:	4b14      	ldr	r3, [pc, #80]	; (8009554 <HAL_MspInit+0x7c>)
 8009504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800950a:	603b      	str	r3, [r7, #0]
 800950c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 10, 0);
 800950e:	2200      	movs	r2, #0
 8009510:	210a      	movs	r1, #10
 8009512:	f06f 000b 	mvn.w	r0, #11
 8009516:	f000 fe04 	bl	800a122 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 10, 0);
 800951a:	2200      	movs	r2, #0
 800951c:	210a      	movs	r1, #10
 800951e:	f06f 000a 	mvn.w	r0, #10
 8009522:	f000 fdfe 	bl	800a122 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 10, 0);
 8009526:	2200      	movs	r2, #0
 8009528:	210a      	movs	r1, #10
 800952a:	f06f 0009 	mvn.w	r0, #9
 800952e:	f000 fdf8 	bl	800a122 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 10, 0);
 8009532:	2200      	movs	r2, #0
 8009534:	210a      	movs	r1, #10
 8009536:	f06f 0003 	mvn.w	r0, #3
 800953a:	f000 fdf2 	bl	800a122 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800953e:	2200      	movs	r2, #0
 8009540:	210f      	movs	r1, #15
 8009542:	f06f 0001 	mvn.w	r0, #1
 8009546:	f000 fdec 	bl	800a122 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800954a:	bf00      	nop
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	40023800 	.word	0x40023800

08009558 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08a      	sub	sp, #40	; 0x28
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009560:	f107 0314 	add.w	r3, r7, #20
 8009564:	2200      	movs	r2, #0
 8009566:	601a      	str	r2, [r3, #0]
 8009568:	605a      	str	r2, [r3, #4]
 800956a:	609a      	str	r2, [r3, #8]
 800956c:	60da      	str	r2, [r3, #12]
 800956e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a19      	ldr	r2, [pc, #100]	; (80095dc <HAL_DAC_MspInit+0x84>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d12b      	bne.n	80095d2 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800957a:	4b19      	ldr	r3, [pc, #100]	; (80095e0 <HAL_DAC_MspInit+0x88>)
 800957c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957e:	4a18      	ldr	r2, [pc, #96]	; (80095e0 <HAL_DAC_MspInit+0x88>)
 8009580:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009584:	6413      	str	r3, [r2, #64]	; 0x40
 8009586:	4b16      	ldr	r3, [pc, #88]	; (80095e0 <HAL_DAC_MspInit+0x88>)
 8009588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800958e:	613b      	str	r3, [r7, #16]
 8009590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009592:	4b13      	ldr	r3, [pc, #76]	; (80095e0 <HAL_DAC_MspInit+0x88>)
 8009594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009596:	4a12      	ldr	r2, [pc, #72]	; (80095e0 <HAL_DAC_MspInit+0x88>)
 8009598:	f043 0301 	orr.w	r3, r3, #1
 800959c:	6313      	str	r3, [r2, #48]	; 0x30
 800959e:	4b10      	ldr	r3, [pc, #64]	; (80095e0 <HAL_DAC_MspInit+0x88>)
 80095a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a2:	f003 0301 	and.w	r3, r3, #1
 80095a6:	60fb      	str	r3, [r7, #12]
 80095a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80095aa:	2330      	movs	r3, #48	; 0x30
 80095ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80095ae:	2303      	movs	r3, #3
 80095b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095b2:	2300      	movs	r3, #0
 80095b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095b6:	f107 0314 	add.w	r3, r7, #20
 80095ba:	4619      	mov	r1, r3
 80095bc:	4809      	ldr	r0, [pc, #36]	; (80095e4 <HAL_DAC_MspInit+0x8c>)
 80095be:	f002 fc5d 	bl	800be7c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80095c2:	2200      	movs	r2, #0
 80095c4:	2101      	movs	r1, #1
 80095c6:	2036      	movs	r0, #54	; 0x36
 80095c8:	f000 fdab 	bl	800a122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80095cc:	2036      	movs	r0, #54	; 0x36
 80095ce:	f000 fdc4 	bl	800a15a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80095d2:	bf00      	nop
 80095d4:	3728      	adds	r7, #40	; 0x28
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	40007400 	.word	0x40007400
 80095e0:	40023800 	.word	0x40023800
 80095e4:	40020000 	.word	0x40020000

080095e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b08a      	sub	sp, #40	; 0x28
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095f0:	f107 0314 	add.w	r3, r7, #20
 80095f4:	2200      	movs	r2, #0
 80095f6:	601a      	str	r2, [r3, #0]
 80095f8:	605a      	str	r2, [r3, #4]
 80095fa:	609a      	str	r2, [r3, #8]
 80095fc:	60da      	str	r2, [r3, #12]
 80095fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a25      	ldr	r2, [pc, #148]	; (800969c <HAL_SPI_MspInit+0xb4>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d144      	bne.n	8009694 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800960a:	4b25      	ldr	r3, [pc, #148]	; (80096a0 <HAL_SPI_MspInit+0xb8>)
 800960c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960e:	4a24      	ldr	r2, [pc, #144]	; (80096a0 <HAL_SPI_MspInit+0xb8>)
 8009610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009614:	6413      	str	r3, [r2, #64]	; 0x40
 8009616:	4b22      	ldr	r3, [pc, #136]	; (80096a0 <HAL_SPI_MspInit+0xb8>)
 8009618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800961e:	613b      	str	r3, [r7, #16]
 8009620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009622:	4b1f      	ldr	r3, [pc, #124]	; (80096a0 <HAL_SPI_MspInit+0xb8>)
 8009624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009626:	4a1e      	ldr	r2, [pc, #120]	; (80096a0 <HAL_SPI_MspInit+0xb8>)
 8009628:	f043 0304 	orr.w	r3, r3, #4
 800962c:	6313      	str	r3, [r2, #48]	; 0x30
 800962e:	4b1c      	ldr	r3, [pc, #112]	; (80096a0 <HAL_SPI_MspInit+0xb8>)
 8009630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009632:	f003 0304 	and.w	r3, r3, #4
 8009636:	60fb      	str	r3, [r7, #12]
 8009638:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800963a:	4b19      	ldr	r3, [pc, #100]	; (80096a0 <HAL_SPI_MspInit+0xb8>)
 800963c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800963e:	4a18      	ldr	r2, [pc, #96]	; (80096a0 <HAL_SPI_MspInit+0xb8>)
 8009640:	f043 0302 	orr.w	r3, r3, #2
 8009644:	6313      	str	r3, [r2, #48]	; 0x30
 8009646:	4b16      	ldr	r3, [pc, #88]	; (80096a0 <HAL_SPI_MspInit+0xb8>)
 8009648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964a:	f003 0302 	and.w	r3, r3, #2
 800964e:	60bb      	str	r3, [r7, #8]
 8009650:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009652:	2308      	movs	r3, #8
 8009654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009656:	2302      	movs	r3, #2
 8009658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800965a:	2300      	movs	r3, #0
 800965c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800965e:	2303      	movs	r3, #3
 8009660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009662:	2305      	movs	r3, #5
 8009664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009666:	f107 0314 	add.w	r3, r7, #20
 800966a:	4619      	mov	r1, r3
 800966c:	480d      	ldr	r0, [pc, #52]	; (80096a4 <HAL_SPI_MspInit+0xbc>)
 800966e:	f002 fc05 	bl	800be7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009678:	2302      	movs	r3, #2
 800967a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800967c:	2300      	movs	r3, #0
 800967e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009680:	2303      	movs	r3, #3
 8009682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009684:	2305      	movs	r3, #5
 8009686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009688:	f107 0314 	add.w	r3, r7, #20
 800968c:	4619      	mov	r1, r3
 800968e:	4806      	ldr	r0, [pc, #24]	; (80096a8 <HAL_SPI_MspInit+0xc0>)
 8009690:	f002 fbf4 	bl	800be7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8009694:	bf00      	nop
 8009696:	3728      	adds	r7, #40	; 0x28
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	40003800 	.word	0x40003800
 80096a0:	40023800 	.word	0x40023800
 80096a4:	40020800 	.word	0x40020800
 80096a8:	40020400 	.word	0x40020400

080096ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b08e      	sub	sp, #56	; 0x38
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096b8:	2200      	movs	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]
 80096bc:	605a      	str	r2, [r3, #4]
 80096be:	609a      	str	r2, [r3, #8]
 80096c0:	60da      	str	r2, [r3, #12]
 80096c2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a4f      	ldr	r2, [pc, #316]	; (8009808 <HAL_TIM_Base_MspInit+0x15c>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d114      	bne.n	80096f8 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80096ce:	4b4f      	ldr	r3, [pc, #316]	; (800980c <HAL_TIM_Base_MspInit+0x160>)
 80096d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d2:	4a4e      	ldr	r2, [pc, #312]	; (800980c <HAL_TIM_Base_MspInit+0x160>)
 80096d4:	f043 0302 	orr.w	r3, r3, #2
 80096d8:	6413      	str	r3, [r2, #64]	; 0x40
 80096da:	4b4c      	ldr	r3, [pc, #304]	; (800980c <HAL_TIM_Base_MspInit+0x160>)
 80096dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096de:	f003 0302 	and.w	r3, r3, #2
 80096e2:	623b      	str	r3, [r7, #32]
 80096e4:	6a3b      	ldr	r3, [r7, #32]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80096e6:	2200      	movs	r2, #0
 80096e8:	2103      	movs	r1, #3
 80096ea:	201d      	movs	r0, #29
 80096ec:	f000 fd19 	bl	800a122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80096f0:	201d      	movs	r0, #29
 80096f2:	f000 fd32 	bl	800a15a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80096f6:	e082      	b.n	80097fe <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM5)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a44      	ldr	r2, [pc, #272]	; (8009810 <HAL_TIM_Base_MspInit+0x164>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d114      	bne.n	800972c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8009702:	4b42      	ldr	r3, [pc, #264]	; (800980c <HAL_TIM_Base_MspInit+0x160>)
 8009704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009706:	4a41      	ldr	r2, [pc, #260]	; (800980c <HAL_TIM_Base_MspInit+0x160>)
 8009708:	f043 0308 	orr.w	r3, r3, #8
 800970c:	6413      	str	r3, [r2, #64]	; 0x40
 800970e:	4b3f      	ldr	r3, [pc, #252]	; (800980c <HAL_TIM_Base_MspInit+0x160>)
 8009710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009712:	f003 0308 	and.w	r3, r3, #8
 8009716:	61fb      	str	r3, [r7, #28]
 8009718:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 800971a:	2200      	movs	r2, #0
 800971c:	2101      	movs	r1, #1
 800971e:	2032      	movs	r0, #50	; 0x32
 8009720:	f000 fcff 	bl	800a122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8009724:	2032      	movs	r0, #50	; 0x32
 8009726:	f000 fd18 	bl	800a15a <HAL_NVIC_EnableIRQ>
}
 800972a:	e068      	b.n	80097fe <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM6)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a38      	ldr	r2, [pc, #224]	; (8009814 <HAL_TIM_Base_MspInit+0x168>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d114      	bne.n	8009760 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8009736:	4b35      	ldr	r3, [pc, #212]	; (800980c <HAL_TIM_Base_MspInit+0x160>)
 8009738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973a:	4a34      	ldr	r2, [pc, #208]	; (800980c <HAL_TIM_Base_MspInit+0x160>)
 800973c:	f043 0310 	orr.w	r3, r3, #16
 8009740:	6413      	str	r3, [r2, #64]	; 0x40
 8009742:	4b32      	ldr	r3, [pc, #200]	; (800980c <HAL_TIM_Base_MspInit+0x160>)
 8009744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009746:	f003 0310 	and.w	r3, r3, #16
 800974a:	61bb      	str	r3, [r7, #24]
 800974c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800974e:	2200      	movs	r2, #0
 8009750:	2101      	movs	r1, #1
 8009752:	2036      	movs	r0, #54	; 0x36
 8009754:	f000 fce5 	bl	800a122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8009758:	2036      	movs	r0, #54	; 0x36
 800975a:	f000 fcfe 	bl	800a15a <HAL_NVIC_EnableIRQ>
}
 800975e:	e04e      	b.n	80097fe <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM7)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a2c      	ldr	r2, [pc, #176]	; (8009818 <HAL_TIM_Base_MspInit+0x16c>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d114      	bne.n	8009794 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800976a:	4b28      	ldr	r3, [pc, #160]	; (800980c <HAL_TIM_Base_MspInit+0x160>)
 800976c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976e:	4a27      	ldr	r2, [pc, #156]	; (800980c <HAL_TIM_Base_MspInit+0x160>)
 8009770:	f043 0320 	orr.w	r3, r3, #32
 8009774:	6413      	str	r3, [r2, #64]	; 0x40
 8009776:	4b25      	ldr	r3, [pc, #148]	; (800980c <HAL_TIM_Base_MspInit+0x160>)
 8009778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977a:	f003 0320 	and.w	r3, r3, #32
 800977e:	617b      	str	r3, [r7, #20]
 8009780:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8009782:	2200      	movs	r2, #0
 8009784:	2101      	movs	r1, #1
 8009786:	2037      	movs	r0, #55	; 0x37
 8009788:	f000 fccb 	bl	800a122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800978c:	2037      	movs	r0, #55	; 0x37
 800978e:	f000 fce4 	bl	800a15a <HAL_NVIC_EnableIRQ>
}
 8009792:	e034      	b.n	80097fe <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM10)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a20      	ldr	r2, [pc, #128]	; (800981c <HAL_TIM_Base_MspInit+0x170>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d12f      	bne.n	80097fe <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800979e:	4b1b      	ldr	r3, [pc, #108]	; (800980c <HAL_TIM_Base_MspInit+0x160>)
 80097a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097a2:	4a1a      	ldr	r2, [pc, #104]	; (800980c <HAL_TIM_Base_MspInit+0x160>)
 80097a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097a8:	6453      	str	r3, [r2, #68]	; 0x44
 80097aa:	4b18      	ldr	r3, [pc, #96]	; (800980c <HAL_TIM_Base_MspInit+0x160>)
 80097ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097b2:	613b      	str	r3, [r7, #16]
 80097b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80097b6:	4b15      	ldr	r3, [pc, #84]	; (800980c <HAL_TIM_Base_MspInit+0x160>)
 80097b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ba:	4a14      	ldr	r2, [pc, #80]	; (800980c <HAL_TIM_Base_MspInit+0x160>)
 80097bc:	f043 0320 	orr.w	r3, r3, #32
 80097c0:	6313      	str	r3, [r2, #48]	; 0x30
 80097c2:	4b12      	ldr	r3, [pc, #72]	; (800980c <HAL_TIM_Base_MspInit+0x160>)
 80097c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c6:	f003 0320 	and.w	r3, r3, #32
 80097ca:	60fb      	str	r3, [r7, #12]
 80097cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80097ce:	2340      	movs	r3, #64	; 0x40
 80097d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097d2:	2302      	movs	r3, #2
 80097d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097d6:	2300      	movs	r3, #0
 80097d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097da:	2300      	movs	r3, #0
 80097dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80097de:	2303      	movs	r3, #3
 80097e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80097e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097e6:	4619      	mov	r1, r3
 80097e8:	480d      	ldr	r0, [pc, #52]	; (8009820 <HAL_TIM_Base_MspInit+0x174>)
 80097ea:	f002 fb47 	bl	800be7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80097ee:	2200      	movs	r2, #0
 80097f0:	2100      	movs	r1, #0
 80097f2:	2019      	movs	r0, #25
 80097f4:	f000 fc95 	bl	800a122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80097f8:	2019      	movs	r0, #25
 80097fa:	f000 fcae 	bl	800a15a <HAL_NVIC_EnableIRQ>
}
 80097fe:	bf00      	nop
 8009800:	3738      	adds	r7, #56	; 0x38
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	40000400 	.word	0x40000400
 800980c:	40023800 	.word	0x40023800
 8009810:	40000c00 	.word	0x40000c00
 8009814:	40001000 	.word	0x40001000
 8009818:	40001400 	.word	0x40001400
 800981c:	40014400 	.word	0x40014400
 8009820:	40021400 	.word	0x40021400

08009824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b08e      	sub	sp, #56	; 0x38
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800982c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009830:	2200      	movs	r2, #0
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	605a      	str	r2, [r3, #4]
 8009836:	609a      	str	r2, [r3, #8]
 8009838:	60da      	str	r2, [r3, #12]
 800983a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a99      	ldr	r2, [pc, #612]	; (8009aa8 <HAL_UART_MspInit+0x284>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d170      	bne.n	8009928 <HAL_UART_MspInit+0x104>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009846:	4b99      	ldr	r3, [pc, #612]	; (8009aac <HAL_UART_MspInit+0x288>)
 8009848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800984a:	4a98      	ldr	r2, [pc, #608]	; (8009aac <HAL_UART_MspInit+0x288>)
 800984c:	f043 0310 	orr.w	r3, r3, #16
 8009850:	6453      	str	r3, [r2, #68]	; 0x44
 8009852:	4b96      	ldr	r3, [pc, #600]	; (8009aac <HAL_UART_MspInit+0x288>)
 8009854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009856:	f003 0310 	and.w	r3, r3, #16
 800985a:	623b      	str	r3, [r7, #32]
 800985c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800985e:	4b93      	ldr	r3, [pc, #588]	; (8009aac <HAL_UART_MspInit+0x288>)
 8009860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009862:	4a92      	ldr	r2, [pc, #584]	; (8009aac <HAL_UART_MspInit+0x288>)
 8009864:	f043 0302 	orr.w	r3, r3, #2
 8009868:	6313      	str	r3, [r2, #48]	; 0x30
 800986a:	4b90      	ldr	r3, [pc, #576]	; (8009aac <HAL_UART_MspInit+0x288>)
 800986c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986e:	f003 0302 	and.w	r3, r3, #2
 8009872:	61fb      	str	r3, [r7, #28]
 8009874:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8009876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800987a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800987c:	2302      	movs	r3, #2
 800987e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009880:	2300      	movs	r3, #0
 8009882:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009884:	2303      	movs	r3, #3
 8009886:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8009888:	2304      	movs	r3, #4
 800988a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800988c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009890:	4619      	mov	r1, r3
 8009892:	4887      	ldr	r0, [pc, #540]	; (8009ab0 <HAL_UART_MspInit+0x28c>)
 8009894:	f002 faf2 	bl	800be7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009898:	2340      	movs	r3, #64	; 0x40
 800989a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800989c:	2302      	movs	r3, #2
 800989e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098a0:	2300      	movs	r3, #0
 80098a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098a4:	2303      	movs	r3, #3
 80098a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80098a8:	2307      	movs	r3, #7
 80098aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80098ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098b0:	4619      	mov	r1, r3
 80098b2:	487f      	ldr	r0, [pc, #508]	; (8009ab0 <HAL_UART_MspInit+0x28c>)
 80098b4:	f002 fae2 	bl	800be7c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80098b8:	4b7e      	ldr	r3, [pc, #504]	; (8009ab4 <HAL_UART_MspInit+0x290>)
 80098ba:	4a7f      	ldr	r2, [pc, #508]	; (8009ab8 <HAL_UART_MspInit+0x294>)
 80098bc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80098be:	4b7d      	ldr	r3, [pc, #500]	; (8009ab4 <HAL_UART_MspInit+0x290>)
 80098c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80098c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80098c6:	4b7b      	ldr	r3, [pc, #492]	; (8009ab4 <HAL_UART_MspInit+0x290>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80098cc:	4b79      	ldr	r3, [pc, #484]	; (8009ab4 <HAL_UART_MspInit+0x290>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80098d2:	4b78      	ldr	r3, [pc, #480]	; (8009ab4 <HAL_UART_MspInit+0x290>)
 80098d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80098d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80098da:	4b76      	ldr	r3, [pc, #472]	; (8009ab4 <HAL_UART_MspInit+0x290>)
 80098dc:	2200      	movs	r2, #0
 80098de:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80098e0:	4b74      	ldr	r3, [pc, #464]	; (8009ab4 <HAL_UART_MspInit+0x290>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80098e6:	4b73      	ldr	r3, [pc, #460]	; (8009ab4 <HAL_UART_MspInit+0x290>)
 80098e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80098ee:	4b71      	ldr	r3, [pc, #452]	; (8009ab4 <HAL_UART_MspInit+0x290>)
 80098f0:	2200      	movs	r2, #0
 80098f2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80098f4:	4b6f      	ldr	r3, [pc, #444]	; (8009ab4 <HAL_UART_MspInit+0x290>)
 80098f6:	2200      	movs	r2, #0
 80098f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80098fa:	486e      	ldr	r0, [pc, #440]	; (8009ab4 <HAL_UART_MspInit+0x290>)
 80098fc:	f000 fd14 	bl	800a328 <HAL_DMA_Init>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d001      	beq.n	800990a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8009906:	f7ff fd3b 	bl	8009380 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a69      	ldr	r2, [pc, #420]	; (8009ab4 <HAL_UART_MspInit+0x290>)
 800990e:	66da      	str	r2, [r3, #108]	; 0x6c
 8009910:	4a68      	ldr	r2, [pc, #416]	; (8009ab4 <HAL_UART_MspInit+0x290>)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8009916:	2200      	movs	r2, #0
 8009918:	2101      	movs	r1, #1
 800991a:	2025      	movs	r0, #37	; 0x25
 800991c:	f000 fc01 	bl	800a122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009920:	2025      	movs	r0, #37	; 0x25
 8009922:	f000 fc1a 	bl	800a15a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8009926:	e0ba      	b.n	8009a9e <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART3)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a63      	ldr	r2, [pc, #396]	; (8009abc <HAL_UART_MspInit+0x298>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d129      	bne.n	8009986 <HAL_UART_MspInit+0x162>
    __HAL_RCC_USART3_CLK_ENABLE();
 8009932:	4b5e      	ldr	r3, [pc, #376]	; (8009aac <HAL_UART_MspInit+0x288>)
 8009934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009936:	4a5d      	ldr	r2, [pc, #372]	; (8009aac <HAL_UART_MspInit+0x288>)
 8009938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800993c:	6413      	str	r3, [r2, #64]	; 0x40
 800993e:	4b5b      	ldr	r3, [pc, #364]	; (8009aac <HAL_UART_MspInit+0x288>)
 8009940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009946:	61bb      	str	r3, [r7, #24]
 8009948:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800994a:	4b58      	ldr	r3, [pc, #352]	; (8009aac <HAL_UART_MspInit+0x288>)
 800994c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994e:	4a57      	ldr	r2, [pc, #348]	; (8009aac <HAL_UART_MspInit+0x288>)
 8009950:	f043 0308 	orr.w	r3, r3, #8
 8009954:	6313      	str	r3, [r2, #48]	; 0x30
 8009956:	4b55      	ldr	r3, [pc, #340]	; (8009aac <HAL_UART_MspInit+0x288>)
 8009958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800995a:	f003 0308 	and.w	r3, r3, #8
 800995e:	617b      	str	r3, [r7, #20]
 8009960:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8009962:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009966:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009968:	2302      	movs	r3, #2
 800996a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800996c:	2300      	movs	r3, #0
 800996e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009970:	2303      	movs	r3, #3
 8009972:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009974:	2307      	movs	r3, #7
 8009976:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800997c:	4619      	mov	r1, r3
 800997e:	4850      	ldr	r0, [pc, #320]	; (8009ac0 <HAL_UART_MspInit+0x29c>)
 8009980:	f002 fa7c 	bl	800be7c <HAL_GPIO_Init>
}
 8009984:	e08b      	b.n	8009a9e <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART6)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a4e      	ldr	r2, [pc, #312]	; (8009ac4 <HAL_UART_MspInit+0x2a0>)
 800998c:	4293      	cmp	r3, r2
 800998e:	f040 8086 	bne.w	8009a9e <HAL_UART_MspInit+0x27a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8009992:	4b46      	ldr	r3, [pc, #280]	; (8009aac <HAL_UART_MspInit+0x288>)
 8009994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009996:	4a45      	ldr	r2, [pc, #276]	; (8009aac <HAL_UART_MspInit+0x288>)
 8009998:	f043 0320 	orr.w	r3, r3, #32
 800999c:	6453      	str	r3, [r2, #68]	; 0x44
 800999e:	4b43      	ldr	r3, [pc, #268]	; (8009aac <HAL_UART_MspInit+0x288>)
 80099a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099a2:	f003 0320 	and.w	r3, r3, #32
 80099a6:	613b      	str	r3, [r7, #16]
 80099a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80099aa:	4b40      	ldr	r3, [pc, #256]	; (8009aac <HAL_UART_MspInit+0x288>)
 80099ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ae:	4a3f      	ldr	r2, [pc, #252]	; (8009aac <HAL_UART_MspInit+0x288>)
 80099b0:	f043 0304 	orr.w	r3, r3, #4
 80099b4:	6313      	str	r3, [r2, #48]	; 0x30
 80099b6:	4b3d      	ldr	r3, [pc, #244]	; (8009aac <HAL_UART_MspInit+0x288>)
 80099b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ba:	f003 0304 	and.w	r3, r3, #4
 80099be:	60fb      	str	r3, [r7, #12]
 80099c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80099c2:	23c0      	movs	r3, #192	; 0xc0
 80099c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099c6:	2302      	movs	r3, #2
 80099c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099ca:	2300      	movs	r3, #0
 80099cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099ce:	2303      	movs	r3, #3
 80099d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80099d2:	2308      	movs	r3, #8
 80099d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80099d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099da:	4619      	mov	r1, r3
 80099dc:	483a      	ldr	r0, [pc, #232]	; (8009ac8 <HAL_UART_MspInit+0x2a4>)
 80099de:	f002 fa4d 	bl	800be7c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80099e2:	4b3a      	ldr	r3, [pc, #232]	; (8009acc <HAL_UART_MspInit+0x2a8>)
 80099e4:	4a3a      	ldr	r2, [pc, #232]	; (8009ad0 <HAL_UART_MspInit+0x2ac>)
 80099e6:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80099e8:	4b38      	ldr	r3, [pc, #224]	; (8009acc <HAL_UART_MspInit+0x2a8>)
 80099ea:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80099ee:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80099f0:	4b36      	ldr	r3, [pc, #216]	; (8009acc <HAL_UART_MspInit+0x2a8>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80099f6:	4b35      	ldr	r3, [pc, #212]	; (8009acc <HAL_UART_MspInit+0x2a8>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80099fc:	4b33      	ldr	r3, [pc, #204]	; (8009acc <HAL_UART_MspInit+0x2a8>)
 80099fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a02:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009a04:	4b31      	ldr	r3, [pc, #196]	; (8009acc <HAL_UART_MspInit+0x2a8>)
 8009a06:	2200      	movs	r2, #0
 8009a08:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009a0a:	4b30      	ldr	r3, [pc, #192]	; (8009acc <HAL_UART_MspInit+0x2a8>)
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8009a10:	4b2e      	ldr	r3, [pc, #184]	; (8009acc <HAL_UART_MspInit+0x2a8>)
 8009a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a16:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009a18:	4b2c      	ldr	r3, [pc, #176]	; (8009acc <HAL_UART_MspInit+0x2a8>)
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009a1e:	4b2b      	ldr	r3, [pc, #172]	; (8009acc <HAL_UART_MspInit+0x2a8>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8009a24:	4829      	ldr	r0, [pc, #164]	; (8009acc <HAL_UART_MspInit+0x2a8>)
 8009a26:	f000 fc7f 	bl	800a328 <HAL_DMA_Init>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d001      	beq.n	8009a34 <HAL_UART_MspInit+0x210>
      Error_Handler();
 8009a30:	f7ff fca6 	bl	8009380 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a25      	ldr	r2, [pc, #148]	; (8009acc <HAL_UART_MspInit+0x2a8>)
 8009a38:	66da      	str	r2, [r3, #108]	; 0x6c
 8009a3a:	4a24      	ldr	r2, [pc, #144]	; (8009acc <HAL_UART_MspInit+0x2a8>)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8009a40:	4b24      	ldr	r3, [pc, #144]	; (8009ad4 <HAL_UART_MspInit+0x2b0>)
 8009a42:	4a25      	ldr	r2, [pc, #148]	; (8009ad8 <HAL_UART_MspInit+0x2b4>)
 8009a44:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8009a46:	4b23      	ldr	r3, [pc, #140]	; (8009ad4 <HAL_UART_MspInit+0x2b0>)
 8009a48:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8009a4c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009a4e:	4b21      	ldr	r3, [pc, #132]	; (8009ad4 <HAL_UART_MspInit+0x2b0>)
 8009a50:	2240      	movs	r2, #64	; 0x40
 8009a52:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009a54:	4b1f      	ldr	r3, [pc, #124]	; (8009ad4 <HAL_UART_MspInit+0x2b0>)
 8009a56:	2200      	movs	r2, #0
 8009a58:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009a5a:	4b1e      	ldr	r3, [pc, #120]	; (8009ad4 <HAL_UART_MspInit+0x2b0>)
 8009a5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a60:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009a62:	4b1c      	ldr	r3, [pc, #112]	; (8009ad4 <HAL_UART_MspInit+0x2b0>)
 8009a64:	2200      	movs	r2, #0
 8009a66:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009a68:	4b1a      	ldr	r3, [pc, #104]	; (8009ad4 <HAL_UART_MspInit+0x2b0>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 8009a6e:	4b19      	ldr	r3, [pc, #100]	; (8009ad4 <HAL_UART_MspInit+0x2b0>)
 8009a70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a74:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009a76:	4b17      	ldr	r3, [pc, #92]	; (8009ad4 <HAL_UART_MspInit+0x2b0>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009a7c:	4b15      	ldr	r3, [pc, #84]	; (8009ad4 <HAL_UART_MspInit+0x2b0>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8009a82:	4814      	ldr	r0, [pc, #80]	; (8009ad4 <HAL_UART_MspInit+0x2b0>)
 8009a84:	f000 fc50 	bl	800a328 <HAL_DMA_Init>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d001      	beq.n	8009a92 <HAL_UART_MspInit+0x26e>
      Error_Handler();
 8009a8e:	f7ff fc77 	bl	8009380 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a0f      	ldr	r2, [pc, #60]	; (8009ad4 <HAL_UART_MspInit+0x2b0>)
 8009a96:	669a      	str	r2, [r3, #104]	; 0x68
 8009a98:	4a0e      	ldr	r2, [pc, #56]	; (8009ad4 <HAL_UART_MspInit+0x2b0>)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009a9e:	bf00      	nop
 8009aa0:	3738      	adds	r7, #56	; 0x38
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	40011000 	.word	0x40011000
 8009aac:	40023800 	.word	0x40023800
 8009ab0:	40020400 	.word	0x40020400
 8009ab4:	2000d2dc 	.word	0x2000d2dc
 8009ab8:	40026440 	.word	0x40026440
 8009abc:	40004800 	.word	0x40004800
 8009ac0:	40020c00 	.word	0x40020c00
 8009ac4:	40011400 	.word	0x40011400
 8009ac8:	40020800 	.word	0x40020800
 8009acc:	2000cc74 	.word	0x2000cc74
 8009ad0:	40026428 	.word	0x40026428
 8009ad4:	2000d27c 	.word	0x2000d27c
 8009ad8:	400264a0 	.word	0x400264a0

08009adc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b08a      	sub	sp, #40	; 0x28
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ae4:	f107 0314 	add.w	r3, r7, #20
 8009ae8:	2200      	movs	r2, #0
 8009aea:	601a      	str	r2, [r3, #0]
 8009aec:	605a      	str	r2, [r3, #4]
 8009aee:	609a      	str	r2, [r3, #8]
 8009af0:	60da      	str	r2, [r3, #12]
 8009af2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009afc:	d141      	bne.n	8009b82 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009afe:	4b23      	ldr	r3, [pc, #140]	; (8009b8c <HAL_PCD_MspInit+0xb0>)
 8009b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b02:	4a22      	ldr	r2, [pc, #136]	; (8009b8c <HAL_PCD_MspInit+0xb0>)
 8009b04:	f043 0301 	orr.w	r3, r3, #1
 8009b08:	6313      	str	r3, [r2, #48]	; 0x30
 8009b0a:	4b20      	ldr	r3, [pc, #128]	; (8009b8c <HAL_PCD_MspInit+0xb0>)
 8009b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	613b      	str	r3, [r7, #16]
 8009b14:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8009b16:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8009b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b20:	2300      	movs	r3, #0
 8009b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b24:	2303      	movs	r3, #3
 8009b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009b28:	230a      	movs	r3, #10
 8009b2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b2c:	f107 0314 	add.w	r3, r7, #20
 8009b30:	4619      	mov	r1, r3
 8009b32:	4817      	ldr	r0, [pc, #92]	; (8009b90 <HAL_PCD_MspInit+0xb4>)
 8009b34:	f002 f9a2 	bl	800be7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8009b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b42:	2300      	movs	r3, #0
 8009b44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009b46:	f107 0314 	add.w	r3, r7, #20
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	4810      	ldr	r0, [pc, #64]	; (8009b90 <HAL_PCD_MspInit+0xb4>)
 8009b4e:	f002 f995 	bl	800be7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b52:	4b0e      	ldr	r3, [pc, #56]	; (8009b8c <HAL_PCD_MspInit+0xb0>)
 8009b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b56:	4a0d      	ldr	r2, [pc, #52]	; (8009b8c <HAL_PCD_MspInit+0xb0>)
 8009b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b5c:	6353      	str	r3, [r2, #52]	; 0x34
 8009b5e:	4b0b      	ldr	r3, [pc, #44]	; (8009b8c <HAL_PCD_MspInit+0xb0>)
 8009b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b66:	60fb      	str	r3, [r7, #12]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	4b08      	ldr	r3, [pc, #32]	; (8009b8c <HAL_PCD_MspInit+0xb0>)
 8009b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b6e:	4a07      	ldr	r2, [pc, #28]	; (8009b8c <HAL_PCD_MspInit+0xb0>)
 8009b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b74:	6453      	str	r3, [r2, #68]	; 0x44
 8009b76:	4b05      	ldr	r3, [pc, #20]	; (8009b8c <HAL_PCD_MspInit+0xb0>)
 8009b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b7e:	60bb      	str	r3, [r7, #8]
 8009b80:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8009b82:	bf00      	nop
 8009b84:	3728      	adds	r7, #40	; 0x28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	40023800 	.word	0x40023800
 8009b90:	40020000 	.word	0x40020000

08009b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009b94:	b480      	push	{r7}
 8009b96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009b98:	bf00      	nop
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009ba2:	b480      	push	{r7}
 8009ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009ba6:	e7fe      	b.n	8009ba6 <HardFault_Handler+0x4>

08009ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009bac:	e7fe      	b.n	8009bac <MemManage_Handler+0x4>

08009bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009bae:	b480      	push	{r7}
 8009bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009bb2:	e7fe      	b.n	8009bb2 <BusFault_Handler+0x4>

08009bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009bb8:	e7fe      	b.n	8009bb8 <UsageFault_Handler+0x4>

08009bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009bbe:	bf00      	nop
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  HAL_IncTick();
 8009bcc:	f000 f98c 	bl	8009ee8 <HAL_IncTick>
	#if (INCLUDE_xTaskGetSchedulerState == 1 )
	  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8009bd0:	f008 fdb6 	bl	8012740 <xTaskGetSchedulerState>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d001      	beq.n	8009bde <SysTick_Handler+0x16>
	  {
	#endif /* INCLUDE_xTaskGetSchedulerState */
	  xPortSysTickHandler();
 8009bda:	f009 f985 	bl	8012ee8 <xPortSysTickHandler>

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009bde:	bf00      	nop
 8009be0:	bd80      	pop	{r7, pc}
	...

08009be4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8009be8:	4802      	ldr	r0, [pc, #8]	; (8009bf4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8009bea:	f003 feb6 	bl	800d95a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009bee:	bf00      	nop
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	2000cdb8 	.word	0x2000cdb8

08009bf8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009bfc:	4804      	ldr	r0, [pc, #16]	; (8009c10 <TIM3_IRQHandler+0x18>)
 8009bfe:	f003 feac 	bl	800d95a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8009c02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009c06:	4803      	ldr	r0, [pc, #12]	; (8009c14 <TIM3_IRQHandler+0x1c>)
 8009c08:	f002 fafb 	bl	800c202 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 8009c0c:	bf00      	nop
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	2000d23c 	.word	0x2000d23c
 8009c14:	40020400 	.word	0x40020400

08009c18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009c1c:	4802      	ldr	r0, [pc, #8]	; (8009c28 <USART1_IRQHandler+0x10>)
 8009c1e:	f004 fe23 	bl	800e868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009c22:	bf00      	nop
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	2000d33c 	.word	0x2000d33c

08009c2c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8009c30:	4802      	ldr	r0, [pc, #8]	; (8009c3c <TIM5_IRQHandler+0x10>)
 8009c32:	f003 fe92 	bl	800d95a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8009c36:	bf00      	nop
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	2000d1fc 	.word	0x2000d1fc

08009c40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8009c44:	4803      	ldr	r0, [pc, #12]	; (8009c54 <TIM6_DAC_IRQHandler+0x14>)
 8009c46:	f000 fac4 	bl	800a1d2 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8009c4a:	4803      	ldr	r0, [pc, #12]	; (8009c58 <TIM6_DAC_IRQHandler+0x18>)
 8009c4c:	f003 fe85 	bl	800d95a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8009c50:	bf00      	nop
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	2000d3bc 	.word	0x2000d3bc
 8009c58:	2000d3d4 	.word	0x2000d3d4

08009c5c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8009c60:	4802      	ldr	r0, [pc, #8]	; (8009c6c <TIM7_IRQHandler+0x10>)
 8009c62:	f003 fe7a 	bl	800d95a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8009c66:	bf00      	nop
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	2000d494 	.word	0x2000d494

08009c70 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8009c74:	4802      	ldr	r0, [pc, #8]	; (8009c80 <DMA2_Stream1_IRQHandler+0x10>)
 8009c76:	f000 fcf7 	bl	800a668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8009c7a:	bf00      	nop
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	2000cc74 	.word	0x2000cc74

08009c84 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8009c88:	4802      	ldr	r0, [pc, #8]	; (8009c94 <DMA2_Stream2_IRQHandler+0x10>)
 8009c8a:	f000 fced 	bl	800a668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8009c8e:	bf00      	nop
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	2000d2dc 	.word	0x2000d2dc

08009c98 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8009c9c:	4802      	ldr	r0, [pc, #8]	; (8009ca8 <ETH_IRQHandler+0x10>)
 8009c9e:	f001 fb3b 	bl	800b318 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8009ca2:	bf00      	nop
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	2000edfc 	.word	0x2000edfc

08009cac <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8009cb0:	4802      	ldr	r0, [pc, #8]	; (8009cbc <DMA2_Stream6_IRQHandler+0x10>)
 8009cb2:	f000 fcd9 	bl	800a668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8009cb6:	bf00      	nop
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	2000d27c 	.word	0x2000d27c

08009cc0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b086      	sub	sp, #24
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009ccc:	2300      	movs	r3, #0
 8009cce:	617b      	str	r3, [r7, #20]
 8009cd0:	e00a      	b.n	8009ce8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009cd2:	f3af 8000 	nop.w
 8009cd6:	4601      	mov	r1, r0
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	60ba      	str	r2, [r7, #8]
 8009cde:	b2ca      	uxtb	r2, r1
 8009ce0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	617b      	str	r3, [r7, #20]
 8009ce8:	697a      	ldr	r2, [r7, #20]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	dbf0      	blt.n	8009cd2 <_read+0x12>
	}

return len;
 8009cf0:	687b      	ldr	r3, [r7, #4]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3718      	adds	r7, #24
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b086      	sub	sp, #24
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	60f8      	str	r0, [r7, #12]
 8009d02:	60b9      	str	r1, [r7, #8]
 8009d04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d06:	2300      	movs	r3, #0
 8009d08:	617b      	str	r3, [r7, #20]
 8009d0a:	e009      	b.n	8009d20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	1c5a      	adds	r2, r3, #1
 8009d10:	60ba      	str	r2, [r7, #8]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	617b      	str	r3, [r7, #20]
 8009d20:	697a      	ldr	r2, [r7, #20]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	dbf1      	blt.n	8009d0c <_write+0x12>
	}
	return len;
 8009d28:	687b      	ldr	r3, [r7, #4]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3718      	adds	r7, #24
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <_close>:

int _close(int file)
{
 8009d32:	b480      	push	{r7}
 8009d34:	b083      	sub	sp, #12
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
	return -1;
 8009d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	370c      	adds	r7, #12
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr

08009d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b083      	sub	sp, #12
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009d5a:	605a      	str	r2, [r3, #4]
	return 0;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr

08009d6a <_isatty>:

int _isatty(int file)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b083      	sub	sp, #12
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
	return 1;
 8009d72:	2301      	movs	r3, #1
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
	return 0;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
	...

08009d9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009da4:	4b11      	ldr	r3, [pc, #68]	; (8009dec <_sbrk+0x50>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d102      	bne.n	8009db2 <_sbrk+0x16>
		heap_end = &end;
 8009dac:	4b0f      	ldr	r3, [pc, #60]	; (8009dec <_sbrk+0x50>)
 8009dae:	4a10      	ldr	r2, [pc, #64]	; (8009df0 <_sbrk+0x54>)
 8009db0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009db2:	4b0e      	ldr	r3, [pc, #56]	; (8009dec <_sbrk+0x50>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009db8:	4b0c      	ldr	r3, [pc, #48]	; (8009dec <_sbrk+0x50>)
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	466a      	mov	r2, sp
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d905      	bls.n	8009dd2 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8009dc6:	4b0b      	ldr	r3, [pc, #44]	; (8009df4 <_sbrk+0x58>)
 8009dc8:	220c      	movs	r2, #12
 8009dca:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8009dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dd0:	e006      	b.n	8009de0 <_sbrk+0x44>
	}

	heap_end += incr;
 8009dd2:	4b06      	ldr	r3, [pc, #24]	; (8009dec <_sbrk+0x50>)
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4413      	add	r3, r2
 8009dda:	4a04      	ldr	r2, [pc, #16]	; (8009dec <_sbrk+0x50>)
 8009ddc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009dde:	68fb      	ldr	r3, [r7, #12]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	2000033c 	.word	0x2000033c
 8009df0:	20013d50 	.word	0x20013d50
 8009df4:	20013d48 	.word	0x20013d48

08009df8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009dfc:	4b06      	ldr	r3, [pc, #24]	; (8009e18 <SystemInit+0x20>)
 8009dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e02:	4a05      	ldr	r2, [pc, #20]	; (8009e18 <SystemInit+0x20>)
 8009e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  //SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 8009e0c:	bf00      	nop
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	e000ed00 	.word	0xe000ed00

08009e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009e54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009e20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009e22:	e003      	b.n	8009e2c <LoopCopyDataInit>

08009e24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009e24:	4b0c      	ldr	r3, [pc, #48]	; (8009e58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009e26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009e28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009e2a:	3104      	adds	r1, #4

08009e2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009e2c:	480b      	ldr	r0, [pc, #44]	; (8009e5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009e2e:	4b0c      	ldr	r3, [pc, #48]	; (8009e60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009e30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009e32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009e34:	d3f6      	bcc.n	8009e24 <CopyDataInit>
  ldr  r2, =_sbss
 8009e36:	4a0b      	ldr	r2, [pc, #44]	; (8009e64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009e38:	e002      	b.n	8009e40 <LoopFillZerobss>

08009e3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009e3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009e3c:	f842 3b04 	str.w	r3, [r2], #4

08009e40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009e40:	4b09      	ldr	r3, [pc, #36]	; (8009e68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009e42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009e44:	d3f9      	bcc.n	8009e3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009e46:	f7ff ffd7 	bl	8009df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009e4a:	f015 f855 	bl	801eef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009e4e:	f7fe fd21 	bl	8008894 <main>
  bx  lr    
 8009e52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009e54:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8009e58:	080338c4 	.word	0x080338c4
  ldr  r0, =_sdata
 8009e5c:	20000040 	.word	0x20000040
  ldr  r3, =_edata
 8009e60:	200000c0 	.word	0x200000c0
  ldr  r2, =_sbss
 8009e64:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 8009e68:	20013d50 	.word	0x20013d50

08009e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009e6c:	e7fe      	b.n	8009e6c <ADC_IRQHandler>

08009e6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009e72:	2003      	movs	r0, #3
 8009e74:	f000 f94a 	bl	800a10c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009e78:	200f      	movs	r0, #15
 8009e7a:	f000 f805 	bl	8009e88 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8009e7e:	f7ff fb2b 	bl	80094d8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009e90:	4b12      	ldr	r3, [pc, #72]	; (8009edc <HAL_InitTick+0x54>)
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	4b12      	ldr	r3, [pc, #72]	; (8009ee0 <HAL_InitTick+0x58>)
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	4619      	mov	r1, r3
 8009e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 f965 	bl	800a176 <HAL_SYSTICK_Config>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d001      	beq.n	8009eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e00e      	b.n	8009ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b0f      	cmp	r3, #15
 8009eba:	d80a      	bhi.n	8009ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	6879      	ldr	r1, [r7, #4]
 8009ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ec4:	f000 f92d 	bl	800a122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009ec8:	4a06      	ldr	r2, [pc, #24]	; (8009ee4 <HAL_InitTick+0x5c>)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	e000      	b.n	8009ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	20000040 	.word	0x20000040
 8009ee0:	20000048 	.word	0x20000048
 8009ee4:	20000044 	.word	0x20000044

08009ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009eec:	4b06      	ldr	r3, [pc, #24]	; (8009f08 <HAL_IncTick+0x20>)
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	4b06      	ldr	r3, [pc, #24]	; (8009f0c <HAL_IncTick+0x24>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	4a04      	ldr	r2, [pc, #16]	; (8009f0c <HAL_IncTick+0x24>)
 8009efa:	6013      	str	r3, [r2, #0]
}
 8009efc:	bf00      	nop
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	20000048 	.word	0x20000048
 8009f0c:	2000d4d4 	.word	0x2000d4d4

08009f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009f10:	b480      	push	{r7}
 8009f12:	af00      	add	r7, sp, #0
  return uwTick;
 8009f14:	4b03      	ldr	r3, [pc, #12]	; (8009f24 <HAL_GetTick+0x14>)
 8009f16:	681b      	ldr	r3, [r3, #0]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	2000d4d4 	.word	0x2000d4d4

08009f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009f30:	f7ff ffee 	bl	8009f10 <HAL_GetTick>
 8009f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f40:	d005      	beq.n	8009f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009f42:	4b09      	ldr	r3, [pc, #36]	; (8009f68 <HAL_Delay+0x40>)
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	461a      	mov	r2, r3
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009f4e:	bf00      	nop
 8009f50:	f7ff ffde 	bl	8009f10 <HAL_GetTick>
 8009f54:	4602      	mov	r2, r0
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	1ad3      	subs	r3, r2, r3
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d8f7      	bhi.n	8009f50 <HAL_Delay+0x28>
  {
  }
}
 8009f60:	bf00      	nop
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	20000048 	.word	0x20000048

08009f6c <__NVIC_SetPriorityGrouping>:
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b085      	sub	sp, #20
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f003 0307 	and.w	r3, r3, #7
 8009f7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009f7c:	4b0b      	ldr	r3, [pc, #44]	; (8009fac <__NVIC_SetPriorityGrouping+0x40>)
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009f88:	4013      	ands	r3, r2
 8009f8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009f94:	4b06      	ldr	r3, [pc, #24]	; (8009fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009f9a:	4a04      	ldr	r2, [pc, #16]	; (8009fac <__NVIC_SetPriorityGrouping+0x40>)
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	60d3      	str	r3, [r2, #12]
}
 8009fa0:	bf00      	nop
 8009fa2:	3714      	adds	r7, #20
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	e000ed00 	.word	0xe000ed00
 8009fb0:	05fa0000 	.word	0x05fa0000

08009fb4 <__NVIC_GetPriorityGrouping>:
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009fb8:	4b04      	ldr	r3, [pc, #16]	; (8009fcc <__NVIC_GetPriorityGrouping+0x18>)
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	0a1b      	lsrs	r3, r3, #8
 8009fbe:	f003 0307 	and.w	r3, r3, #7
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr
 8009fcc:	e000ed00 	.word	0xe000ed00

08009fd0 <__NVIC_EnableIRQ>:
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	db0b      	blt.n	8009ffa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009fe2:	79fb      	ldrb	r3, [r7, #7]
 8009fe4:	f003 021f 	and.w	r2, r3, #31
 8009fe8:	4907      	ldr	r1, [pc, #28]	; (800a008 <__NVIC_EnableIRQ+0x38>)
 8009fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fee:	095b      	lsrs	r3, r3, #5
 8009ff0:	2001      	movs	r0, #1
 8009ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8009ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009ffa:	bf00      	nop
 8009ffc:	370c      	adds	r7, #12
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	e000e100 	.word	0xe000e100

0800a00c <__NVIC_SetPriority>:
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	4603      	mov	r3, r0
 800a014:	6039      	str	r1, [r7, #0]
 800a016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	db0a      	blt.n	800a036 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	b2da      	uxtb	r2, r3
 800a024:	490c      	ldr	r1, [pc, #48]	; (800a058 <__NVIC_SetPriority+0x4c>)
 800a026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a02a:	0112      	lsls	r2, r2, #4
 800a02c:	b2d2      	uxtb	r2, r2
 800a02e:	440b      	add	r3, r1
 800a030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a034:	e00a      	b.n	800a04c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	4908      	ldr	r1, [pc, #32]	; (800a05c <__NVIC_SetPriority+0x50>)
 800a03c:	79fb      	ldrb	r3, [r7, #7]
 800a03e:	f003 030f 	and.w	r3, r3, #15
 800a042:	3b04      	subs	r3, #4
 800a044:	0112      	lsls	r2, r2, #4
 800a046:	b2d2      	uxtb	r2, r2
 800a048:	440b      	add	r3, r1
 800a04a:	761a      	strb	r2, [r3, #24]
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	e000e100 	.word	0xe000e100
 800a05c:	e000ed00 	.word	0xe000ed00

0800a060 <NVIC_EncodePriority>:
{
 800a060:	b480      	push	{r7}
 800a062:	b089      	sub	sp, #36	; 0x24
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f003 0307 	and.w	r3, r3, #7
 800a072:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	f1c3 0307 	rsb	r3, r3, #7
 800a07a:	2b04      	cmp	r3, #4
 800a07c:	bf28      	it	cs
 800a07e:	2304      	movcs	r3, #4
 800a080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	3304      	adds	r3, #4
 800a086:	2b06      	cmp	r3, #6
 800a088:	d902      	bls.n	800a090 <NVIC_EncodePriority+0x30>
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	3b03      	subs	r3, #3
 800a08e:	e000      	b.n	800a092 <NVIC_EncodePriority+0x32>
 800a090:	2300      	movs	r3, #0
 800a092:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	fa02 f303 	lsl.w	r3, r2, r3
 800a09e:	43da      	mvns	r2, r3
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	401a      	ands	r2, r3
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a0a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a0b2:	43d9      	mvns	r1, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a0b8:	4313      	orrs	r3, r2
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3724      	adds	r7, #36	; 0x24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
	...

0800a0c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a0d8:	d301      	bcc.n	800a0de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e00f      	b.n	800a0fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a0de:	4a0a      	ldr	r2, [pc, #40]	; (800a108 <SysTick_Config+0x40>)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a0e6:	210f      	movs	r1, #15
 800a0e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0ec:	f7ff ff8e 	bl	800a00c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a0f0:	4b05      	ldr	r3, [pc, #20]	; (800a108 <SysTick_Config+0x40>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a0f6:	4b04      	ldr	r3, [pc, #16]	; (800a108 <SysTick_Config+0x40>)
 800a0f8:	2207      	movs	r2, #7
 800a0fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	e000e010 	.word	0xe000e010

0800a10c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7ff ff29 	bl	8009f6c <__NVIC_SetPriorityGrouping>
}
 800a11a:	bf00      	nop
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a122:	b580      	push	{r7, lr}
 800a124:	b086      	sub	sp, #24
 800a126:	af00      	add	r7, sp, #0
 800a128:	4603      	mov	r3, r0
 800a12a:	60b9      	str	r1, [r7, #8]
 800a12c:	607a      	str	r2, [r7, #4]
 800a12e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a130:	2300      	movs	r3, #0
 800a132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a134:	f7ff ff3e 	bl	8009fb4 <__NVIC_GetPriorityGrouping>
 800a138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	68b9      	ldr	r1, [r7, #8]
 800a13e:	6978      	ldr	r0, [r7, #20]
 800a140:	f7ff ff8e 	bl	800a060 <NVIC_EncodePriority>
 800a144:	4602      	mov	r2, r0
 800a146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a14a:	4611      	mov	r1, r2
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7ff ff5d 	bl	800a00c <__NVIC_SetPriority>
}
 800a152:	bf00      	nop
 800a154:	3718      	adds	r7, #24
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b082      	sub	sp, #8
 800a15e:	af00      	add	r7, sp, #0
 800a160:	4603      	mov	r3, r0
 800a162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a168:	4618      	mov	r0, r3
 800a16a:	f7ff ff31 	bl	8009fd0 <__NVIC_EnableIRQ>
}
 800a16e:	bf00      	nop
 800a170:	3708      	adds	r7, #8
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b082      	sub	sp, #8
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7ff ffa2 	bl	800a0c8 <SysTick_Config>
 800a184:	4603      	mov	r3, r0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800a18e:	b580      	push	{r7, lr}
 800a190:	b082      	sub	sp, #8
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e014      	b.n	800a1ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	791b      	ldrb	r3, [r3, #4]
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d105      	bne.n	800a1b6 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7ff f9d1 	bl	8009558 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2202      	movs	r2, #2
 800a1ba:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b082      	sub	sp, #8
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1e8:	d118      	bne.n	800a21c <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2204      	movs	r2, #4
 800a1ee:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	f043 0201 	orr.w	r2, r3, #1
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a204:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a214:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 f825 	bl	800a266 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a222:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a22a:	d118      	bne.n	800a25e <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2204      	movs	r2, #4
 800a230:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	f043 0202 	orr.w	r2, r3, #2
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a246:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a256:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f85b 	bl	800a314 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 800a25e:	bf00      	nop
 800a260:	3708      	adds	r7, #8
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a266:	b480      	push	{r7}
 800a268:	b083      	sub	sp, #12
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800a26e:	bf00      	nop
 800a270:	370c      	adds	r7, #12
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr

0800a27a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800a27a:	b480      	push	{r7}
 800a27c:	b087      	sub	sp, #28
 800a27e:	af00      	add	r7, sp, #0
 800a280:	60f8      	str	r0, [r7, #12]
 800a282:	60b9      	str	r1, [r7, #8]
 800a284:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800a286:	2300      	movs	r3, #0
 800a288:	617b      	str	r3, [r7, #20]
 800a28a:	2300      	movs	r3, #0
 800a28c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	795b      	ldrb	r3, [r3, #5]
 800a292:	2b01      	cmp	r3, #1
 800a294:	d101      	bne.n	800a29a <HAL_DAC_ConfigChannel+0x20>
 800a296:	2302      	movs	r3, #2
 800a298:	e036      	b.n	800a308 <HAL_DAC_ConfigChannel+0x8e>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2201      	movs	r2, #1
 800a29e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800a2ae:	f640 72fe 	movw	r2, #4094	; 0xffe
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b8:	43db      	mvns	r3, r3
 800a2ba:	697a      	ldr	r2, [r7, #20]
 800a2bc:	4013      	ands	r3, r2
 800a2be:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800a2cc:	693a      	ldr	r2, [r7, #16]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d4:	697a      	ldr	r2, [r7, #20]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	6819      	ldr	r1, [r3, #0]
 800a2e8:	22c0      	movs	r2, #192	; 0xc0
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f0:	43da      	mvns	r2, r3
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	400a      	ands	r2, r1
 800a2f8:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	371c      	adds	r7, #28
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a330:	2300      	movs	r3, #0
 800a332:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a334:	f7ff fdec 	bl	8009f10 <HAL_GetTick>
 800a338:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d101      	bne.n	800a344 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	e099      	b.n	800a478 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2202      	movs	r2, #2
 800a350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f022 0201 	bic.w	r2, r2, #1
 800a362:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a364:	e00f      	b.n	800a386 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a366:	f7ff fdd3 	bl	8009f10 <HAL_GetTick>
 800a36a:	4602      	mov	r2, r0
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	1ad3      	subs	r3, r2, r3
 800a370:	2b05      	cmp	r3, #5
 800a372:	d908      	bls.n	800a386 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2220      	movs	r2, #32
 800a378:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2203      	movs	r2, #3
 800a37e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a382:	2303      	movs	r3, #3
 800a384:	e078      	b.n	800a478 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 0301 	and.w	r3, r3, #1
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1e8      	bne.n	800a366 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	4b38      	ldr	r3, [pc, #224]	; (800a480 <HAL_DMA_Init+0x158>)
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685a      	ldr	r2, [r3, #4]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a1b      	ldr	r3, [r3, #32]
 800a3d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3d2:	697a      	ldr	r2, [r7, #20]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	2b04      	cmp	r3, #4
 800a3de:	d107      	bne.n	800a3f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	697a      	ldr	r2, [r7, #20]
 800a3f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	f023 0307 	bic.w	r3, r3, #7
 800a406:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	4313      	orrs	r3, r2
 800a410:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a416:	2b04      	cmp	r3, #4
 800a418:	d117      	bne.n	800a44a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	4313      	orrs	r3, r2
 800a422:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00e      	beq.n	800a44a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 fb15 	bl	800aa5c <DMA_CheckFifoParam>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d008      	beq.n	800a44a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2240      	movs	r2, #64	; 0x40
 800a43c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2201      	movs	r2, #1
 800a442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a446:	2301      	movs	r3, #1
 800a448:	e016      	b.n	800a478 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	697a      	ldr	r2, [r7, #20]
 800a450:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 facc 	bl	800a9f0 <DMA_CalcBaseAndBitshift>
 800a458:	4603      	mov	r3, r0
 800a45a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a460:	223f      	movs	r2, #63	; 0x3f
 800a462:	409a      	lsls	r2, r3
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	e010803f 	.word	0xe010803f

0800a484 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
 800a490:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a49a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d101      	bne.n	800a4aa <HAL_DMA_Start_IT+0x26>
 800a4a6:	2302      	movs	r3, #2
 800a4a8:	e048      	b.n	800a53c <HAL_DMA_Start_IT+0xb8>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d137      	bne.n	800a52e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2202      	movs	r2, #2
 800a4c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	68b9      	ldr	r1, [r7, #8]
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f000 fa5e 	bl	800a994 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4dc:	223f      	movs	r2, #63	; 0x3f
 800a4de:	409a      	lsls	r2, r3
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f042 0216 	orr.w	r2, r2, #22
 800a4f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	695a      	ldr	r2, [r3, #20]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a502:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d007      	beq.n	800a51c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f042 0208 	orr.w	r2, r2, #8
 800a51a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f042 0201 	orr.w	r2, r2, #1
 800a52a:	601a      	str	r2, [r3, #0]
 800a52c:	e005      	b.n	800a53a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a536:	2302      	movs	r3, #2
 800a538:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a550:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a552:	f7ff fcdd 	bl	8009f10 <HAL_GetTick>
 800a556:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	2b02      	cmp	r3, #2
 800a562:	d008      	beq.n	800a576 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2280      	movs	r2, #128	; 0x80
 800a568:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	e052      	b.n	800a61c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f022 0216 	bic.w	r2, r2, #22
 800a584:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	695a      	ldr	r2, [r3, #20]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a594:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d103      	bne.n	800a5a6 <HAL_DMA_Abort+0x62>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d007      	beq.n	800a5b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f022 0208 	bic.w	r2, r2, #8
 800a5b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f022 0201 	bic.w	r2, r2, #1
 800a5c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a5c6:	e013      	b.n	800a5f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a5c8:	f7ff fca2 	bl	8009f10 <HAL_GetTick>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	1ad3      	subs	r3, r2, r3
 800a5d2:	2b05      	cmp	r3, #5
 800a5d4:	d90c      	bls.n	800a5f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2220      	movs	r2, #32
 800a5da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2203      	movs	r2, #3
 800a5e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	e015      	b.n	800a61c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1e4      	bne.n	800a5c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a602:	223f      	movs	r2, #63	; 0x3f
 800a604:	409a      	lsls	r2, r3
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2201      	movs	r2, #1
 800a616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a632:	b2db      	uxtb	r3, r3
 800a634:	2b02      	cmp	r3, #2
 800a636:	d004      	beq.n	800a642 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2280      	movs	r2, #128	; 0x80
 800a63c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e00c      	b.n	800a65c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2205      	movs	r2, #5
 800a646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f022 0201 	bic.w	r2, r2, #1
 800a658:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a65a:	2300      	movs	r3, #0
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800a670:	2300      	movs	r3, #0
 800a672:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800a674:	4b92      	ldr	r3, [pc, #584]	; (800a8c0 <HAL_DMA_IRQHandler+0x258>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a92      	ldr	r2, [pc, #584]	; (800a8c4 <HAL_DMA_IRQHandler+0x25c>)
 800a67a:	fba2 2303 	umull	r2, r3, r2, r3
 800a67e:	0a9b      	lsrs	r3, r3, #10
 800a680:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a686:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a692:	2208      	movs	r2, #8
 800a694:	409a      	lsls	r2, r3
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	4013      	ands	r3, r2
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d01a      	beq.n	800a6d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 0304 	and.w	r3, r3, #4
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d013      	beq.n	800a6d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f022 0204 	bic.w	r2, r2, #4
 800a6ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6c0:	2208      	movs	r2, #8
 800a6c2:	409a      	lsls	r2, r3
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6cc:	f043 0201 	orr.w	r2, r3, #1
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6d8:	2201      	movs	r2, #1
 800a6da:	409a      	lsls	r2, r3
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	4013      	ands	r3, r2
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d012      	beq.n	800a70a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00b      	beq.n	800a70a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	409a      	lsls	r2, r3
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a702:	f043 0202 	orr.w	r2, r3, #2
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a70e:	2204      	movs	r2, #4
 800a710:	409a      	lsls	r2, r3
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	4013      	ands	r3, r2
 800a716:	2b00      	cmp	r3, #0
 800a718:	d012      	beq.n	800a740 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 0302 	and.w	r3, r3, #2
 800a724:	2b00      	cmp	r3, #0
 800a726:	d00b      	beq.n	800a740 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a72c:	2204      	movs	r2, #4
 800a72e:	409a      	lsls	r2, r3
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a738:	f043 0204 	orr.w	r2, r3, #4
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a744:	2210      	movs	r2, #16
 800a746:	409a      	lsls	r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	4013      	ands	r3, r2
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d043      	beq.n	800a7d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f003 0308 	and.w	r3, r3, #8
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d03c      	beq.n	800a7d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a762:	2210      	movs	r2, #16
 800a764:	409a      	lsls	r2, r3
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a774:	2b00      	cmp	r3, #0
 800a776:	d018      	beq.n	800a7aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a782:	2b00      	cmp	r3, #0
 800a784:	d108      	bne.n	800a798 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d024      	beq.n	800a7d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	4798      	blx	r3
 800a796:	e01f      	b.n	800a7d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d01b      	beq.n	800a7d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	4798      	blx	r3
 800a7a8:	e016      	b.n	800a7d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d107      	bne.n	800a7c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f022 0208 	bic.w	r2, r2, #8
 800a7c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d003      	beq.n	800a7d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7dc:	2220      	movs	r2, #32
 800a7de:	409a      	lsls	r2, r3
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	4013      	ands	r3, r2
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f000 808e 	beq.w	800a906 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 0310 	and.w	r3, r3, #16
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f000 8086 	beq.w	800a906 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7fe:	2220      	movs	r2, #32
 800a800:	409a      	lsls	r2, r3
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	2b05      	cmp	r3, #5
 800a810:	d136      	bne.n	800a880 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f022 0216 	bic.w	r2, r2, #22
 800a820:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	695a      	ldr	r2, [r3, #20]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a830:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a836:	2b00      	cmp	r3, #0
 800a838:	d103      	bne.n	800a842 <HAL_DMA_IRQHandler+0x1da>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d007      	beq.n	800a852 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f022 0208 	bic.w	r2, r2, #8
 800a850:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a856:	223f      	movs	r2, #63	; 0x3f
 800a858:	409a      	lsls	r2, r3
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a872:	2b00      	cmp	r3, #0
 800a874:	d07d      	beq.n	800a972 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	4798      	blx	r3
        }
        return;
 800a87e:	e078      	b.n	800a972 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d01c      	beq.n	800a8c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d108      	bne.n	800a8ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d030      	beq.n	800a906 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	4798      	blx	r3
 800a8ac:	e02b      	b.n	800a906 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d027      	beq.n	800a906 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	4798      	blx	r3
 800a8be:	e022      	b.n	800a906 <HAL_DMA_IRQHandler+0x29e>
 800a8c0:	20000040 	.word	0x20000040
 800a8c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d10f      	bne.n	800a8f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f022 0210 	bic.w	r2, r2, #16
 800a8e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d003      	beq.n	800a906 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d032      	beq.n	800a974 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a912:	f003 0301 	and.w	r3, r3, #1
 800a916:	2b00      	cmp	r3, #0
 800a918:	d022      	beq.n	800a960 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2205      	movs	r2, #5
 800a91e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f022 0201 	bic.w	r2, r2, #1
 800a930:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	3301      	adds	r3, #1
 800a936:	60bb      	str	r3, [r7, #8]
 800a938:	697a      	ldr	r2, [r7, #20]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d307      	bcc.n	800a94e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f003 0301 	and.w	r3, r3, #1
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1f2      	bne.n	800a932 <HAL_DMA_IRQHandler+0x2ca>
 800a94c:	e000      	b.n	800a950 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a94e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a964:	2b00      	cmp	r3, #0
 800a966:	d005      	beq.n	800a974 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	4798      	blx	r3
 800a970:	e000      	b.n	800a974 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a972:	bf00      	nop
    }
  }
}
 800a974:	3718      	adds	r7, #24
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop

0800a97c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a988:	4618      	mov	r0, r3
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
 800a9a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a9b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	2b40      	cmp	r3, #64	; 0x40
 800a9c0:	d108      	bne.n	800a9d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a9d2:	e007      	b.n	800a9e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	60da      	str	r2, [r3, #12]
}
 800a9e4:	bf00      	nop
 800a9e6:	3714      	adds	r7, #20
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	3b10      	subs	r3, #16
 800aa00:	4a13      	ldr	r2, [pc, #76]	; (800aa50 <DMA_CalcBaseAndBitshift+0x60>)
 800aa02:	fba2 2303 	umull	r2, r3, r2, r3
 800aa06:	091b      	lsrs	r3, r3, #4
 800aa08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800aa0a:	4a12      	ldr	r2, [pc, #72]	; (800aa54 <DMA_CalcBaseAndBitshift+0x64>)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	4413      	add	r3, r2
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	461a      	mov	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2b03      	cmp	r3, #3
 800aa1c:	d908      	bls.n	800aa30 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	461a      	mov	r2, r3
 800aa24:	4b0c      	ldr	r3, [pc, #48]	; (800aa58 <DMA_CalcBaseAndBitshift+0x68>)
 800aa26:	4013      	ands	r3, r2
 800aa28:	1d1a      	adds	r2, r3, #4
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	659a      	str	r2, [r3, #88]	; 0x58
 800aa2e:	e006      	b.n	800aa3e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	461a      	mov	r2, r3
 800aa36:	4b08      	ldr	r3, [pc, #32]	; (800aa58 <DMA_CalcBaseAndBitshift+0x68>)
 800aa38:	4013      	ands	r3, r2
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3714      	adds	r7, #20
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	aaaaaaab 	.word	0xaaaaaaab
 800aa54:	08022ba8 	.word	0x08022ba8
 800aa58:	fffffc00 	.word	0xfffffc00

0800aa5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa64:	2300      	movs	r3, #0
 800aa66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d11f      	bne.n	800aab6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	2b03      	cmp	r3, #3
 800aa7a:	d855      	bhi.n	800ab28 <DMA_CheckFifoParam+0xcc>
 800aa7c:	a201      	add	r2, pc, #4	; (adr r2, 800aa84 <DMA_CheckFifoParam+0x28>)
 800aa7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa82:	bf00      	nop
 800aa84:	0800aa95 	.word	0x0800aa95
 800aa88:	0800aaa7 	.word	0x0800aaa7
 800aa8c:	0800aa95 	.word	0x0800aa95
 800aa90:	0800ab29 	.word	0x0800ab29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d045      	beq.n	800ab2c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aaa4:	e042      	b.n	800ab2c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aaae:	d13f      	bne.n	800ab30 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800aab0:	2301      	movs	r3, #1
 800aab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aab4:	e03c      	b.n	800ab30 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	699b      	ldr	r3, [r3, #24]
 800aaba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aabe:	d121      	bne.n	800ab04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	d836      	bhi.n	800ab34 <DMA_CheckFifoParam+0xd8>
 800aac6:	a201      	add	r2, pc, #4	; (adr r2, 800aacc <DMA_CheckFifoParam+0x70>)
 800aac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aacc:	0800aadd 	.word	0x0800aadd
 800aad0:	0800aae3 	.word	0x0800aae3
 800aad4:	0800aadd 	.word	0x0800aadd
 800aad8:	0800aaf5 	.word	0x0800aaf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
 800aade:	73fb      	strb	r3, [r7, #15]
      break;
 800aae0:	e02f      	b.n	800ab42 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d024      	beq.n	800ab38 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aaf2:	e021      	b.n	800ab38 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aafc:	d11e      	bne.n	800ab3c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ab02:	e01b      	b.n	800ab3c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d902      	bls.n	800ab10 <DMA_CheckFifoParam+0xb4>
 800ab0a:	2b03      	cmp	r3, #3
 800ab0c:	d003      	beq.n	800ab16 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ab0e:	e018      	b.n	800ab42 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	73fb      	strb	r3, [r7, #15]
      break;
 800ab14:	e015      	b.n	800ab42 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00e      	beq.n	800ab40 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800ab22:	2301      	movs	r3, #1
 800ab24:	73fb      	strb	r3, [r7, #15]
      break;
 800ab26:	e00b      	b.n	800ab40 <DMA_CheckFifoParam+0xe4>
      break;
 800ab28:	bf00      	nop
 800ab2a:	e00a      	b.n	800ab42 <DMA_CheckFifoParam+0xe6>
      break;
 800ab2c:	bf00      	nop
 800ab2e:	e008      	b.n	800ab42 <DMA_CheckFifoParam+0xe6>
      break;
 800ab30:	bf00      	nop
 800ab32:	e006      	b.n	800ab42 <DMA_CheckFifoParam+0xe6>
      break;
 800ab34:	bf00      	nop
 800ab36:	e004      	b.n	800ab42 <DMA_CheckFifoParam+0xe6>
      break;
 800ab38:	bf00      	nop
 800ab3a:	e002      	b.n	800ab42 <DMA_CheckFifoParam+0xe6>
      break;   
 800ab3c:	bf00      	nop
 800ab3e:	e000      	b.n	800ab42 <DMA_CheckFifoParam+0xe6>
      break;
 800ab40:	bf00      	nop
    }
  } 
  
  return status; 
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3714      	adds	r7, #20
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b088      	sub	sp, #32
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	61fb      	str	r3, [r7, #28]
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800ab60:	4ba9      	ldr	r3, [pc, #676]	; (800ae08 <HAL_ETH_Init+0x2b8>)
 800ab62:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 800ab64:	2300      	movs	r3, #0
 800ab66:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d101      	bne.n	800ab76 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	e183      	b.n	800ae7e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d106      	bne.n	800ab90 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f005 f8de 	bl	800fd4c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ab90:	4b9e      	ldr	r3, [pc, #632]	; (800ae0c <HAL_ETH_Init+0x2bc>)
 800ab92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab94:	4a9d      	ldr	r2, [pc, #628]	; (800ae0c <HAL_ETH_Init+0x2bc>)
 800ab96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab9a:	6453      	str	r3, [r2, #68]	; 0x44
 800ab9c:	4b9b      	ldr	r3, [pc, #620]	; (800ae0c <HAL_ETH_Init+0x2bc>)
 800ab9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aba4:	60bb      	str	r3, [r7, #8]
 800aba6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800aba8:	4b99      	ldr	r3, [pc, #612]	; (800ae10 <HAL_ETH_Init+0x2c0>)
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	4a98      	ldr	r2, [pc, #608]	; (800ae10 <HAL_ETH_Init+0x2c0>)
 800abae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800abb2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800abb4:	4b96      	ldr	r3, [pc, #600]	; (800ae10 <HAL_ETH_Init+0x2c0>)
 800abb6:	685a      	ldr	r2, [r3, #4]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a1b      	ldr	r3, [r3, #32]
 800abbc:	4994      	ldr	r1, [pc, #592]	; (800ae10 <HAL_ETH_Init+0x2c0>)
 800abbe:	4313      	orrs	r3, r2
 800abc0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f042 0201 	orr.w	r2, r2, #1
 800abd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abd8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800abda:	f7ff f999 	bl	8009f10 <HAL_GetTick>
 800abde:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800abe0:	e011      	b.n	800ac06 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800abe2:	f7ff f995 	bl	8009f10 <HAL_GetTick>
 800abe6:	4602      	mov	r2, r0
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	1ad3      	subs	r3, r2, r3
 800abec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800abf0:	d909      	bls.n	800ac06 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2203      	movs	r2, #3
 800abf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800ac02:	2303      	movs	r3, #3
 800ac04:	e13b      	b.n	800ae7e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f003 0301 	and.w	r3, r3, #1
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1e4      	bne.n	800abe2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	f023 031c 	bic.w	r3, r3, #28
 800ac26:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800ac28:	f002 f920 	bl	800ce6c <HAL_RCC_GetHCLKFreq>
 800ac2c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	4a78      	ldr	r2, [pc, #480]	; (800ae14 <HAL_ETH_Init+0x2c4>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d908      	bls.n	800ac48 <HAL_ETH_Init+0xf8>
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	4a77      	ldr	r2, [pc, #476]	; (800ae18 <HAL_ETH_Init+0x2c8>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d804      	bhi.n	800ac48 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	f043 0308 	orr.w	r3, r3, #8
 800ac44:	61fb      	str	r3, [r7, #28]
 800ac46:	e027      	b.n	800ac98 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	4a73      	ldr	r2, [pc, #460]	; (800ae18 <HAL_ETH_Init+0x2c8>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d908      	bls.n	800ac62 <HAL_ETH_Init+0x112>
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	4a72      	ldr	r2, [pc, #456]	; (800ae1c <HAL_ETH_Init+0x2cc>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d804      	bhi.n	800ac62 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	f043 030c 	orr.w	r3, r3, #12
 800ac5e:	61fb      	str	r3, [r7, #28]
 800ac60:	e01a      	b.n	800ac98 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	4a6d      	ldr	r2, [pc, #436]	; (800ae1c <HAL_ETH_Init+0x2cc>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d903      	bls.n	800ac72 <HAL_ETH_Init+0x122>
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	4a6c      	ldr	r2, [pc, #432]	; (800ae20 <HAL_ETH_Init+0x2d0>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d911      	bls.n	800ac96 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	4a6a      	ldr	r2, [pc, #424]	; (800ae20 <HAL_ETH_Init+0x2d0>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d908      	bls.n	800ac8c <HAL_ETH_Init+0x13c>
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	4a69      	ldr	r2, [pc, #420]	; (800ae24 <HAL_ETH_Init+0x2d4>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d804      	bhi.n	800ac8c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	f043 0304 	orr.w	r3, r3, #4
 800ac88:	61fb      	str	r3, [r7, #28]
 800ac8a:	e005      	b.n	800ac98 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	f043 0310 	orr.w	r3, r3, #16
 800ac92:	61fb      	str	r3, [r7, #28]
 800ac94:	e000      	b.n	800ac98 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800ac96:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	69fa      	ldr	r2, [r7, #28]
 800ac9e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800aca0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800aca4:	2100      	movs	r1, #0
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fc19 	bl	800b4de <HAL_ETH_WritePHYRegister>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00b      	beq.n	800acca <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800acb6:	6939      	ldr	r1, [r7, #16]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 fdcf 	bl	800b85c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2201      	movs	r2, #1
 800acc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e0d9      	b.n	800ae7e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800acca:	20ff      	movs	r0, #255	; 0xff
 800accc:	f7ff f92c 	bl	8009f28 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 80a7 	beq.w	800ae28 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800acda:	f7ff f919 	bl	8009f10 <HAL_GetTick>
 800acde:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800ace0:	f107 030c 	add.w	r3, r7, #12
 800ace4:	461a      	mov	r2, r3
 800ace6:	2101      	movs	r1, #1
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 fb90 	bl	800b40e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800acee:	f7ff f90f 	bl	8009f10 <HAL_GetTick>
 800acf2:	4602      	mov	r2, r0
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	1ad3      	subs	r3, r2, r3
 800acf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d90f      	bls.n	800ad20 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800ad04:	6939      	ldr	r1, [r7, #16]
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fda8 	bl	800b85c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800ad1c:	2303      	movs	r3, #3
 800ad1e:	e0ae      	b.n	800ae7e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f003 0304 	and.w	r3, r3, #4
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d0da      	beq.n	800ace0 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800ad2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ad2e:	2100      	movs	r1, #0
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 fbd4 	bl	800b4de <HAL_ETH_WritePHYRegister>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d00b      	beq.n	800ad54 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800ad40:	6939      	ldr	r1, [r7, #16]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fd8a 	bl	800b85c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800ad50:	2301      	movs	r3, #1
 800ad52:	e094      	b.n	800ae7e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800ad54:	f7ff f8dc 	bl	8009f10 <HAL_GetTick>
 800ad58:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800ad5a:	f107 030c 	add.w	r3, r7, #12
 800ad5e:	461a      	mov	r2, r3
 800ad60:	2101      	movs	r1, #1
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fb53 	bl	800b40e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800ad68:	f7ff f8d2 	bl	8009f10 <HAL_GetTick>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	1ad3      	subs	r3, r2, r3
 800ad72:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d90f      	bls.n	800ad9a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800ad7e:	6939      	ldr	r1, [r7, #16]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 fd6b 	bl	800b85c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800ad96:	2303      	movs	r3, #3
 800ad98:	e071      	b.n	800ae7e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f003 0320 	and.w	r3, r3, #32
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d0da      	beq.n	800ad5a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800ada4:	f107 030c 	add.w	r3, r7, #12
 800ada8:	461a      	mov	r2, r3
 800adaa:	211f      	movs	r1, #31
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 fb2e 	bl	800b40e <HAL_ETH_ReadPHYRegister>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00b      	beq.n	800add0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800adb8:	2301      	movs	r3, #1
 800adba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800adbc:	6939      	ldr	r1, [r7, #16]
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 fd4c 	bl	800b85c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800adcc:	2301      	movs	r3, #1
 800adce:	e056      	b.n	800ae7e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f003 0310 	and.w	r3, r3, #16
 800add6:	2b00      	cmp	r3, #0
 800add8:	d004      	beq.n	800ade4 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ade0:	60da      	str	r2, [r3, #12]
 800ade2:	e002      	b.n	800adea <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f003 0304 	and.w	r3, r3, #4
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d003      	beq.n	800adfc <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	609a      	str	r2, [r3, #8]
 800adfa:	e037      	b.n	800ae6c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ae02:	609a      	str	r2, [r3, #8]
 800ae04:	e032      	b.n	800ae6c <HAL_ETH_Init+0x31c>
 800ae06:	bf00      	nop
 800ae08:	03938700 	.word	0x03938700
 800ae0c:	40023800 	.word	0x40023800
 800ae10:	40013800 	.word	0x40013800
 800ae14:	01312cff 	.word	0x01312cff
 800ae18:	02160ebf 	.word	0x02160ebf
 800ae1c:	039386ff 	.word	0x039386ff
 800ae20:	05f5e0ff 	.word	0x05f5e0ff
 800ae24:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	08db      	lsrs	r3, r3, #3
 800ae2e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	085b      	lsrs	r3, r3, #1
 800ae36:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	2100      	movs	r1, #0
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 fb4c 	bl	800b4de <HAL_ETH_WritePHYRegister>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00b      	beq.n	800ae64 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800ae50:	6939      	ldr	r1, [r7, #16]
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fd02 	bl	800b85c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800ae60:	2301      	movs	r3, #1
 800ae62:	e00c      	b.n	800ae7e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800ae64:	f640 70ff 	movw	r0, #4095	; 0xfff
 800ae68:	f7ff f85e 	bl	8009f28 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800ae6c:	6939      	ldr	r1, [r7, #16]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fcf4 	bl	800b85c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3720      	adds	r7, #32
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop

0800ae88 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b087      	sub	sp, #28
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
 800ae94:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800ae96:	2300      	movs	r3, #0
 800ae98:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d101      	bne.n	800aea8 <HAL_ETH_DMATxDescListInit+0x20>
 800aea4:	2302      	movs	r3, #2
 800aea6:	e052      	b.n	800af4e <HAL_ETH_DMATxDescListInit+0xc6>
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2202      	movs	r2, #2
 800aeb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800aebe:	2300      	movs	r3, #0
 800aec0:	617b      	str	r3, [r7, #20]
 800aec2:	e030      	b.n	800af26 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	015b      	lsls	r3, r3, #5
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	4413      	add	r3, r2
 800aecc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800aed4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800aedc:	fb02 f303 	mul.w	r3, r2, r3
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	4413      	add	r3, r2
 800aee4:	461a      	mov	r2, r3
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	69db      	ldr	r3, [r3, #28]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d105      	bne.n	800aefe <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	3b01      	subs	r3, #1
 800af02:	697a      	ldr	r2, [r7, #20]
 800af04:	429a      	cmp	r2, r3
 800af06:	d208      	bcs.n	800af1a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	3301      	adds	r3, #1
 800af0c:	015b      	lsls	r3, r3, #5
 800af0e:	68ba      	ldr	r2, [r7, #8]
 800af10:	4413      	add	r3, r2
 800af12:	461a      	mov	r2, r3
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	60da      	str	r2, [r3, #12]
 800af18:	e002      	b.n	800af20 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800af1a:	68ba      	ldr	r2, [r7, #8]
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	3301      	adds	r3, #1
 800af24:	617b      	str	r3, [r7, #20]
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d3ca      	bcc.n	800aec4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6819      	ldr	r1, [r3, #0]
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	f241 0310 	movw	r3, #4112	; 0x1010
 800af38:	440b      	add	r3, r1
 800af3a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2201      	movs	r2, #1
 800af40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2200      	movs	r2, #0
 800af48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	371c      	adds	r7, #28
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800af5a:	b480      	push	{r7}
 800af5c:	b087      	sub	sp, #28
 800af5e:	af00      	add	r7, sp, #0
 800af60:	60f8      	str	r0, [r7, #12]
 800af62:	60b9      	str	r1, [r7, #8]
 800af64:	607a      	str	r2, [r7, #4]
 800af66:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800af68:	2300      	movs	r3, #0
 800af6a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af72:	2b01      	cmp	r3, #1
 800af74:	d101      	bne.n	800af7a <HAL_ETH_DMARxDescListInit+0x20>
 800af76:	2302      	movs	r3, #2
 800af78:	e056      	b.n	800b028 <HAL_ETH_DMARxDescListInit+0xce>
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2201      	movs	r2, #1
 800af7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2202      	movs	r2, #2
 800af86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	68ba      	ldr	r2, [r7, #8]
 800af8e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800af90:	2300      	movs	r3, #0
 800af92:	617b      	str	r3, [r7, #20]
 800af94:	e034      	b.n	800b000 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	015b      	lsls	r3, r3, #5
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	4413      	add	r3, r2
 800af9e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800afa6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800afae:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800afb6:	fb02 f303 	mul.w	r3, r2, r3
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	4413      	add	r3, r2
 800afbe:	461a      	mov	r2, r3
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d105      	bne.n	800afd8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	3b01      	subs	r3, #1
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d208      	bcs.n	800aff4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	3301      	adds	r3, #1
 800afe6:	015b      	lsls	r3, r3, #5
 800afe8:	68ba      	ldr	r2, [r7, #8]
 800afea:	4413      	add	r3, r2
 800afec:	461a      	mov	r2, r3
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	60da      	str	r2, [r3, #12]
 800aff2:	e002      	b.n	800affa <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800aff4:	68ba      	ldr	r2, [r7, #8]
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	3301      	adds	r3, #1
 800affe:	617b      	str	r3, [r7, #20]
 800b000:	697a      	ldr	r2, [r7, #20]
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	429a      	cmp	r2, r3
 800b006:	d3c6      	bcc.n	800af96 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	6819      	ldr	r1, [r3, #0]
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	f241 030c 	movw	r3, #4108	; 0x100c
 800b012:	440b      	add	r3, r1
 800b014:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2201      	movs	r2, #1
 800b01a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2200      	movs	r2, #0
 800b022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800b026:	2300      	movs	r3, #0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	371c      	adds	r7, #28
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800b034:	b480      	push	{r7}
 800b036:	b087      	sub	sp, #28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800b03e:	2300      	movs	r3, #0
 800b040:	617b      	str	r3, [r7, #20]
 800b042:	2300      	movs	r3, #0
 800b044:	60fb      	str	r3, [r7, #12]
 800b046:	2300      	movs	r3, #0
 800b048:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b050:	2b01      	cmp	r3, #1
 800b052:	d101      	bne.n	800b058 <HAL_ETH_TransmitFrame+0x24>
 800b054:	2302      	movs	r3, #2
 800b056:	e0cd      	b.n	800b1f4 <HAL_ETH_TransmitFrame+0x1c0>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2202      	movs	r2, #2
 800b064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d109      	bne.n	800b082 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2201      	movs	r2, #1
 800b072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800b07e:	2301      	movs	r3, #1
 800b080:	e0b8      	b.n	800b1f4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	da09      	bge.n	800b0a0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2212      	movs	r2, #18
 800b090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800b09c:	2301      	movs	r3, #1
 800b09e:	e0a9      	b.n	800b1f4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d915      	bls.n	800b0d6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	4a54      	ldr	r2, [pc, #336]	; (800b200 <HAL_ETH_TransmitFrame+0x1cc>)
 800b0ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b0b2:	0a9b      	lsrs	r3, r3, #10
 800b0b4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800b0b6:	683a      	ldr	r2, [r7, #0]
 800b0b8:	4b51      	ldr	r3, [pc, #324]	; (800b200 <HAL_ETH_TransmitFrame+0x1cc>)
 800b0ba:	fba3 1302 	umull	r1, r3, r3, r2
 800b0be:	0a9b      	lsrs	r3, r3, #10
 800b0c0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800b0c4:	fb01 f303 	mul.w	r3, r1, r3
 800b0c8:	1ad3      	subs	r3, r2, r3
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d005      	beq.n	800b0da <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	617b      	str	r3, [r7, #20]
 800b0d4:	e001      	b.n	800b0da <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d11c      	bne.n	800b11a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ea:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800b0ee:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f4:	683a      	ldr	r2, [r7, #0]
 800b0f6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800b0fa:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b106:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b10a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	461a      	mov	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	62da      	str	r2, [r3, #44]	; 0x2c
 800b118:	e04b      	b.n	800b1b2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800b11a:	2300      	movs	r3, #0
 800b11c:	613b      	str	r3, [r7, #16]
 800b11e:	e044      	b.n	800b1aa <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b124:	681a      	ldr	r2, [r3, #0]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b12e:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d107      	bne.n	800b146 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b140:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b144:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b14e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	3b01      	subs	r3, #1
 800b154:	693a      	ldr	r2, [r7, #16]
 800b156:	429a      	cmp	r2, r3
 800b158:	d116      	bne.n	800b188 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b164:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b168:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	4a25      	ldr	r2, [pc, #148]	; (800b204 <HAL_ETH_TransmitFrame+0x1d0>)
 800b16e:	fb02 f203 	mul.w	r2, r2, r3
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	4413      	add	r3, r2
 800b176:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b17a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800b186:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b192:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b196:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	461a      	mov	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	613b      	str	r3, [r7, #16]
 800b1aa:	693a      	ldr	r2, [r7, #16]
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d3b6      	bcc.n	800b120 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	f241 0314 	movw	r3, #4116	; 0x1014
 800b1ba:	4413      	add	r3, r2
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f003 0304 	and.w	r3, r3, #4
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d00d      	beq.n	800b1e2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	f241 0314 	movw	r3, #4116	; 0x1014
 800b1ce:	4413      	add	r3, r2
 800b1d0:	2204      	movs	r2, #4
 800b1d2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	f241 0304 	movw	r3, #4100	; 0x1004
 800b1dc:	4413      	add	r3, r2
 800b1de:	2200      	movs	r2, #0
 800b1e0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	371c      	adds	r7, #28
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr
 800b200:	ac02b00b 	.word	0xac02b00b
 800b204:	fffffa0c 	.word	0xfffffa0c

0800b208 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 800b210:	2300      	movs	r3, #0
 800b212:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d101      	bne.n	800b222 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800b21e:	2302      	movs	r3, #2
 800b220:	e074      	b.n	800b30c <HAL_ETH_GetReceivedFrame_IT+0x104>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2201      	movs	r2, #1
 800b226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2202      	movs	r2, #2
 800b22e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800b232:	e05a      	b.n	800b2ea <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	3301      	adds	r3, #1
 800b238:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b248:	d10d      	bne.n	800b266 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2201      	movs	r2, #1
 800b256:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	461a      	mov	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	629a      	str	r2, [r3, #40]	; 0x28
 800b264:	e041      	b.n	800b2ea <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10b      	bne.n	800b28c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b278:	1c5a      	adds	r2, r3, #1
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	461a      	mov	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	629a      	str	r2, [r3, #40]	; 0x28
 800b28a:	e02e      	b.n	800b2ea <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b298:	1c5a      	adds	r2, r3, #1
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d103      	bne.n	800b2ae <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	0c1b      	lsrs	r3, r3, #16
 800b2b6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b2ba:	1f1a      	subs	r2, r3, #4
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c4:	689a      	ldr	r2, [r3, #8]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	e010      	b.n	800b30c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	db02      	blt.n	800b2fa <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d99c      	bls.n	800b234 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800b30a:	2301      	movs	r3, #1
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3714      	adds	r7, #20
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	f241 0314 	movw	r3, #4116	; 0x1014
 800b328:	4413      	add	r3, r2
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b330:	2b40      	cmp	r3, #64	; 0x40
 800b332:	d112      	bne.n	800b35a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f004 fdc9 	bl	800fecc <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	f241 0314 	movw	r3, #4116	; 0x1014
 800b342:	4413      	add	r3, r2
 800b344:	2240      	movs	r2, #64	; 0x40
 800b346:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b358:	e01b      	b.n	800b392 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	f241 0314 	movw	r3, #4116	; 0x1014
 800b362:	4413      	add	r3, r2
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f003 0301 	and.w	r3, r3, #1
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d111      	bne.n	800b392 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 f839 	bl	800b3e6 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	f241 0314 	movw	r3, #4116	; 0x1014
 800b37c:	4413      	add	r3, r2
 800b37e:	2201      	movs	r2, #1
 800b380:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2201      	movs	r2, #1
 800b386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	f241 0314 	movw	r3, #4116	; 0x1014
 800b39a:	4413      	add	r3, r2
 800b39c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b3a0:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	f241 0314 	movw	r3, #4116	; 0x1014
 800b3aa:	4413      	add	r3, r2
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3b6:	d112      	bne.n	800b3de <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 f81e 	bl	800b3fa <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	f241 0314 	movw	r3, #4116	; 0x1014
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b3cc:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800b3de:	bf00      	nop
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800b3e6:	b480      	push	{r7}
 800b3e8:	b083      	sub	sp, #12
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800b3ee:	bf00      	nop
 800b3f0:	370c      	adds	r7, #12
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr

0800b3fa <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800b3fa:	b480      	push	{r7}
 800b3fc:	b083      	sub	sp, #12
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 800b402:	bf00      	nop
 800b404:	370c      	adds	r7, #12
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr

0800b40e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800b40e:	b580      	push	{r7, lr}
 800b410:	b086      	sub	sp, #24
 800b412:	af00      	add	r7, sp, #0
 800b414:	60f8      	str	r0, [r7, #12]
 800b416:	460b      	mov	r3, r1
 800b418:	607a      	str	r2, [r7, #4]
 800b41a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800b41c:	2300      	movs	r3, #0
 800b41e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800b420:	2300      	movs	r3, #0
 800b422:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	2b82      	cmp	r3, #130	; 0x82
 800b42e:	d101      	bne.n	800b434 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800b430:	2302      	movs	r3, #2
 800b432:	e050      	b.n	800b4d6 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2282      	movs	r2, #130	; 0x82
 800b438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	691b      	ldr	r3, [r3, #16]
 800b442:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	f003 031c 	and.w	r3, r3, #28
 800b44a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	8a1b      	ldrh	r3, [r3, #16]
 800b450:	02db      	lsls	r3, r3, #11
 800b452:	b29b      	uxth	r3, r3
 800b454:	697a      	ldr	r2, [r7, #20]
 800b456:	4313      	orrs	r3, r2
 800b458:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800b45a:	897b      	ldrh	r3, [r7, #10]
 800b45c:	019b      	lsls	r3, r3, #6
 800b45e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800b462:	697a      	ldr	r2, [r7, #20]
 800b464:	4313      	orrs	r3, r2
 800b466:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	f023 0302 	bic.w	r3, r3, #2
 800b46e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	f043 0301 	orr.w	r3, r3, #1
 800b476:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	697a      	ldr	r2, [r7, #20]
 800b47e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800b480:	f7fe fd46 	bl	8009f10 <HAL_GetTick>
 800b484:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b486:	e015      	b.n	800b4b4 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800b488:	f7fe fd42 	bl	8009f10 <HAL_GetTick>
 800b48c:	4602      	mov	r2, r0
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	1ad3      	subs	r3, r2, r3
 800b492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b496:	d309      	bcc.n	800b4ac <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2201      	movs	r2, #1
 800b49c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800b4a8:	2303      	movs	r3, #3
 800b4aa:	e014      	b.n	800b4d6 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	f003 0301 	and.w	r3, r3, #1
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d1e4      	bne.n	800b488 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	695b      	ldr	r3, [r3, #20]
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3718      	adds	r7, #24
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b086      	sub	sp, #24
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	60f8      	str	r0, [r7, #12]
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	607a      	str	r2, [r7, #4]
 800b4ea:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	2b42      	cmp	r3, #66	; 0x42
 800b4fe:	d101      	bne.n	800b504 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800b500:	2302      	movs	r3, #2
 800b502:	e04e      	b.n	800b5a2 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2242      	movs	r2, #66	; 0x42
 800b508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	f003 031c 	and.w	r3, r3, #28
 800b51a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	8a1b      	ldrh	r3, [r3, #16]
 800b520:	02db      	lsls	r3, r3, #11
 800b522:	b29b      	uxth	r3, r3
 800b524:	697a      	ldr	r2, [r7, #20]
 800b526:	4313      	orrs	r3, r2
 800b528:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800b52a:	897b      	ldrh	r3, [r7, #10]
 800b52c:	019b      	lsls	r3, r3, #6
 800b52e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800b532:	697a      	ldr	r2, [r7, #20]
 800b534:	4313      	orrs	r3, r2
 800b536:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	f043 0302 	orr.w	r3, r3, #2
 800b53e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	f043 0301 	orr.w	r3, r3, #1
 800b546:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	697a      	ldr	r2, [r7, #20]
 800b558:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800b55a:	f7fe fcd9 	bl	8009f10 <HAL_GetTick>
 800b55e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b560:	e015      	b.n	800b58e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800b562:	f7fe fcd5 	bl	8009f10 <HAL_GetTick>
 800b566:	4602      	mov	r2, r0
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	1ad3      	subs	r3, r2, r3
 800b56c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b570:	d309      	bcc.n	800b586 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2201      	movs	r2, #1
 800b576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2200      	movs	r2, #0
 800b57e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800b582:	2303      	movs	r3, #3
 800b584:	e00d      	b.n	800b5a2 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	f003 0301 	and.w	r3, r3, #1
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1e4      	bne.n	800b562 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3718      	adds	r7, #24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b082      	sub	sp, #8
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d101      	bne.n	800b5c0 <HAL_ETH_Start+0x16>
 800b5bc:	2302      	movs	r3, #2
 800b5be:	e01f      	b.n	800b600 <HAL_ETH_Start+0x56>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2202      	movs	r2, #2
 800b5cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 fb45 	bl	800bc60 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 fb7c 	bl	800bcd4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 fc13 	bl	800be08 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fbb0 	bl	800bd48 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 fbdd 	bl	800bda8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800b5fe:	2300      	movs	r3, #0
}
 800b600:	4618      	mov	r0, r3
 800b602:	3708      	adds	r7, #8
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b616:	2b01      	cmp	r3, #1
 800b618:	d101      	bne.n	800b61e <HAL_ETH_Stop+0x16>
 800b61a:	2302      	movs	r3, #2
 800b61c:	e01f      	b.n	800b65e <HAL_ETH_Stop+0x56>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2201      	movs	r2, #1
 800b622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2202      	movs	r2, #2
 800b62a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fba2 	bl	800bd78 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 fbcf 	bl	800bdd8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fb67 	bl	800bd0e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 fbe1 	bl	800be08 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 fb27 	bl	800bc9a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
	...

0800b668 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b672:	2300      	movs	r3, #0
 800b674:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d101      	bne.n	800b684 <HAL_ETH_ConfigMAC+0x1c>
 800b680:	2302      	movs	r3, #2
 800b682:	e0e4      	b.n	800b84e <HAL_ETH_ConfigMAC+0x1e6>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2202      	movs	r2, #2
 800b690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	f000 80b1 	beq.w	800b7fe <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	4b6c      	ldr	r3, [pc, #432]	; (800b858 <HAL_ETH_ConfigMAC+0x1f0>)
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800b6b4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800b6ba:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800b6c0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800b6c6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800b6cc:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800b6d2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800b6d8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800b6de:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800b6e4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800b6ea:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800b6f0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800b6f6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b70e:	2001      	movs	r0, #1
 800b710:	f7fe fc0a 	bl	8009f28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800b724:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800b72a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800b730:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800b736:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800b73c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800b742:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800b74e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800b750:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b75a:	2001      	movs	r0, #1
 800b75c:	f7fe fbe4 	bl	8009f28 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	68fa      	ldr	r2, [r7, #12]
 800b766:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	683a      	ldr	r2, [r7, #0]
 800b76e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b770:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	683a      	ldr	r2, [r7, #0]
 800b778:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b77a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	699b      	ldr	r3, [r3, #24]
 800b782:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	f64f 7341 	movw	r3, #65345	; 0xff41
 800b78a:	4013      	ands	r3, r2
 800b78c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b792:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800b798:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800b79e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800b7a4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800b7aa:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800b7b0:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800b7b2:	68fa      	ldr	r2, [r7, #12]
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	699b      	ldr	r3, [r3, #24]
 800b7c6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b7c8:	2001      	movs	r0, #1
 800b7ca:	f7fe fbad 	bl	8009f28 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68fa      	ldr	r2, [r7, #12]
 800b7d4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	430a      	orrs	r2, r1
 800b7e4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	69db      	ldr	r3, [r3, #28]
 800b7ec:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800b7ee:	2001      	movs	r0, #1
 800b7f0:	f7fe fb9a 	bl	8009f28 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	61da      	str	r2, [r3, #28]
 800b7fc:	e01e      	b.n	800b83c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800b80c:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	689a      	ldr	r2, [r3, #8]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	4313      	orrs	r3, r2
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	4313      	orrs	r3, r2
 800b81c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b82e:	2001      	movs	r0, #1
 800b830:	f7fe fb7a 	bl	8009f28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2201      	movs	r2, #1
 800b840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	ff20810f 	.word	0xff20810f

0800b85c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b0b0      	sub	sp, #192	; 0xc0
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800b866:	2300      	movs	r3, #0
 800b868:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d007      	beq.n	800b882 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b878:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b880:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800b882:	2300      	movs	r3, #0
 800b884:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800b886:	2300      	movs	r3, #0
 800b888:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800b88a:	2300      	movs	r3, #0
 800b88c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800b88e:	2300      	movs	r3, #0
 800b890:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800b892:	2300      	movs	r3, #0
 800b894:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800b896:	2300      	movs	r3, #0
 800b898:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	69db      	ldr	r3, [r3, #28]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d103      	bne.n	800b8aa <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800b8a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8a6:	663b      	str	r3, [r7, #96]	; 0x60
 800b8a8:	e001      	b.n	800b8ae <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800b8ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8b2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800b8c8:	2340      	movs	r3, #64	; 0x40
 800b8ca:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800b8fc:	2380      	movs	r3, #128	; 0x80
 800b8fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800b902:	2300      	movs	r3, #0
 800b904:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800b908:	2300      	movs	r3, #0
 800b90a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800b90e:	2300      	movs	r3, #0
 800b910:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800b914:	2300      	movs	r3, #0
 800b916:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800b91a:	2300      	movs	r3, #0
 800b91c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800b920:	2300      	movs	r3, #0
 800b922:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800b930:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b934:	4bab      	ldr	r3, [pc, #684]	; (800bbe4 <ETH_MACDMAConfig+0x388>)
 800b936:	4013      	ands	r3, r2
 800b938:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800b93c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800b93e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800b940:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800b942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800b944:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800b946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800b948:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800b94e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800b950:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800b952:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800b954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800b956:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800b95c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800b95e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800b960:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800b962:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800b964:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800b966:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800b968:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800b96a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800b96c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800b96e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800b970:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800b972:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b976:	4313      	orrs	r3, r2
 800b978:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b984:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b990:	2001      	movs	r0, #1
 800b992:	f7fe fac9 	bl	8009f28 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b99e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b9a0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800b9a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b9a4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800b9a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800b9a8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800b9aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800b9ae:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800b9b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800b9b4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800b9b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800b9ba:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800b9bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800b9c0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800b9c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800b9cc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b9ce:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b9da:	2001      	movs	r0, #1
 800b9dc:	f7fe faa4 	bl	8009f28 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b9e8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b9f2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b9fc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	699b      	ldr	r3, [r3, #24]
 800ba04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800ba08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ba0c:	f64f 7341 	movw	r3, #65345	; 0xff41
 800ba10:	4013      	ands	r3, r2
 800ba12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800ba16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ba1a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800ba1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800ba20:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800ba22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800ba26:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800ba28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800ba2c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800ba2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800ba32:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800ba34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800ba38:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800ba3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ba4c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	699b      	ldr	r3, [r3, #24]
 800ba54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800ba58:	2001      	movs	r0, #1
 800ba5a:	f7fe fa65 	bl	8009f28 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ba66:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800ba68:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800ba6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	430a      	orrs	r2, r1
 800ba76:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	69db      	ldr	r3, [r3, #28]
 800ba7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800ba82:	2001      	movs	r0, #1
 800ba84:	f7fe fa50 	bl	8009f28 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ba90:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800ba92:	2300      	movs	r3, #0
 800ba94:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800ba96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ba9a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800baa0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800baa4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800baa6:	2300      	movs	r3, #0
 800baa8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800baaa:	2300      	movs	r3, #0
 800baac:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800baae:	2300      	movs	r3, #0
 800bab0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800bab2:	2300      	movs	r3, #0
 800bab4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800bab6:	2304      	movs	r3, #4
 800bab8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800baba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800babe:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800bac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bac4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800bac6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800baca:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800bacc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bad0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800bad2:	2380      	movs	r3, #128	; 0x80
 800bad4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800bad6:	2300      	movs	r3, #0
 800bad8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800bada:	2300      	movs	r3, #0
 800badc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	f241 0318 	movw	r3, #4120	; 0x1018
 800bae6:	4413      	add	r3, r2
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800baee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800baf2:	4b3d      	ldr	r3, [pc, #244]	; (800bbe8 <ETH_MACDMAConfig+0x38c>)
 800baf4:	4013      	ands	r3, r2
 800baf6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800bafa:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800bafc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800bafe:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800bb00:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800bb02:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800bb04:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800bb06:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800bb08:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800bb0a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800bb0c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800bb0e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800bb10:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800bb12:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800bb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800bb16:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800bb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800bb1a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800bb1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bb20:	4313      	orrs	r3, r2
 800bb22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	f241 0318 	movw	r3, #4120	; 0x1018
 800bb2e:	4413      	add	r3, r2
 800bb30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bb34:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	f241 0318 	movw	r3, #4120	; 0x1018
 800bb3e:	4413      	add	r3, r2
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800bb46:	2001      	movs	r0, #1
 800bb48:	f7fe f9ee 	bl	8009f28 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	f241 0318 	movw	r3, #4120	; 0x1018
 800bb54:	4413      	add	r3, r2
 800bb56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bb5a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800bb5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800bb60:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800bb62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800bb64:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800bb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800bb68:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800bb6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800bb6c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800bb6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb70:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800bb72:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800bb74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800bb76:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800bb80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb84:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800bb94:	2001      	movs	r0, #1
 800bb96:	f7fe f9c7 	bl	8009f28 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bba2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bba6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	699b      	ldr	r3, [r3, #24]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d10d      	bne.n	800bbcc <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	f241 031c 	movw	r3, #4124	; 0x101c
 800bbb8:	4413      	add	r3, r2
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	6811      	ldr	r1, [r2, #0]
 800bbc0:	4a0a      	ldr	r2, [pc, #40]	; (800bbec <ETH_MACDMAConfig+0x390>)
 800bbc2:	431a      	orrs	r2, r3
 800bbc4:	f241 031c 	movw	r3, #4124	; 0x101c
 800bbc8:	440b      	add	r3, r1
 800bbca:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	695b      	ldr	r3, [r3, #20]
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f80b 	bl	800bbf0 <ETH_MACAddressConfig>
}
 800bbda:	bf00      	nop
 800bbdc:	37c0      	adds	r7, #192	; 0xc0
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	ff20810f 	.word	0xff20810f
 800bbe8:	f8de3f23 	.word	0xf8de3f23
 800bbec:	00010040 	.word	0x00010040

0800bbf0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b087      	sub	sp, #28
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	3305      	adds	r3, #5
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	021b      	lsls	r3, r3, #8
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	3204      	adds	r2, #4
 800bc08:	7812      	ldrb	r2, [r2, #0]
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800bc0e:	68ba      	ldr	r2, [r7, #8]
 800bc10:	4b11      	ldr	r3, [pc, #68]	; (800bc58 <ETH_MACAddressConfig+0x68>)
 800bc12:	4413      	add	r3, r2
 800bc14:	461a      	mov	r2, r3
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	3303      	adds	r3, #3
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	061a      	lsls	r2, r3, #24
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	3302      	adds	r3, #2
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	041b      	lsls	r3, r3, #16
 800bc2a:	431a      	orrs	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	3301      	adds	r3, #1
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	021b      	lsls	r3, r3, #8
 800bc34:	4313      	orrs	r3, r2
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	7812      	ldrb	r2, [r2, #0]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	4b06      	ldr	r3, [pc, #24]	; (800bc5c <ETH_MACAddressConfig+0x6c>)
 800bc42:	4413      	add	r3, r2
 800bc44:	461a      	mov	r2, r3
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	6013      	str	r3, [r2, #0]
}
 800bc4a:	bf00      	nop
 800bc4c:	371c      	adds	r7, #28
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	40028040 	.word	0x40028040
 800bc5c:	40028044 	.word	0x40028044

0800bc60 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f042 0208 	orr.w	r2, r2, #8
 800bc7a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc84:	2001      	movs	r0, #1
 800bc86:	f7fe f94f 	bl	8009f28 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	601a      	str	r2, [r3, #0]
}
 800bc92:	bf00      	nop
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}

0800bc9a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b084      	sub	sp, #16
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800bca2:	2300      	movs	r3, #0
 800bca4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f022 0208 	bic.w	r2, r2, #8
 800bcb4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bcbe:	2001      	movs	r0, #1
 800bcc0:	f7fe f932 	bl	8009f28 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	601a      	str	r2, [r3, #0]
}
 800bccc:	bf00      	nop
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f042 0204 	orr.w	r2, r2, #4
 800bcee:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bcf8:	2001      	movs	r0, #1
 800bcfa:	f7fe f915 	bl	8009f28 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	68fa      	ldr	r2, [r7, #12]
 800bd04:	601a      	str	r2, [r3, #0]
}
 800bd06:	bf00      	nop
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b084      	sub	sp, #16
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800bd16:	2300      	movs	r3, #0
 800bd18:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f022 0204 	bic.w	r2, r2, #4
 800bd28:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bd32:	2001      	movs	r0, #1
 800bd34:	f7fe f8f8 	bl	8009f28 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	601a      	str	r2, [r3, #0]
}
 800bd40:	bf00      	nop
 800bd42:	3710      	adds	r7, #16
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	f241 0318 	movw	r3, #4120	; 0x1018
 800bd58:	4413      	add	r3, r2
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	6811      	ldr	r1, [r2, #0]
 800bd60:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800bd64:	f241 0318 	movw	r3, #4120	; 0x1018
 800bd68:	440b      	add	r3, r1
 800bd6a:	601a      	str	r2, [r3, #0]
}
 800bd6c:	bf00      	nop
 800bd6e:	370c      	adds	r7, #12
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr

0800bd78 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	f241 0318 	movw	r3, #4120	; 0x1018
 800bd88:	4413      	add	r3, r2
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	6811      	ldr	r1, [r2, #0]
 800bd90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bd94:	f241 0318 	movw	r3, #4120	; 0x1018
 800bd98:	440b      	add	r3, r1
 800bd9a:	601a      	str	r2, [r3, #0]
}
 800bd9c:	bf00      	nop
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800bda8:	b480      	push	{r7}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681a      	ldr	r2, [r3, #0]
 800bdb4:	f241 0318 	movw	r3, #4120	; 0x1018
 800bdb8:	4413      	add	r3, r2
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	6811      	ldr	r1, [r2, #0]
 800bdc0:	f043 0202 	orr.w	r2, r3, #2
 800bdc4:	f241 0318 	movw	r3, #4120	; 0x1018
 800bdc8:	440b      	add	r3, r1
 800bdca:	601a      	str	r2, [r3, #0]
}
 800bdcc:	bf00      	nop
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	f241 0318 	movw	r3, #4120	; 0x1018
 800bde8:	4413      	add	r3, r2
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	6811      	ldr	r1, [r2, #0]
 800bdf0:	f023 0202 	bic.w	r2, r3, #2
 800bdf4:	f241 0318 	movw	r3, #4120	; 0x1018
 800bdf8:	440b      	add	r3, r1
 800bdfa:	601a      	str	r2, [r3, #0]
}
 800bdfc:	bf00      	nop
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800be10:	2300      	movs	r3, #0
 800be12:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	f241 0318 	movw	r3, #4120	; 0x1018
 800be1c:	4413      	add	r3, r2
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	6811      	ldr	r1, [r2, #0]
 800be24:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800be28:	f241 0318 	movw	r3, #4120	; 0x1018
 800be2c:	440b      	add	r3, r1
 800be2e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	f241 0318 	movw	r3, #4120	; 0x1018
 800be38:	4413      	add	r3, r2
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800be3e:	2001      	movs	r0, #1
 800be40:	f7fe f872 	bl	8009f28 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6819      	ldr	r1, [r3, #0]
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	f241 0318 	movw	r3, #4120	; 0x1018
 800be4e:	440b      	add	r3, r1
 800be50:	601a      	str	r2, [r3, #0]
}
 800be52:	bf00      	nop
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
	...

0800be5c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800be5c:	b480      	push	{r7}
 800be5e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800be60:	4b05      	ldr	r3, [pc, #20]	; (800be78 <HAL_FLASH_Lock+0x1c>)
 800be62:	691b      	ldr	r3, [r3, #16]
 800be64:	4a04      	ldr	r2, [pc, #16]	; (800be78 <HAL_FLASH_Lock+0x1c>)
 800be66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800be6a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800be6c:	2300      	movs	r3, #0
}
 800be6e:	4618      	mov	r0, r3
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr
 800be78:	40023c00 	.word	0x40023c00

0800be7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b089      	sub	sp, #36	; 0x24
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800be86:	2300      	movs	r3, #0
 800be88:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800be8a:	2300      	movs	r3, #0
 800be8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800be8e:	2300      	movs	r3, #0
 800be90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800be92:	2300      	movs	r3, #0
 800be94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800be96:	2300      	movs	r3, #0
 800be98:	61fb      	str	r3, [r7, #28]
 800be9a:	e175      	b.n	800c188 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800be9c:	2201      	movs	r2, #1
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	fa02 f303 	lsl.w	r3, r2, r3
 800bea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	697a      	ldr	r2, [r7, #20]
 800beac:	4013      	ands	r3, r2
 800beae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800beb0:	693a      	ldr	r2, [r7, #16]
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	f040 8164 	bne.w	800c182 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d00b      	beq.n	800beda <HAL_GPIO_Init+0x5e>
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	d007      	beq.n	800beda <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bece:	2b11      	cmp	r3, #17
 800bed0:	d003      	beq.n	800beda <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	2b12      	cmp	r3, #18
 800bed8:	d130      	bne.n	800bf3c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	005b      	lsls	r3, r3, #1
 800bee4:	2203      	movs	r2, #3
 800bee6:	fa02 f303 	lsl.w	r3, r2, r3
 800beea:	43db      	mvns	r3, r3
 800beec:	69ba      	ldr	r2, [r7, #24]
 800beee:	4013      	ands	r3, r2
 800bef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	68da      	ldr	r2, [r3, #12]
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	005b      	lsls	r3, r3, #1
 800befa:	fa02 f303 	lsl.w	r3, r2, r3
 800befe:	69ba      	ldr	r2, [r7, #24]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	69ba      	ldr	r2, [r7, #24]
 800bf08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bf10:	2201      	movs	r2, #1
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	fa02 f303 	lsl.w	r3, r2, r3
 800bf18:	43db      	mvns	r3, r3
 800bf1a:	69ba      	ldr	r2, [r7, #24]
 800bf1c:	4013      	ands	r3, r2
 800bf1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	091b      	lsrs	r3, r3, #4
 800bf26:	f003 0201 	and.w	r2, r3, #1
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf30:	69ba      	ldr	r2, [r7, #24]
 800bf32:	4313      	orrs	r3, r2
 800bf34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	69ba      	ldr	r2, [r7, #24]
 800bf3a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	005b      	lsls	r3, r3, #1
 800bf46:	2203      	movs	r2, #3
 800bf48:	fa02 f303 	lsl.w	r3, r2, r3
 800bf4c:	43db      	mvns	r3, r3
 800bf4e:	69ba      	ldr	r2, [r7, #24]
 800bf50:	4013      	ands	r3, r2
 800bf52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	689a      	ldr	r2, [r3, #8]
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	005b      	lsls	r3, r3, #1
 800bf5c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf60:	69ba      	ldr	r2, [r7, #24]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	69ba      	ldr	r2, [r7, #24]
 800bf6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	2b02      	cmp	r3, #2
 800bf72:	d003      	beq.n	800bf7c <HAL_GPIO_Init+0x100>
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	2b12      	cmp	r3, #18
 800bf7a:	d123      	bne.n	800bfc4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800bf7c:	69fb      	ldr	r3, [r7, #28]
 800bf7e:	08da      	lsrs	r2, r3, #3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	3208      	adds	r2, #8
 800bf84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bf8a:	69fb      	ldr	r3, [r7, #28]
 800bf8c:	f003 0307 	and.w	r3, r3, #7
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	220f      	movs	r2, #15
 800bf94:	fa02 f303 	lsl.w	r3, r2, r3
 800bf98:	43db      	mvns	r3, r3
 800bf9a:	69ba      	ldr	r2, [r7, #24]
 800bf9c:	4013      	ands	r3, r2
 800bf9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	691a      	ldr	r2, [r3, #16]
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	f003 0307 	and.w	r3, r3, #7
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	fa02 f303 	lsl.w	r3, r2, r3
 800bfb0:	69ba      	ldr	r2, [r7, #24]
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800bfb6:	69fb      	ldr	r3, [r7, #28]
 800bfb8:	08da      	lsrs	r2, r3, #3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	3208      	adds	r2, #8
 800bfbe:	69b9      	ldr	r1, [r7, #24]
 800bfc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bfca:	69fb      	ldr	r3, [r7, #28]
 800bfcc:	005b      	lsls	r3, r3, #1
 800bfce:	2203      	movs	r2, #3
 800bfd0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfd4:	43db      	mvns	r3, r3
 800bfd6:	69ba      	ldr	r2, [r7, #24]
 800bfd8:	4013      	ands	r3, r2
 800bfda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	f003 0203 	and.w	r2, r3, #3
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	005b      	lsls	r3, r3, #1
 800bfe8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfec:	69ba      	ldr	r2, [r7, #24]
 800bfee:	4313      	orrs	r3, r2
 800bff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	69ba      	ldr	r2, [r7, #24]
 800bff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c000:	2b00      	cmp	r3, #0
 800c002:	f000 80be 	beq.w	800c182 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c006:	4b65      	ldr	r3, [pc, #404]	; (800c19c <HAL_GPIO_Init+0x320>)
 800c008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c00a:	4a64      	ldr	r2, [pc, #400]	; (800c19c <HAL_GPIO_Init+0x320>)
 800c00c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c010:	6453      	str	r3, [r2, #68]	; 0x44
 800c012:	4b62      	ldr	r3, [pc, #392]	; (800c19c <HAL_GPIO_Init+0x320>)
 800c014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c01a:	60fb      	str	r3, [r7, #12]
 800c01c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800c01e:	4a60      	ldr	r2, [pc, #384]	; (800c1a0 <HAL_GPIO_Init+0x324>)
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	089b      	lsrs	r3, r3, #2
 800c024:	3302      	adds	r3, #2
 800c026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c02a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	f003 0303 	and.w	r3, r3, #3
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	220f      	movs	r2, #15
 800c036:	fa02 f303 	lsl.w	r3, r2, r3
 800c03a:	43db      	mvns	r3, r3
 800c03c:	69ba      	ldr	r2, [r7, #24]
 800c03e:	4013      	ands	r3, r2
 800c040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	4a57      	ldr	r2, [pc, #348]	; (800c1a4 <HAL_GPIO_Init+0x328>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d037      	beq.n	800c0ba <HAL_GPIO_Init+0x23e>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4a56      	ldr	r2, [pc, #344]	; (800c1a8 <HAL_GPIO_Init+0x32c>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d031      	beq.n	800c0b6 <HAL_GPIO_Init+0x23a>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	4a55      	ldr	r2, [pc, #340]	; (800c1ac <HAL_GPIO_Init+0x330>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d02b      	beq.n	800c0b2 <HAL_GPIO_Init+0x236>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	4a54      	ldr	r2, [pc, #336]	; (800c1b0 <HAL_GPIO_Init+0x334>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d025      	beq.n	800c0ae <HAL_GPIO_Init+0x232>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	4a53      	ldr	r2, [pc, #332]	; (800c1b4 <HAL_GPIO_Init+0x338>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d01f      	beq.n	800c0aa <HAL_GPIO_Init+0x22e>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	4a52      	ldr	r2, [pc, #328]	; (800c1b8 <HAL_GPIO_Init+0x33c>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d019      	beq.n	800c0a6 <HAL_GPIO_Init+0x22a>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	4a51      	ldr	r2, [pc, #324]	; (800c1bc <HAL_GPIO_Init+0x340>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d013      	beq.n	800c0a2 <HAL_GPIO_Init+0x226>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	4a50      	ldr	r2, [pc, #320]	; (800c1c0 <HAL_GPIO_Init+0x344>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d00d      	beq.n	800c09e <HAL_GPIO_Init+0x222>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	4a4f      	ldr	r2, [pc, #316]	; (800c1c4 <HAL_GPIO_Init+0x348>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d007      	beq.n	800c09a <HAL_GPIO_Init+0x21e>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4a4e      	ldr	r2, [pc, #312]	; (800c1c8 <HAL_GPIO_Init+0x34c>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d101      	bne.n	800c096 <HAL_GPIO_Init+0x21a>
 800c092:	2309      	movs	r3, #9
 800c094:	e012      	b.n	800c0bc <HAL_GPIO_Init+0x240>
 800c096:	230a      	movs	r3, #10
 800c098:	e010      	b.n	800c0bc <HAL_GPIO_Init+0x240>
 800c09a:	2308      	movs	r3, #8
 800c09c:	e00e      	b.n	800c0bc <HAL_GPIO_Init+0x240>
 800c09e:	2307      	movs	r3, #7
 800c0a0:	e00c      	b.n	800c0bc <HAL_GPIO_Init+0x240>
 800c0a2:	2306      	movs	r3, #6
 800c0a4:	e00a      	b.n	800c0bc <HAL_GPIO_Init+0x240>
 800c0a6:	2305      	movs	r3, #5
 800c0a8:	e008      	b.n	800c0bc <HAL_GPIO_Init+0x240>
 800c0aa:	2304      	movs	r3, #4
 800c0ac:	e006      	b.n	800c0bc <HAL_GPIO_Init+0x240>
 800c0ae:	2303      	movs	r3, #3
 800c0b0:	e004      	b.n	800c0bc <HAL_GPIO_Init+0x240>
 800c0b2:	2302      	movs	r3, #2
 800c0b4:	e002      	b.n	800c0bc <HAL_GPIO_Init+0x240>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e000      	b.n	800c0bc <HAL_GPIO_Init+0x240>
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	69fa      	ldr	r2, [r7, #28]
 800c0be:	f002 0203 	and.w	r2, r2, #3
 800c0c2:	0092      	lsls	r2, r2, #2
 800c0c4:	4093      	lsls	r3, r2
 800c0c6:	69ba      	ldr	r2, [r7, #24]
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800c0cc:	4934      	ldr	r1, [pc, #208]	; (800c1a0 <HAL_GPIO_Init+0x324>)
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	089b      	lsrs	r3, r3, #2
 800c0d2:	3302      	adds	r3, #2
 800c0d4:	69ba      	ldr	r2, [r7, #24]
 800c0d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c0da:	4b3c      	ldr	r3, [pc, #240]	; (800c1cc <HAL_GPIO_Init+0x350>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	43db      	mvns	r3, r3
 800c0e4:	69ba      	ldr	r2, [r7, #24]
 800c0e6:	4013      	ands	r3, r2
 800c0e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d003      	beq.n	800c0fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c0f6:	69ba      	ldr	r2, [r7, #24]
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c0fe:	4a33      	ldr	r2, [pc, #204]	; (800c1cc <HAL_GPIO_Init+0x350>)
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c104:	4b31      	ldr	r3, [pc, #196]	; (800c1cc <HAL_GPIO_Init+0x350>)
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	43db      	mvns	r3, r3
 800c10e:	69ba      	ldr	r2, [r7, #24]
 800c110:	4013      	ands	r3, r2
 800c112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d003      	beq.n	800c128 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c120:	69ba      	ldr	r2, [r7, #24]
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	4313      	orrs	r3, r2
 800c126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c128:	4a28      	ldr	r2, [pc, #160]	; (800c1cc <HAL_GPIO_Init+0x350>)
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c12e:	4b27      	ldr	r3, [pc, #156]	; (800c1cc <HAL_GPIO_Init+0x350>)
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	43db      	mvns	r3, r3
 800c138:	69ba      	ldr	r2, [r7, #24]
 800c13a:	4013      	ands	r3, r2
 800c13c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c146:	2b00      	cmp	r3, #0
 800c148:	d003      	beq.n	800c152 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c14a:	69ba      	ldr	r2, [r7, #24]
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	4313      	orrs	r3, r2
 800c150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c152:	4a1e      	ldr	r2, [pc, #120]	; (800c1cc <HAL_GPIO_Init+0x350>)
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c158:	4b1c      	ldr	r3, [pc, #112]	; (800c1cc <HAL_GPIO_Init+0x350>)
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	43db      	mvns	r3, r3
 800c162:	69ba      	ldr	r2, [r7, #24]
 800c164:	4013      	ands	r3, r2
 800c166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	685b      	ldr	r3, [r3, #4]
 800c16c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c170:	2b00      	cmp	r3, #0
 800c172:	d003      	beq.n	800c17c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c174:	69ba      	ldr	r2, [r7, #24]
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	4313      	orrs	r3, r2
 800c17a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c17c:	4a13      	ldr	r2, [pc, #76]	; (800c1cc <HAL_GPIO_Init+0x350>)
 800c17e:	69bb      	ldr	r3, [r7, #24]
 800c180:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	3301      	adds	r3, #1
 800c186:	61fb      	str	r3, [r7, #28]
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	2b0f      	cmp	r3, #15
 800c18c:	f67f ae86 	bls.w	800be9c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800c190:	bf00      	nop
 800c192:	3724      	adds	r7, #36	; 0x24
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr
 800c19c:	40023800 	.word	0x40023800
 800c1a0:	40013800 	.word	0x40013800
 800c1a4:	40020000 	.word	0x40020000
 800c1a8:	40020400 	.word	0x40020400
 800c1ac:	40020800 	.word	0x40020800
 800c1b0:	40020c00 	.word	0x40020c00
 800c1b4:	40021000 	.word	0x40021000
 800c1b8:	40021400 	.word	0x40021400
 800c1bc:	40021800 	.word	0x40021800
 800c1c0:	40021c00 	.word	0x40021c00
 800c1c4:	40022000 	.word	0x40022000
 800c1c8:	40022400 	.word	0x40022400
 800c1cc:	40013c00 	.word	0x40013c00

0800c1d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	460b      	mov	r3, r1
 800c1da:	807b      	strh	r3, [r7, #2]
 800c1dc:	4613      	mov	r3, r2
 800c1de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c1e0:	787b      	ldrb	r3, [r7, #1]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d003      	beq.n	800c1ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c1e6:	887a      	ldrh	r2, [r7, #2]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800c1ec:	e003      	b.n	800c1f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800c1ee:	887b      	ldrh	r3, [r7, #2]
 800c1f0:	041a      	lsls	r2, r3, #16
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	619a      	str	r2, [r3, #24]
}
 800c1f6:	bf00      	nop
 800c1f8:	370c      	adds	r7, #12
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr

0800c202 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c202:	b480      	push	{r7}
 800c204:	b083      	sub	sp, #12
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
 800c20a:	460b      	mov	r3, r1
 800c20c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	695a      	ldr	r2, [r3, #20]
 800c212:	887b      	ldrh	r3, [r7, #2]
 800c214:	4013      	ands	r3, r2
 800c216:	2b00      	cmp	r3, #0
 800c218:	d004      	beq.n	800c224 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800c21a:	887b      	ldrh	r3, [r7, #2]
 800c21c:	041a      	lsls	r2, r3, #16
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800c222:	e002      	b.n	800c22a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c224:	887a      	ldrh	r2, [r7, #2]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	619a      	str	r2, [r3, #24]
}
 800c22a:	bf00      	nop
 800c22c:	370c      	adds	r7, #12
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr

0800c236 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c236:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c238:	b08f      	sub	sp, #60	; 0x3c
 800c23a:	af0a      	add	r7, sp, #40	; 0x28
 800c23c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d101      	bne.n	800c248 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c244:	2301      	movs	r3, #1
 800c246:	e116      	b.n	800c476 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c254:	b2db      	uxtb	r3, r3
 800c256:	2b00      	cmp	r3, #0
 800c258:	d106      	bne.n	800c268 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f7fd fc3a 	bl	8009adc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2203      	movs	r2, #3
 800c26c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d102      	bne.n	800c282 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4618      	mov	r0, r3
 800c288:	f003 f9aa 	bl	800f5e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	603b      	str	r3, [r7, #0]
 800c292:	687e      	ldr	r6, [r7, #4]
 800c294:	466d      	mov	r5, sp
 800c296:	f106 0410 	add.w	r4, r6, #16
 800c29a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c29c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c29e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c2a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c2a6:	e885 0003 	stmia.w	r5, {r0, r1}
 800c2aa:	1d33      	adds	r3, r6, #4
 800c2ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c2ae:	6838      	ldr	r0, [r7, #0]
 800c2b0:	f003 f93e 	bl	800f530 <USB_CoreInit>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d005      	beq.n	800c2c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2202      	movs	r2, #2
 800c2be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e0d7      	b.n	800c476 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2100      	movs	r1, #0
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f003 f998 	bl	800f602 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	73fb      	strb	r3, [r7, #15]
 800c2d6:	e04a      	b.n	800c36e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c2d8:	7bfa      	ldrb	r2, [r7, #15]
 800c2da:	6879      	ldr	r1, [r7, #4]
 800c2dc:	4613      	mov	r3, r2
 800c2de:	00db      	lsls	r3, r3, #3
 800c2e0:	1a9b      	subs	r3, r3, r2
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	440b      	add	r3, r1
 800c2e6:	333d      	adds	r3, #61	; 0x3d
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c2ec:	7bfa      	ldrb	r2, [r7, #15]
 800c2ee:	6879      	ldr	r1, [r7, #4]
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	00db      	lsls	r3, r3, #3
 800c2f4:	1a9b      	subs	r3, r3, r2
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	440b      	add	r3, r1
 800c2fa:	333c      	adds	r3, #60	; 0x3c
 800c2fc:	7bfa      	ldrb	r2, [r7, #15]
 800c2fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c300:	7bfa      	ldrb	r2, [r7, #15]
 800c302:	7bfb      	ldrb	r3, [r7, #15]
 800c304:	b298      	uxth	r0, r3
 800c306:	6879      	ldr	r1, [r7, #4]
 800c308:	4613      	mov	r3, r2
 800c30a:	00db      	lsls	r3, r3, #3
 800c30c:	1a9b      	subs	r3, r3, r2
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	440b      	add	r3, r1
 800c312:	3342      	adds	r3, #66	; 0x42
 800c314:	4602      	mov	r2, r0
 800c316:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c318:	7bfa      	ldrb	r2, [r7, #15]
 800c31a:	6879      	ldr	r1, [r7, #4]
 800c31c:	4613      	mov	r3, r2
 800c31e:	00db      	lsls	r3, r3, #3
 800c320:	1a9b      	subs	r3, r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	440b      	add	r3, r1
 800c326:	333f      	adds	r3, #63	; 0x3f
 800c328:	2200      	movs	r2, #0
 800c32a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c32c:	7bfa      	ldrb	r2, [r7, #15]
 800c32e:	6879      	ldr	r1, [r7, #4]
 800c330:	4613      	mov	r3, r2
 800c332:	00db      	lsls	r3, r3, #3
 800c334:	1a9b      	subs	r3, r3, r2
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	440b      	add	r3, r1
 800c33a:	3344      	adds	r3, #68	; 0x44
 800c33c:	2200      	movs	r2, #0
 800c33e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c340:	7bfa      	ldrb	r2, [r7, #15]
 800c342:	6879      	ldr	r1, [r7, #4]
 800c344:	4613      	mov	r3, r2
 800c346:	00db      	lsls	r3, r3, #3
 800c348:	1a9b      	subs	r3, r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	440b      	add	r3, r1
 800c34e:	3348      	adds	r3, #72	; 0x48
 800c350:	2200      	movs	r2, #0
 800c352:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c354:	7bfa      	ldrb	r2, [r7, #15]
 800c356:	6879      	ldr	r1, [r7, #4]
 800c358:	4613      	mov	r3, r2
 800c35a:	00db      	lsls	r3, r3, #3
 800c35c:	1a9b      	subs	r3, r3, r2
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	440b      	add	r3, r1
 800c362:	3350      	adds	r3, #80	; 0x50
 800c364:	2200      	movs	r2, #0
 800c366:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c368:	7bfb      	ldrb	r3, [r7, #15]
 800c36a:	3301      	adds	r3, #1
 800c36c:	73fb      	strb	r3, [r7, #15]
 800c36e:	7bfa      	ldrb	r2, [r7, #15]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	429a      	cmp	r2, r3
 800c376:	d3af      	bcc.n	800c2d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c378:	2300      	movs	r3, #0
 800c37a:	73fb      	strb	r3, [r7, #15]
 800c37c:	e044      	b.n	800c408 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c37e:	7bfa      	ldrb	r2, [r7, #15]
 800c380:	6879      	ldr	r1, [r7, #4]
 800c382:	4613      	mov	r3, r2
 800c384:	00db      	lsls	r3, r3, #3
 800c386:	1a9b      	subs	r3, r3, r2
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	440b      	add	r3, r1
 800c38c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c390:	2200      	movs	r2, #0
 800c392:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c394:	7bfa      	ldrb	r2, [r7, #15]
 800c396:	6879      	ldr	r1, [r7, #4]
 800c398:	4613      	mov	r3, r2
 800c39a:	00db      	lsls	r3, r3, #3
 800c39c:	1a9b      	subs	r3, r3, r2
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	440b      	add	r3, r1
 800c3a2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c3a6:	7bfa      	ldrb	r2, [r7, #15]
 800c3a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c3aa:	7bfa      	ldrb	r2, [r7, #15]
 800c3ac:	6879      	ldr	r1, [r7, #4]
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	00db      	lsls	r3, r3, #3
 800c3b2:	1a9b      	subs	r3, r3, r2
 800c3b4:	009b      	lsls	r3, r3, #2
 800c3b6:	440b      	add	r3, r1
 800c3b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c3bc:	2200      	movs	r2, #0
 800c3be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c3c0:	7bfa      	ldrb	r2, [r7, #15]
 800c3c2:	6879      	ldr	r1, [r7, #4]
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	00db      	lsls	r3, r3, #3
 800c3c8:	1a9b      	subs	r3, r3, r2
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	440b      	add	r3, r1
 800c3ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c3d6:	7bfa      	ldrb	r2, [r7, #15]
 800c3d8:	6879      	ldr	r1, [r7, #4]
 800c3da:	4613      	mov	r3, r2
 800c3dc:	00db      	lsls	r3, r3, #3
 800c3de:	1a9b      	subs	r3, r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	440b      	add	r3, r1
 800c3e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c3ec:	7bfa      	ldrb	r2, [r7, #15]
 800c3ee:	6879      	ldr	r1, [r7, #4]
 800c3f0:	4613      	mov	r3, r2
 800c3f2:	00db      	lsls	r3, r3, #3
 800c3f4:	1a9b      	subs	r3, r3, r2
 800c3f6:	009b      	lsls	r3, r3, #2
 800c3f8:	440b      	add	r3, r1
 800c3fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c3fe:	2200      	movs	r2, #0
 800c400:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c402:	7bfb      	ldrb	r3, [r7, #15]
 800c404:	3301      	adds	r3, #1
 800c406:	73fb      	strb	r3, [r7, #15]
 800c408:	7bfa      	ldrb	r2, [r7, #15]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d3b5      	bcc.n	800c37e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	603b      	str	r3, [r7, #0]
 800c418:	687e      	ldr	r6, [r7, #4]
 800c41a:	466d      	mov	r5, sp
 800c41c:	f106 0410 	add.w	r4, r6, #16
 800c420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c422:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c428:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c42c:	e885 0003 	stmia.w	r5, {r0, r1}
 800c430:	1d33      	adds	r3, r6, #4
 800c432:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c434:	6838      	ldr	r0, [r7, #0]
 800c436:	f003 f90f 	bl	800f658 <USB_DevInit>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d005      	beq.n	800c44c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2202      	movs	r2, #2
 800c444:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c448:	2301      	movs	r3, #1
 800c44a:	e014      	b.n	800c476 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2201      	movs	r2, #1
 800c458:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c460:	2b01      	cmp	r3, #1
 800c462:	d102      	bne.n	800c46a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 f80b 	bl	800c480 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4618      	mov	r0, r3
 800c470:	f003 fac1 	bl	800f9f6 <USB_DevDisconnect>

  return HAL_OK;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3714      	adds	r7, #20
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800c480 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c480:	b480      	push	{r7}
 800c482:	b085      	sub	sp, #20
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2201      	movs	r2, #1
 800c492:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	699b      	ldr	r3, [r3, #24]
 800c4a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4ae:	4b05      	ldr	r3, [pc, #20]	; (800c4c4 <HAL_PCDEx_ActivateLPM+0x44>)
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3714      	adds	r7, #20
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr
 800c4c4:	10000003 	.word	0x10000003

0800c4c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c4cc:	4b05      	ldr	r3, [pc, #20]	; (800c4e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a04      	ldr	r2, [pc, #16]	; (800c4e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c4d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4d6:	6013      	str	r3, [r2, #0]
}
 800c4d8:	bf00      	nop
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr
 800c4e2:	bf00      	nop
 800c4e4:	40007000 	.word	0x40007000

0800c4e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c4f2:	4b23      	ldr	r3, [pc, #140]	; (800c580 <HAL_PWREx_EnableOverDrive+0x98>)
 800c4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f6:	4a22      	ldr	r2, [pc, #136]	; (800c580 <HAL_PWREx_EnableOverDrive+0x98>)
 800c4f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4fc:	6413      	str	r3, [r2, #64]	; 0x40
 800c4fe:	4b20      	ldr	r3, [pc, #128]	; (800c580 <HAL_PWREx_EnableOverDrive+0x98>)
 800c500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c506:	603b      	str	r3, [r7, #0]
 800c508:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c50a:	4b1e      	ldr	r3, [pc, #120]	; (800c584 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a1d      	ldr	r2, [pc, #116]	; (800c584 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c514:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c516:	f7fd fcfb 	bl	8009f10 <HAL_GetTick>
 800c51a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c51c:	e009      	b.n	800c532 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c51e:	f7fd fcf7 	bl	8009f10 <HAL_GetTick>
 800c522:	4602      	mov	r2, r0
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	1ad3      	subs	r3, r2, r3
 800c528:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c52c:	d901      	bls.n	800c532 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800c52e:	2303      	movs	r3, #3
 800c530:	e022      	b.n	800c578 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c532:	4b14      	ldr	r3, [pc, #80]	; (800c584 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c53a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c53e:	d1ee      	bne.n	800c51e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c540:	4b10      	ldr	r3, [pc, #64]	; (800c584 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a0f      	ldr	r2, [pc, #60]	; (800c584 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c54a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c54c:	f7fd fce0 	bl	8009f10 <HAL_GetTick>
 800c550:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c552:	e009      	b.n	800c568 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c554:	f7fd fcdc 	bl	8009f10 <HAL_GetTick>
 800c558:	4602      	mov	r2, r0
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	1ad3      	subs	r3, r2, r3
 800c55e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c562:	d901      	bls.n	800c568 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800c564:	2303      	movs	r3, #3
 800c566:	e007      	b.n	800c578 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c568:	4b06      	ldr	r3, [pc, #24]	; (800c584 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c570:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c574:	d1ee      	bne.n	800c554 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800c576:	2300      	movs	r3, #0
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3708      	adds	r7, #8
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	40023800 	.word	0x40023800
 800c584:	40007000 	.word	0x40007000

0800c588 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b086      	sub	sp, #24
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c590:	2300      	movs	r3, #0
 800c592:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d101      	bne.n	800c59e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c59a:	2301      	movs	r3, #1
 800c59c:	e29b      	b.n	800cad6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f003 0301 	and.w	r3, r3, #1
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	f000 8087 	beq.w	800c6ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c5ac:	4b96      	ldr	r3, [pc, #600]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c5ae:	689b      	ldr	r3, [r3, #8]
 800c5b0:	f003 030c 	and.w	r3, r3, #12
 800c5b4:	2b04      	cmp	r3, #4
 800c5b6:	d00c      	beq.n	800c5d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c5b8:	4b93      	ldr	r3, [pc, #588]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	f003 030c 	and.w	r3, r3, #12
 800c5c0:	2b08      	cmp	r3, #8
 800c5c2:	d112      	bne.n	800c5ea <HAL_RCC_OscConfig+0x62>
 800c5c4:	4b90      	ldr	r3, [pc, #576]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5d0:	d10b      	bne.n	800c5ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c5d2:	4b8d      	ldr	r3, [pc, #564]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d06c      	beq.n	800c6b8 <HAL_RCC_OscConfig+0x130>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d168      	bne.n	800c6b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e275      	b.n	800cad6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5f2:	d106      	bne.n	800c602 <HAL_RCC_OscConfig+0x7a>
 800c5f4:	4b84      	ldr	r3, [pc, #528]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a83      	ldr	r2, [pc, #524]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c5fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5fe:	6013      	str	r3, [r2, #0]
 800c600:	e02e      	b.n	800c660 <HAL_RCC_OscConfig+0xd8>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d10c      	bne.n	800c624 <HAL_RCC_OscConfig+0x9c>
 800c60a:	4b7f      	ldr	r3, [pc, #508]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a7e      	ldr	r2, [pc, #504]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c614:	6013      	str	r3, [r2, #0]
 800c616:	4b7c      	ldr	r3, [pc, #496]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4a7b      	ldr	r2, [pc, #492]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c61c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c620:	6013      	str	r3, [r2, #0]
 800c622:	e01d      	b.n	800c660 <HAL_RCC_OscConfig+0xd8>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c62c:	d10c      	bne.n	800c648 <HAL_RCC_OscConfig+0xc0>
 800c62e:	4b76      	ldr	r3, [pc, #472]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	4a75      	ldr	r2, [pc, #468]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c638:	6013      	str	r3, [r2, #0]
 800c63a:	4b73      	ldr	r3, [pc, #460]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4a72      	ldr	r2, [pc, #456]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c644:	6013      	str	r3, [r2, #0]
 800c646:	e00b      	b.n	800c660 <HAL_RCC_OscConfig+0xd8>
 800c648:	4b6f      	ldr	r3, [pc, #444]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4a6e      	ldr	r2, [pc, #440]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c64e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c652:	6013      	str	r3, [r2, #0]
 800c654:	4b6c      	ldr	r3, [pc, #432]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4a6b      	ldr	r2, [pc, #428]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c65a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c65e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d013      	beq.n	800c690 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c668:	f7fd fc52 	bl	8009f10 <HAL_GetTick>
 800c66c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c66e:	e008      	b.n	800c682 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c670:	f7fd fc4e 	bl	8009f10 <HAL_GetTick>
 800c674:	4602      	mov	r2, r0
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	2b64      	cmp	r3, #100	; 0x64
 800c67c:	d901      	bls.n	800c682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c67e:	2303      	movs	r3, #3
 800c680:	e229      	b.n	800cad6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c682:	4b61      	ldr	r3, [pc, #388]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d0f0      	beq.n	800c670 <HAL_RCC_OscConfig+0xe8>
 800c68e:	e014      	b.n	800c6ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c690:	f7fd fc3e 	bl	8009f10 <HAL_GetTick>
 800c694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c696:	e008      	b.n	800c6aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c698:	f7fd fc3a 	bl	8009f10 <HAL_GetTick>
 800c69c:	4602      	mov	r2, r0
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	1ad3      	subs	r3, r2, r3
 800c6a2:	2b64      	cmp	r3, #100	; 0x64
 800c6a4:	d901      	bls.n	800c6aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c6a6:	2303      	movs	r3, #3
 800c6a8:	e215      	b.n	800cad6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c6aa:	4b57      	ldr	r3, [pc, #348]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d1f0      	bne.n	800c698 <HAL_RCC_OscConfig+0x110>
 800c6b6:	e000      	b.n	800c6ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c6b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f003 0302 	and.w	r3, r3, #2
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d069      	beq.n	800c79a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c6c6:	4b50      	ldr	r3, [pc, #320]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c6c8:	689b      	ldr	r3, [r3, #8]
 800c6ca:	f003 030c 	and.w	r3, r3, #12
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d00b      	beq.n	800c6ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c6d2:	4b4d      	ldr	r3, [pc, #308]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c6d4:	689b      	ldr	r3, [r3, #8]
 800c6d6:	f003 030c 	and.w	r3, r3, #12
 800c6da:	2b08      	cmp	r3, #8
 800c6dc:	d11c      	bne.n	800c718 <HAL_RCC_OscConfig+0x190>
 800c6de:	4b4a      	ldr	r3, [pc, #296]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d116      	bne.n	800c718 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c6ea:	4b47      	ldr	r3, [pc, #284]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f003 0302 	and.w	r3, r3, #2
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d005      	beq.n	800c702 <HAL_RCC_OscConfig+0x17a>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d001      	beq.n	800c702 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c6fe:	2301      	movs	r3, #1
 800c700:	e1e9      	b.n	800cad6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c702:	4b41      	ldr	r3, [pc, #260]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	691b      	ldr	r3, [r3, #16]
 800c70e:	00db      	lsls	r3, r3, #3
 800c710:	493d      	ldr	r1, [pc, #244]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c712:	4313      	orrs	r3, r2
 800c714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c716:	e040      	b.n	800c79a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d023      	beq.n	800c768 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c720:	4b39      	ldr	r3, [pc, #228]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4a38      	ldr	r2, [pc, #224]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c726:	f043 0301 	orr.w	r3, r3, #1
 800c72a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c72c:	f7fd fbf0 	bl	8009f10 <HAL_GetTick>
 800c730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c732:	e008      	b.n	800c746 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c734:	f7fd fbec 	bl	8009f10 <HAL_GetTick>
 800c738:	4602      	mov	r2, r0
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	1ad3      	subs	r3, r2, r3
 800c73e:	2b02      	cmp	r3, #2
 800c740:	d901      	bls.n	800c746 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c742:	2303      	movs	r3, #3
 800c744:	e1c7      	b.n	800cad6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c746:	4b30      	ldr	r3, [pc, #192]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f003 0302 	and.w	r3, r3, #2
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d0f0      	beq.n	800c734 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c752:	4b2d      	ldr	r3, [pc, #180]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	00db      	lsls	r3, r3, #3
 800c760:	4929      	ldr	r1, [pc, #164]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c762:	4313      	orrs	r3, r2
 800c764:	600b      	str	r3, [r1, #0]
 800c766:	e018      	b.n	800c79a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c768:	4b27      	ldr	r3, [pc, #156]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a26      	ldr	r2, [pc, #152]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c76e:	f023 0301 	bic.w	r3, r3, #1
 800c772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c774:	f7fd fbcc 	bl	8009f10 <HAL_GetTick>
 800c778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c77a:	e008      	b.n	800c78e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c77c:	f7fd fbc8 	bl	8009f10 <HAL_GetTick>
 800c780:	4602      	mov	r2, r0
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	1ad3      	subs	r3, r2, r3
 800c786:	2b02      	cmp	r3, #2
 800c788:	d901      	bls.n	800c78e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c78a:	2303      	movs	r3, #3
 800c78c:	e1a3      	b.n	800cad6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c78e:	4b1e      	ldr	r3, [pc, #120]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f003 0302 	and.w	r3, r3, #2
 800c796:	2b00      	cmp	r3, #0
 800c798:	d1f0      	bne.n	800c77c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f003 0308 	and.w	r3, r3, #8
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d038      	beq.n	800c818 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	695b      	ldr	r3, [r3, #20]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d019      	beq.n	800c7e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c7ae:	4b16      	ldr	r3, [pc, #88]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c7b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7b2:	4a15      	ldr	r2, [pc, #84]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c7b4:	f043 0301 	orr.w	r3, r3, #1
 800c7b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7ba:	f7fd fba9 	bl	8009f10 <HAL_GetTick>
 800c7be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c7c0:	e008      	b.n	800c7d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c7c2:	f7fd fba5 	bl	8009f10 <HAL_GetTick>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	1ad3      	subs	r3, r2, r3
 800c7cc:	2b02      	cmp	r3, #2
 800c7ce:	d901      	bls.n	800c7d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c7d0:	2303      	movs	r3, #3
 800c7d2:	e180      	b.n	800cad6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c7d4:	4b0c      	ldr	r3, [pc, #48]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c7d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7d8:	f003 0302 	and.w	r3, r3, #2
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d0f0      	beq.n	800c7c2 <HAL_RCC_OscConfig+0x23a>
 800c7e0:	e01a      	b.n	800c818 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c7e2:	4b09      	ldr	r3, [pc, #36]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c7e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7e6:	4a08      	ldr	r2, [pc, #32]	; (800c808 <HAL_RCC_OscConfig+0x280>)
 800c7e8:	f023 0301 	bic.w	r3, r3, #1
 800c7ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7ee:	f7fd fb8f 	bl	8009f10 <HAL_GetTick>
 800c7f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c7f4:	e00a      	b.n	800c80c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c7f6:	f7fd fb8b 	bl	8009f10 <HAL_GetTick>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	1ad3      	subs	r3, r2, r3
 800c800:	2b02      	cmp	r3, #2
 800c802:	d903      	bls.n	800c80c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c804:	2303      	movs	r3, #3
 800c806:	e166      	b.n	800cad6 <HAL_RCC_OscConfig+0x54e>
 800c808:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c80c:	4b92      	ldr	r3, [pc, #584]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c80e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c810:	f003 0302 	and.w	r3, r3, #2
 800c814:	2b00      	cmp	r3, #0
 800c816:	d1ee      	bne.n	800c7f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f003 0304 	and.w	r3, r3, #4
 800c820:	2b00      	cmp	r3, #0
 800c822:	f000 80a4 	beq.w	800c96e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c826:	4b8c      	ldr	r3, [pc, #560]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c82a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d10d      	bne.n	800c84e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c832:	4b89      	ldr	r3, [pc, #548]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c836:	4a88      	ldr	r2, [pc, #544]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c83c:	6413      	str	r3, [r2, #64]	; 0x40
 800c83e:	4b86      	ldr	r3, [pc, #536]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c846:	60bb      	str	r3, [r7, #8]
 800c848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c84a:	2301      	movs	r3, #1
 800c84c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c84e:	4b83      	ldr	r3, [pc, #524]	; (800ca5c <HAL_RCC_OscConfig+0x4d4>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c856:	2b00      	cmp	r3, #0
 800c858:	d118      	bne.n	800c88c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c85a:	4b80      	ldr	r3, [pc, #512]	; (800ca5c <HAL_RCC_OscConfig+0x4d4>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a7f      	ldr	r2, [pc, #508]	; (800ca5c <HAL_RCC_OscConfig+0x4d4>)
 800c860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c866:	f7fd fb53 	bl	8009f10 <HAL_GetTick>
 800c86a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c86c:	e008      	b.n	800c880 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c86e:	f7fd fb4f 	bl	8009f10 <HAL_GetTick>
 800c872:	4602      	mov	r2, r0
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	1ad3      	subs	r3, r2, r3
 800c878:	2b64      	cmp	r3, #100	; 0x64
 800c87a:	d901      	bls.n	800c880 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c87c:	2303      	movs	r3, #3
 800c87e:	e12a      	b.n	800cad6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c880:	4b76      	ldr	r3, [pc, #472]	; (800ca5c <HAL_RCC_OscConfig+0x4d4>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d0f0      	beq.n	800c86e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	689b      	ldr	r3, [r3, #8]
 800c890:	2b01      	cmp	r3, #1
 800c892:	d106      	bne.n	800c8a2 <HAL_RCC_OscConfig+0x31a>
 800c894:	4b70      	ldr	r3, [pc, #448]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c898:	4a6f      	ldr	r2, [pc, #444]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c89a:	f043 0301 	orr.w	r3, r3, #1
 800c89e:	6713      	str	r3, [r2, #112]	; 0x70
 800c8a0:	e02d      	b.n	800c8fe <HAL_RCC_OscConfig+0x376>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d10c      	bne.n	800c8c4 <HAL_RCC_OscConfig+0x33c>
 800c8aa:	4b6b      	ldr	r3, [pc, #428]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c8ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8ae:	4a6a      	ldr	r2, [pc, #424]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c8b0:	f023 0301 	bic.w	r3, r3, #1
 800c8b4:	6713      	str	r3, [r2, #112]	; 0x70
 800c8b6:	4b68      	ldr	r3, [pc, #416]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c8b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8ba:	4a67      	ldr	r2, [pc, #412]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c8bc:	f023 0304 	bic.w	r3, r3, #4
 800c8c0:	6713      	str	r3, [r2, #112]	; 0x70
 800c8c2:	e01c      	b.n	800c8fe <HAL_RCC_OscConfig+0x376>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	2b05      	cmp	r3, #5
 800c8ca:	d10c      	bne.n	800c8e6 <HAL_RCC_OscConfig+0x35e>
 800c8cc:	4b62      	ldr	r3, [pc, #392]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c8ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8d0:	4a61      	ldr	r2, [pc, #388]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c8d2:	f043 0304 	orr.w	r3, r3, #4
 800c8d6:	6713      	str	r3, [r2, #112]	; 0x70
 800c8d8:	4b5f      	ldr	r3, [pc, #380]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c8da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8dc:	4a5e      	ldr	r2, [pc, #376]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c8de:	f043 0301 	orr.w	r3, r3, #1
 800c8e2:	6713      	str	r3, [r2, #112]	; 0x70
 800c8e4:	e00b      	b.n	800c8fe <HAL_RCC_OscConfig+0x376>
 800c8e6:	4b5c      	ldr	r3, [pc, #368]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c8e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8ea:	4a5b      	ldr	r2, [pc, #364]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c8ec:	f023 0301 	bic.w	r3, r3, #1
 800c8f0:	6713      	str	r3, [r2, #112]	; 0x70
 800c8f2:	4b59      	ldr	r3, [pc, #356]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c8f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8f6:	4a58      	ldr	r2, [pc, #352]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c8f8:	f023 0304 	bic.w	r3, r3, #4
 800c8fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	689b      	ldr	r3, [r3, #8]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d015      	beq.n	800c932 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c906:	f7fd fb03 	bl	8009f10 <HAL_GetTick>
 800c90a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c90c:	e00a      	b.n	800c924 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c90e:	f7fd faff 	bl	8009f10 <HAL_GetTick>
 800c912:	4602      	mov	r2, r0
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	1ad3      	subs	r3, r2, r3
 800c918:	f241 3288 	movw	r2, #5000	; 0x1388
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d901      	bls.n	800c924 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c920:	2303      	movs	r3, #3
 800c922:	e0d8      	b.n	800cad6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c924:	4b4c      	ldr	r3, [pc, #304]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c928:	f003 0302 	and.w	r3, r3, #2
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d0ee      	beq.n	800c90e <HAL_RCC_OscConfig+0x386>
 800c930:	e014      	b.n	800c95c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c932:	f7fd faed 	bl	8009f10 <HAL_GetTick>
 800c936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c938:	e00a      	b.n	800c950 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c93a:	f7fd fae9 	bl	8009f10 <HAL_GetTick>
 800c93e:	4602      	mov	r2, r0
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	1ad3      	subs	r3, r2, r3
 800c944:	f241 3288 	movw	r2, #5000	; 0x1388
 800c948:	4293      	cmp	r3, r2
 800c94a:	d901      	bls.n	800c950 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c94c:	2303      	movs	r3, #3
 800c94e:	e0c2      	b.n	800cad6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c950:	4b41      	ldr	r3, [pc, #260]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c954:	f003 0302 	and.w	r3, r3, #2
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d1ee      	bne.n	800c93a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c95c:	7dfb      	ldrb	r3, [r7, #23]
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d105      	bne.n	800c96e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c962:	4b3d      	ldr	r3, [pc, #244]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c966:	4a3c      	ldr	r2, [pc, #240]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c96c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	699b      	ldr	r3, [r3, #24]
 800c972:	2b00      	cmp	r3, #0
 800c974:	f000 80ae 	beq.w	800cad4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c978:	4b37      	ldr	r3, [pc, #220]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c97a:	689b      	ldr	r3, [r3, #8]
 800c97c:	f003 030c 	and.w	r3, r3, #12
 800c980:	2b08      	cmp	r3, #8
 800c982:	d06d      	beq.n	800ca60 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	699b      	ldr	r3, [r3, #24]
 800c988:	2b02      	cmp	r3, #2
 800c98a:	d14b      	bne.n	800ca24 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c98c:	4b32      	ldr	r3, [pc, #200]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a31      	ldr	r2, [pc, #196]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c998:	f7fd faba 	bl	8009f10 <HAL_GetTick>
 800c99c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c99e:	e008      	b.n	800c9b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9a0:	f7fd fab6 	bl	8009f10 <HAL_GetTick>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	1ad3      	subs	r3, r2, r3
 800c9aa:	2b02      	cmp	r3, #2
 800c9ac:	d901      	bls.n	800c9b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c9ae:	2303      	movs	r3, #3
 800c9b0:	e091      	b.n	800cad6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9b2:	4b29      	ldr	r3, [pc, #164]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d1f0      	bne.n	800c9a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	69da      	ldr	r2, [r3, #28]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6a1b      	ldr	r3, [r3, #32]
 800c9c6:	431a      	orrs	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9cc:	019b      	lsls	r3, r3, #6
 800c9ce:	431a      	orrs	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d4:	085b      	lsrs	r3, r3, #1
 800c9d6:	3b01      	subs	r3, #1
 800c9d8:	041b      	lsls	r3, r3, #16
 800c9da:	431a      	orrs	r2, r3
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e0:	061b      	lsls	r3, r3, #24
 800c9e2:	431a      	orrs	r2, r3
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9e8:	071b      	lsls	r3, r3, #28
 800c9ea:	491b      	ldr	r1, [pc, #108]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c9f0:	4b19      	ldr	r3, [pc, #100]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a18      	ldr	r2, [pc, #96]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800c9f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c9fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9fc:	f7fd fa88 	bl	8009f10 <HAL_GetTick>
 800ca00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca02:	e008      	b.n	800ca16 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca04:	f7fd fa84 	bl	8009f10 <HAL_GetTick>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	1ad3      	subs	r3, r2, r3
 800ca0e:	2b02      	cmp	r3, #2
 800ca10:	d901      	bls.n	800ca16 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800ca12:	2303      	movs	r3, #3
 800ca14:	e05f      	b.n	800cad6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca16:	4b10      	ldr	r3, [pc, #64]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d0f0      	beq.n	800ca04 <HAL_RCC_OscConfig+0x47c>
 800ca22:	e057      	b.n	800cad4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca24:	4b0c      	ldr	r3, [pc, #48]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a0b      	ldr	r2, [pc, #44]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800ca2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ca2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca30:	f7fd fa6e 	bl	8009f10 <HAL_GetTick>
 800ca34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca36:	e008      	b.n	800ca4a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca38:	f7fd fa6a 	bl	8009f10 <HAL_GetTick>
 800ca3c:	4602      	mov	r2, r0
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	1ad3      	subs	r3, r2, r3
 800ca42:	2b02      	cmp	r3, #2
 800ca44:	d901      	bls.n	800ca4a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800ca46:	2303      	movs	r3, #3
 800ca48:	e045      	b.n	800cad6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca4a:	4b03      	ldr	r3, [pc, #12]	; (800ca58 <HAL_RCC_OscConfig+0x4d0>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d1f0      	bne.n	800ca38 <HAL_RCC_OscConfig+0x4b0>
 800ca56:	e03d      	b.n	800cad4 <HAL_RCC_OscConfig+0x54c>
 800ca58:	40023800 	.word	0x40023800
 800ca5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800ca60:	4b1f      	ldr	r3, [pc, #124]	; (800cae0 <HAL_RCC_OscConfig+0x558>)
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	699b      	ldr	r3, [r3, #24]
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d030      	beq.n	800cad0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d129      	bne.n	800cad0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d122      	bne.n	800cad0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ca8a:	68fa      	ldr	r2, [r7, #12]
 800ca8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ca90:	4013      	ands	r3, r2
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ca96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d119      	bne.n	800cad0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caa6:	085b      	lsrs	r3, r3, #1
 800caa8:	3b01      	subs	r3, #1
 800caaa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800caac:	429a      	cmp	r2, r3
 800caae:	d10f      	bne.n	800cad0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d107      	bne.n	800cad0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cacc:	429a      	cmp	r2, r3
 800cace:	d001      	beq.n	800cad4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800cad0:	2301      	movs	r3, #1
 800cad2:	e000      	b.n	800cad6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3718      	adds	r7, #24
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	40023800 	.word	0x40023800

0800cae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800caee:	2300      	movs	r3, #0
 800caf0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d101      	bne.n	800cafc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800caf8:	2301      	movs	r3, #1
 800cafa:	e0d0      	b.n	800cc9e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cafc:	4b6a      	ldr	r3, [pc, #424]	; (800cca8 <HAL_RCC_ClockConfig+0x1c4>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f003 030f 	and.w	r3, r3, #15
 800cb04:	683a      	ldr	r2, [r7, #0]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d910      	bls.n	800cb2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb0a:	4b67      	ldr	r3, [pc, #412]	; (800cca8 <HAL_RCC_ClockConfig+0x1c4>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f023 020f 	bic.w	r2, r3, #15
 800cb12:	4965      	ldr	r1, [pc, #404]	; (800cca8 <HAL_RCC_ClockConfig+0x1c4>)
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	4313      	orrs	r3, r2
 800cb18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb1a:	4b63      	ldr	r3, [pc, #396]	; (800cca8 <HAL_RCC_ClockConfig+0x1c4>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f003 030f 	and.w	r3, r3, #15
 800cb22:	683a      	ldr	r2, [r7, #0]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d001      	beq.n	800cb2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800cb28:	2301      	movs	r3, #1
 800cb2a:	e0b8      	b.n	800cc9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f003 0302 	and.w	r3, r3, #2
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d020      	beq.n	800cb7a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f003 0304 	and.w	r3, r3, #4
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d005      	beq.n	800cb50 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cb44:	4b59      	ldr	r3, [pc, #356]	; (800ccac <HAL_RCC_ClockConfig+0x1c8>)
 800cb46:	689b      	ldr	r3, [r3, #8]
 800cb48:	4a58      	ldr	r2, [pc, #352]	; (800ccac <HAL_RCC_ClockConfig+0x1c8>)
 800cb4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cb4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f003 0308 	and.w	r3, r3, #8
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d005      	beq.n	800cb68 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cb5c:	4b53      	ldr	r3, [pc, #332]	; (800ccac <HAL_RCC_ClockConfig+0x1c8>)
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	4a52      	ldr	r2, [pc, #328]	; (800ccac <HAL_RCC_ClockConfig+0x1c8>)
 800cb62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cb66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cb68:	4b50      	ldr	r3, [pc, #320]	; (800ccac <HAL_RCC_ClockConfig+0x1c8>)
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	689b      	ldr	r3, [r3, #8]
 800cb74:	494d      	ldr	r1, [pc, #308]	; (800ccac <HAL_RCC_ClockConfig+0x1c8>)
 800cb76:	4313      	orrs	r3, r2
 800cb78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f003 0301 	and.w	r3, r3, #1
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d040      	beq.n	800cc08 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d107      	bne.n	800cb9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cb8e:	4b47      	ldr	r3, [pc, #284]	; (800ccac <HAL_RCC_ClockConfig+0x1c8>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d115      	bne.n	800cbc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	e07f      	b.n	800cc9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	2b02      	cmp	r3, #2
 800cba4:	d107      	bne.n	800cbb6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cba6:	4b41      	ldr	r3, [pc, #260]	; (800ccac <HAL_RCC_ClockConfig+0x1c8>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d109      	bne.n	800cbc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	e073      	b.n	800cc9e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cbb6:	4b3d      	ldr	r3, [pc, #244]	; (800ccac <HAL_RCC_ClockConfig+0x1c8>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f003 0302 	and.w	r3, r3, #2
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d101      	bne.n	800cbc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	e06b      	b.n	800cc9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cbc6:	4b39      	ldr	r3, [pc, #228]	; (800ccac <HAL_RCC_ClockConfig+0x1c8>)
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	f023 0203 	bic.w	r2, r3, #3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	4936      	ldr	r1, [pc, #216]	; (800ccac <HAL_RCC_ClockConfig+0x1c8>)
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbd8:	f7fd f99a 	bl	8009f10 <HAL_GetTick>
 800cbdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cbde:	e00a      	b.n	800cbf6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cbe0:	f7fd f996 	bl	8009f10 <HAL_GetTick>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	1ad3      	subs	r3, r2, r3
 800cbea:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d901      	bls.n	800cbf6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800cbf2:	2303      	movs	r3, #3
 800cbf4:	e053      	b.n	800cc9e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cbf6:	4b2d      	ldr	r3, [pc, #180]	; (800ccac <HAL_RCC_ClockConfig+0x1c8>)
 800cbf8:	689b      	ldr	r3, [r3, #8]
 800cbfa:	f003 020c 	and.w	r2, r3, #12
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d1eb      	bne.n	800cbe0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cc08:	4b27      	ldr	r3, [pc, #156]	; (800cca8 <HAL_RCC_ClockConfig+0x1c4>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f003 030f 	and.w	r3, r3, #15
 800cc10:	683a      	ldr	r2, [r7, #0]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d210      	bcs.n	800cc38 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc16:	4b24      	ldr	r3, [pc, #144]	; (800cca8 <HAL_RCC_ClockConfig+0x1c4>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f023 020f 	bic.w	r2, r3, #15
 800cc1e:	4922      	ldr	r1, [pc, #136]	; (800cca8 <HAL_RCC_ClockConfig+0x1c4>)
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	4313      	orrs	r3, r2
 800cc24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc26:	4b20      	ldr	r3, [pc, #128]	; (800cca8 <HAL_RCC_ClockConfig+0x1c4>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f003 030f 	and.w	r3, r3, #15
 800cc2e:	683a      	ldr	r2, [r7, #0]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d001      	beq.n	800cc38 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800cc34:	2301      	movs	r3, #1
 800cc36:	e032      	b.n	800cc9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f003 0304 	and.w	r3, r3, #4
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d008      	beq.n	800cc56 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cc44:	4b19      	ldr	r3, [pc, #100]	; (800ccac <HAL_RCC_ClockConfig+0x1c8>)
 800cc46:	689b      	ldr	r3, [r3, #8]
 800cc48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	4916      	ldr	r1, [pc, #88]	; (800ccac <HAL_RCC_ClockConfig+0x1c8>)
 800cc52:	4313      	orrs	r3, r2
 800cc54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f003 0308 	and.w	r3, r3, #8
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d009      	beq.n	800cc76 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cc62:	4b12      	ldr	r3, [pc, #72]	; (800ccac <HAL_RCC_ClockConfig+0x1c8>)
 800cc64:	689b      	ldr	r3, [r3, #8]
 800cc66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	00db      	lsls	r3, r3, #3
 800cc70:	490e      	ldr	r1, [pc, #56]	; (800ccac <HAL_RCC_ClockConfig+0x1c8>)
 800cc72:	4313      	orrs	r3, r2
 800cc74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cc76:	f000 f821 	bl	800ccbc <HAL_RCC_GetSysClockFreq>
 800cc7a:	4601      	mov	r1, r0
 800cc7c:	4b0b      	ldr	r3, [pc, #44]	; (800ccac <HAL_RCC_ClockConfig+0x1c8>)
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	091b      	lsrs	r3, r3, #4
 800cc82:	f003 030f 	and.w	r3, r3, #15
 800cc86:	4a0a      	ldr	r2, [pc, #40]	; (800ccb0 <HAL_RCC_ClockConfig+0x1cc>)
 800cc88:	5cd3      	ldrb	r3, [r2, r3]
 800cc8a:	fa21 f303 	lsr.w	r3, r1, r3
 800cc8e:	4a09      	ldr	r2, [pc, #36]	; (800ccb4 <HAL_RCC_ClockConfig+0x1d0>)
 800cc90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800cc92:	4b09      	ldr	r3, [pc, #36]	; (800ccb8 <HAL_RCC_ClockConfig+0x1d4>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fd f8f6 	bl	8009e88 <HAL_InitTick>

  return HAL_OK;
 800cc9c:	2300      	movs	r3, #0
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	40023c00 	.word	0x40023c00
 800ccac:	40023800 	.word	0x40023800
 800ccb0:	08022b90 	.word	0x08022b90
 800ccb4:	20000040 	.word	0x20000040
 800ccb8:	20000044 	.word	0x20000044

0800ccbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ccbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	607b      	str	r3, [r7, #4]
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	60fb      	str	r3, [r7, #12]
 800ccca:	2300      	movs	r3, #0
 800cccc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ccd2:	4b63      	ldr	r3, [pc, #396]	; (800ce60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ccd4:	689b      	ldr	r3, [r3, #8]
 800ccd6:	f003 030c 	and.w	r3, r3, #12
 800ccda:	2b04      	cmp	r3, #4
 800ccdc:	d007      	beq.n	800ccee <HAL_RCC_GetSysClockFreq+0x32>
 800ccde:	2b08      	cmp	r3, #8
 800cce0:	d008      	beq.n	800ccf4 <HAL_RCC_GetSysClockFreq+0x38>
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	f040 80b4 	bne.w	800ce50 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cce8:	4b5e      	ldr	r3, [pc, #376]	; (800ce64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800ccea:	60bb      	str	r3, [r7, #8]
      break;
 800ccec:	e0b3      	b.n	800ce56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ccee:	4b5e      	ldr	r3, [pc, #376]	; (800ce68 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800ccf0:	60bb      	str	r3, [r7, #8]
      break;
 800ccf2:	e0b0      	b.n	800ce56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ccf4:	4b5a      	ldr	r3, [pc, #360]	; (800ce60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ccf6:	685b      	ldr	r3, [r3, #4]
 800ccf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccfc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ccfe:	4b58      	ldr	r3, [pc, #352]	; (800ce60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d04a      	beq.n	800cda0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cd0a:	4b55      	ldr	r3, [pc, #340]	; (800ce60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	099b      	lsrs	r3, r3, #6
 800cd10:	f04f 0400 	mov.w	r4, #0
 800cd14:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cd18:	f04f 0200 	mov.w	r2, #0
 800cd1c:	ea03 0501 	and.w	r5, r3, r1
 800cd20:	ea04 0602 	and.w	r6, r4, r2
 800cd24:	4629      	mov	r1, r5
 800cd26:	4632      	mov	r2, r6
 800cd28:	f04f 0300 	mov.w	r3, #0
 800cd2c:	f04f 0400 	mov.w	r4, #0
 800cd30:	0154      	lsls	r4, r2, #5
 800cd32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800cd36:	014b      	lsls	r3, r1, #5
 800cd38:	4619      	mov	r1, r3
 800cd3a:	4622      	mov	r2, r4
 800cd3c:	1b49      	subs	r1, r1, r5
 800cd3e:	eb62 0206 	sbc.w	r2, r2, r6
 800cd42:	f04f 0300 	mov.w	r3, #0
 800cd46:	f04f 0400 	mov.w	r4, #0
 800cd4a:	0194      	lsls	r4, r2, #6
 800cd4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800cd50:	018b      	lsls	r3, r1, #6
 800cd52:	1a5b      	subs	r3, r3, r1
 800cd54:	eb64 0402 	sbc.w	r4, r4, r2
 800cd58:	f04f 0100 	mov.w	r1, #0
 800cd5c:	f04f 0200 	mov.w	r2, #0
 800cd60:	00e2      	lsls	r2, r4, #3
 800cd62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800cd66:	00d9      	lsls	r1, r3, #3
 800cd68:	460b      	mov	r3, r1
 800cd6a:	4614      	mov	r4, r2
 800cd6c:	195b      	adds	r3, r3, r5
 800cd6e:	eb44 0406 	adc.w	r4, r4, r6
 800cd72:	f04f 0100 	mov.w	r1, #0
 800cd76:	f04f 0200 	mov.w	r2, #0
 800cd7a:	0262      	lsls	r2, r4, #9
 800cd7c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800cd80:	0259      	lsls	r1, r3, #9
 800cd82:	460b      	mov	r3, r1
 800cd84:	4614      	mov	r4, r2
 800cd86:	4618      	mov	r0, r3
 800cd88:	4621      	mov	r1, r4
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f04f 0400 	mov.w	r4, #0
 800cd90:	461a      	mov	r2, r3
 800cd92:	4623      	mov	r3, r4
 800cd94:	f7fb fabc 	bl	8008310 <__aeabi_uldivmod>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	460c      	mov	r4, r1
 800cd9c:	60fb      	str	r3, [r7, #12]
 800cd9e:	e049      	b.n	800ce34 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cda0:	4b2f      	ldr	r3, [pc, #188]	; (800ce60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	099b      	lsrs	r3, r3, #6
 800cda6:	f04f 0400 	mov.w	r4, #0
 800cdaa:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cdae:	f04f 0200 	mov.w	r2, #0
 800cdb2:	ea03 0501 	and.w	r5, r3, r1
 800cdb6:	ea04 0602 	and.w	r6, r4, r2
 800cdba:	4629      	mov	r1, r5
 800cdbc:	4632      	mov	r2, r6
 800cdbe:	f04f 0300 	mov.w	r3, #0
 800cdc2:	f04f 0400 	mov.w	r4, #0
 800cdc6:	0154      	lsls	r4, r2, #5
 800cdc8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800cdcc:	014b      	lsls	r3, r1, #5
 800cdce:	4619      	mov	r1, r3
 800cdd0:	4622      	mov	r2, r4
 800cdd2:	1b49      	subs	r1, r1, r5
 800cdd4:	eb62 0206 	sbc.w	r2, r2, r6
 800cdd8:	f04f 0300 	mov.w	r3, #0
 800cddc:	f04f 0400 	mov.w	r4, #0
 800cde0:	0194      	lsls	r4, r2, #6
 800cde2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800cde6:	018b      	lsls	r3, r1, #6
 800cde8:	1a5b      	subs	r3, r3, r1
 800cdea:	eb64 0402 	sbc.w	r4, r4, r2
 800cdee:	f04f 0100 	mov.w	r1, #0
 800cdf2:	f04f 0200 	mov.w	r2, #0
 800cdf6:	00e2      	lsls	r2, r4, #3
 800cdf8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800cdfc:	00d9      	lsls	r1, r3, #3
 800cdfe:	460b      	mov	r3, r1
 800ce00:	4614      	mov	r4, r2
 800ce02:	195b      	adds	r3, r3, r5
 800ce04:	eb44 0406 	adc.w	r4, r4, r6
 800ce08:	f04f 0100 	mov.w	r1, #0
 800ce0c:	f04f 0200 	mov.w	r2, #0
 800ce10:	02a2      	lsls	r2, r4, #10
 800ce12:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800ce16:	0299      	lsls	r1, r3, #10
 800ce18:	460b      	mov	r3, r1
 800ce1a:	4614      	mov	r4, r2
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	4621      	mov	r1, r4
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f04f 0400 	mov.w	r4, #0
 800ce26:	461a      	mov	r2, r3
 800ce28:	4623      	mov	r3, r4
 800ce2a:	f7fb fa71 	bl	8008310 <__aeabi_uldivmod>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	460c      	mov	r4, r1
 800ce32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ce34:	4b0a      	ldr	r3, [pc, #40]	; (800ce60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	0c1b      	lsrs	r3, r3, #16
 800ce3a:	f003 0303 	and.w	r3, r3, #3
 800ce3e:	3301      	adds	r3, #1
 800ce40:	005b      	lsls	r3, r3, #1
 800ce42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce4c:	60bb      	str	r3, [r7, #8]
      break;
 800ce4e:	e002      	b.n	800ce56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ce50:	4b04      	ldr	r3, [pc, #16]	; (800ce64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800ce52:	60bb      	str	r3, [r7, #8]
      break;
 800ce54:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ce56:	68bb      	ldr	r3, [r7, #8]
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3714      	adds	r7, #20
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce60:	40023800 	.word	0x40023800
 800ce64:	00f42400 	.word	0x00f42400
 800ce68:	007a1200 	.word	0x007a1200

0800ce6c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ce70:	4b03      	ldr	r3, [pc, #12]	; (800ce80 <HAL_RCC_GetHCLKFreq+0x14>)
 800ce72:	681b      	ldr	r3, [r3, #0]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr
 800ce7e:	bf00      	nop
 800ce80:	20000040 	.word	0x20000040

0800ce84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ce88:	f7ff fff0 	bl	800ce6c <HAL_RCC_GetHCLKFreq>
 800ce8c:	4601      	mov	r1, r0
 800ce8e:	4b05      	ldr	r3, [pc, #20]	; (800cea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	0a9b      	lsrs	r3, r3, #10
 800ce94:	f003 0307 	and.w	r3, r3, #7
 800ce98:	4a03      	ldr	r2, [pc, #12]	; (800cea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ce9a:	5cd3      	ldrb	r3, [r2, r3]
 800ce9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	40023800 	.word	0x40023800
 800cea8:	08022ba0 	.word	0x08022ba0

0800ceac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ceb0:	f7ff ffdc 	bl	800ce6c <HAL_RCC_GetHCLKFreq>
 800ceb4:	4601      	mov	r1, r0
 800ceb6:	4b05      	ldr	r3, [pc, #20]	; (800cecc <HAL_RCC_GetPCLK2Freq+0x20>)
 800ceb8:	689b      	ldr	r3, [r3, #8]
 800ceba:	0b5b      	lsrs	r3, r3, #13
 800cebc:	f003 0307 	and.w	r3, r3, #7
 800cec0:	4a03      	ldr	r2, [pc, #12]	; (800ced0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cec2:	5cd3      	ldrb	r3, [r2, r3]
 800cec4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	40023800 	.word	0x40023800
 800ced0:	08022ba0 	.word	0x08022ba0

0800ced4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b088      	sub	sp, #32
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800cedc:	2300      	movs	r3, #0
 800cede:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800cee0:	2300      	movs	r3, #0
 800cee2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800cee4:	2300      	movs	r3, #0
 800cee6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800cee8:	2300      	movs	r3, #0
 800ceea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ceec:	2300      	movs	r3, #0
 800ceee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f003 0301 	and.w	r3, r3, #1
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d012      	beq.n	800cf22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cefc:	4b69      	ldr	r3, [pc, #420]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cefe:	689b      	ldr	r3, [r3, #8]
 800cf00:	4a68      	ldr	r2, [pc, #416]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf02:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cf06:	6093      	str	r3, [r2, #8]
 800cf08:	4b66      	ldr	r3, [pc, #408]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf0a:	689a      	ldr	r2, [r3, #8]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf10:	4964      	ldr	r1, [pc, #400]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf12:	4313      	orrs	r3, r2
 800cf14:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d101      	bne.n	800cf22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800cf1e:	2301      	movs	r3, #1
 800cf20:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d017      	beq.n	800cf5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cf2e:	4b5d      	ldr	r3, [pc, #372]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf3c:	4959      	ldr	r1, [pc, #356]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf4c:	d101      	bne.n	800cf52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800cf4e:	2301      	movs	r3, #1
 800cf50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d101      	bne.n	800cf5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d017      	beq.n	800cf9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cf6a:	4b4e      	ldr	r3, [pc, #312]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf78:	494a      	ldr	r1, [pc, #296]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf88:	d101      	bne.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d101      	bne.n	800cf9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800cf96:	2301      	movs	r3, #1
 800cf98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d001      	beq.n	800cfaa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f003 0320 	and.w	r3, r3, #32
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	f000 808b 	beq.w	800d0ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cfb8:	4b3a      	ldr	r3, [pc, #232]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cfba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfbc:	4a39      	ldr	r2, [pc, #228]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cfbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfc2:	6413      	str	r3, [r2, #64]	; 0x40
 800cfc4:	4b37      	ldr	r3, [pc, #220]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cfc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfcc:	60bb      	str	r3, [r7, #8]
 800cfce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cfd0:	4b35      	ldr	r3, [pc, #212]	; (800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a34      	ldr	r2, [pc, #208]	; (800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cfd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfdc:	f7fc ff98 	bl	8009f10 <HAL_GetTick>
 800cfe0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cfe2:	e008      	b.n	800cff6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cfe4:	f7fc ff94 	bl	8009f10 <HAL_GetTick>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	1ad3      	subs	r3, r2, r3
 800cfee:	2b64      	cmp	r3, #100	; 0x64
 800cff0:	d901      	bls.n	800cff6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800cff2:	2303      	movs	r3, #3
 800cff4:	e38d      	b.n	800d712 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cff6:	4b2c      	ldr	r3, [pc, #176]	; (800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d0f0      	beq.n	800cfe4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d002:	4b28      	ldr	r3, [pc, #160]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d00a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d035      	beq.n	800d07e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d01a:	693a      	ldr	r2, [r7, #16]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d02e      	beq.n	800d07e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d020:	4b20      	ldr	r3, [pc, #128]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d028:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d02a:	4b1e      	ldr	r3, [pc, #120]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d02c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d02e:	4a1d      	ldr	r2, [pc, #116]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d034:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d036:	4b1b      	ldr	r3, [pc, #108]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d03a:	4a1a      	ldr	r2, [pc, #104]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d03c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d040:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800d042:	4a18      	ldr	r2, [pc, #96]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d048:	4b16      	ldr	r3, [pc, #88]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d04a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d04c:	f003 0301 	and.w	r3, r3, #1
 800d050:	2b01      	cmp	r3, #1
 800d052:	d114      	bne.n	800d07e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d054:	f7fc ff5c 	bl	8009f10 <HAL_GetTick>
 800d058:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d05a:	e00a      	b.n	800d072 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d05c:	f7fc ff58 	bl	8009f10 <HAL_GetTick>
 800d060:	4602      	mov	r2, r0
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	1ad3      	subs	r3, r2, r3
 800d066:	f241 3288 	movw	r2, #5000	; 0x1388
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d901      	bls.n	800d072 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800d06e:	2303      	movs	r3, #3
 800d070:	e34f      	b.n	800d712 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d072:	4b0c      	ldr	r3, [pc, #48]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d076:	f003 0302 	and.w	r3, r3, #2
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d0ee      	beq.n	800d05c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d08a:	d111      	bne.n	800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800d08c:	4b05      	ldr	r3, [pc, #20]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d08e:	689b      	ldr	r3, [r3, #8]
 800d090:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d098:	4b04      	ldr	r3, [pc, #16]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800d09a:	400b      	ands	r3, r1
 800d09c:	4901      	ldr	r1, [pc, #4]	; (800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	608b      	str	r3, [r1, #8]
 800d0a2:	e00b      	b.n	800d0bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800d0a4:	40023800 	.word	0x40023800
 800d0a8:	40007000 	.word	0x40007000
 800d0ac:	0ffffcff 	.word	0x0ffffcff
 800d0b0:	4bb3      	ldr	r3, [pc, #716]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	4ab2      	ldr	r2, [pc, #712]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d0ba:	6093      	str	r3, [r2, #8]
 800d0bc:	4bb0      	ldr	r3, [pc, #704]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0c8:	49ad      	ldr	r1, [pc, #692]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f003 0310 	and.w	r3, r3, #16
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d010      	beq.n	800d0fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d0da:	4ba9      	ldr	r3, [pc, #676]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0e0:	4aa7      	ldr	r2, [pc, #668]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d0e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800d0ea:	4ba5      	ldr	r3, [pc, #660]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f4:	49a2      	ldr	r1, [pc, #648]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d104:	2b00      	cmp	r3, #0
 800d106:	d00a      	beq.n	800d11e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d108:	4b9d      	ldr	r3, [pc, #628]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d10a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d10e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d116:	499a      	ldr	r1, [pc, #616]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d118:	4313      	orrs	r3, r2
 800d11a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d126:	2b00      	cmp	r3, #0
 800d128:	d00a      	beq.n	800d140 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d12a:	4b95      	ldr	r3, [pc, #596]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d12c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d130:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d138:	4991      	ldr	r1, [pc, #580]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d13a:	4313      	orrs	r3, r2
 800d13c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d00a      	beq.n	800d162 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d14c:	4b8c      	ldr	r3, [pc, #560]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d14e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d152:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d15a:	4989      	ldr	r1, [pc, #548]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d15c:	4313      	orrs	r3, r2
 800d15e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00a      	beq.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d16e:	4b84      	ldr	r3, [pc, #528]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d174:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d17c:	4980      	ldr	r1, [pc, #512]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d17e:	4313      	orrs	r3, r2
 800d180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d00a      	beq.n	800d1a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d190:	4b7b      	ldr	r3, [pc, #492]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d196:	f023 0203 	bic.w	r2, r3, #3
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d19e:	4978      	ldr	r1, [pc, #480]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d00a      	beq.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d1b2:	4b73      	ldr	r3, [pc, #460]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1b8:	f023 020c 	bic.w	r2, r3, #12
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1c0:	496f      	ldr	r1, [pc, #444]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d00a      	beq.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d1d4:	4b6a      	ldr	r3, [pc, #424]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1e2:	4967      	ldr	r1, [pc, #412]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d00a      	beq.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d1f6:	4b62      	ldr	r3, [pc, #392]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d204:	495e      	ldr	r1, [pc, #376]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d206:	4313      	orrs	r3, r2
 800d208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d214:	2b00      	cmp	r3, #0
 800d216:	d00a      	beq.n	800d22e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d218:	4b59      	ldr	r3, [pc, #356]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d21a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d21e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d226:	4956      	ldr	r1, [pc, #344]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d228:	4313      	orrs	r3, r2
 800d22a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d236:	2b00      	cmp	r3, #0
 800d238:	d00a      	beq.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d23a:	4b51      	ldr	r3, [pc, #324]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d23c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d240:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d248:	494d      	ldr	r1, [pc, #308]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d24a:	4313      	orrs	r3, r2
 800d24c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d00a      	beq.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d25c:	4b48      	ldr	r3, [pc, #288]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d25e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d262:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d26a:	4945      	ldr	r1, [pc, #276]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d26c:	4313      	orrs	r3, r2
 800d26e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d00a      	beq.n	800d294 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d27e:	4b40      	ldr	r3, [pc, #256]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d284:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d28c:	493c      	ldr	r1, [pc, #240]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d28e:	4313      	orrs	r3, r2
 800d290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d00a      	beq.n	800d2b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d2a0:	4b37      	ldr	r3, [pc, #220]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d2a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2ae:	4934      	ldr	r1, [pc, #208]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d011      	beq.n	800d2e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d2c2:	4b2f      	ldr	r3, [pc, #188]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d2c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2d0:	492b      	ldr	r1, [pc, #172]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d2e0:	d101      	bne.n	800d2e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f003 0308 	and.w	r3, r3, #8
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d001      	beq.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d00a      	beq.n	800d318 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d302:	4b1f      	ldr	r3, [pc, #124]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d308:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d310:	491b      	ldr	r1, [pc, #108]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d312:	4313      	orrs	r3, r2
 800d314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d320:	2b00      	cmp	r3, #0
 800d322:	d00b      	beq.n	800d33c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d324:	4b16      	ldr	r3, [pc, #88]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d32a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d334:	4912      	ldr	r1, [pc, #72]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d336:	4313      	orrs	r3, r2
 800d338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d344:	2b00      	cmp	r3, #0
 800d346:	d00b      	beq.n	800d360 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800d348:	4b0d      	ldr	r3, [pc, #52]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d34e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d358:	4909      	ldr	r1, [pc, #36]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d35a:	4313      	orrs	r3, r2
 800d35c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d00f      	beq.n	800d38c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d36c:	4b04      	ldr	r3, [pc, #16]	; (800d380 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d36e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d372:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d37c:	e002      	b.n	800d384 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800d37e:	bf00      	nop
 800d380:	40023800 	.word	0x40023800
 800d384:	4985      	ldr	r1, [pc, #532]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d386:	4313      	orrs	r3, r2
 800d388:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d394:	2b00      	cmp	r3, #0
 800d396:	d00b      	beq.n	800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800d398:	4b80      	ldr	r3, [pc, #512]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d39a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d39e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3a8:	497c      	ldr	r1, [pc, #496]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800d3b0:	69fb      	ldr	r3, [r7, #28]
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d005      	beq.n	800d3c2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d3be:	f040 80d6 	bne.w	800d56e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d3c2:	4b76      	ldr	r3, [pc, #472]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4a75      	ldr	r2, [pc, #468]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d3cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3ce:	f7fc fd9f 	bl	8009f10 <HAL_GetTick>
 800d3d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d3d4:	e008      	b.n	800d3e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d3d6:	f7fc fd9b 	bl	8009f10 <HAL_GetTick>
 800d3da:	4602      	mov	r2, r0
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	1ad3      	subs	r3, r2, r3
 800d3e0:	2b64      	cmp	r3, #100	; 0x64
 800d3e2:	d901      	bls.n	800d3e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d3e4:	2303      	movs	r3, #3
 800d3e6:	e194      	b.n	800d712 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d3e8:	4b6c      	ldr	r3, [pc, #432]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d1f0      	bne.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f003 0301 	and.w	r3, r3, #1
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d021      	beq.n	800d444 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d404:	2b00      	cmp	r3, #0
 800d406:	d11d      	bne.n	800d444 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d408:	4b64      	ldr	r3, [pc, #400]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d40a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d40e:	0c1b      	lsrs	r3, r3, #16
 800d410:	f003 0303 	and.w	r3, r3, #3
 800d414:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d416:	4b61      	ldr	r3, [pc, #388]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d41c:	0e1b      	lsrs	r3, r3, #24
 800d41e:	f003 030f 	and.w	r3, r3, #15
 800d422:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	019a      	lsls	r2, r3, #6
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	041b      	lsls	r3, r3, #16
 800d42e:	431a      	orrs	r2, r3
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	061b      	lsls	r3, r3, #24
 800d434:	431a      	orrs	r2, r3
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	071b      	lsls	r3, r3, #28
 800d43c:	4957      	ldr	r1, [pc, #348]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d43e:	4313      	orrs	r3, r2
 800d440:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d004      	beq.n	800d45a <HAL_RCCEx_PeriphCLKConfig+0x586>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d454:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d458:	d00a      	beq.n	800d470 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d462:	2b00      	cmp	r3, #0
 800d464:	d02e      	beq.n	800d4c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d46a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d46e:	d129      	bne.n	800d4c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d470:	4b4a      	ldr	r3, [pc, #296]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d476:	0c1b      	lsrs	r3, r3, #16
 800d478:	f003 0303 	and.w	r3, r3, #3
 800d47c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d47e:	4b47      	ldr	r3, [pc, #284]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d484:	0f1b      	lsrs	r3, r3, #28
 800d486:	f003 0307 	and.w	r3, r3, #7
 800d48a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	019a      	lsls	r2, r3, #6
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	041b      	lsls	r3, r3, #16
 800d496:	431a      	orrs	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	68db      	ldr	r3, [r3, #12]
 800d49c:	061b      	lsls	r3, r3, #24
 800d49e:	431a      	orrs	r2, r3
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	071b      	lsls	r3, r3, #28
 800d4a4:	493d      	ldr	r1, [pc, #244]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d4ac:	4b3b      	ldr	r3, [pc, #236]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d4ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4b2:	f023 021f 	bic.w	r2, r3, #31
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ba:	3b01      	subs	r3, #1
 800d4bc:	4937      	ldr	r1, [pc, #220]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d01d      	beq.n	800d50c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d4d0:	4b32      	ldr	r3, [pc, #200]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d4d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4d6:	0e1b      	lsrs	r3, r3, #24
 800d4d8:	f003 030f 	and.w	r3, r3, #15
 800d4dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d4de:	4b2f      	ldr	r3, [pc, #188]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d4e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4e4:	0f1b      	lsrs	r3, r3, #28
 800d4e6:	f003 0307 	and.w	r3, r3, #7
 800d4ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	019a      	lsls	r2, r3, #6
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	691b      	ldr	r3, [r3, #16]
 800d4f6:	041b      	lsls	r3, r3, #16
 800d4f8:	431a      	orrs	r2, r3
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	061b      	lsls	r3, r3, #24
 800d4fe:	431a      	orrs	r2, r3
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	071b      	lsls	r3, r3, #28
 800d504:	4925      	ldr	r1, [pc, #148]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d506:	4313      	orrs	r3, r2
 800d508:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d514:	2b00      	cmp	r3, #0
 800d516:	d011      	beq.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	019a      	lsls	r2, r3, #6
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	691b      	ldr	r3, [r3, #16]
 800d522:	041b      	lsls	r3, r3, #16
 800d524:	431a      	orrs	r2, r3
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	061b      	lsls	r3, r3, #24
 800d52c:	431a      	orrs	r2, r3
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	689b      	ldr	r3, [r3, #8]
 800d532:	071b      	lsls	r3, r3, #28
 800d534:	4919      	ldr	r1, [pc, #100]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d536:	4313      	orrs	r3, r2
 800d538:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d53c:	4b17      	ldr	r3, [pc, #92]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4a16      	ldr	r2, [pc, #88]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d542:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d548:	f7fc fce2 	bl	8009f10 <HAL_GetTick>
 800d54c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d54e:	e008      	b.n	800d562 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d550:	f7fc fcde 	bl	8009f10 <HAL_GetTick>
 800d554:	4602      	mov	r2, r0
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	1ad3      	subs	r3, r2, r3
 800d55a:	2b64      	cmp	r3, #100	; 0x64
 800d55c:	d901      	bls.n	800d562 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d55e:	2303      	movs	r3, #3
 800d560:	e0d7      	b.n	800d712 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d562:	4b0e      	ldr	r3, [pc, #56]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d0f0      	beq.n	800d550 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	2b01      	cmp	r3, #1
 800d572:	f040 80cd 	bne.w	800d710 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d576:	4b09      	ldr	r3, [pc, #36]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	4a08      	ldr	r2, [pc, #32]	; (800d59c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d57c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d582:	f7fc fcc5 	bl	8009f10 <HAL_GetTick>
 800d586:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d588:	e00a      	b.n	800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d58a:	f7fc fcc1 	bl	8009f10 <HAL_GetTick>
 800d58e:	4602      	mov	r2, r0
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	1ad3      	subs	r3, r2, r3
 800d594:	2b64      	cmp	r3, #100	; 0x64
 800d596:	d903      	bls.n	800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d598:	2303      	movs	r3, #3
 800d59a:	e0ba      	b.n	800d712 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800d59c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d5a0:	4b5e      	ldr	r3, [pc, #376]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d5a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d5ac:	d0ed      	beq.n	800d58a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d003      	beq.n	800d5c2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d009      	beq.n	800d5d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d02e      	beq.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d12a      	bne.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d5d6:	4b51      	ldr	r3, [pc, #324]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d5d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5dc:	0c1b      	lsrs	r3, r3, #16
 800d5de:	f003 0303 	and.w	r3, r3, #3
 800d5e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d5e4:	4b4d      	ldr	r3, [pc, #308]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d5e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5ea:	0f1b      	lsrs	r3, r3, #28
 800d5ec:	f003 0307 	and.w	r3, r3, #7
 800d5f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	695b      	ldr	r3, [r3, #20]
 800d5f6:	019a      	lsls	r2, r3, #6
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	041b      	lsls	r3, r3, #16
 800d5fc:	431a      	orrs	r2, r3
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	699b      	ldr	r3, [r3, #24]
 800d602:	061b      	lsls	r3, r3, #24
 800d604:	431a      	orrs	r2, r3
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	071b      	lsls	r3, r3, #28
 800d60a:	4944      	ldr	r1, [pc, #272]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d60c:	4313      	orrs	r3, r2
 800d60e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d612:	4b42      	ldr	r3, [pc, #264]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d618:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d620:	3b01      	subs	r3, #1
 800d622:	021b      	lsls	r3, r3, #8
 800d624:	493d      	ldr	r1, [pc, #244]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d626:	4313      	orrs	r3, r2
 800d628:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d634:	2b00      	cmp	r3, #0
 800d636:	d022      	beq.n	800d67e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d63c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d640:	d11d      	bne.n	800d67e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d642:	4b36      	ldr	r3, [pc, #216]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d648:	0e1b      	lsrs	r3, r3, #24
 800d64a:	f003 030f 	and.w	r3, r3, #15
 800d64e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d650:	4b32      	ldr	r3, [pc, #200]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d656:	0f1b      	lsrs	r3, r3, #28
 800d658:	f003 0307 	and.w	r3, r3, #7
 800d65c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	695b      	ldr	r3, [r3, #20]
 800d662:	019a      	lsls	r2, r3, #6
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6a1b      	ldr	r3, [r3, #32]
 800d668:	041b      	lsls	r3, r3, #16
 800d66a:	431a      	orrs	r2, r3
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	061b      	lsls	r3, r3, #24
 800d670:	431a      	orrs	r2, r3
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	071b      	lsls	r3, r3, #28
 800d676:	4929      	ldr	r1, [pc, #164]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d678:	4313      	orrs	r3, r2
 800d67a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f003 0308 	and.w	r3, r3, #8
 800d686:	2b00      	cmp	r3, #0
 800d688:	d028      	beq.n	800d6dc <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d68a:	4b24      	ldr	r3, [pc, #144]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d68c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d690:	0e1b      	lsrs	r3, r3, #24
 800d692:	f003 030f 	and.w	r3, r3, #15
 800d696:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d698:	4b20      	ldr	r3, [pc, #128]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d69a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d69e:	0c1b      	lsrs	r3, r3, #16
 800d6a0:	f003 0303 	and.w	r3, r3, #3
 800d6a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	695b      	ldr	r3, [r3, #20]
 800d6aa:	019a      	lsls	r2, r3, #6
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	041b      	lsls	r3, r3, #16
 800d6b0:	431a      	orrs	r2, r3
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	061b      	lsls	r3, r3, #24
 800d6b6:	431a      	orrs	r2, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	69db      	ldr	r3, [r3, #28]
 800d6bc:	071b      	lsls	r3, r3, #28
 800d6be:	4917      	ldr	r1, [pc, #92]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d6c6:	4b15      	ldr	r3, [pc, #84]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d6c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6d4:	4911      	ldr	r1, [pc, #68]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d6dc:	4b0f      	ldr	r3, [pc, #60]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a0e      	ldr	r2, [pc, #56]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d6e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6e8:	f7fc fc12 	bl	8009f10 <HAL_GetTick>
 800d6ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d6ee:	e008      	b.n	800d702 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d6f0:	f7fc fc0e 	bl	8009f10 <HAL_GetTick>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	1ad3      	subs	r3, r2, r3
 800d6fa:	2b64      	cmp	r3, #100	; 0x64
 800d6fc:	d901      	bls.n	800d702 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d6fe:	2303      	movs	r3, #3
 800d700:	e007      	b.n	800d712 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d702:	4b06      	ldr	r3, [pc, #24]	; (800d71c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d70a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d70e:	d1ef      	bne.n	800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800d710:	2300      	movs	r3, #0
}
 800d712:	4618      	mov	r0, r3
 800d714:	3720      	adds	r7, #32
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	40023800 	.word	0x40023800

0800d720 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b084      	sub	sp, #16
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d101      	bne.n	800d732 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d72e:	2301      	movs	r3, #1
 800d730:	e084      	b.n	800d83c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2200      	movs	r2, #0
 800d736:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	2b00      	cmp	r3, #0
 800d742:	d106      	bne.n	800d752 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2200      	movs	r2, #0
 800d748:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f7fb ff4b 	bl	80095e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2202      	movs	r2, #2
 800d756:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d768:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	68db      	ldr	r3, [r3, #12]
 800d76e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d772:	d902      	bls.n	800d77a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d774:	2300      	movs	r3, #0
 800d776:	60fb      	str	r3, [r7, #12]
 800d778:	e002      	b.n	800d780 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d77a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d77e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	68db      	ldr	r3, [r3, #12]
 800d784:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d788:	d007      	beq.n	800d79a <HAL_SPI_Init+0x7a>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d792:	d002      	beq.n	800d79a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d10b      	bne.n	800d7ba <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	68db      	ldr	r3, [r3, #12]
 800d7a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d7aa:	d903      	bls.n	800d7b4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2202      	movs	r2, #2
 800d7b0:	631a      	str	r2, [r3, #48]	; 0x30
 800d7b2:	e002      	b.n	800d7ba <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	685a      	ldr	r2, [r3, #4]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	689b      	ldr	r3, [r3, #8]
 800d7c2:	431a      	orrs	r2, r3
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	691b      	ldr	r3, [r3, #16]
 800d7c8:	431a      	orrs	r2, r3
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	695b      	ldr	r3, [r3, #20]
 800d7ce:	431a      	orrs	r2, r3
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	699b      	ldr	r3, [r3, #24]
 800d7d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d7d8:	431a      	orrs	r2, r3
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	69db      	ldr	r3, [r3, #28]
 800d7de:	431a      	orrs	r2, r3
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6a1b      	ldr	r3, [r3, #32]
 800d7e4:	ea42 0103 	orr.w	r1, r2, r3
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	430a      	orrs	r2, r1
 800d7f2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	699b      	ldr	r3, [r3, #24]
 800d7f8:	0c1b      	lsrs	r3, r3, #16
 800d7fa:	f003 0204 	and.w	r2, r3, #4
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d802:	431a      	orrs	r2, r3
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d808:	431a      	orrs	r2, r3
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	ea42 0103 	orr.w	r1, r2, r3
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	68fa      	ldr	r2, [r7, #12]
 800d818:	430a      	orrs	r2, r1
 800d81a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	69da      	ldr	r2, [r3, #28]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d82a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2201      	movs	r2, #1
 800d836:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d83a:	2300      	movs	r3, #0
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3710      	adds	r7, #16
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d101      	bne.n	800d856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d852:	2301      	movs	r3, #1
 800d854:	e01d      	b.n	800d892 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d106      	bne.n	800d870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2200      	movs	r2, #0
 800d866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7fb ff1e 	bl	80096ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2202      	movs	r2, #2
 800d874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	3304      	adds	r3, #4
 800d880:	4619      	mov	r1, r3
 800d882:	4610      	mov	r0, r2
 800d884:	f000 fb10 	bl	800dea8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2201      	movs	r2, #1
 800d88c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d890:	2300      	movs	r3, #0
}
 800d892:	4618      	mov	r0, r3
 800d894:	3708      	adds	r7, #8
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
	...

0800d89c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b085      	sub	sp, #20
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	68da      	ldr	r2, [r3, #12]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f042 0201 	orr.w	r2, r2, #1
 800d8b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	689a      	ldr	r2, [r3, #8]
 800d8ba:	4b0c      	ldr	r3, [pc, #48]	; (800d8ec <HAL_TIM_Base_Start_IT+0x50>)
 800d8bc:	4013      	ands	r3, r2
 800d8be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2b06      	cmp	r3, #6
 800d8c4:	d00b      	beq.n	800d8de <HAL_TIM_Base_Start_IT+0x42>
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8cc:	d007      	beq.n	800d8de <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f042 0201 	orr.w	r2, r2, #1
 800d8dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d8de:	2300      	movs	r3, #0
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3714      	adds	r7, #20
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr
 800d8ec:	00010007 	.word	0x00010007

0800d8f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d101      	bne.n	800d902 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800d8fe:	2301      	movs	r3, #1
 800d900:	e01d      	b.n	800d93e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d908:	b2db      	uxtb	r3, r3
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d106      	bne.n	800d91c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2200      	movs	r2, #0
 800d912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 f815 	bl	800d946 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2202      	movs	r2, #2
 800d920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681a      	ldr	r2, [r3, #0]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	3304      	adds	r3, #4
 800d92c:	4619      	mov	r1, r3
 800d92e:	4610      	mov	r0, r2
 800d930:	f000 faba 	bl	800dea8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2201      	movs	r2, #1
 800d938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d93c:	2300      	movs	r3, #0
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800d946:	b480      	push	{r7}
 800d948:	b083      	sub	sp, #12
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800d94e:	bf00      	nop
 800d950:	370c      	adds	r7, #12
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr

0800d95a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b082      	sub	sp, #8
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	691b      	ldr	r3, [r3, #16]
 800d968:	f003 0302 	and.w	r3, r3, #2
 800d96c:	2b02      	cmp	r3, #2
 800d96e:	d122      	bne.n	800d9b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	68db      	ldr	r3, [r3, #12]
 800d976:	f003 0302 	and.w	r3, r3, #2
 800d97a:	2b02      	cmp	r3, #2
 800d97c:	d11b      	bne.n	800d9b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f06f 0202 	mvn.w	r2, #2
 800d986:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2201      	movs	r2, #1
 800d98c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	699b      	ldr	r3, [r3, #24]
 800d994:	f003 0303 	and.w	r3, r3, #3
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d003      	beq.n	800d9a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f000 fa65 	bl	800de6c <HAL_TIM_IC_CaptureCallback>
 800d9a2:	e005      	b.n	800d9b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f000 fa57 	bl	800de58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 fa68 	bl	800de80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	691b      	ldr	r3, [r3, #16]
 800d9bc:	f003 0304 	and.w	r3, r3, #4
 800d9c0:	2b04      	cmp	r3, #4
 800d9c2:	d122      	bne.n	800da0a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	68db      	ldr	r3, [r3, #12]
 800d9ca:	f003 0304 	and.w	r3, r3, #4
 800d9ce:	2b04      	cmp	r3, #4
 800d9d0:	d11b      	bne.n	800da0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f06f 0204 	mvn.w	r2, #4
 800d9da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2202      	movs	r2, #2
 800d9e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	699b      	ldr	r3, [r3, #24]
 800d9e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d003      	beq.n	800d9f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f000 fa3b 	bl	800de6c <HAL_TIM_IC_CaptureCallback>
 800d9f6:	e005      	b.n	800da04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 fa2d 	bl	800de58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 fa3e 	bl	800de80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2200      	movs	r2, #0
 800da08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	691b      	ldr	r3, [r3, #16]
 800da10:	f003 0308 	and.w	r3, r3, #8
 800da14:	2b08      	cmp	r3, #8
 800da16:	d122      	bne.n	800da5e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	f003 0308 	and.w	r3, r3, #8
 800da22:	2b08      	cmp	r3, #8
 800da24:	d11b      	bne.n	800da5e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f06f 0208 	mvn.w	r2, #8
 800da2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2204      	movs	r2, #4
 800da34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	69db      	ldr	r3, [r3, #28]
 800da3c:	f003 0303 	and.w	r3, r3, #3
 800da40:	2b00      	cmp	r3, #0
 800da42:	d003      	beq.n	800da4c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f000 fa11 	bl	800de6c <HAL_TIM_IC_CaptureCallback>
 800da4a:	e005      	b.n	800da58 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 fa03 	bl	800de58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 fa14 	bl	800de80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2200      	movs	r2, #0
 800da5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	691b      	ldr	r3, [r3, #16]
 800da64:	f003 0310 	and.w	r3, r3, #16
 800da68:	2b10      	cmp	r3, #16
 800da6a:	d122      	bne.n	800dab2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	68db      	ldr	r3, [r3, #12]
 800da72:	f003 0310 	and.w	r3, r3, #16
 800da76:	2b10      	cmp	r3, #16
 800da78:	d11b      	bne.n	800dab2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f06f 0210 	mvn.w	r2, #16
 800da82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2208      	movs	r2, #8
 800da88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	69db      	ldr	r3, [r3, #28]
 800da90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da94:	2b00      	cmp	r3, #0
 800da96:	d003      	beq.n	800daa0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 f9e7 	bl	800de6c <HAL_TIM_IC_CaptureCallback>
 800da9e:	e005      	b.n	800daac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 f9d9 	bl	800de58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f000 f9ea 	bl	800de80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2200      	movs	r2, #0
 800dab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	691b      	ldr	r3, [r3, #16]
 800dab8:	f003 0301 	and.w	r3, r3, #1
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d10e      	bne.n	800dade <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	68db      	ldr	r3, [r3, #12]
 800dac6:	f003 0301 	and.w	r3, r3, #1
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d107      	bne.n	800dade <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f06f 0201 	mvn.w	r2, #1
 800dad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 f9b3 	bl	800de44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	691b      	ldr	r3, [r3, #16]
 800dae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dae8:	2b80      	cmp	r3, #128	; 0x80
 800daea:	d10e      	bne.n	800db0a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daf6:	2b80      	cmp	r3, #128	; 0x80
 800daf8:	d107      	bne.n	800db0a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800db02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f000 fccb 	bl	800e4a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	691b      	ldr	r3, [r3, #16]
 800db10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db18:	d10e      	bne.n	800db38 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db24:	2b80      	cmp	r3, #128	; 0x80
 800db26:	d107      	bne.n	800db38 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800db30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 fcbe 	bl	800e4b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	691b      	ldr	r3, [r3, #16]
 800db3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db42:	2b40      	cmp	r3, #64	; 0x40
 800db44:	d10e      	bne.n	800db64 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	68db      	ldr	r3, [r3, #12]
 800db4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db50:	2b40      	cmp	r3, #64	; 0x40
 800db52:	d107      	bne.n	800db64 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800db5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f000 f998 	bl	800de94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	691b      	ldr	r3, [r3, #16]
 800db6a:	f003 0320 	and.w	r3, r3, #32
 800db6e:	2b20      	cmp	r3, #32
 800db70:	d10e      	bne.n	800db90 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	f003 0320 	and.w	r3, r3, #32
 800db7c:	2b20      	cmp	r3, #32
 800db7e:	d107      	bne.n	800db90 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f06f 0220 	mvn.w	r2, #32
 800db88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f000 fc7e 	bl	800e48c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800db90:	bf00      	nop
 800db92:	3708      	adds	r7, #8
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	60b9      	str	r1, [r7, #8]
 800dba2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	d101      	bne.n	800dbb2 <HAL_TIM_IC_ConfigChannel+0x1a>
 800dbae:	2302      	movs	r3, #2
 800dbb0:	e08a      	b.n	800dcc8 <HAL_TIM_IC_ConfigChannel+0x130>
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2202      	movs	r2, #2
 800dbbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d11b      	bne.n	800dc00 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	6818      	ldr	r0, [r3, #0]
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	6819      	ldr	r1, [r3, #0]
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	685a      	ldr	r2, [r3, #4]
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	68db      	ldr	r3, [r3, #12]
 800dbd8:	f000 fa06 	bl	800dfe8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	699a      	ldr	r2, [r3, #24]
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f022 020c 	bic.w	r2, r2, #12
 800dbea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	6999      	ldr	r1, [r3, #24]
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	689a      	ldr	r2, [r3, #8]
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	430a      	orrs	r2, r1
 800dbfc:	619a      	str	r2, [r3, #24]
 800dbfe:	e05a      	b.n	800dcb6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2b04      	cmp	r3, #4
 800dc04:	d11c      	bne.n	800dc40 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	6818      	ldr	r0, [r3, #0]
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	6819      	ldr	r1, [r3, #0]
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	685a      	ldr	r2, [r3, #4]
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	f000 fa8a 	bl	800e12e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	699a      	ldr	r2, [r3, #24]
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800dc28:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	6999      	ldr	r1, [r3, #24]
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	689b      	ldr	r3, [r3, #8]
 800dc34:	021a      	lsls	r2, r3, #8
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	430a      	orrs	r2, r1
 800dc3c:	619a      	str	r2, [r3, #24]
 800dc3e:	e03a      	b.n	800dcb6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2b08      	cmp	r3, #8
 800dc44:	d11b      	bne.n	800dc7e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	6818      	ldr	r0, [r3, #0]
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	6819      	ldr	r1, [r3, #0]
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	685a      	ldr	r2, [r3, #4]
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	68db      	ldr	r3, [r3, #12]
 800dc56:	f000 fad7 	bl	800e208 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	69da      	ldr	r2, [r3, #28]
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f022 020c 	bic.w	r2, r2, #12
 800dc68:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	69d9      	ldr	r1, [r3, #28]
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	689a      	ldr	r2, [r3, #8]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	430a      	orrs	r2, r1
 800dc7a:	61da      	str	r2, [r3, #28]
 800dc7c:	e01b      	b.n	800dcb6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	6818      	ldr	r0, [r3, #0]
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	6819      	ldr	r1, [r3, #0]
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	685a      	ldr	r2, [r3, #4]
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	68db      	ldr	r3, [r3, #12]
 800dc8e:	f000 faf7 	bl	800e280 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	69da      	ldr	r2, [r3, #28]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800dca0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	69d9      	ldr	r1, [r3, #28]
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	689b      	ldr	r3, [r3, #8]
 800dcac:	021a      	lsls	r2, r3, #8
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	430a      	orrs	r2, r1
 800dcb4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2201      	movs	r2, #1
 800dcba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dcc6:	2300      	movs	r3, #0
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	d101      	bne.n	800dce8 <HAL_TIM_ConfigClockSource+0x18>
 800dce4:	2302      	movs	r3, #2
 800dce6:	e0a6      	b.n	800de36 <HAL_TIM_ConfigClockSource+0x166>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2201      	movs	r2, #1
 800dcec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2202      	movs	r2, #2
 800dcf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	689b      	ldr	r3, [r3, #8]
 800dcfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dd00:	68fa      	ldr	r2, [r7, #12]
 800dd02:	4b4f      	ldr	r3, [pc, #316]	; (800de40 <HAL_TIM_ConfigClockSource+0x170>)
 800dd04:	4013      	ands	r3, r2
 800dd06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dd0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	68fa      	ldr	r2, [r7, #12]
 800dd16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	2b40      	cmp	r3, #64	; 0x40
 800dd1e:	d067      	beq.n	800ddf0 <HAL_TIM_ConfigClockSource+0x120>
 800dd20:	2b40      	cmp	r3, #64	; 0x40
 800dd22:	d80b      	bhi.n	800dd3c <HAL_TIM_ConfigClockSource+0x6c>
 800dd24:	2b10      	cmp	r3, #16
 800dd26:	d073      	beq.n	800de10 <HAL_TIM_ConfigClockSource+0x140>
 800dd28:	2b10      	cmp	r3, #16
 800dd2a:	d802      	bhi.n	800dd32 <HAL_TIM_ConfigClockSource+0x62>
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d06f      	beq.n	800de10 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800dd30:	e078      	b.n	800de24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800dd32:	2b20      	cmp	r3, #32
 800dd34:	d06c      	beq.n	800de10 <HAL_TIM_ConfigClockSource+0x140>
 800dd36:	2b30      	cmp	r3, #48	; 0x30
 800dd38:	d06a      	beq.n	800de10 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800dd3a:	e073      	b.n	800de24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800dd3c:	2b70      	cmp	r3, #112	; 0x70
 800dd3e:	d00d      	beq.n	800dd5c <HAL_TIM_ConfigClockSource+0x8c>
 800dd40:	2b70      	cmp	r3, #112	; 0x70
 800dd42:	d804      	bhi.n	800dd4e <HAL_TIM_ConfigClockSource+0x7e>
 800dd44:	2b50      	cmp	r3, #80	; 0x50
 800dd46:	d033      	beq.n	800ddb0 <HAL_TIM_ConfigClockSource+0xe0>
 800dd48:	2b60      	cmp	r3, #96	; 0x60
 800dd4a:	d041      	beq.n	800ddd0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800dd4c:	e06a      	b.n	800de24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800dd4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd52:	d066      	beq.n	800de22 <HAL_TIM_ConfigClockSource+0x152>
 800dd54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dd58:	d017      	beq.n	800dd8a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800dd5a:	e063      	b.n	800de24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6818      	ldr	r0, [r3, #0]
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	6899      	ldr	r1, [r3, #8]
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	685a      	ldr	r2, [r3, #4]
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	f000 fae0 	bl	800e330 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	689b      	ldr	r3, [r3, #8]
 800dd76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dd7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	68fa      	ldr	r2, [r7, #12]
 800dd86:	609a      	str	r2, [r3, #8]
      break;
 800dd88:	e04c      	b.n	800de24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6818      	ldr	r0, [r3, #0]
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	6899      	ldr	r1, [r3, #8]
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	685a      	ldr	r2, [r3, #4]
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	f000 fac9 	bl	800e330 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	689a      	ldr	r2, [r3, #8]
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ddac:	609a      	str	r2, [r3, #8]
      break;
 800ddae:	e039      	b.n	800de24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6818      	ldr	r0, [r3, #0]
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	6859      	ldr	r1, [r3, #4]
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	68db      	ldr	r3, [r3, #12]
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	f000 f987 	bl	800e0d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2150      	movs	r1, #80	; 0x50
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f000 fa96 	bl	800e2fa <TIM_ITRx_SetConfig>
      break;
 800ddce:	e029      	b.n	800de24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6818      	ldr	r0, [r3, #0]
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	6859      	ldr	r1, [r3, #4]
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	68db      	ldr	r3, [r3, #12]
 800dddc:	461a      	mov	r2, r3
 800ddde:	f000 f9e3 	bl	800e1a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2160      	movs	r1, #96	; 0x60
 800dde8:	4618      	mov	r0, r3
 800ddea:	f000 fa86 	bl	800e2fa <TIM_ITRx_SetConfig>
      break;
 800ddee:	e019      	b.n	800de24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6818      	ldr	r0, [r3, #0]
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	6859      	ldr	r1, [r3, #4]
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	68db      	ldr	r3, [r3, #12]
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	f000 f967 	bl	800e0d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	2140      	movs	r1, #64	; 0x40
 800de08:	4618      	mov	r0, r3
 800de0a:	f000 fa76 	bl	800e2fa <TIM_ITRx_SetConfig>
      break;
 800de0e:	e009      	b.n	800de24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	4619      	mov	r1, r3
 800de1a:	4610      	mov	r0, r2
 800de1c:	f000 fa6d 	bl	800e2fa <TIM_ITRx_SetConfig>
      break;
 800de20:	e000      	b.n	800de24 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800de22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2201      	movs	r2, #1
 800de28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2200      	movs	r2, #0
 800de30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800de34:	2300      	movs	r3, #0
}
 800de36:	4618      	mov	r0, r3
 800de38:	3710      	adds	r7, #16
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	bf00      	nop
 800de40:	fffeff88 	.word	0xfffeff88

0800de44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800de44:	b480      	push	{r7}
 800de46:	b083      	sub	sp, #12
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800de4c:	bf00      	nop
 800de4e:	370c      	adds	r7, #12
 800de50:	46bd      	mov	sp, r7
 800de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de56:	4770      	bx	lr

0800de58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800de58:	b480      	push	{r7}
 800de5a:	b083      	sub	sp, #12
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800de60:	bf00      	nop
 800de62:	370c      	adds	r7, #12
 800de64:	46bd      	mov	sp, r7
 800de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6a:	4770      	bx	lr

0800de6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b083      	sub	sp, #12
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800de74:	bf00      	nop
 800de76:	370c      	adds	r7, #12
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr

0800de80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800de80:	b480      	push	{r7}
 800de82:	b083      	sub	sp, #12
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800de88:	bf00      	nop
 800de8a:	370c      	adds	r7, #12
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr

0800de94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800de94:	b480      	push	{r7}
 800de96:	b083      	sub	sp, #12
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800de9c:	bf00      	nop
 800de9e:	370c      	adds	r7, #12
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr

0800dea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b085      	sub	sp, #20
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	4a40      	ldr	r2, [pc, #256]	; (800dfbc <TIM_Base_SetConfig+0x114>)
 800debc:	4293      	cmp	r3, r2
 800debe:	d013      	beq.n	800dee8 <TIM_Base_SetConfig+0x40>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dec6:	d00f      	beq.n	800dee8 <TIM_Base_SetConfig+0x40>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	4a3d      	ldr	r2, [pc, #244]	; (800dfc0 <TIM_Base_SetConfig+0x118>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d00b      	beq.n	800dee8 <TIM_Base_SetConfig+0x40>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	4a3c      	ldr	r2, [pc, #240]	; (800dfc4 <TIM_Base_SetConfig+0x11c>)
 800ded4:	4293      	cmp	r3, r2
 800ded6:	d007      	beq.n	800dee8 <TIM_Base_SetConfig+0x40>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	4a3b      	ldr	r2, [pc, #236]	; (800dfc8 <TIM_Base_SetConfig+0x120>)
 800dedc:	4293      	cmp	r3, r2
 800dede:	d003      	beq.n	800dee8 <TIM_Base_SetConfig+0x40>
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	4a3a      	ldr	r2, [pc, #232]	; (800dfcc <TIM_Base_SetConfig+0x124>)
 800dee4:	4293      	cmp	r3, r2
 800dee6:	d108      	bne.n	800defa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800deee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	68fa      	ldr	r2, [r7, #12]
 800def6:	4313      	orrs	r3, r2
 800def8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4a2f      	ldr	r2, [pc, #188]	; (800dfbc <TIM_Base_SetConfig+0x114>)
 800defe:	4293      	cmp	r3, r2
 800df00:	d02b      	beq.n	800df5a <TIM_Base_SetConfig+0xb2>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df08:	d027      	beq.n	800df5a <TIM_Base_SetConfig+0xb2>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	4a2c      	ldr	r2, [pc, #176]	; (800dfc0 <TIM_Base_SetConfig+0x118>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d023      	beq.n	800df5a <TIM_Base_SetConfig+0xb2>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	4a2b      	ldr	r2, [pc, #172]	; (800dfc4 <TIM_Base_SetConfig+0x11c>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d01f      	beq.n	800df5a <TIM_Base_SetConfig+0xb2>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	4a2a      	ldr	r2, [pc, #168]	; (800dfc8 <TIM_Base_SetConfig+0x120>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d01b      	beq.n	800df5a <TIM_Base_SetConfig+0xb2>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	4a29      	ldr	r2, [pc, #164]	; (800dfcc <TIM_Base_SetConfig+0x124>)
 800df26:	4293      	cmp	r3, r2
 800df28:	d017      	beq.n	800df5a <TIM_Base_SetConfig+0xb2>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	4a28      	ldr	r2, [pc, #160]	; (800dfd0 <TIM_Base_SetConfig+0x128>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	d013      	beq.n	800df5a <TIM_Base_SetConfig+0xb2>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	4a27      	ldr	r2, [pc, #156]	; (800dfd4 <TIM_Base_SetConfig+0x12c>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d00f      	beq.n	800df5a <TIM_Base_SetConfig+0xb2>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	4a26      	ldr	r2, [pc, #152]	; (800dfd8 <TIM_Base_SetConfig+0x130>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d00b      	beq.n	800df5a <TIM_Base_SetConfig+0xb2>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	4a25      	ldr	r2, [pc, #148]	; (800dfdc <TIM_Base_SetConfig+0x134>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d007      	beq.n	800df5a <TIM_Base_SetConfig+0xb2>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	4a24      	ldr	r2, [pc, #144]	; (800dfe0 <TIM_Base_SetConfig+0x138>)
 800df4e:	4293      	cmp	r3, r2
 800df50:	d003      	beq.n	800df5a <TIM_Base_SetConfig+0xb2>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	4a23      	ldr	r2, [pc, #140]	; (800dfe4 <TIM_Base_SetConfig+0x13c>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d108      	bne.n	800df6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	68fa      	ldr	r2, [r7, #12]
 800df68:	4313      	orrs	r3, r2
 800df6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	695b      	ldr	r3, [r3, #20]
 800df76:	4313      	orrs	r3, r2
 800df78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	68fa      	ldr	r2, [r7, #12]
 800df7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	689a      	ldr	r2, [r3, #8]
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	4a0a      	ldr	r2, [pc, #40]	; (800dfbc <TIM_Base_SetConfig+0x114>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d003      	beq.n	800dfa0 <TIM_Base_SetConfig+0xf8>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	4a0c      	ldr	r2, [pc, #48]	; (800dfcc <TIM_Base_SetConfig+0x124>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d103      	bne.n	800dfa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	691a      	ldr	r2, [r3, #16]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2201      	movs	r2, #1
 800dfac:	615a      	str	r2, [r3, #20]
}
 800dfae:	bf00      	nop
 800dfb0:	3714      	adds	r7, #20
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr
 800dfba:	bf00      	nop
 800dfbc:	40010000 	.word	0x40010000
 800dfc0:	40000400 	.word	0x40000400
 800dfc4:	40000800 	.word	0x40000800
 800dfc8:	40000c00 	.word	0x40000c00
 800dfcc:	40010400 	.word	0x40010400
 800dfd0:	40014000 	.word	0x40014000
 800dfd4:	40014400 	.word	0x40014400
 800dfd8:	40014800 	.word	0x40014800
 800dfdc:	40001800 	.word	0x40001800
 800dfe0:	40001c00 	.word	0x40001c00
 800dfe4:	40002000 	.word	0x40002000

0800dfe8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b087      	sub	sp, #28
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	60f8      	str	r0, [r7, #12]
 800dff0:	60b9      	str	r1, [r7, #8]
 800dff2:	607a      	str	r2, [r7, #4]
 800dff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	6a1b      	ldr	r3, [r3, #32]
 800dffa:	f023 0201 	bic.w	r2, r3, #1
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	699b      	ldr	r3, [r3, #24]
 800e006:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6a1b      	ldr	r3, [r3, #32]
 800e00c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	4a28      	ldr	r2, [pc, #160]	; (800e0b4 <TIM_TI1_SetConfig+0xcc>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d01b      	beq.n	800e04e <TIM_TI1_SetConfig+0x66>
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e01c:	d017      	beq.n	800e04e <TIM_TI1_SetConfig+0x66>
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	4a25      	ldr	r2, [pc, #148]	; (800e0b8 <TIM_TI1_SetConfig+0xd0>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d013      	beq.n	800e04e <TIM_TI1_SetConfig+0x66>
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	4a24      	ldr	r2, [pc, #144]	; (800e0bc <TIM_TI1_SetConfig+0xd4>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d00f      	beq.n	800e04e <TIM_TI1_SetConfig+0x66>
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	4a23      	ldr	r2, [pc, #140]	; (800e0c0 <TIM_TI1_SetConfig+0xd8>)
 800e032:	4293      	cmp	r3, r2
 800e034:	d00b      	beq.n	800e04e <TIM_TI1_SetConfig+0x66>
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	4a22      	ldr	r2, [pc, #136]	; (800e0c4 <TIM_TI1_SetConfig+0xdc>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d007      	beq.n	800e04e <TIM_TI1_SetConfig+0x66>
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	4a21      	ldr	r2, [pc, #132]	; (800e0c8 <TIM_TI1_SetConfig+0xe0>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d003      	beq.n	800e04e <TIM_TI1_SetConfig+0x66>
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	4a20      	ldr	r2, [pc, #128]	; (800e0cc <TIM_TI1_SetConfig+0xe4>)
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d101      	bne.n	800e052 <TIM_TI1_SetConfig+0x6a>
 800e04e:	2301      	movs	r3, #1
 800e050:	e000      	b.n	800e054 <TIM_TI1_SetConfig+0x6c>
 800e052:	2300      	movs	r3, #0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d008      	beq.n	800e06a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	f023 0303 	bic.w	r3, r3, #3
 800e05e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800e060:	697a      	ldr	r2, [r7, #20]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	4313      	orrs	r3, r2
 800e066:	617b      	str	r3, [r7, #20]
 800e068:	e003      	b.n	800e072 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	f043 0301 	orr.w	r3, r3, #1
 800e070:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e078:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	011b      	lsls	r3, r3, #4
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	697a      	ldr	r2, [r7, #20]
 800e082:	4313      	orrs	r3, r2
 800e084:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	f023 030a 	bic.w	r3, r3, #10
 800e08c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	f003 030a 	and.w	r3, r3, #10
 800e094:	693a      	ldr	r2, [r7, #16]
 800e096:	4313      	orrs	r3, r2
 800e098:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	697a      	ldr	r2, [r7, #20]
 800e09e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	693a      	ldr	r2, [r7, #16]
 800e0a4:	621a      	str	r2, [r3, #32]
}
 800e0a6:	bf00      	nop
 800e0a8:	371c      	adds	r7, #28
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b0:	4770      	bx	lr
 800e0b2:	bf00      	nop
 800e0b4:	40010000 	.word	0x40010000
 800e0b8:	40000400 	.word	0x40000400
 800e0bc:	40000800 	.word	0x40000800
 800e0c0:	40000c00 	.word	0x40000c00
 800e0c4:	40010400 	.word	0x40010400
 800e0c8:	40014000 	.word	0x40014000
 800e0cc:	40001800 	.word	0x40001800

0800e0d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b087      	sub	sp, #28
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	60f8      	str	r0, [r7, #12]
 800e0d8:	60b9      	str	r1, [r7, #8]
 800e0da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	6a1b      	ldr	r3, [r3, #32]
 800e0e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	6a1b      	ldr	r3, [r3, #32]
 800e0e6:	f023 0201 	bic.w	r2, r3, #1
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	699b      	ldr	r3, [r3, #24]
 800e0f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e0fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	011b      	lsls	r3, r3, #4
 800e100:	693a      	ldr	r2, [r7, #16]
 800e102:	4313      	orrs	r3, r2
 800e104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	f023 030a 	bic.w	r3, r3, #10
 800e10c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e10e:	697a      	ldr	r2, [r7, #20]
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	4313      	orrs	r3, r2
 800e114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	693a      	ldr	r2, [r7, #16]
 800e11a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	697a      	ldr	r2, [r7, #20]
 800e120:	621a      	str	r2, [r3, #32]
}
 800e122:	bf00      	nop
 800e124:	371c      	adds	r7, #28
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr

0800e12e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e12e:	b480      	push	{r7}
 800e130:	b087      	sub	sp, #28
 800e132:	af00      	add	r7, sp, #0
 800e134:	60f8      	str	r0, [r7, #12]
 800e136:	60b9      	str	r1, [r7, #8]
 800e138:	607a      	str	r2, [r7, #4]
 800e13a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6a1b      	ldr	r3, [r3, #32]
 800e140:	f023 0210 	bic.w	r2, r3, #16
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	699b      	ldr	r3, [r3, #24]
 800e14c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	6a1b      	ldr	r3, [r3, #32]
 800e152:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e15a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	021b      	lsls	r3, r3, #8
 800e160:	697a      	ldr	r2, [r7, #20]
 800e162:	4313      	orrs	r3, r2
 800e164:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e16c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	031b      	lsls	r3, r3, #12
 800e172:	b29b      	uxth	r3, r3
 800e174:	697a      	ldr	r2, [r7, #20]
 800e176:	4313      	orrs	r3, r2
 800e178:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e180:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	011b      	lsls	r3, r3, #4
 800e186:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e18a:	693a      	ldr	r2, [r7, #16]
 800e18c:	4313      	orrs	r3, r2
 800e18e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	697a      	ldr	r2, [r7, #20]
 800e194:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	693a      	ldr	r2, [r7, #16]
 800e19a:	621a      	str	r2, [r3, #32]
}
 800e19c:	bf00      	nop
 800e19e:	371c      	adds	r7, #28
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b087      	sub	sp, #28
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	60f8      	str	r0, [r7, #12]
 800e1b0:	60b9      	str	r1, [r7, #8]
 800e1b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	6a1b      	ldr	r3, [r3, #32]
 800e1b8:	f023 0210 	bic.w	r2, r3, #16
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	699b      	ldr	r3, [r3, #24]
 800e1c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	6a1b      	ldr	r3, [r3, #32]
 800e1ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e1d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	031b      	lsls	r3, r3, #12
 800e1d8:	697a      	ldr	r2, [r7, #20]
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e1e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	011b      	lsls	r3, r3, #4
 800e1ea:	693a      	ldr	r2, [r7, #16]
 800e1ec:	4313      	orrs	r3, r2
 800e1ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	697a      	ldr	r2, [r7, #20]
 800e1f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	693a      	ldr	r2, [r7, #16]
 800e1fa:	621a      	str	r2, [r3, #32]
}
 800e1fc:	bf00      	nop
 800e1fe:	371c      	adds	r7, #28
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	4770      	bx	lr

0800e208 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e208:	b480      	push	{r7}
 800e20a:	b087      	sub	sp, #28
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	60f8      	str	r0, [r7, #12]
 800e210:	60b9      	str	r1, [r7, #8]
 800e212:	607a      	str	r2, [r7, #4]
 800e214:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	6a1b      	ldr	r3, [r3, #32]
 800e21a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	69db      	ldr	r3, [r3, #28]
 800e226:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	6a1b      	ldr	r3, [r3, #32]
 800e22c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	f023 0303 	bic.w	r3, r3, #3
 800e234:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800e236:	697a      	ldr	r2, [r7, #20]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	4313      	orrs	r3, r2
 800e23c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e244:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	011b      	lsls	r3, r3, #4
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	697a      	ldr	r2, [r7, #20]
 800e24e:	4313      	orrs	r3, r2
 800e250:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800e258:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	021b      	lsls	r3, r3, #8
 800e25e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800e262:	693a      	ldr	r2, [r7, #16]
 800e264:	4313      	orrs	r3, r2
 800e266:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	697a      	ldr	r2, [r7, #20]
 800e26c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	693a      	ldr	r2, [r7, #16]
 800e272:	621a      	str	r2, [r3, #32]
}
 800e274:	bf00      	nop
 800e276:	371c      	adds	r7, #28
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr

0800e280 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e280:	b480      	push	{r7}
 800e282:	b087      	sub	sp, #28
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	60b9      	str	r1, [r7, #8]
 800e28a:	607a      	str	r2, [r7, #4]
 800e28c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	6a1b      	ldr	r3, [r3, #32]
 800e292:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	69db      	ldr	r3, [r3, #28]
 800e29e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	6a1b      	ldr	r3, [r3, #32]
 800e2a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	021b      	lsls	r3, r3, #8
 800e2b2:	697a      	ldr	r2, [r7, #20]
 800e2b4:	4313      	orrs	r3, r2
 800e2b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e2be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	031b      	lsls	r3, r3, #12
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	697a      	ldr	r2, [r7, #20]
 800e2c8:	4313      	orrs	r3, r2
 800e2ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800e2d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	031b      	lsls	r3, r3, #12
 800e2d8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800e2dc:	693a      	ldr	r2, [r7, #16]
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	697a      	ldr	r2, [r7, #20]
 800e2e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	693a      	ldr	r2, [r7, #16]
 800e2ec:	621a      	str	r2, [r3, #32]
}
 800e2ee:	bf00      	nop
 800e2f0:	371c      	adds	r7, #28
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f8:	4770      	bx	lr

0800e2fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e2fa:	b480      	push	{r7}
 800e2fc:	b085      	sub	sp, #20
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	6078      	str	r0, [r7, #4]
 800e302:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	689b      	ldr	r3, [r3, #8]
 800e308:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e310:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e312:	683a      	ldr	r2, [r7, #0]
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	4313      	orrs	r3, r2
 800e318:	f043 0307 	orr.w	r3, r3, #7
 800e31c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	68fa      	ldr	r2, [r7, #12]
 800e322:	609a      	str	r2, [r3, #8]
}
 800e324:	bf00      	nop
 800e326:	3714      	adds	r7, #20
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr

0800e330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e330:	b480      	push	{r7}
 800e332:	b087      	sub	sp, #28
 800e334:	af00      	add	r7, sp, #0
 800e336:	60f8      	str	r0, [r7, #12]
 800e338:	60b9      	str	r1, [r7, #8]
 800e33a:	607a      	str	r2, [r7, #4]
 800e33c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	689b      	ldr	r3, [r3, #8]
 800e342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e34a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	021a      	lsls	r2, r3, #8
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	431a      	orrs	r2, r3
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	4313      	orrs	r3, r2
 800e358:	697a      	ldr	r2, [r7, #20]
 800e35a:	4313      	orrs	r3, r2
 800e35c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	697a      	ldr	r2, [r7, #20]
 800e362:	609a      	str	r2, [r3, #8]
}
 800e364:	bf00      	nop
 800e366:	371c      	adds	r7, #28
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e380:	2b01      	cmp	r3, #1
 800e382:	d101      	bne.n	800e388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e384:	2302      	movs	r3, #2
 800e386:	e06d      	b.n	800e464 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2201      	movs	r2, #1
 800e38c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2202      	movs	r2, #2
 800e394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	689b      	ldr	r3, [r3, #8]
 800e3a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4a30      	ldr	r2, [pc, #192]	; (800e470 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d004      	beq.n	800e3bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	4a2f      	ldr	r2, [pc, #188]	; (800e474 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	d108      	bne.n	800e3ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e3c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	68fa      	ldr	r2, [r7, #12]
 800e3ca:	4313      	orrs	r3, r2
 800e3cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e3d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	68fa      	ldr	r2, [r7, #12]
 800e3dc:	4313      	orrs	r3, r2
 800e3de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	68fa      	ldr	r2, [r7, #12]
 800e3e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	4a20      	ldr	r2, [pc, #128]	; (800e470 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d022      	beq.n	800e438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e3fa:	d01d      	beq.n	800e438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4a1d      	ldr	r2, [pc, #116]	; (800e478 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d018      	beq.n	800e438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	4a1c      	ldr	r2, [pc, #112]	; (800e47c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e40c:	4293      	cmp	r3, r2
 800e40e:	d013      	beq.n	800e438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4a1a      	ldr	r2, [pc, #104]	; (800e480 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e416:	4293      	cmp	r3, r2
 800e418:	d00e      	beq.n	800e438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	4a15      	ldr	r2, [pc, #84]	; (800e474 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e420:	4293      	cmp	r3, r2
 800e422:	d009      	beq.n	800e438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	4a16      	ldr	r2, [pc, #88]	; (800e484 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d004      	beq.n	800e438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	4a15      	ldr	r2, [pc, #84]	; (800e488 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d10c      	bne.n	800e452 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e43e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	689b      	ldr	r3, [r3, #8]
 800e444:	68ba      	ldr	r2, [r7, #8]
 800e446:	4313      	orrs	r3, r2
 800e448:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	68ba      	ldr	r2, [r7, #8]
 800e450:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2201      	movs	r2, #1
 800e456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2200      	movs	r2, #0
 800e45e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e462:	2300      	movs	r3, #0
}
 800e464:	4618      	mov	r0, r3
 800e466:	3714      	adds	r7, #20
 800e468:	46bd      	mov	sp, r7
 800e46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46e:	4770      	bx	lr
 800e470:	40010000 	.word	0x40010000
 800e474:	40010400 	.word	0x40010400
 800e478:	40000400 	.word	0x40000400
 800e47c:	40000800 	.word	0x40000800
 800e480:	40000c00 	.word	0x40000c00
 800e484:	40014000 	.word	0x40014000
 800e488:	40001800 	.word	0x40001800

0800e48c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b083      	sub	sp, #12
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e494:	bf00      	nop
 800e496:	370c      	adds	r7, #12
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr

0800e4a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b083      	sub	sp, #12
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e4a8:	bf00      	nop
 800e4aa:	370c      	adds	r7, #12
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b2:	4770      	bx	lr

0800e4b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b083      	sub	sp, #12
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e4bc:	bf00      	nop
 800e4be:	370c      	adds	r7, #12
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr

0800e4c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d101      	bne.n	800e4da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	e040      	b.n	800e55c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d106      	bne.n	800e4f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f7fb f99a 	bl	8009824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2224      	movs	r2, #36	; 0x24
 800e4f4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f022 0201 	bic.w	r2, r2, #1
 800e504:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f000 fb26 	bl	800eb58 <UART_SetConfig>
 800e50c:	4603      	mov	r3, r0
 800e50e:	2b01      	cmp	r3, #1
 800e510:	d101      	bne.n	800e516 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e512:	2301      	movs	r3, #1
 800e514:	e022      	b.n	800e55c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d002      	beq.n	800e524 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f000 fdc4 	bl	800f0ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	685a      	ldr	r2, [r3, #4]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e532:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	689a      	ldr	r2, [r3, #8]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e542:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	681a      	ldr	r2, [r3, #0]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f042 0201 	orr.w	r2, r2, #1
 800e552:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f000 fe4b 	bl	800f1f0 <UART_CheckIdleState>
 800e55a:	4603      	mov	r3, r0
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3708      	adds	r7, #8
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b08a      	sub	sp, #40	; 0x28
 800e568:	af02      	add	r7, sp, #8
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	60b9      	str	r1, [r7, #8]
 800e56e:	603b      	str	r3, [r7, #0]
 800e570:	4613      	mov	r3, r2
 800e572:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e578:	2b20      	cmp	r3, #32
 800e57a:	d17f      	bne.n	800e67c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d002      	beq.n	800e588 <HAL_UART_Transmit+0x24>
 800e582:	88fb      	ldrh	r3, [r7, #6]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d101      	bne.n	800e58c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e588:	2301      	movs	r3, #1
 800e58a:	e078      	b.n	800e67e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e592:	2b01      	cmp	r3, #1
 800e594:	d101      	bne.n	800e59a <HAL_UART_Transmit+0x36>
 800e596:	2302      	movs	r3, #2
 800e598:	e071      	b.n	800e67e <HAL_UART_Transmit+0x11a>
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2201      	movs	r2, #1
 800e59e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	2221      	movs	r2, #33	; 0x21
 800e5ac:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800e5ae:	f7fb fcaf 	bl	8009f10 <HAL_GetTick>
 800e5b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	88fa      	ldrh	r2, [r7, #6]
 800e5b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	88fa      	ldrh	r2, [r7, #6]
 800e5c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	689b      	ldr	r3, [r3, #8]
 800e5c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5cc:	d108      	bne.n	800e5e0 <HAL_UART_Transmit+0x7c>
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	691b      	ldr	r3, [r3, #16]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d104      	bne.n	800e5e0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	61bb      	str	r3, [r7, #24]
 800e5de:	e003      	b.n	800e5e8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800e5f0:	e02c      	b.n	800e64c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	9300      	str	r3, [sp, #0]
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	2180      	movs	r1, #128	; 0x80
 800e5fc:	68f8      	ldr	r0, [r7, #12]
 800e5fe:	f000 fe3c 	bl	800f27a <UART_WaitOnFlagUntilTimeout>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d001      	beq.n	800e60c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800e608:	2303      	movs	r3, #3
 800e60a:	e038      	b.n	800e67e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800e60c:	69fb      	ldr	r3, [r7, #28]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d10b      	bne.n	800e62a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e612:	69bb      	ldr	r3, [r7, #24]
 800e614:	881b      	ldrh	r3, [r3, #0]
 800e616:	461a      	mov	r2, r3
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e620:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	3302      	adds	r3, #2
 800e626:	61bb      	str	r3, [r7, #24]
 800e628:	e007      	b.n	800e63a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e62a:	69fb      	ldr	r3, [r7, #28]
 800e62c:	781a      	ldrb	r2, [r3, #0]
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e634:	69fb      	ldr	r3, [r7, #28]
 800e636:	3301      	adds	r3, #1
 800e638:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e640:	b29b      	uxth	r3, r3
 800e642:	3b01      	subs	r3, #1
 800e644:	b29a      	uxth	r2, r3
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e652:	b29b      	uxth	r3, r3
 800e654:	2b00      	cmp	r3, #0
 800e656:	d1cc      	bne.n	800e5f2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	9300      	str	r3, [sp, #0]
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	2200      	movs	r2, #0
 800e660:	2140      	movs	r1, #64	; 0x40
 800e662:	68f8      	ldr	r0, [r7, #12]
 800e664:	f000 fe09 	bl	800f27a <UART_WaitOnFlagUntilTimeout>
 800e668:	4603      	mov	r3, r0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d001      	beq.n	800e672 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800e66e:	2303      	movs	r3, #3
 800e670:	e005      	b.n	800e67e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2220      	movs	r2, #32
 800e676:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800e678:	2300      	movs	r3, #0
 800e67a:	e000      	b.n	800e67e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800e67c:	2302      	movs	r3, #2
  }
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3720      	adds	r7, #32
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
	...

0800e688 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	60b9      	str	r1, [r7, #8]
 800e692:	4613      	mov	r3, r2
 800e694:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e69a:	2b20      	cmp	r3, #32
 800e69c:	d16c      	bne.n	800e778 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d002      	beq.n	800e6aa <HAL_UART_Receive_DMA+0x22>
 800e6a4:	88fb      	ldrh	r3, [r7, #6]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d101      	bne.n	800e6ae <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	e065      	b.n	800e77a <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e6b4:	2b01      	cmp	r3, #1
 800e6b6:	d101      	bne.n	800e6bc <HAL_UART_Receive_DMA+0x34>
 800e6b8:	2302      	movs	r3, #2
 800e6ba:	e05e      	b.n	800e77a <HAL_UART_Receive_DMA+0xf2>
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	2201      	movs	r2, #1
 800e6c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	68ba      	ldr	r2, [r7, #8]
 800e6c8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	88fa      	ldrh	r2, [r7, #6]
 800e6ce:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2222      	movs	r2, #34	; 0x22
 800e6dc:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d02a      	beq.n	800e73c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6ea:	4a26      	ldr	r2, [pc, #152]	; (800e784 <HAL_UART_Receive_DMA+0xfc>)
 800e6ec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6f2:	4a25      	ldr	r2, [pc, #148]	; (800e788 <HAL_UART_Receive_DMA+0x100>)
 800e6f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6fa:	4a24      	ldr	r2, [pc, #144]	; (800e78c <HAL_UART_Receive_DMA+0x104>)
 800e6fc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e702:	2200      	movs	r2, #0
 800e704:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	3324      	adds	r3, #36	; 0x24
 800e710:	4619      	mov	r1, r3
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e716:	461a      	mov	r2, r3
 800e718:	88fb      	ldrh	r3, [r7, #6]
 800e71a:	f7fb feb3 	bl	800a484 <HAL_DMA_Start_IT>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d00b      	beq.n	800e73c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2210      	movs	r2, #16
 800e728:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	2200      	movs	r2, #0
 800e72e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2220      	movs	r2, #32
 800e736:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800e738:	2301      	movs	r3, #1
 800e73a:	e01e      	b.n	800e77a <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2200      	movs	r2, #0
 800e740:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	681a      	ldr	r2, [r3, #0]
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e752:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	689a      	ldr	r2, [r3, #8]
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	f042 0201 	orr.w	r2, r2, #1
 800e762:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	689a      	ldr	r2, [r3, #8]
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e772:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800e774:	2300      	movs	r3, #0
 800e776:	e000      	b.n	800e77a <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800e778:	2302      	movs	r3, #2
  }
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3710      	adds	r7, #16
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	0800f3db 	.word	0x0800f3db
 800e788:	0800f43f 	.word	0x0800f43f
 800e78c:	0800f45b 	.word	0x0800f45b

0800e790 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e79c:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7a2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	689b      	ldr	r3, [r3, #8]
 800e7aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7ae:	2b80      	cmp	r3, #128	; 0x80
 800e7b0:	d126      	bne.n	800e800 <HAL_UART_DMAStop+0x70>
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	2b21      	cmp	r3, #33	; 0x21
 800e7b6:	d123      	bne.n	800e800 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	689a      	ldr	r2, [r3, #8]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e7c6:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d014      	beq.n	800e7fa <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7fb feb5 	bl	800a544 <HAL_DMA_Abort>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d00c      	beq.n	800e7fa <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7fc f8c9 	bl	800a97c <HAL_DMA_GetError>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	2b20      	cmp	r3, #32
 800e7ee:	d104      	bne.n	800e7fa <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2210      	movs	r2, #16
 800e7f4:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800e7f6:	2303      	movs	r3, #3
 800e7f8:	e031      	b.n	800e85e <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f000 fdb8 	bl	800f370 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	689b      	ldr	r3, [r3, #8]
 800e806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e80a:	2b40      	cmp	r3, #64	; 0x40
 800e80c:	d126      	bne.n	800e85c <HAL_UART_DMAStop+0xcc>
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	2b22      	cmp	r3, #34	; 0x22
 800e812:	d123      	bne.n	800e85c <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	689a      	ldr	r2, [r3, #8]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e822:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d014      	beq.n	800e856 <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e830:	4618      	mov	r0, r3
 800e832:	f7fb fe87 	bl	800a544 <HAL_DMA_Abort>
 800e836:	4603      	mov	r3, r0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d00c      	beq.n	800e856 <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e840:	4618      	mov	r0, r3
 800e842:	f7fc f89b 	bl	800a97c <HAL_DMA_GetError>
 800e846:	4603      	mov	r3, r0
 800e848:	2b20      	cmp	r3, #32
 800e84a:	d104      	bne.n	800e856 <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2210      	movs	r2, #16
 800e850:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800e852:	2303      	movs	r3, #3
 800e854:	e003      	b.n	800e85e <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f000 fd9f 	bl	800f39a <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e85c:	2300      	movs	r3, #0
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3710      	adds	r7, #16
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
	...

0800e868 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b088      	sub	sp, #32
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	69db      	ldr	r3, [r3, #28]
 800e876:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	689b      	ldr	r3, [r3, #8]
 800e886:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e888:	69fa      	ldr	r2, [r7, #28]
 800e88a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e88e:	4013      	ands	r3, r2
 800e890:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d113      	bne.n	800e8c0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	f003 0320 	and.w	r3, r3, #32
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d00e      	beq.n	800e8c0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e8a2:	69bb      	ldr	r3, [r7, #24]
 800e8a4:	f003 0320 	and.w	r3, r3, #32
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d009      	beq.n	800e8c0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	f000 8114 	beq.w	800eade <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	4798      	blx	r3
      }
      return;
 800e8be:	e10e      	b.n	800eade <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	f000 80d6 	beq.w	800ea74 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	f003 0301 	and.w	r3, r3, #1
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d105      	bne.n	800e8de <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800e8d2:	69bb      	ldr	r3, [r7, #24]
 800e8d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	f000 80cb 	beq.w	800ea74 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	f003 0301 	and.w	r3, r3, #1
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d00e      	beq.n	800e906 <HAL_UART_IRQHandler+0x9e>
 800e8e8:	69bb      	ldr	r3, [r7, #24]
 800e8ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d009      	beq.n	800e906 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8fe:	f043 0201 	orr.w	r2, r3, #1
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	f003 0302 	and.w	r3, r3, #2
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d00e      	beq.n	800e92e <HAL_UART_IRQHandler+0xc6>
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	f003 0301 	and.w	r3, r3, #1
 800e916:	2b00      	cmp	r3, #0
 800e918:	d009      	beq.n	800e92e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	2202      	movs	r2, #2
 800e920:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e926:	f043 0204 	orr.w	r2, r3, #4
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	f003 0304 	and.w	r3, r3, #4
 800e934:	2b00      	cmp	r3, #0
 800e936:	d00e      	beq.n	800e956 <HAL_UART_IRQHandler+0xee>
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	f003 0301 	and.w	r3, r3, #1
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d009      	beq.n	800e956 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	2204      	movs	r2, #4
 800e948:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e94e:	f043 0202 	orr.w	r2, r3, #2
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e956:	69fb      	ldr	r3, [r7, #28]
 800e958:	f003 0308 	and.w	r3, r3, #8
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d013      	beq.n	800e988 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	f003 0320 	and.w	r3, r3, #32
 800e966:	2b00      	cmp	r3, #0
 800e968:	d104      	bne.n	800e974 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e970:	2b00      	cmp	r3, #0
 800e972:	d009      	beq.n	800e988 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	2208      	movs	r2, #8
 800e97a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e980:	f043 0208 	orr.w	r2, r3, #8
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d00f      	beq.n	800e9b2 <HAL_UART_IRQHandler+0x14a>
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d00a      	beq.n	800e9b2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e9a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9aa:	f043 0220 	orr.w	r2, r3, #32
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	f000 8093 	beq.w	800eae2 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e9bc:	69fb      	ldr	r3, [r7, #28]
 800e9be:	f003 0320 	and.w	r3, r3, #32
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d00c      	beq.n	800e9e0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e9c6:	69bb      	ldr	r3, [r7, #24]
 800e9c8:	f003 0320 	and.w	r3, r3, #32
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d007      	beq.n	800e9e0 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d003      	beq.n	800e9e0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9e4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	689b      	ldr	r3, [r3, #8]
 800e9ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9f0:	2b40      	cmp	r3, #64	; 0x40
 800e9f2:	d004      	beq.n	800e9fe <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d031      	beq.n	800ea62 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f000 fccb 	bl	800f39a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	689b      	ldr	r3, [r3, #8]
 800ea0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea0e:	2b40      	cmp	r3, #64	; 0x40
 800ea10:	d123      	bne.n	800ea5a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	689a      	ldr	r2, [r3, #8]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea20:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d013      	beq.n	800ea52 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea2e:	4a30      	ldr	r2, [pc, #192]	; (800eaf0 <HAL_UART_IRQHandler+0x288>)
 800ea30:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7fb fdf4 	bl	800a624 <HAL_DMA_Abort_IT>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d016      	beq.n	800ea70 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea48:	687a      	ldr	r2, [r7, #4]
 800ea4a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ea4c:	4610      	mov	r0, r2
 800ea4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea50:	e00e      	b.n	800ea70 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f000 f86c 	bl	800eb30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea58:	e00a      	b.n	800ea70 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 f868 	bl	800eb30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea60:	e006      	b.n	800ea70 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 f864 	bl	800eb30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800ea6e:	e038      	b.n	800eae2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea70:	bf00      	nop
    return;
 800ea72:	e036      	b.n	800eae2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ea74:	69fb      	ldr	r3, [r7, #28]
 800ea76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d00d      	beq.n	800ea9a <HAL_UART_IRQHandler+0x232>
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d008      	beq.n	800ea9a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ea90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f000 f856 	bl	800eb44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ea98:	e026      	b.n	800eae8 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ea9a:	69fb      	ldr	r3, [r7, #28]
 800ea9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d00d      	beq.n	800eac0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800eaa4:	69bb      	ldr	r3, [r7, #24]
 800eaa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d008      	beq.n	800eac0 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d017      	beq.n	800eae6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	4798      	blx	r3
    }
    return;
 800eabe:	e012      	b.n	800eae6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d00e      	beq.n	800eae8 <HAL_UART_IRQHandler+0x280>
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d009      	beq.n	800eae8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 fd12 	bl	800f4fe <UART_EndTransmit_IT>
    return;
 800eada:	bf00      	nop
 800eadc:	e004      	b.n	800eae8 <HAL_UART_IRQHandler+0x280>
      return;
 800eade:	bf00      	nop
 800eae0:	e002      	b.n	800eae8 <HAL_UART_IRQHandler+0x280>
    return;
 800eae2:	bf00      	nop
 800eae4:	e000      	b.n	800eae8 <HAL_UART_IRQHandler+0x280>
    return;
 800eae6:	bf00      	nop
  }

}
 800eae8:	3720      	adds	r7, #32
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	bf00      	nop
 800eaf0:	0800f4d3 	.word	0x0800f4d3

0800eaf4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800eafc:	bf00      	nop
 800eafe:	370c      	adds	r7, #12
 800eb00:	46bd      	mov	sp, r7
 800eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb06:	4770      	bx	lr

0800eb08 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b083      	sub	sp, #12
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800eb10:	bf00      	nop
 800eb12:	370c      	adds	r7, #12
 800eb14:	46bd      	mov	sp, r7
 800eb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1a:	4770      	bx	lr

0800eb1c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b083      	sub	sp, #12
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800eb24:	bf00      	nop
 800eb26:	370c      	adds	r7, #12
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr

0800eb30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b083      	sub	sp, #12
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800eb38:	bf00      	nop
 800eb3a:	370c      	adds	r7, #12
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb42:	4770      	bx	lr

0800eb44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800eb44:	b480      	push	{r7}
 800eb46:	b083      	sub	sp, #12
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800eb4c:	bf00      	nop
 800eb4e:	370c      	adds	r7, #12
 800eb50:	46bd      	mov	sp, r7
 800eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb56:	4770      	bx	lr

0800eb58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b088      	sub	sp, #32
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800eb60:	2300      	movs	r3, #0
 800eb62:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800eb64:	2300      	movs	r3, #0
 800eb66:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	689a      	ldr	r2, [r3, #8]
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	691b      	ldr	r3, [r3, #16]
 800eb70:	431a      	orrs	r2, r3
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	695b      	ldr	r3, [r3, #20]
 800eb76:	431a      	orrs	r2, r3
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	69db      	ldr	r3, [r3, #28]
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	681a      	ldr	r2, [r3, #0]
 800eb86:	4bb1      	ldr	r3, [pc, #708]	; (800ee4c <UART_SetConfig+0x2f4>)
 800eb88:	4013      	ands	r3, r2
 800eb8a:	687a      	ldr	r2, [r7, #4]
 800eb8c:	6812      	ldr	r2, [r2, #0]
 800eb8e:	6939      	ldr	r1, [r7, #16]
 800eb90:	430b      	orrs	r3, r1
 800eb92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	685b      	ldr	r3, [r3, #4]
 800eb9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	68da      	ldr	r2, [r3, #12]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	430a      	orrs	r2, r1
 800eba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	699b      	ldr	r3, [r3, #24]
 800ebae:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6a1b      	ldr	r3, [r3, #32]
 800ebb4:	693a      	ldr	r2, [r7, #16]
 800ebb6:	4313      	orrs	r3, r2
 800ebb8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	689b      	ldr	r3, [r3, #8]
 800ebc0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	693a      	ldr	r2, [r7, #16]
 800ebca:	430a      	orrs	r2, r1
 800ebcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	4a9f      	ldr	r2, [pc, #636]	; (800ee50 <UART_SetConfig+0x2f8>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d121      	bne.n	800ec1c <UART_SetConfig+0xc4>
 800ebd8:	4b9e      	ldr	r3, [pc, #632]	; (800ee54 <UART_SetConfig+0x2fc>)
 800ebda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebde:	f003 0303 	and.w	r3, r3, #3
 800ebe2:	2b03      	cmp	r3, #3
 800ebe4:	d816      	bhi.n	800ec14 <UART_SetConfig+0xbc>
 800ebe6:	a201      	add	r2, pc, #4	; (adr r2, 800ebec <UART_SetConfig+0x94>)
 800ebe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebec:	0800ebfd 	.word	0x0800ebfd
 800ebf0:	0800ec09 	.word	0x0800ec09
 800ebf4:	0800ec03 	.word	0x0800ec03
 800ebf8:	0800ec0f 	.word	0x0800ec0f
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	77fb      	strb	r3, [r7, #31]
 800ec00:	e151      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ec02:	2302      	movs	r3, #2
 800ec04:	77fb      	strb	r3, [r7, #31]
 800ec06:	e14e      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ec08:	2304      	movs	r3, #4
 800ec0a:	77fb      	strb	r3, [r7, #31]
 800ec0c:	e14b      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ec0e:	2308      	movs	r3, #8
 800ec10:	77fb      	strb	r3, [r7, #31]
 800ec12:	e148      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ec14:	2310      	movs	r3, #16
 800ec16:	77fb      	strb	r3, [r7, #31]
 800ec18:	bf00      	nop
 800ec1a:	e144      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	4a8d      	ldr	r2, [pc, #564]	; (800ee58 <UART_SetConfig+0x300>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d134      	bne.n	800ec90 <UART_SetConfig+0x138>
 800ec26:	4b8b      	ldr	r3, [pc, #556]	; (800ee54 <UART_SetConfig+0x2fc>)
 800ec28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec2c:	f003 030c 	and.w	r3, r3, #12
 800ec30:	2b0c      	cmp	r3, #12
 800ec32:	d829      	bhi.n	800ec88 <UART_SetConfig+0x130>
 800ec34:	a201      	add	r2, pc, #4	; (adr r2, 800ec3c <UART_SetConfig+0xe4>)
 800ec36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec3a:	bf00      	nop
 800ec3c:	0800ec71 	.word	0x0800ec71
 800ec40:	0800ec89 	.word	0x0800ec89
 800ec44:	0800ec89 	.word	0x0800ec89
 800ec48:	0800ec89 	.word	0x0800ec89
 800ec4c:	0800ec7d 	.word	0x0800ec7d
 800ec50:	0800ec89 	.word	0x0800ec89
 800ec54:	0800ec89 	.word	0x0800ec89
 800ec58:	0800ec89 	.word	0x0800ec89
 800ec5c:	0800ec77 	.word	0x0800ec77
 800ec60:	0800ec89 	.word	0x0800ec89
 800ec64:	0800ec89 	.word	0x0800ec89
 800ec68:	0800ec89 	.word	0x0800ec89
 800ec6c:	0800ec83 	.word	0x0800ec83
 800ec70:	2300      	movs	r3, #0
 800ec72:	77fb      	strb	r3, [r7, #31]
 800ec74:	e117      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ec76:	2302      	movs	r3, #2
 800ec78:	77fb      	strb	r3, [r7, #31]
 800ec7a:	e114      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ec7c:	2304      	movs	r3, #4
 800ec7e:	77fb      	strb	r3, [r7, #31]
 800ec80:	e111      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ec82:	2308      	movs	r3, #8
 800ec84:	77fb      	strb	r3, [r7, #31]
 800ec86:	e10e      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ec88:	2310      	movs	r3, #16
 800ec8a:	77fb      	strb	r3, [r7, #31]
 800ec8c:	bf00      	nop
 800ec8e:	e10a      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4a71      	ldr	r2, [pc, #452]	; (800ee5c <UART_SetConfig+0x304>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d120      	bne.n	800ecdc <UART_SetConfig+0x184>
 800ec9a:	4b6e      	ldr	r3, [pc, #440]	; (800ee54 <UART_SetConfig+0x2fc>)
 800ec9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eca0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800eca4:	2b10      	cmp	r3, #16
 800eca6:	d00f      	beq.n	800ecc8 <UART_SetConfig+0x170>
 800eca8:	2b10      	cmp	r3, #16
 800ecaa:	d802      	bhi.n	800ecb2 <UART_SetConfig+0x15a>
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d005      	beq.n	800ecbc <UART_SetConfig+0x164>
 800ecb0:	e010      	b.n	800ecd4 <UART_SetConfig+0x17c>
 800ecb2:	2b20      	cmp	r3, #32
 800ecb4:	d005      	beq.n	800ecc2 <UART_SetConfig+0x16a>
 800ecb6:	2b30      	cmp	r3, #48	; 0x30
 800ecb8:	d009      	beq.n	800ecce <UART_SetConfig+0x176>
 800ecba:	e00b      	b.n	800ecd4 <UART_SetConfig+0x17c>
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	77fb      	strb	r3, [r7, #31]
 800ecc0:	e0f1      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ecc2:	2302      	movs	r3, #2
 800ecc4:	77fb      	strb	r3, [r7, #31]
 800ecc6:	e0ee      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ecc8:	2304      	movs	r3, #4
 800ecca:	77fb      	strb	r3, [r7, #31]
 800eccc:	e0eb      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ecce:	2308      	movs	r3, #8
 800ecd0:	77fb      	strb	r3, [r7, #31]
 800ecd2:	e0e8      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ecd4:	2310      	movs	r3, #16
 800ecd6:	77fb      	strb	r3, [r7, #31]
 800ecd8:	bf00      	nop
 800ecda:	e0e4      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4a5f      	ldr	r2, [pc, #380]	; (800ee60 <UART_SetConfig+0x308>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d120      	bne.n	800ed28 <UART_SetConfig+0x1d0>
 800ece6:	4b5b      	ldr	r3, [pc, #364]	; (800ee54 <UART_SetConfig+0x2fc>)
 800ece8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ecf0:	2b40      	cmp	r3, #64	; 0x40
 800ecf2:	d00f      	beq.n	800ed14 <UART_SetConfig+0x1bc>
 800ecf4:	2b40      	cmp	r3, #64	; 0x40
 800ecf6:	d802      	bhi.n	800ecfe <UART_SetConfig+0x1a6>
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d005      	beq.n	800ed08 <UART_SetConfig+0x1b0>
 800ecfc:	e010      	b.n	800ed20 <UART_SetConfig+0x1c8>
 800ecfe:	2b80      	cmp	r3, #128	; 0x80
 800ed00:	d005      	beq.n	800ed0e <UART_SetConfig+0x1b6>
 800ed02:	2bc0      	cmp	r3, #192	; 0xc0
 800ed04:	d009      	beq.n	800ed1a <UART_SetConfig+0x1c2>
 800ed06:	e00b      	b.n	800ed20 <UART_SetConfig+0x1c8>
 800ed08:	2300      	movs	r3, #0
 800ed0a:	77fb      	strb	r3, [r7, #31]
 800ed0c:	e0cb      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ed0e:	2302      	movs	r3, #2
 800ed10:	77fb      	strb	r3, [r7, #31]
 800ed12:	e0c8      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ed14:	2304      	movs	r3, #4
 800ed16:	77fb      	strb	r3, [r7, #31]
 800ed18:	e0c5      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ed1a:	2308      	movs	r3, #8
 800ed1c:	77fb      	strb	r3, [r7, #31]
 800ed1e:	e0c2      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ed20:	2310      	movs	r3, #16
 800ed22:	77fb      	strb	r3, [r7, #31]
 800ed24:	bf00      	nop
 800ed26:	e0be      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	4a4d      	ldr	r2, [pc, #308]	; (800ee64 <UART_SetConfig+0x30c>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d124      	bne.n	800ed7c <UART_SetConfig+0x224>
 800ed32:	4b48      	ldr	r3, [pc, #288]	; (800ee54 <UART_SetConfig+0x2fc>)
 800ed34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed40:	d012      	beq.n	800ed68 <UART_SetConfig+0x210>
 800ed42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed46:	d802      	bhi.n	800ed4e <UART_SetConfig+0x1f6>
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d007      	beq.n	800ed5c <UART_SetConfig+0x204>
 800ed4c:	e012      	b.n	800ed74 <UART_SetConfig+0x21c>
 800ed4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed52:	d006      	beq.n	800ed62 <UART_SetConfig+0x20a>
 800ed54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ed58:	d009      	beq.n	800ed6e <UART_SetConfig+0x216>
 800ed5a:	e00b      	b.n	800ed74 <UART_SetConfig+0x21c>
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	77fb      	strb	r3, [r7, #31]
 800ed60:	e0a1      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ed62:	2302      	movs	r3, #2
 800ed64:	77fb      	strb	r3, [r7, #31]
 800ed66:	e09e      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ed68:	2304      	movs	r3, #4
 800ed6a:	77fb      	strb	r3, [r7, #31]
 800ed6c:	e09b      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ed6e:	2308      	movs	r3, #8
 800ed70:	77fb      	strb	r3, [r7, #31]
 800ed72:	e098      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ed74:	2310      	movs	r3, #16
 800ed76:	77fb      	strb	r3, [r7, #31]
 800ed78:	bf00      	nop
 800ed7a:	e094      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4a39      	ldr	r2, [pc, #228]	; (800ee68 <UART_SetConfig+0x310>)
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d124      	bne.n	800edd0 <UART_SetConfig+0x278>
 800ed86:	4b33      	ldr	r3, [pc, #204]	; (800ee54 <UART_SetConfig+0x2fc>)
 800ed88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ed90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed94:	d012      	beq.n	800edbc <UART_SetConfig+0x264>
 800ed96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed9a:	d802      	bhi.n	800eda2 <UART_SetConfig+0x24a>
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d007      	beq.n	800edb0 <UART_SetConfig+0x258>
 800eda0:	e012      	b.n	800edc8 <UART_SetConfig+0x270>
 800eda2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eda6:	d006      	beq.n	800edb6 <UART_SetConfig+0x25e>
 800eda8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800edac:	d009      	beq.n	800edc2 <UART_SetConfig+0x26a>
 800edae:	e00b      	b.n	800edc8 <UART_SetConfig+0x270>
 800edb0:	2301      	movs	r3, #1
 800edb2:	77fb      	strb	r3, [r7, #31]
 800edb4:	e077      	b.n	800eea6 <UART_SetConfig+0x34e>
 800edb6:	2302      	movs	r3, #2
 800edb8:	77fb      	strb	r3, [r7, #31]
 800edba:	e074      	b.n	800eea6 <UART_SetConfig+0x34e>
 800edbc:	2304      	movs	r3, #4
 800edbe:	77fb      	strb	r3, [r7, #31]
 800edc0:	e071      	b.n	800eea6 <UART_SetConfig+0x34e>
 800edc2:	2308      	movs	r3, #8
 800edc4:	77fb      	strb	r3, [r7, #31]
 800edc6:	e06e      	b.n	800eea6 <UART_SetConfig+0x34e>
 800edc8:	2310      	movs	r3, #16
 800edca:	77fb      	strb	r3, [r7, #31]
 800edcc:	bf00      	nop
 800edce:	e06a      	b.n	800eea6 <UART_SetConfig+0x34e>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4a25      	ldr	r2, [pc, #148]	; (800ee6c <UART_SetConfig+0x314>)
 800edd6:	4293      	cmp	r3, r2
 800edd8:	d124      	bne.n	800ee24 <UART_SetConfig+0x2cc>
 800edda:	4b1e      	ldr	r3, [pc, #120]	; (800ee54 <UART_SetConfig+0x2fc>)
 800eddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ede0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ede4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ede8:	d012      	beq.n	800ee10 <UART_SetConfig+0x2b8>
 800edea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800edee:	d802      	bhi.n	800edf6 <UART_SetConfig+0x29e>
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d007      	beq.n	800ee04 <UART_SetConfig+0x2ac>
 800edf4:	e012      	b.n	800ee1c <UART_SetConfig+0x2c4>
 800edf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800edfa:	d006      	beq.n	800ee0a <UART_SetConfig+0x2b2>
 800edfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ee00:	d009      	beq.n	800ee16 <UART_SetConfig+0x2be>
 800ee02:	e00b      	b.n	800ee1c <UART_SetConfig+0x2c4>
 800ee04:	2300      	movs	r3, #0
 800ee06:	77fb      	strb	r3, [r7, #31]
 800ee08:	e04d      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ee0a:	2302      	movs	r3, #2
 800ee0c:	77fb      	strb	r3, [r7, #31]
 800ee0e:	e04a      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ee10:	2304      	movs	r3, #4
 800ee12:	77fb      	strb	r3, [r7, #31]
 800ee14:	e047      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ee16:	2308      	movs	r3, #8
 800ee18:	77fb      	strb	r3, [r7, #31]
 800ee1a:	e044      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ee1c:	2310      	movs	r3, #16
 800ee1e:	77fb      	strb	r3, [r7, #31]
 800ee20:	bf00      	nop
 800ee22:	e040      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	4a11      	ldr	r2, [pc, #68]	; (800ee70 <UART_SetConfig+0x318>)
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d139      	bne.n	800eea2 <UART_SetConfig+0x34a>
 800ee2e:	4b09      	ldr	r3, [pc, #36]	; (800ee54 <UART_SetConfig+0x2fc>)
 800ee30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ee38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee3c:	d027      	beq.n	800ee8e <UART_SetConfig+0x336>
 800ee3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee42:	d817      	bhi.n	800ee74 <UART_SetConfig+0x31c>
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d01c      	beq.n	800ee82 <UART_SetConfig+0x32a>
 800ee48:	e027      	b.n	800ee9a <UART_SetConfig+0x342>
 800ee4a:	bf00      	nop
 800ee4c:	efff69f3 	.word	0xefff69f3
 800ee50:	40011000 	.word	0x40011000
 800ee54:	40023800 	.word	0x40023800
 800ee58:	40004400 	.word	0x40004400
 800ee5c:	40004800 	.word	0x40004800
 800ee60:	40004c00 	.word	0x40004c00
 800ee64:	40005000 	.word	0x40005000
 800ee68:	40011400 	.word	0x40011400
 800ee6c:	40007800 	.word	0x40007800
 800ee70:	40007c00 	.word	0x40007c00
 800ee74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee78:	d006      	beq.n	800ee88 <UART_SetConfig+0x330>
 800ee7a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ee7e:	d009      	beq.n	800ee94 <UART_SetConfig+0x33c>
 800ee80:	e00b      	b.n	800ee9a <UART_SetConfig+0x342>
 800ee82:	2300      	movs	r3, #0
 800ee84:	77fb      	strb	r3, [r7, #31]
 800ee86:	e00e      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ee88:	2302      	movs	r3, #2
 800ee8a:	77fb      	strb	r3, [r7, #31]
 800ee8c:	e00b      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ee8e:	2304      	movs	r3, #4
 800ee90:	77fb      	strb	r3, [r7, #31]
 800ee92:	e008      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ee94:	2308      	movs	r3, #8
 800ee96:	77fb      	strb	r3, [r7, #31]
 800ee98:	e005      	b.n	800eea6 <UART_SetConfig+0x34e>
 800ee9a:	2310      	movs	r3, #16
 800ee9c:	77fb      	strb	r3, [r7, #31]
 800ee9e:	bf00      	nop
 800eea0:	e001      	b.n	800eea6 <UART_SetConfig+0x34e>
 800eea2:	2310      	movs	r3, #16
 800eea4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	69db      	ldr	r3, [r3, #28]
 800eeaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eeae:	d17f      	bne.n	800efb0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800eeb0:	7ffb      	ldrb	r3, [r7, #31]
 800eeb2:	2b08      	cmp	r3, #8
 800eeb4:	d85c      	bhi.n	800ef70 <UART_SetConfig+0x418>
 800eeb6:	a201      	add	r2, pc, #4	; (adr r2, 800eebc <UART_SetConfig+0x364>)
 800eeb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eebc:	0800eee1 	.word	0x0800eee1
 800eec0:	0800ef01 	.word	0x0800ef01
 800eec4:	0800ef21 	.word	0x0800ef21
 800eec8:	0800ef71 	.word	0x0800ef71
 800eecc:	0800ef39 	.word	0x0800ef39
 800eed0:	0800ef71 	.word	0x0800ef71
 800eed4:	0800ef71 	.word	0x0800ef71
 800eed8:	0800ef71 	.word	0x0800ef71
 800eedc:	0800ef59 	.word	0x0800ef59
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eee0:	f7fd ffd0 	bl	800ce84 <HAL_RCC_GetPCLK1Freq>
 800eee4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	005a      	lsls	r2, r3, #1
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	085b      	lsrs	r3, r3, #1
 800eef0:	441a      	add	r2, r3
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	fbb2 f3f3 	udiv	r3, r2, r3
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	61bb      	str	r3, [r7, #24]
        break;
 800eefe:	e03a      	b.n	800ef76 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef00:	f7fd ffd4 	bl	800ceac <HAL_RCC_GetPCLK2Freq>
 800ef04:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	005a      	lsls	r2, r3, #1
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	685b      	ldr	r3, [r3, #4]
 800ef0e:	085b      	lsrs	r3, r3, #1
 800ef10:	441a      	add	r2, r3
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	61bb      	str	r3, [r7, #24]
        break;
 800ef1e:	e02a      	b.n	800ef76 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	685b      	ldr	r3, [r3, #4]
 800ef24:	085a      	lsrs	r2, r3, #1
 800ef26:	4b5f      	ldr	r3, [pc, #380]	; (800f0a4 <UART_SetConfig+0x54c>)
 800ef28:	4413      	add	r3, r2
 800ef2a:	687a      	ldr	r2, [r7, #4]
 800ef2c:	6852      	ldr	r2, [r2, #4]
 800ef2e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	61bb      	str	r3, [r7, #24]
        break;
 800ef36:	e01e      	b.n	800ef76 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ef38:	f7fd fec0 	bl	800ccbc <HAL_RCC_GetSysClockFreq>
 800ef3c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	005a      	lsls	r2, r3, #1
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	685b      	ldr	r3, [r3, #4]
 800ef46:	085b      	lsrs	r3, r3, #1
 800ef48:	441a      	add	r2, r3
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	61bb      	str	r3, [r7, #24]
        break;
 800ef56:	e00e      	b.n	800ef76 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	085b      	lsrs	r3, r3, #1
 800ef5e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef6a:	b29b      	uxth	r3, r3
 800ef6c:	61bb      	str	r3, [r7, #24]
        break;
 800ef6e:	e002      	b.n	800ef76 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800ef70:	2301      	movs	r3, #1
 800ef72:	75fb      	strb	r3, [r7, #23]
        break;
 800ef74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef76:	69bb      	ldr	r3, [r7, #24]
 800ef78:	2b0f      	cmp	r3, #15
 800ef7a:	d916      	bls.n	800efaa <UART_SetConfig+0x452>
 800ef7c:	69bb      	ldr	r3, [r7, #24]
 800ef7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef82:	d212      	bcs.n	800efaa <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ef84:	69bb      	ldr	r3, [r7, #24]
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	f023 030f 	bic.w	r3, r3, #15
 800ef8c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ef8e:	69bb      	ldr	r3, [r7, #24]
 800ef90:	085b      	lsrs	r3, r3, #1
 800ef92:	b29b      	uxth	r3, r3
 800ef94:	f003 0307 	and.w	r3, r3, #7
 800ef98:	b29a      	uxth	r2, r3
 800ef9a:	897b      	ldrh	r3, [r7, #10]
 800ef9c:	4313      	orrs	r3, r2
 800ef9e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	897a      	ldrh	r2, [r7, #10]
 800efa6:	60da      	str	r2, [r3, #12]
 800efa8:	e070      	b.n	800f08c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800efaa:	2301      	movs	r3, #1
 800efac:	75fb      	strb	r3, [r7, #23]
 800efae:	e06d      	b.n	800f08c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800efb0:	7ffb      	ldrb	r3, [r7, #31]
 800efb2:	2b08      	cmp	r3, #8
 800efb4:	d859      	bhi.n	800f06a <UART_SetConfig+0x512>
 800efb6:	a201      	add	r2, pc, #4	; (adr r2, 800efbc <UART_SetConfig+0x464>)
 800efb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efbc:	0800efe1 	.word	0x0800efe1
 800efc0:	0800efff 	.word	0x0800efff
 800efc4:	0800f01d 	.word	0x0800f01d
 800efc8:	0800f06b 	.word	0x0800f06b
 800efcc:	0800f035 	.word	0x0800f035
 800efd0:	0800f06b 	.word	0x0800f06b
 800efd4:	0800f06b 	.word	0x0800f06b
 800efd8:	0800f06b 	.word	0x0800f06b
 800efdc:	0800f053 	.word	0x0800f053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800efe0:	f7fd ff50 	bl	800ce84 <HAL_RCC_GetPCLK1Freq>
 800efe4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	085a      	lsrs	r2, r3, #1
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	441a      	add	r2, r3
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	fbb2 f3f3 	udiv	r3, r2, r3
 800eff8:	b29b      	uxth	r3, r3
 800effa:	61bb      	str	r3, [r7, #24]
        break;
 800effc:	e038      	b.n	800f070 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800effe:	f7fd ff55 	bl	800ceac <HAL_RCC_GetPCLK2Freq>
 800f002:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	685b      	ldr	r3, [r3, #4]
 800f008:	085a      	lsrs	r2, r3, #1
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	441a      	add	r2, r3
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	fbb2 f3f3 	udiv	r3, r2, r3
 800f016:	b29b      	uxth	r3, r3
 800f018:	61bb      	str	r3, [r7, #24]
        break;
 800f01a:	e029      	b.n	800f070 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	085a      	lsrs	r2, r3, #1
 800f022:	4b21      	ldr	r3, [pc, #132]	; (800f0a8 <UART_SetConfig+0x550>)
 800f024:	4413      	add	r3, r2
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	6852      	ldr	r2, [r2, #4]
 800f02a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f02e:	b29b      	uxth	r3, r3
 800f030:	61bb      	str	r3, [r7, #24]
        break;
 800f032:	e01d      	b.n	800f070 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f034:	f7fd fe42 	bl	800ccbc <HAL_RCC_GetSysClockFreq>
 800f038:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	085a      	lsrs	r2, r3, #1
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	441a      	add	r2, r3
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	fbb2 f3f3 	udiv	r3, r2, r3
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	61bb      	str	r3, [r7, #24]
        break;
 800f050:	e00e      	b.n	800f070 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	685b      	ldr	r3, [r3, #4]
 800f056:	085b      	lsrs	r3, r3, #1
 800f058:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	fbb2 f3f3 	udiv	r3, r2, r3
 800f064:	b29b      	uxth	r3, r3
 800f066:	61bb      	str	r3, [r7, #24]
        break;
 800f068:	e002      	b.n	800f070 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800f06a:	2301      	movs	r3, #1
 800f06c:	75fb      	strb	r3, [r7, #23]
        break;
 800f06e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f070:	69bb      	ldr	r3, [r7, #24]
 800f072:	2b0f      	cmp	r3, #15
 800f074:	d908      	bls.n	800f088 <UART_SetConfig+0x530>
 800f076:	69bb      	ldr	r3, [r7, #24]
 800f078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f07c:	d204      	bcs.n	800f088 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	69ba      	ldr	r2, [r7, #24]
 800f084:	60da      	str	r2, [r3, #12]
 800f086:	e001      	b.n	800f08c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800f088:	2301      	movs	r3, #1
 800f08a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2200      	movs	r2, #0
 800f090:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2200      	movs	r2, #0
 800f096:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800f098:	7dfb      	ldrb	r3, [r7, #23]
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3720      	adds	r7, #32
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}
 800f0a2:	bf00      	nop
 800f0a4:	01e84800 	.word	0x01e84800
 800f0a8:	00f42400 	.word	0x00f42400

0800f0ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b083      	sub	sp, #12
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0b8:	f003 0301 	and.w	r3, r3, #1
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d00a      	beq.n	800f0d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	430a      	orrs	r2, r1
 800f0d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0da:	f003 0302 	and.w	r3, r3, #2
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d00a      	beq.n	800f0f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	685b      	ldr	r3, [r3, #4]
 800f0e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	430a      	orrs	r2, r1
 800f0f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0fc:	f003 0304 	and.w	r3, r3, #4
 800f100:	2b00      	cmp	r3, #0
 800f102:	d00a      	beq.n	800f11a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	430a      	orrs	r2, r1
 800f118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f11e:	f003 0308 	and.w	r3, r3, #8
 800f122:	2b00      	cmp	r3, #0
 800f124:	d00a      	beq.n	800f13c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	685b      	ldr	r3, [r3, #4]
 800f12c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	430a      	orrs	r2, r1
 800f13a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f140:	f003 0310 	and.w	r3, r3, #16
 800f144:	2b00      	cmp	r3, #0
 800f146:	d00a      	beq.n	800f15e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	689b      	ldr	r3, [r3, #8]
 800f14e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	430a      	orrs	r2, r1
 800f15c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f162:	f003 0320 	and.w	r3, r3, #32
 800f166:	2b00      	cmp	r3, #0
 800f168:	d00a      	beq.n	800f180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	689b      	ldr	r3, [r3, #8]
 800f170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	430a      	orrs	r2, r1
 800f17e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d01a      	beq.n	800f1c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	430a      	orrs	r2, r1
 800f1a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f1aa:	d10a      	bne.n	800f1c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	685b      	ldr	r3, [r3, #4]
 800f1b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	430a      	orrs	r2, r1
 800f1c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d00a      	beq.n	800f1e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	685b      	ldr	r3, [r3, #4]
 800f1d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	430a      	orrs	r2, r1
 800f1e2:	605a      	str	r2, [r3, #4]
  }
}
 800f1e4:	bf00      	nop
 800f1e6:	370c      	adds	r7, #12
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr

0800f1f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b086      	sub	sp, #24
 800f1f4:	af02      	add	r7, sp, #8
 800f1f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800f1fe:	f7fa fe87 	bl	8009f10 <HAL_GetTick>
 800f202:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f003 0308 	and.w	r3, r3, #8
 800f20e:	2b08      	cmp	r3, #8
 800f210:	d10e      	bne.n	800f230 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f212:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f216:	9300      	str	r3, [sp, #0]
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2200      	movs	r2, #0
 800f21c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f000 f82a 	bl	800f27a <UART_WaitOnFlagUntilTimeout>
 800f226:	4603      	mov	r3, r0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d001      	beq.n	800f230 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f22c:	2303      	movs	r3, #3
 800f22e:	e020      	b.n	800f272 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f003 0304 	and.w	r3, r3, #4
 800f23a:	2b04      	cmp	r3, #4
 800f23c:	d10e      	bne.n	800f25c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f23e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f242:	9300      	str	r3, [sp, #0]
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2200      	movs	r2, #0
 800f248:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f000 f814 	bl	800f27a <UART_WaitOnFlagUntilTimeout>
 800f252:	4603      	mov	r3, r0
 800f254:	2b00      	cmp	r3, #0
 800f256:	d001      	beq.n	800f25c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f258:	2303      	movs	r3, #3
 800f25a:	e00a      	b.n	800f272 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2220      	movs	r2, #32
 800f260:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2220      	movs	r2, #32
 800f266:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2200      	movs	r2, #0
 800f26c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800f270:	2300      	movs	r3, #0
}
 800f272:	4618      	mov	r0, r3
 800f274:	3710      	adds	r7, #16
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}

0800f27a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f27a:	b580      	push	{r7, lr}
 800f27c:	b084      	sub	sp, #16
 800f27e:	af00      	add	r7, sp, #0
 800f280:	60f8      	str	r0, [r7, #12]
 800f282:	60b9      	str	r1, [r7, #8]
 800f284:	603b      	str	r3, [r7, #0]
 800f286:	4613      	mov	r3, r2
 800f288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f28a:	e05d      	b.n	800f348 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f28c:	69bb      	ldr	r3, [r7, #24]
 800f28e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f292:	d059      	beq.n	800f348 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f294:	f7fa fe3c 	bl	8009f10 <HAL_GetTick>
 800f298:	4602      	mov	r2, r0
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	1ad3      	subs	r3, r2, r3
 800f29e:	69ba      	ldr	r2, [r7, #24]
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d302      	bcc.n	800f2aa <UART_WaitOnFlagUntilTimeout+0x30>
 800f2a4:	69bb      	ldr	r3, [r7, #24]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d11b      	bne.n	800f2e2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f2b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	689a      	ldr	r2, [r3, #8]
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	f022 0201 	bic.w	r2, r2, #1
 800f2c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	2220      	movs	r2, #32
 800f2ce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	2220      	movs	r2, #32
 800f2d4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800f2de:	2303      	movs	r3, #3
 800f2e0:	e042      	b.n	800f368 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	f003 0304 	and.w	r3, r3, #4
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d02b      	beq.n	800f348 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	69db      	ldr	r3, [r3, #28]
 800f2f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f2fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f2fe:	d123      	bne.n	800f348 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f308:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	681a      	ldr	r2, [r3, #0]
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f318:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	689a      	ldr	r2, [r3, #8]
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f022 0201 	bic.w	r2, r2, #1
 800f328:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	2220      	movs	r2, #32
 800f32e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	2220      	movs	r2, #32
 800f334:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	2220      	movs	r2, #32
 800f33a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	2200      	movs	r2, #0
 800f340:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800f344:	2303      	movs	r3, #3
 800f346:	e00f      	b.n	800f368 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	69da      	ldr	r2, [r3, #28]
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	4013      	ands	r3, r2
 800f352:	68ba      	ldr	r2, [r7, #8]
 800f354:	429a      	cmp	r2, r3
 800f356:	bf0c      	ite	eq
 800f358:	2301      	moveq	r3, #1
 800f35a:	2300      	movne	r3, #0
 800f35c:	b2db      	uxtb	r3, r3
 800f35e:	461a      	mov	r2, r3
 800f360:	79fb      	ldrb	r3, [r7, #7]
 800f362:	429a      	cmp	r2, r3
 800f364:	d092      	beq.n	800f28c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f366:	2300      	movs	r3, #0
}
 800f368:	4618      	mov	r0, r3
 800f36a:	3710      	adds	r7, #16
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}

0800f370 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f370:	b480      	push	{r7}
 800f372:	b083      	sub	sp, #12
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f386:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2220      	movs	r2, #32
 800f38c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f38e:	bf00      	nop
 800f390:	370c      	adds	r7, #12
 800f392:	46bd      	mov	sp, r7
 800f394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f398:	4770      	bx	lr

0800f39a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f39a:	b480      	push	{r7}
 800f39c:	b083      	sub	sp, #12
 800f39e:	af00      	add	r7, sp, #0
 800f3a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	681a      	ldr	r2, [r3, #0]
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f3b0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	689a      	ldr	r2, [r3, #8]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	f022 0201 	bic.w	r2, r2, #1
 800f3c0:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2220      	movs	r2, #32
 800f3c6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	661a      	str	r2, [r3, #96]	; 0x60
}
 800f3ce:	bf00      	nop
 800f3d0:	370c      	adds	r7, #12
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d8:	4770      	bx	lr

0800f3da <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f3da:	b580      	push	{r7, lr}
 800f3dc:	b084      	sub	sp, #16
 800f3de:	af00      	add	r7, sp, #0
 800f3e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3e6:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	69db      	ldr	r3, [r3, #28]
 800f3ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3f0:	d01e      	beq.n	800f430 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	681a      	ldr	r2, [r3, #0]
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f408:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	689a      	ldr	r2, [r3, #8]
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	f022 0201 	bic.w	r2, r2, #1
 800f418:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	689a      	ldr	r2, [r3, #8]
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f428:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	2220      	movs	r2, #32
 800f42e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800f430:	68f8      	ldr	r0, [r7, #12]
 800f432:	f7ff fb69 	bl	800eb08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f436:	bf00      	nop
 800f438:	3710      	adds	r7, #16
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}

0800f43e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f43e:	b580      	push	{r7, lr}
 800f440:	b084      	sub	sp, #16
 800f442:	af00      	add	r7, sp, #0
 800f444:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f44a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800f44c:	68f8      	ldr	r0, [r7, #12]
 800f44e:	f7ff fb65 	bl	800eb1c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f452:	bf00      	nop
 800f454:	3710      	adds	r7, #16
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}

0800f45a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f45a:	b580      	push	{r7, lr}
 800f45c:	b086      	sub	sp, #24
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f466:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f46c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f472:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	689b      	ldr	r3, [r3, #8]
 800f47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f47e:	2b80      	cmp	r3, #128	; 0x80
 800f480:	d109      	bne.n	800f496 <UART_DMAError+0x3c>
 800f482:	693b      	ldr	r3, [r7, #16]
 800f484:	2b21      	cmp	r3, #33	; 0x21
 800f486:	d106      	bne.n	800f496 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	2200      	movs	r2, #0
 800f48c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800f490:	6978      	ldr	r0, [r7, #20]
 800f492:	f7ff ff6d 	bl	800f370 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	689b      	ldr	r3, [r3, #8]
 800f49c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4a0:	2b40      	cmp	r3, #64	; 0x40
 800f4a2:	d109      	bne.n	800f4b8 <UART_DMAError+0x5e>
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	2b22      	cmp	r3, #34	; 0x22
 800f4a8:	d106      	bne.n	800f4b8 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800f4b2:	6978      	ldr	r0, [r7, #20]
 800f4b4:	f7ff ff71 	bl	800f39a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4bc:	f043 0210 	orr.w	r2, r3, #16
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f4c4:	6978      	ldr	r0, [r7, #20]
 800f4c6:	f7ff fb33 	bl	800eb30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f4ca:	bf00      	nop
 800f4cc:	3718      	adds	r7, #24
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}

0800f4d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f4d2:	b580      	push	{r7, lr}
 800f4d4:	b084      	sub	sp, #16
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f4f0:	68f8      	ldr	r0, [r7, #12]
 800f4f2:	f7ff fb1d 	bl	800eb30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f4f6:	bf00      	nop
 800f4f8:	3710      	adds	r7, #16
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}

0800f4fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b082      	sub	sp, #8
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	681a      	ldr	r2, [r3, #0]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f514:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2220      	movs	r2, #32
 800f51a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f7ff fae6 	bl	800eaf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f528:	bf00      	nop
 800f52a:	3708      	adds	r7, #8
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}

0800f530 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f530:	b084      	sub	sp, #16
 800f532:	b580      	push	{r7, lr}
 800f534:	b084      	sub	sp, #16
 800f536:	af00      	add	r7, sp, #0
 800f538:	6078      	str	r0, [r7, #4]
 800f53a:	f107 001c 	add.w	r0, r7, #28
 800f53e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f544:	2b01      	cmp	r3, #1
 800f546:	d120      	bne.n	800f58a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f54c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	68da      	ldr	r2, [r3, #12]
 800f558:	4b20      	ldr	r3, [pc, #128]	; (800f5dc <USB_CoreInit+0xac>)
 800f55a:	4013      	ands	r3, r2
 800f55c:	687a      	ldr	r2, [r7, #4]
 800f55e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	68db      	ldr	r3, [r3, #12]
 800f564:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f56c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f56e:	2b01      	cmp	r3, #1
 800f570:	d105      	bne.n	800f57e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	68db      	ldr	r3, [r3, #12]
 800f576:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f000 fa52 	bl	800fa28 <USB_CoreReset>
 800f584:	4603      	mov	r3, r0
 800f586:	73fb      	strb	r3, [r7, #15]
 800f588:	e010      	b.n	800f5ac <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	68db      	ldr	r3, [r3, #12]
 800f58e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f000 fa46 	bl	800fa28 <USB_CoreReset>
 800f59c:	4603      	mov	r3, r0
 800f59e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800f5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ae:	2b01      	cmp	r3, #1
 800f5b0:	d10b      	bne.n	800f5ca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	689b      	ldr	r3, [r3, #8]
 800f5b6:	f043 0206 	orr.w	r2, r3, #6
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	689b      	ldr	r3, [r3, #8]
 800f5c2:	f043 0220 	orr.w	r2, r3, #32
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3710      	adds	r7, #16
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f5d6:	b004      	add	sp, #16
 800f5d8:	4770      	bx	lr
 800f5da:	bf00      	nop
 800f5dc:	ffbdffbf 	.word	0xffbdffbf

0800f5e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b083      	sub	sp, #12
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	689b      	ldr	r3, [r3, #8]
 800f5ec:	f023 0201 	bic.w	r2, r3, #1
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f5f4:	2300      	movs	r3, #0
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	370c      	adds	r7, #12
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f600:	4770      	bx	lr

0800f602 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f602:	b580      	push	{r7, lr}
 800f604:	b082      	sub	sp, #8
 800f606:	af00      	add	r7, sp, #0
 800f608:	6078      	str	r0, [r7, #4]
 800f60a:	460b      	mov	r3, r1
 800f60c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f61a:	78fb      	ldrb	r3, [r7, #3]
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d106      	bne.n	800f62e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	68db      	ldr	r3, [r3, #12]
 800f624:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	60da      	str	r2, [r3, #12]
 800f62c:	e00b      	b.n	800f646 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f62e:	78fb      	ldrb	r3, [r7, #3]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d106      	bne.n	800f642 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	68db      	ldr	r3, [r3, #12]
 800f638:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	60da      	str	r2, [r3, #12]
 800f640:	e001      	b.n	800f646 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f642:	2301      	movs	r3, #1
 800f644:	e003      	b.n	800f64e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f646:	2032      	movs	r0, #50	; 0x32
 800f648:	f7fa fc6e 	bl	8009f28 <HAL_Delay>

  return HAL_OK;
 800f64c:	2300      	movs	r3, #0
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3708      	adds	r7, #8
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
	...

0800f658 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f658:	b084      	sub	sp, #16
 800f65a:	b580      	push	{r7, lr}
 800f65c:	b086      	sub	sp, #24
 800f65e:	af00      	add	r7, sp, #0
 800f660:	6078      	str	r0, [r7, #4]
 800f662:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f66a:	2300      	movs	r3, #0
 800f66c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f672:	2300      	movs	r3, #0
 800f674:	613b      	str	r3, [r7, #16]
 800f676:	e009      	b.n	800f68c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f678:	687a      	ldr	r2, [r7, #4]
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	3340      	adds	r3, #64	; 0x40
 800f67e:	009b      	lsls	r3, r3, #2
 800f680:	4413      	add	r3, r2
 800f682:	2200      	movs	r2, #0
 800f684:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f686:	693b      	ldr	r3, [r7, #16]
 800f688:	3301      	adds	r3, #1
 800f68a:	613b      	str	r3, [r7, #16]
 800f68c:	693b      	ldr	r3, [r7, #16]
 800f68e:	2b0e      	cmp	r3, #14
 800f690:	d9f2      	bls.n	800f678 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f694:	2b00      	cmp	r3, #0
 800f696:	d11c      	bne.n	800f6d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	68fa      	ldr	r2, [r7, #12]
 800f6a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f6a6:	f043 0302 	orr.w	r3, r3, #2
 800f6aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	601a      	str	r2, [r3, #0]
 800f6d0:	e005      	b.n	800f6de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f6e4:	461a      	mov	r2, r3
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6f8:	461a      	mov	r2, r3
 800f6fa:	680b      	ldr	r3, [r1, #0]
 800f6fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f700:	2b01      	cmp	r3, #1
 800f702:	d10c      	bne.n	800f71e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f706:	2b00      	cmp	r3, #0
 800f708:	d104      	bne.n	800f714 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f70a:	2100      	movs	r1, #0
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f000 f959 	bl	800f9c4 <USB_SetDevSpeed>
 800f712:	e018      	b.n	800f746 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f714:	2101      	movs	r1, #1
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f000 f954 	bl	800f9c4 <USB_SetDevSpeed>
 800f71c:	e013      	b.n	800f746 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800f71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f720:	2b03      	cmp	r3, #3
 800f722:	d10c      	bne.n	800f73e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f726:	2b00      	cmp	r3, #0
 800f728:	d104      	bne.n	800f734 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f72a:	2100      	movs	r1, #0
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f000 f949 	bl	800f9c4 <USB_SetDevSpeed>
 800f732:	e008      	b.n	800f746 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f734:	2101      	movs	r1, #1
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f000 f944 	bl	800f9c4 <USB_SetDevSpeed>
 800f73c:	e003      	b.n	800f746 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f73e:	2103      	movs	r1, #3
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f000 f93f 	bl	800f9c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f746:	2110      	movs	r1, #16
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f000 f8f3 	bl	800f934 <USB_FlushTxFifo>
 800f74e:	4603      	mov	r3, r0
 800f750:	2b00      	cmp	r3, #0
 800f752:	d001      	beq.n	800f758 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800f754:	2301      	movs	r3, #1
 800f756:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f000 f911 	bl	800f980 <USB_FlushRxFifo>
 800f75e:	4603      	mov	r3, r0
 800f760:	2b00      	cmp	r3, #0
 800f762:	d001      	beq.n	800f768 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800f764:	2301      	movs	r3, #1
 800f766:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f76e:	461a      	mov	r2, r3
 800f770:	2300      	movs	r3, #0
 800f772:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f77a:	461a      	mov	r2, r3
 800f77c:	2300      	movs	r3, #0
 800f77e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f786:	461a      	mov	r2, r3
 800f788:	2300      	movs	r3, #0
 800f78a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f78c:	2300      	movs	r3, #0
 800f78e:	613b      	str	r3, [r7, #16]
 800f790:	e043      	b.n	800f81a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f792:	693b      	ldr	r3, [r7, #16]
 800f794:	015a      	lsls	r2, r3, #5
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	4413      	add	r3, r2
 800f79a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f7a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f7a8:	d118      	bne.n	800f7dc <USB_DevInit+0x184>
    {
      if (i == 0U)
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d10a      	bne.n	800f7c6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	015a      	lsls	r2, r3, #5
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	4413      	add	r3, r2
 800f7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7bc:	461a      	mov	r2, r3
 800f7be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f7c2:	6013      	str	r3, [r2, #0]
 800f7c4:	e013      	b.n	800f7ee <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f7c6:	693b      	ldr	r3, [r7, #16]
 800f7c8:	015a      	lsls	r2, r3, #5
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	4413      	add	r3, r2
 800f7ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f7d8:	6013      	str	r3, [r2, #0]
 800f7da:	e008      	b.n	800f7ee <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f7dc:	693b      	ldr	r3, [r7, #16]
 800f7de:	015a      	lsls	r2, r3, #5
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	4413      	add	r3, r2
 800f7e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7e8:	461a      	mov	r2, r3
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	015a      	lsls	r2, r3, #5
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	4413      	add	r3, r2
 800f7f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	015a      	lsls	r2, r3, #5
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	4413      	add	r3, r2
 800f808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f80c:	461a      	mov	r2, r3
 800f80e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f812:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	3301      	adds	r3, #1
 800f818:	613b      	str	r3, [r7, #16]
 800f81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f81c:	693a      	ldr	r2, [r7, #16]
 800f81e:	429a      	cmp	r2, r3
 800f820:	d3b7      	bcc.n	800f792 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f822:	2300      	movs	r3, #0
 800f824:	613b      	str	r3, [r7, #16]
 800f826:	e043      	b.n	800f8b0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f828:	693b      	ldr	r3, [r7, #16]
 800f82a:	015a      	lsls	r2, r3, #5
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	4413      	add	r3, r2
 800f830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f83a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f83e:	d118      	bne.n	800f872 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d10a      	bne.n	800f85c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	015a      	lsls	r2, r3, #5
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	4413      	add	r3, r2
 800f84e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f852:	461a      	mov	r2, r3
 800f854:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f858:	6013      	str	r3, [r2, #0]
 800f85a:	e013      	b.n	800f884 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	015a      	lsls	r2, r3, #5
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	4413      	add	r3, r2
 800f864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f868:	461a      	mov	r2, r3
 800f86a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f86e:	6013      	str	r3, [r2, #0]
 800f870:	e008      	b.n	800f884 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	015a      	lsls	r2, r3, #5
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	4413      	add	r3, r2
 800f87a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f87e:	461a      	mov	r2, r3
 800f880:	2300      	movs	r3, #0
 800f882:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f884:	693b      	ldr	r3, [r7, #16]
 800f886:	015a      	lsls	r2, r3, #5
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	4413      	add	r3, r2
 800f88c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f890:	461a      	mov	r2, r3
 800f892:	2300      	movs	r3, #0
 800f894:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	015a      	lsls	r2, r3, #5
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	4413      	add	r3, r2
 800f89e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f8a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	3301      	adds	r3, #1
 800f8ae:	613b      	str	r3, [r7, #16]
 800f8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b2:	693a      	ldr	r2, [r7, #16]
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d3b7      	bcc.n	800f828 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8be:	691b      	ldr	r3, [r3, #16]
 800f8c0:	68fa      	ldr	r2, [r7, #12]
 800f8c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f8c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f8d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d105      	bne.n	800f8ec <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	699b      	ldr	r3, [r3, #24]
 800f8e4:	f043 0210 	orr.w	r2, r3, #16
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	699a      	ldr	r2, [r3, #24]
 800f8f0:	4b0e      	ldr	r3, [pc, #56]	; (800f92c <USB_DevInit+0x2d4>)
 800f8f2:	4313      	orrs	r3, r2
 800f8f4:	687a      	ldr	r2, [r7, #4]
 800f8f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d005      	beq.n	800f90a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	699b      	ldr	r3, [r3, #24]
 800f902:	f043 0208 	orr.w	r2, r3, #8
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f90a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	d105      	bne.n	800f91c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	699a      	ldr	r2, [r3, #24]
 800f914:	4b06      	ldr	r3, [pc, #24]	; (800f930 <USB_DevInit+0x2d8>)
 800f916:	4313      	orrs	r3, r2
 800f918:	687a      	ldr	r2, [r7, #4]
 800f91a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f91c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f91e:	4618      	mov	r0, r3
 800f920:	3718      	adds	r7, #24
 800f922:	46bd      	mov	sp, r7
 800f924:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f928:	b004      	add	sp, #16
 800f92a:	4770      	bx	lr
 800f92c:	803c3800 	.word	0x803c3800
 800f930:	40000004 	.word	0x40000004

0800f934 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f934:	b480      	push	{r7}
 800f936:	b085      	sub	sp, #20
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
 800f93c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f93e:	2300      	movs	r3, #0
 800f940:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	019b      	lsls	r3, r3, #6
 800f946:	f043 0220 	orr.w	r2, r3, #32
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	3301      	adds	r3, #1
 800f952:	60fb      	str	r3, [r7, #12]
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	4a09      	ldr	r2, [pc, #36]	; (800f97c <USB_FlushTxFifo+0x48>)
 800f958:	4293      	cmp	r3, r2
 800f95a:	d901      	bls.n	800f960 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f95c:	2303      	movs	r3, #3
 800f95e:	e006      	b.n	800f96e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	691b      	ldr	r3, [r3, #16]
 800f964:	f003 0320 	and.w	r3, r3, #32
 800f968:	2b20      	cmp	r3, #32
 800f96a:	d0f0      	beq.n	800f94e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f96c:	2300      	movs	r3, #0
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3714      	adds	r7, #20
 800f972:	46bd      	mov	sp, r7
 800f974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f978:	4770      	bx	lr
 800f97a:	bf00      	nop
 800f97c:	00030d40 	.word	0x00030d40

0800f980 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f980:	b480      	push	{r7}
 800f982:	b085      	sub	sp, #20
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f988:	2300      	movs	r3, #0
 800f98a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2210      	movs	r2, #16
 800f990:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	3301      	adds	r3, #1
 800f996:	60fb      	str	r3, [r7, #12]
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	4a09      	ldr	r2, [pc, #36]	; (800f9c0 <USB_FlushRxFifo+0x40>)
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d901      	bls.n	800f9a4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f9a0:	2303      	movs	r3, #3
 800f9a2:	e006      	b.n	800f9b2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	691b      	ldr	r3, [r3, #16]
 800f9a8:	f003 0310 	and.w	r3, r3, #16
 800f9ac:	2b10      	cmp	r3, #16
 800f9ae:	d0f0      	beq.n	800f992 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f9b0:	2300      	movs	r3, #0
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3714      	adds	r7, #20
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr
 800f9be:	bf00      	nop
 800f9c0:	00030d40 	.word	0x00030d40

0800f9c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b085      	sub	sp, #20
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	460b      	mov	r3, r1
 800f9ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9da:	681a      	ldr	r2, [r3, #0]
 800f9dc:	78fb      	ldrb	r3, [r7, #3]
 800f9de:	68f9      	ldr	r1, [r7, #12]
 800f9e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f9e4:	4313      	orrs	r3, r2
 800f9e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f9e8:	2300      	movs	r3, #0
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3714      	adds	r7, #20
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f4:	4770      	bx	lr

0800f9f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f9f6:	b580      	push	{r7, lr}
 800f9f8:	b084      	sub	sp, #16
 800f9fa:	af00      	add	r7, sp, #0
 800f9fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa08:	685b      	ldr	r3, [r3, #4]
 800fa0a:	68fa      	ldr	r2, [r7, #12]
 800fa0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa10:	f043 0302 	orr.w	r3, r3, #2
 800fa14:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800fa16:	2003      	movs	r0, #3
 800fa18:	f7fa fa86 	bl	8009f28 <HAL_Delay>

  return HAL_OK;
 800fa1c:	2300      	movs	r3, #0
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3710      	adds	r7, #16
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
	...

0800fa28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b085      	sub	sp, #20
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800fa30:	2300      	movs	r3, #0
 800fa32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	3301      	adds	r3, #1
 800fa38:	60fb      	str	r3, [r7, #12]
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	4a13      	ldr	r2, [pc, #76]	; (800fa8c <USB_CoreReset+0x64>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d901      	bls.n	800fa46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fa42:	2303      	movs	r3, #3
 800fa44:	e01b      	b.n	800fa7e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	691b      	ldr	r3, [r3, #16]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	daf2      	bge.n	800fa34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	691b      	ldr	r3, [r3, #16]
 800fa56:	f043 0201 	orr.w	r2, r3, #1
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	3301      	adds	r3, #1
 800fa62:	60fb      	str	r3, [r7, #12]
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	4a09      	ldr	r2, [pc, #36]	; (800fa8c <USB_CoreReset+0x64>)
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	d901      	bls.n	800fa70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fa6c:	2303      	movs	r3, #3
 800fa6e:	e006      	b.n	800fa7e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	691b      	ldr	r3, [r3, #16]
 800fa74:	f003 0301 	and.w	r3, r3, #1
 800fa78:	2b01      	cmp	r3, #1
 800fa7a:	d0f0      	beq.n	800fa5e <USB_CoreReset+0x36>

  return HAL_OK;
 800fa7c:	2300      	movs	r3, #0
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3714      	adds	r7, #20
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr
 800fa8a:	bf00      	nop
 800fa8c:	00030d40 	.word	0x00030d40

0800fa90 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800fa90:	b5b0      	push	{r4, r5, r7, lr}
 800fa92:	b08e      	sub	sp, #56	; 0x38
 800fa94:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800fa96:	4ba0      	ldr	r3, [pc, #640]	; (800fd18 <MX_LWIP_Init+0x288>)
 800fa98:	22c0      	movs	r2, #192	; 0xc0
 800fa9a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800fa9c:	4b9e      	ldr	r3, [pc, #632]	; (800fd18 <MX_LWIP_Init+0x288>)
 800fa9e:	22a8      	movs	r2, #168	; 0xa8
 800faa0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800faa2:	4b9d      	ldr	r3, [pc, #628]	; (800fd18 <MX_LWIP_Init+0x288>)
 800faa4:	2201      	movs	r2, #1
 800faa6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 70;
 800faa8:	4b9b      	ldr	r3, [pc, #620]	; (800fd18 <MX_LWIP_Init+0x288>)
 800faaa:	2246      	movs	r2, #70	; 0x46
 800faac:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800faae:	4b9b      	ldr	r3, [pc, #620]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fab0:	22ff      	movs	r2, #255	; 0xff
 800fab2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800fab4:	4b99      	ldr	r3, [pc, #612]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fab6:	22ff      	movs	r2, #255	; 0xff
 800fab8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800faba:	4b98      	ldr	r3, [pc, #608]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fabc:	22ff      	movs	r2, #255	; 0xff
 800fabe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800fac0:	4b96      	ldr	r3, [pc, #600]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fac2:	2200      	movs	r2, #0
 800fac4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800fac6:	4b96      	ldr	r3, [pc, #600]	; (800fd20 <MX_LWIP_Init+0x290>)
 800fac8:	2200      	movs	r2, #0
 800faca:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800facc:	4b94      	ldr	r3, [pc, #592]	; (800fd20 <MX_LWIP_Init+0x290>)
 800face:	2200      	movs	r2, #0
 800fad0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800fad2:	4b93      	ldr	r3, [pc, #588]	; (800fd20 <MX_LWIP_Init+0x290>)
 800fad4:	2200      	movs	r2, #0
 800fad6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800fad8:	4b91      	ldr	r3, [pc, #580]	; (800fd20 <MX_LWIP_Init+0x290>)
 800fada:	2200      	movs	r2, #0
 800fadc:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800fade:	2100      	movs	r1, #0
 800fae0:	2000      	movs	r0, #0
 800fae2:	f003 fdc7 	bl	8013674 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800fae6:	4b8c      	ldr	r3, [pc, #560]	; (800fd18 <MX_LWIP_Init+0x288>)
 800fae8:	781b      	ldrb	r3, [r3, #0]
 800faea:	061a      	lsls	r2, r3, #24
 800faec:	4b8a      	ldr	r3, [pc, #552]	; (800fd18 <MX_LWIP_Init+0x288>)
 800faee:	785b      	ldrb	r3, [r3, #1]
 800faf0:	041b      	lsls	r3, r3, #16
 800faf2:	431a      	orrs	r2, r3
 800faf4:	4b88      	ldr	r3, [pc, #544]	; (800fd18 <MX_LWIP_Init+0x288>)
 800faf6:	789b      	ldrb	r3, [r3, #2]
 800faf8:	021b      	lsls	r3, r3, #8
 800fafa:	4313      	orrs	r3, r2
 800fafc:	4a86      	ldr	r2, [pc, #536]	; (800fd18 <MX_LWIP_Init+0x288>)
 800fafe:	78d2      	ldrb	r2, [r2, #3]
 800fb00:	4313      	orrs	r3, r2
 800fb02:	061a      	lsls	r2, r3, #24
 800fb04:	4b84      	ldr	r3, [pc, #528]	; (800fd18 <MX_LWIP_Init+0x288>)
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	0619      	lsls	r1, r3, #24
 800fb0a:	4b83      	ldr	r3, [pc, #524]	; (800fd18 <MX_LWIP_Init+0x288>)
 800fb0c:	785b      	ldrb	r3, [r3, #1]
 800fb0e:	041b      	lsls	r3, r3, #16
 800fb10:	4319      	orrs	r1, r3
 800fb12:	4b81      	ldr	r3, [pc, #516]	; (800fd18 <MX_LWIP_Init+0x288>)
 800fb14:	789b      	ldrb	r3, [r3, #2]
 800fb16:	021b      	lsls	r3, r3, #8
 800fb18:	430b      	orrs	r3, r1
 800fb1a:	497f      	ldr	r1, [pc, #508]	; (800fd18 <MX_LWIP_Init+0x288>)
 800fb1c:	78c9      	ldrb	r1, [r1, #3]
 800fb1e:	430b      	orrs	r3, r1
 800fb20:	021b      	lsls	r3, r3, #8
 800fb22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fb26:	431a      	orrs	r2, r3
 800fb28:	4b7b      	ldr	r3, [pc, #492]	; (800fd18 <MX_LWIP_Init+0x288>)
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	0619      	lsls	r1, r3, #24
 800fb2e:	4b7a      	ldr	r3, [pc, #488]	; (800fd18 <MX_LWIP_Init+0x288>)
 800fb30:	785b      	ldrb	r3, [r3, #1]
 800fb32:	041b      	lsls	r3, r3, #16
 800fb34:	4319      	orrs	r1, r3
 800fb36:	4b78      	ldr	r3, [pc, #480]	; (800fd18 <MX_LWIP_Init+0x288>)
 800fb38:	789b      	ldrb	r3, [r3, #2]
 800fb3a:	021b      	lsls	r3, r3, #8
 800fb3c:	430b      	orrs	r3, r1
 800fb3e:	4976      	ldr	r1, [pc, #472]	; (800fd18 <MX_LWIP_Init+0x288>)
 800fb40:	78c9      	ldrb	r1, [r1, #3]
 800fb42:	430b      	orrs	r3, r1
 800fb44:	0a1b      	lsrs	r3, r3, #8
 800fb46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fb4a:	431a      	orrs	r2, r3
 800fb4c:	4b72      	ldr	r3, [pc, #456]	; (800fd18 <MX_LWIP_Init+0x288>)
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	0619      	lsls	r1, r3, #24
 800fb52:	4b71      	ldr	r3, [pc, #452]	; (800fd18 <MX_LWIP_Init+0x288>)
 800fb54:	785b      	ldrb	r3, [r3, #1]
 800fb56:	041b      	lsls	r3, r3, #16
 800fb58:	4319      	orrs	r1, r3
 800fb5a:	4b6f      	ldr	r3, [pc, #444]	; (800fd18 <MX_LWIP_Init+0x288>)
 800fb5c:	789b      	ldrb	r3, [r3, #2]
 800fb5e:	021b      	lsls	r3, r3, #8
 800fb60:	430b      	orrs	r3, r1
 800fb62:	496d      	ldr	r1, [pc, #436]	; (800fd18 <MX_LWIP_Init+0x288>)
 800fb64:	78c9      	ldrb	r1, [r1, #3]
 800fb66:	430b      	orrs	r3, r1
 800fb68:	0e1b      	lsrs	r3, r3, #24
 800fb6a:	4313      	orrs	r3, r2
 800fb6c:	4a6d      	ldr	r2, [pc, #436]	; (800fd24 <MX_LWIP_Init+0x294>)
 800fb6e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800fb70:	4b6a      	ldr	r3, [pc, #424]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	061a      	lsls	r2, r3, #24
 800fb76:	4b69      	ldr	r3, [pc, #420]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fb78:	785b      	ldrb	r3, [r3, #1]
 800fb7a:	041b      	lsls	r3, r3, #16
 800fb7c:	431a      	orrs	r2, r3
 800fb7e:	4b67      	ldr	r3, [pc, #412]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fb80:	789b      	ldrb	r3, [r3, #2]
 800fb82:	021b      	lsls	r3, r3, #8
 800fb84:	4313      	orrs	r3, r2
 800fb86:	4a65      	ldr	r2, [pc, #404]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fb88:	78d2      	ldrb	r2, [r2, #3]
 800fb8a:	4313      	orrs	r3, r2
 800fb8c:	061a      	lsls	r2, r3, #24
 800fb8e:	4b63      	ldr	r3, [pc, #396]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	0619      	lsls	r1, r3, #24
 800fb94:	4b61      	ldr	r3, [pc, #388]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fb96:	785b      	ldrb	r3, [r3, #1]
 800fb98:	041b      	lsls	r3, r3, #16
 800fb9a:	4319      	orrs	r1, r3
 800fb9c:	4b5f      	ldr	r3, [pc, #380]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fb9e:	789b      	ldrb	r3, [r3, #2]
 800fba0:	021b      	lsls	r3, r3, #8
 800fba2:	430b      	orrs	r3, r1
 800fba4:	495d      	ldr	r1, [pc, #372]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fba6:	78c9      	ldrb	r1, [r1, #3]
 800fba8:	430b      	orrs	r3, r1
 800fbaa:	021b      	lsls	r3, r3, #8
 800fbac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fbb0:	431a      	orrs	r2, r3
 800fbb2:	4b5a      	ldr	r3, [pc, #360]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fbb4:	781b      	ldrb	r3, [r3, #0]
 800fbb6:	0619      	lsls	r1, r3, #24
 800fbb8:	4b58      	ldr	r3, [pc, #352]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fbba:	785b      	ldrb	r3, [r3, #1]
 800fbbc:	041b      	lsls	r3, r3, #16
 800fbbe:	4319      	orrs	r1, r3
 800fbc0:	4b56      	ldr	r3, [pc, #344]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fbc2:	789b      	ldrb	r3, [r3, #2]
 800fbc4:	021b      	lsls	r3, r3, #8
 800fbc6:	430b      	orrs	r3, r1
 800fbc8:	4954      	ldr	r1, [pc, #336]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fbca:	78c9      	ldrb	r1, [r1, #3]
 800fbcc:	430b      	orrs	r3, r1
 800fbce:	0a1b      	lsrs	r3, r3, #8
 800fbd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fbd4:	431a      	orrs	r2, r3
 800fbd6:	4b51      	ldr	r3, [pc, #324]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	0619      	lsls	r1, r3, #24
 800fbdc:	4b4f      	ldr	r3, [pc, #316]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fbde:	785b      	ldrb	r3, [r3, #1]
 800fbe0:	041b      	lsls	r3, r3, #16
 800fbe2:	4319      	orrs	r1, r3
 800fbe4:	4b4d      	ldr	r3, [pc, #308]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fbe6:	789b      	ldrb	r3, [r3, #2]
 800fbe8:	021b      	lsls	r3, r3, #8
 800fbea:	430b      	orrs	r3, r1
 800fbec:	494b      	ldr	r1, [pc, #300]	; (800fd1c <MX_LWIP_Init+0x28c>)
 800fbee:	78c9      	ldrb	r1, [r1, #3]
 800fbf0:	430b      	orrs	r3, r1
 800fbf2:	0e1b      	lsrs	r3, r3, #24
 800fbf4:	4313      	orrs	r3, r2
 800fbf6:	4a4c      	ldr	r2, [pc, #304]	; (800fd28 <MX_LWIP_Init+0x298>)
 800fbf8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800fbfa:	4b49      	ldr	r3, [pc, #292]	; (800fd20 <MX_LWIP_Init+0x290>)
 800fbfc:	781b      	ldrb	r3, [r3, #0]
 800fbfe:	061a      	lsls	r2, r3, #24
 800fc00:	4b47      	ldr	r3, [pc, #284]	; (800fd20 <MX_LWIP_Init+0x290>)
 800fc02:	785b      	ldrb	r3, [r3, #1]
 800fc04:	041b      	lsls	r3, r3, #16
 800fc06:	431a      	orrs	r2, r3
 800fc08:	4b45      	ldr	r3, [pc, #276]	; (800fd20 <MX_LWIP_Init+0x290>)
 800fc0a:	789b      	ldrb	r3, [r3, #2]
 800fc0c:	021b      	lsls	r3, r3, #8
 800fc0e:	4313      	orrs	r3, r2
 800fc10:	4a43      	ldr	r2, [pc, #268]	; (800fd20 <MX_LWIP_Init+0x290>)
 800fc12:	78d2      	ldrb	r2, [r2, #3]
 800fc14:	4313      	orrs	r3, r2
 800fc16:	061a      	lsls	r2, r3, #24
 800fc18:	4b41      	ldr	r3, [pc, #260]	; (800fd20 <MX_LWIP_Init+0x290>)
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	0619      	lsls	r1, r3, #24
 800fc1e:	4b40      	ldr	r3, [pc, #256]	; (800fd20 <MX_LWIP_Init+0x290>)
 800fc20:	785b      	ldrb	r3, [r3, #1]
 800fc22:	041b      	lsls	r3, r3, #16
 800fc24:	4319      	orrs	r1, r3
 800fc26:	4b3e      	ldr	r3, [pc, #248]	; (800fd20 <MX_LWIP_Init+0x290>)
 800fc28:	789b      	ldrb	r3, [r3, #2]
 800fc2a:	021b      	lsls	r3, r3, #8
 800fc2c:	430b      	orrs	r3, r1
 800fc2e:	493c      	ldr	r1, [pc, #240]	; (800fd20 <MX_LWIP_Init+0x290>)
 800fc30:	78c9      	ldrb	r1, [r1, #3]
 800fc32:	430b      	orrs	r3, r1
 800fc34:	021b      	lsls	r3, r3, #8
 800fc36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fc3a:	431a      	orrs	r2, r3
 800fc3c:	4b38      	ldr	r3, [pc, #224]	; (800fd20 <MX_LWIP_Init+0x290>)
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	0619      	lsls	r1, r3, #24
 800fc42:	4b37      	ldr	r3, [pc, #220]	; (800fd20 <MX_LWIP_Init+0x290>)
 800fc44:	785b      	ldrb	r3, [r3, #1]
 800fc46:	041b      	lsls	r3, r3, #16
 800fc48:	4319      	orrs	r1, r3
 800fc4a:	4b35      	ldr	r3, [pc, #212]	; (800fd20 <MX_LWIP_Init+0x290>)
 800fc4c:	789b      	ldrb	r3, [r3, #2]
 800fc4e:	021b      	lsls	r3, r3, #8
 800fc50:	430b      	orrs	r3, r1
 800fc52:	4933      	ldr	r1, [pc, #204]	; (800fd20 <MX_LWIP_Init+0x290>)
 800fc54:	78c9      	ldrb	r1, [r1, #3]
 800fc56:	430b      	orrs	r3, r1
 800fc58:	0a1b      	lsrs	r3, r3, #8
 800fc5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fc5e:	431a      	orrs	r2, r3
 800fc60:	4b2f      	ldr	r3, [pc, #188]	; (800fd20 <MX_LWIP_Init+0x290>)
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	0619      	lsls	r1, r3, #24
 800fc66:	4b2e      	ldr	r3, [pc, #184]	; (800fd20 <MX_LWIP_Init+0x290>)
 800fc68:	785b      	ldrb	r3, [r3, #1]
 800fc6a:	041b      	lsls	r3, r3, #16
 800fc6c:	4319      	orrs	r1, r3
 800fc6e:	4b2c      	ldr	r3, [pc, #176]	; (800fd20 <MX_LWIP_Init+0x290>)
 800fc70:	789b      	ldrb	r3, [r3, #2]
 800fc72:	021b      	lsls	r3, r3, #8
 800fc74:	430b      	orrs	r3, r1
 800fc76:	492a      	ldr	r1, [pc, #168]	; (800fd20 <MX_LWIP_Init+0x290>)
 800fc78:	78c9      	ldrb	r1, [r1, #3]
 800fc7a:	430b      	orrs	r3, r1
 800fc7c:	0e1b      	lsrs	r3, r3, #24
 800fc7e:	4313      	orrs	r3, r2
 800fc80:	4a2a      	ldr	r2, [pc, #168]	; (800fd2c <MX_LWIP_Init+0x29c>)
 800fc82:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800fc84:	4b2a      	ldr	r3, [pc, #168]	; (800fd30 <MX_LWIP_Init+0x2a0>)
 800fc86:	9302      	str	r3, [sp, #8]
 800fc88:	4b2a      	ldr	r3, [pc, #168]	; (800fd34 <MX_LWIP_Init+0x2a4>)
 800fc8a:	9301      	str	r3, [sp, #4]
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	9300      	str	r3, [sp, #0]
 800fc90:	4b26      	ldr	r3, [pc, #152]	; (800fd2c <MX_LWIP_Init+0x29c>)
 800fc92:	4a25      	ldr	r2, [pc, #148]	; (800fd28 <MX_LWIP_Init+0x298>)
 800fc94:	4923      	ldr	r1, [pc, #140]	; (800fd24 <MX_LWIP_Init+0x294>)
 800fc96:	4828      	ldr	r0, [pc, #160]	; (800fd38 <MX_LWIP_Init+0x2a8>)
 800fc98:	f005 f8c0 	bl	8014e1c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800fc9c:	4826      	ldr	r0, [pc, #152]	; (800fd38 <MX_LWIP_Init+0x2a8>)
 800fc9e:	f005 fa6f 	bl	8015180 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800fca2:	4b25      	ldr	r3, [pc, #148]	; (800fd38 <MX_LWIP_Init+0x2a8>)
 800fca4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fca8:	089b      	lsrs	r3, r3, #2
 800fcaa:	f003 0301 	and.w	r3, r3, #1
 800fcae:	b2db      	uxtb	r3, r3
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d003      	beq.n	800fcbc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800fcb4:	4820      	ldr	r0, [pc, #128]	; (800fd38 <MX_LWIP_Init+0x2a8>)
 800fcb6:	f005 fa73 	bl	80151a0 <netif_set_up>
 800fcba:	e002      	b.n	800fcc2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800fcbc:	481e      	ldr	r0, [pc, #120]	; (800fd38 <MX_LWIP_Init+0x2a8>)
 800fcbe:	f005 fadb 	bl	8015278 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800fcc2:	491e      	ldr	r1, [pc, #120]	; (800fd3c <MX_LWIP_Init+0x2ac>)
 800fcc4:	481c      	ldr	r0, [pc, #112]	; (800fd38 <MX_LWIP_Init+0x2a8>)
 800fcc6:	f005 fb6d 	bl	80153a4 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800fcca:	2300      	movs	r3, #0
 800fccc:	623b      	str	r3, [r7, #32]
 800fcce:	2300      	movs	r3, #0
 800fcd0:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800fcd2:	f107 0320 	add.w	r3, r7, #32
 800fcd6:	2101      	movs	r1, #1
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f000 fd8f 	bl	80107fc <osSemaphoreCreate>
 800fcde:	4602      	mov	r2, r0
 800fce0:	4b17      	ldr	r3, [pc, #92]	; (800fd40 <MX_LWIP_Init+0x2b0>)
 800fce2:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 800fce4:	4b17      	ldr	r3, [pc, #92]	; (800fd44 <MX_LWIP_Init+0x2b4>)
 800fce6:	4a14      	ldr	r2, [pc, #80]	; (800fd38 <MX_LWIP_Init+0x2a8>)
 800fce8:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800fcea:	4b15      	ldr	r3, [pc, #84]	; (800fd40 <MX_LWIP_Init+0x2b0>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	4a15      	ldr	r2, [pc, #84]	; (800fd44 <MX_LWIP_Init+0x2b4>)
 800fcf0:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800fcf2:	4b15      	ldr	r3, [pc, #84]	; (800fd48 <MX_LWIP_Init+0x2b8>)
 800fcf4:	1d3c      	adds	r4, r7, #4
 800fcf6:	461d      	mov	r5, r3
 800fcf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fcfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fcfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fd00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 800fd04:	1d3b      	adds	r3, r7, #4
 800fd06:	490f      	ldr	r1, [pc, #60]	; (800fd44 <MX_LWIP_Init+0x2b4>)
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f000 fc7a 	bl	8010602 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800fd0e:	bf00      	nop
 800fd10:	3728      	adds	r7, #40	; 0x28
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bdb0      	pop	{r4, r5, r7, pc}
 800fd16:	bf00      	nop
 800fd18:	2000d520 	.word	0x2000d520
 800fd1c:	2000d51c 	.word	0x2000d51c
 800fd20:	2000d4e0 	.word	0x2000d4e0
 800fd24:	2000d518 	.word	0x2000d518
 800fd28:	2000d524 	.word	0x2000d524
 800fd2c:	2000d528 	.word	0x2000d528
 800fd30:	080135b1 	.word	0x080135b1
 800fd34:	08010391 	.word	0x08010391
 800fd38:	2000d4e4 	.word	0x2000d4e4
 800fd3c:	08010475 	.word	0x08010475
 800fd40:	20000340 	.word	0x20000340
 800fd44:	2000d4d8 	.word	0x2000d4d8
 800fd48:	0801fe4c 	.word	0x0801fe4c

0800fd4c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b08e      	sub	sp, #56	; 0x38
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fd54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd58:	2200      	movs	r2, #0
 800fd5a:	601a      	str	r2, [r3, #0]
 800fd5c:	605a      	str	r2, [r3, #4]
 800fd5e:	609a      	str	r2, [r3, #8]
 800fd60:	60da      	str	r2, [r3, #12]
 800fd62:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	4a52      	ldr	r2, [pc, #328]	; (800feb4 <HAL_ETH_MspInit+0x168>)
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	f040 809e 	bne.w	800feac <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800fd70:	4b51      	ldr	r3, [pc, #324]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fd72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd74:	4a50      	ldr	r2, [pc, #320]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fd76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fd7a:	6313      	str	r3, [r2, #48]	; 0x30
 800fd7c:	4b4e      	ldr	r3, [pc, #312]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fd7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd84:	623b      	str	r3, [r7, #32]
 800fd86:	6a3b      	ldr	r3, [r7, #32]
 800fd88:	4b4b      	ldr	r3, [pc, #300]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fd8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd8c:	4a4a      	ldr	r2, [pc, #296]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fd8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fd92:	6313      	str	r3, [r2, #48]	; 0x30
 800fd94:	4b48      	ldr	r3, [pc, #288]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fd96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fd9c:	61fb      	str	r3, [r7, #28]
 800fd9e:	69fb      	ldr	r3, [r7, #28]
 800fda0:	4b45      	ldr	r3, [pc, #276]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fda4:	4a44      	ldr	r2, [pc, #272]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fda6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fdaa:	6313      	str	r3, [r2, #48]	; 0x30
 800fdac:	4b42      	ldr	r3, [pc, #264]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fdae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fdb4:	61bb      	str	r3, [r7, #24]
 800fdb6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fdb8:	4b3f      	ldr	r3, [pc, #252]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fdba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdbc:	4a3e      	ldr	r2, [pc, #248]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fdbe:	f043 0304 	orr.w	r3, r3, #4
 800fdc2:	6313      	str	r3, [r2, #48]	; 0x30
 800fdc4:	4b3c      	ldr	r3, [pc, #240]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fdc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdc8:	f003 0304 	and.w	r3, r3, #4
 800fdcc:	617b      	str	r3, [r7, #20]
 800fdce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fdd0:	4b39      	ldr	r3, [pc, #228]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fdd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdd4:	4a38      	ldr	r2, [pc, #224]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fdd6:	f043 0301 	orr.w	r3, r3, #1
 800fdda:	6313      	str	r3, [r2, #48]	; 0x30
 800fddc:	4b36      	ldr	r3, [pc, #216]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fdde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fde0:	f003 0301 	and.w	r3, r3, #1
 800fde4:	613b      	str	r3, [r7, #16]
 800fde6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fde8:	4b33      	ldr	r3, [pc, #204]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fdea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdec:	4a32      	ldr	r2, [pc, #200]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fdee:	f043 0302 	orr.w	r3, r3, #2
 800fdf2:	6313      	str	r3, [r2, #48]	; 0x30
 800fdf4:	4b30      	ldr	r3, [pc, #192]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdf8:	f003 0302 	and.w	r3, r3, #2
 800fdfc:	60fb      	str	r3, [r7, #12]
 800fdfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800fe00:	4b2d      	ldr	r3, [pc, #180]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fe02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe04:	4a2c      	ldr	r2, [pc, #176]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fe06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe0a:	6313      	str	r3, [r2, #48]	; 0x30
 800fe0c:	4b2a      	ldr	r3, [pc, #168]	; (800feb8 <HAL_ETH_MspInit+0x16c>)
 800fe0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe14:	60bb      	str	r3, [r7, #8]
 800fe16:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800fe18:	2332      	movs	r3, #50	; 0x32
 800fe1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe1c:	2302      	movs	r3, #2
 800fe1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe20:	2300      	movs	r3, #0
 800fe22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe24:	2303      	movs	r3, #3
 800fe26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fe28:	230b      	movs	r3, #11
 800fe2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fe2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe30:	4619      	mov	r1, r3
 800fe32:	4822      	ldr	r0, [pc, #136]	; (800febc <HAL_ETH_MspInit+0x170>)
 800fe34:	f7fc f822 	bl	800be7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800fe38:	2386      	movs	r3, #134	; 0x86
 800fe3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe3c:	2302      	movs	r3, #2
 800fe3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe40:	2300      	movs	r3, #0
 800fe42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe44:	2303      	movs	r3, #3
 800fe46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fe48:	230b      	movs	r3, #11
 800fe4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fe4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe50:	4619      	mov	r1, r3
 800fe52:	481b      	ldr	r0, [pc, #108]	; (800fec0 <HAL_ETH_MspInit+0x174>)
 800fe54:	f7fc f812 	bl	800be7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800fe58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fe5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe5e:	2302      	movs	r3, #2
 800fe60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe62:	2300      	movs	r3, #0
 800fe64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe66:	2303      	movs	r3, #3
 800fe68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fe6a:	230b      	movs	r3, #11
 800fe6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800fe6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe72:	4619      	mov	r1, r3
 800fe74:	4813      	ldr	r0, [pc, #76]	; (800fec4 <HAL_ETH_MspInit+0x178>)
 800fe76:	f7fc f801 	bl	800be7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800fe7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800fe7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe80:	2302      	movs	r3, #2
 800fe82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe84:	2300      	movs	r3, #0
 800fe86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe88:	2303      	movs	r3, #3
 800fe8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fe8c:	230b      	movs	r3, #11
 800fe8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800fe90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe94:	4619      	mov	r1, r3
 800fe96:	480c      	ldr	r0, [pc, #48]	; (800fec8 <HAL_ETH_MspInit+0x17c>)
 800fe98:	f7fb fff0 	bl	800be7c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	2105      	movs	r1, #5
 800fea0:	203d      	movs	r0, #61	; 0x3d
 800fea2:	f7fa f93e 	bl	800a122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800fea6:	203d      	movs	r0, #61	; 0x3d
 800fea8:	f7fa f957 	bl	800a15a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800feac:	bf00      	nop
 800feae:	3738      	adds	r7, #56	; 0x38
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}
 800feb4:	40028000 	.word	0x40028000
 800feb8:	40023800 	.word	0x40023800
 800febc:	40020800 	.word	0x40020800
 800fec0:	40020000 	.word	0x40020000
 800fec4:	40020400 	.word	0x40020400
 800fec8:	40021800 	.word	0x40021800

0800fecc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b082      	sub	sp, #8
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800fed4:	4b04      	ldr	r3, [pc, #16]	; (800fee8 <HAL_ETH_RxCpltCallback+0x1c>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	4618      	mov	r0, r3
 800feda:	f000 fd11 	bl	8010900 <osSemaphoreRelease>
}
 800fede:	bf00      	nop
 800fee0:	3708      	adds	r7, #8
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
 800fee6:	bf00      	nop
 800fee8:	20000344 	.word	0x20000344

0800feec <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800feec:	b5b0      	push	{r4, r5, r7, lr}
 800feee:	b090      	sub	sp, #64	; 0x40
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800fef4:	2300      	movs	r3, #0
 800fef6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800fef8:	4b5c      	ldr	r3, [pc, #368]	; (801006c <low_level_init+0x180>)
 800fefa:	4a5d      	ldr	r2, [pc, #372]	; (8010070 <low_level_init+0x184>)
 800fefc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800fefe:	4b5b      	ldr	r3, [pc, #364]	; (801006c <low_level_init+0x180>)
 800ff00:	2201      	movs	r2, #1
 800ff02:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800ff04:	4b59      	ldr	r3, [pc, #356]	; (801006c <low_level_init+0x180>)
 800ff06:	2200      	movs	r2, #0
 800ff08:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800ff10:	2380      	movs	r3, #128	; 0x80
 800ff12:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800ff16:	23e1      	movs	r3, #225	; 0xe1
 800ff18:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800ff22:	2300      	movs	r3, #0
 800ff24:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800ff2e:	4a4f      	ldr	r2, [pc, #316]	; (801006c <low_level_init+0x180>)
 800ff30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ff34:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800ff36:	4b4d      	ldr	r3, [pc, #308]	; (801006c <low_level_init+0x180>)
 800ff38:	2201      	movs	r2, #1
 800ff3a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800ff3c:	4b4b      	ldr	r3, [pc, #300]	; (801006c <low_level_init+0x180>)
 800ff3e:	2200      	movs	r2, #0
 800ff40:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800ff42:	4b4a      	ldr	r3, [pc, #296]	; (801006c <low_level_init+0x180>)
 800ff44:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ff48:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ff4a:	4848      	ldr	r0, [pc, #288]	; (801006c <low_level_init+0x180>)
 800ff4c:	f7fa fe00 	bl	800ab50 <HAL_ETH_Init>
 800ff50:	4603      	mov	r3, r0
 800ff52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800ff56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d108      	bne.n	800ff70 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff64:	f043 0304 	orr.w	r3, r3, #4
 800ff68:	b2da      	uxtb	r2, r3
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800ff70:	2304      	movs	r3, #4
 800ff72:	4a40      	ldr	r2, [pc, #256]	; (8010074 <low_level_init+0x188>)
 800ff74:	4940      	ldr	r1, [pc, #256]	; (8010078 <low_level_init+0x18c>)
 800ff76:	483d      	ldr	r0, [pc, #244]	; (801006c <low_level_init+0x180>)
 800ff78:	f7fa ff86 	bl	800ae88 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800ff7c:	2304      	movs	r3, #4
 800ff7e:	4a3f      	ldr	r2, [pc, #252]	; (801007c <low_level_init+0x190>)
 800ff80:	493f      	ldr	r1, [pc, #252]	; (8010080 <low_level_init+0x194>)
 800ff82:	483a      	ldr	r0, [pc, #232]	; (801006c <low_level_init+0x180>)
 800ff84:	f7fa ffe9 	bl	800af5a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2206      	movs	r2, #6
 800ff8c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ff90:	4b36      	ldr	r3, [pc, #216]	; (801006c <low_level_init+0x180>)
 800ff92:	695b      	ldr	r3, [r3, #20]
 800ff94:	781a      	ldrb	r2, [r3, #0]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800ff9c:	4b33      	ldr	r3, [pc, #204]	; (801006c <low_level_init+0x180>)
 800ff9e:	695b      	ldr	r3, [r3, #20]
 800ffa0:	785a      	ldrb	r2, [r3, #1]
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ffa8:	4b30      	ldr	r3, [pc, #192]	; (801006c <low_level_init+0x180>)
 800ffaa:	695b      	ldr	r3, [r3, #20]
 800ffac:	789a      	ldrb	r2, [r3, #2]
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800ffb4:	4b2d      	ldr	r3, [pc, #180]	; (801006c <low_level_init+0x180>)
 800ffb6:	695b      	ldr	r3, [r3, #20]
 800ffb8:	78da      	ldrb	r2, [r3, #3]
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800ffc0:	4b2a      	ldr	r3, [pc, #168]	; (801006c <low_level_init+0x180>)
 800ffc2:	695b      	ldr	r3, [r3, #20]
 800ffc4:	791a      	ldrb	r2, [r3, #4]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ffcc:	4b27      	ldr	r3, [pc, #156]	; (801006c <low_level_init+0x180>)
 800ffce:	695b      	ldr	r3, [r3, #20]
 800ffd0:	795a      	ldrb	r2, [r3, #5]
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ffde:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffe6:	f043 030a 	orr.w	r3, r3, #10
 800ffea:	b2da      	uxtb	r2, r3
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800fff2:	2300      	movs	r3, #0
 800fff4:	62bb      	str	r3, [r7, #40]	; 0x28
 800fff6:	2300      	movs	r3, #0
 800fff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800fffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fffe:	2101      	movs	r1, #1
 8010000:	4618      	mov	r0, r3
 8010002:	f000 fbfb 	bl	80107fc <osSemaphoreCreate>
 8010006:	4602      	mov	r2, r0
 8010008:	4b1e      	ldr	r3, [pc, #120]	; (8010084 <low_level_init+0x198>)
 801000a:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 801000c:	4b1e      	ldr	r3, [pc, #120]	; (8010088 <low_level_init+0x19c>)
 801000e:	f107 040c 	add.w	r4, r7, #12
 8010012:	461d      	mov	r5, r3
 8010014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010018:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801001c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8010020:	f107 030c 	add.w	r3, r7, #12
 8010024:	6879      	ldr	r1, [r7, #4]
 8010026:	4618      	mov	r0, r3
 8010028:	f000 faeb 	bl	8010602 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 801002c:	480f      	ldr	r0, [pc, #60]	; (801006c <low_level_init+0x180>)
 801002e:	f7fb fabc 	bl	800b5aa <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */
    
/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8010032:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010036:	461a      	mov	r2, r3
 8010038:	211d      	movs	r1, #29
 801003a:	480c      	ldr	r0, [pc, #48]	; (801006c <low_level_init+0x180>)
 801003c:	f7fb f9e7 	bl	800b40e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8010040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010042:	f043 030b 	orr.w	r3, r3, #11
 8010046:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8010048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004a:	461a      	mov	r2, r3
 801004c:	211d      	movs	r1, #29
 801004e:	4807      	ldr	r0, [pc, #28]	; (801006c <low_level_init+0x180>)
 8010050:	f7fb fa45 	bl	800b4de <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8010054:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010058:	461a      	mov	r2, r3
 801005a:	211d      	movs	r1, #29
 801005c:	4803      	ldr	r0, [pc, #12]	; (801006c <low_level_init+0x180>)
 801005e:	f7fb f9d6 	bl	800b40e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8010062:	bf00      	nop
 8010064:	3740      	adds	r7, #64	; 0x40
 8010066:	46bd      	mov	sp, r7
 8010068:	bdb0      	pop	{r4, r5, r7, pc}
 801006a:	bf00      	nop
 801006c:	2000edfc 	.word	0x2000edfc
 8010070:	40028000 	.word	0x40028000
 8010074:	2000ee44 	.word	0x2000ee44
 8010078:	2000d52c 	.word	0x2000d52c
 801007c:	2000d5ac 	.word	0x2000d5ac
 8010080:	2000ed7c 	.word	0x2000ed7c
 8010084:	20000344 	.word	0x20000344
 8010088:	0801fe70 	.word	0x0801fe70

0801008c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b08a      	sub	sp, #40	; 0x28
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8010096:	4b4b      	ldr	r3, [pc, #300]	; (80101c4 <low_level_output+0x138>)
 8010098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801009a:	689b      	ldr	r3, [r3, #8]
 801009c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 801009e:	2300      	movs	r3, #0
 80100a0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80100a2:	2300      	movs	r3, #0
 80100a4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80100a6:	2300      	movs	r3, #0
 80100a8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80100aa:	2300      	movs	r3, #0
 80100ac:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80100ae:	4b45      	ldr	r3, [pc, #276]	; (80101c4 <low_level_output+0x138>)
 80100b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100b2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80100b4:	2300      	movs	r3, #0
 80100b6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	623b      	str	r3, [r7, #32]
 80100bc:	e05a      	b.n	8010174 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80100be:	69bb      	ldr	r3, [r7, #24]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	da03      	bge.n	80100ce <low_level_output+0x42>
      {
        errval = ERR_USE;
 80100c6:	23f8      	movs	r3, #248	; 0xf8
 80100c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80100cc:	e05c      	b.n	8010188 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80100ce:	6a3b      	ldr	r3, [r7, #32]
 80100d0:	895b      	ldrh	r3, [r3, #10]
 80100d2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80100d4:	2300      	movs	r3, #0
 80100d6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80100d8:	e02f      	b.n	801013a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80100da:	69fa      	ldr	r2, [r7, #28]
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	18d0      	adds	r0, r2, r3
 80100e0:	6a3b      	ldr	r3, [r7, #32]
 80100e2:	685a      	ldr	r2, [r3, #4]
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	18d1      	adds	r1, r2, r3
 80100e8:	693a      	ldr	r2, [r7, #16]
 80100ea:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80100ee:	1a9b      	subs	r3, r3, r2
 80100f0:	461a      	mov	r2, r3
 80100f2:	f00e ff34 	bl	801ef5e <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80100f6:	69bb      	ldr	r3, [r7, #24]
 80100f8:	68db      	ldr	r3, [r3, #12]
 80100fa:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80100fc:	69bb      	ldr	r3, [r7, #24]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	2b00      	cmp	r3, #0
 8010102:	da03      	bge.n	801010c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8010104:	23f8      	movs	r3, #248	; 0xf8
 8010106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 801010a:	e03d      	b.n	8010188 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 801010c:	69bb      	ldr	r3, [r7, #24]
 801010e:	689b      	ldr	r3, [r3, #8]
 8010110:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8010112:	693a      	ldr	r2, [r7, #16]
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	4413      	add	r3, r2
 8010118:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 801011c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 801011e:	68ba      	ldr	r2, [r7, #8]
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	1ad3      	subs	r3, r2, r3
 8010124:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8010128:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 801012a:	697a      	ldr	r2, [r7, #20]
 801012c:	693b      	ldr	r3, [r7, #16]
 801012e:	1ad3      	subs	r3, r2, r3
 8010130:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8010134:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8010136:	2300      	movs	r3, #0
 8010138:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801013a:	68fa      	ldr	r2, [r7, #12]
 801013c:	693b      	ldr	r3, [r7, #16]
 801013e:	4413      	add	r3, r2
 8010140:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8010144:	4293      	cmp	r3, r2
 8010146:	d8c8      	bhi.n	80100da <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8010148:	69fa      	ldr	r2, [r7, #28]
 801014a:	693b      	ldr	r3, [r7, #16]
 801014c:	18d0      	adds	r0, r2, r3
 801014e:	6a3b      	ldr	r3, [r7, #32]
 8010150:	685a      	ldr	r2, [r3, #4]
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	4413      	add	r3, r2
 8010156:	68fa      	ldr	r2, [r7, #12]
 8010158:	4619      	mov	r1, r3
 801015a:	f00e ff00 	bl	801ef5e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 801015e:	693a      	ldr	r2, [r7, #16]
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	4413      	add	r3, r2
 8010164:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8010166:	697a      	ldr	r2, [r7, #20]
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	4413      	add	r3, r2
 801016c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 801016e:	6a3b      	ldr	r3, [r7, #32]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	623b      	str	r3, [r7, #32]
 8010174:	6a3b      	ldr	r3, [r7, #32]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d1a1      	bne.n	80100be <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 801017a:	6979      	ldr	r1, [r7, #20]
 801017c:	4811      	ldr	r0, [pc, #68]	; (80101c4 <low_level_output+0x138>)
 801017e:	f7fa ff59 	bl	800b034 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8010182:	2300      	movs	r3, #0
 8010184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8010188:	4b0e      	ldr	r3, [pc, #56]	; (80101c4 <low_level_output+0x138>)
 801018a:	681a      	ldr	r2, [r3, #0]
 801018c:	f241 0314 	movw	r3, #4116	; 0x1014
 8010190:	4413      	add	r3, r2
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f003 0320 	and.w	r3, r3, #32
 8010198:	2b00      	cmp	r3, #0
 801019a:	d00d      	beq.n	80101b8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 801019c:	4b09      	ldr	r3, [pc, #36]	; (80101c4 <low_level_output+0x138>)
 801019e:	681a      	ldr	r2, [r3, #0]
 80101a0:	f241 0314 	movw	r3, #4116	; 0x1014
 80101a4:	4413      	add	r3, r2
 80101a6:	2220      	movs	r2, #32
 80101a8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80101aa:	4b06      	ldr	r3, [pc, #24]	; (80101c4 <low_level_output+0x138>)
 80101ac:	681a      	ldr	r2, [r3, #0]
 80101ae:	f241 0304 	movw	r3, #4100	; 0x1004
 80101b2:	4413      	add	r3, r2
 80101b4:	2200      	movs	r2, #0
 80101b6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80101b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3728      	adds	r7, #40	; 0x28
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	2000edfc 	.word	0x2000edfc

080101c8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b08c      	sub	sp, #48	; 0x30
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80101d0:	2300      	movs	r3, #0
 80101d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80101d4:	2300      	movs	r3, #0
 80101d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80101d8:	2300      	movs	r3, #0
 80101da:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80101dc:	2300      	movs	r3, #0
 80101de:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80101e0:	2300      	movs	r3, #0
 80101e2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80101e4:	2300      	movs	r3, #0
 80101e6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80101e8:	2300      	movs	r3, #0
 80101ea:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80101ec:	484f      	ldr	r0, [pc, #316]	; (801032c <low_level_input+0x164>)
 80101ee:	f7fb f80b 	bl	800b208 <HAL_ETH_GetReceivedFrame_IT>
 80101f2:	4603      	mov	r3, r0
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d001      	beq.n	80101fc <low_level_input+0x34>

    return NULL;
 80101f8:	2300      	movs	r3, #0
 80101fa:	e092      	b.n	8010322 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80101fc:	4b4b      	ldr	r3, [pc, #300]	; (801032c <low_level_input+0x164>)
 80101fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010200:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8010202:	4b4a      	ldr	r3, [pc, #296]	; (801032c <low_level_input+0x164>)
 8010204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010206:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8010208:	89fb      	ldrh	r3, [r7, #14]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d007      	beq.n	801021e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 801020e:	89fb      	ldrh	r3, [r7, #14]
 8010210:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8010214:	4619      	mov	r1, r3
 8010216:	2000      	movs	r0, #0
 8010218:	f005 f98e 	bl	8015538 <pbuf_alloc>
 801021c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 801021e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010220:	2b00      	cmp	r3, #0
 8010222:	d04b      	beq.n	80102bc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8010224:	4b41      	ldr	r3, [pc, #260]	; (801032c <low_level_input+0x164>)
 8010226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010228:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 801022a:	2300      	movs	r3, #0
 801022c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 801022e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010230:	62bb      	str	r3, [r7, #40]	; 0x28
 8010232:	e040      	b.n	80102b6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8010234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010236:	895b      	ldrh	r3, [r3, #10]
 8010238:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 801023a:	2300      	movs	r3, #0
 801023c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801023e:	e021      	b.n	8010284 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8010240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010242:	685a      	ldr	r2, [r3, #4]
 8010244:	69bb      	ldr	r3, [r7, #24]
 8010246:	18d0      	adds	r0, r2, r3
 8010248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801024a:	69fb      	ldr	r3, [r7, #28]
 801024c:	18d1      	adds	r1, r2, r3
 801024e:	69fa      	ldr	r2, [r7, #28]
 8010250:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8010254:	1a9b      	subs	r3, r3, r2
 8010256:	461a      	mov	r2, r3
 8010258:	f00e fe81 	bl	801ef5e <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801025c:	6a3b      	ldr	r3, [r7, #32]
 801025e:	68db      	ldr	r3, [r3, #12]
 8010260:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8010262:	6a3b      	ldr	r3, [r7, #32]
 8010264:	689b      	ldr	r3, [r3, #8]
 8010266:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8010268:	69fa      	ldr	r2, [r7, #28]
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	4413      	add	r3, r2
 801026e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8010272:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8010274:	69ba      	ldr	r2, [r7, #24]
 8010276:	69fb      	ldr	r3, [r7, #28]
 8010278:	1ad3      	subs	r3, r2, r3
 801027a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 801027e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8010280:	2300      	movs	r3, #0
 8010282:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8010284:	697a      	ldr	r2, [r7, #20]
 8010286:	69fb      	ldr	r3, [r7, #28]
 8010288:	4413      	add	r3, r2
 801028a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801028e:	4293      	cmp	r3, r2
 8010290:	d8d6      	bhi.n	8010240 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8010292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010294:	685a      	ldr	r2, [r3, #4]
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	18d0      	adds	r0, r2, r3
 801029a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801029c:	69fb      	ldr	r3, [r7, #28]
 801029e:	4413      	add	r3, r2
 80102a0:	697a      	ldr	r2, [r7, #20]
 80102a2:	4619      	mov	r1, r3
 80102a4:	f00e fe5b 	bl	801ef5e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80102a8:	69fa      	ldr	r2, [r7, #28]
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	4413      	add	r3, r2
 80102ae:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80102b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80102b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d1bb      	bne.n	8010234 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80102bc:	4b1b      	ldr	r3, [pc, #108]	; (801032c <low_level_input+0x164>)
 80102be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102c0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80102c2:	2300      	movs	r3, #0
 80102c4:	613b      	str	r3, [r7, #16]
 80102c6:	e00b      	b.n	80102e0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80102c8:	6a3b      	ldr	r3, [r7, #32]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80102d0:	6a3b      	ldr	r3, [r7, #32]
 80102d2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80102d4:	6a3b      	ldr	r3, [r7, #32]
 80102d6:	68db      	ldr	r3, [r3, #12]
 80102d8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80102da:	693b      	ldr	r3, [r7, #16]
 80102dc:	3301      	adds	r3, #1
 80102de:	613b      	str	r3, [r7, #16]
 80102e0:	4b12      	ldr	r3, [pc, #72]	; (801032c <low_level_input+0x164>)
 80102e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102e4:	693a      	ldr	r2, [r7, #16]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d3ee      	bcc.n	80102c8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80102ea:	4b10      	ldr	r3, [pc, #64]	; (801032c <low_level_input+0x164>)
 80102ec:	2200      	movs	r2, #0
 80102ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80102f0:	4b0e      	ldr	r3, [pc, #56]	; (801032c <low_level_input+0x164>)
 80102f2:	681a      	ldr	r2, [r3, #0]
 80102f4:	f241 0314 	movw	r3, #4116	; 0x1014
 80102f8:	4413      	add	r3, r2
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010300:	2b00      	cmp	r3, #0
 8010302:	d00d      	beq.n	8010320 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8010304:	4b09      	ldr	r3, [pc, #36]	; (801032c <low_level_input+0x164>)
 8010306:	681a      	ldr	r2, [r3, #0]
 8010308:	f241 0314 	movw	r3, #4116	; 0x1014
 801030c:	4413      	add	r3, r2
 801030e:	2280      	movs	r2, #128	; 0x80
 8010310:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8010312:	4b06      	ldr	r3, [pc, #24]	; (801032c <low_level_input+0x164>)
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	f241 0308 	movw	r3, #4104	; 0x1008
 801031a:	4413      	add	r3, r2
 801031c:	2200      	movs	r2, #0
 801031e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8010320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010322:	4618      	mov	r0, r3
 8010324:	3730      	adds	r7, #48	; 0x30
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}
 801032a:	bf00      	nop
 801032c:	2000edfc 	.word	0x2000edfc

08010330 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b084      	sub	sp, #16
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 801033c:	4b12      	ldr	r3, [pc, #72]	; (8010388 <ethernetif_input+0x58>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010344:	4618      	mov	r0, r3
 8010346:	f000 fa8d 	bl	8010864 <osSemaphoreWait>
 801034a:	4603      	mov	r3, r0
 801034c:	2b00      	cmp	r3, #0
 801034e:	d1f5      	bne.n	801033c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8010350:	480e      	ldr	r0, [pc, #56]	; (801038c <ethernetif_input+0x5c>)
 8010352:	f00e fd71 	bl	801ee38 <sys_mutex_lock>
        p = low_level_input( netif );
 8010356:	68f8      	ldr	r0, [r7, #12]
 8010358:	f7ff ff36 	bl	80101c8 <low_level_input>
 801035c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d00a      	beq.n	801037a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	691b      	ldr	r3, [r3, #16]
 8010368:	68f9      	ldr	r1, [r7, #12]
 801036a:	68b8      	ldr	r0, [r7, #8]
 801036c:	4798      	blx	r3
 801036e:	4603      	mov	r3, r0
 8010370:	2b00      	cmp	r3, #0
 8010372:	d002      	beq.n	801037a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8010374:	68b8      	ldr	r0, [r7, #8]
 8010376:	f005 fbbf 	bl	8015af8 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 801037a:	4804      	ldr	r0, [pc, #16]	; (801038c <ethernetif_input+0x5c>)
 801037c:	f00e fd6b 	bl	801ee56 <sys_mutex_unlock>
      } while(p!=NULL);
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d1e4      	bne.n	8010350 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8010386:	e7d9      	b.n	801033c <ethernetif_input+0xc>
 8010388:	20000344 	.word	0x20000344
 801038c:	20010614 	.word	0x20010614

08010390 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d106      	bne.n	80103ac <ethernetif_init+0x1c>
 801039e:	4b0e      	ldr	r3, [pc, #56]	; (80103d8 <ethernetif_init+0x48>)
 80103a0:	f240 2233 	movw	r2, #563	; 0x233
 80103a4:	490d      	ldr	r1, [pc, #52]	; (80103dc <ethernetif_init+0x4c>)
 80103a6:	480e      	ldr	r0, [pc, #56]	; (80103e0 <ethernetif_init+0x50>)
 80103a8:	f00e fdec 	bl	801ef84 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2273      	movs	r2, #115	; 0x73
 80103b0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2274      	movs	r2, #116	; 0x74
 80103b8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	4a09      	ldr	r2, [pc, #36]	; (80103e4 <ethernetif_init+0x54>)
 80103c0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	4a08      	ldr	r2, [pc, #32]	; (80103e8 <ethernetif_init+0x58>)
 80103c6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f7ff fd8f 	bl	800feec <low_level_init>

  return ERR_OK;
 80103ce:	2300      	movs	r3, #0
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3708      	adds	r7, #8
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}
 80103d8:	0801fe8c 	.word	0x0801fe8c
 80103dc:	0801fea8 	.word	0x0801fea8
 80103e0:	0801feb8 	.word	0x0801feb8
 80103e4:	0801cff1 	.word	0x0801cff1
 80103e8:	0801008d 	.word	0x0801008d

080103ec <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80103f0:	f7f9 fd8e 	bl	8009f10 <HAL_GetTick>
 80103f4:	4603      	mov	r3, r0
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	bd80      	pop	{r7, pc}
	...

080103fc <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b084      	sub	sp, #16
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8010404:	2300      	movs	r3, #0
 8010406:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801040c:	f107 0308 	add.w	r3, r7, #8
 8010410:	461a      	mov	r2, r3
 8010412:	2101      	movs	r1, #1
 8010414:	4816      	ldr	r0, [pc, #88]	; (8010470 <ethernetif_set_link+0x74>)
 8010416:	f7fa fffa 	bl	800b40e <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	f003 0304 	and.w	r3, r3, #4
 8010420:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801042a:	f003 0304 	and.w	r3, r3, #4
 801042e:	2b00      	cmp	r3, #0
 8010430:	d108      	bne.n	8010444 <ethernetif_set_link+0x48>
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d005      	beq.n	8010444 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	4618      	mov	r0, r3
 801043e:	f004 ff4d 	bl	80152dc <netif_set_link_up>
 8010442:	e011      	b.n	8010468 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801044c:	089b      	lsrs	r3, r3, #2
 801044e:	f003 0301 	and.w	r3, r3, #1
 8010452:	b2db      	uxtb	r3, r3
 8010454:	2b00      	cmp	r3, #0
 8010456:	d007      	beq.n	8010468 <ethernetif_set_link+0x6c>
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d104      	bne.n	8010468 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	4618      	mov	r0, r3
 8010464:	f004 ff6e 	bl	8015344 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8010468:	20c8      	movs	r0, #200	; 0xc8
 801046a:	f000 f916 	bl	801069a <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801046e:	e7cd      	b.n	801040c <ethernetif_set_link+0x10>
 8010470:	2000edfc 	.word	0x2000edfc

08010474 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b084      	sub	sp, #16
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 801047c:	2300      	movs	r3, #0
 801047e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8010480:	2300      	movs	r3, #0
 8010482:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801048a:	089b      	lsrs	r3, r3, #2
 801048c:	f003 0301 	and.w	r3, r3, #1
 8010490:	b2db      	uxtb	r3, r3
 8010492:	2b00      	cmp	r3, #0
 8010494:	d05d      	beq.n	8010552 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8010496:	4b34      	ldr	r3, [pc, #208]	; (8010568 <ethernetif_update_config+0xf4>)
 8010498:	685b      	ldr	r3, [r3, #4]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d03f      	beq.n	801051e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 801049e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80104a2:	2100      	movs	r1, #0
 80104a4:	4830      	ldr	r0, [pc, #192]	; (8010568 <ethernetif_update_config+0xf4>)
 80104a6:	f7fb f81a 	bl	800b4de <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80104aa:	f7f9 fd31 	bl	8009f10 <HAL_GetTick>
 80104ae:	4603      	mov	r3, r0
 80104b0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80104b2:	f107 0308 	add.w	r3, r7, #8
 80104b6:	461a      	mov	r2, r3
 80104b8:	2101      	movs	r1, #1
 80104ba:	482b      	ldr	r0, [pc, #172]	; (8010568 <ethernetif_update_config+0xf4>)
 80104bc:	f7fa ffa7 	bl	800b40e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80104c0:	f7f9 fd26 	bl	8009f10 <HAL_GetTick>
 80104c4:	4602      	mov	r2, r0
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	1ad3      	subs	r3, r2, r3
 80104ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80104ce:	d828      	bhi.n	8010522 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	f003 0320 	and.w	r3, r3, #32
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d0eb      	beq.n	80104b2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80104da:	f107 0308 	add.w	r3, r7, #8
 80104de:	461a      	mov	r2, r3
 80104e0:	211f      	movs	r1, #31
 80104e2:	4821      	ldr	r0, [pc, #132]	; (8010568 <ethernetif_update_config+0xf4>)
 80104e4:	f7fa ff93 	bl	800b40e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	f003 0310 	and.w	r3, r3, #16
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d004      	beq.n	80104fc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80104f2:	4b1d      	ldr	r3, [pc, #116]	; (8010568 <ethernetif_update_config+0xf4>)
 80104f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80104f8:	60da      	str	r2, [r3, #12]
 80104fa:	e002      	b.n	8010502 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80104fc:	4b1a      	ldr	r3, [pc, #104]	; (8010568 <ethernetif_update_config+0xf4>)
 80104fe:	2200      	movs	r2, #0
 8010500:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	f003 0304 	and.w	r3, r3, #4
 8010508:	2b00      	cmp	r3, #0
 801050a:	d003      	beq.n	8010514 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 801050c:	4b16      	ldr	r3, [pc, #88]	; (8010568 <ethernetif_update_config+0xf4>)
 801050e:	2200      	movs	r2, #0
 8010510:	609a      	str	r2, [r3, #8]
 8010512:	e016      	b.n	8010542 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8010514:	4b14      	ldr	r3, [pc, #80]	; (8010568 <ethernetif_update_config+0xf4>)
 8010516:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801051a:	609a      	str	r2, [r3, #8]
 801051c:	e011      	b.n	8010542 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 801051e:	bf00      	nop
 8010520:	e000      	b.n	8010524 <ethernetif_update_config+0xb0>
          goto error;
 8010522:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8010524:	4b10      	ldr	r3, [pc, #64]	; (8010568 <ethernetif_update_config+0xf4>)
 8010526:	68db      	ldr	r3, [r3, #12]
 8010528:	08db      	lsrs	r3, r3, #3
 801052a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 801052c:	4b0e      	ldr	r3, [pc, #56]	; (8010568 <ethernetif_update_config+0xf4>)
 801052e:	689b      	ldr	r3, [r3, #8]
 8010530:	085b      	lsrs	r3, r3, #1
 8010532:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8010534:	4313      	orrs	r3, r2
 8010536:	b29b      	uxth	r3, r3
 8010538:	461a      	mov	r2, r3
 801053a:	2100      	movs	r1, #0
 801053c:	480a      	ldr	r0, [pc, #40]	; (8010568 <ethernetif_update_config+0xf4>)
 801053e:	f7fa ffce 	bl	800b4de <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8010542:	2100      	movs	r1, #0
 8010544:	4808      	ldr	r0, [pc, #32]	; (8010568 <ethernetif_update_config+0xf4>)
 8010546:	f7fb f88f 	bl	800b668 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 801054a:	4807      	ldr	r0, [pc, #28]	; (8010568 <ethernetif_update_config+0xf4>)
 801054c:	f7fb f82d 	bl	800b5aa <HAL_ETH_Start>
 8010550:	e002      	b.n	8010558 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8010552:	4805      	ldr	r0, [pc, #20]	; (8010568 <ethernetif_update_config+0xf4>)
 8010554:	f7fb f858 	bl	800b608 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f000 f807 	bl	801056c <ethernetif_notify_conn_changed>
}
 801055e:	bf00      	nop
 8010560:	3710      	adds	r7, #16
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
 8010566:	bf00      	nop
 8010568:	2000edfc 	.word	0x2000edfc

0801056c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 801056c:	b480      	push	{r7}
 801056e:	b083      	sub	sp, #12
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file 
            when the callback is needed,
  */

}
 8010574:	bf00      	nop
 8010576:	370c      	adds	r7, #12
 8010578:	46bd      	mov	sp, r7
 801057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057e:	4770      	bx	lr

08010580 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010580:	b480      	push	{r7}
 8010582:	b085      	sub	sp, #20
 8010584:	af00      	add	r7, sp, #0
 8010586:	4603      	mov	r3, r0
 8010588:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801058a:	2300      	movs	r3, #0
 801058c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801058e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010592:	2b84      	cmp	r3, #132	; 0x84
 8010594:	d005      	beq.n	80105a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010596:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	4413      	add	r3, r2
 801059e:	3303      	adds	r3, #3
 80105a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80105a2:	68fb      	ldr	r3, [r7, #12]
}
 80105a4:	4618      	mov	r0, r3
 80105a6:	3714      	adds	r7, #20
 80105a8:	46bd      	mov	sp, r7
 80105aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ae:	4770      	bx	lr

080105b0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80105b0:	b480      	push	{r7}
 80105b2:	b083      	sub	sp, #12
 80105b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105b6:	f3ef 8305 	mrs	r3, IPSR
 80105ba:	607b      	str	r3, [r7, #4]
  return(result);
 80105bc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80105be:	2b00      	cmp	r3, #0
 80105c0:	bf14      	ite	ne
 80105c2:	2301      	movne	r3, #1
 80105c4:	2300      	moveq	r3, #0
 80105c6:	b2db      	uxtb	r3, r3
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	370c      	adds	r7, #12
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr

080105d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80105d8:	f001 fc88 	bl	8011eec <vTaskStartScheduler>
  
  return osOK;
 80105dc:	2300      	movs	r3, #0
}
 80105de:	4618      	mov	r0, r3
 80105e0:	bd80      	pop	{r7, pc}

080105e2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80105e2:	b580      	push	{r7, lr}
 80105e4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80105e6:	f7ff ffe3 	bl	80105b0 <inHandlerMode>
 80105ea:	4603      	mov	r3, r0
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d003      	beq.n	80105f8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80105f0:	f001 fd9a 	bl	8012128 <xTaskGetTickCountFromISR>
 80105f4:	4603      	mov	r3, r0
 80105f6:	e002      	b.n	80105fe <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80105f8:	f001 fd86 	bl	8012108 <xTaskGetTickCount>
 80105fc:	4603      	mov	r3, r0
  }
}
 80105fe:	4618      	mov	r0, r3
 8010600:	bd80      	pop	{r7, pc}

08010602 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010602:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010604:	b089      	sub	sp, #36	; 0x24
 8010606:	af04      	add	r7, sp, #16
 8010608:	6078      	str	r0, [r7, #4]
 801060a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	695b      	ldr	r3, [r3, #20]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d020      	beq.n	8010656 <osThreadCreate+0x54>
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	699b      	ldr	r3, [r3, #24]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d01c      	beq.n	8010656 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	685c      	ldr	r4, [r3, #4]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681d      	ldr	r5, [r3, #0]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	691e      	ldr	r6, [r3, #16]
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801062e:	4618      	mov	r0, r3
 8010630:	f7ff ffa6 	bl	8010580 <makeFreeRtosPriority>
 8010634:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	695b      	ldr	r3, [r3, #20]
 801063a:	687a      	ldr	r2, [r7, #4]
 801063c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801063e:	9202      	str	r2, [sp, #8]
 8010640:	9301      	str	r3, [sp, #4]
 8010642:	9100      	str	r1, [sp, #0]
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	4632      	mov	r2, r6
 8010648:	4629      	mov	r1, r5
 801064a:	4620      	mov	r0, r4
 801064c:	f001 fa81 	bl	8011b52 <xTaskCreateStatic>
 8010650:	4603      	mov	r3, r0
 8010652:	60fb      	str	r3, [r7, #12]
 8010654:	e01c      	b.n	8010690 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	685c      	ldr	r4, [r3, #4]
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010662:	b29e      	uxth	r6, r3
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801066a:	4618      	mov	r0, r3
 801066c:	f7ff ff88 	bl	8010580 <makeFreeRtosPriority>
 8010670:	4602      	mov	r2, r0
 8010672:	f107 030c 	add.w	r3, r7, #12
 8010676:	9301      	str	r3, [sp, #4]
 8010678:	9200      	str	r2, [sp, #0]
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	4632      	mov	r2, r6
 801067e:	4629      	mov	r1, r5
 8010680:	4620      	mov	r0, r4
 8010682:	f001 fac6 	bl	8011c12 <xTaskCreate>
 8010686:	4603      	mov	r3, r0
 8010688:	2b01      	cmp	r3, #1
 801068a:	d001      	beq.n	8010690 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801068c:	2300      	movs	r3, #0
 801068e:	e000      	b.n	8010692 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010690:	68fb      	ldr	r3, [r7, #12]
}
 8010692:	4618      	mov	r0, r3
 8010694:	3714      	adds	r7, #20
 8010696:	46bd      	mov	sp, r7
 8010698:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801069a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801069a:	b580      	push	{r7, lr}
 801069c:	b084      	sub	sp, #16
 801069e:	af00      	add	r7, sp, #0
 80106a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d001      	beq.n	80106b0 <osDelay+0x16>
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	e000      	b.n	80106b2 <osDelay+0x18>
 80106b0:	2301      	movs	r3, #1
 80106b2:	4618      	mov	r0, r3
 80106b4:	f001 fbe4 	bl	8011e80 <vTaskDelay>
  
  return osOK;
 80106b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	3710      	adds	r7, #16
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}

080106c2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80106c2:	b580      	push	{r7, lr}
 80106c4:	b082      	sub	sp, #8
 80106c6:	af00      	add	r7, sp, #0
 80106c8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	685b      	ldr	r3, [r3, #4]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d007      	beq.n	80106e2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	685b      	ldr	r3, [r3, #4]
 80106d6:	4619      	mov	r1, r3
 80106d8:	2001      	movs	r0, #1
 80106da:	f000 fc52 	bl	8010f82 <xQueueCreateMutexStatic>
 80106de:	4603      	mov	r3, r0
 80106e0:	e003      	b.n	80106ea <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80106e2:	2001      	movs	r0, #1
 80106e4:	f000 fc35 	bl	8010f52 <xQueueCreateMutex>
 80106e8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3708      	adds	r7, #8
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
	...

080106f4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b084      	sub	sp, #16
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
 80106fc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80106fe:	2300      	movs	r3, #0
 8010700:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d101      	bne.n	801070c <osMutexWait+0x18>
    return osErrorParameter;
 8010708:	2380      	movs	r3, #128	; 0x80
 801070a:	e03a      	b.n	8010782 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 801070c:	2300      	movs	r3, #0
 801070e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010716:	d103      	bne.n	8010720 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8010718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801071c:	60fb      	str	r3, [r7, #12]
 801071e:	e009      	b.n	8010734 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d006      	beq.n	8010734 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d101      	bne.n	8010734 <osMutexWait+0x40>
      ticks = 1;
 8010730:	2301      	movs	r3, #1
 8010732:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8010734:	f7ff ff3c 	bl	80105b0 <inHandlerMode>
 8010738:	4603      	mov	r3, r0
 801073a:	2b00      	cmp	r3, #0
 801073c:	d017      	beq.n	801076e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801073e:	f107 0308 	add.w	r3, r7, #8
 8010742:	461a      	mov	r2, r3
 8010744:	2100      	movs	r1, #0
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	f001 f858 	bl	80117fc <xQueueReceiveFromISR>
 801074c:	4603      	mov	r3, r0
 801074e:	2b01      	cmp	r3, #1
 8010750:	d001      	beq.n	8010756 <osMutexWait+0x62>
      return osErrorOS;
 8010752:	23ff      	movs	r3, #255	; 0xff
 8010754:	e015      	b.n	8010782 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d011      	beq.n	8010780 <osMutexWait+0x8c>
 801075c:	4b0b      	ldr	r3, [pc, #44]	; (801078c <osMutexWait+0x98>)
 801075e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010762:	601a      	str	r2, [r3, #0]
 8010764:	f3bf 8f4f 	dsb	sy
 8010768:	f3bf 8f6f 	isb	sy
 801076c:	e008      	b.n	8010780 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 801076e:	68f9      	ldr	r1, [r7, #12]
 8010770:	6878      	ldr	r0, [r7, #4]
 8010772:	f000 ff33 	bl	80115dc <xQueueSemaphoreTake>
 8010776:	4603      	mov	r3, r0
 8010778:	2b01      	cmp	r3, #1
 801077a:	d001      	beq.n	8010780 <osMutexWait+0x8c>
    return osErrorOS;
 801077c:	23ff      	movs	r3, #255	; 0xff
 801077e:	e000      	b.n	8010782 <osMutexWait+0x8e>
  }
  
  return osOK;
 8010780:	2300      	movs	r3, #0
}
 8010782:	4618      	mov	r0, r3
 8010784:	3710      	adds	r7, #16
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}
 801078a:	bf00      	nop
 801078c:	e000ed04 	.word	0xe000ed04

08010790 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b084      	sub	sp, #16
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010798:	2300      	movs	r3, #0
 801079a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801079c:	2300      	movs	r3, #0
 801079e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80107a0:	f7ff ff06 	bl	80105b0 <inHandlerMode>
 80107a4:	4603      	mov	r3, r0
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d016      	beq.n	80107d8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80107aa:	f107 0308 	add.w	r3, r7, #8
 80107ae:	4619      	mov	r1, r3
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f000 fd9f 	bl	80112f4 <xQueueGiveFromISR>
 80107b6:	4603      	mov	r3, r0
 80107b8:	2b01      	cmp	r3, #1
 80107ba:	d001      	beq.n	80107c0 <osMutexRelease+0x30>
      return osErrorOS;
 80107bc:	23ff      	movs	r3, #255	; 0xff
 80107be:	e017      	b.n	80107f0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d013      	beq.n	80107ee <osMutexRelease+0x5e>
 80107c6:	4b0c      	ldr	r3, [pc, #48]	; (80107f8 <osMutexRelease+0x68>)
 80107c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107cc:	601a      	str	r2, [r3, #0]
 80107ce:	f3bf 8f4f 	dsb	sy
 80107d2:	f3bf 8f6f 	isb	sy
 80107d6:	e00a      	b.n	80107ee <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80107d8:	2300      	movs	r3, #0
 80107da:	2200      	movs	r2, #0
 80107dc:	2100      	movs	r1, #0
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f000 fbea 	bl	8010fb8 <xQueueGenericSend>
 80107e4:	4603      	mov	r3, r0
 80107e6:	2b01      	cmp	r3, #1
 80107e8:	d001      	beq.n	80107ee <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80107ea:	23ff      	movs	r3, #255	; 0xff
 80107ec:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80107ee:	68fb      	ldr	r3, [r7, #12]
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3710      	adds	r7, #16
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}
 80107f8:	e000ed04 	.word	0xe000ed04

080107fc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b086      	sub	sp, #24
 8010800:	af02      	add	r7, sp, #8
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	685b      	ldr	r3, [r3, #4]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d010      	beq.n	8010830 <osSemaphoreCreate+0x34>
    if (count == 1) {
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	2b01      	cmp	r3, #1
 8010812:	d10b      	bne.n	801082c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	685a      	ldr	r2, [r3, #4]
 8010818:	2303      	movs	r3, #3
 801081a:	9300      	str	r3, [sp, #0]
 801081c:	4613      	mov	r3, r2
 801081e:	2200      	movs	r2, #0
 8010820:	2100      	movs	r1, #0
 8010822:	2001      	movs	r0, #1
 8010824:	f000 fa9e 	bl	8010d64 <xQueueGenericCreateStatic>
 8010828:	4603      	mov	r3, r0
 801082a:	e016      	b.n	801085a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 801082c:	2300      	movs	r3, #0
 801082e:	e014      	b.n	801085a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	2b01      	cmp	r3, #1
 8010834:	d110      	bne.n	8010858 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8010836:	2203      	movs	r2, #3
 8010838:	2100      	movs	r1, #0
 801083a:	2001      	movs	r0, #1
 801083c:	f000 fb0f 	bl	8010e5e <xQueueGenericCreate>
 8010840:	60f8      	str	r0, [r7, #12]
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d005      	beq.n	8010854 <osSemaphoreCreate+0x58>
 8010848:	2300      	movs	r3, #0
 801084a:	2200      	movs	r2, #0
 801084c:	2100      	movs	r1, #0
 801084e:	68f8      	ldr	r0, [r7, #12]
 8010850:	f000 fbb2 	bl	8010fb8 <xQueueGenericSend>
      return sema;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	e000      	b.n	801085a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8010858:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 801085a:	4618      	mov	r0, r3
 801085c:	3710      	adds	r7, #16
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}
	...

08010864 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801086e:	2300      	movs	r3, #0
 8010870:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d101      	bne.n	801087c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8010878:	2380      	movs	r3, #128	; 0x80
 801087a:	e03a      	b.n	80108f2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 801087c:	2300      	movs	r3, #0
 801087e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010886:	d103      	bne.n	8010890 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8010888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801088c:	60fb      	str	r3, [r7, #12]
 801088e:	e009      	b.n	80108a4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d006      	beq.n	80108a4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d101      	bne.n	80108a4 <osSemaphoreWait+0x40>
      ticks = 1;
 80108a0:	2301      	movs	r3, #1
 80108a2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80108a4:	f7ff fe84 	bl	80105b0 <inHandlerMode>
 80108a8:	4603      	mov	r3, r0
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d017      	beq.n	80108de <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80108ae:	f107 0308 	add.w	r3, r7, #8
 80108b2:	461a      	mov	r2, r3
 80108b4:	2100      	movs	r1, #0
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f000 ffa0 	bl	80117fc <xQueueReceiveFromISR>
 80108bc:	4603      	mov	r3, r0
 80108be:	2b01      	cmp	r3, #1
 80108c0:	d001      	beq.n	80108c6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80108c2:	23ff      	movs	r3, #255	; 0xff
 80108c4:	e015      	b.n	80108f2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d011      	beq.n	80108f0 <osSemaphoreWait+0x8c>
 80108cc:	4b0b      	ldr	r3, [pc, #44]	; (80108fc <osSemaphoreWait+0x98>)
 80108ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108d2:	601a      	str	r2, [r3, #0]
 80108d4:	f3bf 8f4f 	dsb	sy
 80108d8:	f3bf 8f6f 	isb	sy
 80108dc:	e008      	b.n	80108f0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80108de:	68f9      	ldr	r1, [r7, #12]
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f000 fe7b 	bl	80115dc <xQueueSemaphoreTake>
 80108e6:	4603      	mov	r3, r0
 80108e8:	2b01      	cmp	r3, #1
 80108ea:	d001      	beq.n	80108f0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80108ec:	23ff      	movs	r3, #255	; 0xff
 80108ee:	e000      	b.n	80108f2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80108f0:	2300      	movs	r3, #0
}
 80108f2:	4618      	mov	r0, r3
 80108f4:	3710      	adds	r7, #16
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}
 80108fa:	bf00      	nop
 80108fc:	e000ed04 	.word	0xe000ed04

08010900 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b084      	sub	sp, #16
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010908:	2300      	movs	r3, #0
 801090a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801090c:	2300      	movs	r3, #0
 801090e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8010910:	f7ff fe4e 	bl	80105b0 <inHandlerMode>
 8010914:	4603      	mov	r3, r0
 8010916:	2b00      	cmp	r3, #0
 8010918:	d016      	beq.n	8010948 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801091a:	f107 0308 	add.w	r3, r7, #8
 801091e:	4619      	mov	r1, r3
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f000 fce7 	bl	80112f4 <xQueueGiveFromISR>
 8010926:	4603      	mov	r3, r0
 8010928:	2b01      	cmp	r3, #1
 801092a:	d001      	beq.n	8010930 <osSemaphoreRelease+0x30>
      return osErrorOS;
 801092c:	23ff      	movs	r3, #255	; 0xff
 801092e:	e017      	b.n	8010960 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d013      	beq.n	801095e <osSemaphoreRelease+0x5e>
 8010936:	4b0c      	ldr	r3, [pc, #48]	; (8010968 <osSemaphoreRelease+0x68>)
 8010938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801093c:	601a      	str	r2, [r3, #0]
 801093e:	f3bf 8f4f 	dsb	sy
 8010942:	f3bf 8f6f 	isb	sy
 8010946:	e00a      	b.n	801095e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8010948:	2300      	movs	r3, #0
 801094a:	2200      	movs	r2, #0
 801094c:	2100      	movs	r1, #0
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	f000 fb32 	bl	8010fb8 <xQueueGenericSend>
 8010954:	4603      	mov	r3, r0
 8010956:	2b01      	cmp	r3, #1
 8010958:	d001      	beq.n	801095e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801095a:	23ff      	movs	r3, #255	; 0xff
 801095c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801095e:	68fb      	ldr	r3, [r7, #12]
}
 8010960:	4618      	mov	r0, r3
 8010962:	3710      	adds	r7, #16
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}
 8010968:	e000ed04 	.word	0xe000ed04

0801096c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801096c:	b590      	push	{r4, r7, lr}
 801096e:	b085      	sub	sp, #20
 8010970:	af02      	add	r7, sp, #8
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	689b      	ldr	r3, [r3, #8]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d012      	beq.n	80109a4 <osMessageCreate+0x38>
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	68db      	ldr	r3, [r3, #12]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d00e      	beq.n	80109a4 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6818      	ldr	r0, [r3, #0]
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	6859      	ldr	r1, [r3, #4]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	689a      	ldr	r2, [r3, #8]
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	68dc      	ldr	r4, [r3, #12]
 8010996:	2300      	movs	r3, #0
 8010998:	9300      	str	r3, [sp, #0]
 801099a:	4623      	mov	r3, r4
 801099c:	f000 f9e2 	bl	8010d64 <xQueueGenericCreateStatic>
 80109a0:	4603      	mov	r3, r0
 80109a2:	e008      	b.n	80109b6 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	6818      	ldr	r0, [r3, #0]
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	2200      	movs	r2, #0
 80109ae:	4619      	mov	r1, r3
 80109b0:	f000 fa55 	bl	8010e5e <xQueueGenericCreate>
 80109b4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	370c      	adds	r7, #12
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd90      	pop	{r4, r7, pc}
	...

080109c0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b086      	sub	sp, #24
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	60f8      	str	r0, [r7, #12]
 80109c8:	60b9      	str	r1, [r7, #8]
 80109ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80109cc:	2300      	movs	r3, #0
 80109ce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d101      	bne.n	80109de <osMessagePut+0x1e>
    ticks = 1;
 80109da:	2301      	movs	r3, #1
 80109dc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80109de:	f7ff fde7 	bl	80105b0 <inHandlerMode>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d018      	beq.n	8010a1a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80109e8:	f107 0210 	add.w	r2, r7, #16
 80109ec:	f107 0108 	add.w	r1, r7, #8
 80109f0:	2300      	movs	r3, #0
 80109f2:	68f8      	ldr	r0, [r7, #12]
 80109f4:	f000 fbe2 	bl	80111bc <xQueueGenericSendFromISR>
 80109f8:	4603      	mov	r3, r0
 80109fa:	2b01      	cmp	r3, #1
 80109fc:	d001      	beq.n	8010a02 <osMessagePut+0x42>
      return osErrorOS;
 80109fe:	23ff      	movs	r3, #255	; 0xff
 8010a00:	e018      	b.n	8010a34 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010a02:	693b      	ldr	r3, [r7, #16]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d014      	beq.n	8010a32 <osMessagePut+0x72>
 8010a08:	4b0c      	ldr	r3, [pc, #48]	; (8010a3c <osMessagePut+0x7c>)
 8010a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a0e:	601a      	str	r2, [r3, #0]
 8010a10:	f3bf 8f4f 	dsb	sy
 8010a14:	f3bf 8f6f 	isb	sy
 8010a18:	e00b      	b.n	8010a32 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8010a1a:	f107 0108 	add.w	r1, r7, #8
 8010a1e:	2300      	movs	r3, #0
 8010a20:	697a      	ldr	r2, [r7, #20]
 8010a22:	68f8      	ldr	r0, [r7, #12]
 8010a24:	f000 fac8 	bl	8010fb8 <xQueueGenericSend>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	2b01      	cmp	r3, #1
 8010a2c:	d001      	beq.n	8010a32 <osMessagePut+0x72>
      return osErrorOS;
 8010a2e:	23ff      	movs	r3, #255	; 0xff
 8010a30:	e000      	b.n	8010a34 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8010a32:	2300      	movs	r3, #0
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	3718      	adds	r7, #24
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}
 8010a3c:	e000ed04 	.word	0xe000ed04

08010a40 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8010a40:	b590      	push	{r4, r7, lr}
 8010a42:	b08b      	sub	sp, #44	; 0x2c
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	60b9      	str	r1, [r7, #8]
 8010a4a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8010a50:	2300      	movs	r3, #0
 8010a52:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d10a      	bne.n	8010a70 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8010a5a:	2380      	movs	r3, #128	; 0x80
 8010a5c:	617b      	str	r3, [r7, #20]
    return event;
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	461c      	mov	r4, r3
 8010a62:	f107 0314 	add.w	r3, r7, #20
 8010a66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010a6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010a6e:	e054      	b.n	8010b1a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8010a70:	2300      	movs	r3, #0
 8010a72:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010a74:	2300      	movs	r3, #0
 8010a76:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a7e:	d103      	bne.n	8010a88 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8010a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a84:	627b      	str	r3, [r7, #36]	; 0x24
 8010a86:	e009      	b.n	8010a9c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d006      	beq.n	8010a9c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8010a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d101      	bne.n	8010a9c <osMessageGet+0x5c>
      ticks = 1;
 8010a98:	2301      	movs	r3, #1
 8010a9a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8010a9c:	f7ff fd88 	bl	80105b0 <inHandlerMode>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d01c      	beq.n	8010ae0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8010aa6:	f107 0220 	add.w	r2, r7, #32
 8010aaa:	f107 0314 	add.w	r3, r7, #20
 8010aae:	3304      	adds	r3, #4
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	68b8      	ldr	r0, [r7, #8]
 8010ab4:	f000 fea2 	bl	80117fc <xQueueReceiveFromISR>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	2b01      	cmp	r3, #1
 8010abc:	d102      	bne.n	8010ac4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8010abe:	2310      	movs	r3, #16
 8010ac0:	617b      	str	r3, [r7, #20]
 8010ac2:	e001      	b.n	8010ac8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010ac8:	6a3b      	ldr	r3, [r7, #32]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d01d      	beq.n	8010b0a <osMessageGet+0xca>
 8010ace:	4b15      	ldr	r3, [pc, #84]	; (8010b24 <osMessageGet+0xe4>)
 8010ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ad4:	601a      	str	r2, [r3, #0]
 8010ad6:	f3bf 8f4f 	dsb	sy
 8010ada:	f3bf 8f6f 	isb	sy
 8010ade:	e014      	b.n	8010b0a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8010ae0:	f107 0314 	add.w	r3, r7, #20
 8010ae4:	3304      	adds	r3, #4
 8010ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ae8:	4619      	mov	r1, r3
 8010aea:	68b8      	ldr	r0, [r7, #8]
 8010aec:	f000 fc94 	bl	8011418 <xQueueReceive>
 8010af0:	4603      	mov	r3, r0
 8010af2:	2b01      	cmp	r3, #1
 8010af4:	d102      	bne.n	8010afc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8010af6:	2310      	movs	r3, #16
 8010af8:	617b      	str	r3, [r7, #20]
 8010afa:	e006      	b.n	8010b0a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d101      	bne.n	8010b06 <osMessageGet+0xc6>
 8010b02:	2300      	movs	r3, #0
 8010b04:	e000      	b.n	8010b08 <osMessageGet+0xc8>
 8010b06:	2340      	movs	r3, #64	; 0x40
 8010b08:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	461c      	mov	r4, r3
 8010b0e:	f107 0314 	add.w	r3, r7, #20
 8010b12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010b16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8010b1a:	68f8      	ldr	r0, [r7, #12]
 8010b1c:	372c      	adds	r7, #44	; 0x2c
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd90      	pop	{r4, r7, pc}
 8010b22:	bf00      	nop
 8010b24:	e000ed04 	.word	0xe000ed04

08010b28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010b28:	b480      	push	{r7}
 8010b2a:	b083      	sub	sp, #12
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f103 0208 	add.w	r2, r3, #8
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010b40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f103 0208 	add.w	r2, r3, #8
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f103 0208 	add.w	r2, r3, #8
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010b5c:	bf00      	nop
 8010b5e:	370c      	adds	r7, #12
 8010b60:	46bd      	mov	sp, r7
 8010b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b66:	4770      	bx	lr

08010b68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b083      	sub	sp, #12
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2200      	movs	r2, #0
 8010b74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010b76:	bf00      	nop
 8010b78:	370c      	adds	r7, #12
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr

08010b82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010b82:	b480      	push	{r7}
 8010b84:	b085      	sub	sp, #20
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	6078      	str	r0, [r7, #4]
 8010b8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	685b      	ldr	r3, [r3, #4]
 8010b90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	68fa      	ldr	r2, [r7, #12]
 8010b96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	689a      	ldr	r2, [r3, #8]
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	689b      	ldr	r3, [r3, #8]
 8010ba4:	683a      	ldr	r2, [r7, #0]
 8010ba6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	683a      	ldr	r2, [r7, #0]
 8010bac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	687a      	ldr	r2, [r7, #4]
 8010bb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	1c5a      	adds	r2, r3, #1
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	601a      	str	r2, [r3, #0]
}
 8010bbe:	bf00      	nop
 8010bc0:	3714      	adds	r7, #20
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr

08010bca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010bca:	b480      	push	{r7}
 8010bcc:	b085      	sub	sp, #20
 8010bce:	af00      	add	r7, sp, #0
 8010bd0:	6078      	str	r0, [r7, #4]
 8010bd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010be0:	d103      	bne.n	8010bea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	691b      	ldr	r3, [r3, #16]
 8010be6:	60fb      	str	r3, [r7, #12]
 8010be8:	e00c      	b.n	8010c04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	3308      	adds	r3, #8
 8010bee:	60fb      	str	r3, [r7, #12]
 8010bf0:	e002      	b.n	8010bf8 <vListInsert+0x2e>
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	685b      	ldr	r3, [r3, #4]
 8010bf6:	60fb      	str	r3, [r7, #12]
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	685b      	ldr	r3, [r3, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	68ba      	ldr	r2, [r7, #8]
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d2f6      	bcs.n	8010bf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	685a      	ldr	r2, [r3, #4]
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	685b      	ldr	r3, [r3, #4]
 8010c10:	683a      	ldr	r2, [r7, #0]
 8010c12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	68fa      	ldr	r2, [r7, #12]
 8010c18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	683a      	ldr	r2, [r7, #0]
 8010c1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	687a      	ldr	r2, [r7, #4]
 8010c24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	1c5a      	adds	r2, r3, #1
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	601a      	str	r2, [r3, #0]
}
 8010c30:	bf00      	nop
 8010c32:	3714      	adds	r7, #20
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr

08010c3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	b085      	sub	sp, #20
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	691b      	ldr	r3, [r3, #16]
 8010c48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	685b      	ldr	r3, [r3, #4]
 8010c4e:	687a      	ldr	r2, [r7, #4]
 8010c50:	6892      	ldr	r2, [r2, #8]
 8010c52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	689b      	ldr	r3, [r3, #8]
 8010c58:	687a      	ldr	r2, [r7, #4]
 8010c5a:	6852      	ldr	r2, [r2, #4]
 8010c5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	685b      	ldr	r3, [r3, #4]
 8010c62:	687a      	ldr	r2, [r7, #4]
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d103      	bne.n	8010c70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	689a      	ldr	r2, [r3, #8]
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2200      	movs	r2, #0
 8010c74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	1e5a      	subs	r2, r3, #1
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	681b      	ldr	r3, [r3, #0]
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3714      	adds	r7, #20
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8e:	4770      	bx	lr

08010c90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b084      	sub	sp, #16
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
 8010c98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d10b      	bne.n	8010cbc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca8:	b672      	cpsid	i
 8010caa:	f383 8811 	msr	BASEPRI, r3
 8010cae:	f3bf 8f6f 	isb	sy
 8010cb2:	f3bf 8f4f 	dsb	sy
 8010cb6:	b662      	cpsie	i
 8010cb8:	60bb      	str	r3, [r7, #8]
 8010cba:	e7fe      	b.n	8010cba <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8010cbc:	f002 f884 	bl	8012dc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	681a      	ldr	r2, [r3, #0]
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cc8:	68f9      	ldr	r1, [r7, #12]
 8010cca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010ccc:	fb01 f303 	mul.w	r3, r1, r3
 8010cd0:	441a      	add	r2, r3
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	2200      	movs	r2, #0
 8010cda:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	681a      	ldr	r2, [r3, #0]
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	681a      	ldr	r2, [r3, #0]
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cec:	3b01      	subs	r3, #1
 8010cee:	68f9      	ldr	r1, [r7, #12]
 8010cf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010cf2:	fb01 f303 	mul.w	r3, r1, r3
 8010cf6:	441a      	add	r2, r3
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	22ff      	movs	r2, #255	; 0xff
 8010d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	22ff      	movs	r2, #255	; 0xff
 8010d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d114      	bne.n	8010d3c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	691b      	ldr	r3, [r3, #16]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d01a      	beq.n	8010d50 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	3310      	adds	r3, #16
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f001 fb50 	bl	80123c4 <xTaskRemoveFromEventList>
 8010d24:	4603      	mov	r3, r0
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d012      	beq.n	8010d50 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010d2a:	4b0d      	ldr	r3, [pc, #52]	; (8010d60 <xQueueGenericReset+0xd0>)
 8010d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d30:	601a      	str	r2, [r3, #0]
 8010d32:	f3bf 8f4f 	dsb	sy
 8010d36:	f3bf 8f6f 	isb	sy
 8010d3a:	e009      	b.n	8010d50 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	3310      	adds	r3, #16
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7ff fef1 	bl	8010b28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	3324      	adds	r3, #36	; 0x24
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7ff feec 	bl	8010b28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010d50:	f002 f86c 	bl	8012e2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010d54:	2301      	movs	r3, #1
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	3710      	adds	r7, #16
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}
 8010d5e:	bf00      	nop
 8010d60:	e000ed04 	.word	0xe000ed04

08010d64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b08e      	sub	sp, #56	; 0x38
 8010d68:	af02      	add	r7, sp, #8
 8010d6a:	60f8      	str	r0, [r7, #12]
 8010d6c:	60b9      	str	r1, [r7, #8]
 8010d6e:	607a      	str	r2, [r7, #4]
 8010d70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d10b      	bne.n	8010d90 <xQueueGenericCreateStatic+0x2c>
 8010d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d7c:	b672      	cpsid	i
 8010d7e:	f383 8811 	msr	BASEPRI, r3
 8010d82:	f3bf 8f6f 	isb	sy
 8010d86:	f3bf 8f4f 	dsb	sy
 8010d8a:	b662      	cpsie	i
 8010d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d8e:	e7fe      	b.n	8010d8e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d10b      	bne.n	8010dae <xQueueGenericCreateStatic+0x4a>
 8010d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d9a:	b672      	cpsid	i
 8010d9c:	f383 8811 	msr	BASEPRI, r3
 8010da0:	f3bf 8f6f 	isb	sy
 8010da4:	f3bf 8f4f 	dsb	sy
 8010da8:	b662      	cpsie	i
 8010daa:	627b      	str	r3, [r7, #36]	; 0x24
 8010dac:	e7fe      	b.n	8010dac <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d002      	beq.n	8010dba <xQueueGenericCreateStatic+0x56>
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d001      	beq.n	8010dbe <xQueueGenericCreateStatic+0x5a>
 8010dba:	2301      	movs	r3, #1
 8010dbc:	e000      	b.n	8010dc0 <xQueueGenericCreateStatic+0x5c>
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d10b      	bne.n	8010ddc <xQueueGenericCreateStatic+0x78>
 8010dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc8:	b672      	cpsid	i
 8010dca:	f383 8811 	msr	BASEPRI, r3
 8010dce:	f3bf 8f6f 	isb	sy
 8010dd2:	f3bf 8f4f 	dsb	sy
 8010dd6:	b662      	cpsie	i
 8010dd8:	623b      	str	r3, [r7, #32]
 8010dda:	e7fe      	b.n	8010dda <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d102      	bne.n	8010de8 <xQueueGenericCreateStatic+0x84>
 8010de2:	68bb      	ldr	r3, [r7, #8]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d101      	bne.n	8010dec <xQueueGenericCreateStatic+0x88>
 8010de8:	2301      	movs	r3, #1
 8010dea:	e000      	b.n	8010dee <xQueueGenericCreateStatic+0x8a>
 8010dec:	2300      	movs	r3, #0
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d10b      	bne.n	8010e0a <xQueueGenericCreateStatic+0xa6>
 8010df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df6:	b672      	cpsid	i
 8010df8:	f383 8811 	msr	BASEPRI, r3
 8010dfc:	f3bf 8f6f 	isb	sy
 8010e00:	f3bf 8f4f 	dsb	sy
 8010e04:	b662      	cpsie	i
 8010e06:	61fb      	str	r3, [r7, #28]
 8010e08:	e7fe      	b.n	8010e08 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010e0a:	2348      	movs	r3, #72	; 0x48
 8010e0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	2b48      	cmp	r3, #72	; 0x48
 8010e12:	d00b      	beq.n	8010e2c <xQueueGenericCreateStatic+0xc8>
 8010e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e18:	b672      	cpsid	i
 8010e1a:	f383 8811 	msr	BASEPRI, r3
 8010e1e:	f3bf 8f6f 	isb	sy
 8010e22:	f3bf 8f4f 	dsb	sy
 8010e26:	b662      	cpsie	i
 8010e28:	61bb      	str	r3, [r7, #24]
 8010e2a:	e7fe      	b.n	8010e2a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010e2c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d00d      	beq.n	8010e54 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e3a:	2201      	movs	r2, #1
 8010e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010e40:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e46:	9300      	str	r3, [sp, #0]
 8010e48:	4613      	mov	r3, r2
 8010e4a:	687a      	ldr	r2, [r7, #4]
 8010e4c:	68b9      	ldr	r1, [r7, #8]
 8010e4e:	68f8      	ldr	r0, [r7, #12]
 8010e50:	f000 f846 	bl	8010ee0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3730      	adds	r7, #48	; 0x30
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}

08010e5e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010e5e:	b580      	push	{r7, lr}
 8010e60:	b08a      	sub	sp, #40	; 0x28
 8010e62:	af02      	add	r7, sp, #8
 8010e64:	60f8      	str	r0, [r7, #12]
 8010e66:	60b9      	str	r1, [r7, #8]
 8010e68:	4613      	mov	r3, r2
 8010e6a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d10b      	bne.n	8010e8a <xQueueGenericCreate+0x2c>
 8010e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e76:	b672      	cpsid	i
 8010e78:	f383 8811 	msr	BASEPRI, r3
 8010e7c:	f3bf 8f6f 	isb	sy
 8010e80:	f3bf 8f4f 	dsb	sy
 8010e84:	b662      	cpsie	i
 8010e86:	613b      	str	r3, [r7, #16]
 8010e88:	e7fe      	b.n	8010e88 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d102      	bne.n	8010e96 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010e90:	2300      	movs	r3, #0
 8010e92:	61fb      	str	r3, [r7, #28]
 8010e94:	e004      	b.n	8010ea0 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	68ba      	ldr	r2, [r7, #8]
 8010e9a:	fb02 f303 	mul.w	r3, r2, r3
 8010e9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010ea0:	69fb      	ldr	r3, [r7, #28]
 8010ea2:	3348      	adds	r3, #72	; 0x48
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f002 f8b1 	bl	801300c <pvPortMalloc>
 8010eaa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010eac:	69bb      	ldr	r3, [r7, #24]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d011      	beq.n	8010ed6 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010eb2:	69bb      	ldr	r3, [r7, #24]
 8010eb4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	3348      	adds	r3, #72	; 0x48
 8010eba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010ebc:	69bb      	ldr	r3, [r7, #24]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010ec4:	79fa      	ldrb	r2, [r7, #7]
 8010ec6:	69bb      	ldr	r3, [r7, #24]
 8010ec8:	9300      	str	r3, [sp, #0]
 8010eca:	4613      	mov	r3, r2
 8010ecc:	697a      	ldr	r2, [r7, #20]
 8010ece:	68b9      	ldr	r1, [r7, #8]
 8010ed0:	68f8      	ldr	r0, [r7, #12]
 8010ed2:	f000 f805 	bl	8010ee0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010ed6:	69bb      	ldr	r3, [r7, #24]
	}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3720      	adds	r7, #32
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}

08010ee0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b084      	sub	sp, #16
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	60f8      	str	r0, [r7, #12]
 8010ee8:	60b9      	str	r1, [r7, #8]
 8010eea:	607a      	str	r2, [r7, #4]
 8010eec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d103      	bne.n	8010efc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010ef4:	69bb      	ldr	r3, [r7, #24]
 8010ef6:	69ba      	ldr	r2, [r7, #24]
 8010ef8:	601a      	str	r2, [r3, #0]
 8010efa:	e002      	b.n	8010f02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010efc:	69bb      	ldr	r3, [r7, #24]
 8010efe:	687a      	ldr	r2, [r7, #4]
 8010f00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010f02:	69bb      	ldr	r3, [r7, #24]
 8010f04:	68fa      	ldr	r2, [r7, #12]
 8010f06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010f08:	69bb      	ldr	r3, [r7, #24]
 8010f0a:	68ba      	ldr	r2, [r7, #8]
 8010f0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010f0e:	2101      	movs	r1, #1
 8010f10:	69b8      	ldr	r0, [r7, #24]
 8010f12:	f7ff febd 	bl	8010c90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010f16:	bf00      	nop
 8010f18:	3710      	adds	r7, #16
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}

08010f1e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010f1e:	b580      	push	{r7, lr}
 8010f20:	b082      	sub	sp, #8
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d00e      	beq.n	8010f4a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2200      	movs	r2, #0
 8010f30:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2200      	movs	r2, #0
 8010f36:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010f3e:	2300      	movs	r3, #0
 8010f40:	2200      	movs	r2, #0
 8010f42:	2100      	movs	r1, #0
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f000 f837 	bl	8010fb8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010f4a:	bf00      	nop
 8010f4c:	3708      	adds	r7, #8
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}

08010f52 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010f52:	b580      	push	{r7, lr}
 8010f54:	b086      	sub	sp, #24
 8010f56:	af00      	add	r7, sp, #0
 8010f58:	4603      	mov	r3, r0
 8010f5a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010f5c:	2301      	movs	r3, #1
 8010f5e:	617b      	str	r3, [r7, #20]
 8010f60:	2300      	movs	r3, #0
 8010f62:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010f64:	79fb      	ldrb	r3, [r7, #7]
 8010f66:	461a      	mov	r2, r3
 8010f68:	6939      	ldr	r1, [r7, #16]
 8010f6a:	6978      	ldr	r0, [r7, #20]
 8010f6c:	f7ff ff77 	bl	8010e5e <xQueueGenericCreate>
 8010f70:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010f72:	68f8      	ldr	r0, [r7, #12]
 8010f74:	f7ff ffd3 	bl	8010f1e <prvInitialiseMutex>

		return xNewQueue;
 8010f78:	68fb      	ldr	r3, [r7, #12]
	}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	3718      	adds	r7, #24
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}

08010f82 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010f82:	b580      	push	{r7, lr}
 8010f84:	b088      	sub	sp, #32
 8010f86:	af02      	add	r7, sp, #8
 8010f88:	4603      	mov	r3, r0
 8010f8a:	6039      	str	r1, [r7, #0]
 8010f8c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010f8e:	2301      	movs	r3, #1
 8010f90:	617b      	str	r3, [r7, #20]
 8010f92:	2300      	movs	r3, #0
 8010f94:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010f96:	79fb      	ldrb	r3, [r7, #7]
 8010f98:	9300      	str	r3, [sp, #0]
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	6939      	ldr	r1, [r7, #16]
 8010fa0:	6978      	ldr	r0, [r7, #20]
 8010fa2:	f7ff fedf 	bl	8010d64 <xQueueGenericCreateStatic>
 8010fa6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010fa8:	68f8      	ldr	r0, [r7, #12]
 8010faa:	f7ff ffb8 	bl	8010f1e <prvInitialiseMutex>

		return xNewQueue;
 8010fae:	68fb      	ldr	r3, [r7, #12]
	}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3718      	adds	r7, #24
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}

08010fb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b08e      	sub	sp, #56	; 0x38
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	60f8      	str	r0, [r7, #12]
 8010fc0:	60b9      	str	r1, [r7, #8]
 8010fc2:	607a      	str	r2, [r7, #4]
 8010fc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d10b      	bne.n	8010fec <xQueueGenericSend+0x34>
 8010fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fd8:	b672      	cpsid	i
 8010fda:	f383 8811 	msr	BASEPRI, r3
 8010fde:	f3bf 8f6f 	isb	sy
 8010fe2:	f3bf 8f4f 	dsb	sy
 8010fe6:	b662      	cpsie	i
 8010fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8010fea:	e7fe      	b.n	8010fea <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d103      	bne.n	8010ffa <xQueueGenericSend+0x42>
 8010ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d101      	bne.n	8010ffe <xQueueGenericSend+0x46>
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	e000      	b.n	8011000 <xQueueGenericSend+0x48>
 8010ffe:	2300      	movs	r3, #0
 8011000:	2b00      	cmp	r3, #0
 8011002:	d10b      	bne.n	801101c <xQueueGenericSend+0x64>
 8011004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011008:	b672      	cpsid	i
 801100a:	f383 8811 	msr	BASEPRI, r3
 801100e:	f3bf 8f6f 	isb	sy
 8011012:	f3bf 8f4f 	dsb	sy
 8011016:	b662      	cpsie	i
 8011018:	627b      	str	r3, [r7, #36]	; 0x24
 801101a:	e7fe      	b.n	801101a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	2b02      	cmp	r3, #2
 8011020:	d103      	bne.n	801102a <xQueueGenericSend+0x72>
 8011022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011026:	2b01      	cmp	r3, #1
 8011028:	d101      	bne.n	801102e <xQueueGenericSend+0x76>
 801102a:	2301      	movs	r3, #1
 801102c:	e000      	b.n	8011030 <xQueueGenericSend+0x78>
 801102e:	2300      	movs	r3, #0
 8011030:	2b00      	cmp	r3, #0
 8011032:	d10b      	bne.n	801104c <xQueueGenericSend+0x94>
 8011034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011038:	b672      	cpsid	i
 801103a:	f383 8811 	msr	BASEPRI, r3
 801103e:	f3bf 8f6f 	isb	sy
 8011042:	f3bf 8f4f 	dsb	sy
 8011046:	b662      	cpsie	i
 8011048:	623b      	str	r3, [r7, #32]
 801104a:	e7fe      	b.n	801104a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801104c:	f001 fb78 	bl	8012740 <xTaskGetSchedulerState>
 8011050:	4603      	mov	r3, r0
 8011052:	2b00      	cmp	r3, #0
 8011054:	d102      	bne.n	801105c <xQueueGenericSend+0xa4>
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d101      	bne.n	8011060 <xQueueGenericSend+0xa8>
 801105c:	2301      	movs	r3, #1
 801105e:	e000      	b.n	8011062 <xQueueGenericSend+0xaa>
 8011060:	2300      	movs	r3, #0
 8011062:	2b00      	cmp	r3, #0
 8011064:	d10b      	bne.n	801107e <xQueueGenericSend+0xc6>
 8011066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801106a:	b672      	cpsid	i
 801106c:	f383 8811 	msr	BASEPRI, r3
 8011070:	f3bf 8f6f 	isb	sy
 8011074:	f3bf 8f4f 	dsb	sy
 8011078:	b662      	cpsie	i
 801107a:	61fb      	str	r3, [r7, #28]
 801107c:	e7fe      	b.n	801107c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801107e:	f001 fea3 	bl	8012dc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801108a:	429a      	cmp	r2, r3
 801108c:	d302      	bcc.n	8011094 <xQueueGenericSend+0xdc>
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	2b02      	cmp	r3, #2
 8011092:	d129      	bne.n	80110e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011094:	683a      	ldr	r2, [r7, #0]
 8011096:	68b9      	ldr	r1, [r7, #8]
 8011098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801109a:	f000 fc4a 	bl	8011932 <prvCopyDataToQueue>
 801109e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80110a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d010      	beq.n	80110ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80110a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110aa:	3324      	adds	r3, #36	; 0x24
 80110ac:	4618      	mov	r0, r3
 80110ae:	f001 f989 	bl	80123c4 <xTaskRemoveFromEventList>
 80110b2:	4603      	mov	r3, r0
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d013      	beq.n	80110e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80110b8:	4b3f      	ldr	r3, [pc, #252]	; (80111b8 <xQueueGenericSend+0x200>)
 80110ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110be:	601a      	str	r2, [r3, #0]
 80110c0:	f3bf 8f4f 	dsb	sy
 80110c4:	f3bf 8f6f 	isb	sy
 80110c8:	e00a      	b.n	80110e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80110ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d007      	beq.n	80110e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80110d0:	4b39      	ldr	r3, [pc, #228]	; (80111b8 <xQueueGenericSend+0x200>)
 80110d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110d6:	601a      	str	r2, [r3, #0]
 80110d8:	f3bf 8f4f 	dsb	sy
 80110dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80110e0:	f001 fea4 	bl	8012e2c <vPortExitCritical>
				return pdPASS;
 80110e4:	2301      	movs	r3, #1
 80110e6:	e063      	b.n	80111b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d103      	bne.n	80110f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80110ee:	f001 fe9d 	bl	8012e2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80110f2:	2300      	movs	r3, #0
 80110f4:	e05c      	b.n	80111b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80110f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d106      	bne.n	801110a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80110fc:	f107 0314 	add.w	r3, r7, #20
 8011100:	4618      	mov	r0, r3
 8011102:	f001 f9c3 	bl	801248c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011106:	2301      	movs	r3, #1
 8011108:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801110a:	f001 fe8f 	bl	8012e2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801110e:	f000 ff4f 	bl	8011fb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011112:	f001 fe59 	bl	8012dc8 <vPortEnterCritical>
 8011116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801111c:	b25b      	sxtb	r3, r3
 801111e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011122:	d103      	bne.n	801112c <xQueueGenericSend+0x174>
 8011124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011126:	2200      	movs	r2, #0
 8011128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801112c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801112e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011132:	b25b      	sxtb	r3, r3
 8011134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011138:	d103      	bne.n	8011142 <xQueueGenericSend+0x18a>
 801113a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801113c:	2200      	movs	r2, #0
 801113e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011142:	f001 fe73 	bl	8012e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011146:	1d3a      	adds	r2, r7, #4
 8011148:	f107 0314 	add.w	r3, r7, #20
 801114c:	4611      	mov	r1, r2
 801114e:	4618      	mov	r0, r3
 8011150:	f001 f9b2 	bl	80124b8 <xTaskCheckForTimeOut>
 8011154:	4603      	mov	r3, r0
 8011156:	2b00      	cmp	r3, #0
 8011158:	d124      	bne.n	80111a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801115a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801115c:	f000 fce1 	bl	8011b22 <prvIsQueueFull>
 8011160:	4603      	mov	r3, r0
 8011162:	2b00      	cmp	r3, #0
 8011164:	d018      	beq.n	8011198 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011168:	3310      	adds	r3, #16
 801116a:	687a      	ldr	r2, [r7, #4]
 801116c:	4611      	mov	r1, r2
 801116e:	4618      	mov	r0, r3
 8011170:	f001 f902 	bl	8012378 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011176:	f000 fc6c 	bl	8011a52 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801117a:	f000 ff27 	bl	8011fcc <xTaskResumeAll>
 801117e:	4603      	mov	r3, r0
 8011180:	2b00      	cmp	r3, #0
 8011182:	f47f af7c 	bne.w	801107e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8011186:	4b0c      	ldr	r3, [pc, #48]	; (80111b8 <xQueueGenericSend+0x200>)
 8011188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801118c:	601a      	str	r2, [r3, #0]
 801118e:	f3bf 8f4f 	dsb	sy
 8011192:	f3bf 8f6f 	isb	sy
 8011196:	e772      	b.n	801107e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801119a:	f000 fc5a 	bl	8011a52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801119e:	f000 ff15 	bl	8011fcc <xTaskResumeAll>
 80111a2:	e76c      	b.n	801107e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80111a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111a6:	f000 fc54 	bl	8011a52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80111aa:	f000 ff0f 	bl	8011fcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80111ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3738      	adds	r7, #56	; 0x38
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}
 80111b8:	e000ed04 	.word	0xe000ed04

080111bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b08e      	sub	sp, #56	; 0x38
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	60f8      	str	r0, [r7, #12]
 80111c4:	60b9      	str	r1, [r7, #8]
 80111c6:	607a      	str	r2, [r7, #4]
 80111c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80111ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d10b      	bne.n	80111ec <xQueueGenericSendFromISR+0x30>
 80111d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111d8:	b672      	cpsid	i
 80111da:	f383 8811 	msr	BASEPRI, r3
 80111de:	f3bf 8f6f 	isb	sy
 80111e2:	f3bf 8f4f 	dsb	sy
 80111e6:	b662      	cpsie	i
 80111e8:	627b      	str	r3, [r7, #36]	; 0x24
 80111ea:	e7fe      	b.n	80111ea <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d103      	bne.n	80111fa <xQueueGenericSendFromISR+0x3e>
 80111f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d101      	bne.n	80111fe <xQueueGenericSendFromISR+0x42>
 80111fa:	2301      	movs	r3, #1
 80111fc:	e000      	b.n	8011200 <xQueueGenericSendFromISR+0x44>
 80111fe:	2300      	movs	r3, #0
 8011200:	2b00      	cmp	r3, #0
 8011202:	d10b      	bne.n	801121c <xQueueGenericSendFromISR+0x60>
 8011204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011208:	b672      	cpsid	i
 801120a:	f383 8811 	msr	BASEPRI, r3
 801120e:	f3bf 8f6f 	isb	sy
 8011212:	f3bf 8f4f 	dsb	sy
 8011216:	b662      	cpsie	i
 8011218:	623b      	str	r3, [r7, #32]
 801121a:	e7fe      	b.n	801121a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	2b02      	cmp	r3, #2
 8011220:	d103      	bne.n	801122a <xQueueGenericSendFromISR+0x6e>
 8011222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011226:	2b01      	cmp	r3, #1
 8011228:	d101      	bne.n	801122e <xQueueGenericSendFromISR+0x72>
 801122a:	2301      	movs	r3, #1
 801122c:	e000      	b.n	8011230 <xQueueGenericSendFromISR+0x74>
 801122e:	2300      	movs	r3, #0
 8011230:	2b00      	cmp	r3, #0
 8011232:	d10b      	bne.n	801124c <xQueueGenericSendFromISR+0x90>
 8011234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011238:	b672      	cpsid	i
 801123a:	f383 8811 	msr	BASEPRI, r3
 801123e:	f3bf 8f6f 	isb	sy
 8011242:	f3bf 8f4f 	dsb	sy
 8011246:	b662      	cpsie	i
 8011248:	61fb      	str	r3, [r7, #28]
 801124a:	e7fe      	b.n	801124a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801124c:	f001 fe9c 	bl	8012f88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011250:	f3ef 8211 	mrs	r2, BASEPRI
 8011254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011258:	b672      	cpsid	i
 801125a:	f383 8811 	msr	BASEPRI, r3
 801125e:	f3bf 8f6f 	isb	sy
 8011262:	f3bf 8f4f 	dsb	sy
 8011266:	b662      	cpsie	i
 8011268:	61ba      	str	r2, [r7, #24]
 801126a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801126c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801126e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011278:	429a      	cmp	r2, r3
 801127a:	d302      	bcc.n	8011282 <xQueueGenericSendFromISR+0xc6>
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	2b02      	cmp	r3, #2
 8011280:	d12c      	bne.n	80112dc <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801128c:	683a      	ldr	r2, [r7, #0]
 801128e:	68b9      	ldr	r1, [r7, #8]
 8011290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011292:	f000 fb4e 	bl	8011932 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011296:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801129a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801129e:	d112      	bne.n	80112c6 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80112a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d016      	beq.n	80112d6 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80112a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112aa:	3324      	adds	r3, #36	; 0x24
 80112ac:	4618      	mov	r0, r3
 80112ae:	f001 f889 	bl	80123c4 <xTaskRemoveFromEventList>
 80112b2:	4603      	mov	r3, r0
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d00e      	beq.n	80112d6 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d00b      	beq.n	80112d6 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2201      	movs	r2, #1
 80112c2:	601a      	str	r2, [r3, #0]
 80112c4:	e007      	b.n	80112d6 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80112c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80112ca:	3301      	adds	r3, #1
 80112cc:	b2db      	uxtb	r3, r3
 80112ce:	b25a      	sxtb	r2, r3
 80112d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80112d6:	2301      	movs	r3, #1
 80112d8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80112da:	e001      	b.n	80112e0 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80112dc:	2300      	movs	r3, #0
 80112de:	637b      	str	r3, [r7, #52]	; 0x34
 80112e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112e2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80112e4:	693b      	ldr	r3, [r7, #16]
 80112e6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80112ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3738      	adds	r7, #56	; 0x38
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}

080112f4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b08e      	sub	sp, #56	; 0x38
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011304:	2b00      	cmp	r3, #0
 8011306:	d10b      	bne.n	8011320 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8011308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801130c:	b672      	cpsid	i
 801130e:	f383 8811 	msr	BASEPRI, r3
 8011312:	f3bf 8f6f 	isb	sy
 8011316:	f3bf 8f4f 	dsb	sy
 801131a:	b662      	cpsie	i
 801131c:	623b      	str	r3, [r7, #32]
 801131e:	e7fe      	b.n	801131e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011324:	2b00      	cmp	r3, #0
 8011326:	d00b      	beq.n	8011340 <xQueueGiveFromISR+0x4c>
 8011328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801132c:	b672      	cpsid	i
 801132e:	f383 8811 	msr	BASEPRI, r3
 8011332:	f3bf 8f6f 	isb	sy
 8011336:	f3bf 8f4f 	dsb	sy
 801133a:	b662      	cpsie	i
 801133c:	61fb      	str	r3, [r7, #28]
 801133e:	e7fe      	b.n	801133e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d103      	bne.n	8011350 <xQueueGiveFromISR+0x5c>
 8011348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801134a:	689b      	ldr	r3, [r3, #8]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d101      	bne.n	8011354 <xQueueGiveFromISR+0x60>
 8011350:	2301      	movs	r3, #1
 8011352:	e000      	b.n	8011356 <xQueueGiveFromISR+0x62>
 8011354:	2300      	movs	r3, #0
 8011356:	2b00      	cmp	r3, #0
 8011358:	d10b      	bne.n	8011372 <xQueueGiveFromISR+0x7e>
 801135a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801135e:	b672      	cpsid	i
 8011360:	f383 8811 	msr	BASEPRI, r3
 8011364:	f3bf 8f6f 	isb	sy
 8011368:	f3bf 8f4f 	dsb	sy
 801136c:	b662      	cpsie	i
 801136e:	61bb      	str	r3, [r7, #24]
 8011370:	e7fe      	b.n	8011370 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011372:	f001 fe09 	bl	8012f88 <vPortValidateInterruptPriority>
	__asm volatile
 8011376:	f3ef 8211 	mrs	r2, BASEPRI
 801137a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801137e:	b672      	cpsid	i
 8011380:	f383 8811 	msr	BASEPRI, r3
 8011384:	f3bf 8f6f 	isb	sy
 8011388:	f3bf 8f4f 	dsb	sy
 801138c:	b662      	cpsie	i
 801138e:	617a      	str	r2, [r7, #20]
 8011390:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011392:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011394:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801139a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801139c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801139e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113a2:	429a      	cmp	r2, r3
 80113a4:	d22b      	bcs.n	80113fe <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80113a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80113ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80113b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b2:	1c5a      	adds	r2, r3, #1
 80113b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80113b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80113bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80113c0:	d112      	bne.n	80113e8 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80113c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d016      	beq.n	80113f8 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80113ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113cc:	3324      	adds	r3, #36	; 0x24
 80113ce:	4618      	mov	r0, r3
 80113d0:	f000 fff8 	bl	80123c4 <xTaskRemoveFromEventList>
 80113d4:	4603      	mov	r3, r0
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d00e      	beq.n	80113f8 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d00b      	beq.n	80113f8 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	2201      	movs	r2, #1
 80113e4:	601a      	str	r2, [r3, #0]
 80113e6:	e007      	b.n	80113f8 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80113e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113ec:	3301      	adds	r3, #1
 80113ee:	b2db      	uxtb	r3, r3
 80113f0:	b25a      	sxtb	r2, r3
 80113f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80113f8:	2301      	movs	r3, #1
 80113fa:	637b      	str	r3, [r7, #52]	; 0x34
 80113fc:	e001      	b.n	8011402 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80113fe:	2300      	movs	r3, #0
 8011400:	637b      	str	r3, [r7, #52]	; 0x34
 8011402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011404:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801140c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801140e:	4618      	mov	r0, r3
 8011410:	3738      	adds	r7, #56	; 0x38
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}
	...

08011418 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b08c      	sub	sp, #48	; 0x30
 801141c:	af00      	add	r7, sp, #0
 801141e:	60f8      	str	r0, [r7, #12]
 8011420:	60b9      	str	r1, [r7, #8]
 8011422:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011424:	2300      	movs	r3, #0
 8011426:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801142c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801142e:	2b00      	cmp	r3, #0
 8011430:	d10b      	bne.n	801144a <xQueueReceive+0x32>
	__asm volatile
 8011432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011436:	b672      	cpsid	i
 8011438:	f383 8811 	msr	BASEPRI, r3
 801143c:	f3bf 8f6f 	isb	sy
 8011440:	f3bf 8f4f 	dsb	sy
 8011444:	b662      	cpsie	i
 8011446:	623b      	str	r3, [r7, #32]
 8011448:	e7fe      	b.n	8011448 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d103      	bne.n	8011458 <xQueueReceive+0x40>
 8011450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011454:	2b00      	cmp	r3, #0
 8011456:	d101      	bne.n	801145c <xQueueReceive+0x44>
 8011458:	2301      	movs	r3, #1
 801145a:	e000      	b.n	801145e <xQueueReceive+0x46>
 801145c:	2300      	movs	r3, #0
 801145e:	2b00      	cmp	r3, #0
 8011460:	d10b      	bne.n	801147a <xQueueReceive+0x62>
 8011462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011466:	b672      	cpsid	i
 8011468:	f383 8811 	msr	BASEPRI, r3
 801146c:	f3bf 8f6f 	isb	sy
 8011470:	f3bf 8f4f 	dsb	sy
 8011474:	b662      	cpsie	i
 8011476:	61fb      	str	r3, [r7, #28]
 8011478:	e7fe      	b.n	8011478 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801147a:	f001 f961 	bl	8012740 <xTaskGetSchedulerState>
 801147e:	4603      	mov	r3, r0
 8011480:	2b00      	cmp	r3, #0
 8011482:	d102      	bne.n	801148a <xQueueReceive+0x72>
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d101      	bne.n	801148e <xQueueReceive+0x76>
 801148a:	2301      	movs	r3, #1
 801148c:	e000      	b.n	8011490 <xQueueReceive+0x78>
 801148e:	2300      	movs	r3, #0
 8011490:	2b00      	cmp	r3, #0
 8011492:	d10b      	bne.n	80114ac <xQueueReceive+0x94>
 8011494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011498:	b672      	cpsid	i
 801149a:	f383 8811 	msr	BASEPRI, r3
 801149e:	f3bf 8f6f 	isb	sy
 80114a2:	f3bf 8f4f 	dsb	sy
 80114a6:	b662      	cpsie	i
 80114a8:	61bb      	str	r3, [r7, #24]
 80114aa:	e7fe      	b.n	80114aa <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80114ac:	f001 fc8c 	bl	8012dc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80114b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114b4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80114b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d01f      	beq.n	80114fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80114bc:	68b9      	ldr	r1, [r7, #8]
 80114be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114c0:	f000 faa1 	bl	8011a06 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80114c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c6:	1e5a      	subs	r2, r3, #1
 80114c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ca:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80114cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ce:	691b      	ldr	r3, [r3, #16]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d00f      	beq.n	80114f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80114d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d6:	3310      	adds	r3, #16
 80114d8:	4618      	mov	r0, r3
 80114da:	f000 ff73 	bl	80123c4 <xTaskRemoveFromEventList>
 80114de:	4603      	mov	r3, r0
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d007      	beq.n	80114f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80114e4:	4b3c      	ldr	r3, [pc, #240]	; (80115d8 <xQueueReceive+0x1c0>)
 80114e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114ea:	601a      	str	r2, [r3, #0]
 80114ec:	f3bf 8f4f 	dsb	sy
 80114f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80114f4:	f001 fc9a 	bl	8012e2c <vPortExitCritical>
				return pdPASS;
 80114f8:	2301      	movs	r3, #1
 80114fa:	e069      	b.n	80115d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d103      	bne.n	801150a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011502:	f001 fc93 	bl	8012e2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011506:	2300      	movs	r3, #0
 8011508:	e062      	b.n	80115d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150c:	2b00      	cmp	r3, #0
 801150e:	d106      	bne.n	801151e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011510:	f107 0310 	add.w	r3, r7, #16
 8011514:	4618      	mov	r0, r3
 8011516:	f000 ffb9 	bl	801248c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801151a:	2301      	movs	r3, #1
 801151c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801151e:	f001 fc85 	bl	8012e2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011522:	f000 fd45 	bl	8011fb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011526:	f001 fc4f 	bl	8012dc8 <vPortEnterCritical>
 801152a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801152c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011530:	b25b      	sxtb	r3, r3
 8011532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011536:	d103      	bne.n	8011540 <xQueueReceive+0x128>
 8011538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801153a:	2200      	movs	r2, #0
 801153c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011546:	b25b      	sxtb	r3, r3
 8011548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801154c:	d103      	bne.n	8011556 <xQueueReceive+0x13e>
 801154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011550:	2200      	movs	r2, #0
 8011552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011556:	f001 fc69 	bl	8012e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801155a:	1d3a      	adds	r2, r7, #4
 801155c:	f107 0310 	add.w	r3, r7, #16
 8011560:	4611      	mov	r1, r2
 8011562:	4618      	mov	r0, r3
 8011564:	f000 ffa8 	bl	80124b8 <xTaskCheckForTimeOut>
 8011568:	4603      	mov	r3, r0
 801156a:	2b00      	cmp	r3, #0
 801156c:	d123      	bne.n	80115b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801156e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011570:	f000 fac1 	bl	8011af6 <prvIsQueueEmpty>
 8011574:	4603      	mov	r3, r0
 8011576:	2b00      	cmp	r3, #0
 8011578:	d017      	beq.n	80115aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801157a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801157c:	3324      	adds	r3, #36	; 0x24
 801157e:	687a      	ldr	r2, [r7, #4]
 8011580:	4611      	mov	r1, r2
 8011582:	4618      	mov	r0, r3
 8011584:	f000 fef8 	bl	8012378 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801158a:	f000 fa62 	bl	8011a52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801158e:	f000 fd1d 	bl	8011fcc <xTaskResumeAll>
 8011592:	4603      	mov	r3, r0
 8011594:	2b00      	cmp	r3, #0
 8011596:	d189      	bne.n	80114ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8011598:	4b0f      	ldr	r3, [pc, #60]	; (80115d8 <xQueueReceive+0x1c0>)
 801159a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801159e:	601a      	str	r2, [r3, #0]
 80115a0:	f3bf 8f4f 	dsb	sy
 80115a4:	f3bf 8f6f 	isb	sy
 80115a8:	e780      	b.n	80114ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80115aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115ac:	f000 fa51 	bl	8011a52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80115b0:	f000 fd0c 	bl	8011fcc <xTaskResumeAll>
 80115b4:	e77a      	b.n	80114ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80115b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115b8:	f000 fa4b 	bl	8011a52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80115bc:	f000 fd06 	bl	8011fcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80115c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115c2:	f000 fa98 	bl	8011af6 <prvIsQueueEmpty>
 80115c6:	4603      	mov	r3, r0
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	f43f af6f 	beq.w	80114ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80115ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80115d0:	4618      	mov	r0, r3
 80115d2:	3730      	adds	r7, #48	; 0x30
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}
 80115d8:	e000ed04 	.word	0xe000ed04

080115dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b08e      	sub	sp, #56	; 0x38
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
 80115e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80115e6:	2300      	movs	r3, #0
 80115e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80115ee:	2300      	movs	r3, #0
 80115f0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80115f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d10b      	bne.n	8011610 <xQueueSemaphoreTake+0x34>
 80115f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115fc:	b672      	cpsid	i
 80115fe:	f383 8811 	msr	BASEPRI, r3
 8011602:	f3bf 8f6f 	isb	sy
 8011606:	f3bf 8f4f 	dsb	sy
 801160a:	b662      	cpsie	i
 801160c:	623b      	str	r3, [r7, #32]
 801160e:	e7fe      	b.n	801160e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011614:	2b00      	cmp	r3, #0
 8011616:	d00b      	beq.n	8011630 <xQueueSemaphoreTake+0x54>
 8011618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801161c:	b672      	cpsid	i
 801161e:	f383 8811 	msr	BASEPRI, r3
 8011622:	f3bf 8f6f 	isb	sy
 8011626:	f3bf 8f4f 	dsb	sy
 801162a:	b662      	cpsie	i
 801162c:	61fb      	str	r3, [r7, #28]
 801162e:	e7fe      	b.n	801162e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011630:	f001 f886 	bl	8012740 <xTaskGetSchedulerState>
 8011634:	4603      	mov	r3, r0
 8011636:	2b00      	cmp	r3, #0
 8011638:	d102      	bne.n	8011640 <xQueueSemaphoreTake+0x64>
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d101      	bne.n	8011644 <xQueueSemaphoreTake+0x68>
 8011640:	2301      	movs	r3, #1
 8011642:	e000      	b.n	8011646 <xQueueSemaphoreTake+0x6a>
 8011644:	2300      	movs	r3, #0
 8011646:	2b00      	cmp	r3, #0
 8011648:	d10b      	bne.n	8011662 <xQueueSemaphoreTake+0x86>
 801164a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801164e:	b672      	cpsid	i
 8011650:	f383 8811 	msr	BASEPRI, r3
 8011654:	f3bf 8f6f 	isb	sy
 8011658:	f3bf 8f4f 	dsb	sy
 801165c:	b662      	cpsie	i
 801165e:	61bb      	str	r3, [r7, #24]
 8011660:	e7fe      	b.n	8011660 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011662:	f001 fbb1 	bl	8012dc8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801166a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801166c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801166e:	2b00      	cmp	r3, #0
 8011670:	d024      	beq.n	80116bc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011674:	1e5a      	subs	r2, r3, #1
 8011676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011678:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d104      	bne.n	801168c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011682:	f001 fa1f 	bl	8012ac4 <pvTaskIncrementMutexHeldCount>
 8011686:	4602      	mov	r2, r0
 8011688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801168a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801168c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801168e:	691b      	ldr	r3, [r3, #16]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d00f      	beq.n	80116b4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011696:	3310      	adds	r3, #16
 8011698:	4618      	mov	r0, r3
 801169a:	f000 fe93 	bl	80123c4 <xTaskRemoveFromEventList>
 801169e:	4603      	mov	r3, r0
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d007      	beq.n	80116b4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80116a4:	4b54      	ldr	r3, [pc, #336]	; (80117f8 <xQueueSemaphoreTake+0x21c>)
 80116a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116aa:	601a      	str	r2, [r3, #0]
 80116ac:	f3bf 8f4f 	dsb	sy
 80116b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80116b4:	f001 fbba 	bl	8012e2c <vPortExitCritical>
				return pdPASS;
 80116b8:	2301      	movs	r3, #1
 80116ba:	e098      	b.n	80117ee <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d112      	bne.n	80116e8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80116c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d00b      	beq.n	80116e0 <xQueueSemaphoreTake+0x104>
 80116c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116cc:	b672      	cpsid	i
 80116ce:	f383 8811 	msr	BASEPRI, r3
 80116d2:	f3bf 8f6f 	isb	sy
 80116d6:	f3bf 8f4f 	dsb	sy
 80116da:	b662      	cpsie	i
 80116dc:	617b      	str	r3, [r7, #20]
 80116de:	e7fe      	b.n	80116de <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80116e0:	f001 fba4 	bl	8012e2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80116e4:	2300      	movs	r3, #0
 80116e6:	e082      	b.n	80117ee <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80116e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d106      	bne.n	80116fc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80116ee:	f107 030c 	add.w	r3, r7, #12
 80116f2:	4618      	mov	r0, r3
 80116f4:	f000 feca 	bl	801248c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80116f8:	2301      	movs	r3, #1
 80116fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80116fc:	f001 fb96 	bl	8012e2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011700:	f000 fc56 	bl	8011fb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011704:	f001 fb60 	bl	8012dc8 <vPortEnterCritical>
 8011708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801170a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801170e:	b25b      	sxtb	r3, r3
 8011710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011714:	d103      	bne.n	801171e <xQueueSemaphoreTake+0x142>
 8011716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011718:	2200      	movs	r2, #0
 801171a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801171e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011720:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011724:	b25b      	sxtb	r3, r3
 8011726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801172a:	d103      	bne.n	8011734 <xQueueSemaphoreTake+0x158>
 801172c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801172e:	2200      	movs	r2, #0
 8011730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011734:	f001 fb7a 	bl	8012e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011738:	463a      	mov	r2, r7
 801173a:	f107 030c 	add.w	r3, r7, #12
 801173e:	4611      	mov	r1, r2
 8011740:	4618      	mov	r0, r3
 8011742:	f000 feb9 	bl	80124b8 <xTaskCheckForTimeOut>
 8011746:	4603      	mov	r3, r0
 8011748:	2b00      	cmp	r3, #0
 801174a:	d132      	bne.n	80117b2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801174c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801174e:	f000 f9d2 	bl	8011af6 <prvIsQueueEmpty>
 8011752:	4603      	mov	r3, r0
 8011754:	2b00      	cmp	r3, #0
 8011756:	d026      	beq.n	80117a6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d109      	bne.n	8011774 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8011760:	f001 fb32 	bl	8012dc8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011766:	689b      	ldr	r3, [r3, #8]
 8011768:	4618      	mov	r0, r3
 801176a:	f001 f807 	bl	801277c <xTaskPriorityInherit>
 801176e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011770:	f001 fb5c 	bl	8012e2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011776:	3324      	adds	r3, #36	; 0x24
 8011778:	683a      	ldr	r2, [r7, #0]
 801177a:	4611      	mov	r1, r2
 801177c:	4618      	mov	r0, r3
 801177e:	f000 fdfb 	bl	8012378 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011782:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011784:	f000 f965 	bl	8011a52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011788:	f000 fc20 	bl	8011fcc <xTaskResumeAll>
 801178c:	4603      	mov	r3, r0
 801178e:	2b00      	cmp	r3, #0
 8011790:	f47f af67 	bne.w	8011662 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8011794:	4b18      	ldr	r3, [pc, #96]	; (80117f8 <xQueueSemaphoreTake+0x21c>)
 8011796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801179a:	601a      	str	r2, [r3, #0]
 801179c:	f3bf 8f4f 	dsb	sy
 80117a0:	f3bf 8f6f 	isb	sy
 80117a4:	e75d      	b.n	8011662 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80117a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117a8:	f000 f953 	bl	8011a52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80117ac:	f000 fc0e 	bl	8011fcc <xTaskResumeAll>
 80117b0:	e757      	b.n	8011662 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80117b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117b4:	f000 f94d 	bl	8011a52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80117b8:	f000 fc08 	bl	8011fcc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80117bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117be:	f000 f99a 	bl	8011af6 <prvIsQueueEmpty>
 80117c2:	4603      	mov	r3, r0
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	f43f af4c 	beq.w	8011662 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80117ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d00d      	beq.n	80117ec <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80117d0:	f001 fafa 	bl	8012dc8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80117d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117d6:	f000 f894 	bl	8011902 <prvGetDisinheritPriorityAfterTimeout>
 80117da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80117dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117de:	689b      	ldr	r3, [r3, #8]
 80117e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80117e2:	4618      	mov	r0, r3
 80117e4:	f001 f8d2 	bl	801298c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80117e8:	f001 fb20 	bl	8012e2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80117ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80117ee:	4618      	mov	r0, r3
 80117f0:	3738      	adds	r7, #56	; 0x38
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bd80      	pop	{r7, pc}
 80117f6:	bf00      	nop
 80117f8:	e000ed04 	.word	0xe000ed04

080117fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b08e      	sub	sp, #56	; 0x38
 8011800:	af00      	add	r7, sp, #0
 8011802:	60f8      	str	r0, [r7, #12]
 8011804:	60b9      	str	r1, [r7, #8]
 8011806:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801180c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801180e:	2b00      	cmp	r3, #0
 8011810:	d10b      	bne.n	801182a <xQueueReceiveFromISR+0x2e>
 8011812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011816:	b672      	cpsid	i
 8011818:	f383 8811 	msr	BASEPRI, r3
 801181c:	f3bf 8f6f 	isb	sy
 8011820:	f3bf 8f4f 	dsb	sy
 8011824:	b662      	cpsie	i
 8011826:	623b      	str	r3, [r7, #32]
 8011828:	e7fe      	b.n	8011828 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801182a:	68bb      	ldr	r3, [r7, #8]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d103      	bne.n	8011838 <xQueueReceiveFromISR+0x3c>
 8011830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011834:	2b00      	cmp	r3, #0
 8011836:	d101      	bne.n	801183c <xQueueReceiveFromISR+0x40>
 8011838:	2301      	movs	r3, #1
 801183a:	e000      	b.n	801183e <xQueueReceiveFromISR+0x42>
 801183c:	2300      	movs	r3, #0
 801183e:	2b00      	cmp	r3, #0
 8011840:	d10b      	bne.n	801185a <xQueueReceiveFromISR+0x5e>
 8011842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011846:	b672      	cpsid	i
 8011848:	f383 8811 	msr	BASEPRI, r3
 801184c:	f3bf 8f6f 	isb	sy
 8011850:	f3bf 8f4f 	dsb	sy
 8011854:	b662      	cpsie	i
 8011856:	61fb      	str	r3, [r7, #28]
 8011858:	e7fe      	b.n	8011858 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801185a:	f001 fb95 	bl	8012f88 <vPortValidateInterruptPriority>
	__asm volatile
 801185e:	f3ef 8211 	mrs	r2, BASEPRI
 8011862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011866:	b672      	cpsid	i
 8011868:	f383 8811 	msr	BASEPRI, r3
 801186c:	f3bf 8f6f 	isb	sy
 8011870:	f3bf 8f4f 	dsb	sy
 8011874:	b662      	cpsie	i
 8011876:	61ba      	str	r2, [r7, #24]
 8011878:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801187a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801187c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801187e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011882:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011886:	2b00      	cmp	r3, #0
 8011888:	d02f      	beq.n	80118ea <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801188a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801188c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011894:	68b9      	ldr	r1, [r7, #8]
 8011896:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011898:	f000 f8b5 	bl	8011a06 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801189c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801189e:	1e5a      	subs	r2, r3, #1
 80118a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80118a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80118a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80118ac:	d112      	bne.n	80118d4 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80118ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118b0:	691b      	ldr	r3, [r3, #16]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d016      	beq.n	80118e4 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80118b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118b8:	3310      	adds	r3, #16
 80118ba:	4618      	mov	r0, r3
 80118bc:	f000 fd82 	bl	80123c4 <xTaskRemoveFromEventList>
 80118c0:	4603      	mov	r3, r0
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d00e      	beq.n	80118e4 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d00b      	beq.n	80118e4 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2201      	movs	r2, #1
 80118d0:	601a      	str	r2, [r3, #0]
 80118d2:	e007      	b.n	80118e4 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80118d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80118d8:	3301      	adds	r3, #1
 80118da:	b2db      	uxtb	r3, r3
 80118dc:	b25a      	sxtb	r2, r3
 80118de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80118e4:	2301      	movs	r3, #1
 80118e6:	637b      	str	r3, [r7, #52]	; 0x34
 80118e8:	e001      	b.n	80118ee <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 80118ea:	2300      	movs	r3, #0
 80118ec:	637b      	str	r3, [r7, #52]	; 0x34
 80118ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80118f2:	693b      	ldr	r3, [r7, #16]
 80118f4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80118f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3738      	adds	r7, #56	; 0x38
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}

08011902 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011902:	b480      	push	{r7}
 8011904:	b085      	sub	sp, #20
 8011906:	af00      	add	r7, sp, #0
 8011908:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801190e:	2b00      	cmp	r3, #0
 8011910:	d006      	beq.n	8011920 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	f1c3 0307 	rsb	r3, r3, #7
 801191c:	60fb      	str	r3, [r7, #12]
 801191e:	e001      	b.n	8011924 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011920:	2300      	movs	r3, #0
 8011922:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011924:	68fb      	ldr	r3, [r7, #12]
	}
 8011926:	4618      	mov	r0, r3
 8011928:	3714      	adds	r7, #20
 801192a:	46bd      	mov	sp, r7
 801192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011930:	4770      	bx	lr

08011932 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011932:	b580      	push	{r7, lr}
 8011934:	b086      	sub	sp, #24
 8011936:	af00      	add	r7, sp, #0
 8011938:	60f8      	str	r0, [r7, #12]
 801193a:	60b9      	str	r1, [r7, #8]
 801193c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801193e:	2300      	movs	r3, #0
 8011940:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011946:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801194c:	2b00      	cmp	r3, #0
 801194e:	d10d      	bne.n	801196c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d14d      	bne.n	80119f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	689b      	ldr	r3, [r3, #8]
 801195c:	4618      	mov	r0, r3
 801195e:	f000 ff8d 	bl	801287c <xTaskPriorityDisinherit>
 8011962:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	2200      	movs	r2, #0
 8011968:	609a      	str	r2, [r3, #8]
 801196a:	e043      	b.n	80119f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d119      	bne.n	80119a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	6858      	ldr	r0, [r3, #4]
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801197a:	461a      	mov	r2, r3
 801197c:	68b9      	ldr	r1, [r7, #8]
 801197e:	f00d faee 	bl	801ef5e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	685a      	ldr	r2, [r3, #4]
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801198a:	441a      	add	r2, r3
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	685a      	ldr	r2, [r3, #4]
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	689b      	ldr	r3, [r3, #8]
 8011998:	429a      	cmp	r2, r3
 801199a:	d32b      	bcc.n	80119f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	681a      	ldr	r2, [r3, #0]
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	605a      	str	r2, [r3, #4]
 80119a4:	e026      	b.n	80119f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	68d8      	ldr	r0, [r3, #12]
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119ae:	461a      	mov	r2, r3
 80119b0:	68b9      	ldr	r1, [r7, #8]
 80119b2:	f00d fad4 	bl	801ef5e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	68da      	ldr	r2, [r3, #12]
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119be:	425b      	negs	r3, r3
 80119c0:	441a      	add	r2, r3
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	68da      	ldr	r2, [r3, #12]
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	429a      	cmp	r2, r3
 80119d0:	d207      	bcs.n	80119e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	689a      	ldr	r2, [r3, #8]
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119da:	425b      	negs	r3, r3
 80119dc:	441a      	add	r2, r3
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	2b02      	cmp	r3, #2
 80119e6:	d105      	bne.n	80119f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80119e8:	693b      	ldr	r3, [r7, #16]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d002      	beq.n	80119f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80119ee:	693b      	ldr	r3, [r7, #16]
 80119f0:	3b01      	subs	r3, #1
 80119f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80119f4:	693b      	ldr	r3, [r7, #16]
 80119f6:	1c5a      	adds	r2, r3, #1
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80119fc:	697b      	ldr	r3, [r7, #20]
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	3718      	adds	r7, #24
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}

08011a06 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011a06:	b580      	push	{r7, lr}
 8011a08:	b082      	sub	sp, #8
 8011a0a:	af00      	add	r7, sp, #0
 8011a0c:	6078      	str	r0, [r7, #4]
 8011a0e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d018      	beq.n	8011a4a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	68da      	ldr	r2, [r3, #12]
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a20:	441a      	add	r2, r3
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	68da      	ldr	r2, [r3, #12]
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	689b      	ldr	r3, [r3, #8]
 8011a2e:	429a      	cmp	r2, r3
 8011a30:	d303      	bcc.n	8011a3a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681a      	ldr	r2, [r3, #0]
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	68d9      	ldr	r1, [r3, #12]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a42:	461a      	mov	r2, r3
 8011a44:	6838      	ldr	r0, [r7, #0]
 8011a46:	f00d fa8a 	bl	801ef5e <memcpy>
	}
}
 8011a4a:	bf00      	nop
 8011a4c:	3708      	adds	r7, #8
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}

08011a52 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011a52:	b580      	push	{r7, lr}
 8011a54:	b084      	sub	sp, #16
 8011a56:	af00      	add	r7, sp, #0
 8011a58:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011a5a:	f001 f9b5 	bl	8012dc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a64:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011a66:	e011      	b.n	8011a8c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d012      	beq.n	8011a96 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	3324      	adds	r3, #36	; 0x24
 8011a74:	4618      	mov	r0, r3
 8011a76:	f000 fca5 	bl	80123c4 <xTaskRemoveFromEventList>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d001      	beq.n	8011a84 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011a80:	f000 fd7e 	bl	8012580 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011a84:	7bfb      	ldrb	r3, [r7, #15]
 8011a86:	3b01      	subs	r3, #1
 8011a88:	b2db      	uxtb	r3, r3
 8011a8a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	dce9      	bgt.n	8011a68 <prvUnlockQueue+0x16>
 8011a94:	e000      	b.n	8011a98 <prvUnlockQueue+0x46>
					break;
 8011a96:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	22ff      	movs	r2, #255	; 0xff
 8011a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011aa0:	f001 f9c4 	bl	8012e2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011aa4:	f001 f990 	bl	8012dc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011aae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011ab0:	e011      	b.n	8011ad6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	691b      	ldr	r3, [r3, #16]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d012      	beq.n	8011ae0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	3310      	adds	r3, #16
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f000 fc80 	bl	80123c4 <xTaskRemoveFromEventList>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d001      	beq.n	8011ace <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011aca:	f000 fd59 	bl	8012580 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011ace:	7bbb      	ldrb	r3, [r7, #14]
 8011ad0:	3b01      	subs	r3, #1
 8011ad2:	b2db      	uxtb	r3, r3
 8011ad4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011ad6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	dce9      	bgt.n	8011ab2 <prvUnlockQueue+0x60>
 8011ade:	e000      	b.n	8011ae2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011ae0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	22ff      	movs	r2, #255	; 0xff
 8011ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011aea:	f001 f99f 	bl	8012e2c <vPortExitCritical>
}
 8011aee:	bf00      	nop
 8011af0:	3710      	adds	r7, #16
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}

08011af6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011af6:	b580      	push	{r7, lr}
 8011af8:	b084      	sub	sp, #16
 8011afa:	af00      	add	r7, sp, #0
 8011afc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011afe:	f001 f963 	bl	8012dc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d102      	bne.n	8011b10 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	60fb      	str	r3, [r7, #12]
 8011b0e:	e001      	b.n	8011b14 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011b10:	2300      	movs	r3, #0
 8011b12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011b14:	f001 f98a 	bl	8012e2c <vPortExitCritical>

	return xReturn;
 8011b18:	68fb      	ldr	r3, [r7, #12]
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3710      	adds	r7, #16
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}

08011b22 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011b22:	b580      	push	{r7, lr}
 8011b24:	b084      	sub	sp, #16
 8011b26:	af00      	add	r7, sp, #0
 8011b28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011b2a:	f001 f94d 	bl	8012dc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b36:	429a      	cmp	r2, r3
 8011b38:	d102      	bne.n	8011b40 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	60fb      	str	r3, [r7, #12]
 8011b3e:	e001      	b.n	8011b44 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011b40:	2300      	movs	r3, #0
 8011b42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011b44:	f001 f972 	bl	8012e2c <vPortExitCritical>

	return xReturn;
 8011b48:	68fb      	ldr	r3, [r7, #12]
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3710      	adds	r7, #16
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}

08011b52 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011b52:	b580      	push	{r7, lr}
 8011b54:	b08e      	sub	sp, #56	; 0x38
 8011b56:	af04      	add	r7, sp, #16
 8011b58:	60f8      	str	r0, [r7, #12]
 8011b5a:	60b9      	str	r1, [r7, #8]
 8011b5c:	607a      	str	r2, [r7, #4]
 8011b5e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d10b      	bne.n	8011b7e <xTaskCreateStatic+0x2c>
	__asm volatile
 8011b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b6a:	b672      	cpsid	i
 8011b6c:	f383 8811 	msr	BASEPRI, r3
 8011b70:	f3bf 8f6f 	isb	sy
 8011b74:	f3bf 8f4f 	dsb	sy
 8011b78:	b662      	cpsie	i
 8011b7a:	623b      	str	r3, [r7, #32]
 8011b7c:	e7fe      	b.n	8011b7c <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8011b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d10b      	bne.n	8011b9c <xTaskCreateStatic+0x4a>
 8011b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b88:	b672      	cpsid	i
 8011b8a:	f383 8811 	msr	BASEPRI, r3
 8011b8e:	f3bf 8f6f 	isb	sy
 8011b92:	f3bf 8f4f 	dsb	sy
 8011b96:	b662      	cpsie	i
 8011b98:	61fb      	str	r3, [r7, #28]
 8011b9a:	e7fe      	b.n	8011b9a <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011b9c:	2354      	movs	r3, #84	; 0x54
 8011b9e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011ba0:	693b      	ldr	r3, [r7, #16]
 8011ba2:	2b54      	cmp	r3, #84	; 0x54
 8011ba4:	d00b      	beq.n	8011bbe <xTaskCreateStatic+0x6c>
 8011ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011baa:	b672      	cpsid	i
 8011bac:	f383 8811 	msr	BASEPRI, r3
 8011bb0:	f3bf 8f6f 	isb	sy
 8011bb4:	f3bf 8f4f 	dsb	sy
 8011bb8:	b662      	cpsie	i
 8011bba:	61bb      	str	r3, [r7, #24]
 8011bbc:	e7fe      	b.n	8011bbc <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011bbe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d01e      	beq.n	8011c04 <xTaskCreateStatic+0xb2>
 8011bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d01b      	beq.n	8011c04 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011bd4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd8:	2202      	movs	r2, #2
 8011bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011bde:	2300      	movs	r3, #0
 8011be0:	9303      	str	r3, [sp, #12]
 8011be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be4:	9302      	str	r3, [sp, #8]
 8011be6:	f107 0314 	add.w	r3, r7, #20
 8011bea:	9301      	str	r3, [sp, #4]
 8011bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bee:	9300      	str	r3, [sp, #0]
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	687a      	ldr	r2, [r7, #4]
 8011bf4:	68b9      	ldr	r1, [r7, #8]
 8011bf6:	68f8      	ldr	r0, [r7, #12]
 8011bf8:	f000 f850 	bl	8011c9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011bfe:	f000 f8d5 	bl	8011dac <prvAddNewTaskToReadyList>
 8011c02:	e001      	b.n	8011c08 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8011c04:	2300      	movs	r3, #0
 8011c06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011c08:	697b      	ldr	r3, [r7, #20]
	}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3728      	adds	r7, #40	; 0x28
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}

08011c12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011c12:	b580      	push	{r7, lr}
 8011c14:	b08c      	sub	sp, #48	; 0x30
 8011c16:	af04      	add	r7, sp, #16
 8011c18:	60f8      	str	r0, [r7, #12]
 8011c1a:	60b9      	str	r1, [r7, #8]
 8011c1c:	603b      	str	r3, [r7, #0]
 8011c1e:	4613      	mov	r3, r2
 8011c20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011c22:	88fb      	ldrh	r3, [r7, #6]
 8011c24:	009b      	lsls	r3, r3, #2
 8011c26:	4618      	mov	r0, r3
 8011c28:	f001 f9f0 	bl	801300c <pvPortMalloc>
 8011c2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011c2e:	697b      	ldr	r3, [r7, #20]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d00e      	beq.n	8011c52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011c34:	2054      	movs	r0, #84	; 0x54
 8011c36:	f001 f9e9 	bl	801300c <pvPortMalloc>
 8011c3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011c3c:	69fb      	ldr	r3, [r7, #28]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d003      	beq.n	8011c4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011c42:	69fb      	ldr	r3, [r7, #28]
 8011c44:	697a      	ldr	r2, [r7, #20]
 8011c46:	631a      	str	r2, [r3, #48]	; 0x30
 8011c48:	e005      	b.n	8011c56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011c4a:	6978      	ldr	r0, [r7, #20]
 8011c4c:	f001 faa6 	bl	801319c <vPortFree>
 8011c50:	e001      	b.n	8011c56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011c52:	2300      	movs	r3, #0
 8011c54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011c56:	69fb      	ldr	r3, [r7, #28]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d017      	beq.n	8011c8c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011c5c:	69fb      	ldr	r3, [r7, #28]
 8011c5e:	2200      	movs	r2, #0
 8011c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011c64:	88fa      	ldrh	r2, [r7, #6]
 8011c66:	2300      	movs	r3, #0
 8011c68:	9303      	str	r3, [sp, #12]
 8011c6a:	69fb      	ldr	r3, [r7, #28]
 8011c6c:	9302      	str	r3, [sp, #8]
 8011c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c70:	9301      	str	r3, [sp, #4]
 8011c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c74:	9300      	str	r3, [sp, #0]
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	68b9      	ldr	r1, [r7, #8]
 8011c7a:	68f8      	ldr	r0, [r7, #12]
 8011c7c:	f000 f80e 	bl	8011c9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011c80:	69f8      	ldr	r0, [r7, #28]
 8011c82:	f000 f893 	bl	8011dac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011c86:	2301      	movs	r3, #1
 8011c88:	61bb      	str	r3, [r7, #24]
 8011c8a:	e002      	b.n	8011c92 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011c92:	69bb      	ldr	r3, [r7, #24]
	}
 8011c94:	4618      	mov	r0, r3
 8011c96:	3720      	adds	r7, #32
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}

08011c9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b088      	sub	sp, #32
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	60f8      	str	r0, [r7, #12]
 8011ca4:	60b9      	str	r1, [r7, #8]
 8011ca6:	607a      	str	r2, [r7, #4]
 8011ca8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011cae:	6879      	ldr	r1, [r7, #4]
 8011cb0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011cb4:	440b      	add	r3, r1
 8011cb6:	009b      	lsls	r3, r3, #2
 8011cb8:	4413      	add	r3, r2
 8011cba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011cbc:	69bb      	ldr	r3, [r7, #24]
 8011cbe:	f023 0307 	bic.w	r3, r3, #7
 8011cc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011cc4:	69bb      	ldr	r3, [r7, #24]
 8011cc6:	f003 0307 	and.w	r3, r3, #7
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d00b      	beq.n	8011ce6 <prvInitialiseNewTask+0x4a>
 8011cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cd2:	b672      	cpsid	i
 8011cd4:	f383 8811 	msr	BASEPRI, r3
 8011cd8:	f3bf 8f6f 	isb	sy
 8011cdc:	f3bf 8f4f 	dsb	sy
 8011ce0:	b662      	cpsie	i
 8011ce2:	617b      	str	r3, [r7, #20]
 8011ce4:	e7fe      	b.n	8011ce4 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d01f      	beq.n	8011d2c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011cec:	2300      	movs	r3, #0
 8011cee:	61fb      	str	r3, [r7, #28]
 8011cf0:	e012      	b.n	8011d18 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011cf2:	68ba      	ldr	r2, [r7, #8]
 8011cf4:	69fb      	ldr	r3, [r7, #28]
 8011cf6:	4413      	add	r3, r2
 8011cf8:	7819      	ldrb	r1, [r3, #0]
 8011cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011cfc:	69fb      	ldr	r3, [r7, #28]
 8011cfe:	4413      	add	r3, r2
 8011d00:	3334      	adds	r3, #52	; 0x34
 8011d02:	460a      	mov	r2, r1
 8011d04:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011d06:	68ba      	ldr	r2, [r7, #8]
 8011d08:	69fb      	ldr	r3, [r7, #28]
 8011d0a:	4413      	add	r3, r2
 8011d0c:	781b      	ldrb	r3, [r3, #0]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d006      	beq.n	8011d20 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011d12:	69fb      	ldr	r3, [r7, #28]
 8011d14:	3301      	adds	r3, #1
 8011d16:	61fb      	str	r3, [r7, #28]
 8011d18:	69fb      	ldr	r3, [r7, #28]
 8011d1a:	2b0f      	cmp	r3, #15
 8011d1c:	d9e9      	bls.n	8011cf2 <prvInitialiseNewTask+0x56>
 8011d1e:	e000      	b.n	8011d22 <prvInitialiseNewTask+0x86>
			{
				break;
 8011d20:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d24:	2200      	movs	r2, #0
 8011d26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011d2a:	e003      	b.n	8011d34 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d2e:	2200      	movs	r2, #0
 8011d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d36:	2b06      	cmp	r3, #6
 8011d38:	d901      	bls.n	8011d3e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011d3a:	2306      	movs	r3, #6
 8011d3c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d42:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d48:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d52:	3304      	adds	r3, #4
 8011d54:	4618      	mov	r0, r3
 8011d56:	f7fe ff07 	bl	8010b68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d5c:	3318      	adds	r3, #24
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f7fe ff02 	bl	8010b68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d6c:	f1c3 0207 	rsb	r2, r3, #7
 8011d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d78:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d82:	2200      	movs	r2, #0
 8011d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011d88:	683a      	ldr	r2, [r7, #0]
 8011d8a:	68f9      	ldr	r1, [r7, #12]
 8011d8c:	69b8      	ldr	r0, [r7, #24]
 8011d8e:	f000 ff13 	bl	8012bb8 <pxPortInitialiseStack>
 8011d92:	4602      	mov	r2, r0
 8011d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d96:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d002      	beq.n	8011da4 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011da2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011da4:	bf00      	nop
 8011da6:	3720      	adds	r7, #32
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}

08011dac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b082      	sub	sp, #8
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011db4:	f001 f808 	bl	8012dc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011db8:	4b2a      	ldr	r3, [pc, #168]	; (8011e64 <prvAddNewTaskToReadyList+0xb8>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	3301      	adds	r3, #1
 8011dbe:	4a29      	ldr	r2, [pc, #164]	; (8011e64 <prvAddNewTaskToReadyList+0xb8>)
 8011dc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011dc2:	4b29      	ldr	r3, [pc, #164]	; (8011e68 <prvAddNewTaskToReadyList+0xbc>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d109      	bne.n	8011dde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011dca:	4a27      	ldr	r2, [pc, #156]	; (8011e68 <prvAddNewTaskToReadyList+0xbc>)
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011dd0:	4b24      	ldr	r3, [pc, #144]	; (8011e64 <prvAddNewTaskToReadyList+0xb8>)
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	2b01      	cmp	r3, #1
 8011dd6:	d110      	bne.n	8011dfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011dd8:	f000 fbf6 	bl	80125c8 <prvInitialiseTaskLists>
 8011ddc:	e00d      	b.n	8011dfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011dde:	4b23      	ldr	r3, [pc, #140]	; (8011e6c <prvAddNewTaskToReadyList+0xc0>)
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d109      	bne.n	8011dfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011de6:	4b20      	ldr	r3, [pc, #128]	; (8011e68 <prvAddNewTaskToReadyList+0xbc>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011df0:	429a      	cmp	r2, r3
 8011df2:	d802      	bhi.n	8011dfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011df4:	4a1c      	ldr	r2, [pc, #112]	; (8011e68 <prvAddNewTaskToReadyList+0xbc>)
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011dfa:	4b1d      	ldr	r3, [pc, #116]	; (8011e70 <prvAddNewTaskToReadyList+0xc4>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	3301      	adds	r3, #1
 8011e00:	4a1b      	ldr	r2, [pc, #108]	; (8011e70 <prvAddNewTaskToReadyList+0xc4>)
 8011e02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e08:	2201      	movs	r2, #1
 8011e0a:	409a      	lsls	r2, r3
 8011e0c:	4b19      	ldr	r3, [pc, #100]	; (8011e74 <prvAddNewTaskToReadyList+0xc8>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	4313      	orrs	r3, r2
 8011e12:	4a18      	ldr	r2, [pc, #96]	; (8011e74 <prvAddNewTaskToReadyList+0xc8>)
 8011e14:	6013      	str	r3, [r2, #0]
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e1a:	4613      	mov	r3, r2
 8011e1c:	009b      	lsls	r3, r3, #2
 8011e1e:	4413      	add	r3, r2
 8011e20:	009b      	lsls	r3, r3, #2
 8011e22:	4a15      	ldr	r2, [pc, #84]	; (8011e78 <prvAddNewTaskToReadyList+0xcc>)
 8011e24:	441a      	add	r2, r3
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	3304      	adds	r3, #4
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	4610      	mov	r0, r2
 8011e2e:	f7fe fea8 	bl	8010b82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011e32:	f000 fffb 	bl	8012e2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011e36:	4b0d      	ldr	r3, [pc, #52]	; (8011e6c <prvAddNewTaskToReadyList+0xc0>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d00e      	beq.n	8011e5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011e3e:	4b0a      	ldr	r3, [pc, #40]	; (8011e68 <prvAddNewTaskToReadyList+0xbc>)
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	d207      	bcs.n	8011e5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011e4c:	4b0b      	ldr	r3, [pc, #44]	; (8011e7c <prvAddNewTaskToReadyList+0xd0>)
 8011e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e52:	601a      	str	r2, [r3, #0]
 8011e54:	f3bf 8f4f 	dsb	sy
 8011e58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011e5c:	bf00      	nop
 8011e5e:	3708      	adds	r7, #8
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}
 8011e64:	20000448 	.word	0x20000448
 8011e68:	20000348 	.word	0x20000348
 8011e6c:	20000454 	.word	0x20000454
 8011e70:	20000464 	.word	0x20000464
 8011e74:	20000450 	.word	0x20000450
 8011e78:	2000034c 	.word	0x2000034c
 8011e7c:	e000ed04 	.word	0xe000ed04

08011e80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b084      	sub	sp, #16
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011e88:	2300      	movs	r3, #0
 8011e8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d018      	beq.n	8011ec4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011e92:	4b14      	ldr	r3, [pc, #80]	; (8011ee4 <vTaskDelay+0x64>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d00b      	beq.n	8011eb2 <vTaskDelay+0x32>
 8011e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e9e:	b672      	cpsid	i
 8011ea0:	f383 8811 	msr	BASEPRI, r3
 8011ea4:	f3bf 8f6f 	isb	sy
 8011ea8:	f3bf 8f4f 	dsb	sy
 8011eac:	b662      	cpsie	i
 8011eae:	60bb      	str	r3, [r7, #8]
 8011eb0:	e7fe      	b.n	8011eb0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8011eb2:	f000 f87d 	bl	8011fb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011eb6:	2100      	movs	r1, #0
 8011eb8:	6878      	ldr	r0, [r7, #4]
 8011eba:	f000 fe17 	bl	8012aec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011ebe:	f000 f885 	bl	8011fcc <xTaskResumeAll>
 8011ec2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d107      	bne.n	8011eda <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8011eca:	4b07      	ldr	r3, [pc, #28]	; (8011ee8 <vTaskDelay+0x68>)
 8011ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ed0:	601a      	str	r2, [r3, #0]
 8011ed2:	f3bf 8f4f 	dsb	sy
 8011ed6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011eda:	bf00      	nop
 8011edc:	3710      	adds	r7, #16
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bd80      	pop	{r7, pc}
 8011ee2:	bf00      	nop
 8011ee4:	20000470 	.word	0x20000470
 8011ee8:	e000ed04 	.word	0xe000ed04

08011eec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b08a      	sub	sp, #40	; 0x28
 8011ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011efa:	463a      	mov	r2, r7
 8011efc:	1d39      	adds	r1, r7, #4
 8011efe:	f107 0308 	add.w	r3, r7, #8
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7f6 fcac 	bl	8008860 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011f08:	6839      	ldr	r1, [r7, #0]
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	68ba      	ldr	r2, [r7, #8]
 8011f0e:	9202      	str	r2, [sp, #8]
 8011f10:	9301      	str	r3, [sp, #4]
 8011f12:	2300      	movs	r3, #0
 8011f14:	9300      	str	r3, [sp, #0]
 8011f16:	2300      	movs	r3, #0
 8011f18:	460a      	mov	r2, r1
 8011f1a:	491f      	ldr	r1, [pc, #124]	; (8011f98 <vTaskStartScheduler+0xac>)
 8011f1c:	481f      	ldr	r0, [pc, #124]	; (8011f9c <vTaskStartScheduler+0xb0>)
 8011f1e:	f7ff fe18 	bl	8011b52 <xTaskCreateStatic>
 8011f22:	4602      	mov	r2, r0
 8011f24:	4b1e      	ldr	r3, [pc, #120]	; (8011fa0 <vTaskStartScheduler+0xb4>)
 8011f26:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011f28:	4b1d      	ldr	r3, [pc, #116]	; (8011fa0 <vTaskStartScheduler+0xb4>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d002      	beq.n	8011f36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011f30:	2301      	movs	r3, #1
 8011f32:	617b      	str	r3, [r7, #20]
 8011f34:	e001      	b.n	8011f3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011f36:	2300      	movs	r3, #0
 8011f38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	2b01      	cmp	r3, #1
 8011f3e:	d117      	bne.n	8011f70 <vTaskStartScheduler+0x84>
 8011f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f44:	b672      	cpsid	i
 8011f46:	f383 8811 	msr	BASEPRI, r3
 8011f4a:	f3bf 8f6f 	isb	sy
 8011f4e:	f3bf 8f4f 	dsb	sy
 8011f52:	b662      	cpsie	i
 8011f54:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011f56:	4b13      	ldr	r3, [pc, #76]	; (8011fa4 <vTaskStartScheduler+0xb8>)
 8011f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011f5e:	4b12      	ldr	r3, [pc, #72]	; (8011fa8 <vTaskStartScheduler+0xbc>)
 8011f60:	2201      	movs	r2, #1
 8011f62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011f64:	4b11      	ldr	r3, [pc, #68]	; (8011fac <vTaskStartScheduler+0xc0>)
 8011f66:	2200      	movs	r2, #0
 8011f68:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011f6a:	f000 feb1 	bl	8012cd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011f6e:	e00f      	b.n	8011f90 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011f70:	697b      	ldr	r3, [r7, #20]
 8011f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011f76:	d10b      	bne.n	8011f90 <vTaskStartScheduler+0xa4>
 8011f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f7c:	b672      	cpsid	i
 8011f7e:	f383 8811 	msr	BASEPRI, r3
 8011f82:	f3bf 8f6f 	isb	sy
 8011f86:	f3bf 8f4f 	dsb	sy
 8011f8a:	b662      	cpsie	i
 8011f8c:	60fb      	str	r3, [r7, #12]
 8011f8e:	e7fe      	b.n	8011f8e <vTaskStartScheduler+0xa2>
}
 8011f90:	bf00      	nop
 8011f92:	3718      	adds	r7, #24
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}
 8011f98:	0801fee0 	.word	0x0801fee0
 8011f9c:	08012599 	.word	0x08012599
 8011fa0:	2000046c 	.word	0x2000046c
 8011fa4:	20000468 	.word	0x20000468
 8011fa8:	20000454 	.word	0x20000454
 8011fac:	2000044c 	.word	0x2000044c

08011fb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011fb0:	b480      	push	{r7}
 8011fb2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011fb4:	4b04      	ldr	r3, [pc, #16]	; (8011fc8 <vTaskSuspendAll+0x18>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	3301      	adds	r3, #1
 8011fba:	4a03      	ldr	r2, [pc, #12]	; (8011fc8 <vTaskSuspendAll+0x18>)
 8011fbc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011fbe:	bf00      	nop
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc6:	4770      	bx	lr
 8011fc8:	20000470 	.word	0x20000470

08011fcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b084      	sub	sp, #16
 8011fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011fda:	4b42      	ldr	r3, [pc, #264]	; (80120e4 <xTaskResumeAll+0x118>)
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d10b      	bne.n	8011ffa <xTaskResumeAll+0x2e>
 8011fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fe6:	b672      	cpsid	i
 8011fe8:	f383 8811 	msr	BASEPRI, r3
 8011fec:	f3bf 8f6f 	isb	sy
 8011ff0:	f3bf 8f4f 	dsb	sy
 8011ff4:	b662      	cpsie	i
 8011ff6:	603b      	str	r3, [r7, #0]
 8011ff8:	e7fe      	b.n	8011ff8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011ffa:	f000 fee5 	bl	8012dc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011ffe:	4b39      	ldr	r3, [pc, #228]	; (80120e4 <xTaskResumeAll+0x118>)
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	3b01      	subs	r3, #1
 8012004:	4a37      	ldr	r2, [pc, #220]	; (80120e4 <xTaskResumeAll+0x118>)
 8012006:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012008:	4b36      	ldr	r3, [pc, #216]	; (80120e4 <xTaskResumeAll+0x118>)
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d161      	bne.n	80120d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012010:	4b35      	ldr	r3, [pc, #212]	; (80120e8 <xTaskResumeAll+0x11c>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d05d      	beq.n	80120d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012018:	e02e      	b.n	8012078 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801201a:	4b34      	ldr	r3, [pc, #208]	; (80120ec <xTaskResumeAll+0x120>)
 801201c:	68db      	ldr	r3, [r3, #12]
 801201e:	68db      	ldr	r3, [r3, #12]
 8012020:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	3318      	adds	r3, #24
 8012026:	4618      	mov	r0, r3
 8012028:	f7fe fe08 	bl	8010c3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	3304      	adds	r3, #4
 8012030:	4618      	mov	r0, r3
 8012032:	f7fe fe03 	bl	8010c3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801203a:	2201      	movs	r2, #1
 801203c:	409a      	lsls	r2, r3
 801203e:	4b2c      	ldr	r3, [pc, #176]	; (80120f0 <xTaskResumeAll+0x124>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	4313      	orrs	r3, r2
 8012044:	4a2a      	ldr	r2, [pc, #168]	; (80120f0 <xTaskResumeAll+0x124>)
 8012046:	6013      	str	r3, [r2, #0]
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801204c:	4613      	mov	r3, r2
 801204e:	009b      	lsls	r3, r3, #2
 8012050:	4413      	add	r3, r2
 8012052:	009b      	lsls	r3, r3, #2
 8012054:	4a27      	ldr	r2, [pc, #156]	; (80120f4 <xTaskResumeAll+0x128>)
 8012056:	441a      	add	r2, r3
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	3304      	adds	r3, #4
 801205c:	4619      	mov	r1, r3
 801205e:	4610      	mov	r0, r2
 8012060:	f7fe fd8f 	bl	8010b82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012068:	4b23      	ldr	r3, [pc, #140]	; (80120f8 <xTaskResumeAll+0x12c>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801206e:	429a      	cmp	r2, r3
 8012070:	d302      	bcc.n	8012078 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012072:	4b22      	ldr	r3, [pc, #136]	; (80120fc <xTaskResumeAll+0x130>)
 8012074:	2201      	movs	r2, #1
 8012076:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012078:	4b1c      	ldr	r3, [pc, #112]	; (80120ec <xTaskResumeAll+0x120>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d1cc      	bne.n	801201a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d001      	beq.n	801208a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012086:	f000 fb3b 	bl	8012700 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801208a:	4b1d      	ldr	r3, [pc, #116]	; (8012100 <xTaskResumeAll+0x134>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d010      	beq.n	80120b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012096:	f000 f859 	bl	801214c <xTaskIncrementTick>
 801209a:	4603      	mov	r3, r0
 801209c:	2b00      	cmp	r3, #0
 801209e:	d002      	beq.n	80120a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80120a0:	4b16      	ldr	r3, [pc, #88]	; (80120fc <xTaskResumeAll+0x130>)
 80120a2:	2201      	movs	r2, #1
 80120a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	3b01      	subs	r3, #1
 80120aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d1f1      	bne.n	8012096 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80120b2:	4b13      	ldr	r3, [pc, #76]	; (8012100 <xTaskResumeAll+0x134>)
 80120b4:	2200      	movs	r2, #0
 80120b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80120b8:	4b10      	ldr	r3, [pc, #64]	; (80120fc <xTaskResumeAll+0x130>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d009      	beq.n	80120d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80120c0:	2301      	movs	r3, #1
 80120c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80120c4:	4b0f      	ldr	r3, [pc, #60]	; (8012104 <xTaskResumeAll+0x138>)
 80120c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120ca:	601a      	str	r2, [r3, #0]
 80120cc:	f3bf 8f4f 	dsb	sy
 80120d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80120d4:	f000 feaa 	bl	8012e2c <vPortExitCritical>

	return xAlreadyYielded;
 80120d8:	68bb      	ldr	r3, [r7, #8]
}
 80120da:	4618      	mov	r0, r3
 80120dc:	3710      	adds	r7, #16
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}
 80120e2:	bf00      	nop
 80120e4:	20000470 	.word	0x20000470
 80120e8:	20000448 	.word	0x20000448
 80120ec:	20000408 	.word	0x20000408
 80120f0:	20000450 	.word	0x20000450
 80120f4:	2000034c 	.word	0x2000034c
 80120f8:	20000348 	.word	0x20000348
 80120fc:	2000045c 	.word	0x2000045c
 8012100:	20000458 	.word	0x20000458
 8012104:	e000ed04 	.word	0xe000ed04

08012108 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012108:	b480      	push	{r7}
 801210a:	b083      	sub	sp, #12
 801210c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801210e:	4b05      	ldr	r3, [pc, #20]	; (8012124 <xTaskGetTickCount+0x1c>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012114:	687b      	ldr	r3, [r7, #4]
}
 8012116:	4618      	mov	r0, r3
 8012118:	370c      	adds	r7, #12
 801211a:	46bd      	mov	sp, r7
 801211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012120:	4770      	bx	lr
 8012122:	bf00      	nop
 8012124:	2000044c 	.word	0x2000044c

08012128 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801212e:	f000 ff2b 	bl	8012f88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012132:	2300      	movs	r3, #0
 8012134:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8012136:	4b04      	ldr	r3, [pc, #16]	; (8012148 <xTaskGetTickCountFromISR+0x20>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801213c:	683b      	ldr	r3, [r7, #0]
}
 801213e:	4618      	mov	r0, r3
 8012140:	3708      	adds	r7, #8
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}
 8012146:	bf00      	nop
 8012148:	2000044c 	.word	0x2000044c

0801214c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b086      	sub	sp, #24
 8012150:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012152:	2300      	movs	r3, #0
 8012154:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012156:	4b4f      	ldr	r3, [pc, #316]	; (8012294 <xTaskIncrementTick+0x148>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	2b00      	cmp	r3, #0
 801215c:	f040 8089 	bne.w	8012272 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012160:	4b4d      	ldr	r3, [pc, #308]	; (8012298 <xTaskIncrementTick+0x14c>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	3301      	adds	r3, #1
 8012166:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012168:	4a4b      	ldr	r2, [pc, #300]	; (8012298 <xTaskIncrementTick+0x14c>)
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801216e:	693b      	ldr	r3, [r7, #16]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d121      	bne.n	80121b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8012174:	4b49      	ldr	r3, [pc, #292]	; (801229c <xTaskIncrementTick+0x150>)
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d00b      	beq.n	8012196 <xTaskIncrementTick+0x4a>
 801217e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012182:	b672      	cpsid	i
 8012184:	f383 8811 	msr	BASEPRI, r3
 8012188:	f3bf 8f6f 	isb	sy
 801218c:	f3bf 8f4f 	dsb	sy
 8012190:	b662      	cpsie	i
 8012192:	603b      	str	r3, [r7, #0]
 8012194:	e7fe      	b.n	8012194 <xTaskIncrementTick+0x48>
 8012196:	4b41      	ldr	r3, [pc, #260]	; (801229c <xTaskIncrementTick+0x150>)
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	60fb      	str	r3, [r7, #12]
 801219c:	4b40      	ldr	r3, [pc, #256]	; (80122a0 <xTaskIncrementTick+0x154>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	4a3e      	ldr	r2, [pc, #248]	; (801229c <xTaskIncrementTick+0x150>)
 80121a2:	6013      	str	r3, [r2, #0]
 80121a4:	4a3e      	ldr	r2, [pc, #248]	; (80122a0 <xTaskIncrementTick+0x154>)
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	6013      	str	r3, [r2, #0]
 80121aa:	4b3e      	ldr	r3, [pc, #248]	; (80122a4 <xTaskIncrementTick+0x158>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	3301      	adds	r3, #1
 80121b0:	4a3c      	ldr	r2, [pc, #240]	; (80122a4 <xTaskIncrementTick+0x158>)
 80121b2:	6013      	str	r3, [r2, #0]
 80121b4:	f000 faa4 	bl	8012700 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80121b8:	4b3b      	ldr	r3, [pc, #236]	; (80122a8 <xTaskIncrementTick+0x15c>)
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	693a      	ldr	r2, [r7, #16]
 80121be:	429a      	cmp	r2, r3
 80121c0:	d348      	bcc.n	8012254 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80121c2:	4b36      	ldr	r3, [pc, #216]	; (801229c <xTaskIncrementTick+0x150>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d104      	bne.n	80121d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121cc:	4b36      	ldr	r3, [pc, #216]	; (80122a8 <xTaskIncrementTick+0x15c>)
 80121ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80121d2:	601a      	str	r2, [r3, #0]
					break;
 80121d4:	e03e      	b.n	8012254 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121d6:	4b31      	ldr	r3, [pc, #196]	; (801229c <xTaskIncrementTick+0x150>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	68db      	ldr	r3, [r3, #12]
 80121dc:	68db      	ldr	r3, [r3, #12]
 80121de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	685b      	ldr	r3, [r3, #4]
 80121e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80121e6:	693a      	ldr	r2, [r7, #16]
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d203      	bcs.n	80121f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80121ee:	4a2e      	ldr	r2, [pc, #184]	; (80122a8 <xTaskIncrementTick+0x15c>)
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80121f4:	e02e      	b.n	8012254 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	3304      	adds	r3, #4
 80121fa:	4618      	mov	r0, r3
 80121fc:	f7fe fd1e 	bl	8010c3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012204:	2b00      	cmp	r3, #0
 8012206:	d004      	beq.n	8012212 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	3318      	adds	r3, #24
 801220c:	4618      	mov	r0, r3
 801220e:	f7fe fd15 	bl	8010c3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012212:	68bb      	ldr	r3, [r7, #8]
 8012214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012216:	2201      	movs	r2, #1
 8012218:	409a      	lsls	r2, r3
 801221a:	4b24      	ldr	r3, [pc, #144]	; (80122ac <xTaskIncrementTick+0x160>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	4313      	orrs	r3, r2
 8012220:	4a22      	ldr	r2, [pc, #136]	; (80122ac <xTaskIncrementTick+0x160>)
 8012222:	6013      	str	r3, [r2, #0]
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012228:	4613      	mov	r3, r2
 801222a:	009b      	lsls	r3, r3, #2
 801222c:	4413      	add	r3, r2
 801222e:	009b      	lsls	r3, r3, #2
 8012230:	4a1f      	ldr	r2, [pc, #124]	; (80122b0 <xTaskIncrementTick+0x164>)
 8012232:	441a      	add	r2, r3
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	3304      	adds	r3, #4
 8012238:	4619      	mov	r1, r3
 801223a:	4610      	mov	r0, r2
 801223c:	f7fe fca1 	bl	8010b82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012244:	4b1b      	ldr	r3, [pc, #108]	; (80122b4 <xTaskIncrementTick+0x168>)
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801224a:	429a      	cmp	r2, r3
 801224c:	d3b9      	bcc.n	80121c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801224e:	2301      	movs	r3, #1
 8012250:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012252:	e7b6      	b.n	80121c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012254:	4b17      	ldr	r3, [pc, #92]	; (80122b4 <xTaskIncrementTick+0x168>)
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801225a:	4915      	ldr	r1, [pc, #84]	; (80122b0 <xTaskIncrementTick+0x164>)
 801225c:	4613      	mov	r3, r2
 801225e:	009b      	lsls	r3, r3, #2
 8012260:	4413      	add	r3, r2
 8012262:	009b      	lsls	r3, r3, #2
 8012264:	440b      	add	r3, r1
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	2b01      	cmp	r3, #1
 801226a:	d907      	bls.n	801227c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 801226c:	2301      	movs	r3, #1
 801226e:	617b      	str	r3, [r7, #20]
 8012270:	e004      	b.n	801227c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012272:	4b11      	ldr	r3, [pc, #68]	; (80122b8 <xTaskIncrementTick+0x16c>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	3301      	adds	r3, #1
 8012278:	4a0f      	ldr	r2, [pc, #60]	; (80122b8 <xTaskIncrementTick+0x16c>)
 801227a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801227c:	4b0f      	ldr	r3, [pc, #60]	; (80122bc <xTaskIncrementTick+0x170>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d001      	beq.n	8012288 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8012284:	2301      	movs	r3, #1
 8012286:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012288:	697b      	ldr	r3, [r7, #20]
}
 801228a:	4618      	mov	r0, r3
 801228c:	3718      	adds	r7, #24
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}
 8012292:	bf00      	nop
 8012294:	20000470 	.word	0x20000470
 8012298:	2000044c 	.word	0x2000044c
 801229c:	20000400 	.word	0x20000400
 80122a0:	20000404 	.word	0x20000404
 80122a4:	20000460 	.word	0x20000460
 80122a8:	20000468 	.word	0x20000468
 80122ac:	20000450 	.word	0x20000450
 80122b0:	2000034c 	.word	0x2000034c
 80122b4:	20000348 	.word	0x20000348
 80122b8:	20000458 	.word	0x20000458
 80122bc:	2000045c 	.word	0x2000045c

080122c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80122c0:	b480      	push	{r7}
 80122c2:	b087      	sub	sp, #28
 80122c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80122c6:	4b27      	ldr	r3, [pc, #156]	; (8012364 <vTaskSwitchContext+0xa4>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d003      	beq.n	80122d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80122ce:	4b26      	ldr	r3, [pc, #152]	; (8012368 <vTaskSwitchContext+0xa8>)
 80122d0:	2201      	movs	r2, #1
 80122d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80122d4:	e040      	b.n	8012358 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80122d6:	4b24      	ldr	r3, [pc, #144]	; (8012368 <vTaskSwitchContext+0xa8>)
 80122d8:	2200      	movs	r2, #0
 80122da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80122dc:	4b23      	ldr	r3, [pc, #140]	; (801236c <vTaskSwitchContext+0xac>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	fab3 f383 	clz	r3, r3
 80122e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80122ea:	7afb      	ldrb	r3, [r7, #11]
 80122ec:	f1c3 031f 	rsb	r3, r3, #31
 80122f0:	617b      	str	r3, [r7, #20]
 80122f2:	491f      	ldr	r1, [pc, #124]	; (8012370 <vTaskSwitchContext+0xb0>)
 80122f4:	697a      	ldr	r2, [r7, #20]
 80122f6:	4613      	mov	r3, r2
 80122f8:	009b      	lsls	r3, r3, #2
 80122fa:	4413      	add	r3, r2
 80122fc:	009b      	lsls	r3, r3, #2
 80122fe:	440b      	add	r3, r1
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d10b      	bne.n	801231e <vTaskSwitchContext+0x5e>
	__asm volatile
 8012306:	f04f 0350 	mov.w	r3, #80	; 0x50
 801230a:	b672      	cpsid	i
 801230c:	f383 8811 	msr	BASEPRI, r3
 8012310:	f3bf 8f6f 	isb	sy
 8012314:	f3bf 8f4f 	dsb	sy
 8012318:	b662      	cpsie	i
 801231a:	607b      	str	r3, [r7, #4]
 801231c:	e7fe      	b.n	801231c <vTaskSwitchContext+0x5c>
 801231e:	697a      	ldr	r2, [r7, #20]
 8012320:	4613      	mov	r3, r2
 8012322:	009b      	lsls	r3, r3, #2
 8012324:	4413      	add	r3, r2
 8012326:	009b      	lsls	r3, r3, #2
 8012328:	4a11      	ldr	r2, [pc, #68]	; (8012370 <vTaskSwitchContext+0xb0>)
 801232a:	4413      	add	r3, r2
 801232c:	613b      	str	r3, [r7, #16]
 801232e:	693b      	ldr	r3, [r7, #16]
 8012330:	685b      	ldr	r3, [r3, #4]
 8012332:	685a      	ldr	r2, [r3, #4]
 8012334:	693b      	ldr	r3, [r7, #16]
 8012336:	605a      	str	r2, [r3, #4]
 8012338:	693b      	ldr	r3, [r7, #16]
 801233a:	685a      	ldr	r2, [r3, #4]
 801233c:	693b      	ldr	r3, [r7, #16]
 801233e:	3308      	adds	r3, #8
 8012340:	429a      	cmp	r2, r3
 8012342:	d104      	bne.n	801234e <vTaskSwitchContext+0x8e>
 8012344:	693b      	ldr	r3, [r7, #16]
 8012346:	685b      	ldr	r3, [r3, #4]
 8012348:	685a      	ldr	r2, [r3, #4]
 801234a:	693b      	ldr	r3, [r7, #16]
 801234c:	605a      	str	r2, [r3, #4]
 801234e:	693b      	ldr	r3, [r7, #16]
 8012350:	685b      	ldr	r3, [r3, #4]
 8012352:	68db      	ldr	r3, [r3, #12]
 8012354:	4a07      	ldr	r2, [pc, #28]	; (8012374 <vTaskSwitchContext+0xb4>)
 8012356:	6013      	str	r3, [r2, #0]
}
 8012358:	bf00      	nop
 801235a:	371c      	adds	r7, #28
 801235c:	46bd      	mov	sp, r7
 801235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012362:	4770      	bx	lr
 8012364:	20000470 	.word	0x20000470
 8012368:	2000045c 	.word	0x2000045c
 801236c:	20000450 	.word	0x20000450
 8012370:	2000034c 	.word	0x2000034c
 8012374:	20000348 	.word	0x20000348

08012378 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b084      	sub	sp, #16
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
 8012380:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d10b      	bne.n	80123a0 <vTaskPlaceOnEventList+0x28>
 8012388:	f04f 0350 	mov.w	r3, #80	; 0x50
 801238c:	b672      	cpsid	i
 801238e:	f383 8811 	msr	BASEPRI, r3
 8012392:	f3bf 8f6f 	isb	sy
 8012396:	f3bf 8f4f 	dsb	sy
 801239a:	b662      	cpsie	i
 801239c:	60fb      	str	r3, [r7, #12]
 801239e:	e7fe      	b.n	801239e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80123a0:	4b07      	ldr	r3, [pc, #28]	; (80123c0 <vTaskPlaceOnEventList+0x48>)
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	3318      	adds	r3, #24
 80123a6:	4619      	mov	r1, r3
 80123a8:	6878      	ldr	r0, [r7, #4]
 80123aa:	f7fe fc0e 	bl	8010bca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80123ae:	2101      	movs	r1, #1
 80123b0:	6838      	ldr	r0, [r7, #0]
 80123b2:	f000 fb9b 	bl	8012aec <prvAddCurrentTaskToDelayedList>
}
 80123b6:	bf00      	nop
 80123b8:	3710      	adds	r7, #16
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}
 80123be:	bf00      	nop
 80123c0:	20000348 	.word	0x20000348

080123c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b086      	sub	sp, #24
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	68db      	ldr	r3, [r3, #12]
 80123d0:	68db      	ldr	r3, [r3, #12]
 80123d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80123d4:	693b      	ldr	r3, [r7, #16]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d10b      	bne.n	80123f2 <xTaskRemoveFromEventList+0x2e>
 80123da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123de:	b672      	cpsid	i
 80123e0:	f383 8811 	msr	BASEPRI, r3
 80123e4:	f3bf 8f6f 	isb	sy
 80123e8:	f3bf 8f4f 	dsb	sy
 80123ec:	b662      	cpsie	i
 80123ee:	60fb      	str	r3, [r7, #12]
 80123f0:	e7fe      	b.n	80123f0 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80123f2:	693b      	ldr	r3, [r7, #16]
 80123f4:	3318      	adds	r3, #24
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7fe fc20 	bl	8010c3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80123fc:	4b1d      	ldr	r3, [pc, #116]	; (8012474 <xTaskRemoveFromEventList+0xb0>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d11c      	bne.n	801243e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012404:	693b      	ldr	r3, [r7, #16]
 8012406:	3304      	adds	r3, #4
 8012408:	4618      	mov	r0, r3
 801240a:	f7fe fc17 	bl	8010c3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801240e:	693b      	ldr	r3, [r7, #16]
 8012410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012412:	2201      	movs	r2, #1
 8012414:	409a      	lsls	r2, r3
 8012416:	4b18      	ldr	r3, [pc, #96]	; (8012478 <xTaskRemoveFromEventList+0xb4>)
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	4313      	orrs	r3, r2
 801241c:	4a16      	ldr	r2, [pc, #88]	; (8012478 <xTaskRemoveFromEventList+0xb4>)
 801241e:	6013      	str	r3, [r2, #0]
 8012420:	693b      	ldr	r3, [r7, #16]
 8012422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012424:	4613      	mov	r3, r2
 8012426:	009b      	lsls	r3, r3, #2
 8012428:	4413      	add	r3, r2
 801242a:	009b      	lsls	r3, r3, #2
 801242c:	4a13      	ldr	r2, [pc, #76]	; (801247c <xTaskRemoveFromEventList+0xb8>)
 801242e:	441a      	add	r2, r3
 8012430:	693b      	ldr	r3, [r7, #16]
 8012432:	3304      	adds	r3, #4
 8012434:	4619      	mov	r1, r3
 8012436:	4610      	mov	r0, r2
 8012438:	f7fe fba3 	bl	8010b82 <vListInsertEnd>
 801243c:	e005      	b.n	801244a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801243e:	693b      	ldr	r3, [r7, #16]
 8012440:	3318      	adds	r3, #24
 8012442:	4619      	mov	r1, r3
 8012444:	480e      	ldr	r0, [pc, #56]	; (8012480 <xTaskRemoveFromEventList+0xbc>)
 8012446:	f7fe fb9c 	bl	8010b82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801244a:	693b      	ldr	r3, [r7, #16]
 801244c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801244e:	4b0d      	ldr	r3, [pc, #52]	; (8012484 <xTaskRemoveFromEventList+0xc0>)
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012454:	429a      	cmp	r2, r3
 8012456:	d905      	bls.n	8012464 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012458:	2301      	movs	r3, #1
 801245a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801245c:	4b0a      	ldr	r3, [pc, #40]	; (8012488 <xTaskRemoveFromEventList+0xc4>)
 801245e:	2201      	movs	r2, #1
 8012460:	601a      	str	r2, [r3, #0]
 8012462:	e001      	b.n	8012468 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012464:	2300      	movs	r3, #0
 8012466:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012468:	697b      	ldr	r3, [r7, #20]
}
 801246a:	4618      	mov	r0, r3
 801246c:	3718      	adds	r7, #24
 801246e:	46bd      	mov	sp, r7
 8012470:	bd80      	pop	{r7, pc}
 8012472:	bf00      	nop
 8012474:	20000470 	.word	0x20000470
 8012478:	20000450 	.word	0x20000450
 801247c:	2000034c 	.word	0x2000034c
 8012480:	20000408 	.word	0x20000408
 8012484:	20000348 	.word	0x20000348
 8012488:	2000045c 	.word	0x2000045c

0801248c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801248c:	b480      	push	{r7}
 801248e:	b083      	sub	sp, #12
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012494:	4b06      	ldr	r3, [pc, #24]	; (80124b0 <vTaskInternalSetTimeOutState+0x24>)
 8012496:	681a      	ldr	r2, [r3, #0]
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801249c:	4b05      	ldr	r3, [pc, #20]	; (80124b4 <vTaskInternalSetTimeOutState+0x28>)
 801249e:	681a      	ldr	r2, [r3, #0]
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	605a      	str	r2, [r3, #4]
}
 80124a4:	bf00      	nop
 80124a6:	370c      	adds	r7, #12
 80124a8:	46bd      	mov	sp, r7
 80124aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ae:	4770      	bx	lr
 80124b0:	20000460 	.word	0x20000460
 80124b4:	2000044c 	.word	0x2000044c

080124b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b088      	sub	sp, #32
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d10b      	bne.n	80124e0 <xTaskCheckForTimeOut+0x28>
 80124c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124cc:	b672      	cpsid	i
 80124ce:	f383 8811 	msr	BASEPRI, r3
 80124d2:	f3bf 8f6f 	isb	sy
 80124d6:	f3bf 8f4f 	dsb	sy
 80124da:	b662      	cpsie	i
 80124dc:	613b      	str	r3, [r7, #16]
 80124de:	e7fe      	b.n	80124de <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d10b      	bne.n	80124fe <xTaskCheckForTimeOut+0x46>
 80124e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ea:	b672      	cpsid	i
 80124ec:	f383 8811 	msr	BASEPRI, r3
 80124f0:	f3bf 8f6f 	isb	sy
 80124f4:	f3bf 8f4f 	dsb	sy
 80124f8:	b662      	cpsie	i
 80124fa:	60fb      	str	r3, [r7, #12]
 80124fc:	e7fe      	b.n	80124fc <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80124fe:	f000 fc63 	bl	8012dc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012502:	4b1d      	ldr	r3, [pc, #116]	; (8012578 <xTaskCheckForTimeOut+0xc0>)
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	685b      	ldr	r3, [r3, #4]
 801250c:	69ba      	ldr	r2, [r7, #24]
 801250e:	1ad3      	subs	r3, r2, r3
 8012510:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801251a:	d102      	bne.n	8012522 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801251c:	2300      	movs	r3, #0
 801251e:	61fb      	str	r3, [r7, #28]
 8012520:	e023      	b.n	801256a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	681a      	ldr	r2, [r3, #0]
 8012526:	4b15      	ldr	r3, [pc, #84]	; (801257c <xTaskCheckForTimeOut+0xc4>)
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	429a      	cmp	r2, r3
 801252c:	d007      	beq.n	801253e <xTaskCheckForTimeOut+0x86>
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	685b      	ldr	r3, [r3, #4]
 8012532:	69ba      	ldr	r2, [r7, #24]
 8012534:	429a      	cmp	r2, r3
 8012536:	d302      	bcc.n	801253e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012538:	2301      	movs	r3, #1
 801253a:	61fb      	str	r3, [r7, #28]
 801253c:	e015      	b.n	801256a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	697a      	ldr	r2, [r7, #20]
 8012544:	429a      	cmp	r2, r3
 8012546:	d20b      	bcs.n	8012560 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	681a      	ldr	r2, [r3, #0]
 801254c:	697b      	ldr	r3, [r7, #20]
 801254e:	1ad2      	subs	r2, r2, r3
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012554:	6878      	ldr	r0, [r7, #4]
 8012556:	f7ff ff99 	bl	801248c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801255a:	2300      	movs	r3, #0
 801255c:	61fb      	str	r3, [r7, #28]
 801255e:	e004      	b.n	801256a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	2200      	movs	r2, #0
 8012564:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012566:	2301      	movs	r3, #1
 8012568:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801256a:	f000 fc5f 	bl	8012e2c <vPortExitCritical>

	return xReturn;
 801256e:	69fb      	ldr	r3, [r7, #28]
}
 8012570:	4618      	mov	r0, r3
 8012572:	3720      	adds	r7, #32
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}
 8012578:	2000044c 	.word	0x2000044c
 801257c:	20000460 	.word	0x20000460

08012580 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012580:	b480      	push	{r7}
 8012582:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012584:	4b03      	ldr	r3, [pc, #12]	; (8012594 <vTaskMissedYield+0x14>)
 8012586:	2201      	movs	r2, #1
 8012588:	601a      	str	r2, [r3, #0]
}
 801258a:	bf00      	nop
 801258c:	46bd      	mov	sp, r7
 801258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012592:	4770      	bx	lr
 8012594:	2000045c 	.word	0x2000045c

08012598 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80125a0:	f000 f852 	bl	8012648 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80125a4:	4b06      	ldr	r3, [pc, #24]	; (80125c0 <prvIdleTask+0x28>)
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	2b01      	cmp	r3, #1
 80125aa:	d9f9      	bls.n	80125a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80125ac:	4b05      	ldr	r3, [pc, #20]	; (80125c4 <prvIdleTask+0x2c>)
 80125ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125b2:	601a      	str	r2, [r3, #0]
 80125b4:	f3bf 8f4f 	dsb	sy
 80125b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80125bc:	e7f0      	b.n	80125a0 <prvIdleTask+0x8>
 80125be:	bf00      	nop
 80125c0:	2000034c 	.word	0x2000034c
 80125c4:	e000ed04 	.word	0xe000ed04

080125c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b082      	sub	sp, #8
 80125cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80125ce:	2300      	movs	r3, #0
 80125d0:	607b      	str	r3, [r7, #4]
 80125d2:	e00c      	b.n	80125ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80125d4:	687a      	ldr	r2, [r7, #4]
 80125d6:	4613      	mov	r3, r2
 80125d8:	009b      	lsls	r3, r3, #2
 80125da:	4413      	add	r3, r2
 80125dc:	009b      	lsls	r3, r3, #2
 80125de:	4a12      	ldr	r2, [pc, #72]	; (8012628 <prvInitialiseTaskLists+0x60>)
 80125e0:	4413      	add	r3, r2
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7fe faa0 	bl	8010b28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	3301      	adds	r3, #1
 80125ec:	607b      	str	r3, [r7, #4]
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	2b06      	cmp	r3, #6
 80125f2:	d9ef      	bls.n	80125d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80125f4:	480d      	ldr	r0, [pc, #52]	; (801262c <prvInitialiseTaskLists+0x64>)
 80125f6:	f7fe fa97 	bl	8010b28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80125fa:	480d      	ldr	r0, [pc, #52]	; (8012630 <prvInitialiseTaskLists+0x68>)
 80125fc:	f7fe fa94 	bl	8010b28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012600:	480c      	ldr	r0, [pc, #48]	; (8012634 <prvInitialiseTaskLists+0x6c>)
 8012602:	f7fe fa91 	bl	8010b28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012606:	480c      	ldr	r0, [pc, #48]	; (8012638 <prvInitialiseTaskLists+0x70>)
 8012608:	f7fe fa8e 	bl	8010b28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801260c:	480b      	ldr	r0, [pc, #44]	; (801263c <prvInitialiseTaskLists+0x74>)
 801260e:	f7fe fa8b 	bl	8010b28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012612:	4b0b      	ldr	r3, [pc, #44]	; (8012640 <prvInitialiseTaskLists+0x78>)
 8012614:	4a05      	ldr	r2, [pc, #20]	; (801262c <prvInitialiseTaskLists+0x64>)
 8012616:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012618:	4b0a      	ldr	r3, [pc, #40]	; (8012644 <prvInitialiseTaskLists+0x7c>)
 801261a:	4a05      	ldr	r2, [pc, #20]	; (8012630 <prvInitialiseTaskLists+0x68>)
 801261c:	601a      	str	r2, [r3, #0]
}
 801261e:	bf00      	nop
 8012620:	3708      	adds	r7, #8
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}
 8012626:	bf00      	nop
 8012628:	2000034c 	.word	0x2000034c
 801262c:	200003d8 	.word	0x200003d8
 8012630:	200003ec 	.word	0x200003ec
 8012634:	20000408 	.word	0x20000408
 8012638:	2000041c 	.word	0x2000041c
 801263c:	20000434 	.word	0x20000434
 8012640:	20000400 	.word	0x20000400
 8012644:	20000404 	.word	0x20000404

08012648 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b082      	sub	sp, #8
 801264c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801264e:	e019      	b.n	8012684 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012650:	f000 fbba 	bl	8012dc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012654:	4b0f      	ldr	r3, [pc, #60]	; (8012694 <prvCheckTasksWaitingTermination+0x4c>)
 8012656:	68db      	ldr	r3, [r3, #12]
 8012658:	68db      	ldr	r3, [r3, #12]
 801265a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	3304      	adds	r3, #4
 8012660:	4618      	mov	r0, r3
 8012662:	f7fe faeb 	bl	8010c3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012666:	4b0c      	ldr	r3, [pc, #48]	; (8012698 <prvCheckTasksWaitingTermination+0x50>)
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	3b01      	subs	r3, #1
 801266c:	4a0a      	ldr	r2, [pc, #40]	; (8012698 <prvCheckTasksWaitingTermination+0x50>)
 801266e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012670:	4b0a      	ldr	r3, [pc, #40]	; (801269c <prvCheckTasksWaitingTermination+0x54>)
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	3b01      	subs	r3, #1
 8012676:	4a09      	ldr	r2, [pc, #36]	; (801269c <prvCheckTasksWaitingTermination+0x54>)
 8012678:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801267a:	f000 fbd7 	bl	8012e2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801267e:	6878      	ldr	r0, [r7, #4]
 8012680:	f000 f80e 	bl	80126a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012684:	4b05      	ldr	r3, [pc, #20]	; (801269c <prvCheckTasksWaitingTermination+0x54>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d1e1      	bne.n	8012650 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801268c:	bf00      	nop
 801268e:	3708      	adds	r7, #8
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}
 8012694:	2000041c 	.word	0x2000041c
 8012698:	20000448 	.word	0x20000448
 801269c:	20000430 	.word	0x20000430

080126a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b084      	sub	sp, #16
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d108      	bne.n	80126c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126b6:	4618      	mov	r0, r3
 80126b8:	f000 fd70 	bl	801319c <vPortFree>
				vPortFree( pxTCB );
 80126bc:	6878      	ldr	r0, [r7, #4]
 80126be:	f000 fd6d 	bl	801319c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80126c2:	e019      	b.n	80126f8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80126ca:	2b01      	cmp	r3, #1
 80126cc:	d103      	bne.n	80126d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f000 fd64 	bl	801319c <vPortFree>
	}
 80126d4:	e010      	b.n	80126f8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80126dc:	2b02      	cmp	r3, #2
 80126de:	d00b      	beq.n	80126f8 <prvDeleteTCB+0x58>
 80126e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126e4:	b672      	cpsid	i
 80126e6:	f383 8811 	msr	BASEPRI, r3
 80126ea:	f3bf 8f6f 	isb	sy
 80126ee:	f3bf 8f4f 	dsb	sy
 80126f2:	b662      	cpsie	i
 80126f4:	60fb      	str	r3, [r7, #12]
 80126f6:	e7fe      	b.n	80126f6 <prvDeleteTCB+0x56>
	}
 80126f8:	bf00      	nop
 80126fa:	3710      	adds	r7, #16
 80126fc:	46bd      	mov	sp, r7
 80126fe:	bd80      	pop	{r7, pc}

08012700 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012700:	b480      	push	{r7}
 8012702:	b083      	sub	sp, #12
 8012704:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012706:	4b0c      	ldr	r3, [pc, #48]	; (8012738 <prvResetNextTaskUnblockTime+0x38>)
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d104      	bne.n	801271a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012710:	4b0a      	ldr	r3, [pc, #40]	; (801273c <prvResetNextTaskUnblockTime+0x3c>)
 8012712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012716:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012718:	e008      	b.n	801272c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801271a:	4b07      	ldr	r3, [pc, #28]	; (8012738 <prvResetNextTaskUnblockTime+0x38>)
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	68db      	ldr	r3, [r3, #12]
 8012720:	68db      	ldr	r3, [r3, #12]
 8012722:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	685b      	ldr	r3, [r3, #4]
 8012728:	4a04      	ldr	r2, [pc, #16]	; (801273c <prvResetNextTaskUnblockTime+0x3c>)
 801272a:	6013      	str	r3, [r2, #0]
}
 801272c:	bf00      	nop
 801272e:	370c      	adds	r7, #12
 8012730:	46bd      	mov	sp, r7
 8012732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012736:	4770      	bx	lr
 8012738:	20000400 	.word	0x20000400
 801273c:	20000468 	.word	0x20000468

08012740 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012740:	b480      	push	{r7}
 8012742:	b083      	sub	sp, #12
 8012744:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012746:	4b0b      	ldr	r3, [pc, #44]	; (8012774 <xTaskGetSchedulerState+0x34>)
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d102      	bne.n	8012754 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801274e:	2301      	movs	r3, #1
 8012750:	607b      	str	r3, [r7, #4]
 8012752:	e008      	b.n	8012766 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012754:	4b08      	ldr	r3, [pc, #32]	; (8012778 <xTaskGetSchedulerState+0x38>)
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d102      	bne.n	8012762 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801275c:	2302      	movs	r3, #2
 801275e:	607b      	str	r3, [r7, #4]
 8012760:	e001      	b.n	8012766 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012762:	2300      	movs	r3, #0
 8012764:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012766:	687b      	ldr	r3, [r7, #4]
	}
 8012768:	4618      	mov	r0, r3
 801276a:	370c      	adds	r7, #12
 801276c:	46bd      	mov	sp, r7
 801276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012772:	4770      	bx	lr
 8012774:	20000454 	.word	0x20000454
 8012778:	20000470 	.word	0x20000470

0801277c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801277c:	b580      	push	{r7, lr}
 801277e:	b084      	sub	sp, #16
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012788:	2300      	movs	r3, #0
 801278a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d069      	beq.n	8012866 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012796:	4b36      	ldr	r3, [pc, #216]	; (8012870 <xTaskPriorityInherit+0xf4>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801279c:	429a      	cmp	r2, r3
 801279e:	d259      	bcs.n	8012854 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80127a0:	68bb      	ldr	r3, [r7, #8]
 80127a2:	699b      	ldr	r3, [r3, #24]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	db06      	blt.n	80127b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80127a8:	4b31      	ldr	r3, [pc, #196]	; (8012870 <xTaskPriorityInherit+0xf4>)
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127ae:	f1c3 0207 	rsb	r2, r3, #7
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80127b6:	68bb      	ldr	r3, [r7, #8]
 80127b8:	6959      	ldr	r1, [r3, #20]
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127be:	4613      	mov	r3, r2
 80127c0:	009b      	lsls	r3, r3, #2
 80127c2:	4413      	add	r3, r2
 80127c4:	009b      	lsls	r3, r3, #2
 80127c6:	4a2b      	ldr	r2, [pc, #172]	; (8012874 <xTaskPriorityInherit+0xf8>)
 80127c8:	4413      	add	r3, r2
 80127ca:	4299      	cmp	r1, r3
 80127cc:	d13a      	bne.n	8012844 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	3304      	adds	r3, #4
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7fe fa32 	bl	8010c3c <uxListRemove>
 80127d8:	4603      	mov	r3, r0
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d115      	bne.n	801280a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80127de:	68bb      	ldr	r3, [r7, #8]
 80127e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127e2:	4924      	ldr	r1, [pc, #144]	; (8012874 <xTaskPriorityInherit+0xf8>)
 80127e4:	4613      	mov	r3, r2
 80127e6:	009b      	lsls	r3, r3, #2
 80127e8:	4413      	add	r3, r2
 80127ea:	009b      	lsls	r3, r3, #2
 80127ec:	440b      	add	r3, r1
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d10a      	bne.n	801280a <xTaskPriorityInherit+0x8e>
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127f8:	2201      	movs	r2, #1
 80127fa:	fa02 f303 	lsl.w	r3, r2, r3
 80127fe:	43da      	mvns	r2, r3
 8012800:	4b1d      	ldr	r3, [pc, #116]	; (8012878 <xTaskPriorityInherit+0xfc>)
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	4013      	ands	r3, r2
 8012806:	4a1c      	ldr	r2, [pc, #112]	; (8012878 <xTaskPriorityInherit+0xfc>)
 8012808:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801280a:	4b19      	ldr	r3, [pc, #100]	; (8012870 <xTaskPriorityInherit+0xf4>)
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012814:	68bb      	ldr	r3, [r7, #8]
 8012816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012818:	2201      	movs	r2, #1
 801281a:	409a      	lsls	r2, r3
 801281c:	4b16      	ldr	r3, [pc, #88]	; (8012878 <xTaskPriorityInherit+0xfc>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	4313      	orrs	r3, r2
 8012822:	4a15      	ldr	r2, [pc, #84]	; (8012878 <xTaskPriorityInherit+0xfc>)
 8012824:	6013      	str	r3, [r2, #0]
 8012826:	68bb      	ldr	r3, [r7, #8]
 8012828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801282a:	4613      	mov	r3, r2
 801282c:	009b      	lsls	r3, r3, #2
 801282e:	4413      	add	r3, r2
 8012830:	009b      	lsls	r3, r3, #2
 8012832:	4a10      	ldr	r2, [pc, #64]	; (8012874 <xTaskPriorityInherit+0xf8>)
 8012834:	441a      	add	r2, r3
 8012836:	68bb      	ldr	r3, [r7, #8]
 8012838:	3304      	adds	r3, #4
 801283a:	4619      	mov	r1, r3
 801283c:	4610      	mov	r0, r2
 801283e:	f7fe f9a0 	bl	8010b82 <vListInsertEnd>
 8012842:	e004      	b.n	801284e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012844:	4b0a      	ldr	r3, [pc, #40]	; (8012870 <xTaskPriorityInherit+0xf4>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801284a:	68bb      	ldr	r3, [r7, #8]
 801284c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801284e:	2301      	movs	r3, #1
 8012850:	60fb      	str	r3, [r7, #12]
 8012852:	e008      	b.n	8012866 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012858:	4b05      	ldr	r3, [pc, #20]	; (8012870 <xTaskPriorityInherit+0xf4>)
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801285e:	429a      	cmp	r2, r3
 8012860:	d201      	bcs.n	8012866 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012862:	2301      	movs	r3, #1
 8012864:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012866:	68fb      	ldr	r3, [r7, #12]
	}
 8012868:	4618      	mov	r0, r3
 801286a:	3710      	adds	r7, #16
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}
 8012870:	20000348 	.word	0x20000348
 8012874:	2000034c 	.word	0x2000034c
 8012878:	20000450 	.word	0x20000450

0801287c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801287c:	b580      	push	{r7, lr}
 801287e:	b086      	sub	sp, #24
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012888:	2300      	movs	r3, #0
 801288a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d070      	beq.n	8012974 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012892:	4b3b      	ldr	r3, [pc, #236]	; (8012980 <xTaskPriorityDisinherit+0x104>)
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	693a      	ldr	r2, [r7, #16]
 8012898:	429a      	cmp	r2, r3
 801289a:	d00b      	beq.n	80128b4 <xTaskPriorityDisinherit+0x38>
 801289c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128a0:	b672      	cpsid	i
 80128a2:	f383 8811 	msr	BASEPRI, r3
 80128a6:	f3bf 8f6f 	isb	sy
 80128aa:	f3bf 8f4f 	dsb	sy
 80128ae:	b662      	cpsie	i
 80128b0:	60fb      	str	r3, [r7, #12]
 80128b2:	e7fe      	b.n	80128b2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80128b4:	693b      	ldr	r3, [r7, #16]
 80128b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d10b      	bne.n	80128d4 <xTaskPriorityDisinherit+0x58>
 80128bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128c0:	b672      	cpsid	i
 80128c2:	f383 8811 	msr	BASEPRI, r3
 80128c6:	f3bf 8f6f 	isb	sy
 80128ca:	f3bf 8f4f 	dsb	sy
 80128ce:	b662      	cpsie	i
 80128d0:	60bb      	str	r3, [r7, #8]
 80128d2:	e7fe      	b.n	80128d2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80128d4:	693b      	ldr	r3, [r7, #16]
 80128d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80128d8:	1e5a      	subs	r2, r3, #1
 80128da:	693b      	ldr	r3, [r7, #16]
 80128dc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80128de:	693b      	ldr	r3, [r7, #16]
 80128e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128e6:	429a      	cmp	r2, r3
 80128e8:	d044      	beq.n	8012974 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80128ea:	693b      	ldr	r3, [r7, #16]
 80128ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d140      	bne.n	8012974 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80128f2:	693b      	ldr	r3, [r7, #16]
 80128f4:	3304      	adds	r3, #4
 80128f6:	4618      	mov	r0, r3
 80128f8:	f7fe f9a0 	bl	8010c3c <uxListRemove>
 80128fc:	4603      	mov	r3, r0
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d115      	bne.n	801292e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012902:	693b      	ldr	r3, [r7, #16]
 8012904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012906:	491f      	ldr	r1, [pc, #124]	; (8012984 <xTaskPriorityDisinherit+0x108>)
 8012908:	4613      	mov	r3, r2
 801290a:	009b      	lsls	r3, r3, #2
 801290c:	4413      	add	r3, r2
 801290e:	009b      	lsls	r3, r3, #2
 8012910:	440b      	add	r3, r1
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d10a      	bne.n	801292e <xTaskPriorityDisinherit+0xb2>
 8012918:	693b      	ldr	r3, [r7, #16]
 801291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801291c:	2201      	movs	r2, #1
 801291e:	fa02 f303 	lsl.w	r3, r2, r3
 8012922:	43da      	mvns	r2, r3
 8012924:	4b18      	ldr	r3, [pc, #96]	; (8012988 <xTaskPriorityDisinherit+0x10c>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	4013      	ands	r3, r2
 801292a:	4a17      	ldr	r2, [pc, #92]	; (8012988 <xTaskPriorityDisinherit+0x10c>)
 801292c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801292e:	693b      	ldr	r3, [r7, #16]
 8012930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012936:	693b      	ldr	r3, [r7, #16]
 8012938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801293a:	f1c3 0207 	rsb	r2, r3, #7
 801293e:	693b      	ldr	r3, [r7, #16]
 8012940:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012942:	693b      	ldr	r3, [r7, #16]
 8012944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012946:	2201      	movs	r2, #1
 8012948:	409a      	lsls	r2, r3
 801294a:	4b0f      	ldr	r3, [pc, #60]	; (8012988 <xTaskPriorityDisinherit+0x10c>)
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	4313      	orrs	r3, r2
 8012950:	4a0d      	ldr	r2, [pc, #52]	; (8012988 <xTaskPriorityDisinherit+0x10c>)
 8012952:	6013      	str	r3, [r2, #0]
 8012954:	693b      	ldr	r3, [r7, #16]
 8012956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012958:	4613      	mov	r3, r2
 801295a:	009b      	lsls	r3, r3, #2
 801295c:	4413      	add	r3, r2
 801295e:	009b      	lsls	r3, r3, #2
 8012960:	4a08      	ldr	r2, [pc, #32]	; (8012984 <xTaskPriorityDisinherit+0x108>)
 8012962:	441a      	add	r2, r3
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	3304      	adds	r3, #4
 8012968:	4619      	mov	r1, r3
 801296a:	4610      	mov	r0, r2
 801296c:	f7fe f909 	bl	8010b82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012970:	2301      	movs	r3, #1
 8012972:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012974:	697b      	ldr	r3, [r7, #20]
	}
 8012976:	4618      	mov	r0, r3
 8012978:	3718      	adds	r7, #24
 801297a:	46bd      	mov	sp, r7
 801297c:	bd80      	pop	{r7, pc}
 801297e:	bf00      	nop
 8012980:	20000348 	.word	0x20000348
 8012984:	2000034c 	.word	0x2000034c
 8012988:	20000450 	.word	0x20000450

0801298c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801298c:	b580      	push	{r7, lr}
 801298e:	b088      	sub	sp, #32
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
 8012994:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801299a:	2301      	movs	r3, #1
 801299c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	f000 8085 	beq.w	8012ab0 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80129a6:	69bb      	ldr	r3, [r7, #24]
 80129a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d10b      	bne.n	80129c6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 80129ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b2:	b672      	cpsid	i
 80129b4:	f383 8811 	msr	BASEPRI, r3
 80129b8:	f3bf 8f6f 	isb	sy
 80129bc:	f3bf 8f4f 	dsb	sy
 80129c0:	b662      	cpsie	i
 80129c2:	60fb      	str	r3, [r7, #12]
 80129c4:	e7fe      	b.n	80129c4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80129c6:	69bb      	ldr	r3, [r7, #24]
 80129c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129ca:	683a      	ldr	r2, [r7, #0]
 80129cc:	429a      	cmp	r2, r3
 80129ce:	d902      	bls.n	80129d6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	61fb      	str	r3, [r7, #28]
 80129d4:	e002      	b.n	80129dc <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80129d6:	69bb      	ldr	r3, [r7, #24]
 80129d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80129dc:	69bb      	ldr	r3, [r7, #24]
 80129de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129e0:	69fa      	ldr	r2, [r7, #28]
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d064      	beq.n	8012ab0 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80129e6:	69bb      	ldr	r3, [r7, #24]
 80129e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80129ea:	697a      	ldr	r2, [r7, #20]
 80129ec:	429a      	cmp	r2, r3
 80129ee:	d15f      	bne.n	8012ab0 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80129f0:	4b31      	ldr	r3, [pc, #196]	; (8012ab8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	69ba      	ldr	r2, [r7, #24]
 80129f6:	429a      	cmp	r2, r3
 80129f8:	d10b      	bne.n	8012a12 <vTaskPriorityDisinheritAfterTimeout+0x86>
 80129fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129fe:	b672      	cpsid	i
 8012a00:	f383 8811 	msr	BASEPRI, r3
 8012a04:	f3bf 8f6f 	isb	sy
 8012a08:	f3bf 8f4f 	dsb	sy
 8012a0c:	b662      	cpsie	i
 8012a0e:	60bb      	str	r3, [r7, #8]
 8012a10:	e7fe      	b.n	8012a10 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012a12:	69bb      	ldr	r3, [r7, #24]
 8012a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a16:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012a18:	69bb      	ldr	r3, [r7, #24]
 8012a1a:	69fa      	ldr	r2, [r7, #28]
 8012a1c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012a1e:	69bb      	ldr	r3, [r7, #24]
 8012a20:	699b      	ldr	r3, [r3, #24]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	db04      	blt.n	8012a30 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a26:	69fb      	ldr	r3, [r7, #28]
 8012a28:	f1c3 0207 	rsb	r2, r3, #7
 8012a2c:	69bb      	ldr	r3, [r7, #24]
 8012a2e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012a30:	69bb      	ldr	r3, [r7, #24]
 8012a32:	6959      	ldr	r1, [r3, #20]
 8012a34:	693a      	ldr	r2, [r7, #16]
 8012a36:	4613      	mov	r3, r2
 8012a38:	009b      	lsls	r3, r3, #2
 8012a3a:	4413      	add	r3, r2
 8012a3c:	009b      	lsls	r3, r3, #2
 8012a3e:	4a1f      	ldr	r2, [pc, #124]	; (8012abc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8012a40:	4413      	add	r3, r2
 8012a42:	4299      	cmp	r1, r3
 8012a44:	d134      	bne.n	8012ab0 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a46:	69bb      	ldr	r3, [r7, #24]
 8012a48:	3304      	adds	r3, #4
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7fe f8f6 	bl	8010c3c <uxListRemove>
 8012a50:	4603      	mov	r3, r0
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d115      	bne.n	8012a82 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012a56:	69bb      	ldr	r3, [r7, #24]
 8012a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a5a:	4918      	ldr	r1, [pc, #96]	; (8012abc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8012a5c:	4613      	mov	r3, r2
 8012a5e:	009b      	lsls	r3, r3, #2
 8012a60:	4413      	add	r3, r2
 8012a62:	009b      	lsls	r3, r3, #2
 8012a64:	440b      	add	r3, r1
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d10a      	bne.n	8012a82 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8012a6c:	69bb      	ldr	r3, [r7, #24]
 8012a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a70:	2201      	movs	r2, #1
 8012a72:	fa02 f303 	lsl.w	r3, r2, r3
 8012a76:	43da      	mvns	r2, r3
 8012a78:	4b11      	ldr	r3, [pc, #68]	; (8012ac0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	4013      	ands	r3, r2
 8012a7e:	4a10      	ldr	r2, [pc, #64]	; (8012ac0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012a80:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012a82:	69bb      	ldr	r3, [r7, #24]
 8012a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a86:	2201      	movs	r2, #1
 8012a88:	409a      	lsls	r2, r3
 8012a8a:	4b0d      	ldr	r3, [pc, #52]	; (8012ac0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	4313      	orrs	r3, r2
 8012a90:	4a0b      	ldr	r2, [pc, #44]	; (8012ac0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012a92:	6013      	str	r3, [r2, #0]
 8012a94:	69bb      	ldr	r3, [r7, #24]
 8012a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a98:	4613      	mov	r3, r2
 8012a9a:	009b      	lsls	r3, r3, #2
 8012a9c:	4413      	add	r3, r2
 8012a9e:	009b      	lsls	r3, r3, #2
 8012aa0:	4a06      	ldr	r2, [pc, #24]	; (8012abc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8012aa2:	441a      	add	r2, r3
 8012aa4:	69bb      	ldr	r3, [r7, #24]
 8012aa6:	3304      	adds	r3, #4
 8012aa8:	4619      	mov	r1, r3
 8012aaa:	4610      	mov	r0, r2
 8012aac:	f7fe f869 	bl	8010b82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012ab0:	bf00      	nop
 8012ab2:	3720      	adds	r7, #32
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd80      	pop	{r7, pc}
 8012ab8:	20000348 	.word	0x20000348
 8012abc:	2000034c 	.word	0x2000034c
 8012ac0:	20000450 	.word	0x20000450

08012ac4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012ac4:	b480      	push	{r7}
 8012ac6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012ac8:	4b07      	ldr	r3, [pc, #28]	; (8012ae8 <pvTaskIncrementMutexHeldCount+0x24>)
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d004      	beq.n	8012ada <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012ad0:	4b05      	ldr	r3, [pc, #20]	; (8012ae8 <pvTaskIncrementMutexHeldCount+0x24>)
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012ad6:	3201      	adds	r2, #1
 8012ad8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012ada:	4b03      	ldr	r3, [pc, #12]	; (8012ae8 <pvTaskIncrementMutexHeldCount+0x24>)
 8012adc:	681b      	ldr	r3, [r3, #0]
	}
 8012ade:	4618      	mov	r0, r3
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae6:	4770      	bx	lr
 8012ae8:	20000348 	.word	0x20000348

08012aec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b084      	sub	sp, #16
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012af6:	4b29      	ldr	r3, [pc, #164]	; (8012b9c <prvAddCurrentTaskToDelayedList+0xb0>)
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012afc:	4b28      	ldr	r3, [pc, #160]	; (8012ba0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	3304      	adds	r3, #4
 8012b02:	4618      	mov	r0, r3
 8012b04:	f7fe f89a 	bl	8010c3c <uxListRemove>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d10b      	bne.n	8012b26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012b0e:	4b24      	ldr	r3, [pc, #144]	; (8012ba0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b14:	2201      	movs	r2, #1
 8012b16:	fa02 f303 	lsl.w	r3, r2, r3
 8012b1a:	43da      	mvns	r2, r3
 8012b1c:	4b21      	ldr	r3, [pc, #132]	; (8012ba4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	4013      	ands	r3, r2
 8012b22:	4a20      	ldr	r2, [pc, #128]	; (8012ba4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012b24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b2c:	d10a      	bne.n	8012b44 <prvAddCurrentTaskToDelayedList+0x58>
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d007      	beq.n	8012b44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b34:	4b1a      	ldr	r3, [pc, #104]	; (8012ba0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	3304      	adds	r3, #4
 8012b3a:	4619      	mov	r1, r3
 8012b3c:	481a      	ldr	r0, [pc, #104]	; (8012ba8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012b3e:	f7fe f820 	bl	8010b82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012b42:	e026      	b.n	8012b92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012b44:	68fa      	ldr	r2, [r7, #12]
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	4413      	add	r3, r2
 8012b4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012b4c:	4b14      	ldr	r3, [pc, #80]	; (8012ba0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	68ba      	ldr	r2, [r7, #8]
 8012b52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012b54:	68ba      	ldr	r2, [r7, #8]
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	d209      	bcs.n	8012b70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b5c:	4b13      	ldr	r3, [pc, #76]	; (8012bac <prvAddCurrentTaskToDelayedList+0xc0>)
 8012b5e:	681a      	ldr	r2, [r3, #0]
 8012b60:	4b0f      	ldr	r3, [pc, #60]	; (8012ba0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	3304      	adds	r3, #4
 8012b66:	4619      	mov	r1, r3
 8012b68:	4610      	mov	r0, r2
 8012b6a:	f7fe f82e 	bl	8010bca <vListInsert>
}
 8012b6e:	e010      	b.n	8012b92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b70:	4b0f      	ldr	r3, [pc, #60]	; (8012bb0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012b72:	681a      	ldr	r2, [r3, #0]
 8012b74:	4b0a      	ldr	r3, [pc, #40]	; (8012ba0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	3304      	adds	r3, #4
 8012b7a:	4619      	mov	r1, r3
 8012b7c:	4610      	mov	r0, r2
 8012b7e:	f7fe f824 	bl	8010bca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012b82:	4b0c      	ldr	r3, [pc, #48]	; (8012bb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	68ba      	ldr	r2, [r7, #8]
 8012b88:	429a      	cmp	r2, r3
 8012b8a:	d202      	bcs.n	8012b92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012b8c:	4a09      	ldr	r2, [pc, #36]	; (8012bb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012b8e:	68bb      	ldr	r3, [r7, #8]
 8012b90:	6013      	str	r3, [r2, #0]
}
 8012b92:	bf00      	nop
 8012b94:	3710      	adds	r7, #16
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}
 8012b9a:	bf00      	nop
 8012b9c:	2000044c 	.word	0x2000044c
 8012ba0:	20000348 	.word	0x20000348
 8012ba4:	20000450 	.word	0x20000450
 8012ba8:	20000434 	.word	0x20000434
 8012bac:	20000404 	.word	0x20000404
 8012bb0:	20000400 	.word	0x20000400
 8012bb4:	20000468 	.word	0x20000468

08012bb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012bb8:	b480      	push	{r7}
 8012bba:	b085      	sub	sp, #20
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	60f8      	str	r0, [r7, #12]
 8012bc0:	60b9      	str	r1, [r7, #8]
 8012bc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	3b04      	subs	r3, #4
 8012bc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012bd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	3b04      	subs	r3, #4
 8012bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	f023 0201 	bic.w	r2, r3, #1
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	3b04      	subs	r3, #4
 8012be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012be8:	4a0c      	ldr	r2, [pc, #48]	; (8012c1c <pxPortInitialiseStack+0x64>)
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	3b14      	subs	r3, #20
 8012bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012bf4:	687a      	ldr	r2, [r7, #4]
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	3b04      	subs	r3, #4
 8012bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	f06f 0202 	mvn.w	r2, #2
 8012c06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	3b20      	subs	r3, #32
 8012c0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012c0e:	68fb      	ldr	r3, [r7, #12]
}
 8012c10:	4618      	mov	r0, r3
 8012c12:	3714      	adds	r7, #20
 8012c14:	46bd      	mov	sp, r7
 8012c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1a:	4770      	bx	lr
 8012c1c:	08012c21 	.word	0x08012c21

08012c20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012c20:	b480      	push	{r7}
 8012c22:	b085      	sub	sp, #20
 8012c24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012c26:	2300      	movs	r3, #0
 8012c28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012c2a:	4b13      	ldr	r3, [pc, #76]	; (8012c78 <prvTaskExitError+0x58>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c32:	d00b      	beq.n	8012c4c <prvTaskExitError+0x2c>
 8012c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c38:	b672      	cpsid	i
 8012c3a:	f383 8811 	msr	BASEPRI, r3
 8012c3e:	f3bf 8f6f 	isb	sy
 8012c42:	f3bf 8f4f 	dsb	sy
 8012c46:	b662      	cpsie	i
 8012c48:	60fb      	str	r3, [r7, #12]
 8012c4a:	e7fe      	b.n	8012c4a <prvTaskExitError+0x2a>
 8012c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c50:	b672      	cpsid	i
 8012c52:	f383 8811 	msr	BASEPRI, r3
 8012c56:	f3bf 8f6f 	isb	sy
 8012c5a:	f3bf 8f4f 	dsb	sy
 8012c5e:	b662      	cpsie	i
 8012c60:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012c62:	bf00      	nop
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d0fc      	beq.n	8012c64 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012c6a:	bf00      	nop
 8012c6c:	3714      	adds	r7, #20
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c74:	4770      	bx	lr
 8012c76:	bf00      	nop
 8012c78:	2000004c 	.word	0x2000004c
 8012c7c:	00000000 	.word	0x00000000

08012c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012c80:	4b07      	ldr	r3, [pc, #28]	; (8012ca0 <pxCurrentTCBConst2>)
 8012c82:	6819      	ldr	r1, [r3, #0]
 8012c84:	6808      	ldr	r0, [r1, #0]
 8012c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c8a:	f380 8809 	msr	PSP, r0
 8012c8e:	f3bf 8f6f 	isb	sy
 8012c92:	f04f 0000 	mov.w	r0, #0
 8012c96:	f380 8811 	msr	BASEPRI, r0
 8012c9a:	4770      	bx	lr
 8012c9c:	f3af 8000 	nop.w

08012ca0 <pxCurrentTCBConst2>:
 8012ca0:	20000348 	.word	0x20000348
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012ca4:	bf00      	nop
 8012ca6:	bf00      	nop

08012ca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012ca8:	4808      	ldr	r0, [pc, #32]	; (8012ccc <prvPortStartFirstTask+0x24>)
 8012caa:	6800      	ldr	r0, [r0, #0]
 8012cac:	6800      	ldr	r0, [r0, #0]
 8012cae:	f380 8808 	msr	MSP, r0
 8012cb2:	f04f 0000 	mov.w	r0, #0
 8012cb6:	f380 8814 	msr	CONTROL, r0
 8012cba:	b662      	cpsie	i
 8012cbc:	b661      	cpsie	f
 8012cbe:	f3bf 8f4f 	dsb	sy
 8012cc2:	f3bf 8f6f 	isb	sy
 8012cc6:	df00      	svc	0
 8012cc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012cca:	bf00      	nop
 8012ccc:	e000ed08 	.word	0xe000ed08

08012cd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b084      	sub	sp, #16
 8012cd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012cd6:	4b36      	ldr	r3, [pc, #216]	; (8012db0 <xPortStartScheduler+0xe0>)
 8012cd8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	781b      	ldrb	r3, [r3, #0]
 8012cde:	b2db      	uxtb	r3, r3
 8012ce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	22ff      	movs	r2, #255	; 0xff
 8012ce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	781b      	ldrb	r3, [r3, #0]
 8012cec:	b2db      	uxtb	r3, r3
 8012cee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012cf0:	78fb      	ldrb	r3, [r7, #3]
 8012cf2:	b2db      	uxtb	r3, r3
 8012cf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012cf8:	b2da      	uxtb	r2, r3
 8012cfa:	4b2e      	ldr	r3, [pc, #184]	; (8012db4 <xPortStartScheduler+0xe4>)
 8012cfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012cfe:	4b2e      	ldr	r3, [pc, #184]	; (8012db8 <xPortStartScheduler+0xe8>)
 8012d00:	2207      	movs	r2, #7
 8012d02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012d04:	e009      	b.n	8012d1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012d06:	4b2c      	ldr	r3, [pc, #176]	; (8012db8 <xPortStartScheduler+0xe8>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	3b01      	subs	r3, #1
 8012d0c:	4a2a      	ldr	r2, [pc, #168]	; (8012db8 <xPortStartScheduler+0xe8>)
 8012d0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012d10:	78fb      	ldrb	r3, [r7, #3]
 8012d12:	b2db      	uxtb	r3, r3
 8012d14:	005b      	lsls	r3, r3, #1
 8012d16:	b2db      	uxtb	r3, r3
 8012d18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012d1a:	78fb      	ldrb	r3, [r7, #3]
 8012d1c:	b2db      	uxtb	r3, r3
 8012d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d22:	2b80      	cmp	r3, #128	; 0x80
 8012d24:	d0ef      	beq.n	8012d06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012d26:	4b24      	ldr	r3, [pc, #144]	; (8012db8 <xPortStartScheduler+0xe8>)
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	f1c3 0307 	rsb	r3, r3, #7
 8012d2e:	2b04      	cmp	r3, #4
 8012d30:	d00b      	beq.n	8012d4a <xPortStartScheduler+0x7a>
 8012d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d36:	b672      	cpsid	i
 8012d38:	f383 8811 	msr	BASEPRI, r3
 8012d3c:	f3bf 8f6f 	isb	sy
 8012d40:	f3bf 8f4f 	dsb	sy
 8012d44:	b662      	cpsie	i
 8012d46:	60bb      	str	r3, [r7, #8]
 8012d48:	e7fe      	b.n	8012d48 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012d4a:	4b1b      	ldr	r3, [pc, #108]	; (8012db8 <xPortStartScheduler+0xe8>)
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	021b      	lsls	r3, r3, #8
 8012d50:	4a19      	ldr	r2, [pc, #100]	; (8012db8 <xPortStartScheduler+0xe8>)
 8012d52:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012d54:	4b18      	ldr	r3, [pc, #96]	; (8012db8 <xPortStartScheduler+0xe8>)
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012d5c:	4a16      	ldr	r2, [pc, #88]	; (8012db8 <xPortStartScheduler+0xe8>)
 8012d5e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	b2da      	uxtb	r2, r3
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012d68:	4b14      	ldr	r3, [pc, #80]	; (8012dbc <xPortStartScheduler+0xec>)
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	4a13      	ldr	r2, [pc, #76]	; (8012dbc <xPortStartScheduler+0xec>)
 8012d6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012d72:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012d74:	4b11      	ldr	r3, [pc, #68]	; (8012dbc <xPortStartScheduler+0xec>)
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	4a10      	ldr	r2, [pc, #64]	; (8012dbc <xPortStartScheduler+0xec>)
 8012d7a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012d7e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012d80:	f000 f8d4 	bl	8012f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012d84:	4b0e      	ldr	r3, [pc, #56]	; (8012dc0 <xPortStartScheduler+0xf0>)
 8012d86:	2200      	movs	r2, #0
 8012d88:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012d8a:	f000 f8f3 	bl	8012f74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012d8e:	4b0d      	ldr	r3, [pc, #52]	; (8012dc4 <xPortStartScheduler+0xf4>)
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	4a0c      	ldr	r2, [pc, #48]	; (8012dc4 <xPortStartScheduler+0xf4>)
 8012d94:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012d98:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012d9a:	f7ff ff85 	bl	8012ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012d9e:	f7ff fa8f 	bl	80122c0 <vTaskSwitchContext>
	prvTaskExitError();
 8012da2:	f7ff ff3d 	bl	8012c20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012da6:	2300      	movs	r3, #0
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3710      	adds	r7, #16
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}
 8012db0:	e000e400 	.word	0xe000e400
 8012db4:	20000474 	.word	0x20000474
 8012db8:	20000478 	.word	0x20000478
 8012dbc:	e000ed20 	.word	0xe000ed20
 8012dc0:	2000004c 	.word	0x2000004c
 8012dc4:	e000ef34 	.word	0xe000ef34

08012dc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012dc8:	b480      	push	{r7}
 8012dca:	b083      	sub	sp, #12
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dd2:	b672      	cpsid	i
 8012dd4:	f383 8811 	msr	BASEPRI, r3
 8012dd8:	f3bf 8f6f 	isb	sy
 8012ddc:	f3bf 8f4f 	dsb	sy
 8012de0:	b662      	cpsie	i
 8012de2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012de4:	4b0f      	ldr	r3, [pc, #60]	; (8012e24 <vPortEnterCritical+0x5c>)
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	3301      	adds	r3, #1
 8012dea:	4a0e      	ldr	r2, [pc, #56]	; (8012e24 <vPortEnterCritical+0x5c>)
 8012dec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012dee:	4b0d      	ldr	r3, [pc, #52]	; (8012e24 <vPortEnterCritical+0x5c>)
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	2b01      	cmp	r3, #1
 8012df4:	d110      	bne.n	8012e18 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012df6:	4b0c      	ldr	r3, [pc, #48]	; (8012e28 <vPortEnterCritical+0x60>)
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	b2db      	uxtb	r3, r3
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d00b      	beq.n	8012e18 <vPortEnterCritical+0x50>
 8012e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e04:	b672      	cpsid	i
 8012e06:	f383 8811 	msr	BASEPRI, r3
 8012e0a:	f3bf 8f6f 	isb	sy
 8012e0e:	f3bf 8f4f 	dsb	sy
 8012e12:	b662      	cpsie	i
 8012e14:	603b      	str	r3, [r7, #0]
 8012e16:	e7fe      	b.n	8012e16 <vPortEnterCritical+0x4e>
	}
}
 8012e18:	bf00      	nop
 8012e1a:	370c      	adds	r7, #12
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e22:	4770      	bx	lr
 8012e24:	2000004c 	.word	0x2000004c
 8012e28:	e000ed04 	.word	0xe000ed04

08012e2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012e2c:	b480      	push	{r7}
 8012e2e:	b083      	sub	sp, #12
 8012e30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012e32:	4b12      	ldr	r3, [pc, #72]	; (8012e7c <vPortExitCritical+0x50>)
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d10b      	bne.n	8012e52 <vPortExitCritical+0x26>
 8012e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e3e:	b672      	cpsid	i
 8012e40:	f383 8811 	msr	BASEPRI, r3
 8012e44:	f3bf 8f6f 	isb	sy
 8012e48:	f3bf 8f4f 	dsb	sy
 8012e4c:	b662      	cpsie	i
 8012e4e:	607b      	str	r3, [r7, #4]
 8012e50:	e7fe      	b.n	8012e50 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8012e52:	4b0a      	ldr	r3, [pc, #40]	; (8012e7c <vPortExitCritical+0x50>)
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	3b01      	subs	r3, #1
 8012e58:	4a08      	ldr	r2, [pc, #32]	; (8012e7c <vPortExitCritical+0x50>)
 8012e5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012e5c:	4b07      	ldr	r3, [pc, #28]	; (8012e7c <vPortExitCritical+0x50>)
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d104      	bne.n	8012e6e <vPortExitCritical+0x42>
 8012e64:	2300      	movs	r3, #0
 8012e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8012e6e:	bf00      	nop
 8012e70:	370c      	adds	r7, #12
 8012e72:	46bd      	mov	sp, r7
 8012e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e78:	4770      	bx	lr
 8012e7a:	bf00      	nop
 8012e7c:	2000004c 	.word	0x2000004c

08012e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012e80:	f3ef 8009 	mrs	r0, PSP
 8012e84:	f3bf 8f6f 	isb	sy
 8012e88:	4b15      	ldr	r3, [pc, #84]	; (8012ee0 <pxCurrentTCBConst>)
 8012e8a:	681a      	ldr	r2, [r3, #0]
 8012e8c:	f01e 0f10 	tst.w	lr, #16
 8012e90:	bf08      	it	eq
 8012e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e9a:	6010      	str	r0, [r2, #0]
 8012e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012ea4:	b672      	cpsid	i
 8012ea6:	f380 8811 	msr	BASEPRI, r0
 8012eaa:	f3bf 8f4f 	dsb	sy
 8012eae:	f3bf 8f6f 	isb	sy
 8012eb2:	b662      	cpsie	i
 8012eb4:	f7ff fa04 	bl	80122c0 <vTaskSwitchContext>
 8012eb8:	f04f 0000 	mov.w	r0, #0
 8012ebc:	f380 8811 	msr	BASEPRI, r0
 8012ec0:	bc09      	pop	{r0, r3}
 8012ec2:	6819      	ldr	r1, [r3, #0]
 8012ec4:	6808      	ldr	r0, [r1, #0]
 8012ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eca:	f01e 0f10 	tst.w	lr, #16
 8012ece:	bf08      	it	eq
 8012ed0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012ed4:	f380 8809 	msr	PSP, r0
 8012ed8:	f3bf 8f6f 	isb	sy
 8012edc:	4770      	bx	lr
 8012ede:	bf00      	nop

08012ee0 <pxCurrentTCBConst>:
 8012ee0:	20000348 	.word	0x20000348
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012ee4:	bf00      	nop
 8012ee6:	bf00      	nop

08012ee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b082      	sub	sp, #8
 8012eec:	af00      	add	r7, sp, #0
	__asm volatile
 8012eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ef2:	b672      	cpsid	i
 8012ef4:	f383 8811 	msr	BASEPRI, r3
 8012ef8:	f3bf 8f6f 	isb	sy
 8012efc:	f3bf 8f4f 	dsb	sy
 8012f00:	b662      	cpsie	i
 8012f02:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012f04:	f7ff f922 	bl	801214c <xTaskIncrementTick>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d003      	beq.n	8012f16 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012f0e:	4b06      	ldr	r3, [pc, #24]	; (8012f28 <xPortSysTickHandler+0x40>)
 8012f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f14:	601a      	str	r2, [r3, #0]
 8012f16:	2300      	movs	r3, #0
 8012f18:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8012f20:	bf00      	nop
 8012f22:	3708      	adds	r7, #8
 8012f24:	46bd      	mov	sp, r7
 8012f26:	bd80      	pop	{r7, pc}
 8012f28:	e000ed04 	.word	0xe000ed04

08012f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012f2c:	b480      	push	{r7}
 8012f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012f30:	4b0b      	ldr	r3, [pc, #44]	; (8012f60 <vPortSetupTimerInterrupt+0x34>)
 8012f32:	2200      	movs	r2, #0
 8012f34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012f36:	4b0b      	ldr	r3, [pc, #44]	; (8012f64 <vPortSetupTimerInterrupt+0x38>)
 8012f38:	2200      	movs	r2, #0
 8012f3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012f3c:	4b0a      	ldr	r3, [pc, #40]	; (8012f68 <vPortSetupTimerInterrupt+0x3c>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	4a0a      	ldr	r2, [pc, #40]	; (8012f6c <vPortSetupTimerInterrupt+0x40>)
 8012f42:	fba2 2303 	umull	r2, r3, r2, r3
 8012f46:	099b      	lsrs	r3, r3, #6
 8012f48:	4a09      	ldr	r2, [pc, #36]	; (8012f70 <vPortSetupTimerInterrupt+0x44>)
 8012f4a:	3b01      	subs	r3, #1
 8012f4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012f4e:	4b04      	ldr	r3, [pc, #16]	; (8012f60 <vPortSetupTimerInterrupt+0x34>)
 8012f50:	2207      	movs	r2, #7
 8012f52:	601a      	str	r2, [r3, #0]
}
 8012f54:	bf00      	nop
 8012f56:	46bd      	mov	sp, r7
 8012f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5c:	4770      	bx	lr
 8012f5e:	bf00      	nop
 8012f60:	e000e010 	.word	0xe000e010
 8012f64:	e000e018 	.word	0xe000e018
 8012f68:	20000040 	.word	0x20000040
 8012f6c:	10624dd3 	.word	0x10624dd3
 8012f70:	e000e014 	.word	0xe000e014

08012f74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012f74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012f84 <vPortEnableVFP+0x10>
 8012f78:	6801      	ldr	r1, [r0, #0]
 8012f7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012f7e:	6001      	str	r1, [r0, #0]
 8012f80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012f82:	bf00      	nop
 8012f84:	e000ed88 	.word	0xe000ed88

08012f88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012f88:	b480      	push	{r7}
 8012f8a:	b085      	sub	sp, #20
 8012f8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012f8e:	f3ef 8305 	mrs	r3, IPSR
 8012f92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	2b0f      	cmp	r3, #15
 8012f98:	d915      	bls.n	8012fc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012f9a:	4a18      	ldr	r2, [pc, #96]	; (8012ffc <vPortValidateInterruptPriority+0x74>)
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	4413      	add	r3, r2
 8012fa0:	781b      	ldrb	r3, [r3, #0]
 8012fa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012fa4:	4b16      	ldr	r3, [pc, #88]	; (8013000 <vPortValidateInterruptPriority+0x78>)
 8012fa6:	781b      	ldrb	r3, [r3, #0]
 8012fa8:	7afa      	ldrb	r2, [r7, #11]
 8012faa:	429a      	cmp	r2, r3
 8012fac:	d20b      	bcs.n	8012fc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8012fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fb2:	b672      	cpsid	i
 8012fb4:	f383 8811 	msr	BASEPRI, r3
 8012fb8:	f3bf 8f6f 	isb	sy
 8012fbc:	f3bf 8f4f 	dsb	sy
 8012fc0:	b662      	cpsie	i
 8012fc2:	607b      	str	r3, [r7, #4]
 8012fc4:	e7fe      	b.n	8012fc4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012fc6:	4b0f      	ldr	r3, [pc, #60]	; (8013004 <vPortValidateInterruptPriority+0x7c>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012fce:	4b0e      	ldr	r3, [pc, #56]	; (8013008 <vPortValidateInterruptPriority+0x80>)
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	429a      	cmp	r2, r3
 8012fd4:	d90b      	bls.n	8012fee <vPortValidateInterruptPriority+0x66>
 8012fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fda:	b672      	cpsid	i
 8012fdc:	f383 8811 	msr	BASEPRI, r3
 8012fe0:	f3bf 8f6f 	isb	sy
 8012fe4:	f3bf 8f4f 	dsb	sy
 8012fe8:	b662      	cpsie	i
 8012fea:	603b      	str	r3, [r7, #0]
 8012fec:	e7fe      	b.n	8012fec <vPortValidateInterruptPriority+0x64>
	}
 8012fee:	bf00      	nop
 8012ff0:	3714      	adds	r7, #20
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff8:	4770      	bx	lr
 8012ffa:	bf00      	nop
 8012ffc:	e000e3f0 	.word	0xe000e3f0
 8013000:	20000474 	.word	0x20000474
 8013004:	e000ed0c 	.word	0xe000ed0c
 8013008:	20000478 	.word	0x20000478

0801300c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b08a      	sub	sp, #40	; 0x28
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013014:	2300      	movs	r3, #0
 8013016:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013018:	f7fe ffca 	bl	8011fb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801301c:	4b5a      	ldr	r3, [pc, #360]	; (8013188 <pvPortMalloc+0x17c>)
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d101      	bne.n	8013028 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013024:	f000 f916 	bl	8013254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013028:	4b58      	ldr	r3, [pc, #352]	; (801318c <pvPortMalloc+0x180>)
 801302a:	681a      	ldr	r2, [r3, #0]
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	4013      	ands	r3, r2
 8013030:	2b00      	cmp	r3, #0
 8013032:	f040 8090 	bne.w	8013156 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d01e      	beq.n	801307a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801303c:	2208      	movs	r2, #8
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	4413      	add	r3, r2
 8013042:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	f003 0307 	and.w	r3, r3, #7
 801304a:	2b00      	cmp	r3, #0
 801304c:	d015      	beq.n	801307a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	f023 0307 	bic.w	r3, r3, #7
 8013054:	3308      	adds	r3, #8
 8013056:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	f003 0307 	and.w	r3, r3, #7
 801305e:	2b00      	cmp	r3, #0
 8013060:	d00b      	beq.n	801307a <pvPortMalloc+0x6e>
 8013062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013066:	b672      	cpsid	i
 8013068:	f383 8811 	msr	BASEPRI, r3
 801306c:	f3bf 8f6f 	isb	sy
 8013070:	f3bf 8f4f 	dsb	sy
 8013074:	b662      	cpsie	i
 8013076:	617b      	str	r3, [r7, #20]
 8013078:	e7fe      	b.n	8013078 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d06a      	beq.n	8013156 <pvPortMalloc+0x14a>
 8013080:	4b43      	ldr	r3, [pc, #268]	; (8013190 <pvPortMalloc+0x184>)
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	687a      	ldr	r2, [r7, #4]
 8013086:	429a      	cmp	r2, r3
 8013088:	d865      	bhi.n	8013156 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801308a:	4b42      	ldr	r3, [pc, #264]	; (8013194 <pvPortMalloc+0x188>)
 801308c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801308e:	4b41      	ldr	r3, [pc, #260]	; (8013194 <pvPortMalloc+0x188>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013094:	e004      	b.n	80130a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8013096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013098:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80130a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a2:	685b      	ldr	r3, [r3, #4]
 80130a4:	687a      	ldr	r2, [r7, #4]
 80130a6:	429a      	cmp	r2, r3
 80130a8:	d903      	bls.n	80130b2 <pvPortMalloc+0xa6>
 80130aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d1f1      	bne.n	8013096 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80130b2:	4b35      	ldr	r3, [pc, #212]	; (8013188 <pvPortMalloc+0x17c>)
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130b8:	429a      	cmp	r2, r3
 80130ba:	d04c      	beq.n	8013156 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80130bc:	6a3b      	ldr	r3, [r7, #32]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	2208      	movs	r2, #8
 80130c2:	4413      	add	r3, r2
 80130c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80130c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130c8:	681a      	ldr	r2, [r3, #0]
 80130ca:	6a3b      	ldr	r3, [r7, #32]
 80130cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80130ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d0:	685a      	ldr	r2, [r3, #4]
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	1ad2      	subs	r2, r2, r3
 80130d6:	2308      	movs	r3, #8
 80130d8:	005b      	lsls	r3, r3, #1
 80130da:	429a      	cmp	r2, r3
 80130dc:	d920      	bls.n	8013120 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80130de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	4413      	add	r3, r2
 80130e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80130e6:	69bb      	ldr	r3, [r7, #24]
 80130e8:	f003 0307 	and.w	r3, r3, #7
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d00b      	beq.n	8013108 <pvPortMalloc+0xfc>
 80130f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130f4:	b672      	cpsid	i
 80130f6:	f383 8811 	msr	BASEPRI, r3
 80130fa:	f3bf 8f6f 	isb	sy
 80130fe:	f3bf 8f4f 	dsb	sy
 8013102:	b662      	cpsie	i
 8013104:	613b      	str	r3, [r7, #16]
 8013106:	e7fe      	b.n	8013106 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801310a:	685a      	ldr	r2, [r3, #4]
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	1ad2      	subs	r2, r2, r3
 8013110:	69bb      	ldr	r3, [r7, #24]
 8013112:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013116:	687a      	ldr	r2, [r7, #4]
 8013118:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801311a:	69b8      	ldr	r0, [r7, #24]
 801311c:	f000 f8fc 	bl	8013318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013120:	4b1b      	ldr	r3, [pc, #108]	; (8013190 <pvPortMalloc+0x184>)
 8013122:	681a      	ldr	r2, [r3, #0]
 8013124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013126:	685b      	ldr	r3, [r3, #4]
 8013128:	1ad3      	subs	r3, r2, r3
 801312a:	4a19      	ldr	r2, [pc, #100]	; (8013190 <pvPortMalloc+0x184>)
 801312c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801312e:	4b18      	ldr	r3, [pc, #96]	; (8013190 <pvPortMalloc+0x184>)
 8013130:	681a      	ldr	r2, [r3, #0]
 8013132:	4b19      	ldr	r3, [pc, #100]	; (8013198 <pvPortMalloc+0x18c>)
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	429a      	cmp	r2, r3
 8013138:	d203      	bcs.n	8013142 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801313a:	4b15      	ldr	r3, [pc, #84]	; (8013190 <pvPortMalloc+0x184>)
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	4a16      	ldr	r2, [pc, #88]	; (8013198 <pvPortMalloc+0x18c>)
 8013140:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013144:	685a      	ldr	r2, [r3, #4]
 8013146:	4b11      	ldr	r3, [pc, #68]	; (801318c <pvPortMalloc+0x180>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	431a      	orrs	r2, r3
 801314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801314e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013152:	2200      	movs	r2, #0
 8013154:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013156:	f7fe ff39 	bl	8011fcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801315a:	69fb      	ldr	r3, [r7, #28]
 801315c:	f003 0307 	and.w	r3, r3, #7
 8013160:	2b00      	cmp	r3, #0
 8013162:	d00b      	beq.n	801317c <pvPortMalloc+0x170>
 8013164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013168:	b672      	cpsid	i
 801316a:	f383 8811 	msr	BASEPRI, r3
 801316e:	f3bf 8f6f 	isb	sy
 8013172:	f3bf 8f4f 	dsb	sy
 8013176:	b662      	cpsie	i
 8013178:	60fb      	str	r3, [r7, #12]
 801317a:	e7fe      	b.n	801317a <pvPortMalloc+0x16e>
	return pvReturn;
 801317c:	69fb      	ldr	r3, [r7, #28]
}
 801317e:	4618      	mov	r0, r3
 8013180:	3728      	adds	r7, #40	; 0x28
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}
 8013186:	bf00      	nop
 8013188:	20004084 	.word	0x20004084
 801318c:	20004090 	.word	0x20004090
 8013190:	20004088 	.word	0x20004088
 8013194:	2000407c 	.word	0x2000407c
 8013198:	2000408c 	.word	0x2000408c

0801319c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b086      	sub	sp, #24
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d04a      	beq.n	8013244 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80131ae:	2308      	movs	r3, #8
 80131b0:	425b      	negs	r3, r3
 80131b2:	697a      	ldr	r2, [r7, #20]
 80131b4:	4413      	add	r3, r2
 80131b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80131b8:	697b      	ldr	r3, [r7, #20]
 80131ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80131bc:	693b      	ldr	r3, [r7, #16]
 80131be:	685a      	ldr	r2, [r3, #4]
 80131c0:	4b22      	ldr	r3, [pc, #136]	; (801324c <vPortFree+0xb0>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	4013      	ands	r3, r2
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d10b      	bne.n	80131e2 <vPortFree+0x46>
 80131ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ce:	b672      	cpsid	i
 80131d0:	f383 8811 	msr	BASEPRI, r3
 80131d4:	f3bf 8f6f 	isb	sy
 80131d8:	f3bf 8f4f 	dsb	sy
 80131dc:	b662      	cpsie	i
 80131de:	60fb      	str	r3, [r7, #12]
 80131e0:	e7fe      	b.n	80131e0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80131e2:	693b      	ldr	r3, [r7, #16]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d00b      	beq.n	8013202 <vPortFree+0x66>
 80131ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ee:	b672      	cpsid	i
 80131f0:	f383 8811 	msr	BASEPRI, r3
 80131f4:	f3bf 8f6f 	isb	sy
 80131f8:	f3bf 8f4f 	dsb	sy
 80131fc:	b662      	cpsie	i
 80131fe:	60bb      	str	r3, [r7, #8]
 8013200:	e7fe      	b.n	8013200 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013202:	693b      	ldr	r3, [r7, #16]
 8013204:	685a      	ldr	r2, [r3, #4]
 8013206:	4b11      	ldr	r3, [pc, #68]	; (801324c <vPortFree+0xb0>)
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	4013      	ands	r3, r2
 801320c:	2b00      	cmp	r3, #0
 801320e:	d019      	beq.n	8013244 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013210:	693b      	ldr	r3, [r7, #16]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d115      	bne.n	8013244 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013218:	693b      	ldr	r3, [r7, #16]
 801321a:	685a      	ldr	r2, [r3, #4]
 801321c:	4b0b      	ldr	r3, [pc, #44]	; (801324c <vPortFree+0xb0>)
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	43db      	mvns	r3, r3
 8013222:	401a      	ands	r2, r3
 8013224:	693b      	ldr	r3, [r7, #16]
 8013226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013228:	f7fe fec2 	bl	8011fb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801322c:	693b      	ldr	r3, [r7, #16]
 801322e:	685a      	ldr	r2, [r3, #4]
 8013230:	4b07      	ldr	r3, [pc, #28]	; (8013250 <vPortFree+0xb4>)
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	4413      	add	r3, r2
 8013236:	4a06      	ldr	r2, [pc, #24]	; (8013250 <vPortFree+0xb4>)
 8013238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801323a:	6938      	ldr	r0, [r7, #16]
 801323c:	f000 f86c 	bl	8013318 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013240:	f7fe fec4 	bl	8011fcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013244:	bf00      	nop
 8013246:	3718      	adds	r7, #24
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}
 801324c:	20004090 	.word	0x20004090
 8013250:	20004088 	.word	0x20004088

08013254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013254:	b480      	push	{r7}
 8013256:	b085      	sub	sp, #20
 8013258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801325a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801325e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013260:	4b27      	ldr	r3, [pc, #156]	; (8013300 <prvHeapInit+0xac>)
 8013262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	f003 0307 	and.w	r3, r3, #7
 801326a:	2b00      	cmp	r3, #0
 801326c:	d00c      	beq.n	8013288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	3307      	adds	r3, #7
 8013272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	f023 0307 	bic.w	r3, r3, #7
 801327a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801327c:	68ba      	ldr	r2, [r7, #8]
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	1ad3      	subs	r3, r2, r3
 8013282:	4a1f      	ldr	r2, [pc, #124]	; (8013300 <prvHeapInit+0xac>)
 8013284:	4413      	add	r3, r2
 8013286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801328c:	4a1d      	ldr	r2, [pc, #116]	; (8013304 <prvHeapInit+0xb0>)
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013292:	4b1c      	ldr	r3, [pc, #112]	; (8013304 <prvHeapInit+0xb0>)
 8013294:	2200      	movs	r2, #0
 8013296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	68ba      	ldr	r2, [r7, #8]
 801329c:	4413      	add	r3, r2
 801329e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80132a0:	2208      	movs	r2, #8
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	1a9b      	subs	r3, r3, r2
 80132a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	f023 0307 	bic.w	r3, r3, #7
 80132ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	4a15      	ldr	r2, [pc, #84]	; (8013308 <prvHeapInit+0xb4>)
 80132b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80132b6:	4b14      	ldr	r3, [pc, #80]	; (8013308 <prvHeapInit+0xb4>)
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	2200      	movs	r2, #0
 80132bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80132be:	4b12      	ldr	r3, [pc, #72]	; (8013308 <prvHeapInit+0xb4>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	2200      	movs	r2, #0
 80132c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	68fa      	ldr	r2, [r7, #12]
 80132ce:	1ad2      	subs	r2, r2, r3
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80132d4:	4b0c      	ldr	r3, [pc, #48]	; (8013308 <prvHeapInit+0xb4>)
 80132d6:	681a      	ldr	r2, [r3, #0]
 80132d8:	683b      	ldr	r3, [r7, #0]
 80132da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	685b      	ldr	r3, [r3, #4]
 80132e0:	4a0a      	ldr	r2, [pc, #40]	; (801330c <prvHeapInit+0xb8>)
 80132e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	685b      	ldr	r3, [r3, #4]
 80132e8:	4a09      	ldr	r2, [pc, #36]	; (8013310 <prvHeapInit+0xbc>)
 80132ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80132ec:	4b09      	ldr	r3, [pc, #36]	; (8013314 <prvHeapInit+0xc0>)
 80132ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80132f2:	601a      	str	r2, [r3, #0]
}
 80132f4:	bf00      	nop
 80132f6:	3714      	adds	r7, #20
 80132f8:	46bd      	mov	sp, r7
 80132fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fe:	4770      	bx	lr
 8013300:	2000047c 	.word	0x2000047c
 8013304:	2000407c 	.word	0x2000407c
 8013308:	20004084 	.word	0x20004084
 801330c:	2000408c 	.word	0x2000408c
 8013310:	20004088 	.word	0x20004088
 8013314:	20004090 	.word	0x20004090

08013318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013318:	b480      	push	{r7}
 801331a:	b085      	sub	sp, #20
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013320:	4b28      	ldr	r3, [pc, #160]	; (80133c4 <prvInsertBlockIntoFreeList+0xac>)
 8013322:	60fb      	str	r3, [r7, #12]
 8013324:	e002      	b.n	801332c <prvInsertBlockIntoFreeList+0x14>
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	60fb      	str	r3, [r7, #12]
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	687a      	ldr	r2, [r7, #4]
 8013332:	429a      	cmp	r2, r3
 8013334:	d8f7      	bhi.n	8013326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	685b      	ldr	r3, [r3, #4]
 801333e:	68ba      	ldr	r2, [r7, #8]
 8013340:	4413      	add	r3, r2
 8013342:	687a      	ldr	r2, [r7, #4]
 8013344:	429a      	cmp	r2, r3
 8013346:	d108      	bne.n	801335a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	685a      	ldr	r2, [r3, #4]
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	685b      	ldr	r3, [r3, #4]
 8013350:	441a      	add	r2, r3
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	685b      	ldr	r3, [r3, #4]
 8013362:	68ba      	ldr	r2, [r7, #8]
 8013364:	441a      	add	r2, r3
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	429a      	cmp	r2, r3
 801336c:	d118      	bne.n	80133a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	681a      	ldr	r2, [r3, #0]
 8013372:	4b15      	ldr	r3, [pc, #84]	; (80133c8 <prvInsertBlockIntoFreeList+0xb0>)
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	429a      	cmp	r2, r3
 8013378:	d00d      	beq.n	8013396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	685a      	ldr	r2, [r3, #4]
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	685b      	ldr	r3, [r3, #4]
 8013384:	441a      	add	r2, r3
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	681a      	ldr	r2, [r3, #0]
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	601a      	str	r2, [r3, #0]
 8013394:	e008      	b.n	80133a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013396:	4b0c      	ldr	r3, [pc, #48]	; (80133c8 <prvInsertBlockIntoFreeList+0xb0>)
 8013398:	681a      	ldr	r2, [r3, #0]
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	601a      	str	r2, [r3, #0]
 801339e:	e003      	b.n	80133a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	681a      	ldr	r2, [r3, #0]
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80133a8:	68fa      	ldr	r2, [r7, #12]
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	429a      	cmp	r2, r3
 80133ae:	d002      	beq.n	80133b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	687a      	ldr	r2, [r7, #4]
 80133b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80133b6:	bf00      	nop
 80133b8:	3714      	adds	r7, #20
 80133ba:	46bd      	mov	sp, r7
 80133bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c0:	4770      	bx	lr
 80133c2:	bf00      	nop
 80133c4:	2000407c 	.word	0x2000407c
 80133c8:	20004084 	.word	0x20004084

080133cc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b084      	sub	sp, #16
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
 80133d4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80133d6:	f008 ffcd 	bl	801c374 <sys_timeouts_sleeptime>
 80133da:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80133e2:	d10b      	bne.n	80133fc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80133e4:	4813      	ldr	r0, [pc, #76]	; (8013434 <tcpip_timeouts_mbox_fetch+0x68>)
 80133e6:	f00b fd36 	bl	801ee56 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80133ea:	2200      	movs	r2, #0
 80133ec:	6839      	ldr	r1, [r7, #0]
 80133ee:	6878      	ldr	r0, [r7, #4]
 80133f0:	f00b fca8 	bl	801ed44 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80133f4:	480f      	ldr	r0, [pc, #60]	; (8013434 <tcpip_timeouts_mbox_fetch+0x68>)
 80133f6:	f00b fd1f 	bl	801ee38 <sys_mutex_lock>
    return;
 80133fa:	e018      	b.n	801342e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d102      	bne.n	8013408 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8013402:	f008 ff7d 	bl	801c300 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8013406:	e7e6      	b.n	80133d6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8013408:	480a      	ldr	r0, [pc, #40]	; (8013434 <tcpip_timeouts_mbox_fetch+0x68>)
 801340a:	f00b fd24 	bl	801ee56 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801340e:	68fa      	ldr	r2, [r7, #12]
 8013410:	6839      	ldr	r1, [r7, #0]
 8013412:	6878      	ldr	r0, [r7, #4]
 8013414:	f00b fc96 	bl	801ed44 <sys_arch_mbox_fetch>
 8013418:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801341a:	4806      	ldr	r0, [pc, #24]	; (8013434 <tcpip_timeouts_mbox_fetch+0x68>)
 801341c:	f00b fd0c 	bl	801ee38 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013426:	d102      	bne.n	801342e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8013428:	f008 ff6a 	bl	801c300 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801342c:	e7d3      	b.n	80133d6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801342e:	3710      	adds	r7, #16
 8013430:	46bd      	mov	sp, r7
 8013432:	bd80      	pop	{r7, pc}
 8013434:	20010614 	.word	0x20010614

08013438 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b084      	sub	sp, #16
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8013440:	4810      	ldr	r0, [pc, #64]	; (8013484 <tcpip_thread+0x4c>)
 8013442:	f00b fcf9 	bl	801ee38 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8013446:	4b10      	ldr	r3, [pc, #64]	; (8013488 <tcpip_thread+0x50>)
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d005      	beq.n	801345a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801344e:	4b0e      	ldr	r3, [pc, #56]	; (8013488 <tcpip_thread+0x50>)
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	4a0e      	ldr	r2, [pc, #56]	; (801348c <tcpip_thread+0x54>)
 8013454:	6812      	ldr	r2, [r2, #0]
 8013456:	4610      	mov	r0, r2
 8013458:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801345a:	f107 030c 	add.w	r3, r7, #12
 801345e:	4619      	mov	r1, r3
 8013460:	480b      	ldr	r0, [pc, #44]	; (8013490 <tcpip_thread+0x58>)
 8013462:	f7ff ffb3 	bl	80133cc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d106      	bne.n	801347a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801346c:	4b09      	ldr	r3, [pc, #36]	; (8013494 <tcpip_thread+0x5c>)
 801346e:	2291      	movs	r2, #145	; 0x91
 8013470:	4909      	ldr	r1, [pc, #36]	; (8013498 <tcpip_thread+0x60>)
 8013472:	480a      	ldr	r0, [pc, #40]	; (801349c <tcpip_thread+0x64>)
 8013474:	f00b fd86 	bl	801ef84 <iprintf>
      continue;
 8013478:	e003      	b.n	8013482 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	4618      	mov	r0, r3
 801347e:	f000 f80f 	bl	80134a0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8013482:	e7ea      	b.n	801345a <tcpip_thread+0x22>
 8013484:	20010614 	.word	0x20010614
 8013488:	20004094 	.word	0x20004094
 801348c:	20004098 	.word	0x20004098
 8013490:	2000409c 	.word	0x2000409c
 8013494:	0801fee8 	.word	0x0801fee8
 8013498:	0801ff18 	.word	0x0801ff18
 801349c:	0801ff38 	.word	0x0801ff38

080134a0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	781b      	ldrb	r3, [r3, #0]
 80134ac:	2b01      	cmp	r3, #1
 80134ae:	d018      	beq.n	80134e2 <tcpip_thread_handle_msg+0x42>
 80134b0:	2b02      	cmp	r3, #2
 80134b2:	d021      	beq.n	80134f8 <tcpip_thread_handle_msg+0x58>
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d126      	bne.n	8013506 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	68db      	ldr	r3, [r3, #12]
 80134bc:	687a      	ldr	r2, [r7, #4]
 80134be:	6850      	ldr	r0, [r2, #4]
 80134c0:	687a      	ldr	r2, [r7, #4]
 80134c2:	6892      	ldr	r2, [r2, #8]
 80134c4:	4611      	mov	r1, r2
 80134c6:	4798      	blx	r3
 80134c8:	4603      	mov	r3, r0
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d004      	beq.n	80134d8 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	685b      	ldr	r3, [r3, #4]
 80134d2:	4618      	mov	r0, r3
 80134d4:	f002 fb10 	bl	8015af8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80134d8:	6879      	ldr	r1, [r7, #4]
 80134da:	2009      	movs	r0, #9
 80134dc:	f001 fc6c 	bl	8014db8 <memp_free>
      break;
 80134e0:	e018      	b.n	8013514 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	685b      	ldr	r3, [r3, #4]
 80134e6:	687a      	ldr	r2, [r7, #4]
 80134e8:	6892      	ldr	r2, [r2, #8]
 80134ea:	4610      	mov	r0, r2
 80134ec:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80134ee:	6879      	ldr	r1, [r7, #4]
 80134f0:	2008      	movs	r0, #8
 80134f2:	f001 fc61 	bl	8014db8 <memp_free>
      break;
 80134f6:	e00d      	b.n	8013514 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	685b      	ldr	r3, [r3, #4]
 80134fc:	687a      	ldr	r2, [r7, #4]
 80134fe:	6892      	ldr	r2, [r2, #8]
 8013500:	4610      	mov	r0, r2
 8013502:	4798      	blx	r3
      break;
 8013504:	e006      	b.n	8013514 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8013506:	4b05      	ldr	r3, [pc, #20]	; (801351c <tcpip_thread_handle_msg+0x7c>)
 8013508:	22cf      	movs	r2, #207	; 0xcf
 801350a:	4905      	ldr	r1, [pc, #20]	; (8013520 <tcpip_thread_handle_msg+0x80>)
 801350c:	4805      	ldr	r0, [pc, #20]	; (8013524 <tcpip_thread_handle_msg+0x84>)
 801350e:	f00b fd39 	bl	801ef84 <iprintf>
      break;
 8013512:	bf00      	nop
  }
}
 8013514:	bf00      	nop
 8013516:	3708      	adds	r7, #8
 8013518:	46bd      	mov	sp, r7
 801351a:	bd80      	pop	{r7, pc}
 801351c:	0801fee8 	.word	0x0801fee8
 8013520:	0801ff18 	.word	0x0801ff18
 8013524:	0801ff38 	.word	0x0801ff38

08013528 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b086      	sub	sp, #24
 801352c:	af00      	add	r7, sp, #0
 801352e:	60f8      	str	r0, [r7, #12]
 8013530:	60b9      	str	r1, [r7, #8]
 8013532:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013534:	481a      	ldr	r0, [pc, #104]	; (80135a0 <tcpip_inpkt+0x78>)
 8013536:	f00b fc44 	bl	801edc2 <sys_mbox_valid>
 801353a:	4603      	mov	r3, r0
 801353c:	2b00      	cmp	r3, #0
 801353e:	d105      	bne.n	801354c <tcpip_inpkt+0x24>
 8013540:	4b18      	ldr	r3, [pc, #96]	; (80135a4 <tcpip_inpkt+0x7c>)
 8013542:	22fc      	movs	r2, #252	; 0xfc
 8013544:	4918      	ldr	r1, [pc, #96]	; (80135a8 <tcpip_inpkt+0x80>)
 8013546:	4819      	ldr	r0, [pc, #100]	; (80135ac <tcpip_inpkt+0x84>)
 8013548:	f00b fd1c 	bl	801ef84 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801354c:	2009      	movs	r0, #9
 801354e:	f001 fbe1 	bl	8014d14 <memp_malloc>
 8013552:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8013554:	697b      	ldr	r3, [r7, #20]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d102      	bne.n	8013560 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801355a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801355e:	e01a      	b.n	8013596 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8013560:	697b      	ldr	r3, [r7, #20]
 8013562:	2200      	movs	r2, #0
 8013564:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8013566:	697b      	ldr	r3, [r7, #20]
 8013568:	68fa      	ldr	r2, [r7, #12]
 801356a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801356c:	697b      	ldr	r3, [r7, #20]
 801356e:	68ba      	ldr	r2, [r7, #8]
 8013570:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8013572:	697b      	ldr	r3, [r7, #20]
 8013574:	687a      	ldr	r2, [r7, #4]
 8013576:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013578:	6979      	ldr	r1, [r7, #20]
 801357a:	4809      	ldr	r0, [pc, #36]	; (80135a0 <tcpip_inpkt+0x78>)
 801357c:	f00b fbc8 	bl	801ed10 <sys_mbox_trypost>
 8013580:	4603      	mov	r3, r0
 8013582:	2b00      	cmp	r3, #0
 8013584:	d006      	beq.n	8013594 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8013586:	6979      	ldr	r1, [r7, #20]
 8013588:	2009      	movs	r0, #9
 801358a:	f001 fc15 	bl	8014db8 <memp_free>
    return ERR_MEM;
 801358e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013592:	e000      	b.n	8013596 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8013594:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8013596:	4618      	mov	r0, r3
 8013598:	3718      	adds	r7, #24
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}
 801359e:	bf00      	nop
 80135a0:	2000409c 	.word	0x2000409c
 80135a4:	0801fee8 	.word	0x0801fee8
 80135a8:	0801ff60 	.word	0x0801ff60
 80135ac:	0801ff38 	.word	0x0801ff38

080135b0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b082      	sub	sp, #8
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
 80135b8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80135c0:	f003 0318 	and.w	r3, r3, #24
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d006      	beq.n	80135d6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80135c8:	4a08      	ldr	r2, [pc, #32]	; (80135ec <tcpip_input+0x3c>)
 80135ca:	6839      	ldr	r1, [r7, #0]
 80135cc:	6878      	ldr	r0, [r7, #4]
 80135ce:	f7ff ffab 	bl	8013528 <tcpip_inpkt>
 80135d2:	4603      	mov	r3, r0
 80135d4:	e005      	b.n	80135e2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80135d6:	4a06      	ldr	r2, [pc, #24]	; (80135f0 <tcpip_input+0x40>)
 80135d8:	6839      	ldr	r1, [r7, #0]
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	f7ff ffa4 	bl	8013528 <tcpip_inpkt>
 80135e0:	4603      	mov	r3, r0
}
 80135e2:	4618      	mov	r0, r3
 80135e4:	3708      	adds	r7, #8
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd80      	pop	{r7, pc}
 80135ea:	bf00      	nop
 80135ec:	0801eb21 	.word	0x0801eb21
 80135f0:	0801da41 	.word	0x0801da41

080135f4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b084      	sub	sp, #16
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80135fe:	4819      	ldr	r0, [pc, #100]	; (8013664 <tcpip_try_callback+0x70>)
 8013600:	f00b fbdf 	bl	801edc2 <sys_mbox_valid>
 8013604:	4603      	mov	r3, r0
 8013606:	2b00      	cmp	r3, #0
 8013608:	d106      	bne.n	8013618 <tcpip_try_callback+0x24>
 801360a:	4b17      	ldr	r3, [pc, #92]	; (8013668 <tcpip_try_callback+0x74>)
 801360c:	f240 125d 	movw	r2, #349	; 0x15d
 8013610:	4916      	ldr	r1, [pc, #88]	; (801366c <tcpip_try_callback+0x78>)
 8013612:	4817      	ldr	r0, [pc, #92]	; (8013670 <tcpip_try_callback+0x7c>)
 8013614:	f00b fcb6 	bl	801ef84 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8013618:	2008      	movs	r0, #8
 801361a:	f001 fb7b 	bl	8014d14 <memp_malloc>
 801361e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d102      	bne.n	801362c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8013626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801362a:	e017      	b.n	801365c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	2201      	movs	r2, #1
 8013630:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	687a      	ldr	r2, [r7, #4]
 8013636:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	683a      	ldr	r2, [r7, #0]
 801363c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801363e:	68f9      	ldr	r1, [r7, #12]
 8013640:	4808      	ldr	r0, [pc, #32]	; (8013664 <tcpip_try_callback+0x70>)
 8013642:	f00b fb65 	bl	801ed10 <sys_mbox_trypost>
 8013646:	4603      	mov	r3, r0
 8013648:	2b00      	cmp	r3, #0
 801364a:	d006      	beq.n	801365a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801364c:	68f9      	ldr	r1, [r7, #12]
 801364e:	2008      	movs	r0, #8
 8013650:	f001 fbb2 	bl	8014db8 <memp_free>
    return ERR_MEM;
 8013654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013658:	e000      	b.n	801365c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801365a:	2300      	movs	r3, #0
}
 801365c:	4618      	mov	r0, r3
 801365e:	3710      	adds	r7, #16
 8013660:	46bd      	mov	sp, r7
 8013662:	bd80      	pop	{r7, pc}
 8013664:	2000409c 	.word	0x2000409c
 8013668:	0801fee8 	.word	0x0801fee8
 801366c:	0801ff60 	.word	0x0801ff60
 8013670:	0801ff38 	.word	0x0801ff38

08013674 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b084      	sub	sp, #16
 8013678:	af02      	add	r7, sp, #8
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	6039      	str	r1, [r7, #0]
  lwip_init();
 801367e:	f000 fec1 	bl	8014404 <lwip_init>

  tcpip_init_done = initfunc;
 8013682:	4a17      	ldr	r2, [pc, #92]	; (80136e0 <tcpip_init+0x6c>)
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8013688:	4a16      	ldr	r2, [pc, #88]	; (80136e4 <tcpip_init+0x70>)
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801368e:	2106      	movs	r1, #6
 8013690:	4815      	ldr	r0, [pc, #84]	; (80136e8 <tcpip_init+0x74>)
 8013692:	f00b fb1b 	bl	801eccc <sys_mbox_new>
 8013696:	4603      	mov	r3, r0
 8013698:	2b00      	cmp	r3, #0
 801369a:	d006      	beq.n	80136aa <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801369c:	4b13      	ldr	r3, [pc, #76]	; (80136ec <tcpip_init+0x78>)
 801369e:	f240 2261 	movw	r2, #609	; 0x261
 80136a2:	4913      	ldr	r1, [pc, #76]	; (80136f0 <tcpip_init+0x7c>)
 80136a4:	4813      	ldr	r0, [pc, #76]	; (80136f4 <tcpip_init+0x80>)
 80136a6:	f00b fc6d 	bl	801ef84 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80136aa:	4813      	ldr	r0, [pc, #76]	; (80136f8 <tcpip_init+0x84>)
 80136ac:	f00b fba8 	bl	801ee00 <sys_mutex_new>
 80136b0:	4603      	mov	r3, r0
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d006      	beq.n	80136c4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80136b6:	4b0d      	ldr	r3, [pc, #52]	; (80136ec <tcpip_init+0x78>)
 80136b8:	f240 2265 	movw	r2, #613	; 0x265
 80136bc:	490f      	ldr	r1, [pc, #60]	; (80136fc <tcpip_init+0x88>)
 80136be:	480d      	ldr	r0, [pc, #52]	; (80136f4 <tcpip_init+0x80>)
 80136c0:	f00b fc60 	bl	801ef84 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80136c4:	2300      	movs	r3, #0
 80136c6:	9300      	str	r3, [sp, #0]
 80136c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80136cc:	2200      	movs	r2, #0
 80136ce:	490c      	ldr	r1, [pc, #48]	; (8013700 <tcpip_init+0x8c>)
 80136d0:	480c      	ldr	r0, [pc, #48]	; (8013704 <tcpip_init+0x90>)
 80136d2:	f00b fbcd 	bl	801ee70 <sys_thread_new>
}
 80136d6:	bf00      	nop
 80136d8:	3708      	adds	r7, #8
 80136da:	46bd      	mov	sp, r7
 80136dc:	bd80      	pop	{r7, pc}
 80136de:	bf00      	nop
 80136e0:	20004094 	.word	0x20004094
 80136e4:	20004098 	.word	0x20004098
 80136e8:	2000409c 	.word	0x2000409c
 80136ec:	0801fee8 	.word	0x0801fee8
 80136f0:	0801ff70 	.word	0x0801ff70
 80136f4:	0801ff38 	.word	0x0801ff38
 80136f8:	20010614 	.word	0x20010614
 80136fc:	0801ff94 	.word	0x0801ff94
 8013700:	08013439 	.word	0x08013439
 8013704:	0801ffb8 	.word	0x0801ffb8

08013708 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8013708:	b580      	push	{r7, lr}
 801370a:	b084      	sub	sp, #16
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]
 8013710:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d002      	beq.n	801371e <fs_open+0x16>
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d102      	bne.n	8013724 <fs_open+0x1c>
    return ERR_ARG;
 801371e:	f06f 030f 	mvn.w	r3, #15
 8013722:	e028      	b.n	8013776 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8013724:	4b16      	ldr	r3, [pc, #88]	; (8013780 <fs_open+0x78>)
 8013726:	60fb      	str	r3, [r7, #12]
 8013728:	e020      	b.n	801376c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	685b      	ldr	r3, [r3, #4]
 801372e:	4619      	mov	r1, r3
 8013730:	6838      	ldr	r0, [r7, #0]
 8013732:	f7f4 fd85 	bl	8008240 <strcmp>
 8013736:	4603      	mov	r3, r0
 8013738:	2b00      	cmp	r3, #0
 801373a:	d114      	bne.n	8013766 <fs_open+0x5e>
      file->data = (const char *)f->data;
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	689a      	ldr	r2, [r3, #8]
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	68da      	ldr	r2, [r3, #12]
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	68da      	ldr	r2, [r3, #12]
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	2200      	movs	r2, #0
 8013758:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	7c1a      	ldrb	r2, [r3, #16]
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8013762:	2300      	movs	r3, #0
 8013764:	e007      	b.n	8013776 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	60fb      	str	r3, [r7, #12]
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d1db      	bne.n	801372a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8013772:	f06f 0305 	mvn.w	r3, #5
}
 8013776:	4618      	mov	r0, r3
 8013778:	3710      	adds	r7, #16
 801377a:	46bd      	mov	sp, r7
 801377c:	bd80      	pop	{r7, pc}
 801377e:	bf00      	nop
 8013780:	080336b4 	.word	0x080336b4

08013784 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8013784:	b480      	push	{r7}
 8013786:	b083      	sub	sp, #12
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 801378c:	bf00      	nop
 801378e:	370c      	adds	r7, #12
 8013790:	46bd      	mov	sp, r7
 8013792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013796:	4770      	bx	lr

08013798 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8013798:	b480      	push	{r7}
 801379a:	b083      	sub	sp, #12
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	685a      	ldr	r2, [r3, #4]
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	689b      	ldr	r3, [r3, #8]
 80137a8:	1ad3      	subs	r3, r2, r3
}
 80137aa:	4618      	mov	r0, r3
 80137ac:	370c      	adds	r7, #12
 80137ae:	46bd      	mov	sp, r7
 80137b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b4:	4770      	bx	lr

080137b6 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 80137b6:	b580      	push	{r7, lr}
 80137b8:	b082      	sub	sp, #8
 80137ba:	af00      	add	r7, sp, #0
 80137bc:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 80137be:	222c      	movs	r2, #44	; 0x2c
 80137c0:	2100      	movs	r1, #0
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	f00b fbd6 	bl	801ef74 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 80137c8:	bf00      	nop
 80137ca:	3708      	adds	r7, #8
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd80      	pop	{r7, pc}

080137d0 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b082      	sub	sp, #8
 80137d4:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80137d6:	202c      	movs	r0, #44	; 0x2c
 80137d8:	f001 f91a 	bl	8014a10 <mem_malloc>
 80137dc:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d002      	beq.n	80137ea <http_state_alloc+0x1a>
    http_state_init(ret);
 80137e4:	6878      	ldr	r0, [r7, #4]
 80137e6:	f7ff ffe6 	bl	80137b6 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 80137ea:	687b      	ldr	r3, [r7, #4]
}
 80137ec:	4618      	mov	r0, r3
 80137ee:	3708      	adds	r7, #8
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}

080137f4 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b082      	sub	sp, #8
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	695b      	ldr	r3, [r3, #20]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d007      	beq.n	8013814 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	695b      	ldr	r3, [r3, #20]
 8013808:	4618      	mov	r0, r3
 801380a:	f7ff ffbb 	bl	8013784 <fs_close>
    hs->handle = NULL;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	2200      	movs	r2, #0
 8013812:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	6a1b      	ldr	r3, [r3, #32]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d007      	beq.n	801382c <http_state_eof+0x38>
    pbuf_free(hs->req);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	6a1b      	ldr	r3, [r3, #32]
 8013820:	4618      	mov	r0, r3
 8013822:	f002 f969 	bl	8015af8 <pbuf_free>
    hs->req = NULL;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	2200      	movs	r2, #0
 801382a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 801382c:	bf00      	nop
 801382e:	3708      	adds	r7, #8
 8013830:	46bd      	mov	sp, r7
 8013832:	bd80      	pop	{r7, pc}

08013834 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b082      	sub	sp, #8
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d005      	beq.n	801384e <http_state_free+0x1a>
    http_state_eof(hs);
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f7ff ffd6 	bl	80137f4 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8013848:	6878      	ldr	r0, [r7, #4]
 801384a:	f000 ff47 	bl	80146dc <mem_free>
  }
}
 801384e:	bf00      	nop
 8013850:	3708      	adds	r7, #8
 8013852:	46bd      	mov	sp, r7
 8013854:	bd80      	pop	{r7, pc}
	...

08013858 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b086      	sub	sp, #24
 801385c:	af00      	add	r7, sp, #0
 801385e:	60f8      	str	r0, [r7, #12]
 8013860:	60b9      	str	r1, [r7, #8]
 8013862:	607a      	str	r2, [r7, #4]
 8013864:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d106      	bne.n	801387a <http_write+0x22>
 801386c:	4b2c      	ldr	r3, [pc, #176]	; (8013920 <http_write+0xc8>)
 801386e:	f240 2219 	movw	r2, #537	; 0x219
 8013872:	492c      	ldr	r1, [pc, #176]	; (8013924 <http_write+0xcc>)
 8013874:	482c      	ldr	r0, [pc, #176]	; (8013928 <http_write+0xd0>)
 8013876:	f00b fb85 	bl	801ef84 <iprintf>
  len = *length;
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	881b      	ldrh	r3, [r3, #0]
 801387e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8013880:	8afb      	ldrh	r3, [r7, #22]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d101      	bne.n	801388a <http_write+0x32>
    return ERR_OK;
 8013886:	2300      	movs	r3, #0
 8013888:	e045      	b.n	8013916 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013890:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8013892:	8aba      	ldrh	r2, [r7, #20]
 8013894:	8afb      	ldrh	r3, [r7, #22]
 8013896:	429a      	cmp	r2, r3
 8013898:	d201      	bcs.n	801389e <http_write+0x46>
    len = max_len;
 801389a:	8abb      	ldrh	r3, [r7, #20]
 801389c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138a2:	005b      	lsls	r3, r3, #1
 80138a4:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 80138a6:	8afa      	ldrh	r2, [r7, #22]
 80138a8:	8abb      	ldrh	r3, [r7, #20]
 80138aa:	429a      	cmp	r2, r3
 80138ac:	d901      	bls.n	80138b2 <http_write+0x5a>
    len = max_len;
 80138ae:	8abb      	ldrh	r3, [r7, #20]
 80138b0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80138b2:	78fb      	ldrb	r3, [r7, #3]
 80138b4:	8afa      	ldrh	r2, [r7, #22]
 80138b6:	68b9      	ldr	r1, [r7, #8]
 80138b8:	68f8      	ldr	r0, [r7, #12]
 80138ba:	f006 fea7 	bl	801a60c <tcp_write>
 80138be:	4603      	mov	r3, r0
 80138c0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 80138c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80138c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80138ca:	d10f      	bne.n	80138ec <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d004      	beq.n	80138e0 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 80138dc:	2b08      	cmp	r3, #8
 80138de:	d902      	bls.n	80138e6 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 80138e0:	2301      	movs	r3, #1
 80138e2:	82fb      	strh	r3, [r7, #22]
 80138e4:	e002      	b.n	80138ec <http_write+0x94>
      } else {
        len /= 2;
 80138e6:	8afb      	ldrh	r3, [r7, #22]
 80138e8:	085b      	lsrs	r3, r3, #1
 80138ea:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 80138ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80138f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80138f4:	d102      	bne.n	80138fc <http_write+0xa4>
 80138f6:	8afb      	ldrh	r3, [r7, #22]
 80138f8:	2b01      	cmp	r3, #1
 80138fa:	d8da      	bhi.n	80138b2 <http_write+0x5a>

  if (err == ERR_OK) {
 80138fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d103      	bne.n	801390c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	8afa      	ldrh	r2, [r7, #22]
 8013908:	801a      	strh	r2, [r3, #0]
 801390a:	e002      	b.n	8013912 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	2200      	movs	r2, #0
 8013910:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8013912:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8013916:	4618      	mov	r0, r3
 8013918:	3718      	adds	r7, #24
 801391a:	46bd      	mov	sp, r7
 801391c:	bd80      	pop	{r7, pc}
 801391e:	bf00      	nop
 8013920:	08020008 	.word	0x08020008
 8013924:	08020040 	.word	0x08020040
 8013928:	08020050 	.word	0x08020050

0801392c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b086      	sub	sp, #24
 8013930:	af00      	add	r7, sp, #0
 8013932:	60f8      	str	r0, [r7, #12]
 8013934:	60b9      	str	r1, [r7, #8]
 8013936:	4613      	mov	r3, r2
 8013938:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 801393a:	2100      	movs	r1, #0
 801393c:	68f8      	ldr	r0, [r7, #12]
 801393e:	f003 ff29 	bl	8017794 <tcp_arg>
  altcp_recv(pcb, NULL);
 8013942:	2100      	movs	r1, #0
 8013944:	68f8      	ldr	r0, [r7, #12]
 8013946:	f003 ff37 	bl	80177b8 <tcp_recv>
  altcp_err(pcb, NULL);
 801394a:	2100      	movs	r1, #0
 801394c:	68f8      	ldr	r0, [r7, #12]
 801394e:	f003 ff77 	bl	8017840 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8013952:	2200      	movs	r2, #0
 8013954:	2100      	movs	r1, #0
 8013956:	68f8      	ldr	r0, [r7, #12]
 8013958:	f003 ffac 	bl	80178b4 <tcp_poll>
  altcp_sent(pcb, NULL);
 801395c:	2100      	movs	r1, #0
 801395e:	68f8      	ldr	r0, [r7, #12]
 8013960:	f003 ff4c 	bl	80177fc <tcp_sent>
  if (hs != NULL) {
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d002      	beq.n	8013970 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 801396a:	68b8      	ldr	r0, [r7, #8]
 801396c:	f7ff ff62 	bl	8013834 <http_state_free>
  }

  if (abort_conn) {
 8013970:	79fb      	ldrb	r3, [r7, #7]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d004      	beq.n	8013980 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8013976:	68f8      	ldr	r0, [r7, #12]
 8013978:	f002 fe4a 	bl	8016610 <tcp_abort>
    return ERR_OK;
 801397c:	2300      	movs	r3, #0
 801397e:	e00f      	b.n	80139a0 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8013980:	68f8      	ldr	r0, [r7, #12]
 8013982:	f002 fd5b 	bl	801643c <tcp_close>
 8013986:	4603      	mov	r3, r0
 8013988:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 801398a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d004      	beq.n	801399c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8013992:	2204      	movs	r2, #4
 8013994:	4904      	ldr	r1, [pc, #16]	; (80139a8 <http_close_or_abort_conn+0x7c>)
 8013996:	68f8      	ldr	r0, [r7, #12]
 8013998:	f003 ff8c 	bl	80178b4 <tcp_poll>
  }
  return err;
 801399c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80139a0:	4618      	mov	r0, r3
 80139a2:	3718      	adds	r7, #24
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd80      	pop	{r7, pc}
 80139a8:	0801406f 	.word	0x0801406f

080139ac <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b082      	sub	sp, #8
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
 80139b4:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 80139b6:	2200      	movs	r2, #0
 80139b8:	6839      	ldr	r1, [r7, #0]
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	f7ff ffb6 	bl	801392c <http_close_or_abort_conn>
 80139c0:	4603      	mov	r3, r0
}
 80139c2:	4618      	mov	r0, r3
 80139c4:	3708      	adds	r7, #8
 80139c6:	46bd      	mov	sp, r7
 80139c8:	bd80      	pop	{r7, pc}

080139ca <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80139ca:	b580      	push	{r7, lr}
 80139cc:	b082      	sub	sp, #8
 80139ce:	af00      	add	r7, sp, #0
 80139d0:	6078      	str	r0, [r7, #4]
 80139d2:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 80139d4:	6839      	ldr	r1, [r7, #0]
 80139d6:	6878      	ldr	r0, [r7, #4]
 80139d8:	f7ff ffe8 	bl	80139ac <http_close_conn>
  }
}
 80139dc:	bf00      	nop
 80139de:	3708      	adds	r7, #8
 80139e0:	46bd      	mov	sp, r7
 80139e2:	bd80      	pop	{r7, pc}

080139e4 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b084      	sub	sp, #16
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
 80139ec:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 80139ee:	683b      	ldr	r3, [r7, #0]
 80139f0:	695b      	ldr	r3, [r3, #20]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d105      	bne.n	8013a02 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 80139f6:	6839      	ldr	r1, [r7, #0]
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f7ff ffe6 	bl	80139ca <http_eof>
    return 0;
 80139fe:	2300      	movs	r3, #0
 8013a00:	e016      	b.n	8013a30 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	695b      	ldr	r3, [r3, #20]
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7ff fec6 	bl	8013798 <fs_bytes_left>
 8013a0c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	dc05      	bgt.n	8013a20 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8013a14:	6839      	ldr	r1, [r7, #0]
 8013a16:	6878      	ldr	r0, [r7, #4]
 8013a18:	f7ff ffd7 	bl	80139ca <http_eof>
    return 0;
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	e007      	b.n	8013a30 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8013a20:	4b05      	ldr	r3, [pc, #20]	; (8013a38 <http_check_eof+0x54>)
 8013a22:	f240 429d 	movw	r2, #1181	; 0x49d
 8013a26:	4905      	ldr	r1, [pc, #20]	; (8013a3c <http_check_eof+0x58>)
 8013a28:	4805      	ldr	r0, [pc, #20]	; (8013a40 <http_check_eof+0x5c>)
 8013a2a:	f00b faab 	bl	801ef84 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8013a2e:	2301      	movs	r3, #1
}
 8013a30:	4618      	mov	r0, r3
 8013a32:	3710      	adds	r7, #16
 8013a34:	46bd      	mov	sp, r7
 8013a36:	bd80      	pop	{r7, pc}
 8013a38:	08020008 	.word	0x08020008
 8013a3c:	08020078 	.word	0x08020078
 8013a40:	08020050 	.word	0x08020050

08013a44 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b084      	sub	sp, #16
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	6078      	str	r0, [r7, #4]
 8013a4c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8013a4e:	2300      	movs	r3, #0
 8013a50:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8013a52:	683b      	ldr	r3, [r7, #0]
 8013a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013a5a:	4293      	cmp	r3, r2
 8013a5c:	d803      	bhi.n	8013a66 <http_send_data_nonssi+0x22>
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a62:	b29b      	uxth	r3, r3
 8013a64:	e001      	b.n	8013a6a <http_send_data_nonssi+0x26>
 8013a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013a6a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	6999      	ldr	r1, [r3, #24]
 8013a70:	f107 020c 	add.w	r2, r7, #12
 8013a74:	2300      	movs	r3, #0
 8013a76:	6878      	ldr	r0, [r7, #4]
 8013a78:	f7ff feee 	bl	8013858 <http_write>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8013a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d10d      	bne.n	8013aa4 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8013a88:	2301      	movs	r3, #1
 8013a8a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	699b      	ldr	r3, [r3, #24]
 8013a90:	89ba      	ldrh	r2, [r7, #12]
 8013a92:	441a      	add	r2, r3
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a9c:	89ba      	ldrh	r2, [r7, #12]
 8013a9e:	1a9a      	subs	r2, r3, r2
 8013aa0:	683b      	ldr	r3, [r7, #0]
 8013aa2:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8013aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	3710      	adds	r7, #16
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	bd80      	pop	{r7, pc}

08013aae <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8013aae:	b580      	push	{r7, lr}
 8013ab0:	b084      	sub	sp, #16
 8013ab2:	af00      	add	r7, sp, #0
 8013ab4:	6078      	str	r0, [r7, #4]
 8013ab6:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8013ab8:	2300      	movs	r3, #0
 8013aba:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d101      	bne.n	8013ac6 <http_send+0x18>
    return 0;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	e025      	b.n	8013b12 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d108      	bne.n	8013ae0 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8013ace:	6839      	ldr	r1, [r7, #0]
 8013ad0:	6878      	ldr	r0, [r7, #4]
 8013ad2:	f7ff ff87 	bl	80139e4 <http_check_eof>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d101      	bne.n	8013ae0 <http_send+0x32>
      return 0;
 8013adc:	2300      	movs	r3, #0
 8013ade:	e018      	b.n	8013b12 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8013ae0:	6839      	ldr	r1, [r7, #0]
 8013ae2:	6878      	ldr	r0, [r7, #4]
 8013ae4:	f7ff ffae 	bl	8013a44 <http_send_data_nonssi>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8013aec:	683b      	ldr	r3, [r7, #0]
 8013aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d10d      	bne.n	8013b10 <http_send+0x62>
 8013af4:	683b      	ldr	r3, [r7, #0]
 8013af6:	695b      	ldr	r3, [r3, #20]
 8013af8:	4618      	mov	r0, r3
 8013afa:	f7ff fe4d 	bl	8013798 <fs_bytes_left>
 8013afe:	4603      	mov	r3, r0
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	dc05      	bgt.n	8013b10 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8013b04:	6839      	ldr	r1, [r7, #0]
 8013b06:	6878      	ldr	r0, [r7, #4]
 8013b08:	f7ff ff5f 	bl	80139ca <http_eof>
    return 0;
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	e000      	b.n	8013b12 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8013b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b12:	4618      	mov	r0, r3
 8013b14:	3710      	adds	r7, #16
 8013b16:	46bd      	mov	sp, r7
 8013b18:	bd80      	pop	{r7, pc}
	...

08013b1c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b084      	sub	sp, #16
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
 8013b24:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8013b26:	683b      	ldr	r3, [r7, #0]
 8013b28:	4a1c      	ldr	r2, [pc, #112]	; (8013b9c <http_get_404_file+0x80>)
 8013b2a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8013b2c:	687a      	ldr	r2, [r7, #4]
 8013b2e:	683b      	ldr	r3, [r7, #0]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	4619      	mov	r1, r3
 8013b34:	4610      	mov	r0, r2
 8013b36:	f7ff fde7 	bl	8013708 <fs_open>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d024      	beq.n	8013b90 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8013b46:	683b      	ldr	r3, [r7, #0]
 8013b48:	4a15      	ldr	r2, [pc, #84]	; (8013ba0 <http_get_404_file+0x84>)
 8013b4a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8013b4c:	687a      	ldr	r2, [r7, #4]
 8013b4e:	683b      	ldr	r3, [r7, #0]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	4619      	mov	r1, r3
 8013b54:	4610      	mov	r0, r2
 8013b56:	f7ff fdd7 	bl	8013708 <fs_open>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d014      	beq.n	8013b90 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8013b66:	683b      	ldr	r3, [r7, #0]
 8013b68:	4a0e      	ldr	r2, [pc, #56]	; (8013ba4 <http_get_404_file+0x88>)
 8013b6a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8013b6c:	687a      	ldr	r2, [r7, #4]
 8013b6e:	683b      	ldr	r3, [r7, #0]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	4619      	mov	r1, r3
 8013b74:	4610      	mov	r0, r2
 8013b76:	f7ff fdc7 	bl	8013708 <fs_open>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8013b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d004      	beq.n	8013b90 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8013b86:	683b      	ldr	r3, [r7, #0]
 8013b88:	2200      	movs	r2, #0
 8013b8a:	601a      	str	r2, [r3, #0]
        return NULL;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	e000      	b.n	8013b92 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8013b90:	687b      	ldr	r3, [r7, #4]
}
 8013b92:	4618      	mov	r0, r3
 8013b94:	3710      	adds	r7, #16
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}
 8013b9a:	bf00      	nop
 8013b9c:	080200b0 	.word	0x080200b0
 8013ba0:	080200bc 	.word	0x080200bc
 8013ba4:	080200c8 	.word	0x080200c8

08013ba8 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b08e      	sub	sp, #56	; 0x38
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	60f8      	str	r0, [r7, #12]
 8013bb0:	60b9      	str	r1, [r7, #8]
 8013bb2:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8013bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d106      	bne.n	8013bcc <http_parse_request+0x24>
 8013bbe:	4b65      	ldr	r3, [pc, #404]	; (8013d54 <http_parse_request+0x1ac>)
 8013bc0:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8013bc4:	4964      	ldr	r1, [pc, #400]	; (8013d58 <http_parse_request+0x1b0>)
 8013bc6:	4865      	ldr	r0, [pc, #404]	; (8013d5c <http_parse_request+0x1b4>)
 8013bc8:	f00b f9dc 	bl	801ef84 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8013bcc:	68bb      	ldr	r3, [r7, #8]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d106      	bne.n	8013be0 <http_parse_request+0x38>
 8013bd2:	4b60      	ldr	r3, [pc, #384]	; (8013d54 <http_parse_request+0x1ac>)
 8013bd4:	f240 72af 	movw	r2, #1967	; 0x7af
 8013bd8:	4961      	ldr	r1, [pc, #388]	; (8013d60 <http_parse_request+0x1b8>)
 8013bda:	4860      	ldr	r0, [pc, #384]	; (8013d5c <http_parse_request+0x1b4>)
 8013bdc:	f00b f9d2 	bl	801ef84 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	695b      	ldr	r3, [r3, #20]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d103      	bne.n	8013bf0 <http_parse_request+0x48>
 8013be8:	68bb      	ldr	r3, [r7, #8]
 8013bea:	699b      	ldr	r3, [r3, #24]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d002      	beq.n	8013bf6 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8013bf0:	f06f 0307 	mvn.w	r3, #7
 8013bf4:	e0aa      	b.n	8013d4c <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8013bf6:	68bb      	ldr	r3, [r7, #8]
 8013bf8:	6a1b      	ldr	r3, [r3, #32]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d103      	bne.n	8013c06 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8013bfe:	68bb      	ldr	r3, [r7, #8]
 8013c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c02:	621a      	str	r2, [r3, #32]
 8013c04:	e005      	b.n	8013c12 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8013c06:	68bb      	ldr	r3, [r7, #8]
 8013c08:	6a1b      	ldr	r3, [r3, #32]
 8013c0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f002 f841 	bl	8015c94 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8013c12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c14:	f002 f816 	bl	8015c44 <pbuf_ref>

  if (hs->req->next != NULL) {
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	6a1b      	ldr	r3, [r3, #32]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d012      	beq.n	8013c48 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8013c22:	68bb      	ldr	r3, [r7, #8]
 8013c24:	6a1b      	ldr	r3, [r3, #32]
 8013c26:	891b      	ldrh	r3, [r3, #8]
 8013c28:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8013c2c:	4293      	cmp	r3, r2
 8013c2e:	bf28      	it	cs
 8013c30:	4613      	movcs	r3, r2
 8013c32:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8013c34:	68bb      	ldr	r3, [r7, #8]
 8013c36:	6a18      	ldr	r0, [r3, #32]
 8013c38:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	4949      	ldr	r1, [pc, #292]	; (8013d64 <http_parse_request+0x1bc>)
 8013c3e:	f002 f951 	bl	8015ee4 <pbuf_copy_partial>
    data = httpd_req_buf;
 8013c42:	4b48      	ldr	r3, [pc, #288]	; (8013d64 <http_parse_request+0x1bc>)
 8013c44:	637b      	str	r3, [r7, #52]	; 0x34
 8013c46:	e005      	b.n	8013c54 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8013c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c4a:	685b      	ldr	r3, [r3, #4]
 8013c4c:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8013c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c50:	895b      	ldrh	r3, [r3, #10]
 8013c52:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8013c54:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013c56:	2b06      	cmp	r3, #6
 8013c58:	d963      	bls.n	8013d22 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8013c5a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013c5c:	461a      	mov	r2, r3
 8013c5e:	4942      	ldr	r1, [pc, #264]	; (8013d68 <http_parse_request+0x1c0>)
 8013c60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013c62:	f000 fb99 	bl	8014398 <lwip_strnstr>
 8013c66:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8013c68:	6a3b      	ldr	r3, [r7, #32]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d059      	beq.n	8013d22 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8013c72:	2204      	movs	r2, #4
 8013c74:	493d      	ldr	r1, [pc, #244]	; (8013d6c <http_parse_request+0x1c4>)
 8013c76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013c78:	f00b f9dd 	bl	801f036 <strncmp>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d117      	bne.n	8013cb2 <http_parse_request+0x10a>
        sp1 = data + 3;
 8013c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c84:	3303      	adds	r3, #3
 8013c86:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8013c88:	69fb      	ldr	r3, [r7, #28]
 8013c8a:	3301      	adds	r3, #1
 8013c8c:	461a      	mov	r2, r3
 8013c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c90:	1ad3      	subs	r3, r2, r3
 8013c92:	b29b      	uxth	r3, r3
 8013c94:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8013c96:	1ad3      	subs	r3, r2, r3
 8013c98:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8013c9a:	69fb      	ldr	r3, [r7, #28]
 8013c9c:	3301      	adds	r3, #1
 8013c9e:	8b7a      	ldrh	r2, [r7, #26]
 8013ca0:	4933      	ldr	r1, [pc, #204]	; (8013d70 <http_parse_request+0x1c8>)
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f000 fb78 	bl	8014398 <lwip_strnstr>
 8013ca8:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8013caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d111      	bne.n	8013cd4 <http_parse_request+0x12c>
 8013cb0:	e006      	b.n	8013cc0 <http_parse_request+0x118>
        data[4] = 0;
 8013cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cb4:	3304      	adds	r3, #4
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8013cba:	f06f 030f 	mvn.w	r3, #15
 8013cbe:	e045      	b.n	8013d4c <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8013cc0:	69fb      	ldr	r3, [r7, #28]
 8013cc2:	3301      	adds	r3, #1
 8013cc4:	8b7a      	ldrh	r2, [r7, #26]
 8013cc6:	4928      	ldr	r1, [pc, #160]	; (8013d68 <http_parse_request+0x1c0>)
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f000 fb65 	bl	8014398 <lwip_strnstr>
 8013cce:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8013cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd6:	69fa      	ldr	r2, [r7, #28]
 8013cd8:	3201      	adds	r2, #1
 8013cda:	1a9b      	subs	r3, r3, r2
 8013cdc:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8013cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d01e      	beq.n	8013d22 <http_parse_request+0x17a>
 8013ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ce6:	69fb      	ldr	r3, [r7, #28]
 8013ce8:	429a      	cmp	r2, r3
 8013cea:	d91a      	bls.n	8013d22 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8013cec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013cee:	461a      	mov	r2, r3
 8013cf0:	4920      	ldr	r1, [pc, #128]	; (8013d74 <http_parse_request+0x1cc>)
 8013cf2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013cf4:	f000 fb50 	bl	8014398 <lwip_strnstr>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d011      	beq.n	8013d22 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 8013cfe:	69fb      	ldr	r3, [r7, #28]
 8013d00:	3301      	adds	r3, #1
 8013d02:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8013d04:	69fb      	ldr	r3, [r7, #28]
 8013d06:	2200      	movs	r2, #0
 8013d08:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8013d0a:	8b3b      	ldrh	r3, [r7, #24]
 8013d0c:	697a      	ldr	r2, [r7, #20]
 8013d0e:	4413      	add	r3, r2
 8013d10:	2200      	movs	r2, #0
 8013d12:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8013d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d16:	6979      	ldr	r1, [r7, #20]
 8013d18:	68b8      	ldr	r0, [r7, #8]
 8013d1a:	f000 f82d 	bl	8013d78 <http_find_file>
 8013d1e:	4603      	mov	r3, r0
 8013d20:	e014      	b.n	8013d4c <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	6a1b      	ldr	r3, [r3, #32]
 8013d26:	4618      	mov	r0, r3
 8013d28:	f001 ff74 	bl	8015c14 <pbuf_clen>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8013d30:	68bb      	ldr	r3, [r7, #8]
 8013d32:	6a1b      	ldr	r3, [r3, #32]
 8013d34:	891b      	ldrh	r3, [r3, #8]
 8013d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013d3a:	d205      	bcs.n	8013d48 <http_parse_request+0x1a0>
 8013d3c:	8a7b      	ldrh	r3, [r7, #18]
 8013d3e:	2b05      	cmp	r3, #5
 8013d40:	d802      	bhi.n	8013d48 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8013d42:	f06f 0304 	mvn.w	r3, #4
 8013d46:	e001      	b.n	8013d4c <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8013d48:	f06f 030f 	mvn.w	r3, #15
  }
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3738      	adds	r7, #56	; 0x38
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd80      	pop	{r7, pc}
 8013d54:	08020008 	.word	0x08020008
 8013d58:	080200d4 	.word	0x080200d4
 8013d5c:	08020050 	.word	0x08020050
 8013d60:	080200e0 	.word	0x080200e0
 8013d64:	200040a0 	.word	0x200040a0
 8013d68:	080200ec 	.word	0x080200ec
 8013d6c:	080200f0 	.word	0x080200f0
 8013d70:	080200f8 	.word	0x080200f8
 8013d74:	080200fc 	.word	0x080200fc

08013d78 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b092      	sub	sp, #72	; 0x48
 8013d7c:	af02      	add	r7, sp, #8
 8013d7e:	60f8      	str	r0, [r7, #12]
 8013d80:	60b9      	str	r1, [r7, #8]
 8013d82:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8013d84:	2300      	movs	r3, #0
 8013d86:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8013d88:	2300      	movs	r3, #0
 8013d8a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8013d92:	68bb      	ldr	r3, [r7, #8]
 8013d94:	4618      	mov	r0, r3
 8013d96:	f7f4 fa5d 	bl	8008254 <strlen>
 8013d9a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8013d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d06b      	beq.n	8013e7a <http_find_file+0x102>
 8013da2:	68ba      	ldr	r2, [r7, #8]
 8013da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013da6:	3b01      	subs	r3, #1
 8013da8:	4413      	add	r3, r2
 8013daa:	781b      	ldrb	r3, [r3, #0]
 8013dac:	2b2f      	cmp	r3, #47	; 0x2f
 8013dae:	d164      	bne.n	8013e7a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8013db0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8013db2:	4a53      	ldr	r2, [pc, #332]	; (8013f00 <http_find_file+0x188>)
 8013db4:	4293      	cmp	r3, r2
 8013db6:	d102      	bne.n	8013dbe <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8013db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dba:	2b01      	cmp	r3, #1
 8013dbc:	d15d      	bne.n	8013e7a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8013dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dc0:	3b01      	subs	r3, #1
 8013dc2:	2b3f      	cmp	r3, #63	; 0x3f
 8013dc4:	bf28      	it	cs
 8013dc6:	233f      	movcs	r3, #63	; 0x3f
 8013dc8:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 8013dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d00a      	beq.n	8013de6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8013dd0:	68bb      	ldr	r3, [r7, #8]
 8013dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013dd4:	4619      	mov	r1, r3
 8013dd6:	484a      	ldr	r0, [pc, #296]	; (8013f00 <http_find_file+0x188>)
 8013dd8:	f00b f8c1 	bl	801ef5e <memcpy>
      http_uri_buf[copy_len] = 0;
 8013ddc:	4a48      	ldr	r2, [pc, #288]	; (8013f00 <http_find_file+0x188>)
 8013dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de0:	4413      	add	r3, r2
 8013de2:	2200      	movs	r2, #0
 8013de4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8013de6:	2300      	movs	r3, #0
 8013de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013dea:	e043      	b.n	8013e74 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8013dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d028      	beq.n	8013e44 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8013df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8013df8:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 8013dfa:	6a3b      	ldr	r3, [r7, #32]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d01e      	beq.n	8013e3e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8013e00:	4a40      	ldr	r2, [pc, #256]	; (8013f04 <http_find_file+0x18c>)
 8013e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f7f4 fa23 	bl	8008254 <strlen>
 8013e0e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8013e10:	69fa      	ldr	r2, [r7, #28]
 8013e12:	6a3b      	ldr	r3, [r7, #32]
 8013e14:	4293      	cmp	r3, r2
 8013e16:	bf28      	it	cs
 8013e18:	4613      	movcs	r3, r2
 8013e1a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8013e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e1e:	4a38      	ldr	r2, [pc, #224]	; (8013f00 <http_find_file+0x188>)
 8013e20:	1898      	adds	r0, r3, r2
 8013e22:	4a38      	ldr	r2, [pc, #224]	; (8013f04 <http_find_file+0x18c>)
 8013e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e26:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013e2a:	69ba      	ldr	r2, [r7, #24]
 8013e2c:	4619      	mov	r1, r3
 8013e2e:	f00b f896 	bl	801ef5e <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8013e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e34:	69bb      	ldr	r3, [r7, #24]
 8013e36:	4413      	add	r3, r2
 8013e38:	4a31      	ldr	r2, [pc, #196]	; (8013f00 <http_find_file+0x188>)
 8013e3a:	2100      	movs	r1, #0
 8013e3c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8013e3e:	4b30      	ldr	r3, [pc, #192]	; (8013f00 <http_find_file+0x188>)
 8013e40:	633b      	str	r3, [r7, #48]	; 0x30
 8013e42:	e004      	b.n	8013e4e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8013e44:	4a2f      	ldr	r2, [pc, #188]	; (8013f04 <http_find_file+0x18c>)
 8013e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013e4c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013e52:	4618      	mov	r0, r3
 8013e54:	f7ff fc58 	bl	8013708 <fs_open>
 8013e58:	4603      	mov	r3, r0
 8013e5a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 8013e5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d104      	bne.n	8013e6e <http_find_file+0xf6>
        uri = file_name;
 8013e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e66:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8013e6c:	e005      	b.n	8013e7a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8013e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e70:	3301      	adds	r3, #1
 8013e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e76:	2b04      	cmp	r3, #4
 8013e78:	d9b8      	bls.n	8013dec <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8013e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d124      	bne.n	8013eca <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	213f      	movs	r1, #63	; 0x3f
 8013e84:	4618      	mov	r0, r3
 8013e86:	f00b f8c9 	bl	801f01c <strchr>
 8013e8a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8013e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d005      	beq.n	8013e9e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8013e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e94:	2200      	movs	r2, #0
 8013e96:	701a      	strb	r2, [r3, #0]
      params++;
 8013e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e9a:	3301      	adds	r3, #1
 8013e9c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	68ba      	ldr	r2, [r7, #8]
 8013ea2:	4611      	mov	r1, r2
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	f7ff fc2f 	bl	8013708 <fs_open>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8013eae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d102      	bne.n	8013ebc <http_find_file+0x144>
      file = &hs->file_handle;
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8013eba:	e006      	b.n	8013eca <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 8013ebc:	f107 0308 	add.w	r3, r7, #8
 8013ec0:	4619      	mov	r1, r3
 8013ec2:	68f8      	ldr	r0, [r7, #12]
 8013ec4:	f7ff fe2a 	bl	8013b1c <http_get_404_file>
 8013ec8:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8013eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d106      	bne.n	8013ede <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8013ed0:	f107 0308 	add.w	r3, r7, #8
 8013ed4:	4619      	mov	r1, r3
 8013ed6:	68f8      	ldr	r0, [r7, #12]
 8013ed8:	f7ff fe20 	bl	8013b1c <http_get_404_file>
 8013edc:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8013ede:	68ba      	ldr	r2, [r7, #8]
 8013ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ee2:	9301      	str	r3, [sp, #4]
 8013ee4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ee8:	9300      	str	r3, [sp, #0]
 8013eea:	4613      	mov	r3, r2
 8013eec:	687a      	ldr	r2, [r7, #4]
 8013eee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013ef0:	68f8      	ldr	r0, [r7, #12]
 8013ef2:	f000 f809 	bl	8013f08 <http_init_file>
 8013ef6:	4603      	mov	r3, r0
}
 8013ef8:	4618      	mov	r0, r3
 8013efa:	3740      	adds	r7, #64	; 0x40
 8013efc:	46bd      	mov	sp, r7
 8013efe:	bd80      	pop	{r7, pc}
 8013f00:	200044a0 	.word	0x200044a0
 8013f04:	080336c8 	.word	0x080336c8

08013f08 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b086      	sub	sp, #24
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	60f8      	str	r0, [r7, #12]
 8013f10:	60b9      	str	r1, [r7, #8]
 8013f12:	607a      	str	r2, [r7, #4]
 8013f14:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d05d      	beq.n	8013fd8 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8013f1c:	68bb      	ldr	r3, [r7, #8]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d106      	bne.n	8013f32 <http_init_file+0x2a>
 8013f24:	4b35      	ldr	r3, [pc, #212]	; (8013ffc <http_init_file+0xf4>)
 8013f26:	f640 120b 	movw	r2, #2315	; 0x90b
 8013f2a:	4935      	ldr	r1, [pc, #212]	; (8014000 <http_init_file+0xf8>)
 8013f2c:	4835      	ldr	r0, [pc, #212]	; (8014004 <http_init_file+0xfc>)
 8013f2e:	f00b f829 	bl	801ef84 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	68ba      	ldr	r2, [r7, #8]
 8013f36:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	681a      	ldr	r2, [r3, #0]
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8013f40:	68bb      	ldr	r3, [r7, #8]
 8013f42:	685b      	ldr	r3, [r3, #4]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	da06      	bge.n	8013f56 <http_init_file+0x4e>
 8013f48:	4b2c      	ldr	r3, [pc, #176]	; (8013ffc <http_init_file+0xf4>)
 8013f4a:	f640 1234 	movw	r2, #2356	; 0x934
 8013f4e:	492e      	ldr	r1, [pc, #184]	; (8014008 <http_init_file+0x100>)
 8013f50:	482c      	ldr	r0, [pc, #176]	; (8014004 <http_init_file+0xfc>)
 8013f52:	f00b f817 	bl	801ef84 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	685b      	ldr	r3, [r3, #4]
 8013f5a:	461a      	mov	r2, r3
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	2200      	movs	r2, #0
 8013f64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	695b      	ldr	r3, [r3, #20]
 8013f6c:	7c1b      	ldrb	r3, [r3, #16]
 8013f6e:	f003 0301 	and.w	r3, r3, #1
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d106      	bne.n	8013f84 <http_init_file+0x7c>
 8013f76:	4b21      	ldr	r3, [pc, #132]	; (8013ffc <http_init_file+0xf4>)
 8013f78:	f640 1244 	movw	r2, #2372	; 0x944
 8013f7c:	4923      	ldr	r1, [pc, #140]	; (801400c <http_init_file+0x104>)
 8013f7e:	4821      	ldr	r0, [pc, #132]	; (8014004 <http_init_file+0xfc>)
 8013f80:	f00b f800 	bl	801ef84 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d033      	beq.n	8013ff2 <http_init_file+0xea>
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	695b      	ldr	r3, [r3, #20]
 8013f8e:	7c1b      	ldrb	r3, [r3, #16]
 8013f90:	f003 0301 	and.w	r3, r3, #1
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d02c      	beq.n	8013ff2 <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	6998      	ldr	r0, [r3, #24]
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fa0:	461a      	mov	r2, r3
 8013fa2:	491b      	ldr	r1, [pc, #108]	; (8014010 <http_init_file+0x108>)
 8013fa4:	f000 f9f8 	bl	8014398 <lwip_strnstr>
 8013fa8:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 8013faa:	697b      	ldr	r3, [r7, #20]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d020      	beq.n	8013ff2 <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 8013fb0:	697b      	ldr	r3, [r7, #20]
 8013fb2:	3304      	adds	r3, #4
 8013fb4:	461a      	mov	r2, r3
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	699b      	ldr	r3, [r3, #24]
 8013fba:	1ad3      	subs	r3, r2, r3
 8013fbc:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	699a      	ldr	r2, [r3, #24]
 8013fc2:	693b      	ldr	r3, [r7, #16]
 8013fc4:	441a      	add	r2, r3
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013fce:	693b      	ldr	r3, [r7, #16]
 8013fd0:	1ad2      	subs	r2, r2, r3
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	625a      	str	r2, [r3, #36]	; 0x24
 8013fd6:	e00c      	b.n	8013ff2 <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	2200      	movs	r2, #0
 8013fdc:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	2200      	movs	r2, #0
 8013fee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8013ff2:	2300      	movs	r3, #0
}
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	3718      	adds	r7, #24
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}
 8013ffc:	08020008 	.word	0x08020008
 8014000:	08020104 	.word	0x08020104
 8014004:	08020050 	.word	0x08020050
 8014008:	08020118 	.word	0x08020118
 801400c:	08020138 	.word	0x08020138
 8014010:	080200fc 	.word	0x080200fc

08014014 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b084      	sub	sp, #16
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
 801401c:	460b      	mov	r3, r1
 801401e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d002      	beq.n	8014030 <http_err+0x1c>
    http_state_free(hs);
 801402a:	68f8      	ldr	r0, [r7, #12]
 801402c:	f7ff fc02 	bl	8013834 <http_state_free>
  }
}
 8014030:	bf00      	nop
 8014032:	3710      	adds	r7, #16
 8014034:	46bd      	mov	sp, r7
 8014036:	bd80      	pop	{r7, pc}

08014038 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b086      	sub	sp, #24
 801403c:	af00      	add	r7, sp, #0
 801403e:	60f8      	str	r0, [r7, #12]
 8014040:	60b9      	str	r1, [r7, #8]
 8014042:	4613      	mov	r3, r2
 8014044:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 801404a:	697b      	ldr	r3, [r7, #20]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d101      	bne.n	8014054 <http_sent+0x1c>
    return ERR_OK;
 8014050:	2300      	movs	r3, #0
 8014052:	e008      	b.n	8014066 <http_sent+0x2e>
  }

  hs->retries = 0;
 8014054:	697b      	ldr	r3, [r7, #20]
 8014056:	2200      	movs	r2, #0
 8014058:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 801405c:	6979      	ldr	r1, [r7, #20]
 801405e:	68b8      	ldr	r0, [r7, #8]
 8014060:	f7ff fd25 	bl	8013aae <http_send>

  return ERR_OK;
 8014064:	2300      	movs	r3, #0
}
 8014066:	4618      	mov	r0, r3
 8014068:	3718      	adds	r7, #24
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}

0801406e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 801406e:	b580      	push	{r7, lr}
 8014070:	b084      	sub	sp, #16
 8014072:	af00      	add	r7, sp, #0
 8014074:	6078      	str	r0, [r7, #4]
 8014076:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d107      	bne.n	8014092 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8014082:	2100      	movs	r1, #0
 8014084:	6838      	ldr	r0, [r7, #0]
 8014086:	f7ff fc91 	bl	80139ac <http_close_conn>
 801408a:	4603      	mov	r3, r0
 801408c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 801408e:	2300      	movs	r3, #0
 8014090:	e021      	b.n	80140d6 <http_poll+0x68>
  } else {
    hs->retries++;
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014098:	3301      	adds	r3, #1
 801409a:	b2da      	uxtb	r2, r3
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80140a8:	2b04      	cmp	r3, #4
 80140aa:	d105      	bne.n	80140b8 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 80140ac:	68f9      	ldr	r1, [r7, #12]
 80140ae:	6838      	ldr	r0, [r7, #0]
 80140b0:	f7ff fc7c 	bl	80139ac <http_close_conn>
      return ERR_OK;
 80140b4:	2300      	movs	r3, #0
 80140b6:	e00e      	b.n	80140d6 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	695b      	ldr	r3, [r3, #20]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d009      	beq.n	80140d4 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80140c0:	68f9      	ldr	r1, [r7, #12]
 80140c2:	6838      	ldr	r0, [r7, #0]
 80140c4:	f7ff fcf3 	bl	8013aae <http_send>
 80140c8:	4603      	mov	r3, r0
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d002      	beq.n	80140d4 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80140ce:	6838      	ldr	r0, [r7, #0]
 80140d0:	f007 f888 	bl	801b1e4 <tcp_output>
      }
    }
  }

  return ERR_OK;
 80140d4:	2300      	movs	r3, #0
}
 80140d6:	4618      	mov	r0, r3
 80140d8:	3710      	adds	r7, #16
 80140da:	46bd      	mov	sp, r7
 80140dc:	bd80      	pop	{r7, pc}
	...

080140e0 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b086      	sub	sp, #24
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	60f8      	str	r0, [r7, #12]
 80140e8:	60b9      	str	r1, [r7, #8]
 80140ea:	607a      	str	r2, [r7, #4]
 80140ec:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80140f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d105      	bne.n	8014106 <http_recv+0x26>
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d002      	beq.n	8014106 <http_recv+0x26>
 8014100:	697b      	ldr	r3, [r7, #20]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d111      	bne.n	801412a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d008      	beq.n	801411e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	891b      	ldrh	r3, [r3, #8]
 8014110:	4619      	mov	r1, r3
 8014112:	68b8      	ldr	r0, [r7, #8]
 8014114:	f002 fc56 	bl	80169c4 <tcp_recved>
      pbuf_free(p);
 8014118:	6878      	ldr	r0, [r7, #4]
 801411a:	f001 fced 	bl	8015af8 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 801411e:	6979      	ldr	r1, [r7, #20]
 8014120:	68b8      	ldr	r0, [r7, #8]
 8014122:	f7ff fc43 	bl	80139ac <http_close_conn>
    return ERR_OK;
 8014126:	2300      	movs	r3, #0
 8014128:	e055      	b.n	80141d6 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	891b      	ldrh	r3, [r3, #8]
 801412e:	4619      	mov	r1, r3
 8014130:	68b8      	ldr	r0, [r7, #8]
 8014132:	f002 fc47 	bl	80169c4 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8014136:	697b      	ldr	r3, [r7, #20]
 8014138:	695b      	ldr	r3, [r3, #20]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d147      	bne.n	80141ce <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 801413e:	68ba      	ldr	r2, [r7, #8]
 8014140:	6979      	ldr	r1, [r7, #20]
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f7ff fd30 	bl	8013ba8 <http_parse_request>
 8014148:	4603      	mov	r3, r0
 801414a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 801414c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d015      	beq.n	8014180 <http_recv+0xa0>
 8014154:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014158:	f113 0f05 	cmn.w	r3, #5
 801415c:	d010      	beq.n	8014180 <http_recv+0xa0>
 801415e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014162:	f113 0f10 	cmn.w	r3, #16
 8014166:	d00b      	beq.n	8014180 <http_recv+0xa0>
 8014168:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801416c:	f113 0f08 	cmn.w	r3, #8
 8014170:	d006      	beq.n	8014180 <http_recv+0xa0>
 8014172:	4b1b      	ldr	r3, [pc, #108]	; (80141e0 <http_recv+0x100>)
 8014174:	f640 2205 	movw	r2, #2565	; 0xa05
 8014178:	491a      	ldr	r1, [pc, #104]	; (80141e4 <http_recv+0x104>)
 801417a:	481b      	ldr	r0, [pc, #108]	; (80141e8 <http_recv+0x108>)
 801417c:	f00a ff02 	bl	801ef84 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8014180:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014184:	f113 0f05 	cmn.w	r3, #5
 8014188:	d00b      	beq.n	80141a2 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 801418a:	697b      	ldr	r3, [r7, #20]
 801418c:	6a1b      	ldr	r3, [r3, #32]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d007      	beq.n	80141a2 <http_recv+0xc2>
          pbuf_free(hs->req);
 8014192:	697b      	ldr	r3, [r7, #20]
 8014194:	6a1b      	ldr	r3, [r3, #32]
 8014196:	4618      	mov	r0, r3
 8014198:	f001 fcae 	bl	8015af8 <pbuf_free>
          hs->req = NULL;
 801419c:	697b      	ldr	r3, [r7, #20]
 801419e:	2200      	movs	r2, #0
 80141a0:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80141a2:	6878      	ldr	r0, [r7, #4]
 80141a4:	f001 fca8 	bl	8015af8 <pbuf_free>
      if (parsed == ERR_OK) {
 80141a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d104      	bne.n	80141ba <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 80141b0:	6979      	ldr	r1, [r7, #20]
 80141b2:	68b8      	ldr	r0, [r7, #8]
 80141b4:	f7ff fc7b 	bl	8013aae <http_send>
 80141b8:	e00c      	b.n	80141d4 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 80141ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80141be:	f113 0f10 	cmn.w	r3, #16
 80141c2:	d107      	bne.n	80141d4 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80141c4:	6979      	ldr	r1, [r7, #20]
 80141c6:	68b8      	ldr	r0, [r7, #8]
 80141c8:	f7ff fbf0 	bl	80139ac <http_close_conn>
 80141cc:	e002      	b.n	80141d4 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80141ce:	6878      	ldr	r0, [r7, #4]
 80141d0:	f001 fc92 	bl	8015af8 <pbuf_free>
    }
  }
  return ERR_OK;
 80141d4:	2300      	movs	r3, #0
}
 80141d6:	4618      	mov	r0, r3
 80141d8:	3718      	adds	r7, #24
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}
 80141de:	bf00      	nop
 80141e0:	08020008 	.word	0x08020008
 80141e4:	08020164 	.word	0x08020164
 80141e8:	08020050 	.word	0x08020050

080141ec <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b086      	sub	sp, #24
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	60f8      	str	r0, [r7, #12]
 80141f4:	60b9      	str	r1, [r7, #8]
 80141f6:	4613      	mov	r3, r2
 80141f8:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80141fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d102      	bne.n	8014208 <http_accept+0x1c>
 8014202:	68bb      	ldr	r3, [r7, #8]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d102      	bne.n	801420e <http_accept+0x22>
    return ERR_VAL;
 8014208:	f06f 0305 	mvn.w	r3, #5
 801420c:	e025      	b.n	801425a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 801420e:	2101      	movs	r1, #1
 8014210:	68b8      	ldr	r0, [r7, #8]
 8014212:	f003 f8b7 	bl	8017384 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8014216:	f7ff fadb 	bl	80137d0 <http_state_alloc>
 801421a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d102      	bne.n	8014228 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8014222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014226:	e018      	b.n	801425a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8014228:	697b      	ldr	r3, [r7, #20]
 801422a:	68ba      	ldr	r2, [r7, #8]
 801422c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 801422e:	6979      	ldr	r1, [r7, #20]
 8014230:	68b8      	ldr	r0, [r7, #8]
 8014232:	f003 faaf 	bl	8017794 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8014236:	490b      	ldr	r1, [pc, #44]	; (8014264 <http_accept+0x78>)
 8014238:	68b8      	ldr	r0, [r7, #8]
 801423a:	f003 fabd 	bl	80177b8 <tcp_recv>
  altcp_err(pcb, http_err);
 801423e:	490a      	ldr	r1, [pc, #40]	; (8014268 <http_accept+0x7c>)
 8014240:	68b8      	ldr	r0, [r7, #8]
 8014242:	f003 fafd 	bl	8017840 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8014246:	2204      	movs	r2, #4
 8014248:	4908      	ldr	r1, [pc, #32]	; (801426c <http_accept+0x80>)
 801424a:	68b8      	ldr	r0, [r7, #8]
 801424c:	f003 fb32 	bl	80178b4 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8014250:	4907      	ldr	r1, [pc, #28]	; (8014270 <http_accept+0x84>)
 8014252:	68b8      	ldr	r0, [r7, #8]
 8014254:	f003 fad2 	bl	80177fc <tcp_sent>

  return ERR_OK;
 8014258:	2300      	movs	r3, #0
}
 801425a:	4618      	mov	r0, r3
 801425c:	3718      	adds	r7, #24
 801425e:	46bd      	mov	sp, r7
 8014260:	bd80      	pop	{r7, pc}
 8014262:	bf00      	nop
 8014264:	080140e1 	.word	0x080140e1
 8014268:	08014015 	.word	0x08014015
 801426c:	0801406f 	.word	0x0801406f
 8014270:	08014039 	.word	0x08014039

08014274 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b084      	sub	sp, #16
 8014278:	af00      	add	r7, sp, #0
 801427a:	6078      	str	r0, [r7, #4]
 801427c:	460b      	mov	r3, r1
 801427e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d029      	beq.n	80142da <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8014286:	2101      	movs	r1, #1
 8014288:	6878      	ldr	r0, [r7, #4]
 801428a:	f003 f87b 	bl	8017384 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 801428e:	887b      	ldrh	r3, [r7, #2]
 8014290:	461a      	mov	r2, r3
 8014292:	4914      	ldr	r1, [pc, #80]	; (80142e4 <httpd_init_pcb+0x70>)
 8014294:	6878      	ldr	r0, [r7, #4]
 8014296:	f002 f9c7 	bl	8016628 <tcp_bind>
 801429a:	4603      	mov	r3, r0
 801429c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 801429e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d006      	beq.n	80142b4 <httpd_init_pcb+0x40>
 80142a6:	4b10      	ldr	r3, [pc, #64]	; (80142e8 <httpd_init_pcb+0x74>)
 80142a8:	f640 2257 	movw	r2, #2647	; 0xa57
 80142ac:	490f      	ldr	r1, [pc, #60]	; (80142ec <httpd_init_pcb+0x78>)
 80142ae:	4810      	ldr	r0, [pc, #64]	; (80142f0 <httpd_init_pcb+0x7c>)
 80142b0:	f00a fe68 	bl	801ef84 <iprintf>
    pcb = altcp_listen(pcb);
 80142b4:	21ff      	movs	r1, #255	; 0xff
 80142b6:	6878      	ldr	r0, [r7, #4]
 80142b8:	f002 fa6e 	bl	8016798 <tcp_listen_with_backlog>
 80142bc:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d106      	bne.n	80142d2 <httpd_init_pcb+0x5e>
 80142c4:	4b08      	ldr	r3, [pc, #32]	; (80142e8 <httpd_init_pcb+0x74>)
 80142c6:	f640 2259 	movw	r2, #2649	; 0xa59
 80142ca:	490a      	ldr	r1, [pc, #40]	; (80142f4 <httpd_init_pcb+0x80>)
 80142cc:	4808      	ldr	r0, [pc, #32]	; (80142f0 <httpd_init_pcb+0x7c>)
 80142ce:	f00a fe59 	bl	801ef84 <iprintf>
    altcp_accept(pcb, http_accept);
 80142d2:	4909      	ldr	r1, [pc, #36]	; (80142f8 <httpd_init_pcb+0x84>)
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	f003 fad5 	bl	8017884 <tcp_accept>
  }
}
 80142da:	bf00      	nop
 80142dc:	3710      	adds	r7, #16
 80142de:	46bd      	mov	sp, r7
 80142e0:	bd80      	pop	{r7, pc}
 80142e2:	bf00      	nop
 80142e4:	08033800 	.word	0x08033800
 80142e8:	08020008 	.word	0x08020008
 80142ec:	08020190 	.word	0x08020190
 80142f0:	08020050 	.word	0x08020050
 80142f4:	080201ac 	.word	0x080201ac
 80142f8:	080141ed 	.word	0x080141ed

080142fc <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b082      	sub	sp, #8
 8014300:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8014302:	202e      	movs	r0, #46	; 0x2e
 8014304:	f003 fa38 	bl	8017778 <tcp_new_ip_type>
 8014308:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d106      	bne.n	801431e <httpd_init+0x22>
 8014310:	4b07      	ldr	r3, [pc, #28]	; (8014330 <httpd_init+0x34>)
 8014312:	f640 2272 	movw	r2, #2674	; 0xa72
 8014316:	4907      	ldr	r1, [pc, #28]	; (8014334 <httpd_init+0x38>)
 8014318:	4807      	ldr	r0, [pc, #28]	; (8014338 <httpd_init+0x3c>)
 801431a:	f00a fe33 	bl	801ef84 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 801431e:	2150      	movs	r1, #80	; 0x50
 8014320:	6878      	ldr	r0, [r7, #4]
 8014322:	f7ff ffa7 	bl	8014274 <httpd_init_pcb>
}
 8014326:	bf00      	nop
 8014328:	3708      	adds	r7, #8
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}
 801432e:	bf00      	nop
 8014330:	08020008 	.word	0x08020008
 8014334:	080201cc 	.word	0x080201cc
 8014338:	08020050 	.word	0x08020050

0801433c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801433c:	b480      	push	{r7}
 801433e:	b083      	sub	sp, #12
 8014340:	af00      	add	r7, sp, #0
 8014342:	4603      	mov	r3, r0
 8014344:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8014346:	88fb      	ldrh	r3, [r7, #6]
 8014348:	021b      	lsls	r3, r3, #8
 801434a:	b21a      	sxth	r2, r3
 801434c:	88fb      	ldrh	r3, [r7, #6]
 801434e:	0a1b      	lsrs	r3, r3, #8
 8014350:	b29b      	uxth	r3, r3
 8014352:	b21b      	sxth	r3, r3
 8014354:	4313      	orrs	r3, r2
 8014356:	b21b      	sxth	r3, r3
 8014358:	b29b      	uxth	r3, r3
}
 801435a:	4618      	mov	r0, r3
 801435c:	370c      	adds	r7, #12
 801435e:	46bd      	mov	sp, r7
 8014360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014364:	4770      	bx	lr

08014366 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8014366:	b480      	push	{r7}
 8014368:	b083      	sub	sp, #12
 801436a:	af00      	add	r7, sp, #0
 801436c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	061a      	lsls	r2, r3, #24
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	021b      	lsls	r3, r3, #8
 8014376:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801437a:	431a      	orrs	r2, r3
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	0a1b      	lsrs	r3, r3, #8
 8014380:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014384:	431a      	orrs	r2, r3
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	0e1b      	lsrs	r3, r3, #24
 801438a:	4313      	orrs	r3, r2
}
 801438c:	4618      	mov	r0, r3
 801438e:	370c      	adds	r7, #12
 8014390:	46bd      	mov	sp, r7
 8014392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014396:	4770      	bx	lr

08014398 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b086      	sub	sp, #24
 801439c:	af00      	add	r7, sp, #0
 801439e:	60f8      	str	r0, [r7, #12]
 80143a0:	60b9      	str	r1, [r7, #8]
 80143a2:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 80143a4:	68b8      	ldr	r0, [r7, #8]
 80143a6:	f7f3 ff55 	bl	8008254 <strlen>
 80143aa:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 80143ac:	693b      	ldr	r3, [r7, #16]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d101      	bne.n	80143b6 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	e022      	b.n	80143fc <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	617b      	str	r3, [r7, #20]
 80143ba:	e012      	b.n	80143e2 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80143bc:	697b      	ldr	r3, [r7, #20]
 80143be:	781a      	ldrb	r2, [r3, #0]
 80143c0:	68bb      	ldr	r3, [r7, #8]
 80143c2:	781b      	ldrb	r3, [r3, #0]
 80143c4:	429a      	cmp	r2, r3
 80143c6:	d109      	bne.n	80143dc <lwip_strnstr+0x44>
 80143c8:	693a      	ldr	r2, [r7, #16]
 80143ca:	68b9      	ldr	r1, [r7, #8]
 80143cc:	6978      	ldr	r0, [r7, #20]
 80143ce:	f00a fe32 	bl	801f036 <strncmp>
 80143d2:	4603      	mov	r3, r0
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d101      	bne.n	80143dc <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 80143d8:	697b      	ldr	r3, [r7, #20]
 80143da:	e00f      	b.n	80143fc <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80143dc:	697b      	ldr	r3, [r7, #20]
 80143de:	3301      	adds	r3, #1
 80143e0:	617b      	str	r3, [r7, #20]
 80143e2:	697b      	ldr	r3, [r7, #20]
 80143e4:	781b      	ldrb	r3, [r3, #0]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d007      	beq.n	80143fa <lwip_strnstr+0x62>
 80143ea:	697a      	ldr	r2, [r7, #20]
 80143ec:	693b      	ldr	r3, [r7, #16]
 80143ee:	441a      	add	r2, r3
 80143f0:	68f9      	ldr	r1, [r7, #12]
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	440b      	add	r3, r1
 80143f6:	429a      	cmp	r2, r3
 80143f8:	d9e0      	bls.n	80143bc <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80143fa:	2300      	movs	r3, #0
}
 80143fc:	4618      	mov	r0, r3
 80143fe:	3718      	adds	r7, #24
 8014400:	46bd      	mov	sp, r7
 8014402:	bd80      	pop	{r7, pc}

08014404 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b082      	sub	sp, #8
 8014408:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801440a:	2300      	movs	r3, #0
 801440c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801440e:	f00a fce9 	bl	801ede4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8014412:	f000 f8d5 	bl	80145c0 <mem_init>
  memp_init();
 8014416:	f000 fc31 	bl	8014c7c <memp_init>
  pbuf_init();
  netif_init();
 801441a:	f000 fcf7 	bl	8014e0c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801441e:	f007 ffe1 	bl	801c3e4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8014422:	f001 fe03 	bl	801602c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8014426:	f007 ff25 	bl	801c274 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801442a:	bf00      	nop
 801442c:	3708      	adds	r7, #8
 801442e:	46bd      	mov	sp, r7
 8014430:	bd80      	pop	{r7, pc}
	...

08014434 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8014434:	b480      	push	{r7}
 8014436:	b083      	sub	sp, #12
 8014438:	af00      	add	r7, sp, #0
 801443a:	4603      	mov	r3, r0
 801443c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801443e:	4b05      	ldr	r3, [pc, #20]	; (8014454 <ptr_to_mem+0x20>)
 8014440:	681a      	ldr	r2, [r3, #0]
 8014442:	88fb      	ldrh	r3, [r7, #6]
 8014444:	4413      	add	r3, r2
}
 8014446:	4618      	mov	r0, r3
 8014448:	370c      	adds	r7, #12
 801444a:	46bd      	mov	sp, r7
 801444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014450:	4770      	bx	lr
 8014452:	bf00      	nop
 8014454:	200044e0 	.word	0x200044e0

08014458 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8014458:	b480      	push	{r7}
 801445a:	b083      	sub	sp, #12
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	4a05      	ldr	r2, [pc, #20]	; (8014478 <mem_to_ptr+0x20>)
 8014464:	6812      	ldr	r2, [r2, #0]
 8014466:	1a9b      	subs	r3, r3, r2
 8014468:	b29b      	uxth	r3, r3
}
 801446a:	4618      	mov	r0, r3
 801446c:	370c      	adds	r7, #12
 801446e:	46bd      	mov	sp, r7
 8014470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014474:	4770      	bx	lr
 8014476:	bf00      	nop
 8014478:	200044e0 	.word	0x200044e0

0801447c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801447c:	b590      	push	{r4, r7, lr}
 801447e:	b085      	sub	sp, #20
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8014484:	4b45      	ldr	r3, [pc, #276]	; (801459c <plug_holes+0x120>)
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	687a      	ldr	r2, [r7, #4]
 801448a:	429a      	cmp	r2, r3
 801448c:	d206      	bcs.n	801449c <plug_holes+0x20>
 801448e:	4b44      	ldr	r3, [pc, #272]	; (80145a0 <plug_holes+0x124>)
 8014490:	f240 12df 	movw	r2, #479	; 0x1df
 8014494:	4943      	ldr	r1, [pc, #268]	; (80145a4 <plug_holes+0x128>)
 8014496:	4844      	ldr	r0, [pc, #272]	; (80145a8 <plug_holes+0x12c>)
 8014498:	f00a fd74 	bl	801ef84 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801449c:	4b43      	ldr	r3, [pc, #268]	; (80145ac <plug_holes+0x130>)
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	687a      	ldr	r2, [r7, #4]
 80144a2:	429a      	cmp	r2, r3
 80144a4:	d306      	bcc.n	80144b4 <plug_holes+0x38>
 80144a6:	4b3e      	ldr	r3, [pc, #248]	; (80145a0 <plug_holes+0x124>)
 80144a8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80144ac:	4940      	ldr	r1, [pc, #256]	; (80145b0 <plug_holes+0x134>)
 80144ae:	483e      	ldr	r0, [pc, #248]	; (80145a8 <plug_holes+0x12c>)
 80144b0:	f00a fd68 	bl	801ef84 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	791b      	ldrb	r3, [r3, #4]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d006      	beq.n	80144ca <plug_holes+0x4e>
 80144bc:	4b38      	ldr	r3, [pc, #224]	; (80145a0 <plug_holes+0x124>)
 80144be:	f240 12e1 	movw	r2, #481	; 0x1e1
 80144c2:	493c      	ldr	r1, [pc, #240]	; (80145b4 <plug_holes+0x138>)
 80144c4:	4838      	ldr	r0, [pc, #224]	; (80145a8 <plug_holes+0x12c>)
 80144c6:	f00a fd5d 	bl	801ef84 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	881b      	ldrh	r3, [r3, #0]
 80144ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80144d2:	d906      	bls.n	80144e2 <plug_holes+0x66>
 80144d4:	4b32      	ldr	r3, [pc, #200]	; (80145a0 <plug_holes+0x124>)
 80144d6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80144da:	4937      	ldr	r1, [pc, #220]	; (80145b8 <plug_holes+0x13c>)
 80144dc:	4832      	ldr	r0, [pc, #200]	; (80145a8 <plug_holes+0x12c>)
 80144de:	f00a fd51 	bl	801ef84 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	881b      	ldrh	r3, [r3, #0]
 80144e6:	4618      	mov	r0, r3
 80144e8:	f7ff ffa4 	bl	8014434 <ptr_to_mem>
 80144ec:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80144ee:	687a      	ldr	r2, [r7, #4]
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	429a      	cmp	r2, r3
 80144f4:	d024      	beq.n	8014540 <plug_holes+0xc4>
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	791b      	ldrb	r3, [r3, #4]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d120      	bne.n	8014540 <plug_holes+0xc4>
 80144fe:	4b2b      	ldr	r3, [pc, #172]	; (80145ac <plug_holes+0x130>)
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	68fa      	ldr	r2, [r7, #12]
 8014504:	429a      	cmp	r2, r3
 8014506:	d01b      	beq.n	8014540 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8014508:	4b2c      	ldr	r3, [pc, #176]	; (80145bc <plug_holes+0x140>)
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	68fa      	ldr	r2, [r7, #12]
 801450e:	429a      	cmp	r2, r3
 8014510:	d102      	bne.n	8014518 <plug_holes+0x9c>
      lfree = mem;
 8014512:	4a2a      	ldr	r2, [pc, #168]	; (80145bc <plug_holes+0x140>)
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	881a      	ldrh	r2, [r3, #0]
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	881b      	ldrh	r3, [r3, #0]
 8014524:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014528:	d00a      	beq.n	8014540 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	881b      	ldrh	r3, [r3, #0]
 801452e:	4618      	mov	r0, r3
 8014530:	f7ff ff80 	bl	8014434 <ptr_to_mem>
 8014534:	4604      	mov	r4, r0
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	f7ff ff8e 	bl	8014458 <mem_to_ptr>
 801453c:	4603      	mov	r3, r0
 801453e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	885b      	ldrh	r3, [r3, #2]
 8014544:	4618      	mov	r0, r3
 8014546:	f7ff ff75 	bl	8014434 <ptr_to_mem>
 801454a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801454c:	68ba      	ldr	r2, [r7, #8]
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	429a      	cmp	r2, r3
 8014552:	d01f      	beq.n	8014594 <plug_holes+0x118>
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	791b      	ldrb	r3, [r3, #4]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d11b      	bne.n	8014594 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801455c:	4b17      	ldr	r3, [pc, #92]	; (80145bc <plug_holes+0x140>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	687a      	ldr	r2, [r7, #4]
 8014562:	429a      	cmp	r2, r3
 8014564:	d102      	bne.n	801456c <plug_holes+0xf0>
      lfree = pmem;
 8014566:	4a15      	ldr	r2, [pc, #84]	; (80145bc <plug_holes+0x140>)
 8014568:	68bb      	ldr	r3, [r7, #8]
 801456a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	881a      	ldrh	r2, [r3, #0]
 8014570:	68bb      	ldr	r3, [r7, #8]
 8014572:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	881b      	ldrh	r3, [r3, #0]
 8014578:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801457c:	d00a      	beq.n	8014594 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	881b      	ldrh	r3, [r3, #0]
 8014582:	4618      	mov	r0, r3
 8014584:	f7ff ff56 	bl	8014434 <ptr_to_mem>
 8014588:	4604      	mov	r4, r0
 801458a:	68b8      	ldr	r0, [r7, #8]
 801458c:	f7ff ff64 	bl	8014458 <mem_to_ptr>
 8014590:	4603      	mov	r3, r0
 8014592:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8014594:	bf00      	nop
 8014596:	3714      	adds	r7, #20
 8014598:	46bd      	mov	sp, r7
 801459a:	bd90      	pop	{r4, r7, pc}
 801459c:	200044e0 	.word	0x200044e0
 80145a0:	080201e8 	.word	0x080201e8
 80145a4:	08020218 	.word	0x08020218
 80145a8:	08020230 	.word	0x08020230
 80145ac:	200044e4 	.word	0x200044e4
 80145b0:	08020258 	.word	0x08020258
 80145b4:	08020274 	.word	0x08020274
 80145b8:	08020290 	.word	0x08020290
 80145bc:	200044ec 	.word	0x200044ec

080145c0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b082      	sub	sp, #8
 80145c4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80145c6:	4b1f      	ldr	r3, [pc, #124]	; (8014644 <mem_init+0x84>)
 80145c8:	3303      	adds	r3, #3
 80145ca:	f023 0303 	bic.w	r3, r3, #3
 80145ce:	461a      	mov	r2, r3
 80145d0:	4b1d      	ldr	r3, [pc, #116]	; (8014648 <mem_init+0x88>)
 80145d2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80145d4:	4b1c      	ldr	r3, [pc, #112]	; (8014648 <mem_init+0x88>)
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80145e0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	2200      	movs	r2, #0
 80145e6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	2200      	movs	r2, #0
 80145ec:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80145ee:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80145f2:	f7ff ff1f 	bl	8014434 <ptr_to_mem>
 80145f6:	4602      	mov	r2, r0
 80145f8:	4b14      	ldr	r3, [pc, #80]	; (801464c <mem_init+0x8c>)
 80145fa:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80145fc:	4b13      	ldr	r3, [pc, #76]	; (801464c <mem_init+0x8c>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	2201      	movs	r2, #1
 8014602:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8014604:	4b11      	ldr	r3, [pc, #68]	; (801464c <mem_init+0x8c>)
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801460c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801460e:	4b0f      	ldr	r3, [pc, #60]	; (801464c <mem_init+0x8c>)
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8014616:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8014618:	4b0b      	ldr	r3, [pc, #44]	; (8014648 <mem_init+0x88>)
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	4a0c      	ldr	r2, [pc, #48]	; (8014650 <mem_init+0x90>)
 801461e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8014620:	480c      	ldr	r0, [pc, #48]	; (8014654 <mem_init+0x94>)
 8014622:	f00a fbed 	bl	801ee00 <sys_mutex_new>
 8014626:	4603      	mov	r3, r0
 8014628:	2b00      	cmp	r3, #0
 801462a:	d006      	beq.n	801463a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801462c:	4b0a      	ldr	r3, [pc, #40]	; (8014658 <mem_init+0x98>)
 801462e:	f240 221f 	movw	r2, #543	; 0x21f
 8014632:	490a      	ldr	r1, [pc, #40]	; (801465c <mem_init+0x9c>)
 8014634:	480a      	ldr	r0, [pc, #40]	; (8014660 <mem_init+0xa0>)
 8014636:	f00a fca5 	bl	801ef84 <iprintf>
  }
}
 801463a:	bf00      	nop
 801463c:	3708      	adds	r7, #8
 801463e:	46bd      	mov	sp, r7
 8014640:	bd80      	pop	{r7, pc}
 8014642:	bf00      	nop
 8014644:	20010630 	.word	0x20010630
 8014648:	200044e0 	.word	0x200044e0
 801464c:	200044e4 	.word	0x200044e4
 8014650:	200044ec 	.word	0x200044ec
 8014654:	200044e8 	.word	0x200044e8
 8014658:	080201e8 	.word	0x080201e8
 801465c:	080202bc 	.word	0x080202bc
 8014660:	08020230 	.word	0x08020230

08014664 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b086      	sub	sp, #24
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801466c:	6878      	ldr	r0, [r7, #4]
 801466e:	f7ff fef3 	bl	8014458 <mem_to_ptr>
 8014672:	4603      	mov	r3, r0
 8014674:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	881b      	ldrh	r3, [r3, #0]
 801467a:	4618      	mov	r0, r3
 801467c:	f7ff feda 	bl	8014434 <ptr_to_mem>
 8014680:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	885b      	ldrh	r3, [r3, #2]
 8014686:	4618      	mov	r0, r3
 8014688:	f7ff fed4 	bl	8014434 <ptr_to_mem>
 801468c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	881b      	ldrh	r3, [r3, #0]
 8014692:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014696:	d818      	bhi.n	80146ca <mem_link_valid+0x66>
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	885b      	ldrh	r3, [r3, #2]
 801469c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80146a0:	d813      	bhi.n	80146ca <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80146a6:	8afa      	ldrh	r2, [r7, #22]
 80146a8:	429a      	cmp	r2, r3
 80146aa:	d004      	beq.n	80146b6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	881b      	ldrh	r3, [r3, #0]
 80146b0:	8afa      	ldrh	r2, [r7, #22]
 80146b2:	429a      	cmp	r2, r3
 80146b4:	d109      	bne.n	80146ca <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80146b6:	4b08      	ldr	r3, [pc, #32]	; (80146d8 <mem_link_valid+0x74>)
 80146b8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80146ba:	693a      	ldr	r2, [r7, #16]
 80146bc:	429a      	cmp	r2, r3
 80146be:	d006      	beq.n	80146ce <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80146c0:	693b      	ldr	r3, [r7, #16]
 80146c2:	885b      	ldrh	r3, [r3, #2]
 80146c4:	8afa      	ldrh	r2, [r7, #22]
 80146c6:	429a      	cmp	r2, r3
 80146c8:	d001      	beq.n	80146ce <mem_link_valid+0x6a>
    return 0;
 80146ca:	2300      	movs	r3, #0
 80146cc:	e000      	b.n	80146d0 <mem_link_valid+0x6c>
  }
  return 1;
 80146ce:	2301      	movs	r3, #1
}
 80146d0:	4618      	mov	r0, r3
 80146d2:	3718      	adds	r7, #24
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}
 80146d8:	200044e4 	.word	0x200044e4

080146dc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b088      	sub	sp, #32
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d070      	beq.n	80147cc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	f003 0303 	and.w	r3, r3, #3
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d00d      	beq.n	8014710 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80146f4:	4b37      	ldr	r3, [pc, #220]	; (80147d4 <mem_free+0xf8>)
 80146f6:	f240 2273 	movw	r2, #627	; 0x273
 80146fa:	4937      	ldr	r1, [pc, #220]	; (80147d8 <mem_free+0xfc>)
 80146fc:	4837      	ldr	r0, [pc, #220]	; (80147dc <mem_free+0x100>)
 80146fe:	f00a fc41 	bl	801ef84 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014702:	f00a fbdb 	bl	801eebc <sys_arch_protect>
 8014706:	60f8      	str	r0, [r7, #12]
 8014708:	68f8      	ldr	r0, [r7, #12]
 801470a:	f00a fbe5 	bl	801eed8 <sys_arch_unprotect>
    return;
 801470e:	e05e      	b.n	80147ce <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	3b08      	subs	r3, #8
 8014714:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8014716:	4b32      	ldr	r3, [pc, #200]	; (80147e0 <mem_free+0x104>)
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	69fa      	ldr	r2, [r7, #28]
 801471c:	429a      	cmp	r2, r3
 801471e:	d306      	bcc.n	801472e <mem_free+0x52>
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	f103 020c 	add.w	r2, r3, #12
 8014726:	4b2f      	ldr	r3, [pc, #188]	; (80147e4 <mem_free+0x108>)
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	429a      	cmp	r2, r3
 801472c:	d90d      	bls.n	801474a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801472e:	4b29      	ldr	r3, [pc, #164]	; (80147d4 <mem_free+0xf8>)
 8014730:	f240 227f 	movw	r2, #639	; 0x27f
 8014734:	492c      	ldr	r1, [pc, #176]	; (80147e8 <mem_free+0x10c>)
 8014736:	4829      	ldr	r0, [pc, #164]	; (80147dc <mem_free+0x100>)
 8014738:	f00a fc24 	bl	801ef84 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801473c:	f00a fbbe 	bl	801eebc <sys_arch_protect>
 8014740:	6138      	str	r0, [r7, #16]
 8014742:	6938      	ldr	r0, [r7, #16]
 8014744:	f00a fbc8 	bl	801eed8 <sys_arch_unprotect>
    return;
 8014748:	e041      	b.n	80147ce <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801474a:	4828      	ldr	r0, [pc, #160]	; (80147ec <mem_free+0x110>)
 801474c:	f00a fb74 	bl	801ee38 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8014750:	69fb      	ldr	r3, [r7, #28]
 8014752:	791b      	ldrb	r3, [r3, #4]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d110      	bne.n	801477a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8014758:	4b1e      	ldr	r3, [pc, #120]	; (80147d4 <mem_free+0xf8>)
 801475a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801475e:	4924      	ldr	r1, [pc, #144]	; (80147f0 <mem_free+0x114>)
 8014760:	481e      	ldr	r0, [pc, #120]	; (80147dc <mem_free+0x100>)
 8014762:	f00a fc0f 	bl	801ef84 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8014766:	4821      	ldr	r0, [pc, #132]	; (80147ec <mem_free+0x110>)
 8014768:	f00a fb75 	bl	801ee56 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801476c:	f00a fba6 	bl	801eebc <sys_arch_protect>
 8014770:	6178      	str	r0, [r7, #20]
 8014772:	6978      	ldr	r0, [r7, #20]
 8014774:	f00a fbb0 	bl	801eed8 <sys_arch_unprotect>
    return;
 8014778:	e029      	b.n	80147ce <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801477a:	69f8      	ldr	r0, [r7, #28]
 801477c:	f7ff ff72 	bl	8014664 <mem_link_valid>
 8014780:	4603      	mov	r3, r0
 8014782:	2b00      	cmp	r3, #0
 8014784:	d110      	bne.n	80147a8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8014786:	4b13      	ldr	r3, [pc, #76]	; (80147d4 <mem_free+0xf8>)
 8014788:	f240 2295 	movw	r2, #661	; 0x295
 801478c:	4919      	ldr	r1, [pc, #100]	; (80147f4 <mem_free+0x118>)
 801478e:	4813      	ldr	r0, [pc, #76]	; (80147dc <mem_free+0x100>)
 8014790:	f00a fbf8 	bl	801ef84 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8014794:	4815      	ldr	r0, [pc, #84]	; (80147ec <mem_free+0x110>)
 8014796:	f00a fb5e 	bl	801ee56 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801479a:	f00a fb8f 	bl	801eebc <sys_arch_protect>
 801479e:	61b8      	str	r0, [r7, #24]
 80147a0:	69b8      	ldr	r0, [r7, #24]
 80147a2:	f00a fb99 	bl	801eed8 <sys_arch_unprotect>
    return;
 80147a6:	e012      	b.n	80147ce <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80147a8:	69fb      	ldr	r3, [r7, #28]
 80147aa:	2200      	movs	r2, #0
 80147ac:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80147ae:	4b12      	ldr	r3, [pc, #72]	; (80147f8 <mem_free+0x11c>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	69fa      	ldr	r2, [r7, #28]
 80147b4:	429a      	cmp	r2, r3
 80147b6:	d202      	bcs.n	80147be <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80147b8:	4a0f      	ldr	r2, [pc, #60]	; (80147f8 <mem_free+0x11c>)
 80147ba:	69fb      	ldr	r3, [r7, #28]
 80147bc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80147be:	69f8      	ldr	r0, [r7, #28]
 80147c0:	f7ff fe5c 	bl	801447c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80147c4:	4809      	ldr	r0, [pc, #36]	; (80147ec <mem_free+0x110>)
 80147c6:	f00a fb46 	bl	801ee56 <sys_mutex_unlock>
 80147ca:	e000      	b.n	80147ce <mem_free+0xf2>
    return;
 80147cc:	bf00      	nop
}
 80147ce:	3720      	adds	r7, #32
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bd80      	pop	{r7, pc}
 80147d4:	080201e8 	.word	0x080201e8
 80147d8:	080202d8 	.word	0x080202d8
 80147dc:	08020230 	.word	0x08020230
 80147e0:	200044e0 	.word	0x200044e0
 80147e4:	200044e4 	.word	0x200044e4
 80147e8:	080202fc 	.word	0x080202fc
 80147ec:	200044e8 	.word	0x200044e8
 80147f0:	08020318 	.word	0x08020318
 80147f4:	08020340 	.word	0x08020340
 80147f8:	200044ec 	.word	0x200044ec

080147fc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b088      	sub	sp, #32
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
 8014804:	460b      	mov	r3, r1
 8014806:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8014808:	887b      	ldrh	r3, [r7, #2]
 801480a:	3303      	adds	r3, #3
 801480c:	b29b      	uxth	r3, r3
 801480e:	f023 0303 	bic.w	r3, r3, #3
 8014812:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8014814:	8bfb      	ldrh	r3, [r7, #30]
 8014816:	2b0b      	cmp	r3, #11
 8014818:	d801      	bhi.n	801481e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801481a:	230c      	movs	r3, #12
 801481c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801481e:	8bfb      	ldrh	r3, [r7, #30]
 8014820:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014824:	d803      	bhi.n	801482e <mem_trim+0x32>
 8014826:	8bfa      	ldrh	r2, [r7, #30]
 8014828:	887b      	ldrh	r3, [r7, #2]
 801482a:	429a      	cmp	r2, r3
 801482c:	d201      	bcs.n	8014832 <mem_trim+0x36>
    return NULL;
 801482e:	2300      	movs	r3, #0
 8014830:	e0d8      	b.n	80149e4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8014832:	4b6e      	ldr	r3, [pc, #440]	; (80149ec <mem_trim+0x1f0>)
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	687a      	ldr	r2, [r7, #4]
 8014838:	429a      	cmp	r2, r3
 801483a:	d304      	bcc.n	8014846 <mem_trim+0x4a>
 801483c:	4b6c      	ldr	r3, [pc, #432]	; (80149f0 <mem_trim+0x1f4>)
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	687a      	ldr	r2, [r7, #4]
 8014842:	429a      	cmp	r2, r3
 8014844:	d306      	bcc.n	8014854 <mem_trim+0x58>
 8014846:	4b6b      	ldr	r3, [pc, #428]	; (80149f4 <mem_trim+0x1f8>)
 8014848:	f240 22d2 	movw	r2, #722	; 0x2d2
 801484c:	496a      	ldr	r1, [pc, #424]	; (80149f8 <mem_trim+0x1fc>)
 801484e:	486b      	ldr	r0, [pc, #428]	; (80149fc <mem_trim+0x200>)
 8014850:	f00a fb98 	bl	801ef84 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8014854:	4b65      	ldr	r3, [pc, #404]	; (80149ec <mem_trim+0x1f0>)
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	687a      	ldr	r2, [r7, #4]
 801485a:	429a      	cmp	r2, r3
 801485c:	d304      	bcc.n	8014868 <mem_trim+0x6c>
 801485e:	4b64      	ldr	r3, [pc, #400]	; (80149f0 <mem_trim+0x1f4>)
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	687a      	ldr	r2, [r7, #4]
 8014864:	429a      	cmp	r2, r3
 8014866:	d307      	bcc.n	8014878 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014868:	f00a fb28 	bl	801eebc <sys_arch_protect>
 801486c:	60b8      	str	r0, [r7, #8]
 801486e:	68b8      	ldr	r0, [r7, #8]
 8014870:	f00a fb32 	bl	801eed8 <sys_arch_unprotect>
    return rmem;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	e0b5      	b.n	80149e4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	3b08      	subs	r3, #8
 801487c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801487e:	69b8      	ldr	r0, [r7, #24]
 8014880:	f7ff fdea 	bl	8014458 <mem_to_ptr>
 8014884:	4603      	mov	r3, r0
 8014886:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8014888:	69bb      	ldr	r3, [r7, #24]
 801488a:	881a      	ldrh	r2, [r3, #0]
 801488c:	8afb      	ldrh	r3, [r7, #22]
 801488e:	1ad3      	subs	r3, r2, r3
 8014890:	b29b      	uxth	r3, r3
 8014892:	3b08      	subs	r3, #8
 8014894:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8014896:	8bfa      	ldrh	r2, [r7, #30]
 8014898:	8abb      	ldrh	r3, [r7, #20]
 801489a:	429a      	cmp	r2, r3
 801489c:	d906      	bls.n	80148ac <mem_trim+0xb0>
 801489e:	4b55      	ldr	r3, [pc, #340]	; (80149f4 <mem_trim+0x1f8>)
 80148a0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80148a4:	4956      	ldr	r1, [pc, #344]	; (8014a00 <mem_trim+0x204>)
 80148a6:	4855      	ldr	r0, [pc, #340]	; (80149fc <mem_trim+0x200>)
 80148a8:	f00a fb6c 	bl	801ef84 <iprintf>
  if (newsize > size) {
 80148ac:	8bfa      	ldrh	r2, [r7, #30]
 80148ae:	8abb      	ldrh	r3, [r7, #20]
 80148b0:	429a      	cmp	r2, r3
 80148b2:	d901      	bls.n	80148b8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80148b4:	2300      	movs	r3, #0
 80148b6:	e095      	b.n	80149e4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80148b8:	8bfa      	ldrh	r2, [r7, #30]
 80148ba:	8abb      	ldrh	r3, [r7, #20]
 80148bc:	429a      	cmp	r2, r3
 80148be:	d101      	bne.n	80148c4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	e08f      	b.n	80149e4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80148c4:	484f      	ldr	r0, [pc, #316]	; (8014a04 <mem_trim+0x208>)
 80148c6:	f00a fab7 	bl	801ee38 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80148ca:	69bb      	ldr	r3, [r7, #24]
 80148cc:	881b      	ldrh	r3, [r3, #0]
 80148ce:	4618      	mov	r0, r3
 80148d0:	f7ff fdb0 	bl	8014434 <ptr_to_mem>
 80148d4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80148d6:	693b      	ldr	r3, [r7, #16]
 80148d8:	791b      	ldrb	r3, [r3, #4]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d13f      	bne.n	801495e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80148de:	69bb      	ldr	r3, [r7, #24]
 80148e0:	881b      	ldrh	r3, [r3, #0]
 80148e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80148e6:	d106      	bne.n	80148f6 <mem_trim+0xfa>
 80148e8:	4b42      	ldr	r3, [pc, #264]	; (80149f4 <mem_trim+0x1f8>)
 80148ea:	f240 22f5 	movw	r2, #757	; 0x2f5
 80148ee:	4946      	ldr	r1, [pc, #280]	; (8014a08 <mem_trim+0x20c>)
 80148f0:	4842      	ldr	r0, [pc, #264]	; (80149fc <mem_trim+0x200>)
 80148f2:	f00a fb47 	bl	801ef84 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80148f6:	693b      	ldr	r3, [r7, #16]
 80148f8:	881b      	ldrh	r3, [r3, #0]
 80148fa:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80148fc:	8afa      	ldrh	r2, [r7, #22]
 80148fe:	8bfb      	ldrh	r3, [r7, #30]
 8014900:	4413      	add	r3, r2
 8014902:	b29b      	uxth	r3, r3
 8014904:	3308      	adds	r3, #8
 8014906:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8014908:	4b40      	ldr	r3, [pc, #256]	; (8014a0c <mem_trim+0x210>)
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	693a      	ldr	r2, [r7, #16]
 801490e:	429a      	cmp	r2, r3
 8014910:	d106      	bne.n	8014920 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8014912:	89fb      	ldrh	r3, [r7, #14]
 8014914:	4618      	mov	r0, r3
 8014916:	f7ff fd8d 	bl	8014434 <ptr_to_mem>
 801491a:	4602      	mov	r2, r0
 801491c:	4b3b      	ldr	r3, [pc, #236]	; (8014a0c <mem_trim+0x210>)
 801491e:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8014920:	89fb      	ldrh	r3, [r7, #14]
 8014922:	4618      	mov	r0, r3
 8014924:	f7ff fd86 	bl	8014434 <ptr_to_mem>
 8014928:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801492a:	693b      	ldr	r3, [r7, #16]
 801492c:	2200      	movs	r2, #0
 801492e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8014930:	693b      	ldr	r3, [r7, #16]
 8014932:	89ba      	ldrh	r2, [r7, #12]
 8014934:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8014936:	693b      	ldr	r3, [r7, #16]
 8014938:	8afa      	ldrh	r2, [r7, #22]
 801493a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801493c:	69bb      	ldr	r3, [r7, #24]
 801493e:	89fa      	ldrh	r2, [r7, #14]
 8014940:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014942:	693b      	ldr	r3, [r7, #16]
 8014944:	881b      	ldrh	r3, [r3, #0]
 8014946:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801494a:	d047      	beq.n	80149dc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801494c:	693b      	ldr	r3, [r7, #16]
 801494e:	881b      	ldrh	r3, [r3, #0]
 8014950:	4618      	mov	r0, r3
 8014952:	f7ff fd6f 	bl	8014434 <ptr_to_mem>
 8014956:	4602      	mov	r2, r0
 8014958:	89fb      	ldrh	r3, [r7, #14]
 801495a:	8053      	strh	r3, [r2, #2]
 801495c:	e03e      	b.n	80149dc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801495e:	8bfb      	ldrh	r3, [r7, #30]
 8014960:	f103 0214 	add.w	r2, r3, #20
 8014964:	8abb      	ldrh	r3, [r7, #20]
 8014966:	429a      	cmp	r2, r3
 8014968:	d838      	bhi.n	80149dc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801496a:	8afa      	ldrh	r2, [r7, #22]
 801496c:	8bfb      	ldrh	r3, [r7, #30]
 801496e:	4413      	add	r3, r2
 8014970:	b29b      	uxth	r3, r3
 8014972:	3308      	adds	r3, #8
 8014974:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014976:	69bb      	ldr	r3, [r7, #24]
 8014978:	881b      	ldrh	r3, [r3, #0]
 801497a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801497e:	d106      	bne.n	801498e <mem_trim+0x192>
 8014980:	4b1c      	ldr	r3, [pc, #112]	; (80149f4 <mem_trim+0x1f8>)
 8014982:	f240 3216 	movw	r2, #790	; 0x316
 8014986:	4920      	ldr	r1, [pc, #128]	; (8014a08 <mem_trim+0x20c>)
 8014988:	481c      	ldr	r0, [pc, #112]	; (80149fc <mem_trim+0x200>)
 801498a:	f00a fafb 	bl	801ef84 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801498e:	89fb      	ldrh	r3, [r7, #14]
 8014990:	4618      	mov	r0, r3
 8014992:	f7ff fd4f 	bl	8014434 <ptr_to_mem>
 8014996:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8014998:	4b1c      	ldr	r3, [pc, #112]	; (8014a0c <mem_trim+0x210>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	693a      	ldr	r2, [r7, #16]
 801499e:	429a      	cmp	r2, r3
 80149a0:	d202      	bcs.n	80149a8 <mem_trim+0x1ac>
      lfree = mem2;
 80149a2:	4a1a      	ldr	r2, [pc, #104]	; (8014a0c <mem_trim+0x210>)
 80149a4:	693b      	ldr	r3, [r7, #16]
 80149a6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80149a8:	693b      	ldr	r3, [r7, #16]
 80149aa:	2200      	movs	r2, #0
 80149ac:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80149ae:	69bb      	ldr	r3, [r7, #24]
 80149b0:	881a      	ldrh	r2, [r3, #0]
 80149b2:	693b      	ldr	r3, [r7, #16]
 80149b4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80149b6:	693b      	ldr	r3, [r7, #16]
 80149b8:	8afa      	ldrh	r2, [r7, #22]
 80149ba:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80149bc:	69bb      	ldr	r3, [r7, #24]
 80149be:	89fa      	ldrh	r2, [r7, #14]
 80149c0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80149c2:	693b      	ldr	r3, [r7, #16]
 80149c4:	881b      	ldrh	r3, [r3, #0]
 80149c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80149ca:	d007      	beq.n	80149dc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80149cc:	693b      	ldr	r3, [r7, #16]
 80149ce:	881b      	ldrh	r3, [r3, #0]
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7ff fd2f 	bl	8014434 <ptr_to_mem>
 80149d6:	4602      	mov	r2, r0
 80149d8:	89fb      	ldrh	r3, [r7, #14]
 80149da:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80149dc:	4809      	ldr	r0, [pc, #36]	; (8014a04 <mem_trim+0x208>)
 80149de:	f00a fa3a 	bl	801ee56 <sys_mutex_unlock>
  return rmem;
 80149e2:	687b      	ldr	r3, [r7, #4]
}
 80149e4:	4618      	mov	r0, r3
 80149e6:	3720      	adds	r7, #32
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}
 80149ec:	200044e0 	.word	0x200044e0
 80149f0:	200044e4 	.word	0x200044e4
 80149f4:	080201e8 	.word	0x080201e8
 80149f8:	08020374 	.word	0x08020374
 80149fc:	08020230 	.word	0x08020230
 8014a00:	0802038c 	.word	0x0802038c
 8014a04:	200044e8 	.word	0x200044e8
 8014a08:	080203ac 	.word	0x080203ac
 8014a0c:	200044ec 	.word	0x200044ec

08014a10 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b088      	sub	sp, #32
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	4603      	mov	r3, r0
 8014a18:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8014a1a:	88fb      	ldrh	r3, [r7, #6]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d101      	bne.n	8014a24 <mem_malloc+0x14>
    return NULL;
 8014a20:	2300      	movs	r3, #0
 8014a22:	e0e2      	b.n	8014bea <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8014a24:	88fb      	ldrh	r3, [r7, #6]
 8014a26:	3303      	adds	r3, #3
 8014a28:	b29b      	uxth	r3, r3
 8014a2a:	f023 0303 	bic.w	r3, r3, #3
 8014a2e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8014a30:	8bbb      	ldrh	r3, [r7, #28]
 8014a32:	2b0b      	cmp	r3, #11
 8014a34:	d801      	bhi.n	8014a3a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8014a36:	230c      	movs	r3, #12
 8014a38:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8014a3a:	8bbb      	ldrh	r3, [r7, #28]
 8014a3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014a40:	d803      	bhi.n	8014a4a <mem_malloc+0x3a>
 8014a42:	8bba      	ldrh	r2, [r7, #28]
 8014a44:	88fb      	ldrh	r3, [r7, #6]
 8014a46:	429a      	cmp	r2, r3
 8014a48:	d201      	bcs.n	8014a4e <mem_malloc+0x3e>
    return NULL;
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	e0cd      	b.n	8014bea <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8014a4e:	4869      	ldr	r0, [pc, #420]	; (8014bf4 <mem_malloc+0x1e4>)
 8014a50:	f00a f9f2 	bl	801ee38 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014a54:	4b68      	ldr	r3, [pc, #416]	; (8014bf8 <mem_malloc+0x1e8>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	4618      	mov	r0, r3
 8014a5a:	f7ff fcfd 	bl	8014458 <mem_to_ptr>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	83fb      	strh	r3, [r7, #30]
 8014a62:	e0b7      	b.n	8014bd4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8014a64:	8bfb      	ldrh	r3, [r7, #30]
 8014a66:	4618      	mov	r0, r3
 8014a68:	f7ff fce4 	bl	8014434 <ptr_to_mem>
 8014a6c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8014a6e:	697b      	ldr	r3, [r7, #20]
 8014a70:	791b      	ldrb	r3, [r3, #4]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	f040 80a7 	bne.w	8014bc6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8014a78:	697b      	ldr	r3, [r7, #20]
 8014a7a:	881b      	ldrh	r3, [r3, #0]
 8014a7c:	461a      	mov	r2, r3
 8014a7e:	8bfb      	ldrh	r3, [r7, #30]
 8014a80:	1ad3      	subs	r3, r2, r3
 8014a82:	f1a3 0208 	sub.w	r2, r3, #8
 8014a86:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	f0c0 809c 	bcc.w	8014bc6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8014a8e:	697b      	ldr	r3, [r7, #20]
 8014a90:	881b      	ldrh	r3, [r3, #0]
 8014a92:	461a      	mov	r2, r3
 8014a94:	8bfb      	ldrh	r3, [r7, #30]
 8014a96:	1ad3      	subs	r3, r2, r3
 8014a98:	f1a3 0208 	sub.w	r2, r3, #8
 8014a9c:	8bbb      	ldrh	r3, [r7, #28]
 8014a9e:	3314      	adds	r3, #20
 8014aa0:	429a      	cmp	r2, r3
 8014aa2:	d333      	bcc.n	8014b0c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8014aa4:	8bfa      	ldrh	r2, [r7, #30]
 8014aa6:	8bbb      	ldrh	r3, [r7, #28]
 8014aa8:	4413      	add	r3, r2
 8014aaa:	b29b      	uxth	r3, r3
 8014aac:	3308      	adds	r3, #8
 8014aae:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8014ab0:	8a7b      	ldrh	r3, [r7, #18]
 8014ab2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014ab6:	d106      	bne.n	8014ac6 <mem_malloc+0xb6>
 8014ab8:	4b50      	ldr	r3, [pc, #320]	; (8014bfc <mem_malloc+0x1ec>)
 8014aba:	f240 3287 	movw	r2, #903	; 0x387
 8014abe:	4950      	ldr	r1, [pc, #320]	; (8014c00 <mem_malloc+0x1f0>)
 8014ac0:	4850      	ldr	r0, [pc, #320]	; (8014c04 <mem_malloc+0x1f4>)
 8014ac2:	f00a fa5f 	bl	801ef84 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8014ac6:	8a7b      	ldrh	r3, [r7, #18]
 8014ac8:	4618      	mov	r0, r3
 8014aca:	f7ff fcb3 	bl	8014434 <ptr_to_mem>
 8014ace:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8014ad6:	697b      	ldr	r3, [r7, #20]
 8014ad8:	881a      	ldrh	r2, [r3, #0]
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	8bfa      	ldrh	r2, [r7, #30]
 8014ae2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	8a7a      	ldrh	r2, [r7, #18]
 8014ae8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8014aea:	697b      	ldr	r3, [r7, #20]
 8014aec:	2201      	movs	r2, #1
 8014aee:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	881b      	ldrh	r3, [r3, #0]
 8014af4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014af8:	d00b      	beq.n	8014b12 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	881b      	ldrh	r3, [r3, #0]
 8014afe:	4618      	mov	r0, r3
 8014b00:	f7ff fc98 	bl	8014434 <ptr_to_mem>
 8014b04:	4602      	mov	r2, r0
 8014b06:	8a7b      	ldrh	r3, [r7, #18]
 8014b08:	8053      	strh	r3, [r2, #2]
 8014b0a:	e002      	b.n	8014b12 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8014b0c:	697b      	ldr	r3, [r7, #20]
 8014b0e:	2201      	movs	r2, #1
 8014b10:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8014b12:	4b39      	ldr	r3, [pc, #228]	; (8014bf8 <mem_malloc+0x1e8>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	697a      	ldr	r2, [r7, #20]
 8014b18:	429a      	cmp	r2, r3
 8014b1a:	d127      	bne.n	8014b6c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8014b1c:	4b36      	ldr	r3, [pc, #216]	; (8014bf8 <mem_malloc+0x1e8>)
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8014b22:	e005      	b.n	8014b30 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8014b24:	69bb      	ldr	r3, [r7, #24]
 8014b26:	881b      	ldrh	r3, [r3, #0]
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f7ff fc83 	bl	8014434 <ptr_to_mem>
 8014b2e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8014b30:	69bb      	ldr	r3, [r7, #24]
 8014b32:	791b      	ldrb	r3, [r3, #4]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d004      	beq.n	8014b42 <mem_malloc+0x132>
 8014b38:	4b33      	ldr	r3, [pc, #204]	; (8014c08 <mem_malloc+0x1f8>)
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	69ba      	ldr	r2, [r7, #24]
 8014b3e:	429a      	cmp	r2, r3
 8014b40:	d1f0      	bne.n	8014b24 <mem_malloc+0x114>
          }
          lfree = cur;
 8014b42:	4a2d      	ldr	r2, [pc, #180]	; (8014bf8 <mem_malloc+0x1e8>)
 8014b44:	69bb      	ldr	r3, [r7, #24]
 8014b46:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8014b48:	4b2b      	ldr	r3, [pc, #172]	; (8014bf8 <mem_malloc+0x1e8>)
 8014b4a:	681a      	ldr	r2, [r3, #0]
 8014b4c:	4b2e      	ldr	r3, [pc, #184]	; (8014c08 <mem_malloc+0x1f8>)
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	429a      	cmp	r2, r3
 8014b52:	d00b      	beq.n	8014b6c <mem_malloc+0x15c>
 8014b54:	4b28      	ldr	r3, [pc, #160]	; (8014bf8 <mem_malloc+0x1e8>)
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	791b      	ldrb	r3, [r3, #4]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d006      	beq.n	8014b6c <mem_malloc+0x15c>
 8014b5e:	4b27      	ldr	r3, [pc, #156]	; (8014bfc <mem_malloc+0x1ec>)
 8014b60:	f240 32b5 	movw	r2, #949	; 0x3b5
 8014b64:	4929      	ldr	r1, [pc, #164]	; (8014c0c <mem_malloc+0x1fc>)
 8014b66:	4827      	ldr	r0, [pc, #156]	; (8014c04 <mem_malloc+0x1f4>)
 8014b68:	f00a fa0c 	bl	801ef84 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8014b6c:	4821      	ldr	r0, [pc, #132]	; (8014bf4 <mem_malloc+0x1e4>)
 8014b6e:	f00a f972 	bl	801ee56 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8014b72:	8bba      	ldrh	r2, [r7, #28]
 8014b74:	697b      	ldr	r3, [r7, #20]
 8014b76:	4413      	add	r3, r2
 8014b78:	3308      	adds	r3, #8
 8014b7a:	4a23      	ldr	r2, [pc, #140]	; (8014c08 <mem_malloc+0x1f8>)
 8014b7c:	6812      	ldr	r2, [r2, #0]
 8014b7e:	4293      	cmp	r3, r2
 8014b80:	d906      	bls.n	8014b90 <mem_malloc+0x180>
 8014b82:	4b1e      	ldr	r3, [pc, #120]	; (8014bfc <mem_malloc+0x1ec>)
 8014b84:	f240 32ba 	movw	r2, #954	; 0x3ba
 8014b88:	4921      	ldr	r1, [pc, #132]	; (8014c10 <mem_malloc+0x200>)
 8014b8a:	481e      	ldr	r0, [pc, #120]	; (8014c04 <mem_malloc+0x1f4>)
 8014b8c:	f00a f9fa 	bl	801ef84 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8014b90:	697b      	ldr	r3, [r7, #20]
 8014b92:	f003 0303 	and.w	r3, r3, #3
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d006      	beq.n	8014ba8 <mem_malloc+0x198>
 8014b9a:	4b18      	ldr	r3, [pc, #96]	; (8014bfc <mem_malloc+0x1ec>)
 8014b9c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8014ba0:	491c      	ldr	r1, [pc, #112]	; (8014c14 <mem_malloc+0x204>)
 8014ba2:	4818      	ldr	r0, [pc, #96]	; (8014c04 <mem_malloc+0x1f4>)
 8014ba4:	f00a f9ee 	bl	801ef84 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8014ba8:	697b      	ldr	r3, [r7, #20]
 8014baa:	f003 0303 	and.w	r3, r3, #3
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d006      	beq.n	8014bc0 <mem_malloc+0x1b0>
 8014bb2:	4b12      	ldr	r3, [pc, #72]	; (8014bfc <mem_malloc+0x1ec>)
 8014bb4:	f240 32be 	movw	r2, #958	; 0x3be
 8014bb8:	4917      	ldr	r1, [pc, #92]	; (8014c18 <mem_malloc+0x208>)
 8014bba:	4812      	ldr	r0, [pc, #72]	; (8014c04 <mem_malloc+0x1f4>)
 8014bbc:	f00a f9e2 	bl	801ef84 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8014bc0:	697b      	ldr	r3, [r7, #20]
 8014bc2:	3308      	adds	r3, #8
 8014bc4:	e011      	b.n	8014bea <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8014bc6:	8bfb      	ldrh	r3, [r7, #30]
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f7ff fc33 	bl	8014434 <ptr_to_mem>
 8014bce:	4603      	mov	r3, r0
 8014bd0:	881b      	ldrh	r3, [r3, #0]
 8014bd2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014bd4:	8bfa      	ldrh	r2, [r7, #30]
 8014bd6:	8bbb      	ldrh	r3, [r7, #28]
 8014bd8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8014bdc:	429a      	cmp	r2, r3
 8014bde:	f4ff af41 	bcc.w	8014a64 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8014be2:	4804      	ldr	r0, [pc, #16]	; (8014bf4 <mem_malloc+0x1e4>)
 8014be4:	f00a f937 	bl	801ee56 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8014be8:	2300      	movs	r3, #0
}
 8014bea:	4618      	mov	r0, r3
 8014bec:	3720      	adds	r7, #32
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bd80      	pop	{r7, pc}
 8014bf2:	bf00      	nop
 8014bf4:	200044e8 	.word	0x200044e8
 8014bf8:	200044ec 	.word	0x200044ec
 8014bfc:	080201e8 	.word	0x080201e8
 8014c00:	080203ac 	.word	0x080203ac
 8014c04:	08020230 	.word	0x08020230
 8014c08:	200044e4 	.word	0x200044e4
 8014c0c:	080203c0 	.word	0x080203c0
 8014c10:	080203dc 	.word	0x080203dc
 8014c14:	0802040c 	.word	0x0802040c
 8014c18:	0802043c 	.word	0x0802043c

08014c1c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8014c1c:	b480      	push	{r7}
 8014c1e:	b085      	sub	sp, #20
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	689b      	ldr	r3, [r3, #8]
 8014c28:	2200      	movs	r2, #0
 8014c2a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	685b      	ldr	r3, [r3, #4]
 8014c30:	3303      	adds	r3, #3
 8014c32:	f023 0303 	bic.w	r3, r3, #3
 8014c36:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8014c38:	2300      	movs	r3, #0
 8014c3a:	60fb      	str	r3, [r7, #12]
 8014c3c:	e011      	b.n	8014c62 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	689b      	ldr	r3, [r3, #8]
 8014c42:	681a      	ldr	r2, [r3, #0]
 8014c44:	68bb      	ldr	r3, [r7, #8]
 8014c46:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	689b      	ldr	r3, [r3, #8]
 8014c4c:	68ba      	ldr	r2, [r7, #8]
 8014c4e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	881b      	ldrh	r3, [r3, #0]
 8014c54:	461a      	mov	r2, r3
 8014c56:	68bb      	ldr	r3, [r7, #8]
 8014c58:	4413      	add	r3, r2
 8014c5a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	3301      	adds	r3, #1
 8014c60:	60fb      	str	r3, [r7, #12]
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	885b      	ldrh	r3, [r3, #2]
 8014c66:	461a      	mov	r2, r3
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	4293      	cmp	r3, r2
 8014c6c:	dbe7      	blt.n	8014c3e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8014c6e:	bf00      	nop
 8014c70:	3714      	adds	r7, #20
 8014c72:	46bd      	mov	sp, r7
 8014c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c78:	4770      	bx	lr
	...

08014c7c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b082      	sub	sp, #8
 8014c80:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8014c82:	2300      	movs	r3, #0
 8014c84:	80fb      	strh	r3, [r7, #6]
 8014c86:	e009      	b.n	8014c9c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8014c88:	88fb      	ldrh	r3, [r7, #6]
 8014c8a:	4a08      	ldr	r2, [pc, #32]	; (8014cac <memp_init+0x30>)
 8014c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014c90:	4618      	mov	r0, r3
 8014c92:	f7ff ffc3 	bl	8014c1c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8014c96:	88fb      	ldrh	r3, [r7, #6]
 8014c98:	3301      	adds	r3, #1
 8014c9a:	80fb      	strh	r3, [r7, #6]
 8014c9c:	88fb      	ldrh	r3, [r7, #6]
 8014c9e:	2b0c      	cmp	r3, #12
 8014ca0:	d9f2      	bls.n	8014c88 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8014ca2:	bf00      	nop
 8014ca4:	3708      	adds	r7, #8
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	bd80      	pop	{r7, pc}
 8014caa:	bf00      	nop
 8014cac:	0803378c 	.word	0x0803378c

08014cb0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b084      	sub	sp, #16
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8014cb8:	f00a f900 	bl	801eebc <sys_arch_protect>
 8014cbc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	689b      	ldr	r3, [r3, #8]
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8014cc6:	68bb      	ldr	r3, [r7, #8]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d015      	beq.n	8014cf8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	689b      	ldr	r3, [r3, #8]
 8014cd0:	68ba      	ldr	r2, [r7, #8]
 8014cd2:	6812      	ldr	r2, [r2, #0]
 8014cd4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8014cd6:	68bb      	ldr	r3, [r7, #8]
 8014cd8:	f003 0303 	and.w	r3, r3, #3
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d006      	beq.n	8014cee <do_memp_malloc_pool+0x3e>
 8014ce0:	4b09      	ldr	r3, [pc, #36]	; (8014d08 <do_memp_malloc_pool+0x58>)
 8014ce2:	f240 1219 	movw	r2, #281	; 0x119
 8014ce6:	4909      	ldr	r1, [pc, #36]	; (8014d0c <do_memp_malloc_pool+0x5c>)
 8014ce8:	4809      	ldr	r0, [pc, #36]	; (8014d10 <do_memp_malloc_pool+0x60>)
 8014cea:	f00a f94b 	bl	801ef84 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8014cee:	68f8      	ldr	r0, [r7, #12]
 8014cf0:	f00a f8f2 	bl	801eed8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8014cf4:	68bb      	ldr	r3, [r7, #8]
 8014cf6:	e003      	b.n	8014d00 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8014cf8:	68f8      	ldr	r0, [r7, #12]
 8014cfa:	f00a f8ed 	bl	801eed8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8014cfe:	2300      	movs	r3, #0
}
 8014d00:	4618      	mov	r0, r3
 8014d02:	3710      	adds	r7, #16
 8014d04:	46bd      	mov	sp, r7
 8014d06:	bd80      	pop	{r7, pc}
 8014d08:	08020460 	.word	0x08020460
 8014d0c:	08020490 	.word	0x08020490
 8014d10:	080204b4 	.word	0x080204b4

08014d14 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b084      	sub	sp, #16
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8014d1e:	79fb      	ldrb	r3, [r7, #7]
 8014d20:	2b0c      	cmp	r3, #12
 8014d22:	d908      	bls.n	8014d36 <memp_malloc+0x22>
 8014d24:	4b0a      	ldr	r3, [pc, #40]	; (8014d50 <memp_malloc+0x3c>)
 8014d26:	f240 1257 	movw	r2, #343	; 0x157
 8014d2a:	490a      	ldr	r1, [pc, #40]	; (8014d54 <memp_malloc+0x40>)
 8014d2c:	480a      	ldr	r0, [pc, #40]	; (8014d58 <memp_malloc+0x44>)
 8014d2e:	f00a f929 	bl	801ef84 <iprintf>
 8014d32:	2300      	movs	r3, #0
 8014d34:	e008      	b.n	8014d48 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8014d36:	79fb      	ldrb	r3, [r7, #7]
 8014d38:	4a08      	ldr	r2, [pc, #32]	; (8014d5c <memp_malloc+0x48>)
 8014d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f7ff ffb6 	bl	8014cb0 <do_memp_malloc_pool>
 8014d44:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8014d46:	68fb      	ldr	r3, [r7, #12]
}
 8014d48:	4618      	mov	r0, r3
 8014d4a:	3710      	adds	r7, #16
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}
 8014d50:	08020460 	.word	0x08020460
 8014d54:	080204f0 	.word	0x080204f0
 8014d58:	080204b4 	.word	0x080204b4
 8014d5c:	0803378c 	.word	0x0803378c

08014d60 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b084      	sub	sp, #16
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	6078      	str	r0, [r7, #4]
 8014d68:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8014d6a:	683b      	ldr	r3, [r7, #0]
 8014d6c:	f003 0303 	and.w	r3, r3, #3
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d006      	beq.n	8014d82 <do_memp_free_pool+0x22>
 8014d74:	4b0d      	ldr	r3, [pc, #52]	; (8014dac <do_memp_free_pool+0x4c>)
 8014d76:	f240 126d 	movw	r2, #365	; 0x16d
 8014d7a:	490d      	ldr	r1, [pc, #52]	; (8014db0 <do_memp_free_pool+0x50>)
 8014d7c:	480d      	ldr	r0, [pc, #52]	; (8014db4 <do_memp_free_pool+0x54>)
 8014d7e:	f00a f901 	bl	801ef84 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8014d82:	683b      	ldr	r3, [r7, #0]
 8014d84:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8014d86:	f00a f899 	bl	801eebc <sys_arch_protect>
 8014d8a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	689b      	ldr	r3, [r3, #8]
 8014d90:	681a      	ldr	r2, [r3, #0]
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	689b      	ldr	r3, [r3, #8]
 8014d9a:	68fa      	ldr	r2, [r7, #12]
 8014d9c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8014d9e:	68b8      	ldr	r0, [r7, #8]
 8014da0:	f00a f89a 	bl	801eed8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8014da4:	bf00      	nop
 8014da6:	3710      	adds	r7, #16
 8014da8:	46bd      	mov	sp, r7
 8014daa:	bd80      	pop	{r7, pc}
 8014dac:	08020460 	.word	0x08020460
 8014db0:	08020510 	.word	0x08020510
 8014db4:	080204b4 	.word	0x080204b4

08014db8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b082      	sub	sp, #8
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	6039      	str	r1, [r7, #0]
 8014dc2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8014dc4:	79fb      	ldrb	r3, [r7, #7]
 8014dc6:	2b0c      	cmp	r3, #12
 8014dc8:	d907      	bls.n	8014dda <memp_free+0x22>
 8014dca:	4b0c      	ldr	r3, [pc, #48]	; (8014dfc <memp_free+0x44>)
 8014dcc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8014dd0:	490b      	ldr	r1, [pc, #44]	; (8014e00 <memp_free+0x48>)
 8014dd2:	480c      	ldr	r0, [pc, #48]	; (8014e04 <memp_free+0x4c>)
 8014dd4:	f00a f8d6 	bl	801ef84 <iprintf>
 8014dd8:	e00c      	b.n	8014df4 <memp_free+0x3c>

  if (mem == NULL) {
 8014dda:	683b      	ldr	r3, [r7, #0]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d008      	beq.n	8014df2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8014de0:	79fb      	ldrb	r3, [r7, #7]
 8014de2:	4a09      	ldr	r2, [pc, #36]	; (8014e08 <memp_free+0x50>)
 8014de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014de8:	6839      	ldr	r1, [r7, #0]
 8014dea:	4618      	mov	r0, r3
 8014dec:	f7ff ffb8 	bl	8014d60 <do_memp_free_pool>
 8014df0:	e000      	b.n	8014df4 <memp_free+0x3c>
    return;
 8014df2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8014df4:	3708      	adds	r7, #8
 8014df6:	46bd      	mov	sp, r7
 8014df8:	bd80      	pop	{r7, pc}
 8014dfa:	bf00      	nop
 8014dfc:	08020460 	.word	0x08020460
 8014e00:	08020530 	.word	0x08020530
 8014e04:	080204b4 	.word	0x080204b4
 8014e08:	0803378c 	.word	0x0803378c

08014e0c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8014e0c:	b480      	push	{r7}
 8014e0e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8014e10:	bf00      	nop
 8014e12:	46bd      	mov	sp, r7
 8014e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e18:	4770      	bx	lr
	...

08014e1c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	b086      	sub	sp, #24
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	60f8      	str	r0, [r7, #12]
 8014e24:	60b9      	str	r1, [r7, #8]
 8014e26:	607a      	str	r2, [r7, #4]
 8014e28:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d108      	bne.n	8014e42 <netif_add+0x26>
 8014e30:	4b57      	ldr	r3, [pc, #348]	; (8014f90 <netif_add+0x174>)
 8014e32:	f240 1227 	movw	r2, #295	; 0x127
 8014e36:	4957      	ldr	r1, [pc, #348]	; (8014f94 <netif_add+0x178>)
 8014e38:	4857      	ldr	r0, [pc, #348]	; (8014f98 <netif_add+0x17c>)
 8014e3a:	f00a f8a3 	bl	801ef84 <iprintf>
 8014e3e:	2300      	movs	r3, #0
 8014e40:	e0a2      	b.n	8014f88 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8014e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d108      	bne.n	8014e5a <netif_add+0x3e>
 8014e48:	4b51      	ldr	r3, [pc, #324]	; (8014f90 <netif_add+0x174>)
 8014e4a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8014e4e:	4953      	ldr	r1, [pc, #332]	; (8014f9c <netif_add+0x180>)
 8014e50:	4851      	ldr	r0, [pc, #324]	; (8014f98 <netif_add+0x17c>)
 8014e52:	f00a f897 	bl	801ef84 <iprintf>
 8014e56:	2300      	movs	r3, #0
 8014e58:	e096      	b.n	8014f88 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8014e5a:	68bb      	ldr	r3, [r7, #8]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d101      	bne.n	8014e64 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8014e60:	4b4f      	ldr	r3, [pc, #316]	; (8014fa0 <netif_add+0x184>)
 8014e62:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d101      	bne.n	8014e6e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8014e6a:	4b4d      	ldr	r3, [pc, #308]	; (8014fa0 <netif_add+0x184>)
 8014e6c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8014e6e:	683b      	ldr	r3, [r7, #0]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d101      	bne.n	8014e78 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8014e74:	4b4a      	ldr	r3, [pc, #296]	; (8014fa0 <netif_add+0x184>)
 8014e76:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	2200      	movs	r2, #0
 8014e7c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	2200      	movs	r2, #0
 8014e82:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	2200      	movs	r2, #0
 8014e88:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	4a45      	ldr	r2, [pc, #276]	; (8014fa4 <netif_add+0x188>)
 8014e8e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	2200      	movs	r2, #0
 8014e94:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	2200      	movs	r2, #0
 8014e9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	6a3a      	ldr	r2, [r7, #32]
 8014ea8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8014eaa:	4b3f      	ldr	r3, [pc, #252]	; (8014fa8 <netif_add+0x18c>)
 8014eac:	781a      	ldrb	r2, [r3, #0]
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014eb8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8014eba:	683b      	ldr	r3, [r7, #0]
 8014ebc:	687a      	ldr	r2, [r7, #4]
 8014ebe:	68b9      	ldr	r1, [r7, #8]
 8014ec0:	68f8      	ldr	r0, [r7, #12]
 8014ec2:	f000 f913 	bl	80150ec <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8014ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ec8:	68f8      	ldr	r0, [r7, #12]
 8014eca:	4798      	blx	r3
 8014ecc:	4603      	mov	r3, r0
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d001      	beq.n	8014ed6 <netif_add+0xba>
    return NULL;
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	e058      	b.n	8014f88 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014edc:	2bff      	cmp	r3, #255	; 0xff
 8014ede:	d103      	bne.n	8014ee8 <netif_add+0xcc>
        netif->num = 0;
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8014ee8:	2300      	movs	r3, #0
 8014eea:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014eec:	4b2f      	ldr	r3, [pc, #188]	; (8014fac <netif_add+0x190>)
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	617b      	str	r3, [r7, #20]
 8014ef2:	e02b      	b.n	8014f4c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8014ef4:	697a      	ldr	r2, [r7, #20]
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	429a      	cmp	r2, r3
 8014efa:	d106      	bne.n	8014f0a <netif_add+0xee>
 8014efc:	4b24      	ldr	r3, [pc, #144]	; (8014f90 <netif_add+0x174>)
 8014efe:	f240 128b 	movw	r2, #395	; 0x18b
 8014f02:	492b      	ldr	r1, [pc, #172]	; (8014fb0 <netif_add+0x194>)
 8014f04:	4824      	ldr	r0, [pc, #144]	; (8014f98 <netif_add+0x17c>)
 8014f06:	f00a f83d 	bl	801ef84 <iprintf>
        num_netifs++;
 8014f0a:	693b      	ldr	r3, [r7, #16]
 8014f0c:	3301      	adds	r3, #1
 8014f0e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8014f10:	693b      	ldr	r3, [r7, #16]
 8014f12:	2bff      	cmp	r3, #255	; 0xff
 8014f14:	dd06      	ble.n	8014f24 <netif_add+0x108>
 8014f16:	4b1e      	ldr	r3, [pc, #120]	; (8014f90 <netif_add+0x174>)
 8014f18:	f240 128d 	movw	r2, #397	; 0x18d
 8014f1c:	4925      	ldr	r1, [pc, #148]	; (8014fb4 <netif_add+0x198>)
 8014f1e:	481e      	ldr	r0, [pc, #120]	; (8014f98 <netif_add+0x17c>)
 8014f20:	f00a f830 	bl	801ef84 <iprintf>
        if (netif2->num == netif->num) {
 8014f24:	697b      	ldr	r3, [r7, #20]
 8014f26:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014f30:	429a      	cmp	r2, r3
 8014f32:	d108      	bne.n	8014f46 <netif_add+0x12a>
          netif->num++;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014f3a:	3301      	adds	r3, #1
 8014f3c:	b2da      	uxtb	r2, r3
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8014f44:	e005      	b.n	8014f52 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014f46:	697b      	ldr	r3, [r7, #20]
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	617b      	str	r3, [r7, #20]
 8014f4c:	697b      	ldr	r3, [r7, #20]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d1d0      	bne.n	8014ef4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8014f52:	697b      	ldr	r3, [r7, #20]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d1be      	bne.n	8014ed6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014f5e:	2bfe      	cmp	r3, #254	; 0xfe
 8014f60:	d103      	bne.n	8014f6a <netif_add+0x14e>
    netif_num = 0;
 8014f62:	4b11      	ldr	r3, [pc, #68]	; (8014fa8 <netif_add+0x18c>)
 8014f64:	2200      	movs	r2, #0
 8014f66:	701a      	strb	r2, [r3, #0]
 8014f68:	e006      	b.n	8014f78 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014f70:	3301      	adds	r3, #1
 8014f72:	b2da      	uxtb	r2, r3
 8014f74:	4b0c      	ldr	r3, [pc, #48]	; (8014fa8 <netif_add+0x18c>)
 8014f76:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8014f78:	4b0c      	ldr	r3, [pc, #48]	; (8014fac <netif_add+0x190>)
 8014f7a:	681a      	ldr	r2, [r3, #0]
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8014f80:	4a0a      	ldr	r2, [pc, #40]	; (8014fac <netif_add+0x190>)
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8014f86:	68fb      	ldr	r3, [r7, #12]
}
 8014f88:	4618      	mov	r0, r3
 8014f8a:	3718      	adds	r7, #24
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	bd80      	pop	{r7, pc}
 8014f90:	0802054c 	.word	0x0802054c
 8014f94:	080205e0 	.word	0x080205e0
 8014f98:	0802059c 	.word	0x0802059c
 8014f9c:	080205fc 	.word	0x080205fc
 8014fa0:	08033800 	.word	0x08033800
 8014fa4:	080153c7 	.word	0x080153c7
 8014fa8:	20004524 	.word	0x20004524
 8014fac:	20013d1c 	.word	0x20013d1c
 8014fb0:	08020620 	.word	0x08020620
 8014fb4:	08020634 	.word	0x08020634

08014fb8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b082      	sub	sp, #8
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
 8014fc0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8014fc2:	6839      	ldr	r1, [r7, #0]
 8014fc4:	6878      	ldr	r0, [r7, #4]
 8014fc6:	f002 fe1b 	bl	8017c00 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8014fca:	6839      	ldr	r1, [r7, #0]
 8014fcc:	6878      	ldr	r0, [r7, #4]
 8014fce:	f007 fb93 	bl	801c6f8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8014fd2:	bf00      	nop
 8014fd4:	3708      	adds	r7, #8
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	bd80      	pop	{r7, pc}
	...

08014fdc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b086      	sub	sp, #24
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	60f8      	str	r0, [r7, #12]
 8014fe4:	60b9      	str	r1, [r7, #8]
 8014fe6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8014fe8:	68bb      	ldr	r3, [r7, #8]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d106      	bne.n	8014ffc <netif_do_set_ipaddr+0x20>
 8014fee:	4b1d      	ldr	r3, [pc, #116]	; (8015064 <netif_do_set_ipaddr+0x88>)
 8014ff0:	f240 12cb 	movw	r2, #459	; 0x1cb
 8014ff4:	491c      	ldr	r1, [pc, #112]	; (8015068 <netif_do_set_ipaddr+0x8c>)
 8014ff6:	481d      	ldr	r0, [pc, #116]	; (801506c <netif_do_set_ipaddr+0x90>)
 8014ff8:	f009 ffc4 	bl	801ef84 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d106      	bne.n	8015010 <netif_do_set_ipaddr+0x34>
 8015002:	4b18      	ldr	r3, [pc, #96]	; (8015064 <netif_do_set_ipaddr+0x88>)
 8015004:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8015008:	4917      	ldr	r1, [pc, #92]	; (8015068 <netif_do_set_ipaddr+0x8c>)
 801500a:	4818      	ldr	r0, [pc, #96]	; (801506c <netif_do_set_ipaddr+0x90>)
 801500c:	f009 ffba 	bl	801ef84 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8015010:	68bb      	ldr	r3, [r7, #8]
 8015012:	681a      	ldr	r2, [r3, #0]
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	3304      	adds	r3, #4
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	429a      	cmp	r2, r3
 801501c:	d01c      	beq.n	8015058 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801501e:	68bb      	ldr	r3, [r7, #8]
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	3304      	adds	r3, #4
 8015028:	681a      	ldr	r2, [r3, #0]
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801502e:	f107 0314 	add.w	r3, r7, #20
 8015032:	4619      	mov	r1, r3
 8015034:	6878      	ldr	r0, [r7, #4]
 8015036:	f7ff ffbf 	bl	8014fb8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801503a:	68bb      	ldr	r3, [r7, #8]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d002      	beq.n	8015046 <netif_do_set_ipaddr+0x6a>
 8015040:	68bb      	ldr	r3, [r7, #8]
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	e000      	b.n	8015048 <netif_do_set_ipaddr+0x6c>
 8015046:	2300      	movs	r3, #0
 8015048:	68fa      	ldr	r2, [r7, #12]
 801504a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801504c:	2101      	movs	r1, #1
 801504e:	68f8      	ldr	r0, [r7, #12]
 8015050:	f000 f8d2 	bl	80151f8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8015054:	2301      	movs	r3, #1
 8015056:	e000      	b.n	801505a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8015058:	2300      	movs	r3, #0
}
 801505a:	4618      	mov	r0, r3
 801505c:	3718      	adds	r7, #24
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}
 8015062:	bf00      	nop
 8015064:	0802054c 	.word	0x0802054c
 8015068:	08020664 	.word	0x08020664
 801506c:	0802059c 	.word	0x0802059c

08015070 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8015070:	b480      	push	{r7}
 8015072:	b085      	sub	sp, #20
 8015074:	af00      	add	r7, sp, #0
 8015076:	60f8      	str	r0, [r7, #12]
 8015078:	60b9      	str	r1, [r7, #8]
 801507a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801507c:	68bb      	ldr	r3, [r7, #8]
 801507e:	681a      	ldr	r2, [r3, #0]
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	3308      	adds	r3, #8
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	429a      	cmp	r2, r3
 8015088:	d00a      	beq.n	80150a0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801508a:	68bb      	ldr	r3, [r7, #8]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d002      	beq.n	8015096 <netif_do_set_netmask+0x26>
 8015090:	68bb      	ldr	r3, [r7, #8]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	e000      	b.n	8015098 <netif_do_set_netmask+0x28>
 8015096:	2300      	movs	r3, #0
 8015098:	68fa      	ldr	r2, [r7, #12]
 801509a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801509c:	2301      	movs	r3, #1
 801509e:	e000      	b.n	80150a2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80150a0:	2300      	movs	r3, #0
}
 80150a2:	4618      	mov	r0, r3
 80150a4:	3714      	adds	r7, #20
 80150a6:	46bd      	mov	sp, r7
 80150a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ac:	4770      	bx	lr

080150ae <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80150ae:	b480      	push	{r7}
 80150b0:	b085      	sub	sp, #20
 80150b2:	af00      	add	r7, sp, #0
 80150b4:	60f8      	str	r0, [r7, #12]
 80150b6:	60b9      	str	r1, [r7, #8]
 80150b8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80150ba:	68bb      	ldr	r3, [r7, #8]
 80150bc:	681a      	ldr	r2, [r3, #0]
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	330c      	adds	r3, #12
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	429a      	cmp	r2, r3
 80150c6:	d00a      	beq.n	80150de <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80150c8:	68bb      	ldr	r3, [r7, #8]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d002      	beq.n	80150d4 <netif_do_set_gw+0x26>
 80150ce:	68bb      	ldr	r3, [r7, #8]
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	e000      	b.n	80150d6 <netif_do_set_gw+0x28>
 80150d4:	2300      	movs	r3, #0
 80150d6:	68fa      	ldr	r2, [r7, #12]
 80150d8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80150da:	2301      	movs	r3, #1
 80150dc:	e000      	b.n	80150e0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80150de:	2300      	movs	r3, #0
}
 80150e0:	4618      	mov	r0, r3
 80150e2:	3714      	adds	r7, #20
 80150e4:	46bd      	mov	sp, r7
 80150e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ea:	4770      	bx	lr

080150ec <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b088      	sub	sp, #32
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	60f8      	str	r0, [r7, #12]
 80150f4:	60b9      	str	r1, [r7, #8]
 80150f6:	607a      	str	r2, [r7, #4]
 80150f8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80150fa:	2300      	movs	r3, #0
 80150fc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80150fe:	2300      	movs	r3, #0
 8015100:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015102:	68bb      	ldr	r3, [r7, #8]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d101      	bne.n	801510c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8015108:	4b1c      	ldr	r3, [pc, #112]	; (801517c <netif_set_addr+0x90>)
 801510a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d101      	bne.n	8015116 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8015112:	4b1a      	ldr	r3, [pc, #104]	; (801517c <netif_set_addr+0x90>)
 8015114:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015116:	683b      	ldr	r3, [r7, #0]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d101      	bne.n	8015120 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801511c:	4b17      	ldr	r3, [pc, #92]	; (801517c <netif_set_addr+0x90>)
 801511e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8015120:	68bb      	ldr	r3, [r7, #8]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d003      	beq.n	801512e <netif_set_addr+0x42>
 8015126:	68bb      	ldr	r3, [r7, #8]
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d101      	bne.n	8015132 <netif_set_addr+0x46>
 801512e:	2301      	movs	r3, #1
 8015130:	e000      	b.n	8015134 <netif_set_addr+0x48>
 8015132:	2300      	movs	r3, #0
 8015134:	617b      	str	r3, [r7, #20]
  if (remove) {
 8015136:	697b      	ldr	r3, [r7, #20]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d006      	beq.n	801514a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801513c:	f107 0310 	add.w	r3, r7, #16
 8015140:	461a      	mov	r2, r3
 8015142:	68b9      	ldr	r1, [r7, #8]
 8015144:	68f8      	ldr	r0, [r7, #12]
 8015146:	f7ff ff49 	bl	8014fdc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801514a:	69fa      	ldr	r2, [r7, #28]
 801514c:	6879      	ldr	r1, [r7, #4]
 801514e:	68f8      	ldr	r0, [r7, #12]
 8015150:	f7ff ff8e 	bl	8015070 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8015154:	69ba      	ldr	r2, [r7, #24]
 8015156:	6839      	ldr	r1, [r7, #0]
 8015158:	68f8      	ldr	r0, [r7, #12]
 801515a:	f7ff ffa8 	bl	80150ae <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801515e:	697b      	ldr	r3, [r7, #20]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d106      	bne.n	8015172 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015164:	f107 0310 	add.w	r3, r7, #16
 8015168:	461a      	mov	r2, r3
 801516a:	68b9      	ldr	r1, [r7, #8]
 801516c:	68f8      	ldr	r0, [r7, #12]
 801516e:	f7ff ff35 	bl	8014fdc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8015172:	bf00      	nop
 8015174:	3720      	adds	r7, #32
 8015176:	46bd      	mov	sp, r7
 8015178:	bd80      	pop	{r7, pc}
 801517a:	bf00      	nop
 801517c:	08033800 	.word	0x08033800

08015180 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8015180:	b480      	push	{r7}
 8015182:	b083      	sub	sp, #12
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8015188:	4a04      	ldr	r2, [pc, #16]	; (801519c <netif_set_default+0x1c>)
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801518e:	bf00      	nop
 8015190:	370c      	adds	r7, #12
 8015192:	46bd      	mov	sp, r7
 8015194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015198:	4770      	bx	lr
 801519a:	bf00      	nop
 801519c:	20013d20 	.word	0x20013d20

080151a0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b082      	sub	sp, #8
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d107      	bne.n	80151be <netif_set_up+0x1e>
 80151ae:	4b0f      	ldr	r3, [pc, #60]	; (80151ec <netif_set_up+0x4c>)
 80151b0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80151b4:	490e      	ldr	r1, [pc, #56]	; (80151f0 <netif_set_up+0x50>)
 80151b6:	480f      	ldr	r0, [pc, #60]	; (80151f4 <netif_set_up+0x54>)
 80151b8:	f009 fee4 	bl	801ef84 <iprintf>
 80151bc:	e013      	b.n	80151e6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80151c4:	f003 0301 	and.w	r3, r3, #1
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d10c      	bne.n	80151e6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80151d2:	f043 0301 	orr.w	r3, r3, #1
 80151d6:	b2da      	uxtb	r2, r3
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80151de:	2103      	movs	r1, #3
 80151e0:	6878      	ldr	r0, [r7, #4]
 80151e2:	f000 f809 	bl	80151f8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80151e6:	3708      	adds	r7, #8
 80151e8:	46bd      	mov	sp, r7
 80151ea:	bd80      	pop	{r7, pc}
 80151ec:	0802054c 	.word	0x0802054c
 80151f0:	080206d4 	.word	0x080206d4
 80151f4:	0802059c 	.word	0x0802059c

080151f8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b082      	sub	sp, #8
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	6078      	str	r0, [r7, #4]
 8015200:	460b      	mov	r3, r1
 8015202:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d106      	bne.n	8015218 <netif_issue_reports+0x20>
 801520a:	4b18      	ldr	r3, [pc, #96]	; (801526c <netif_issue_reports+0x74>)
 801520c:	f240 326d 	movw	r2, #877	; 0x36d
 8015210:	4917      	ldr	r1, [pc, #92]	; (8015270 <netif_issue_reports+0x78>)
 8015212:	4818      	ldr	r0, [pc, #96]	; (8015274 <netif_issue_reports+0x7c>)
 8015214:	f009 feb6 	bl	801ef84 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801521e:	f003 0304 	and.w	r3, r3, #4
 8015222:	2b00      	cmp	r3, #0
 8015224:	d01e      	beq.n	8015264 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801522c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015230:	2b00      	cmp	r3, #0
 8015232:	d017      	beq.n	8015264 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015234:	78fb      	ldrb	r3, [r7, #3]
 8015236:	f003 0301 	and.w	r3, r3, #1
 801523a:	2b00      	cmp	r3, #0
 801523c:	d013      	beq.n	8015266 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	3304      	adds	r3, #4
 8015242:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015244:	2b00      	cmp	r3, #0
 8015246:	d00e      	beq.n	8015266 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801524e:	f003 0308 	and.w	r3, r3, #8
 8015252:	2b00      	cmp	r3, #0
 8015254:	d007      	beq.n	8015266 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	3304      	adds	r3, #4
 801525a:	4619      	mov	r1, r3
 801525c:	6878      	ldr	r0, [r7, #4]
 801525e:	f008 f9b5 	bl	801d5cc <etharp_request>
 8015262:	e000      	b.n	8015266 <netif_issue_reports+0x6e>
    return;
 8015264:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8015266:	3708      	adds	r7, #8
 8015268:	46bd      	mov	sp, r7
 801526a:	bd80      	pop	{r7, pc}
 801526c:	0802054c 	.word	0x0802054c
 8015270:	080206f0 	.word	0x080206f0
 8015274:	0802059c 	.word	0x0802059c

08015278 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b082      	sub	sp, #8
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d107      	bne.n	8015296 <netif_set_down+0x1e>
 8015286:	4b12      	ldr	r3, [pc, #72]	; (80152d0 <netif_set_down+0x58>)
 8015288:	f240 329b 	movw	r2, #923	; 0x39b
 801528c:	4911      	ldr	r1, [pc, #68]	; (80152d4 <netif_set_down+0x5c>)
 801528e:	4812      	ldr	r0, [pc, #72]	; (80152d8 <netif_set_down+0x60>)
 8015290:	f009 fe78 	bl	801ef84 <iprintf>
 8015294:	e019      	b.n	80152ca <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801529c:	f003 0301 	and.w	r3, r3, #1
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d012      	beq.n	80152ca <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152aa:	f023 0301 	bic.w	r3, r3, #1
 80152ae:	b2da      	uxtb	r2, r3
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152bc:	f003 0308 	and.w	r3, r3, #8
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d002      	beq.n	80152ca <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80152c4:	6878      	ldr	r0, [r7, #4]
 80152c6:	f007 fd3f 	bl	801cd48 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80152ca:	3708      	adds	r7, #8
 80152cc:	46bd      	mov	sp, r7
 80152ce:	bd80      	pop	{r7, pc}
 80152d0:	0802054c 	.word	0x0802054c
 80152d4:	08020714 	.word	0x08020714
 80152d8:	0802059c 	.word	0x0802059c

080152dc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b082      	sub	sp, #8
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d107      	bne.n	80152fa <netif_set_link_up+0x1e>
 80152ea:	4b13      	ldr	r3, [pc, #76]	; (8015338 <netif_set_link_up+0x5c>)
 80152ec:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80152f0:	4912      	ldr	r1, [pc, #72]	; (801533c <netif_set_link_up+0x60>)
 80152f2:	4813      	ldr	r0, [pc, #76]	; (8015340 <netif_set_link_up+0x64>)
 80152f4:	f009 fe46 	bl	801ef84 <iprintf>
 80152f8:	e01b      	b.n	8015332 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015300:	f003 0304 	and.w	r3, r3, #4
 8015304:	2b00      	cmp	r3, #0
 8015306:	d114      	bne.n	8015332 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801530e:	f043 0304 	orr.w	r3, r3, #4
 8015312:	b2da      	uxtb	r2, r3
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801531a:	2103      	movs	r1, #3
 801531c:	6878      	ldr	r0, [r7, #4]
 801531e:	f7ff ff6b 	bl	80151f8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	69db      	ldr	r3, [r3, #28]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d003      	beq.n	8015332 <netif_set_link_up+0x56>
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	69db      	ldr	r3, [r3, #28]
 801532e:	6878      	ldr	r0, [r7, #4]
 8015330:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8015332:	3708      	adds	r7, #8
 8015334:	46bd      	mov	sp, r7
 8015336:	bd80      	pop	{r7, pc}
 8015338:	0802054c 	.word	0x0802054c
 801533c:	08020734 	.word	0x08020734
 8015340:	0802059c 	.word	0x0802059c

08015344 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b082      	sub	sp, #8
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d107      	bne.n	8015362 <netif_set_link_down+0x1e>
 8015352:	4b11      	ldr	r3, [pc, #68]	; (8015398 <netif_set_link_down+0x54>)
 8015354:	f240 4206 	movw	r2, #1030	; 0x406
 8015358:	4910      	ldr	r1, [pc, #64]	; (801539c <netif_set_link_down+0x58>)
 801535a:	4811      	ldr	r0, [pc, #68]	; (80153a0 <netif_set_link_down+0x5c>)
 801535c:	f009 fe12 	bl	801ef84 <iprintf>
 8015360:	e017      	b.n	8015392 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015368:	f003 0304 	and.w	r3, r3, #4
 801536c:	2b00      	cmp	r3, #0
 801536e:	d010      	beq.n	8015392 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015376:	f023 0304 	bic.w	r3, r3, #4
 801537a:	b2da      	uxtb	r2, r3
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	69db      	ldr	r3, [r3, #28]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d003      	beq.n	8015392 <netif_set_link_down+0x4e>
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	69db      	ldr	r3, [r3, #28]
 801538e:	6878      	ldr	r0, [r7, #4]
 8015390:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8015392:	3708      	adds	r7, #8
 8015394:	46bd      	mov	sp, r7
 8015396:	bd80      	pop	{r7, pc}
 8015398:	0802054c 	.word	0x0802054c
 801539c:	08020758 	.word	0x08020758
 80153a0:	0802059c 	.word	0x0802059c

080153a4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80153a4:	b480      	push	{r7}
 80153a6:	b083      	sub	sp, #12
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	6078      	str	r0, [r7, #4]
 80153ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d002      	beq.n	80153ba <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	683a      	ldr	r2, [r7, #0]
 80153b8:	61da      	str	r2, [r3, #28]
  }
}
 80153ba:	bf00      	nop
 80153bc:	370c      	adds	r7, #12
 80153be:	46bd      	mov	sp, r7
 80153c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c4:	4770      	bx	lr

080153c6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80153c6:	b480      	push	{r7}
 80153c8:	b085      	sub	sp, #20
 80153ca:	af00      	add	r7, sp, #0
 80153cc:	60f8      	str	r0, [r7, #12]
 80153ce:	60b9      	str	r1, [r7, #8]
 80153d0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80153d2:	f06f 030b 	mvn.w	r3, #11
}
 80153d6:	4618      	mov	r0, r3
 80153d8:	3714      	adds	r7, #20
 80153da:	46bd      	mov	sp, r7
 80153dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e0:	4770      	bx	lr
	...

080153e4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80153e4:	b480      	push	{r7}
 80153e6:	b085      	sub	sp, #20
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	4603      	mov	r3, r0
 80153ec:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80153ee:	79fb      	ldrb	r3, [r7, #7]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d013      	beq.n	801541c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80153f4:	4b0d      	ldr	r3, [pc, #52]	; (801542c <netif_get_by_index+0x48>)
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	60fb      	str	r3, [r7, #12]
 80153fa:	e00c      	b.n	8015416 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015402:	3301      	adds	r3, #1
 8015404:	b2db      	uxtb	r3, r3
 8015406:	79fa      	ldrb	r2, [r7, #7]
 8015408:	429a      	cmp	r2, r3
 801540a:	d101      	bne.n	8015410 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	e006      	b.n	801541e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	60fb      	str	r3, [r7, #12]
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d1ef      	bne.n	80153fc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801541c:	2300      	movs	r3, #0
}
 801541e:	4618      	mov	r0, r3
 8015420:	3714      	adds	r7, #20
 8015422:	46bd      	mov	sp, r7
 8015424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015428:	4770      	bx	lr
 801542a:	bf00      	nop
 801542c:	20013d1c 	.word	0x20013d1c

08015430 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b082      	sub	sp, #8
 8015434:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8015436:	f009 fd41 	bl	801eebc <sys_arch_protect>
 801543a:	6038      	str	r0, [r7, #0]
 801543c:	4b0d      	ldr	r3, [pc, #52]	; (8015474 <pbuf_free_ooseq+0x44>)
 801543e:	2200      	movs	r2, #0
 8015440:	701a      	strb	r2, [r3, #0]
 8015442:	6838      	ldr	r0, [r7, #0]
 8015444:	f009 fd48 	bl	801eed8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015448:	4b0b      	ldr	r3, [pc, #44]	; (8015478 <pbuf_free_ooseq+0x48>)
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	607b      	str	r3, [r7, #4]
 801544e:	e00a      	b.n	8015466 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015454:	2b00      	cmp	r3, #0
 8015456:	d003      	beq.n	8015460 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8015458:	6878      	ldr	r0, [r7, #4]
 801545a:	f002 fc0f 	bl	8017c7c <tcp_free_ooseq>
      return;
 801545e:	e005      	b.n	801546c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	68db      	ldr	r3, [r3, #12]
 8015464:	607b      	str	r3, [r7, #4]
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d1f1      	bne.n	8015450 <pbuf_free_ooseq+0x20>
    }
  }
}
 801546c:	3708      	adds	r7, #8
 801546e:	46bd      	mov	sp, r7
 8015470:	bd80      	pop	{r7, pc}
 8015472:	bf00      	nop
 8015474:	20013d24 	.word	0x20013d24
 8015478:	20013d2c 	.word	0x20013d2c

0801547c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801547c:	b580      	push	{r7, lr}
 801547e:	b082      	sub	sp, #8
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8015484:	f7ff ffd4 	bl	8015430 <pbuf_free_ooseq>
}
 8015488:	bf00      	nop
 801548a:	3708      	adds	r7, #8
 801548c:	46bd      	mov	sp, r7
 801548e:	bd80      	pop	{r7, pc}

08015490 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b082      	sub	sp, #8
 8015494:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8015496:	f009 fd11 	bl	801eebc <sys_arch_protect>
 801549a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801549c:	4b0f      	ldr	r3, [pc, #60]	; (80154dc <pbuf_pool_is_empty+0x4c>)
 801549e:	781b      	ldrb	r3, [r3, #0]
 80154a0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80154a2:	4b0e      	ldr	r3, [pc, #56]	; (80154dc <pbuf_pool_is_empty+0x4c>)
 80154a4:	2201      	movs	r2, #1
 80154a6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80154a8:	6878      	ldr	r0, [r7, #4]
 80154aa:	f009 fd15 	bl	801eed8 <sys_arch_unprotect>

  if (!queued) {
 80154ae:	78fb      	ldrb	r3, [r7, #3]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d10f      	bne.n	80154d4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80154b4:	2100      	movs	r1, #0
 80154b6:	480a      	ldr	r0, [pc, #40]	; (80154e0 <pbuf_pool_is_empty+0x50>)
 80154b8:	f7fe f89c 	bl	80135f4 <tcpip_try_callback>
 80154bc:	4603      	mov	r3, r0
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d008      	beq.n	80154d4 <pbuf_pool_is_empty+0x44>
 80154c2:	f009 fcfb 	bl	801eebc <sys_arch_protect>
 80154c6:	6078      	str	r0, [r7, #4]
 80154c8:	4b04      	ldr	r3, [pc, #16]	; (80154dc <pbuf_pool_is_empty+0x4c>)
 80154ca:	2200      	movs	r2, #0
 80154cc:	701a      	strb	r2, [r3, #0]
 80154ce:	6878      	ldr	r0, [r7, #4]
 80154d0:	f009 fd02 	bl	801eed8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80154d4:	bf00      	nop
 80154d6:	3708      	adds	r7, #8
 80154d8:	46bd      	mov	sp, r7
 80154da:	bd80      	pop	{r7, pc}
 80154dc:	20013d24 	.word	0x20013d24
 80154e0:	0801547d 	.word	0x0801547d

080154e4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80154e4:	b480      	push	{r7}
 80154e6:	b085      	sub	sp, #20
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	60f8      	str	r0, [r7, #12]
 80154ec:	60b9      	str	r1, [r7, #8]
 80154ee:	4611      	mov	r1, r2
 80154f0:	461a      	mov	r2, r3
 80154f2:	460b      	mov	r3, r1
 80154f4:	80fb      	strh	r3, [r7, #6]
 80154f6:	4613      	mov	r3, r2
 80154f8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	2200      	movs	r2, #0
 80154fe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	68ba      	ldr	r2, [r7, #8]
 8015504:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	88fa      	ldrh	r2, [r7, #6]
 801550a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	88ba      	ldrh	r2, [r7, #4]
 8015510:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8015512:	8b3b      	ldrh	r3, [r7, #24]
 8015514:	b2da      	uxtb	r2, r3
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	7f3a      	ldrb	r2, [r7, #28]
 801551e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	2201      	movs	r2, #1
 8015524:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	2200      	movs	r2, #0
 801552a:	73da      	strb	r2, [r3, #15]
}
 801552c:	bf00      	nop
 801552e:	3714      	adds	r7, #20
 8015530:	46bd      	mov	sp, r7
 8015532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015536:	4770      	bx	lr

08015538 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8015538:	b580      	push	{r7, lr}
 801553a:	b08c      	sub	sp, #48	; 0x30
 801553c:	af02      	add	r7, sp, #8
 801553e:	4603      	mov	r3, r0
 8015540:	71fb      	strb	r3, [r7, #7]
 8015542:	460b      	mov	r3, r1
 8015544:	80bb      	strh	r3, [r7, #4]
 8015546:	4613      	mov	r3, r2
 8015548:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801554a:	79fb      	ldrb	r3, [r7, #7]
 801554c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801554e:	887b      	ldrh	r3, [r7, #2]
 8015550:	2b41      	cmp	r3, #65	; 0x41
 8015552:	d00b      	beq.n	801556c <pbuf_alloc+0x34>
 8015554:	2b41      	cmp	r3, #65	; 0x41
 8015556:	dc02      	bgt.n	801555e <pbuf_alloc+0x26>
 8015558:	2b01      	cmp	r3, #1
 801555a:	d007      	beq.n	801556c <pbuf_alloc+0x34>
 801555c:	e0c2      	b.n	80156e4 <pbuf_alloc+0x1ac>
 801555e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8015562:	d00b      	beq.n	801557c <pbuf_alloc+0x44>
 8015564:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8015568:	d070      	beq.n	801564c <pbuf_alloc+0x114>
 801556a:	e0bb      	b.n	80156e4 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801556c:	887a      	ldrh	r2, [r7, #2]
 801556e:	88bb      	ldrh	r3, [r7, #4]
 8015570:	4619      	mov	r1, r3
 8015572:	2000      	movs	r0, #0
 8015574:	f000 f8d2 	bl	801571c <pbuf_alloc_reference>
 8015578:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801557a:	e0bd      	b.n	80156f8 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801557c:	2300      	movs	r3, #0
 801557e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8015580:	2300      	movs	r3, #0
 8015582:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8015584:	88bb      	ldrh	r3, [r7, #4]
 8015586:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8015588:	200c      	movs	r0, #12
 801558a:	f7ff fbc3 	bl	8014d14 <memp_malloc>
 801558e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8015590:	693b      	ldr	r3, [r7, #16]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d109      	bne.n	80155aa <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8015596:	f7ff ff7b 	bl	8015490 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801559c:	2b00      	cmp	r3, #0
 801559e:	d002      	beq.n	80155a6 <pbuf_alloc+0x6e>
            pbuf_free(p);
 80155a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80155a2:	f000 faa9 	bl	8015af8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80155a6:	2300      	movs	r3, #0
 80155a8:	e0a7      	b.n	80156fa <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80155aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80155ac:	3303      	adds	r3, #3
 80155ae:	b29b      	uxth	r3, r3
 80155b0:	f023 0303 	bic.w	r3, r3, #3
 80155b4:	b29b      	uxth	r3, r3
 80155b6:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80155ba:	b29b      	uxth	r3, r3
 80155bc:	8b7a      	ldrh	r2, [r7, #26]
 80155be:	4293      	cmp	r3, r2
 80155c0:	bf28      	it	cs
 80155c2:	4613      	movcs	r3, r2
 80155c4:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80155c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80155c8:	3310      	adds	r3, #16
 80155ca:	693a      	ldr	r2, [r7, #16]
 80155cc:	4413      	add	r3, r2
 80155ce:	3303      	adds	r3, #3
 80155d0:	f023 0303 	bic.w	r3, r3, #3
 80155d4:	4618      	mov	r0, r3
 80155d6:	89f9      	ldrh	r1, [r7, #14]
 80155d8:	8b7a      	ldrh	r2, [r7, #26]
 80155da:	2300      	movs	r3, #0
 80155dc:	9301      	str	r3, [sp, #4]
 80155de:	887b      	ldrh	r3, [r7, #2]
 80155e0:	9300      	str	r3, [sp, #0]
 80155e2:	460b      	mov	r3, r1
 80155e4:	4601      	mov	r1, r0
 80155e6:	6938      	ldr	r0, [r7, #16]
 80155e8:	f7ff ff7c 	bl	80154e4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80155ec:	693b      	ldr	r3, [r7, #16]
 80155ee:	685b      	ldr	r3, [r3, #4]
 80155f0:	f003 0303 	and.w	r3, r3, #3
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d006      	beq.n	8015606 <pbuf_alloc+0xce>
 80155f8:	4b42      	ldr	r3, [pc, #264]	; (8015704 <pbuf_alloc+0x1cc>)
 80155fa:	f240 1201 	movw	r2, #257	; 0x101
 80155fe:	4942      	ldr	r1, [pc, #264]	; (8015708 <pbuf_alloc+0x1d0>)
 8015600:	4842      	ldr	r0, [pc, #264]	; (801570c <pbuf_alloc+0x1d4>)
 8015602:	f009 fcbf 	bl	801ef84 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8015606:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015608:	3303      	adds	r3, #3
 801560a:	f023 0303 	bic.w	r3, r3, #3
 801560e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8015612:	d106      	bne.n	8015622 <pbuf_alloc+0xea>
 8015614:	4b3b      	ldr	r3, [pc, #236]	; (8015704 <pbuf_alloc+0x1cc>)
 8015616:	f240 1203 	movw	r2, #259	; 0x103
 801561a:	493d      	ldr	r1, [pc, #244]	; (8015710 <pbuf_alloc+0x1d8>)
 801561c:	483b      	ldr	r0, [pc, #236]	; (801570c <pbuf_alloc+0x1d4>)
 801561e:	f009 fcb1 	bl	801ef84 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8015622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015624:	2b00      	cmp	r3, #0
 8015626:	d102      	bne.n	801562e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8015628:	693b      	ldr	r3, [r7, #16]
 801562a:	627b      	str	r3, [r7, #36]	; 0x24
 801562c:	e002      	b.n	8015634 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801562e:	69fb      	ldr	r3, [r7, #28]
 8015630:	693a      	ldr	r2, [r7, #16]
 8015632:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8015634:	693b      	ldr	r3, [r7, #16]
 8015636:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8015638:	8b7a      	ldrh	r2, [r7, #26]
 801563a:	89fb      	ldrh	r3, [r7, #14]
 801563c:	1ad3      	subs	r3, r2, r3
 801563e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8015640:	2300      	movs	r3, #0
 8015642:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8015644:	8b7b      	ldrh	r3, [r7, #26]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d19e      	bne.n	8015588 <pbuf_alloc+0x50>
      break;
 801564a:	e055      	b.n	80156f8 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801564c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801564e:	3303      	adds	r3, #3
 8015650:	b29b      	uxth	r3, r3
 8015652:	f023 0303 	bic.w	r3, r3, #3
 8015656:	b29a      	uxth	r2, r3
 8015658:	88bb      	ldrh	r3, [r7, #4]
 801565a:	3303      	adds	r3, #3
 801565c:	b29b      	uxth	r3, r3
 801565e:	f023 0303 	bic.w	r3, r3, #3
 8015662:	b29b      	uxth	r3, r3
 8015664:	4413      	add	r3, r2
 8015666:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8015668:	8b3b      	ldrh	r3, [r7, #24]
 801566a:	3310      	adds	r3, #16
 801566c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801566e:	8b3a      	ldrh	r2, [r7, #24]
 8015670:	88bb      	ldrh	r3, [r7, #4]
 8015672:	3303      	adds	r3, #3
 8015674:	f023 0303 	bic.w	r3, r3, #3
 8015678:	429a      	cmp	r2, r3
 801567a:	d306      	bcc.n	801568a <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801567c:	8afa      	ldrh	r2, [r7, #22]
 801567e:	88bb      	ldrh	r3, [r7, #4]
 8015680:	3303      	adds	r3, #3
 8015682:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015686:	429a      	cmp	r2, r3
 8015688:	d201      	bcs.n	801568e <pbuf_alloc+0x156>
        return NULL;
 801568a:	2300      	movs	r3, #0
 801568c:	e035      	b.n	80156fa <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801568e:	8afb      	ldrh	r3, [r7, #22]
 8015690:	4618      	mov	r0, r3
 8015692:	f7ff f9bd 	bl	8014a10 <mem_malloc>
 8015696:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8015698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801569a:	2b00      	cmp	r3, #0
 801569c:	d101      	bne.n	80156a2 <pbuf_alloc+0x16a>
        return NULL;
 801569e:	2300      	movs	r3, #0
 80156a0:	e02b      	b.n	80156fa <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80156a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80156a4:	3310      	adds	r3, #16
 80156a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156a8:	4413      	add	r3, r2
 80156aa:	3303      	adds	r3, #3
 80156ac:	f023 0303 	bic.w	r3, r3, #3
 80156b0:	4618      	mov	r0, r3
 80156b2:	88b9      	ldrh	r1, [r7, #4]
 80156b4:	88ba      	ldrh	r2, [r7, #4]
 80156b6:	2300      	movs	r3, #0
 80156b8:	9301      	str	r3, [sp, #4]
 80156ba:	887b      	ldrh	r3, [r7, #2]
 80156bc:	9300      	str	r3, [sp, #0]
 80156be:	460b      	mov	r3, r1
 80156c0:	4601      	mov	r1, r0
 80156c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80156c4:	f7ff ff0e 	bl	80154e4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80156c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ca:	685b      	ldr	r3, [r3, #4]
 80156cc:	f003 0303 	and.w	r3, r3, #3
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d010      	beq.n	80156f6 <pbuf_alloc+0x1be>
 80156d4:	4b0b      	ldr	r3, [pc, #44]	; (8015704 <pbuf_alloc+0x1cc>)
 80156d6:	f240 1223 	movw	r2, #291	; 0x123
 80156da:	490e      	ldr	r1, [pc, #56]	; (8015714 <pbuf_alloc+0x1dc>)
 80156dc:	480b      	ldr	r0, [pc, #44]	; (801570c <pbuf_alloc+0x1d4>)
 80156de:	f009 fc51 	bl	801ef84 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80156e2:	e008      	b.n	80156f6 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80156e4:	4b07      	ldr	r3, [pc, #28]	; (8015704 <pbuf_alloc+0x1cc>)
 80156e6:	f240 1227 	movw	r2, #295	; 0x127
 80156ea:	490b      	ldr	r1, [pc, #44]	; (8015718 <pbuf_alloc+0x1e0>)
 80156ec:	4807      	ldr	r0, [pc, #28]	; (801570c <pbuf_alloc+0x1d4>)
 80156ee:	f009 fc49 	bl	801ef84 <iprintf>
      return NULL;
 80156f2:	2300      	movs	r3, #0
 80156f4:	e001      	b.n	80156fa <pbuf_alloc+0x1c2>
      break;
 80156f6:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80156f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80156fa:	4618      	mov	r0, r3
 80156fc:	3728      	adds	r7, #40	; 0x28
 80156fe:	46bd      	mov	sp, r7
 8015700:	bd80      	pop	{r7, pc}
 8015702:	bf00      	nop
 8015704:	0802077c 	.word	0x0802077c
 8015708:	080207ac 	.word	0x080207ac
 801570c:	080207dc 	.word	0x080207dc
 8015710:	08020804 	.word	0x08020804
 8015714:	08020838 	.word	0x08020838
 8015718:	08020864 	.word	0x08020864

0801571c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801571c:	b580      	push	{r7, lr}
 801571e:	b086      	sub	sp, #24
 8015720:	af02      	add	r7, sp, #8
 8015722:	6078      	str	r0, [r7, #4]
 8015724:	460b      	mov	r3, r1
 8015726:	807b      	strh	r3, [r7, #2]
 8015728:	4613      	mov	r3, r2
 801572a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801572c:	883b      	ldrh	r3, [r7, #0]
 801572e:	2b41      	cmp	r3, #65	; 0x41
 8015730:	d009      	beq.n	8015746 <pbuf_alloc_reference+0x2a>
 8015732:	883b      	ldrh	r3, [r7, #0]
 8015734:	2b01      	cmp	r3, #1
 8015736:	d006      	beq.n	8015746 <pbuf_alloc_reference+0x2a>
 8015738:	4b0f      	ldr	r3, [pc, #60]	; (8015778 <pbuf_alloc_reference+0x5c>)
 801573a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801573e:	490f      	ldr	r1, [pc, #60]	; (801577c <pbuf_alloc_reference+0x60>)
 8015740:	480f      	ldr	r0, [pc, #60]	; (8015780 <pbuf_alloc_reference+0x64>)
 8015742:	f009 fc1f 	bl	801ef84 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8015746:	200b      	movs	r0, #11
 8015748:	f7ff fae4 	bl	8014d14 <memp_malloc>
 801574c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d101      	bne.n	8015758 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8015754:	2300      	movs	r3, #0
 8015756:	e00b      	b.n	8015770 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8015758:	8879      	ldrh	r1, [r7, #2]
 801575a:	887a      	ldrh	r2, [r7, #2]
 801575c:	2300      	movs	r3, #0
 801575e:	9301      	str	r3, [sp, #4]
 8015760:	883b      	ldrh	r3, [r7, #0]
 8015762:	9300      	str	r3, [sp, #0]
 8015764:	460b      	mov	r3, r1
 8015766:	6879      	ldr	r1, [r7, #4]
 8015768:	68f8      	ldr	r0, [r7, #12]
 801576a:	f7ff febb 	bl	80154e4 <pbuf_init_alloced_pbuf>
  return p;
 801576e:	68fb      	ldr	r3, [r7, #12]
}
 8015770:	4618      	mov	r0, r3
 8015772:	3710      	adds	r7, #16
 8015774:	46bd      	mov	sp, r7
 8015776:	bd80      	pop	{r7, pc}
 8015778:	0802077c 	.word	0x0802077c
 801577c:	08020880 	.word	0x08020880
 8015780:	080207dc 	.word	0x080207dc

08015784 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8015784:	b580      	push	{r7, lr}
 8015786:	b088      	sub	sp, #32
 8015788:	af02      	add	r7, sp, #8
 801578a:	607b      	str	r3, [r7, #4]
 801578c:	4603      	mov	r3, r0
 801578e:	73fb      	strb	r3, [r7, #15]
 8015790:	460b      	mov	r3, r1
 8015792:	81bb      	strh	r3, [r7, #12]
 8015794:	4613      	mov	r3, r2
 8015796:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8015798:	7bfb      	ldrb	r3, [r7, #15]
 801579a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801579c:	8a7b      	ldrh	r3, [r7, #18]
 801579e:	3303      	adds	r3, #3
 80157a0:	f023 0203 	bic.w	r2, r3, #3
 80157a4:	89bb      	ldrh	r3, [r7, #12]
 80157a6:	441a      	add	r2, r3
 80157a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80157aa:	429a      	cmp	r2, r3
 80157ac:	d901      	bls.n	80157b2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80157ae:	2300      	movs	r3, #0
 80157b0:	e018      	b.n	80157e4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80157b2:	6a3b      	ldr	r3, [r7, #32]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d007      	beq.n	80157c8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80157b8:	8a7b      	ldrh	r3, [r7, #18]
 80157ba:	3303      	adds	r3, #3
 80157bc:	f023 0303 	bic.w	r3, r3, #3
 80157c0:	6a3a      	ldr	r2, [r7, #32]
 80157c2:	4413      	add	r3, r2
 80157c4:	617b      	str	r3, [r7, #20]
 80157c6:	e001      	b.n	80157cc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80157c8:	2300      	movs	r3, #0
 80157ca:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80157cc:	6878      	ldr	r0, [r7, #4]
 80157ce:	89b9      	ldrh	r1, [r7, #12]
 80157d0:	89ba      	ldrh	r2, [r7, #12]
 80157d2:	2302      	movs	r3, #2
 80157d4:	9301      	str	r3, [sp, #4]
 80157d6:	897b      	ldrh	r3, [r7, #10]
 80157d8:	9300      	str	r3, [sp, #0]
 80157da:	460b      	mov	r3, r1
 80157dc:	6979      	ldr	r1, [r7, #20]
 80157de:	f7ff fe81 	bl	80154e4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80157e2:	687b      	ldr	r3, [r7, #4]
}
 80157e4:	4618      	mov	r0, r3
 80157e6:	3718      	adds	r7, #24
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}

080157ec <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b084      	sub	sp, #16
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
 80157f4:	460b      	mov	r3, r1
 80157f6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d106      	bne.n	801580c <pbuf_realloc+0x20>
 80157fe:	4b3a      	ldr	r3, [pc, #232]	; (80158e8 <pbuf_realloc+0xfc>)
 8015800:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8015804:	4939      	ldr	r1, [pc, #228]	; (80158ec <pbuf_realloc+0x100>)
 8015806:	483a      	ldr	r0, [pc, #232]	; (80158f0 <pbuf_realloc+0x104>)
 8015808:	f009 fbbc 	bl	801ef84 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	891b      	ldrh	r3, [r3, #8]
 8015810:	887a      	ldrh	r2, [r7, #2]
 8015812:	429a      	cmp	r2, r3
 8015814:	d264      	bcs.n	80158e0 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	891a      	ldrh	r2, [r3, #8]
 801581a:	887b      	ldrh	r3, [r7, #2]
 801581c:	1ad3      	subs	r3, r2, r3
 801581e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8015820:	887b      	ldrh	r3, [r7, #2]
 8015822:	817b      	strh	r3, [r7, #10]
  q = p;
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8015828:	e018      	b.n	801585c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	895b      	ldrh	r3, [r3, #10]
 801582e:	897a      	ldrh	r2, [r7, #10]
 8015830:	1ad3      	subs	r3, r2, r3
 8015832:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	891a      	ldrh	r2, [r3, #8]
 8015838:	893b      	ldrh	r3, [r7, #8]
 801583a:	1ad3      	subs	r3, r2, r3
 801583c:	b29a      	uxth	r2, r3
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d106      	bne.n	801585c <pbuf_realloc+0x70>
 801584e:	4b26      	ldr	r3, [pc, #152]	; (80158e8 <pbuf_realloc+0xfc>)
 8015850:	f240 12af 	movw	r2, #431	; 0x1af
 8015854:	4927      	ldr	r1, [pc, #156]	; (80158f4 <pbuf_realloc+0x108>)
 8015856:	4826      	ldr	r0, [pc, #152]	; (80158f0 <pbuf_realloc+0x104>)
 8015858:	f009 fb94 	bl	801ef84 <iprintf>
  while (rem_len > q->len) {
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	895b      	ldrh	r3, [r3, #10]
 8015860:	897a      	ldrh	r2, [r7, #10]
 8015862:	429a      	cmp	r2, r3
 8015864:	d8e1      	bhi.n	801582a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	7b1b      	ldrb	r3, [r3, #12]
 801586a:	f003 030f 	and.w	r3, r3, #15
 801586e:	2b00      	cmp	r3, #0
 8015870:	d122      	bne.n	80158b8 <pbuf_realloc+0xcc>
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	895b      	ldrh	r3, [r3, #10]
 8015876:	897a      	ldrh	r2, [r7, #10]
 8015878:	429a      	cmp	r2, r3
 801587a:	d01d      	beq.n	80158b8 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	7b5b      	ldrb	r3, [r3, #13]
 8015880:	f003 0302 	and.w	r3, r3, #2
 8015884:	2b00      	cmp	r3, #0
 8015886:	d117      	bne.n	80158b8 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	685b      	ldr	r3, [r3, #4]
 801588c:	461a      	mov	r2, r3
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	1ad3      	subs	r3, r2, r3
 8015892:	b29a      	uxth	r2, r3
 8015894:	897b      	ldrh	r3, [r7, #10]
 8015896:	4413      	add	r3, r2
 8015898:	b29b      	uxth	r3, r3
 801589a:	4619      	mov	r1, r3
 801589c:	68f8      	ldr	r0, [r7, #12]
 801589e:	f7fe ffad 	bl	80147fc <mem_trim>
 80158a2:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d106      	bne.n	80158b8 <pbuf_realloc+0xcc>
 80158aa:	4b0f      	ldr	r3, [pc, #60]	; (80158e8 <pbuf_realloc+0xfc>)
 80158ac:	f240 12bd 	movw	r2, #445	; 0x1bd
 80158b0:	4911      	ldr	r1, [pc, #68]	; (80158f8 <pbuf_realloc+0x10c>)
 80158b2:	480f      	ldr	r0, [pc, #60]	; (80158f0 <pbuf_realloc+0x104>)
 80158b4:	f009 fb66 	bl	801ef84 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	897a      	ldrh	r2, [r7, #10]
 80158bc:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	895a      	ldrh	r2, [r3, #10]
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d004      	beq.n	80158d8 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	4618      	mov	r0, r3
 80158d4:	f000 f910 	bl	8015af8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	2200      	movs	r2, #0
 80158dc:	601a      	str	r2, [r3, #0]
 80158de:	e000      	b.n	80158e2 <pbuf_realloc+0xf6>
    return;
 80158e0:	bf00      	nop

}
 80158e2:	3710      	adds	r7, #16
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}
 80158e8:	0802077c 	.word	0x0802077c
 80158ec:	08020894 	.word	0x08020894
 80158f0:	080207dc 	.word	0x080207dc
 80158f4:	080208ac 	.word	0x080208ac
 80158f8:	080208c4 	.word	0x080208c4

080158fc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b086      	sub	sp, #24
 8015900:	af00      	add	r7, sp, #0
 8015902:	60f8      	str	r0, [r7, #12]
 8015904:	60b9      	str	r1, [r7, #8]
 8015906:	4613      	mov	r3, r2
 8015908:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d106      	bne.n	801591e <pbuf_add_header_impl+0x22>
 8015910:	4b2b      	ldr	r3, [pc, #172]	; (80159c0 <pbuf_add_header_impl+0xc4>)
 8015912:	f240 12df 	movw	r2, #479	; 0x1df
 8015916:	492b      	ldr	r1, [pc, #172]	; (80159c4 <pbuf_add_header_impl+0xc8>)
 8015918:	482b      	ldr	r0, [pc, #172]	; (80159c8 <pbuf_add_header_impl+0xcc>)
 801591a:	f009 fb33 	bl	801ef84 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d003      	beq.n	801592c <pbuf_add_header_impl+0x30>
 8015924:	68bb      	ldr	r3, [r7, #8]
 8015926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801592a:	d301      	bcc.n	8015930 <pbuf_add_header_impl+0x34>
    return 1;
 801592c:	2301      	movs	r3, #1
 801592e:	e043      	b.n	80159b8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8015930:	68bb      	ldr	r3, [r7, #8]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d101      	bne.n	801593a <pbuf_add_header_impl+0x3e>
    return 0;
 8015936:	2300      	movs	r3, #0
 8015938:	e03e      	b.n	80159b8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801593a:	68bb      	ldr	r3, [r7, #8]
 801593c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	891a      	ldrh	r2, [r3, #8]
 8015942:	8a7b      	ldrh	r3, [r7, #18]
 8015944:	4413      	add	r3, r2
 8015946:	b29b      	uxth	r3, r3
 8015948:	8a7a      	ldrh	r2, [r7, #18]
 801594a:	429a      	cmp	r2, r3
 801594c:	d901      	bls.n	8015952 <pbuf_add_header_impl+0x56>
    return 1;
 801594e:	2301      	movs	r3, #1
 8015950:	e032      	b.n	80159b8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	7b1b      	ldrb	r3, [r3, #12]
 8015956:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8015958:	8a3b      	ldrh	r3, [r7, #16]
 801595a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801595e:	2b00      	cmp	r3, #0
 8015960:	d00c      	beq.n	801597c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	685a      	ldr	r2, [r3, #4]
 8015966:	68bb      	ldr	r3, [r7, #8]
 8015968:	425b      	negs	r3, r3
 801596a:	4413      	add	r3, r2
 801596c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	3310      	adds	r3, #16
 8015972:	697a      	ldr	r2, [r7, #20]
 8015974:	429a      	cmp	r2, r3
 8015976:	d20d      	bcs.n	8015994 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8015978:	2301      	movs	r3, #1
 801597a:	e01d      	b.n	80159b8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801597c:	79fb      	ldrb	r3, [r7, #7]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d006      	beq.n	8015990 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	685a      	ldr	r2, [r3, #4]
 8015986:	68bb      	ldr	r3, [r7, #8]
 8015988:	425b      	negs	r3, r3
 801598a:	4413      	add	r3, r2
 801598c:	617b      	str	r3, [r7, #20]
 801598e:	e001      	b.n	8015994 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8015990:	2301      	movs	r3, #1
 8015992:	e011      	b.n	80159b8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	697a      	ldr	r2, [r7, #20]
 8015998:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	895a      	ldrh	r2, [r3, #10]
 801599e:	8a7b      	ldrh	r3, [r7, #18]
 80159a0:	4413      	add	r3, r2
 80159a2:	b29a      	uxth	r2, r3
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	891a      	ldrh	r2, [r3, #8]
 80159ac:	8a7b      	ldrh	r3, [r7, #18]
 80159ae:	4413      	add	r3, r2
 80159b0:	b29a      	uxth	r2, r3
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	811a      	strh	r2, [r3, #8]


  return 0;
 80159b6:	2300      	movs	r3, #0
}
 80159b8:	4618      	mov	r0, r3
 80159ba:	3718      	adds	r7, #24
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}
 80159c0:	0802077c 	.word	0x0802077c
 80159c4:	080208e0 	.word	0x080208e0
 80159c8:	080207dc 	.word	0x080207dc

080159cc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b082      	sub	sp, #8
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
 80159d4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80159d6:	2200      	movs	r2, #0
 80159d8:	6839      	ldr	r1, [r7, #0]
 80159da:	6878      	ldr	r0, [r7, #4]
 80159dc:	f7ff ff8e 	bl	80158fc <pbuf_add_header_impl>
 80159e0:	4603      	mov	r3, r0
}
 80159e2:	4618      	mov	r0, r3
 80159e4:	3708      	adds	r7, #8
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bd80      	pop	{r7, pc}
	...

080159ec <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b084      	sub	sp, #16
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
 80159f4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d106      	bne.n	8015a0a <pbuf_remove_header+0x1e>
 80159fc:	4b20      	ldr	r3, [pc, #128]	; (8015a80 <pbuf_remove_header+0x94>)
 80159fe:	f240 224b 	movw	r2, #587	; 0x24b
 8015a02:	4920      	ldr	r1, [pc, #128]	; (8015a84 <pbuf_remove_header+0x98>)
 8015a04:	4820      	ldr	r0, [pc, #128]	; (8015a88 <pbuf_remove_header+0x9c>)
 8015a06:	f009 fabd 	bl	801ef84 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d003      	beq.n	8015a18 <pbuf_remove_header+0x2c>
 8015a10:	683b      	ldr	r3, [r7, #0]
 8015a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015a16:	d301      	bcc.n	8015a1c <pbuf_remove_header+0x30>
    return 1;
 8015a18:	2301      	movs	r3, #1
 8015a1a:	e02c      	b.n	8015a76 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8015a1c:	683b      	ldr	r3, [r7, #0]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d101      	bne.n	8015a26 <pbuf_remove_header+0x3a>
    return 0;
 8015a22:	2300      	movs	r3, #0
 8015a24:	e027      	b.n	8015a76 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8015a26:	683b      	ldr	r3, [r7, #0]
 8015a28:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	895b      	ldrh	r3, [r3, #10]
 8015a2e:	89fa      	ldrh	r2, [r7, #14]
 8015a30:	429a      	cmp	r2, r3
 8015a32:	d908      	bls.n	8015a46 <pbuf_remove_header+0x5a>
 8015a34:	4b12      	ldr	r3, [pc, #72]	; (8015a80 <pbuf_remove_header+0x94>)
 8015a36:	f240 2255 	movw	r2, #597	; 0x255
 8015a3a:	4914      	ldr	r1, [pc, #80]	; (8015a8c <pbuf_remove_header+0xa0>)
 8015a3c:	4812      	ldr	r0, [pc, #72]	; (8015a88 <pbuf_remove_header+0x9c>)
 8015a3e:	f009 faa1 	bl	801ef84 <iprintf>
 8015a42:	2301      	movs	r3, #1
 8015a44:	e017      	b.n	8015a76 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	685b      	ldr	r3, [r3, #4]
 8015a4a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	685a      	ldr	r2, [r3, #4]
 8015a50:	683b      	ldr	r3, [r7, #0]
 8015a52:	441a      	add	r2, r3
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	895a      	ldrh	r2, [r3, #10]
 8015a5c:	89fb      	ldrh	r3, [r7, #14]
 8015a5e:	1ad3      	subs	r3, r2, r3
 8015a60:	b29a      	uxth	r2, r3
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	891a      	ldrh	r2, [r3, #8]
 8015a6a:	89fb      	ldrh	r3, [r7, #14]
 8015a6c:	1ad3      	subs	r3, r2, r3
 8015a6e:	b29a      	uxth	r2, r3
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8015a74:	2300      	movs	r3, #0
}
 8015a76:	4618      	mov	r0, r3
 8015a78:	3710      	adds	r7, #16
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	bd80      	pop	{r7, pc}
 8015a7e:	bf00      	nop
 8015a80:	0802077c 	.word	0x0802077c
 8015a84:	080208e0 	.word	0x080208e0
 8015a88:	080207dc 	.word	0x080207dc
 8015a8c:	080208ec 	.word	0x080208ec

08015a90 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b082      	sub	sp, #8
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
 8015a98:	460b      	mov	r3, r1
 8015a9a:	807b      	strh	r3, [r7, #2]
 8015a9c:	4613      	mov	r3, r2
 8015a9e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8015aa0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	da08      	bge.n	8015aba <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8015aa8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015aac:	425b      	negs	r3, r3
 8015aae:	4619      	mov	r1, r3
 8015ab0:	6878      	ldr	r0, [r7, #4]
 8015ab2:	f7ff ff9b 	bl	80159ec <pbuf_remove_header>
 8015ab6:	4603      	mov	r3, r0
 8015ab8:	e007      	b.n	8015aca <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8015aba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015abe:	787a      	ldrb	r2, [r7, #1]
 8015ac0:	4619      	mov	r1, r3
 8015ac2:	6878      	ldr	r0, [r7, #4]
 8015ac4:	f7ff ff1a 	bl	80158fc <pbuf_add_header_impl>
 8015ac8:	4603      	mov	r3, r0
  }
}
 8015aca:	4618      	mov	r0, r3
 8015acc:	3708      	adds	r7, #8
 8015ace:	46bd      	mov	sp, r7
 8015ad0:	bd80      	pop	{r7, pc}

08015ad2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8015ad2:	b580      	push	{r7, lr}
 8015ad4:	b082      	sub	sp, #8
 8015ad6:	af00      	add	r7, sp, #0
 8015ad8:	6078      	str	r0, [r7, #4]
 8015ada:	460b      	mov	r3, r1
 8015adc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8015ade:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015ae2:	2201      	movs	r2, #1
 8015ae4:	4619      	mov	r1, r3
 8015ae6:	6878      	ldr	r0, [r7, #4]
 8015ae8:	f7ff ffd2 	bl	8015a90 <pbuf_header_impl>
 8015aec:	4603      	mov	r3, r0
}
 8015aee:	4618      	mov	r0, r3
 8015af0:	3708      	adds	r7, #8
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bd80      	pop	{r7, pc}
	...

08015af8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b088      	sub	sp, #32
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d10b      	bne.n	8015b1e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d106      	bne.n	8015b1a <pbuf_free+0x22>
 8015b0c:	4b3b      	ldr	r3, [pc, #236]	; (8015bfc <pbuf_free+0x104>)
 8015b0e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8015b12:	493b      	ldr	r1, [pc, #236]	; (8015c00 <pbuf_free+0x108>)
 8015b14:	483b      	ldr	r0, [pc, #236]	; (8015c04 <pbuf_free+0x10c>)
 8015b16:	f009 fa35 	bl	801ef84 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	e069      	b.n	8015bf2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8015b1e:	2300      	movs	r3, #0
 8015b20:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8015b22:	e062      	b.n	8015bea <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8015b24:	f009 f9ca 	bl	801eebc <sys_arch_protect>
 8015b28:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	7b9b      	ldrb	r3, [r3, #14]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d106      	bne.n	8015b40 <pbuf_free+0x48>
 8015b32:	4b32      	ldr	r3, [pc, #200]	; (8015bfc <pbuf_free+0x104>)
 8015b34:	f240 22f1 	movw	r2, #753	; 0x2f1
 8015b38:	4933      	ldr	r1, [pc, #204]	; (8015c08 <pbuf_free+0x110>)
 8015b3a:	4832      	ldr	r0, [pc, #200]	; (8015c04 <pbuf_free+0x10c>)
 8015b3c:	f009 fa22 	bl	801ef84 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	7b9b      	ldrb	r3, [r3, #14]
 8015b44:	3b01      	subs	r3, #1
 8015b46:	b2da      	uxtb	r2, r3
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	739a      	strb	r2, [r3, #14]
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	7b9b      	ldrb	r3, [r3, #14]
 8015b50:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8015b52:	69b8      	ldr	r0, [r7, #24]
 8015b54:	f009 f9c0 	bl	801eed8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8015b58:	7dfb      	ldrb	r3, [r7, #23]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d143      	bne.n	8015be6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	7b1b      	ldrb	r3, [r3, #12]
 8015b68:	f003 030f 	and.w	r3, r3, #15
 8015b6c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	7b5b      	ldrb	r3, [r3, #13]
 8015b72:	f003 0302 	and.w	r3, r3, #2
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d011      	beq.n	8015b9e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8015b7e:	68bb      	ldr	r3, [r7, #8]
 8015b80:	691b      	ldr	r3, [r3, #16]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d106      	bne.n	8015b94 <pbuf_free+0x9c>
 8015b86:	4b1d      	ldr	r3, [pc, #116]	; (8015bfc <pbuf_free+0x104>)
 8015b88:	f240 22ff 	movw	r2, #767	; 0x2ff
 8015b8c:	491f      	ldr	r1, [pc, #124]	; (8015c0c <pbuf_free+0x114>)
 8015b8e:	481d      	ldr	r0, [pc, #116]	; (8015c04 <pbuf_free+0x10c>)
 8015b90:	f009 f9f8 	bl	801ef84 <iprintf>
        pc->custom_free_function(p);
 8015b94:	68bb      	ldr	r3, [r7, #8]
 8015b96:	691b      	ldr	r3, [r3, #16]
 8015b98:	6878      	ldr	r0, [r7, #4]
 8015b9a:	4798      	blx	r3
 8015b9c:	e01d      	b.n	8015bda <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8015b9e:	7bfb      	ldrb	r3, [r7, #15]
 8015ba0:	2b02      	cmp	r3, #2
 8015ba2:	d104      	bne.n	8015bae <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8015ba4:	6879      	ldr	r1, [r7, #4]
 8015ba6:	200c      	movs	r0, #12
 8015ba8:	f7ff f906 	bl	8014db8 <memp_free>
 8015bac:	e015      	b.n	8015bda <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8015bae:	7bfb      	ldrb	r3, [r7, #15]
 8015bb0:	2b01      	cmp	r3, #1
 8015bb2:	d104      	bne.n	8015bbe <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8015bb4:	6879      	ldr	r1, [r7, #4]
 8015bb6:	200b      	movs	r0, #11
 8015bb8:	f7ff f8fe 	bl	8014db8 <memp_free>
 8015bbc:	e00d      	b.n	8015bda <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8015bbe:	7bfb      	ldrb	r3, [r7, #15]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d103      	bne.n	8015bcc <pbuf_free+0xd4>
          mem_free(p);
 8015bc4:	6878      	ldr	r0, [r7, #4]
 8015bc6:	f7fe fd89 	bl	80146dc <mem_free>
 8015bca:	e006      	b.n	8015bda <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8015bcc:	4b0b      	ldr	r3, [pc, #44]	; (8015bfc <pbuf_free+0x104>)
 8015bce:	f240 320f 	movw	r2, #783	; 0x30f
 8015bd2:	490f      	ldr	r1, [pc, #60]	; (8015c10 <pbuf_free+0x118>)
 8015bd4:	480b      	ldr	r0, [pc, #44]	; (8015c04 <pbuf_free+0x10c>)
 8015bd6:	f009 f9d5 	bl	801ef84 <iprintf>
        }
      }
      count++;
 8015bda:	7ffb      	ldrb	r3, [r7, #31]
 8015bdc:	3301      	adds	r3, #1
 8015bde:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8015be0:	693b      	ldr	r3, [r7, #16]
 8015be2:	607b      	str	r3, [r7, #4]
 8015be4:	e001      	b.n	8015bea <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8015be6:	2300      	movs	r3, #0
 8015be8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d199      	bne.n	8015b24 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8015bf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	3720      	adds	r7, #32
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd80      	pop	{r7, pc}
 8015bfa:	bf00      	nop
 8015bfc:	0802077c 	.word	0x0802077c
 8015c00:	080208e0 	.word	0x080208e0
 8015c04:	080207dc 	.word	0x080207dc
 8015c08:	0802090c 	.word	0x0802090c
 8015c0c:	08020924 	.word	0x08020924
 8015c10:	08020948 	.word	0x08020948

08015c14 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8015c14:	b480      	push	{r7}
 8015c16:	b085      	sub	sp, #20
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8015c20:	e005      	b.n	8015c2e <pbuf_clen+0x1a>
    ++len;
 8015c22:	89fb      	ldrh	r3, [r7, #14]
 8015c24:	3301      	adds	r3, #1
 8015c26:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d1f6      	bne.n	8015c22 <pbuf_clen+0xe>
  }
  return len;
 8015c34:	89fb      	ldrh	r3, [r7, #14]
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	3714      	adds	r7, #20
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c40:	4770      	bx	lr
	...

08015c44 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	b084      	sub	sp, #16
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d016      	beq.n	8015c80 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8015c52:	f009 f933 	bl	801eebc <sys_arch_protect>
 8015c56:	60f8      	str	r0, [r7, #12]
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	7b9b      	ldrb	r3, [r3, #14]
 8015c5c:	3301      	adds	r3, #1
 8015c5e:	b2da      	uxtb	r2, r3
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	739a      	strb	r2, [r3, #14]
 8015c64:	68f8      	ldr	r0, [r7, #12]
 8015c66:	f009 f937 	bl	801eed8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	7b9b      	ldrb	r3, [r3, #14]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d106      	bne.n	8015c80 <pbuf_ref+0x3c>
 8015c72:	4b05      	ldr	r3, [pc, #20]	; (8015c88 <pbuf_ref+0x44>)
 8015c74:	f240 3242 	movw	r2, #834	; 0x342
 8015c78:	4904      	ldr	r1, [pc, #16]	; (8015c8c <pbuf_ref+0x48>)
 8015c7a:	4805      	ldr	r0, [pc, #20]	; (8015c90 <pbuf_ref+0x4c>)
 8015c7c:	f009 f982 	bl	801ef84 <iprintf>
  }
}
 8015c80:	bf00      	nop
 8015c82:	3710      	adds	r7, #16
 8015c84:	46bd      	mov	sp, r7
 8015c86:	bd80      	pop	{r7, pc}
 8015c88:	0802077c 	.word	0x0802077c
 8015c8c:	0802095c 	.word	0x0802095c
 8015c90:	080207dc 	.word	0x080207dc

08015c94 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b084      	sub	sp, #16
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]
 8015c9c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d002      	beq.n	8015caa <pbuf_cat+0x16>
 8015ca4:	683b      	ldr	r3, [r7, #0]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d107      	bne.n	8015cba <pbuf_cat+0x26>
 8015caa:	4b20      	ldr	r3, [pc, #128]	; (8015d2c <pbuf_cat+0x98>)
 8015cac:	f240 325a 	movw	r2, #858	; 0x35a
 8015cb0:	491f      	ldr	r1, [pc, #124]	; (8015d30 <pbuf_cat+0x9c>)
 8015cb2:	4820      	ldr	r0, [pc, #128]	; (8015d34 <pbuf_cat+0xa0>)
 8015cb4:	f009 f966 	bl	801ef84 <iprintf>
 8015cb8:	e034      	b.n	8015d24 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	60fb      	str	r3, [r7, #12]
 8015cbe:	e00a      	b.n	8015cd6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	891a      	ldrh	r2, [r3, #8]
 8015cc4:	683b      	ldr	r3, [r7, #0]
 8015cc6:	891b      	ldrh	r3, [r3, #8]
 8015cc8:	4413      	add	r3, r2
 8015cca:	b29a      	uxth	r2, r3
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	60fb      	str	r3, [r7, #12]
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d1f0      	bne.n	8015cc0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	891a      	ldrh	r2, [r3, #8]
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	895b      	ldrh	r3, [r3, #10]
 8015ce6:	429a      	cmp	r2, r3
 8015ce8:	d006      	beq.n	8015cf8 <pbuf_cat+0x64>
 8015cea:	4b10      	ldr	r3, [pc, #64]	; (8015d2c <pbuf_cat+0x98>)
 8015cec:	f240 3262 	movw	r2, #866	; 0x362
 8015cf0:	4911      	ldr	r1, [pc, #68]	; (8015d38 <pbuf_cat+0xa4>)
 8015cf2:	4810      	ldr	r0, [pc, #64]	; (8015d34 <pbuf_cat+0xa0>)
 8015cf4:	f009 f946 	bl	801ef84 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d006      	beq.n	8015d0e <pbuf_cat+0x7a>
 8015d00:	4b0a      	ldr	r3, [pc, #40]	; (8015d2c <pbuf_cat+0x98>)
 8015d02:	f240 3263 	movw	r2, #867	; 0x363
 8015d06:	490d      	ldr	r1, [pc, #52]	; (8015d3c <pbuf_cat+0xa8>)
 8015d08:	480a      	ldr	r0, [pc, #40]	; (8015d34 <pbuf_cat+0xa0>)
 8015d0a:	f009 f93b 	bl	801ef84 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	891a      	ldrh	r2, [r3, #8]
 8015d12:	683b      	ldr	r3, [r7, #0]
 8015d14:	891b      	ldrh	r3, [r3, #8]
 8015d16:	4413      	add	r3, r2
 8015d18:	b29a      	uxth	r2, r3
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	683a      	ldr	r2, [r7, #0]
 8015d22:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8015d24:	3710      	adds	r7, #16
 8015d26:	46bd      	mov	sp, r7
 8015d28:	bd80      	pop	{r7, pc}
 8015d2a:	bf00      	nop
 8015d2c:	0802077c 	.word	0x0802077c
 8015d30:	08020970 	.word	0x08020970
 8015d34:	080207dc 	.word	0x080207dc
 8015d38:	080209a8 	.word	0x080209a8
 8015d3c:	080209d8 	.word	0x080209d8

08015d40 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b086      	sub	sp, #24
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	6078      	str	r0, [r7, #4]
 8015d48:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	617b      	str	r3, [r7, #20]
 8015d4e:	2300      	movs	r3, #0
 8015d50:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d008      	beq.n	8015d6a <pbuf_copy+0x2a>
 8015d58:	683b      	ldr	r3, [r7, #0]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d005      	beq.n	8015d6a <pbuf_copy+0x2a>
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	891a      	ldrh	r2, [r3, #8]
 8015d62:	683b      	ldr	r3, [r7, #0]
 8015d64:	891b      	ldrh	r3, [r3, #8]
 8015d66:	429a      	cmp	r2, r3
 8015d68:	d209      	bcs.n	8015d7e <pbuf_copy+0x3e>
 8015d6a:	4b57      	ldr	r3, [pc, #348]	; (8015ec8 <pbuf_copy+0x188>)
 8015d6c:	f240 32ca 	movw	r2, #970	; 0x3ca
 8015d70:	4956      	ldr	r1, [pc, #344]	; (8015ecc <pbuf_copy+0x18c>)
 8015d72:	4857      	ldr	r0, [pc, #348]	; (8015ed0 <pbuf_copy+0x190>)
 8015d74:	f009 f906 	bl	801ef84 <iprintf>
 8015d78:	f06f 030f 	mvn.w	r3, #15
 8015d7c:	e09f      	b.n	8015ebe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	895b      	ldrh	r3, [r3, #10]
 8015d82:	461a      	mov	r2, r3
 8015d84:	697b      	ldr	r3, [r7, #20]
 8015d86:	1ad2      	subs	r2, r2, r3
 8015d88:	683b      	ldr	r3, [r7, #0]
 8015d8a:	895b      	ldrh	r3, [r3, #10]
 8015d8c:	4619      	mov	r1, r3
 8015d8e:	693b      	ldr	r3, [r7, #16]
 8015d90:	1acb      	subs	r3, r1, r3
 8015d92:	429a      	cmp	r2, r3
 8015d94:	d306      	bcc.n	8015da4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8015d96:	683b      	ldr	r3, [r7, #0]
 8015d98:	895b      	ldrh	r3, [r3, #10]
 8015d9a:	461a      	mov	r2, r3
 8015d9c:	693b      	ldr	r3, [r7, #16]
 8015d9e:	1ad3      	subs	r3, r2, r3
 8015da0:	60fb      	str	r3, [r7, #12]
 8015da2:	e005      	b.n	8015db0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	895b      	ldrh	r3, [r3, #10]
 8015da8:	461a      	mov	r2, r3
 8015daa:	697b      	ldr	r3, [r7, #20]
 8015dac:	1ad3      	subs	r3, r2, r3
 8015dae:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	685a      	ldr	r2, [r3, #4]
 8015db4:	697b      	ldr	r3, [r7, #20]
 8015db6:	18d0      	adds	r0, r2, r3
 8015db8:	683b      	ldr	r3, [r7, #0]
 8015dba:	685a      	ldr	r2, [r3, #4]
 8015dbc:	693b      	ldr	r3, [r7, #16]
 8015dbe:	4413      	add	r3, r2
 8015dc0:	68fa      	ldr	r2, [r7, #12]
 8015dc2:	4619      	mov	r1, r3
 8015dc4:	f009 f8cb 	bl	801ef5e <memcpy>
    offset_to += len;
 8015dc8:	697a      	ldr	r2, [r7, #20]
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	4413      	add	r3, r2
 8015dce:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8015dd0:	693a      	ldr	r2, [r7, #16]
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	4413      	add	r3, r2
 8015dd6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	895b      	ldrh	r3, [r3, #10]
 8015ddc:	461a      	mov	r2, r3
 8015dde:	697b      	ldr	r3, [r7, #20]
 8015de0:	4293      	cmp	r3, r2
 8015de2:	d906      	bls.n	8015df2 <pbuf_copy+0xb2>
 8015de4:	4b38      	ldr	r3, [pc, #224]	; (8015ec8 <pbuf_copy+0x188>)
 8015de6:	f240 32d9 	movw	r2, #985	; 0x3d9
 8015dea:	493a      	ldr	r1, [pc, #232]	; (8015ed4 <pbuf_copy+0x194>)
 8015dec:	4838      	ldr	r0, [pc, #224]	; (8015ed0 <pbuf_copy+0x190>)
 8015dee:	f009 f8c9 	bl	801ef84 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8015df2:	683b      	ldr	r3, [r7, #0]
 8015df4:	895b      	ldrh	r3, [r3, #10]
 8015df6:	461a      	mov	r2, r3
 8015df8:	693b      	ldr	r3, [r7, #16]
 8015dfa:	4293      	cmp	r3, r2
 8015dfc:	d906      	bls.n	8015e0c <pbuf_copy+0xcc>
 8015dfe:	4b32      	ldr	r3, [pc, #200]	; (8015ec8 <pbuf_copy+0x188>)
 8015e00:	f240 32da 	movw	r2, #986	; 0x3da
 8015e04:	4934      	ldr	r1, [pc, #208]	; (8015ed8 <pbuf_copy+0x198>)
 8015e06:	4832      	ldr	r0, [pc, #200]	; (8015ed0 <pbuf_copy+0x190>)
 8015e08:	f009 f8bc 	bl	801ef84 <iprintf>
    if (offset_from >= p_from->len) {
 8015e0c:	683b      	ldr	r3, [r7, #0]
 8015e0e:	895b      	ldrh	r3, [r3, #10]
 8015e10:	461a      	mov	r2, r3
 8015e12:	693b      	ldr	r3, [r7, #16]
 8015e14:	4293      	cmp	r3, r2
 8015e16:	d304      	bcc.n	8015e22 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8015e18:	2300      	movs	r3, #0
 8015e1a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8015e1c:	683b      	ldr	r3, [r7, #0]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	895b      	ldrh	r3, [r3, #10]
 8015e26:	461a      	mov	r2, r3
 8015e28:	697b      	ldr	r3, [r7, #20]
 8015e2a:	4293      	cmp	r3, r2
 8015e2c:	d114      	bne.n	8015e58 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8015e2e:	2300      	movs	r3, #0
 8015e30:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d10c      	bne.n	8015e58 <pbuf_copy+0x118>
 8015e3e:	683b      	ldr	r3, [r7, #0]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d009      	beq.n	8015e58 <pbuf_copy+0x118>
 8015e44:	4b20      	ldr	r3, [pc, #128]	; (8015ec8 <pbuf_copy+0x188>)
 8015e46:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8015e4a:	4924      	ldr	r1, [pc, #144]	; (8015edc <pbuf_copy+0x19c>)
 8015e4c:	4820      	ldr	r0, [pc, #128]	; (8015ed0 <pbuf_copy+0x190>)
 8015e4e:	f009 f899 	bl	801ef84 <iprintf>
 8015e52:	f06f 030f 	mvn.w	r3, #15
 8015e56:	e032      	b.n	8015ebe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8015e58:	683b      	ldr	r3, [r7, #0]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d013      	beq.n	8015e86 <pbuf_copy+0x146>
 8015e5e:	683b      	ldr	r3, [r7, #0]
 8015e60:	895a      	ldrh	r2, [r3, #10]
 8015e62:	683b      	ldr	r3, [r7, #0]
 8015e64:	891b      	ldrh	r3, [r3, #8]
 8015e66:	429a      	cmp	r2, r3
 8015e68:	d10d      	bne.n	8015e86 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8015e6a:	683b      	ldr	r3, [r7, #0]
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d009      	beq.n	8015e86 <pbuf_copy+0x146>
 8015e72:	4b15      	ldr	r3, [pc, #84]	; (8015ec8 <pbuf_copy+0x188>)
 8015e74:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8015e78:	4919      	ldr	r1, [pc, #100]	; (8015ee0 <pbuf_copy+0x1a0>)
 8015e7a:	4815      	ldr	r0, [pc, #84]	; (8015ed0 <pbuf_copy+0x190>)
 8015e7c:	f009 f882 	bl	801ef84 <iprintf>
 8015e80:	f06f 0305 	mvn.w	r3, #5
 8015e84:	e01b      	b.n	8015ebe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d013      	beq.n	8015eb4 <pbuf_copy+0x174>
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	895a      	ldrh	r2, [r3, #10]
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	891b      	ldrh	r3, [r3, #8]
 8015e94:	429a      	cmp	r2, r3
 8015e96:	d10d      	bne.n	8015eb4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d009      	beq.n	8015eb4 <pbuf_copy+0x174>
 8015ea0:	4b09      	ldr	r3, [pc, #36]	; (8015ec8 <pbuf_copy+0x188>)
 8015ea2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8015ea6:	490e      	ldr	r1, [pc, #56]	; (8015ee0 <pbuf_copy+0x1a0>)
 8015ea8:	4809      	ldr	r0, [pc, #36]	; (8015ed0 <pbuf_copy+0x190>)
 8015eaa:	f009 f86b 	bl	801ef84 <iprintf>
 8015eae:	f06f 0305 	mvn.w	r3, #5
 8015eb2:	e004      	b.n	8015ebe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8015eb4:	683b      	ldr	r3, [r7, #0]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	f47f af61 	bne.w	8015d7e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8015ebc:	2300      	movs	r3, #0
}
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	3718      	adds	r7, #24
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	bd80      	pop	{r7, pc}
 8015ec6:	bf00      	nop
 8015ec8:	0802077c 	.word	0x0802077c
 8015ecc:	08020a24 	.word	0x08020a24
 8015ed0:	080207dc 	.word	0x080207dc
 8015ed4:	08020a54 	.word	0x08020a54
 8015ed8:	08020a6c 	.word	0x08020a6c
 8015edc:	08020a88 	.word	0x08020a88
 8015ee0:	08020a98 	.word	0x08020a98

08015ee4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b088      	sub	sp, #32
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	60f8      	str	r0, [r7, #12]
 8015eec:	60b9      	str	r1, [r7, #8]
 8015eee:	4611      	mov	r1, r2
 8015ef0:	461a      	mov	r2, r3
 8015ef2:	460b      	mov	r3, r1
 8015ef4:	80fb      	strh	r3, [r7, #6]
 8015ef6:	4613      	mov	r3, r2
 8015ef8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8015efa:	2300      	movs	r3, #0
 8015efc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8015efe:	2300      	movs	r3, #0
 8015f00:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d108      	bne.n	8015f1a <pbuf_copy_partial+0x36>
 8015f08:	4b2b      	ldr	r3, [pc, #172]	; (8015fb8 <pbuf_copy_partial+0xd4>)
 8015f0a:	f240 420a 	movw	r2, #1034	; 0x40a
 8015f0e:	492b      	ldr	r1, [pc, #172]	; (8015fbc <pbuf_copy_partial+0xd8>)
 8015f10:	482b      	ldr	r0, [pc, #172]	; (8015fc0 <pbuf_copy_partial+0xdc>)
 8015f12:	f009 f837 	bl	801ef84 <iprintf>
 8015f16:	2300      	movs	r3, #0
 8015f18:	e04a      	b.n	8015fb0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8015f1a:	68bb      	ldr	r3, [r7, #8]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d108      	bne.n	8015f32 <pbuf_copy_partial+0x4e>
 8015f20:	4b25      	ldr	r3, [pc, #148]	; (8015fb8 <pbuf_copy_partial+0xd4>)
 8015f22:	f240 420b 	movw	r2, #1035	; 0x40b
 8015f26:	4927      	ldr	r1, [pc, #156]	; (8015fc4 <pbuf_copy_partial+0xe0>)
 8015f28:	4825      	ldr	r0, [pc, #148]	; (8015fc0 <pbuf_copy_partial+0xdc>)
 8015f2a:	f009 f82b 	bl	801ef84 <iprintf>
 8015f2e:	2300      	movs	r3, #0
 8015f30:	e03e      	b.n	8015fb0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	61fb      	str	r3, [r7, #28]
 8015f36:	e034      	b.n	8015fa2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8015f38:	88bb      	ldrh	r3, [r7, #4]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d00a      	beq.n	8015f54 <pbuf_copy_partial+0x70>
 8015f3e:	69fb      	ldr	r3, [r7, #28]
 8015f40:	895b      	ldrh	r3, [r3, #10]
 8015f42:	88ba      	ldrh	r2, [r7, #4]
 8015f44:	429a      	cmp	r2, r3
 8015f46:	d305      	bcc.n	8015f54 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8015f48:	69fb      	ldr	r3, [r7, #28]
 8015f4a:	895b      	ldrh	r3, [r3, #10]
 8015f4c:	88ba      	ldrh	r2, [r7, #4]
 8015f4e:	1ad3      	subs	r3, r2, r3
 8015f50:	80bb      	strh	r3, [r7, #4]
 8015f52:	e023      	b.n	8015f9c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8015f54:	69fb      	ldr	r3, [r7, #28]
 8015f56:	895a      	ldrh	r2, [r3, #10]
 8015f58:	88bb      	ldrh	r3, [r7, #4]
 8015f5a:	1ad3      	subs	r3, r2, r3
 8015f5c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8015f5e:	8b3a      	ldrh	r2, [r7, #24]
 8015f60:	88fb      	ldrh	r3, [r7, #6]
 8015f62:	429a      	cmp	r2, r3
 8015f64:	d901      	bls.n	8015f6a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8015f66:	88fb      	ldrh	r3, [r7, #6]
 8015f68:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8015f6a:	8b7b      	ldrh	r3, [r7, #26]
 8015f6c:	68ba      	ldr	r2, [r7, #8]
 8015f6e:	18d0      	adds	r0, r2, r3
 8015f70:	69fb      	ldr	r3, [r7, #28]
 8015f72:	685a      	ldr	r2, [r3, #4]
 8015f74:	88bb      	ldrh	r3, [r7, #4]
 8015f76:	4413      	add	r3, r2
 8015f78:	8b3a      	ldrh	r2, [r7, #24]
 8015f7a:	4619      	mov	r1, r3
 8015f7c:	f008 ffef 	bl	801ef5e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8015f80:	8afa      	ldrh	r2, [r7, #22]
 8015f82:	8b3b      	ldrh	r3, [r7, #24]
 8015f84:	4413      	add	r3, r2
 8015f86:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8015f88:	8b7a      	ldrh	r2, [r7, #26]
 8015f8a:	8b3b      	ldrh	r3, [r7, #24]
 8015f8c:	4413      	add	r3, r2
 8015f8e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8015f90:	88fa      	ldrh	r2, [r7, #6]
 8015f92:	8b3b      	ldrh	r3, [r7, #24]
 8015f94:	1ad3      	subs	r3, r2, r3
 8015f96:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8015f98:	2300      	movs	r3, #0
 8015f9a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015f9c:	69fb      	ldr	r3, [r7, #28]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	61fb      	str	r3, [r7, #28]
 8015fa2:	88fb      	ldrh	r3, [r7, #6]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d002      	beq.n	8015fae <pbuf_copy_partial+0xca>
 8015fa8:	69fb      	ldr	r3, [r7, #28]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d1c4      	bne.n	8015f38 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8015fae:	8afb      	ldrh	r3, [r7, #22]
}
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	3720      	adds	r7, #32
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	bd80      	pop	{r7, pc}
 8015fb8:	0802077c 	.word	0x0802077c
 8015fbc:	08020ac4 	.word	0x08020ac4
 8015fc0:	080207dc 	.word	0x080207dc
 8015fc4:	08020ae4 	.word	0x08020ae4

08015fc8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b084      	sub	sp, #16
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	4603      	mov	r3, r0
 8015fd0:	603a      	str	r2, [r7, #0]
 8015fd2:	71fb      	strb	r3, [r7, #7]
 8015fd4:	460b      	mov	r3, r1
 8015fd6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8015fd8:	683b      	ldr	r3, [r7, #0]
 8015fda:	8919      	ldrh	r1, [r3, #8]
 8015fdc:	88ba      	ldrh	r2, [r7, #4]
 8015fde:	79fb      	ldrb	r3, [r7, #7]
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	f7ff faa9 	bl	8015538 <pbuf_alloc>
 8015fe6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d101      	bne.n	8015ff2 <pbuf_clone+0x2a>
    return NULL;
 8015fee:	2300      	movs	r3, #0
 8015ff0:	e011      	b.n	8016016 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8015ff2:	6839      	ldr	r1, [r7, #0]
 8015ff4:	68f8      	ldr	r0, [r7, #12]
 8015ff6:	f7ff fea3 	bl	8015d40 <pbuf_copy>
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8015ffe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d006      	beq.n	8016014 <pbuf_clone+0x4c>
 8016006:	4b06      	ldr	r3, [pc, #24]	; (8016020 <pbuf_clone+0x58>)
 8016008:	f240 5224 	movw	r2, #1316	; 0x524
 801600c:	4905      	ldr	r1, [pc, #20]	; (8016024 <pbuf_clone+0x5c>)
 801600e:	4806      	ldr	r0, [pc, #24]	; (8016028 <pbuf_clone+0x60>)
 8016010:	f008 ffb8 	bl	801ef84 <iprintf>
  return q;
 8016014:	68fb      	ldr	r3, [r7, #12]
}
 8016016:	4618      	mov	r0, r3
 8016018:	3710      	adds	r7, #16
 801601a:	46bd      	mov	sp, r7
 801601c:	bd80      	pop	{r7, pc}
 801601e:	bf00      	nop
 8016020:	0802077c 	.word	0x0802077c
 8016024:	08020bf0 	.word	0x08020bf0
 8016028:	080207dc 	.word	0x080207dc

0801602c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801602c:	b580      	push	{r7, lr}
 801602e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016030:	f008 ffc0 	bl	801efb4 <rand>
 8016034:	4603      	mov	r3, r0
 8016036:	b29b      	uxth	r3, r3
 8016038:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801603c:	b29b      	uxth	r3, r3
 801603e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016042:	b29a      	uxth	r2, r3
 8016044:	4b01      	ldr	r3, [pc, #4]	; (801604c <tcp_init+0x20>)
 8016046:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016048:	bf00      	nop
 801604a:	bd80      	pop	{r7, pc}
 801604c:	20000050 	.word	0x20000050

08016050 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b082      	sub	sp, #8
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	7d1b      	ldrb	r3, [r3, #20]
 801605c:	2b01      	cmp	r3, #1
 801605e:	d105      	bne.n	801606c <tcp_free+0x1c>
 8016060:	4b06      	ldr	r3, [pc, #24]	; (801607c <tcp_free+0x2c>)
 8016062:	22d4      	movs	r2, #212	; 0xd4
 8016064:	4906      	ldr	r1, [pc, #24]	; (8016080 <tcp_free+0x30>)
 8016066:	4807      	ldr	r0, [pc, #28]	; (8016084 <tcp_free+0x34>)
 8016068:	f008 ff8c 	bl	801ef84 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801606c:	6879      	ldr	r1, [r7, #4]
 801606e:	2001      	movs	r0, #1
 8016070:	f7fe fea2 	bl	8014db8 <memp_free>
}
 8016074:	bf00      	nop
 8016076:	3708      	adds	r7, #8
 8016078:	46bd      	mov	sp, r7
 801607a:	bd80      	pop	{r7, pc}
 801607c:	08020c7c 	.word	0x08020c7c
 8016080:	08020cac 	.word	0x08020cac
 8016084:	08020cc0 	.word	0x08020cc0

08016088 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b082      	sub	sp, #8
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	7d1b      	ldrb	r3, [r3, #20]
 8016094:	2b01      	cmp	r3, #1
 8016096:	d105      	bne.n	80160a4 <tcp_free_listen+0x1c>
 8016098:	4b06      	ldr	r3, [pc, #24]	; (80160b4 <tcp_free_listen+0x2c>)
 801609a:	22df      	movs	r2, #223	; 0xdf
 801609c:	4906      	ldr	r1, [pc, #24]	; (80160b8 <tcp_free_listen+0x30>)
 801609e:	4807      	ldr	r0, [pc, #28]	; (80160bc <tcp_free_listen+0x34>)
 80160a0:	f008 ff70 	bl	801ef84 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80160a4:	6879      	ldr	r1, [r7, #4]
 80160a6:	2002      	movs	r0, #2
 80160a8:	f7fe fe86 	bl	8014db8 <memp_free>
}
 80160ac:	bf00      	nop
 80160ae:	3708      	adds	r7, #8
 80160b0:	46bd      	mov	sp, r7
 80160b2:	bd80      	pop	{r7, pc}
 80160b4:	08020c7c 	.word	0x08020c7c
 80160b8:	08020ce8 	.word	0x08020ce8
 80160bc:	08020cc0 	.word	0x08020cc0

080160c0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80160c4:	f001 f852 	bl	801716c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80160c8:	4b07      	ldr	r3, [pc, #28]	; (80160e8 <tcp_tmr+0x28>)
 80160ca:	781b      	ldrb	r3, [r3, #0]
 80160cc:	3301      	adds	r3, #1
 80160ce:	b2da      	uxtb	r2, r3
 80160d0:	4b05      	ldr	r3, [pc, #20]	; (80160e8 <tcp_tmr+0x28>)
 80160d2:	701a      	strb	r2, [r3, #0]
 80160d4:	4b04      	ldr	r3, [pc, #16]	; (80160e8 <tcp_tmr+0x28>)
 80160d6:	781b      	ldrb	r3, [r3, #0]
 80160d8:	f003 0301 	and.w	r3, r3, #1
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d001      	beq.n	80160e4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80160e0:	f000 fd06 	bl	8016af0 <tcp_slowtmr>
  }
}
 80160e4:	bf00      	nop
 80160e6:	bd80      	pop	{r7, pc}
 80160e8:	20004525 	.word	0x20004525

080160ec <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b084      	sub	sp, #16
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
 80160f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80160f6:	683b      	ldr	r3, [r7, #0]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d105      	bne.n	8016108 <tcp_remove_listener+0x1c>
 80160fc:	4b0d      	ldr	r3, [pc, #52]	; (8016134 <tcp_remove_listener+0x48>)
 80160fe:	22ff      	movs	r2, #255	; 0xff
 8016100:	490d      	ldr	r1, [pc, #52]	; (8016138 <tcp_remove_listener+0x4c>)
 8016102:	480e      	ldr	r0, [pc, #56]	; (801613c <tcp_remove_listener+0x50>)
 8016104:	f008 ff3e 	bl	801ef84 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	60fb      	str	r3, [r7, #12]
 801610c:	e00a      	b.n	8016124 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016112:	683a      	ldr	r2, [r7, #0]
 8016114:	429a      	cmp	r2, r3
 8016116:	d102      	bne.n	801611e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	2200      	movs	r2, #0
 801611c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	68db      	ldr	r3, [r3, #12]
 8016122:	60fb      	str	r3, [r7, #12]
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d1f1      	bne.n	801610e <tcp_remove_listener+0x22>
    }
  }
}
 801612a:	bf00      	nop
 801612c:	3710      	adds	r7, #16
 801612e:	46bd      	mov	sp, r7
 8016130:	bd80      	pop	{r7, pc}
 8016132:	bf00      	nop
 8016134:	08020c7c 	.word	0x08020c7c
 8016138:	08020d04 	.word	0x08020d04
 801613c:	08020cc0 	.word	0x08020cc0

08016140 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b084      	sub	sp, #16
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d106      	bne.n	801615c <tcp_listen_closed+0x1c>
 801614e:	4b14      	ldr	r3, [pc, #80]	; (80161a0 <tcp_listen_closed+0x60>)
 8016150:	f240 1211 	movw	r2, #273	; 0x111
 8016154:	4913      	ldr	r1, [pc, #76]	; (80161a4 <tcp_listen_closed+0x64>)
 8016156:	4814      	ldr	r0, [pc, #80]	; (80161a8 <tcp_listen_closed+0x68>)
 8016158:	f008 ff14 	bl	801ef84 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	7d1b      	ldrb	r3, [r3, #20]
 8016160:	2b01      	cmp	r3, #1
 8016162:	d006      	beq.n	8016172 <tcp_listen_closed+0x32>
 8016164:	4b0e      	ldr	r3, [pc, #56]	; (80161a0 <tcp_listen_closed+0x60>)
 8016166:	f44f 7289 	mov.w	r2, #274	; 0x112
 801616a:	4910      	ldr	r1, [pc, #64]	; (80161ac <tcp_listen_closed+0x6c>)
 801616c:	480e      	ldr	r0, [pc, #56]	; (80161a8 <tcp_listen_closed+0x68>)
 801616e:	f008 ff09 	bl	801ef84 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8016172:	2301      	movs	r3, #1
 8016174:	60fb      	str	r3, [r7, #12]
 8016176:	e00b      	b.n	8016190 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8016178:	4a0d      	ldr	r2, [pc, #52]	; (80161b0 <tcp_listen_closed+0x70>)
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	6879      	ldr	r1, [r7, #4]
 8016184:	4618      	mov	r0, r3
 8016186:	f7ff ffb1 	bl	80160ec <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	3301      	adds	r3, #1
 801618e:	60fb      	str	r3, [r7, #12]
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	2b03      	cmp	r3, #3
 8016194:	d9f0      	bls.n	8016178 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8016196:	bf00      	nop
 8016198:	3710      	adds	r7, #16
 801619a:	46bd      	mov	sp, r7
 801619c:	bd80      	pop	{r7, pc}
 801619e:	bf00      	nop
 80161a0:	08020c7c 	.word	0x08020c7c
 80161a4:	08020d2c 	.word	0x08020d2c
 80161a8:	08020cc0 	.word	0x08020cc0
 80161ac:	08020d38 	.word	0x08020d38
 80161b0:	080337d8 	.word	0x080337d8

080161b4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80161b4:	b5b0      	push	{r4, r5, r7, lr}
 80161b6:	b088      	sub	sp, #32
 80161b8:	af04      	add	r7, sp, #16
 80161ba:	6078      	str	r0, [r7, #4]
 80161bc:	460b      	mov	r3, r1
 80161be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d106      	bne.n	80161d4 <tcp_close_shutdown+0x20>
 80161c6:	4b61      	ldr	r3, [pc, #388]	; (801634c <tcp_close_shutdown+0x198>)
 80161c8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80161cc:	4960      	ldr	r1, [pc, #384]	; (8016350 <tcp_close_shutdown+0x19c>)
 80161ce:	4861      	ldr	r0, [pc, #388]	; (8016354 <tcp_close_shutdown+0x1a0>)
 80161d0:	f008 fed8 	bl	801ef84 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80161d4:	78fb      	ldrb	r3, [r7, #3]
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d066      	beq.n	80162a8 <tcp_close_shutdown+0xf4>
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	7d1b      	ldrb	r3, [r3, #20]
 80161de:	2b04      	cmp	r3, #4
 80161e0:	d003      	beq.n	80161ea <tcp_close_shutdown+0x36>
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	7d1b      	ldrb	r3, [r3, #20]
 80161e6:	2b07      	cmp	r3, #7
 80161e8:	d15e      	bne.n	80162a8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d104      	bne.n	80161fc <tcp_close_shutdown+0x48>
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80161f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80161fa:	d055      	beq.n	80162a8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	8b5b      	ldrh	r3, [r3, #26]
 8016200:	f003 0310 	and.w	r3, r3, #16
 8016204:	2b00      	cmp	r3, #0
 8016206:	d106      	bne.n	8016216 <tcp_close_shutdown+0x62>
 8016208:	4b50      	ldr	r3, [pc, #320]	; (801634c <tcp_close_shutdown+0x198>)
 801620a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801620e:	4952      	ldr	r1, [pc, #328]	; (8016358 <tcp_close_shutdown+0x1a4>)
 8016210:	4850      	ldr	r0, [pc, #320]	; (8016354 <tcp_close_shutdown+0x1a0>)
 8016212:	f008 feb7 	bl	801ef84 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801621e:	687d      	ldr	r5, [r7, #4]
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	3304      	adds	r3, #4
 8016224:	687a      	ldr	r2, [r7, #4]
 8016226:	8ad2      	ldrh	r2, [r2, #22]
 8016228:	6879      	ldr	r1, [r7, #4]
 801622a:	8b09      	ldrh	r1, [r1, #24]
 801622c:	9102      	str	r1, [sp, #8]
 801622e:	9201      	str	r2, [sp, #4]
 8016230:	9300      	str	r3, [sp, #0]
 8016232:	462b      	mov	r3, r5
 8016234:	4622      	mov	r2, r4
 8016236:	4601      	mov	r1, r0
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f005 fd99 	bl	801bd70 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801623e:	6878      	ldr	r0, [r7, #4]
 8016240:	f001 fb68 	bl	8017914 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8016244:	4b45      	ldr	r3, [pc, #276]	; (801635c <tcp_close_shutdown+0x1a8>)
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	687a      	ldr	r2, [r7, #4]
 801624a:	429a      	cmp	r2, r3
 801624c:	d105      	bne.n	801625a <tcp_close_shutdown+0xa6>
 801624e:	4b43      	ldr	r3, [pc, #268]	; (801635c <tcp_close_shutdown+0x1a8>)
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	68db      	ldr	r3, [r3, #12]
 8016254:	4a41      	ldr	r2, [pc, #260]	; (801635c <tcp_close_shutdown+0x1a8>)
 8016256:	6013      	str	r3, [r2, #0]
 8016258:	e013      	b.n	8016282 <tcp_close_shutdown+0xce>
 801625a:	4b40      	ldr	r3, [pc, #256]	; (801635c <tcp_close_shutdown+0x1a8>)
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	60fb      	str	r3, [r7, #12]
 8016260:	e00c      	b.n	801627c <tcp_close_shutdown+0xc8>
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	68db      	ldr	r3, [r3, #12]
 8016266:	687a      	ldr	r2, [r7, #4]
 8016268:	429a      	cmp	r2, r3
 801626a:	d104      	bne.n	8016276 <tcp_close_shutdown+0xc2>
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	68da      	ldr	r2, [r3, #12]
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	60da      	str	r2, [r3, #12]
 8016274:	e005      	b.n	8016282 <tcp_close_shutdown+0xce>
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	68db      	ldr	r3, [r3, #12]
 801627a:	60fb      	str	r3, [r7, #12]
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d1ef      	bne.n	8016262 <tcp_close_shutdown+0xae>
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	2200      	movs	r2, #0
 8016286:	60da      	str	r2, [r3, #12]
 8016288:	4b35      	ldr	r3, [pc, #212]	; (8016360 <tcp_close_shutdown+0x1ac>)
 801628a:	2201      	movs	r2, #1
 801628c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801628e:	4b35      	ldr	r3, [pc, #212]	; (8016364 <tcp_close_shutdown+0x1b0>)
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	687a      	ldr	r2, [r7, #4]
 8016294:	429a      	cmp	r2, r3
 8016296:	d102      	bne.n	801629e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8016298:	f003 fffa 	bl	801a290 <tcp_trigger_input_pcb_close>
 801629c:	e002      	b.n	80162a4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801629e:	6878      	ldr	r0, [r7, #4]
 80162a0:	f7ff fed6 	bl	8016050 <tcp_free>
      }
      return ERR_OK;
 80162a4:	2300      	movs	r3, #0
 80162a6:	e04d      	b.n	8016344 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	7d1b      	ldrb	r3, [r3, #20]
 80162ac:	2b01      	cmp	r3, #1
 80162ae:	d02d      	beq.n	801630c <tcp_close_shutdown+0x158>
 80162b0:	2b02      	cmp	r3, #2
 80162b2:	d036      	beq.n	8016322 <tcp_close_shutdown+0x16e>
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d13f      	bne.n	8016338 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	8adb      	ldrh	r3, [r3, #22]
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d021      	beq.n	8016304 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80162c0:	4b29      	ldr	r3, [pc, #164]	; (8016368 <tcp_close_shutdown+0x1b4>)
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	687a      	ldr	r2, [r7, #4]
 80162c6:	429a      	cmp	r2, r3
 80162c8:	d105      	bne.n	80162d6 <tcp_close_shutdown+0x122>
 80162ca:	4b27      	ldr	r3, [pc, #156]	; (8016368 <tcp_close_shutdown+0x1b4>)
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	68db      	ldr	r3, [r3, #12]
 80162d0:	4a25      	ldr	r2, [pc, #148]	; (8016368 <tcp_close_shutdown+0x1b4>)
 80162d2:	6013      	str	r3, [r2, #0]
 80162d4:	e013      	b.n	80162fe <tcp_close_shutdown+0x14a>
 80162d6:	4b24      	ldr	r3, [pc, #144]	; (8016368 <tcp_close_shutdown+0x1b4>)
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	60bb      	str	r3, [r7, #8]
 80162dc:	e00c      	b.n	80162f8 <tcp_close_shutdown+0x144>
 80162de:	68bb      	ldr	r3, [r7, #8]
 80162e0:	68db      	ldr	r3, [r3, #12]
 80162e2:	687a      	ldr	r2, [r7, #4]
 80162e4:	429a      	cmp	r2, r3
 80162e6:	d104      	bne.n	80162f2 <tcp_close_shutdown+0x13e>
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	68da      	ldr	r2, [r3, #12]
 80162ec:	68bb      	ldr	r3, [r7, #8]
 80162ee:	60da      	str	r2, [r3, #12]
 80162f0:	e005      	b.n	80162fe <tcp_close_shutdown+0x14a>
 80162f2:	68bb      	ldr	r3, [r7, #8]
 80162f4:	68db      	ldr	r3, [r3, #12]
 80162f6:	60bb      	str	r3, [r7, #8]
 80162f8:	68bb      	ldr	r3, [r7, #8]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d1ef      	bne.n	80162de <tcp_close_shutdown+0x12a>
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	2200      	movs	r2, #0
 8016302:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8016304:	6878      	ldr	r0, [r7, #4]
 8016306:	f7ff fea3 	bl	8016050 <tcp_free>
      break;
 801630a:	e01a      	b.n	8016342 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 801630c:	6878      	ldr	r0, [r7, #4]
 801630e:	f7ff ff17 	bl	8016140 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8016312:	6879      	ldr	r1, [r7, #4]
 8016314:	4815      	ldr	r0, [pc, #84]	; (801636c <tcp_close_shutdown+0x1b8>)
 8016316:	f001 fb4d 	bl	80179b4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801631a:	6878      	ldr	r0, [r7, #4]
 801631c:	f7ff feb4 	bl	8016088 <tcp_free_listen>
      break;
 8016320:	e00f      	b.n	8016342 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016322:	6879      	ldr	r1, [r7, #4]
 8016324:	480d      	ldr	r0, [pc, #52]	; (801635c <tcp_close_shutdown+0x1a8>)
 8016326:	f001 fb45 	bl	80179b4 <tcp_pcb_remove>
 801632a:	4b0d      	ldr	r3, [pc, #52]	; (8016360 <tcp_close_shutdown+0x1ac>)
 801632c:	2201      	movs	r2, #1
 801632e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8016330:	6878      	ldr	r0, [r7, #4]
 8016332:	f7ff fe8d 	bl	8016050 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8016336:	e004      	b.n	8016342 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8016338:	6878      	ldr	r0, [r7, #4]
 801633a:	f000 f819 	bl	8016370 <tcp_close_shutdown_fin>
 801633e:	4603      	mov	r3, r0
 8016340:	e000      	b.n	8016344 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8016342:	2300      	movs	r3, #0
}
 8016344:	4618      	mov	r0, r3
 8016346:	3710      	adds	r7, #16
 8016348:	46bd      	mov	sp, r7
 801634a:	bdb0      	pop	{r4, r5, r7, pc}
 801634c:	08020c7c 	.word	0x08020c7c
 8016350:	08020d50 	.word	0x08020d50
 8016354:	08020cc0 	.word	0x08020cc0
 8016358:	08020d70 	.word	0x08020d70
 801635c:	20013d2c 	.word	0x20013d2c
 8016360:	20013d28 	.word	0x20013d28
 8016364:	20013d40 	.word	0x20013d40
 8016368:	20013d38 	.word	0x20013d38
 801636c:	20013d34 	.word	0x20013d34

08016370 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b084      	sub	sp, #16
 8016374:	af00      	add	r7, sp, #0
 8016376:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d106      	bne.n	801638c <tcp_close_shutdown_fin+0x1c>
 801637e:	4b2c      	ldr	r3, [pc, #176]	; (8016430 <tcp_close_shutdown_fin+0xc0>)
 8016380:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8016384:	492b      	ldr	r1, [pc, #172]	; (8016434 <tcp_close_shutdown_fin+0xc4>)
 8016386:	482c      	ldr	r0, [pc, #176]	; (8016438 <tcp_close_shutdown_fin+0xc8>)
 8016388:	f008 fdfc 	bl	801ef84 <iprintf>

  switch (pcb->state) {
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	7d1b      	ldrb	r3, [r3, #20]
 8016390:	2b04      	cmp	r3, #4
 8016392:	d010      	beq.n	80163b6 <tcp_close_shutdown_fin+0x46>
 8016394:	2b07      	cmp	r3, #7
 8016396:	d01b      	beq.n	80163d0 <tcp_close_shutdown_fin+0x60>
 8016398:	2b03      	cmp	r3, #3
 801639a:	d126      	bne.n	80163ea <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801639c:	6878      	ldr	r0, [r7, #4]
 801639e:	f004 fde3 	bl	801af68 <tcp_send_fin>
 80163a2:	4603      	mov	r3, r0
 80163a4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80163a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d11f      	bne.n	80163ee <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	2205      	movs	r2, #5
 80163b2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80163b4:	e01b      	b.n	80163ee <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80163b6:	6878      	ldr	r0, [r7, #4]
 80163b8:	f004 fdd6 	bl	801af68 <tcp_send_fin>
 80163bc:	4603      	mov	r3, r0
 80163be:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80163c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d114      	bne.n	80163f2 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	2205      	movs	r2, #5
 80163cc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80163ce:	e010      	b.n	80163f2 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80163d0:	6878      	ldr	r0, [r7, #4]
 80163d2:	f004 fdc9 	bl	801af68 <tcp_send_fin>
 80163d6:	4603      	mov	r3, r0
 80163d8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80163da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d109      	bne.n	80163f6 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	2209      	movs	r2, #9
 80163e6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80163e8:	e005      	b.n	80163f6 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80163ea:	2300      	movs	r3, #0
 80163ec:	e01c      	b.n	8016428 <tcp_close_shutdown_fin+0xb8>
      break;
 80163ee:	bf00      	nop
 80163f0:	e002      	b.n	80163f8 <tcp_close_shutdown_fin+0x88>
      break;
 80163f2:	bf00      	nop
 80163f4:	e000      	b.n	80163f8 <tcp_close_shutdown_fin+0x88>
      break;
 80163f6:	bf00      	nop
  }

  if (err == ERR_OK) {
 80163f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d103      	bne.n	8016408 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8016400:	6878      	ldr	r0, [r7, #4]
 8016402:	f004 feef 	bl	801b1e4 <tcp_output>
 8016406:	e00d      	b.n	8016424 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8016408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801640c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016410:	d108      	bne.n	8016424 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	8b5b      	ldrh	r3, [r3, #26]
 8016416:	f043 0308 	orr.w	r3, r3, #8
 801641a:	b29a      	uxth	r2, r3
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8016420:	2300      	movs	r3, #0
 8016422:	e001      	b.n	8016428 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8016424:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016428:	4618      	mov	r0, r3
 801642a:	3710      	adds	r7, #16
 801642c:	46bd      	mov	sp, r7
 801642e:	bd80      	pop	{r7, pc}
 8016430:	08020c7c 	.word	0x08020c7c
 8016434:	08020d2c 	.word	0x08020d2c
 8016438:	08020cc0 	.word	0x08020cc0

0801643c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b082      	sub	sp, #8
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	2b00      	cmp	r3, #0
 8016448:	d109      	bne.n	801645e <tcp_close+0x22>
 801644a:	4b0f      	ldr	r3, [pc, #60]	; (8016488 <tcp_close+0x4c>)
 801644c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8016450:	490e      	ldr	r1, [pc, #56]	; (801648c <tcp_close+0x50>)
 8016452:	480f      	ldr	r0, [pc, #60]	; (8016490 <tcp_close+0x54>)
 8016454:	f008 fd96 	bl	801ef84 <iprintf>
 8016458:	f06f 030f 	mvn.w	r3, #15
 801645c:	e00f      	b.n	801647e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	7d1b      	ldrb	r3, [r3, #20]
 8016462:	2b01      	cmp	r3, #1
 8016464:	d006      	beq.n	8016474 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	8b5b      	ldrh	r3, [r3, #26]
 801646a:	f043 0310 	orr.w	r3, r3, #16
 801646e:	b29a      	uxth	r2, r3
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8016474:	2101      	movs	r1, #1
 8016476:	6878      	ldr	r0, [r7, #4]
 8016478:	f7ff fe9c 	bl	80161b4 <tcp_close_shutdown>
 801647c:	4603      	mov	r3, r0
}
 801647e:	4618      	mov	r0, r3
 8016480:	3708      	adds	r7, #8
 8016482:	46bd      	mov	sp, r7
 8016484:	bd80      	pop	{r7, pc}
 8016486:	bf00      	nop
 8016488:	08020c7c 	.word	0x08020c7c
 801648c:	08020d8c 	.word	0x08020d8c
 8016490:	08020cc0 	.word	0x08020cc0

08016494 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b08e      	sub	sp, #56	; 0x38
 8016498:	af04      	add	r7, sp, #16
 801649a:	6078      	str	r0, [r7, #4]
 801649c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d107      	bne.n	80164b4 <tcp_abandon+0x20>
 80164a4:	4b52      	ldr	r3, [pc, #328]	; (80165f0 <tcp_abandon+0x15c>)
 80164a6:	f240 223d 	movw	r2, #573	; 0x23d
 80164aa:	4952      	ldr	r1, [pc, #328]	; (80165f4 <tcp_abandon+0x160>)
 80164ac:	4852      	ldr	r0, [pc, #328]	; (80165f8 <tcp_abandon+0x164>)
 80164ae:	f008 fd69 	bl	801ef84 <iprintf>
 80164b2:	e099      	b.n	80165e8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	7d1b      	ldrb	r3, [r3, #20]
 80164b8:	2b01      	cmp	r3, #1
 80164ba:	d106      	bne.n	80164ca <tcp_abandon+0x36>
 80164bc:	4b4c      	ldr	r3, [pc, #304]	; (80165f0 <tcp_abandon+0x15c>)
 80164be:	f240 2241 	movw	r2, #577	; 0x241
 80164c2:	494e      	ldr	r1, [pc, #312]	; (80165fc <tcp_abandon+0x168>)
 80164c4:	484c      	ldr	r0, [pc, #304]	; (80165f8 <tcp_abandon+0x164>)
 80164c6:	f008 fd5d 	bl	801ef84 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	7d1b      	ldrb	r3, [r3, #20]
 80164ce:	2b0a      	cmp	r3, #10
 80164d0:	d107      	bne.n	80164e2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80164d2:	6879      	ldr	r1, [r7, #4]
 80164d4:	484a      	ldr	r0, [pc, #296]	; (8016600 <tcp_abandon+0x16c>)
 80164d6:	f001 fa6d 	bl	80179b4 <tcp_pcb_remove>
    tcp_free(pcb);
 80164da:	6878      	ldr	r0, [r7, #4]
 80164dc:	f7ff fdb8 	bl	8016050 <tcp_free>
 80164e0:	e082      	b.n	80165e8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80164e2:	2300      	movs	r3, #0
 80164e4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80164e6:	2300      	movs	r3, #0
 80164e8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80164ee:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164f4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80164fc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	691b      	ldr	r3, [r3, #16]
 8016502:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	7d1b      	ldrb	r3, [r3, #20]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d126      	bne.n	801655a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	8adb      	ldrh	r3, [r3, #22]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d02e      	beq.n	8016572 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8016514:	4b3b      	ldr	r3, [pc, #236]	; (8016604 <tcp_abandon+0x170>)
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	687a      	ldr	r2, [r7, #4]
 801651a:	429a      	cmp	r2, r3
 801651c:	d105      	bne.n	801652a <tcp_abandon+0x96>
 801651e:	4b39      	ldr	r3, [pc, #228]	; (8016604 <tcp_abandon+0x170>)
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	68db      	ldr	r3, [r3, #12]
 8016524:	4a37      	ldr	r2, [pc, #220]	; (8016604 <tcp_abandon+0x170>)
 8016526:	6013      	str	r3, [r2, #0]
 8016528:	e013      	b.n	8016552 <tcp_abandon+0xbe>
 801652a:	4b36      	ldr	r3, [pc, #216]	; (8016604 <tcp_abandon+0x170>)
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	61fb      	str	r3, [r7, #28]
 8016530:	e00c      	b.n	801654c <tcp_abandon+0xb8>
 8016532:	69fb      	ldr	r3, [r7, #28]
 8016534:	68db      	ldr	r3, [r3, #12]
 8016536:	687a      	ldr	r2, [r7, #4]
 8016538:	429a      	cmp	r2, r3
 801653a:	d104      	bne.n	8016546 <tcp_abandon+0xb2>
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	68da      	ldr	r2, [r3, #12]
 8016540:	69fb      	ldr	r3, [r7, #28]
 8016542:	60da      	str	r2, [r3, #12]
 8016544:	e005      	b.n	8016552 <tcp_abandon+0xbe>
 8016546:	69fb      	ldr	r3, [r7, #28]
 8016548:	68db      	ldr	r3, [r3, #12]
 801654a:	61fb      	str	r3, [r7, #28]
 801654c:	69fb      	ldr	r3, [r7, #28]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d1ef      	bne.n	8016532 <tcp_abandon+0x9e>
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	2200      	movs	r2, #0
 8016556:	60da      	str	r2, [r3, #12]
 8016558:	e00b      	b.n	8016572 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801655a:	683b      	ldr	r3, [r7, #0]
 801655c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	8adb      	ldrh	r3, [r3, #22]
 8016562:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016564:	6879      	ldr	r1, [r7, #4]
 8016566:	4828      	ldr	r0, [pc, #160]	; (8016608 <tcp_abandon+0x174>)
 8016568:	f001 fa24 	bl	80179b4 <tcp_pcb_remove>
 801656c:	4b27      	ldr	r3, [pc, #156]	; (801660c <tcp_abandon+0x178>)
 801656e:	2201      	movs	r2, #1
 8016570:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016576:	2b00      	cmp	r3, #0
 8016578:	d004      	beq.n	8016584 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801657e:	4618      	mov	r0, r3
 8016580:	f000 fed4 	bl	801732c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016588:	2b00      	cmp	r3, #0
 801658a:	d004      	beq.n	8016596 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016590:	4618      	mov	r0, r3
 8016592:	f000 fecb 	bl	801732c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801659a:	2b00      	cmp	r3, #0
 801659c:	d004      	beq.n	80165a8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80165a2:	4618      	mov	r0, r3
 80165a4:	f000 fec2 	bl	801732c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80165a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d00e      	beq.n	80165cc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80165ae:	6879      	ldr	r1, [r7, #4]
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	3304      	adds	r3, #4
 80165b4:	687a      	ldr	r2, [r7, #4]
 80165b6:	8b12      	ldrh	r2, [r2, #24]
 80165b8:	9202      	str	r2, [sp, #8]
 80165ba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80165bc:	9201      	str	r2, [sp, #4]
 80165be:	9300      	str	r3, [sp, #0]
 80165c0:	460b      	mov	r3, r1
 80165c2:	697a      	ldr	r2, [r7, #20]
 80165c4:	69b9      	ldr	r1, [r7, #24]
 80165c6:	6878      	ldr	r0, [r7, #4]
 80165c8:	f005 fbd2 	bl	801bd70 <tcp_rst>
    }
    last_state = pcb->state;
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	7d1b      	ldrb	r3, [r3, #20]
 80165d0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80165d2:	6878      	ldr	r0, [r7, #4]
 80165d4:	f7ff fd3c 	bl	8016050 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80165d8:	693b      	ldr	r3, [r7, #16]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d004      	beq.n	80165e8 <tcp_abandon+0x154>
 80165de:	693b      	ldr	r3, [r7, #16]
 80165e0:	f06f 010c 	mvn.w	r1, #12
 80165e4:	68f8      	ldr	r0, [r7, #12]
 80165e6:	4798      	blx	r3
  }
}
 80165e8:	3728      	adds	r7, #40	; 0x28
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}
 80165ee:	bf00      	nop
 80165f0:	08020c7c 	.word	0x08020c7c
 80165f4:	08020dc0 	.word	0x08020dc0
 80165f8:	08020cc0 	.word	0x08020cc0
 80165fc:	08020ddc 	.word	0x08020ddc
 8016600:	20013d3c 	.word	0x20013d3c
 8016604:	20013d38 	.word	0x20013d38
 8016608:	20013d2c 	.word	0x20013d2c
 801660c:	20013d28 	.word	0x20013d28

08016610 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b082      	sub	sp, #8
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8016618:	2101      	movs	r1, #1
 801661a:	6878      	ldr	r0, [r7, #4]
 801661c:	f7ff ff3a 	bl	8016494 <tcp_abandon>
}
 8016620:	bf00      	nop
 8016622:	3708      	adds	r7, #8
 8016624:	46bd      	mov	sp, r7
 8016626:	bd80      	pop	{r7, pc}

08016628 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b088      	sub	sp, #32
 801662c:	af00      	add	r7, sp, #0
 801662e:	60f8      	str	r0, [r7, #12]
 8016630:	60b9      	str	r1, [r7, #8]
 8016632:	4613      	mov	r3, r2
 8016634:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8016636:	2304      	movs	r3, #4
 8016638:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801663a:	68bb      	ldr	r3, [r7, #8]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d101      	bne.n	8016644 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8016640:	4b3e      	ldr	r3, [pc, #248]	; (801673c <tcp_bind+0x114>)
 8016642:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	2b00      	cmp	r3, #0
 8016648:	d109      	bne.n	801665e <tcp_bind+0x36>
 801664a:	4b3d      	ldr	r3, [pc, #244]	; (8016740 <tcp_bind+0x118>)
 801664c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8016650:	493c      	ldr	r1, [pc, #240]	; (8016744 <tcp_bind+0x11c>)
 8016652:	483d      	ldr	r0, [pc, #244]	; (8016748 <tcp_bind+0x120>)
 8016654:	f008 fc96 	bl	801ef84 <iprintf>
 8016658:	f06f 030f 	mvn.w	r3, #15
 801665c:	e06a      	b.n	8016734 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	7d1b      	ldrb	r3, [r3, #20]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d009      	beq.n	801667a <tcp_bind+0x52>
 8016666:	4b36      	ldr	r3, [pc, #216]	; (8016740 <tcp_bind+0x118>)
 8016668:	f240 22ab 	movw	r2, #683	; 0x2ab
 801666c:	4937      	ldr	r1, [pc, #220]	; (801674c <tcp_bind+0x124>)
 801666e:	4836      	ldr	r0, [pc, #216]	; (8016748 <tcp_bind+0x120>)
 8016670:	f008 fc88 	bl	801ef84 <iprintf>
 8016674:	f06f 0305 	mvn.w	r3, #5
 8016678:	e05c      	b.n	8016734 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801667a:	88fb      	ldrh	r3, [r7, #6]
 801667c:	2b00      	cmp	r3, #0
 801667e:	d109      	bne.n	8016694 <tcp_bind+0x6c>
    port = tcp_new_port();
 8016680:	f000 f9f0 	bl	8016a64 <tcp_new_port>
 8016684:	4603      	mov	r3, r0
 8016686:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016688:	88fb      	ldrh	r3, [r7, #6]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d135      	bne.n	80166fa <tcp_bind+0xd2>
      return ERR_BUF;
 801668e:	f06f 0301 	mvn.w	r3, #1
 8016692:	e04f      	b.n	8016734 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8016694:	2300      	movs	r3, #0
 8016696:	61fb      	str	r3, [r7, #28]
 8016698:	e02b      	b.n	80166f2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801669a:	4a2d      	ldr	r2, [pc, #180]	; (8016750 <tcp_bind+0x128>)
 801669c:	69fb      	ldr	r3, [r7, #28]
 801669e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	61bb      	str	r3, [r7, #24]
 80166a6:	e01e      	b.n	80166e6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80166a8:	69bb      	ldr	r3, [r7, #24]
 80166aa:	8adb      	ldrh	r3, [r3, #22]
 80166ac:	88fa      	ldrh	r2, [r7, #6]
 80166ae:	429a      	cmp	r2, r3
 80166b0:	d116      	bne.n	80166e0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80166b2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d010      	beq.n	80166da <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80166b8:	69bb      	ldr	r3, [r7, #24]
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d00c      	beq.n	80166da <tcp_bind+0xb2>
 80166c0:	68bb      	ldr	r3, [r7, #8]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d009      	beq.n	80166da <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80166c6:	68bb      	ldr	r3, [r7, #8]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d005      	beq.n	80166da <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80166ce:	69bb      	ldr	r3, [r7, #24]
 80166d0:	681a      	ldr	r2, [r3, #0]
 80166d2:	68bb      	ldr	r3, [r7, #8]
 80166d4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80166d6:	429a      	cmp	r2, r3
 80166d8:	d102      	bne.n	80166e0 <tcp_bind+0xb8>
              return ERR_USE;
 80166da:	f06f 0307 	mvn.w	r3, #7
 80166de:	e029      	b.n	8016734 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80166e0:	69bb      	ldr	r3, [r7, #24]
 80166e2:	68db      	ldr	r3, [r3, #12]
 80166e4:	61bb      	str	r3, [r7, #24]
 80166e6:	69bb      	ldr	r3, [r7, #24]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d1dd      	bne.n	80166a8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80166ec:	69fb      	ldr	r3, [r7, #28]
 80166ee:	3301      	adds	r3, #1
 80166f0:	61fb      	str	r3, [r7, #28]
 80166f2:	69fa      	ldr	r2, [r7, #28]
 80166f4:	697b      	ldr	r3, [r7, #20]
 80166f6:	429a      	cmp	r2, r3
 80166f8:	dbcf      	blt.n	801669a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80166fa:	68bb      	ldr	r3, [r7, #8]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d00c      	beq.n	801671a <tcp_bind+0xf2>
 8016700:	68bb      	ldr	r3, [r7, #8]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d008      	beq.n	801671a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8016708:	68bb      	ldr	r3, [r7, #8]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d002      	beq.n	8016714 <tcp_bind+0xec>
 801670e:	68bb      	ldr	r3, [r7, #8]
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	e000      	b.n	8016716 <tcp_bind+0xee>
 8016714:	2300      	movs	r3, #0
 8016716:	68fa      	ldr	r2, [r7, #12]
 8016718:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	88fa      	ldrh	r2, [r7, #6]
 801671e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8016720:	4b0c      	ldr	r3, [pc, #48]	; (8016754 <tcp_bind+0x12c>)
 8016722:	681a      	ldr	r2, [r3, #0]
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	60da      	str	r2, [r3, #12]
 8016728:	4a0a      	ldr	r2, [pc, #40]	; (8016754 <tcp_bind+0x12c>)
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	6013      	str	r3, [r2, #0]
 801672e:	f005 fce1 	bl	801c0f4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8016732:	2300      	movs	r3, #0
}
 8016734:	4618      	mov	r0, r3
 8016736:	3720      	adds	r7, #32
 8016738:	46bd      	mov	sp, r7
 801673a:	bd80      	pop	{r7, pc}
 801673c:	08033800 	.word	0x08033800
 8016740:	08020c7c 	.word	0x08020c7c
 8016744:	08020e10 	.word	0x08020e10
 8016748:	08020cc0 	.word	0x08020cc0
 801674c:	08020e28 	.word	0x08020e28
 8016750:	080337d8 	.word	0x080337d8
 8016754:	20013d38 	.word	0x20013d38

08016758 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8016758:	b580      	push	{r7, lr}
 801675a:	b084      	sub	sp, #16
 801675c:	af00      	add	r7, sp, #0
 801675e:	60f8      	str	r0, [r7, #12]
 8016760:	60b9      	str	r1, [r7, #8]
 8016762:	4613      	mov	r3, r2
 8016764:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8016766:	68bb      	ldr	r3, [r7, #8]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d106      	bne.n	801677a <tcp_accept_null+0x22>
 801676c:	4b07      	ldr	r3, [pc, #28]	; (801678c <tcp_accept_null+0x34>)
 801676e:	f240 320f 	movw	r2, #783	; 0x30f
 8016772:	4907      	ldr	r1, [pc, #28]	; (8016790 <tcp_accept_null+0x38>)
 8016774:	4807      	ldr	r0, [pc, #28]	; (8016794 <tcp_accept_null+0x3c>)
 8016776:	f008 fc05 	bl	801ef84 <iprintf>

  tcp_abort(pcb);
 801677a:	68b8      	ldr	r0, [r7, #8]
 801677c:	f7ff ff48 	bl	8016610 <tcp_abort>

  return ERR_ABRT;
 8016780:	f06f 030c 	mvn.w	r3, #12
}
 8016784:	4618      	mov	r0, r3
 8016786:	3710      	adds	r7, #16
 8016788:	46bd      	mov	sp, r7
 801678a:	bd80      	pop	{r7, pc}
 801678c:	08020c7c 	.word	0x08020c7c
 8016790:	08020e50 	.word	0x08020e50
 8016794:	08020cc0 	.word	0x08020cc0

08016798 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8016798:	b580      	push	{r7, lr}
 801679a:	b082      	sub	sp, #8
 801679c:	af00      	add	r7, sp, #0
 801679e:	6078      	str	r0, [r7, #4]
 80167a0:	460b      	mov	r3, r1
 80167a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80167a4:	78fb      	ldrb	r3, [r7, #3]
 80167a6:	2200      	movs	r2, #0
 80167a8:	4619      	mov	r1, r3
 80167aa:	6878      	ldr	r0, [r7, #4]
 80167ac:	f000 f806 	bl	80167bc <tcp_listen_with_backlog_and_err>
 80167b0:	4603      	mov	r3, r0
}
 80167b2:	4618      	mov	r0, r3
 80167b4:	3708      	adds	r7, #8
 80167b6:	46bd      	mov	sp, r7
 80167b8:	bd80      	pop	{r7, pc}
	...

080167bc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b088      	sub	sp, #32
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	60f8      	str	r0, [r7, #12]
 80167c4:	460b      	mov	r3, r1
 80167c6:	607a      	str	r2, [r7, #4]
 80167c8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80167ca:	2300      	movs	r3, #0
 80167cc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d109      	bne.n	80167e8 <tcp_listen_with_backlog_and_err+0x2c>
 80167d4:	4b47      	ldr	r3, [pc, #284]	; (80168f4 <tcp_listen_with_backlog_and_err+0x138>)
 80167d6:	f240 3259 	movw	r2, #857	; 0x359
 80167da:	4947      	ldr	r1, [pc, #284]	; (80168f8 <tcp_listen_with_backlog_and_err+0x13c>)
 80167dc:	4847      	ldr	r0, [pc, #284]	; (80168fc <tcp_listen_with_backlog_and_err+0x140>)
 80167de:	f008 fbd1 	bl	801ef84 <iprintf>
 80167e2:	23f0      	movs	r3, #240	; 0xf0
 80167e4:	76fb      	strb	r3, [r7, #27]
 80167e6:	e079      	b.n	80168dc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	7d1b      	ldrb	r3, [r3, #20]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d009      	beq.n	8016804 <tcp_listen_with_backlog_and_err+0x48>
 80167f0:	4b40      	ldr	r3, [pc, #256]	; (80168f4 <tcp_listen_with_backlog_and_err+0x138>)
 80167f2:	f240 325a 	movw	r2, #858	; 0x35a
 80167f6:	4942      	ldr	r1, [pc, #264]	; (8016900 <tcp_listen_with_backlog_and_err+0x144>)
 80167f8:	4840      	ldr	r0, [pc, #256]	; (80168fc <tcp_listen_with_backlog_and_err+0x140>)
 80167fa:	f008 fbc3 	bl	801ef84 <iprintf>
 80167fe:	23f1      	movs	r3, #241	; 0xf1
 8016800:	76fb      	strb	r3, [r7, #27]
 8016802:	e06b      	b.n	80168dc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	7d1b      	ldrb	r3, [r3, #20]
 8016808:	2b01      	cmp	r3, #1
 801680a:	d104      	bne.n	8016816 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8016810:	23f7      	movs	r3, #247	; 0xf7
 8016812:	76fb      	strb	r3, [r7, #27]
    goto done;
 8016814:	e062      	b.n	80168dc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8016816:	2002      	movs	r0, #2
 8016818:	f7fe fa7c 	bl	8014d14 <memp_malloc>
 801681c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801681e:	69fb      	ldr	r3, [r7, #28]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d102      	bne.n	801682a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8016824:	23ff      	movs	r3, #255	; 0xff
 8016826:	76fb      	strb	r3, [r7, #27]
    goto done;
 8016828:	e058      	b.n	80168dc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	691a      	ldr	r2, [r3, #16]
 801682e:	69fb      	ldr	r3, [r7, #28]
 8016830:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	8ada      	ldrh	r2, [r3, #22]
 8016836:	69fb      	ldr	r3, [r7, #28]
 8016838:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801683a:	69fb      	ldr	r3, [r7, #28]
 801683c:	2201      	movs	r2, #1
 801683e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	7d5a      	ldrb	r2, [r3, #21]
 8016844:	69fb      	ldr	r3, [r7, #28]
 8016846:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	7a5a      	ldrb	r2, [r3, #9]
 801684c:	69fb      	ldr	r3, [r7, #28]
 801684e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8016850:	69fb      	ldr	r3, [r7, #28]
 8016852:	2200      	movs	r2, #0
 8016854:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	7ada      	ldrb	r2, [r3, #11]
 801685a:	69fb      	ldr	r3, [r7, #28]
 801685c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	7a9a      	ldrb	r2, [r3, #10]
 8016862:	69fb      	ldr	r3, [r7, #28]
 8016864:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	681a      	ldr	r2, [r3, #0]
 801686a:	69fb      	ldr	r3, [r7, #28]
 801686c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	8adb      	ldrh	r3, [r3, #22]
 8016872:	2b00      	cmp	r3, #0
 8016874:	d021      	beq.n	80168ba <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8016876:	4b23      	ldr	r3, [pc, #140]	; (8016904 <tcp_listen_with_backlog_and_err+0x148>)
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	68fa      	ldr	r2, [r7, #12]
 801687c:	429a      	cmp	r2, r3
 801687e:	d105      	bne.n	801688c <tcp_listen_with_backlog_and_err+0xd0>
 8016880:	4b20      	ldr	r3, [pc, #128]	; (8016904 <tcp_listen_with_backlog_and_err+0x148>)
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	68db      	ldr	r3, [r3, #12]
 8016886:	4a1f      	ldr	r2, [pc, #124]	; (8016904 <tcp_listen_with_backlog_and_err+0x148>)
 8016888:	6013      	str	r3, [r2, #0]
 801688a:	e013      	b.n	80168b4 <tcp_listen_with_backlog_and_err+0xf8>
 801688c:	4b1d      	ldr	r3, [pc, #116]	; (8016904 <tcp_listen_with_backlog_and_err+0x148>)
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	617b      	str	r3, [r7, #20]
 8016892:	e00c      	b.n	80168ae <tcp_listen_with_backlog_and_err+0xf2>
 8016894:	697b      	ldr	r3, [r7, #20]
 8016896:	68db      	ldr	r3, [r3, #12]
 8016898:	68fa      	ldr	r2, [r7, #12]
 801689a:	429a      	cmp	r2, r3
 801689c:	d104      	bne.n	80168a8 <tcp_listen_with_backlog_and_err+0xec>
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	68da      	ldr	r2, [r3, #12]
 80168a2:	697b      	ldr	r3, [r7, #20]
 80168a4:	60da      	str	r2, [r3, #12]
 80168a6:	e005      	b.n	80168b4 <tcp_listen_with_backlog_and_err+0xf8>
 80168a8:	697b      	ldr	r3, [r7, #20]
 80168aa:	68db      	ldr	r3, [r3, #12]
 80168ac:	617b      	str	r3, [r7, #20]
 80168ae:	697b      	ldr	r3, [r7, #20]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d1ef      	bne.n	8016894 <tcp_listen_with_backlog_and_err+0xd8>
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	2200      	movs	r2, #0
 80168b8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80168ba:	68f8      	ldr	r0, [r7, #12]
 80168bc:	f7ff fbc8 	bl	8016050 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80168c0:	69fb      	ldr	r3, [r7, #28]
 80168c2:	4a11      	ldr	r2, [pc, #68]	; (8016908 <tcp_listen_with_backlog_and_err+0x14c>)
 80168c4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80168c6:	4b11      	ldr	r3, [pc, #68]	; (801690c <tcp_listen_with_backlog_and_err+0x150>)
 80168c8:	681a      	ldr	r2, [r3, #0]
 80168ca:	69fb      	ldr	r3, [r7, #28]
 80168cc:	60da      	str	r2, [r3, #12]
 80168ce:	4a0f      	ldr	r2, [pc, #60]	; (801690c <tcp_listen_with_backlog_and_err+0x150>)
 80168d0:	69fb      	ldr	r3, [r7, #28]
 80168d2:	6013      	str	r3, [r2, #0]
 80168d4:	f005 fc0e 	bl	801c0f4 <tcp_timer_needed>
  res = ERR_OK;
 80168d8:	2300      	movs	r3, #0
 80168da:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d002      	beq.n	80168e8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	7efa      	ldrb	r2, [r7, #27]
 80168e6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80168e8:	69fb      	ldr	r3, [r7, #28]
}
 80168ea:	4618      	mov	r0, r3
 80168ec:	3720      	adds	r7, #32
 80168ee:	46bd      	mov	sp, r7
 80168f0:	bd80      	pop	{r7, pc}
 80168f2:	bf00      	nop
 80168f4:	08020c7c 	.word	0x08020c7c
 80168f8:	08020e70 	.word	0x08020e70
 80168fc:	08020cc0 	.word	0x08020cc0
 8016900:	08020ea0 	.word	0x08020ea0
 8016904:	20013d38 	.word	0x20013d38
 8016908:	08016759 	.word	0x08016759
 801690c:	20013d34 	.word	0x20013d34

08016910 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b084      	sub	sp, #16
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d106      	bne.n	801692c <tcp_update_rcv_ann_wnd+0x1c>
 801691e:	4b25      	ldr	r3, [pc, #148]	; (80169b4 <tcp_update_rcv_ann_wnd+0xa4>)
 8016920:	f240 32a6 	movw	r2, #934	; 0x3a6
 8016924:	4924      	ldr	r1, [pc, #144]	; (80169b8 <tcp_update_rcv_ann_wnd+0xa8>)
 8016926:	4825      	ldr	r0, [pc, #148]	; (80169bc <tcp_update_rcv_ann_wnd+0xac>)
 8016928:	f008 fb2c 	bl	801ef84 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016930:	687a      	ldr	r2, [r7, #4]
 8016932:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8016934:	4413      	add	r3, r2
 8016936:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801693c:	687a      	ldr	r2, [r7, #4]
 801693e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8016940:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8016944:	bf28      	it	cs
 8016946:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801694a:	b292      	uxth	r2, r2
 801694c:	4413      	add	r3, r2
 801694e:	68fa      	ldr	r2, [r7, #12]
 8016950:	1ad3      	subs	r3, r2, r3
 8016952:	2b00      	cmp	r3, #0
 8016954:	db08      	blt.n	8016968 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016962:	68fa      	ldr	r2, [r7, #12]
 8016964:	1ad3      	subs	r3, r2, r3
 8016966:	e020      	b.n	80169aa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016970:	1ad3      	subs	r3, r2, r3
 8016972:	2b00      	cmp	r3, #0
 8016974:	dd03      	ble.n	801697e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	2200      	movs	r2, #0
 801697a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801697c:	e014      	b.n	80169a8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016986:	1ad3      	subs	r3, r2, r3
 8016988:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801698a:	68bb      	ldr	r3, [r7, #8]
 801698c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016990:	d306      	bcc.n	80169a0 <tcp_update_rcv_ann_wnd+0x90>
 8016992:	4b08      	ldr	r3, [pc, #32]	; (80169b4 <tcp_update_rcv_ann_wnd+0xa4>)
 8016994:	f240 32b6 	movw	r2, #950	; 0x3b6
 8016998:	4909      	ldr	r1, [pc, #36]	; (80169c0 <tcp_update_rcv_ann_wnd+0xb0>)
 801699a:	4808      	ldr	r0, [pc, #32]	; (80169bc <tcp_update_rcv_ann_wnd+0xac>)
 801699c:	f008 faf2 	bl	801ef84 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80169a0:	68bb      	ldr	r3, [r7, #8]
 80169a2:	b29a      	uxth	r2, r3
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80169a8:	2300      	movs	r3, #0
  }
}
 80169aa:	4618      	mov	r0, r3
 80169ac:	3710      	adds	r7, #16
 80169ae:	46bd      	mov	sp, r7
 80169b0:	bd80      	pop	{r7, pc}
 80169b2:	bf00      	nop
 80169b4:	08020c7c 	.word	0x08020c7c
 80169b8:	08020ed8 	.word	0x08020ed8
 80169bc:	08020cc0 	.word	0x08020cc0
 80169c0:	08020efc 	.word	0x08020efc

080169c4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b084      	sub	sp, #16
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]
 80169cc:	460b      	mov	r3, r1
 80169ce:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d107      	bne.n	80169e6 <tcp_recved+0x22>
 80169d6:	4b1f      	ldr	r3, [pc, #124]	; (8016a54 <tcp_recved+0x90>)
 80169d8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80169dc:	491e      	ldr	r1, [pc, #120]	; (8016a58 <tcp_recved+0x94>)
 80169de:	481f      	ldr	r0, [pc, #124]	; (8016a5c <tcp_recved+0x98>)
 80169e0:	f008 fad0 	bl	801ef84 <iprintf>
 80169e4:	e032      	b.n	8016a4c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	7d1b      	ldrb	r3, [r3, #20]
 80169ea:	2b01      	cmp	r3, #1
 80169ec:	d106      	bne.n	80169fc <tcp_recved+0x38>
 80169ee:	4b19      	ldr	r3, [pc, #100]	; (8016a54 <tcp_recved+0x90>)
 80169f0:	f240 32d3 	movw	r2, #979	; 0x3d3
 80169f4:	491a      	ldr	r1, [pc, #104]	; (8016a60 <tcp_recved+0x9c>)
 80169f6:	4819      	ldr	r0, [pc, #100]	; (8016a5c <tcp_recved+0x98>)
 80169f8:	f008 fac4 	bl	801ef84 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016a00:	887b      	ldrh	r3, [r7, #2]
 8016a02:	4413      	add	r3, r2
 8016a04:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8016a06:	89fb      	ldrh	r3, [r7, #14]
 8016a08:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016a0c:	d804      	bhi.n	8016a18 <tcp_recved+0x54>
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a12:	89fa      	ldrh	r2, [r7, #14]
 8016a14:	429a      	cmp	r2, r3
 8016a16:	d204      	bcs.n	8016a22 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016a1e:	851a      	strh	r2, [r3, #40]	; 0x28
 8016a20:	e002      	b.n	8016a28 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	89fa      	ldrh	r2, [r7, #14]
 8016a26:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016a28:	6878      	ldr	r0, [r7, #4]
 8016a2a:	f7ff ff71 	bl	8016910 <tcp_update_rcv_ann_wnd>
 8016a2e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8016a30:	68bb      	ldr	r3, [r7, #8]
 8016a32:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8016a36:	d309      	bcc.n	8016a4c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	8b5b      	ldrh	r3, [r3, #26]
 8016a3c:	f043 0302 	orr.w	r3, r3, #2
 8016a40:	b29a      	uxth	r2, r3
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016a46:	6878      	ldr	r0, [r7, #4]
 8016a48:	f004 fbcc 	bl	801b1e4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8016a4c:	3710      	adds	r7, #16
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	bd80      	pop	{r7, pc}
 8016a52:	bf00      	nop
 8016a54:	08020c7c 	.word	0x08020c7c
 8016a58:	08020f18 	.word	0x08020f18
 8016a5c:	08020cc0 	.word	0x08020cc0
 8016a60:	08020f30 	.word	0x08020f30

08016a64 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8016a64:	b480      	push	{r7}
 8016a66:	b083      	sub	sp, #12
 8016a68:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8016a6e:	4b1e      	ldr	r3, [pc, #120]	; (8016ae8 <tcp_new_port+0x84>)
 8016a70:	881b      	ldrh	r3, [r3, #0]
 8016a72:	3301      	adds	r3, #1
 8016a74:	b29a      	uxth	r2, r3
 8016a76:	4b1c      	ldr	r3, [pc, #112]	; (8016ae8 <tcp_new_port+0x84>)
 8016a78:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8016a7a:	4b1b      	ldr	r3, [pc, #108]	; (8016ae8 <tcp_new_port+0x84>)
 8016a7c:	881b      	ldrh	r3, [r3, #0]
 8016a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016a82:	4293      	cmp	r3, r2
 8016a84:	d103      	bne.n	8016a8e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016a86:	4b18      	ldr	r3, [pc, #96]	; (8016ae8 <tcp_new_port+0x84>)
 8016a88:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016a8c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016a8e:	2300      	movs	r3, #0
 8016a90:	71fb      	strb	r3, [r7, #7]
 8016a92:	e01e      	b.n	8016ad2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016a94:	79fb      	ldrb	r3, [r7, #7]
 8016a96:	4a15      	ldr	r2, [pc, #84]	; (8016aec <tcp_new_port+0x88>)
 8016a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	603b      	str	r3, [r7, #0]
 8016aa0:	e011      	b.n	8016ac6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8016aa2:	683b      	ldr	r3, [r7, #0]
 8016aa4:	8ada      	ldrh	r2, [r3, #22]
 8016aa6:	4b10      	ldr	r3, [pc, #64]	; (8016ae8 <tcp_new_port+0x84>)
 8016aa8:	881b      	ldrh	r3, [r3, #0]
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	d108      	bne.n	8016ac0 <tcp_new_port+0x5c>
        n++;
 8016aae:	88bb      	ldrh	r3, [r7, #4]
 8016ab0:	3301      	adds	r3, #1
 8016ab2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8016ab4:	88bb      	ldrh	r3, [r7, #4]
 8016ab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016aba:	d3d8      	bcc.n	8016a6e <tcp_new_port+0xa>
          return 0;
 8016abc:	2300      	movs	r3, #0
 8016abe:	e00d      	b.n	8016adc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016ac0:	683b      	ldr	r3, [r7, #0]
 8016ac2:	68db      	ldr	r3, [r3, #12]
 8016ac4:	603b      	str	r3, [r7, #0]
 8016ac6:	683b      	ldr	r3, [r7, #0]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d1ea      	bne.n	8016aa2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016acc:	79fb      	ldrb	r3, [r7, #7]
 8016ace:	3301      	adds	r3, #1
 8016ad0:	71fb      	strb	r3, [r7, #7]
 8016ad2:	79fb      	ldrb	r3, [r7, #7]
 8016ad4:	2b03      	cmp	r3, #3
 8016ad6:	d9dd      	bls.n	8016a94 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8016ad8:	4b03      	ldr	r3, [pc, #12]	; (8016ae8 <tcp_new_port+0x84>)
 8016ada:	881b      	ldrh	r3, [r3, #0]
}
 8016adc:	4618      	mov	r0, r3
 8016ade:	370c      	adds	r7, #12
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae6:	4770      	bx	lr
 8016ae8:	20000050 	.word	0x20000050
 8016aec:	080337d8 	.word	0x080337d8

08016af0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8016af0:	b5b0      	push	{r4, r5, r7, lr}
 8016af2:	b090      	sub	sp, #64	; 0x40
 8016af4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8016af6:	2300      	movs	r3, #0
 8016af8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8016afc:	4b94      	ldr	r3, [pc, #592]	; (8016d50 <tcp_slowtmr+0x260>)
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	3301      	adds	r3, #1
 8016b02:	4a93      	ldr	r2, [pc, #588]	; (8016d50 <tcp_slowtmr+0x260>)
 8016b04:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8016b06:	4b93      	ldr	r3, [pc, #588]	; (8016d54 <tcp_slowtmr+0x264>)
 8016b08:	781b      	ldrb	r3, [r3, #0]
 8016b0a:	3301      	adds	r3, #1
 8016b0c:	b2da      	uxtb	r2, r3
 8016b0e:	4b91      	ldr	r3, [pc, #580]	; (8016d54 <tcp_slowtmr+0x264>)
 8016b10:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8016b12:	2300      	movs	r3, #0
 8016b14:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8016b16:	4b90      	ldr	r3, [pc, #576]	; (8016d58 <tcp_slowtmr+0x268>)
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8016b1c:	e29d      	b.n	801705a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8016b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b20:	7d1b      	ldrb	r3, [r3, #20]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d106      	bne.n	8016b34 <tcp_slowtmr+0x44>
 8016b26:	4b8d      	ldr	r3, [pc, #564]	; (8016d5c <tcp_slowtmr+0x26c>)
 8016b28:	f240 42be 	movw	r2, #1214	; 0x4be
 8016b2c:	498c      	ldr	r1, [pc, #560]	; (8016d60 <tcp_slowtmr+0x270>)
 8016b2e:	488d      	ldr	r0, [pc, #564]	; (8016d64 <tcp_slowtmr+0x274>)
 8016b30:	f008 fa28 	bl	801ef84 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8016b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b36:	7d1b      	ldrb	r3, [r3, #20]
 8016b38:	2b01      	cmp	r3, #1
 8016b3a:	d106      	bne.n	8016b4a <tcp_slowtmr+0x5a>
 8016b3c:	4b87      	ldr	r3, [pc, #540]	; (8016d5c <tcp_slowtmr+0x26c>)
 8016b3e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8016b42:	4989      	ldr	r1, [pc, #548]	; (8016d68 <tcp_slowtmr+0x278>)
 8016b44:	4887      	ldr	r0, [pc, #540]	; (8016d64 <tcp_slowtmr+0x274>)
 8016b46:	f008 fa1d 	bl	801ef84 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8016b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b4c:	7d1b      	ldrb	r3, [r3, #20]
 8016b4e:	2b0a      	cmp	r3, #10
 8016b50:	d106      	bne.n	8016b60 <tcp_slowtmr+0x70>
 8016b52:	4b82      	ldr	r3, [pc, #520]	; (8016d5c <tcp_slowtmr+0x26c>)
 8016b54:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8016b58:	4984      	ldr	r1, [pc, #528]	; (8016d6c <tcp_slowtmr+0x27c>)
 8016b5a:	4882      	ldr	r0, [pc, #520]	; (8016d64 <tcp_slowtmr+0x274>)
 8016b5c:	f008 fa12 	bl	801ef84 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8016b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b62:	7f9a      	ldrb	r2, [r3, #30]
 8016b64:	4b7b      	ldr	r3, [pc, #492]	; (8016d54 <tcp_slowtmr+0x264>)
 8016b66:	781b      	ldrb	r3, [r3, #0]
 8016b68:	429a      	cmp	r2, r3
 8016b6a:	d105      	bne.n	8016b78 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8016b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b6e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b72:	68db      	ldr	r3, [r3, #12]
 8016b74:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8016b76:	e270      	b.n	801705a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8016b78:	4b76      	ldr	r3, [pc, #472]	; (8016d54 <tcp_slowtmr+0x264>)
 8016b7a:	781a      	ldrb	r2, [r3, #0]
 8016b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b7e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8016b80:	2300      	movs	r3, #0
 8016b82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8016b86:	2300      	movs	r3, #0
 8016b88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8016b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b8e:	7d1b      	ldrb	r3, [r3, #20]
 8016b90:	2b02      	cmp	r3, #2
 8016b92:	d10a      	bne.n	8016baa <tcp_slowtmr+0xba>
 8016b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016b9a:	2b05      	cmp	r3, #5
 8016b9c:	d905      	bls.n	8016baa <tcp_slowtmr+0xba>
      ++pcb_remove;
 8016b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ba2:	3301      	adds	r3, #1
 8016ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016ba8:	e11e      	b.n	8016de8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8016baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016bb0:	2b0b      	cmp	r3, #11
 8016bb2:	d905      	bls.n	8016bc0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8016bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bb8:	3301      	adds	r3, #1
 8016bba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016bbe:	e113      	b.n	8016de8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8016bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bc2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d075      	beq.n	8016cb6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8016bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d006      	beq.n	8016be0 <tcp_slowtmr+0xf0>
 8016bd2:	4b62      	ldr	r3, [pc, #392]	; (8016d5c <tcp_slowtmr+0x26c>)
 8016bd4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8016bd8:	4965      	ldr	r1, [pc, #404]	; (8016d70 <tcp_slowtmr+0x280>)
 8016bda:	4862      	ldr	r0, [pc, #392]	; (8016d64 <tcp_slowtmr+0x274>)
 8016bdc:	f008 f9d2 	bl	801ef84 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8016be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d106      	bne.n	8016bf6 <tcp_slowtmr+0x106>
 8016be8:	4b5c      	ldr	r3, [pc, #368]	; (8016d5c <tcp_slowtmr+0x26c>)
 8016bea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8016bee:	4961      	ldr	r1, [pc, #388]	; (8016d74 <tcp_slowtmr+0x284>)
 8016bf0:	485c      	ldr	r0, [pc, #368]	; (8016d64 <tcp_slowtmr+0x274>)
 8016bf2:	f008 f9c7 	bl	801ef84 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8016bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bf8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016bfc:	2b0b      	cmp	r3, #11
 8016bfe:	d905      	bls.n	8016c0c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8016c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c04:	3301      	adds	r3, #1
 8016c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016c0a:	e0ed      	b.n	8016de8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8016c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c0e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016c12:	3b01      	subs	r3, #1
 8016c14:	4a58      	ldr	r2, [pc, #352]	; (8016d78 <tcp_slowtmr+0x288>)
 8016c16:	5cd3      	ldrb	r3, [r2, r3]
 8016c18:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8016c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c1c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016c20:	7c7a      	ldrb	r2, [r7, #17]
 8016c22:	429a      	cmp	r2, r3
 8016c24:	d907      	bls.n	8016c36 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8016c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016c2c:	3301      	adds	r3, #1
 8016c2e:	b2da      	uxtb	r2, r3
 8016c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c32:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8016c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c38:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016c3c:	7c7a      	ldrb	r2, [r7, #17]
 8016c3e:	429a      	cmp	r2, r3
 8016c40:	f200 80d2 	bhi.w	8016de8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8016c44:	2301      	movs	r3, #1
 8016c46:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8016c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d108      	bne.n	8016c64 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8016c52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c54:	f005 f980 	bl	801bf58 <tcp_zero_window_probe>
 8016c58:	4603      	mov	r3, r0
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d014      	beq.n	8016c88 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8016c5e:	2300      	movs	r3, #0
 8016c60:	623b      	str	r3, [r7, #32]
 8016c62:	e011      	b.n	8016c88 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8016c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016c6a:	4619      	mov	r1, r3
 8016c6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c6e:	f004 f833 	bl	801acd8 <tcp_split_unsent_seg>
 8016c72:	4603      	mov	r3, r0
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d107      	bne.n	8016c88 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8016c78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c7a:	f004 fab3 	bl	801b1e4 <tcp_output>
 8016c7e:	4603      	mov	r3, r0
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d101      	bne.n	8016c88 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8016c84:	2300      	movs	r3, #0
 8016c86:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8016c88:	6a3b      	ldr	r3, [r7, #32]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	f000 80ac 	beq.w	8016de8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8016c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c92:	2200      	movs	r2, #0
 8016c94:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8016c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016c9e:	2b06      	cmp	r3, #6
 8016ca0:	f200 80a2 	bhi.w	8016de8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8016ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ca6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016caa:	3301      	adds	r3, #1
 8016cac:	b2da      	uxtb	r2, r3
 8016cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cb0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8016cb4:	e098      	b.n	8016de8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8016cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cb8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	db0f      	blt.n	8016ce0 <tcp_slowtmr+0x1f0>
 8016cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cc2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016cc6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016cca:	4293      	cmp	r3, r2
 8016ccc:	d008      	beq.n	8016ce0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8016cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cd0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016cd4:	b29b      	uxth	r3, r3
 8016cd6:	3301      	adds	r3, #1
 8016cd8:	b29b      	uxth	r3, r3
 8016cda:	b21a      	sxth	r2, r3
 8016cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cde:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8016ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ce2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8016ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ce8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8016cec:	429a      	cmp	r2, r3
 8016cee:	db7b      	blt.n	8016de8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8016cf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016cf2:	f004 fd6f 	bl	801b7d4 <tcp_rexmit_rto_prepare>
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d007      	beq.n	8016d0c <tcp_slowtmr+0x21c>
 8016cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d171      	bne.n	8016de8 <tcp_slowtmr+0x2f8>
 8016d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d06d      	beq.n	8016de8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8016d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d0e:	7d1b      	ldrb	r3, [r3, #20]
 8016d10:	2b02      	cmp	r3, #2
 8016d12:	d03a      	beq.n	8016d8a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8016d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016d1a:	2b0c      	cmp	r3, #12
 8016d1c:	bf28      	it	cs
 8016d1e:	230c      	movcs	r3, #12
 8016d20:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8016d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d24:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016d28:	10db      	asrs	r3, r3, #3
 8016d2a:	b21b      	sxth	r3, r3
 8016d2c:	461a      	mov	r2, r3
 8016d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d30:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016d34:	4413      	add	r3, r2
 8016d36:	7efa      	ldrb	r2, [r7, #27]
 8016d38:	4910      	ldr	r1, [pc, #64]	; (8016d7c <tcp_slowtmr+0x28c>)
 8016d3a:	5c8a      	ldrb	r2, [r1, r2]
 8016d3c:	4093      	lsls	r3, r2
 8016d3e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8016d40:	697b      	ldr	r3, [r7, #20]
 8016d42:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8016d46:	4293      	cmp	r3, r2
 8016d48:	dc1a      	bgt.n	8016d80 <tcp_slowtmr+0x290>
 8016d4a:	697b      	ldr	r3, [r7, #20]
 8016d4c:	b21a      	sxth	r2, r3
 8016d4e:	e019      	b.n	8016d84 <tcp_slowtmr+0x294>
 8016d50:	20013d30 	.word	0x20013d30
 8016d54:	20004526 	.word	0x20004526
 8016d58:	20013d2c 	.word	0x20013d2c
 8016d5c:	08020c7c 	.word	0x08020c7c
 8016d60:	08020fc0 	.word	0x08020fc0
 8016d64:	08020cc0 	.word	0x08020cc0
 8016d68:	08020fec 	.word	0x08020fec
 8016d6c:	08021018 	.word	0x08021018
 8016d70:	08021048 	.word	0x08021048
 8016d74:	0802107c 	.word	0x0802107c
 8016d78:	080337d0 	.word	0x080337d0
 8016d7c:	080337c0 	.word	0x080337c0
 8016d80:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8016d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d8c:	2200      	movs	r2, #0
 8016d8e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8016d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016d9c:	4293      	cmp	r3, r2
 8016d9e:	bf28      	it	cs
 8016da0:	4613      	movcs	r3, r2
 8016da2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8016da4:	8a7b      	ldrh	r3, [r7, #18]
 8016da6:	085b      	lsrs	r3, r3, #1
 8016da8:	b29a      	uxth	r2, r3
 8016daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8016db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016db2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016db8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016dba:	005b      	lsls	r3, r3, #1
 8016dbc:	b29b      	uxth	r3, r3
 8016dbe:	429a      	cmp	r2, r3
 8016dc0:	d206      	bcs.n	8016dd0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8016dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016dc6:	005b      	lsls	r3, r3, #1
 8016dc8:	b29a      	uxth	r2, r3
 8016dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dcc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8016dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dd2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8016dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8016dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ddc:	2200      	movs	r2, #0
 8016dde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8016de2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016de4:	f004 fd66 	bl	801b8b4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8016de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dea:	7d1b      	ldrb	r3, [r3, #20]
 8016dec:	2b06      	cmp	r3, #6
 8016dee:	d111      	bne.n	8016e14 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8016df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016df2:	8b5b      	ldrh	r3, [r3, #26]
 8016df4:	f003 0310 	and.w	r3, r3, #16
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d00b      	beq.n	8016e14 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016dfc:	4b9c      	ldr	r3, [pc, #624]	; (8017070 <tcp_slowtmr+0x580>)
 8016dfe:	681a      	ldr	r2, [r3, #0]
 8016e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e02:	6a1b      	ldr	r3, [r3, #32]
 8016e04:	1ad3      	subs	r3, r2, r3
 8016e06:	2b28      	cmp	r3, #40	; 0x28
 8016e08:	d904      	bls.n	8016e14 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8016e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e0e:	3301      	adds	r3, #1
 8016e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e16:	7a5b      	ldrb	r3, [r3, #9]
 8016e18:	f003 0308 	and.w	r3, r3, #8
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d04a      	beq.n	8016eb6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8016e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e22:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016e24:	2b04      	cmp	r3, #4
 8016e26:	d003      	beq.n	8016e30 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8016e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e2a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8016e2c:	2b07      	cmp	r3, #7
 8016e2e:	d142      	bne.n	8016eb6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016e30:	4b8f      	ldr	r3, [pc, #572]	; (8017070 <tcp_slowtmr+0x580>)
 8016e32:	681a      	ldr	r2, [r3, #0]
 8016e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e36:	6a1b      	ldr	r3, [r3, #32]
 8016e38:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8016e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e3c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8016e40:	4b8c      	ldr	r3, [pc, #560]	; (8017074 <tcp_slowtmr+0x584>)
 8016e42:	440b      	add	r3, r1
 8016e44:	498c      	ldr	r1, [pc, #560]	; (8017078 <tcp_slowtmr+0x588>)
 8016e46:	fba1 1303 	umull	r1, r3, r1, r3
 8016e4a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016e4c:	429a      	cmp	r2, r3
 8016e4e:	d90a      	bls.n	8016e66 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8016e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e54:	3301      	adds	r3, #1
 8016e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8016e5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e5e:	3301      	adds	r3, #1
 8016e60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016e64:	e027      	b.n	8016eb6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016e66:	4b82      	ldr	r3, [pc, #520]	; (8017070 <tcp_slowtmr+0x580>)
 8016e68:	681a      	ldr	r2, [r3, #0]
 8016e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e6c:	6a1b      	ldr	r3, [r3, #32]
 8016e6e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8016e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e72:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8016e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e78:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	4b7f      	ldr	r3, [pc, #508]	; (801707c <tcp_slowtmr+0x58c>)
 8016e80:	fb03 f300 	mul.w	r3, r3, r0
 8016e84:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8016e86:	497c      	ldr	r1, [pc, #496]	; (8017078 <tcp_slowtmr+0x588>)
 8016e88:	fba1 1303 	umull	r1, r3, r1, r3
 8016e8c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016e8e:	429a      	cmp	r2, r3
 8016e90:	d911      	bls.n	8016eb6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8016e92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016e94:	f005 f820 	bl	801bed8 <tcp_keepalive>
 8016e98:	4603      	mov	r3, r0
 8016e9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8016e9e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d107      	bne.n	8016eb6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8016ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ea8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016eac:	3301      	adds	r3, #1
 8016eae:	b2da      	uxtb	r2, r3
 8016eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eb2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8016eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d011      	beq.n	8016ee2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8016ebe:	4b6c      	ldr	r3, [pc, #432]	; (8017070 <tcp_slowtmr+0x580>)
 8016ec0:	681a      	ldr	r2, [r3, #0]
 8016ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ec4:	6a1b      	ldr	r3, [r3, #32]
 8016ec6:	1ad2      	subs	r2, r2, r3
 8016ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8016ece:	4619      	mov	r1, r3
 8016ed0:	460b      	mov	r3, r1
 8016ed2:	005b      	lsls	r3, r3, #1
 8016ed4:	440b      	add	r3, r1
 8016ed6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8016ed8:	429a      	cmp	r2, r3
 8016eda:	d302      	bcc.n	8016ee2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8016edc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016ede:	f000 fecd 	bl	8017c7c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8016ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ee4:	7d1b      	ldrb	r3, [r3, #20]
 8016ee6:	2b03      	cmp	r3, #3
 8016ee8:	d10b      	bne.n	8016f02 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016eea:	4b61      	ldr	r3, [pc, #388]	; (8017070 <tcp_slowtmr+0x580>)
 8016eec:	681a      	ldr	r2, [r3, #0]
 8016eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ef0:	6a1b      	ldr	r3, [r3, #32]
 8016ef2:	1ad3      	subs	r3, r2, r3
 8016ef4:	2b28      	cmp	r3, #40	; 0x28
 8016ef6:	d904      	bls.n	8016f02 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8016ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016efc:	3301      	adds	r3, #1
 8016efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8016f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f04:	7d1b      	ldrb	r3, [r3, #20]
 8016f06:	2b09      	cmp	r3, #9
 8016f08:	d10b      	bne.n	8016f22 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016f0a:	4b59      	ldr	r3, [pc, #356]	; (8017070 <tcp_slowtmr+0x580>)
 8016f0c:	681a      	ldr	r2, [r3, #0]
 8016f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f10:	6a1b      	ldr	r3, [r3, #32]
 8016f12:	1ad3      	subs	r3, r2, r3
 8016f14:	2bf0      	cmp	r3, #240	; 0xf0
 8016f16:	d904      	bls.n	8016f22 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8016f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f1c:	3301      	adds	r3, #1
 8016f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d060      	beq.n	8016fec <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8016f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f30:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8016f32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016f34:	f000 fcee 	bl	8017914 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8016f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d010      	beq.n	8016f60 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8016f3e:	4b50      	ldr	r3, [pc, #320]	; (8017080 <tcp_slowtmr+0x590>)
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f44:	429a      	cmp	r2, r3
 8016f46:	d106      	bne.n	8016f56 <tcp_slowtmr+0x466>
 8016f48:	4b4e      	ldr	r3, [pc, #312]	; (8017084 <tcp_slowtmr+0x594>)
 8016f4a:	f240 526d 	movw	r2, #1389	; 0x56d
 8016f4e:	494e      	ldr	r1, [pc, #312]	; (8017088 <tcp_slowtmr+0x598>)
 8016f50:	484e      	ldr	r0, [pc, #312]	; (801708c <tcp_slowtmr+0x59c>)
 8016f52:	f008 f817 	bl	801ef84 <iprintf>
        prev->next = pcb->next;
 8016f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f58:	68da      	ldr	r2, [r3, #12]
 8016f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f5c:	60da      	str	r2, [r3, #12]
 8016f5e:	e00f      	b.n	8016f80 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8016f60:	4b47      	ldr	r3, [pc, #284]	; (8017080 <tcp_slowtmr+0x590>)
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f66:	429a      	cmp	r2, r3
 8016f68:	d006      	beq.n	8016f78 <tcp_slowtmr+0x488>
 8016f6a:	4b46      	ldr	r3, [pc, #280]	; (8017084 <tcp_slowtmr+0x594>)
 8016f6c:	f240 5271 	movw	r2, #1393	; 0x571
 8016f70:	4947      	ldr	r1, [pc, #284]	; (8017090 <tcp_slowtmr+0x5a0>)
 8016f72:	4846      	ldr	r0, [pc, #280]	; (801708c <tcp_slowtmr+0x59c>)
 8016f74:	f008 f806 	bl	801ef84 <iprintf>
        tcp_active_pcbs = pcb->next;
 8016f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f7a:	68db      	ldr	r3, [r3, #12]
 8016f7c:	4a40      	ldr	r2, [pc, #256]	; (8017080 <tcp_slowtmr+0x590>)
 8016f7e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8016f80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d013      	beq.n	8016fb0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f8a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8016f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f8e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016f90:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8016f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f94:	3304      	adds	r3, #4
 8016f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f98:	8ad2      	ldrh	r2, [r2, #22]
 8016f9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016f9c:	8b09      	ldrh	r1, [r1, #24]
 8016f9e:	9102      	str	r1, [sp, #8]
 8016fa0:	9201      	str	r2, [sp, #4]
 8016fa2:	9300      	str	r3, [sp, #0]
 8016fa4:	462b      	mov	r3, r5
 8016fa6:	4622      	mov	r2, r4
 8016fa8:	4601      	mov	r1, r0
 8016faa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016fac:	f004 fee0 	bl	801bd70 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8016fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fb2:	691b      	ldr	r3, [r3, #16]
 8016fb4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8016fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fb8:	7d1b      	ldrb	r3, [r3, #20]
 8016fba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8016fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fbe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8016fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fc2:	68db      	ldr	r3, [r3, #12]
 8016fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8016fc6:	6838      	ldr	r0, [r7, #0]
 8016fc8:	f7ff f842 	bl	8016050 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8016fcc:	4b31      	ldr	r3, [pc, #196]	; (8017094 <tcp_slowtmr+0x5a4>)
 8016fce:	2200      	movs	r2, #0
 8016fd0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d004      	beq.n	8016fe2 <tcp_slowtmr+0x4f2>
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	f06f 010c 	mvn.w	r1, #12
 8016fde:	68b8      	ldr	r0, [r7, #8]
 8016fe0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8016fe2:	4b2c      	ldr	r3, [pc, #176]	; (8017094 <tcp_slowtmr+0x5a4>)
 8016fe4:	781b      	ldrb	r3, [r3, #0]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d037      	beq.n	801705a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8016fea:	e592      	b.n	8016b12 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8016fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ff2:	68db      	ldr	r3, [r3, #12]
 8016ff4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8016ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ff8:	7f1b      	ldrb	r3, [r3, #28]
 8016ffa:	3301      	adds	r3, #1
 8016ffc:	b2da      	uxtb	r2, r3
 8016ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017000:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8017002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017004:	7f1a      	ldrb	r2, [r3, #28]
 8017006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017008:	7f5b      	ldrb	r3, [r3, #29]
 801700a:	429a      	cmp	r2, r3
 801700c:	d325      	bcc.n	801705a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801700e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017010:	2200      	movs	r2, #0
 8017012:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8017014:	4b1f      	ldr	r3, [pc, #124]	; (8017094 <tcp_slowtmr+0x5a4>)
 8017016:	2200      	movs	r2, #0
 8017018:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801701a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801701c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017020:	2b00      	cmp	r3, #0
 8017022:	d00b      	beq.n	801703c <tcp_slowtmr+0x54c>
 8017024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801702a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801702c:	6912      	ldr	r2, [r2, #16]
 801702e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017030:	4610      	mov	r0, r2
 8017032:	4798      	blx	r3
 8017034:	4603      	mov	r3, r0
 8017036:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801703a:	e002      	b.n	8017042 <tcp_slowtmr+0x552>
 801703c:	2300      	movs	r3, #0
 801703e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8017042:	4b14      	ldr	r3, [pc, #80]	; (8017094 <tcp_slowtmr+0x5a4>)
 8017044:	781b      	ldrb	r3, [r3, #0]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d000      	beq.n	801704c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801704a:	e562      	b.n	8016b12 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801704c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8017050:	2b00      	cmp	r3, #0
 8017052:	d102      	bne.n	801705a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8017054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017056:	f004 f8c5 	bl	801b1e4 <tcp_output>
  while (pcb != NULL) {
 801705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801705c:	2b00      	cmp	r3, #0
 801705e:	f47f ad5e 	bne.w	8016b1e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8017062:	2300      	movs	r3, #0
 8017064:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8017066:	4b0c      	ldr	r3, [pc, #48]	; (8017098 <tcp_slowtmr+0x5a8>)
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801706c:	e069      	b.n	8017142 <tcp_slowtmr+0x652>
 801706e:	bf00      	nop
 8017070:	20013d30 	.word	0x20013d30
 8017074:	000a4cb8 	.word	0x000a4cb8
 8017078:	10624dd3 	.word	0x10624dd3
 801707c:	000124f8 	.word	0x000124f8
 8017080:	20013d2c 	.word	0x20013d2c
 8017084:	08020c7c 	.word	0x08020c7c
 8017088:	080210b4 	.word	0x080210b4
 801708c:	08020cc0 	.word	0x08020cc0
 8017090:	080210e0 	.word	0x080210e0
 8017094:	20013d28 	.word	0x20013d28
 8017098:	20013d3c 	.word	0x20013d3c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801709c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801709e:	7d1b      	ldrb	r3, [r3, #20]
 80170a0:	2b0a      	cmp	r3, #10
 80170a2:	d006      	beq.n	80170b2 <tcp_slowtmr+0x5c2>
 80170a4:	4b2a      	ldr	r3, [pc, #168]	; (8017150 <tcp_slowtmr+0x660>)
 80170a6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80170aa:	492a      	ldr	r1, [pc, #168]	; (8017154 <tcp_slowtmr+0x664>)
 80170ac:	482a      	ldr	r0, [pc, #168]	; (8017158 <tcp_slowtmr+0x668>)
 80170ae:	f007 ff69 	bl	801ef84 <iprintf>
    pcb_remove = 0;
 80170b2:	2300      	movs	r3, #0
 80170b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80170b8:	4b28      	ldr	r3, [pc, #160]	; (801715c <tcp_slowtmr+0x66c>)
 80170ba:	681a      	ldr	r2, [r3, #0]
 80170bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170be:	6a1b      	ldr	r3, [r3, #32]
 80170c0:	1ad3      	subs	r3, r2, r3
 80170c2:	2bf0      	cmp	r3, #240	; 0xf0
 80170c4:	d904      	bls.n	80170d0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80170c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80170ca:	3301      	adds	r3, #1
 80170cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80170d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d02f      	beq.n	8017138 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80170d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80170da:	f000 fc1b 	bl	8017914 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80170de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d010      	beq.n	8017106 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80170e4:	4b1e      	ldr	r3, [pc, #120]	; (8017160 <tcp_slowtmr+0x670>)
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80170ea:	429a      	cmp	r2, r3
 80170ec:	d106      	bne.n	80170fc <tcp_slowtmr+0x60c>
 80170ee:	4b18      	ldr	r3, [pc, #96]	; (8017150 <tcp_slowtmr+0x660>)
 80170f0:	f240 52af 	movw	r2, #1455	; 0x5af
 80170f4:	491b      	ldr	r1, [pc, #108]	; (8017164 <tcp_slowtmr+0x674>)
 80170f6:	4818      	ldr	r0, [pc, #96]	; (8017158 <tcp_slowtmr+0x668>)
 80170f8:	f007 ff44 	bl	801ef84 <iprintf>
        prev->next = pcb->next;
 80170fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170fe:	68da      	ldr	r2, [r3, #12]
 8017100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017102:	60da      	str	r2, [r3, #12]
 8017104:	e00f      	b.n	8017126 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8017106:	4b16      	ldr	r3, [pc, #88]	; (8017160 <tcp_slowtmr+0x670>)
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801710c:	429a      	cmp	r2, r3
 801710e:	d006      	beq.n	801711e <tcp_slowtmr+0x62e>
 8017110:	4b0f      	ldr	r3, [pc, #60]	; (8017150 <tcp_slowtmr+0x660>)
 8017112:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8017116:	4914      	ldr	r1, [pc, #80]	; (8017168 <tcp_slowtmr+0x678>)
 8017118:	480f      	ldr	r0, [pc, #60]	; (8017158 <tcp_slowtmr+0x668>)
 801711a:	f007 ff33 	bl	801ef84 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801711e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017120:	68db      	ldr	r3, [r3, #12]
 8017122:	4a0f      	ldr	r2, [pc, #60]	; (8017160 <tcp_slowtmr+0x670>)
 8017124:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8017126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017128:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801712c:	68db      	ldr	r3, [r3, #12]
 801712e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8017130:	69f8      	ldr	r0, [r7, #28]
 8017132:	f7fe ff8d 	bl	8016050 <tcp_free>
 8017136:	e004      	b.n	8017142 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8017138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801713a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801713c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801713e:	68db      	ldr	r3, [r3, #12]
 8017140:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8017142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017144:	2b00      	cmp	r3, #0
 8017146:	d1a9      	bne.n	801709c <tcp_slowtmr+0x5ac>
    }
  }
}
 8017148:	bf00      	nop
 801714a:	3730      	adds	r7, #48	; 0x30
 801714c:	46bd      	mov	sp, r7
 801714e:	bdb0      	pop	{r4, r5, r7, pc}
 8017150:	08020c7c 	.word	0x08020c7c
 8017154:	0802110c 	.word	0x0802110c
 8017158:	08020cc0 	.word	0x08020cc0
 801715c:	20013d30 	.word	0x20013d30
 8017160:	20013d3c 	.word	0x20013d3c
 8017164:	0802113c 	.word	0x0802113c
 8017168:	08021164 	.word	0x08021164

0801716c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801716c:	b580      	push	{r7, lr}
 801716e:	b082      	sub	sp, #8
 8017170:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8017172:	4b2d      	ldr	r3, [pc, #180]	; (8017228 <tcp_fasttmr+0xbc>)
 8017174:	781b      	ldrb	r3, [r3, #0]
 8017176:	3301      	adds	r3, #1
 8017178:	b2da      	uxtb	r2, r3
 801717a:	4b2b      	ldr	r3, [pc, #172]	; (8017228 <tcp_fasttmr+0xbc>)
 801717c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801717e:	4b2b      	ldr	r3, [pc, #172]	; (801722c <tcp_fasttmr+0xc0>)
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017184:	e048      	b.n	8017218 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	7f9a      	ldrb	r2, [r3, #30]
 801718a:	4b27      	ldr	r3, [pc, #156]	; (8017228 <tcp_fasttmr+0xbc>)
 801718c:	781b      	ldrb	r3, [r3, #0]
 801718e:	429a      	cmp	r2, r3
 8017190:	d03f      	beq.n	8017212 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8017192:	4b25      	ldr	r3, [pc, #148]	; (8017228 <tcp_fasttmr+0xbc>)
 8017194:	781a      	ldrb	r2, [r3, #0]
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	8b5b      	ldrh	r3, [r3, #26]
 801719e:	f003 0301 	and.w	r3, r3, #1
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d010      	beq.n	80171c8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	8b5b      	ldrh	r3, [r3, #26]
 80171aa:	f043 0302 	orr.w	r3, r3, #2
 80171ae:	b29a      	uxth	r2, r3
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	f004 f815 	bl	801b1e4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	8b5b      	ldrh	r3, [r3, #26]
 80171be:	f023 0303 	bic.w	r3, r3, #3
 80171c2:	b29a      	uxth	r2, r3
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	8b5b      	ldrh	r3, [r3, #26]
 80171cc:	f003 0308 	and.w	r3, r3, #8
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d009      	beq.n	80171e8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	8b5b      	ldrh	r3, [r3, #26]
 80171d8:	f023 0308 	bic.w	r3, r3, #8
 80171dc:	b29a      	uxth	r2, r3
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80171e2:	6878      	ldr	r0, [r7, #4]
 80171e4:	f7ff f8c4 	bl	8016370 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	68db      	ldr	r3, [r3, #12]
 80171ec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d00a      	beq.n	801720c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80171f6:	4b0e      	ldr	r3, [pc, #56]	; (8017230 <tcp_fasttmr+0xc4>)
 80171f8:	2200      	movs	r2, #0
 80171fa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80171fc:	6878      	ldr	r0, [r7, #4]
 80171fe:	f000 f819 	bl	8017234 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8017202:	4b0b      	ldr	r3, [pc, #44]	; (8017230 <tcp_fasttmr+0xc4>)
 8017204:	781b      	ldrb	r3, [r3, #0]
 8017206:	2b00      	cmp	r3, #0
 8017208:	d000      	beq.n	801720c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801720a:	e7b8      	b.n	801717e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801720c:	683b      	ldr	r3, [r7, #0]
 801720e:	607b      	str	r3, [r7, #4]
 8017210:	e002      	b.n	8017218 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	68db      	ldr	r3, [r3, #12]
 8017216:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	2b00      	cmp	r3, #0
 801721c:	d1b3      	bne.n	8017186 <tcp_fasttmr+0x1a>
    }
  }
}
 801721e:	bf00      	nop
 8017220:	3708      	adds	r7, #8
 8017222:	46bd      	mov	sp, r7
 8017224:	bd80      	pop	{r7, pc}
 8017226:	bf00      	nop
 8017228:	20004526 	.word	0x20004526
 801722c:	20013d2c 	.word	0x20013d2c
 8017230:	20013d28 	.word	0x20013d28

08017234 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8017234:	b590      	push	{r4, r7, lr}
 8017236:	b085      	sub	sp, #20
 8017238:	af00      	add	r7, sp, #0
 801723a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d109      	bne.n	8017256 <tcp_process_refused_data+0x22>
 8017242:	4b37      	ldr	r3, [pc, #220]	; (8017320 <tcp_process_refused_data+0xec>)
 8017244:	f240 6209 	movw	r2, #1545	; 0x609
 8017248:	4936      	ldr	r1, [pc, #216]	; (8017324 <tcp_process_refused_data+0xf0>)
 801724a:	4837      	ldr	r0, [pc, #220]	; (8017328 <tcp_process_refused_data+0xf4>)
 801724c:	f007 fe9a 	bl	801ef84 <iprintf>
 8017250:	f06f 030f 	mvn.w	r3, #15
 8017254:	e060      	b.n	8017318 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801725a:	7b5b      	ldrb	r3, [r3, #13]
 801725c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017262:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	2200      	movs	r2, #0
 8017268:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017270:	2b00      	cmp	r3, #0
 8017272:	d00b      	beq.n	801728c <tcp_process_refused_data+0x58>
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	6918      	ldr	r0, [r3, #16]
 801727e:	2300      	movs	r3, #0
 8017280:	68ba      	ldr	r2, [r7, #8]
 8017282:	6879      	ldr	r1, [r7, #4]
 8017284:	47a0      	blx	r4
 8017286:	4603      	mov	r3, r0
 8017288:	73fb      	strb	r3, [r7, #15]
 801728a:	e007      	b.n	801729c <tcp_process_refused_data+0x68>
 801728c:	2300      	movs	r3, #0
 801728e:	68ba      	ldr	r2, [r7, #8]
 8017290:	6879      	ldr	r1, [r7, #4]
 8017292:	2000      	movs	r0, #0
 8017294:	f000 f8c0 	bl	8017418 <tcp_recv_null>
 8017298:	4603      	mov	r3, r0
 801729a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801729c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d12a      	bne.n	80172fa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80172a4:	7bbb      	ldrb	r3, [r7, #14]
 80172a6:	f003 0320 	and.w	r3, r3, #32
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d033      	beq.n	8017316 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80172b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80172b6:	d005      	beq.n	80172c4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80172bc:	3301      	adds	r3, #1
 80172be:	b29a      	uxth	r2, r3
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d00b      	beq.n	80172e6 <tcp_process_refused_data+0xb2>
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	6918      	ldr	r0, [r3, #16]
 80172d8:	2300      	movs	r3, #0
 80172da:	2200      	movs	r2, #0
 80172dc:	6879      	ldr	r1, [r7, #4]
 80172de:	47a0      	blx	r4
 80172e0:	4603      	mov	r3, r0
 80172e2:	73fb      	strb	r3, [r7, #15]
 80172e4:	e001      	b.n	80172ea <tcp_process_refused_data+0xb6>
 80172e6:	2300      	movs	r3, #0
 80172e8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80172ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172ee:	f113 0f0d 	cmn.w	r3, #13
 80172f2:	d110      	bne.n	8017316 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80172f4:	f06f 030c 	mvn.w	r3, #12
 80172f8:	e00e      	b.n	8017318 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80172fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172fe:	f113 0f0d 	cmn.w	r3, #13
 8017302:	d102      	bne.n	801730a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8017304:	f06f 030c 	mvn.w	r3, #12
 8017308:	e006      	b.n	8017318 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	68ba      	ldr	r2, [r7, #8]
 801730e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8017310:	f06f 0304 	mvn.w	r3, #4
 8017314:	e000      	b.n	8017318 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8017316:	2300      	movs	r3, #0
}
 8017318:	4618      	mov	r0, r3
 801731a:	3714      	adds	r7, #20
 801731c:	46bd      	mov	sp, r7
 801731e:	bd90      	pop	{r4, r7, pc}
 8017320:	08020c7c 	.word	0x08020c7c
 8017324:	0802118c 	.word	0x0802118c
 8017328:	08020cc0 	.word	0x08020cc0

0801732c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b084      	sub	sp, #16
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8017334:	e007      	b.n	8017346 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801733c:	6878      	ldr	r0, [r7, #4]
 801733e:	f000 f809 	bl	8017354 <tcp_seg_free>
    seg = next;
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	2b00      	cmp	r3, #0
 801734a:	d1f4      	bne.n	8017336 <tcp_segs_free+0xa>
  }
}
 801734c:	bf00      	nop
 801734e:	3710      	adds	r7, #16
 8017350:	46bd      	mov	sp, r7
 8017352:	bd80      	pop	{r7, pc}

08017354 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8017354:	b580      	push	{r7, lr}
 8017356:	b082      	sub	sp, #8
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	2b00      	cmp	r3, #0
 8017360:	d00c      	beq.n	801737c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	685b      	ldr	r3, [r3, #4]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d004      	beq.n	8017374 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	685b      	ldr	r3, [r3, #4]
 801736e:	4618      	mov	r0, r3
 8017370:	f7fe fbc2 	bl	8015af8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8017374:	6879      	ldr	r1, [r7, #4]
 8017376:	2003      	movs	r0, #3
 8017378:	f7fd fd1e 	bl	8014db8 <memp_free>
  }
}
 801737c:	bf00      	nop
 801737e:	3708      	adds	r7, #8
 8017380:	46bd      	mov	sp, r7
 8017382:	bd80      	pop	{r7, pc}

08017384 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b082      	sub	sp, #8
 8017388:	af00      	add	r7, sp, #0
 801738a:	6078      	str	r0, [r7, #4]
 801738c:	460b      	mov	r3, r1
 801738e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	2b00      	cmp	r3, #0
 8017394:	d107      	bne.n	80173a6 <tcp_setprio+0x22>
 8017396:	4b07      	ldr	r3, [pc, #28]	; (80173b4 <tcp_setprio+0x30>)
 8017398:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 801739c:	4906      	ldr	r1, [pc, #24]	; (80173b8 <tcp_setprio+0x34>)
 801739e:	4807      	ldr	r0, [pc, #28]	; (80173bc <tcp_setprio+0x38>)
 80173a0:	f007 fdf0 	bl	801ef84 <iprintf>
 80173a4:	e002      	b.n	80173ac <tcp_setprio+0x28>

  pcb->prio = prio;
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	78fa      	ldrb	r2, [r7, #3]
 80173aa:	755a      	strb	r2, [r3, #21]
}
 80173ac:	3708      	adds	r7, #8
 80173ae:	46bd      	mov	sp, r7
 80173b0:	bd80      	pop	{r7, pc}
 80173b2:	bf00      	nop
 80173b4:	08020c7c 	.word	0x08020c7c
 80173b8:	080211b4 	.word	0x080211b4
 80173bc:	08020cc0 	.word	0x08020cc0

080173c0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80173c0:	b580      	push	{r7, lr}
 80173c2:	b084      	sub	sp, #16
 80173c4:	af00      	add	r7, sp, #0
 80173c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d106      	bne.n	80173dc <tcp_seg_copy+0x1c>
 80173ce:	4b0f      	ldr	r3, [pc, #60]	; (801740c <tcp_seg_copy+0x4c>)
 80173d0:	f240 6282 	movw	r2, #1666	; 0x682
 80173d4:	490e      	ldr	r1, [pc, #56]	; (8017410 <tcp_seg_copy+0x50>)
 80173d6:	480f      	ldr	r0, [pc, #60]	; (8017414 <tcp_seg_copy+0x54>)
 80173d8:	f007 fdd4 	bl	801ef84 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80173dc:	2003      	movs	r0, #3
 80173de:	f7fd fc99 	bl	8014d14 <memp_malloc>
 80173e2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d101      	bne.n	80173ee <tcp_seg_copy+0x2e>
    return NULL;
 80173ea:	2300      	movs	r3, #0
 80173ec:	e00a      	b.n	8017404 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80173ee:	2210      	movs	r2, #16
 80173f0:	6879      	ldr	r1, [r7, #4]
 80173f2:	68f8      	ldr	r0, [r7, #12]
 80173f4:	f007 fdb3 	bl	801ef5e <memcpy>
  pbuf_ref(cseg->p);
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	685b      	ldr	r3, [r3, #4]
 80173fc:	4618      	mov	r0, r3
 80173fe:	f7fe fc21 	bl	8015c44 <pbuf_ref>
  return cseg;
 8017402:	68fb      	ldr	r3, [r7, #12]
}
 8017404:	4618      	mov	r0, r3
 8017406:	3710      	adds	r7, #16
 8017408:	46bd      	mov	sp, r7
 801740a:	bd80      	pop	{r7, pc}
 801740c:	08020c7c 	.word	0x08020c7c
 8017410:	080211d0 	.word	0x080211d0
 8017414:	08020cc0 	.word	0x08020cc0

08017418 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8017418:	b580      	push	{r7, lr}
 801741a:	b084      	sub	sp, #16
 801741c:	af00      	add	r7, sp, #0
 801741e:	60f8      	str	r0, [r7, #12]
 8017420:	60b9      	str	r1, [r7, #8]
 8017422:	607a      	str	r2, [r7, #4]
 8017424:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8017426:	68bb      	ldr	r3, [r7, #8]
 8017428:	2b00      	cmp	r3, #0
 801742a:	d109      	bne.n	8017440 <tcp_recv_null+0x28>
 801742c:	4b12      	ldr	r3, [pc, #72]	; (8017478 <tcp_recv_null+0x60>)
 801742e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017432:	4912      	ldr	r1, [pc, #72]	; (801747c <tcp_recv_null+0x64>)
 8017434:	4812      	ldr	r0, [pc, #72]	; (8017480 <tcp_recv_null+0x68>)
 8017436:	f007 fda5 	bl	801ef84 <iprintf>
 801743a:	f06f 030f 	mvn.w	r3, #15
 801743e:	e016      	b.n	801746e <tcp_recv_null+0x56>

  if (p != NULL) {
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d009      	beq.n	801745a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	891b      	ldrh	r3, [r3, #8]
 801744a:	4619      	mov	r1, r3
 801744c:	68b8      	ldr	r0, [r7, #8]
 801744e:	f7ff fab9 	bl	80169c4 <tcp_recved>
    pbuf_free(p);
 8017452:	6878      	ldr	r0, [r7, #4]
 8017454:	f7fe fb50 	bl	8015af8 <pbuf_free>
 8017458:	e008      	b.n	801746c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801745a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d104      	bne.n	801746c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8017462:	68b8      	ldr	r0, [r7, #8]
 8017464:	f7fe ffea 	bl	801643c <tcp_close>
 8017468:	4603      	mov	r3, r0
 801746a:	e000      	b.n	801746e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801746c:	2300      	movs	r3, #0
}
 801746e:	4618      	mov	r0, r3
 8017470:	3710      	adds	r7, #16
 8017472:	46bd      	mov	sp, r7
 8017474:	bd80      	pop	{r7, pc}
 8017476:	bf00      	nop
 8017478:	08020c7c 	.word	0x08020c7c
 801747c:	080211ec 	.word	0x080211ec
 8017480:	08020cc0 	.word	0x08020cc0

08017484 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8017484:	b580      	push	{r7, lr}
 8017486:	b086      	sub	sp, #24
 8017488:	af00      	add	r7, sp, #0
 801748a:	4603      	mov	r3, r0
 801748c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801748e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017492:	2b00      	cmp	r3, #0
 8017494:	db01      	blt.n	801749a <tcp_kill_prio+0x16>
 8017496:	79fb      	ldrb	r3, [r7, #7]
 8017498:	e000      	b.n	801749c <tcp_kill_prio+0x18>
 801749a:	237f      	movs	r3, #127	; 0x7f
 801749c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801749e:	7afb      	ldrb	r3, [r7, #11]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d034      	beq.n	801750e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80174a4:	7afb      	ldrb	r3, [r7, #11]
 80174a6:	3b01      	subs	r3, #1
 80174a8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80174aa:	2300      	movs	r3, #0
 80174ac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80174ae:	2300      	movs	r3, #0
 80174b0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80174b2:	4b19      	ldr	r3, [pc, #100]	; (8017518 <tcp_kill_prio+0x94>)
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	617b      	str	r3, [r7, #20]
 80174b8:	e01f      	b.n	80174fa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80174ba:	697b      	ldr	r3, [r7, #20]
 80174bc:	7d5b      	ldrb	r3, [r3, #21]
 80174be:	7afa      	ldrb	r2, [r7, #11]
 80174c0:	429a      	cmp	r2, r3
 80174c2:	d80c      	bhi.n	80174de <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80174c4:	697b      	ldr	r3, [r7, #20]
 80174c6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80174c8:	7afa      	ldrb	r2, [r7, #11]
 80174ca:	429a      	cmp	r2, r3
 80174cc:	d112      	bne.n	80174f4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80174ce:	4b13      	ldr	r3, [pc, #76]	; (801751c <tcp_kill_prio+0x98>)
 80174d0:	681a      	ldr	r2, [r3, #0]
 80174d2:	697b      	ldr	r3, [r7, #20]
 80174d4:	6a1b      	ldr	r3, [r3, #32]
 80174d6:	1ad3      	subs	r3, r2, r3
 80174d8:	68fa      	ldr	r2, [r7, #12]
 80174da:	429a      	cmp	r2, r3
 80174dc:	d80a      	bhi.n	80174f4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80174de:	4b0f      	ldr	r3, [pc, #60]	; (801751c <tcp_kill_prio+0x98>)
 80174e0:	681a      	ldr	r2, [r3, #0]
 80174e2:	697b      	ldr	r3, [r7, #20]
 80174e4:	6a1b      	ldr	r3, [r3, #32]
 80174e6:	1ad3      	subs	r3, r2, r3
 80174e8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80174ea:	697b      	ldr	r3, [r7, #20]
 80174ec:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80174ee:	697b      	ldr	r3, [r7, #20]
 80174f0:	7d5b      	ldrb	r3, [r3, #21]
 80174f2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80174f4:	697b      	ldr	r3, [r7, #20]
 80174f6:	68db      	ldr	r3, [r3, #12]
 80174f8:	617b      	str	r3, [r7, #20]
 80174fa:	697b      	ldr	r3, [r7, #20]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d1dc      	bne.n	80174ba <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8017500:	693b      	ldr	r3, [r7, #16]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d004      	beq.n	8017510 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017506:	6938      	ldr	r0, [r7, #16]
 8017508:	f7ff f882 	bl	8016610 <tcp_abort>
 801750c:	e000      	b.n	8017510 <tcp_kill_prio+0x8c>
    return;
 801750e:	bf00      	nop
  }
}
 8017510:	3718      	adds	r7, #24
 8017512:	46bd      	mov	sp, r7
 8017514:	bd80      	pop	{r7, pc}
 8017516:	bf00      	nop
 8017518:	20013d2c 	.word	0x20013d2c
 801751c:	20013d30 	.word	0x20013d30

08017520 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b086      	sub	sp, #24
 8017524:	af00      	add	r7, sp, #0
 8017526:	4603      	mov	r3, r0
 8017528:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801752a:	79fb      	ldrb	r3, [r7, #7]
 801752c:	2b08      	cmp	r3, #8
 801752e:	d009      	beq.n	8017544 <tcp_kill_state+0x24>
 8017530:	79fb      	ldrb	r3, [r7, #7]
 8017532:	2b09      	cmp	r3, #9
 8017534:	d006      	beq.n	8017544 <tcp_kill_state+0x24>
 8017536:	4b1a      	ldr	r3, [pc, #104]	; (80175a0 <tcp_kill_state+0x80>)
 8017538:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801753c:	4919      	ldr	r1, [pc, #100]	; (80175a4 <tcp_kill_state+0x84>)
 801753e:	481a      	ldr	r0, [pc, #104]	; (80175a8 <tcp_kill_state+0x88>)
 8017540:	f007 fd20 	bl	801ef84 <iprintf>

  inactivity = 0;
 8017544:	2300      	movs	r3, #0
 8017546:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017548:	2300      	movs	r3, #0
 801754a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801754c:	4b17      	ldr	r3, [pc, #92]	; (80175ac <tcp_kill_state+0x8c>)
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	617b      	str	r3, [r7, #20]
 8017552:	e017      	b.n	8017584 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8017554:	697b      	ldr	r3, [r7, #20]
 8017556:	7d1b      	ldrb	r3, [r3, #20]
 8017558:	79fa      	ldrb	r2, [r7, #7]
 801755a:	429a      	cmp	r2, r3
 801755c:	d10f      	bne.n	801757e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801755e:	4b14      	ldr	r3, [pc, #80]	; (80175b0 <tcp_kill_state+0x90>)
 8017560:	681a      	ldr	r2, [r3, #0]
 8017562:	697b      	ldr	r3, [r7, #20]
 8017564:	6a1b      	ldr	r3, [r3, #32]
 8017566:	1ad3      	subs	r3, r2, r3
 8017568:	68fa      	ldr	r2, [r7, #12]
 801756a:	429a      	cmp	r2, r3
 801756c:	d807      	bhi.n	801757e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801756e:	4b10      	ldr	r3, [pc, #64]	; (80175b0 <tcp_kill_state+0x90>)
 8017570:	681a      	ldr	r2, [r3, #0]
 8017572:	697b      	ldr	r3, [r7, #20]
 8017574:	6a1b      	ldr	r3, [r3, #32]
 8017576:	1ad3      	subs	r3, r2, r3
 8017578:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801757a:	697b      	ldr	r3, [r7, #20]
 801757c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801757e:	697b      	ldr	r3, [r7, #20]
 8017580:	68db      	ldr	r3, [r3, #12]
 8017582:	617b      	str	r3, [r7, #20]
 8017584:	697b      	ldr	r3, [r7, #20]
 8017586:	2b00      	cmp	r3, #0
 8017588:	d1e4      	bne.n	8017554 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801758a:	693b      	ldr	r3, [r7, #16]
 801758c:	2b00      	cmp	r3, #0
 801758e:	d003      	beq.n	8017598 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8017590:	2100      	movs	r1, #0
 8017592:	6938      	ldr	r0, [r7, #16]
 8017594:	f7fe ff7e 	bl	8016494 <tcp_abandon>
  }
}
 8017598:	bf00      	nop
 801759a:	3718      	adds	r7, #24
 801759c:	46bd      	mov	sp, r7
 801759e:	bd80      	pop	{r7, pc}
 80175a0:	08020c7c 	.word	0x08020c7c
 80175a4:	08021208 	.word	0x08021208
 80175a8:	08020cc0 	.word	0x08020cc0
 80175ac:	20013d2c 	.word	0x20013d2c
 80175b0:	20013d30 	.word	0x20013d30

080175b4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80175b4:	b580      	push	{r7, lr}
 80175b6:	b084      	sub	sp, #16
 80175b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80175ba:	2300      	movs	r3, #0
 80175bc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80175be:	2300      	movs	r3, #0
 80175c0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80175c2:	4b12      	ldr	r3, [pc, #72]	; (801760c <tcp_kill_timewait+0x58>)
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	60fb      	str	r3, [r7, #12]
 80175c8:	e012      	b.n	80175f0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80175ca:	4b11      	ldr	r3, [pc, #68]	; (8017610 <tcp_kill_timewait+0x5c>)
 80175cc:	681a      	ldr	r2, [r3, #0]
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	6a1b      	ldr	r3, [r3, #32]
 80175d2:	1ad3      	subs	r3, r2, r3
 80175d4:	687a      	ldr	r2, [r7, #4]
 80175d6:	429a      	cmp	r2, r3
 80175d8:	d807      	bhi.n	80175ea <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80175da:	4b0d      	ldr	r3, [pc, #52]	; (8017610 <tcp_kill_timewait+0x5c>)
 80175dc:	681a      	ldr	r2, [r3, #0]
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	6a1b      	ldr	r3, [r3, #32]
 80175e2:	1ad3      	subs	r3, r2, r3
 80175e4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	68db      	ldr	r3, [r3, #12]
 80175ee:	60fb      	str	r3, [r7, #12]
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d1e9      	bne.n	80175ca <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80175f6:	68bb      	ldr	r3, [r7, #8]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d002      	beq.n	8017602 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80175fc:	68b8      	ldr	r0, [r7, #8]
 80175fe:	f7ff f807 	bl	8016610 <tcp_abort>
  }
}
 8017602:	bf00      	nop
 8017604:	3710      	adds	r7, #16
 8017606:	46bd      	mov	sp, r7
 8017608:	bd80      	pop	{r7, pc}
 801760a:	bf00      	nop
 801760c:	20013d3c 	.word	0x20013d3c
 8017610:	20013d30 	.word	0x20013d30

08017614 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b082      	sub	sp, #8
 8017618:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801761a:	4b10      	ldr	r3, [pc, #64]	; (801765c <tcp_handle_closepend+0x48>)
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017620:	e014      	b.n	801764c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	68db      	ldr	r3, [r3, #12]
 8017626:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	8b5b      	ldrh	r3, [r3, #26]
 801762c:	f003 0308 	and.w	r3, r3, #8
 8017630:	2b00      	cmp	r3, #0
 8017632:	d009      	beq.n	8017648 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	8b5b      	ldrh	r3, [r3, #26]
 8017638:	f023 0308 	bic.w	r3, r3, #8
 801763c:	b29a      	uxth	r2, r3
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8017642:	6878      	ldr	r0, [r7, #4]
 8017644:	f7fe fe94 	bl	8016370 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8017648:	683b      	ldr	r3, [r7, #0]
 801764a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d1e7      	bne.n	8017622 <tcp_handle_closepend+0xe>
  }
}
 8017652:	bf00      	nop
 8017654:	3708      	adds	r7, #8
 8017656:	46bd      	mov	sp, r7
 8017658:	bd80      	pop	{r7, pc}
 801765a:	bf00      	nop
 801765c:	20013d2c 	.word	0x20013d2c

08017660 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8017660:	b580      	push	{r7, lr}
 8017662:	b084      	sub	sp, #16
 8017664:	af00      	add	r7, sp, #0
 8017666:	4603      	mov	r3, r0
 8017668:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801766a:	2001      	movs	r0, #1
 801766c:	f7fd fb52 	bl	8014d14 <memp_malloc>
 8017670:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	2b00      	cmp	r3, #0
 8017676:	d126      	bne.n	80176c6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8017678:	f7ff ffcc 	bl	8017614 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801767c:	f7ff ff9a 	bl	80175b4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017680:	2001      	movs	r0, #1
 8017682:	f7fd fb47 	bl	8014d14 <memp_malloc>
 8017686:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d11b      	bne.n	80176c6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801768e:	2009      	movs	r0, #9
 8017690:	f7ff ff46 	bl	8017520 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017694:	2001      	movs	r0, #1
 8017696:	f7fd fb3d 	bl	8014d14 <memp_malloc>
 801769a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d111      	bne.n	80176c6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80176a2:	2008      	movs	r0, #8
 80176a4:	f7ff ff3c 	bl	8017520 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80176a8:	2001      	movs	r0, #1
 80176aa:	f7fd fb33 	bl	8014d14 <memp_malloc>
 80176ae:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d107      	bne.n	80176c6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80176b6:	79fb      	ldrb	r3, [r7, #7]
 80176b8:	4618      	mov	r0, r3
 80176ba:	f7ff fee3 	bl	8017484 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80176be:	2001      	movs	r0, #1
 80176c0:	f7fd fb28 	bl	8014d14 <memp_malloc>
 80176c4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d03f      	beq.n	801774c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80176cc:	229c      	movs	r2, #156	; 0x9c
 80176ce:	2100      	movs	r1, #0
 80176d0:	68f8      	ldr	r0, [r7, #12]
 80176d2:	f007 fc4f 	bl	801ef74 <memset>
    pcb->prio = prio;
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	79fa      	ldrb	r2, [r7, #7]
 80176da:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80176e2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80176ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	22ff      	movs	r2, #255	; 0xff
 80176fa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017702:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	2206      	movs	r2, #6
 8017708:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	2206      	movs	r2, #6
 8017710:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017718:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	2201      	movs	r2, #1
 801771e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8017722:	4b0d      	ldr	r3, [pc, #52]	; (8017758 <tcp_alloc+0xf8>)
 8017724:	681a      	ldr	r2, [r3, #0]
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801772a:	4b0c      	ldr	r3, [pc, #48]	; (801775c <tcp_alloc+0xfc>)
 801772c:	781a      	ldrb	r2, [r3, #0]
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017738:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	4a08      	ldr	r2, [pc, #32]	; (8017760 <tcp_alloc+0x100>)
 8017740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	4a07      	ldr	r2, [pc, #28]	; (8017764 <tcp_alloc+0x104>)
 8017748:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801774c:	68fb      	ldr	r3, [r7, #12]
}
 801774e:	4618      	mov	r0, r3
 8017750:	3710      	adds	r7, #16
 8017752:	46bd      	mov	sp, r7
 8017754:	bd80      	pop	{r7, pc}
 8017756:	bf00      	nop
 8017758:	20013d30 	.word	0x20013d30
 801775c:	20004526 	.word	0x20004526
 8017760:	08017419 	.word	0x08017419
 8017764:	006ddd00 	.word	0x006ddd00

08017768 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8017768:	b580      	push	{r7, lr}
 801776a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 801776c:	2040      	movs	r0, #64	; 0x40
 801776e:	f7ff ff77 	bl	8017660 <tcp_alloc>
 8017772:	4603      	mov	r3, r0
}
 8017774:	4618      	mov	r0, r3
 8017776:	bd80      	pop	{r7, pc}

08017778 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8017778:	b580      	push	{r7, lr}
 801777a:	b084      	sub	sp, #16
 801777c:	af00      	add	r7, sp, #0
 801777e:	4603      	mov	r3, r0
 8017780:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8017782:	2040      	movs	r0, #64	; 0x40
 8017784:	f7ff ff6c 	bl	8017660 <tcp_alloc>
 8017788:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801778a:	68fb      	ldr	r3, [r7, #12]
}
 801778c:	4618      	mov	r0, r3
 801778e:	3710      	adds	r7, #16
 8017790:	46bd      	mov	sp, r7
 8017792:	bd80      	pop	{r7, pc}

08017794 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8017794:	b480      	push	{r7}
 8017796:	b083      	sub	sp, #12
 8017798:	af00      	add	r7, sp, #0
 801779a:	6078      	str	r0, [r7, #4]
 801779c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d002      	beq.n	80177aa <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	683a      	ldr	r2, [r7, #0]
 80177a8:	611a      	str	r2, [r3, #16]
  }
}
 80177aa:	bf00      	nop
 80177ac:	370c      	adds	r7, #12
 80177ae:	46bd      	mov	sp, r7
 80177b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b4:	4770      	bx	lr
	...

080177b8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b082      	sub	sp, #8
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
 80177c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d00e      	beq.n	80177e6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	7d1b      	ldrb	r3, [r3, #20]
 80177cc:	2b01      	cmp	r3, #1
 80177ce:	d106      	bne.n	80177de <tcp_recv+0x26>
 80177d0:	4b07      	ldr	r3, [pc, #28]	; (80177f0 <tcp_recv+0x38>)
 80177d2:	f240 72df 	movw	r2, #2015	; 0x7df
 80177d6:	4907      	ldr	r1, [pc, #28]	; (80177f4 <tcp_recv+0x3c>)
 80177d8:	4807      	ldr	r0, [pc, #28]	; (80177f8 <tcp_recv+0x40>)
 80177da:	f007 fbd3 	bl	801ef84 <iprintf>
    pcb->recv = recv;
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	683a      	ldr	r2, [r7, #0]
 80177e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80177e6:	bf00      	nop
 80177e8:	3708      	adds	r7, #8
 80177ea:	46bd      	mov	sp, r7
 80177ec:	bd80      	pop	{r7, pc}
 80177ee:	bf00      	nop
 80177f0:	08020c7c 	.word	0x08020c7c
 80177f4:	08021218 	.word	0x08021218
 80177f8:	08020cc0 	.word	0x08020cc0

080177fc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80177fc:	b580      	push	{r7, lr}
 80177fe:	b082      	sub	sp, #8
 8017800:	af00      	add	r7, sp, #0
 8017802:	6078      	str	r0, [r7, #4]
 8017804:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	2b00      	cmp	r3, #0
 801780a:	d00e      	beq.n	801782a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	7d1b      	ldrb	r3, [r3, #20]
 8017810:	2b01      	cmp	r3, #1
 8017812:	d106      	bne.n	8017822 <tcp_sent+0x26>
 8017814:	4b07      	ldr	r3, [pc, #28]	; (8017834 <tcp_sent+0x38>)
 8017816:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801781a:	4907      	ldr	r1, [pc, #28]	; (8017838 <tcp_sent+0x3c>)
 801781c:	4807      	ldr	r0, [pc, #28]	; (801783c <tcp_sent+0x40>)
 801781e:	f007 fbb1 	bl	801ef84 <iprintf>
    pcb->sent = sent;
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	683a      	ldr	r2, [r7, #0]
 8017826:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801782a:	bf00      	nop
 801782c:	3708      	adds	r7, #8
 801782e:	46bd      	mov	sp, r7
 8017830:	bd80      	pop	{r7, pc}
 8017832:	bf00      	nop
 8017834:	08020c7c 	.word	0x08020c7c
 8017838:	08021240 	.word	0x08021240
 801783c:	08020cc0 	.word	0x08020cc0

08017840 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8017840:	b580      	push	{r7, lr}
 8017842:	b082      	sub	sp, #8
 8017844:	af00      	add	r7, sp, #0
 8017846:	6078      	str	r0, [r7, #4]
 8017848:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d00e      	beq.n	801786e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	7d1b      	ldrb	r3, [r3, #20]
 8017854:	2b01      	cmp	r3, #1
 8017856:	d106      	bne.n	8017866 <tcp_err+0x26>
 8017858:	4b07      	ldr	r3, [pc, #28]	; (8017878 <tcp_err+0x38>)
 801785a:	f640 020d 	movw	r2, #2061	; 0x80d
 801785e:	4907      	ldr	r1, [pc, #28]	; (801787c <tcp_err+0x3c>)
 8017860:	4807      	ldr	r0, [pc, #28]	; (8017880 <tcp_err+0x40>)
 8017862:	f007 fb8f 	bl	801ef84 <iprintf>
    pcb->errf = err;
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	683a      	ldr	r2, [r7, #0]
 801786a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801786e:	bf00      	nop
 8017870:	3708      	adds	r7, #8
 8017872:	46bd      	mov	sp, r7
 8017874:	bd80      	pop	{r7, pc}
 8017876:	bf00      	nop
 8017878:	08020c7c 	.word	0x08020c7c
 801787c:	08021268 	.word	0x08021268
 8017880:	08020cc0 	.word	0x08020cc0

08017884 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8017884:	b480      	push	{r7}
 8017886:	b085      	sub	sp, #20
 8017888:	af00      	add	r7, sp, #0
 801788a:	6078      	str	r0, [r7, #4]
 801788c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d008      	beq.n	80178a6 <tcp_accept+0x22>
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	7d1b      	ldrb	r3, [r3, #20]
 8017898:	2b01      	cmp	r3, #1
 801789a:	d104      	bne.n	80178a6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	683a      	ldr	r2, [r7, #0]
 80178a4:	619a      	str	r2, [r3, #24]
  }
}
 80178a6:	bf00      	nop
 80178a8:	3714      	adds	r7, #20
 80178aa:	46bd      	mov	sp, r7
 80178ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178b0:	4770      	bx	lr
	...

080178b4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b084      	sub	sp, #16
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	60f8      	str	r0, [r7, #12]
 80178bc:	60b9      	str	r1, [r7, #8]
 80178be:	4613      	mov	r3, r2
 80178c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d107      	bne.n	80178d8 <tcp_poll+0x24>
 80178c8:	4b0e      	ldr	r3, [pc, #56]	; (8017904 <tcp_poll+0x50>)
 80178ca:	f640 023d 	movw	r2, #2109	; 0x83d
 80178ce:	490e      	ldr	r1, [pc, #56]	; (8017908 <tcp_poll+0x54>)
 80178d0:	480e      	ldr	r0, [pc, #56]	; (801790c <tcp_poll+0x58>)
 80178d2:	f007 fb57 	bl	801ef84 <iprintf>
 80178d6:	e011      	b.n	80178fc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	7d1b      	ldrb	r3, [r3, #20]
 80178dc:	2b01      	cmp	r3, #1
 80178de:	d106      	bne.n	80178ee <tcp_poll+0x3a>
 80178e0:	4b08      	ldr	r3, [pc, #32]	; (8017904 <tcp_poll+0x50>)
 80178e2:	f640 023e 	movw	r2, #2110	; 0x83e
 80178e6:	490a      	ldr	r1, [pc, #40]	; (8017910 <tcp_poll+0x5c>)
 80178e8:	4808      	ldr	r0, [pc, #32]	; (801790c <tcp_poll+0x58>)
 80178ea:	f007 fb4b 	bl	801ef84 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	68ba      	ldr	r2, [r7, #8]
 80178f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	79fa      	ldrb	r2, [r7, #7]
 80178fa:	775a      	strb	r2, [r3, #29]
}
 80178fc:	3710      	adds	r7, #16
 80178fe:	46bd      	mov	sp, r7
 8017900:	bd80      	pop	{r7, pc}
 8017902:	bf00      	nop
 8017904:	08020c7c 	.word	0x08020c7c
 8017908:	08021290 	.word	0x08021290
 801790c:	08020cc0 	.word	0x08020cc0
 8017910:	080212a8 	.word	0x080212a8

08017914 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8017914:	b580      	push	{r7, lr}
 8017916:	b082      	sub	sp, #8
 8017918:	af00      	add	r7, sp, #0
 801791a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	2b00      	cmp	r3, #0
 8017920:	d107      	bne.n	8017932 <tcp_pcb_purge+0x1e>
 8017922:	4b21      	ldr	r3, [pc, #132]	; (80179a8 <tcp_pcb_purge+0x94>)
 8017924:	f640 0251 	movw	r2, #2129	; 0x851
 8017928:	4920      	ldr	r1, [pc, #128]	; (80179ac <tcp_pcb_purge+0x98>)
 801792a:	4821      	ldr	r0, [pc, #132]	; (80179b0 <tcp_pcb_purge+0x9c>)
 801792c:	f007 fb2a 	bl	801ef84 <iprintf>
 8017930:	e037      	b.n	80179a2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	7d1b      	ldrb	r3, [r3, #20]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d033      	beq.n	80179a2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801793e:	2b0a      	cmp	r3, #10
 8017940:	d02f      	beq.n	80179a2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8017946:	2b01      	cmp	r3, #1
 8017948:	d02b      	beq.n	80179a2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801794e:	2b00      	cmp	r3, #0
 8017950:	d007      	beq.n	8017962 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017956:	4618      	mov	r0, r3
 8017958:	f7fe f8ce 	bl	8015af8 <pbuf_free>
      pcb->refused_data = NULL;
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	2200      	movs	r2, #0
 8017960:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017966:	2b00      	cmp	r3, #0
 8017968:	d002      	beq.n	8017970 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801796a:	6878      	ldr	r0, [r7, #4]
 801796c:	f000 f986 	bl	8017c7c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017976:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801797c:	4618      	mov	r0, r3
 801797e:	f7ff fcd5 	bl	801732c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017986:	4618      	mov	r0, r3
 8017988:	f7ff fcd0 	bl	801732c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	2200      	movs	r2, #0
 8017990:	66da      	str	r2, [r3, #108]	; 0x6c
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	2200      	movs	r2, #0
 801799e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80179a2:	3708      	adds	r7, #8
 80179a4:	46bd      	mov	sp, r7
 80179a6:	bd80      	pop	{r7, pc}
 80179a8:	08020c7c 	.word	0x08020c7c
 80179ac:	080212c8 	.word	0x080212c8
 80179b0:	08020cc0 	.word	0x08020cc0

080179b4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80179b4:	b580      	push	{r7, lr}
 80179b6:	b084      	sub	sp, #16
 80179b8:	af00      	add	r7, sp, #0
 80179ba:	6078      	str	r0, [r7, #4]
 80179bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80179be:	683b      	ldr	r3, [r7, #0]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d106      	bne.n	80179d2 <tcp_pcb_remove+0x1e>
 80179c4:	4b3e      	ldr	r3, [pc, #248]	; (8017ac0 <tcp_pcb_remove+0x10c>)
 80179c6:	f640 0283 	movw	r2, #2179	; 0x883
 80179ca:	493e      	ldr	r1, [pc, #248]	; (8017ac4 <tcp_pcb_remove+0x110>)
 80179cc:	483e      	ldr	r0, [pc, #248]	; (8017ac8 <tcp_pcb_remove+0x114>)
 80179ce:	f007 fad9 	bl	801ef84 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d106      	bne.n	80179e6 <tcp_pcb_remove+0x32>
 80179d8:	4b39      	ldr	r3, [pc, #228]	; (8017ac0 <tcp_pcb_remove+0x10c>)
 80179da:	f640 0284 	movw	r2, #2180	; 0x884
 80179de:	493b      	ldr	r1, [pc, #236]	; (8017acc <tcp_pcb_remove+0x118>)
 80179e0:	4839      	ldr	r0, [pc, #228]	; (8017ac8 <tcp_pcb_remove+0x114>)
 80179e2:	f007 facf 	bl	801ef84 <iprintf>

  TCP_RMV(pcblist, pcb);
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	683a      	ldr	r2, [r7, #0]
 80179ec:	429a      	cmp	r2, r3
 80179ee:	d105      	bne.n	80179fc <tcp_pcb_remove+0x48>
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	68da      	ldr	r2, [r3, #12]
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	601a      	str	r2, [r3, #0]
 80179fa:	e013      	b.n	8017a24 <tcp_pcb_remove+0x70>
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	60fb      	str	r3, [r7, #12]
 8017a02:	e00c      	b.n	8017a1e <tcp_pcb_remove+0x6a>
 8017a04:	68fb      	ldr	r3, [r7, #12]
 8017a06:	68db      	ldr	r3, [r3, #12]
 8017a08:	683a      	ldr	r2, [r7, #0]
 8017a0a:	429a      	cmp	r2, r3
 8017a0c:	d104      	bne.n	8017a18 <tcp_pcb_remove+0x64>
 8017a0e:	683b      	ldr	r3, [r7, #0]
 8017a10:	68da      	ldr	r2, [r3, #12]
 8017a12:	68fb      	ldr	r3, [r7, #12]
 8017a14:	60da      	str	r2, [r3, #12]
 8017a16:	e005      	b.n	8017a24 <tcp_pcb_remove+0x70>
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	68db      	ldr	r3, [r3, #12]
 8017a1c:	60fb      	str	r3, [r7, #12]
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d1ef      	bne.n	8017a04 <tcp_pcb_remove+0x50>
 8017a24:	683b      	ldr	r3, [r7, #0]
 8017a26:	2200      	movs	r2, #0
 8017a28:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8017a2a:	6838      	ldr	r0, [r7, #0]
 8017a2c:	f7ff ff72 	bl	8017914 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8017a30:	683b      	ldr	r3, [r7, #0]
 8017a32:	7d1b      	ldrb	r3, [r3, #20]
 8017a34:	2b0a      	cmp	r3, #10
 8017a36:	d013      	beq.n	8017a60 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8017a38:	683b      	ldr	r3, [r7, #0]
 8017a3a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8017a3c:	2b01      	cmp	r3, #1
 8017a3e:	d00f      	beq.n	8017a60 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8017a40:	683b      	ldr	r3, [r7, #0]
 8017a42:	8b5b      	ldrh	r3, [r3, #26]
 8017a44:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d009      	beq.n	8017a60 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017a4c:	683b      	ldr	r3, [r7, #0]
 8017a4e:	8b5b      	ldrh	r3, [r3, #26]
 8017a50:	f043 0302 	orr.w	r3, r3, #2
 8017a54:	b29a      	uxth	r2, r3
 8017a56:	683b      	ldr	r3, [r7, #0]
 8017a58:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017a5a:	6838      	ldr	r0, [r7, #0]
 8017a5c:	f003 fbc2 	bl	801b1e4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8017a60:	683b      	ldr	r3, [r7, #0]
 8017a62:	7d1b      	ldrb	r3, [r3, #20]
 8017a64:	2b01      	cmp	r3, #1
 8017a66:	d020      	beq.n	8017aaa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017a68:	683b      	ldr	r3, [r7, #0]
 8017a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d006      	beq.n	8017a7e <tcp_pcb_remove+0xca>
 8017a70:	4b13      	ldr	r3, [pc, #76]	; (8017ac0 <tcp_pcb_remove+0x10c>)
 8017a72:	f640 0293 	movw	r2, #2195	; 0x893
 8017a76:	4916      	ldr	r1, [pc, #88]	; (8017ad0 <tcp_pcb_remove+0x11c>)
 8017a78:	4813      	ldr	r0, [pc, #76]	; (8017ac8 <tcp_pcb_remove+0x114>)
 8017a7a:	f007 fa83 	bl	801ef84 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017a7e:	683b      	ldr	r3, [r7, #0]
 8017a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d006      	beq.n	8017a94 <tcp_pcb_remove+0xe0>
 8017a86:	4b0e      	ldr	r3, [pc, #56]	; (8017ac0 <tcp_pcb_remove+0x10c>)
 8017a88:	f640 0294 	movw	r2, #2196	; 0x894
 8017a8c:	4911      	ldr	r1, [pc, #68]	; (8017ad4 <tcp_pcb_remove+0x120>)
 8017a8e:	480e      	ldr	r0, [pc, #56]	; (8017ac8 <tcp_pcb_remove+0x114>)
 8017a90:	f007 fa78 	bl	801ef84 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017a94:	683b      	ldr	r3, [r7, #0]
 8017a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d006      	beq.n	8017aaa <tcp_pcb_remove+0xf6>
 8017a9c:	4b08      	ldr	r3, [pc, #32]	; (8017ac0 <tcp_pcb_remove+0x10c>)
 8017a9e:	f640 0296 	movw	r2, #2198	; 0x896
 8017aa2:	490d      	ldr	r1, [pc, #52]	; (8017ad8 <tcp_pcb_remove+0x124>)
 8017aa4:	4808      	ldr	r0, [pc, #32]	; (8017ac8 <tcp_pcb_remove+0x114>)
 8017aa6:	f007 fa6d 	bl	801ef84 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8017aaa:	683b      	ldr	r3, [r7, #0]
 8017aac:	2200      	movs	r2, #0
 8017aae:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8017ab0:	683b      	ldr	r3, [r7, #0]
 8017ab2:	2200      	movs	r2, #0
 8017ab4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8017ab6:	bf00      	nop
 8017ab8:	3710      	adds	r7, #16
 8017aba:	46bd      	mov	sp, r7
 8017abc:	bd80      	pop	{r7, pc}
 8017abe:	bf00      	nop
 8017ac0:	08020c7c 	.word	0x08020c7c
 8017ac4:	080212e4 	.word	0x080212e4
 8017ac8:	08020cc0 	.word	0x08020cc0
 8017acc:	08021300 	.word	0x08021300
 8017ad0:	08021320 	.word	0x08021320
 8017ad4:	08021338 	.word	0x08021338
 8017ad8:	08021354 	.word	0x08021354

08017adc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017adc:	b580      	push	{r7, lr}
 8017ade:	b082      	sub	sp, #8
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d106      	bne.n	8017af8 <tcp_next_iss+0x1c>
 8017aea:	4b0a      	ldr	r3, [pc, #40]	; (8017b14 <tcp_next_iss+0x38>)
 8017aec:	f640 02af 	movw	r2, #2223	; 0x8af
 8017af0:	4909      	ldr	r1, [pc, #36]	; (8017b18 <tcp_next_iss+0x3c>)
 8017af2:	480a      	ldr	r0, [pc, #40]	; (8017b1c <tcp_next_iss+0x40>)
 8017af4:	f007 fa46 	bl	801ef84 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8017af8:	4b09      	ldr	r3, [pc, #36]	; (8017b20 <tcp_next_iss+0x44>)
 8017afa:	681a      	ldr	r2, [r3, #0]
 8017afc:	4b09      	ldr	r3, [pc, #36]	; (8017b24 <tcp_next_iss+0x48>)
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	4413      	add	r3, r2
 8017b02:	4a07      	ldr	r2, [pc, #28]	; (8017b20 <tcp_next_iss+0x44>)
 8017b04:	6013      	str	r3, [r2, #0]
  return iss;
 8017b06:	4b06      	ldr	r3, [pc, #24]	; (8017b20 <tcp_next_iss+0x44>)
 8017b08:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	3708      	adds	r7, #8
 8017b0e:	46bd      	mov	sp, r7
 8017b10:	bd80      	pop	{r7, pc}
 8017b12:	bf00      	nop
 8017b14:	08020c7c 	.word	0x08020c7c
 8017b18:	0802136c 	.word	0x0802136c
 8017b1c:	08020cc0 	.word	0x08020cc0
 8017b20:	20000054 	.word	0x20000054
 8017b24:	20013d30 	.word	0x20013d30

08017b28 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b086      	sub	sp, #24
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	4603      	mov	r3, r0
 8017b30:	60b9      	str	r1, [r7, #8]
 8017b32:	607a      	str	r2, [r7, #4]
 8017b34:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d106      	bne.n	8017b4a <tcp_eff_send_mss_netif+0x22>
 8017b3c:	4b14      	ldr	r3, [pc, #80]	; (8017b90 <tcp_eff_send_mss_netif+0x68>)
 8017b3e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8017b42:	4914      	ldr	r1, [pc, #80]	; (8017b94 <tcp_eff_send_mss_netif+0x6c>)
 8017b44:	4814      	ldr	r0, [pc, #80]	; (8017b98 <tcp_eff_send_mss_netif+0x70>)
 8017b46:	f007 fa1d 	bl	801ef84 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8017b4a:	68bb      	ldr	r3, [r7, #8]
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d101      	bne.n	8017b54 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8017b50:	89fb      	ldrh	r3, [r7, #14]
 8017b52:	e019      	b.n	8017b88 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8017b54:	68bb      	ldr	r3, [r7, #8]
 8017b56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017b58:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8017b5a:	8afb      	ldrh	r3, [r7, #22]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d012      	beq.n	8017b86 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8017b60:	2328      	movs	r3, #40	; 0x28
 8017b62:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8017b64:	8afa      	ldrh	r2, [r7, #22]
 8017b66:	8abb      	ldrh	r3, [r7, #20]
 8017b68:	429a      	cmp	r2, r3
 8017b6a:	d904      	bls.n	8017b76 <tcp_eff_send_mss_netif+0x4e>
 8017b6c:	8afa      	ldrh	r2, [r7, #22]
 8017b6e:	8abb      	ldrh	r3, [r7, #20]
 8017b70:	1ad3      	subs	r3, r2, r3
 8017b72:	b29b      	uxth	r3, r3
 8017b74:	e000      	b.n	8017b78 <tcp_eff_send_mss_netif+0x50>
 8017b76:	2300      	movs	r3, #0
 8017b78:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8017b7a:	8a7a      	ldrh	r2, [r7, #18]
 8017b7c:	89fb      	ldrh	r3, [r7, #14]
 8017b7e:	4293      	cmp	r3, r2
 8017b80:	bf28      	it	cs
 8017b82:	4613      	movcs	r3, r2
 8017b84:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8017b86:	89fb      	ldrh	r3, [r7, #14]
}
 8017b88:	4618      	mov	r0, r3
 8017b8a:	3718      	adds	r7, #24
 8017b8c:	46bd      	mov	sp, r7
 8017b8e:	bd80      	pop	{r7, pc}
 8017b90:	08020c7c 	.word	0x08020c7c
 8017b94:	08021388 	.word	0x08021388
 8017b98:	08020cc0 	.word	0x08020cc0

08017b9c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b084      	sub	sp, #16
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	6078      	str	r0, [r7, #4]
 8017ba4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8017ba6:	683b      	ldr	r3, [r7, #0]
 8017ba8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d119      	bne.n	8017be4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8017bb0:	4b10      	ldr	r3, [pc, #64]	; (8017bf4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8017bb2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8017bb6:	4910      	ldr	r1, [pc, #64]	; (8017bf8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8017bb8:	4810      	ldr	r0, [pc, #64]	; (8017bfc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8017bba:	f007 f9e3 	bl	801ef84 <iprintf>

  while (pcb != NULL) {
 8017bbe:	e011      	b.n	8017be4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	681a      	ldr	r2, [r3, #0]
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	429a      	cmp	r2, r3
 8017bca:	d108      	bne.n	8017bde <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	68db      	ldr	r3, [r3, #12]
 8017bd0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8017bd2:	68f8      	ldr	r0, [r7, #12]
 8017bd4:	f7fe fd1c 	bl	8016610 <tcp_abort>
      pcb = next;
 8017bd8:	68bb      	ldr	r3, [r7, #8]
 8017bda:	60fb      	str	r3, [r7, #12]
 8017bdc:	e002      	b.n	8017be4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	68db      	ldr	r3, [r3, #12]
 8017be2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d1ea      	bne.n	8017bc0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8017bea:	bf00      	nop
 8017bec:	3710      	adds	r7, #16
 8017bee:	46bd      	mov	sp, r7
 8017bf0:	bd80      	pop	{r7, pc}
 8017bf2:	bf00      	nop
 8017bf4:	08020c7c 	.word	0x08020c7c
 8017bf8:	080213b0 	.word	0x080213b0
 8017bfc:	08020cc0 	.word	0x08020cc0

08017c00 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017c00:	b580      	push	{r7, lr}
 8017c02:	b084      	sub	sp, #16
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	6078      	str	r0, [r7, #4]
 8017c08:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d02a      	beq.n	8017c66 <tcp_netif_ip_addr_changed+0x66>
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d026      	beq.n	8017c66 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8017c18:	4b15      	ldr	r3, [pc, #84]	; (8017c70 <tcp_netif_ip_addr_changed+0x70>)
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	4619      	mov	r1, r3
 8017c1e:	6878      	ldr	r0, [r7, #4]
 8017c20:	f7ff ffbc 	bl	8017b9c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8017c24:	4b13      	ldr	r3, [pc, #76]	; (8017c74 <tcp_netif_ip_addr_changed+0x74>)
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	4619      	mov	r1, r3
 8017c2a:	6878      	ldr	r0, [r7, #4]
 8017c2c:	f7ff ffb6 	bl	8017b9c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8017c30:	683b      	ldr	r3, [r7, #0]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d017      	beq.n	8017c66 <tcp_netif_ip_addr_changed+0x66>
 8017c36:	683b      	ldr	r3, [r7, #0]
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d013      	beq.n	8017c66 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017c3e:	4b0e      	ldr	r3, [pc, #56]	; (8017c78 <tcp_netif_ip_addr_changed+0x78>)
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	60fb      	str	r3, [r7, #12]
 8017c44:	e00c      	b.n	8017c60 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	681a      	ldr	r2, [r3, #0]
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	429a      	cmp	r2, r3
 8017c50:	d103      	bne.n	8017c5a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8017c52:	683b      	ldr	r3, [r7, #0]
 8017c54:	681a      	ldr	r2, [r3, #0]
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	68db      	ldr	r3, [r3, #12]
 8017c5e:	60fb      	str	r3, [r7, #12]
 8017c60:	68fb      	ldr	r3, [r7, #12]
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d1ef      	bne.n	8017c46 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8017c66:	bf00      	nop
 8017c68:	3710      	adds	r7, #16
 8017c6a:	46bd      	mov	sp, r7
 8017c6c:	bd80      	pop	{r7, pc}
 8017c6e:	bf00      	nop
 8017c70:	20013d2c 	.word	0x20013d2c
 8017c74:	20013d38 	.word	0x20013d38
 8017c78:	20013d34 	.word	0x20013d34

08017c7c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8017c7c:	b580      	push	{r7, lr}
 8017c7e:	b082      	sub	sp, #8
 8017c80:	af00      	add	r7, sp, #0
 8017c82:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d007      	beq.n	8017c9c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017c90:	4618      	mov	r0, r3
 8017c92:	f7ff fb4b 	bl	801732c <tcp_segs_free>
    pcb->ooseq = NULL;
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	2200      	movs	r2, #0
 8017c9a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8017c9c:	bf00      	nop
 8017c9e:	3708      	adds	r7, #8
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	bd80      	pop	{r7, pc}

08017ca4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8017ca4:	b590      	push	{r4, r7, lr}
 8017ca6:	b08d      	sub	sp, #52	; 0x34
 8017ca8:	af04      	add	r7, sp, #16
 8017caa:	6078      	str	r0, [r7, #4]
 8017cac:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d105      	bne.n	8017cc0 <tcp_input+0x1c>
 8017cb4:	4b9b      	ldr	r3, [pc, #620]	; (8017f24 <tcp_input+0x280>)
 8017cb6:	2283      	movs	r2, #131	; 0x83
 8017cb8:	499b      	ldr	r1, [pc, #620]	; (8017f28 <tcp_input+0x284>)
 8017cba:	489c      	ldr	r0, [pc, #624]	; (8017f2c <tcp_input+0x288>)
 8017cbc:	f007 f962 	bl	801ef84 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	685b      	ldr	r3, [r3, #4]
 8017cc4:	4a9a      	ldr	r2, [pc, #616]	; (8017f30 <tcp_input+0x28c>)
 8017cc6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	895b      	ldrh	r3, [r3, #10]
 8017ccc:	2b13      	cmp	r3, #19
 8017cce:	f240 83c4 	bls.w	801845a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017cd2:	4b98      	ldr	r3, [pc, #608]	; (8017f34 <tcp_input+0x290>)
 8017cd4:	695a      	ldr	r2, [r3, #20]
 8017cd6:	4b97      	ldr	r3, [pc, #604]	; (8017f34 <tcp_input+0x290>)
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	4619      	mov	r1, r3
 8017cdc:	4610      	mov	r0, r2
 8017cde:	f006 f8a9 	bl	801de34 <ip4_addr_isbroadcast_u32>
 8017ce2:	4603      	mov	r3, r0
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	f040 83ba 	bne.w	801845e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8017cea:	4b92      	ldr	r3, [pc, #584]	; (8017f34 <tcp_input+0x290>)
 8017cec:	695b      	ldr	r3, [r3, #20]
 8017cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017cf2:	2be0      	cmp	r3, #224	; 0xe0
 8017cf4:	f000 83b3 	beq.w	801845e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8017cf8:	4b8d      	ldr	r3, [pc, #564]	; (8017f30 <tcp_input+0x28c>)
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	899b      	ldrh	r3, [r3, #12]
 8017cfe:	b29b      	uxth	r3, r3
 8017d00:	4618      	mov	r0, r3
 8017d02:	f7fc fb1b 	bl	801433c <lwip_htons>
 8017d06:	4603      	mov	r3, r0
 8017d08:	0b1b      	lsrs	r3, r3, #12
 8017d0a:	b29b      	uxth	r3, r3
 8017d0c:	b2db      	uxtb	r3, r3
 8017d0e:	009b      	lsls	r3, r3, #2
 8017d10:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8017d12:	7cbb      	ldrb	r3, [r7, #18]
 8017d14:	2b13      	cmp	r3, #19
 8017d16:	f240 83a2 	bls.w	801845e <tcp_input+0x7ba>
 8017d1a:	7cbb      	ldrb	r3, [r7, #18]
 8017d1c:	b29a      	uxth	r2, r3
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	891b      	ldrh	r3, [r3, #8]
 8017d22:	429a      	cmp	r2, r3
 8017d24:	f200 839b 	bhi.w	801845e <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8017d28:	7cbb      	ldrb	r3, [r7, #18]
 8017d2a:	b29b      	uxth	r3, r3
 8017d2c:	3b14      	subs	r3, #20
 8017d2e:	b29a      	uxth	r2, r3
 8017d30:	4b81      	ldr	r3, [pc, #516]	; (8017f38 <tcp_input+0x294>)
 8017d32:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8017d34:	4b81      	ldr	r3, [pc, #516]	; (8017f3c <tcp_input+0x298>)
 8017d36:	2200      	movs	r2, #0
 8017d38:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	895a      	ldrh	r2, [r3, #10]
 8017d3e:	7cbb      	ldrb	r3, [r7, #18]
 8017d40:	b29b      	uxth	r3, r3
 8017d42:	429a      	cmp	r2, r3
 8017d44:	d309      	bcc.n	8017d5a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8017d46:	4b7c      	ldr	r3, [pc, #496]	; (8017f38 <tcp_input+0x294>)
 8017d48:	881a      	ldrh	r2, [r3, #0]
 8017d4a:	4b7d      	ldr	r3, [pc, #500]	; (8017f40 <tcp_input+0x29c>)
 8017d4c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8017d4e:	7cbb      	ldrb	r3, [r7, #18]
 8017d50:	4619      	mov	r1, r3
 8017d52:	6878      	ldr	r0, [r7, #4]
 8017d54:	f7fd fe4a 	bl	80159ec <pbuf_remove_header>
 8017d58:	e04e      	b.n	8017df8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d105      	bne.n	8017d6e <tcp_input+0xca>
 8017d62:	4b70      	ldr	r3, [pc, #448]	; (8017f24 <tcp_input+0x280>)
 8017d64:	22c2      	movs	r2, #194	; 0xc2
 8017d66:	4977      	ldr	r1, [pc, #476]	; (8017f44 <tcp_input+0x2a0>)
 8017d68:	4870      	ldr	r0, [pc, #448]	; (8017f2c <tcp_input+0x288>)
 8017d6a:	f007 f90b 	bl	801ef84 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8017d6e:	2114      	movs	r1, #20
 8017d70:	6878      	ldr	r0, [r7, #4]
 8017d72:	f7fd fe3b 	bl	80159ec <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	895a      	ldrh	r2, [r3, #10]
 8017d7a:	4b71      	ldr	r3, [pc, #452]	; (8017f40 <tcp_input+0x29c>)
 8017d7c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8017d7e:	4b6e      	ldr	r3, [pc, #440]	; (8017f38 <tcp_input+0x294>)
 8017d80:	881a      	ldrh	r2, [r3, #0]
 8017d82:	4b6f      	ldr	r3, [pc, #444]	; (8017f40 <tcp_input+0x29c>)
 8017d84:	881b      	ldrh	r3, [r3, #0]
 8017d86:	1ad3      	subs	r3, r2, r3
 8017d88:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8017d8a:	4b6d      	ldr	r3, [pc, #436]	; (8017f40 <tcp_input+0x29c>)
 8017d8c:	881b      	ldrh	r3, [r3, #0]
 8017d8e:	4619      	mov	r1, r3
 8017d90:	6878      	ldr	r0, [r7, #4]
 8017d92:	f7fd fe2b 	bl	80159ec <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	895b      	ldrh	r3, [r3, #10]
 8017d9c:	8a3a      	ldrh	r2, [r7, #16]
 8017d9e:	429a      	cmp	r2, r3
 8017da0:	f200 835f 	bhi.w	8018462 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	685b      	ldr	r3, [r3, #4]
 8017daa:	4a64      	ldr	r2, [pc, #400]	; (8017f3c <tcp_input+0x298>)
 8017dac:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	8a3a      	ldrh	r2, [r7, #16]
 8017db4:	4611      	mov	r1, r2
 8017db6:	4618      	mov	r0, r3
 8017db8:	f7fd fe18 	bl	80159ec <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	891a      	ldrh	r2, [r3, #8]
 8017dc0:	8a3b      	ldrh	r3, [r7, #16]
 8017dc2:	1ad3      	subs	r3, r2, r3
 8017dc4:	b29a      	uxth	r2, r3
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	895b      	ldrh	r3, [r3, #10]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d005      	beq.n	8017dde <tcp_input+0x13a>
 8017dd2:	4b54      	ldr	r3, [pc, #336]	; (8017f24 <tcp_input+0x280>)
 8017dd4:	22df      	movs	r2, #223	; 0xdf
 8017dd6:	495c      	ldr	r1, [pc, #368]	; (8017f48 <tcp_input+0x2a4>)
 8017dd8:	4854      	ldr	r0, [pc, #336]	; (8017f2c <tcp_input+0x288>)
 8017dda:	f007 f8d3 	bl	801ef84 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	891a      	ldrh	r2, [r3, #8]
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	891b      	ldrh	r3, [r3, #8]
 8017de8:	429a      	cmp	r2, r3
 8017dea:	d005      	beq.n	8017df8 <tcp_input+0x154>
 8017dec:	4b4d      	ldr	r3, [pc, #308]	; (8017f24 <tcp_input+0x280>)
 8017dee:	22e0      	movs	r2, #224	; 0xe0
 8017df0:	4956      	ldr	r1, [pc, #344]	; (8017f4c <tcp_input+0x2a8>)
 8017df2:	484e      	ldr	r0, [pc, #312]	; (8017f2c <tcp_input+0x288>)
 8017df4:	f007 f8c6 	bl	801ef84 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8017df8:	4b4d      	ldr	r3, [pc, #308]	; (8017f30 <tcp_input+0x28c>)
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	881b      	ldrh	r3, [r3, #0]
 8017dfe:	b29a      	uxth	r2, r3
 8017e00:	4b4b      	ldr	r3, [pc, #300]	; (8017f30 <tcp_input+0x28c>)
 8017e02:	681c      	ldr	r4, [r3, #0]
 8017e04:	4610      	mov	r0, r2
 8017e06:	f7fc fa99 	bl	801433c <lwip_htons>
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8017e0e:	4b48      	ldr	r3, [pc, #288]	; (8017f30 <tcp_input+0x28c>)
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	885b      	ldrh	r3, [r3, #2]
 8017e14:	b29a      	uxth	r2, r3
 8017e16:	4b46      	ldr	r3, [pc, #280]	; (8017f30 <tcp_input+0x28c>)
 8017e18:	681c      	ldr	r4, [r3, #0]
 8017e1a:	4610      	mov	r0, r2
 8017e1c:	f7fc fa8e 	bl	801433c <lwip_htons>
 8017e20:	4603      	mov	r3, r0
 8017e22:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017e24:	4b42      	ldr	r3, [pc, #264]	; (8017f30 <tcp_input+0x28c>)
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	685a      	ldr	r2, [r3, #4]
 8017e2a:	4b41      	ldr	r3, [pc, #260]	; (8017f30 <tcp_input+0x28c>)
 8017e2c:	681c      	ldr	r4, [r3, #0]
 8017e2e:	4610      	mov	r0, r2
 8017e30:	f7fc fa99 	bl	8014366 <lwip_htonl>
 8017e34:	4603      	mov	r3, r0
 8017e36:	6063      	str	r3, [r4, #4]
 8017e38:	6863      	ldr	r3, [r4, #4]
 8017e3a:	4a45      	ldr	r2, [pc, #276]	; (8017f50 <tcp_input+0x2ac>)
 8017e3c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8017e3e:	4b3c      	ldr	r3, [pc, #240]	; (8017f30 <tcp_input+0x28c>)
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	689a      	ldr	r2, [r3, #8]
 8017e44:	4b3a      	ldr	r3, [pc, #232]	; (8017f30 <tcp_input+0x28c>)
 8017e46:	681c      	ldr	r4, [r3, #0]
 8017e48:	4610      	mov	r0, r2
 8017e4a:	f7fc fa8c 	bl	8014366 <lwip_htonl>
 8017e4e:	4603      	mov	r3, r0
 8017e50:	60a3      	str	r3, [r4, #8]
 8017e52:	68a3      	ldr	r3, [r4, #8]
 8017e54:	4a3f      	ldr	r2, [pc, #252]	; (8017f54 <tcp_input+0x2b0>)
 8017e56:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8017e58:	4b35      	ldr	r3, [pc, #212]	; (8017f30 <tcp_input+0x28c>)
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	89db      	ldrh	r3, [r3, #14]
 8017e5e:	b29a      	uxth	r2, r3
 8017e60:	4b33      	ldr	r3, [pc, #204]	; (8017f30 <tcp_input+0x28c>)
 8017e62:	681c      	ldr	r4, [r3, #0]
 8017e64:	4610      	mov	r0, r2
 8017e66:	f7fc fa69 	bl	801433c <lwip_htons>
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8017e6e:	4b30      	ldr	r3, [pc, #192]	; (8017f30 <tcp_input+0x28c>)
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	899b      	ldrh	r3, [r3, #12]
 8017e74:	b29b      	uxth	r3, r3
 8017e76:	4618      	mov	r0, r3
 8017e78:	f7fc fa60 	bl	801433c <lwip_htons>
 8017e7c:	4603      	mov	r3, r0
 8017e7e:	b2db      	uxtb	r3, r3
 8017e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017e84:	b2da      	uxtb	r2, r3
 8017e86:	4b34      	ldr	r3, [pc, #208]	; (8017f58 <tcp_input+0x2b4>)
 8017e88:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	891a      	ldrh	r2, [r3, #8]
 8017e8e:	4b33      	ldr	r3, [pc, #204]	; (8017f5c <tcp_input+0x2b8>)
 8017e90:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8017e92:	4b31      	ldr	r3, [pc, #196]	; (8017f58 <tcp_input+0x2b4>)
 8017e94:	781b      	ldrb	r3, [r3, #0]
 8017e96:	f003 0303 	and.w	r3, r3, #3
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d00c      	beq.n	8017eb8 <tcp_input+0x214>
    tcplen++;
 8017e9e:	4b2f      	ldr	r3, [pc, #188]	; (8017f5c <tcp_input+0x2b8>)
 8017ea0:	881b      	ldrh	r3, [r3, #0]
 8017ea2:	3301      	adds	r3, #1
 8017ea4:	b29a      	uxth	r2, r3
 8017ea6:	4b2d      	ldr	r3, [pc, #180]	; (8017f5c <tcp_input+0x2b8>)
 8017ea8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	891a      	ldrh	r2, [r3, #8]
 8017eae:	4b2b      	ldr	r3, [pc, #172]	; (8017f5c <tcp_input+0x2b8>)
 8017eb0:	881b      	ldrh	r3, [r3, #0]
 8017eb2:	429a      	cmp	r2, r3
 8017eb4:	f200 82d7 	bhi.w	8018466 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8017eb8:	2300      	movs	r3, #0
 8017eba:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ebc:	4b28      	ldr	r3, [pc, #160]	; (8017f60 <tcp_input+0x2bc>)
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	61fb      	str	r3, [r7, #28]
 8017ec2:	e09d      	b.n	8018000 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8017ec4:	69fb      	ldr	r3, [r7, #28]
 8017ec6:	7d1b      	ldrb	r3, [r3, #20]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d105      	bne.n	8017ed8 <tcp_input+0x234>
 8017ecc:	4b15      	ldr	r3, [pc, #84]	; (8017f24 <tcp_input+0x280>)
 8017ece:	22fb      	movs	r2, #251	; 0xfb
 8017ed0:	4924      	ldr	r1, [pc, #144]	; (8017f64 <tcp_input+0x2c0>)
 8017ed2:	4816      	ldr	r0, [pc, #88]	; (8017f2c <tcp_input+0x288>)
 8017ed4:	f007 f856 	bl	801ef84 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8017ed8:	69fb      	ldr	r3, [r7, #28]
 8017eda:	7d1b      	ldrb	r3, [r3, #20]
 8017edc:	2b0a      	cmp	r3, #10
 8017ede:	d105      	bne.n	8017eec <tcp_input+0x248>
 8017ee0:	4b10      	ldr	r3, [pc, #64]	; (8017f24 <tcp_input+0x280>)
 8017ee2:	22fc      	movs	r2, #252	; 0xfc
 8017ee4:	4920      	ldr	r1, [pc, #128]	; (8017f68 <tcp_input+0x2c4>)
 8017ee6:	4811      	ldr	r0, [pc, #68]	; (8017f2c <tcp_input+0x288>)
 8017ee8:	f007 f84c 	bl	801ef84 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8017eec:	69fb      	ldr	r3, [r7, #28]
 8017eee:	7d1b      	ldrb	r3, [r3, #20]
 8017ef0:	2b01      	cmp	r3, #1
 8017ef2:	d105      	bne.n	8017f00 <tcp_input+0x25c>
 8017ef4:	4b0b      	ldr	r3, [pc, #44]	; (8017f24 <tcp_input+0x280>)
 8017ef6:	22fd      	movs	r2, #253	; 0xfd
 8017ef8:	491c      	ldr	r1, [pc, #112]	; (8017f6c <tcp_input+0x2c8>)
 8017efa:	480c      	ldr	r0, [pc, #48]	; (8017f2c <tcp_input+0x288>)
 8017efc:	f007 f842 	bl	801ef84 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017f00:	69fb      	ldr	r3, [r7, #28]
 8017f02:	7a1b      	ldrb	r3, [r3, #8]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d033      	beq.n	8017f70 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017f08:	69fb      	ldr	r3, [r7, #28]
 8017f0a:	7a1a      	ldrb	r2, [r3, #8]
 8017f0c:	4b09      	ldr	r3, [pc, #36]	; (8017f34 <tcp_input+0x290>)
 8017f0e:	685b      	ldr	r3, [r3, #4]
 8017f10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017f14:	3301      	adds	r3, #1
 8017f16:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017f18:	429a      	cmp	r2, r3
 8017f1a:	d029      	beq.n	8017f70 <tcp_input+0x2cc>
      prev = pcb;
 8017f1c:	69fb      	ldr	r3, [r7, #28]
 8017f1e:	61bb      	str	r3, [r7, #24]
      continue;
 8017f20:	e06b      	b.n	8017ffa <tcp_input+0x356>
 8017f22:	bf00      	nop
 8017f24:	080213e4 	.word	0x080213e4
 8017f28:	08021418 	.word	0x08021418
 8017f2c:	08021430 	.word	0x08021430
 8017f30:	20004538 	.word	0x20004538
 8017f34:	20010618 	.word	0x20010618
 8017f38:	2000453c 	.word	0x2000453c
 8017f3c:	20004540 	.word	0x20004540
 8017f40:	2000453e 	.word	0x2000453e
 8017f44:	08021458 	.word	0x08021458
 8017f48:	08021468 	.word	0x08021468
 8017f4c:	08021474 	.word	0x08021474
 8017f50:	20004548 	.word	0x20004548
 8017f54:	2000454c 	.word	0x2000454c
 8017f58:	20004554 	.word	0x20004554
 8017f5c:	20004552 	.word	0x20004552
 8017f60:	20013d2c 	.word	0x20013d2c
 8017f64:	08021494 	.word	0x08021494
 8017f68:	080214bc 	.word	0x080214bc
 8017f6c:	080214e8 	.word	0x080214e8
    }

    if (pcb->remote_port == tcphdr->src &&
 8017f70:	69fb      	ldr	r3, [r7, #28]
 8017f72:	8b1a      	ldrh	r2, [r3, #24]
 8017f74:	4b94      	ldr	r3, [pc, #592]	; (80181c8 <tcp_input+0x524>)
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	881b      	ldrh	r3, [r3, #0]
 8017f7a:	b29b      	uxth	r3, r3
 8017f7c:	429a      	cmp	r2, r3
 8017f7e:	d13a      	bne.n	8017ff6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8017f80:	69fb      	ldr	r3, [r7, #28]
 8017f82:	8ada      	ldrh	r2, [r3, #22]
 8017f84:	4b90      	ldr	r3, [pc, #576]	; (80181c8 <tcp_input+0x524>)
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	885b      	ldrh	r3, [r3, #2]
 8017f8a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017f8c:	429a      	cmp	r2, r3
 8017f8e:	d132      	bne.n	8017ff6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017f90:	69fb      	ldr	r3, [r7, #28]
 8017f92:	685a      	ldr	r2, [r3, #4]
 8017f94:	4b8d      	ldr	r3, [pc, #564]	; (80181cc <tcp_input+0x528>)
 8017f96:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8017f98:	429a      	cmp	r2, r3
 8017f9a:	d12c      	bne.n	8017ff6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017f9c:	69fb      	ldr	r3, [r7, #28]
 8017f9e:	681a      	ldr	r2, [r3, #0]
 8017fa0:	4b8a      	ldr	r3, [pc, #552]	; (80181cc <tcp_input+0x528>)
 8017fa2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017fa4:	429a      	cmp	r2, r3
 8017fa6:	d126      	bne.n	8017ff6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8017fa8:	69fb      	ldr	r3, [r7, #28]
 8017faa:	68db      	ldr	r3, [r3, #12]
 8017fac:	69fa      	ldr	r2, [r7, #28]
 8017fae:	429a      	cmp	r2, r3
 8017fb0:	d106      	bne.n	8017fc0 <tcp_input+0x31c>
 8017fb2:	4b87      	ldr	r3, [pc, #540]	; (80181d0 <tcp_input+0x52c>)
 8017fb4:	f240 120d 	movw	r2, #269	; 0x10d
 8017fb8:	4986      	ldr	r1, [pc, #536]	; (80181d4 <tcp_input+0x530>)
 8017fba:	4887      	ldr	r0, [pc, #540]	; (80181d8 <tcp_input+0x534>)
 8017fbc:	f006 ffe2 	bl	801ef84 <iprintf>
      if (prev != NULL) {
 8017fc0:	69bb      	ldr	r3, [r7, #24]
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d00a      	beq.n	8017fdc <tcp_input+0x338>
        prev->next = pcb->next;
 8017fc6:	69fb      	ldr	r3, [r7, #28]
 8017fc8:	68da      	ldr	r2, [r3, #12]
 8017fca:	69bb      	ldr	r3, [r7, #24]
 8017fcc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8017fce:	4b83      	ldr	r3, [pc, #524]	; (80181dc <tcp_input+0x538>)
 8017fd0:	681a      	ldr	r2, [r3, #0]
 8017fd2:	69fb      	ldr	r3, [r7, #28]
 8017fd4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8017fd6:	4a81      	ldr	r2, [pc, #516]	; (80181dc <tcp_input+0x538>)
 8017fd8:	69fb      	ldr	r3, [r7, #28]
 8017fda:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017fdc:	69fb      	ldr	r3, [r7, #28]
 8017fde:	68db      	ldr	r3, [r3, #12]
 8017fe0:	69fa      	ldr	r2, [r7, #28]
 8017fe2:	429a      	cmp	r2, r3
 8017fe4:	d111      	bne.n	801800a <tcp_input+0x366>
 8017fe6:	4b7a      	ldr	r3, [pc, #488]	; (80181d0 <tcp_input+0x52c>)
 8017fe8:	f240 1215 	movw	r2, #277	; 0x115
 8017fec:	497c      	ldr	r1, [pc, #496]	; (80181e0 <tcp_input+0x53c>)
 8017fee:	487a      	ldr	r0, [pc, #488]	; (80181d8 <tcp_input+0x534>)
 8017ff0:	f006 ffc8 	bl	801ef84 <iprintf>
      break;
 8017ff4:	e009      	b.n	801800a <tcp_input+0x366>
    }
    prev = pcb;
 8017ff6:	69fb      	ldr	r3, [r7, #28]
 8017ff8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ffa:	69fb      	ldr	r3, [r7, #28]
 8017ffc:	68db      	ldr	r3, [r3, #12]
 8017ffe:	61fb      	str	r3, [r7, #28]
 8018000:	69fb      	ldr	r3, [r7, #28]
 8018002:	2b00      	cmp	r3, #0
 8018004:	f47f af5e 	bne.w	8017ec4 <tcp_input+0x220>
 8018008:	e000      	b.n	801800c <tcp_input+0x368>
      break;
 801800a:	bf00      	nop
  }

  if (pcb == NULL) {
 801800c:	69fb      	ldr	r3, [r7, #28]
 801800e:	2b00      	cmp	r3, #0
 8018010:	f040 8095 	bne.w	801813e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018014:	4b73      	ldr	r3, [pc, #460]	; (80181e4 <tcp_input+0x540>)
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	61fb      	str	r3, [r7, #28]
 801801a:	e03f      	b.n	801809c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801801c:	69fb      	ldr	r3, [r7, #28]
 801801e:	7d1b      	ldrb	r3, [r3, #20]
 8018020:	2b0a      	cmp	r3, #10
 8018022:	d006      	beq.n	8018032 <tcp_input+0x38e>
 8018024:	4b6a      	ldr	r3, [pc, #424]	; (80181d0 <tcp_input+0x52c>)
 8018026:	f240 121f 	movw	r2, #287	; 0x11f
 801802a:	496f      	ldr	r1, [pc, #444]	; (80181e8 <tcp_input+0x544>)
 801802c:	486a      	ldr	r0, [pc, #424]	; (80181d8 <tcp_input+0x534>)
 801802e:	f006 ffa9 	bl	801ef84 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018032:	69fb      	ldr	r3, [r7, #28]
 8018034:	7a1b      	ldrb	r3, [r3, #8]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d009      	beq.n	801804e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801803a:	69fb      	ldr	r3, [r7, #28]
 801803c:	7a1a      	ldrb	r2, [r3, #8]
 801803e:	4b63      	ldr	r3, [pc, #396]	; (80181cc <tcp_input+0x528>)
 8018040:	685b      	ldr	r3, [r3, #4]
 8018042:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018046:	3301      	adds	r3, #1
 8018048:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801804a:	429a      	cmp	r2, r3
 801804c:	d122      	bne.n	8018094 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801804e:	69fb      	ldr	r3, [r7, #28]
 8018050:	8b1a      	ldrh	r2, [r3, #24]
 8018052:	4b5d      	ldr	r3, [pc, #372]	; (80181c8 <tcp_input+0x524>)
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	881b      	ldrh	r3, [r3, #0]
 8018058:	b29b      	uxth	r3, r3
 801805a:	429a      	cmp	r2, r3
 801805c:	d11b      	bne.n	8018096 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801805e:	69fb      	ldr	r3, [r7, #28]
 8018060:	8ada      	ldrh	r2, [r3, #22]
 8018062:	4b59      	ldr	r3, [pc, #356]	; (80181c8 <tcp_input+0x524>)
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	885b      	ldrh	r3, [r3, #2]
 8018068:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801806a:	429a      	cmp	r2, r3
 801806c:	d113      	bne.n	8018096 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801806e:	69fb      	ldr	r3, [r7, #28]
 8018070:	685a      	ldr	r2, [r3, #4]
 8018072:	4b56      	ldr	r3, [pc, #344]	; (80181cc <tcp_input+0x528>)
 8018074:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8018076:	429a      	cmp	r2, r3
 8018078:	d10d      	bne.n	8018096 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801807a:	69fb      	ldr	r3, [r7, #28]
 801807c:	681a      	ldr	r2, [r3, #0]
 801807e:	4b53      	ldr	r3, [pc, #332]	; (80181cc <tcp_input+0x528>)
 8018080:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018082:	429a      	cmp	r2, r3
 8018084:	d107      	bne.n	8018096 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8018086:	69f8      	ldr	r0, [r7, #28]
 8018088:	f000 fb52 	bl	8018730 <tcp_timewait_input>
        }
        pbuf_free(p);
 801808c:	6878      	ldr	r0, [r7, #4]
 801808e:	f7fd fd33 	bl	8015af8 <pbuf_free>
        return;
 8018092:	e1ee      	b.n	8018472 <tcp_input+0x7ce>
        continue;
 8018094:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018096:	69fb      	ldr	r3, [r7, #28]
 8018098:	68db      	ldr	r3, [r3, #12]
 801809a:	61fb      	str	r3, [r7, #28]
 801809c:	69fb      	ldr	r3, [r7, #28]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d1bc      	bne.n	801801c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80180a2:	2300      	movs	r3, #0
 80180a4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80180a6:	4b51      	ldr	r3, [pc, #324]	; (80181ec <tcp_input+0x548>)
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	617b      	str	r3, [r7, #20]
 80180ac:	e02a      	b.n	8018104 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80180ae:	697b      	ldr	r3, [r7, #20]
 80180b0:	7a1b      	ldrb	r3, [r3, #8]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d00c      	beq.n	80180d0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80180b6:	697b      	ldr	r3, [r7, #20]
 80180b8:	7a1a      	ldrb	r2, [r3, #8]
 80180ba:	4b44      	ldr	r3, [pc, #272]	; (80181cc <tcp_input+0x528>)
 80180bc:	685b      	ldr	r3, [r3, #4]
 80180be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80180c2:	3301      	adds	r3, #1
 80180c4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80180c6:	429a      	cmp	r2, r3
 80180c8:	d002      	beq.n	80180d0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80180ca:	697b      	ldr	r3, [r7, #20]
 80180cc:	61bb      	str	r3, [r7, #24]
        continue;
 80180ce:	e016      	b.n	80180fe <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80180d0:	697b      	ldr	r3, [r7, #20]
 80180d2:	8ada      	ldrh	r2, [r3, #22]
 80180d4:	4b3c      	ldr	r3, [pc, #240]	; (80181c8 <tcp_input+0x524>)
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	885b      	ldrh	r3, [r3, #2]
 80180da:	b29b      	uxth	r3, r3
 80180dc:	429a      	cmp	r2, r3
 80180de:	d10c      	bne.n	80180fa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80180e0:	697b      	ldr	r3, [r7, #20]
 80180e2:	681a      	ldr	r2, [r3, #0]
 80180e4:	4b39      	ldr	r3, [pc, #228]	; (80181cc <tcp_input+0x528>)
 80180e6:	695b      	ldr	r3, [r3, #20]
 80180e8:	429a      	cmp	r2, r3
 80180ea:	d00f      	beq.n	801810c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80180ec:	697b      	ldr	r3, [r7, #20]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d00d      	beq.n	801810e <tcp_input+0x46a>
 80180f2:	697b      	ldr	r3, [r7, #20]
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d009      	beq.n	801810e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80180fa:	697b      	ldr	r3, [r7, #20]
 80180fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80180fe:	697b      	ldr	r3, [r7, #20]
 8018100:	68db      	ldr	r3, [r3, #12]
 8018102:	617b      	str	r3, [r7, #20]
 8018104:	697b      	ldr	r3, [r7, #20]
 8018106:	2b00      	cmp	r3, #0
 8018108:	d1d1      	bne.n	80180ae <tcp_input+0x40a>
 801810a:	e000      	b.n	801810e <tcp_input+0x46a>
            break;
 801810c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801810e:	697b      	ldr	r3, [r7, #20]
 8018110:	2b00      	cmp	r3, #0
 8018112:	d014      	beq.n	801813e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8018114:	69bb      	ldr	r3, [r7, #24]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d00a      	beq.n	8018130 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801811a:	697b      	ldr	r3, [r7, #20]
 801811c:	68da      	ldr	r2, [r3, #12]
 801811e:	69bb      	ldr	r3, [r7, #24]
 8018120:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8018122:	4b32      	ldr	r3, [pc, #200]	; (80181ec <tcp_input+0x548>)
 8018124:	681a      	ldr	r2, [r3, #0]
 8018126:	697b      	ldr	r3, [r7, #20]
 8018128:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801812a:	4a30      	ldr	r2, [pc, #192]	; (80181ec <tcp_input+0x548>)
 801812c:	697b      	ldr	r3, [r7, #20]
 801812e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8018130:	6978      	ldr	r0, [r7, #20]
 8018132:	f000 f9ff 	bl	8018534 <tcp_listen_input>
      }
      pbuf_free(p);
 8018136:	6878      	ldr	r0, [r7, #4]
 8018138:	f7fd fcde 	bl	8015af8 <pbuf_free>
      return;
 801813c:	e199      	b.n	8018472 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801813e:	69fb      	ldr	r3, [r7, #28]
 8018140:	2b00      	cmp	r3, #0
 8018142:	f000 8160 	beq.w	8018406 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8018146:	4b2a      	ldr	r3, [pc, #168]	; (80181f0 <tcp_input+0x54c>)
 8018148:	2200      	movs	r2, #0
 801814a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	891a      	ldrh	r2, [r3, #8]
 8018150:	4b27      	ldr	r3, [pc, #156]	; (80181f0 <tcp_input+0x54c>)
 8018152:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8018154:	4a26      	ldr	r2, [pc, #152]	; (80181f0 <tcp_input+0x54c>)
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801815a:	4b1b      	ldr	r3, [pc, #108]	; (80181c8 <tcp_input+0x524>)
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	4a24      	ldr	r2, [pc, #144]	; (80181f0 <tcp_input+0x54c>)
 8018160:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8018162:	4b24      	ldr	r3, [pc, #144]	; (80181f4 <tcp_input+0x550>)
 8018164:	2200      	movs	r2, #0
 8018166:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8018168:	4b23      	ldr	r3, [pc, #140]	; (80181f8 <tcp_input+0x554>)
 801816a:	2200      	movs	r2, #0
 801816c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801816e:	4b23      	ldr	r3, [pc, #140]	; (80181fc <tcp_input+0x558>)
 8018170:	2200      	movs	r2, #0
 8018172:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8018174:	4b22      	ldr	r3, [pc, #136]	; (8018200 <tcp_input+0x55c>)
 8018176:	781b      	ldrb	r3, [r3, #0]
 8018178:	f003 0308 	and.w	r3, r3, #8
 801817c:	2b00      	cmp	r3, #0
 801817e:	d006      	beq.n	801818e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	7b5b      	ldrb	r3, [r3, #13]
 8018184:	f043 0301 	orr.w	r3, r3, #1
 8018188:	b2da      	uxtb	r2, r3
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801818e:	69fb      	ldr	r3, [r7, #28]
 8018190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018192:	2b00      	cmp	r3, #0
 8018194:	d038      	beq.n	8018208 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8018196:	69f8      	ldr	r0, [r7, #28]
 8018198:	f7ff f84c 	bl	8017234 <tcp_process_refused_data>
 801819c:	4603      	mov	r3, r0
 801819e:	f113 0f0d 	cmn.w	r3, #13
 80181a2:	d007      	beq.n	80181b4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80181a4:	69fb      	ldr	r3, [r7, #28]
 80181a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d02d      	beq.n	8018208 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80181ac:	4b15      	ldr	r3, [pc, #84]	; (8018204 <tcp_input+0x560>)
 80181ae:	881b      	ldrh	r3, [r3, #0]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d029      	beq.n	8018208 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80181b4:	69fb      	ldr	r3, [r7, #28]
 80181b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	f040 8104 	bne.w	80183c6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80181be:	69f8      	ldr	r0, [r7, #28]
 80181c0:	f003 fe28 	bl	801be14 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80181c4:	e0ff      	b.n	80183c6 <tcp_input+0x722>
 80181c6:	bf00      	nop
 80181c8:	20004538 	.word	0x20004538
 80181cc:	20010618 	.word	0x20010618
 80181d0:	080213e4 	.word	0x080213e4
 80181d4:	08021510 	.word	0x08021510
 80181d8:	08021430 	.word	0x08021430
 80181dc:	20013d2c 	.word	0x20013d2c
 80181e0:	0802153c 	.word	0x0802153c
 80181e4:	20013d3c 	.word	0x20013d3c
 80181e8:	08021568 	.word	0x08021568
 80181ec:	20013d34 	.word	0x20013d34
 80181f0:	20004528 	.word	0x20004528
 80181f4:	20004558 	.word	0x20004558
 80181f8:	20004555 	.word	0x20004555
 80181fc:	20004550 	.word	0x20004550
 8018200:	20004554 	.word	0x20004554
 8018204:	20004552 	.word	0x20004552
      }
    }
    tcp_input_pcb = pcb;
 8018208:	4a9b      	ldr	r2, [pc, #620]	; (8018478 <tcp_input+0x7d4>)
 801820a:	69fb      	ldr	r3, [r7, #28]
 801820c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801820e:	69f8      	ldr	r0, [r7, #28]
 8018210:	f000 fb0a 	bl	8018828 <tcp_process>
 8018214:	4603      	mov	r3, r0
 8018216:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8018218:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801821c:	f113 0f0d 	cmn.w	r3, #13
 8018220:	f000 80d3 	beq.w	80183ca <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8018224:	4b95      	ldr	r3, [pc, #596]	; (801847c <tcp_input+0x7d8>)
 8018226:	781b      	ldrb	r3, [r3, #0]
 8018228:	f003 0308 	and.w	r3, r3, #8
 801822c:	2b00      	cmp	r3, #0
 801822e:	d015      	beq.n	801825c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8018230:	69fb      	ldr	r3, [r7, #28]
 8018232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018236:	2b00      	cmp	r3, #0
 8018238:	d008      	beq.n	801824c <tcp_input+0x5a8>
 801823a:	69fb      	ldr	r3, [r7, #28]
 801823c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018240:	69fa      	ldr	r2, [r7, #28]
 8018242:	6912      	ldr	r2, [r2, #16]
 8018244:	f06f 010d 	mvn.w	r1, #13
 8018248:	4610      	mov	r0, r2
 801824a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801824c:	69f9      	ldr	r1, [r7, #28]
 801824e:	488c      	ldr	r0, [pc, #560]	; (8018480 <tcp_input+0x7dc>)
 8018250:	f7ff fbb0 	bl	80179b4 <tcp_pcb_remove>
        tcp_free(pcb);
 8018254:	69f8      	ldr	r0, [r7, #28]
 8018256:	f7fd fefb 	bl	8016050 <tcp_free>
 801825a:	e0c1      	b.n	80183e0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 801825c:	2300      	movs	r3, #0
 801825e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8018260:	4b88      	ldr	r3, [pc, #544]	; (8018484 <tcp_input+0x7e0>)
 8018262:	881b      	ldrh	r3, [r3, #0]
 8018264:	2b00      	cmp	r3, #0
 8018266:	d01d      	beq.n	80182a4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8018268:	4b86      	ldr	r3, [pc, #536]	; (8018484 <tcp_input+0x7e0>)
 801826a:	881b      	ldrh	r3, [r3, #0]
 801826c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801826e:	69fb      	ldr	r3, [r7, #28]
 8018270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018274:	2b00      	cmp	r3, #0
 8018276:	d00a      	beq.n	801828e <tcp_input+0x5ea>
 8018278:	69fb      	ldr	r3, [r7, #28]
 801827a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801827e:	69fa      	ldr	r2, [r7, #28]
 8018280:	6910      	ldr	r0, [r2, #16]
 8018282:	89fa      	ldrh	r2, [r7, #14]
 8018284:	69f9      	ldr	r1, [r7, #28]
 8018286:	4798      	blx	r3
 8018288:	4603      	mov	r3, r0
 801828a:	74fb      	strb	r3, [r7, #19]
 801828c:	e001      	b.n	8018292 <tcp_input+0x5ee>
 801828e:	2300      	movs	r3, #0
 8018290:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8018292:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018296:	f113 0f0d 	cmn.w	r3, #13
 801829a:	f000 8098 	beq.w	80183ce <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801829e:	4b79      	ldr	r3, [pc, #484]	; (8018484 <tcp_input+0x7e0>)
 80182a0:	2200      	movs	r2, #0
 80182a2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80182a4:	69f8      	ldr	r0, [r7, #28]
 80182a6:	f000 f905 	bl	80184b4 <tcp_input_delayed_close>
 80182aa:	4603      	mov	r3, r0
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	f040 8090 	bne.w	80183d2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80182b2:	4b75      	ldr	r3, [pc, #468]	; (8018488 <tcp_input+0x7e4>)
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d041      	beq.n	801833e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80182ba:	69fb      	ldr	r3, [r7, #28]
 80182bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d006      	beq.n	80182d0 <tcp_input+0x62c>
 80182c2:	4b72      	ldr	r3, [pc, #456]	; (801848c <tcp_input+0x7e8>)
 80182c4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80182c8:	4971      	ldr	r1, [pc, #452]	; (8018490 <tcp_input+0x7ec>)
 80182ca:	4872      	ldr	r0, [pc, #456]	; (8018494 <tcp_input+0x7f0>)
 80182cc:	f006 fe5a 	bl	801ef84 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80182d0:	69fb      	ldr	r3, [r7, #28]
 80182d2:	8b5b      	ldrh	r3, [r3, #26]
 80182d4:	f003 0310 	and.w	r3, r3, #16
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d008      	beq.n	80182ee <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80182dc:	4b6a      	ldr	r3, [pc, #424]	; (8018488 <tcp_input+0x7e4>)
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	4618      	mov	r0, r3
 80182e2:	f7fd fc09 	bl	8015af8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80182e6:	69f8      	ldr	r0, [r7, #28]
 80182e8:	f7fe f992 	bl	8016610 <tcp_abort>
            goto aborted;
 80182ec:	e078      	b.n	80183e0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80182ee:	69fb      	ldr	r3, [r7, #28]
 80182f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d00c      	beq.n	8018312 <tcp_input+0x66e>
 80182f8:	69fb      	ldr	r3, [r7, #28]
 80182fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80182fe:	69fb      	ldr	r3, [r7, #28]
 8018300:	6918      	ldr	r0, [r3, #16]
 8018302:	4b61      	ldr	r3, [pc, #388]	; (8018488 <tcp_input+0x7e4>)
 8018304:	681a      	ldr	r2, [r3, #0]
 8018306:	2300      	movs	r3, #0
 8018308:	69f9      	ldr	r1, [r7, #28]
 801830a:	47a0      	blx	r4
 801830c:	4603      	mov	r3, r0
 801830e:	74fb      	strb	r3, [r7, #19]
 8018310:	e008      	b.n	8018324 <tcp_input+0x680>
 8018312:	4b5d      	ldr	r3, [pc, #372]	; (8018488 <tcp_input+0x7e4>)
 8018314:	681a      	ldr	r2, [r3, #0]
 8018316:	2300      	movs	r3, #0
 8018318:	69f9      	ldr	r1, [r7, #28]
 801831a:	2000      	movs	r0, #0
 801831c:	f7ff f87c 	bl	8017418 <tcp_recv_null>
 8018320:	4603      	mov	r3, r0
 8018322:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8018324:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018328:	f113 0f0d 	cmn.w	r3, #13
 801832c:	d053      	beq.n	80183d6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801832e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018332:	2b00      	cmp	r3, #0
 8018334:	d003      	beq.n	801833e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8018336:	4b54      	ldr	r3, [pc, #336]	; (8018488 <tcp_input+0x7e4>)
 8018338:	681a      	ldr	r2, [r3, #0]
 801833a:	69fb      	ldr	r3, [r7, #28]
 801833c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801833e:	4b4f      	ldr	r3, [pc, #316]	; (801847c <tcp_input+0x7d8>)
 8018340:	781b      	ldrb	r3, [r3, #0]
 8018342:	f003 0320 	and.w	r3, r3, #32
 8018346:	2b00      	cmp	r3, #0
 8018348:	d030      	beq.n	80183ac <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801834a:	69fb      	ldr	r3, [r7, #28]
 801834c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801834e:	2b00      	cmp	r3, #0
 8018350:	d009      	beq.n	8018366 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8018352:	69fb      	ldr	r3, [r7, #28]
 8018354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018356:	7b5a      	ldrb	r2, [r3, #13]
 8018358:	69fb      	ldr	r3, [r7, #28]
 801835a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801835c:	f042 0220 	orr.w	r2, r2, #32
 8018360:	b2d2      	uxtb	r2, r2
 8018362:	735a      	strb	r2, [r3, #13]
 8018364:	e022      	b.n	80183ac <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8018366:	69fb      	ldr	r3, [r7, #28]
 8018368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801836a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801836e:	d005      	beq.n	801837c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8018370:	69fb      	ldr	r3, [r7, #28]
 8018372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018374:	3301      	adds	r3, #1
 8018376:	b29a      	uxth	r2, r3
 8018378:	69fb      	ldr	r3, [r7, #28]
 801837a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801837c:	69fb      	ldr	r3, [r7, #28]
 801837e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018382:	2b00      	cmp	r3, #0
 8018384:	d00b      	beq.n	801839e <tcp_input+0x6fa>
 8018386:	69fb      	ldr	r3, [r7, #28]
 8018388:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801838c:	69fb      	ldr	r3, [r7, #28]
 801838e:	6918      	ldr	r0, [r3, #16]
 8018390:	2300      	movs	r3, #0
 8018392:	2200      	movs	r2, #0
 8018394:	69f9      	ldr	r1, [r7, #28]
 8018396:	47a0      	blx	r4
 8018398:	4603      	mov	r3, r0
 801839a:	74fb      	strb	r3, [r7, #19]
 801839c:	e001      	b.n	80183a2 <tcp_input+0x6fe>
 801839e:	2300      	movs	r3, #0
 80183a0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80183a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80183a6:	f113 0f0d 	cmn.w	r3, #13
 80183aa:	d016      	beq.n	80183da <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80183ac:	4b32      	ldr	r3, [pc, #200]	; (8018478 <tcp_input+0x7d4>)
 80183ae:	2200      	movs	r2, #0
 80183b0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80183b2:	69f8      	ldr	r0, [r7, #28]
 80183b4:	f000 f87e 	bl	80184b4 <tcp_input_delayed_close>
 80183b8:	4603      	mov	r3, r0
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d10f      	bne.n	80183de <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80183be:	69f8      	ldr	r0, [r7, #28]
 80183c0:	f002 ff10 	bl	801b1e4 <tcp_output>
 80183c4:	e00c      	b.n	80183e0 <tcp_input+0x73c>
        goto aborted;
 80183c6:	bf00      	nop
 80183c8:	e00a      	b.n	80183e0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80183ca:	bf00      	nop
 80183cc:	e008      	b.n	80183e0 <tcp_input+0x73c>
              goto aborted;
 80183ce:	bf00      	nop
 80183d0:	e006      	b.n	80183e0 <tcp_input+0x73c>
          goto aborted;
 80183d2:	bf00      	nop
 80183d4:	e004      	b.n	80183e0 <tcp_input+0x73c>
            goto aborted;
 80183d6:	bf00      	nop
 80183d8:	e002      	b.n	80183e0 <tcp_input+0x73c>
              goto aborted;
 80183da:	bf00      	nop
 80183dc:	e000      	b.n	80183e0 <tcp_input+0x73c>
          goto aborted;
 80183de:	bf00      	nop
    tcp_input_pcb = NULL;
 80183e0:	4b25      	ldr	r3, [pc, #148]	; (8018478 <tcp_input+0x7d4>)
 80183e2:	2200      	movs	r2, #0
 80183e4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80183e6:	4b28      	ldr	r3, [pc, #160]	; (8018488 <tcp_input+0x7e4>)
 80183e8:	2200      	movs	r2, #0
 80183ea:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80183ec:	4b2a      	ldr	r3, [pc, #168]	; (8018498 <tcp_input+0x7f4>)
 80183ee:	685b      	ldr	r3, [r3, #4]
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d03d      	beq.n	8018470 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 80183f4:	4b28      	ldr	r3, [pc, #160]	; (8018498 <tcp_input+0x7f4>)
 80183f6:	685b      	ldr	r3, [r3, #4]
 80183f8:	4618      	mov	r0, r3
 80183fa:	f7fd fb7d 	bl	8015af8 <pbuf_free>
      inseg.p = NULL;
 80183fe:	4b26      	ldr	r3, [pc, #152]	; (8018498 <tcp_input+0x7f4>)
 8018400:	2200      	movs	r2, #0
 8018402:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8018404:	e034      	b.n	8018470 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8018406:	4b25      	ldr	r3, [pc, #148]	; (801849c <tcp_input+0x7f8>)
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	899b      	ldrh	r3, [r3, #12]
 801840c:	b29b      	uxth	r3, r3
 801840e:	4618      	mov	r0, r3
 8018410:	f7fb ff94 	bl	801433c <lwip_htons>
 8018414:	4603      	mov	r3, r0
 8018416:	b2db      	uxtb	r3, r3
 8018418:	f003 0304 	and.w	r3, r3, #4
 801841c:	2b00      	cmp	r3, #0
 801841e:	d118      	bne.n	8018452 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018420:	4b1f      	ldr	r3, [pc, #124]	; (80184a0 <tcp_input+0x7fc>)
 8018422:	6819      	ldr	r1, [r3, #0]
 8018424:	4b1f      	ldr	r3, [pc, #124]	; (80184a4 <tcp_input+0x800>)
 8018426:	881b      	ldrh	r3, [r3, #0]
 8018428:	461a      	mov	r2, r3
 801842a:	4b1f      	ldr	r3, [pc, #124]	; (80184a8 <tcp_input+0x804>)
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018430:	4b1a      	ldr	r3, [pc, #104]	; (801849c <tcp_input+0x7f8>)
 8018432:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018434:	885b      	ldrh	r3, [r3, #2]
 8018436:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018438:	4a18      	ldr	r2, [pc, #96]	; (801849c <tcp_input+0x7f8>)
 801843a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801843c:	8812      	ldrh	r2, [r2, #0]
 801843e:	b292      	uxth	r2, r2
 8018440:	9202      	str	r2, [sp, #8]
 8018442:	9301      	str	r3, [sp, #4]
 8018444:	4b19      	ldr	r3, [pc, #100]	; (80184ac <tcp_input+0x808>)
 8018446:	9300      	str	r3, [sp, #0]
 8018448:	4b19      	ldr	r3, [pc, #100]	; (80184b0 <tcp_input+0x80c>)
 801844a:	4602      	mov	r2, r0
 801844c:	2000      	movs	r0, #0
 801844e:	f003 fc8f 	bl	801bd70 <tcp_rst>
    pbuf_free(p);
 8018452:	6878      	ldr	r0, [r7, #4]
 8018454:	f7fd fb50 	bl	8015af8 <pbuf_free>
  return;
 8018458:	e00a      	b.n	8018470 <tcp_input+0x7cc>
    goto dropped;
 801845a:	bf00      	nop
 801845c:	e004      	b.n	8018468 <tcp_input+0x7c4>
dropped:
 801845e:	bf00      	nop
 8018460:	e002      	b.n	8018468 <tcp_input+0x7c4>
      goto dropped;
 8018462:	bf00      	nop
 8018464:	e000      	b.n	8018468 <tcp_input+0x7c4>
      goto dropped;
 8018466:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8018468:	6878      	ldr	r0, [r7, #4]
 801846a:	f7fd fb45 	bl	8015af8 <pbuf_free>
 801846e:	e000      	b.n	8018472 <tcp_input+0x7ce>
  return;
 8018470:	bf00      	nop
}
 8018472:	3724      	adds	r7, #36	; 0x24
 8018474:	46bd      	mov	sp, r7
 8018476:	bd90      	pop	{r4, r7, pc}
 8018478:	20013d40 	.word	0x20013d40
 801847c:	20004555 	.word	0x20004555
 8018480:	20013d2c 	.word	0x20013d2c
 8018484:	20004550 	.word	0x20004550
 8018488:	20004558 	.word	0x20004558
 801848c:	080213e4 	.word	0x080213e4
 8018490:	08021598 	.word	0x08021598
 8018494:	08021430 	.word	0x08021430
 8018498:	20004528 	.word	0x20004528
 801849c:	20004538 	.word	0x20004538
 80184a0:	2000454c 	.word	0x2000454c
 80184a4:	20004552 	.word	0x20004552
 80184a8:	20004548 	.word	0x20004548
 80184ac:	20010628 	.word	0x20010628
 80184b0:	2001062c 	.word	0x2001062c

080184b4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80184b4:	b580      	push	{r7, lr}
 80184b6:	b082      	sub	sp, #8
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d106      	bne.n	80184d0 <tcp_input_delayed_close+0x1c>
 80184c2:	4b17      	ldr	r3, [pc, #92]	; (8018520 <tcp_input_delayed_close+0x6c>)
 80184c4:	f240 225a 	movw	r2, #602	; 0x25a
 80184c8:	4916      	ldr	r1, [pc, #88]	; (8018524 <tcp_input_delayed_close+0x70>)
 80184ca:	4817      	ldr	r0, [pc, #92]	; (8018528 <tcp_input_delayed_close+0x74>)
 80184cc:	f006 fd5a 	bl	801ef84 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80184d0:	4b16      	ldr	r3, [pc, #88]	; (801852c <tcp_input_delayed_close+0x78>)
 80184d2:	781b      	ldrb	r3, [r3, #0]
 80184d4:	f003 0310 	and.w	r3, r3, #16
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d01c      	beq.n	8018516 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	8b5b      	ldrh	r3, [r3, #26]
 80184e0:	f003 0310 	and.w	r3, r3, #16
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d10d      	bne.n	8018504 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d008      	beq.n	8018504 <tcp_input_delayed_close+0x50>
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80184f8:	687a      	ldr	r2, [r7, #4]
 80184fa:	6912      	ldr	r2, [r2, #16]
 80184fc:	f06f 010e 	mvn.w	r1, #14
 8018500:	4610      	mov	r0, r2
 8018502:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018504:	6879      	ldr	r1, [r7, #4]
 8018506:	480a      	ldr	r0, [pc, #40]	; (8018530 <tcp_input_delayed_close+0x7c>)
 8018508:	f7ff fa54 	bl	80179b4 <tcp_pcb_remove>
    tcp_free(pcb);
 801850c:	6878      	ldr	r0, [r7, #4]
 801850e:	f7fd fd9f 	bl	8016050 <tcp_free>
    return 1;
 8018512:	2301      	movs	r3, #1
 8018514:	e000      	b.n	8018518 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8018516:	2300      	movs	r3, #0
}
 8018518:	4618      	mov	r0, r3
 801851a:	3708      	adds	r7, #8
 801851c:	46bd      	mov	sp, r7
 801851e:	bd80      	pop	{r7, pc}
 8018520:	080213e4 	.word	0x080213e4
 8018524:	080215b4 	.word	0x080215b4
 8018528:	08021430 	.word	0x08021430
 801852c:	20004555 	.word	0x20004555
 8018530:	20013d2c 	.word	0x20013d2c

08018534 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8018534:	b590      	push	{r4, r7, lr}
 8018536:	b08b      	sub	sp, #44	; 0x2c
 8018538:	af04      	add	r7, sp, #16
 801853a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801853c:	4b6f      	ldr	r3, [pc, #444]	; (80186fc <tcp_listen_input+0x1c8>)
 801853e:	781b      	ldrb	r3, [r3, #0]
 8018540:	f003 0304 	and.w	r3, r3, #4
 8018544:	2b00      	cmp	r3, #0
 8018546:	f040 80d3 	bne.w	80186f0 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	2b00      	cmp	r3, #0
 801854e:	d106      	bne.n	801855e <tcp_listen_input+0x2a>
 8018550:	4b6b      	ldr	r3, [pc, #428]	; (8018700 <tcp_listen_input+0x1cc>)
 8018552:	f240 2281 	movw	r2, #641	; 0x281
 8018556:	496b      	ldr	r1, [pc, #428]	; (8018704 <tcp_listen_input+0x1d0>)
 8018558:	486b      	ldr	r0, [pc, #428]	; (8018708 <tcp_listen_input+0x1d4>)
 801855a:	f006 fd13 	bl	801ef84 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801855e:	4b67      	ldr	r3, [pc, #412]	; (80186fc <tcp_listen_input+0x1c8>)
 8018560:	781b      	ldrb	r3, [r3, #0]
 8018562:	f003 0310 	and.w	r3, r3, #16
 8018566:	2b00      	cmp	r3, #0
 8018568:	d019      	beq.n	801859e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801856a:	4b68      	ldr	r3, [pc, #416]	; (801870c <tcp_listen_input+0x1d8>)
 801856c:	6819      	ldr	r1, [r3, #0]
 801856e:	4b68      	ldr	r3, [pc, #416]	; (8018710 <tcp_listen_input+0x1dc>)
 8018570:	881b      	ldrh	r3, [r3, #0]
 8018572:	461a      	mov	r2, r3
 8018574:	4b67      	ldr	r3, [pc, #412]	; (8018714 <tcp_listen_input+0x1e0>)
 8018576:	681b      	ldr	r3, [r3, #0]
 8018578:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801857a:	4b67      	ldr	r3, [pc, #412]	; (8018718 <tcp_listen_input+0x1e4>)
 801857c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801857e:	885b      	ldrh	r3, [r3, #2]
 8018580:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018582:	4a65      	ldr	r2, [pc, #404]	; (8018718 <tcp_listen_input+0x1e4>)
 8018584:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018586:	8812      	ldrh	r2, [r2, #0]
 8018588:	b292      	uxth	r2, r2
 801858a:	9202      	str	r2, [sp, #8]
 801858c:	9301      	str	r3, [sp, #4]
 801858e:	4b63      	ldr	r3, [pc, #396]	; (801871c <tcp_listen_input+0x1e8>)
 8018590:	9300      	str	r3, [sp, #0]
 8018592:	4b63      	ldr	r3, [pc, #396]	; (8018720 <tcp_listen_input+0x1ec>)
 8018594:	4602      	mov	r2, r0
 8018596:	6878      	ldr	r0, [r7, #4]
 8018598:	f003 fbea 	bl	801bd70 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801859c:	e0aa      	b.n	80186f4 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 801859e:	4b57      	ldr	r3, [pc, #348]	; (80186fc <tcp_listen_input+0x1c8>)
 80185a0:	781b      	ldrb	r3, [r3, #0]
 80185a2:	f003 0302 	and.w	r3, r3, #2
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	f000 80a4 	beq.w	80186f4 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	7d5b      	ldrb	r3, [r3, #21]
 80185b0:	4618      	mov	r0, r3
 80185b2:	f7ff f855 	bl	8017660 <tcp_alloc>
 80185b6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80185b8:	697b      	ldr	r3, [r7, #20]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d111      	bne.n	80185e2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	699b      	ldr	r3, [r3, #24]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d00a      	beq.n	80185dc <tcp_listen_input+0xa8>
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	699b      	ldr	r3, [r3, #24]
 80185ca:	687a      	ldr	r2, [r7, #4]
 80185cc:	6910      	ldr	r0, [r2, #16]
 80185ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80185d2:	2100      	movs	r1, #0
 80185d4:	4798      	blx	r3
 80185d6:	4603      	mov	r3, r0
 80185d8:	73bb      	strb	r3, [r7, #14]
      return;
 80185da:	e08c      	b.n	80186f6 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80185dc:	23f0      	movs	r3, #240	; 0xf0
 80185de:	73bb      	strb	r3, [r7, #14]
      return;
 80185e0:	e089      	b.n	80186f6 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80185e2:	4b50      	ldr	r3, [pc, #320]	; (8018724 <tcp_listen_input+0x1f0>)
 80185e4:	695a      	ldr	r2, [r3, #20]
 80185e6:	697b      	ldr	r3, [r7, #20]
 80185e8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80185ea:	4b4e      	ldr	r3, [pc, #312]	; (8018724 <tcp_listen_input+0x1f0>)
 80185ec:	691a      	ldr	r2, [r3, #16]
 80185ee:	697b      	ldr	r3, [r7, #20]
 80185f0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	8ada      	ldrh	r2, [r3, #22]
 80185f6:	697b      	ldr	r3, [r7, #20]
 80185f8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80185fa:	4b47      	ldr	r3, [pc, #284]	; (8018718 <tcp_listen_input+0x1e4>)
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	881b      	ldrh	r3, [r3, #0]
 8018600:	b29a      	uxth	r2, r3
 8018602:	697b      	ldr	r3, [r7, #20]
 8018604:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8018606:	697b      	ldr	r3, [r7, #20]
 8018608:	2203      	movs	r2, #3
 801860a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801860c:	4b41      	ldr	r3, [pc, #260]	; (8018714 <tcp_listen_input+0x1e0>)
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	1c5a      	adds	r2, r3, #1
 8018612:	697b      	ldr	r3, [r7, #20]
 8018614:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8018616:	697b      	ldr	r3, [r7, #20]
 8018618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801861a:	697b      	ldr	r3, [r7, #20]
 801861c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801861e:	6978      	ldr	r0, [r7, #20]
 8018620:	f7ff fa5c 	bl	8017adc <tcp_next_iss>
 8018624:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8018626:	697b      	ldr	r3, [r7, #20]
 8018628:	693a      	ldr	r2, [r7, #16]
 801862a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801862c:	697b      	ldr	r3, [r7, #20]
 801862e:	693a      	ldr	r2, [r7, #16]
 8018630:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8018632:	697b      	ldr	r3, [r7, #20]
 8018634:	693a      	ldr	r2, [r7, #16]
 8018636:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8018638:	697b      	ldr	r3, [r7, #20]
 801863a:	693a      	ldr	r2, [r7, #16]
 801863c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801863e:	4b35      	ldr	r3, [pc, #212]	; (8018714 <tcp_listen_input+0x1e0>)
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	1e5a      	subs	r2, r3, #1
 8018644:	697b      	ldr	r3, [r7, #20]
 8018646:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	691a      	ldr	r2, [r3, #16]
 801864c:	697b      	ldr	r3, [r7, #20]
 801864e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8018650:	697b      	ldr	r3, [r7, #20]
 8018652:	687a      	ldr	r2, [r7, #4]
 8018654:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	7a5b      	ldrb	r3, [r3, #9]
 801865a:	f003 030c 	and.w	r3, r3, #12
 801865e:	b2da      	uxtb	r2, r3
 8018660:	697b      	ldr	r3, [r7, #20]
 8018662:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	7a1a      	ldrb	r2, [r3, #8]
 8018668:	697b      	ldr	r3, [r7, #20]
 801866a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801866c:	4b2e      	ldr	r3, [pc, #184]	; (8018728 <tcp_listen_input+0x1f4>)
 801866e:	681a      	ldr	r2, [r3, #0]
 8018670:	697b      	ldr	r3, [r7, #20]
 8018672:	60da      	str	r2, [r3, #12]
 8018674:	4a2c      	ldr	r2, [pc, #176]	; (8018728 <tcp_listen_input+0x1f4>)
 8018676:	697b      	ldr	r3, [r7, #20]
 8018678:	6013      	str	r3, [r2, #0]
 801867a:	f003 fd3b 	bl	801c0f4 <tcp_timer_needed>
 801867e:	4b2b      	ldr	r3, [pc, #172]	; (801872c <tcp_listen_input+0x1f8>)
 8018680:	2201      	movs	r2, #1
 8018682:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8018684:	6978      	ldr	r0, [r7, #20]
 8018686:	f001 fd8f 	bl	801a1a8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801868a:	4b23      	ldr	r3, [pc, #140]	; (8018718 <tcp_listen_input+0x1e4>)
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	89db      	ldrh	r3, [r3, #14]
 8018690:	b29a      	uxth	r2, r3
 8018692:	697b      	ldr	r3, [r7, #20]
 8018694:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8018698:	697b      	ldr	r3, [r7, #20]
 801869a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801869e:	697b      	ldr	r3, [r7, #20]
 80186a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80186a4:	697b      	ldr	r3, [r7, #20]
 80186a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80186a8:	697b      	ldr	r3, [r7, #20]
 80186aa:	3304      	adds	r3, #4
 80186ac:	4618      	mov	r0, r3
 80186ae:	f005 f92d 	bl	801d90c <ip4_route>
 80186b2:	4601      	mov	r1, r0
 80186b4:	697b      	ldr	r3, [r7, #20]
 80186b6:	3304      	adds	r3, #4
 80186b8:	461a      	mov	r2, r3
 80186ba:	4620      	mov	r0, r4
 80186bc:	f7ff fa34 	bl	8017b28 <tcp_eff_send_mss_netif>
 80186c0:	4603      	mov	r3, r0
 80186c2:	461a      	mov	r2, r3
 80186c4:	697b      	ldr	r3, [r7, #20]
 80186c6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80186c8:	2112      	movs	r1, #18
 80186ca:	6978      	ldr	r0, [r7, #20]
 80186cc:	f002 fc9c 	bl	801b008 <tcp_enqueue_flags>
 80186d0:	4603      	mov	r3, r0
 80186d2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80186d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d004      	beq.n	80186e6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80186dc:	2100      	movs	r1, #0
 80186de:	6978      	ldr	r0, [r7, #20]
 80186e0:	f7fd fed8 	bl	8016494 <tcp_abandon>
      return;
 80186e4:	e007      	b.n	80186f6 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 80186e6:	6978      	ldr	r0, [r7, #20]
 80186e8:	f002 fd7c 	bl	801b1e4 <tcp_output>
  return;
 80186ec:	bf00      	nop
 80186ee:	e001      	b.n	80186f4 <tcp_listen_input+0x1c0>
    return;
 80186f0:	bf00      	nop
 80186f2:	e000      	b.n	80186f6 <tcp_listen_input+0x1c2>
  return;
 80186f4:	bf00      	nop
}
 80186f6:	371c      	adds	r7, #28
 80186f8:	46bd      	mov	sp, r7
 80186fa:	bd90      	pop	{r4, r7, pc}
 80186fc:	20004554 	.word	0x20004554
 8018700:	080213e4 	.word	0x080213e4
 8018704:	080215dc 	.word	0x080215dc
 8018708:	08021430 	.word	0x08021430
 801870c:	2000454c 	.word	0x2000454c
 8018710:	20004552 	.word	0x20004552
 8018714:	20004548 	.word	0x20004548
 8018718:	20004538 	.word	0x20004538
 801871c:	20010628 	.word	0x20010628
 8018720:	2001062c 	.word	0x2001062c
 8018724:	20010618 	.word	0x20010618
 8018728:	20013d2c 	.word	0x20013d2c
 801872c:	20013d28 	.word	0x20013d28

08018730 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8018730:	b580      	push	{r7, lr}
 8018732:	b086      	sub	sp, #24
 8018734:	af04      	add	r7, sp, #16
 8018736:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8018738:	4b30      	ldr	r3, [pc, #192]	; (80187fc <tcp_timewait_input+0xcc>)
 801873a:	781b      	ldrb	r3, [r3, #0]
 801873c:	f003 0304 	and.w	r3, r3, #4
 8018740:	2b00      	cmp	r3, #0
 8018742:	d154      	bne.n	80187ee <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	2b00      	cmp	r3, #0
 8018748:	d106      	bne.n	8018758 <tcp_timewait_input+0x28>
 801874a:	4b2d      	ldr	r3, [pc, #180]	; (8018800 <tcp_timewait_input+0xd0>)
 801874c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018750:	492c      	ldr	r1, [pc, #176]	; (8018804 <tcp_timewait_input+0xd4>)
 8018752:	482d      	ldr	r0, [pc, #180]	; (8018808 <tcp_timewait_input+0xd8>)
 8018754:	f006 fc16 	bl	801ef84 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8018758:	4b28      	ldr	r3, [pc, #160]	; (80187fc <tcp_timewait_input+0xcc>)
 801875a:	781b      	ldrb	r3, [r3, #0]
 801875c:	f003 0302 	and.w	r3, r3, #2
 8018760:	2b00      	cmp	r3, #0
 8018762:	d02a      	beq.n	80187ba <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8018764:	4b29      	ldr	r3, [pc, #164]	; (801880c <tcp_timewait_input+0xdc>)
 8018766:	681a      	ldr	r2, [r3, #0]
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801876c:	1ad3      	subs	r3, r2, r3
 801876e:	2b00      	cmp	r3, #0
 8018770:	db2d      	blt.n	80187ce <tcp_timewait_input+0x9e>
 8018772:	4b26      	ldr	r3, [pc, #152]	; (801880c <tcp_timewait_input+0xdc>)
 8018774:	681a      	ldr	r2, [r3, #0]
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801877a:	6879      	ldr	r1, [r7, #4]
 801877c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801877e:	440b      	add	r3, r1
 8018780:	1ad3      	subs	r3, r2, r3
 8018782:	2b00      	cmp	r3, #0
 8018784:	dc23      	bgt.n	80187ce <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018786:	4b22      	ldr	r3, [pc, #136]	; (8018810 <tcp_timewait_input+0xe0>)
 8018788:	6819      	ldr	r1, [r3, #0]
 801878a:	4b22      	ldr	r3, [pc, #136]	; (8018814 <tcp_timewait_input+0xe4>)
 801878c:	881b      	ldrh	r3, [r3, #0]
 801878e:	461a      	mov	r2, r3
 8018790:	4b1e      	ldr	r3, [pc, #120]	; (801880c <tcp_timewait_input+0xdc>)
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018796:	4b20      	ldr	r3, [pc, #128]	; (8018818 <tcp_timewait_input+0xe8>)
 8018798:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801879a:	885b      	ldrh	r3, [r3, #2]
 801879c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801879e:	4a1e      	ldr	r2, [pc, #120]	; (8018818 <tcp_timewait_input+0xe8>)
 80187a0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80187a2:	8812      	ldrh	r2, [r2, #0]
 80187a4:	b292      	uxth	r2, r2
 80187a6:	9202      	str	r2, [sp, #8]
 80187a8:	9301      	str	r3, [sp, #4]
 80187aa:	4b1c      	ldr	r3, [pc, #112]	; (801881c <tcp_timewait_input+0xec>)
 80187ac:	9300      	str	r3, [sp, #0]
 80187ae:	4b1c      	ldr	r3, [pc, #112]	; (8018820 <tcp_timewait_input+0xf0>)
 80187b0:	4602      	mov	r2, r0
 80187b2:	6878      	ldr	r0, [r7, #4]
 80187b4:	f003 fadc 	bl	801bd70 <tcp_rst>
      return;
 80187b8:	e01c      	b.n	80187f4 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 80187ba:	4b10      	ldr	r3, [pc, #64]	; (80187fc <tcp_timewait_input+0xcc>)
 80187bc:	781b      	ldrb	r3, [r3, #0]
 80187be:	f003 0301 	and.w	r3, r3, #1
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d003      	beq.n	80187ce <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80187c6:	4b17      	ldr	r3, [pc, #92]	; (8018824 <tcp_timewait_input+0xf4>)
 80187c8:	681a      	ldr	r2, [r3, #0]
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80187ce:	4b11      	ldr	r3, [pc, #68]	; (8018814 <tcp_timewait_input+0xe4>)
 80187d0:	881b      	ldrh	r3, [r3, #0]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d00d      	beq.n	80187f2 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	8b5b      	ldrh	r3, [r3, #26]
 80187da:	f043 0302 	orr.w	r3, r3, #2
 80187de:	b29a      	uxth	r2, r3
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80187e4:	6878      	ldr	r0, [r7, #4]
 80187e6:	f002 fcfd 	bl	801b1e4 <tcp_output>
  }
  return;
 80187ea:	bf00      	nop
 80187ec:	e001      	b.n	80187f2 <tcp_timewait_input+0xc2>
    return;
 80187ee:	bf00      	nop
 80187f0:	e000      	b.n	80187f4 <tcp_timewait_input+0xc4>
  return;
 80187f2:	bf00      	nop
}
 80187f4:	3708      	adds	r7, #8
 80187f6:	46bd      	mov	sp, r7
 80187f8:	bd80      	pop	{r7, pc}
 80187fa:	bf00      	nop
 80187fc:	20004554 	.word	0x20004554
 8018800:	080213e4 	.word	0x080213e4
 8018804:	080215fc 	.word	0x080215fc
 8018808:	08021430 	.word	0x08021430
 801880c:	20004548 	.word	0x20004548
 8018810:	2000454c 	.word	0x2000454c
 8018814:	20004552 	.word	0x20004552
 8018818:	20004538 	.word	0x20004538
 801881c:	20010628 	.word	0x20010628
 8018820:	2001062c 	.word	0x2001062c
 8018824:	20013d30 	.word	0x20013d30

08018828 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8018828:	b590      	push	{r4, r7, lr}
 801882a:	b08d      	sub	sp, #52	; 0x34
 801882c:	af04      	add	r7, sp, #16
 801882e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8018830:	2300      	movs	r3, #0
 8018832:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8018834:	2300      	movs	r3, #0
 8018836:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	2b00      	cmp	r3, #0
 801883c:	d106      	bne.n	801884c <tcp_process+0x24>
 801883e:	4ba5      	ldr	r3, [pc, #660]	; (8018ad4 <tcp_process+0x2ac>)
 8018840:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8018844:	49a4      	ldr	r1, [pc, #656]	; (8018ad8 <tcp_process+0x2b0>)
 8018846:	48a5      	ldr	r0, [pc, #660]	; (8018adc <tcp_process+0x2b4>)
 8018848:	f006 fb9c 	bl	801ef84 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801884c:	4ba4      	ldr	r3, [pc, #656]	; (8018ae0 <tcp_process+0x2b8>)
 801884e:	781b      	ldrb	r3, [r3, #0]
 8018850:	f003 0304 	and.w	r3, r3, #4
 8018854:	2b00      	cmp	r3, #0
 8018856:	d04e      	beq.n	80188f6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	7d1b      	ldrb	r3, [r3, #20]
 801885c:	2b02      	cmp	r3, #2
 801885e:	d108      	bne.n	8018872 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018864:	4b9f      	ldr	r3, [pc, #636]	; (8018ae4 <tcp_process+0x2bc>)
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	429a      	cmp	r2, r3
 801886a:	d123      	bne.n	80188b4 <tcp_process+0x8c>
        acceptable = 1;
 801886c:	2301      	movs	r3, #1
 801886e:	76fb      	strb	r3, [r7, #27]
 8018870:	e020      	b.n	80188b4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018876:	4b9c      	ldr	r3, [pc, #624]	; (8018ae8 <tcp_process+0x2c0>)
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	429a      	cmp	r2, r3
 801887c:	d102      	bne.n	8018884 <tcp_process+0x5c>
        acceptable = 1;
 801887e:	2301      	movs	r3, #1
 8018880:	76fb      	strb	r3, [r7, #27]
 8018882:	e017      	b.n	80188b4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018884:	4b98      	ldr	r3, [pc, #608]	; (8018ae8 <tcp_process+0x2c0>)
 8018886:	681a      	ldr	r2, [r3, #0]
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801888c:	1ad3      	subs	r3, r2, r3
 801888e:	2b00      	cmp	r3, #0
 8018890:	db10      	blt.n	80188b4 <tcp_process+0x8c>
 8018892:	4b95      	ldr	r3, [pc, #596]	; (8018ae8 <tcp_process+0x2c0>)
 8018894:	681a      	ldr	r2, [r3, #0]
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801889a:	6879      	ldr	r1, [r7, #4]
 801889c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801889e:	440b      	add	r3, r1
 80188a0:	1ad3      	subs	r3, r2, r3
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	dc06      	bgt.n	80188b4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	8b5b      	ldrh	r3, [r3, #26]
 80188aa:	f043 0302 	orr.w	r3, r3, #2
 80188ae:	b29a      	uxth	r2, r3
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80188b4:	7efb      	ldrb	r3, [r7, #27]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d01b      	beq.n	80188f2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	7d1b      	ldrb	r3, [r3, #20]
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d106      	bne.n	80188d0 <tcp_process+0xa8>
 80188c2:	4b84      	ldr	r3, [pc, #528]	; (8018ad4 <tcp_process+0x2ac>)
 80188c4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80188c8:	4988      	ldr	r1, [pc, #544]	; (8018aec <tcp_process+0x2c4>)
 80188ca:	4884      	ldr	r0, [pc, #528]	; (8018adc <tcp_process+0x2b4>)
 80188cc:	f006 fb5a 	bl	801ef84 <iprintf>
      recv_flags |= TF_RESET;
 80188d0:	4b87      	ldr	r3, [pc, #540]	; (8018af0 <tcp_process+0x2c8>)
 80188d2:	781b      	ldrb	r3, [r3, #0]
 80188d4:	f043 0308 	orr.w	r3, r3, #8
 80188d8:	b2da      	uxtb	r2, r3
 80188da:	4b85      	ldr	r3, [pc, #532]	; (8018af0 <tcp_process+0x2c8>)
 80188dc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	8b5b      	ldrh	r3, [r3, #26]
 80188e2:	f023 0301 	bic.w	r3, r3, #1
 80188e6:	b29a      	uxth	r2, r3
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80188ec:	f06f 030d 	mvn.w	r3, #13
 80188f0:	e37a      	b.n	8018fe8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80188f2:	2300      	movs	r3, #0
 80188f4:	e378      	b.n	8018fe8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80188f6:	4b7a      	ldr	r3, [pc, #488]	; (8018ae0 <tcp_process+0x2b8>)
 80188f8:	781b      	ldrb	r3, [r3, #0]
 80188fa:	f003 0302 	and.w	r3, r3, #2
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d010      	beq.n	8018924 <tcp_process+0xfc>
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	7d1b      	ldrb	r3, [r3, #20]
 8018906:	2b02      	cmp	r3, #2
 8018908:	d00c      	beq.n	8018924 <tcp_process+0xfc>
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	7d1b      	ldrb	r3, [r3, #20]
 801890e:	2b03      	cmp	r3, #3
 8018910:	d008      	beq.n	8018924 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	8b5b      	ldrh	r3, [r3, #26]
 8018916:	f043 0302 	orr.w	r3, r3, #2
 801891a:	b29a      	uxth	r2, r3
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8018920:	2300      	movs	r3, #0
 8018922:	e361      	b.n	8018fe8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	8b5b      	ldrh	r3, [r3, #26]
 8018928:	f003 0310 	and.w	r3, r3, #16
 801892c:	2b00      	cmp	r3, #0
 801892e:	d103      	bne.n	8018938 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8018930:	4b70      	ldr	r3, [pc, #448]	; (8018af4 <tcp_process+0x2cc>)
 8018932:	681a      	ldr	r2, [r3, #0]
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	2200      	movs	r2, #0
 801893c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	2200      	movs	r2, #0
 8018944:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8018948:	6878      	ldr	r0, [r7, #4]
 801894a:	f001 fc2d 	bl	801a1a8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	7d1b      	ldrb	r3, [r3, #20]
 8018952:	3b02      	subs	r3, #2
 8018954:	2b07      	cmp	r3, #7
 8018956:	f200 8337 	bhi.w	8018fc8 <tcp_process+0x7a0>
 801895a:	a201      	add	r2, pc, #4	; (adr r2, 8018960 <tcp_process+0x138>)
 801895c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018960:	08018981 	.word	0x08018981
 8018964:	08018bb1 	.word	0x08018bb1
 8018968:	08018d29 	.word	0x08018d29
 801896c:	08018d53 	.word	0x08018d53
 8018970:	08018e77 	.word	0x08018e77
 8018974:	08018d29 	.word	0x08018d29
 8018978:	08018f03 	.word	0x08018f03
 801897c:	08018f93 	.word	0x08018f93
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018980:	4b57      	ldr	r3, [pc, #348]	; (8018ae0 <tcp_process+0x2b8>)
 8018982:	781b      	ldrb	r3, [r3, #0]
 8018984:	f003 0310 	and.w	r3, r3, #16
 8018988:	2b00      	cmp	r3, #0
 801898a:	f000 80e4 	beq.w	8018b56 <tcp_process+0x32e>
 801898e:	4b54      	ldr	r3, [pc, #336]	; (8018ae0 <tcp_process+0x2b8>)
 8018990:	781b      	ldrb	r3, [r3, #0]
 8018992:	f003 0302 	and.w	r3, r3, #2
 8018996:	2b00      	cmp	r3, #0
 8018998:	f000 80dd 	beq.w	8018b56 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189a0:	1c5a      	adds	r2, r3, #1
 80189a2:	4b50      	ldr	r3, [pc, #320]	; (8018ae4 <tcp_process+0x2bc>)
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	429a      	cmp	r2, r3
 80189a8:	f040 80d5 	bne.w	8018b56 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80189ac:	4b4e      	ldr	r3, [pc, #312]	; (8018ae8 <tcp_process+0x2c0>)
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	1c5a      	adds	r2, r3, #1
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80189be:	4b49      	ldr	r3, [pc, #292]	; (8018ae4 <tcp_process+0x2bc>)
 80189c0:	681a      	ldr	r2, [r3, #0]
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80189c6:	4b4c      	ldr	r3, [pc, #304]	; (8018af8 <tcp_process+0x2d0>)
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	89db      	ldrh	r3, [r3, #14]
 80189cc:	b29a      	uxth	r2, r3
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80189e0:	4b41      	ldr	r3, [pc, #260]	; (8018ae8 <tcp_process+0x2c0>)
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	1e5a      	subs	r2, r3, #1
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	2204      	movs	r2, #4
 80189ee:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	3304      	adds	r3, #4
 80189f8:	4618      	mov	r0, r3
 80189fa:	f004 ff87 	bl	801d90c <ip4_route>
 80189fe:	4601      	mov	r1, r0
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	3304      	adds	r3, #4
 8018a04:	461a      	mov	r2, r3
 8018a06:	4620      	mov	r0, r4
 8018a08:	f7ff f88e 	bl	8017b28 <tcp_eff_send_mss_netif>
 8018a0c:	4603      	mov	r3, r0
 8018a0e:	461a      	mov	r2, r3
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018a18:	009a      	lsls	r2, r3, #2
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018a1e:	005b      	lsls	r3, r3, #1
 8018a20:	f241 111c 	movw	r1, #4380	; 0x111c
 8018a24:	428b      	cmp	r3, r1
 8018a26:	bf38      	it	cc
 8018a28:	460b      	movcc	r3, r1
 8018a2a:	429a      	cmp	r2, r3
 8018a2c:	d204      	bcs.n	8018a38 <tcp_process+0x210>
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018a32:	009b      	lsls	r3, r3, #2
 8018a34:	b29b      	uxth	r3, r3
 8018a36:	e00d      	b.n	8018a54 <tcp_process+0x22c>
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018a3c:	005b      	lsls	r3, r3, #1
 8018a3e:	f241 121c 	movw	r2, #4380	; 0x111c
 8018a42:	4293      	cmp	r3, r2
 8018a44:	d904      	bls.n	8018a50 <tcp_process+0x228>
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018a4a:	005b      	lsls	r3, r3, #1
 8018a4c:	b29b      	uxth	r3, r3
 8018a4e:	e001      	b.n	8018a54 <tcp_process+0x22c>
 8018a50:	f241 131c 	movw	r3, #4380	; 0x111c
 8018a54:	687a      	ldr	r2, [r7, #4]
 8018a56:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d106      	bne.n	8018a72 <tcp_process+0x24a>
 8018a64:	4b1b      	ldr	r3, [pc, #108]	; (8018ad4 <tcp_process+0x2ac>)
 8018a66:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8018a6a:	4924      	ldr	r1, [pc, #144]	; (8018afc <tcp_process+0x2d4>)
 8018a6c:	481b      	ldr	r0, [pc, #108]	; (8018adc <tcp_process+0x2b4>)
 8018a6e:	f006 fa89 	bl	801ef84 <iprintf>
        --pcb->snd_queuelen;
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018a78:	3b01      	subs	r3, #1
 8018a7a:	b29a      	uxth	r2, r3
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a86:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8018a88:	69fb      	ldr	r3, [r7, #28]
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d111      	bne.n	8018ab2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018a92:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8018a94:	69fb      	ldr	r3, [r7, #28]
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d106      	bne.n	8018aa8 <tcp_process+0x280>
 8018a9a:	4b0e      	ldr	r3, [pc, #56]	; (8018ad4 <tcp_process+0x2ac>)
 8018a9c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8018aa0:	4917      	ldr	r1, [pc, #92]	; (8018b00 <tcp_process+0x2d8>)
 8018aa2:	480e      	ldr	r0, [pc, #56]	; (8018adc <tcp_process+0x2b4>)
 8018aa4:	f006 fa6e 	bl	801ef84 <iprintf>
          pcb->unsent = rseg->next;
 8018aa8:	69fb      	ldr	r3, [r7, #28]
 8018aaa:	681a      	ldr	r2, [r3, #0]
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	66da      	str	r2, [r3, #108]	; 0x6c
 8018ab0:	e003      	b.n	8018aba <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8018ab2:	69fb      	ldr	r3, [r7, #28]
 8018ab4:	681a      	ldr	r2, [r3, #0]
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8018aba:	69f8      	ldr	r0, [r7, #28]
 8018abc:	f7fe fc4a 	bl	8017354 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d11d      	bne.n	8018b04 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018ace:	861a      	strh	r2, [r3, #48]	; 0x30
 8018ad0:	e01f      	b.n	8018b12 <tcp_process+0x2ea>
 8018ad2:	bf00      	nop
 8018ad4:	080213e4 	.word	0x080213e4
 8018ad8:	0802161c 	.word	0x0802161c
 8018adc:	08021430 	.word	0x08021430
 8018ae0:	20004554 	.word	0x20004554
 8018ae4:	2000454c 	.word	0x2000454c
 8018ae8:	20004548 	.word	0x20004548
 8018aec:	08021638 	.word	0x08021638
 8018af0:	20004555 	.word	0x20004555
 8018af4:	20013d30 	.word	0x20013d30
 8018af8:	20004538 	.word	0x20004538
 8018afc:	08021658 	.word	0x08021658
 8018b00:	08021670 	.word	0x08021670
        } else {
          pcb->rtime = 0;
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	2200      	movs	r2, #0
 8018b08:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	2200      	movs	r2, #0
 8018b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d00a      	beq.n	8018b32 <tcp_process+0x30a>
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018b22:	687a      	ldr	r2, [r7, #4]
 8018b24:	6910      	ldr	r0, [r2, #16]
 8018b26:	2200      	movs	r2, #0
 8018b28:	6879      	ldr	r1, [r7, #4]
 8018b2a:	4798      	blx	r3
 8018b2c:	4603      	mov	r3, r0
 8018b2e:	76bb      	strb	r3, [r7, #26]
 8018b30:	e001      	b.n	8018b36 <tcp_process+0x30e>
 8018b32:	2300      	movs	r3, #0
 8018b34:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8018b36:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018b3a:	f113 0f0d 	cmn.w	r3, #13
 8018b3e:	d102      	bne.n	8018b46 <tcp_process+0x31e>
          return ERR_ABRT;
 8018b40:	f06f 030c 	mvn.w	r3, #12
 8018b44:	e250      	b.n	8018fe8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	8b5b      	ldrh	r3, [r3, #26]
 8018b4a:	f043 0302 	orr.w	r3, r3, #2
 8018b4e:	b29a      	uxth	r2, r3
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8018b54:	e23a      	b.n	8018fcc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8018b56:	4b9d      	ldr	r3, [pc, #628]	; (8018dcc <tcp_process+0x5a4>)
 8018b58:	781b      	ldrb	r3, [r3, #0]
 8018b5a:	f003 0310 	and.w	r3, r3, #16
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	f000 8234 	beq.w	8018fcc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b64:	4b9a      	ldr	r3, [pc, #616]	; (8018dd0 <tcp_process+0x5a8>)
 8018b66:	6819      	ldr	r1, [r3, #0]
 8018b68:	4b9a      	ldr	r3, [pc, #616]	; (8018dd4 <tcp_process+0x5ac>)
 8018b6a:	881b      	ldrh	r3, [r3, #0]
 8018b6c:	461a      	mov	r2, r3
 8018b6e:	4b9a      	ldr	r3, [pc, #616]	; (8018dd8 <tcp_process+0x5b0>)
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018b74:	4b99      	ldr	r3, [pc, #612]	; (8018ddc <tcp_process+0x5b4>)
 8018b76:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b78:	885b      	ldrh	r3, [r3, #2]
 8018b7a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018b7c:	4a97      	ldr	r2, [pc, #604]	; (8018ddc <tcp_process+0x5b4>)
 8018b7e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b80:	8812      	ldrh	r2, [r2, #0]
 8018b82:	b292      	uxth	r2, r2
 8018b84:	9202      	str	r2, [sp, #8]
 8018b86:	9301      	str	r3, [sp, #4]
 8018b88:	4b95      	ldr	r3, [pc, #596]	; (8018de0 <tcp_process+0x5b8>)
 8018b8a:	9300      	str	r3, [sp, #0]
 8018b8c:	4b95      	ldr	r3, [pc, #596]	; (8018de4 <tcp_process+0x5bc>)
 8018b8e:	4602      	mov	r2, r0
 8018b90:	6878      	ldr	r0, [r7, #4]
 8018b92:	f003 f8ed 	bl	801bd70 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018b9c:	2b05      	cmp	r3, #5
 8018b9e:	f200 8215 	bhi.w	8018fcc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	2200      	movs	r2, #0
 8018ba6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8018ba8:	6878      	ldr	r0, [r7, #4]
 8018baa:	f002 feab 	bl	801b904 <tcp_rexmit_rto>
      break;
 8018bae:	e20d      	b.n	8018fcc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8018bb0:	4b86      	ldr	r3, [pc, #536]	; (8018dcc <tcp_process+0x5a4>)
 8018bb2:	781b      	ldrb	r3, [r3, #0]
 8018bb4:	f003 0310 	and.w	r3, r3, #16
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	f000 80a1 	beq.w	8018d00 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018bbe:	4b84      	ldr	r3, [pc, #528]	; (8018dd0 <tcp_process+0x5a8>)
 8018bc0:	681a      	ldr	r2, [r3, #0]
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018bc6:	1ad3      	subs	r3, r2, r3
 8018bc8:	3b01      	subs	r3, #1
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	db7e      	blt.n	8018ccc <tcp_process+0x4a4>
 8018bce:	4b80      	ldr	r3, [pc, #512]	; (8018dd0 <tcp_process+0x5a8>)
 8018bd0:	681a      	ldr	r2, [r3, #0]
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018bd6:	1ad3      	subs	r3, r2, r3
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	dc77      	bgt.n	8018ccc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	2204      	movs	r2, #4
 8018be0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d102      	bne.n	8018bf0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8018bea:	23fa      	movs	r3, #250	; 0xfa
 8018bec:	76bb      	strb	r3, [r7, #26]
 8018bee:	e01d      	b.n	8018c2c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018bf4:	699b      	ldr	r3, [r3, #24]
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d106      	bne.n	8018c08 <tcp_process+0x3e0>
 8018bfa:	4b7b      	ldr	r3, [pc, #492]	; (8018de8 <tcp_process+0x5c0>)
 8018bfc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8018c00:	497a      	ldr	r1, [pc, #488]	; (8018dec <tcp_process+0x5c4>)
 8018c02:	487b      	ldr	r0, [pc, #492]	; (8018df0 <tcp_process+0x5c8>)
 8018c04:	f006 f9be 	bl	801ef84 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018c0c:	699b      	ldr	r3, [r3, #24]
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d00a      	beq.n	8018c28 <tcp_process+0x400>
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018c16:	699b      	ldr	r3, [r3, #24]
 8018c18:	687a      	ldr	r2, [r7, #4]
 8018c1a:	6910      	ldr	r0, [r2, #16]
 8018c1c:	2200      	movs	r2, #0
 8018c1e:	6879      	ldr	r1, [r7, #4]
 8018c20:	4798      	blx	r3
 8018c22:	4603      	mov	r3, r0
 8018c24:	76bb      	strb	r3, [r7, #26]
 8018c26:	e001      	b.n	8018c2c <tcp_process+0x404>
 8018c28:	23f0      	movs	r3, #240	; 0xf0
 8018c2a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8018c2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d00a      	beq.n	8018c4a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8018c34:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018c38:	f113 0f0d 	cmn.w	r3, #13
 8018c3c:	d002      	beq.n	8018c44 <tcp_process+0x41c>
              tcp_abort(pcb);
 8018c3e:	6878      	ldr	r0, [r7, #4]
 8018c40:	f7fd fce6 	bl	8016610 <tcp_abort>
            }
            return ERR_ABRT;
 8018c44:	f06f 030c 	mvn.w	r3, #12
 8018c48:	e1ce      	b.n	8018fe8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8018c4a:	6878      	ldr	r0, [r7, #4]
 8018c4c:	f000 fae0 	bl	8019210 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8018c50:	4b68      	ldr	r3, [pc, #416]	; (8018df4 <tcp_process+0x5cc>)
 8018c52:	881b      	ldrh	r3, [r3, #0]
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d005      	beq.n	8018c64 <tcp_process+0x43c>
            recv_acked--;
 8018c58:	4b66      	ldr	r3, [pc, #408]	; (8018df4 <tcp_process+0x5cc>)
 8018c5a:	881b      	ldrh	r3, [r3, #0]
 8018c5c:	3b01      	subs	r3, #1
 8018c5e:	b29a      	uxth	r2, r3
 8018c60:	4b64      	ldr	r3, [pc, #400]	; (8018df4 <tcp_process+0x5cc>)
 8018c62:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c68:	009a      	lsls	r2, r3, #2
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c6e:	005b      	lsls	r3, r3, #1
 8018c70:	f241 111c 	movw	r1, #4380	; 0x111c
 8018c74:	428b      	cmp	r3, r1
 8018c76:	bf38      	it	cc
 8018c78:	460b      	movcc	r3, r1
 8018c7a:	429a      	cmp	r2, r3
 8018c7c:	d204      	bcs.n	8018c88 <tcp_process+0x460>
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c82:	009b      	lsls	r3, r3, #2
 8018c84:	b29b      	uxth	r3, r3
 8018c86:	e00d      	b.n	8018ca4 <tcp_process+0x47c>
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c8c:	005b      	lsls	r3, r3, #1
 8018c8e:	f241 121c 	movw	r2, #4380	; 0x111c
 8018c92:	4293      	cmp	r3, r2
 8018c94:	d904      	bls.n	8018ca0 <tcp_process+0x478>
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c9a:	005b      	lsls	r3, r3, #1
 8018c9c:	b29b      	uxth	r3, r3
 8018c9e:	e001      	b.n	8018ca4 <tcp_process+0x47c>
 8018ca0:	f241 131c 	movw	r3, #4380	; 0x111c
 8018ca4:	687a      	ldr	r2, [r7, #4]
 8018ca6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8018caa:	4b53      	ldr	r3, [pc, #332]	; (8018df8 <tcp_process+0x5d0>)
 8018cac:	781b      	ldrb	r3, [r3, #0]
 8018cae:	f003 0320 	and.w	r3, r3, #32
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d037      	beq.n	8018d26 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	8b5b      	ldrh	r3, [r3, #26]
 8018cba:	f043 0302 	orr.w	r3, r3, #2
 8018cbe:	b29a      	uxth	r2, r3
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	2207      	movs	r2, #7
 8018cc8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8018cca:	e02c      	b.n	8018d26 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ccc:	4b40      	ldr	r3, [pc, #256]	; (8018dd0 <tcp_process+0x5a8>)
 8018cce:	6819      	ldr	r1, [r3, #0]
 8018cd0:	4b40      	ldr	r3, [pc, #256]	; (8018dd4 <tcp_process+0x5ac>)
 8018cd2:	881b      	ldrh	r3, [r3, #0]
 8018cd4:	461a      	mov	r2, r3
 8018cd6:	4b40      	ldr	r3, [pc, #256]	; (8018dd8 <tcp_process+0x5b0>)
 8018cd8:	681b      	ldr	r3, [r3, #0]
 8018cda:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018cdc:	4b3f      	ldr	r3, [pc, #252]	; (8018ddc <tcp_process+0x5b4>)
 8018cde:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ce0:	885b      	ldrh	r3, [r3, #2]
 8018ce2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018ce4:	4a3d      	ldr	r2, [pc, #244]	; (8018ddc <tcp_process+0x5b4>)
 8018ce6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ce8:	8812      	ldrh	r2, [r2, #0]
 8018cea:	b292      	uxth	r2, r2
 8018cec:	9202      	str	r2, [sp, #8]
 8018cee:	9301      	str	r3, [sp, #4]
 8018cf0:	4b3b      	ldr	r3, [pc, #236]	; (8018de0 <tcp_process+0x5b8>)
 8018cf2:	9300      	str	r3, [sp, #0]
 8018cf4:	4b3b      	ldr	r3, [pc, #236]	; (8018de4 <tcp_process+0x5bc>)
 8018cf6:	4602      	mov	r2, r0
 8018cf8:	6878      	ldr	r0, [r7, #4]
 8018cfa:	f003 f839 	bl	801bd70 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8018cfe:	e167      	b.n	8018fd0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8018d00:	4b32      	ldr	r3, [pc, #200]	; (8018dcc <tcp_process+0x5a4>)
 8018d02:	781b      	ldrb	r3, [r3, #0]
 8018d04:	f003 0302 	and.w	r3, r3, #2
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	f000 8161 	beq.w	8018fd0 <tcp_process+0x7a8>
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d12:	1e5a      	subs	r2, r3, #1
 8018d14:	4b30      	ldr	r3, [pc, #192]	; (8018dd8 <tcp_process+0x5b0>)
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	429a      	cmp	r2, r3
 8018d1a:	f040 8159 	bne.w	8018fd0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8018d1e:	6878      	ldr	r0, [r7, #4]
 8018d20:	f002 fe12 	bl	801b948 <tcp_rexmit>
      break;
 8018d24:	e154      	b.n	8018fd0 <tcp_process+0x7a8>
 8018d26:	e153      	b.n	8018fd0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8018d28:	6878      	ldr	r0, [r7, #4]
 8018d2a:	f000 fa71 	bl	8019210 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8018d2e:	4b32      	ldr	r3, [pc, #200]	; (8018df8 <tcp_process+0x5d0>)
 8018d30:	781b      	ldrb	r3, [r3, #0]
 8018d32:	f003 0320 	and.w	r3, r3, #32
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	f000 814c 	beq.w	8018fd4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	8b5b      	ldrh	r3, [r3, #26]
 8018d40:	f043 0302 	orr.w	r3, r3, #2
 8018d44:	b29a      	uxth	r2, r3
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	2207      	movs	r2, #7
 8018d4e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018d50:	e140      	b.n	8018fd4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8018d52:	6878      	ldr	r0, [r7, #4]
 8018d54:	f000 fa5c 	bl	8019210 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018d58:	4b27      	ldr	r3, [pc, #156]	; (8018df8 <tcp_process+0x5d0>)
 8018d5a:	781b      	ldrb	r3, [r3, #0]
 8018d5c:	f003 0320 	and.w	r3, r3, #32
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d071      	beq.n	8018e48 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018d64:	4b19      	ldr	r3, [pc, #100]	; (8018dcc <tcp_process+0x5a4>)
 8018d66:	781b      	ldrb	r3, [r3, #0]
 8018d68:	f003 0310 	and.w	r3, r3, #16
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d060      	beq.n	8018e32 <tcp_process+0x60a>
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018d74:	4b16      	ldr	r3, [pc, #88]	; (8018dd0 <tcp_process+0x5a8>)
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	429a      	cmp	r2, r3
 8018d7a:	d15a      	bne.n	8018e32 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d156      	bne.n	8018e32 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	8b5b      	ldrh	r3, [r3, #26]
 8018d88:	f043 0302 	orr.w	r3, r3, #2
 8018d8c:	b29a      	uxth	r2, r3
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8018d92:	6878      	ldr	r0, [r7, #4]
 8018d94:	f7fe fdbe 	bl	8017914 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8018d98:	4b18      	ldr	r3, [pc, #96]	; (8018dfc <tcp_process+0x5d4>)
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	687a      	ldr	r2, [r7, #4]
 8018d9e:	429a      	cmp	r2, r3
 8018da0:	d105      	bne.n	8018dae <tcp_process+0x586>
 8018da2:	4b16      	ldr	r3, [pc, #88]	; (8018dfc <tcp_process+0x5d4>)
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	68db      	ldr	r3, [r3, #12]
 8018da8:	4a14      	ldr	r2, [pc, #80]	; (8018dfc <tcp_process+0x5d4>)
 8018daa:	6013      	str	r3, [r2, #0]
 8018dac:	e02e      	b.n	8018e0c <tcp_process+0x5e4>
 8018dae:	4b13      	ldr	r3, [pc, #76]	; (8018dfc <tcp_process+0x5d4>)
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	617b      	str	r3, [r7, #20]
 8018db4:	e027      	b.n	8018e06 <tcp_process+0x5de>
 8018db6:	697b      	ldr	r3, [r7, #20]
 8018db8:	68db      	ldr	r3, [r3, #12]
 8018dba:	687a      	ldr	r2, [r7, #4]
 8018dbc:	429a      	cmp	r2, r3
 8018dbe:	d11f      	bne.n	8018e00 <tcp_process+0x5d8>
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	68da      	ldr	r2, [r3, #12]
 8018dc4:	697b      	ldr	r3, [r7, #20]
 8018dc6:	60da      	str	r2, [r3, #12]
 8018dc8:	e020      	b.n	8018e0c <tcp_process+0x5e4>
 8018dca:	bf00      	nop
 8018dcc:	20004554 	.word	0x20004554
 8018dd0:	2000454c 	.word	0x2000454c
 8018dd4:	20004552 	.word	0x20004552
 8018dd8:	20004548 	.word	0x20004548
 8018ddc:	20004538 	.word	0x20004538
 8018de0:	20010628 	.word	0x20010628
 8018de4:	2001062c 	.word	0x2001062c
 8018de8:	080213e4 	.word	0x080213e4
 8018dec:	08021684 	.word	0x08021684
 8018df0:	08021430 	.word	0x08021430
 8018df4:	20004550 	.word	0x20004550
 8018df8:	20004555 	.word	0x20004555
 8018dfc:	20013d2c 	.word	0x20013d2c
 8018e00:	697b      	ldr	r3, [r7, #20]
 8018e02:	68db      	ldr	r3, [r3, #12]
 8018e04:	617b      	str	r3, [r7, #20]
 8018e06:	697b      	ldr	r3, [r7, #20]
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d1d4      	bne.n	8018db6 <tcp_process+0x58e>
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	2200      	movs	r2, #0
 8018e10:	60da      	str	r2, [r3, #12]
 8018e12:	4b77      	ldr	r3, [pc, #476]	; (8018ff0 <tcp_process+0x7c8>)
 8018e14:	2201      	movs	r2, #1
 8018e16:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	220a      	movs	r2, #10
 8018e1c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8018e1e:	4b75      	ldr	r3, [pc, #468]	; (8018ff4 <tcp_process+0x7cc>)
 8018e20:	681a      	ldr	r2, [r3, #0]
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	60da      	str	r2, [r3, #12]
 8018e26:	4a73      	ldr	r2, [pc, #460]	; (8018ff4 <tcp_process+0x7cc>)
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	6013      	str	r3, [r2, #0]
 8018e2c:	f003 f962 	bl	801c0f4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8018e30:	e0d2      	b.n	8018fd8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	8b5b      	ldrh	r3, [r3, #26]
 8018e36:	f043 0302 	orr.w	r3, r3, #2
 8018e3a:	b29a      	uxth	r2, r3
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	2208      	movs	r2, #8
 8018e44:	751a      	strb	r2, [r3, #20]
      break;
 8018e46:	e0c7      	b.n	8018fd8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018e48:	4b6b      	ldr	r3, [pc, #428]	; (8018ff8 <tcp_process+0x7d0>)
 8018e4a:	781b      	ldrb	r3, [r3, #0]
 8018e4c:	f003 0310 	and.w	r3, r3, #16
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	f000 80c1 	beq.w	8018fd8 <tcp_process+0x7b0>
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018e5a:	4b68      	ldr	r3, [pc, #416]	; (8018ffc <tcp_process+0x7d4>)
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	429a      	cmp	r2, r3
 8018e60:	f040 80ba 	bne.w	8018fd8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	f040 80b5 	bne.w	8018fd8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	2206      	movs	r2, #6
 8018e72:	751a      	strb	r2, [r3, #20]
      break;
 8018e74:	e0b0      	b.n	8018fd8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8018e76:	6878      	ldr	r0, [r7, #4]
 8018e78:	f000 f9ca 	bl	8019210 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018e7c:	4b60      	ldr	r3, [pc, #384]	; (8019000 <tcp_process+0x7d8>)
 8018e7e:	781b      	ldrb	r3, [r3, #0]
 8018e80:	f003 0320 	and.w	r3, r3, #32
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	f000 80a9 	beq.w	8018fdc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	8b5b      	ldrh	r3, [r3, #26]
 8018e8e:	f043 0302 	orr.w	r3, r3, #2
 8018e92:	b29a      	uxth	r2, r3
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8018e98:	6878      	ldr	r0, [r7, #4]
 8018e9a:	f7fe fd3b 	bl	8017914 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018e9e:	4b59      	ldr	r3, [pc, #356]	; (8019004 <tcp_process+0x7dc>)
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	687a      	ldr	r2, [r7, #4]
 8018ea4:	429a      	cmp	r2, r3
 8018ea6:	d105      	bne.n	8018eb4 <tcp_process+0x68c>
 8018ea8:	4b56      	ldr	r3, [pc, #344]	; (8019004 <tcp_process+0x7dc>)
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	68db      	ldr	r3, [r3, #12]
 8018eae:	4a55      	ldr	r2, [pc, #340]	; (8019004 <tcp_process+0x7dc>)
 8018eb0:	6013      	str	r3, [r2, #0]
 8018eb2:	e013      	b.n	8018edc <tcp_process+0x6b4>
 8018eb4:	4b53      	ldr	r3, [pc, #332]	; (8019004 <tcp_process+0x7dc>)
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	613b      	str	r3, [r7, #16]
 8018eba:	e00c      	b.n	8018ed6 <tcp_process+0x6ae>
 8018ebc:	693b      	ldr	r3, [r7, #16]
 8018ebe:	68db      	ldr	r3, [r3, #12]
 8018ec0:	687a      	ldr	r2, [r7, #4]
 8018ec2:	429a      	cmp	r2, r3
 8018ec4:	d104      	bne.n	8018ed0 <tcp_process+0x6a8>
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	68da      	ldr	r2, [r3, #12]
 8018eca:	693b      	ldr	r3, [r7, #16]
 8018ecc:	60da      	str	r2, [r3, #12]
 8018ece:	e005      	b.n	8018edc <tcp_process+0x6b4>
 8018ed0:	693b      	ldr	r3, [r7, #16]
 8018ed2:	68db      	ldr	r3, [r3, #12]
 8018ed4:	613b      	str	r3, [r7, #16]
 8018ed6:	693b      	ldr	r3, [r7, #16]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d1ef      	bne.n	8018ebc <tcp_process+0x694>
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	2200      	movs	r2, #0
 8018ee0:	60da      	str	r2, [r3, #12]
 8018ee2:	4b43      	ldr	r3, [pc, #268]	; (8018ff0 <tcp_process+0x7c8>)
 8018ee4:	2201      	movs	r2, #1
 8018ee6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	220a      	movs	r2, #10
 8018eec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018eee:	4b41      	ldr	r3, [pc, #260]	; (8018ff4 <tcp_process+0x7cc>)
 8018ef0:	681a      	ldr	r2, [r3, #0]
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	60da      	str	r2, [r3, #12]
 8018ef6:	4a3f      	ldr	r2, [pc, #252]	; (8018ff4 <tcp_process+0x7cc>)
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	6013      	str	r3, [r2, #0]
 8018efc:	f003 f8fa 	bl	801c0f4 <tcp_timer_needed>
      }
      break;
 8018f00:	e06c      	b.n	8018fdc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8018f02:	6878      	ldr	r0, [r7, #4]
 8018f04:	f000 f984 	bl	8019210 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018f08:	4b3b      	ldr	r3, [pc, #236]	; (8018ff8 <tcp_process+0x7d0>)
 8018f0a:	781b      	ldrb	r3, [r3, #0]
 8018f0c:	f003 0310 	and.w	r3, r3, #16
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d065      	beq.n	8018fe0 <tcp_process+0x7b8>
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018f18:	4b38      	ldr	r3, [pc, #224]	; (8018ffc <tcp_process+0x7d4>)
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	429a      	cmp	r2, r3
 8018f1e:	d15f      	bne.n	8018fe0 <tcp_process+0x7b8>
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d15b      	bne.n	8018fe0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8018f28:	6878      	ldr	r0, [r7, #4]
 8018f2a:	f7fe fcf3 	bl	8017914 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018f2e:	4b35      	ldr	r3, [pc, #212]	; (8019004 <tcp_process+0x7dc>)
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	687a      	ldr	r2, [r7, #4]
 8018f34:	429a      	cmp	r2, r3
 8018f36:	d105      	bne.n	8018f44 <tcp_process+0x71c>
 8018f38:	4b32      	ldr	r3, [pc, #200]	; (8019004 <tcp_process+0x7dc>)
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	68db      	ldr	r3, [r3, #12]
 8018f3e:	4a31      	ldr	r2, [pc, #196]	; (8019004 <tcp_process+0x7dc>)
 8018f40:	6013      	str	r3, [r2, #0]
 8018f42:	e013      	b.n	8018f6c <tcp_process+0x744>
 8018f44:	4b2f      	ldr	r3, [pc, #188]	; (8019004 <tcp_process+0x7dc>)
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	60fb      	str	r3, [r7, #12]
 8018f4a:	e00c      	b.n	8018f66 <tcp_process+0x73e>
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	68db      	ldr	r3, [r3, #12]
 8018f50:	687a      	ldr	r2, [r7, #4]
 8018f52:	429a      	cmp	r2, r3
 8018f54:	d104      	bne.n	8018f60 <tcp_process+0x738>
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	68da      	ldr	r2, [r3, #12]
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	60da      	str	r2, [r3, #12]
 8018f5e:	e005      	b.n	8018f6c <tcp_process+0x744>
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	68db      	ldr	r3, [r3, #12]
 8018f64:	60fb      	str	r3, [r7, #12]
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d1ef      	bne.n	8018f4c <tcp_process+0x724>
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	2200      	movs	r2, #0
 8018f70:	60da      	str	r2, [r3, #12]
 8018f72:	4b1f      	ldr	r3, [pc, #124]	; (8018ff0 <tcp_process+0x7c8>)
 8018f74:	2201      	movs	r2, #1
 8018f76:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	220a      	movs	r2, #10
 8018f7c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018f7e:	4b1d      	ldr	r3, [pc, #116]	; (8018ff4 <tcp_process+0x7cc>)
 8018f80:	681a      	ldr	r2, [r3, #0]
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	60da      	str	r2, [r3, #12]
 8018f86:	4a1b      	ldr	r2, [pc, #108]	; (8018ff4 <tcp_process+0x7cc>)
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	6013      	str	r3, [r2, #0]
 8018f8c:	f003 f8b2 	bl	801c0f4 <tcp_timer_needed>
      }
      break;
 8018f90:	e026      	b.n	8018fe0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8018f92:	6878      	ldr	r0, [r7, #4]
 8018f94:	f000 f93c 	bl	8019210 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018f98:	4b17      	ldr	r3, [pc, #92]	; (8018ff8 <tcp_process+0x7d0>)
 8018f9a:	781b      	ldrb	r3, [r3, #0]
 8018f9c:	f003 0310 	and.w	r3, r3, #16
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d01f      	beq.n	8018fe4 <tcp_process+0x7bc>
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018fa8:	4b14      	ldr	r3, [pc, #80]	; (8018ffc <tcp_process+0x7d4>)
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	429a      	cmp	r2, r3
 8018fae:	d119      	bne.n	8018fe4 <tcp_process+0x7bc>
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d115      	bne.n	8018fe4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8018fb8:	4b11      	ldr	r3, [pc, #68]	; (8019000 <tcp_process+0x7d8>)
 8018fba:	781b      	ldrb	r3, [r3, #0]
 8018fbc:	f043 0310 	orr.w	r3, r3, #16
 8018fc0:	b2da      	uxtb	r2, r3
 8018fc2:	4b0f      	ldr	r3, [pc, #60]	; (8019000 <tcp_process+0x7d8>)
 8018fc4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8018fc6:	e00d      	b.n	8018fe4 <tcp_process+0x7bc>
    default:
      break;
 8018fc8:	bf00      	nop
 8018fca:	e00c      	b.n	8018fe6 <tcp_process+0x7be>
      break;
 8018fcc:	bf00      	nop
 8018fce:	e00a      	b.n	8018fe6 <tcp_process+0x7be>
      break;
 8018fd0:	bf00      	nop
 8018fd2:	e008      	b.n	8018fe6 <tcp_process+0x7be>
      break;
 8018fd4:	bf00      	nop
 8018fd6:	e006      	b.n	8018fe6 <tcp_process+0x7be>
      break;
 8018fd8:	bf00      	nop
 8018fda:	e004      	b.n	8018fe6 <tcp_process+0x7be>
      break;
 8018fdc:	bf00      	nop
 8018fde:	e002      	b.n	8018fe6 <tcp_process+0x7be>
      break;
 8018fe0:	bf00      	nop
 8018fe2:	e000      	b.n	8018fe6 <tcp_process+0x7be>
      break;
 8018fe4:	bf00      	nop
  }
  return ERR_OK;
 8018fe6:	2300      	movs	r3, #0
}
 8018fe8:	4618      	mov	r0, r3
 8018fea:	3724      	adds	r7, #36	; 0x24
 8018fec:	46bd      	mov	sp, r7
 8018fee:	bd90      	pop	{r4, r7, pc}
 8018ff0:	20013d28 	.word	0x20013d28
 8018ff4:	20013d3c 	.word	0x20013d3c
 8018ff8:	20004554 	.word	0x20004554
 8018ffc:	2000454c 	.word	0x2000454c
 8019000:	20004555 	.word	0x20004555
 8019004:	20013d2c 	.word	0x20013d2c

08019008 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8019008:	b590      	push	{r4, r7, lr}
 801900a:	b085      	sub	sp, #20
 801900c:	af00      	add	r7, sp, #0
 801900e:	6078      	str	r0, [r7, #4]
 8019010:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	2b00      	cmp	r3, #0
 8019016:	d106      	bne.n	8019026 <tcp_oos_insert_segment+0x1e>
 8019018:	4b3b      	ldr	r3, [pc, #236]	; (8019108 <tcp_oos_insert_segment+0x100>)
 801901a:	f240 421f 	movw	r2, #1055	; 0x41f
 801901e:	493b      	ldr	r1, [pc, #236]	; (801910c <tcp_oos_insert_segment+0x104>)
 8019020:	483b      	ldr	r0, [pc, #236]	; (8019110 <tcp_oos_insert_segment+0x108>)
 8019022:	f005 ffaf 	bl	801ef84 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	68db      	ldr	r3, [r3, #12]
 801902a:	899b      	ldrh	r3, [r3, #12]
 801902c:	b29b      	uxth	r3, r3
 801902e:	4618      	mov	r0, r3
 8019030:	f7fb f984 	bl	801433c <lwip_htons>
 8019034:	4603      	mov	r3, r0
 8019036:	b2db      	uxtb	r3, r3
 8019038:	f003 0301 	and.w	r3, r3, #1
 801903c:	2b00      	cmp	r3, #0
 801903e:	d028      	beq.n	8019092 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8019040:	6838      	ldr	r0, [r7, #0]
 8019042:	f7fe f973 	bl	801732c <tcp_segs_free>
    next = NULL;
 8019046:	2300      	movs	r3, #0
 8019048:	603b      	str	r3, [r7, #0]
 801904a:	e056      	b.n	80190fa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801904c:	683b      	ldr	r3, [r7, #0]
 801904e:	68db      	ldr	r3, [r3, #12]
 8019050:	899b      	ldrh	r3, [r3, #12]
 8019052:	b29b      	uxth	r3, r3
 8019054:	4618      	mov	r0, r3
 8019056:	f7fb f971 	bl	801433c <lwip_htons>
 801905a:	4603      	mov	r3, r0
 801905c:	b2db      	uxtb	r3, r3
 801905e:	f003 0301 	and.w	r3, r3, #1
 8019062:	2b00      	cmp	r3, #0
 8019064:	d00d      	beq.n	8019082 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	68db      	ldr	r3, [r3, #12]
 801906a:	899b      	ldrh	r3, [r3, #12]
 801906c:	b29c      	uxth	r4, r3
 801906e:	2001      	movs	r0, #1
 8019070:	f7fb f964 	bl	801433c <lwip_htons>
 8019074:	4603      	mov	r3, r0
 8019076:	461a      	mov	r2, r3
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	68db      	ldr	r3, [r3, #12]
 801907c:	4322      	orrs	r2, r4
 801907e:	b292      	uxth	r2, r2
 8019080:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8019082:	683b      	ldr	r3, [r7, #0]
 8019084:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8019086:	683b      	ldr	r3, [r7, #0]
 8019088:	681b      	ldr	r3, [r3, #0]
 801908a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801908c:	68f8      	ldr	r0, [r7, #12]
 801908e:	f7fe f961 	bl	8017354 <tcp_seg_free>
    while (next &&
 8019092:	683b      	ldr	r3, [r7, #0]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d00e      	beq.n	80190b6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	891b      	ldrh	r3, [r3, #8]
 801909c:	461a      	mov	r2, r3
 801909e:	4b1d      	ldr	r3, [pc, #116]	; (8019114 <tcp_oos_insert_segment+0x10c>)
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	441a      	add	r2, r3
 80190a4:	683b      	ldr	r3, [r7, #0]
 80190a6:	68db      	ldr	r3, [r3, #12]
 80190a8:	685b      	ldr	r3, [r3, #4]
 80190aa:	6839      	ldr	r1, [r7, #0]
 80190ac:	8909      	ldrh	r1, [r1, #8]
 80190ae:	440b      	add	r3, r1
 80190b0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	daca      	bge.n	801904c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80190b6:	683b      	ldr	r3, [r7, #0]
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d01e      	beq.n	80190fa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	891b      	ldrh	r3, [r3, #8]
 80190c0:	461a      	mov	r2, r3
 80190c2:	4b14      	ldr	r3, [pc, #80]	; (8019114 <tcp_oos_insert_segment+0x10c>)
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	441a      	add	r2, r3
 80190c8:	683b      	ldr	r3, [r7, #0]
 80190ca:	68db      	ldr	r3, [r3, #12]
 80190cc:	685b      	ldr	r3, [r3, #4]
 80190ce:	1ad3      	subs	r3, r2, r3
    if (next &&
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	dd12      	ble.n	80190fa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80190d4:	683b      	ldr	r3, [r7, #0]
 80190d6:	68db      	ldr	r3, [r3, #12]
 80190d8:	685b      	ldr	r3, [r3, #4]
 80190da:	b29a      	uxth	r2, r3
 80190dc:	4b0d      	ldr	r3, [pc, #52]	; (8019114 <tcp_oos_insert_segment+0x10c>)
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	b29b      	uxth	r3, r3
 80190e2:	1ad3      	subs	r3, r2, r3
 80190e4:	b29a      	uxth	r2, r3
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	685a      	ldr	r2, [r3, #4]
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	891b      	ldrh	r3, [r3, #8]
 80190f2:	4619      	mov	r1, r3
 80190f4:	4610      	mov	r0, r2
 80190f6:	f7fc fb79 	bl	80157ec <pbuf_realloc>
    }
  }
  cseg->next = next;
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	683a      	ldr	r2, [r7, #0]
 80190fe:	601a      	str	r2, [r3, #0]
}
 8019100:	bf00      	nop
 8019102:	3714      	adds	r7, #20
 8019104:	46bd      	mov	sp, r7
 8019106:	bd90      	pop	{r4, r7, pc}
 8019108:	080213e4 	.word	0x080213e4
 801910c:	080216a4 	.word	0x080216a4
 8019110:	08021430 	.word	0x08021430
 8019114:	20004548 	.word	0x20004548

08019118 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8019118:	b5b0      	push	{r4, r5, r7, lr}
 801911a:	b086      	sub	sp, #24
 801911c:	af00      	add	r7, sp, #0
 801911e:	60f8      	str	r0, [r7, #12]
 8019120:	60b9      	str	r1, [r7, #8]
 8019122:	607a      	str	r2, [r7, #4]
 8019124:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8019126:	e03e      	b.n	80191a6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8019128:	68bb      	ldr	r3, [r7, #8]
 801912a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801912c:	68bb      	ldr	r3, [r7, #8]
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8019132:	697b      	ldr	r3, [r7, #20]
 8019134:	685b      	ldr	r3, [r3, #4]
 8019136:	4618      	mov	r0, r3
 8019138:	f7fc fd6c 	bl	8015c14 <pbuf_clen>
 801913c:	4603      	mov	r3, r0
 801913e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019146:	8a7a      	ldrh	r2, [r7, #18]
 8019148:	429a      	cmp	r2, r3
 801914a:	d906      	bls.n	801915a <tcp_free_acked_segments+0x42>
 801914c:	4b2a      	ldr	r3, [pc, #168]	; (80191f8 <tcp_free_acked_segments+0xe0>)
 801914e:	f240 4257 	movw	r2, #1111	; 0x457
 8019152:	492a      	ldr	r1, [pc, #168]	; (80191fc <tcp_free_acked_segments+0xe4>)
 8019154:	482a      	ldr	r0, [pc, #168]	; (8019200 <tcp_free_acked_segments+0xe8>)
 8019156:	f005 ff15 	bl	801ef84 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8019160:	8a7b      	ldrh	r3, [r7, #18]
 8019162:	1ad3      	subs	r3, r2, r3
 8019164:	b29a      	uxth	r2, r3
 8019166:	68fb      	ldr	r3, [r7, #12]
 8019168:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801916c:	697b      	ldr	r3, [r7, #20]
 801916e:	891a      	ldrh	r2, [r3, #8]
 8019170:	4b24      	ldr	r3, [pc, #144]	; (8019204 <tcp_free_acked_segments+0xec>)
 8019172:	881b      	ldrh	r3, [r3, #0]
 8019174:	4413      	add	r3, r2
 8019176:	b29a      	uxth	r2, r3
 8019178:	4b22      	ldr	r3, [pc, #136]	; (8019204 <tcp_free_acked_segments+0xec>)
 801917a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801917c:	6978      	ldr	r0, [r7, #20]
 801917e:	f7fe f8e9 	bl	8017354 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8019182:	68fb      	ldr	r3, [r7, #12]
 8019184:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019188:	2b00      	cmp	r3, #0
 801918a:	d00c      	beq.n	80191a6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801918c:	68bb      	ldr	r3, [r7, #8]
 801918e:	2b00      	cmp	r3, #0
 8019190:	d109      	bne.n	80191a6 <tcp_free_acked_segments+0x8e>
 8019192:	683b      	ldr	r3, [r7, #0]
 8019194:	2b00      	cmp	r3, #0
 8019196:	d106      	bne.n	80191a6 <tcp_free_acked_segments+0x8e>
 8019198:	4b17      	ldr	r3, [pc, #92]	; (80191f8 <tcp_free_acked_segments+0xe0>)
 801919a:	f240 4262 	movw	r2, #1122	; 0x462
 801919e:	491a      	ldr	r1, [pc, #104]	; (8019208 <tcp_free_acked_segments+0xf0>)
 80191a0:	4817      	ldr	r0, [pc, #92]	; (8019200 <tcp_free_acked_segments+0xe8>)
 80191a2:	f005 feef 	bl	801ef84 <iprintf>
  while (seg_list != NULL &&
 80191a6:	68bb      	ldr	r3, [r7, #8]
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d020      	beq.n	80191ee <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80191ac:	68bb      	ldr	r3, [r7, #8]
 80191ae:	68db      	ldr	r3, [r3, #12]
 80191b0:	685b      	ldr	r3, [r3, #4]
 80191b2:	4618      	mov	r0, r3
 80191b4:	f7fb f8d7 	bl	8014366 <lwip_htonl>
 80191b8:	4604      	mov	r4, r0
 80191ba:	68bb      	ldr	r3, [r7, #8]
 80191bc:	891b      	ldrh	r3, [r3, #8]
 80191be:	461d      	mov	r5, r3
 80191c0:	68bb      	ldr	r3, [r7, #8]
 80191c2:	68db      	ldr	r3, [r3, #12]
 80191c4:	899b      	ldrh	r3, [r3, #12]
 80191c6:	b29b      	uxth	r3, r3
 80191c8:	4618      	mov	r0, r3
 80191ca:	f7fb f8b7 	bl	801433c <lwip_htons>
 80191ce:	4603      	mov	r3, r0
 80191d0:	b2db      	uxtb	r3, r3
 80191d2:	f003 0303 	and.w	r3, r3, #3
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d001      	beq.n	80191de <tcp_free_acked_segments+0xc6>
 80191da:	2301      	movs	r3, #1
 80191dc:	e000      	b.n	80191e0 <tcp_free_acked_segments+0xc8>
 80191de:	2300      	movs	r3, #0
 80191e0:	442b      	add	r3, r5
 80191e2:	18e2      	adds	r2, r4, r3
 80191e4:	4b09      	ldr	r3, [pc, #36]	; (801920c <tcp_free_acked_segments+0xf4>)
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	dd9c      	ble.n	8019128 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80191ee:	68bb      	ldr	r3, [r7, #8]
}
 80191f0:	4618      	mov	r0, r3
 80191f2:	3718      	adds	r7, #24
 80191f4:	46bd      	mov	sp, r7
 80191f6:	bdb0      	pop	{r4, r5, r7, pc}
 80191f8:	080213e4 	.word	0x080213e4
 80191fc:	080216cc 	.word	0x080216cc
 8019200:	08021430 	.word	0x08021430
 8019204:	20004550 	.word	0x20004550
 8019208:	080216f4 	.word	0x080216f4
 801920c:	2000454c 	.word	0x2000454c

08019210 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8019210:	b5b0      	push	{r4, r5, r7, lr}
 8019212:	b094      	sub	sp, #80	; 0x50
 8019214:	af00      	add	r7, sp, #0
 8019216:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8019218:	2300      	movs	r3, #0
 801921a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	2b00      	cmp	r3, #0
 8019220:	d106      	bne.n	8019230 <tcp_receive+0x20>
 8019222:	4ba6      	ldr	r3, [pc, #664]	; (80194bc <tcp_receive+0x2ac>)
 8019224:	f240 427b 	movw	r2, #1147	; 0x47b
 8019228:	49a5      	ldr	r1, [pc, #660]	; (80194c0 <tcp_receive+0x2b0>)
 801922a:	48a6      	ldr	r0, [pc, #664]	; (80194c4 <tcp_receive+0x2b4>)
 801922c:	f005 feaa 	bl	801ef84 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	7d1b      	ldrb	r3, [r3, #20]
 8019234:	2b03      	cmp	r3, #3
 8019236:	d806      	bhi.n	8019246 <tcp_receive+0x36>
 8019238:	4ba0      	ldr	r3, [pc, #640]	; (80194bc <tcp_receive+0x2ac>)
 801923a:	f240 427c 	movw	r2, #1148	; 0x47c
 801923e:	49a2      	ldr	r1, [pc, #648]	; (80194c8 <tcp_receive+0x2b8>)
 8019240:	48a0      	ldr	r0, [pc, #640]	; (80194c4 <tcp_receive+0x2b4>)
 8019242:	f005 fe9f 	bl	801ef84 <iprintf>

  if (flags & TCP_ACK) {
 8019246:	4ba1      	ldr	r3, [pc, #644]	; (80194cc <tcp_receive+0x2bc>)
 8019248:	781b      	ldrb	r3, [r3, #0]
 801924a:	f003 0310 	and.w	r3, r3, #16
 801924e:	2b00      	cmp	r3, #0
 8019250:	f000 8263 	beq.w	801971a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801925a:	461a      	mov	r2, r3
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019260:	4413      	add	r3, r2
 8019262:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8019268:	4b99      	ldr	r3, [pc, #612]	; (80194d0 <tcp_receive+0x2c0>)
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	1ad3      	subs	r3, r2, r3
 801926e:	2b00      	cmp	r3, #0
 8019270:	db1b      	blt.n	80192aa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8019276:	4b96      	ldr	r3, [pc, #600]	; (80194d0 <tcp_receive+0x2c0>)
 8019278:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801927a:	429a      	cmp	r2, r3
 801927c:	d106      	bne.n	801928c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019282:	4b94      	ldr	r3, [pc, #592]	; (80194d4 <tcp_receive+0x2c4>)
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	1ad3      	subs	r3, r2, r3
 8019288:	2b00      	cmp	r3, #0
 801928a:	db0e      	blt.n	80192aa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019290:	4b90      	ldr	r3, [pc, #576]	; (80194d4 <tcp_receive+0x2c4>)
 8019292:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019294:	429a      	cmp	r2, r3
 8019296:	d125      	bne.n	80192e4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019298:	4b8f      	ldr	r3, [pc, #572]	; (80194d8 <tcp_receive+0x2c8>)
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	89db      	ldrh	r3, [r3, #14]
 801929e:	b29a      	uxth	r2, r3
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80192a6:	429a      	cmp	r2, r3
 80192a8:	d91c      	bls.n	80192e4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80192aa:	4b8b      	ldr	r3, [pc, #556]	; (80194d8 <tcp_receive+0x2c8>)
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	89db      	ldrh	r3, [r3, #14]
 80192b0:	b29a      	uxth	r2, r3
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80192c4:	429a      	cmp	r2, r3
 80192c6:	d205      	bcs.n	80192d4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80192d4:	4b7e      	ldr	r3, [pc, #504]	; (80194d0 <tcp_receive+0x2c0>)
 80192d6:	681a      	ldr	r2, [r3, #0]
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80192dc:	4b7d      	ldr	r3, [pc, #500]	; (80194d4 <tcp_receive+0x2c4>)
 80192de:	681a      	ldr	r2, [r3, #0]
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80192e4:	4b7b      	ldr	r3, [pc, #492]	; (80194d4 <tcp_receive+0x2c4>)
 80192e6:	681a      	ldr	r2, [r3, #0]
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80192ec:	1ad3      	subs	r3, r2, r3
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	dc58      	bgt.n	80193a4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80192f2:	4b7a      	ldr	r3, [pc, #488]	; (80194dc <tcp_receive+0x2cc>)
 80192f4:	881b      	ldrh	r3, [r3, #0]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d14b      	bne.n	8019392 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80192fe:	687a      	ldr	r2, [r7, #4]
 8019300:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8019304:	4413      	add	r3, r2
 8019306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019308:	429a      	cmp	r2, r3
 801930a:	d142      	bne.n	8019392 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019312:	2b00      	cmp	r3, #0
 8019314:	db3d      	blt.n	8019392 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801931a:	4b6e      	ldr	r3, [pc, #440]	; (80194d4 <tcp_receive+0x2c4>)
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	429a      	cmp	r2, r3
 8019320:	d137      	bne.n	8019392 <tcp_receive+0x182>
              found_dupack = 1;
 8019322:	2301      	movs	r3, #1
 8019324:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801932c:	2bff      	cmp	r3, #255	; 0xff
 801932e:	d007      	beq.n	8019340 <tcp_receive+0x130>
                ++pcb->dupacks;
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019336:	3301      	adds	r3, #1
 8019338:	b2da      	uxtb	r2, r3
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019346:	2b03      	cmp	r3, #3
 8019348:	d91b      	bls.n	8019382 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019354:	4413      	add	r3, r2
 8019356:	b29a      	uxth	r2, r3
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801935e:	429a      	cmp	r2, r3
 8019360:	d30a      	bcc.n	8019378 <tcp_receive+0x168>
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801936c:	4413      	add	r3, r2
 801936e:	b29a      	uxth	r2, r3
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019376:	e004      	b.n	8019382 <tcp_receive+0x172>
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801937e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019388:	2b02      	cmp	r3, #2
 801938a:	d902      	bls.n	8019392 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801938c:	6878      	ldr	r0, [r7, #4]
 801938e:	f002 fb47 	bl	801ba20 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8019392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019394:	2b00      	cmp	r3, #0
 8019396:	f040 8160 	bne.w	801965a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	2200      	movs	r2, #0
 801939e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80193a2:	e15a      	b.n	801965a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80193a4:	4b4b      	ldr	r3, [pc, #300]	; (80194d4 <tcp_receive+0x2c4>)
 80193a6:	681a      	ldr	r2, [r3, #0]
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80193ac:	1ad3      	subs	r3, r2, r3
 80193ae:	3b01      	subs	r3, #1
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	f2c0 814d 	blt.w	8019650 <tcp_receive+0x440>
 80193b6:	4b47      	ldr	r3, [pc, #284]	; (80194d4 <tcp_receive+0x2c4>)
 80193b8:	681a      	ldr	r2, [r3, #0]
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80193be:	1ad3      	subs	r3, r2, r3
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	f300 8145 	bgt.w	8019650 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	8b5b      	ldrh	r3, [r3, #26]
 80193ca:	f003 0304 	and.w	r3, r3, #4
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	d010      	beq.n	80193f4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	8b5b      	ldrh	r3, [r3, #26]
 80193d6:	f023 0304 	bic.w	r3, r3, #4
 80193da:	b29a      	uxth	r2, r3
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	2200      	movs	r2, #0
 80193f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	2200      	movs	r2, #0
 80193f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019402:	10db      	asrs	r3, r3, #3
 8019404:	b21b      	sxth	r3, r3
 8019406:	b29a      	uxth	r2, r3
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801940e:	b29b      	uxth	r3, r3
 8019410:	4413      	add	r3, r2
 8019412:	b29b      	uxth	r3, r3
 8019414:	b21a      	sxth	r2, r3
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801941c:	4b2d      	ldr	r3, [pc, #180]	; (80194d4 <tcp_receive+0x2c4>)
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	b29a      	uxth	r2, r3
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019426:	b29b      	uxth	r3, r3
 8019428:	1ad3      	subs	r3, r2, r3
 801942a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	2200      	movs	r2, #0
 8019430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8019434:	4b27      	ldr	r3, [pc, #156]	; (80194d4 <tcp_receive+0x2c4>)
 8019436:	681a      	ldr	r2, [r3, #0]
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	7d1b      	ldrb	r3, [r3, #20]
 8019440:	2b03      	cmp	r3, #3
 8019442:	f240 8096 	bls.w	8019572 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8019452:	429a      	cmp	r2, r3
 8019454:	d244      	bcs.n	80194e0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	8b5b      	ldrh	r3, [r3, #26]
 801945a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801945e:	2b00      	cmp	r3, #0
 8019460:	d001      	beq.n	8019466 <tcp_receive+0x256>
 8019462:	2301      	movs	r3, #1
 8019464:	e000      	b.n	8019468 <tcp_receive+0x258>
 8019466:	2302      	movs	r3, #2
 8019468:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801946c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8019470:	b29a      	uxth	r2, r3
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019476:	fb12 f303 	smulbb	r3, r2, r3
 801947a:	b29b      	uxth	r3, r3
 801947c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801947e:	4293      	cmp	r3, r2
 8019480:	bf28      	it	cs
 8019482:	4613      	movcs	r3, r2
 8019484:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801948c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801948e:	4413      	add	r3, r2
 8019490:	b29a      	uxth	r2, r3
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019498:	429a      	cmp	r2, r3
 801949a:	d309      	bcc.n	80194b0 <tcp_receive+0x2a0>
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80194a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80194a4:	4413      	add	r3, r2
 80194a6:	b29a      	uxth	r2, r3
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80194ae:	e060      	b.n	8019572 <tcp_receive+0x362>
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80194b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80194ba:	e05a      	b.n	8019572 <tcp_receive+0x362>
 80194bc:	080213e4 	.word	0x080213e4
 80194c0:	08021714 	.word	0x08021714
 80194c4:	08021430 	.word	0x08021430
 80194c8:	08021730 	.word	0x08021730
 80194cc:	20004554 	.word	0x20004554
 80194d0:	20004548 	.word	0x20004548
 80194d4:	2000454c 	.word	0x2000454c
 80194d8:	20004538 	.word	0x20004538
 80194dc:	20004552 	.word	0x20004552
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80194e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80194e8:	4413      	add	r3, r2
 80194ea:	b29a      	uxth	r2, r3
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80194f2:	429a      	cmp	r2, r3
 80194f4:	d309      	bcc.n	801950a <tcp_receive+0x2fa>
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80194fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80194fe:	4413      	add	r3, r2
 8019500:	b29a      	uxth	r2, r3
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8019508:	e004      	b.n	8019514 <tcp_receive+0x304>
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019510:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019520:	429a      	cmp	r2, r3
 8019522:	d326      	bcc.n	8019572 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019530:	1ad3      	subs	r3, r2, r3
 8019532:	b29a      	uxth	r2, r3
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019544:	4413      	add	r3, r2
 8019546:	b29a      	uxth	r2, r3
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801954e:	429a      	cmp	r2, r3
 8019550:	d30a      	bcc.n	8019568 <tcp_receive+0x358>
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801955c:	4413      	add	r3, r2
 801955e:	b29a      	uxth	r2, r3
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019566:	e004      	b.n	8019572 <tcp_receive+0x362>
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801956e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801957a:	4a98      	ldr	r2, [pc, #608]	; (80197dc <tcp_receive+0x5cc>)
 801957c:	6878      	ldr	r0, [r7, #4]
 801957e:	f7ff fdcb 	bl	8019118 <tcp_free_acked_segments>
 8019582:	4602      	mov	r2, r0
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019590:	4a93      	ldr	r2, [pc, #588]	; (80197e0 <tcp_receive+0x5d0>)
 8019592:	6878      	ldr	r0, [r7, #4]
 8019594:	f7ff fdc0 	bl	8019118 <tcp_free_acked_segments>
 8019598:	4602      	mov	r2, r0
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d104      	bne.n	80195b0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80195ac:	861a      	strh	r2, [r3, #48]	; 0x30
 80195ae:	e002      	b.n	80195b6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	2200      	movs	r2, #0
 80195b4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	2200      	movs	r2, #0
 80195ba:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d103      	bne.n	80195cc <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	2200      	movs	r2, #0
 80195c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80195d2:	4b84      	ldr	r3, [pc, #528]	; (80197e4 <tcp_receive+0x5d4>)
 80195d4:	881b      	ldrh	r3, [r3, #0]
 80195d6:	4413      	add	r3, r2
 80195d8:	b29a      	uxth	r2, r3
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	8b5b      	ldrh	r3, [r3, #26]
 80195e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d035      	beq.n	8019658 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d118      	bne.n	8019626 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d00c      	beq.n	8019616 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019604:	68db      	ldr	r3, [r3, #12]
 8019606:	685b      	ldr	r3, [r3, #4]
 8019608:	4618      	mov	r0, r3
 801960a:	f7fa feac 	bl	8014366 <lwip_htonl>
 801960e:	4603      	mov	r3, r0
 8019610:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8019612:	2b00      	cmp	r3, #0
 8019614:	dc20      	bgt.n	8019658 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	8b5b      	ldrh	r3, [r3, #26]
 801961a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801961e:	b29a      	uxth	r2, r3
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019624:	e018      	b.n	8019658 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801962e:	68db      	ldr	r3, [r3, #12]
 8019630:	685b      	ldr	r3, [r3, #4]
 8019632:	4618      	mov	r0, r3
 8019634:	f7fa fe97 	bl	8014366 <lwip_htonl>
 8019638:	4603      	mov	r3, r0
 801963a:	1ae3      	subs	r3, r4, r3
 801963c:	2b00      	cmp	r3, #0
 801963e:	dc0b      	bgt.n	8019658 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	8b5b      	ldrh	r3, [r3, #26]
 8019644:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019648:	b29a      	uxth	r2, r3
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801964e:	e003      	b.n	8019658 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8019650:	6878      	ldr	r0, [r7, #4]
 8019652:	f002 fbdf 	bl	801be14 <tcp_send_empty_ack>
 8019656:	e000      	b.n	801965a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019658:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801965e:	2b00      	cmp	r3, #0
 8019660:	d05b      	beq.n	801971a <tcp_receive+0x50a>
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019666:	4b60      	ldr	r3, [pc, #384]	; (80197e8 <tcp_receive+0x5d8>)
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	1ad3      	subs	r3, r2, r3
 801966c:	2b00      	cmp	r3, #0
 801966e:	da54      	bge.n	801971a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8019670:	4b5e      	ldr	r3, [pc, #376]	; (80197ec <tcp_receive+0x5dc>)
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	b29a      	uxth	r2, r3
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801967a:	b29b      	uxth	r3, r3
 801967c:	1ad3      	subs	r3, r2, r3
 801967e:	b29b      	uxth	r3, r3
 8019680:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8019684:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801968e:	10db      	asrs	r3, r3, #3
 8019690:	b21b      	sxth	r3, r3
 8019692:	b29b      	uxth	r3, r3
 8019694:	1ad3      	subs	r3, r2, r3
 8019696:	b29b      	uxth	r3, r3
 8019698:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80196a2:	b29a      	uxth	r2, r3
 80196a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80196a8:	4413      	add	r3, r2
 80196aa:	b29b      	uxth	r3, r3
 80196ac:	b21a      	sxth	r2, r3
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80196b2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	da05      	bge.n	80196c6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80196ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80196be:	425b      	negs	r3, r3
 80196c0:	b29b      	uxth	r3, r3
 80196c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80196c6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80196d0:	109b      	asrs	r3, r3, #2
 80196d2:	b21b      	sxth	r3, r3
 80196d4:	b29b      	uxth	r3, r3
 80196d6:	1ad3      	subs	r3, r2, r3
 80196d8:	b29b      	uxth	r3, r3
 80196da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80196e4:	b29a      	uxth	r2, r3
 80196e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80196ea:	4413      	add	r3, r2
 80196ec:	b29b      	uxth	r3, r3
 80196ee:	b21a      	sxth	r2, r3
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80196fa:	10db      	asrs	r3, r3, #3
 80196fc:	b21b      	sxth	r3, r3
 80196fe:	b29a      	uxth	r2, r3
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019706:	b29b      	uxth	r3, r3
 8019708:	4413      	add	r3, r2
 801970a:	b29b      	uxth	r3, r3
 801970c:	b21a      	sxth	r2, r3
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	2200      	movs	r2, #0
 8019718:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801971a:	4b35      	ldr	r3, [pc, #212]	; (80197f0 <tcp_receive+0x5e0>)
 801971c:	881b      	ldrh	r3, [r3, #0]
 801971e:	2b00      	cmp	r3, #0
 8019720:	f000 84e1 	beq.w	801a0e6 <tcp_receive+0xed6>
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	7d1b      	ldrb	r3, [r3, #20]
 8019728:	2b06      	cmp	r3, #6
 801972a:	f200 84dc 	bhi.w	801a0e6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019732:	4b30      	ldr	r3, [pc, #192]	; (80197f4 <tcp_receive+0x5e4>)
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	1ad3      	subs	r3, r2, r3
 8019738:	3b01      	subs	r3, #1
 801973a:	2b00      	cmp	r3, #0
 801973c:	f2c0 808e 	blt.w	801985c <tcp_receive+0x64c>
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019744:	4b2a      	ldr	r3, [pc, #168]	; (80197f0 <tcp_receive+0x5e0>)
 8019746:	881b      	ldrh	r3, [r3, #0]
 8019748:	4619      	mov	r1, r3
 801974a:	4b2a      	ldr	r3, [pc, #168]	; (80197f4 <tcp_receive+0x5e4>)
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	440b      	add	r3, r1
 8019750:	1ad3      	subs	r3, r2, r3
 8019752:	3301      	adds	r3, #1
 8019754:	2b00      	cmp	r3, #0
 8019756:	f300 8081 	bgt.w	801985c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801975a:	4b27      	ldr	r3, [pc, #156]	; (80197f8 <tcp_receive+0x5e8>)
 801975c:	685b      	ldr	r3, [r3, #4]
 801975e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019764:	4b23      	ldr	r3, [pc, #140]	; (80197f4 <tcp_receive+0x5e4>)
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	1ad3      	subs	r3, r2, r3
 801976a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801976c:	4b22      	ldr	r3, [pc, #136]	; (80197f8 <tcp_receive+0x5e8>)
 801976e:	685b      	ldr	r3, [r3, #4]
 8019770:	2b00      	cmp	r3, #0
 8019772:	d106      	bne.n	8019782 <tcp_receive+0x572>
 8019774:	4b21      	ldr	r3, [pc, #132]	; (80197fc <tcp_receive+0x5ec>)
 8019776:	f240 5294 	movw	r2, #1428	; 0x594
 801977a:	4921      	ldr	r1, [pc, #132]	; (8019800 <tcp_receive+0x5f0>)
 801977c:	4821      	ldr	r0, [pc, #132]	; (8019804 <tcp_receive+0x5f4>)
 801977e:	f005 fc01 	bl	801ef84 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8019782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019784:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019788:	4293      	cmp	r3, r2
 801978a:	d906      	bls.n	801979a <tcp_receive+0x58a>
 801978c:	4b1b      	ldr	r3, [pc, #108]	; (80197fc <tcp_receive+0x5ec>)
 801978e:	f240 5295 	movw	r2, #1429	; 0x595
 8019792:	491d      	ldr	r1, [pc, #116]	; (8019808 <tcp_receive+0x5f8>)
 8019794:	481b      	ldr	r0, [pc, #108]	; (8019804 <tcp_receive+0x5f4>)
 8019796:	f005 fbf5 	bl	801ef84 <iprintf>
      off = (u16_t)off32;
 801979a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801979c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80197a0:	4b15      	ldr	r3, [pc, #84]	; (80197f8 <tcp_receive+0x5e8>)
 80197a2:	685b      	ldr	r3, [r3, #4]
 80197a4:	891b      	ldrh	r3, [r3, #8]
 80197a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80197aa:	429a      	cmp	r2, r3
 80197ac:	d906      	bls.n	80197bc <tcp_receive+0x5ac>
 80197ae:	4b13      	ldr	r3, [pc, #76]	; (80197fc <tcp_receive+0x5ec>)
 80197b0:	f240 5297 	movw	r2, #1431	; 0x597
 80197b4:	4915      	ldr	r1, [pc, #84]	; (801980c <tcp_receive+0x5fc>)
 80197b6:	4813      	ldr	r0, [pc, #76]	; (8019804 <tcp_receive+0x5f4>)
 80197b8:	f005 fbe4 	bl	801ef84 <iprintf>
      inseg.len -= off;
 80197bc:	4b0e      	ldr	r3, [pc, #56]	; (80197f8 <tcp_receive+0x5e8>)
 80197be:	891a      	ldrh	r2, [r3, #8]
 80197c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80197c4:	1ad3      	subs	r3, r2, r3
 80197c6:	b29a      	uxth	r2, r3
 80197c8:	4b0b      	ldr	r3, [pc, #44]	; (80197f8 <tcp_receive+0x5e8>)
 80197ca:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80197cc:	4b0a      	ldr	r3, [pc, #40]	; (80197f8 <tcp_receive+0x5e8>)
 80197ce:	685b      	ldr	r3, [r3, #4]
 80197d0:	891a      	ldrh	r2, [r3, #8]
 80197d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80197d6:	1ad3      	subs	r3, r2, r3
 80197d8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80197da:	e029      	b.n	8019830 <tcp_receive+0x620>
 80197dc:	0802174c 	.word	0x0802174c
 80197e0:	08021754 	.word	0x08021754
 80197e4:	20004550 	.word	0x20004550
 80197e8:	2000454c 	.word	0x2000454c
 80197ec:	20013d30 	.word	0x20013d30
 80197f0:	20004552 	.word	0x20004552
 80197f4:	20004548 	.word	0x20004548
 80197f8:	20004528 	.word	0x20004528
 80197fc:	080213e4 	.word	0x080213e4
 8019800:	0802175c 	.word	0x0802175c
 8019804:	08021430 	.word	0x08021430
 8019808:	0802176c 	.word	0x0802176c
 801980c:	0802177c 	.word	0x0802177c
        off -= p->len;
 8019810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019812:	895b      	ldrh	r3, [r3, #10]
 8019814:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019818:	1ad3      	subs	r3, r2, r3
 801981a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801981e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019820:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019822:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8019824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019826:	2200      	movs	r2, #0
 8019828:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801982a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8019830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019832:	895b      	ldrh	r3, [r3, #10]
 8019834:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019838:	429a      	cmp	r2, r3
 801983a:	d8e9      	bhi.n	8019810 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801983c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019840:	4619      	mov	r1, r3
 8019842:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8019844:	f7fc f8d2 	bl	80159ec <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801984c:	4a91      	ldr	r2, [pc, #580]	; (8019a94 <tcp_receive+0x884>)
 801984e:	6013      	str	r3, [r2, #0]
 8019850:	4b91      	ldr	r3, [pc, #580]	; (8019a98 <tcp_receive+0x888>)
 8019852:	68db      	ldr	r3, [r3, #12]
 8019854:	4a8f      	ldr	r2, [pc, #572]	; (8019a94 <tcp_receive+0x884>)
 8019856:	6812      	ldr	r2, [r2, #0]
 8019858:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801985a:	e00d      	b.n	8019878 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801985c:	4b8d      	ldr	r3, [pc, #564]	; (8019a94 <tcp_receive+0x884>)
 801985e:	681a      	ldr	r2, [r3, #0]
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019864:	1ad3      	subs	r3, r2, r3
 8019866:	2b00      	cmp	r3, #0
 8019868:	da06      	bge.n	8019878 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	8b5b      	ldrh	r3, [r3, #26]
 801986e:	f043 0302 	orr.w	r3, r3, #2
 8019872:	b29a      	uxth	r2, r3
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019878:	4b86      	ldr	r3, [pc, #536]	; (8019a94 <tcp_receive+0x884>)
 801987a:	681a      	ldr	r2, [r3, #0]
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019880:	1ad3      	subs	r3, r2, r3
 8019882:	2b00      	cmp	r3, #0
 8019884:	f2c0 842a 	blt.w	801a0dc <tcp_receive+0xecc>
 8019888:	4b82      	ldr	r3, [pc, #520]	; (8019a94 <tcp_receive+0x884>)
 801988a:	681a      	ldr	r2, [r3, #0]
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019890:	6879      	ldr	r1, [r7, #4]
 8019892:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019894:	440b      	add	r3, r1
 8019896:	1ad3      	subs	r3, r2, r3
 8019898:	3301      	adds	r3, #1
 801989a:	2b00      	cmp	r3, #0
 801989c:	f300 841e 	bgt.w	801a0dc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80198a4:	4b7b      	ldr	r3, [pc, #492]	; (8019a94 <tcp_receive+0x884>)
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	429a      	cmp	r2, r3
 80198aa:	f040 829a 	bne.w	8019de2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80198ae:	4b7a      	ldr	r3, [pc, #488]	; (8019a98 <tcp_receive+0x888>)
 80198b0:	891c      	ldrh	r4, [r3, #8]
 80198b2:	4b79      	ldr	r3, [pc, #484]	; (8019a98 <tcp_receive+0x888>)
 80198b4:	68db      	ldr	r3, [r3, #12]
 80198b6:	899b      	ldrh	r3, [r3, #12]
 80198b8:	b29b      	uxth	r3, r3
 80198ba:	4618      	mov	r0, r3
 80198bc:	f7fa fd3e 	bl	801433c <lwip_htons>
 80198c0:	4603      	mov	r3, r0
 80198c2:	b2db      	uxtb	r3, r3
 80198c4:	f003 0303 	and.w	r3, r3, #3
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d001      	beq.n	80198d0 <tcp_receive+0x6c0>
 80198cc:	2301      	movs	r3, #1
 80198ce:	e000      	b.n	80198d2 <tcp_receive+0x6c2>
 80198d0:	2300      	movs	r3, #0
 80198d2:	4423      	add	r3, r4
 80198d4:	b29a      	uxth	r2, r3
 80198d6:	4b71      	ldr	r3, [pc, #452]	; (8019a9c <tcp_receive+0x88c>)
 80198d8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80198de:	4b6f      	ldr	r3, [pc, #444]	; (8019a9c <tcp_receive+0x88c>)
 80198e0:	881b      	ldrh	r3, [r3, #0]
 80198e2:	429a      	cmp	r2, r3
 80198e4:	d275      	bcs.n	80199d2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80198e6:	4b6c      	ldr	r3, [pc, #432]	; (8019a98 <tcp_receive+0x888>)
 80198e8:	68db      	ldr	r3, [r3, #12]
 80198ea:	899b      	ldrh	r3, [r3, #12]
 80198ec:	b29b      	uxth	r3, r3
 80198ee:	4618      	mov	r0, r3
 80198f0:	f7fa fd24 	bl	801433c <lwip_htons>
 80198f4:	4603      	mov	r3, r0
 80198f6:	b2db      	uxtb	r3, r3
 80198f8:	f003 0301 	and.w	r3, r3, #1
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d01f      	beq.n	8019940 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019900:	4b65      	ldr	r3, [pc, #404]	; (8019a98 <tcp_receive+0x888>)
 8019902:	68db      	ldr	r3, [r3, #12]
 8019904:	899b      	ldrh	r3, [r3, #12]
 8019906:	b29b      	uxth	r3, r3
 8019908:	b21b      	sxth	r3, r3
 801990a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801990e:	b21c      	sxth	r4, r3
 8019910:	4b61      	ldr	r3, [pc, #388]	; (8019a98 <tcp_receive+0x888>)
 8019912:	68db      	ldr	r3, [r3, #12]
 8019914:	899b      	ldrh	r3, [r3, #12]
 8019916:	b29b      	uxth	r3, r3
 8019918:	4618      	mov	r0, r3
 801991a:	f7fa fd0f 	bl	801433c <lwip_htons>
 801991e:	4603      	mov	r3, r0
 8019920:	b2db      	uxtb	r3, r3
 8019922:	b29b      	uxth	r3, r3
 8019924:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019928:	b29b      	uxth	r3, r3
 801992a:	4618      	mov	r0, r3
 801992c:	f7fa fd06 	bl	801433c <lwip_htons>
 8019930:	4603      	mov	r3, r0
 8019932:	b21b      	sxth	r3, r3
 8019934:	4323      	orrs	r3, r4
 8019936:	b21a      	sxth	r2, r3
 8019938:	4b57      	ldr	r3, [pc, #348]	; (8019a98 <tcp_receive+0x888>)
 801993a:	68db      	ldr	r3, [r3, #12]
 801993c:	b292      	uxth	r2, r2
 801993e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019944:	4b54      	ldr	r3, [pc, #336]	; (8019a98 <tcp_receive+0x888>)
 8019946:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019948:	4b53      	ldr	r3, [pc, #332]	; (8019a98 <tcp_receive+0x888>)
 801994a:	68db      	ldr	r3, [r3, #12]
 801994c:	899b      	ldrh	r3, [r3, #12]
 801994e:	b29b      	uxth	r3, r3
 8019950:	4618      	mov	r0, r3
 8019952:	f7fa fcf3 	bl	801433c <lwip_htons>
 8019956:	4603      	mov	r3, r0
 8019958:	b2db      	uxtb	r3, r3
 801995a:	f003 0302 	and.w	r3, r3, #2
 801995e:	2b00      	cmp	r3, #0
 8019960:	d005      	beq.n	801996e <tcp_receive+0x75e>
            inseg.len -= 1;
 8019962:	4b4d      	ldr	r3, [pc, #308]	; (8019a98 <tcp_receive+0x888>)
 8019964:	891b      	ldrh	r3, [r3, #8]
 8019966:	3b01      	subs	r3, #1
 8019968:	b29a      	uxth	r2, r3
 801996a:	4b4b      	ldr	r3, [pc, #300]	; (8019a98 <tcp_receive+0x888>)
 801996c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801996e:	4b4a      	ldr	r3, [pc, #296]	; (8019a98 <tcp_receive+0x888>)
 8019970:	685a      	ldr	r2, [r3, #4]
 8019972:	4b49      	ldr	r3, [pc, #292]	; (8019a98 <tcp_receive+0x888>)
 8019974:	891b      	ldrh	r3, [r3, #8]
 8019976:	4619      	mov	r1, r3
 8019978:	4610      	mov	r0, r2
 801997a:	f7fb ff37 	bl	80157ec <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801997e:	4b46      	ldr	r3, [pc, #280]	; (8019a98 <tcp_receive+0x888>)
 8019980:	891c      	ldrh	r4, [r3, #8]
 8019982:	4b45      	ldr	r3, [pc, #276]	; (8019a98 <tcp_receive+0x888>)
 8019984:	68db      	ldr	r3, [r3, #12]
 8019986:	899b      	ldrh	r3, [r3, #12]
 8019988:	b29b      	uxth	r3, r3
 801998a:	4618      	mov	r0, r3
 801998c:	f7fa fcd6 	bl	801433c <lwip_htons>
 8019990:	4603      	mov	r3, r0
 8019992:	b2db      	uxtb	r3, r3
 8019994:	f003 0303 	and.w	r3, r3, #3
 8019998:	2b00      	cmp	r3, #0
 801999a:	d001      	beq.n	80199a0 <tcp_receive+0x790>
 801999c:	2301      	movs	r3, #1
 801999e:	e000      	b.n	80199a2 <tcp_receive+0x792>
 80199a0:	2300      	movs	r3, #0
 80199a2:	4423      	add	r3, r4
 80199a4:	b29a      	uxth	r2, r3
 80199a6:	4b3d      	ldr	r3, [pc, #244]	; (8019a9c <tcp_receive+0x88c>)
 80199a8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80199aa:	4b3c      	ldr	r3, [pc, #240]	; (8019a9c <tcp_receive+0x88c>)
 80199ac:	881b      	ldrh	r3, [r3, #0]
 80199ae:	461a      	mov	r2, r3
 80199b0:	4b38      	ldr	r3, [pc, #224]	; (8019a94 <tcp_receive+0x884>)
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	441a      	add	r2, r3
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199ba:	6879      	ldr	r1, [r7, #4]
 80199bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80199be:	440b      	add	r3, r1
 80199c0:	429a      	cmp	r2, r3
 80199c2:	d006      	beq.n	80199d2 <tcp_receive+0x7c2>
 80199c4:	4b36      	ldr	r3, [pc, #216]	; (8019aa0 <tcp_receive+0x890>)
 80199c6:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80199ca:	4936      	ldr	r1, [pc, #216]	; (8019aa4 <tcp_receive+0x894>)
 80199cc:	4836      	ldr	r0, [pc, #216]	; (8019aa8 <tcp_receive+0x898>)
 80199ce:	f005 fad9 	bl	801ef84 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	f000 80e7 	beq.w	8019baa <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80199dc:	4b2e      	ldr	r3, [pc, #184]	; (8019a98 <tcp_receive+0x888>)
 80199de:	68db      	ldr	r3, [r3, #12]
 80199e0:	899b      	ldrh	r3, [r3, #12]
 80199e2:	b29b      	uxth	r3, r3
 80199e4:	4618      	mov	r0, r3
 80199e6:	f7fa fca9 	bl	801433c <lwip_htons>
 80199ea:	4603      	mov	r3, r0
 80199ec:	b2db      	uxtb	r3, r3
 80199ee:	f003 0301 	and.w	r3, r3, #1
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d010      	beq.n	8019a18 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80199f6:	e00a      	b.n	8019a0e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80199fc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019a02:	681a      	ldr	r2, [r3, #0]
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8019a08:	68f8      	ldr	r0, [r7, #12]
 8019a0a:	f7fd fca3 	bl	8017354 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d1f0      	bne.n	80199f8 <tcp_receive+0x7e8>
 8019a16:	e0c8      	b.n	8019baa <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019a1e:	e052      	b.n	8019ac6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a22:	68db      	ldr	r3, [r3, #12]
 8019a24:	899b      	ldrh	r3, [r3, #12]
 8019a26:	b29b      	uxth	r3, r3
 8019a28:	4618      	mov	r0, r3
 8019a2a:	f7fa fc87 	bl	801433c <lwip_htons>
 8019a2e:	4603      	mov	r3, r0
 8019a30:	b2db      	uxtb	r3, r3
 8019a32:	f003 0301 	and.w	r3, r3, #1
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d03d      	beq.n	8019ab6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8019a3a:	4b17      	ldr	r3, [pc, #92]	; (8019a98 <tcp_receive+0x888>)
 8019a3c:	68db      	ldr	r3, [r3, #12]
 8019a3e:	899b      	ldrh	r3, [r3, #12]
 8019a40:	b29b      	uxth	r3, r3
 8019a42:	4618      	mov	r0, r3
 8019a44:	f7fa fc7a 	bl	801433c <lwip_htons>
 8019a48:	4603      	mov	r3, r0
 8019a4a:	b2db      	uxtb	r3, r3
 8019a4c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	d130      	bne.n	8019ab6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019a54:	4b10      	ldr	r3, [pc, #64]	; (8019a98 <tcp_receive+0x888>)
 8019a56:	68db      	ldr	r3, [r3, #12]
 8019a58:	899b      	ldrh	r3, [r3, #12]
 8019a5a:	b29c      	uxth	r4, r3
 8019a5c:	2001      	movs	r0, #1
 8019a5e:	f7fa fc6d 	bl	801433c <lwip_htons>
 8019a62:	4603      	mov	r3, r0
 8019a64:	461a      	mov	r2, r3
 8019a66:	4b0c      	ldr	r3, [pc, #48]	; (8019a98 <tcp_receive+0x888>)
 8019a68:	68db      	ldr	r3, [r3, #12]
 8019a6a:	4322      	orrs	r2, r4
 8019a6c:	b292      	uxth	r2, r2
 8019a6e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019a70:	4b09      	ldr	r3, [pc, #36]	; (8019a98 <tcp_receive+0x888>)
 8019a72:	891c      	ldrh	r4, [r3, #8]
 8019a74:	4b08      	ldr	r3, [pc, #32]	; (8019a98 <tcp_receive+0x888>)
 8019a76:	68db      	ldr	r3, [r3, #12]
 8019a78:	899b      	ldrh	r3, [r3, #12]
 8019a7a:	b29b      	uxth	r3, r3
 8019a7c:	4618      	mov	r0, r3
 8019a7e:	f7fa fc5d 	bl	801433c <lwip_htons>
 8019a82:	4603      	mov	r3, r0
 8019a84:	b2db      	uxtb	r3, r3
 8019a86:	f003 0303 	and.w	r3, r3, #3
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d00e      	beq.n	8019aac <tcp_receive+0x89c>
 8019a8e:	2301      	movs	r3, #1
 8019a90:	e00d      	b.n	8019aae <tcp_receive+0x89e>
 8019a92:	bf00      	nop
 8019a94:	20004548 	.word	0x20004548
 8019a98:	20004528 	.word	0x20004528
 8019a9c:	20004552 	.word	0x20004552
 8019aa0:	080213e4 	.word	0x080213e4
 8019aa4:	0802178c 	.word	0x0802178c
 8019aa8:	08021430 	.word	0x08021430
 8019aac:	2300      	movs	r3, #0
 8019aae:	4423      	add	r3, r4
 8019ab0:	b29a      	uxth	r2, r3
 8019ab2:	4b98      	ldr	r3, [pc, #608]	; (8019d14 <tcp_receive+0xb04>)
 8019ab4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8019ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ab8:	613b      	str	r3, [r7, #16]
              next = next->next;
 8019aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8019ac0:	6938      	ldr	r0, [r7, #16]
 8019ac2:	f7fd fc47 	bl	8017354 <tcp_seg_free>
            while (next &&
 8019ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d00e      	beq.n	8019aea <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8019acc:	4b91      	ldr	r3, [pc, #580]	; (8019d14 <tcp_receive+0xb04>)
 8019ace:	881b      	ldrh	r3, [r3, #0]
 8019ad0:	461a      	mov	r2, r3
 8019ad2:	4b91      	ldr	r3, [pc, #580]	; (8019d18 <tcp_receive+0xb08>)
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	441a      	add	r2, r3
 8019ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ada:	68db      	ldr	r3, [r3, #12]
 8019adc:	685b      	ldr	r3, [r3, #4]
 8019ade:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019ae0:	8909      	ldrh	r1, [r1, #8]
 8019ae2:	440b      	add	r3, r1
 8019ae4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	da9a      	bge.n	8019a20 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8019aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d059      	beq.n	8019ba4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8019af0:	4b88      	ldr	r3, [pc, #544]	; (8019d14 <tcp_receive+0xb04>)
 8019af2:	881b      	ldrh	r3, [r3, #0]
 8019af4:	461a      	mov	r2, r3
 8019af6:	4b88      	ldr	r3, [pc, #544]	; (8019d18 <tcp_receive+0xb08>)
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	441a      	add	r2, r3
 8019afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019afe:	68db      	ldr	r3, [r3, #12]
 8019b00:	685b      	ldr	r3, [r3, #4]
 8019b02:	1ad3      	subs	r3, r2, r3
            if (next &&
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	dd4d      	ble.n	8019ba4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b0a:	68db      	ldr	r3, [r3, #12]
 8019b0c:	685b      	ldr	r3, [r3, #4]
 8019b0e:	b29a      	uxth	r2, r3
 8019b10:	4b81      	ldr	r3, [pc, #516]	; (8019d18 <tcp_receive+0xb08>)
 8019b12:	681b      	ldr	r3, [r3, #0]
 8019b14:	b29b      	uxth	r3, r3
 8019b16:	1ad3      	subs	r3, r2, r3
 8019b18:	b29a      	uxth	r2, r3
 8019b1a:	4b80      	ldr	r3, [pc, #512]	; (8019d1c <tcp_receive+0xb0c>)
 8019b1c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019b1e:	4b7f      	ldr	r3, [pc, #508]	; (8019d1c <tcp_receive+0xb0c>)
 8019b20:	68db      	ldr	r3, [r3, #12]
 8019b22:	899b      	ldrh	r3, [r3, #12]
 8019b24:	b29b      	uxth	r3, r3
 8019b26:	4618      	mov	r0, r3
 8019b28:	f7fa fc08 	bl	801433c <lwip_htons>
 8019b2c:	4603      	mov	r3, r0
 8019b2e:	b2db      	uxtb	r3, r3
 8019b30:	f003 0302 	and.w	r3, r3, #2
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d005      	beq.n	8019b44 <tcp_receive+0x934>
                inseg.len -= 1;
 8019b38:	4b78      	ldr	r3, [pc, #480]	; (8019d1c <tcp_receive+0xb0c>)
 8019b3a:	891b      	ldrh	r3, [r3, #8]
 8019b3c:	3b01      	subs	r3, #1
 8019b3e:	b29a      	uxth	r2, r3
 8019b40:	4b76      	ldr	r3, [pc, #472]	; (8019d1c <tcp_receive+0xb0c>)
 8019b42:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8019b44:	4b75      	ldr	r3, [pc, #468]	; (8019d1c <tcp_receive+0xb0c>)
 8019b46:	685a      	ldr	r2, [r3, #4]
 8019b48:	4b74      	ldr	r3, [pc, #464]	; (8019d1c <tcp_receive+0xb0c>)
 8019b4a:	891b      	ldrh	r3, [r3, #8]
 8019b4c:	4619      	mov	r1, r3
 8019b4e:	4610      	mov	r0, r2
 8019b50:	f7fb fe4c 	bl	80157ec <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8019b54:	4b71      	ldr	r3, [pc, #452]	; (8019d1c <tcp_receive+0xb0c>)
 8019b56:	891c      	ldrh	r4, [r3, #8]
 8019b58:	4b70      	ldr	r3, [pc, #448]	; (8019d1c <tcp_receive+0xb0c>)
 8019b5a:	68db      	ldr	r3, [r3, #12]
 8019b5c:	899b      	ldrh	r3, [r3, #12]
 8019b5e:	b29b      	uxth	r3, r3
 8019b60:	4618      	mov	r0, r3
 8019b62:	f7fa fbeb 	bl	801433c <lwip_htons>
 8019b66:	4603      	mov	r3, r0
 8019b68:	b2db      	uxtb	r3, r3
 8019b6a:	f003 0303 	and.w	r3, r3, #3
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d001      	beq.n	8019b76 <tcp_receive+0x966>
 8019b72:	2301      	movs	r3, #1
 8019b74:	e000      	b.n	8019b78 <tcp_receive+0x968>
 8019b76:	2300      	movs	r3, #0
 8019b78:	4423      	add	r3, r4
 8019b7a:	b29a      	uxth	r2, r3
 8019b7c:	4b65      	ldr	r3, [pc, #404]	; (8019d14 <tcp_receive+0xb04>)
 8019b7e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019b80:	4b64      	ldr	r3, [pc, #400]	; (8019d14 <tcp_receive+0xb04>)
 8019b82:	881b      	ldrh	r3, [r3, #0]
 8019b84:	461a      	mov	r2, r3
 8019b86:	4b64      	ldr	r3, [pc, #400]	; (8019d18 <tcp_receive+0xb08>)
 8019b88:	681b      	ldr	r3, [r3, #0]
 8019b8a:	441a      	add	r2, r3
 8019b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b8e:	68db      	ldr	r3, [r3, #12]
 8019b90:	685b      	ldr	r3, [r3, #4]
 8019b92:	429a      	cmp	r2, r3
 8019b94:	d006      	beq.n	8019ba4 <tcp_receive+0x994>
 8019b96:	4b62      	ldr	r3, [pc, #392]	; (8019d20 <tcp_receive+0xb10>)
 8019b98:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8019b9c:	4961      	ldr	r1, [pc, #388]	; (8019d24 <tcp_receive+0xb14>)
 8019b9e:	4862      	ldr	r0, [pc, #392]	; (8019d28 <tcp_receive+0xb18>)
 8019ba0:	f005 f9f0 	bl	801ef84 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019ba8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8019baa:	4b5a      	ldr	r3, [pc, #360]	; (8019d14 <tcp_receive+0xb04>)
 8019bac:	881b      	ldrh	r3, [r3, #0]
 8019bae:	461a      	mov	r2, r3
 8019bb0:	4b59      	ldr	r3, [pc, #356]	; (8019d18 <tcp_receive+0xb08>)
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	441a      	add	r2, r3
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019bbe:	4b55      	ldr	r3, [pc, #340]	; (8019d14 <tcp_receive+0xb04>)
 8019bc0:	881b      	ldrh	r3, [r3, #0]
 8019bc2:	429a      	cmp	r2, r3
 8019bc4:	d206      	bcs.n	8019bd4 <tcp_receive+0x9c4>
 8019bc6:	4b56      	ldr	r3, [pc, #344]	; (8019d20 <tcp_receive+0xb10>)
 8019bc8:	f240 6207 	movw	r2, #1543	; 0x607
 8019bcc:	4957      	ldr	r1, [pc, #348]	; (8019d2c <tcp_receive+0xb1c>)
 8019bce:	4856      	ldr	r0, [pc, #344]	; (8019d28 <tcp_receive+0xb18>)
 8019bd0:	f005 f9d8 	bl	801ef84 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019bd8:	4b4e      	ldr	r3, [pc, #312]	; (8019d14 <tcp_receive+0xb04>)
 8019bda:	881b      	ldrh	r3, [r3, #0]
 8019bdc:	1ad3      	subs	r3, r2, r3
 8019bde:	b29a      	uxth	r2, r3
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8019be4:	6878      	ldr	r0, [r7, #4]
 8019be6:	f7fc fe93 	bl	8016910 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8019bea:	4b4c      	ldr	r3, [pc, #304]	; (8019d1c <tcp_receive+0xb0c>)
 8019bec:	685b      	ldr	r3, [r3, #4]
 8019bee:	891b      	ldrh	r3, [r3, #8]
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d006      	beq.n	8019c02 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8019bf4:	4b49      	ldr	r3, [pc, #292]	; (8019d1c <tcp_receive+0xb0c>)
 8019bf6:	685b      	ldr	r3, [r3, #4]
 8019bf8:	4a4d      	ldr	r2, [pc, #308]	; (8019d30 <tcp_receive+0xb20>)
 8019bfa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8019bfc:	4b47      	ldr	r3, [pc, #284]	; (8019d1c <tcp_receive+0xb0c>)
 8019bfe:	2200      	movs	r2, #0
 8019c00:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019c02:	4b46      	ldr	r3, [pc, #280]	; (8019d1c <tcp_receive+0xb0c>)
 8019c04:	68db      	ldr	r3, [r3, #12]
 8019c06:	899b      	ldrh	r3, [r3, #12]
 8019c08:	b29b      	uxth	r3, r3
 8019c0a:	4618      	mov	r0, r3
 8019c0c:	f7fa fb96 	bl	801433c <lwip_htons>
 8019c10:	4603      	mov	r3, r0
 8019c12:	b2db      	uxtb	r3, r3
 8019c14:	f003 0301 	and.w	r3, r3, #1
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	f000 80b8 	beq.w	8019d8e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8019c1e:	4b45      	ldr	r3, [pc, #276]	; (8019d34 <tcp_receive+0xb24>)
 8019c20:	781b      	ldrb	r3, [r3, #0]
 8019c22:	f043 0320 	orr.w	r3, r3, #32
 8019c26:	b2da      	uxtb	r2, r3
 8019c28:	4b42      	ldr	r3, [pc, #264]	; (8019d34 <tcp_receive+0xb24>)
 8019c2a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8019c2c:	e0af      	b.n	8019d8e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019c32:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019c38:	68db      	ldr	r3, [r3, #12]
 8019c3a:	685b      	ldr	r3, [r3, #4]
 8019c3c:	4a36      	ldr	r2, [pc, #216]	; (8019d18 <tcp_receive+0xb08>)
 8019c3e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8019c40:	68bb      	ldr	r3, [r7, #8]
 8019c42:	891b      	ldrh	r3, [r3, #8]
 8019c44:	461c      	mov	r4, r3
 8019c46:	68bb      	ldr	r3, [r7, #8]
 8019c48:	68db      	ldr	r3, [r3, #12]
 8019c4a:	899b      	ldrh	r3, [r3, #12]
 8019c4c:	b29b      	uxth	r3, r3
 8019c4e:	4618      	mov	r0, r3
 8019c50:	f7fa fb74 	bl	801433c <lwip_htons>
 8019c54:	4603      	mov	r3, r0
 8019c56:	b2db      	uxtb	r3, r3
 8019c58:	f003 0303 	and.w	r3, r3, #3
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d001      	beq.n	8019c64 <tcp_receive+0xa54>
 8019c60:	2301      	movs	r3, #1
 8019c62:	e000      	b.n	8019c66 <tcp_receive+0xa56>
 8019c64:	2300      	movs	r3, #0
 8019c66:	191a      	adds	r2, r3, r4
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c6c:	441a      	add	r2, r3
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019c76:	461c      	mov	r4, r3
 8019c78:	68bb      	ldr	r3, [r7, #8]
 8019c7a:	891b      	ldrh	r3, [r3, #8]
 8019c7c:	461d      	mov	r5, r3
 8019c7e:	68bb      	ldr	r3, [r7, #8]
 8019c80:	68db      	ldr	r3, [r3, #12]
 8019c82:	899b      	ldrh	r3, [r3, #12]
 8019c84:	b29b      	uxth	r3, r3
 8019c86:	4618      	mov	r0, r3
 8019c88:	f7fa fb58 	bl	801433c <lwip_htons>
 8019c8c:	4603      	mov	r3, r0
 8019c8e:	b2db      	uxtb	r3, r3
 8019c90:	f003 0303 	and.w	r3, r3, #3
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d001      	beq.n	8019c9c <tcp_receive+0xa8c>
 8019c98:	2301      	movs	r3, #1
 8019c9a:	e000      	b.n	8019c9e <tcp_receive+0xa8e>
 8019c9c:	2300      	movs	r3, #0
 8019c9e:	442b      	add	r3, r5
 8019ca0:	429c      	cmp	r4, r3
 8019ca2:	d206      	bcs.n	8019cb2 <tcp_receive+0xaa2>
 8019ca4:	4b1e      	ldr	r3, [pc, #120]	; (8019d20 <tcp_receive+0xb10>)
 8019ca6:	f240 622c 	movw	r2, #1580	; 0x62c
 8019caa:	4923      	ldr	r1, [pc, #140]	; (8019d38 <tcp_receive+0xb28>)
 8019cac:	481e      	ldr	r0, [pc, #120]	; (8019d28 <tcp_receive+0xb18>)
 8019cae:	f005 f969 	bl	801ef84 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8019cb2:	68bb      	ldr	r3, [r7, #8]
 8019cb4:	891b      	ldrh	r3, [r3, #8]
 8019cb6:	461c      	mov	r4, r3
 8019cb8:	68bb      	ldr	r3, [r7, #8]
 8019cba:	68db      	ldr	r3, [r3, #12]
 8019cbc:	899b      	ldrh	r3, [r3, #12]
 8019cbe:	b29b      	uxth	r3, r3
 8019cc0:	4618      	mov	r0, r3
 8019cc2:	f7fa fb3b 	bl	801433c <lwip_htons>
 8019cc6:	4603      	mov	r3, r0
 8019cc8:	b2db      	uxtb	r3, r3
 8019cca:	f003 0303 	and.w	r3, r3, #3
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d001      	beq.n	8019cd6 <tcp_receive+0xac6>
 8019cd2:	2301      	movs	r3, #1
 8019cd4:	e000      	b.n	8019cd8 <tcp_receive+0xac8>
 8019cd6:	2300      	movs	r3, #0
 8019cd8:	1919      	adds	r1, r3, r4
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019cde:	b28b      	uxth	r3, r1
 8019ce0:	1ad3      	subs	r3, r2, r3
 8019ce2:	b29a      	uxth	r2, r3
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8019ce8:	6878      	ldr	r0, [r7, #4]
 8019cea:	f7fc fe11 	bl	8016910 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8019cee:	68bb      	ldr	r3, [r7, #8]
 8019cf0:	685b      	ldr	r3, [r3, #4]
 8019cf2:	891b      	ldrh	r3, [r3, #8]
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d028      	beq.n	8019d4a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8019cf8:	4b0d      	ldr	r3, [pc, #52]	; (8019d30 <tcp_receive+0xb20>)
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d01d      	beq.n	8019d3c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8019d00:	4b0b      	ldr	r3, [pc, #44]	; (8019d30 <tcp_receive+0xb20>)
 8019d02:	681a      	ldr	r2, [r3, #0]
 8019d04:	68bb      	ldr	r3, [r7, #8]
 8019d06:	685b      	ldr	r3, [r3, #4]
 8019d08:	4619      	mov	r1, r3
 8019d0a:	4610      	mov	r0, r2
 8019d0c:	f7fb ffc2 	bl	8015c94 <pbuf_cat>
 8019d10:	e018      	b.n	8019d44 <tcp_receive+0xb34>
 8019d12:	bf00      	nop
 8019d14:	20004552 	.word	0x20004552
 8019d18:	20004548 	.word	0x20004548
 8019d1c:	20004528 	.word	0x20004528
 8019d20:	080213e4 	.word	0x080213e4
 8019d24:	080217c4 	.word	0x080217c4
 8019d28:	08021430 	.word	0x08021430
 8019d2c:	08021800 	.word	0x08021800
 8019d30:	20004558 	.word	0x20004558
 8019d34:	20004555 	.word	0x20004555
 8019d38:	08021820 	.word	0x08021820
            } else {
              recv_data = cseg->p;
 8019d3c:	68bb      	ldr	r3, [r7, #8]
 8019d3e:	685b      	ldr	r3, [r3, #4]
 8019d40:	4a70      	ldr	r2, [pc, #448]	; (8019f04 <tcp_receive+0xcf4>)
 8019d42:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8019d44:	68bb      	ldr	r3, [r7, #8]
 8019d46:	2200      	movs	r2, #0
 8019d48:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019d4a:	68bb      	ldr	r3, [r7, #8]
 8019d4c:	68db      	ldr	r3, [r3, #12]
 8019d4e:	899b      	ldrh	r3, [r3, #12]
 8019d50:	b29b      	uxth	r3, r3
 8019d52:	4618      	mov	r0, r3
 8019d54:	f7fa faf2 	bl	801433c <lwip_htons>
 8019d58:	4603      	mov	r3, r0
 8019d5a:	b2db      	uxtb	r3, r3
 8019d5c:	f003 0301 	and.w	r3, r3, #1
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	d00d      	beq.n	8019d80 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8019d64:	4b68      	ldr	r3, [pc, #416]	; (8019f08 <tcp_receive+0xcf8>)
 8019d66:	781b      	ldrb	r3, [r3, #0]
 8019d68:	f043 0320 	orr.w	r3, r3, #32
 8019d6c:	b2da      	uxtb	r2, r3
 8019d6e:	4b66      	ldr	r3, [pc, #408]	; (8019f08 <tcp_receive+0xcf8>)
 8019d70:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	7d1b      	ldrb	r3, [r3, #20]
 8019d76:	2b04      	cmp	r3, #4
 8019d78:	d102      	bne.n	8019d80 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	2207      	movs	r2, #7
 8019d7e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8019d80:	68bb      	ldr	r3, [r7, #8]
 8019d82:	681a      	ldr	r2, [r3, #0]
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8019d88:	68b8      	ldr	r0, [r7, #8]
 8019d8a:	f7fd fae3 	bl	8017354 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d008      	beq.n	8019da8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019d9a:	68db      	ldr	r3, [r3, #12]
 8019d9c:	685a      	ldr	r2, [r3, #4]
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8019da2:	429a      	cmp	r2, r3
 8019da4:	f43f af43 	beq.w	8019c2e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	8b5b      	ldrh	r3, [r3, #26]
 8019dac:	f003 0301 	and.w	r3, r3, #1
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d00e      	beq.n	8019dd2 <tcp_receive+0xbc2>
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	8b5b      	ldrh	r3, [r3, #26]
 8019db8:	f023 0301 	bic.w	r3, r3, #1
 8019dbc:	b29a      	uxth	r2, r3
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	835a      	strh	r2, [r3, #26]
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	8b5b      	ldrh	r3, [r3, #26]
 8019dc6:	f043 0302 	orr.w	r3, r3, #2
 8019dca:	b29a      	uxth	r2, r3
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019dd0:	e188      	b.n	801a0e4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	8b5b      	ldrh	r3, [r3, #26]
 8019dd6:	f043 0301 	orr.w	r3, r3, #1
 8019dda:	b29a      	uxth	r2, r3
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019de0:	e180      	b.n	801a0e4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d106      	bne.n	8019df8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8019dea:	4848      	ldr	r0, [pc, #288]	; (8019f0c <tcp_receive+0xcfc>)
 8019dec:	f7fd fae8 	bl	80173c0 <tcp_seg_copy>
 8019df0:	4602      	mov	r2, r0
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	675a      	str	r2, [r3, #116]	; 0x74
 8019df6:	e16d      	b.n	801a0d4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8019df8:	2300      	movs	r3, #0
 8019dfa:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019e00:	63bb      	str	r3, [r7, #56]	; 0x38
 8019e02:	e157      	b.n	801a0b4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8019e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e06:	68db      	ldr	r3, [r3, #12]
 8019e08:	685a      	ldr	r2, [r3, #4]
 8019e0a:	4b41      	ldr	r3, [pc, #260]	; (8019f10 <tcp_receive+0xd00>)
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	429a      	cmp	r2, r3
 8019e10:	d11d      	bne.n	8019e4e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8019e12:	4b3e      	ldr	r3, [pc, #248]	; (8019f0c <tcp_receive+0xcfc>)
 8019e14:	891a      	ldrh	r2, [r3, #8]
 8019e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e18:	891b      	ldrh	r3, [r3, #8]
 8019e1a:	429a      	cmp	r2, r3
 8019e1c:	f240 814f 	bls.w	801a0be <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019e20:	483a      	ldr	r0, [pc, #232]	; (8019f0c <tcp_receive+0xcfc>)
 8019e22:	f7fd facd 	bl	80173c0 <tcp_seg_copy>
 8019e26:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8019e28:	697b      	ldr	r3, [r7, #20]
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	f000 8149 	beq.w	801a0c2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8019e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d003      	beq.n	8019e3e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8019e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e38:	697a      	ldr	r2, [r7, #20]
 8019e3a:	601a      	str	r2, [r3, #0]
 8019e3c:	e002      	b.n	8019e44 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	697a      	ldr	r2, [r7, #20]
 8019e42:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8019e44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019e46:	6978      	ldr	r0, [r7, #20]
 8019e48:	f7ff f8de 	bl	8019008 <tcp_oos_insert_segment>
                }
                break;
 8019e4c:	e139      	b.n	801a0c2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8019e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d117      	bne.n	8019e84 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8019e54:	4b2e      	ldr	r3, [pc, #184]	; (8019f10 <tcp_receive+0xd00>)
 8019e56:	681a      	ldr	r2, [r3, #0]
 8019e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e5a:	68db      	ldr	r3, [r3, #12]
 8019e5c:	685b      	ldr	r3, [r3, #4]
 8019e5e:	1ad3      	subs	r3, r2, r3
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	da57      	bge.n	8019f14 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019e64:	4829      	ldr	r0, [pc, #164]	; (8019f0c <tcp_receive+0xcfc>)
 8019e66:	f7fd faab 	bl	80173c0 <tcp_seg_copy>
 8019e6a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8019e6c:	69bb      	ldr	r3, [r7, #24]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	f000 8129 	beq.w	801a0c6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	69ba      	ldr	r2, [r7, #24]
 8019e78:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8019e7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019e7c:	69b8      	ldr	r0, [r7, #24]
 8019e7e:	f7ff f8c3 	bl	8019008 <tcp_oos_insert_segment>
                  }
                  break;
 8019e82:	e120      	b.n	801a0c6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8019e84:	4b22      	ldr	r3, [pc, #136]	; (8019f10 <tcp_receive+0xd00>)
 8019e86:	681a      	ldr	r2, [r3, #0]
 8019e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e8a:	68db      	ldr	r3, [r3, #12]
 8019e8c:	685b      	ldr	r3, [r3, #4]
 8019e8e:	1ad3      	subs	r3, r2, r3
 8019e90:	3b01      	subs	r3, #1
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	db3e      	blt.n	8019f14 <tcp_receive+0xd04>
 8019e96:	4b1e      	ldr	r3, [pc, #120]	; (8019f10 <tcp_receive+0xd00>)
 8019e98:	681a      	ldr	r2, [r3, #0]
 8019e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e9c:	68db      	ldr	r3, [r3, #12]
 8019e9e:	685b      	ldr	r3, [r3, #4]
 8019ea0:	1ad3      	subs	r3, r2, r3
 8019ea2:	3301      	adds	r3, #1
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	dc35      	bgt.n	8019f14 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019ea8:	4818      	ldr	r0, [pc, #96]	; (8019f0c <tcp_receive+0xcfc>)
 8019eaa:	f7fd fa89 	bl	80173c0 <tcp_seg_copy>
 8019eae:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8019eb0:	69fb      	ldr	r3, [r7, #28]
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	f000 8109 	beq.w	801a0ca <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8019eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019eba:	68db      	ldr	r3, [r3, #12]
 8019ebc:	685b      	ldr	r3, [r3, #4]
 8019ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019ec0:	8912      	ldrh	r2, [r2, #8]
 8019ec2:	441a      	add	r2, r3
 8019ec4:	4b12      	ldr	r3, [pc, #72]	; (8019f10 <tcp_receive+0xd00>)
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	1ad3      	subs	r3, r2, r3
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	dd12      	ble.n	8019ef4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8019ece:	4b10      	ldr	r3, [pc, #64]	; (8019f10 <tcp_receive+0xd00>)
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	b29a      	uxth	r2, r3
 8019ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ed6:	68db      	ldr	r3, [r3, #12]
 8019ed8:	685b      	ldr	r3, [r3, #4]
 8019eda:	b29b      	uxth	r3, r3
 8019edc:	1ad3      	subs	r3, r2, r3
 8019ede:	b29a      	uxth	r2, r3
 8019ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ee2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8019ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ee6:	685a      	ldr	r2, [r3, #4]
 8019ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019eea:	891b      	ldrh	r3, [r3, #8]
 8019eec:	4619      	mov	r1, r3
 8019eee:	4610      	mov	r0, r2
 8019ef0:	f7fb fc7c 	bl	80157ec <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ef6:	69fa      	ldr	r2, [r7, #28]
 8019ef8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8019efa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019efc:	69f8      	ldr	r0, [r7, #28]
 8019efe:	f7ff f883 	bl	8019008 <tcp_oos_insert_segment>
                  }
                  break;
 8019f02:	e0e2      	b.n	801a0ca <tcp_receive+0xeba>
 8019f04:	20004558 	.word	0x20004558
 8019f08:	20004555 	.word	0x20004555
 8019f0c:	20004528 	.word	0x20004528
 8019f10:	20004548 	.word	0x20004548
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8019f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f16:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8019f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	f040 80c6 	bne.w	801a0ae <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8019f22:	4b80      	ldr	r3, [pc, #512]	; (801a124 <tcp_receive+0xf14>)
 8019f24:	681a      	ldr	r2, [r3, #0]
 8019f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f28:	68db      	ldr	r3, [r3, #12]
 8019f2a:	685b      	ldr	r3, [r3, #4]
 8019f2c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	f340 80bd 	ble.w	801a0ae <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f36:	68db      	ldr	r3, [r3, #12]
 8019f38:	899b      	ldrh	r3, [r3, #12]
 8019f3a:	b29b      	uxth	r3, r3
 8019f3c:	4618      	mov	r0, r3
 8019f3e:	f7fa f9fd 	bl	801433c <lwip_htons>
 8019f42:	4603      	mov	r3, r0
 8019f44:	b2db      	uxtb	r3, r3
 8019f46:	f003 0301 	and.w	r3, r3, #1
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	f040 80bf 	bne.w	801a0ce <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8019f50:	4875      	ldr	r0, [pc, #468]	; (801a128 <tcp_receive+0xf18>)
 8019f52:	f7fd fa35 	bl	80173c0 <tcp_seg_copy>
 8019f56:	4602      	mov	r2, r0
 8019f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f5a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8019f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	f000 80b6 	beq.w	801a0d2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8019f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f68:	68db      	ldr	r3, [r3, #12]
 8019f6a:	685b      	ldr	r3, [r3, #4]
 8019f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019f6e:	8912      	ldrh	r2, [r2, #8]
 8019f70:	441a      	add	r2, r3
 8019f72:	4b6c      	ldr	r3, [pc, #432]	; (801a124 <tcp_receive+0xf14>)
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	1ad3      	subs	r3, r2, r3
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	dd12      	ble.n	8019fa2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019f7c:	4b69      	ldr	r3, [pc, #420]	; (801a124 <tcp_receive+0xf14>)
 8019f7e:	681b      	ldr	r3, [r3, #0]
 8019f80:	b29a      	uxth	r2, r3
 8019f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f84:	68db      	ldr	r3, [r3, #12]
 8019f86:	685b      	ldr	r3, [r3, #4]
 8019f88:	b29b      	uxth	r3, r3
 8019f8a:	1ad3      	subs	r3, r2, r3
 8019f8c:	b29a      	uxth	r2, r3
 8019f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f90:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8019f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f94:	685a      	ldr	r2, [r3, #4]
 8019f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f98:	891b      	ldrh	r3, [r3, #8]
 8019f9a:	4619      	mov	r1, r3
 8019f9c:	4610      	mov	r0, r2
 8019f9e:	f7fb fc25 	bl	80157ec <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8019fa2:	4b62      	ldr	r3, [pc, #392]	; (801a12c <tcp_receive+0xf1c>)
 8019fa4:	881b      	ldrh	r3, [r3, #0]
 8019fa6:	461a      	mov	r2, r3
 8019fa8:	4b5e      	ldr	r3, [pc, #376]	; (801a124 <tcp_receive+0xf14>)
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	441a      	add	r2, r3
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fb2:	6879      	ldr	r1, [r7, #4]
 8019fb4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019fb6:	440b      	add	r3, r1
 8019fb8:	1ad3      	subs	r3, r2, r3
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	f340 8089 	ble.w	801a0d2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	68db      	ldr	r3, [r3, #12]
 8019fc6:	899b      	ldrh	r3, [r3, #12]
 8019fc8:	b29b      	uxth	r3, r3
 8019fca:	4618      	mov	r0, r3
 8019fcc:	f7fa f9b6 	bl	801433c <lwip_htons>
 8019fd0:	4603      	mov	r3, r0
 8019fd2:	b2db      	uxtb	r3, r3
 8019fd4:	f003 0301 	and.w	r3, r3, #1
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d022      	beq.n	801a022 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019fde:	681b      	ldr	r3, [r3, #0]
 8019fe0:	68db      	ldr	r3, [r3, #12]
 8019fe2:	899b      	ldrh	r3, [r3, #12]
 8019fe4:	b29b      	uxth	r3, r3
 8019fe6:	b21b      	sxth	r3, r3
 8019fe8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019fec:	b21c      	sxth	r4, r3
 8019fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	68db      	ldr	r3, [r3, #12]
 8019ff4:	899b      	ldrh	r3, [r3, #12]
 8019ff6:	b29b      	uxth	r3, r3
 8019ff8:	4618      	mov	r0, r3
 8019ffa:	f7fa f99f 	bl	801433c <lwip_htons>
 8019ffe:	4603      	mov	r3, r0
 801a000:	b2db      	uxtb	r3, r3
 801a002:	b29b      	uxth	r3, r3
 801a004:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801a008:	b29b      	uxth	r3, r3
 801a00a:	4618      	mov	r0, r3
 801a00c:	f7fa f996 	bl	801433c <lwip_htons>
 801a010:	4603      	mov	r3, r0
 801a012:	b21b      	sxth	r3, r3
 801a014:	4323      	orrs	r3, r4
 801a016:	b21a      	sxth	r2, r3
 801a018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	68db      	ldr	r3, [r3, #12]
 801a01e:	b292      	uxth	r2, r2
 801a020:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a026:	b29a      	uxth	r2, r3
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a02c:	4413      	add	r3, r2
 801a02e:	b299      	uxth	r1, r3
 801a030:	4b3c      	ldr	r3, [pc, #240]	; (801a124 <tcp_receive+0xf14>)
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	b29a      	uxth	r2, r3
 801a036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	1a8a      	subs	r2, r1, r2
 801a03c:	b292      	uxth	r2, r2
 801a03e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801a040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	685a      	ldr	r2, [r3, #4]
 801a046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	891b      	ldrh	r3, [r3, #8]
 801a04c:	4619      	mov	r1, r3
 801a04e:	4610      	mov	r0, r2
 801a050:	f7fb fbcc 	bl	80157ec <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801a054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a056:	681b      	ldr	r3, [r3, #0]
 801a058:	891c      	ldrh	r4, [r3, #8]
 801a05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	68db      	ldr	r3, [r3, #12]
 801a060:	899b      	ldrh	r3, [r3, #12]
 801a062:	b29b      	uxth	r3, r3
 801a064:	4618      	mov	r0, r3
 801a066:	f7fa f969 	bl	801433c <lwip_htons>
 801a06a:	4603      	mov	r3, r0
 801a06c:	b2db      	uxtb	r3, r3
 801a06e:	f003 0303 	and.w	r3, r3, #3
 801a072:	2b00      	cmp	r3, #0
 801a074:	d001      	beq.n	801a07a <tcp_receive+0xe6a>
 801a076:	2301      	movs	r3, #1
 801a078:	e000      	b.n	801a07c <tcp_receive+0xe6c>
 801a07a:	2300      	movs	r3, #0
 801a07c:	4423      	add	r3, r4
 801a07e:	b29a      	uxth	r2, r3
 801a080:	4b2a      	ldr	r3, [pc, #168]	; (801a12c <tcp_receive+0xf1c>)
 801a082:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a084:	4b29      	ldr	r3, [pc, #164]	; (801a12c <tcp_receive+0xf1c>)
 801a086:	881b      	ldrh	r3, [r3, #0]
 801a088:	461a      	mov	r2, r3
 801a08a:	4b26      	ldr	r3, [pc, #152]	; (801a124 <tcp_receive+0xf14>)
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	441a      	add	r2, r3
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a094:	6879      	ldr	r1, [r7, #4]
 801a096:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a098:	440b      	add	r3, r1
 801a09a:	429a      	cmp	r2, r3
 801a09c:	d019      	beq.n	801a0d2 <tcp_receive+0xec2>
 801a09e:	4b24      	ldr	r3, [pc, #144]	; (801a130 <tcp_receive+0xf20>)
 801a0a0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801a0a4:	4923      	ldr	r1, [pc, #140]	; (801a134 <tcp_receive+0xf24>)
 801a0a6:	4824      	ldr	r0, [pc, #144]	; (801a138 <tcp_receive+0xf28>)
 801a0a8:	f004 ff6c 	bl	801ef84 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801a0ac:	e011      	b.n	801a0d2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a0b0:	681b      	ldr	r3, [r3, #0]
 801a0b2:	63bb      	str	r3, [r7, #56]	; 0x38
 801a0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	f47f aea4 	bne.w	8019e04 <tcp_receive+0xbf4>
 801a0bc:	e00a      	b.n	801a0d4 <tcp_receive+0xec4>
                break;
 801a0be:	bf00      	nop
 801a0c0:	e008      	b.n	801a0d4 <tcp_receive+0xec4>
                break;
 801a0c2:	bf00      	nop
 801a0c4:	e006      	b.n	801a0d4 <tcp_receive+0xec4>
                  break;
 801a0c6:	bf00      	nop
 801a0c8:	e004      	b.n	801a0d4 <tcp_receive+0xec4>
                  break;
 801a0ca:	bf00      	nop
 801a0cc:	e002      	b.n	801a0d4 <tcp_receive+0xec4>
                  break;
 801a0ce:	bf00      	nop
 801a0d0:	e000      	b.n	801a0d4 <tcp_receive+0xec4>
                break;
 801a0d2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801a0d4:	6878      	ldr	r0, [r7, #4]
 801a0d6:	f001 fe9d 	bl	801be14 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801a0da:	e003      	b.n	801a0e4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801a0dc:	6878      	ldr	r0, [r7, #4]
 801a0de:	f001 fe99 	bl	801be14 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a0e2:	e01a      	b.n	801a11a <tcp_receive+0xf0a>
 801a0e4:	e019      	b.n	801a11a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a0e6:	4b0f      	ldr	r3, [pc, #60]	; (801a124 <tcp_receive+0xf14>)
 801a0e8:	681a      	ldr	r2, [r3, #0]
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0ee:	1ad3      	subs	r3, r2, r3
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	db0a      	blt.n	801a10a <tcp_receive+0xefa>
 801a0f4:	4b0b      	ldr	r3, [pc, #44]	; (801a124 <tcp_receive+0xf14>)
 801a0f6:	681a      	ldr	r2, [r3, #0]
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0fc:	6879      	ldr	r1, [r7, #4]
 801a0fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a100:	440b      	add	r3, r1
 801a102:	1ad3      	subs	r3, r2, r3
 801a104:	3301      	adds	r3, #1
 801a106:	2b00      	cmp	r3, #0
 801a108:	dd07      	ble.n	801a11a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	8b5b      	ldrh	r3, [r3, #26]
 801a10e:	f043 0302 	orr.w	r3, r3, #2
 801a112:	b29a      	uxth	r2, r3
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801a118:	e7ff      	b.n	801a11a <tcp_receive+0xf0a>
 801a11a:	bf00      	nop
 801a11c:	3750      	adds	r7, #80	; 0x50
 801a11e:	46bd      	mov	sp, r7
 801a120:	bdb0      	pop	{r4, r5, r7, pc}
 801a122:	bf00      	nop
 801a124:	20004548 	.word	0x20004548
 801a128:	20004528 	.word	0x20004528
 801a12c:	20004552 	.word	0x20004552
 801a130:	080213e4 	.word	0x080213e4
 801a134:	0802178c 	.word	0x0802178c
 801a138:	08021430 	.word	0x08021430

0801a13c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801a13c:	b480      	push	{r7}
 801a13e:	b083      	sub	sp, #12
 801a140:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801a142:	4b15      	ldr	r3, [pc, #84]	; (801a198 <tcp_get_next_optbyte+0x5c>)
 801a144:	881b      	ldrh	r3, [r3, #0]
 801a146:	1c5a      	adds	r2, r3, #1
 801a148:	b291      	uxth	r1, r2
 801a14a:	4a13      	ldr	r2, [pc, #76]	; (801a198 <tcp_get_next_optbyte+0x5c>)
 801a14c:	8011      	strh	r1, [r2, #0]
 801a14e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a150:	4b12      	ldr	r3, [pc, #72]	; (801a19c <tcp_get_next_optbyte+0x60>)
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	2b00      	cmp	r3, #0
 801a156:	d004      	beq.n	801a162 <tcp_get_next_optbyte+0x26>
 801a158:	4b11      	ldr	r3, [pc, #68]	; (801a1a0 <tcp_get_next_optbyte+0x64>)
 801a15a:	881b      	ldrh	r3, [r3, #0]
 801a15c:	88fa      	ldrh	r2, [r7, #6]
 801a15e:	429a      	cmp	r2, r3
 801a160:	d208      	bcs.n	801a174 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801a162:	4b10      	ldr	r3, [pc, #64]	; (801a1a4 <tcp_get_next_optbyte+0x68>)
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	3314      	adds	r3, #20
 801a168:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801a16a:	88fb      	ldrh	r3, [r7, #6]
 801a16c:	683a      	ldr	r2, [r7, #0]
 801a16e:	4413      	add	r3, r2
 801a170:	781b      	ldrb	r3, [r3, #0]
 801a172:	e00b      	b.n	801a18c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a174:	88fb      	ldrh	r3, [r7, #6]
 801a176:	b2da      	uxtb	r2, r3
 801a178:	4b09      	ldr	r3, [pc, #36]	; (801a1a0 <tcp_get_next_optbyte+0x64>)
 801a17a:	881b      	ldrh	r3, [r3, #0]
 801a17c:	b2db      	uxtb	r3, r3
 801a17e:	1ad3      	subs	r3, r2, r3
 801a180:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801a182:	4b06      	ldr	r3, [pc, #24]	; (801a19c <tcp_get_next_optbyte+0x60>)
 801a184:	681a      	ldr	r2, [r3, #0]
 801a186:	797b      	ldrb	r3, [r7, #5]
 801a188:	4413      	add	r3, r2
 801a18a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a18c:	4618      	mov	r0, r3
 801a18e:	370c      	adds	r7, #12
 801a190:	46bd      	mov	sp, r7
 801a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a196:	4770      	bx	lr
 801a198:	20004544 	.word	0x20004544
 801a19c:	20004540 	.word	0x20004540
 801a1a0:	2000453e 	.word	0x2000453e
 801a1a4:	20004538 	.word	0x20004538

0801a1a8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	b084      	sub	sp, #16
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	d106      	bne.n	801a1c4 <tcp_parseopt+0x1c>
 801a1b6:	4b31      	ldr	r3, [pc, #196]	; (801a27c <tcp_parseopt+0xd4>)
 801a1b8:	f240 727d 	movw	r2, #1917	; 0x77d
 801a1bc:	4930      	ldr	r1, [pc, #192]	; (801a280 <tcp_parseopt+0xd8>)
 801a1be:	4831      	ldr	r0, [pc, #196]	; (801a284 <tcp_parseopt+0xdc>)
 801a1c0:	f004 fee0 	bl	801ef84 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a1c4:	4b30      	ldr	r3, [pc, #192]	; (801a288 <tcp_parseopt+0xe0>)
 801a1c6:	881b      	ldrh	r3, [r3, #0]
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d053      	beq.n	801a274 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a1cc:	4b2f      	ldr	r3, [pc, #188]	; (801a28c <tcp_parseopt+0xe4>)
 801a1ce:	2200      	movs	r2, #0
 801a1d0:	801a      	strh	r2, [r3, #0]
 801a1d2:	e043      	b.n	801a25c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 801a1d4:	f7ff ffb2 	bl	801a13c <tcp_get_next_optbyte>
 801a1d8:	4603      	mov	r3, r0
 801a1da:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801a1dc:	7bfb      	ldrb	r3, [r7, #15]
 801a1de:	2b01      	cmp	r3, #1
 801a1e0:	d03c      	beq.n	801a25c <tcp_parseopt+0xb4>
 801a1e2:	2b02      	cmp	r3, #2
 801a1e4:	d002      	beq.n	801a1ec <tcp_parseopt+0x44>
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	d03f      	beq.n	801a26a <tcp_parseopt+0xc2>
 801a1ea:	e026      	b.n	801a23a <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a1ec:	f7ff ffa6 	bl	801a13c <tcp_get_next_optbyte>
 801a1f0:	4603      	mov	r3, r0
 801a1f2:	2b04      	cmp	r3, #4
 801a1f4:	d13b      	bne.n	801a26e <tcp_parseopt+0xc6>
 801a1f6:	4b25      	ldr	r3, [pc, #148]	; (801a28c <tcp_parseopt+0xe4>)
 801a1f8:	881b      	ldrh	r3, [r3, #0]
 801a1fa:	3302      	adds	r3, #2
 801a1fc:	4a22      	ldr	r2, [pc, #136]	; (801a288 <tcp_parseopt+0xe0>)
 801a1fe:	8812      	ldrh	r2, [r2, #0]
 801a200:	4293      	cmp	r3, r2
 801a202:	dc34      	bgt.n	801a26e <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a204:	f7ff ff9a 	bl	801a13c <tcp_get_next_optbyte>
 801a208:	4603      	mov	r3, r0
 801a20a:	b29b      	uxth	r3, r3
 801a20c:	021b      	lsls	r3, r3, #8
 801a20e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801a210:	f7ff ff94 	bl	801a13c <tcp_get_next_optbyte>
 801a214:	4603      	mov	r3, r0
 801a216:	b29a      	uxth	r2, r3
 801a218:	89bb      	ldrh	r3, [r7, #12]
 801a21a:	4313      	orrs	r3, r2
 801a21c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a21e:	89bb      	ldrh	r3, [r7, #12]
 801a220:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801a224:	d804      	bhi.n	801a230 <tcp_parseopt+0x88>
 801a226:	89bb      	ldrh	r3, [r7, #12]
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d001      	beq.n	801a230 <tcp_parseopt+0x88>
 801a22c:	89ba      	ldrh	r2, [r7, #12]
 801a22e:	e001      	b.n	801a234 <tcp_parseopt+0x8c>
 801a230:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801a238:	e010      	b.n	801a25c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801a23a:	f7ff ff7f 	bl	801a13c <tcp_get_next_optbyte>
 801a23e:	4603      	mov	r3, r0
 801a240:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801a242:	7afb      	ldrb	r3, [r7, #11]
 801a244:	2b01      	cmp	r3, #1
 801a246:	d914      	bls.n	801a272 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801a248:	7afb      	ldrb	r3, [r7, #11]
 801a24a:	b29a      	uxth	r2, r3
 801a24c:	4b0f      	ldr	r3, [pc, #60]	; (801a28c <tcp_parseopt+0xe4>)
 801a24e:	881b      	ldrh	r3, [r3, #0]
 801a250:	4413      	add	r3, r2
 801a252:	b29b      	uxth	r3, r3
 801a254:	3b02      	subs	r3, #2
 801a256:	b29a      	uxth	r2, r3
 801a258:	4b0c      	ldr	r3, [pc, #48]	; (801a28c <tcp_parseopt+0xe4>)
 801a25a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a25c:	4b0b      	ldr	r3, [pc, #44]	; (801a28c <tcp_parseopt+0xe4>)
 801a25e:	881a      	ldrh	r2, [r3, #0]
 801a260:	4b09      	ldr	r3, [pc, #36]	; (801a288 <tcp_parseopt+0xe0>)
 801a262:	881b      	ldrh	r3, [r3, #0]
 801a264:	429a      	cmp	r2, r3
 801a266:	d3b5      	bcc.n	801a1d4 <tcp_parseopt+0x2c>
 801a268:	e004      	b.n	801a274 <tcp_parseopt+0xcc>
          return;
 801a26a:	bf00      	nop
 801a26c:	e002      	b.n	801a274 <tcp_parseopt+0xcc>
            return;
 801a26e:	bf00      	nop
 801a270:	e000      	b.n	801a274 <tcp_parseopt+0xcc>
            return;
 801a272:	bf00      	nop
      }
    }
  }
}
 801a274:	3710      	adds	r7, #16
 801a276:	46bd      	mov	sp, r7
 801a278:	bd80      	pop	{r7, pc}
 801a27a:	bf00      	nop
 801a27c:	080213e4 	.word	0x080213e4
 801a280:	08021848 	.word	0x08021848
 801a284:	08021430 	.word	0x08021430
 801a288:	2000453c 	.word	0x2000453c
 801a28c:	20004544 	.word	0x20004544

0801a290 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801a290:	b480      	push	{r7}
 801a292:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801a294:	4b05      	ldr	r3, [pc, #20]	; (801a2ac <tcp_trigger_input_pcb_close+0x1c>)
 801a296:	781b      	ldrb	r3, [r3, #0]
 801a298:	f043 0310 	orr.w	r3, r3, #16
 801a29c:	b2da      	uxtb	r2, r3
 801a29e:	4b03      	ldr	r3, [pc, #12]	; (801a2ac <tcp_trigger_input_pcb_close+0x1c>)
 801a2a0:	701a      	strb	r2, [r3, #0]
}
 801a2a2:	bf00      	nop
 801a2a4:	46bd      	mov	sp, r7
 801a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2aa:	4770      	bx	lr
 801a2ac:	20004555 	.word	0x20004555

0801a2b0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801a2b0:	b580      	push	{r7, lr}
 801a2b2:	b084      	sub	sp, #16
 801a2b4:	af00      	add	r7, sp, #0
 801a2b6:	60f8      	str	r0, [r7, #12]
 801a2b8:	60b9      	str	r1, [r7, #8]
 801a2ba:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d00a      	beq.n	801a2d8 <tcp_route+0x28>
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	7a1b      	ldrb	r3, [r3, #8]
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	d006      	beq.n	801a2d8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801a2ca:	68fb      	ldr	r3, [r7, #12]
 801a2cc:	7a1b      	ldrb	r3, [r3, #8]
 801a2ce:	4618      	mov	r0, r3
 801a2d0:	f7fb f888 	bl	80153e4 <netif_get_by_index>
 801a2d4:	4603      	mov	r3, r0
 801a2d6:	e003      	b.n	801a2e0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801a2d8:	6878      	ldr	r0, [r7, #4]
 801a2da:	f003 fb17 	bl	801d90c <ip4_route>
 801a2de:	4603      	mov	r3, r0
  }
}
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	3710      	adds	r7, #16
 801a2e4:	46bd      	mov	sp, r7
 801a2e6:	bd80      	pop	{r7, pc}

0801a2e8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801a2e8:	b590      	push	{r4, r7, lr}
 801a2ea:	b087      	sub	sp, #28
 801a2ec:	af00      	add	r7, sp, #0
 801a2ee:	60f8      	str	r0, [r7, #12]
 801a2f0:	60b9      	str	r1, [r7, #8]
 801a2f2:	603b      	str	r3, [r7, #0]
 801a2f4:	4613      	mov	r3, r2
 801a2f6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d105      	bne.n	801a30a <tcp_create_segment+0x22>
 801a2fe:	4b44      	ldr	r3, [pc, #272]	; (801a410 <tcp_create_segment+0x128>)
 801a300:	22a3      	movs	r2, #163	; 0xa3
 801a302:	4944      	ldr	r1, [pc, #272]	; (801a414 <tcp_create_segment+0x12c>)
 801a304:	4844      	ldr	r0, [pc, #272]	; (801a418 <tcp_create_segment+0x130>)
 801a306:	f004 fe3d 	bl	801ef84 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801a30a:	68bb      	ldr	r3, [r7, #8]
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d105      	bne.n	801a31c <tcp_create_segment+0x34>
 801a310:	4b3f      	ldr	r3, [pc, #252]	; (801a410 <tcp_create_segment+0x128>)
 801a312:	22a4      	movs	r2, #164	; 0xa4
 801a314:	4941      	ldr	r1, [pc, #260]	; (801a41c <tcp_create_segment+0x134>)
 801a316:	4840      	ldr	r0, [pc, #256]	; (801a418 <tcp_create_segment+0x130>)
 801a318:	f004 fe34 	bl	801ef84 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a31c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a320:	009b      	lsls	r3, r3, #2
 801a322:	b2db      	uxtb	r3, r3
 801a324:	f003 0304 	and.w	r3, r3, #4
 801a328:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a32a:	2003      	movs	r0, #3
 801a32c:	f7fa fcf2 	bl	8014d14 <memp_malloc>
 801a330:	6138      	str	r0, [r7, #16]
 801a332:	693b      	ldr	r3, [r7, #16]
 801a334:	2b00      	cmp	r3, #0
 801a336:	d104      	bne.n	801a342 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801a338:	68b8      	ldr	r0, [r7, #8]
 801a33a:	f7fb fbdd 	bl	8015af8 <pbuf_free>
    return NULL;
 801a33e:	2300      	movs	r3, #0
 801a340:	e061      	b.n	801a406 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801a342:	693b      	ldr	r3, [r7, #16]
 801a344:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a348:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801a34a:	693b      	ldr	r3, [r7, #16]
 801a34c:	2200      	movs	r2, #0
 801a34e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801a350:	693b      	ldr	r3, [r7, #16]
 801a352:	68ba      	ldr	r2, [r7, #8]
 801a354:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a356:	68bb      	ldr	r3, [r7, #8]
 801a358:	891a      	ldrh	r2, [r3, #8]
 801a35a:	7dfb      	ldrb	r3, [r7, #23]
 801a35c:	b29b      	uxth	r3, r3
 801a35e:	429a      	cmp	r2, r3
 801a360:	d205      	bcs.n	801a36e <tcp_create_segment+0x86>
 801a362:	4b2b      	ldr	r3, [pc, #172]	; (801a410 <tcp_create_segment+0x128>)
 801a364:	22b0      	movs	r2, #176	; 0xb0
 801a366:	492e      	ldr	r1, [pc, #184]	; (801a420 <tcp_create_segment+0x138>)
 801a368:	482b      	ldr	r0, [pc, #172]	; (801a418 <tcp_create_segment+0x130>)
 801a36a:	f004 fe0b 	bl	801ef84 <iprintf>
  seg->len = p->tot_len - optlen;
 801a36e:	68bb      	ldr	r3, [r7, #8]
 801a370:	891a      	ldrh	r2, [r3, #8]
 801a372:	7dfb      	ldrb	r3, [r7, #23]
 801a374:	b29b      	uxth	r3, r3
 801a376:	1ad3      	subs	r3, r2, r3
 801a378:	b29a      	uxth	r2, r3
 801a37a:	693b      	ldr	r3, [r7, #16]
 801a37c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801a37e:	2114      	movs	r1, #20
 801a380:	68b8      	ldr	r0, [r7, #8]
 801a382:	f7fb fb23 	bl	80159cc <pbuf_add_header>
 801a386:	4603      	mov	r3, r0
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d004      	beq.n	801a396 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801a38c:	6938      	ldr	r0, [r7, #16]
 801a38e:	f7fc ffe1 	bl	8017354 <tcp_seg_free>
    return NULL;
 801a392:	2300      	movs	r3, #0
 801a394:	e037      	b.n	801a406 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a396:	693b      	ldr	r3, [r7, #16]
 801a398:	685b      	ldr	r3, [r3, #4]
 801a39a:	685a      	ldr	r2, [r3, #4]
 801a39c:	693b      	ldr	r3, [r7, #16]
 801a39e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a3a0:	68fb      	ldr	r3, [r7, #12]
 801a3a2:	8ada      	ldrh	r2, [r3, #22]
 801a3a4:	693b      	ldr	r3, [r7, #16]
 801a3a6:	68dc      	ldr	r4, [r3, #12]
 801a3a8:	4610      	mov	r0, r2
 801a3aa:	f7f9 ffc7 	bl	801433c <lwip_htons>
 801a3ae:	4603      	mov	r3, r0
 801a3b0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a3b2:	68fb      	ldr	r3, [r7, #12]
 801a3b4:	8b1a      	ldrh	r2, [r3, #24]
 801a3b6:	693b      	ldr	r3, [r7, #16]
 801a3b8:	68dc      	ldr	r4, [r3, #12]
 801a3ba:	4610      	mov	r0, r2
 801a3bc:	f7f9 ffbe 	bl	801433c <lwip_htons>
 801a3c0:	4603      	mov	r3, r0
 801a3c2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a3c4:	693b      	ldr	r3, [r7, #16]
 801a3c6:	68dc      	ldr	r4, [r3, #12]
 801a3c8:	6838      	ldr	r0, [r7, #0]
 801a3ca:	f7f9 ffcc 	bl	8014366 <lwip_htonl>
 801a3ce:	4603      	mov	r3, r0
 801a3d0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a3d2:	7dfb      	ldrb	r3, [r7, #23]
 801a3d4:	089b      	lsrs	r3, r3, #2
 801a3d6:	b2db      	uxtb	r3, r3
 801a3d8:	b29b      	uxth	r3, r3
 801a3da:	3305      	adds	r3, #5
 801a3dc:	b29b      	uxth	r3, r3
 801a3de:	031b      	lsls	r3, r3, #12
 801a3e0:	b29a      	uxth	r2, r3
 801a3e2:	79fb      	ldrb	r3, [r7, #7]
 801a3e4:	b29b      	uxth	r3, r3
 801a3e6:	4313      	orrs	r3, r2
 801a3e8:	b29a      	uxth	r2, r3
 801a3ea:	693b      	ldr	r3, [r7, #16]
 801a3ec:	68dc      	ldr	r4, [r3, #12]
 801a3ee:	4610      	mov	r0, r2
 801a3f0:	f7f9 ffa4 	bl	801433c <lwip_htons>
 801a3f4:	4603      	mov	r3, r0
 801a3f6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a3f8:	693b      	ldr	r3, [r7, #16]
 801a3fa:	68db      	ldr	r3, [r3, #12]
 801a3fc:	2200      	movs	r2, #0
 801a3fe:	749a      	strb	r2, [r3, #18]
 801a400:	2200      	movs	r2, #0
 801a402:	74da      	strb	r2, [r3, #19]
  return seg;
 801a404:	693b      	ldr	r3, [r7, #16]
}
 801a406:	4618      	mov	r0, r3
 801a408:	371c      	adds	r7, #28
 801a40a:	46bd      	mov	sp, r7
 801a40c:	bd90      	pop	{r4, r7, pc}
 801a40e:	bf00      	nop
 801a410:	08021864 	.word	0x08021864
 801a414:	08021898 	.word	0x08021898
 801a418:	080218b8 	.word	0x080218b8
 801a41c:	080218e0 	.word	0x080218e0
 801a420:	08021904 	.word	0x08021904

0801a424 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801a424:	b580      	push	{r7, lr}
 801a426:	b086      	sub	sp, #24
 801a428:	af00      	add	r7, sp, #0
 801a42a:	607b      	str	r3, [r7, #4]
 801a42c:	4603      	mov	r3, r0
 801a42e:	73fb      	strb	r3, [r7, #15]
 801a430:	460b      	mov	r3, r1
 801a432:	81bb      	strh	r3, [r7, #12]
 801a434:	4613      	mov	r3, r2
 801a436:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801a438:	89bb      	ldrh	r3, [r7, #12]
 801a43a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d105      	bne.n	801a44e <tcp_pbuf_prealloc+0x2a>
 801a442:	4b30      	ldr	r3, [pc, #192]	; (801a504 <tcp_pbuf_prealloc+0xe0>)
 801a444:	22e8      	movs	r2, #232	; 0xe8
 801a446:	4930      	ldr	r1, [pc, #192]	; (801a508 <tcp_pbuf_prealloc+0xe4>)
 801a448:	4830      	ldr	r0, [pc, #192]	; (801a50c <tcp_pbuf_prealloc+0xe8>)
 801a44a:	f004 fd9b 	bl	801ef84 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801a44e:	6a3b      	ldr	r3, [r7, #32]
 801a450:	2b00      	cmp	r3, #0
 801a452:	d105      	bne.n	801a460 <tcp_pbuf_prealloc+0x3c>
 801a454:	4b2b      	ldr	r3, [pc, #172]	; (801a504 <tcp_pbuf_prealloc+0xe0>)
 801a456:	22e9      	movs	r2, #233	; 0xe9
 801a458:	492d      	ldr	r1, [pc, #180]	; (801a510 <tcp_pbuf_prealloc+0xec>)
 801a45a:	482c      	ldr	r0, [pc, #176]	; (801a50c <tcp_pbuf_prealloc+0xe8>)
 801a45c:	f004 fd92 	bl	801ef84 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801a460:	89ba      	ldrh	r2, [r7, #12]
 801a462:	897b      	ldrh	r3, [r7, #10]
 801a464:	429a      	cmp	r2, r3
 801a466:	d221      	bcs.n	801a4ac <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a468:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a46c:	f003 0302 	and.w	r3, r3, #2
 801a470:	2b00      	cmp	r3, #0
 801a472:	d111      	bne.n	801a498 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801a474:	6a3b      	ldr	r3, [r7, #32]
 801a476:	8b5b      	ldrh	r3, [r3, #26]
 801a478:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d115      	bne.n	801a4ac <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801a480:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a484:	2b00      	cmp	r3, #0
 801a486:	d007      	beq.n	801a498 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801a488:	6a3b      	ldr	r3, [r7, #32]
 801a48a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d103      	bne.n	801a498 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801a490:	6a3b      	ldr	r3, [r7, #32]
 801a492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801a494:	2b00      	cmp	r3, #0
 801a496:	d009      	beq.n	801a4ac <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801a498:	89bb      	ldrh	r3, [r7, #12]
 801a49a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801a49e:	f023 0203 	bic.w	r2, r3, #3
 801a4a2:	897b      	ldrh	r3, [r7, #10]
 801a4a4:	4293      	cmp	r3, r2
 801a4a6:	bf28      	it	cs
 801a4a8:	4613      	movcs	r3, r2
 801a4aa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801a4ac:	8af9      	ldrh	r1, [r7, #22]
 801a4ae:	7bfb      	ldrb	r3, [r7, #15]
 801a4b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a4b4:	4618      	mov	r0, r3
 801a4b6:	f7fb f83f 	bl	8015538 <pbuf_alloc>
 801a4ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a4bc:	693b      	ldr	r3, [r7, #16]
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d101      	bne.n	801a4c6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801a4c2:	2300      	movs	r3, #0
 801a4c4:	e019      	b.n	801a4fa <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801a4c6:	693b      	ldr	r3, [r7, #16]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d006      	beq.n	801a4dc <tcp_pbuf_prealloc+0xb8>
 801a4ce:	4b0d      	ldr	r3, [pc, #52]	; (801a504 <tcp_pbuf_prealloc+0xe0>)
 801a4d0:	f240 120b 	movw	r2, #267	; 0x10b
 801a4d4:	490f      	ldr	r1, [pc, #60]	; (801a514 <tcp_pbuf_prealloc+0xf0>)
 801a4d6:	480d      	ldr	r0, [pc, #52]	; (801a50c <tcp_pbuf_prealloc+0xe8>)
 801a4d8:	f004 fd54 	bl	801ef84 <iprintf>
  *oversize = p->len - length;
 801a4dc:	693b      	ldr	r3, [r7, #16]
 801a4de:	895a      	ldrh	r2, [r3, #10]
 801a4e0:	89bb      	ldrh	r3, [r7, #12]
 801a4e2:	1ad3      	subs	r3, r2, r3
 801a4e4:	b29a      	uxth	r2, r3
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801a4ea:	693b      	ldr	r3, [r7, #16]
 801a4ec:	89ba      	ldrh	r2, [r7, #12]
 801a4ee:	811a      	strh	r2, [r3, #8]
 801a4f0:	693b      	ldr	r3, [r7, #16]
 801a4f2:	891a      	ldrh	r2, [r3, #8]
 801a4f4:	693b      	ldr	r3, [r7, #16]
 801a4f6:	815a      	strh	r2, [r3, #10]
  return p;
 801a4f8:	693b      	ldr	r3, [r7, #16]
}
 801a4fa:	4618      	mov	r0, r3
 801a4fc:	3718      	adds	r7, #24
 801a4fe:	46bd      	mov	sp, r7
 801a500:	bd80      	pop	{r7, pc}
 801a502:	bf00      	nop
 801a504:	08021864 	.word	0x08021864
 801a508:	0802191c 	.word	0x0802191c
 801a50c:	080218b8 	.word	0x080218b8
 801a510:	08021940 	.word	0x08021940
 801a514:	08021960 	.word	0x08021960

0801a518 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801a518:	b580      	push	{r7, lr}
 801a51a:	b082      	sub	sp, #8
 801a51c:	af00      	add	r7, sp, #0
 801a51e:	6078      	str	r0, [r7, #4]
 801a520:	460b      	mov	r3, r1
 801a522:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	2b00      	cmp	r3, #0
 801a528:	d106      	bne.n	801a538 <tcp_write_checks+0x20>
 801a52a:	4b33      	ldr	r3, [pc, #204]	; (801a5f8 <tcp_write_checks+0xe0>)
 801a52c:	f240 1233 	movw	r2, #307	; 0x133
 801a530:	4932      	ldr	r1, [pc, #200]	; (801a5fc <tcp_write_checks+0xe4>)
 801a532:	4833      	ldr	r0, [pc, #204]	; (801a600 <tcp_write_checks+0xe8>)
 801a534:	f004 fd26 	bl	801ef84 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	7d1b      	ldrb	r3, [r3, #20]
 801a53c:	2b04      	cmp	r3, #4
 801a53e:	d00e      	beq.n	801a55e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801a544:	2b07      	cmp	r3, #7
 801a546:	d00a      	beq.n	801a55e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801a54c:	2b02      	cmp	r3, #2
 801a54e:	d006      	beq.n	801a55e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801a554:	2b03      	cmp	r3, #3
 801a556:	d002      	beq.n	801a55e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801a558:	f06f 030a 	mvn.w	r3, #10
 801a55c:	e048      	b.n	801a5f0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801a55e:	887b      	ldrh	r3, [r7, #2]
 801a560:	2b00      	cmp	r3, #0
 801a562:	d101      	bne.n	801a568 <tcp_write_checks+0x50>
    return ERR_OK;
 801a564:	2300      	movs	r3, #0
 801a566:	e043      	b.n	801a5f0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801a56e:	887a      	ldrh	r2, [r7, #2]
 801a570:	429a      	cmp	r2, r3
 801a572:	d909      	bls.n	801a588 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	8b5b      	ldrh	r3, [r3, #26]
 801a578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a57c:	b29a      	uxth	r2, r3
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a586:	e033      	b.n	801a5f0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a58e:	2b08      	cmp	r3, #8
 801a590:	d909      	bls.n	801a5a6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	8b5b      	ldrh	r3, [r3, #26]
 801a596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a59a:	b29a      	uxth	r2, r3
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a5a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a5a4:	e024      	b.n	801a5f0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	d00f      	beq.n	801a5d0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d11a      	bne.n	801a5ee <tcp_write_checks+0xd6>
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d116      	bne.n	801a5ee <tcp_write_checks+0xd6>
 801a5c0:	4b0d      	ldr	r3, [pc, #52]	; (801a5f8 <tcp_write_checks+0xe0>)
 801a5c2:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801a5c6:	490f      	ldr	r1, [pc, #60]	; (801a604 <tcp_write_checks+0xec>)
 801a5c8:	480d      	ldr	r0, [pc, #52]	; (801a600 <tcp_write_checks+0xe8>)
 801a5ca:	f004 fcdb 	bl	801ef84 <iprintf>
 801a5ce:	e00e      	b.n	801a5ee <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d103      	bne.n	801a5e0 <tcp_write_checks+0xc8>
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d006      	beq.n	801a5ee <tcp_write_checks+0xd6>
 801a5e0:	4b05      	ldr	r3, [pc, #20]	; (801a5f8 <tcp_write_checks+0xe0>)
 801a5e2:	f240 1259 	movw	r2, #345	; 0x159
 801a5e6:	4908      	ldr	r1, [pc, #32]	; (801a608 <tcp_write_checks+0xf0>)
 801a5e8:	4805      	ldr	r0, [pc, #20]	; (801a600 <tcp_write_checks+0xe8>)
 801a5ea:	f004 fccb 	bl	801ef84 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801a5ee:	2300      	movs	r3, #0
}
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	3708      	adds	r7, #8
 801a5f4:	46bd      	mov	sp, r7
 801a5f6:	bd80      	pop	{r7, pc}
 801a5f8:	08021864 	.word	0x08021864
 801a5fc:	08021974 	.word	0x08021974
 801a600:	080218b8 	.word	0x080218b8
 801a604:	08021994 	.word	0x08021994
 801a608:	080219d0 	.word	0x080219d0

0801a60c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801a60c:	b590      	push	{r4, r7, lr}
 801a60e:	b09b      	sub	sp, #108	; 0x6c
 801a610:	af04      	add	r7, sp, #16
 801a612:	60f8      	str	r0, [r7, #12]
 801a614:	60b9      	str	r1, [r7, #8]
 801a616:	4611      	mov	r1, r2
 801a618:	461a      	mov	r2, r3
 801a61a:	460b      	mov	r3, r1
 801a61c:	80fb      	strh	r3, [r7, #6]
 801a61e:	4613      	mov	r3, r2
 801a620:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801a622:	2300      	movs	r3, #0
 801a624:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801a626:	2300      	movs	r3, #0
 801a628:	653b      	str	r3, [r7, #80]	; 0x50
 801a62a:	2300      	movs	r3, #0
 801a62c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a62e:	2300      	movs	r3, #0
 801a630:	64bb      	str	r3, [r7, #72]	; 0x48
 801a632:	2300      	movs	r3, #0
 801a634:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801a636:	2300      	movs	r3, #0
 801a638:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801a63c:	2300      	movs	r3, #0
 801a63e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801a642:	2300      	movs	r3, #0
 801a644:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801a646:	2300      	movs	r3, #0
 801a648:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801a64a:	2300      	movs	r3, #0
 801a64c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801a64e:	68fb      	ldr	r3, [r7, #12]
 801a650:	2b00      	cmp	r3, #0
 801a652:	d109      	bne.n	801a668 <tcp_write+0x5c>
 801a654:	4ba5      	ldr	r3, [pc, #660]	; (801a8ec <tcp_write+0x2e0>)
 801a656:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801a65a:	49a5      	ldr	r1, [pc, #660]	; (801a8f0 <tcp_write+0x2e4>)
 801a65c:	48a5      	ldr	r0, [pc, #660]	; (801a8f4 <tcp_write+0x2e8>)
 801a65e:	f004 fc91 	bl	801ef84 <iprintf>
 801a662:	f06f 030f 	mvn.w	r3, #15
 801a666:	e32c      	b.n	801acc2 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801a66e:	085b      	lsrs	r3, r3, #1
 801a670:	b29a      	uxth	r2, r3
 801a672:	68fb      	ldr	r3, [r7, #12]
 801a674:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a676:	4293      	cmp	r3, r2
 801a678:	bf28      	it	cs
 801a67a:	4613      	movcs	r3, r2
 801a67c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801a67e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a680:	2b00      	cmp	r3, #0
 801a682:	d102      	bne.n	801a68a <tcp_write+0x7e>
 801a684:	68fb      	ldr	r3, [r7, #12]
 801a686:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a688:	e000      	b.n	801a68c <tcp_write+0x80>
 801a68a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a68c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801a68e:	68bb      	ldr	r3, [r7, #8]
 801a690:	2b00      	cmp	r3, #0
 801a692:	d109      	bne.n	801a6a8 <tcp_write+0x9c>
 801a694:	4b95      	ldr	r3, [pc, #596]	; (801a8ec <tcp_write+0x2e0>)
 801a696:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 801a69a:	4997      	ldr	r1, [pc, #604]	; (801a8f8 <tcp_write+0x2ec>)
 801a69c:	4895      	ldr	r0, [pc, #596]	; (801a8f4 <tcp_write+0x2e8>)
 801a69e:	f004 fc71 	bl	801ef84 <iprintf>
 801a6a2:	f06f 030f 	mvn.w	r3, #15
 801a6a6:	e30c      	b.n	801acc2 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801a6a8:	88fb      	ldrh	r3, [r7, #6]
 801a6aa:	4619      	mov	r1, r3
 801a6ac:	68f8      	ldr	r0, [r7, #12]
 801a6ae:	f7ff ff33 	bl	801a518 <tcp_write_checks>
 801a6b2:	4603      	mov	r3, r0
 801a6b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801a6b8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d002      	beq.n	801a6c6 <tcp_write+0xba>
    return err;
 801a6c0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801a6c4:	e2fd      	b.n	801acc2 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a6cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a6d0:	2300      	movs	r3, #0
 801a6d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801a6d6:	68fb      	ldr	r3, [r7, #12]
 801a6d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	f000 80f7 	beq.w	801a8ce <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a6e0:	68fb      	ldr	r3, [r7, #12]
 801a6e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a6e4:	653b      	str	r3, [r7, #80]	; 0x50
 801a6e6:	e002      	b.n	801a6ee <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801a6e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6ea:	681b      	ldr	r3, [r3, #0]
 801a6ec:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a6ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d1f8      	bne.n	801a6e8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801a6f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6f8:	7a9b      	ldrb	r3, [r3, #10]
 801a6fa:	009b      	lsls	r3, r3, #2
 801a6fc:	b29b      	uxth	r3, r3
 801a6fe:	f003 0304 	and.w	r3, r3, #4
 801a702:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801a704:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a708:	891b      	ldrh	r3, [r3, #8]
 801a70a:	4619      	mov	r1, r3
 801a70c:	8c3b      	ldrh	r3, [r7, #32]
 801a70e:	440b      	add	r3, r1
 801a710:	429a      	cmp	r2, r3
 801a712:	da06      	bge.n	801a722 <tcp_write+0x116>
 801a714:	4b75      	ldr	r3, [pc, #468]	; (801a8ec <tcp_write+0x2e0>)
 801a716:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801a71a:	4978      	ldr	r1, [pc, #480]	; (801a8fc <tcp_write+0x2f0>)
 801a71c:	4875      	ldr	r0, [pc, #468]	; (801a8f4 <tcp_write+0x2e8>)
 801a71e:	f004 fc31 	bl	801ef84 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801a722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a724:	891a      	ldrh	r2, [r3, #8]
 801a726:	8c3b      	ldrh	r3, [r7, #32]
 801a728:	4413      	add	r3, r2
 801a72a:	b29b      	uxth	r3, r3
 801a72c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a72e:	1ad3      	subs	r3, r2, r3
 801a730:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801a732:	68fb      	ldr	r3, [r7, #12]
 801a734:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801a738:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801a73a:	8a7b      	ldrh	r3, [r7, #18]
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d027      	beq.n	801a790 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801a740:	8a7b      	ldrh	r3, [r7, #18]
 801a742:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a744:	429a      	cmp	r2, r3
 801a746:	d206      	bcs.n	801a756 <tcp_write+0x14a>
 801a748:	4b68      	ldr	r3, [pc, #416]	; (801a8ec <tcp_write+0x2e0>)
 801a74a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801a74e:	496c      	ldr	r1, [pc, #432]	; (801a900 <tcp_write+0x2f4>)
 801a750:	4868      	ldr	r0, [pc, #416]	; (801a8f4 <tcp_write+0x2e8>)
 801a752:	f004 fc17 	bl	801ef84 <iprintf>
      seg = last_unsent;
 801a756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a758:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801a75a:	8a7b      	ldrh	r3, [r7, #18]
 801a75c:	88fa      	ldrh	r2, [r7, #6]
 801a75e:	429a      	cmp	r2, r3
 801a760:	d901      	bls.n	801a766 <tcp_write+0x15a>
 801a762:	8a7b      	ldrh	r3, [r7, #18]
 801a764:	e000      	b.n	801a768 <tcp_write+0x15c>
 801a766:	88fb      	ldrh	r3, [r7, #6]
 801a768:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a76a:	4293      	cmp	r3, r2
 801a76c:	bfa8      	it	ge
 801a76e:	4613      	movge	r3, r2
 801a770:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801a772:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a776:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a778:	4413      	add	r3, r2
 801a77a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801a77e:	8a7a      	ldrh	r2, [r7, #18]
 801a780:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a782:	1ad3      	subs	r3, r2, r3
 801a784:	b29b      	uxth	r3, r3
 801a786:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801a788:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a78a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a78c:	1ad3      	subs	r3, r2, r3
 801a78e:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801a790:	8a7b      	ldrh	r3, [r7, #18]
 801a792:	2b00      	cmp	r3, #0
 801a794:	d00b      	beq.n	801a7ae <tcp_write+0x1a2>
 801a796:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a79a:	88fb      	ldrh	r3, [r7, #6]
 801a79c:	429a      	cmp	r2, r3
 801a79e:	d006      	beq.n	801a7ae <tcp_write+0x1a2>
 801a7a0:	4b52      	ldr	r3, [pc, #328]	; (801a8ec <tcp_write+0x2e0>)
 801a7a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a7a6:	4957      	ldr	r1, [pc, #348]	; (801a904 <tcp_write+0x2f8>)
 801a7a8:	4852      	ldr	r0, [pc, #328]	; (801a8f4 <tcp_write+0x2e8>)
 801a7aa:	f004 fbeb 	bl	801ef84 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801a7ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a7b2:	88fb      	ldrh	r3, [r7, #6]
 801a7b4:	429a      	cmp	r2, r3
 801a7b6:	f080 8168 	bcs.w	801aa8a <tcp_write+0x47e>
 801a7ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	f000 8164 	beq.w	801aa8a <tcp_write+0x47e>
 801a7c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7c4:	891b      	ldrh	r3, [r3, #8]
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	f000 815f 	beq.w	801aa8a <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a7cc:	88fa      	ldrh	r2, [r7, #6]
 801a7ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a7d2:	1ad2      	subs	r2, r2, r3
 801a7d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a7d6:	4293      	cmp	r3, r2
 801a7d8:	bfa8      	it	ge
 801a7da:	4613      	movge	r3, r2
 801a7dc:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801a7de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7e0:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a7e2:	797b      	ldrb	r3, [r7, #5]
 801a7e4:	f003 0301 	and.w	r3, r3, #1
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d027      	beq.n	801a83c <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801a7ec:	f107 0012 	add.w	r0, r7, #18
 801a7f0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a7f2:	8bf9      	ldrh	r1, [r7, #30]
 801a7f4:	2301      	movs	r3, #1
 801a7f6:	9302      	str	r3, [sp, #8]
 801a7f8:	797b      	ldrb	r3, [r7, #5]
 801a7fa:	9301      	str	r3, [sp, #4]
 801a7fc:	68fb      	ldr	r3, [r7, #12]
 801a7fe:	9300      	str	r3, [sp, #0]
 801a800:	4603      	mov	r3, r0
 801a802:	2000      	movs	r0, #0
 801a804:	f7ff fe0e 	bl	801a424 <tcp_pbuf_prealloc>
 801a808:	6578      	str	r0, [r7, #84]	; 0x54
 801a80a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	f000 8226 	beq.w	801ac5e <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a814:	6858      	ldr	r0, [r3, #4]
 801a816:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a81a:	68ba      	ldr	r2, [r7, #8]
 801a81c:	4413      	add	r3, r2
 801a81e:	8bfa      	ldrh	r2, [r7, #30]
 801a820:	4619      	mov	r1, r3
 801a822:	f004 fb9c 	bl	801ef5e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801a826:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a828:	f7fb f9f4 	bl	8015c14 <pbuf_clen>
 801a82c:	4603      	mov	r3, r0
 801a82e:	461a      	mov	r2, r3
 801a830:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a834:	4413      	add	r3, r2
 801a836:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801a83a:	e041      	b.n	801a8c0 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801a83c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a83e:	685b      	ldr	r3, [r3, #4]
 801a840:	637b      	str	r3, [r7, #52]	; 0x34
 801a842:	e002      	b.n	801a84a <tcp_write+0x23e>
 801a844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	637b      	str	r3, [r7, #52]	; 0x34
 801a84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d1f8      	bne.n	801a844 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a854:	7b1b      	ldrb	r3, [r3, #12]
 801a856:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	d115      	bne.n	801a88a <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801a85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a860:	685b      	ldr	r3, [r3, #4]
 801a862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a864:	8952      	ldrh	r2, [r2, #10]
 801a866:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a868:	68ba      	ldr	r2, [r7, #8]
 801a86a:	429a      	cmp	r2, r3
 801a86c:	d10d      	bne.n	801a88a <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a86e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a872:	2b00      	cmp	r3, #0
 801a874:	d006      	beq.n	801a884 <tcp_write+0x278>
 801a876:	4b1d      	ldr	r3, [pc, #116]	; (801a8ec <tcp_write+0x2e0>)
 801a878:	f240 2231 	movw	r2, #561	; 0x231
 801a87c:	4922      	ldr	r1, [pc, #136]	; (801a908 <tcp_write+0x2fc>)
 801a87e:	481d      	ldr	r0, [pc, #116]	; (801a8f4 <tcp_write+0x2e8>)
 801a880:	f004 fb80 	bl	801ef84 <iprintf>
          extendlen = seglen;
 801a884:	8bfb      	ldrh	r3, [r7, #30]
 801a886:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801a888:	e01a      	b.n	801a8c0 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801a88a:	8bfb      	ldrh	r3, [r7, #30]
 801a88c:	2201      	movs	r2, #1
 801a88e:	4619      	mov	r1, r3
 801a890:	2000      	movs	r0, #0
 801a892:	f7fa fe51 	bl	8015538 <pbuf_alloc>
 801a896:	6578      	str	r0, [r7, #84]	; 0x54
 801a898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	f000 81e1 	beq.w	801ac62 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801a8a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a8a4:	68ba      	ldr	r2, [r7, #8]
 801a8a6:	441a      	add	r2, r3
 801a8a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a8aa:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801a8ac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a8ae:	f7fb f9b1 	bl	8015c14 <pbuf_clen>
 801a8b2:	4603      	mov	r3, r0
 801a8b4:	461a      	mov	r2, r3
 801a8b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a8ba:	4413      	add	r3, r2
 801a8bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801a8c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a8c4:	8bfb      	ldrh	r3, [r7, #30]
 801a8c6:	4413      	add	r3, r2
 801a8c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801a8cc:	e0dd      	b.n	801aa8a <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	f000 80d8 	beq.w	801aa8a <tcp_write+0x47e>
 801a8da:	4b04      	ldr	r3, [pc, #16]	; (801a8ec <tcp_write+0x2e0>)
 801a8dc:	f240 224b 	movw	r2, #587	; 0x24b
 801a8e0:	490a      	ldr	r1, [pc, #40]	; (801a90c <tcp_write+0x300>)
 801a8e2:	4804      	ldr	r0, [pc, #16]	; (801a8f4 <tcp_write+0x2e8>)
 801a8e4:	f004 fb4e 	bl	801ef84 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801a8e8:	e0cf      	b.n	801aa8a <tcp_write+0x47e>
 801a8ea:	bf00      	nop
 801a8ec:	08021864 	.word	0x08021864
 801a8f0:	08021a04 	.word	0x08021a04
 801a8f4:	080218b8 	.word	0x080218b8
 801a8f8:	08021a1c 	.word	0x08021a1c
 801a8fc:	08021a50 	.word	0x08021a50
 801a900:	08021a68 	.word	0x08021a68
 801a904:	08021a88 	.word	0x08021a88
 801a908:	08021aa8 	.word	0x08021aa8
 801a90c:	08021ad4 	.word	0x08021ad4
    struct pbuf *p;
    u16_t left = len - pos;
 801a910:	88fa      	ldrh	r2, [r7, #6]
 801a912:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a916:	1ad3      	subs	r3, r2, r3
 801a918:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801a91a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a91e:	b29b      	uxth	r3, r3
 801a920:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a922:	1ad3      	subs	r3, r2, r3
 801a924:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801a926:	8b7a      	ldrh	r2, [r7, #26]
 801a928:	8bbb      	ldrh	r3, [r7, #28]
 801a92a:	4293      	cmp	r3, r2
 801a92c:	bf28      	it	cs
 801a92e:	4613      	movcs	r3, r2
 801a930:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a932:	797b      	ldrb	r3, [r7, #5]
 801a934:	f003 0301 	and.w	r3, r3, #1
 801a938:	2b00      	cmp	r3, #0
 801a93a:	d036      	beq.n	801a9aa <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801a93c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a940:	b29a      	uxth	r2, r3
 801a942:	8b3b      	ldrh	r3, [r7, #24]
 801a944:	4413      	add	r3, r2
 801a946:	b299      	uxth	r1, r3
 801a948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	bf0c      	ite	eq
 801a94e:	2301      	moveq	r3, #1
 801a950:	2300      	movne	r3, #0
 801a952:	b2db      	uxtb	r3, r3
 801a954:	f107 0012 	add.w	r0, r7, #18
 801a958:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a95a:	9302      	str	r3, [sp, #8]
 801a95c:	797b      	ldrb	r3, [r7, #5]
 801a95e:	9301      	str	r3, [sp, #4]
 801a960:	68fb      	ldr	r3, [r7, #12]
 801a962:	9300      	str	r3, [sp, #0]
 801a964:	4603      	mov	r3, r0
 801a966:	2036      	movs	r0, #54	; 0x36
 801a968:	f7ff fd5c 	bl	801a424 <tcp_pbuf_prealloc>
 801a96c:	6338      	str	r0, [r7, #48]	; 0x30
 801a96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a970:	2b00      	cmp	r3, #0
 801a972:	f000 8178 	beq.w	801ac66 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a978:	895b      	ldrh	r3, [r3, #10]
 801a97a:	8b3a      	ldrh	r2, [r7, #24]
 801a97c:	429a      	cmp	r2, r3
 801a97e:	d906      	bls.n	801a98e <tcp_write+0x382>
 801a980:	4b8c      	ldr	r3, [pc, #560]	; (801abb4 <tcp_write+0x5a8>)
 801a982:	f240 2267 	movw	r2, #615	; 0x267
 801a986:	498c      	ldr	r1, [pc, #560]	; (801abb8 <tcp_write+0x5ac>)
 801a988:	488c      	ldr	r0, [pc, #560]	; (801abbc <tcp_write+0x5b0>)
 801a98a:	f004 fafb 	bl	801ef84 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801a98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a990:	685a      	ldr	r2, [r3, #4]
 801a992:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a996:	18d0      	adds	r0, r2, r3
 801a998:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a99c:	68ba      	ldr	r2, [r7, #8]
 801a99e:	4413      	add	r3, r2
 801a9a0:	8b3a      	ldrh	r2, [r7, #24]
 801a9a2:	4619      	mov	r1, r3
 801a9a4:	f004 fadb 	bl	801ef5e <memcpy>
 801a9a8:	e02f      	b.n	801aa0a <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a9aa:	8a7b      	ldrh	r3, [r7, #18]
 801a9ac:	2b00      	cmp	r3, #0
 801a9ae:	d006      	beq.n	801a9be <tcp_write+0x3b2>
 801a9b0:	4b80      	ldr	r3, [pc, #512]	; (801abb4 <tcp_write+0x5a8>)
 801a9b2:	f240 2271 	movw	r2, #625	; 0x271
 801a9b6:	4982      	ldr	r1, [pc, #520]	; (801abc0 <tcp_write+0x5b4>)
 801a9b8:	4880      	ldr	r0, [pc, #512]	; (801abbc <tcp_write+0x5b0>)
 801a9ba:	f004 fae3 	bl	801ef84 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801a9be:	8b3b      	ldrh	r3, [r7, #24]
 801a9c0:	2201      	movs	r2, #1
 801a9c2:	4619      	mov	r1, r3
 801a9c4:	2036      	movs	r0, #54	; 0x36
 801a9c6:	f7fa fdb7 	bl	8015538 <pbuf_alloc>
 801a9ca:	6178      	str	r0, [r7, #20]
 801a9cc:	697b      	ldr	r3, [r7, #20]
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	f000 814b 	beq.w	801ac6a <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801a9d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a9d8:	68ba      	ldr	r2, [r7, #8]
 801a9da:	441a      	add	r2, r3
 801a9dc:	697b      	ldr	r3, [r7, #20]
 801a9de:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a9e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a9e4:	b29b      	uxth	r3, r3
 801a9e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a9ea:	4619      	mov	r1, r3
 801a9ec:	2036      	movs	r0, #54	; 0x36
 801a9ee:	f7fa fda3 	bl	8015538 <pbuf_alloc>
 801a9f2:	6338      	str	r0, [r7, #48]	; 0x30
 801a9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d103      	bne.n	801aa02 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801a9fa:	6978      	ldr	r0, [r7, #20]
 801a9fc:	f7fb f87c 	bl	8015af8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801aa00:	e136      	b.n	801ac70 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801aa02:	6979      	ldr	r1, [r7, #20]
 801aa04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aa06:	f7fb f945 	bl	8015c94 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801aa0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aa0c:	f7fb f902 	bl	8015c14 <pbuf_clen>
 801aa10:	4603      	mov	r3, r0
 801aa12:	461a      	mov	r2, r3
 801aa14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801aa18:	4413      	add	r3, r2
 801aa1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801aa1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801aa22:	2b09      	cmp	r3, #9
 801aa24:	d903      	bls.n	801aa2e <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801aa26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aa28:	f7fb f866 	bl	8015af8 <pbuf_free>
      goto memerr;
 801aa2c:	e120      	b.n	801ac70 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801aa32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801aa36:	441a      	add	r2, r3
 801aa38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aa3c:	9300      	str	r3, [sp, #0]
 801aa3e:	4613      	mov	r3, r2
 801aa40:	2200      	movs	r2, #0
 801aa42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801aa44:	68f8      	ldr	r0, [r7, #12]
 801aa46:	f7ff fc4f 	bl	801a2e8 <tcp_create_segment>
 801aa4a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801aa4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	f000 810d 	beq.w	801ac6e <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801aa54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	d102      	bne.n	801aa60 <tcp_write+0x454>
      queue = seg;
 801aa5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aa5c:	647b      	str	r3, [r7, #68]	; 0x44
 801aa5e:	e00c      	b.n	801aa7a <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801aa60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	d106      	bne.n	801aa74 <tcp_write+0x468>
 801aa66:	4b53      	ldr	r3, [pc, #332]	; (801abb4 <tcp_write+0x5a8>)
 801aa68:	f240 22ab 	movw	r2, #683	; 0x2ab
 801aa6c:	4955      	ldr	r1, [pc, #340]	; (801abc4 <tcp_write+0x5b8>)
 801aa6e:	4853      	ldr	r0, [pc, #332]	; (801abbc <tcp_write+0x5b0>)
 801aa70:	f004 fa88 	bl	801ef84 <iprintf>
      prev_seg->next = seg;
 801aa74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801aa76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801aa78:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801aa7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aa7c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801aa7e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801aa82:	8b3b      	ldrh	r3, [r7, #24]
 801aa84:	4413      	add	r3, r2
 801aa86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801aa8a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801aa8e:	88fb      	ldrh	r3, [r7, #6]
 801aa90:	429a      	cmp	r2, r3
 801aa92:	f4ff af3d 	bcc.w	801a910 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801aa96:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d02c      	beq.n	801aaf6 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801aa9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aa9e:	685b      	ldr	r3, [r3, #4]
 801aaa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aaa2:	e01e      	b.n	801aae2 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 801aaa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaa6:	891a      	ldrh	r2, [r3, #8]
 801aaa8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aaaa:	4413      	add	r3, r2
 801aaac:	b29a      	uxth	r2, r3
 801aaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aab0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801aab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aab4:	681b      	ldr	r3, [r3, #0]
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d110      	bne.n	801aadc <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801aaba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aabc:	685b      	ldr	r3, [r3, #4]
 801aabe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801aac0:	8952      	ldrh	r2, [r2, #10]
 801aac2:	4413      	add	r3, r2
 801aac4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801aac6:	68b9      	ldr	r1, [r7, #8]
 801aac8:	4618      	mov	r0, r3
 801aaca:	f004 fa48 	bl	801ef5e <memcpy>
        p->len += oversize_used;
 801aace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aad0:	895a      	ldrh	r2, [r3, #10]
 801aad2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aad4:	4413      	add	r3, r2
 801aad6:	b29a      	uxth	r2, r3
 801aad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aada:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801aadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aade:	681b      	ldr	r3, [r3, #0]
 801aae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	d1dd      	bne.n	801aaa4 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 801aae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aaea:	891a      	ldrh	r2, [r3, #8]
 801aaec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aaee:	4413      	add	r3, r2
 801aaf0:	b29a      	uxth	r2, r3
 801aaf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aaf4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801aaf6:	8a7a      	ldrh	r2, [r7, #18]
 801aaf8:	68fb      	ldr	r3, [r7, #12]
 801aafa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801aafe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	d018      	beq.n	801ab36 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801ab04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d106      	bne.n	801ab18 <tcp_write+0x50c>
 801ab0a:	4b2a      	ldr	r3, [pc, #168]	; (801abb4 <tcp_write+0x5a8>)
 801ab0c:	f240 22e1 	movw	r2, #737	; 0x2e1
 801ab10:	492d      	ldr	r1, [pc, #180]	; (801abc8 <tcp_write+0x5bc>)
 801ab12:	482a      	ldr	r0, [pc, #168]	; (801abbc <tcp_write+0x5b0>)
 801ab14:	f004 fa36 	bl	801ef84 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801ab18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab1a:	685b      	ldr	r3, [r3, #4]
 801ab1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801ab1e:	4618      	mov	r0, r3
 801ab20:	f7fb f8b8 	bl	8015c94 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801ab24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab26:	891a      	ldrh	r2, [r3, #8]
 801ab28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ab2a:	891b      	ldrh	r3, [r3, #8]
 801ab2c:	4413      	add	r3, r2
 801ab2e:	b29a      	uxth	r2, r3
 801ab30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab32:	811a      	strh	r2, [r3, #8]
 801ab34:	e037      	b.n	801aba6 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 801ab36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d034      	beq.n	801aba6 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801ab3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	d003      	beq.n	801ab4a <tcp_write+0x53e>
 801ab42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab44:	685b      	ldr	r3, [r3, #4]
 801ab46:	2b00      	cmp	r3, #0
 801ab48:	d106      	bne.n	801ab58 <tcp_write+0x54c>
 801ab4a:	4b1a      	ldr	r3, [pc, #104]	; (801abb4 <tcp_write+0x5a8>)
 801ab4c:	f240 22e7 	movw	r2, #743	; 0x2e7
 801ab50:	491e      	ldr	r1, [pc, #120]	; (801abcc <tcp_write+0x5c0>)
 801ab52:	481a      	ldr	r0, [pc, #104]	; (801abbc <tcp_write+0x5b0>)
 801ab54:	f004 fa16 	bl	801ef84 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ab58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab5a:	685b      	ldr	r3, [r3, #4]
 801ab5c:	62bb      	str	r3, [r7, #40]	; 0x28
 801ab5e:	e009      	b.n	801ab74 <tcp_write+0x568>
      p->tot_len += extendlen;
 801ab60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab62:	891a      	ldrh	r2, [r3, #8]
 801ab64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ab66:	4413      	add	r3, r2
 801ab68:	b29a      	uxth	r2, r3
 801ab6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab6c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ab6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	62bb      	str	r3, [r7, #40]	; 0x28
 801ab74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d1f1      	bne.n	801ab60 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 801ab7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab7e:	891a      	ldrh	r2, [r3, #8]
 801ab80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ab82:	4413      	add	r3, r2
 801ab84:	b29a      	uxth	r2, r3
 801ab86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab88:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801ab8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab8c:	895a      	ldrh	r2, [r3, #10]
 801ab8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ab90:	4413      	add	r3, r2
 801ab92:	b29a      	uxth	r2, r3
 801ab94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab96:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801ab98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab9a:	891a      	ldrh	r2, [r3, #8]
 801ab9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ab9e:	4413      	add	r3, r2
 801aba0:	b29a      	uxth	r2, r3
 801aba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aba4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801aba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d111      	bne.n	801abd0 <tcp_write+0x5c4>
    pcb->unsent = queue;
 801abac:	68fb      	ldr	r3, [r7, #12]
 801abae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801abb0:	66da      	str	r2, [r3, #108]	; 0x6c
 801abb2:	e010      	b.n	801abd6 <tcp_write+0x5ca>
 801abb4:	08021864 	.word	0x08021864
 801abb8:	08021b04 	.word	0x08021b04
 801abbc:	080218b8 	.word	0x080218b8
 801abc0:	08021b44 	.word	0x08021b44
 801abc4:	08021b54 	.word	0x08021b54
 801abc8:	08021b68 	.word	0x08021b68
 801abcc:	08021ba0 	.word	0x08021ba0
  } else {
    last_unsent->next = queue;
 801abd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801abd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801abd4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801abd6:	68fb      	ldr	r3, [r7, #12]
 801abd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801abda:	88fb      	ldrh	r3, [r7, #6]
 801abdc:	441a      	add	r2, r3
 801abde:	68fb      	ldr	r3, [r7, #12]
 801abe0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801abe8:	88fb      	ldrh	r3, [r7, #6]
 801abea:	1ad3      	subs	r3, r2, r3
 801abec:	b29a      	uxth	r2, r3
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801abf4:	68fb      	ldr	r3, [r7, #12]
 801abf6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801abfa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801abfe:	68fb      	ldr	r3, [r7, #12]
 801ac00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	d00e      	beq.n	801ac26 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	d10a      	bne.n	801ac26 <tcp_write+0x61a>
 801ac10:	68fb      	ldr	r3, [r7, #12]
 801ac12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d106      	bne.n	801ac26 <tcp_write+0x61a>
 801ac18:	4b2c      	ldr	r3, [pc, #176]	; (801accc <tcp_write+0x6c0>)
 801ac1a:	f240 3213 	movw	r2, #787	; 0x313
 801ac1e:	492c      	ldr	r1, [pc, #176]	; (801acd0 <tcp_write+0x6c4>)
 801ac20:	482c      	ldr	r0, [pc, #176]	; (801acd4 <tcp_write+0x6c8>)
 801ac22:	f004 f9af 	bl	801ef84 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801ac26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	d016      	beq.n	801ac5a <tcp_write+0x64e>
 801ac2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ac2e:	68db      	ldr	r3, [r3, #12]
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	d012      	beq.n	801ac5a <tcp_write+0x64e>
 801ac34:	797b      	ldrb	r3, [r7, #5]
 801ac36:	f003 0302 	and.w	r3, r3, #2
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d10d      	bne.n	801ac5a <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801ac3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ac40:	68db      	ldr	r3, [r3, #12]
 801ac42:	899b      	ldrh	r3, [r3, #12]
 801ac44:	b29c      	uxth	r4, r3
 801ac46:	2008      	movs	r0, #8
 801ac48:	f7f9 fb78 	bl	801433c <lwip_htons>
 801ac4c:	4603      	mov	r3, r0
 801ac4e:	461a      	mov	r2, r3
 801ac50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ac52:	68db      	ldr	r3, [r3, #12]
 801ac54:	4322      	orrs	r2, r4
 801ac56:	b292      	uxth	r2, r2
 801ac58:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801ac5a:	2300      	movs	r3, #0
 801ac5c:	e031      	b.n	801acc2 <tcp_write+0x6b6>
          goto memerr;
 801ac5e:	bf00      	nop
 801ac60:	e006      	b.n	801ac70 <tcp_write+0x664>
            goto memerr;
 801ac62:	bf00      	nop
 801ac64:	e004      	b.n	801ac70 <tcp_write+0x664>
        goto memerr;
 801ac66:	bf00      	nop
 801ac68:	e002      	b.n	801ac70 <tcp_write+0x664>
        goto memerr;
 801ac6a:	bf00      	nop
 801ac6c:	e000      	b.n	801ac70 <tcp_write+0x664>
      goto memerr;
 801ac6e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	8b5b      	ldrh	r3, [r3, #26]
 801ac74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ac78:	b29a      	uxth	r2, r3
 801ac7a:	68fb      	ldr	r3, [r7, #12]
 801ac7c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801ac7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	d002      	beq.n	801ac8a <tcp_write+0x67e>
    pbuf_free(concat_p);
 801ac84:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ac86:	f7fa ff37 	bl	8015af8 <pbuf_free>
  }
  if (queue != NULL) {
 801ac8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d002      	beq.n	801ac96 <tcp_write+0x68a>
    tcp_segs_free(queue);
 801ac90:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801ac92:	f7fc fb4b 	bl	801732c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801ac96:	68fb      	ldr	r3, [r7, #12]
 801ac98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d00e      	beq.n	801acbe <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801aca0:	68fb      	ldr	r3, [r7, #12]
 801aca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	d10a      	bne.n	801acbe <tcp_write+0x6b2>
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801acac:	2b00      	cmp	r3, #0
 801acae:	d106      	bne.n	801acbe <tcp_write+0x6b2>
 801acb0:	4b06      	ldr	r3, [pc, #24]	; (801accc <tcp_write+0x6c0>)
 801acb2:	f44f 724a 	mov.w	r2, #808	; 0x328
 801acb6:	4906      	ldr	r1, [pc, #24]	; (801acd0 <tcp_write+0x6c4>)
 801acb8:	4806      	ldr	r0, [pc, #24]	; (801acd4 <tcp_write+0x6c8>)
 801acba:	f004 f963 	bl	801ef84 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801acbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801acc2:	4618      	mov	r0, r3
 801acc4:	375c      	adds	r7, #92	; 0x5c
 801acc6:	46bd      	mov	sp, r7
 801acc8:	bd90      	pop	{r4, r7, pc}
 801acca:	bf00      	nop
 801accc:	08021864 	.word	0x08021864
 801acd0:	08021bd8 	.word	0x08021bd8
 801acd4:	080218b8 	.word	0x080218b8

0801acd8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801acd8:	b590      	push	{r4, r7, lr}
 801acda:	b08b      	sub	sp, #44	; 0x2c
 801acdc:	af02      	add	r7, sp, #8
 801acde:	6078      	str	r0, [r7, #4]
 801ace0:	460b      	mov	r3, r1
 801ace2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801ace4:	2300      	movs	r3, #0
 801ace6:	61fb      	str	r3, [r7, #28]
 801ace8:	2300      	movs	r3, #0
 801acea:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801acec:	2300      	movs	r3, #0
 801acee:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d106      	bne.n	801ad04 <tcp_split_unsent_seg+0x2c>
 801acf6:	4b95      	ldr	r3, [pc, #596]	; (801af4c <tcp_split_unsent_seg+0x274>)
 801acf8:	f240 324b 	movw	r2, #843	; 0x34b
 801acfc:	4994      	ldr	r1, [pc, #592]	; (801af50 <tcp_split_unsent_seg+0x278>)
 801acfe:	4895      	ldr	r0, [pc, #596]	; (801af54 <tcp_split_unsent_seg+0x27c>)
 801ad00:	f004 f940 	bl	801ef84 <iprintf>

  useg = pcb->unsent;
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ad08:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801ad0a:	697b      	ldr	r3, [r7, #20]
 801ad0c:	2b00      	cmp	r3, #0
 801ad0e:	d102      	bne.n	801ad16 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801ad10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ad14:	e116      	b.n	801af44 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801ad16:	887b      	ldrh	r3, [r7, #2]
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d109      	bne.n	801ad30 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801ad1c:	4b8b      	ldr	r3, [pc, #556]	; (801af4c <tcp_split_unsent_seg+0x274>)
 801ad1e:	f240 3253 	movw	r2, #851	; 0x353
 801ad22:	498d      	ldr	r1, [pc, #564]	; (801af58 <tcp_split_unsent_seg+0x280>)
 801ad24:	488b      	ldr	r0, [pc, #556]	; (801af54 <tcp_split_unsent_seg+0x27c>)
 801ad26:	f004 f92d 	bl	801ef84 <iprintf>
    return ERR_VAL;
 801ad2a:	f06f 0305 	mvn.w	r3, #5
 801ad2e:	e109      	b.n	801af44 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801ad30:	697b      	ldr	r3, [r7, #20]
 801ad32:	891b      	ldrh	r3, [r3, #8]
 801ad34:	887a      	ldrh	r2, [r7, #2]
 801ad36:	429a      	cmp	r2, r3
 801ad38:	d301      	bcc.n	801ad3e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801ad3a:	2300      	movs	r3, #0
 801ad3c:	e102      	b.n	801af44 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ad42:	887a      	ldrh	r2, [r7, #2]
 801ad44:	429a      	cmp	r2, r3
 801ad46:	d906      	bls.n	801ad56 <tcp_split_unsent_seg+0x7e>
 801ad48:	4b80      	ldr	r3, [pc, #512]	; (801af4c <tcp_split_unsent_seg+0x274>)
 801ad4a:	f240 325b 	movw	r2, #859	; 0x35b
 801ad4e:	4983      	ldr	r1, [pc, #524]	; (801af5c <tcp_split_unsent_seg+0x284>)
 801ad50:	4880      	ldr	r0, [pc, #512]	; (801af54 <tcp_split_unsent_seg+0x27c>)
 801ad52:	f004 f917 	bl	801ef84 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801ad56:	697b      	ldr	r3, [r7, #20]
 801ad58:	891b      	ldrh	r3, [r3, #8]
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d106      	bne.n	801ad6c <tcp_split_unsent_seg+0x94>
 801ad5e:	4b7b      	ldr	r3, [pc, #492]	; (801af4c <tcp_split_unsent_seg+0x274>)
 801ad60:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801ad64:	497e      	ldr	r1, [pc, #504]	; (801af60 <tcp_split_unsent_seg+0x288>)
 801ad66:	487b      	ldr	r0, [pc, #492]	; (801af54 <tcp_split_unsent_seg+0x27c>)
 801ad68:	f004 f90c 	bl	801ef84 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801ad6c:	697b      	ldr	r3, [r7, #20]
 801ad6e:	7a9b      	ldrb	r3, [r3, #10]
 801ad70:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801ad72:	7bfb      	ldrb	r3, [r7, #15]
 801ad74:	009b      	lsls	r3, r3, #2
 801ad76:	b2db      	uxtb	r3, r3
 801ad78:	f003 0304 	and.w	r3, r3, #4
 801ad7c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801ad7e:	697b      	ldr	r3, [r7, #20]
 801ad80:	891a      	ldrh	r2, [r3, #8]
 801ad82:	887b      	ldrh	r3, [r7, #2]
 801ad84:	1ad3      	subs	r3, r2, r3
 801ad86:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801ad88:	7bbb      	ldrb	r3, [r7, #14]
 801ad8a:	b29a      	uxth	r2, r3
 801ad8c:	89bb      	ldrh	r3, [r7, #12]
 801ad8e:	4413      	add	r3, r2
 801ad90:	b29b      	uxth	r3, r3
 801ad92:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ad96:	4619      	mov	r1, r3
 801ad98:	2036      	movs	r0, #54	; 0x36
 801ad9a:	f7fa fbcd 	bl	8015538 <pbuf_alloc>
 801ad9e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ada0:	693b      	ldr	r3, [r7, #16]
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	f000 80b7 	beq.w	801af16 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801ada8:	697b      	ldr	r3, [r7, #20]
 801adaa:	685b      	ldr	r3, [r3, #4]
 801adac:	891a      	ldrh	r2, [r3, #8]
 801adae:	697b      	ldr	r3, [r7, #20]
 801adb0:	891b      	ldrh	r3, [r3, #8]
 801adb2:	1ad3      	subs	r3, r2, r3
 801adb4:	b29a      	uxth	r2, r3
 801adb6:	887b      	ldrh	r3, [r7, #2]
 801adb8:	4413      	add	r3, r2
 801adba:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801adbc:	697b      	ldr	r3, [r7, #20]
 801adbe:	6858      	ldr	r0, [r3, #4]
 801adc0:	693b      	ldr	r3, [r7, #16]
 801adc2:	685a      	ldr	r2, [r3, #4]
 801adc4:	7bbb      	ldrb	r3, [r7, #14]
 801adc6:	18d1      	adds	r1, r2, r3
 801adc8:	897b      	ldrh	r3, [r7, #10]
 801adca:	89ba      	ldrh	r2, [r7, #12]
 801adcc:	f7fb f88a 	bl	8015ee4 <pbuf_copy_partial>
 801add0:	4603      	mov	r3, r0
 801add2:	461a      	mov	r2, r3
 801add4:	89bb      	ldrh	r3, [r7, #12]
 801add6:	4293      	cmp	r3, r2
 801add8:	f040 809f 	bne.w	801af1a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801addc:	697b      	ldr	r3, [r7, #20]
 801adde:	68db      	ldr	r3, [r3, #12]
 801ade0:	899b      	ldrh	r3, [r3, #12]
 801ade2:	b29b      	uxth	r3, r3
 801ade4:	4618      	mov	r0, r3
 801ade6:	f7f9 faa9 	bl	801433c <lwip_htons>
 801adea:	4603      	mov	r3, r0
 801adec:	b2db      	uxtb	r3, r3
 801adee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801adf2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801adf4:	2300      	movs	r3, #0
 801adf6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801adf8:	7efb      	ldrb	r3, [r7, #27]
 801adfa:	f003 0308 	and.w	r3, r3, #8
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d007      	beq.n	801ae12 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801ae02:	7efb      	ldrb	r3, [r7, #27]
 801ae04:	f023 0308 	bic.w	r3, r3, #8
 801ae08:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801ae0a:	7ebb      	ldrb	r3, [r7, #26]
 801ae0c:	f043 0308 	orr.w	r3, r3, #8
 801ae10:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801ae12:	7efb      	ldrb	r3, [r7, #27]
 801ae14:	f003 0301 	and.w	r3, r3, #1
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d007      	beq.n	801ae2c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801ae1c:	7efb      	ldrb	r3, [r7, #27]
 801ae1e:	f023 0301 	bic.w	r3, r3, #1
 801ae22:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801ae24:	7ebb      	ldrb	r3, [r7, #26]
 801ae26:	f043 0301 	orr.w	r3, r3, #1
 801ae2a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801ae2c:	697b      	ldr	r3, [r7, #20]
 801ae2e:	68db      	ldr	r3, [r3, #12]
 801ae30:	685b      	ldr	r3, [r3, #4]
 801ae32:	4618      	mov	r0, r3
 801ae34:	f7f9 fa97 	bl	8014366 <lwip_htonl>
 801ae38:	4602      	mov	r2, r0
 801ae3a:	887b      	ldrh	r3, [r7, #2]
 801ae3c:	18d1      	adds	r1, r2, r3
 801ae3e:	7eba      	ldrb	r2, [r7, #26]
 801ae40:	7bfb      	ldrb	r3, [r7, #15]
 801ae42:	9300      	str	r3, [sp, #0]
 801ae44:	460b      	mov	r3, r1
 801ae46:	6939      	ldr	r1, [r7, #16]
 801ae48:	6878      	ldr	r0, [r7, #4]
 801ae4a:	f7ff fa4d 	bl	801a2e8 <tcp_create_segment>
 801ae4e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801ae50:	69fb      	ldr	r3, [r7, #28]
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	d063      	beq.n	801af1e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801ae56:	697b      	ldr	r3, [r7, #20]
 801ae58:	685b      	ldr	r3, [r3, #4]
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	f7fa feda 	bl	8015c14 <pbuf_clen>
 801ae60:	4603      	mov	r3, r0
 801ae62:	461a      	mov	r2, r3
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ae6a:	1a9b      	subs	r3, r3, r2
 801ae6c:	b29a      	uxth	r2, r3
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801ae74:	697b      	ldr	r3, [r7, #20]
 801ae76:	6858      	ldr	r0, [r3, #4]
 801ae78:	697b      	ldr	r3, [r7, #20]
 801ae7a:	685b      	ldr	r3, [r3, #4]
 801ae7c:	891a      	ldrh	r2, [r3, #8]
 801ae7e:	89bb      	ldrh	r3, [r7, #12]
 801ae80:	1ad3      	subs	r3, r2, r3
 801ae82:	b29b      	uxth	r3, r3
 801ae84:	4619      	mov	r1, r3
 801ae86:	f7fa fcb1 	bl	80157ec <pbuf_realloc>
  useg->len -= remainder;
 801ae8a:	697b      	ldr	r3, [r7, #20]
 801ae8c:	891a      	ldrh	r2, [r3, #8]
 801ae8e:	89bb      	ldrh	r3, [r7, #12]
 801ae90:	1ad3      	subs	r3, r2, r3
 801ae92:	b29a      	uxth	r2, r3
 801ae94:	697b      	ldr	r3, [r7, #20]
 801ae96:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801ae98:	697b      	ldr	r3, [r7, #20]
 801ae9a:	68db      	ldr	r3, [r3, #12]
 801ae9c:	899b      	ldrh	r3, [r3, #12]
 801ae9e:	b29c      	uxth	r4, r3
 801aea0:	7efb      	ldrb	r3, [r7, #27]
 801aea2:	b29b      	uxth	r3, r3
 801aea4:	4618      	mov	r0, r3
 801aea6:	f7f9 fa49 	bl	801433c <lwip_htons>
 801aeaa:	4603      	mov	r3, r0
 801aeac:	461a      	mov	r2, r3
 801aeae:	697b      	ldr	r3, [r7, #20]
 801aeb0:	68db      	ldr	r3, [r3, #12]
 801aeb2:	4322      	orrs	r2, r4
 801aeb4:	b292      	uxth	r2, r2
 801aeb6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801aeb8:	697b      	ldr	r3, [r7, #20]
 801aeba:	685b      	ldr	r3, [r3, #4]
 801aebc:	4618      	mov	r0, r3
 801aebe:	f7fa fea9 	bl	8015c14 <pbuf_clen>
 801aec2:	4603      	mov	r3, r0
 801aec4:	461a      	mov	r2, r3
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aecc:	4413      	add	r3, r2
 801aece:	b29a      	uxth	r2, r3
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801aed6:	69fb      	ldr	r3, [r7, #28]
 801aed8:	685b      	ldr	r3, [r3, #4]
 801aeda:	4618      	mov	r0, r3
 801aedc:	f7fa fe9a 	bl	8015c14 <pbuf_clen>
 801aee0:	4603      	mov	r3, r0
 801aee2:	461a      	mov	r2, r3
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aeea:	4413      	add	r3, r2
 801aeec:	b29a      	uxth	r2, r3
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801aef4:	697b      	ldr	r3, [r7, #20]
 801aef6:	681a      	ldr	r2, [r3, #0]
 801aef8:	69fb      	ldr	r3, [r7, #28]
 801aefa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801aefc:	697b      	ldr	r3, [r7, #20]
 801aefe:	69fa      	ldr	r2, [r7, #28]
 801af00:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801af02:	69fb      	ldr	r3, [r7, #28]
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	2b00      	cmp	r3, #0
 801af08:	d103      	bne.n	801af12 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	2200      	movs	r2, #0
 801af0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801af12:	2300      	movs	r3, #0
 801af14:	e016      	b.n	801af44 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801af16:	bf00      	nop
 801af18:	e002      	b.n	801af20 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801af1a:	bf00      	nop
 801af1c:	e000      	b.n	801af20 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801af1e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801af20:	69fb      	ldr	r3, [r7, #28]
 801af22:	2b00      	cmp	r3, #0
 801af24:	d006      	beq.n	801af34 <tcp_split_unsent_seg+0x25c>
 801af26:	4b09      	ldr	r3, [pc, #36]	; (801af4c <tcp_split_unsent_seg+0x274>)
 801af28:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801af2c:	490d      	ldr	r1, [pc, #52]	; (801af64 <tcp_split_unsent_seg+0x28c>)
 801af2e:	4809      	ldr	r0, [pc, #36]	; (801af54 <tcp_split_unsent_seg+0x27c>)
 801af30:	f004 f828 	bl	801ef84 <iprintf>
  if (p != NULL) {
 801af34:	693b      	ldr	r3, [r7, #16]
 801af36:	2b00      	cmp	r3, #0
 801af38:	d002      	beq.n	801af40 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801af3a:	6938      	ldr	r0, [r7, #16]
 801af3c:	f7fa fddc 	bl	8015af8 <pbuf_free>
  }

  return ERR_MEM;
 801af40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801af44:	4618      	mov	r0, r3
 801af46:	3724      	adds	r7, #36	; 0x24
 801af48:	46bd      	mov	sp, r7
 801af4a:	bd90      	pop	{r4, r7, pc}
 801af4c:	08021864 	.word	0x08021864
 801af50:	08021bf8 	.word	0x08021bf8
 801af54:	080218b8 	.word	0x080218b8
 801af58:	08021c1c 	.word	0x08021c1c
 801af5c:	08021c40 	.word	0x08021c40
 801af60:	08021c50 	.word	0x08021c50
 801af64:	08021c60 	.word	0x08021c60

0801af68 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801af68:	b590      	push	{r4, r7, lr}
 801af6a:	b085      	sub	sp, #20
 801af6c:	af00      	add	r7, sp, #0
 801af6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	2b00      	cmp	r3, #0
 801af74:	d106      	bne.n	801af84 <tcp_send_fin+0x1c>
 801af76:	4b21      	ldr	r3, [pc, #132]	; (801affc <tcp_send_fin+0x94>)
 801af78:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801af7c:	4920      	ldr	r1, [pc, #128]	; (801b000 <tcp_send_fin+0x98>)
 801af7e:	4821      	ldr	r0, [pc, #132]	; (801b004 <tcp_send_fin+0x9c>)
 801af80:	f004 f800 	bl	801ef84 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af88:	2b00      	cmp	r3, #0
 801af8a:	d02e      	beq.n	801afea <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af90:	60fb      	str	r3, [r7, #12]
 801af92:	e002      	b.n	801af9a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	681b      	ldr	r3, [r3, #0]
 801af98:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d1f8      	bne.n	801af94 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	68db      	ldr	r3, [r3, #12]
 801afa6:	899b      	ldrh	r3, [r3, #12]
 801afa8:	b29b      	uxth	r3, r3
 801afaa:	4618      	mov	r0, r3
 801afac:	f7f9 f9c6 	bl	801433c <lwip_htons>
 801afb0:	4603      	mov	r3, r0
 801afb2:	b2db      	uxtb	r3, r3
 801afb4:	f003 0307 	and.w	r3, r3, #7
 801afb8:	2b00      	cmp	r3, #0
 801afba:	d116      	bne.n	801afea <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801afbc:	68fb      	ldr	r3, [r7, #12]
 801afbe:	68db      	ldr	r3, [r3, #12]
 801afc0:	899b      	ldrh	r3, [r3, #12]
 801afc2:	b29c      	uxth	r4, r3
 801afc4:	2001      	movs	r0, #1
 801afc6:	f7f9 f9b9 	bl	801433c <lwip_htons>
 801afca:	4603      	mov	r3, r0
 801afcc:	461a      	mov	r2, r3
 801afce:	68fb      	ldr	r3, [r7, #12]
 801afd0:	68db      	ldr	r3, [r3, #12]
 801afd2:	4322      	orrs	r2, r4
 801afd4:	b292      	uxth	r2, r2
 801afd6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	8b5b      	ldrh	r3, [r3, #26]
 801afdc:	f043 0320 	orr.w	r3, r3, #32
 801afe0:	b29a      	uxth	r2, r3
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801afe6:	2300      	movs	r3, #0
 801afe8:	e004      	b.n	801aff4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801afea:	2101      	movs	r1, #1
 801afec:	6878      	ldr	r0, [r7, #4]
 801afee:	f000 f80b 	bl	801b008 <tcp_enqueue_flags>
 801aff2:	4603      	mov	r3, r0
}
 801aff4:	4618      	mov	r0, r3
 801aff6:	3714      	adds	r7, #20
 801aff8:	46bd      	mov	sp, r7
 801affa:	bd90      	pop	{r4, r7, pc}
 801affc:	08021864 	.word	0x08021864
 801b000:	08021c6c 	.word	0x08021c6c
 801b004:	080218b8 	.word	0x080218b8

0801b008 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801b008:	b580      	push	{r7, lr}
 801b00a:	b08a      	sub	sp, #40	; 0x28
 801b00c:	af02      	add	r7, sp, #8
 801b00e:	6078      	str	r0, [r7, #4]
 801b010:	460b      	mov	r3, r1
 801b012:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801b014:	2300      	movs	r3, #0
 801b016:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801b018:	2300      	movs	r3, #0
 801b01a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801b01c:	78fb      	ldrb	r3, [r7, #3]
 801b01e:	f003 0303 	and.w	r3, r3, #3
 801b022:	2b00      	cmp	r3, #0
 801b024:	d106      	bne.n	801b034 <tcp_enqueue_flags+0x2c>
 801b026:	4b67      	ldr	r3, [pc, #412]	; (801b1c4 <tcp_enqueue_flags+0x1bc>)
 801b028:	f240 4212 	movw	r2, #1042	; 0x412
 801b02c:	4966      	ldr	r1, [pc, #408]	; (801b1c8 <tcp_enqueue_flags+0x1c0>)
 801b02e:	4867      	ldr	r0, [pc, #412]	; (801b1cc <tcp_enqueue_flags+0x1c4>)
 801b030:	f003 ffa8 	bl	801ef84 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	2b00      	cmp	r3, #0
 801b038:	d106      	bne.n	801b048 <tcp_enqueue_flags+0x40>
 801b03a:	4b62      	ldr	r3, [pc, #392]	; (801b1c4 <tcp_enqueue_flags+0x1bc>)
 801b03c:	f240 4213 	movw	r2, #1043	; 0x413
 801b040:	4963      	ldr	r1, [pc, #396]	; (801b1d0 <tcp_enqueue_flags+0x1c8>)
 801b042:	4862      	ldr	r0, [pc, #392]	; (801b1cc <tcp_enqueue_flags+0x1c4>)
 801b044:	f003 ff9e 	bl	801ef84 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801b048:	78fb      	ldrb	r3, [r7, #3]
 801b04a:	f003 0302 	and.w	r3, r3, #2
 801b04e:	2b00      	cmp	r3, #0
 801b050:	d001      	beq.n	801b056 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801b052:	2301      	movs	r3, #1
 801b054:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b056:	7ffb      	ldrb	r3, [r7, #31]
 801b058:	009b      	lsls	r3, r3, #2
 801b05a:	b2db      	uxtb	r3, r3
 801b05c:	f003 0304 	and.w	r3, r3, #4
 801b060:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b062:	7dfb      	ldrb	r3, [r7, #23]
 801b064:	b29b      	uxth	r3, r3
 801b066:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b06a:	4619      	mov	r1, r3
 801b06c:	2036      	movs	r0, #54	; 0x36
 801b06e:	f7fa fa63 	bl	8015538 <pbuf_alloc>
 801b072:	6138      	str	r0, [r7, #16]
 801b074:	693b      	ldr	r3, [r7, #16]
 801b076:	2b00      	cmp	r3, #0
 801b078:	d109      	bne.n	801b08e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	8b5b      	ldrh	r3, [r3, #26]
 801b07e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b082:	b29a      	uxth	r2, r3
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b08c:	e095      	b.n	801b1ba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801b08e:	693b      	ldr	r3, [r7, #16]
 801b090:	895a      	ldrh	r2, [r3, #10]
 801b092:	7dfb      	ldrb	r3, [r7, #23]
 801b094:	b29b      	uxth	r3, r3
 801b096:	429a      	cmp	r2, r3
 801b098:	d206      	bcs.n	801b0a8 <tcp_enqueue_flags+0xa0>
 801b09a:	4b4a      	ldr	r3, [pc, #296]	; (801b1c4 <tcp_enqueue_flags+0x1bc>)
 801b09c:	f240 423a 	movw	r2, #1082	; 0x43a
 801b0a0:	494c      	ldr	r1, [pc, #304]	; (801b1d4 <tcp_enqueue_flags+0x1cc>)
 801b0a2:	484a      	ldr	r0, [pc, #296]	; (801b1cc <tcp_enqueue_flags+0x1c4>)
 801b0a4:	f003 ff6e 	bl	801ef84 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801b0ac:	78fa      	ldrb	r2, [r7, #3]
 801b0ae:	7ffb      	ldrb	r3, [r7, #31]
 801b0b0:	9300      	str	r3, [sp, #0]
 801b0b2:	460b      	mov	r3, r1
 801b0b4:	6939      	ldr	r1, [r7, #16]
 801b0b6:	6878      	ldr	r0, [r7, #4]
 801b0b8:	f7ff f916 	bl	801a2e8 <tcp_create_segment>
 801b0bc:	60f8      	str	r0, [r7, #12]
 801b0be:	68fb      	ldr	r3, [r7, #12]
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	d109      	bne.n	801b0d8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	8b5b      	ldrh	r3, [r3, #26]
 801b0c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b0cc:	b29a      	uxth	r2, r3
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b0d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b0d6:	e070      	b.n	801b1ba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801b0d8:	68fb      	ldr	r3, [r7, #12]
 801b0da:	68db      	ldr	r3, [r3, #12]
 801b0dc:	f003 0303 	and.w	r3, r3, #3
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d006      	beq.n	801b0f2 <tcp_enqueue_flags+0xea>
 801b0e4:	4b37      	ldr	r3, [pc, #220]	; (801b1c4 <tcp_enqueue_flags+0x1bc>)
 801b0e6:	f240 4242 	movw	r2, #1090	; 0x442
 801b0ea:	493b      	ldr	r1, [pc, #236]	; (801b1d8 <tcp_enqueue_flags+0x1d0>)
 801b0ec:	4837      	ldr	r0, [pc, #220]	; (801b1cc <tcp_enqueue_flags+0x1c4>)
 801b0ee:	f003 ff49 	bl	801ef84 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801b0f2:	68fb      	ldr	r3, [r7, #12]
 801b0f4:	891b      	ldrh	r3, [r3, #8]
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	d006      	beq.n	801b108 <tcp_enqueue_flags+0x100>
 801b0fa:	4b32      	ldr	r3, [pc, #200]	; (801b1c4 <tcp_enqueue_flags+0x1bc>)
 801b0fc:	f240 4243 	movw	r2, #1091	; 0x443
 801b100:	4936      	ldr	r1, [pc, #216]	; (801b1dc <tcp_enqueue_flags+0x1d4>)
 801b102:	4832      	ldr	r0, [pc, #200]	; (801b1cc <tcp_enqueue_flags+0x1c4>)
 801b104:	f003 ff3e 	bl	801ef84 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b10c:	2b00      	cmp	r3, #0
 801b10e:	d103      	bne.n	801b118 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	68fa      	ldr	r2, [r7, #12]
 801b114:	66da      	str	r2, [r3, #108]	; 0x6c
 801b116:	e00d      	b.n	801b134 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b11c:	61bb      	str	r3, [r7, #24]
 801b11e:	e002      	b.n	801b126 <tcp_enqueue_flags+0x11e>
 801b120:	69bb      	ldr	r3, [r7, #24]
 801b122:	681b      	ldr	r3, [r3, #0]
 801b124:	61bb      	str	r3, [r7, #24]
 801b126:	69bb      	ldr	r3, [r7, #24]
 801b128:	681b      	ldr	r3, [r3, #0]
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d1f8      	bne.n	801b120 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801b12e:	69bb      	ldr	r3, [r7, #24]
 801b130:	68fa      	ldr	r2, [r7, #12]
 801b132:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	2200      	movs	r2, #0
 801b138:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801b13c:	78fb      	ldrb	r3, [r7, #3]
 801b13e:	f003 0302 	and.w	r3, r3, #2
 801b142:	2b00      	cmp	r3, #0
 801b144:	d104      	bne.n	801b150 <tcp_enqueue_flags+0x148>
 801b146:	78fb      	ldrb	r3, [r7, #3]
 801b148:	f003 0301 	and.w	r3, r3, #1
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d004      	beq.n	801b15a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b154:	1c5a      	adds	r2, r3, #1
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801b15a:	78fb      	ldrb	r3, [r7, #3]
 801b15c:	f003 0301 	and.w	r3, r3, #1
 801b160:	2b00      	cmp	r3, #0
 801b162:	d006      	beq.n	801b172 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	8b5b      	ldrh	r3, [r3, #26]
 801b168:	f043 0320 	orr.w	r3, r3, #32
 801b16c:	b29a      	uxth	r2, r3
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b172:	68fb      	ldr	r3, [r7, #12]
 801b174:	685b      	ldr	r3, [r3, #4]
 801b176:	4618      	mov	r0, r3
 801b178:	f7fa fd4c 	bl	8015c14 <pbuf_clen>
 801b17c:	4603      	mov	r3, r0
 801b17e:	461a      	mov	r2, r3
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b186:	4413      	add	r3, r2
 801b188:	b29a      	uxth	r2, r3
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b196:	2b00      	cmp	r3, #0
 801b198:	d00e      	beq.n	801b1b8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d10a      	bne.n	801b1b8 <tcp_enqueue_flags+0x1b0>
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d106      	bne.n	801b1b8 <tcp_enqueue_flags+0x1b0>
 801b1aa:	4b06      	ldr	r3, [pc, #24]	; (801b1c4 <tcp_enqueue_flags+0x1bc>)
 801b1ac:	f240 4266 	movw	r2, #1126	; 0x466
 801b1b0:	490b      	ldr	r1, [pc, #44]	; (801b1e0 <tcp_enqueue_flags+0x1d8>)
 801b1b2:	4806      	ldr	r0, [pc, #24]	; (801b1cc <tcp_enqueue_flags+0x1c4>)
 801b1b4:	f003 fee6 	bl	801ef84 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801b1b8:	2300      	movs	r3, #0
}
 801b1ba:	4618      	mov	r0, r3
 801b1bc:	3720      	adds	r7, #32
 801b1be:	46bd      	mov	sp, r7
 801b1c0:	bd80      	pop	{r7, pc}
 801b1c2:	bf00      	nop
 801b1c4:	08021864 	.word	0x08021864
 801b1c8:	08021c88 	.word	0x08021c88
 801b1cc:	080218b8 	.word	0x080218b8
 801b1d0:	08021ce0 	.word	0x08021ce0
 801b1d4:	08021d00 	.word	0x08021d00
 801b1d8:	08021d3c 	.word	0x08021d3c
 801b1dc:	08021d54 	.word	0x08021d54
 801b1e0:	08021d80 	.word	0x08021d80

0801b1e4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801b1e4:	b5b0      	push	{r4, r5, r7, lr}
 801b1e6:	b08a      	sub	sp, #40	; 0x28
 801b1e8:	af00      	add	r7, sp, #0
 801b1ea:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	d106      	bne.n	801b200 <tcp_output+0x1c>
 801b1f2:	4ba0      	ldr	r3, [pc, #640]	; (801b474 <tcp_output+0x290>)
 801b1f4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801b1f8:	499f      	ldr	r1, [pc, #636]	; (801b478 <tcp_output+0x294>)
 801b1fa:	48a0      	ldr	r0, [pc, #640]	; (801b47c <tcp_output+0x298>)
 801b1fc:	f003 fec2 	bl	801ef84 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	7d1b      	ldrb	r3, [r3, #20]
 801b204:	2b01      	cmp	r3, #1
 801b206:	d106      	bne.n	801b216 <tcp_output+0x32>
 801b208:	4b9a      	ldr	r3, [pc, #616]	; (801b474 <tcp_output+0x290>)
 801b20a:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801b20e:	499c      	ldr	r1, [pc, #624]	; (801b480 <tcp_output+0x29c>)
 801b210:	489a      	ldr	r0, [pc, #616]	; (801b47c <tcp_output+0x298>)
 801b212:	f003 feb7 	bl	801ef84 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801b216:	4b9b      	ldr	r3, [pc, #620]	; (801b484 <tcp_output+0x2a0>)
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	687a      	ldr	r2, [r7, #4]
 801b21c:	429a      	cmp	r2, r3
 801b21e:	d101      	bne.n	801b224 <tcp_output+0x40>
    return ERR_OK;
 801b220:	2300      	movs	r3, #0
 801b222:	e1d2      	b.n	801b5ca <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b230:	429a      	cmp	r2, r3
 801b232:	d203      	bcs.n	801b23c <tcp_output+0x58>
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b23a:	e002      	b.n	801b242 <tcp_output+0x5e>
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b242:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b248:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801b24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d10b      	bne.n	801b268 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	8b5b      	ldrh	r3, [r3, #26]
 801b254:	f003 0302 	and.w	r3, r3, #2
 801b258:	2b00      	cmp	r3, #0
 801b25a:	f000 81a9 	beq.w	801b5b0 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801b25e:	6878      	ldr	r0, [r7, #4]
 801b260:	f000 fdd8 	bl	801be14 <tcp_send_empty_ack>
 801b264:	4603      	mov	r3, r0
 801b266:	e1b0      	b.n	801b5ca <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801b268:	6879      	ldr	r1, [r7, #4]
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	3304      	adds	r3, #4
 801b26e:	461a      	mov	r2, r3
 801b270:	6878      	ldr	r0, [r7, #4]
 801b272:	f7ff f81d 	bl	801a2b0 <tcp_route>
 801b276:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801b278:	697b      	ldr	r3, [r7, #20]
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	d102      	bne.n	801b284 <tcp_output+0xa0>
    return ERR_RTE;
 801b27e:	f06f 0303 	mvn.w	r3, #3
 801b282:	e1a2      	b.n	801b5ca <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	2b00      	cmp	r3, #0
 801b288:	d003      	beq.n	801b292 <tcp_output+0xae>
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	681b      	ldr	r3, [r3, #0]
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d111      	bne.n	801b2b6 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801b292:	697b      	ldr	r3, [r7, #20]
 801b294:	2b00      	cmp	r3, #0
 801b296:	d002      	beq.n	801b29e <tcp_output+0xba>
 801b298:	697b      	ldr	r3, [r7, #20]
 801b29a:	3304      	adds	r3, #4
 801b29c:	e000      	b.n	801b2a0 <tcp_output+0xbc>
 801b29e:	2300      	movs	r3, #0
 801b2a0:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801b2a2:	693b      	ldr	r3, [r7, #16]
 801b2a4:	2b00      	cmp	r3, #0
 801b2a6:	d102      	bne.n	801b2ae <tcp_output+0xca>
      return ERR_RTE;
 801b2a8:	f06f 0303 	mvn.w	r3, #3
 801b2ac:	e18d      	b.n	801b5ca <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b2ae:	693b      	ldr	r3, [r7, #16]
 801b2b0:	681a      	ldr	r2, [r3, #0]
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801b2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2b8:	68db      	ldr	r3, [r3, #12]
 801b2ba:	685b      	ldr	r3, [r3, #4]
 801b2bc:	4618      	mov	r0, r3
 801b2be:	f7f9 f852 	bl	8014366 <lwip_htonl>
 801b2c2:	4602      	mov	r2, r0
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b2c8:	1ad3      	subs	r3, r2, r3
 801b2ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b2cc:	8912      	ldrh	r2, [r2, #8]
 801b2ce:	4413      	add	r3, r2
 801b2d0:	69ba      	ldr	r2, [r7, #24]
 801b2d2:	429a      	cmp	r2, r3
 801b2d4:	d227      	bcs.n	801b326 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b2dc:	461a      	mov	r2, r3
 801b2de:	69bb      	ldr	r3, [r7, #24]
 801b2e0:	4293      	cmp	r3, r2
 801b2e2:	d114      	bne.n	801b30e <tcp_output+0x12a>
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	d110      	bne.n	801b30e <tcp_output+0x12a>
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d10b      	bne.n	801b30e <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	2200      	movs	r2, #0
 801b2fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	2201      	movs	r2, #1
 801b302:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	2200      	movs	r2, #0
 801b30a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	8b5b      	ldrh	r3, [r3, #26]
 801b312:	f003 0302 	and.w	r3, r3, #2
 801b316:	2b00      	cmp	r3, #0
 801b318:	f000 814c 	beq.w	801b5b4 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801b31c:	6878      	ldr	r0, [r7, #4]
 801b31e:	f000 fd79 	bl	801be14 <tcp_send_empty_ack>
 801b322:	4603      	mov	r3, r0
 801b324:	e151      	b.n	801b5ca <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	2200      	movs	r2, #0
 801b32a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b332:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801b334:	6a3b      	ldr	r3, [r7, #32]
 801b336:	2b00      	cmp	r3, #0
 801b338:	f000 811b 	beq.w	801b572 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801b33c:	e002      	b.n	801b344 <tcp_output+0x160>
 801b33e:	6a3b      	ldr	r3, [r7, #32]
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	623b      	str	r3, [r7, #32]
 801b344:	6a3b      	ldr	r3, [r7, #32]
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	2b00      	cmp	r3, #0
 801b34a:	d1f8      	bne.n	801b33e <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801b34c:	e111      	b.n	801b572 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801b34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b350:	68db      	ldr	r3, [r3, #12]
 801b352:	899b      	ldrh	r3, [r3, #12]
 801b354:	b29b      	uxth	r3, r3
 801b356:	4618      	mov	r0, r3
 801b358:	f7f8 fff0 	bl	801433c <lwip_htons>
 801b35c:	4603      	mov	r3, r0
 801b35e:	b2db      	uxtb	r3, r3
 801b360:	f003 0304 	and.w	r3, r3, #4
 801b364:	2b00      	cmp	r3, #0
 801b366:	d006      	beq.n	801b376 <tcp_output+0x192>
 801b368:	4b42      	ldr	r3, [pc, #264]	; (801b474 <tcp_output+0x290>)
 801b36a:	f240 5237 	movw	r2, #1335	; 0x537
 801b36e:	4946      	ldr	r1, [pc, #280]	; (801b488 <tcp_output+0x2a4>)
 801b370:	4842      	ldr	r0, [pc, #264]	; (801b47c <tcp_output+0x298>)
 801b372:	f003 fe07 	bl	801ef84 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d01f      	beq.n	801b3be <tcp_output+0x1da>
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	8b5b      	ldrh	r3, [r3, #26]
 801b382:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801b386:	2b00      	cmp	r3, #0
 801b388:	d119      	bne.n	801b3be <tcp_output+0x1da>
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b38e:	2b00      	cmp	r3, #0
 801b390:	d00b      	beq.n	801b3aa <tcp_output+0x1c6>
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d110      	bne.n	801b3be <tcp_output+0x1da>
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b3a0:	891a      	ldrh	r2, [r3, #8]
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b3a6:	429a      	cmp	r2, r3
 801b3a8:	d209      	bcs.n	801b3be <tcp_output+0x1da>
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	d004      	beq.n	801b3be <tcp_output+0x1da>
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b3ba:	2b08      	cmp	r3, #8
 801b3bc:	d901      	bls.n	801b3c2 <tcp_output+0x1de>
 801b3be:	2301      	movs	r3, #1
 801b3c0:	e000      	b.n	801b3c4 <tcp_output+0x1e0>
 801b3c2:	2300      	movs	r3, #0
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	d106      	bne.n	801b3d6 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	8b5b      	ldrh	r3, [r3, #26]
 801b3cc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	f000 80e3 	beq.w	801b59c <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	7d1b      	ldrb	r3, [r3, #20]
 801b3da:	2b02      	cmp	r3, #2
 801b3dc:	d00d      	beq.n	801b3fa <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3e0:	68db      	ldr	r3, [r3, #12]
 801b3e2:	899b      	ldrh	r3, [r3, #12]
 801b3e4:	b29c      	uxth	r4, r3
 801b3e6:	2010      	movs	r0, #16
 801b3e8:	f7f8 ffa8 	bl	801433c <lwip_htons>
 801b3ec:	4603      	mov	r3, r0
 801b3ee:	461a      	mov	r2, r3
 801b3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3f2:	68db      	ldr	r3, [r3, #12]
 801b3f4:	4322      	orrs	r2, r4
 801b3f6:	b292      	uxth	r2, r2
 801b3f8:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801b3fa:	697a      	ldr	r2, [r7, #20]
 801b3fc:	6879      	ldr	r1, [r7, #4]
 801b3fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b400:	f000 f908 	bl	801b614 <tcp_output_segment>
 801b404:	4603      	mov	r3, r0
 801b406:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801b408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	d009      	beq.n	801b424 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	8b5b      	ldrh	r3, [r3, #26]
 801b414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b418:	b29a      	uxth	r2, r3
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	835a      	strh	r2, [r3, #26]
      return err;
 801b41e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b422:	e0d2      	b.n	801b5ca <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801b424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b426:	681a      	ldr	r2, [r3, #0]
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	7d1b      	ldrb	r3, [r3, #20]
 801b430:	2b02      	cmp	r3, #2
 801b432:	d006      	beq.n	801b442 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	8b5b      	ldrh	r3, [r3, #26]
 801b438:	f023 0303 	bic.w	r3, r3, #3
 801b43c:	b29a      	uxth	r2, r3
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b444:	68db      	ldr	r3, [r3, #12]
 801b446:	685b      	ldr	r3, [r3, #4]
 801b448:	4618      	mov	r0, r3
 801b44a:	f7f8 ff8c 	bl	8014366 <lwip_htonl>
 801b44e:	4604      	mov	r4, r0
 801b450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b452:	891b      	ldrh	r3, [r3, #8]
 801b454:	461d      	mov	r5, r3
 801b456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b458:	68db      	ldr	r3, [r3, #12]
 801b45a:	899b      	ldrh	r3, [r3, #12]
 801b45c:	b29b      	uxth	r3, r3
 801b45e:	4618      	mov	r0, r3
 801b460:	f7f8 ff6c 	bl	801433c <lwip_htons>
 801b464:	4603      	mov	r3, r0
 801b466:	b2db      	uxtb	r3, r3
 801b468:	f003 0303 	and.w	r3, r3, #3
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d00d      	beq.n	801b48c <tcp_output+0x2a8>
 801b470:	2301      	movs	r3, #1
 801b472:	e00c      	b.n	801b48e <tcp_output+0x2aa>
 801b474:	08021864 	.word	0x08021864
 801b478:	08021da8 	.word	0x08021da8
 801b47c:	080218b8 	.word	0x080218b8
 801b480:	08021dc0 	.word	0x08021dc0
 801b484:	20013d40 	.word	0x20013d40
 801b488:	08021de8 	.word	0x08021de8
 801b48c:	2300      	movs	r3, #0
 801b48e:	442b      	add	r3, r5
 801b490:	4423      	add	r3, r4
 801b492:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b498:	68bb      	ldr	r3, [r7, #8]
 801b49a:	1ad3      	subs	r3, r2, r3
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	da02      	bge.n	801b4a6 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	68ba      	ldr	r2, [r7, #8]
 801b4a4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801b4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4a8:	891b      	ldrh	r3, [r3, #8]
 801b4aa:	461c      	mov	r4, r3
 801b4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4ae:	68db      	ldr	r3, [r3, #12]
 801b4b0:	899b      	ldrh	r3, [r3, #12]
 801b4b2:	b29b      	uxth	r3, r3
 801b4b4:	4618      	mov	r0, r3
 801b4b6:	f7f8 ff41 	bl	801433c <lwip_htons>
 801b4ba:	4603      	mov	r3, r0
 801b4bc:	b2db      	uxtb	r3, r3
 801b4be:	f003 0303 	and.w	r3, r3, #3
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d001      	beq.n	801b4ca <tcp_output+0x2e6>
 801b4c6:	2301      	movs	r3, #1
 801b4c8:	e000      	b.n	801b4cc <tcp_output+0x2e8>
 801b4ca:	2300      	movs	r3, #0
 801b4cc:	4423      	add	r3, r4
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d049      	beq.n	801b566 <tcp_output+0x382>
      seg->next = NULL;
 801b4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4d4:	2200      	movs	r2, #0
 801b4d6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	d105      	bne.n	801b4ec <tcp_output+0x308>
        pcb->unacked = seg;
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b4e4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801b4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4e8:	623b      	str	r3, [r7, #32]
 801b4ea:	e03f      	b.n	801b56c <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801b4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4ee:	68db      	ldr	r3, [r3, #12]
 801b4f0:	685b      	ldr	r3, [r3, #4]
 801b4f2:	4618      	mov	r0, r3
 801b4f4:	f7f8 ff37 	bl	8014366 <lwip_htonl>
 801b4f8:	4604      	mov	r4, r0
 801b4fa:	6a3b      	ldr	r3, [r7, #32]
 801b4fc:	68db      	ldr	r3, [r3, #12]
 801b4fe:	685b      	ldr	r3, [r3, #4]
 801b500:	4618      	mov	r0, r3
 801b502:	f7f8 ff30 	bl	8014366 <lwip_htonl>
 801b506:	4603      	mov	r3, r0
 801b508:	1ae3      	subs	r3, r4, r3
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	da24      	bge.n	801b558 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	3370      	adds	r3, #112	; 0x70
 801b512:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b514:	e002      	b.n	801b51c <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801b516:	69fb      	ldr	r3, [r7, #28]
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b51c:	69fb      	ldr	r3, [r7, #28]
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	2b00      	cmp	r3, #0
 801b522:	d011      	beq.n	801b548 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b524:	69fb      	ldr	r3, [r7, #28]
 801b526:	681b      	ldr	r3, [r3, #0]
 801b528:	68db      	ldr	r3, [r3, #12]
 801b52a:	685b      	ldr	r3, [r3, #4]
 801b52c:	4618      	mov	r0, r3
 801b52e:	f7f8 ff1a 	bl	8014366 <lwip_htonl>
 801b532:	4604      	mov	r4, r0
 801b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b536:	68db      	ldr	r3, [r3, #12]
 801b538:	685b      	ldr	r3, [r3, #4]
 801b53a:	4618      	mov	r0, r3
 801b53c:	f7f8 ff13 	bl	8014366 <lwip_htonl>
 801b540:	4603      	mov	r3, r0
 801b542:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801b544:	2b00      	cmp	r3, #0
 801b546:	dbe6      	blt.n	801b516 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 801b548:	69fb      	ldr	r3, [r7, #28]
 801b54a:	681a      	ldr	r2, [r3, #0]
 801b54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b54e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801b550:	69fb      	ldr	r3, [r7, #28]
 801b552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b554:	601a      	str	r2, [r3, #0]
 801b556:	e009      	b.n	801b56c <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801b558:	6a3b      	ldr	r3, [r7, #32]
 801b55a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b55c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801b55e:	6a3b      	ldr	r3, [r7, #32]
 801b560:	681b      	ldr	r3, [r3, #0]
 801b562:	623b      	str	r3, [r7, #32]
 801b564:	e002      	b.n	801b56c <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801b566:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b568:	f7fb fef4 	bl	8017354 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b570:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801b572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b574:	2b00      	cmp	r3, #0
 801b576:	d012      	beq.n	801b59e <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801b578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b57a:	68db      	ldr	r3, [r3, #12]
 801b57c:	685b      	ldr	r3, [r3, #4]
 801b57e:	4618      	mov	r0, r3
 801b580:	f7f8 fef1 	bl	8014366 <lwip_htonl>
 801b584:	4602      	mov	r2, r0
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b58a:	1ad3      	subs	r3, r2, r3
 801b58c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b58e:	8912      	ldrh	r2, [r2, #8]
 801b590:	4413      	add	r3, r2
  while (seg != NULL &&
 801b592:	69ba      	ldr	r2, [r7, #24]
 801b594:	429a      	cmp	r2, r3
 801b596:	f4bf aeda 	bcs.w	801b34e <tcp_output+0x16a>
 801b59a:	e000      	b.n	801b59e <tcp_output+0x3ba>
      break;
 801b59c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	d108      	bne.n	801b5b8 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	2200      	movs	r2, #0
 801b5aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801b5ae:	e004      	b.n	801b5ba <tcp_output+0x3d6>
    goto output_done;
 801b5b0:	bf00      	nop
 801b5b2:	e002      	b.n	801b5ba <tcp_output+0x3d6>
    goto output_done;
 801b5b4:	bf00      	nop
 801b5b6:	e000      	b.n	801b5ba <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801b5b8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	8b5b      	ldrh	r3, [r3, #26]
 801b5be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b5c2:	b29a      	uxth	r2, r3
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801b5c8:	2300      	movs	r3, #0
}
 801b5ca:	4618      	mov	r0, r3
 801b5cc:	3728      	adds	r7, #40	; 0x28
 801b5ce:	46bd      	mov	sp, r7
 801b5d0:	bdb0      	pop	{r4, r5, r7, pc}
 801b5d2:	bf00      	nop

0801b5d4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801b5d4:	b580      	push	{r7, lr}
 801b5d6:	b082      	sub	sp, #8
 801b5d8:	af00      	add	r7, sp, #0
 801b5da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d106      	bne.n	801b5f0 <tcp_output_segment_busy+0x1c>
 801b5e2:	4b09      	ldr	r3, [pc, #36]	; (801b608 <tcp_output_segment_busy+0x34>)
 801b5e4:	f240 529a 	movw	r2, #1434	; 0x59a
 801b5e8:	4908      	ldr	r1, [pc, #32]	; (801b60c <tcp_output_segment_busy+0x38>)
 801b5ea:	4809      	ldr	r0, [pc, #36]	; (801b610 <tcp_output_segment_busy+0x3c>)
 801b5ec:	f003 fcca 	bl	801ef84 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	685b      	ldr	r3, [r3, #4]
 801b5f4:	7b9b      	ldrb	r3, [r3, #14]
 801b5f6:	2b01      	cmp	r3, #1
 801b5f8:	d001      	beq.n	801b5fe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801b5fa:	2301      	movs	r3, #1
 801b5fc:	e000      	b.n	801b600 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801b5fe:	2300      	movs	r3, #0
}
 801b600:	4618      	mov	r0, r3
 801b602:	3708      	adds	r7, #8
 801b604:	46bd      	mov	sp, r7
 801b606:	bd80      	pop	{r7, pc}
 801b608:	08021864 	.word	0x08021864
 801b60c:	08021e00 	.word	0x08021e00
 801b610:	080218b8 	.word	0x080218b8

0801b614 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801b614:	b5b0      	push	{r4, r5, r7, lr}
 801b616:	b08c      	sub	sp, #48	; 0x30
 801b618:	af04      	add	r7, sp, #16
 801b61a:	60f8      	str	r0, [r7, #12]
 801b61c:	60b9      	str	r1, [r7, #8]
 801b61e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801b620:	68fb      	ldr	r3, [r7, #12]
 801b622:	2b00      	cmp	r3, #0
 801b624:	d106      	bne.n	801b634 <tcp_output_segment+0x20>
 801b626:	4b64      	ldr	r3, [pc, #400]	; (801b7b8 <tcp_output_segment+0x1a4>)
 801b628:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801b62c:	4963      	ldr	r1, [pc, #396]	; (801b7bc <tcp_output_segment+0x1a8>)
 801b62e:	4864      	ldr	r0, [pc, #400]	; (801b7c0 <tcp_output_segment+0x1ac>)
 801b630:	f003 fca8 	bl	801ef84 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801b634:	68bb      	ldr	r3, [r7, #8]
 801b636:	2b00      	cmp	r3, #0
 801b638:	d106      	bne.n	801b648 <tcp_output_segment+0x34>
 801b63a:	4b5f      	ldr	r3, [pc, #380]	; (801b7b8 <tcp_output_segment+0x1a4>)
 801b63c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801b640:	4960      	ldr	r1, [pc, #384]	; (801b7c4 <tcp_output_segment+0x1b0>)
 801b642:	485f      	ldr	r0, [pc, #380]	; (801b7c0 <tcp_output_segment+0x1ac>)
 801b644:	f003 fc9e 	bl	801ef84 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d106      	bne.n	801b65c <tcp_output_segment+0x48>
 801b64e:	4b5a      	ldr	r3, [pc, #360]	; (801b7b8 <tcp_output_segment+0x1a4>)
 801b650:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801b654:	495c      	ldr	r1, [pc, #368]	; (801b7c8 <tcp_output_segment+0x1b4>)
 801b656:	485a      	ldr	r0, [pc, #360]	; (801b7c0 <tcp_output_segment+0x1ac>)
 801b658:	f003 fc94 	bl	801ef84 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801b65c:	68f8      	ldr	r0, [r7, #12]
 801b65e:	f7ff ffb9 	bl	801b5d4 <tcp_output_segment_busy>
 801b662:	4603      	mov	r3, r0
 801b664:	2b00      	cmp	r3, #0
 801b666:	d001      	beq.n	801b66c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801b668:	2300      	movs	r3, #0
 801b66a:	e0a0      	b.n	801b7ae <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b66c:	68bb      	ldr	r3, [r7, #8]
 801b66e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b670:	68fb      	ldr	r3, [r7, #12]
 801b672:	68dc      	ldr	r4, [r3, #12]
 801b674:	4610      	mov	r0, r2
 801b676:	f7f8 fe76 	bl	8014366 <lwip_htonl>
 801b67a:	4603      	mov	r3, r0
 801b67c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b67e:	68bb      	ldr	r3, [r7, #8]
 801b680:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801b682:	68fb      	ldr	r3, [r7, #12]
 801b684:	68dc      	ldr	r4, [r3, #12]
 801b686:	4610      	mov	r0, r2
 801b688:	f7f8 fe58 	bl	801433c <lwip_htons>
 801b68c:	4603      	mov	r3, r0
 801b68e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b690:	68bb      	ldr	r3, [r7, #8]
 801b692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b694:	68ba      	ldr	r2, [r7, #8]
 801b696:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b698:	441a      	add	r2, r3
 801b69a:	68bb      	ldr	r3, [r7, #8]
 801b69c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b69e:	68fb      	ldr	r3, [r7, #12]
 801b6a0:	68db      	ldr	r3, [r3, #12]
 801b6a2:	3314      	adds	r3, #20
 801b6a4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	7a9b      	ldrb	r3, [r3, #10]
 801b6aa:	f003 0301 	and.w	r3, r3, #1
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d015      	beq.n	801b6de <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801b6b2:	68bb      	ldr	r3, [r7, #8]
 801b6b4:	3304      	adds	r3, #4
 801b6b6:	461a      	mov	r2, r3
 801b6b8:	6879      	ldr	r1, [r7, #4]
 801b6ba:	f44f 7006 	mov.w	r0, #536	; 0x218
 801b6be:	f7fc fa33 	bl	8017b28 <tcp_eff_send_mss_netif>
 801b6c2:	4603      	mov	r3, r0
 801b6c4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b6c6:	8b7b      	ldrh	r3, [r7, #26]
 801b6c8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801b6cc:	4618      	mov	r0, r3
 801b6ce:	f7f8 fe4a 	bl	8014366 <lwip_htonl>
 801b6d2:	4602      	mov	r2, r0
 801b6d4:	69fb      	ldr	r3, [r7, #28]
 801b6d6:	601a      	str	r2, [r3, #0]
    opts += 1;
 801b6d8:	69fb      	ldr	r3, [r7, #28]
 801b6da:	3304      	adds	r3, #4
 801b6dc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b6de:	68bb      	ldr	r3, [r7, #8]
 801b6e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	da02      	bge.n	801b6ee <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801b6e8:	68bb      	ldr	r3, [r7, #8]
 801b6ea:	2200      	movs	r2, #0
 801b6ec:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801b6ee:	68bb      	ldr	r3, [r7, #8]
 801b6f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d10c      	bne.n	801b710 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801b6f6:	4b35      	ldr	r3, [pc, #212]	; (801b7cc <tcp_output_segment+0x1b8>)
 801b6f8:	681a      	ldr	r2, [r3, #0]
 801b6fa:	68bb      	ldr	r3, [r7, #8]
 801b6fc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b6fe:	68fb      	ldr	r3, [r7, #12]
 801b700:	68db      	ldr	r3, [r3, #12]
 801b702:	685b      	ldr	r3, [r3, #4]
 801b704:	4618      	mov	r0, r3
 801b706:	f7f8 fe2e 	bl	8014366 <lwip_htonl>
 801b70a:	4602      	mov	r2, r0
 801b70c:	68bb      	ldr	r3, [r7, #8]
 801b70e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b710:	68fb      	ldr	r3, [r7, #12]
 801b712:	68db      	ldr	r3, [r3, #12]
 801b714:	461a      	mov	r2, r3
 801b716:	68fb      	ldr	r3, [r7, #12]
 801b718:	685b      	ldr	r3, [r3, #4]
 801b71a:	685b      	ldr	r3, [r3, #4]
 801b71c:	1ad3      	subs	r3, r2, r3
 801b71e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801b720:	68fb      	ldr	r3, [r7, #12]
 801b722:	685b      	ldr	r3, [r3, #4]
 801b724:	8959      	ldrh	r1, [r3, #10]
 801b726:	68fb      	ldr	r3, [r7, #12]
 801b728:	685b      	ldr	r3, [r3, #4]
 801b72a:	8b3a      	ldrh	r2, [r7, #24]
 801b72c:	1a8a      	subs	r2, r1, r2
 801b72e:	b292      	uxth	r2, r2
 801b730:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801b732:	68fb      	ldr	r3, [r7, #12]
 801b734:	685b      	ldr	r3, [r3, #4]
 801b736:	8919      	ldrh	r1, [r3, #8]
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	685b      	ldr	r3, [r3, #4]
 801b73c:	8b3a      	ldrh	r2, [r7, #24]
 801b73e:	1a8a      	subs	r2, r1, r2
 801b740:	b292      	uxth	r2, r2
 801b742:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801b744:	68fb      	ldr	r3, [r7, #12]
 801b746:	685b      	ldr	r3, [r3, #4]
 801b748:	68fa      	ldr	r2, [r7, #12]
 801b74a:	68d2      	ldr	r2, [r2, #12]
 801b74c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801b74e:	68fb      	ldr	r3, [r7, #12]
 801b750:	68db      	ldr	r3, [r3, #12]
 801b752:	2200      	movs	r2, #0
 801b754:	741a      	strb	r2, [r3, #16]
 801b756:	2200      	movs	r2, #0
 801b758:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801b75a:	68fb      	ldr	r3, [r7, #12]
 801b75c:	68db      	ldr	r3, [r3, #12]
 801b75e:	f103 0214 	add.w	r2, r3, #20
 801b762:	68fb      	ldr	r3, [r7, #12]
 801b764:	7a9b      	ldrb	r3, [r3, #10]
 801b766:	009b      	lsls	r3, r3, #2
 801b768:	f003 0304 	and.w	r3, r3, #4
 801b76c:	4413      	add	r3, r2
 801b76e:	69fa      	ldr	r2, [r7, #28]
 801b770:	429a      	cmp	r2, r3
 801b772:	d006      	beq.n	801b782 <tcp_output_segment+0x16e>
 801b774:	4b10      	ldr	r3, [pc, #64]	; (801b7b8 <tcp_output_segment+0x1a4>)
 801b776:	f240 621c 	movw	r2, #1564	; 0x61c
 801b77a:	4915      	ldr	r1, [pc, #84]	; (801b7d0 <tcp_output_segment+0x1bc>)
 801b77c:	4810      	ldr	r0, [pc, #64]	; (801b7c0 <tcp_output_segment+0x1ac>)
 801b77e:	f003 fc01 	bl	801ef84 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b782:	68fb      	ldr	r3, [r7, #12]
 801b784:	6858      	ldr	r0, [r3, #4]
 801b786:	68b9      	ldr	r1, [r7, #8]
 801b788:	68bb      	ldr	r3, [r7, #8]
 801b78a:	1d1c      	adds	r4, r3, #4
 801b78c:	68bb      	ldr	r3, [r7, #8]
 801b78e:	7add      	ldrb	r5, [r3, #11]
 801b790:	68bb      	ldr	r3, [r7, #8]
 801b792:	7a9b      	ldrb	r3, [r3, #10]
 801b794:	687a      	ldr	r2, [r7, #4]
 801b796:	9202      	str	r2, [sp, #8]
 801b798:	2206      	movs	r2, #6
 801b79a:	9201      	str	r2, [sp, #4]
 801b79c:	9300      	str	r3, [sp, #0]
 801b79e:	462b      	mov	r3, r5
 801b7a0:	4622      	mov	r2, r4
 801b7a2:	f002 fa6f 	bl	801dc84 <ip4_output_if>
 801b7a6:	4603      	mov	r3, r0
 801b7a8:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801b7aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b7ae:	4618      	mov	r0, r3
 801b7b0:	3720      	adds	r7, #32
 801b7b2:	46bd      	mov	sp, r7
 801b7b4:	bdb0      	pop	{r4, r5, r7, pc}
 801b7b6:	bf00      	nop
 801b7b8:	08021864 	.word	0x08021864
 801b7bc:	08021e28 	.word	0x08021e28
 801b7c0:	080218b8 	.word	0x080218b8
 801b7c4:	08021e48 	.word	0x08021e48
 801b7c8:	08021e68 	.word	0x08021e68
 801b7cc:	20013d30 	.word	0x20013d30
 801b7d0:	08021e8c 	.word	0x08021e8c

0801b7d4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801b7d4:	b5b0      	push	{r4, r5, r7, lr}
 801b7d6:	b084      	sub	sp, #16
 801b7d8:	af00      	add	r7, sp, #0
 801b7da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d106      	bne.n	801b7f0 <tcp_rexmit_rto_prepare+0x1c>
 801b7e2:	4b31      	ldr	r3, [pc, #196]	; (801b8a8 <tcp_rexmit_rto_prepare+0xd4>)
 801b7e4:	f240 6263 	movw	r2, #1635	; 0x663
 801b7e8:	4930      	ldr	r1, [pc, #192]	; (801b8ac <tcp_rexmit_rto_prepare+0xd8>)
 801b7ea:	4831      	ldr	r0, [pc, #196]	; (801b8b0 <tcp_rexmit_rto_prepare+0xdc>)
 801b7ec:	f003 fbca 	bl	801ef84 <iprintf>

  if (pcb->unacked == NULL) {
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	d102      	bne.n	801b7fe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801b7f8:	f06f 0305 	mvn.w	r3, #5
 801b7fc:	e050      	b.n	801b8a0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b802:	60fb      	str	r3, [r7, #12]
 801b804:	e00b      	b.n	801b81e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801b806:	68f8      	ldr	r0, [r7, #12]
 801b808:	f7ff fee4 	bl	801b5d4 <tcp_output_segment_busy>
 801b80c:	4603      	mov	r3, r0
 801b80e:	2b00      	cmp	r3, #0
 801b810:	d002      	beq.n	801b818 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801b812:	f06f 0305 	mvn.w	r3, #5
 801b816:	e043      	b.n	801b8a0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b818:	68fb      	ldr	r3, [r7, #12]
 801b81a:	681b      	ldr	r3, [r3, #0]
 801b81c:	60fb      	str	r3, [r7, #12]
 801b81e:	68fb      	ldr	r3, [r7, #12]
 801b820:	681b      	ldr	r3, [r3, #0]
 801b822:	2b00      	cmp	r3, #0
 801b824:	d1ef      	bne.n	801b806 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801b826:	68f8      	ldr	r0, [r7, #12]
 801b828:	f7ff fed4 	bl	801b5d4 <tcp_output_segment_busy>
 801b82c:	4603      	mov	r3, r0
 801b82e:	2b00      	cmp	r3, #0
 801b830:	d002      	beq.n	801b838 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801b832:	f06f 0305 	mvn.w	r3, #5
 801b836:	e033      	b.n	801b8a0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801b83c:	68fb      	ldr	r3, [r7, #12]
 801b83e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	2200      	movs	r2, #0
 801b84c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	8b5b      	ldrh	r3, [r3, #26]
 801b852:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b856:	b29a      	uxth	r2, r3
 801b858:	687b      	ldr	r3, [r7, #4]
 801b85a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b85c:	68fb      	ldr	r3, [r7, #12]
 801b85e:	68db      	ldr	r3, [r3, #12]
 801b860:	685b      	ldr	r3, [r3, #4]
 801b862:	4618      	mov	r0, r3
 801b864:	f7f8 fd7f 	bl	8014366 <lwip_htonl>
 801b868:	4604      	mov	r4, r0
 801b86a:	68fb      	ldr	r3, [r7, #12]
 801b86c:	891b      	ldrh	r3, [r3, #8]
 801b86e:	461d      	mov	r5, r3
 801b870:	68fb      	ldr	r3, [r7, #12]
 801b872:	68db      	ldr	r3, [r3, #12]
 801b874:	899b      	ldrh	r3, [r3, #12]
 801b876:	b29b      	uxth	r3, r3
 801b878:	4618      	mov	r0, r3
 801b87a:	f7f8 fd5f 	bl	801433c <lwip_htons>
 801b87e:	4603      	mov	r3, r0
 801b880:	b2db      	uxtb	r3, r3
 801b882:	f003 0303 	and.w	r3, r3, #3
 801b886:	2b00      	cmp	r3, #0
 801b888:	d001      	beq.n	801b88e <tcp_rexmit_rto_prepare+0xba>
 801b88a:	2301      	movs	r3, #1
 801b88c:	e000      	b.n	801b890 <tcp_rexmit_rto_prepare+0xbc>
 801b88e:	2300      	movs	r3, #0
 801b890:	442b      	add	r3, r5
 801b892:	18e2      	adds	r2, r4, r3
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	2200      	movs	r2, #0
 801b89c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801b89e:	2300      	movs	r3, #0
}
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	3710      	adds	r7, #16
 801b8a4:	46bd      	mov	sp, r7
 801b8a6:	bdb0      	pop	{r4, r5, r7, pc}
 801b8a8:	08021864 	.word	0x08021864
 801b8ac:	08021ea0 	.word	0x08021ea0
 801b8b0:	080218b8 	.word	0x080218b8

0801b8b4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801b8b4:	b580      	push	{r7, lr}
 801b8b6:	b082      	sub	sp, #8
 801b8b8:	af00      	add	r7, sp, #0
 801b8ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	d106      	bne.n	801b8d0 <tcp_rexmit_rto_commit+0x1c>
 801b8c2:	4b0d      	ldr	r3, [pc, #52]	; (801b8f8 <tcp_rexmit_rto_commit+0x44>)
 801b8c4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801b8c8:	490c      	ldr	r1, [pc, #48]	; (801b8fc <tcp_rexmit_rto_commit+0x48>)
 801b8ca:	480d      	ldr	r0, [pc, #52]	; (801b900 <tcp_rexmit_rto_commit+0x4c>)
 801b8cc:	f003 fb5a 	bl	801ef84 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b8d6:	2bff      	cmp	r3, #255	; 0xff
 801b8d8:	d007      	beq.n	801b8ea <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b8e0:	3301      	adds	r3, #1
 801b8e2:	b2da      	uxtb	r2, r3
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801b8ea:	6878      	ldr	r0, [r7, #4]
 801b8ec:	f7ff fc7a 	bl	801b1e4 <tcp_output>
}
 801b8f0:	bf00      	nop
 801b8f2:	3708      	adds	r7, #8
 801b8f4:	46bd      	mov	sp, r7
 801b8f6:	bd80      	pop	{r7, pc}
 801b8f8:	08021864 	.word	0x08021864
 801b8fc:	08021ec4 	.word	0x08021ec4
 801b900:	080218b8 	.word	0x080218b8

0801b904 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801b904:	b580      	push	{r7, lr}
 801b906:	b082      	sub	sp, #8
 801b908:	af00      	add	r7, sp, #0
 801b90a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d106      	bne.n	801b920 <tcp_rexmit_rto+0x1c>
 801b912:	4b0a      	ldr	r3, [pc, #40]	; (801b93c <tcp_rexmit_rto+0x38>)
 801b914:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801b918:	4909      	ldr	r1, [pc, #36]	; (801b940 <tcp_rexmit_rto+0x3c>)
 801b91a:	480a      	ldr	r0, [pc, #40]	; (801b944 <tcp_rexmit_rto+0x40>)
 801b91c:	f003 fb32 	bl	801ef84 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801b920:	6878      	ldr	r0, [r7, #4]
 801b922:	f7ff ff57 	bl	801b7d4 <tcp_rexmit_rto_prepare>
 801b926:	4603      	mov	r3, r0
 801b928:	2b00      	cmp	r3, #0
 801b92a:	d102      	bne.n	801b932 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801b92c:	6878      	ldr	r0, [r7, #4]
 801b92e:	f7ff ffc1 	bl	801b8b4 <tcp_rexmit_rto_commit>
  }
}
 801b932:	bf00      	nop
 801b934:	3708      	adds	r7, #8
 801b936:	46bd      	mov	sp, r7
 801b938:	bd80      	pop	{r7, pc}
 801b93a:	bf00      	nop
 801b93c:	08021864 	.word	0x08021864
 801b940:	08021ee8 	.word	0x08021ee8
 801b944:	080218b8 	.word	0x080218b8

0801b948 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801b948:	b590      	push	{r4, r7, lr}
 801b94a:	b085      	sub	sp, #20
 801b94c:	af00      	add	r7, sp, #0
 801b94e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	2b00      	cmp	r3, #0
 801b954:	d106      	bne.n	801b964 <tcp_rexmit+0x1c>
 801b956:	4b2f      	ldr	r3, [pc, #188]	; (801ba14 <tcp_rexmit+0xcc>)
 801b958:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801b95c:	492e      	ldr	r1, [pc, #184]	; (801ba18 <tcp_rexmit+0xd0>)
 801b95e:	482f      	ldr	r0, [pc, #188]	; (801ba1c <tcp_rexmit+0xd4>)
 801b960:	f003 fb10 	bl	801ef84 <iprintf>

  if (pcb->unacked == NULL) {
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b968:	2b00      	cmp	r3, #0
 801b96a:	d102      	bne.n	801b972 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801b96c:	f06f 0305 	mvn.w	r3, #5
 801b970:	e04c      	b.n	801ba0c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b976:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801b978:	68b8      	ldr	r0, [r7, #8]
 801b97a:	f7ff fe2b 	bl	801b5d4 <tcp_output_segment_busy>
 801b97e:	4603      	mov	r3, r0
 801b980:	2b00      	cmp	r3, #0
 801b982:	d002      	beq.n	801b98a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801b984:	f06f 0305 	mvn.w	r3, #5
 801b988:	e040      	b.n	801ba0c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801b98a:	68bb      	ldr	r3, [r7, #8]
 801b98c:	681a      	ldr	r2, [r3, #0]
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	336c      	adds	r3, #108	; 0x6c
 801b996:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b998:	e002      	b.n	801b9a0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801b99a:	68fb      	ldr	r3, [r7, #12]
 801b99c:	681b      	ldr	r3, [r3, #0]
 801b99e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d011      	beq.n	801b9cc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b9a8:	68fb      	ldr	r3, [r7, #12]
 801b9aa:	681b      	ldr	r3, [r3, #0]
 801b9ac:	68db      	ldr	r3, [r3, #12]
 801b9ae:	685b      	ldr	r3, [r3, #4]
 801b9b0:	4618      	mov	r0, r3
 801b9b2:	f7f8 fcd8 	bl	8014366 <lwip_htonl>
 801b9b6:	4604      	mov	r4, r0
 801b9b8:	68bb      	ldr	r3, [r7, #8]
 801b9ba:	68db      	ldr	r3, [r3, #12]
 801b9bc:	685b      	ldr	r3, [r3, #4]
 801b9be:	4618      	mov	r0, r3
 801b9c0:	f7f8 fcd1 	bl	8014366 <lwip_htonl>
 801b9c4:	4603      	mov	r3, r0
 801b9c6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801b9c8:	2b00      	cmp	r3, #0
 801b9ca:	dbe6      	blt.n	801b99a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801b9cc:	68fb      	ldr	r3, [r7, #12]
 801b9ce:	681a      	ldr	r2, [r3, #0]
 801b9d0:	68bb      	ldr	r3, [r7, #8]
 801b9d2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801b9d4:	68fb      	ldr	r3, [r7, #12]
 801b9d6:	68ba      	ldr	r2, [r7, #8]
 801b9d8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801b9da:	68bb      	ldr	r3, [r7, #8]
 801b9dc:	681b      	ldr	r3, [r3, #0]
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	d103      	bne.n	801b9ea <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	2200      	movs	r2, #0
 801b9e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b9f0:	2bff      	cmp	r3, #255	; 0xff
 801b9f2:	d007      	beq.n	801ba04 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801b9f4:	687b      	ldr	r3, [r7, #4]
 801b9f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b9fa:	3301      	adds	r3, #1
 801b9fc:	b2da      	uxtb	r2, r3
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	2200      	movs	r2, #0
 801ba08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801ba0a:	2300      	movs	r3, #0
}
 801ba0c:	4618      	mov	r0, r3
 801ba0e:	3714      	adds	r7, #20
 801ba10:	46bd      	mov	sp, r7
 801ba12:	bd90      	pop	{r4, r7, pc}
 801ba14:	08021864 	.word	0x08021864
 801ba18:	08021f04 	.word	0x08021f04
 801ba1c:	080218b8 	.word	0x080218b8

0801ba20 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801ba20:	b580      	push	{r7, lr}
 801ba22:	b082      	sub	sp, #8
 801ba24:	af00      	add	r7, sp, #0
 801ba26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d106      	bne.n	801ba3c <tcp_rexmit_fast+0x1c>
 801ba2e:	4b2f      	ldr	r3, [pc, #188]	; (801baec <tcp_rexmit_fast+0xcc>)
 801ba30:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801ba34:	492e      	ldr	r1, [pc, #184]	; (801baf0 <tcp_rexmit_fast+0xd0>)
 801ba36:	482f      	ldr	r0, [pc, #188]	; (801baf4 <tcp_rexmit_fast+0xd4>)
 801ba38:	f003 faa4 	bl	801ef84 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d04f      	beq.n	801bae4 <tcp_rexmit_fast+0xc4>
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	8b5b      	ldrh	r3, [r3, #26]
 801ba48:	f003 0304 	and.w	r3, r3, #4
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	d149      	bne.n	801bae4 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801ba50:	6878      	ldr	r0, [r7, #4]
 801ba52:	f7ff ff79 	bl	801b948 <tcp_rexmit>
 801ba56:	4603      	mov	r3, r0
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d143      	bne.n	801bae4 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ba68:	429a      	cmp	r2, r3
 801ba6a:	d208      	bcs.n	801ba7e <tcp_rexmit_fast+0x5e>
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	da00      	bge.n	801ba78 <tcp_rexmit_fast+0x58>
 801ba76:	3301      	adds	r3, #1
 801ba78:	105b      	asrs	r3, r3, #1
 801ba7a:	b29b      	uxth	r3, r3
 801ba7c:	e007      	b.n	801ba8e <tcp_rexmit_fast+0x6e>
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	da00      	bge.n	801ba8a <tcp_rexmit_fast+0x6a>
 801ba88:	3301      	adds	r3, #1
 801ba8a:	105b      	asrs	r3, r3, #1
 801ba8c:	b29b      	uxth	r3, r3
 801ba8e:	687a      	ldr	r2, [r7, #4]
 801ba90:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801ba9a:	461a      	mov	r2, r3
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801baa0:	005b      	lsls	r3, r3, #1
 801baa2:	429a      	cmp	r2, r3
 801baa4:	d206      	bcs.n	801bab4 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801baaa:	005b      	lsls	r3, r3, #1
 801baac:	b29a      	uxth	r2, r3
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801babe:	4619      	mov	r1, r3
 801bac0:	0049      	lsls	r1, r1, #1
 801bac2:	440b      	add	r3, r1
 801bac4:	b29b      	uxth	r3, r3
 801bac6:	4413      	add	r3, r2
 801bac8:	b29a      	uxth	r2, r3
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	8b5b      	ldrh	r3, [r3, #26]
 801bad4:	f043 0304 	orr.w	r3, r3, #4
 801bad8:	b29a      	uxth	r2, r3
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	2200      	movs	r2, #0
 801bae2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801bae4:	bf00      	nop
 801bae6:	3708      	adds	r7, #8
 801bae8:	46bd      	mov	sp, r7
 801baea:	bd80      	pop	{r7, pc}
 801baec:	08021864 	.word	0x08021864
 801baf0:	08021f1c 	.word	0x08021f1c
 801baf4:	080218b8 	.word	0x080218b8

0801baf8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801baf8:	b580      	push	{r7, lr}
 801bafa:	b086      	sub	sp, #24
 801bafc:	af00      	add	r7, sp, #0
 801bafe:	60f8      	str	r0, [r7, #12]
 801bb00:	607b      	str	r3, [r7, #4]
 801bb02:	460b      	mov	r3, r1
 801bb04:	817b      	strh	r3, [r7, #10]
 801bb06:	4613      	mov	r3, r2
 801bb08:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801bb0a:	897a      	ldrh	r2, [r7, #10]
 801bb0c:	893b      	ldrh	r3, [r7, #8]
 801bb0e:	4413      	add	r3, r2
 801bb10:	b29b      	uxth	r3, r3
 801bb12:	3314      	adds	r3, #20
 801bb14:	b29b      	uxth	r3, r3
 801bb16:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bb1a:	4619      	mov	r1, r3
 801bb1c:	2022      	movs	r0, #34	; 0x22
 801bb1e:	f7f9 fd0b 	bl	8015538 <pbuf_alloc>
 801bb22:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801bb24:	697b      	ldr	r3, [r7, #20]
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d04e      	beq.n	801bbc8 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801bb2a:	697b      	ldr	r3, [r7, #20]
 801bb2c:	895b      	ldrh	r3, [r3, #10]
 801bb2e:	461a      	mov	r2, r3
 801bb30:	897b      	ldrh	r3, [r7, #10]
 801bb32:	3314      	adds	r3, #20
 801bb34:	429a      	cmp	r2, r3
 801bb36:	da06      	bge.n	801bb46 <tcp_output_alloc_header_common+0x4e>
 801bb38:	4b26      	ldr	r3, [pc, #152]	; (801bbd4 <tcp_output_alloc_header_common+0xdc>)
 801bb3a:	f240 7224 	movw	r2, #1828	; 0x724
 801bb3e:	4926      	ldr	r1, [pc, #152]	; (801bbd8 <tcp_output_alloc_header_common+0xe0>)
 801bb40:	4826      	ldr	r0, [pc, #152]	; (801bbdc <tcp_output_alloc_header_common+0xe4>)
 801bb42:	f003 fa1f 	bl	801ef84 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801bb46:	697b      	ldr	r3, [r7, #20]
 801bb48:	685b      	ldr	r3, [r3, #4]
 801bb4a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801bb4c:	8c3b      	ldrh	r3, [r7, #32]
 801bb4e:	4618      	mov	r0, r3
 801bb50:	f7f8 fbf4 	bl	801433c <lwip_htons>
 801bb54:	4603      	mov	r3, r0
 801bb56:	461a      	mov	r2, r3
 801bb58:	693b      	ldr	r3, [r7, #16]
 801bb5a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801bb5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bb5e:	4618      	mov	r0, r3
 801bb60:	f7f8 fbec 	bl	801433c <lwip_htons>
 801bb64:	4603      	mov	r3, r0
 801bb66:	461a      	mov	r2, r3
 801bb68:	693b      	ldr	r3, [r7, #16]
 801bb6a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801bb6c:	693b      	ldr	r3, [r7, #16]
 801bb6e:	687a      	ldr	r2, [r7, #4]
 801bb70:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801bb72:	68f8      	ldr	r0, [r7, #12]
 801bb74:	f7f8 fbf7 	bl	8014366 <lwip_htonl>
 801bb78:	4602      	mov	r2, r0
 801bb7a:	693b      	ldr	r3, [r7, #16]
 801bb7c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801bb7e:	897b      	ldrh	r3, [r7, #10]
 801bb80:	089b      	lsrs	r3, r3, #2
 801bb82:	b29b      	uxth	r3, r3
 801bb84:	3305      	adds	r3, #5
 801bb86:	b29b      	uxth	r3, r3
 801bb88:	031b      	lsls	r3, r3, #12
 801bb8a:	b29a      	uxth	r2, r3
 801bb8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801bb90:	b29b      	uxth	r3, r3
 801bb92:	4313      	orrs	r3, r2
 801bb94:	b29b      	uxth	r3, r3
 801bb96:	4618      	mov	r0, r3
 801bb98:	f7f8 fbd0 	bl	801433c <lwip_htons>
 801bb9c:	4603      	mov	r3, r0
 801bb9e:	461a      	mov	r2, r3
 801bba0:	693b      	ldr	r3, [r7, #16]
 801bba2:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801bba4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801bba6:	4618      	mov	r0, r3
 801bba8:	f7f8 fbc8 	bl	801433c <lwip_htons>
 801bbac:	4603      	mov	r3, r0
 801bbae:	461a      	mov	r2, r3
 801bbb0:	693b      	ldr	r3, [r7, #16]
 801bbb2:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801bbb4:	693b      	ldr	r3, [r7, #16]
 801bbb6:	2200      	movs	r2, #0
 801bbb8:	741a      	strb	r2, [r3, #16]
 801bbba:	2200      	movs	r2, #0
 801bbbc:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801bbbe:	693b      	ldr	r3, [r7, #16]
 801bbc0:	2200      	movs	r2, #0
 801bbc2:	749a      	strb	r2, [r3, #18]
 801bbc4:	2200      	movs	r2, #0
 801bbc6:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801bbc8:	697b      	ldr	r3, [r7, #20]
}
 801bbca:	4618      	mov	r0, r3
 801bbcc:	3718      	adds	r7, #24
 801bbce:	46bd      	mov	sp, r7
 801bbd0:	bd80      	pop	{r7, pc}
 801bbd2:	bf00      	nop
 801bbd4:	08021864 	.word	0x08021864
 801bbd8:	08021f3c 	.word	0x08021f3c
 801bbdc:	080218b8 	.word	0x080218b8

0801bbe0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801bbe0:	b5b0      	push	{r4, r5, r7, lr}
 801bbe2:	b08a      	sub	sp, #40	; 0x28
 801bbe4:	af04      	add	r7, sp, #16
 801bbe6:	60f8      	str	r0, [r7, #12]
 801bbe8:	607b      	str	r3, [r7, #4]
 801bbea:	460b      	mov	r3, r1
 801bbec:	817b      	strh	r3, [r7, #10]
 801bbee:	4613      	mov	r3, r2
 801bbf0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801bbf2:	68fb      	ldr	r3, [r7, #12]
 801bbf4:	2b00      	cmp	r3, #0
 801bbf6:	d106      	bne.n	801bc06 <tcp_output_alloc_header+0x26>
 801bbf8:	4b15      	ldr	r3, [pc, #84]	; (801bc50 <tcp_output_alloc_header+0x70>)
 801bbfa:	f240 7242 	movw	r2, #1858	; 0x742
 801bbfe:	4915      	ldr	r1, [pc, #84]	; (801bc54 <tcp_output_alloc_header+0x74>)
 801bc00:	4815      	ldr	r0, [pc, #84]	; (801bc58 <tcp_output_alloc_header+0x78>)
 801bc02:	f003 f9bf 	bl	801ef84 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801bc06:	68fb      	ldr	r3, [r7, #12]
 801bc08:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801bc0a:	68fb      	ldr	r3, [r7, #12]
 801bc0c:	8adb      	ldrh	r3, [r3, #22]
 801bc0e:	68fa      	ldr	r2, [r7, #12]
 801bc10:	8b12      	ldrh	r2, [r2, #24]
 801bc12:	68f9      	ldr	r1, [r7, #12]
 801bc14:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801bc16:	893d      	ldrh	r5, [r7, #8]
 801bc18:	897c      	ldrh	r4, [r7, #10]
 801bc1a:	9103      	str	r1, [sp, #12]
 801bc1c:	2110      	movs	r1, #16
 801bc1e:	9102      	str	r1, [sp, #8]
 801bc20:	9201      	str	r2, [sp, #4]
 801bc22:	9300      	str	r3, [sp, #0]
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	462a      	mov	r2, r5
 801bc28:	4621      	mov	r1, r4
 801bc2a:	f7ff ff65 	bl	801baf8 <tcp_output_alloc_header_common>
 801bc2e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801bc30:	697b      	ldr	r3, [r7, #20]
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d006      	beq.n	801bc44 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801bc36:	68fb      	ldr	r3, [r7, #12]
 801bc38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc3a:	68fa      	ldr	r2, [r7, #12]
 801bc3c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801bc3e:	441a      	add	r2, r3
 801bc40:	68fb      	ldr	r3, [r7, #12]
 801bc42:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801bc44:	697b      	ldr	r3, [r7, #20]
}
 801bc46:	4618      	mov	r0, r3
 801bc48:	3718      	adds	r7, #24
 801bc4a:	46bd      	mov	sp, r7
 801bc4c:	bdb0      	pop	{r4, r5, r7, pc}
 801bc4e:	bf00      	nop
 801bc50:	08021864 	.word	0x08021864
 801bc54:	08021f6c 	.word	0x08021f6c
 801bc58:	080218b8 	.word	0x080218b8

0801bc5c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801bc5c:	b580      	push	{r7, lr}
 801bc5e:	b088      	sub	sp, #32
 801bc60:	af00      	add	r7, sp, #0
 801bc62:	60f8      	str	r0, [r7, #12]
 801bc64:	60b9      	str	r1, [r7, #8]
 801bc66:	4611      	mov	r1, r2
 801bc68:	461a      	mov	r2, r3
 801bc6a:	460b      	mov	r3, r1
 801bc6c:	71fb      	strb	r3, [r7, #7]
 801bc6e:	4613      	mov	r3, r2
 801bc70:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801bc72:	2300      	movs	r3, #0
 801bc74:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801bc76:	68bb      	ldr	r3, [r7, #8]
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	d106      	bne.n	801bc8a <tcp_output_fill_options+0x2e>
 801bc7c:	4b13      	ldr	r3, [pc, #76]	; (801bccc <tcp_output_fill_options+0x70>)
 801bc7e:	f240 7256 	movw	r2, #1878	; 0x756
 801bc82:	4913      	ldr	r1, [pc, #76]	; (801bcd0 <tcp_output_fill_options+0x74>)
 801bc84:	4813      	ldr	r0, [pc, #76]	; (801bcd4 <tcp_output_fill_options+0x78>)
 801bc86:	f003 f97d 	bl	801ef84 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801bc8a:	68bb      	ldr	r3, [r7, #8]
 801bc8c:	685b      	ldr	r3, [r3, #4]
 801bc8e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801bc90:	69bb      	ldr	r3, [r7, #24]
 801bc92:	3314      	adds	r3, #20
 801bc94:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801bc96:	69bb      	ldr	r3, [r7, #24]
 801bc98:	f103 0214 	add.w	r2, r3, #20
 801bc9c:	8bfb      	ldrh	r3, [r7, #30]
 801bc9e:	009b      	lsls	r3, r3, #2
 801bca0:	4619      	mov	r1, r3
 801bca2:	79fb      	ldrb	r3, [r7, #7]
 801bca4:	009b      	lsls	r3, r3, #2
 801bca6:	f003 0304 	and.w	r3, r3, #4
 801bcaa:	440b      	add	r3, r1
 801bcac:	4413      	add	r3, r2
 801bcae:	697a      	ldr	r2, [r7, #20]
 801bcb0:	429a      	cmp	r2, r3
 801bcb2:	d006      	beq.n	801bcc2 <tcp_output_fill_options+0x66>
 801bcb4:	4b05      	ldr	r3, [pc, #20]	; (801bccc <tcp_output_fill_options+0x70>)
 801bcb6:	f240 7275 	movw	r2, #1909	; 0x775
 801bcba:	4907      	ldr	r1, [pc, #28]	; (801bcd8 <tcp_output_fill_options+0x7c>)
 801bcbc:	4805      	ldr	r0, [pc, #20]	; (801bcd4 <tcp_output_fill_options+0x78>)
 801bcbe:	f003 f961 	bl	801ef84 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801bcc2:	bf00      	nop
 801bcc4:	3720      	adds	r7, #32
 801bcc6:	46bd      	mov	sp, r7
 801bcc8:	bd80      	pop	{r7, pc}
 801bcca:	bf00      	nop
 801bccc:	08021864 	.word	0x08021864
 801bcd0:	08021f94 	.word	0x08021f94
 801bcd4:	080218b8 	.word	0x080218b8
 801bcd8:	08021e8c 	.word	0x08021e8c

0801bcdc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801bcdc:	b580      	push	{r7, lr}
 801bcde:	b08a      	sub	sp, #40	; 0x28
 801bce0:	af04      	add	r7, sp, #16
 801bce2:	60f8      	str	r0, [r7, #12]
 801bce4:	60b9      	str	r1, [r7, #8]
 801bce6:	607a      	str	r2, [r7, #4]
 801bce8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801bcea:	68bb      	ldr	r3, [r7, #8]
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d106      	bne.n	801bcfe <tcp_output_control_segment+0x22>
 801bcf0:	4b1c      	ldr	r3, [pc, #112]	; (801bd64 <tcp_output_control_segment+0x88>)
 801bcf2:	f240 7287 	movw	r2, #1927	; 0x787
 801bcf6:	491c      	ldr	r1, [pc, #112]	; (801bd68 <tcp_output_control_segment+0x8c>)
 801bcf8:	481c      	ldr	r0, [pc, #112]	; (801bd6c <tcp_output_control_segment+0x90>)
 801bcfa:	f003 f943 	bl	801ef84 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801bcfe:	683a      	ldr	r2, [r7, #0]
 801bd00:	6879      	ldr	r1, [r7, #4]
 801bd02:	68f8      	ldr	r0, [r7, #12]
 801bd04:	f7fe fad4 	bl	801a2b0 <tcp_route>
 801bd08:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801bd0a:	693b      	ldr	r3, [r7, #16]
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d102      	bne.n	801bd16 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801bd10:	23fc      	movs	r3, #252	; 0xfc
 801bd12:	75fb      	strb	r3, [r7, #23]
 801bd14:	e01c      	b.n	801bd50 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801bd16:	68fb      	ldr	r3, [r7, #12]
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	d006      	beq.n	801bd2a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801bd1c:	68fb      	ldr	r3, [r7, #12]
 801bd1e:	7adb      	ldrb	r3, [r3, #11]
 801bd20:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801bd22:	68fb      	ldr	r3, [r7, #12]
 801bd24:	7a9b      	ldrb	r3, [r3, #10]
 801bd26:	757b      	strb	r3, [r7, #21]
 801bd28:	e003      	b.n	801bd32 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801bd2a:	23ff      	movs	r3, #255	; 0xff
 801bd2c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801bd2e:	2300      	movs	r3, #0
 801bd30:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801bd32:	7dba      	ldrb	r2, [r7, #22]
 801bd34:	693b      	ldr	r3, [r7, #16]
 801bd36:	9302      	str	r3, [sp, #8]
 801bd38:	2306      	movs	r3, #6
 801bd3a:	9301      	str	r3, [sp, #4]
 801bd3c:	7d7b      	ldrb	r3, [r7, #21]
 801bd3e:	9300      	str	r3, [sp, #0]
 801bd40:	4613      	mov	r3, r2
 801bd42:	683a      	ldr	r2, [r7, #0]
 801bd44:	6879      	ldr	r1, [r7, #4]
 801bd46:	68b8      	ldr	r0, [r7, #8]
 801bd48:	f001 ff9c 	bl	801dc84 <ip4_output_if>
 801bd4c:	4603      	mov	r3, r0
 801bd4e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801bd50:	68b8      	ldr	r0, [r7, #8]
 801bd52:	f7f9 fed1 	bl	8015af8 <pbuf_free>
  return err;
 801bd56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bd5a:	4618      	mov	r0, r3
 801bd5c:	3718      	adds	r7, #24
 801bd5e:	46bd      	mov	sp, r7
 801bd60:	bd80      	pop	{r7, pc}
 801bd62:	bf00      	nop
 801bd64:	08021864 	.word	0x08021864
 801bd68:	08021fbc 	.word	0x08021fbc
 801bd6c:	080218b8 	.word	0x080218b8

0801bd70 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801bd70:	b590      	push	{r4, r7, lr}
 801bd72:	b08b      	sub	sp, #44	; 0x2c
 801bd74:	af04      	add	r7, sp, #16
 801bd76:	60f8      	str	r0, [r7, #12]
 801bd78:	60b9      	str	r1, [r7, #8]
 801bd7a:	607a      	str	r2, [r7, #4]
 801bd7c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801bd7e:	683b      	ldr	r3, [r7, #0]
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	d106      	bne.n	801bd92 <tcp_rst+0x22>
 801bd84:	4b1f      	ldr	r3, [pc, #124]	; (801be04 <tcp_rst+0x94>)
 801bd86:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801bd8a:	491f      	ldr	r1, [pc, #124]	; (801be08 <tcp_rst+0x98>)
 801bd8c:	481f      	ldr	r0, [pc, #124]	; (801be0c <tcp_rst+0x9c>)
 801bd8e:	f003 f8f9 	bl	801ef84 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801bd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	d106      	bne.n	801bda6 <tcp_rst+0x36>
 801bd98:	4b1a      	ldr	r3, [pc, #104]	; (801be04 <tcp_rst+0x94>)
 801bd9a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801bd9e:	491c      	ldr	r1, [pc, #112]	; (801be10 <tcp_rst+0xa0>)
 801bda0:	481a      	ldr	r0, [pc, #104]	; (801be0c <tcp_rst+0x9c>)
 801bda2:	f003 f8ef 	bl	801ef84 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801bda6:	2300      	movs	r3, #0
 801bda8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801bdaa:	f246 0308 	movw	r3, #24584	; 0x6008
 801bdae:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801bdb0:	7dfb      	ldrb	r3, [r7, #23]
 801bdb2:	b29c      	uxth	r4, r3
 801bdb4:	68b8      	ldr	r0, [r7, #8]
 801bdb6:	f7f8 fad6 	bl	8014366 <lwip_htonl>
 801bdba:	4602      	mov	r2, r0
 801bdbc:	8abb      	ldrh	r3, [r7, #20]
 801bdbe:	9303      	str	r3, [sp, #12]
 801bdc0:	2314      	movs	r3, #20
 801bdc2:	9302      	str	r3, [sp, #8]
 801bdc4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801bdc6:	9301      	str	r3, [sp, #4]
 801bdc8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801bdca:	9300      	str	r3, [sp, #0]
 801bdcc:	4613      	mov	r3, r2
 801bdce:	2200      	movs	r2, #0
 801bdd0:	4621      	mov	r1, r4
 801bdd2:	6878      	ldr	r0, [r7, #4]
 801bdd4:	f7ff fe90 	bl	801baf8 <tcp_output_alloc_header_common>
 801bdd8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801bdda:	693b      	ldr	r3, [r7, #16]
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	d00c      	beq.n	801bdfa <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801bde0:	7dfb      	ldrb	r3, [r7, #23]
 801bde2:	2200      	movs	r2, #0
 801bde4:	6939      	ldr	r1, [r7, #16]
 801bde6:	68f8      	ldr	r0, [r7, #12]
 801bde8:	f7ff ff38 	bl	801bc5c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801bdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdee:	683a      	ldr	r2, [r7, #0]
 801bdf0:	6939      	ldr	r1, [r7, #16]
 801bdf2:	68f8      	ldr	r0, [r7, #12]
 801bdf4:	f7ff ff72 	bl	801bcdc <tcp_output_control_segment>
 801bdf8:	e000      	b.n	801bdfc <tcp_rst+0x8c>
    return;
 801bdfa:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801bdfc:	371c      	adds	r7, #28
 801bdfe:	46bd      	mov	sp, r7
 801be00:	bd90      	pop	{r4, r7, pc}
 801be02:	bf00      	nop
 801be04:	08021864 	.word	0x08021864
 801be08:	08021fe8 	.word	0x08021fe8
 801be0c:	080218b8 	.word	0x080218b8
 801be10:	08022004 	.word	0x08022004

0801be14 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801be14:	b590      	push	{r4, r7, lr}
 801be16:	b087      	sub	sp, #28
 801be18:	af00      	add	r7, sp, #0
 801be1a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801be1c:	2300      	movs	r3, #0
 801be1e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801be20:	2300      	movs	r3, #0
 801be22:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	2b00      	cmp	r3, #0
 801be28:	d106      	bne.n	801be38 <tcp_send_empty_ack+0x24>
 801be2a:	4b28      	ldr	r3, [pc, #160]	; (801becc <tcp_send_empty_ack+0xb8>)
 801be2c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801be30:	4927      	ldr	r1, [pc, #156]	; (801bed0 <tcp_send_empty_ack+0xbc>)
 801be32:	4828      	ldr	r0, [pc, #160]	; (801bed4 <tcp_send_empty_ack+0xc0>)
 801be34:	f003 f8a6 	bl	801ef84 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801be38:	7dfb      	ldrb	r3, [r7, #23]
 801be3a:	009b      	lsls	r3, r3, #2
 801be3c:	b2db      	uxtb	r3, r3
 801be3e:	f003 0304 	and.w	r3, r3, #4
 801be42:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801be44:	7d7b      	ldrb	r3, [r7, #21]
 801be46:	b29c      	uxth	r4, r3
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801be4c:	4618      	mov	r0, r3
 801be4e:	f7f8 fa8a 	bl	8014366 <lwip_htonl>
 801be52:	4603      	mov	r3, r0
 801be54:	2200      	movs	r2, #0
 801be56:	4621      	mov	r1, r4
 801be58:	6878      	ldr	r0, [r7, #4]
 801be5a:	f7ff fec1 	bl	801bbe0 <tcp_output_alloc_header>
 801be5e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801be60:	693b      	ldr	r3, [r7, #16]
 801be62:	2b00      	cmp	r3, #0
 801be64:	d109      	bne.n	801be7a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801be66:	687b      	ldr	r3, [r7, #4]
 801be68:	8b5b      	ldrh	r3, [r3, #26]
 801be6a:	f043 0303 	orr.w	r3, r3, #3
 801be6e:	b29a      	uxth	r2, r3
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801be74:	f06f 0301 	mvn.w	r3, #1
 801be78:	e023      	b.n	801bec2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801be7a:	7dbb      	ldrb	r3, [r7, #22]
 801be7c:	7dfa      	ldrb	r2, [r7, #23]
 801be7e:	6939      	ldr	r1, [r7, #16]
 801be80:	6878      	ldr	r0, [r7, #4]
 801be82:	f7ff feeb 	bl	801bc5c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801be86:	687a      	ldr	r2, [r7, #4]
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	3304      	adds	r3, #4
 801be8c:	6939      	ldr	r1, [r7, #16]
 801be8e:	6878      	ldr	r0, [r7, #4]
 801be90:	f7ff ff24 	bl	801bcdc <tcp_output_control_segment>
 801be94:	4603      	mov	r3, r0
 801be96:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801be98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801be9c:	2b00      	cmp	r3, #0
 801be9e:	d007      	beq.n	801beb0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	8b5b      	ldrh	r3, [r3, #26]
 801bea4:	f043 0303 	orr.w	r3, r3, #3
 801bea8:	b29a      	uxth	r2, r3
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	835a      	strh	r2, [r3, #26]
 801beae:	e006      	b.n	801bebe <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	8b5b      	ldrh	r3, [r3, #26]
 801beb4:	f023 0303 	bic.w	r3, r3, #3
 801beb8:	b29a      	uxth	r2, r3
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801bebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bec2:	4618      	mov	r0, r3
 801bec4:	371c      	adds	r7, #28
 801bec6:	46bd      	mov	sp, r7
 801bec8:	bd90      	pop	{r4, r7, pc}
 801beca:	bf00      	nop
 801becc:	08021864 	.word	0x08021864
 801bed0:	08022020 	.word	0x08022020
 801bed4:	080218b8 	.word	0x080218b8

0801bed8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801bed8:	b590      	push	{r4, r7, lr}
 801beda:	b087      	sub	sp, #28
 801bedc:	af00      	add	r7, sp, #0
 801bede:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801bee0:	2300      	movs	r3, #0
 801bee2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801bee4:	687b      	ldr	r3, [r7, #4]
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d106      	bne.n	801bef8 <tcp_keepalive+0x20>
 801beea:	4b18      	ldr	r3, [pc, #96]	; (801bf4c <tcp_keepalive+0x74>)
 801beec:	f640 0224 	movw	r2, #2084	; 0x824
 801bef0:	4917      	ldr	r1, [pc, #92]	; (801bf50 <tcp_keepalive+0x78>)
 801bef2:	4818      	ldr	r0, [pc, #96]	; (801bf54 <tcp_keepalive+0x7c>)
 801bef4:	f003 f846 	bl	801ef84 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801bef8:	7dfb      	ldrb	r3, [r7, #23]
 801befa:	b29c      	uxth	r4, r3
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bf00:	3b01      	subs	r3, #1
 801bf02:	4618      	mov	r0, r3
 801bf04:	f7f8 fa2f 	bl	8014366 <lwip_htonl>
 801bf08:	4603      	mov	r3, r0
 801bf0a:	2200      	movs	r2, #0
 801bf0c:	4621      	mov	r1, r4
 801bf0e:	6878      	ldr	r0, [r7, #4]
 801bf10:	f7ff fe66 	bl	801bbe0 <tcp_output_alloc_header>
 801bf14:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801bf16:	693b      	ldr	r3, [r7, #16]
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	d102      	bne.n	801bf22 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801bf1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bf20:	e010      	b.n	801bf44 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801bf22:	7dfb      	ldrb	r3, [r7, #23]
 801bf24:	2200      	movs	r2, #0
 801bf26:	6939      	ldr	r1, [r7, #16]
 801bf28:	6878      	ldr	r0, [r7, #4]
 801bf2a:	f7ff fe97 	bl	801bc5c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801bf2e:	687a      	ldr	r2, [r7, #4]
 801bf30:	687b      	ldr	r3, [r7, #4]
 801bf32:	3304      	adds	r3, #4
 801bf34:	6939      	ldr	r1, [r7, #16]
 801bf36:	6878      	ldr	r0, [r7, #4]
 801bf38:	f7ff fed0 	bl	801bcdc <tcp_output_control_segment>
 801bf3c:	4603      	mov	r3, r0
 801bf3e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801bf40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bf44:	4618      	mov	r0, r3
 801bf46:	371c      	adds	r7, #28
 801bf48:	46bd      	mov	sp, r7
 801bf4a:	bd90      	pop	{r4, r7, pc}
 801bf4c:	08021864 	.word	0x08021864
 801bf50:	08022040 	.word	0x08022040
 801bf54:	080218b8 	.word	0x080218b8

0801bf58 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801bf58:	b590      	push	{r4, r7, lr}
 801bf5a:	b08b      	sub	sp, #44	; 0x2c
 801bf5c:	af00      	add	r7, sp, #0
 801bf5e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801bf60:	2300      	movs	r3, #0
 801bf62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	d106      	bne.n	801bf7a <tcp_zero_window_probe+0x22>
 801bf6c:	4b4c      	ldr	r3, [pc, #304]	; (801c0a0 <tcp_zero_window_probe+0x148>)
 801bf6e:	f640 024f 	movw	r2, #2127	; 0x84f
 801bf72:	494c      	ldr	r1, [pc, #304]	; (801c0a4 <tcp_zero_window_probe+0x14c>)
 801bf74:	484c      	ldr	r0, [pc, #304]	; (801c0a8 <tcp_zero_window_probe+0x150>)
 801bf76:	f003 f805 	bl	801ef84 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bf7e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801bf80:	6a3b      	ldr	r3, [r7, #32]
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	d101      	bne.n	801bf8a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801bf86:	2300      	movs	r3, #0
 801bf88:	e086      	b.n	801c098 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801bf90:	2bff      	cmp	r3, #255	; 0xff
 801bf92:	d007      	beq.n	801bfa4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801bf9a:	3301      	adds	r3, #1
 801bf9c:	b2da      	uxtb	r2, r3
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801bfa4:	6a3b      	ldr	r3, [r7, #32]
 801bfa6:	68db      	ldr	r3, [r3, #12]
 801bfa8:	899b      	ldrh	r3, [r3, #12]
 801bfaa:	b29b      	uxth	r3, r3
 801bfac:	4618      	mov	r0, r3
 801bfae:	f7f8 f9c5 	bl	801433c <lwip_htons>
 801bfb2:	4603      	mov	r3, r0
 801bfb4:	b2db      	uxtb	r3, r3
 801bfb6:	f003 0301 	and.w	r3, r3, #1
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d005      	beq.n	801bfca <tcp_zero_window_probe+0x72>
 801bfbe:	6a3b      	ldr	r3, [r7, #32]
 801bfc0:	891b      	ldrh	r3, [r3, #8]
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d101      	bne.n	801bfca <tcp_zero_window_probe+0x72>
 801bfc6:	2301      	movs	r3, #1
 801bfc8:	e000      	b.n	801bfcc <tcp_zero_window_probe+0x74>
 801bfca:	2300      	movs	r3, #0
 801bfcc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801bfce:	7ffb      	ldrb	r3, [r7, #31]
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	bf0c      	ite	eq
 801bfd4:	2301      	moveq	r3, #1
 801bfd6:	2300      	movne	r3, #0
 801bfd8:	b2db      	uxtb	r3, r3
 801bfda:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801bfdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bfe0:	b299      	uxth	r1, r3
 801bfe2:	6a3b      	ldr	r3, [r7, #32]
 801bfe4:	68db      	ldr	r3, [r3, #12]
 801bfe6:	685b      	ldr	r3, [r3, #4]
 801bfe8:	8bba      	ldrh	r2, [r7, #28]
 801bfea:	6878      	ldr	r0, [r7, #4]
 801bfec:	f7ff fdf8 	bl	801bbe0 <tcp_output_alloc_header>
 801bff0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801bff2:	69bb      	ldr	r3, [r7, #24]
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d102      	bne.n	801bffe <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801bff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bffc:	e04c      	b.n	801c098 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801bffe:	69bb      	ldr	r3, [r7, #24]
 801c000:	685b      	ldr	r3, [r3, #4]
 801c002:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801c004:	7ffb      	ldrb	r3, [r7, #31]
 801c006:	2b00      	cmp	r3, #0
 801c008:	d011      	beq.n	801c02e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801c00a:	697b      	ldr	r3, [r7, #20]
 801c00c:	899b      	ldrh	r3, [r3, #12]
 801c00e:	b29b      	uxth	r3, r3
 801c010:	b21b      	sxth	r3, r3
 801c012:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c016:	b21c      	sxth	r4, r3
 801c018:	2011      	movs	r0, #17
 801c01a:	f7f8 f98f 	bl	801433c <lwip_htons>
 801c01e:	4603      	mov	r3, r0
 801c020:	b21b      	sxth	r3, r3
 801c022:	4323      	orrs	r3, r4
 801c024:	b21b      	sxth	r3, r3
 801c026:	b29a      	uxth	r2, r3
 801c028:	697b      	ldr	r3, [r7, #20]
 801c02a:	819a      	strh	r2, [r3, #12]
 801c02c:	e010      	b.n	801c050 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801c02e:	69bb      	ldr	r3, [r7, #24]
 801c030:	685b      	ldr	r3, [r3, #4]
 801c032:	3314      	adds	r3, #20
 801c034:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801c036:	6a3b      	ldr	r3, [r7, #32]
 801c038:	6858      	ldr	r0, [r3, #4]
 801c03a:	6a3b      	ldr	r3, [r7, #32]
 801c03c:	685b      	ldr	r3, [r3, #4]
 801c03e:	891a      	ldrh	r2, [r3, #8]
 801c040:	6a3b      	ldr	r3, [r7, #32]
 801c042:	891b      	ldrh	r3, [r3, #8]
 801c044:	1ad3      	subs	r3, r2, r3
 801c046:	b29b      	uxth	r3, r3
 801c048:	2201      	movs	r2, #1
 801c04a:	6939      	ldr	r1, [r7, #16]
 801c04c:	f7f9 ff4a 	bl	8015ee4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801c050:	6a3b      	ldr	r3, [r7, #32]
 801c052:	68db      	ldr	r3, [r3, #12]
 801c054:	685b      	ldr	r3, [r3, #4]
 801c056:	4618      	mov	r0, r3
 801c058:	f7f8 f985 	bl	8014366 <lwip_htonl>
 801c05c:	4603      	mov	r3, r0
 801c05e:	3301      	adds	r3, #1
 801c060:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c062:	687b      	ldr	r3, [r7, #4]
 801c064:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c066:	68fb      	ldr	r3, [r7, #12]
 801c068:	1ad3      	subs	r3, r2, r3
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	da02      	bge.n	801c074 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	68fa      	ldr	r2, [r7, #12]
 801c072:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c078:	2200      	movs	r2, #0
 801c07a:	69b9      	ldr	r1, [r7, #24]
 801c07c:	6878      	ldr	r0, [r7, #4]
 801c07e:	f7ff fded 	bl	801bc5c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c082:	687a      	ldr	r2, [r7, #4]
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	3304      	adds	r3, #4
 801c088:	69b9      	ldr	r1, [r7, #24]
 801c08a:	6878      	ldr	r0, [r7, #4]
 801c08c:	f7ff fe26 	bl	801bcdc <tcp_output_control_segment>
 801c090:	4603      	mov	r3, r0
 801c092:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c094:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801c098:	4618      	mov	r0, r3
 801c09a:	372c      	adds	r7, #44	; 0x2c
 801c09c:	46bd      	mov	sp, r7
 801c09e:	bd90      	pop	{r4, r7, pc}
 801c0a0:	08021864 	.word	0x08021864
 801c0a4:	0802205c 	.word	0x0802205c
 801c0a8:	080218b8 	.word	0x080218b8

0801c0ac <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801c0ac:	b580      	push	{r7, lr}
 801c0ae:	b082      	sub	sp, #8
 801c0b0:	af00      	add	r7, sp, #0
 801c0b2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801c0b4:	f7fa f804 	bl	80160c0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c0b8:	4b0a      	ldr	r3, [pc, #40]	; (801c0e4 <tcpip_tcp_timer+0x38>)
 801c0ba:	681b      	ldr	r3, [r3, #0]
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d103      	bne.n	801c0c8 <tcpip_tcp_timer+0x1c>
 801c0c0:	4b09      	ldr	r3, [pc, #36]	; (801c0e8 <tcpip_tcp_timer+0x3c>)
 801c0c2:	681b      	ldr	r3, [r3, #0]
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	d005      	beq.n	801c0d4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c0c8:	2200      	movs	r2, #0
 801c0ca:	4908      	ldr	r1, [pc, #32]	; (801c0ec <tcpip_tcp_timer+0x40>)
 801c0cc:	20fa      	movs	r0, #250	; 0xfa
 801c0ce:	f000 f8f1 	bl	801c2b4 <sys_timeout>
 801c0d2:	e002      	b.n	801c0da <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801c0d4:	4b06      	ldr	r3, [pc, #24]	; (801c0f0 <tcpip_tcp_timer+0x44>)
 801c0d6:	2200      	movs	r2, #0
 801c0d8:	601a      	str	r2, [r3, #0]
  }
}
 801c0da:	bf00      	nop
 801c0dc:	3708      	adds	r7, #8
 801c0de:	46bd      	mov	sp, r7
 801c0e0:	bd80      	pop	{r7, pc}
 801c0e2:	bf00      	nop
 801c0e4:	20013d2c 	.word	0x20013d2c
 801c0e8:	20013d3c 	.word	0x20013d3c
 801c0ec:	0801c0ad 	.word	0x0801c0ad
 801c0f0:	20004564 	.word	0x20004564

0801c0f4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801c0f4:	b580      	push	{r7, lr}
 801c0f6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c0f8:	4b0a      	ldr	r3, [pc, #40]	; (801c124 <tcp_timer_needed+0x30>)
 801c0fa:	681b      	ldr	r3, [r3, #0]
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	d10f      	bne.n	801c120 <tcp_timer_needed+0x2c>
 801c100:	4b09      	ldr	r3, [pc, #36]	; (801c128 <tcp_timer_needed+0x34>)
 801c102:	681b      	ldr	r3, [r3, #0]
 801c104:	2b00      	cmp	r3, #0
 801c106:	d103      	bne.n	801c110 <tcp_timer_needed+0x1c>
 801c108:	4b08      	ldr	r3, [pc, #32]	; (801c12c <tcp_timer_needed+0x38>)
 801c10a:	681b      	ldr	r3, [r3, #0]
 801c10c:	2b00      	cmp	r3, #0
 801c10e:	d007      	beq.n	801c120 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801c110:	4b04      	ldr	r3, [pc, #16]	; (801c124 <tcp_timer_needed+0x30>)
 801c112:	2201      	movs	r2, #1
 801c114:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c116:	2200      	movs	r2, #0
 801c118:	4905      	ldr	r1, [pc, #20]	; (801c130 <tcp_timer_needed+0x3c>)
 801c11a:	20fa      	movs	r0, #250	; 0xfa
 801c11c:	f000 f8ca 	bl	801c2b4 <sys_timeout>
  }
}
 801c120:	bf00      	nop
 801c122:	bd80      	pop	{r7, pc}
 801c124:	20004564 	.word	0x20004564
 801c128:	20013d2c 	.word	0x20013d2c
 801c12c:	20013d3c 	.word	0x20013d3c
 801c130:	0801c0ad 	.word	0x0801c0ad

0801c134 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801c134:	b580      	push	{r7, lr}
 801c136:	b086      	sub	sp, #24
 801c138:	af00      	add	r7, sp, #0
 801c13a:	60f8      	str	r0, [r7, #12]
 801c13c:	60b9      	str	r1, [r7, #8]
 801c13e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c140:	200a      	movs	r0, #10
 801c142:	f7f8 fde7 	bl	8014d14 <memp_malloc>
 801c146:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801c148:	693b      	ldr	r3, [r7, #16]
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	d109      	bne.n	801c162 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c14e:	693b      	ldr	r3, [r7, #16]
 801c150:	2b00      	cmp	r3, #0
 801c152:	d151      	bne.n	801c1f8 <sys_timeout_abs+0xc4>
 801c154:	4b2a      	ldr	r3, [pc, #168]	; (801c200 <sys_timeout_abs+0xcc>)
 801c156:	22be      	movs	r2, #190	; 0xbe
 801c158:	492a      	ldr	r1, [pc, #168]	; (801c204 <sys_timeout_abs+0xd0>)
 801c15a:	482b      	ldr	r0, [pc, #172]	; (801c208 <sys_timeout_abs+0xd4>)
 801c15c:	f002 ff12 	bl	801ef84 <iprintf>
    return;
 801c160:	e04a      	b.n	801c1f8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801c162:	693b      	ldr	r3, [r7, #16]
 801c164:	2200      	movs	r2, #0
 801c166:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801c168:	693b      	ldr	r3, [r7, #16]
 801c16a:	68ba      	ldr	r2, [r7, #8]
 801c16c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801c16e:	693b      	ldr	r3, [r7, #16]
 801c170:	687a      	ldr	r2, [r7, #4]
 801c172:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801c174:	693b      	ldr	r3, [r7, #16]
 801c176:	68fa      	ldr	r2, [r7, #12]
 801c178:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801c17a:	4b24      	ldr	r3, [pc, #144]	; (801c20c <sys_timeout_abs+0xd8>)
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d103      	bne.n	801c18a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801c182:	4a22      	ldr	r2, [pc, #136]	; (801c20c <sys_timeout_abs+0xd8>)
 801c184:	693b      	ldr	r3, [r7, #16]
 801c186:	6013      	str	r3, [r2, #0]
    return;
 801c188:	e037      	b.n	801c1fa <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801c18a:	693b      	ldr	r3, [r7, #16]
 801c18c:	685a      	ldr	r2, [r3, #4]
 801c18e:	4b1f      	ldr	r3, [pc, #124]	; (801c20c <sys_timeout_abs+0xd8>)
 801c190:	681b      	ldr	r3, [r3, #0]
 801c192:	685b      	ldr	r3, [r3, #4]
 801c194:	1ad3      	subs	r3, r2, r3
 801c196:	0fdb      	lsrs	r3, r3, #31
 801c198:	f003 0301 	and.w	r3, r3, #1
 801c19c:	b2db      	uxtb	r3, r3
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	d007      	beq.n	801c1b2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801c1a2:	4b1a      	ldr	r3, [pc, #104]	; (801c20c <sys_timeout_abs+0xd8>)
 801c1a4:	681a      	ldr	r2, [r3, #0]
 801c1a6:	693b      	ldr	r3, [r7, #16]
 801c1a8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801c1aa:	4a18      	ldr	r2, [pc, #96]	; (801c20c <sys_timeout_abs+0xd8>)
 801c1ac:	693b      	ldr	r3, [r7, #16]
 801c1ae:	6013      	str	r3, [r2, #0]
 801c1b0:	e023      	b.n	801c1fa <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801c1b2:	4b16      	ldr	r3, [pc, #88]	; (801c20c <sys_timeout_abs+0xd8>)
 801c1b4:	681b      	ldr	r3, [r3, #0]
 801c1b6:	617b      	str	r3, [r7, #20]
 801c1b8:	e01a      	b.n	801c1f0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801c1ba:	697b      	ldr	r3, [r7, #20]
 801c1bc:	681b      	ldr	r3, [r3, #0]
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d00b      	beq.n	801c1da <sys_timeout_abs+0xa6>
 801c1c2:	693b      	ldr	r3, [r7, #16]
 801c1c4:	685a      	ldr	r2, [r3, #4]
 801c1c6:	697b      	ldr	r3, [r7, #20]
 801c1c8:	681b      	ldr	r3, [r3, #0]
 801c1ca:	685b      	ldr	r3, [r3, #4]
 801c1cc:	1ad3      	subs	r3, r2, r3
 801c1ce:	0fdb      	lsrs	r3, r3, #31
 801c1d0:	f003 0301 	and.w	r3, r3, #1
 801c1d4:	b2db      	uxtb	r3, r3
 801c1d6:	2b00      	cmp	r3, #0
 801c1d8:	d007      	beq.n	801c1ea <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801c1da:	697b      	ldr	r3, [r7, #20]
 801c1dc:	681a      	ldr	r2, [r3, #0]
 801c1de:	693b      	ldr	r3, [r7, #16]
 801c1e0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801c1e2:	697b      	ldr	r3, [r7, #20]
 801c1e4:	693a      	ldr	r2, [r7, #16]
 801c1e6:	601a      	str	r2, [r3, #0]
        break;
 801c1e8:	e007      	b.n	801c1fa <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801c1ea:	697b      	ldr	r3, [r7, #20]
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	617b      	str	r3, [r7, #20]
 801c1f0:	697b      	ldr	r3, [r7, #20]
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d1e1      	bne.n	801c1ba <sys_timeout_abs+0x86>
 801c1f6:	e000      	b.n	801c1fa <sys_timeout_abs+0xc6>
    return;
 801c1f8:	bf00      	nop
      }
    }
  }
}
 801c1fa:	3718      	adds	r7, #24
 801c1fc:	46bd      	mov	sp, r7
 801c1fe:	bd80      	pop	{r7, pc}
 801c200:	08022080 	.word	0x08022080
 801c204:	080220b4 	.word	0x080220b4
 801c208:	080220f4 	.word	0x080220f4
 801c20c:	2000455c 	.word	0x2000455c

0801c210 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801c210:	b580      	push	{r7, lr}
 801c212:	b086      	sub	sp, #24
 801c214:	af00      	add	r7, sp, #0
 801c216:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801c21c:	697b      	ldr	r3, [r7, #20]
 801c21e:	685b      	ldr	r3, [r3, #4]
 801c220:	4798      	blx	r3

  now = sys_now();
 801c222:	f7f4 f8e3 	bl	80103ec <sys_now>
 801c226:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801c228:	697b      	ldr	r3, [r7, #20]
 801c22a:	681a      	ldr	r2, [r3, #0]
 801c22c:	4b0f      	ldr	r3, [pc, #60]	; (801c26c <lwip_cyclic_timer+0x5c>)
 801c22e:	681b      	ldr	r3, [r3, #0]
 801c230:	4413      	add	r3, r2
 801c232:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801c234:	68fa      	ldr	r2, [r7, #12]
 801c236:	693b      	ldr	r3, [r7, #16]
 801c238:	1ad3      	subs	r3, r2, r3
 801c23a:	0fdb      	lsrs	r3, r3, #31
 801c23c:	f003 0301 	and.w	r3, r3, #1
 801c240:	b2db      	uxtb	r3, r3
 801c242:	2b00      	cmp	r3, #0
 801c244:	d009      	beq.n	801c25a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801c246:	697b      	ldr	r3, [r7, #20]
 801c248:	681a      	ldr	r2, [r3, #0]
 801c24a:	693b      	ldr	r3, [r7, #16]
 801c24c:	4413      	add	r3, r2
 801c24e:	687a      	ldr	r2, [r7, #4]
 801c250:	4907      	ldr	r1, [pc, #28]	; (801c270 <lwip_cyclic_timer+0x60>)
 801c252:	4618      	mov	r0, r3
 801c254:	f7ff ff6e 	bl	801c134 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801c258:	e004      	b.n	801c264 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801c25a:	687a      	ldr	r2, [r7, #4]
 801c25c:	4904      	ldr	r1, [pc, #16]	; (801c270 <lwip_cyclic_timer+0x60>)
 801c25e:	68f8      	ldr	r0, [r7, #12]
 801c260:	f7ff ff68 	bl	801c134 <sys_timeout_abs>
}
 801c264:	bf00      	nop
 801c266:	3718      	adds	r7, #24
 801c268:	46bd      	mov	sp, r7
 801c26a:	bd80      	pop	{r7, pc}
 801c26c:	20004560 	.word	0x20004560
 801c270:	0801c211 	.word	0x0801c211

0801c274 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801c274:	b580      	push	{r7, lr}
 801c276:	b082      	sub	sp, #8
 801c278:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c27a:	2301      	movs	r3, #1
 801c27c:	607b      	str	r3, [r7, #4]
 801c27e:	e00e      	b.n	801c29e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801c280:	4a0a      	ldr	r2, [pc, #40]	; (801c2ac <sys_timeouts_init+0x38>)
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801c288:	687b      	ldr	r3, [r7, #4]
 801c28a:	00db      	lsls	r3, r3, #3
 801c28c:	4a07      	ldr	r2, [pc, #28]	; (801c2ac <sys_timeouts_init+0x38>)
 801c28e:	4413      	add	r3, r2
 801c290:	461a      	mov	r2, r3
 801c292:	4907      	ldr	r1, [pc, #28]	; (801c2b0 <sys_timeouts_init+0x3c>)
 801c294:	f000 f80e 	bl	801c2b4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c298:	687b      	ldr	r3, [r7, #4]
 801c29a:	3301      	adds	r3, #1
 801c29c:	607b      	str	r3, [r7, #4]
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	2b02      	cmp	r3, #2
 801c2a2:	d9ed      	bls.n	801c280 <sys_timeouts_init+0xc>
  }
}
 801c2a4:	bf00      	nop
 801c2a6:	3708      	adds	r7, #8
 801c2a8:	46bd      	mov	sp, r7
 801c2aa:	bd80      	pop	{r7, pc}
 801c2ac:	080337e8 	.word	0x080337e8
 801c2b0:	0801c211 	.word	0x0801c211

0801c2b4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801c2b4:	b580      	push	{r7, lr}
 801c2b6:	b086      	sub	sp, #24
 801c2b8:	af00      	add	r7, sp, #0
 801c2ba:	60f8      	str	r0, [r7, #12]
 801c2bc:	60b9      	str	r1, [r7, #8]
 801c2be:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801c2c0:	68fb      	ldr	r3, [r7, #12]
 801c2c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c2c6:	d306      	bcc.n	801c2d6 <sys_timeout+0x22>
 801c2c8:	4b0a      	ldr	r3, [pc, #40]	; (801c2f4 <sys_timeout+0x40>)
 801c2ca:	f240 1229 	movw	r2, #297	; 0x129
 801c2ce:	490a      	ldr	r1, [pc, #40]	; (801c2f8 <sys_timeout+0x44>)
 801c2d0:	480a      	ldr	r0, [pc, #40]	; (801c2fc <sys_timeout+0x48>)
 801c2d2:	f002 fe57 	bl	801ef84 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801c2d6:	f7f4 f889 	bl	80103ec <sys_now>
 801c2da:	4602      	mov	r2, r0
 801c2dc:	68fb      	ldr	r3, [r7, #12]
 801c2de:	4413      	add	r3, r2
 801c2e0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c2e2:	687a      	ldr	r2, [r7, #4]
 801c2e4:	68b9      	ldr	r1, [r7, #8]
 801c2e6:	6978      	ldr	r0, [r7, #20]
 801c2e8:	f7ff ff24 	bl	801c134 <sys_timeout_abs>
#endif
}
 801c2ec:	bf00      	nop
 801c2ee:	3718      	adds	r7, #24
 801c2f0:	46bd      	mov	sp, r7
 801c2f2:	bd80      	pop	{r7, pc}
 801c2f4:	08022080 	.word	0x08022080
 801c2f8:	0802211c 	.word	0x0802211c
 801c2fc:	080220f4 	.word	0x080220f4

0801c300 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801c300:	b580      	push	{r7, lr}
 801c302:	b084      	sub	sp, #16
 801c304:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801c306:	f7f4 f871 	bl	80103ec <sys_now>
 801c30a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801c30c:	4b17      	ldr	r3, [pc, #92]	; (801c36c <sys_check_timeouts+0x6c>)
 801c30e:	681b      	ldr	r3, [r3, #0]
 801c310:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801c312:	68bb      	ldr	r3, [r7, #8]
 801c314:	2b00      	cmp	r3, #0
 801c316:	d022      	beq.n	801c35e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801c318:	68bb      	ldr	r3, [r7, #8]
 801c31a:	685b      	ldr	r3, [r3, #4]
 801c31c:	68fa      	ldr	r2, [r7, #12]
 801c31e:	1ad3      	subs	r3, r2, r3
 801c320:	0fdb      	lsrs	r3, r3, #31
 801c322:	f003 0301 	and.w	r3, r3, #1
 801c326:	b2db      	uxtb	r3, r3
 801c328:	2b00      	cmp	r3, #0
 801c32a:	d11a      	bne.n	801c362 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801c32c:	68bb      	ldr	r3, [r7, #8]
 801c32e:	681b      	ldr	r3, [r3, #0]
 801c330:	4a0e      	ldr	r2, [pc, #56]	; (801c36c <sys_check_timeouts+0x6c>)
 801c332:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801c334:	68bb      	ldr	r3, [r7, #8]
 801c336:	689b      	ldr	r3, [r3, #8]
 801c338:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801c33a:	68bb      	ldr	r3, [r7, #8]
 801c33c:	68db      	ldr	r3, [r3, #12]
 801c33e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801c340:	68bb      	ldr	r3, [r7, #8]
 801c342:	685b      	ldr	r3, [r3, #4]
 801c344:	4a0a      	ldr	r2, [pc, #40]	; (801c370 <sys_check_timeouts+0x70>)
 801c346:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c348:	68b9      	ldr	r1, [r7, #8]
 801c34a:	200a      	movs	r0, #10
 801c34c:	f7f8 fd34 	bl	8014db8 <memp_free>
    if (handler != NULL) {
 801c350:	687b      	ldr	r3, [r7, #4]
 801c352:	2b00      	cmp	r3, #0
 801c354:	d0da      	beq.n	801c30c <sys_check_timeouts+0xc>
      handler(arg);
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	6838      	ldr	r0, [r7, #0]
 801c35a:	4798      	blx	r3
  do {
 801c35c:	e7d6      	b.n	801c30c <sys_check_timeouts+0xc>
      return;
 801c35e:	bf00      	nop
 801c360:	e000      	b.n	801c364 <sys_check_timeouts+0x64>
      return;
 801c362:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801c364:	3710      	adds	r7, #16
 801c366:	46bd      	mov	sp, r7
 801c368:	bd80      	pop	{r7, pc}
 801c36a:	bf00      	nop
 801c36c:	2000455c 	.word	0x2000455c
 801c370:	20004560 	.word	0x20004560

0801c374 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801c374:	b580      	push	{r7, lr}
 801c376:	b082      	sub	sp, #8
 801c378:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801c37a:	4b16      	ldr	r3, [pc, #88]	; (801c3d4 <sys_timeouts_sleeptime+0x60>)
 801c37c:	681b      	ldr	r3, [r3, #0]
 801c37e:	2b00      	cmp	r3, #0
 801c380:	d102      	bne.n	801c388 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801c382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c386:	e020      	b.n	801c3ca <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801c388:	f7f4 f830 	bl	80103ec <sys_now>
 801c38c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801c38e:	4b11      	ldr	r3, [pc, #68]	; (801c3d4 <sys_timeouts_sleeptime+0x60>)
 801c390:	681b      	ldr	r3, [r3, #0]
 801c392:	685a      	ldr	r2, [r3, #4]
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	1ad3      	subs	r3, r2, r3
 801c398:	0fdb      	lsrs	r3, r3, #31
 801c39a:	f003 0301 	and.w	r3, r3, #1
 801c39e:	b2db      	uxtb	r3, r3
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	d001      	beq.n	801c3a8 <sys_timeouts_sleeptime+0x34>
    return 0;
 801c3a4:	2300      	movs	r3, #0
 801c3a6:	e010      	b.n	801c3ca <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801c3a8:	4b0a      	ldr	r3, [pc, #40]	; (801c3d4 <sys_timeouts_sleeptime+0x60>)
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	685a      	ldr	r2, [r3, #4]
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	1ad3      	subs	r3, r2, r3
 801c3b2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801c3b4:	683b      	ldr	r3, [r7, #0]
 801c3b6:	2b00      	cmp	r3, #0
 801c3b8:	da06      	bge.n	801c3c8 <sys_timeouts_sleeptime+0x54>
 801c3ba:	4b07      	ldr	r3, [pc, #28]	; (801c3d8 <sys_timeouts_sleeptime+0x64>)
 801c3bc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801c3c0:	4906      	ldr	r1, [pc, #24]	; (801c3dc <sys_timeouts_sleeptime+0x68>)
 801c3c2:	4807      	ldr	r0, [pc, #28]	; (801c3e0 <sys_timeouts_sleeptime+0x6c>)
 801c3c4:	f002 fdde 	bl	801ef84 <iprintf>
    return ret;
 801c3c8:	683b      	ldr	r3, [r7, #0]
  }
}
 801c3ca:	4618      	mov	r0, r3
 801c3cc:	3708      	adds	r7, #8
 801c3ce:	46bd      	mov	sp, r7
 801c3d0:	bd80      	pop	{r7, pc}
 801c3d2:	bf00      	nop
 801c3d4:	2000455c 	.word	0x2000455c
 801c3d8:	08022080 	.word	0x08022080
 801c3dc:	08022154 	.word	0x08022154
 801c3e0:	080220f4 	.word	0x080220f4

0801c3e4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801c3e4:	b580      	push	{r7, lr}
 801c3e6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801c3e8:	f002 fde4 	bl	801efb4 <rand>
 801c3ec:	4603      	mov	r3, r0
 801c3ee:	b29b      	uxth	r3, r3
 801c3f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801c3f4:	b29b      	uxth	r3, r3
 801c3f6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801c3fa:	b29a      	uxth	r2, r3
 801c3fc:	4b01      	ldr	r3, [pc, #4]	; (801c404 <udp_init+0x20>)
 801c3fe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801c400:	bf00      	nop
 801c402:	bd80      	pop	{r7, pc}
 801c404:	20000058 	.word	0x20000058

0801c408 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801c408:	b580      	push	{r7, lr}
 801c40a:	b084      	sub	sp, #16
 801c40c:	af00      	add	r7, sp, #0
 801c40e:	60f8      	str	r0, [r7, #12]
 801c410:	60b9      	str	r1, [r7, #8]
 801c412:	4613      	mov	r3, r2
 801c414:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801c416:	68fb      	ldr	r3, [r7, #12]
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d105      	bne.n	801c428 <udp_input_local_match+0x20>
 801c41c:	4b27      	ldr	r3, [pc, #156]	; (801c4bc <udp_input_local_match+0xb4>)
 801c41e:	2287      	movs	r2, #135	; 0x87
 801c420:	4927      	ldr	r1, [pc, #156]	; (801c4c0 <udp_input_local_match+0xb8>)
 801c422:	4828      	ldr	r0, [pc, #160]	; (801c4c4 <udp_input_local_match+0xbc>)
 801c424:	f002 fdae 	bl	801ef84 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c428:	68bb      	ldr	r3, [r7, #8]
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	d105      	bne.n	801c43a <udp_input_local_match+0x32>
 801c42e:	4b23      	ldr	r3, [pc, #140]	; (801c4bc <udp_input_local_match+0xb4>)
 801c430:	2288      	movs	r2, #136	; 0x88
 801c432:	4925      	ldr	r1, [pc, #148]	; (801c4c8 <udp_input_local_match+0xc0>)
 801c434:	4823      	ldr	r0, [pc, #140]	; (801c4c4 <udp_input_local_match+0xbc>)
 801c436:	f002 fda5 	bl	801ef84 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c43a:	68fb      	ldr	r3, [r7, #12]
 801c43c:	7a1b      	ldrb	r3, [r3, #8]
 801c43e:	2b00      	cmp	r3, #0
 801c440:	d00b      	beq.n	801c45a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c442:	68fb      	ldr	r3, [r7, #12]
 801c444:	7a1a      	ldrb	r2, [r3, #8]
 801c446:	4b21      	ldr	r3, [pc, #132]	; (801c4cc <udp_input_local_match+0xc4>)
 801c448:	685b      	ldr	r3, [r3, #4]
 801c44a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c44e:	3301      	adds	r3, #1
 801c450:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c452:	429a      	cmp	r2, r3
 801c454:	d001      	beq.n	801c45a <udp_input_local_match+0x52>
    return 0;
 801c456:	2300      	movs	r3, #0
 801c458:	e02b      	b.n	801c4b2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c45a:	79fb      	ldrb	r3, [r7, #7]
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d018      	beq.n	801c492 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c460:	68fb      	ldr	r3, [r7, #12]
 801c462:	2b00      	cmp	r3, #0
 801c464:	d013      	beq.n	801c48e <udp_input_local_match+0x86>
 801c466:	68fb      	ldr	r3, [r7, #12]
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d00f      	beq.n	801c48e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c46e:	4b17      	ldr	r3, [pc, #92]	; (801c4cc <udp_input_local_match+0xc4>)
 801c470:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c476:	d00a      	beq.n	801c48e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c478:	68fb      	ldr	r3, [r7, #12]
 801c47a:	681a      	ldr	r2, [r3, #0]
 801c47c:	4b13      	ldr	r3, [pc, #76]	; (801c4cc <udp_input_local_match+0xc4>)
 801c47e:	695b      	ldr	r3, [r3, #20]
 801c480:	405a      	eors	r2, r3
 801c482:	68bb      	ldr	r3, [r7, #8]
 801c484:	3308      	adds	r3, #8
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d110      	bne.n	801c4b0 <udp_input_local_match+0xa8>
          return 1;
 801c48e:	2301      	movs	r3, #1
 801c490:	e00f      	b.n	801c4b2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	2b00      	cmp	r3, #0
 801c496:	d009      	beq.n	801c4ac <udp_input_local_match+0xa4>
 801c498:	68fb      	ldr	r3, [r7, #12]
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	d005      	beq.n	801c4ac <udp_input_local_match+0xa4>
 801c4a0:	68fb      	ldr	r3, [r7, #12]
 801c4a2:	681a      	ldr	r2, [r3, #0]
 801c4a4:	4b09      	ldr	r3, [pc, #36]	; (801c4cc <udp_input_local_match+0xc4>)
 801c4a6:	695b      	ldr	r3, [r3, #20]
 801c4a8:	429a      	cmp	r2, r3
 801c4aa:	d101      	bne.n	801c4b0 <udp_input_local_match+0xa8>
        return 1;
 801c4ac:	2301      	movs	r3, #1
 801c4ae:	e000      	b.n	801c4b2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801c4b0:	2300      	movs	r3, #0
}
 801c4b2:	4618      	mov	r0, r3
 801c4b4:	3710      	adds	r7, #16
 801c4b6:	46bd      	mov	sp, r7
 801c4b8:	bd80      	pop	{r7, pc}
 801c4ba:	bf00      	nop
 801c4bc:	08022168 	.word	0x08022168
 801c4c0:	08022198 	.word	0x08022198
 801c4c4:	080221bc 	.word	0x080221bc
 801c4c8:	080221e4 	.word	0x080221e4
 801c4cc:	20010618 	.word	0x20010618

0801c4d0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c4d0:	b590      	push	{r4, r7, lr}
 801c4d2:	b08d      	sub	sp, #52	; 0x34
 801c4d4:	af02      	add	r7, sp, #8
 801c4d6:	6078      	str	r0, [r7, #4]
 801c4d8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801c4da:	2300      	movs	r3, #0
 801c4dc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	d105      	bne.n	801c4f0 <udp_input+0x20>
 801c4e4:	4b7c      	ldr	r3, [pc, #496]	; (801c6d8 <udp_input+0x208>)
 801c4e6:	22cf      	movs	r2, #207	; 0xcf
 801c4e8:	497c      	ldr	r1, [pc, #496]	; (801c6dc <udp_input+0x20c>)
 801c4ea:	487d      	ldr	r0, [pc, #500]	; (801c6e0 <udp_input+0x210>)
 801c4ec:	f002 fd4a 	bl	801ef84 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801c4f0:	683b      	ldr	r3, [r7, #0]
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d105      	bne.n	801c502 <udp_input+0x32>
 801c4f6:	4b78      	ldr	r3, [pc, #480]	; (801c6d8 <udp_input+0x208>)
 801c4f8:	22d0      	movs	r2, #208	; 0xd0
 801c4fa:	497a      	ldr	r1, [pc, #488]	; (801c6e4 <udp_input+0x214>)
 801c4fc:	4878      	ldr	r0, [pc, #480]	; (801c6e0 <udp_input+0x210>)
 801c4fe:	f002 fd41 	bl	801ef84 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	895b      	ldrh	r3, [r3, #10]
 801c506:	2b07      	cmp	r3, #7
 801c508:	d803      	bhi.n	801c512 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801c50a:	6878      	ldr	r0, [r7, #4]
 801c50c:	f7f9 faf4 	bl	8015af8 <pbuf_free>
    goto end;
 801c510:	e0de      	b.n	801c6d0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	685b      	ldr	r3, [r3, #4]
 801c516:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c518:	4b73      	ldr	r3, [pc, #460]	; (801c6e8 <udp_input+0x218>)
 801c51a:	695a      	ldr	r2, [r3, #20]
 801c51c:	4b72      	ldr	r3, [pc, #456]	; (801c6e8 <udp_input+0x218>)
 801c51e:	681b      	ldr	r3, [r3, #0]
 801c520:	4619      	mov	r1, r3
 801c522:	4610      	mov	r0, r2
 801c524:	f001 fc86 	bl	801de34 <ip4_addr_isbroadcast_u32>
 801c528:	4603      	mov	r3, r0
 801c52a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c52c:	697b      	ldr	r3, [r7, #20]
 801c52e:	881b      	ldrh	r3, [r3, #0]
 801c530:	b29b      	uxth	r3, r3
 801c532:	4618      	mov	r0, r3
 801c534:	f7f7 ff02 	bl	801433c <lwip_htons>
 801c538:	4603      	mov	r3, r0
 801c53a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801c53c:	697b      	ldr	r3, [r7, #20]
 801c53e:	885b      	ldrh	r3, [r3, #2]
 801c540:	b29b      	uxth	r3, r3
 801c542:	4618      	mov	r0, r3
 801c544:	f7f7 fefa 	bl	801433c <lwip_htons>
 801c548:	4603      	mov	r3, r0
 801c54a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801c54c:	2300      	movs	r3, #0
 801c54e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801c550:	2300      	movs	r3, #0
 801c552:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801c554:	2300      	movs	r3, #0
 801c556:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c558:	4b64      	ldr	r3, [pc, #400]	; (801c6ec <udp_input+0x21c>)
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	627b      	str	r3, [r7, #36]	; 0x24
 801c55e:	e054      	b.n	801c60a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c562:	8a5b      	ldrh	r3, [r3, #18]
 801c564:	89fa      	ldrh	r2, [r7, #14]
 801c566:	429a      	cmp	r2, r3
 801c568:	d14a      	bne.n	801c600 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c56a:	7cfb      	ldrb	r3, [r7, #19]
 801c56c:	461a      	mov	r2, r3
 801c56e:	6839      	ldr	r1, [r7, #0]
 801c570:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c572:	f7ff ff49 	bl	801c408 <udp_input_local_match>
 801c576:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d041      	beq.n	801c600 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801c57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c57e:	7c1b      	ldrb	r3, [r3, #16]
 801c580:	f003 0304 	and.w	r3, r3, #4
 801c584:	2b00      	cmp	r3, #0
 801c586:	d11d      	bne.n	801c5c4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801c588:	69fb      	ldr	r3, [r7, #28]
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	d102      	bne.n	801c594 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801c58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c590:	61fb      	str	r3, [r7, #28]
 801c592:	e017      	b.n	801c5c4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801c594:	7cfb      	ldrb	r3, [r7, #19]
 801c596:	2b00      	cmp	r3, #0
 801c598:	d014      	beq.n	801c5c4 <udp_input+0xf4>
 801c59a:	4b53      	ldr	r3, [pc, #332]	; (801c6e8 <udp_input+0x218>)
 801c59c:	695b      	ldr	r3, [r3, #20]
 801c59e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c5a2:	d10f      	bne.n	801c5c4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801c5a4:	69fb      	ldr	r3, [r7, #28]
 801c5a6:	681a      	ldr	r2, [r3, #0]
 801c5a8:	683b      	ldr	r3, [r7, #0]
 801c5aa:	3304      	adds	r3, #4
 801c5ac:	681b      	ldr	r3, [r3, #0]
 801c5ae:	429a      	cmp	r2, r3
 801c5b0:	d008      	beq.n	801c5c4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801c5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5b4:	681a      	ldr	r2, [r3, #0]
 801c5b6:	683b      	ldr	r3, [r7, #0]
 801c5b8:	3304      	adds	r3, #4
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	429a      	cmp	r2, r3
 801c5be:	d101      	bne.n	801c5c4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801c5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5c2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5c6:	8a9b      	ldrh	r3, [r3, #20]
 801c5c8:	8a3a      	ldrh	r2, [r7, #16]
 801c5ca:	429a      	cmp	r2, r3
 801c5cc:	d118      	bne.n	801c600 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5d0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	d005      	beq.n	801c5e2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5d8:	685a      	ldr	r2, [r3, #4]
 801c5da:	4b43      	ldr	r3, [pc, #268]	; (801c6e8 <udp_input+0x218>)
 801c5dc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c5de:	429a      	cmp	r2, r3
 801c5e0:	d10e      	bne.n	801c600 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c5e2:	6a3b      	ldr	r3, [r7, #32]
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d014      	beq.n	801c612 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801c5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5ea:	68da      	ldr	r2, [r3, #12]
 801c5ec:	6a3b      	ldr	r3, [r7, #32]
 801c5ee:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801c5f0:	4b3e      	ldr	r3, [pc, #248]	; (801c6ec <udp_input+0x21c>)
 801c5f2:	681a      	ldr	r2, [r3, #0]
 801c5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5f6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801c5f8:	4a3c      	ldr	r2, [pc, #240]	; (801c6ec <udp_input+0x21c>)
 801c5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5fc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801c5fe:	e008      	b.n	801c612 <udp_input+0x142>
      }
    }

    prev = pcb;
 801c600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c602:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c606:	68db      	ldr	r3, [r3, #12]
 801c608:	627b      	str	r3, [r7, #36]	; 0x24
 801c60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	d1a7      	bne.n	801c560 <udp_input+0x90>
 801c610:	e000      	b.n	801c614 <udp_input+0x144>
        break;
 801c612:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801c614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c616:	2b00      	cmp	r3, #0
 801c618:	d101      	bne.n	801c61e <udp_input+0x14e>
    pcb = uncon_pcb;
 801c61a:	69fb      	ldr	r3, [r7, #28]
 801c61c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801c61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c620:	2b00      	cmp	r3, #0
 801c622:	d002      	beq.n	801c62a <udp_input+0x15a>
    for_us = 1;
 801c624:	2301      	movs	r3, #1
 801c626:	76fb      	strb	r3, [r7, #27]
 801c628:	e00a      	b.n	801c640 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801c62a:	683b      	ldr	r3, [r7, #0]
 801c62c:	3304      	adds	r3, #4
 801c62e:	681a      	ldr	r2, [r3, #0]
 801c630:	4b2d      	ldr	r3, [pc, #180]	; (801c6e8 <udp_input+0x218>)
 801c632:	695b      	ldr	r3, [r3, #20]
 801c634:	429a      	cmp	r2, r3
 801c636:	bf0c      	ite	eq
 801c638:	2301      	moveq	r3, #1
 801c63a:	2300      	movne	r3, #0
 801c63c:	b2db      	uxtb	r3, r3
 801c63e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801c640:	7efb      	ldrb	r3, [r7, #27]
 801c642:	2b00      	cmp	r3, #0
 801c644:	d041      	beq.n	801c6ca <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801c646:	2108      	movs	r1, #8
 801c648:	6878      	ldr	r0, [r7, #4]
 801c64a:	f7f9 f9cf 	bl	80159ec <pbuf_remove_header>
 801c64e:	4603      	mov	r3, r0
 801c650:	2b00      	cmp	r3, #0
 801c652:	d00a      	beq.n	801c66a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801c654:	4b20      	ldr	r3, [pc, #128]	; (801c6d8 <udp_input+0x208>)
 801c656:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801c65a:	4925      	ldr	r1, [pc, #148]	; (801c6f0 <udp_input+0x220>)
 801c65c:	4820      	ldr	r0, [pc, #128]	; (801c6e0 <udp_input+0x210>)
 801c65e:	f002 fc91 	bl	801ef84 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801c662:	6878      	ldr	r0, [r7, #4]
 801c664:	f7f9 fa48 	bl	8015af8 <pbuf_free>
      goto end;
 801c668:	e032      	b.n	801c6d0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801c66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c66c:	2b00      	cmp	r3, #0
 801c66e:	d012      	beq.n	801c696 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801c670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c672:	699b      	ldr	r3, [r3, #24]
 801c674:	2b00      	cmp	r3, #0
 801c676:	d00a      	beq.n	801c68e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801c678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c67a:	699c      	ldr	r4, [r3, #24]
 801c67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c67e:	69d8      	ldr	r0, [r3, #28]
 801c680:	8a3b      	ldrh	r3, [r7, #16]
 801c682:	9300      	str	r3, [sp, #0]
 801c684:	4b1b      	ldr	r3, [pc, #108]	; (801c6f4 <udp_input+0x224>)
 801c686:	687a      	ldr	r2, [r7, #4]
 801c688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c68a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801c68c:	e021      	b.n	801c6d2 <udp_input+0x202>
        pbuf_free(p);
 801c68e:	6878      	ldr	r0, [r7, #4]
 801c690:	f7f9 fa32 	bl	8015af8 <pbuf_free>
        goto end;
 801c694:	e01c      	b.n	801c6d0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801c696:	7cfb      	ldrb	r3, [r7, #19]
 801c698:	2b00      	cmp	r3, #0
 801c69a:	d112      	bne.n	801c6c2 <udp_input+0x1f2>
 801c69c:	4b12      	ldr	r3, [pc, #72]	; (801c6e8 <udp_input+0x218>)
 801c69e:	695b      	ldr	r3, [r3, #20]
 801c6a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c6a4:	2be0      	cmp	r3, #224	; 0xe0
 801c6a6:	d00c      	beq.n	801c6c2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801c6a8:	4b0f      	ldr	r3, [pc, #60]	; (801c6e8 <udp_input+0x218>)
 801c6aa:	899b      	ldrh	r3, [r3, #12]
 801c6ac:	3308      	adds	r3, #8
 801c6ae:	b29b      	uxth	r3, r3
 801c6b0:	b21b      	sxth	r3, r3
 801c6b2:	4619      	mov	r1, r3
 801c6b4:	6878      	ldr	r0, [r7, #4]
 801c6b6:	f7f9 fa0c 	bl	8015ad2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801c6ba:	2103      	movs	r1, #3
 801c6bc:	6878      	ldr	r0, [r7, #4]
 801c6be:	f001 f89b 	bl	801d7f8 <icmp_dest_unreach>
      pbuf_free(p);
 801c6c2:	6878      	ldr	r0, [r7, #4]
 801c6c4:	f7f9 fa18 	bl	8015af8 <pbuf_free>
  return;
 801c6c8:	e003      	b.n	801c6d2 <udp_input+0x202>
    pbuf_free(p);
 801c6ca:	6878      	ldr	r0, [r7, #4]
 801c6cc:	f7f9 fa14 	bl	8015af8 <pbuf_free>
  return;
 801c6d0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801c6d2:	372c      	adds	r7, #44	; 0x2c
 801c6d4:	46bd      	mov	sp, r7
 801c6d6:	bd90      	pop	{r4, r7, pc}
 801c6d8:	08022168 	.word	0x08022168
 801c6dc:	0802220c 	.word	0x0802220c
 801c6e0:	080221bc 	.word	0x080221bc
 801c6e4:	08022224 	.word	0x08022224
 801c6e8:	20010618 	.word	0x20010618
 801c6ec:	20013d44 	.word	0x20013d44
 801c6f0:	08022240 	.word	0x08022240
 801c6f4:	20010628 	.word	0x20010628

0801c6f8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c6f8:	b480      	push	{r7}
 801c6fa:	b085      	sub	sp, #20
 801c6fc:	af00      	add	r7, sp, #0
 801c6fe:	6078      	str	r0, [r7, #4]
 801c700:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	2b00      	cmp	r3, #0
 801c706:	d01e      	beq.n	801c746 <udp_netif_ip_addr_changed+0x4e>
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	681b      	ldr	r3, [r3, #0]
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d01a      	beq.n	801c746 <udp_netif_ip_addr_changed+0x4e>
 801c710:	683b      	ldr	r3, [r7, #0]
 801c712:	2b00      	cmp	r3, #0
 801c714:	d017      	beq.n	801c746 <udp_netif_ip_addr_changed+0x4e>
 801c716:	683b      	ldr	r3, [r7, #0]
 801c718:	681b      	ldr	r3, [r3, #0]
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	d013      	beq.n	801c746 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c71e:	4b0d      	ldr	r3, [pc, #52]	; (801c754 <udp_netif_ip_addr_changed+0x5c>)
 801c720:	681b      	ldr	r3, [r3, #0]
 801c722:	60fb      	str	r3, [r7, #12]
 801c724:	e00c      	b.n	801c740 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c726:	68fb      	ldr	r3, [r7, #12]
 801c728:	681a      	ldr	r2, [r3, #0]
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	681b      	ldr	r3, [r3, #0]
 801c72e:	429a      	cmp	r2, r3
 801c730:	d103      	bne.n	801c73a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c732:	683b      	ldr	r3, [r7, #0]
 801c734:	681a      	ldr	r2, [r3, #0]
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c73a:	68fb      	ldr	r3, [r7, #12]
 801c73c:	68db      	ldr	r3, [r3, #12]
 801c73e:	60fb      	str	r3, [r7, #12]
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	2b00      	cmp	r3, #0
 801c744:	d1ef      	bne.n	801c726 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c746:	bf00      	nop
 801c748:	3714      	adds	r7, #20
 801c74a:	46bd      	mov	sp, r7
 801c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c750:	4770      	bx	lr
 801c752:	bf00      	nop
 801c754:	20013d44 	.word	0x20013d44

0801c758 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801c758:	b580      	push	{r7, lr}
 801c75a:	b082      	sub	sp, #8
 801c75c:	af00      	add	r7, sp, #0
 801c75e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801c760:	4915      	ldr	r1, [pc, #84]	; (801c7b8 <etharp_free_entry+0x60>)
 801c762:	687a      	ldr	r2, [r7, #4]
 801c764:	4613      	mov	r3, r2
 801c766:	005b      	lsls	r3, r3, #1
 801c768:	4413      	add	r3, r2
 801c76a:	00db      	lsls	r3, r3, #3
 801c76c:	440b      	add	r3, r1
 801c76e:	681b      	ldr	r3, [r3, #0]
 801c770:	2b00      	cmp	r3, #0
 801c772:	d013      	beq.n	801c79c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801c774:	4910      	ldr	r1, [pc, #64]	; (801c7b8 <etharp_free_entry+0x60>)
 801c776:	687a      	ldr	r2, [r7, #4]
 801c778:	4613      	mov	r3, r2
 801c77a:	005b      	lsls	r3, r3, #1
 801c77c:	4413      	add	r3, r2
 801c77e:	00db      	lsls	r3, r3, #3
 801c780:	440b      	add	r3, r1
 801c782:	681b      	ldr	r3, [r3, #0]
 801c784:	4618      	mov	r0, r3
 801c786:	f7f9 f9b7 	bl	8015af8 <pbuf_free>
    arp_table[i].q = NULL;
 801c78a:	490b      	ldr	r1, [pc, #44]	; (801c7b8 <etharp_free_entry+0x60>)
 801c78c:	687a      	ldr	r2, [r7, #4]
 801c78e:	4613      	mov	r3, r2
 801c790:	005b      	lsls	r3, r3, #1
 801c792:	4413      	add	r3, r2
 801c794:	00db      	lsls	r3, r3, #3
 801c796:	440b      	add	r3, r1
 801c798:	2200      	movs	r2, #0
 801c79a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801c79c:	4906      	ldr	r1, [pc, #24]	; (801c7b8 <etharp_free_entry+0x60>)
 801c79e:	687a      	ldr	r2, [r7, #4]
 801c7a0:	4613      	mov	r3, r2
 801c7a2:	005b      	lsls	r3, r3, #1
 801c7a4:	4413      	add	r3, r2
 801c7a6:	00db      	lsls	r3, r3, #3
 801c7a8:	440b      	add	r3, r1
 801c7aa:	3314      	adds	r3, #20
 801c7ac:	2200      	movs	r2, #0
 801c7ae:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801c7b0:	bf00      	nop
 801c7b2:	3708      	adds	r7, #8
 801c7b4:	46bd      	mov	sp, r7
 801c7b6:	bd80      	pop	{r7, pc}
 801c7b8:	20004568 	.word	0x20004568

0801c7bc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801c7bc:	b580      	push	{r7, lr}
 801c7be:	b082      	sub	sp, #8
 801c7c0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c7c2:	2300      	movs	r3, #0
 801c7c4:	607b      	str	r3, [r7, #4]
 801c7c6:	e096      	b.n	801c8f6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801c7c8:	494f      	ldr	r1, [pc, #316]	; (801c908 <etharp_tmr+0x14c>)
 801c7ca:	687a      	ldr	r2, [r7, #4]
 801c7cc:	4613      	mov	r3, r2
 801c7ce:	005b      	lsls	r3, r3, #1
 801c7d0:	4413      	add	r3, r2
 801c7d2:	00db      	lsls	r3, r3, #3
 801c7d4:	440b      	add	r3, r1
 801c7d6:	3314      	adds	r3, #20
 801c7d8:	781b      	ldrb	r3, [r3, #0]
 801c7da:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801c7dc:	78fb      	ldrb	r3, [r7, #3]
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	f000 8086 	beq.w	801c8f0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801c7e4:	4948      	ldr	r1, [pc, #288]	; (801c908 <etharp_tmr+0x14c>)
 801c7e6:	687a      	ldr	r2, [r7, #4]
 801c7e8:	4613      	mov	r3, r2
 801c7ea:	005b      	lsls	r3, r3, #1
 801c7ec:	4413      	add	r3, r2
 801c7ee:	00db      	lsls	r3, r3, #3
 801c7f0:	440b      	add	r3, r1
 801c7f2:	3312      	adds	r3, #18
 801c7f4:	881b      	ldrh	r3, [r3, #0]
 801c7f6:	3301      	adds	r3, #1
 801c7f8:	b298      	uxth	r0, r3
 801c7fa:	4943      	ldr	r1, [pc, #268]	; (801c908 <etharp_tmr+0x14c>)
 801c7fc:	687a      	ldr	r2, [r7, #4]
 801c7fe:	4613      	mov	r3, r2
 801c800:	005b      	lsls	r3, r3, #1
 801c802:	4413      	add	r3, r2
 801c804:	00db      	lsls	r3, r3, #3
 801c806:	440b      	add	r3, r1
 801c808:	3312      	adds	r3, #18
 801c80a:	4602      	mov	r2, r0
 801c80c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c80e:	493e      	ldr	r1, [pc, #248]	; (801c908 <etharp_tmr+0x14c>)
 801c810:	687a      	ldr	r2, [r7, #4]
 801c812:	4613      	mov	r3, r2
 801c814:	005b      	lsls	r3, r3, #1
 801c816:	4413      	add	r3, r2
 801c818:	00db      	lsls	r3, r3, #3
 801c81a:	440b      	add	r3, r1
 801c81c:	3312      	adds	r3, #18
 801c81e:	881b      	ldrh	r3, [r3, #0]
 801c820:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801c824:	d215      	bcs.n	801c852 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c826:	4938      	ldr	r1, [pc, #224]	; (801c908 <etharp_tmr+0x14c>)
 801c828:	687a      	ldr	r2, [r7, #4]
 801c82a:	4613      	mov	r3, r2
 801c82c:	005b      	lsls	r3, r3, #1
 801c82e:	4413      	add	r3, r2
 801c830:	00db      	lsls	r3, r3, #3
 801c832:	440b      	add	r3, r1
 801c834:	3314      	adds	r3, #20
 801c836:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c838:	2b01      	cmp	r3, #1
 801c83a:	d10e      	bne.n	801c85a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801c83c:	4932      	ldr	r1, [pc, #200]	; (801c908 <etharp_tmr+0x14c>)
 801c83e:	687a      	ldr	r2, [r7, #4]
 801c840:	4613      	mov	r3, r2
 801c842:	005b      	lsls	r3, r3, #1
 801c844:	4413      	add	r3, r2
 801c846:	00db      	lsls	r3, r3, #3
 801c848:	440b      	add	r3, r1
 801c84a:	3312      	adds	r3, #18
 801c84c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c84e:	2b04      	cmp	r3, #4
 801c850:	d903      	bls.n	801c85a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801c852:	6878      	ldr	r0, [r7, #4]
 801c854:	f7ff ff80 	bl	801c758 <etharp_free_entry>
 801c858:	e04a      	b.n	801c8f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801c85a:	492b      	ldr	r1, [pc, #172]	; (801c908 <etharp_tmr+0x14c>)
 801c85c:	687a      	ldr	r2, [r7, #4]
 801c85e:	4613      	mov	r3, r2
 801c860:	005b      	lsls	r3, r3, #1
 801c862:	4413      	add	r3, r2
 801c864:	00db      	lsls	r3, r3, #3
 801c866:	440b      	add	r3, r1
 801c868:	3314      	adds	r3, #20
 801c86a:	781b      	ldrb	r3, [r3, #0]
 801c86c:	2b03      	cmp	r3, #3
 801c86e:	d10a      	bne.n	801c886 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801c870:	4925      	ldr	r1, [pc, #148]	; (801c908 <etharp_tmr+0x14c>)
 801c872:	687a      	ldr	r2, [r7, #4]
 801c874:	4613      	mov	r3, r2
 801c876:	005b      	lsls	r3, r3, #1
 801c878:	4413      	add	r3, r2
 801c87a:	00db      	lsls	r3, r3, #3
 801c87c:	440b      	add	r3, r1
 801c87e:	3314      	adds	r3, #20
 801c880:	2204      	movs	r2, #4
 801c882:	701a      	strb	r2, [r3, #0]
 801c884:	e034      	b.n	801c8f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801c886:	4920      	ldr	r1, [pc, #128]	; (801c908 <etharp_tmr+0x14c>)
 801c888:	687a      	ldr	r2, [r7, #4]
 801c88a:	4613      	mov	r3, r2
 801c88c:	005b      	lsls	r3, r3, #1
 801c88e:	4413      	add	r3, r2
 801c890:	00db      	lsls	r3, r3, #3
 801c892:	440b      	add	r3, r1
 801c894:	3314      	adds	r3, #20
 801c896:	781b      	ldrb	r3, [r3, #0]
 801c898:	2b04      	cmp	r3, #4
 801c89a:	d10a      	bne.n	801c8b2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801c89c:	491a      	ldr	r1, [pc, #104]	; (801c908 <etharp_tmr+0x14c>)
 801c89e:	687a      	ldr	r2, [r7, #4]
 801c8a0:	4613      	mov	r3, r2
 801c8a2:	005b      	lsls	r3, r3, #1
 801c8a4:	4413      	add	r3, r2
 801c8a6:	00db      	lsls	r3, r3, #3
 801c8a8:	440b      	add	r3, r1
 801c8aa:	3314      	adds	r3, #20
 801c8ac:	2202      	movs	r2, #2
 801c8ae:	701a      	strb	r2, [r3, #0]
 801c8b0:	e01e      	b.n	801c8f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c8b2:	4915      	ldr	r1, [pc, #84]	; (801c908 <etharp_tmr+0x14c>)
 801c8b4:	687a      	ldr	r2, [r7, #4]
 801c8b6:	4613      	mov	r3, r2
 801c8b8:	005b      	lsls	r3, r3, #1
 801c8ba:	4413      	add	r3, r2
 801c8bc:	00db      	lsls	r3, r3, #3
 801c8be:	440b      	add	r3, r1
 801c8c0:	3314      	adds	r3, #20
 801c8c2:	781b      	ldrb	r3, [r3, #0]
 801c8c4:	2b01      	cmp	r3, #1
 801c8c6:	d113      	bne.n	801c8f0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801c8c8:	490f      	ldr	r1, [pc, #60]	; (801c908 <etharp_tmr+0x14c>)
 801c8ca:	687a      	ldr	r2, [r7, #4]
 801c8cc:	4613      	mov	r3, r2
 801c8ce:	005b      	lsls	r3, r3, #1
 801c8d0:	4413      	add	r3, r2
 801c8d2:	00db      	lsls	r3, r3, #3
 801c8d4:	440b      	add	r3, r1
 801c8d6:	3308      	adds	r3, #8
 801c8d8:	6818      	ldr	r0, [r3, #0]
 801c8da:	687a      	ldr	r2, [r7, #4]
 801c8dc:	4613      	mov	r3, r2
 801c8de:	005b      	lsls	r3, r3, #1
 801c8e0:	4413      	add	r3, r2
 801c8e2:	00db      	lsls	r3, r3, #3
 801c8e4:	4a08      	ldr	r2, [pc, #32]	; (801c908 <etharp_tmr+0x14c>)
 801c8e6:	4413      	add	r3, r2
 801c8e8:	3304      	adds	r3, #4
 801c8ea:	4619      	mov	r1, r3
 801c8ec:	f000 fe6e 	bl	801d5cc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c8f0:	687b      	ldr	r3, [r7, #4]
 801c8f2:	3301      	adds	r3, #1
 801c8f4:	607b      	str	r3, [r7, #4]
 801c8f6:	687b      	ldr	r3, [r7, #4]
 801c8f8:	2b09      	cmp	r3, #9
 801c8fa:	f77f af65 	ble.w	801c7c8 <etharp_tmr+0xc>
      }
    }
  }
}
 801c8fe:	bf00      	nop
 801c900:	3708      	adds	r7, #8
 801c902:	46bd      	mov	sp, r7
 801c904:	bd80      	pop	{r7, pc}
 801c906:	bf00      	nop
 801c908:	20004568 	.word	0x20004568

0801c90c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801c90c:	b580      	push	{r7, lr}
 801c90e:	b08a      	sub	sp, #40	; 0x28
 801c910:	af00      	add	r7, sp, #0
 801c912:	60f8      	str	r0, [r7, #12]
 801c914:	460b      	mov	r3, r1
 801c916:	607a      	str	r2, [r7, #4]
 801c918:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801c91a:	230a      	movs	r3, #10
 801c91c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801c91e:	230a      	movs	r3, #10
 801c920:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801c922:	230a      	movs	r3, #10
 801c924:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801c926:	2300      	movs	r3, #0
 801c928:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801c92a:	230a      	movs	r3, #10
 801c92c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801c92e:	2300      	movs	r3, #0
 801c930:	83bb      	strh	r3, [r7, #28]
 801c932:	2300      	movs	r3, #0
 801c934:	837b      	strh	r3, [r7, #26]
 801c936:	2300      	movs	r3, #0
 801c938:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c93a:	2300      	movs	r3, #0
 801c93c:	843b      	strh	r3, [r7, #32]
 801c93e:	e0ae      	b.n	801ca9e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801c940:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c944:	49a6      	ldr	r1, [pc, #664]	; (801cbe0 <etharp_find_entry+0x2d4>)
 801c946:	4613      	mov	r3, r2
 801c948:	005b      	lsls	r3, r3, #1
 801c94a:	4413      	add	r3, r2
 801c94c:	00db      	lsls	r3, r3, #3
 801c94e:	440b      	add	r3, r1
 801c950:	3314      	adds	r3, #20
 801c952:	781b      	ldrb	r3, [r3, #0]
 801c954:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801c956:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c95a:	2b0a      	cmp	r3, #10
 801c95c:	d105      	bne.n	801c96a <etharp_find_entry+0x5e>
 801c95e:	7dfb      	ldrb	r3, [r7, #23]
 801c960:	2b00      	cmp	r3, #0
 801c962:	d102      	bne.n	801c96a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801c964:	8c3b      	ldrh	r3, [r7, #32]
 801c966:	847b      	strh	r3, [r7, #34]	; 0x22
 801c968:	e095      	b.n	801ca96 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801c96a:	7dfb      	ldrb	r3, [r7, #23]
 801c96c:	2b00      	cmp	r3, #0
 801c96e:	f000 8092 	beq.w	801ca96 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801c972:	7dfb      	ldrb	r3, [r7, #23]
 801c974:	2b01      	cmp	r3, #1
 801c976:	d009      	beq.n	801c98c <etharp_find_entry+0x80>
 801c978:	7dfb      	ldrb	r3, [r7, #23]
 801c97a:	2b01      	cmp	r3, #1
 801c97c:	d806      	bhi.n	801c98c <etharp_find_entry+0x80>
 801c97e:	4b99      	ldr	r3, [pc, #612]	; (801cbe4 <etharp_find_entry+0x2d8>)
 801c980:	f44f 7292 	mov.w	r2, #292	; 0x124
 801c984:	4998      	ldr	r1, [pc, #608]	; (801cbe8 <etharp_find_entry+0x2dc>)
 801c986:	4899      	ldr	r0, [pc, #612]	; (801cbec <etharp_find_entry+0x2e0>)
 801c988:	f002 fafc 	bl	801ef84 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801c98c:	68fb      	ldr	r3, [r7, #12]
 801c98e:	2b00      	cmp	r3, #0
 801c990:	d020      	beq.n	801c9d4 <etharp_find_entry+0xc8>
 801c992:	68fb      	ldr	r3, [r7, #12]
 801c994:	6819      	ldr	r1, [r3, #0]
 801c996:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c99a:	4891      	ldr	r0, [pc, #580]	; (801cbe0 <etharp_find_entry+0x2d4>)
 801c99c:	4613      	mov	r3, r2
 801c99e:	005b      	lsls	r3, r3, #1
 801c9a0:	4413      	add	r3, r2
 801c9a2:	00db      	lsls	r3, r3, #3
 801c9a4:	4403      	add	r3, r0
 801c9a6:	3304      	adds	r3, #4
 801c9a8:	681b      	ldr	r3, [r3, #0]
 801c9aa:	4299      	cmp	r1, r3
 801c9ac:	d112      	bne.n	801c9d4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801c9ae:	687b      	ldr	r3, [r7, #4]
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d00c      	beq.n	801c9ce <etharp_find_entry+0xc2>
 801c9b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c9b8:	4989      	ldr	r1, [pc, #548]	; (801cbe0 <etharp_find_entry+0x2d4>)
 801c9ba:	4613      	mov	r3, r2
 801c9bc:	005b      	lsls	r3, r3, #1
 801c9be:	4413      	add	r3, r2
 801c9c0:	00db      	lsls	r3, r3, #3
 801c9c2:	440b      	add	r3, r1
 801c9c4:	3308      	adds	r3, #8
 801c9c6:	681b      	ldr	r3, [r3, #0]
 801c9c8:	687a      	ldr	r2, [r7, #4]
 801c9ca:	429a      	cmp	r2, r3
 801c9cc:	d102      	bne.n	801c9d4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801c9ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c9d2:	e100      	b.n	801cbd6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801c9d4:	7dfb      	ldrb	r3, [r7, #23]
 801c9d6:	2b01      	cmp	r3, #1
 801c9d8:	d140      	bne.n	801ca5c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801c9da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c9de:	4980      	ldr	r1, [pc, #512]	; (801cbe0 <etharp_find_entry+0x2d4>)
 801c9e0:	4613      	mov	r3, r2
 801c9e2:	005b      	lsls	r3, r3, #1
 801c9e4:	4413      	add	r3, r2
 801c9e6:	00db      	lsls	r3, r3, #3
 801c9e8:	440b      	add	r3, r1
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	2b00      	cmp	r3, #0
 801c9ee:	d01a      	beq.n	801ca26 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801c9f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c9f4:	497a      	ldr	r1, [pc, #488]	; (801cbe0 <etharp_find_entry+0x2d4>)
 801c9f6:	4613      	mov	r3, r2
 801c9f8:	005b      	lsls	r3, r3, #1
 801c9fa:	4413      	add	r3, r2
 801c9fc:	00db      	lsls	r3, r3, #3
 801c9fe:	440b      	add	r3, r1
 801ca00:	3312      	adds	r3, #18
 801ca02:	881b      	ldrh	r3, [r3, #0]
 801ca04:	8bba      	ldrh	r2, [r7, #28]
 801ca06:	429a      	cmp	r2, r3
 801ca08:	d845      	bhi.n	801ca96 <etharp_find_entry+0x18a>
            old_queue = i;
 801ca0a:	8c3b      	ldrh	r3, [r7, #32]
 801ca0c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801ca0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ca12:	4973      	ldr	r1, [pc, #460]	; (801cbe0 <etharp_find_entry+0x2d4>)
 801ca14:	4613      	mov	r3, r2
 801ca16:	005b      	lsls	r3, r3, #1
 801ca18:	4413      	add	r3, r2
 801ca1a:	00db      	lsls	r3, r3, #3
 801ca1c:	440b      	add	r3, r1
 801ca1e:	3312      	adds	r3, #18
 801ca20:	881b      	ldrh	r3, [r3, #0]
 801ca22:	83bb      	strh	r3, [r7, #28]
 801ca24:	e037      	b.n	801ca96 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801ca26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ca2a:	496d      	ldr	r1, [pc, #436]	; (801cbe0 <etharp_find_entry+0x2d4>)
 801ca2c:	4613      	mov	r3, r2
 801ca2e:	005b      	lsls	r3, r3, #1
 801ca30:	4413      	add	r3, r2
 801ca32:	00db      	lsls	r3, r3, #3
 801ca34:	440b      	add	r3, r1
 801ca36:	3312      	adds	r3, #18
 801ca38:	881b      	ldrh	r3, [r3, #0]
 801ca3a:	8b7a      	ldrh	r2, [r7, #26]
 801ca3c:	429a      	cmp	r2, r3
 801ca3e:	d82a      	bhi.n	801ca96 <etharp_find_entry+0x18a>
            old_pending = i;
 801ca40:	8c3b      	ldrh	r3, [r7, #32]
 801ca42:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801ca44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ca48:	4965      	ldr	r1, [pc, #404]	; (801cbe0 <etharp_find_entry+0x2d4>)
 801ca4a:	4613      	mov	r3, r2
 801ca4c:	005b      	lsls	r3, r3, #1
 801ca4e:	4413      	add	r3, r2
 801ca50:	00db      	lsls	r3, r3, #3
 801ca52:	440b      	add	r3, r1
 801ca54:	3312      	adds	r3, #18
 801ca56:	881b      	ldrh	r3, [r3, #0]
 801ca58:	837b      	strh	r3, [r7, #26]
 801ca5a:	e01c      	b.n	801ca96 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801ca5c:	7dfb      	ldrb	r3, [r7, #23]
 801ca5e:	2b01      	cmp	r3, #1
 801ca60:	d919      	bls.n	801ca96 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801ca62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ca66:	495e      	ldr	r1, [pc, #376]	; (801cbe0 <etharp_find_entry+0x2d4>)
 801ca68:	4613      	mov	r3, r2
 801ca6a:	005b      	lsls	r3, r3, #1
 801ca6c:	4413      	add	r3, r2
 801ca6e:	00db      	lsls	r3, r3, #3
 801ca70:	440b      	add	r3, r1
 801ca72:	3312      	adds	r3, #18
 801ca74:	881b      	ldrh	r3, [r3, #0]
 801ca76:	8b3a      	ldrh	r2, [r7, #24]
 801ca78:	429a      	cmp	r2, r3
 801ca7a:	d80c      	bhi.n	801ca96 <etharp_find_entry+0x18a>
            old_stable = i;
 801ca7c:	8c3b      	ldrh	r3, [r7, #32]
 801ca7e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801ca80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ca84:	4956      	ldr	r1, [pc, #344]	; (801cbe0 <etharp_find_entry+0x2d4>)
 801ca86:	4613      	mov	r3, r2
 801ca88:	005b      	lsls	r3, r3, #1
 801ca8a:	4413      	add	r3, r2
 801ca8c:	00db      	lsls	r3, r3, #3
 801ca8e:	440b      	add	r3, r1
 801ca90:	3312      	adds	r3, #18
 801ca92:	881b      	ldrh	r3, [r3, #0]
 801ca94:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ca96:	8c3b      	ldrh	r3, [r7, #32]
 801ca98:	3301      	adds	r3, #1
 801ca9a:	b29b      	uxth	r3, r3
 801ca9c:	843b      	strh	r3, [r7, #32]
 801ca9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801caa2:	2b09      	cmp	r3, #9
 801caa4:	f77f af4c 	ble.w	801c940 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801caa8:	7afb      	ldrb	r3, [r7, #11]
 801caaa:	f003 0302 	and.w	r3, r3, #2
 801caae:	2b00      	cmp	r3, #0
 801cab0:	d108      	bne.n	801cac4 <etharp_find_entry+0x1b8>
 801cab2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801cab6:	2b0a      	cmp	r3, #10
 801cab8:	d107      	bne.n	801caca <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801caba:	7afb      	ldrb	r3, [r7, #11]
 801cabc:	f003 0301 	and.w	r3, r3, #1
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	d102      	bne.n	801caca <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801cac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cac8:	e085      	b.n	801cbd6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801caca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801cace:	2b09      	cmp	r3, #9
 801cad0:	dc02      	bgt.n	801cad8 <etharp_find_entry+0x1cc>
    i = empty;
 801cad2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cad4:	843b      	strh	r3, [r7, #32]
 801cad6:	e039      	b.n	801cb4c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801cad8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801cadc:	2b09      	cmp	r3, #9
 801cade:	dc14      	bgt.n	801cb0a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801cae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801cae2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801cae4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cae8:	493d      	ldr	r1, [pc, #244]	; (801cbe0 <etharp_find_entry+0x2d4>)
 801caea:	4613      	mov	r3, r2
 801caec:	005b      	lsls	r3, r3, #1
 801caee:	4413      	add	r3, r2
 801caf0:	00db      	lsls	r3, r3, #3
 801caf2:	440b      	add	r3, r1
 801caf4:	681b      	ldr	r3, [r3, #0]
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d018      	beq.n	801cb2c <etharp_find_entry+0x220>
 801cafa:	4b3a      	ldr	r3, [pc, #232]	; (801cbe4 <etharp_find_entry+0x2d8>)
 801cafc:	f240 126d 	movw	r2, #365	; 0x16d
 801cb00:	493b      	ldr	r1, [pc, #236]	; (801cbf0 <etharp_find_entry+0x2e4>)
 801cb02:	483a      	ldr	r0, [pc, #232]	; (801cbec <etharp_find_entry+0x2e0>)
 801cb04:	f002 fa3e 	bl	801ef84 <iprintf>
 801cb08:	e010      	b.n	801cb2c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801cb0a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801cb0e:	2b09      	cmp	r3, #9
 801cb10:	dc02      	bgt.n	801cb18 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801cb12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801cb14:	843b      	strh	r3, [r7, #32]
 801cb16:	e009      	b.n	801cb2c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801cb18:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801cb1c:	2b09      	cmp	r3, #9
 801cb1e:	dc02      	bgt.n	801cb26 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801cb20:	8bfb      	ldrh	r3, [r7, #30]
 801cb22:	843b      	strh	r3, [r7, #32]
 801cb24:	e002      	b.n	801cb2c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801cb26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cb2a:	e054      	b.n	801cbd6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801cb2c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cb30:	2b09      	cmp	r3, #9
 801cb32:	dd06      	ble.n	801cb42 <etharp_find_entry+0x236>
 801cb34:	4b2b      	ldr	r3, [pc, #172]	; (801cbe4 <etharp_find_entry+0x2d8>)
 801cb36:	f240 127f 	movw	r2, #383	; 0x17f
 801cb3a:	492e      	ldr	r1, [pc, #184]	; (801cbf4 <etharp_find_entry+0x2e8>)
 801cb3c:	482b      	ldr	r0, [pc, #172]	; (801cbec <etharp_find_entry+0x2e0>)
 801cb3e:	f002 fa21 	bl	801ef84 <iprintf>
    etharp_free_entry(i);
 801cb42:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cb46:	4618      	mov	r0, r3
 801cb48:	f7ff fe06 	bl	801c758 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801cb4c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cb50:	2b09      	cmp	r3, #9
 801cb52:	dd06      	ble.n	801cb62 <etharp_find_entry+0x256>
 801cb54:	4b23      	ldr	r3, [pc, #140]	; (801cbe4 <etharp_find_entry+0x2d8>)
 801cb56:	f240 1283 	movw	r2, #387	; 0x183
 801cb5a:	4926      	ldr	r1, [pc, #152]	; (801cbf4 <etharp_find_entry+0x2e8>)
 801cb5c:	4823      	ldr	r0, [pc, #140]	; (801cbec <etharp_find_entry+0x2e0>)
 801cb5e:	f002 fa11 	bl	801ef84 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801cb62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cb66:	491e      	ldr	r1, [pc, #120]	; (801cbe0 <etharp_find_entry+0x2d4>)
 801cb68:	4613      	mov	r3, r2
 801cb6a:	005b      	lsls	r3, r3, #1
 801cb6c:	4413      	add	r3, r2
 801cb6e:	00db      	lsls	r3, r3, #3
 801cb70:	440b      	add	r3, r1
 801cb72:	3314      	adds	r3, #20
 801cb74:	781b      	ldrb	r3, [r3, #0]
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d006      	beq.n	801cb88 <etharp_find_entry+0x27c>
 801cb7a:	4b1a      	ldr	r3, [pc, #104]	; (801cbe4 <etharp_find_entry+0x2d8>)
 801cb7c:	f240 1285 	movw	r2, #389	; 0x185
 801cb80:	491d      	ldr	r1, [pc, #116]	; (801cbf8 <etharp_find_entry+0x2ec>)
 801cb82:	481a      	ldr	r0, [pc, #104]	; (801cbec <etharp_find_entry+0x2e0>)
 801cb84:	f002 f9fe 	bl	801ef84 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801cb88:	68fb      	ldr	r3, [r7, #12]
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d00b      	beq.n	801cba6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801cb8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cb92:	68fb      	ldr	r3, [r7, #12]
 801cb94:	6819      	ldr	r1, [r3, #0]
 801cb96:	4812      	ldr	r0, [pc, #72]	; (801cbe0 <etharp_find_entry+0x2d4>)
 801cb98:	4613      	mov	r3, r2
 801cb9a:	005b      	lsls	r3, r3, #1
 801cb9c:	4413      	add	r3, r2
 801cb9e:	00db      	lsls	r3, r3, #3
 801cba0:	4403      	add	r3, r0
 801cba2:	3304      	adds	r3, #4
 801cba4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801cba6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cbaa:	490d      	ldr	r1, [pc, #52]	; (801cbe0 <etharp_find_entry+0x2d4>)
 801cbac:	4613      	mov	r3, r2
 801cbae:	005b      	lsls	r3, r3, #1
 801cbb0:	4413      	add	r3, r2
 801cbb2:	00db      	lsls	r3, r3, #3
 801cbb4:	440b      	add	r3, r1
 801cbb6:	3312      	adds	r3, #18
 801cbb8:	2200      	movs	r2, #0
 801cbba:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801cbbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cbc0:	4907      	ldr	r1, [pc, #28]	; (801cbe0 <etharp_find_entry+0x2d4>)
 801cbc2:	4613      	mov	r3, r2
 801cbc4:	005b      	lsls	r3, r3, #1
 801cbc6:	4413      	add	r3, r2
 801cbc8:	00db      	lsls	r3, r3, #3
 801cbca:	440b      	add	r3, r1
 801cbcc:	3308      	adds	r3, #8
 801cbce:	687a      	ldr	r2, [r7, #4]
 801cbd0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801cbd2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801cbd6:	4618      	mov	r0, r3
 801cbd8:	3728      	adds	r7, #40	; 0x28
 801cbda:	46bd      	mov	sp, r7
 801cbdc:	bd80      	pop	{r7, pc}
 801cbde:	bf00      	nop
 801cbe0:	20004568 	.word	0x20004568
 801cbe4:	080224cc 	.word	0x080224cc
 801cbe8:	08022504 	.word	0x08022504
 801cbec:	08022544 	.word	0x08022544
 801cbf0:	0802256c 	.word	0x0802256c
 801cbf4:	08022584 	.word	0x08022584
 801cbf8:	08022598 	.word	0x08022598

0801cbfc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801cbfc:	b580      	push	{r7, lr}
 801cbfe:	b088      	sub	sp, #32
 801cc00:	af02      	add	r7, sp, #8
 801cc02:	60f8      	str	r0, [r7, #12]
 801cc04:	60b9      	str	r1, [r7, #8]
 801cc06:	607a      	str	r2, [r7, #4]
 801cc08:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801cc0a:	68fb      	ldr	r3, [r7, #12]
 801cc0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801cc10:	2b06      	cmp	r3, #6
 801cc12:	d006      	beq.n	801cc22 <etharp_update_arp_entry+0x26>
 801cc14:	4b48      	ldr	r3, [pc, #288]	; (801cd38 <etharp_update_arp_entry+0x13c>)
 801cc16:	f240 12a9 	movw	r2, #425	; 0x1a9
 801cc1a:	4948      	ldr	r1, [pc, #288]	; (801cd3c <etharp_update_arp_entry+0x140>)
 801cc1c:	4848      	ldr	r0, [pc, #288]	; (801cd40 <etharp_update_arp_entry+0x144>)
 801cc1e:	f002 f9b1 	bl	801ef84 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801cc22:	68bb      	ldr	r3, [r7, #8]
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	d012      	beq.n	801cc4e <etharp_update_arp_entry+0x52>
 801cc28:	68bb      	ldr	r3, [r7, #8]
 801cc2a:	681b      	ldr	r3, [r3, #0]
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d00e      	beq.n	801cc4e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801cc30:	68bb      	ldr	r3, [r7, #8]
 801cc32:	681b      	ldr	r3, [r3, #0]
 801cc34:	68f9      	ldr	r1, [r7, #12]
 801cc36:	4618      	mov	r0, r3
 801cc38:	f001 f8fc 	bl	801de34 <ip4_addr_isbroadcast_u32>
 801cc3c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	d105      	bne.n	801cc4e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801cc42:	68bb      	ldr	r3, [r7, #8]
 801cc44:	681b      	ldr	r3, [r3, #0]
 801cc46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801cc4a:	2be0      	cmp	r3, #224	; 0xe0
 801cc4c:	d102      	bne.n	801cc54 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801cc4e:	f06f 030f 	mvn.w	r3, #15
 801cc52:	e06c      	b.n	801cd2e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801cc54:	78fb      	ldrb	r3, [r7, #3]
 801cc56:	68fa      	ldr	r2, [r7, #12]
 801cc58:	4619      	mov	r1, r3
 801cc5a:	68b8      	ldr	r0, [r7, #8]
 801cc5c:	f7ff fe56 	bl	801c90c <etharp_find_entry>
 801cc60:	4603      	mov	r3, r0
 801cc62:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801cc64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	da02      	bge.n	801cc72 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801cc6c:	8afb      	ldrh	r3, [r7, #22]
 801cc6e:	b25b      	sxtb	r3, r3
 801cc70:	e05d      	b.n	801cd2e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801cc72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cc76:	4933      	ldr	r1, [pc, #204]	; (801cd44 <etharp_update_arp_entry+0x148>)
 801cc78:	4613      	mov	r3, r2
 801cc7a:	005b      	lsls	r3, r3, #1
 801cc7c:	4413      	add	r3, r2
 801cc7e:	00db      	lsls	r3, r3, #3
 801cc80:	440b      	add	r3, r1
 801cc82:	3314      	adds	r3, #20
 801cc84:	2202      	movs	r2, #2
 801cc86:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801cc88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cc8c:	492d      	ldr	r1, [pc, #180]	; (801cd44 <etharp_update_arp_entry+0x148>)
 801cc8e:	4613      	mov	r3, r2
 801cc90:	005b      	lsls	r3, r3, #1
 801cc92:	4413      	add	r3, r2
 801cc94:	00db      	lsls	r3, r3, #3
 801cc96:	440b      	add	r3, r1
 801cc98:	3308      	adds	r3, #8
 801cc9a:	68fa      	ldr	r2, [r7, #12]
 801cc9c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801cc9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cca2:	4613      	mov	r3, r2
 801cca4:	005b      	lsls	r3, r3, #1
 801cca6:	4413      	add	r3, r2
 801cca8:	00db      	lsls	r3, r3, #3
 801ccaa:	3308      	adds	r3, #8
 801ccac:	4a25      	ldr	r2, [pc, #148]	; (801cd44 <etharp_update_arp_entry+0x148>)
 801ccae:	4413      	add	r3, r2
 801ccb0:	3304      	adds	r3, #4
 801ccb2:	2206      	movs	r2, #6
 801ccb4:	6879      	ldr	r1, [r7, #4]
 801ccb6:	4618      	mov	r0, r3
 801ccb8:	f002 f951 	bl	801ef5e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801ccbc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ccc0:	4920      	ldr	r1, [pc, #128]	; (801cd44 <etharp_update_arp_entry+0x148>)
 801ccc2:	4613      	mov	r3, r2
 801ccc4:	005b      	lsls	r3, r3, #1
 801ccc6:	4413      	add	r3, r2
 801ccc8:	00db      	lsls	r3, r3, #3
 801ccca:	440b      	add	r3, r1
 801cccc:	3312      	adds	r3, #18
 801ccce:	2200      	movs	r2, #0
 801ccd0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801ccd2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ccd6:	491b      	ldr	r1, [pc, #108]	; (801cd44 <etharp_update_arp_entry+0x148>)
 801ccd8:	4613      	mov	r3, r2
 801ccda:	005b      	lsls	r3, r3, #1
 801ccdc:	4413      	add	r3, r2
 801ccde:	00db      	lsls	r3, r3, #3
 801cce0:	440b      	add	r3, r1
 801cce2:	681b      	ldr	r3, [r3, #0]
 801cce4:	2b00      	cmp	r3, #0
 801cce6:	d021      	beq.n	801cd2c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801cce8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ccec:	4915      	ldr	r1, [pc, #84]	; (801cd44 <etharp_update_arp_entry+0x148>)
 801ccee:	4613      	mov	r3, r2
 801ccf0:	005b      	lsls	r3, r3, #1
 801ccf2:	4413      	add	r3, r2
 801ccf4:	00db      	lsls	r3, r3, #3
 801ccf6:	440b      	add	r3, r1
 801ccf8:	681b      	ldr	r3, [r3, #0]
 801ccfa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801ccfc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cd00:	4910      	ldr	r1, [pc, #64]	; (801cd44 <etharp_update_arp_entry+0x148>)
 801cd02:	4613      	mov	r3, r2
 801cd04:	005b      	lsls	r3, r3, #1
 801cd06:	4413      	add	r3, r2
 801cd08:	00db      	lsls	r3, r3, #3
 801cd0a:	440b      	add	r3, r1
 801cd0c:	2200      	movs	r2, #0
 801cd0e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801cd10:	68fb      	ldr	r3, [r7, #12]
 801cd12:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801cd16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801cd1a:	9300      	str	r3, [sp, #0]
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	6939      	ldr	r1, [r7, #16]
 801cd20:	68f8      	ldr	r0, [r7, #12]
 801cd22:	f001 ff8b 	bl	801ec3c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801cd26:	6938      	ldr	r0, [r7, #16]
 801cd28:	f7f8 fee6 	bl	8015af8 <pbuf_free>
  }
  return ERR_OK;
 801cd2c:	2300      	movs	r3, #0
}
 801cd2e:	4618      	mov	r0, r3
 801cd30:	3718      	adds	r7, #24
 801cd32:	46bd      	mov	sp, r7
 801cd34:	bd80      	pop	{r7, pc}
 801cd36:	bf00      	nop
 801cd38:	080224cc 	.word	0x080224cc
 801cd3c:	080225c4 	.word	0x080225c4
 801cd40:	08022544 	.word	0x08022544
 801cd44:	20004568 	.word	0x20004568

0801cd48 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801cd48:	b580      	push	{r7, lr}
 801cd4a:	b084      	sub	sp, #16
 801cd4c:	af00      	add	r7, sp, #0
 801cd4e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cd50:	2300      	movs	r3, #0
 801cd52:	60fb      	str	r3, [r7, #12]
 801cd54:	e01e      	b.n	801cd94 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801cd56:	4913      	ldr	r1, [pc, #76]	; (801cda4 <etharp_cleanup_netif+0x5c>)
 801cd58:	68fa      	ldr	r2, [r7, #12]
 801cd5a:	4613      	mov	r3, r2
 801cd5c:	005b      	lsls	r3, r3, #1
 801cd5e:	4413      	add	r3, r2
 801cd60:	00db      	lsls	r3, r3, #3
 801cd62:	440b      	add	r3, r1
 801cd64:	3314      	adds	r3, #20
 801cd66:	781b      	ldrb	r3, [r3, #0]
 801cd68:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801cd6a:	7afb      	ldrb	r3, [r7, #11]
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	d00e      	beq.n	801cd8e <etharp_cleanup_netif+0x46>
 801cd70:	490c      	ldr	r1, [pc, #48]	; (801cda4 <etharp_cleanup_netif+0x5c>)
 801cd72:	68fa      	ldr	r2, [r7, #12]
 801cd74:	4613      	mov	r3, r2
 801cd76:	005b      	lsls	r3, r3, #1
 801cd78:	4413      	add	r3, r2
 801cd7a:	00db      	lsls	r3, r3, #3
 801cd7c:	440b      	add	r3, r1
 801cd7e:	3308      	adds	r3, #8
 801cd80:	681b      	ldr	r3, [r3, #0]
 801cd82:	687a      	ldr	r2, [r7, #4]
 801cd84:	429a      	cmp	r2, r3
 801cd86:	d102      	bne.n	801cd8e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801cd88:	68f8      	ldr	r0, [r7, #12]
 801cd8a:	f7ff fce5 	bl	801c758 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cd8e:	68fb      	ldr	r3, [r7, #12]
 801cd90:	3301      	adds	r3, #1
 801cd92:	60fb      	str	r3, [r7, #12]
 801cd94:	68fb      	ldr	r3, [r7, #12]
 801cd96:	2b09      	cmp	r3, #9
 801cd98:	dddd      	ble.n	801cd56 <etharp_cleanup_netif+0xe>
    }
  }
}
 801cd9a:	bf00      	nop
 801cd9c:	3710      	adds	r7, #16
 801cd9e:	46bd      	mov	sp, r7
 801cda0:	bd80      	pop	{r7, pc}
 801cda2:	bf00      	nop
 801cda4:	20004568 	.word	0x20004568

0801cda8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801cda8:	b5b0      	push	{r4, r5, r7, lr}
 801cdaa:	b08a      	sub	sp, #40	; 0x28
 801cdac:	af04      	add	r7, sp, #16
 801cdae:	6078      	str	r0, [r7, #4]
 801cdb0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801cdb2:	683b      	ldr	r3, [r7, #0]
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d107      	bne.n	801cdc8 <etharp_input+0x20>
 801cdb8:	4b3d      	ldr	r3, [pc, #244]	; (801ceb0 <etharp_input+0x108>)
 801cdba:	f240 228a 	movw	r2, #650	; 0x28a
 801cdbe:	493d      	ldr	r1, [pc, #244]	; (801ceb4 <etharp_input+0x10c>)
 801cdc0:	483d      	ldr	r0, [pc, #244]	; (801ceb8 <etharp_input+0x110>)
 801cdc2:	f002 f8df 	bl	801ef84 <iprintf>
 801cdc6:	e06f      	b.n	801cea8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	685b      	ldr	r3, [r3, #4]
 801cdcc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801cdce:	693b      	ldr	r3, [r7, #16]
 801cdd0:	881b      	ldrh	r3, [r3, #0]
 801cdd2:	b29b      	uxth	r3, r3
 801cdd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cdd8:	d10c      	bne.n	801cdf4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801cdda:	693b      	ldr	r3, [r7, #16]
 801cddc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801cdde:	2b06      	cmp	r3, #6
 801cde0:	d108      	bne.n	801cdf4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801cde2:	693b      	ldr	r3, [r7, #16]
 801cde4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801cde6:	2b04      	cmp	r3, #4
 801cde8:	d104      	bne.n	801cdf4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801cdea:	693b      	ldr	r3, [r7, #16]
 801cdec:	885b      	ldrh	r3, [r3, #2]
 801cdee:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801cdf0:	2b08      	cmp	r3, #8
 801cdf2:	d003      	beq.n	801cdfc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801cdf4:	6878      	ldr	r0, [r7, #4]
 801cdf6:	f7f8 fe7f 	bl	8015af8 <pbuf_free>
    return;
 801cdfa:	e055      	b.n	801cea8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801cdfc:	693b      	ldr	r3, [r7, #16]
 801cdfe:	330e      	adds	r3, #14
 801ce00:	681b      	ldr	r3, [r3, #0]
 801ce02:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801ce04:	693b      	ldr	r3, [r7, #16]
 801ce06:	3318      	adds	r3, #24
 801ce08:	681b      	ldr	r3, [r3, #0]
 801ce0a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ce0c:	683b      	ldr	r3, [r7, #0]
 801ce0e:	3304      	adds	r3, #4
 801ce10:	681b      	ldr	r3, [r3, #0]
 801ce12:	2b00      	cmp	r3, #0
 801ce14:	d102      	bne.n	801ce1c <etharp_input+0x74>
    for_us = 0;
 801ce16:	2300      	movs	r3, #0
 801ce18:	75fb      	strb	r3, [r7, #23]
 801ce1a:	e009      	b.n	801ce30 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801ce1c:	68ba      	ldr	r2, [r7, #8]
 801ce1e:	683b      	ldr	r3, [r7, #0]
 801ce20:	3304      	adds	r3, #4
 801ce22:	681b      	ldr	r3, [r3, #0]
 801ce24:	429a      	cmp	r2, r3
 801ce26:	bf0c      	ite	eq
 801ce28:	2301      	moveq	r3, #1
 801ce2a:	2300      	movne	r3, #0
 801ce2c:	b2db      	uxtb	r3, r3
 801ce2e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801ce30:	693b      	ldr	r3, [r7, #16]
 801ce32:	f103 0208 	add.w	r2, r3, #8
 801ce36:	7dfb      	ldrb	r3, [r7, #23]
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	d001      	beq.n	801ce40 <etharp_input+0x98>
 801ce3c:	2301      	movs	r3, #1
 801ce3e:	e000      	b.n	801ce42 <etharp_input+0x9a>
 801ce40:	2302      	movs	r3, #2
 801ce42:	f107 010c 	add.w	r1, r7, #12
 801ce46:	6838      	ldr	r0, [r7, #0]
 801ce48:	f7ff fed8 	bl	801cbfc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801ce4c:	693b      	ldr	r3, [r7, #16]
 801ce4e:	88db      	ldrh	r3, [r3, #6]
 801ce50:	b29b      	uxth	r3, r3
 801ce52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ce56:	d003      	beq.n	801ce60 <etharp_input+0xb8>
 801ce58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ce5c:	d01e      	beq.n	801ce9c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801ce5e:	e020      	b.n	801cea2 <etharp_input+0xfa>
      if (for_us) {
 801ce60:	7dfb      	ldrb	r3, [r7, #23]
 801ce62:	2b00      	cmp	r3, #0
 801ce64:	d01c      	beq.n	801cea0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801ce66:	683b      	ldr	r3, [r7, #0]
 801ce68:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801ce6c:	693b      	ldr	r3, [r7, #16]
 801ce6e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801ce72:	683b      	ldr	r3, [r7, #0]
 801ce74:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801ce78:	683b      	ldr	r3, [r7, #0]
 801ce7a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801ce7c:	693a      	ldr	r2, [r7, #16]
 801ce7e:	3208      	adds	r2, #8
        etharp_raw(netif,
 801ce80:	2102      	movs	r1, #2
 801ce82:	9103      	str	r1, [sp, #12]
 801ce84:	f107 010c 	add.w	r1, r7, #12
 801ce88:	9102      	str	r1, [sp, #8]
 801ce8a:	9201      	str	r2, [sp, #4]
 801ce8c:	9300      	str	r3, [sp, #0]
 801ce8e:	462b      	mov	r3, r5
 801ce90:	4622      	mov	r2, r4
 801ce92:	4601      	mov	r1, r0
 801ce94:	6838      	ldr	r0, [r7, #0]
 801ce96:	f000 faeb 	bl	801d470 <etharp_raw>
      break;
 801ce9a:	e001      	b.n	801cea0 <etharp_input+0xf8>
      break;
 801ce9c:	bf00      	nop
 801ce9e:	e000      	b.n	801cea2 <etharp_input+0xfa>
      break;
 801cea0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801cea2:	6878      	ldr	r0, [r7, #4]
 801cea4:	f7f8 fe28 	bl	8015af8 <pbuf_free>
}
 801cea8:	3718      	adds	r7, #24
 801ceaa:	46bd      	mov	sp, r7
 801ceac:	bdb0      	pop	{r4, r5, r7, pc}
 801ceae:	bf00      	nop
 801ceb0:	080224cc 	.word	0x080224cc
 801ceb4:	0802261c 	.word	0x0802261c
 801ceb8:	08022544 	.word	0x08022544

0801cebc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801cebc:	b580      	push	{r7, lr}
 801cebe:	b086      	sub	sp, #24
 801cec0:	af02      	add	r7, sp, #8
 801cec2:	60f8      	str	r0, [r7, #12]
 801cec4:	60b9      	str	r1, [r7, #8]
 801cec6:	4613      	mov	r3, r2
 801cec8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801ceca:	79fa      	ldrb	r2, [r7, #7]
 801cecc:	4944      	ldr	r1, [pc, #272]	; (801cfe0 <etharp_output_to_arp_index+0x124>)
 801cece:	4613      	mov	r3, r2
 801ced0:	005b      	lsls	r3, r3, #1
 801ced2:	4413      	add	r3, r2
 801ced4:	00db      	lsls	r3, r3, #3
 801ced6:	440b      	add	r3, r1
 801ced8:	3314      	adds	r3, #20
 801ceda:	781b      	ldrb	r3, [r3, #0]
 801cedc:	2b01      	cmp	r3, #1
 801cede:	d806      	bhi.n	801ceee <etharp_output_to_arp_index+0x32>
 801cee0:	4b40      	ldr	r3, [pc, #256]	; (801cfe4 <etharp_output_to_arp_index+0x128>)
 801cee2:	f240 22ef 	movw	r2, #751	; 0x2ef
 801cee6:	4940      	ldr	r1, [pc, #256]	; (801cfe8 <etharp_output_to_arp_index+0x12c>)
 801cee8:	4840      	ldr	r0, [pc, #256]	; (801cfec <etharp_output_to_arp_index+0x130>)
 801ceea:	f002 f84b 	bl	801ef84 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801ceee:	79fa      	ldrb	r2, [r7, #7]
 801cef0:	493b      	ldr	r1, [pc, #236]	; (801cfe0 <etharp_output_to_arp_index+0x124>)
 801cef2:	4613      	mov	r3, r2
 801cef4:	005b      	lsls	r3, r3, #1
 801cef6:	4413      	add	r3, r2
 801cef8:	00db      	lsls	r3, r3, #3
 801cefa:	440b      	add	r3, r1
 801cefc:	3314      	adds	r3, #20
 801cefe:	781b      	ldrb	r3, [r3, #0]
 801cf00:	2b02      	cmp	r3, #2
 801cf02:	d153      	bne.n	801cfac <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801cf04:	79fa      	ldrb	r2, [r7, #7]
 801cf06:	4936      	ldr	r1, [pc, #216]	; (801cfe0 <etharp_output_to_arp_index+0x124>)
 801cf08:	4613      	mov	r3, r2
 801cf0a:	005b      	lsls	r3, r3, #1
 801cf0c:	4413      	add	r3, r2
 801cf0e:	00db      	lsls	r3, r3, #3
 801cf10:	440b      	add	r3, r1
 801cf12:	3312      	adds	r3, #18
 801cf14:	881b      	ldrh	r3, [r3, #0]
 801cf16:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801cf1a:	d919      	bls.n	801cf50 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801cf1c:	79fa      	ldrb	r2, [r7, #7]
 801cf1e:	4613      	mov	r3, r2
 801cf20:	005b      	lsls	r3, r3, #1
 801cf22:	4413      	add	r3, r2
 801cf24:	00db      	lsls	r3, r3, #3
 801cf26:	4a2e      	ldr	r2, [pc, #184]	; (801cfe0 <etharp_output_to_arp_index+0x124>)
 801cf28:	4413      	add	r3, r2
 801cf2a:	3304      	adds	r3, #4
 801cf2c:	4619      	mov	r1, r3
 801cf2e:	68f8      	ldr	r0, [r7, #12]
 801cf30:	f000 fb4c 	bl	801d5cc <etharp_request>
 801cf34:	4603      	mov	r3, r0
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d138      	bne.n	801cfac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801cf3a:	79fa      	ldrb	r2, [r7, #7]
 801cf3c:	4928      	ldr	r1, [pc, #160]	; (801cfe0 <etharp_output_to_arp_index+0x124>)
 801cf3e:	4613      	mov	r3, r2
 801cf40:	005b      	lsls	r3, r3, #1
 801cf42:	4413      	add	r3, r2
 801cf44:	00db      	lsls	r3, r3, #3
 801cf46:	440b      	add	r3, r1
 801cf48:	3314      	adds	r3, #20
 801cf4a:	2203      	movs	r2, #3
 801cf4c:	701a      	strb	r2, [r3, #0]
 801cf4e:	e02d      	b.n	801cfac <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801cf50:	79fa      	ldrb	r2, [r7, #7]
 801cf52:	4923      	ldr	r1, [pc, #140]	; (801cfe0 <etharp_output_to_arp_index+0x124>)
 801cf54:	4613      	mov	r3, r2
 801cf56:	005b      	lsls	r3, r3, #1
 801cf58:	4413      	add	r3, r2
 801cf5a:	00db      	lsls	r3, r3, #3
 801cf5c:	440b      	add	r3, r1
 801cf5e:	3312      	adds	r3, #18
 801cf60:	881b      	ldrh	r3, [r3, #0]
 801cf62:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801cf66:	d321      	bcc.n	801cfac <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801cf68:	79fa      	ldrb	r2, [r7, #7]
 801cf6a:	4613      	mov	r3, r2
 801cf6c:	005b      	lsls	r3, r3, #1
 801cf6e:	4413      	add	r3, r2
 801cf70:	00db      	lsls	r3, r3, #3
 801cf72:	4a1b      	ldr	r2, [pc, #108]	; (801cfe0 <etharp_output_to_arp_index+0x124>)
 801cf74:	4413      	add	r3, r2
 801cf76:	1d19      	adds	r1, r3, #4
 801cf78:	79fa      	ldrb	r2, [r7, #7]
 801cf7a:	4613      	mov	r3, r2
 801cf7c:	005b      	lsls	r3, r3, #1
 801cf7e:	4413      	add	r3, r2
 801cf80:	00db      	lsls	r3, r3, #3
 801cf82:	3308      	adds	r3, #8
 801cf84:	4a16      	ldr	r2, [pc, #88]	; (801cfe0 <etharp_output_to_arp_index+0x124>)
 801cf86:	4413      	add	r3, r2
 801cf88:	3304      	adds	r3, #4
 801cf8a:	461a      	mov	r2, r3
 801cf8c:	68f8      	ldr	r0, [r7, #12]
 801cf8e:	f000 fafb 	bl	801d588 <etharp_request_dst>
 801cf92:	4603      	mov	r3, r0
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	d109      	bne.n	801cfac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801cf98:	79fa      	ldrb	r2, [r7, #7]
 801cf9a:	4911      	ldr	r1, [pc, #68]	; (801cfe0 <etharp_output_to_arp_index+0x124>)
 801cf9c:	4613      	mov	r3, r2
 801cf9e:	005b      	lsls	r3, r3, #1
 801cfa0:	4413      	add	r3, r2
 801cfa2:	00db      	lsls	r3, r3, #3
 801cfa4:	440b      	add	r3, r1
 801cfa6:	3314      	adds	r3, #20
 801cfa8:	2203      	movs	r2, #3
 801cfaa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801cfac:	68fb      	ldr	r3, [r7, #12]
 801cfae:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801cfb2:	79fa      	ldrb	r2, [r7, #7]
 801cfb4:	4613      	mov	r3, r2
 801cfb6:	005b      	lsls	r3, r3, #1
 801cfb8:	4413      	add	r3, r2
 801cfba:	00db      	lsls	r3, r3, #3
 801cfbc:	3308      	adds	r3, #8
 801cfbe:	4a08      	ldr	r2, [pc, #32]	; (801cfe0 <etharp_output_to_arp_index+0x124>)
 801cfc0:	4413      	add	r3, r2
 801cfc2:	1d1a      	adds	r2, r3, #4
 801cfc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801cfc8:	9300      	str	r3, [sp, #0]
 801cfca:	4613      	mov	r3, r2
 801cfcc:	460a      	mov	r2, r1
 801cfce:	68b9      	ldr	r1, [r7, #8]
 801cfd0:	68f8      	ldr	r0, [r7, #12]
 801cfd2:	f001 fe33 	bl	801ec3c <ethernet_output>
 801cfd6:	4603      	mov	r3, r0
}
 801cfd8:	4618      	mov	r0, r3
 801cfda:	3710      	adds	r7, #16
 801cfdc:	46bd      	mov	sp, r7
 801cfde:	bd80      	pop	{r7, pc}
 801cfe0:	20004568 	.word	0x20004568
 801cfe4:	080224cc 	.word	0x080224cc
 801cfe8:	0802263c 	.word	0x0802263c
 801cfec:	08022544 	.word	0x08022544

0801cff0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801cff0:	b580      	push	{r7, lr}
 801cff2:	b08a      	sub	sp, #40	; 0x28
 801cff4:	af02      	add	r7, sp, #8
 801cff6:	60f8      	str	r0, [r7, #12]
 801cff8:	60b9      	str	r1, [r7, #8]
 801cffa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d000:	68fb      	ldr	r3, [r7, #12]
 801d002:	2b00      	cmp	r3, #0
 801d004:	d106      	bne.n	801d014 <etharp_output+0x24>
 801d006:	4b73      	ldr	r3, [pc, #460]	; (801d1d4 <etharp_output+0x1e4>)
 801d008:	f240 321e 	movw	r2, #798	; 0x31e
 801d00c:	4972      	ldr	r1, [pc, #456]	; (801d1d8 <etharp_output+0x1e8>)
 801d00e:	4873      	ldr	r0, [pc, #460]	; (801d1dc <etharp_output+0x1ec>)
 801d010:	f001 ffb8 	bl	801ef84 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801d014:	68bb      	ldr	r3, [r7, #8]
 801d016:	2b00      	cmp	r3, #0
 801d018:	d106      	bne.n	801d028 <etharp_output+0x38>
 801d01a:	4b6e      	ldr	r3, [pc, #440]	; (801d1d4 <etharp_output+0x1e4>)
 801d01c:	f240 321f 	movw	r2, #799	; 0x31f
 801d020:	496f      	ldr	r1, [pc, #444]	; (801d1e0 <etharp_output+0x1f0>)
 801d022:	486e      	ldr	r0, [pc, #440]	; (801d1dc <etharp_output+0x1ec>)
 801d024:	f001 ffae 	bl	801ef84 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	2b00      	cmp	r3, #0
 801d02c:	d106      	bne.n	801d03c <etharp_output+0x4c>
 801d02e:	4b69      	ldr	r3, [pc, #420]	; (801d1d4 <etharp_output+0x1e4>)
 801d030:	f44f 7248 	mov.w	r2, #800	; 0x320
 801d034:	496b      	ldr	r1, [pc, #428]	; (801d1e4 <etharp_output+0x1f4>)
 801d036:	4869      	ldr	r0, [pc, #420]	; (801d1dc <etharp_output+0x1ec>)
 801d038:	f001 ffa4 	bl	801ef84 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	681b      	ldr	r3, [r3, #0]
 801d040:	68f9      	ldr	r1, [r7, #12]
 801d042:	4618      	mov	r0, r3
 801d044:	f000 fef6 	bl	801de34 <ip4_addr_isbroadcast_u32>
 801d048:	4603      	mov	r3, r0
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d002      	beq.n	801d054 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801d04e:	4b66      	ldr	r3, [pc, #408]	; (801d1e8 <etharp_output+0x1f8>)
 801d050:	61fb      	str	r3, [r7, #28]
 801d052:	e0af      	b.n	801d1b4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d05c:	2be0      	cmp	r3, #224	; 0xe0
 801d05e:	d118      	bne.n	801d092 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801d060:	2301      	movs	r3, #1
 801d062:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801d064:	2300      	movs	r3, #0
 801d066:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801d068:	235e      	movs	r3, #94	; 0x5e
 801d06a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	3301      	adds	r3, #1
 801d070:	781b      	ldrb	r3, [r3, #0]
 801d072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d076:	b2db      	uxtb	r3, r3
 801d078:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801d07a:	687b      	ldr	r3, [r7, #4]
 801d07c:	3302      	adds	r3, #2
 801d07e:	781b      	ldrb	r3, [r3, #0]
 801d080:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801d082:	687b      	ldr	r3, [r7, #4]
 801d084:	3303      	adds	r3, #3
 801d086:	781b      	ldrb	r3, [r3, #0]
 801d088:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801d08a:	f107 0310 	add.w	r3, r7, #16
 801d08e:	61fb      	str	r3, [r7, #28]
 801d090:	e090      	b.n	801d1b4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d092:	687b      	ldr	r3, [r7, #4]
 801d094:	681a      	ldr	r2, [r3, #0]
 801d096:	68fb      	ldr	r3, [r7, #12]
 801d098:	3304      	adds	r3, #4
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	405a      	eors	r2, r3
 801d09e:	68fb      	ldr	r3, [r7, #12]
 801d0a0:	3308      	adds	r3, #8
 801d0a2:	681b      	ldr	r3, [r3, #0]
 801d0a4:	4013      	ands	r3, r2
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	d012      	beq.n	801d0d0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801d0aa:	687b      	ldr	r3, [r7, #4]
 801d0ac:	681b      	ldr	r3, [r3, #0]
 801d0ae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d0b0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801d0b4:	4293      	cmp	r3, r2
 801d0b6:	d00b      	beq.n	801d0d0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801d0b8:	68fb      	ldr	r3, [r7, #12]
 801d0ba:	330c      	adds	r3, #12
 801d0bc:	681b      	ldr	r3, [r3, #0]
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d003      	beq.n	801d0ca <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801d0c2:	68fb      	ldr	r3, [r7, #12]
 801d0c4:	330c      	adds	r3, #12
 801d0c6:	61bb      	str	r3, [r7, #24]
 801d0c8:	e002      	b.n	801d0d0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801d0ca:	f06f 0303 	mvn.w	r3, #3
 801d0ce:	e07d      	b.n	801d1cc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d0d0:	4b46      	ldr	r3, [pc, #280]	; (801d1ec <etharp_output+0x1fc>)
 801d0d2:	781b      	ldrb	r3, [r3, #0]
 801d0d4:	4619      	mov	r1, r3
 801d0d6:	4a46      	ldr	r2, [pc, #280]	; (801d1f0 <etharp_output+0x200>)
 801d0d8:	460b      	mov	r3, r1
 801d0da:	005b      	lsls	r3, r3, #1
 801d0dc:	440b      	add	r3, r1
 801d0de:	00db      	lsls	r3, r3, #3
 801d0e0:	4413      	add	r3, r2
 801d0e2:	3314      	adds	r3, #20
 801d0e4:	781b      	ldrb	r3, [r3, #0]
 801d0e6:	2b01      	cmp	r3, #1
 801d0e8:	d925      	bls.n	801d136 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d0ea:	4b40      	ldr	r3, [pc, #256]	; (801d1ec <etharp_output+0x1fc>)
 801d0ec:	781b      	ldrb	r3, [r3, #0]
 801d0ee:	4619      	mov	r1, r3
 801d0f0:	4a3f      	ldr	r2, [pc, #252]	; (801d1f0 <etharp_output+0x200>)
 801d0f2:	460b      	mov	r3, r1
 801d0f4:	005b      	lsls	r3, r3, #1
 801d0f6:	440b      	add	r3, r1
 801d0f8:	00db      	lsls	r3, r3, #3
 801d0fa:	4413      	add	r3, r2
 801d0fc:	3308      	adds	r3, #8
 801d0fe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d100:	68fa      	ldr	r2, [r7, #12]
 801d102:	429a      	cmp	r2, r3
 801d104:	d117      	bne.n	801d136 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801d106:	69bb      	ldr	r3, [r7, #24]
 801d108:	681a      	ldr	r2, [r3, #0]
 801d10a:	4b38      	ldr	r3, [pc, #224]	; (801d1ec <etharp_output+0x1fc>)
 801d10c:	781b      	ldrb	r3, [r3, #0]
 801d10e:	4618      	mov	r0, r3
 801d110:	4937      	ldr	r1, [pc, #220]	; (801d1f0 <etharp_output+0x200>)
 801d112:	4603      	mov	r3, r0
 801d114:	005b      	lsls	r3, r3, #1
 801d116:	4403      	add	r3, r0
 801d118:	00db      	lsls	r3, r3, #3
 801d11a:	440b      	add	r3, r1
 801d11c:	3304      	adds	r3, #4
 801d11e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d120:	429a      	cmp	r2, r3
 801d122:	d108      	bne.n	801d136 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801d124:	4b31      	ldr	r3, [pc, #196]	; (801d1ec <etharp_output+0x1fc>)
 801d126:	781b      	ldrb	r3, [r3, #0]
 801d128:	461a      	mov	r2, r3
 801d12a:	68b9      	ldr	r1, [r7, #8]
 801d12c:	68f8      	ldr	r0, [r7, #12]
 801d12e:	f7ff fec5 	bl	801cebc <etharp_output_to_arp_index>
 801d132:	4603      	mov	r3, r0
 801d134:	e04a      	b.n	801d1cc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d136:	2300      	movs	r3, #0
 801d138:	75fb      	strb	r3, [r7, #23]
 801d13a:	e031      	b.n	801d1a0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d13c:	7dfa      	ldrb	r2, [r7, #23]
 801d13e:	492c      	ldr	r1, [pc, #176]	; (801d1f0 <etharp_output+0x200>)
 801d140:	4613      	mov	r3, r2
 801d142:	005b      	lsls	r3, r3, #1
 801d144:	4413      	add	r3, r2
 801d146:	00db      	lsls	r3, r3, #3
 801d148:	440b      	add	r3, r1
 801d14a:	3314      	adds	r3, #20
 801d14c:	781b      	ldrb	r3, [r3, #0]
 801d14e:	2b01      	cmp	r3, #1
 801d150:	d923      	bls.n	801d19a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801d152:	7dfa      	ldrb	r2, [r7, #23]
 801d154:	4926      	ldr	r1, [pc, #152]	; (801d1f0 <etharp_output+0x200>)
 801d156:	4613      	mov	r3, r2
 801d158:	005b      	lsls	r3, r3, #1
 801d15a:	4413      	add	r3, r2
 801d15c:	00db      	lsls	r3, r3, #3
 801d15e:	440b      	add	r3, r1
 801d160:	3308      	adds	r3, #8
 801d162:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d164:	68fa      	ldr	r2, [r7, #12]
 801d166:	429a      	cmp	r2, r3
 801d168:	d117      	bne.n	801d19a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801d16a:	69bb      	ldr	r3, [r7, #24]
 801d16c:	6819      	ldr	r1, [r3, #0]
 801d16e:	7dfa      	ldrb	r2, [r7, #23]
 801d170:	481f      	ldr	r0, [pc, #124]	; (801d1f0 <etharp_output+0x200>)
 801d172:	4613      	mov	r3, r2
 801d174:	005b      	lsls	r3, r3, #1
 801d176:	4413      	add	r3, r2
 801d178:	00db      	lsls	r3, r3, #3
 801d17a:	4403      	add	r3, r0
 801d17c:	3304      	adds	r3, #4
 801d17e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801d180:	4299      	cmp	r1, r3
 801d182:	d10a      	bne.n	801d19a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801d184:	4a19      	ldr	r2, [pc, #100]	; (801d1ec <etharp_output+0x1fc>)
 801d186:	7dfb      	ldrb	r3, [r7, #23]
 801d188:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801d18a:	7dfb      	ldrb	r3, [r7, #23]
 801d18c:	461a      	mov	r2, r3
 801d18e:	68b9      	ldr	r1, [r7, #8]
 801d190:	68f8      	ldr	r0, [r7, #12]
 801d192:	f7ff fe93 	bl	801cebc <etharp_output_to_arp_index>
 801d196:	4603      	mov	r3, r0
 801d198:	e018      	b.n	801d1cc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d19a:	7dfb      	ldrb	r3, [r7, #23]
 801d19c:	3301      	adds	r3, #1
 801d19e:	75fb      	strb	r3, [r7, #23]
 801d1a0:	7dfb      	ldrb	r3, [r7, #23]
 801d1a2:	2b09      	cmp	r3, #9
 801d1a4:	d9ca      	bls.n	801d13c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801d1a6:	68ba      	ldr	r2, [r7, #8]
 801d1a8:	69b9      	ldr	r1, [r7, #24]
 801d1aa:	68f8      	ldr	r0, [r7, #12]
 801d1ac:	f000 f822 	bl	801d1f4 <etharp_query>
 801d1b0:	4603      	mov	r3, r0
 801d1b2:	e00b      	b.n	801d1cc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801d1b4:	68fb      	ldr	r3, [r7, #12]
 801d1b6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801d1ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d1be:	9300      	str	r3, [sp, #0]
 801d1c0:	69fb      	ldr	r3, [r7, #28]
 801d1c2:	68b9      	ldr	r1, [r7, #8]
 801d1c4:	68f8      	ldr	r0, [r7, #12]
 801d1c6:	f001 fd39 	bl	801ec3c <ethernet_output>
 801d1ca:	4603      	mov	r3, r0
}
 801d1cc:	4618      	mov	r0, r3
 801d1ce:	3720      	adds	r7, #32
 801d1d0:	46bd      	mov	sp, r7
 801d1d2:	bd80      	pop	{r7, pc}
 801d1d4:	080224cc 	.word	0x080224cc
 801d1d8:	0802261c 	.word	0x0802261c
 801d1dc:	08022544 	.word	0x08022544
 801d1e0:	0802266c 	.word	0x0802266c
 801d1e4:	0802260c 	.word	0x0802260c
 801d1e8:	08033804 	.word	0x08033804
 801d1ec:	20004658 	.word	0x20004658
 801d1f0:	20004568 	.word	0x20004568

0801d1f4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801d1f4:	b580      	push	{r7, lr}
 801d1f6:	b08c      	sub	sp, #48	; 0x30
 801d1f8:	af02      	add	r7, sp, #8
 801d1fa:	60f8      	str	r0, [r7, #12]
 801d1fc:	60b9      	str	r1, [r7, #8]
 801d1fe:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801d200:	68fb      	ldr	r3, [r7, #12]
 801d202:	3326      	adds	r3, #38	; 0x26
 801d204:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801d206:	23ff      	movs	r3, #255	; 0xff
 801d208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801d20c:	2300      	movs	r3, #0
 801d20e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d210:	68bb      	ldr	r3, [r7, #8]
 801d212:	681b      	ldr	r3, [r3, #0]
 801d214:	68f9      	ldr	r1, [r7, #12]
 801d216:	4618      	mov	r0, r3
 801d218:	f000 fe0c 	bl	801de34 <ip4_addr_isbroadcast_u32>
 801d21c:	4603      	mov	r3, r0
 801d21e:	2b00      	cmp	r3, #0
 801d220:	d10c      	bne.n	801d23c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d222:	68bb      	ldr	r3, [r7, #8]
 801d224:	681b      	ldr	r3, [r3, #0]
 801d226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d22a:	2be0      	cmp	r3, #224	; 0xe0
 801d22c:	d006      	beq.n	801d23c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d22e:	68bb      	ldr	r3, [r7, #8]
 801d230:	2b00      	cmp	r3, #0
 801d232:	d003      	beq.n	801d23c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801d234:	68bb      	ldr	r3, [r7, #8]
 801d236:	681b      	ldr	r3, [r3, #0]
 801d238:	2b00      	cmp	r3, #0
 801d23a:	d102      	bne.n	801d242 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d23c:	f06f 030f 	mvn.w	r3, #15
 801d240:	e102      	b.n	801d448 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801d242:	68fa      	ldr	r2, [r7, #12]
 801d244:	2101      	movs	r1, #1
 801d246:	68b8      	ldr	r0, [r7, #8]
 801d248:	f7ff fb60 	bl	801c90c <etharp_find_entry>
 801d24c:	4603      	mov	r3, r0
 801d24e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801d250:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d254:	2b00      	cmp	r3, #0
 801d256:	da02      	bge.n	801d25e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801d258:	8a7b      	ldrh	r3, [r7, #18]
 801d25a:	b25b      	sxtb	r3, r3
 801d25c:	e0f4      	b.n	801d448 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801d25e:	8a7b      	ldrh	r3, [r7, #18]
 801d260:	2b7e      	cmp	r3, #126	; 0x7e
 801d262:	d906      	bls.n	801d272 <etharp_query+0x7e>
 801d264:	4b7a      	ldr	r3, [pc, #488]	; (801d450 <etharp_query+0x25c>)
 801d266:	f240 32c1 	movw	r2, #961	; 0x3c1
 801d26a:	497a      	ldr	r1, [pc, #488]	; (801d454 <etharp_query+0x260>)
 801d26c:	487a      	ldr	r0, [pc, #488]	; (801d458 <etharp_query+0x264>)
 801d26e:	f001 fe89 	bl	801ef84 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801d272:	8a7b      	ldrh	r3, [r7, #18]
 801d274:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801d276:	7c7a      	ldrb	r2, [r7, #17]
 801d278:	4978      	ldr	r1, [pc, #480]	; (801d45c <etharp_query+0x268>)
 801d27a:	4613      	mov	r3, r2
 801d27c:	005b      	lsls	r3, r3, #1
 801d27e:	4413      	add	r3, r2
 801d280:	00db      	lsls	r3, r3, #3
 801d282:	440b      	add	r3, r1
 801d284:	3314      	adds	r3, #20
 801d286:	781b      	ldrb	r3, [r3, #0]
 801d288:	2b00      	cmp	r3, #0
 801d28a:	d115      	bne.n	801d2b8 <etharp_query+0xc4>
    is_new_entry = 1;
 801d28c:	2301      	movs	r3, #1
 801d28e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801d290:	7c7a      	ldrb	r2, [r7, #17]
 801d292:	4972      	ldr	r1, [pc, #456]	; (801d45c <etharp_query+0x268>)
 801d294:	4613      	mov	r3, r2
 801d296:	005b      	lsls	r3, r3, #1
 801d298:	4413      	add	r3, r2
 801d29a:	00db      	lsls	r3, r3, #3
 801d29c:	440b      	add	r3, r1
 801d29e:	3314      	adds	r3, #20
 801d2a0:	2201      	movs	r2, #1
 801d2a2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801d2a4:	7c7a      	ldrb	r2, [r7, #17]
 801d2a6:	496d      	ldr	r1, [pc, #436]	; (801d45c <etharp_query+0x268>)
 801d2a8:	4613      	mov	r3, r2
 801d2aa:	005b      	lsls	r3, r3, #1
 801d2ac:	4413      	add	r3, r2
 801d2ae:	00db      	lsls	r3, r3, #3
 801d2b0:	440b      	add	r3, r1
 801d2b2:	3308      	adds	r3, #8
 801d2b4:	68fa      	ldr	r2, [r7, #12]
 801d2b6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801d2b8:	7c7a      	ldrb	r2, [r7, #17]
 801d2ba:	4968      	ldr	r1, [pc, #416]	; (801d45c <etharp_query+0x268>)
 801d2bc:	4613      	mov	r3, r2
 801d2be:	005b      	lsls	r3, r3, #1
 801d2c0:	4413      	add	r3, r2
 801d2c2:	00db      	lsls	r3, r3, #3
 801d2c4:	440b      	add	r3, r1
 801d2c6:	3314      	adds	r3, #20
 801d2c8:	781b      	ldrb	r3, [r3, #0]
 801d2ca:	2b01      	cmp	r3, #1
 801d2cc:	d011      	beq.n	801d2f2 <etharp_query+0xfe>
 801d2ce:	7c7a      	ldrb	r2, [r7, #17]
 801d2d0:	4962      	ldr	r1, [pc, #392]	; (801d45c <etharp_query+0x268>)
 801d2d2:	4613      	mov	r3, r2
 801d2d4:	005b      	lsls	r3, r3, #1
 801d2d6:	4413      	add	r3, r2
 801d2d8:	00db      	lsls	r3, r3, #3
 801d2da:	440b      	add	r3, r1
 801d2dc:	3314      	adds	r3, #20
 801d2de:	781b      	ldrb	r3, [r3, #0]
 801d2e0:	2b01      	cmp	r3, #1
 801d2e2:	d806      	bhi.n	801d2f2 <etharp_query+0xfe>
 801d2e4:	4b5a      	ldr	r3, [pc, #360]	; (801d450 <etharp_query+0x25c>)
 801d2e6:	f240 32cf 	movw	r2, #975	; 0x3cf
 801d2ea:	495d      	ldr	r1, [pc, #372]	; (801d460 <etharp_query+0x26c>)
 801d2ec:	485a      	ldr	r0, [pc, #360]	; (801d458 <etharp_query+0x264>)
 801d2ee:	f001 fe49 	bl	801ef84 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801d2f2:	6a3b      	ldr	r3, [r7, #32]
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	d102      	bne.n	801d2fe <etharp_query+0x10a>
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	2b00      	cmp	r3, #0
 801d2fc:	d10c      	bne.n	801d318 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801d2fe:	68b9      	ldr	r1, [r7, #8]
 801d300:	68f8      	ldr	r0, [r7, #12]
 801d302:	f000 f963 	bl	801d5cc <etharp_request>
 801d306:	4603      	mov	r3, r0
 801d308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801d30c:	687b      	ldr	r3, [r7, #4]
 801d30e:	2b00      	cmp	r3, #0
 801d310:	d102      	bne.n	801d318 <etharp_query+0x124>
      return result;
 801d312:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801d316:	e097      	b.n	801d448 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801d318:	687b      	ldr	r3, [r7, #4]
 801d31a:	2b00      	cmp	r3, #0
 801d31c:	d106      	bne.n	801d32c <etharp_query+0x138>
 801d31e:	4b4c      	ldr	r3, [pc, #304]	; (801d450 <etharp_query+0x25c>)
 801d320:	f240 32e1 	movw	r2, #993	; 0x3e1
 801d324:	494f      	ldr	r1, [pc, #316]	; (801d464 <etharp_query+0x270>)
 801d326:	484c      	ldr	r0, [pc, #304]	; (801d458 <etharp_query+0x264>)
 801d328:	f001 fe2c 	bl	801ef84 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801d32c:	7c7a      	ldrb	r2, [r7, #17]
 801d32e:	494b      	ldr	r1, [pc, #300]	; (801d45c <etharp_query+0x268>)
 801d330:	4613      	mov	r3, r2
 801d332:	005b      	lsls	r3, r3, #1
 801d334:	4413      	add	r3, r2
 801d336:	00db      	lsls	r3, r3, #3
 801d338:	440b      	add	r3, r1
 801d33a:	3314      	adds	r3, #20
 801d33c:	781b      	ldrb	r3, [r3, #0]
 801d33e:	2b01      	cmp	r3, #1
 801d340:	d918      	bls.n	801d374 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801d342:	4a49      	ldr	r2, [pc, #292]	; (801d468 <etharp_query+0x274>)
 801d344:	7c7b      	ldrb	r3, [r7, #17]
 801d346:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801d348:	7c7a      	ldrb	r2, [r7, #17]
 801d34a:	4613      	mov	r3, r2
 801d34c:	005b      	lsls	r3, r3, #1
 801d34e:	4413      	add	r3, r2
 801d350:	00db      	lsls	r3, r3, #3
 801d352:	3308      	adds	r3, #8
 801d354:	4a41      	ldr	r2, [pc, #260]	; (801d45c <etharp_query+0x268>)
 801d356:	4413      	add	r3, r2
 801d358:	1d1a      	adds	r2, r3, #4
 801d35a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d35e:	9300      	str	r3, [sp, #0]
 801d360:	4613      	mov	r3, r2
 801d362:	697a      	ldr	r2, [r7, #20]
 801d364:	6879      	ldr	r1, [r7, #4]
 801d366:	68f8      	ldr	r0, [r7, #12]
 801d368:	f001 fc68 	bl	801ec3c <ethernet_output>
 801d36c:	4603      	mov	r3, r0
 801d36e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d372:	e067      	b.n	801d444 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d374:	7c7a      	ldrb	r2, [r7, #17]
 801d376:	4939      	ldr	r1, [pc, #228]	; (801d45c <etharp_query+0x268>)
 801d378:	4613      	mov	r3, r2
 801d37a:	005b      	lsls	r3, r3, #1
 801d37c:	4413      	add	r3, r2
 801d37e:	00db      	lsls	r3, r3, #3
 801d380:	440b      	add	r3, r1
 801d382:	3314      	adds	r3, #20
 801d384:	781b      	ldrb	r3, [r3, #0]
 801d386:	2b01      	cmp	r3, #1
 801d388:	d15c      	bne.n	801d444 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801d38a:	2300      	movs	r3, #0
 801d38c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801d38e:	687b      	ldr	r3, [r7, #4]
 801d390:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d392:	e01c      	b.n	801d3ce <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801d394:	69fb      	ldr	r3, [r7, #28]
 801d396:	895a      	ldrh	r2, [r3, #10]
 801d398:	69fb      	ldr	r3, [r7, #28]
 801d39a:	891b      	ldrh	r3, [r3, #8]
 801d39c:	429a      	cmp	r2, r3
 801d39e:	d10a      	bne.n	801d3b6 <etharp_query+0x1c2>
 801d3a0:	69fb      	ldr	r3, [r7, #28]
 801d3a2:	681b      	ldr	r3, [r3, #0]
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d006      	beq.n	801d3b6 <etharp_query+0x1c2>
 801d3a8:	4b29      	ldr	r3, [pc, #164]	; (801d450 <etharp_query+0x25c>)
 801d3aa:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801d3ae:	492f      	ldr	r1, [pc, #188]	; (801d46c <etharp_query+0x278>)
 801d3b0:	4829      	ldr	r0, [pc, #164]	; (801d458 <etharp_query+0x264>)
 801d3b2:	f001 fde7 	bl	801ef84 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801d3b6:	69fb      	ldr	r3, [r7, #28]
 801d3b8:	7b1b      	ldrb	r3, [r3, #12]
 801d3ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	d002      	beq.n	801d3c8 <etharp_query+0x1d4>
        copy_needed = 1;
 801d3c2:	2301      	movs	r3, #1
 801d3c4:	61bb      	str	r3, [r7, #24]
        break;
 801d3c6:	e005      	b.n	801d3d4 <etharp_query+0x1e0>
      }
      p = p->next;
 801d3c8:	69fb      	ldr	r3, [r7, #28]
 801d3ca:	681b      	ldr	r3, [r3, #0]
 801d3cc:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d3ce:	69fb      	ldr	r3, [r7, #28]
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	d1df      	bne.n	801d394 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 801d3d4:	69bb      	ldr	r3, [r7, #24]
 801d3d6:	2b00      	cmp	r3, #0
 801d3d8:	d007      	beq.n	801d3ea <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801d3da:	687a      	ldr	r2, [r7, #4]
 801d3dc:	f44f 7120 	mov.w	r1, #640	; 0x280
 801d3e0:	200e      	movs	r0, #14
 801d3e2:	f7f8 fdf1 	bl	8015fc8 <pbuf_clone>
 801d3e6:	61f8      	str	r0, [r7, #28]
 801d3e8:	e004      	b.n	801d3f4 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801d3ea:	687b      	ldr	r3, [r7, #4]
 801d3ec:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801d3ee:	69f8      	ldr	r0, [r7, #28]
 801d3f0:	f7f8 fc28 	bl	8015c44 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801d3f4:	69fb      	ldr	r3, [r7, #28]
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	d021      	beq.n	801d43e <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801d3fa:	7c7a      	ldrb	r2, [r7, #17]
 801d3fc:	4917      	ldr	r1, [pc, #92]	; (801d45c <etharp_query+0x268>)
 801d3fe:	4613      	mov	r3, r2
 801d400:	005b      	lsls	r3, r3, #1
 801d402:	4413      	add	r3, r2
 801d404:	00db      	lsls	r3, r3, #3
 801d406:	440b      	add	r3, r1
 801d408:	681b      	ldr	r3, [r3, #0]
 801d40a:	2b00      	cmp	r3, #0
 801d40c:	d00a      	beq.n	801d424 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801d40e:	7c7a      	ldrb	r2, [r7, #17]
 801d410:	4912      	ldr	r1, [pc, #72]	; (801d45c <etharp_query+0x268>)
 801d412:	4613      	mov	r3, r2
 801d414:	005b      	lsls	r3, r3, #1
 801d416:	4413      	add	r3, r2
 801d418:	00db      	lsls	r3, r3, #3
 801d41a:	440b      	add	r3, r1
 801d41c:	681b      	ldr	r3, [r3, #0]
 801d41e:	4618      	mov	r0, r3
 801d420:	f7f8 fb6a 	bl	8015af8 <pbuf_free>
      }
      arp_table[i].q = p;
 801d424:	7c7a      	ldrb	r2, [r7, #17]
 801d426:	490d      	ldr	r1, [pc, #52]	; (801d45c <etharp_query+0x268>)
 801d428:	4613      	mov	r3, r2
 801d42a:	005b      	lsls	r3, r3, #1
 801d42c:	4413      	add	r3, r2
 801d42e:	00db      	lsls	r3, r3, #3
 801d430:	440b      	add	r3, r1
 801d432:	69fa      	ldr	r2, [r7, #28]
 801d434:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801d436:	2300      	movs	r3, #0
 801d438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d43c:	e002      	b.n	801d444 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801d43e:	23ff      	movs	r3, #255	; 0xff
 801d440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801d444:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801d448:	4618      	mov	r0, r3
 801d44a:	3728      	adds	r7, #40	; 0x28
 801d44c:	46bd      	mov	sp, r7
 801d44e:	bd80      	pop	{r7, pc}
 801d450:	080224cc 	.word	0x080224cc
 801d454:	08022678 	.word	0x08022678
 801d458:	08022544 	.word	0x08022544
 801d45c:	20004568 	.word	0x20004568
 801d460:	08022688 	.word	0x08022688
 801d464:	0802266c 	.word	0x0802266c
 801d468:	20004658 	.word	0x20004658
 801d46c:	080226b0 	.word	0x080226b0

0801d470 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801d470:	b580      	push	{r7, lr}
 801d472:	b08a      	sub	sp, #40	; 0x28
 801d474:	af02      	add	r7, sp, #8
 801d476:	60f8      	str	r0, [r7, #12]
 801d478:	60b9      	str	r1, [r7, #8]
 801d47a:	607a      	str	r2, [r7, #4]
 801d47c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801d47e:	2300      	movs	r3, #0
 801d480:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d482:	68fb      	ldr	r3, [r7, #12]
 801d484:	2b00      	cmp	r3, #0
 801d486:	d106      	bne.n	801d496 <etharp_raw+0x26>
 801d488:	4b3a      	ldr	r3, [pc, #232]	; (801d574 <etharp_raw+0x104>)
 801d48a:	f240 4257 	movw	r2, #1111	; 0x457
 801d48e:	493a      	ldr	r1, [pc, #232]	; (801d578 <etharp_raw+0x108>)
 801d490:	483a      	ldr	r0, [pc, #232]	; (801d57c <etharp_raw+0x10c>)
 801d492:	f001 fd77 	bl	801ef84 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801d496:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d49a:	211c      	movs	r1, #28
 801d49c:	200e      	movs	r0, #14
 801d49e:	f7f8 f84b 	bl	8015538 <pbuf_alloc>
 801d4a2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801d4a4:	69bb      	ldr	r3, [r7, #24]
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	d102      	bne.n	801d4b0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801d4aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d4ae:	e05d      	b.n	801d56c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801d4b0:	69bb      	ldr	r3, [r7, #24]
 801d4b2:	895b      	ldrh	r3, [r3, #10]
 801d4b4:	2b1b      	cmp	r3, #27
 801d4b6:	d806      	bhi.n	801d4c6 <etharp_raw+0x56>
 801d4b8:	4b2e      	ldr	r3, [pc, #184]	; (801d574 <etharp_raw+0x104>)
 801d4ba:	f240 4263 	movw	r2, #1123	; 0x463
 801d4be:	4930      	ldr	r1, [pc, #192]	; (801d580 <etharp_raw+0x110>)
 801d4c0:	482e      	ldr	r0, [pc, #184]	; (801d57c <etharp_raw+0x10c>)
 801d4c2:	f001 fd5f 	bl	801ef84 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801d4c6:	69bb      	ldr	r3, [r7, #24]
 801d4c8:	685b      	ldr	r3, [r3, #4]
 801d4ca:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801d4cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801d4ce:	4618      	mov	r0, r3
 801d4d0:	f7f6 ff34 	bl	801433c <lwip_htons>
 801d4d4:	4603      	mov	r3, r0
 801d4d6:	461a      	mov	r2, r3
 801d4d8:	697b      	ldr	r3, [r7, #20]
 801d4da:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801d4dc:	68fb      	ldr	r3, [r7, #12]
 801d4de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d4e2:	2b06      	cmp	r3, #6
 801d4e4:	d006      	beq.n	801d4f4 <etharp_raw+0x84>
 801d4e6:	4b23      	ldr	r3, [pc, #140]	; (801d574 <etharp_raw+0x104>)
 801d4e8:	f240 426a 	movw	r2, #1130	; 0x46a
 801d4ec:	4925      	ldr	r1, [pc, #148]	; (801d584 <etharp_raw+0x114>)
 801d4ee:	4823      	ldr	r0, [pc, #140]	; (801d57c <etharp_raw+0x10c>)
 801d4f0:	f001 fd48 	bl	801ef84 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d4f4:	697b      	ldr	r3, [r7, #20]
 801d4f6:	3308      	adds	r3, #8
 801d4f8:	2206      	movs	r2, #6
 801d4fa:	6839      	ldr	r1, [r7, #0]
 801d4fc:	4618      	mov	r0, r3
 801d4fe:	f001 fd2e 	bl	801ef5e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801d502:	697b      	ldr	r3, [r7, #20]
 801d504:	3312      	adds	r3, #18
 801d506:	2206      	movs	r2, #6
 801d508:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d50a:	4618      	mov	r0, r3
 801d50c:	f001 fd27 	bl	801ef5e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801d510:	697b      	ldr	r3, [r7, #20]
 801d512:	330e      	adds	r3, #14
 801d514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d516:	6812      	ldr	r2, [r2, #0]
 801d518:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801d51a:	697b      	ldr	r3, [r7, #20]
 801d51c:	3318      	adds	r3, #24
 801d51e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d520:	6812      	ldr	r2, [r2, #0]
 801d522:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d524:	697b      	ldr	r3, [r7, #20]
 801d526:	2200      	movs	r2, #0
 801d528:	701a      	strb	r2, [r3, #0]
 801d52a:	2200      	movs	r2, #0
 801d52c:	f042 0201 	orr.w	r2, r2, #1
 801d530:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d532:	697b      	ldr	r3, [r7, #20]
 801d534:	2200      	movs	r2, #0
 801d536:	f042 0208 	orr.w	r2, r2, #8
 801d53a:	709a      	strb	r2, [r3, #2]
 801d53c:	2200      	movs	r2, #0
 801d53e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801d540:	697b      	ldr	r3, [r7, #20]
 801d542:	2206      	movs	r2, #6
 801d544:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801d546:	697b      	ldr	r3, [r7, #20]
 801d548:	2204      	movs	r2, #4
 801d54a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d54c:	f640 0306 	movw	r3, #2054	; 0x806
 801d550:	9300      	str	r3, [sp, #0]
 801d552:	687b      	ldr	r3, [r7, #4]
 801d554:	68ba      	ldr	r2, [r7, #8]
 801d556:	69b9      	ldr	r1, [r7, #24]
 801d558:	68f8      	ldr	r0, [r7, #12]
 801d55a:	f001 fb6f 	bl	801ec3c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801d55e:	69b8      	ldr	r0, [r7, #24]
 801d560:	f7f8 faca 	bl	8015af8 <pbuf_free>
  p = NULL;
 801d564:	2300      	movs	r3, #0
 801d566:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801d568:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d56c:	4618      	mov	r0, r3
 801d56e:	3720      	adds	r7, #32
 801d570:	46bd      	mov	sp, r7
 801d572:	bd80      	pop	{r7, pc}
 801d574:	080224cc 	.word	0x080224cc
 801d578:	0802261c 	.word	0x0802261c
 801d57c:	08022544 	.word	0x08022544
 801d580:	080226cc 	.word	0x080226cc
 801d584:	08022700 	.word	0x08022700

0801d588 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801d588:	b580      	push	{r7, lr}
 801d58a:	b088      	sub	sp, #32
 801d58c:	af04      	add	r7, sp, #16
 801d58e:	60f8      	str	r0, [r7, #12]
 801d590:	60b9      	str	r1, [r7, #8]
 801d592:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d594:	68fb      	ldr	r3, [r7, #12]
 801d596:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d59a:	68fb      	ldr	r3, [r7, #12]
 801d59c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801d5a0:	68fb      	ldr	r3, [r7, #12]
 801d5a2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d5a4:	2201      	movs	r2, #1
 801d5a6:	9203      	str	r2, [sp, #12]
 801d5a8:	68ba      	ldr	r2, [r7, #8]
 801d5aa:	9202      	str	r2, [sp, #8]
 801d5ac:	4a06      	ldr	r2, [pc, #24]	; (801d5c8 <etharp_request_dst+0x40>)
 801d5ae:	9201      	str	r2, [sp, #4]
 801d5b0:	9300      	str	r3, [sp, #0]
 801d5b2:	4603      	mov	r3, r0
 801d5b4:	687a      	ldr	r2, [r7, #4]
 801d5b6:	68f8      	ldr	r0, [r7, #12]
 801d5b8:	f7ff ff5a 	bl	801d470 <etharp_raw>
 801d5bc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801d5be:	4618      	mov	r0, r3
 801d5c0:	3710      	adds	r7, #16
 801d5c2:	46bd      	mov	sp, r7
 801d5c4:	bd80      	pop	{r7, pc}
 801d5c6:	bf00      	nop
 801d5c8:	0803380c 	.word	0x0803380c

0801d5cc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801d5cc:	b580      	push	{r7, lr}
 801d5ce:	b082      	sub	sp, #8
 801d5d0:	af00      	add	r7, sp, #0
 801d5d2:	6078      	str	r0, [r7, #4]
 801d5d4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801d5d6:	4a05      	ldr	r2, [pc, #20]	; (801d5ec <etharp_request+0x20>)
 801d5d8:	6839      	ldr	r1, [r7, #0]
 801d5da:	6878      	ldr	r0, [r7, #4]
 801d5dc:	f7ff ffd4 	bl	801d588 <etharp_request_dst>
 801d5e0:	4603      	mov	r3, r0
}
 801d5e2:	4618      	mov	r0, r3
 801d5e4:	3708      	adds	r7, #8
 801d5e6:	46bd      	mov	sp, r7
 801d5e8:	bd80      	pop	{r7, pc}
 801d5ea:	bf00      	nop
 801d5ec:	08033804 	.word	0x08033804

0801d5f0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801d5f0:	b580      	push	{r7, lr}
 801d5f2:	b08e      	sub	sp, #56	; 0x38
 801d5f4:	af04      	add	r7, sp, #16
 801d5f6:	6078      	str	r0, [r7, #4]
 801d5f8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801d5fa:	4b79      	ldr	r3, [pc, #484]	; (801d7e0 <icmp_input+0x1f0>)
 801d5fc:	689b      	ldr	r3, [r3, #8]
 801d5fe:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801d600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d602:	781b      	ldrb	r3, [r3, #0]
 801d604:	f003 030f 	and.w	r3, r3, #15
 801d608:	b2db      	uxtb	r3, r3
 801d60a:	009b      	lsls	r3, r3, #2
 801d60c:	b2db      	uxtb	r3, r3
 801d60e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801d610:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d612:	2b13      	cmp	r3, #19
 801d614:	f240 80cd 	bls.w	801d7b2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801d618:	687b      	ldr	r3, [r7, #4]
 801d61a:	895b      	ldrh	r3, [r3, #10]
 801d61c:	2b03      	cmp	r3, #3
 801d61e:	f240 80ca 	bls.w	801d7b6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801d622:	687b      	ldr	r3, [r7, #4]
 801d624:	685b      	ldr	r3, [r3, #4]
 801d626:	781b      	ldrb	r3, [r3, #0]
 801d628:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801d62c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801d630:	2b00      	cmp	r3, #0
 801d632:	f000 80b7 	beq.w	801d7a4 <icmp_input+0x1b4>
 801d636:	2b08      	cmp	r3, #8
 801d638:	f040 80b7 	bne.w	801d7aa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801d63c:	4b69      	ldr	r3, [pc, #420]	; (801d7e4 <icmp_input+0x1f4>)
 801d63e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d640:	4b67      	ldr	r3, [pc, #412]	; (801d7e0 <icmp_input+0x1f0>)
 801d642:	695b      	ldr	r3, [r3, #20]
 801d644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d648:	2be0      	cmp	r3, #224	; 0xe0
 801d64a:	f000 80bb 	beq.w	801d7c4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801d64e:	4b64      	ldr	r3, [pc, #400]	; (801d7e0 <icmp_input+0x1f0>)
 801d650:	695a      	ldr	r2, [r3, #20]
 801d652:	4b63      	ldr	r3, [pc, #396]	; (801d7e0 <icmp_input+0x1f0>)
 801d654:	681b      	ldr	r3, [r3, #0]
 801d656:	4619      	mov	r1, r3
 801d658:	4610      	mov	r0, r2
 801d65a:	f000 fbeb 	bl	801de34 <ip4_addr_isbroadcast_u32>
 801d65e:	4603      	mov	r3, r0
 801d660:	2b00      	cmp	r3, #0
 801d662:	f040 80b1 	bne.w	801d7c8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	891b      	ldrh	r3, [r3, #8]
 801d66a:	2b07      	cmp	r3, #7
 801d66c:	f240 80a5 	bls.w	801d7ba <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d670:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d672:	330e      	adds	r3, #14
 801d674:	4619      	mov	r1, r3
 801d676:	6878      	ldr	r0, [r7, #4]
 801d678:	f7f8 f9a8 	bl	80159cc <pbuf_add_header>
 801d67c:	4603      	mov	r3, r0
 801d67e:	2b00      	cmp	r3, #0
 801d680:	d04b      	beq.n	801d71a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801d682:	687b      	ldr	r3, [r7, #4]
 801d684:	891a      	ldrh	r2, [r3, #8]
 801d686:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d688:	4413      	add	r3, r2
 801d68a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801d68c:	687b      	ldr	r3, [r7, #4]
 801d68e:	891b      	ldrh	r3, [r3, #8]
 801d690:	8b7a      	ldrh	r2, [r7, #26]
 801d692:	429a      	cmp	r2, r3
 801d694:	f0c0 809a 	bcc.w	801d7cc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801d698:	8b7b      	ldrh	r3, [r7, #26]
 801d69a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d69e:	4619      	mov	r1, r3
 801d6a0:	200e      	movs	r0, #14
 801d6a2:	f7f7 ff49 	bl	8015538 <pbuf_alloc>
 801d6a6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801d6a8:	697b      	ldr	r3, [r7, #20]
 801d6aa:	2b00      	cmp	r3, #0
 801d6ac:	f000 8090 	beq.w	801d7d0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801d6b0:	697b      	ldr	r3, [r7, #20]
 801d6b2:	895b      	ldrh	r3, [r3, #10]
 801d6b4:	461a      	mov	r2, r3
 801d6b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d6b8:	3308      	adds	r3, #8
 801d6ba:	429a      	cmp	r2, r3
 801d6bc:	d203      	bcs.n	801d6c6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801d6be:	6978      	ldr	r0, [r7, #20]
 801d6c0:	f7f8 fa1a 	bl	8015af8 <pbuf_free>
          goto icmperr;
 801d6c4:	e085      	b.n	801d7d2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801d6c6:	697b      	ldr	r3, [r7, #20]
 801d6c8:	685b      	ldr	r3, [r3, #4]
 801d6ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801d6cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d6ce:	4618      	mov	r0, r3
 801d6d0:	f001 fc45 	bl	801ef5e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801d6d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d6d6:	4619      	mov	r1, r3
 801d6d8:	6978      	ldr	r0, [r7, #20]
 801d6da:	f7f8 f987 	bl	80159ec <pbuf_remove_header>
 801d6de:	4603      	mov	r3, r0
 801d6e0:	2b00      	cmp	r3, #0
 801d6e2:	d009      	beq.n	801d6f8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801d6e4:	4b40      	ldr	r3, [pc, #256]	; (801d7e8 <icmp_input+0x1f8>)
 801d6e6:	22b6      	movs	r2, #182	; 0xb6
 801d6e8:	4940      	ldr	r1, [pc, #256]	; (801d7ec <icmp_input+0x1fc>)
 801d6ea:	4841      	ldr	r0, [pc, #260]	; (801d7f0 <icmp_input+0x200>)
 801d6ec:	f001 fc4a 	bl	801ef84 <iprintf>
          pbuf_free(r);
 801d6f0:	6978      	ldr	r0, [r7, #20]
 801d6f2:	f7f8 fa01 	bl	8015af8 <pbuf_free>
          goto icmperr;
 801d6f6:	e06c      	b.n	801d7d2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801d6f8:	6879      	ldr	r1, [r7, #4]
 801d6fa:	6978      	ldr	r0, [r7, #20]
 801d6fc:	f7f8 fb20 	bl	8015d40 <pbuf_copy>
 801d700:	4603      	mov	r3, r0
 801d702:	2b00      	cmp	r3, #0
 801d704:	d003      	beq.n	801d70e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801d706:	6978      	ldr	r0, [r7, #20]
 801d708:	f7f8 f9f6 	bl	8015af8 <pbuf_free>
          goto icmperr;
 801d70c:	e061      	b.n	801d7d2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801d70e:	6878      	ldr	r0, [r7, #4]
 801d710:	f7f8 f9f2 	bl	8015af8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801d714:	697b      	ldr	r3, [r7, #20]
 801d716:	607b      	str	r3, [r7, #4]
 801d718:	e00f      	b.n	801d73a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d71a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d71c:	330e      	adds	r3, #14
 801d71e:	4619      	mov	r1, r3
 801d720:	6878      	ldr	r0, [r7, #4]
 801d722:	f7f8 f963 	bl	80159ec <pbuf_remove_header>
 801d726:	4603      	mov	r3, r0
 801d728:	2b00      	cmp	r3, #0
 801d72a:	d006      	beq.n	801d73a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801d72c:	4b2e      	ldr	r3, [pc, #184]	; (801d7e8 <icmp_input+0x1f8>)
 801d72e:	22c7      	movs	r2, #199	; 0xc7
 801d730:	4930      	ldr	r1, [pc, #192]	; (801d7f4 <icmp_input+0x204>)
 801d732:	482f      	ldr	r0, [pc, #188]	; (801d7f0 <icmp_input+0x200>)
 801d734:	f001 fc26 	bl	801ef84 <iprintf>
          goto icmperr;
 801d738:	e04b      	b.n	801d7d2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801d73a:	687b      	ldr	r3, [r7, #4]
 801d73c:	685b      	ldr	r3, [r3, #4]
 801d73e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801d740:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d742:	4619      	mov	r1, r3
 801d744:	6878      	ldr	r0, [r7, #4]
 801d746:	f7f8 f941 	bl	80159cc <pbuf_add_header>
 801d74a:	4603      	mov	r3, r0
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	d12b      	bne.n	801d7a8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	685b      	ldr	r3, [r3, #4]
 801d754:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801d756:	69fb      	ldr	r3, [r7, #28]
 801d758:	681a      	ldr	r2, [r3, #0]
 801d75a:	68fb      	ldr	r3, [r7, #12]
 801d75c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801d75e:	4b20      	ldr	r3, [pc, #128]	; (801d7e0 <icmp_input+0x1f0>)
 801d760:	691a      	ldr	r2, [r3, #16]
 801d762:	68fb      	ldr	r3, [r7, #12]
 801d764:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801d766:	693b      	ldr	r3, [r7, #16]
 801d768:	2200      	movs	r2, #0
 801d76a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801d76c:	693b      	ldr	r3, [r7, #16]
 801d76e:	2200      	movs	r2, #0
 801d770:	709a      	strb	r2, [r3, #2]
 801d772:	2200      	movs	r2, #0
 801d774:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801d776:	68fb      	ldr	r3, [r7, #12]
 801d778:	22ff      	movs	r2, #255	; 0xff
 801d77a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801d77c:	68fb      	ldr	r3, [r7, #12]
 801d77e:	2200      	movs	r2, #0
 801d780:	729a      	strb	r2, [r3, #10]
 801d782:	2200      	movs	r2, #0
 801d784:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801d786:	683b      	ldr	r3, [r7, #0]
 801d788:	9302      	str	r3, [sp, #8]
 801d78a:	2301      	movs	r3, #1
 801d78c:	9301      	str	r3, [sp, #4]
 801d78e:	2300      	movs	r3, #0
 801d790:	9300      	str	r3, [sp, #0]
 801d792:	23ff      	movs	r3, #255	; 0xff
 801d794:	2200      	movs	r2, #0
 801d796:	69f9      	ldr	r1, [r7, #28]
 801d798:	6878      	ldr	r0, [r7, #4]
 801d79a:	f000 fa73 	bl	801dc84 <ip4_output_if>
 801d79e:	4603      	mov	r3, r0
 801d7a0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801d7a2:	e001      	b.n	801d7a8 <icmp_input+0x1b8>
      break;
 801d7a4:	bf00      	nop
 801d7a6:	e000      	b.n	801d7aa <icmp_input+0x1ba>
      break;
 801d7a8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801d7aa:	6878      	ldr	r0, [r7, #4]
 801d7ac:	f7f8 f9a4 	bl	8015af8 <pbuf_free>
  return;
 801d7b0:	e013      	b.n	801d7da <icmp_input+0x1ea>
    goto lenerr;
 801d7b2:	bf00      	nop
 801d7b4:	e002      	b.n	801d7bc <icmp_input+0x1cc>
    goto lenerr;
 801d7b6:	bf00      	nop
 801d7b8:	e000      	b.n	801d7bc <icmp_input+0x1cc>
        goto lenerr;
 801d7ba:	bf00      	nop
lenerr:
  pbuf_free(p);
 801d7bc:	6878      	ldr	r0, [r7, #4]
 801d7be:	f7f8 f99b 	bl	8015af8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d7c2:	e00a      	b.n	801d7da <icmp_input+0x1ea>
        goto icmperr;
 801d7c4:	bf00      	nop
 801d7c6:	e004      	b.n	801d7d2 <icmp_input+0x1e2>
        goto icmperr;
 801d7c8:	bf00      	nop
 801d7ca:	e002      	b.n	801d7d2 <icmp_input+0x1e2>
          goto icmperr;
 801d7cc:	bf00      	nop
 801d7ce:	e000      	b.n	801d7d2 <icmp_input+0x1e2>
          goto icmperr;
 801d7d0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801d7d2:	6878      	ldr	r0, [r7, #4]
 801d7d4:	f7f8 f990 	bl	8015af8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d7d8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801d7da:	3728      	adds	r7, #40	; 0x28
 801d7dc:	46bd      	mov	sp, r7
 801d7de:	bd80      	pop	{r7, pc}
 801d7e0:	20010618 	.word	0x20010618
 801d7e4:	2001062c 	.word	0x2001062c
 801d7e8:	08022744 	.word	0x08022744
 801d7ec:	0802277c 	.word	0x0802277c
 801d7f0:	080227b4 	.word	0x080227b4
 801d7f4:	080227dc 	.word	0x080227dc

0801d7f8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801d7f8:	b580      	push	{r7, lr}
 801d7fa:	b082      	sub	sp, #8
 801d7fc:	af00      	add	r7, sp, #0
 801d7fe:	6078      	str	r0, [r7, #4]
 801d800:	460b      	mov	r3, r1
 801d802:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801d804:	78fb      	ldrb	r3, [r7, #3]
 801d806:	461a      	mov	r2, r3
 801d808:	2103      	movs	r1, #3
 801d80a:	6878      	ldr	r0, [r7, #4]
 801d80c:	f000 f814 	bl	801d838 <icmp_send_response>
}
 801d810:	bf00      	nop
 801d812:	3708      	adds	r7, #8
 801d814:	46bd      	mov	sp, r7
 801d816:	bd80      	pop	{r7, pc}

0801d818 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801d818:	b580      	push	{r7, lr}
 801d81a:	b082      	sub	sp, #8
 801d81c:	af00      	add	r7, sp, #0
 801d81e:	6078      	str	r0, [r7, #4]
 801d820:	460b      	mov	r3, r1
 801d822:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801d824:	78fb      	ldrb	r3, [r7, #3]
 801d826:	461a      	mov	r2, r3
 801d828:	210b      	movs	r1, #11
 801d82a:	6878      	ldr	r0, [r7, #4]
 801d82c:	f000 f804 	bl	801d838 <icmp_send_response>
}
 801d830:	bf00      	nop
 801d832:	3708      	adds	r7, #8
 801d834:	46bd      	mov	sp, r7
 801d836:	bd80      	pop	{r7, pc}

0801d838 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801d838:	b580      	push	{r7, lr}
 801d83a:	b08c      	sub	sp, #48	; 0x30
 801d83c:	af04      	add	r7, sp, #16
 801d83e:	6078      	str	r0, [r7, #4]
 801d840:	460b      	mov	r3, r1
 801d842:	70fb      	strb	r3, [r7, #3]
 801d844:	4613      	mov	r3, r2
 801d846:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801d848:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d84c:	2124      	movs	r1, #36	; 0x24
 801d84e:	2022      	movs	r0, #34	; 0x22
 801d850:	f7f7 fe72 	bl	8015538 <pbuf_alloc>
 801d854:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801d856:	69fb      	ldr	r3, [r7, #28]
 801d858:	2b00      	cmp	r3, #0
 801d85a:	d04c      	beq.n	801d8f6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801d85c:	69fb      	ldr	r3, [r7, #28]
 801d85e:	895b      	ldrh	r3, [r3, #10]
 801d860:	2b23      	cmp	r3, #35	; 0x23
 801d862:	d806      	bhi.n	801d872 <icmp_send_response+0x3a>
 801d864:	4b26      	ldr	r3, [pc, #152]	; (801d900 <icmp_send_response+0xc8>)
 801d866:	f240 1269 	movw	r2, #361	; 0x169
 801d86a:	4926      	ldr	r1, [pc, #152]	; (801d904 <icmp_send_response+0xcc>)
 801d86c:	4826      	ldr	r0, [pc, #152]	; (801d908 <icmp_send_response+0xd0>)
 801d86e:	f001 fb89 	bl	801ef84 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	685b      	ldr	r3, [r3, #4]
 801d876:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801d878:	69fb      	ldr	r3, [r7, #28]
 801d87a:	685b      	ldr	r3, [r3, #4]
 801d87c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801d87e:	697b      	ldr	r3, [r7, #20]
 801d880:	78fa      	ldrb	r2, [r7, #3]
 801d882:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801d884:	697b      	ldr	r3, [r7, #20]
 801d886:	78ba      	ldrb	r2, [r7, #2]
 801d888:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801d88a:	697b      	ldr	r3, [r7, #20]
 801d88c:	2200      	movs	r2, #0
 801d88e:	711a      	strb	r2, [r3, #4]
 801d890:	2200      	movs	r2, #0
 801d892:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801d894:	697b      	ldr	r3, [r7, #20]
 801d896:	2200      	movs	r2, #0
 801d898:	719a      	strb	r2, [r3, #6]
 801d89a:	2200      	movs	r2, #0
 801d89c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801d89e:	69fb      	ldr	r3, [r7, #28]
 801d8a0:	685b      	ldr	r3, [r3, #4]
 801d8a2:	f103 0008 	add.w	r0, r3, #8
 801d8a6:	687b      	ldr	r3, [r7, #4]
 801d8a8:	685b      	ldr	r3, [r3, #4]
 801d8aa:	221c      	movs	r2, #28
 801d8ac:	4619      	mov	r1, r3
 801d8ae:	f001 fb56 	bl	801ef5e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801d8b2:	69bb      	ldr	r3, [r7, #24]
 801d8b4:	68db      	ldr	r3, [r3, #12]
 801d8b6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801d8b8:	f107 030c 	add.w	r3, r7, #12
 801d8bc:	4618      	mov	r0, r3
 801d8be:	f000 f825 	bl	801d90c <ip4_route>
 801d8c2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801d8c4:	693b      	ldr	r3, [r7, #16]
 801d8c6:	2b00      	cmp	r3, #0
 801d8c8:	d011      	beq.n	801d8ee <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801d8ca:	697b      	ldr	r3, [r7, #20]
 801d8cc:	2200      	movs	r2, #0
 801d8ce:	709a      	strb	r2, [r3, #2]
 801d8d0:	2200      	movs	r2, #0
 801d8d2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801d8d4:	f107 020c 	add.w	r2, r7, #12
 801d8d8:	693b      	ldr	r3, [r7, #16]
 801d8da:	9302      	str	r3, [sp, #8]
 801d8dc:	2301      	movs	r3, #1
 801d8de:	9301      	str	r3, [sp, #4]
 801d8e0:	2300      	movs	r3, #0
 801d8e2:	9300      	str	r3, [sp, #0]
 801d8e4:	23ff      	movs	r3, #255	; 0xff
 801d8e6:	2100      	movs	r1, #0
 801d8e8:	69f8      	ldr	r0, [r7, #28]
 801d8ea:	f000 f9cb 	bl	801dc84 <ip4_output_if>
  }
  pbuf_free(q);
 801d8ee:	69f8      	ldr	r0, [r7, #28]
 801d8f0:	f7f8 f902 	bl	8015af8 <pbuf_free>
 801d8f4:	e000      	b.n	801d8f8 <icmp_send_response+0xc0>
    return;
 801d8f6:	bf00      	nop
}
 801d8f8:	3720      	adds	r7, #32
 801d8fa:	46bd      	mov	sp, r7
 801d8fc:	bd80      	pop	{r7, pc}
 801d8fe:	bf00      	nop
 801d900:	08022744 	.word	0x08022744
 801d904:	08022810 	.word	0x08022810
 801d908:	080227b4 	.word	0x080227b4

0801d90c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801d90c:	b480      	push	{r7}
 801d90e:	b085      	sub	sp, #20
 801d910:	af00      	add	r7, sp, #0
 801d912:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801d914:	4b33      	ldr	r3, [pc, #204]	; (801d9e4 <ip4_route+0xd8>)
 801d916:	681b      	ldr	r3, [r3, #0]
 801d918:	60fb      	str	r3, [r7, #12]
 801d91a:	e036      	b.n	801d98a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d91c:	68fb      	ldr	r3, [r7, #12]
 801d91e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d922:	f003 0301 	and.w	r3, r3, #1
 801d926:	b2db      	uxtb	r3, r3
 801d928:	2b00      	cmp	r3, #0
 801d92a:	d02b      	beq.n	801d984 <ip4_route+0x78>
 801d92c:	68fb      	ldr	r3, [r7, #12]
 801d92e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d932:	089b      	lsrs	r3, r3, #2
 801d934:	f003 0301 	and.w	r3, r3, #1
 801d938:	b2db      	uxtb	r3, r3
 801d93a:	2b00      	cmp	r3, #0
 801d93c:	d022      	beq.n	801d984 <ip4_route+0x78>
 801d93e:	68fb      	ldr	r3, [r7, #12]
 801d940:	3304      	adds	r3, #4
 801d942:	681b      	ldr	r3, [r3, #0]
 801d944:	2b00      	cmp	r3, #0
 801d946:	d01d      	beq.n	801d984 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801d948:	687b      	ldr	r3, [r7, #4]
 801d94a:	681a      	ldr	r2, [r3, #0]
 801d94c:	68fb      	ldr	r3, [r7, #12]
 801d94e:	3304      	adds	r3, #4
 801d950:	681b      	ldr	r3, [r3, #0]
 801d952:	405a      	eors	r2, r3
 801d954:	68fb      	ldr	r3, [r7, #12]
 801d956:	3308      	adds	r3, #8
 801d958:	681b      	ldr	r3, [r3, #0]
 801d95a:	4013      	ands	r3, r2
 801d95c:	2b00      	cmp	r3, #0
 801d95e:	d101      	bne.n	801d964 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801d960:	68fb      	ldr	r3, [r7, #12]
 801d962:	e038      	b.n	801d9d6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801d964:	68fb      	ldr	r3, [r7, #12]
 801d966:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d96a:	f003 0302 	and.w	r3, r3, #2
 801d96e:	2b00      	cmp	r3, #0
 801d970:	d108      	bne.n	801d984 <ip4_route+0x78>
 801d972:	687b      	ldr	r3, [r7, #4]
 801d974:	681a      	ldr	r2, [r3, #0]
 801d976:	68fb      	ldr	r3, [r7, #12]
 801d978:	330c      	adds	r3, #12
 801d97a:	681b      	ldr	r3, [r3, #0]
 801d97c:	429a      	cmp	r2, r3
 801d97e:	d101      	bne.n	801d984 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801d980:	68fb      	ldr	r3, [r7, #12]
 801d982:	e028      	b.n	801d9d6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801d984:	68fb      	ldr	r3, [r7, #12]
 801d986:	681b      	ldr	r3, [r3, #0]
 801d988:	60fb      	str	r3, [r7, #12]
 801d98a:	68fb      	ldr	r3, [r7, #12]
 801d98c:	2b00      	cmp	r3, #0
 801d98e:	d1c5      	bne.n	801d91c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d990:	4b15      	ldr	r3, [pc, #84]	; (801d9e8 <ip4_route+0xdc>)
 801d992:	681b      	ldr	r3, [r3, #0]
 801d994:	2b00      	cmp	r3, #0
 801d996:	d01a      	beq.n	801d9ce <ip4_route+0xc2>
 801d998:	4b13      	ldr	r3, [pc, #76]	; (801d9e8 <ip4_route+0xdc>)
 801d99a:	681b      	ldr	r3, [r3, #0]
 801d99c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d9a0:	f003 0301 	and.w	r3, r3, #1
 801d9a4:	2b00      	cmp	r3, #0
 801d9a6:	d012      	beq.n	801d9ce <ip4_route+0xc2>
 801d9a8:	4b0f      	ldr	r3, [pc, #60]	; (801d9e8 <ip4_route+0xdc>)
 801d9aa:	681b      	ldr	r3, [r3, #0]
 801d9ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d9b0:	f003 0304 	and.w	r3, r3, #4
 801d9b4:	2b00      	cmp	r3, #0
 801d9b6:	d00a      	beq.n	801d9ce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d9b8:	4b0b      	ldr	r3, [pc, #44]	; (801d9e8 <ip4_route+0xdc>)
 801d9ba:	681b      	ldr	r3, [r3, #0]
 801d9bc:	3304      	adds	r3, #4
 801d9be:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	d004      	beq.n	801d9ce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d9c4:	687b      	ldr	r3, [r7, #4]
 801d9c6:	681b      	ldr	r3, [r3, #0]
 801d9c8:	b2db      	uxtb	r3, r3
 801d9ca:	2b7f      	cmp	r3, #127	; 0x7f
 801d9cc:	d101      	bne.n	801d9d2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801d9ce:	2300      	movs	r3, #0
 801d9d0:	e001      	b.n	801d9d6 <ip4_route+0xca>
  }

  return netif_default;
 801d9d2:	4b05      	ldr	r3, [pc, #20]	; (801d9e8 <ip4_route+0xdc>)
 801d9d4:	681b      	ldr	r3, [r3, #0]
}
 801d9d6:	4618      	mov	r0, r3
 801d9d8:	3714      	adds	r7, #20
 801d9da:	46bd      	mov	sp, r7
 801d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9e0:	4770      	bx	lr
 801d9e2:	bf00      	nop
 801d9e4:	20013d1c 	.word	0x20013d1c
 801d9e8:	20013d20 	.word	0x20013d20

0801d9ec <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801d9ec:	b580      	push	{r7, lr}
 801d9ee:	b082      	sub	sp, #8
 801d9f0:	af00      	add	r7, sp, #0
 801d9f2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801d9f4:	687b      	ldr	r3, [r7, #4]
 801d9f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d9fa:	f003 0301 	and.w	r3, r3, #1
 801d9fe:	b2db      	uxtb	r3, r3
 801da00:	2b00      	cmp	r3, #0
 801da02:	d016      	beq.n	801da32 <ip4_input_accept+0x46>
 801da04:	687b      	ldr	r3, [r7, #4]
 801da06:	3304      	adds	r3, #4
 801da08:	681b      	ldr	r3, [r3, #0]
 801da0a:	2b00      	cmp	r3, #0
 801da0c:	d011      	beq.n	801da32 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801da0e:	4b0b      	ldr	r3, [pc, #44]	; (801da3c <ip4_input_accept+0x50>)
 801da10:	695a      	ldr	r2, [r3, #20]
 801da12:	687b      	ldr	r3, [r7, #4]
 801da14:	3304      	adds	r3, #4
 801da16:	681b      	ldr	r3, [r3, #0]
 801da18:	429a      	cmp	r2, r3
 801da1a:	d008      	beq.n	801da2e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801da1c:	4b07      	ldr	r3, [pc, #28]	; (801da3c <ip4_input_accept+0x50>)
 801da1e:	695b      	ldr	r3, [r3, #20]
 801da20:	6879      	ldr	r1, [r7, #4]
 801da22:	4618      	mov	r0, r3
 801da24:	f000 fa06 	bl	801de34 <ip4_addr_isbroadcast_u32>
 801da28:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801da2a:	2b00      	cmp	r3, #0
 801da2c:	d001      	beq.n	801da32 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801da2e:	2301      	movs	r3, #1
 801da30:	e000      	b.n	801da34 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801da32:	2300      	movs	r3, #0
}
 801da34:	4618      	mov	r0, r3
 801da36:	3708      	adds	r7, #8
 801da38:	46bd      	mov	sp, r7
 801da3a:	bd80      	pop	{r7, pc}
 801da3c:	20010618 	.word	0x20010618

0801da40 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801da40:	b580      	push	{r7, lr}
 801da42:	b086      	sub	sp, #24
 801da44:	af00      	add	r7, sp, #0
 801da46:	6078      	str	r0, [r7, #4]
 801da48:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801da4a:	687b      	ldr	r3, [r7, #4]
 801da4c:	685b      	ldr	r3, [r3, #4]
 801da4e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801da50:	697b      	ldr	r3, [r7, #20]
 801da52:	781b      	ldrb	r3, [r3, #0]
 801da54:	091b      	lsrs	r3, r3, #4
 801da56:	b2db      	uxtb	r3, r3
 801da58:	2b04      	cmp	r3, #4
 801da5a:	d004      	beq.n	801da66 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801da5c:	6878      	ldr	r0, [r7, #4]
 801da5e:	f7f8 f84b 	bl	8015af8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801da62:	2300      	movs	r3, #0
 801da64:	e105      	b.n	801dc72 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801da66:	697b      	ldr	r3, [r7, #20]
 801da68:	781b      	ldrb	r3, [r3, #0]
 801da6a:	f003 030f 	and.w	r3, r3, #15
 801da6e:	b2db      	uxtb	r3, r3
 801da70:	009b      	lsls	r3, r3, #2
 801da72:	b2db      	uxtb	r3, r3
 801da74:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801da76:	697b      	ldr	r3, [r7, #20]
 801da78:	885b      	ldrh	r3, [r3, #2]
 801da7a:	b29b      	uxth	r3, r3
 801da7c:	4618      	mov	r0, r3
 801da7e:	f7f6 fc5d 	bl	801433c <lwip_htons>
 801da82:	4603      	mov	r3, r0
 801da84:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	891b      	ldrh	r3, [r3, #8]
 801da8a:	89ba      	ldrh	r2, [r7, #12]
 801da8c:	429a      	cmp	r2, r3
 801da8e:	d204      	bcs.n	801da9a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801da90:	89bb      	ldrh	r3, [r7, #12]
 801da92:	4619      	mov	r1, r3
 801da94:	6878      	ldr	r0, [r7, #4]
 801da96:	f7f7 fea9 	bl	80157ec <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801da9a:	687b      	ldr	r3, [r7, #4]
 801da9c:	895b      	ldrh	r3, [r3, #10]
 801da9e:	89fa      	ldrh	r2, [r7, #14]
 801daa0:	429a      	cmp	r2, r3
 801daa2:	d807      	bhi.n	801dab4 <ip4_input+0x74>
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	891b      	ldrh	r3, [r3, #8]
 801daa8:	89ba      	ldrh	r2, [r7, #12]
 801daaa:	429a      	cmp	r2, r3
 801daac:	d802      	bhi.n	801dab4 <ip4_input+0x74>
 801daae:	89fb      	ldrh	r3, [r7, #14]
 801dab0:	2b13      	cmp	r3, #19
 801dab2:	d804      	bhi.n	801dabe <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801dab4:	6878      	ldr	r0, [r7, #4]
 801dab6:	f7f8 f81f 	bl	8015af8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801daba:	2300      	movs	r3, #0
 801dabc:	e0d9      	b.n	801dc72 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801dabe:	697b      	ldr	r3, [r7, #20]
 801dac0:	691b      	ldr	r3, [r3, #16]
 801dac2:	4a6e      	ldr	r2, [pc, #440]	; (801dc7c <ip4_input+0x23c>)
 801dac4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801dac6:	697b      	ldr	r3, [r7, #20]
 801dac8:	68db      	ldr	r3, [r3, #12]
 801daca:	4a6c      	ldr	r2, [pc, #432]	; (801dc7c <ip4_input+0x23c>)
 801dacc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801dace:	4b6b      	ldr	r3, [pc, #428]	; (801dc7c <ip4_input+0x23c>)
 801dad0:	695b      	ldr	r3, [r3, #20]
 801dad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801dad6:	2be0      	cmp	r3, #224	; 0xe0
 801dad8:	d112      	bne.n	801db00 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801dada:	683b      	ldr	r3, [r7, #0]
 801dadc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dae0:	f003 0301 	and.w	r3, r3, #1
 801dae4:	b2db      	uxtb	r3, r3
 801dae6:	2b00      	cmp	r3, #0
 801dae8:	d007      	beq.n	801dafa <ip4_input+0xba>
 801daea:	683b      	ldr	r3, [r7, #0]
 801daec:	3304      	adds	r3, #4
 801daee:	681b      	ldr	r3, [r3, #0]
 801daf0:	2b00      	cmp	r3, #0
 801daf2:	d002      	beq.n	801dafa <ip4_input+0xba>
      netif = inp;
 801daf4:	683b      	ldr	r3, [r7, #0]
 801daf6:	613b      	str	r3, [r7, #16]
 801daf8:	e02a      	b.n	801db50 <ip4_input+0x110>
    } else {
      netif = NULL;
 801dafa:	2300      	movs	r3, #0
 801dafc:	613b      	str	r3, [r7, #16]
 801dafe:	e027      	b.n	801db50 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801db00:	6838      	ldr	r0, [r7, #0]
 801db02:	f7ff ff73 	bl	801d9ec <ip4_input_accept>
 801db06:	4603      	mov	r3, r0
 801db08:	2b00      	cmp	r3, #0
 801db0a:	d002      	beq.n	801db12 <ip4_input+0xd2>
      netif = inp;
 801db0c:	683b      	ldr	r3, [r7, #0]
 801db0e:	613b      	str	r3, [r7, #16]
 801db10:	e01e      	b.n	801db50 <ip4_input+0x110>
    } else {
      netif = NULL;
 801db12:	2300      	movs	r3, #0
 801db14:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801db16:	4b59      	ldr	r3, [pc, #356]	; (801dc7c <ip4_input+0x23c>)
 801db18:	695b      	ldr	r3, [r3, #20]
 801db1a:	b2db      	uxtb	r3, r3
 801db1c:	2b7f      	cmp	r3, #127	; 0x7f
 801db1e:	d017      	beq.n	801db50 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801db20:	4b57      	ldr	r3, [pc, #348]	; (801dc80 <ip4_input+0x240>)
 801db22:	681b      	ldr	r3, [r3, #0]
 801db24:	613b      	str	r3, [r7, #16]
 801db26:	e00e      	b.n	801db46 <ip4_input+0x106>
          if (netif == inp) {
 801db28:	693a      	ldr	r2, [r7, #16]
 801db2a:	683b      	ldr	r3, [r7, #0]
 801db2c:	429a      	cmp	r2, r3
 801db2e:	d006      	beq.n	801db3e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801db30:	6938      	ldr	r0, [r7, #16]
 801db32:	f7ff ff5b 	bl	801d9ec <ip4_input_accept>
 801db36:	4603      	mov	r3, r0
 801db38:	2b00      	cmp	r3, #0
 801db3a:	d108      	bne.n	801db4e <ip4_input+0x10e>
 801db3c:	e000      	b.n	801db40 <ip4_input+0x100>
            continue;
 801db3e:	bf00      	nop
        NETIF_FOREACH(netif) {
 801db40:	693b      	ldr	r3, [r7, #16]
 801db42:	681b      	ldr	r3, [r3, #0]
 801db44:	613b      	str	r3, [r7, #16]
 801db46:	693b      	ldr	r3, [r7, #16]
 801db48:	2b00      	cmp	r3, #0
 801db4a:	d1ed      	bne.n	801db28 <ip4_input+0xe8>
 801db4c:	e000      	b.n	801db50 <ip4_input+0x110>
            break;
 801db4e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801db50:	4b4a      	ldr	r3, [pc, #296]	; (801dc7c <ip4_input+0x23c>)
 801db52:	691b      	ldr	r3, [r3, #16]
 801db54:	6839      	ldr	r1, [r7, #0]
 801db56:	4618      	mov	r0, r3
 801db58:	f000 f96c 	bl	801de34 <ip4_addr_isbroadcast_u32>
 801db5c:	4603      	mov	r3, r0
 801db5e:	2b00      	cmp	r3, #0
 801db60:	d105      	bne.n	801db6e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801db62:	4b46      	ldr	r3, [pc, #280]	; (801dc7c <ip4_input+0x23c>)
 801db64:	691b      	ldr	r3, [r3, #16]
 801db66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801db6a:	2be0      	cmp	r3, #224	; 0xe0
 801db6c:	d104      	bne.n	801db78 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801db6e:	6878      	ldr	r0, [r7, #4]
 801db70:	f7f7 ffc2 	bl	8015af8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801db74:	2300      	movs	r3, #0
 801db76:	e07c      	b.n	801dc72 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801db78:	693b      	ldr	r3, [r7, #16]
 801db7a:	2b00      	cmp	r3, #0
 801db7c:	d104      	bne.n	801db88 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801db7e:	6878      	ldr	r0, [r7, #4]
 801db80:	f7f7 ffba 	bl	8015af8 <pbuf_free>
    return ERR_OK;
 801db84:	2300      	movs	r3, #0
 801db86:	e074      	b.n	801dc72 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801db88:	697b      	ldr	r3, [r7, #20]
 801db8a:	88db      	ldrh	r3, [r3, #6]
 801db8c:	b29b      	uxth	r3, r3
 801db8e:	461a      	mov	r2, r3
 801db90:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801db94:	4013      	ands	r3, r2
 801db96:	2b00      	cmp	r3, #0
 801db98:	d00b      	beq.n	801dbb2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801db9a:	6878      	ldr	r0, [r7, #4]
 801db9c:	f000 fc90 	bl	801e4c0 <ip4_reass>
 801dba0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801dba2:	687b      	ldr	r3, [r7, #4]
 801dba4:	2b00      	cmp	r3, #0
 801dba6:	d101      	bne.n	801dbac <ip4_input+0x16c>
      return ERR_OK;
 801dba8:	2300      	movs	r3, #0
 801dbaa:	e062      	b.n	801dc72 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801dbac:	687b      	ldr	r3, [r7, #4]
 801dbae:	685b      	ldr	r3, [r3, #4]
 801dbb0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801dbb2:	4a32      	ldr	r2, [pc, #200]	; (801dc7c <ip4_input+0x23c>)
 801dbb4:	693b      	ldr	r3, [r7, #16]
 801dbb6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801dbb8:	4a30      	ldr	r2, [pc, #192]	; (801dc7c <ip4_input+0x23c>)
 801dbba:	683b      	ldr	r3, [r7, #0]
 801dbbc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801dbbe:	4a2f      	ldr	r2, [pc, #188]	; (801dc7c <ip4_input+0x23c>)
 801dbc0:	697b      	ldr	r3, [r7, #20]
 801dbc2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801dbc4:	697b      	ldr	r3, [r7, #20]
 801dbc6:	781b      	ldrb	r3, [r3, #0]
 801dbc8:	f003 030f 	and.w	r3, r3, #15
 801dbcc:	b2db      	uxtb	r3, r3
 801dbce:	009b      	lsls	r3, r3, #2
 801dbd0:	b2db      	uxtb	r3, r3
 801dbd2:	b29a      	uxth	r2, r3
 801dbd4:	4b29      	ldr	r3, [pc, #164]	; (801dc7c <ip4_input+0x23c>)
 801dbd6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801dbd8:	89fb      	ldrh	r3, [r7, #14]
 801dbda:	4619      	mov	r1, r3
 801dbdc:	6878      	ldr	r0, [r7, #4]
 801dbde:	f7f7 ff05 	bl	80159ec <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801dbe2:	697b      	ldr	r3, [r7, #20]
 801dbe4:	7a5b      	ldrb	r3, [r3, #9]
 801dbe6:	2b06      	cmp	r3, #6
 801dbe8:	d009      	beq.n	801dbfe <ip4_input+0x1be>
 801dbea:	2b11      	cmp	r3, #17
 801dbec:	d002      	beq.n	801dbf4 <ip4_input+0x1b4>
 801dbee:	2b01      	cmp	r3, #1
 801dbf0:	d00a      	beq.n	801dc08 <ip4_input+0x1c8>
 801dbf2:	e00e      	b.n	801dc12 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801dbf4:	6839      	ldr	r1, [r7, #0]
 801dbf6:	6878      	ldr	r0, [r7, #4]
 801dbf8:	f7fe fc6a 	bl	801c4d0 <udp_input>
        break;
 801dbfc:	e026      	b.n	801dc4c <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801dbfe:	6839      	ldr	r1, [r7, #0]
 801dc00:	6878      	ldr	r0, [r7, #4]
 801dc02:	f7fa f84f 	bl	8017ca4 <tcp_input>
        break;
 801dc06:	e021      	b.n	801dc4c <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801dc08:	6839      	ldr	r1, [r7, #0]
 801dc0a:	6878      	ldr	r0, [r7, #4]
 801dc0c:	f7ff fcf0 	bl	801d5f0 <icmp_input>
        break;
 801dc10:	e01c      	b.n	801dc4c <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801dc12:	4b1a      	ldr	r3, [pc, #104]	; (801dc7c <ip4_input+0x23c>)
 801dc14:	695b      	ldr	r3, [r3, #20]
 801dc16:	6939      	ldr	r1, [r7, #16]
 801dc18:	4618      	mov	r0, r3
 801dc1a:	f000 f90b 	bl	801de34 <ip4_addr_isbroadcast_u32>
 801dc1e:	4603      	mov	r3, r0
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	d10f      	bne.n	801dc44 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801dc24:	4b15      	ldr	r3, [pc, #84]	; (801dc7c <ip4_input+0x23c>)
 801dc26:	695b      	ldr	r3, [r3, #20]
 801dc28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801dc2c:	2be0      	cmp	r3, #224	; 0xe0
 801dc2e:	d009      	beq.n	801dc44 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801dc30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801dc34:	4619      	mov	r1, r3
 801dc36:	6878      	ldr	r0, [r7, #4]
 801dc38:	f7f7 ff4b 	bl	8015ad2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801dc3c:	2102      	movs	r1, #2
 801dc3e:	6878      	ldr	r0, [r7, #4]
 801dc40:	f7ff fdda 	bl	801d7f8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801dc44:	6878      	ldr	r0, [r7, #4]
 801dc46:	f7f7 ff57 	bl	8015af8 <pbuf_free>
        break;
 801dc4a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801dc4c:	4b0b      	ldr	r3, [pc, #44]	; (801dc7c <ip4_input+0x23c>)
 801dc4e:	2200      	movs	r2, #0
 801dc50:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801dc52:	4b0a      	ldr	r3, [pc, #40]	; (801dc7c <ip4_input+0x23c>)
 801dc54:	2200      	movs	r2, #0
 801dc56:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801dc58:	4b08      	ldr	r3, [pc, #32]	; (801dc7c <ip4_input+0x23c>)
 801dc5a:	2200      	movs	r2, #0
 801dc5c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801dc5e:	4b07      	ldr	r3, [pc, #28]	; (801dc7c <ip4_input+0x23c>)
 801dc60:	2200      	movs	r2, #0
 801dc62:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801dc64:	4b05      	ldr	r3, [pc, #20]	; (801dc7c <ip4_input+0x23c>)
 801dc66:	2200      	movs	r2, #0
 801dc68:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801dc6a:	4b04      	ldr	r3, [pc, #16]	; (801dc7c <ip4_input+0x23c>)
 801dc6c:	2200      	movs	r2, #0
 801dc6e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801dc70:	2300      	movs	r3, #0
}
 801dc72:	4618      	mov	r0, r3
 801dc74:	3718      	adds	r7, #24
 801dc76:	46bd      	mov	sp, r7
 801dc78:	bd80      	pop	{r7, pc}
 801dc7a:	bf00      	nop
 801dc7c:	20010618 	.word	0x20010618
 801dc80:	20013d1c 	.word	0x20013d1c

0801dc84 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801dc84:	b580      	push	{r7, lr}
 801dc86:	b08a      	sub	sp, #40	; 0x28
 801dc88:	af04      	add	r7, sp, #16
 801dc8a:	60f8      	str	r0, [r7, #12]
 801dc8c:	60b9      	str	r1, [r7, #8]
 801dc8e:	607a      	str	r2, [r7, #4]
 801dc90:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801dc92:	68bb      	ldr	r3, [r7, #8]
 801dc94:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	2b00      	cmp	r3, #0
 801dc9a:	d009      	beq.n	801dcb0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801dc9c:	68bb      	ldr	r3, [r7, #8]
 801dc9e:	2b00      	cmp	r3, #0
 801dca0:	d003      	beq.n	801dcaa <ip4_output_if+0x26>
 801dca2:	68bb      	ldr	r3, [r7, #8]
 801dca4:	681b      	ldr	r3, [r3, #0]
 801dca6:	2b00      	cmp	r3, #0
 801dca8:	d102      	bne.n	801dcb0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801dcaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dcac:	3304      	adds	r3, #4
 801dcae:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801dcb0:	78fa      	ldrb	r2, [r7, #3]
 801dcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dcb4:	9302      	str	r3, [sp, #8]
 801dcb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801dcba:	9301      	str	r3, [sp, #4]
 801dcbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 801dcc0:	9300      	str	r3, [sp, #0]
 801dcc2:	4613      	mov	r3, r2
 801dcc4:	687a      	ldr	r2, [r7, #4]
 801dcc6:	6979      	ldr	r1, [r7, #20]
 801dcc8:	68f8      	ldr	r0, [r7, #12]
 801dcca:	f000 f805 	bl	801dcd8 <ip4_output_if_src>
 801dcce:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801dcd0:	4618      	mov	r0, r3
 801dcd2:	3718      	adds	r7, #24
 801dcd4:	46bd      	mov	sp, r7
 801dcd6:	bd80      	pop	{r7, pc}

0801dcd8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801dcd8:	b580      	push	{r7, lr}
 801dcda:	b088      	sub	sp, #32
 801dcdc:	af00      	add	r7, sp, #0
 801dcde:	60f8      	str	r0, [r7, #12]
 801dce0:	60b9      	str	r1, [r7, #8]
 801dce2:	607a      	str	r2, [r7, #4]
 801dce4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801dce6:	68fb      	ldr	r3, [r7, #12]
 801dce8:	7b9b      	ldrb	r3, [r3, #14]
 801dcea:	2b01      	cmp	r3, #1
 801dcec:	d006      	beq.n	801dcfc <ip4_output_if_src+0x24>
 801dcee:	4b4b      	ldr	r3, [pc, #300]	; (801de1c <ip4_output_if_src+0x144>)
 801dcf0:	f44f 7255 	mov.w	r2, #852	; 0x354
 801dcf4:	494a      	ldr	r1, [pc, #296]	; (801de20 <ip4_output_if_src+0x148>)
 801dcf6:	484b      	ldr	r0, [pc, #300]	; (801de24 <ip4_output_if_src+0x14c>)
 801dcf8:	f001 f944 	bl	801ef84 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	2b00      	cmp	r3, #0
 801dd00:	d060      	beq.n	801ddc4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801dd02:	2314      	movs	r3, #20
 801dd04:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801dd06:	2114      	movs	r1, #20
 801dd08:	68f8      	ldr	r0, [r7, #12]
 801dd0a:	f7f7 fe5f 	bl	80159cc <pbuf_add_header>
 801dd0e:	4603      	mov	r3, r0
 801dd10:	2b00      	cmp	r3, #0
 801dd12:	d002      	beq.n	801dd1a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801dd14:	f06f 0301 	mvn.w	r3, #1
 801dd18:	e07c      	b.n	801de14 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801dd1a:	68fb      	ldr	r3, [r7, #12]
 801dd1c:	685b      	ldr	r3, [r3, #4]
 801dd1e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801dd20:	68fb      	ldr	r3, [r7, #12]
 801dd22:	895b      	ldrh	r3, [r3, #10]
 801dd24:	2b13      	cmp	r3, #19
 801dd26:	d806      	bhi.n	801dd36 <ip4_output_if_src+0x5e>
 801dd28:	4b3c      	ldr	r3, [pc, #240]	; (801de1c <ip4_output_if_src+0x144>)
 801dd2a:	f240 3289 	movw	r2, #905	; 0x389
 801dd2e:	493e      	ldr	r1, [pc, #248]	; (801de28 <ip4_output_if_src+0x150>)
 801dd30:	483c      	ldr	r0, [pc, #240]	; (801de24 <ip4_output_if_src+0x14c>)
 801dd32:	f001 f927 	bl	801ef84 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801dd36:	69fb      	ldr	r3, [r7, #28]
 801dd38:	78fa      	ldrb	r2, [r7, #3]
 801dd3a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801dd3c:	69fb      	ldr	r3, [r7, #28]
 801dd3e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801dd42:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801dd44:	687b      	ldr	r3, [r7, #4]
 801dd46:	681a      	ldr	r2, [r3, #0]
 801dd48:	69fb      	ldr	r3, [r7, #28]
 801dd4a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801dd4c:	8b7b      	ldrh	r3, [r7, #26]
 801dd4e:	089b      	lsrs	r3, r3, #2
 801dd50:	b29b      	uxth	r3, r3
 801dd52:	b2db      	uxtb	r3, r3
 801dd54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dd58:	b2da      	uxtb	r2, r3
 801dd5a:	69fb      	ldr	r3, [r7, #28]
 801dd5c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801dd5e:	69fb      	ldr	r3, [r7, #28]
 801dd60:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801dd64:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801dd66:	68fb      	ldr	r3, [r7, #12]
 801dd68:	891b      	ldrh	r3, [r3, #8]
 801dd6a:	4618      	mov	r0, r3
 801dd6c:	f7f6 fae6 	bl	801433c <lwip_htons>
 801dd70:	4603      	mov	r3, r0
 801dd72:	461a      	mov	r2, r3
 801dd74:	69fb      	ldr	r3, [r7, #28]
 801dd76:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801dd78:	69fb      	ldr	r3, [r7, #28]
 801dd7a:	2200      	movs	r2, #0
 801dd7c:	719a      	strb	r2, [r3, #6]
 801dd7e:	2200      	movs	r2, #0
 801dd80:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801dd82:	4b2a      	ldr	r3, [pc, #168]	; (801de2c <ip4_output_if_src+0x154>)
 801dd84:	881b      	ldrh	r3, [r3, #0]
 801dd86:	4618      	mov	r0, r3
 801dd88:	f7f6 fad8 	bl	801433c <lwip_htons>
 801dd8c:	4603      	mov	r3, r0
 801dd8e:	461a      	mov	r2, r3
 801dd90:	69fb      	ldr	r3, [r7, #28]
 801dd92:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801dd94:	4b25      	ldr	r3, [pc, #148]	; (801de2c <ip4_output_if_src+0x154>)
 801dd96:	881b      	ldrh	r3, [r3, #0]
 801dd98:	3301      	adds	r3, #1
 801dd9a:	b29a      	uxth	r2, r3
 801dd9c:	4b23      	ldr	r3, [pc, #140]	; (801de2c <ip4_output_if_src+0x154>)
 801dd9e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801dda0:	68bb      	ldr	r3, [r7, #8]
 801dda2:	2b00      	cmp	r3, #0
 801dda4:	d104      	bne.n	801ddb0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801dda6:	4b22      	ldr	r3, [pc, #136]	; (801de30 <ip4_output_if_src+0x158>)
 801dda8:	681a      	ldr	r2, [r3, #0]
 801ddaa:	69fb      	ldr	r3, [r7, #28]
 801ddac:	60da      	str	r2, [r3, #12]
 801ddae:	e003      	b.n	801ddb8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801ddb0:	68bb      	ldr	r3, [r7, #8]
 801ddb2:	681a      	ldr	r2, [r3, #0]
 801ddb4:	69fb      	ldr	r3, [r7, #28]
 801ddb6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801ddb8:	69fb      	ldr	r3, [r7, #28]
 801ddba:	2200      	movs	r2, #0
 801ddbc:	729a      	strb	r2, [r3, #10]
 801ddbe:	2200      	movs	r2, #0
 801ddc0:	72da      	strb	r2, [r3, #11]
 801ddc2:	e00f      	b.n	801dde4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801ddc4:	68fb      	ldr	r3, [r7, #12]
 801ddc6:	895b      	ldrh	r3, [r3, #10]
 801ddc8:	2b13      	cmp	r3, #19
 801ddca:	d802      	bhi.n	801ddd2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801ddcc:	f06f 0301 	mvn.w	r3, #1
 801ddd0:	e020      	b.n	801de14 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801ddd2:	68fb      	ldr	r3, [r7, #12]
 801ddd4:	685b      	ldr	r3, [r3, #4]
 801ddd6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801ddd8:	69fb      	ldr	r3, [r7, #28]
 801ddda:	691b      	ldr	r3, [r3, #16]
 801dddc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801ddde:	f107 0314 	add.w	r3, r7, #20
 801dde2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801dde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dde6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	d00c      	beq.n	801de06 <ip4_output_if_src+0x12e>
 801ddec:	68fb      	ldr	r3, [r7, #12]
 801ddee:	891a      	ldrh	r2, [r3, #8]
 801ddf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ddf2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ddf4:	429a      	cmp	r2, r3
 801ddf6:	d906      	bls.n	801de06 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801ddf8:	687a      	ldr	r2, [r7, #4]
 801ddfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ddfc:	68f8      	ldr	r0, [r7, #12]
 801ddfe:	f000 fd4b 	bl	801e898 <ip4_frag>
 801de02:	4603      	mov	r3, r0
 801de04:	e006      	b.n	801de14 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801de06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de08:	695b      	ldr	r3, [r3, #20]
 801de0a:	687a      	ldr	r2, [r7, #4]
 801de0c:	68f9      	ldr	r1, [r7, #12]
 801de0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801de10:	4798      	blx	r3
 801de12:	4603      	mov	r3, r0
}
 801de14:	4618      	mov	r0, r3
 801de16:	3720      	adds	r7, #32
 801de18:	46bd      	mov	sp, r7
 801de1a:	bd80      	pop	{r7, pc}
 801de1c:	0802283c 	.word	0x0802283c
 801de20:	08022870 	.word	0x08022870
 801de24:	0802287c 	.word	0x0802287c
 801de28:	080228a4 	.word	0x080228a4
 801de2c:	2000465a 	.word	0x2000465a
 801de30:	08033800 	.word	0x08033800

0801de34 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801de34:	b480      	push	{r7}
 801de36:	b085      	sub	sp, #20
 801de38:	af00      	add	r7, sp, #0
 801de3a:	6078      	str	r0, [r7, #4]
 801de3c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801de3e:	687b      	ldr	r3, [r7, #4]
 801de40:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801de42:	687b      	ldr	r3, [r7, #4]
 801de44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801de48:	d002      	beq.n	801de50 <ip4_addr_isbroadcast_u32+0x1c>
 801de4a:	687b      	ldr	r3, [r7, #4]
 801de4c:	2b00      	cmp	r3, #0
 801de4e:	d101      	bne.n	801de54 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801de50:	2301      	movs	r3, #1
 801de52:	e02a      	b.n	801deaa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801de54:	683b      	ldr	r3, [r7, #0]
 801de56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801de5a:	f003 0302 	and.w	r3, r3, #2
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d101      	bne.n	801de66 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801de62:	2300      	movs	r3, #0
 801de64:	e021      	b.n	801deaa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801de66:	683b      	ldr	r3, [r7, #0]
 801de68:	3304      	adds	r3, #4
 801de6a:	681b      	ldr	r3, [r3, #0]
 801de6c:	687a      	ldr	r2, [r7, #4]
 801de6e:	429a      	cmp	r2, r3
 801de70:	d101      	bne.n	801de76 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801de72:	2300      	movs	r3, #0
 801de74:	e019      	b.n	801deaa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801de76:	68fa      	ldr	r2, [r7, #12]
 801de78:	683b      	ldr	r3, [r7, #0]
 801de7a:	3304      	adds	r3, #4
 801de7c:	681b      	ldr	r3, [r3, #0]
 801de7e:	405a      	eors	r2, r3
 801de80:	683b      	ldr	r3, [r7, #0]
 801de82:	3308      	adds	r3, #8
 801de84:	681b      	ldr	r3, [r3, #0]
 801de86:	4013      	ands	r3, r2
 801de88:	2b00      	cmp	r3, #0
 801de8a:	d10d      	bne.n	801dea8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801de8c:	683b      	ldr	r3, [r7, #0]
 801de8e:	3308      	adds	r3, #8
 801de90:	681b      	ldr	r3, [r3, #0]
 801de92:	43da      	mvns	r2, r3
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801de98:	683b      	ldr	r3, [r7, #0]
 801de9a:	3308      	adds	r3, #8
 801de9c:	681b      	ldr	r3, [r3, #0]
 801de9e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801dea0:	429a      	cmp	r2, r3
 801dea2:	d101      	bne.n	801dea8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801dea4:	2301      	movs	r3, #1
 801dea6:	e000      	b.n	801deaa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801dea8:	2300      	movs	r3, #0
  }
}
 801deaa:	4618      	mov	r0, r3
 801deac:	3714      	adds	r7, #20
 801deae:	46bd      	mov	sp, r7
 801deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801deb4:	4770      	bx	lr
	...

0801deb8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801deb8:	b580      	push	{r7, lr}
 801deba:	b084      	sub	sp, #16
 801debc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801debe:	2300      	movs	r3, #0
 801dec0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801dec2:	4b12      	ldr	r3, [pc, #72]	; (801df0c <ip_reass_tmr+0x54>)
 801dec4:	681b      	ldr	r3, [r3, #0]
 801dec6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801dec8:	e018      	b.n	801defc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801deca:	68fb      	ldr	r3, [r7, #12]
 801decc:	7fdb      	ldrb	r3, [r3, #31]
 801dece:	2b00      	cmp	r3, #0
 801ded0:	d00b      	beq.n	801deea <ip_reass_tmr+0x32>
      r->timer--;
 801ded2:	68fb      	ldr	r3, [r7, #12]
 801ded4:	7fdb      	ldrb	r3, [r3, #31]
 801ded6:	3b01      	subs	r3, #1
 801ded8:	b2da      	uxtb	r2, r3
 801deda:	68fb      	ldr	r3, [r7, #12]
 801dedc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801dede:	68fb      	ldr	r3, [r7, #12]
 801dee0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801dee2:	68fb      	ldr	r3, [r7, #12]
 801dee4:	681b      	ldr	r3, [r3, #0]
 801dee6:	60fb      	str	r3, [r7, #12]
 801dee8:	e008      	b.n	801defc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801deea:	68fb      	ldr	r3, [r7, #12]
 801deec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801deee:	68fb      	ldr	r3, [r7, #12]
 801def0:	681b      	ldr	r3, [r3, #0]
 801def2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801def4:	68b9      	ldr	r1, [r7, #8]
 801def6:	6878      	ldr	r0, [r7, #4]
 801def8:	f000 f80a 	bl	801df10 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801defc:	68fb      	ldr	r3, [r7, #12]
 801defe:	2b00      	cmp	r3, #0
 801df00:	d1e3      	bne.n	801deca <ip_reass_tmr+0x12>
    }
  }
}
 801df02:	bf00      	nop
 801df04:	3710      	adds	r7, #16
 801df06:	46bd      	mov	sp, r7
 801df08:	bd80      	pop	{r7, pc}
 801df0a:	bf00      	nop
 801df0c:	2000465c 	.word	0x2000465c

0801df10 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801df10:	b580      	push	{r7, lr}
 801df12:	b088      	sub	sp, #32
 801df14:	af00      	add	r7, sp, #0
 801df16:	6078      	str	r0, [r7, #4]
 801df18:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801df1a:	2300      	movs	r3, #0
 801df1c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801df1e:	683a      	ldr	r2, [r7, #0]
 801df20:	687b      	ldr	r3, [r7, #4]
 801df22:	429a      	cmp	r2, r3
 801df24:	d105      	bne.n	801df32 <ip_reass_free_complete_datagram+0x22>
 801df26:	4b45      	ldr	r3, [pc, #276]	; (801e03c <ip_reass_free_complete_datagram+0x12c>)
 801df28:	22ab      	movs	r2, #171	; 0xab
 801df2a:	4945      	ldr	r1, [pc, #276]	; (801e040 <ip_reass_free_complete_datagram+0x130>)
 801df2c:	4845      	ldr	r0, [pc, #276]	; (801e044 <ip_reass_free_complete_datagram+0x134>)
 801df2e:	f001 f829 	bl	801ef84 <iprintf>
  if (prev != NULL) {
 801df32:	683b      	ldr	r3, [r7, #0]
 801df34:	2b00      	cmp	r3, #0
 801df36:	d00a      	beq.n	801df4e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801df38:	683b      	ldr	r3, [r7, #0]
 801df3a:	681b      	ldr	r3, [r3, #0]
 801df3c:	687a      	ldr	r2, [r7, #4]
 801df3e:	429a      	cmp	r2, r3
 801df40:	d005      	beq.n	801df4e <ip_reass_free_complete_datagram+0x3e>
 801df42:	4b3e      	ldr	r3, [pc, #248]	; (801e03c <ip_reass_free_complete_datagram+0x12c>)
 801df44:	22ad      	movs	r2, #173	; 0xad
 801df46:	4940      	ldr	r1, [pc, #256]	; (801e048 <ip_reass_free_complete_datagram+0x138>)
 801df48:	483e      	ldr	r0, [pc, #248]	; (801e044 <ip_reass_free_complete_datagram+0x134>)
 801df4a:	f001 f81b 	bl	801ef84 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801df4e:	687b      	ldr	r3, [r7, #4]
 801df50:	685b      	ldr	r3, [r3, #4]
 801df52:	685b      	ldr	r3, [r3, #4]
 801df54:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801df56:	697b      	ldr	r3, [r7, #20]
 801df58:	889b      	ldrh	r3, [r3, #4]
 801df5a:	b29b      	uxth	r3, r3
 801df5c:	2b00      	cmp	r3, #0
 801df5e:	d12a      	bne.n	801dfb6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801df60:	687b      	ldr	r3, [r7, #4]
 801df62:	685b      	ldr	r3, [r3, #4]
 801df64:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801df66:	697b      	ldr	r3, [r7, #20]
 801df68:	681a      	ldr	r2, [r3, #0]
 801df6a:	687b      	ldr	r3, [r7, #4]
 801df6c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801df6e:	69bb      	ldr	r3, [r7, #24]
 801df70:	6858      	ldr	r0, [r3, #4]
 801df72:	687b      	ldr	r3, [r7, #4]
 801df74:	3308      	adds	r3, #8
 801df76:	2214      	movs	r2, #20
 801df78:	4619      	mov	r1, r3
 801df7a:	f000 fff0 	bl	801ef5e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801df7e:	2101      	movs	r1, #1
 801df80:	69b8      	ldr	r0, [r7, #24]
 801df82:	f7ff fc49 	bl	801d818 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801df86:	69b8      	ldr	r0, [r7, #24]
 801df88:	f7f7 fe44 	bl	8015c14 <pbuf_clen>
 801df8c:	4603      	mov	r3, r0
 801df8e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801df90:	8bfa      	ldrh	r2, [r7, #30]
 801df92:	8a7b      	ldrh	r3, [r7, #18]
 801df94:	4413      	add	r3, r2
 801df96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801df9a:	db05      	blt.n	801dfa8 <ip_reass_free_complete_datagram+0x98>
 801df9c:	4b27      	ldr	r3, [pc, #156]	; (801e03c <ip_reass_free_complete_datagram+0x12c>)
 801df9e:	22bc      	movs	r2, #188	; 0xbc
 801dfa0:	492a      	ldr	r1, [pc, #168]	; (801e04c <ip_reass_free_complete_datagram+0x13c>)
 801dfa2:	4828      	ldr	r0, [pc, #160]	; (801e044 <ip_reass_free_complete_datagram+0x134>)
 801dfa4:	f000 ffee 	bl	801ef84 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801dfa8:	8bfa      	ldrh	r2, [r7, #30]
 801dfaa:	8a7b      	ldrh	r3, [r7, #18]
 801dfac:	4413      	add	r3, r2
 801dfae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801dfb0:	69b8      	ldr	r0, [r7, #24]
 801dfb2:	f7f7 fda1 	bl	8015af8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801dfb6:	687b      	ldr	r3, [r7, #4]
 801dfb8:	685b      	ldr	r3, [r3, #4]
 801dfba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801dfbc:	e01f      	b.n	801dffe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801dfbe:	69bb      	ldr	r3, [r7, #24]
 801dfc0:	685b      	ldr	r3, [r3, #4]
 801dfc2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801dfc4:	69bb      	ldr	r3, [r7, #24]
 801dfc6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801dfc8:	697b      	ldr	r3, [r7, #20]
 801dfca:	681b      	ldr	r3, [r3, #0]
 801dfcc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801dfce:	68f8      	ldr	r0, [r7, #12]
 801dfd0:	f7f7 fe20 	bl	8015c14 <pbuf_clen>
 801dfd4:	4603      	mov	r3, r0
 801dfd6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801dfd8:	8bfa      	ldrh	r2, [r7, #30]
 801dfda:	8a7b      	ldrh	r3, [r7, #18]
 801dfdc:	4413      	add	r3, r2
 801dfde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801dfe2:	db05      	blt.n	801dff0 <ip_reass_free_complete_datagram+0xe0>
 801dfe4:	4b15      	ldr	r3, [pc, #84]	; (801e03c <ip_reass_free_complete_datagram+0x12c>)
 801dfe6:	22cc      	movs	r2, #204	; 0xcc
 801dfe8:	4918      	ldr	r1, [pc, #96]	; (801e04c <ip_reass_free_complete_datagram+0x13c>)
 801dfea:	4816      	ldr	r0, [pc, #88]	; (801e044 <ip_reass_free_complete_datagram+0x134>)
 801dfec:	f000 ffca 	bl	801ef84 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801dff0:	8bfa      	ldrh	r2, [r7, #30]
 801dff2:	8a7b      	ldrh	r3, [r7, #18]
 801dff4:	4413      	add	r3, r2
 801dff6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801dff8:	68f8      	ldr	r0, [r7, #12]
 801dffa:	f7f7 fd7d 	bl	8015af8 <pbuf_free>
  while (p != NULL) {
 801dffe:	69bb      	ldr	r3, [r7, #24]
 801e000:	2b00      	cmp	r3, #0
 801e002:	d1dc      	bne.n	801dfbe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801e004:	6839      	ldr	r1, [r7, #0]
 801e006:	6878      	ldr	r0, [r7, #4]
 801e008:	f000 f8c2 	bl	801e190 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801e00c:	4b10      	ldr	r3, [pc, #64]	; (801e050 <ip_reass_free_complete_datagram+0x140>)
 801e00e:	881b      	ldrh	r3, [r3, #0]
 801e010:	8bfa      	ldrh	r2, [r7, #30]
 801e012:	429a      	cmp	r2, r3
 801e014:	d905      	bls.n	801e022 <ip_reass_free_complete_datagram+0x112>
 801e016:	4b09      	ldr	r3, [pc, #36]	; (801e03c <ip_reass_free_complete_datagram+0x12c>)
 801e018:	22d2      	movs	r2, #210	; 0xd2
 801e01a:	490e      	ldr	r1, [pc, #56]	; (801e054 <ip_reass_free_complete_datagram+0x144>)
 801e01c:	4809      	ldr	r0, [pc, #36]	; (801e044 <ip_reass_free_complete_datagram+0x134>)
 801e01e:	f000 ffb1 	bl	801ef84 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801e022:	4b0b      	ldr	r3, [pc, #44]	; (801e050 <ip_reass_free_complete_datagram+0x140>)
 801e024:	881a      	ldrh	r2, [r3, #0]
 801e026:	8bfb      	ldrh	r3, [r7, #30]
 801e028:	1ad3      	subs	r3, r2, r3
 801e02a:	b29a      	uxth	r2, r3
 801e02c:	4b08      	ldr	r3, [pc, #32]	; (801e050 <ip_reass_free_complete_datagram+0x140>)
 801e02e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801e030:	8bfb      	ldrh	r3, [r7, #30]
}
 801e032:	4618      	mov	r0, r3
 801e034:	3720      	adds	r7, #32
 801e036:	46bd      	mov	sp, r7
 801e038:	bd80      	pop	{r7, pc}
 801e03a:	bf00      	nop
 801e03c:	080228d4 	.word	0x080228d4
 801e040:	08022910 	.word	0x08022910
 801e044:	0802291c 	.word	0x0802291c
 801e048:	08022944 	.word	0x08022944
 801e04c:	08022958 	.word	0x08022958
 801e050:	20004660 	.word	0x20004660
 801e054:	08022978 	.word	0x08022978

0801e058 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801e058:	b580      	push	{r7, lr}
 801e05a:	b08a      	sub	sp, #40	; 0x28
 801e05c:	af00      	add	r7, sp, #0
 801e05e:	6078      	str	r0, [r7, #4]
 801e060:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801e062:	2300      	movs	r3, #0
 801e064:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801e066:	2300      	movs	r3, #0
 801e068:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801e06a:	2300      	movs	r3, #0
 801e06c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801e06e:	2300      	movs	r3, #0
 801e070:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801e072:	2300      	movs	r3, #0
 801e074:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801e076:	4b28      	ldr	r3, [pc, #160]	; (801e118 <ip_reass_remove_oldest_datagram+0xc0>)
 801e078:	681b      	ldr	r3, [r3, #0]
 801e07a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801e07c:	e030      	b.n	801e0e0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801e07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e080:	695a      	ldr	r2, [r3, #20]
 801e082:	687b      	ldr	r3, [r7, #4]
 801e084:	68db      	ldr	r3, [r3, #12]
 801e086:	429a      	cmp	r2, r3
 801e088:	d10c      	bne.n	801e0a4 <ip_reass_remove_oldest_datagram+0x4c>
 801e08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e08c:	699a      	ldr	r2, [r3, #24]
 801e08e:	687b      	ldr	r3, [r7, #4]
 801e090:	691b      	ldr	r3, [r3, #16]
 801e092:	429a      	cmp	r2, r3
 801e094:	d106      	bne.n	801e0a4 <ip_reass_remove_oldest_datagram+0x4c>
 801e096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e098:	899a      	ldrh	r2, [r3, #12]
 801e09a:	687b      	ldr	r3, [r7, #4]
 801e09c:	889b      	ldrh	r3, [r3, #4]
 801e09e:	b29b      	uxth	r3, r3
 801e0a0:	429a      	cmp	r2, r3
 801e0a2:	d014      	beq.n	801e0ce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801e0a4:	693b      	ldr	r3, [r7, #16]
 801e0a6:	3301      	adds	r3, #1
 801e0a8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801e0aa:	6a3b      	ldr	r3, [r7, #32]
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	d104      	bne.n	801e0ba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801e0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0b2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e0b4:	69fb      	ldr	r3, [r7, #28]
 801e0b6:	61bb      	str	r3, [r7, #24]
 801e0b8:	e009      	b.n	801e0ce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801e0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0bc:	7fda      	ldrb	r2, [r3, #31]
 801e0be:	6a3b      	ldr	r3, [r7, #32]
 801e0c0:	7fdb      	ldrb	r3, [r3, #31]
 801e0c2:	429a      	cmp	r2, r3
 801e0c4:	d803      	bhi.n	801e0ce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801e0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0c8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e0ca:	69fb      	ldr	r3, [r7, #28]
 801e0cc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801e0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0d0:	681b      	ldr	r3, [r3, #0]
 801e0d2:	2b00      	cmp	r3, #0
 801e0d4:	d001      	beq.n	801e0da <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801e0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0d8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801e0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0dc:	681b      	ldr	r3, [r3, #0]
 801e0de:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801e0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0e2:	2b00      	cmp	r3, #0
 801e0e4:	d1cb      	bne.n	801e07e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801e0e6:	6a3b      	ldr	r3, [r7, #32]
 801e0e8:	2b00      	cmp	r3, #0
 801e0ea:	d008      	beq.n	801e0fe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801e0ec:	69b9      	ldr	r1, [r7, #24]
 801e0ee:	6a38      	ldr	r0, [r7, #32]
 801e0f0:	f7ff ff0e 	bl	801df10 <ip_reass_free_complete_datagram>
 801e0f4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801e0f6:	697a      	ldr	r2, [r7, #20]
 801e0f8:	68fb      	ldr	r3, [r7, #12]
 801e0fa:	4413      	add	r3, r2
 801e0fc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801e0fe:	697a      	ldr	r2, [r7, #20]
 801e100:	683b      	ldr	r3, [r7, #0]
 801e102:	429a      	cmp	r2, r3
 801e104:	da02      	bge.n	801e10c <ip_reass_remove_oldest_datagram+0xb4>
 801e106:	693b      	ldr	r3, [r7, #16]
 801e108:	2b01      	cmp	r3, #1
 801e10a:	dcac      	bgt.n	801e066 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801e10c:	697b      	ldr	r3, [r7, #20]
}
 801e10e:	4618      	mov	r0, r3
 801e110:	3728      	adds	r7, #40	; 0x28
 801e112:	46bd      	mov	sp, r7
 801e114:	bd80      	pop	{r7, pc}
 801e116:	bf00      	nop
 801e118:	2000465c 	.word	0x2000465c

0801e11c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801e11c:	b580      	push	{r7, lr}
 801e11e:	b084      	sub	sp, #16
 801e120:	af00      	add	r7, sp, #0
 801e122:	6078      	str	r0, [r7, #4]
 801e124:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e126:	2004      	movs	r0, #4
 801e128:	f7f6 fdf4 	bl	8014d14 <memp_malloc>
 801e12c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801e12e:	68fb      	ldr	r3, [r7, #12]
 801e130:	2b00      	cmp	r3, #0
 801e132:	d110      	bne.n	801e156 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801e134:	6839      	ldr	r1, [r7, #0]
 801e136:	6878      	ldr	r0, [r7, #4]
 801e138:	f7ff ff8e 	bl	801e058 <ip_reass_remove_oldest_datagram>
 801e13c:	4602      	mov	r2, r0
 801e13e:	683b      	ldr	r3, [r7, #0]
 801e140:	4293      	cmp	r3, r2
 801e142:	dc03      	bgt.n	801e14c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e144:	2004      	movs	r0, #4
 801e146:	f7f6 fde5 	bl	8014d14 <memp_malloc>
 801e14a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801e14c:	68fb      	ldr	r3, [r7, #12]
 801e14e:	2b00      	cmp	r3, #0
 801e150:	d101      	bne.n	801e156 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801e152:	2300      	movs	r3, #0
 801e154:	e016      	b.n	801e184 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801e156:	2220      	movs	r2, #32
 801e158:	2100      	movs	r1, #0
 801e15a:	68f8      	ldr	r0, [r7, #12]
 801e15c:	f000 ff0a 	bl	801ef74 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801e160:	68fb      	ldr	r3, [r7, #12]
 801e162:	220f      	movs	r2, #15
 801e164:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801e166:	4b09      	ldr	r3, [pc, #36]	; (801e18c <ip_reass_enqueue_new_datagram+0x70>)
 801e168:	681a      	ldr	r2, [r3, #0]
 801e16a:	68fb      	ldr	r3, [r7, #12]
 801e16c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801e16e:	4a07      	ldr	r2, [pc, #28]	; (801e18c <ip_reass_enqueue_new_datagram+0x70>)
 801e170:	68fb      	ldr	r3, [r7, #12]
 801e172:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801e174:	68fb      	ldr	r3, [r7, #12]
 801e176:	3308      	adds	r3, #8
 801e178:	2214      	movs	r2, #20
 801e17a:	6879      	ldr	r1, [r7, #4]
 801e17c:	4618      	mov	r0, r3
 801e17e:	f000 feee 	bl	801ef5e <memcpy>
  return ipr;
 801e182:	68fb      	ldr	r3, [r7, #12]
}
 801e184:	4618      	mov	r0, r3
 801e186:	3710      	adds	r7, #16
 801e188:	46bd      	mov	sp, r7
 801e18a:	bd80      	pop	{r7, pc}
 801e18c:	2000465c 	.word	0x2000465c

0801e190 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e190:	b580      	push	{r7, lr}
 801e192:	b082      	sub	sp, #8
 801e194:	af00      	add	r7, sp, #0
 801e196:	6078      	str	r0, [r7, #4]
 801e198:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801e19a:	4b10      	ldr	r3, [pc, #64]	; (801e1dc <ip_reass_dequeue_datagram+0x4c>)
 801e19c:	681b      	ldr	r3, [r3, #0]
 801e19e:	687a      	ldr	r2, [r7, #4]
 801e1a0:	429a      	cmp	r2, r3
 801e1a2:	d104      	bne.n	801e1ae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801e1a4:	687b      	ldr	r3, [r7, #4]
 801e1a6:	681b      	ldr	r3, [r3, #0]
 801e1a8:	4a0c      	ldr	r2, [pc, #48]	; (801e1dc <ip_reass_dequeue_datagram+0x4c>)
 801e1aa:	6013      	str	r3, [r2, #0]
 801e1ac:	e00d      	b.n	801e1ca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801e1ae:	683b      	ldr	r3, [r7, #0]
 801e1b0:	2b00      	cmp	r3, #0
 801e1b2:	d106      	bne.n	801e1c2 <ip_reass_dequeue_datagram+0x32>
 801e1b4:	4b0a      	ldr	r3, [pc, #40]	; (801e1e0 <ip_reass_dequeue_datagram+0x50>)
 801e1b6:	f240 1245 	movw	r2, #325	; 0x145
 801e1ba:	490a      	ldr	r1, [pc, #40]	; (801e1e4 <ip_reass_dequeue_datagram+0x54>)
 801e1bc:	480a      	ldr	r0, [pc, #40]	; (801e1e8 <ip_reass_dequeue_datagram+0x58>)
 801e1be:	f000 fee1 	bl	801ef84 <iprintf>
    prev->next = ipr->next;
 801e1c2:	687b      	ldr	r3, [r7, #4]
 801e1c4:	681a      	ldr	r2, [r3, #0]
 801e1c6:	683b      	ldr	r3, [r7, #0]
 801e1c8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801e1ca:	6879      	ldr	r1, [r7, #4]
 801e1cc:	2004      	movs	r0, #4
 801e1ce:	f7f6 fdf3 	bl	8014db8 <memp_free>
}
 801e1d2:	bf00      	nop
 801e1d4:	3708      	adds	r7, #8
 801e1d6:	46bd      	mov	sp, r7
 801e1d8:	bd80      	pop	{r7, pc}
 801e1da:	bf00      	nop
 801e1dc:	2000465c 	.word	0x2000465c
 801e1e0:	080228d4 	.word	0x080228d4
 801e1e4:	0802299c 	.word	0x0802299c
 801e1e8:	0802291c 	.word	0x0802291c

0801e1ec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801e1ec:	b580      	push	{r7, lr}
 801e1ee:	b08c      	sub	sp, #48	; 0x30
 801e1f0:	af00      	add	r7, sp, #0
 801e1f2:	60f8      	str	r0, [r7, #12]
 801e1f4:	60b9      	str	r1, [r7, #8]
 801e1f6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801e1f8:	2300      	movs	r3, #0
 801e1fa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801e1fc:	2301      	movs	r3, #1
 801e1fe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801e200:	68bb      	ldr	r3, [r7, #8]
 801e202:	685b      	ldr	r3, [r3, #4]
 801e204:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e206:	69fb      	ldr	r3, [r7, #28]
 801e208:	885b      	ldrh	r3, [r3, #2]
 801e20a:	b29b      	uxth	r3, r3
 801e20c:	4618      	mov	r0, r3
 801e20e:	f7f6 f895 	bl	801433c <lwip_htons>
 801e212:	4603      	mov	r3, r0
 801e214:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801e216:	69fb      	ldr	r3, [r7, #28]
 801e218:	781b      	ldrb	r3, [r3, #0]
 801e21a:	f003 030f 	and.w	r3, r3, #15
 801e21e:	b2db      	uxtb	r3, r3
 801e220:	009b      	lsls	r3, r3, #2
 801e222:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801e224:	7e7b      	ldrb	r3, [r7, #25]
 801e226:	b29b      	uxth	r3, r3
 801e228:	8b7a      	ldrh	r2, [r7, #26]
 801e22a:	429a      	cmp	r2, r3
 801e22c:	d202      	bcs.n	801e234 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e22e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e232:	e135      	b.n	801e4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801e234:	7e7b      	ldrb	r3, [r7, #25]
 801e236:	b29b      	uxth	r3, r3
 801e238:	8b7a      	ldrh	r2, [r7, #26]
 801e23a:	1ad3      	subs	r3, r2, r3
 801e23c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801e23e:	69fb      	ldr	r3, [r7, #28]
 801e240:	88db      	ldrh	r3, [r3, #6]
 801e242:	b29b      	uxth	r3, r3
 801e244:	4618      	mov	r0, r3
 801e246:	f7f6 f879 	bl	801433c <lwip_htons>
 801e24a:	4603      	mov	r3, r0
 801e24c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e250:	b29b      	uxth	r3, r3
 801e252:	00db      	lsls	r3, r3, #3
 801e254:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801e256:	68bb      	ldr	r3, [r7, #8]
 801e258:	685b      	ldr	r3, [r3, #4]
 801e25a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801e25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e25e:	2200      	movs	r2, #0
 801e260:	701a      	strb	r2, [r3, #0]
 801e262:	2200      	movs	r2, #0
 801e264:	705a      	strb	r2, [r3, #1]
 801e266:	2200      	movs	r2, #0
 801e268:	709a      	strb	r2, [r3, #2]
 801e26a:	2200      	movs	r2, #0
 801e26c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801e26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e270:	8afa      	ldrh	r2, [r7, #22]
 801e272:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801e274:	8afa      	ldrh	r2, [r7, #22]
 801e276:	8b7b      	ldrh	r3, [r7, #26]
 801e278:	4413      	add	r3, r2
 801e27a:	b29a      	uxth	r2, r3
 801e27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e27e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801e280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e282:	88db      	ldrh	r3, [r3, #6]
 801e284:	b29b      	uxth	r3, r3
 801e286:	8afa      	ldrh	r2, [r7, #22]
 801e288:	429a      	cmp	r2, r3
 801e28a:	d902      	bls.n	801e292 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e28c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e290:	e106      	b.n	801e4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801e292:	68fb      	ldr	r3, [r7, #12]
 801e294:	685b      	ldr	r3, [r3, #4]
 801e296:	627b      	str	r3, [r7, #36]	; 0x24
 801e298:	e068      	b.n	801e36c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801e29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e29c:	685b      	ldr	r3, [r3, #4]
 801e29e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801e2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2a2:	889b      	ldrh	r3, [r3, #4]
 801e2a4:	b29a      	uxth	r2, r3
 801e2a6:	693b      	ldr	r3, [r7, #16]
 801e2a8:	889b      	ldrh	r3, [r3, #4]
 801e2aa:	b29b      	uxth	r3, r3
 801e2ac:	429a      	cmp	r2, r3
 801e2ae:	d235      	bcs.n	801e31c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801e2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e2b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801e2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2b8:	2b00      	cmp	r3, #0
 801e2ba:	d020      	beq.n	801e2fe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801e2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2be:	889b      	ldrh	r3, [r3, #4]
 801e2c0:	b29a      	uxth	r2, r3
 801e2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2c4:	88db      	ldrh	r3, [r3, #6]
 801e2c6:	b29b      	uxth	r3, r3
 801e2c8:	429a      	cmp	r2, r3
 801e2ca:	d307      	bcc.n	801e2dc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801e2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2ce:	88db      	ldrh	r3, [r3, #6]
 801e2d0:	b29a      	uxth	r2, r3
 801e2d2:	693b      	ldr	r3, [r7, #16]
 801e2d4:	889b      	ldrh	r3, [r3, #4]
 801e2d6:	b29b      	uxth	r3, r3
 801e2d8:	429a      	cmp	r2, r3
 801e2da:	d902      	bls.n	801e2e2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e2dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e2e0:	e0de      	b.n	801e4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801e2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2e4:	68ba      	ldr	r2, [r7, #8]
 801e2e6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801e2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2ea:	88db      	ldrh	r3, [r3, #6]
 801e2ec:	b29a      	uxth	r2, r3
 801e2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2f0:	889b      	ldrh	r3, [r3, #4]
 801e2f2:	b29b      	uxth	r3, r3
 801e2f4:	429a      	cmp	r2, r3
 801e2f6:	d03d      	beq.n	801e374 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e2f8:	2300      	movs	r3, #0
 801e2fa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801e2fc:	e03a      	b.n	801e374 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801e2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e300:	88db      	ldrh	r3, [r3, #6]
 801e302:	b29a      	uxth	r2, r3
 801e304:	693b      	ldr	r3, [r7, #16]
 801e306:	889b      	ldrh	r3, [r3, #4]
 801e308:	b29b      	uxth	r3, r3
 801e30a:	429a      	cmp	r2, r3
 801e30c:	d902      	bls.n	801e314 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e30e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e312:	e0c5      	b.n	801e4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801e314:	68fb      	ldr	r3, [r7, #12]
 801e316:	68ba      	ldr	r2, [r7, #8]
 801e318:	605a      	str	r2, [r3, #4]
      break;
 801e31a:	e02b      	b.n	801e374 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801e31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e31e:	889b      	ldrh	r3, [r3, #4]
 801e320:	b29a      	uxth	r2, r3
 801e322:	693b      	ldr	r3, [r7, #16]
 801e324:	889b      	ldrh	r3, [r3, #4]
 801e326:	b29b      	uxth	r3, r3
 801e328:	429a      	cmp	r2, r3
 801e32a:	d102      	bne.n	801e332 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e32c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e330:	e0b6      	b.n	801e4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801e332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e334:	889b      	ldrh	r3, [r3, #4]
 801e336:	b29a      	uxth	r2, r3
 801e338:	693b      	ldr	r3, [r7, #16]
 801e33a:	88db      	ldrh	r3, [r3, #6]
 801e33c:	b29b      	uxth	r3, r3
 801e33e:	429a      	cmp	r2, r3
 801e340:	d202      	bcs.n	801e348 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e346:	e0ab      	b.n	801e4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801e348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e34a:	2b00      	cmp	r3, #0
 801e34c:	d009      	beq.n	801e362 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801e34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e350:	88db      	ldrh	r3, [r3, #6]
 801e352:	b29a      	uxth	r2, r3
 801e354:	693b      	ldr	r3, [r7, #16]
 801e356:	889b      	ldrh	r3, [r3, #4]
 801e358:	b29b      	uxth	r3, r3
 801e35a:	429a      	cmp	r2, r3
 801e35c:	d001      	beq.n	801e362 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e35e:	2300      	movs	r3, #0
 801e360:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801e362:	693b      	ldr	r3, [r7, #16]
 801e364:	681b      	ldr	r3, [r3, #0]
 801e366:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801e368:	693b      	ldr	r3, [r7, #16]
 801e36a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801e36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e36e:	2b00      	cmp	r3, #0
 801e370:	d193      	bne.n	801e29a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801e372:	e000      	b.n	801e376 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801e374:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801e376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e378:	2b00      	cmp	r3, #0
 801e37a:	d12d      	bne.n	801e3d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801e37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e37e:	2b00      	cmp	r3, #0
 801e380:	d01c      	beq.n	801e3bc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801e382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e384:	88db      	ldrh	r3, [r3, #6]
 801e386:	b29a      	uxth	r2, r3
 801e388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e38a:	889b      	ldrh	r3, [r3, #4]
 801e38c:	b29b      	uxth	r3, r3
 801e38e:	429a      	cmp	r2, r3
 801e390:	d906      	bls.n	801e3a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801e392:	4b45      	ldr	r3, [pc, #276]	; (801e4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e394:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801e398:	4944      	ldr	r1, [pc, #272]	; (801e4ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801e39a:	4845      	ldr	r0, [pc, #276]	; (801e4b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e39c:	f000 fdf2 	bl	801ef84 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801e3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e3a2:	68ba      	ldr	r2, [r7, #8]
 801e3a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801e3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e3a8:	88db      	ldrh	r3, [r3, #6]
 801e3aa:	b29a      	uxth	r2, r3
 801e3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e3ae:	889b      	ldrh	r3, [r3, #4]
 801e3b0:	b29b      	uxth	r3, r3
 801e3b2:	429a      	cmp	r2, r3
 801e3b4:	d010      	beq.n	801e3d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801e3b6:	2300      	movs	r3, #0
 801e3b8:	623b      	str	r3, [r7, #32]
 801e3ba:	e00d      	b.n	801e3d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801e3bc:	68fb      	ldr	r3, [r7, #12]
 801e3be:	685b      	ldr	r3, [r3, #4]
 801e3c0:	2b00      	cmp	r3, #0
 801e3c2:	d006      	beq.n	801e3d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801e3c4:	4b38      	ldr	r3, [pc, #224]	; (801e4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e3c6:	f240 12bf 	movw	r2, #447	; 0x1bf
 801e3ca:	493a      	ldr	r1, [pc, #232]	; (801e4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801e3cc:	4838      	ldr	r0, [pc, #224]	; (801e4b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e3ce:	f000 fdd9 	bl	801ef84 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801e3d2:	68fb      	ldr	r3, [r7, #12]
 801e3d4:	68ba      	ldr	r2, [r7, #8]
 801e3d6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801e3d8:	687b      	ldr	r3, [r7, #4]
 801e3da:	2b00      	cmp	r3, #0
 801e3dc:	d105      	bne.n	801e3ea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801e3de:	68fb      	ldr	r3, [r7, #12]
 801e3e0:	7f9b      	ldrb	r3, [r3, #30]
 801e3e2:	f003 0301 	and.w	r3, r3, #1
 801e3e6:	2b00      	cmp	r3, #0
 801e3e8:	d059      	beq.n	801e49e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801e3ea:	6a3b      	ldr	r3, [r7, #32]
 801e3ec:	2b00      	cmp	r3, #0
 801e3ee:	d04f      	beq.n	801e490 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801e3f0:	68fb      	ldr	r3, [r7, #12]
 801e3f2:	685b      	ldr	r3, [r3, #4]
 801e3f4:	2b00      	cmp	r3, #0
 801e3f6:	d006      	beq.n	801e406 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801e3f8:	68fb      	ldr	r3, [r7, #12]
 801e3fa:	685b      	ldr	r3, [r3, #4]
 801e3fc:	685b      	ldr	r3, [r3, #4]
 801e3fe:	889b      	ldrh	r3, [r3, #4]
 801e400:	b29b      	uxth	r3, r3
 801e402:	2b00      	cmp	r3, #0
 801e404:	d002      	beq.n	801e40c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801e406:	2300      	movs	r3, #0
 801e408:	623b      	str	r3, [r7, #32]
 801e40a:	e041      	b.n	801e490 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801e40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e40e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801e410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e412:	681b      	ldr	r3, [r3, #0]
 801e414:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801e416:	e012      	b.n	801e43e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801e418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e41a:	685b      	ldr	r3, [r3, #4]
 801e41c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801e41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e420:	88db      	ldrh	r3, [r3, #6]
 801e422:	b29a      	uxth	r2, r3
 801e424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e426:	889b      	ldrh	r3, [r3, #4]
 801e428:	b29b      	uxth	r3, r3
 801e42a:	429a      	cmp	r2, r3
 801e42c:	d002      	beq.n	801e434 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801e42e:	2300      	movs	r3, #0
 801e430:	623b      	str	r3, [r7, #32]
            break;
 801e432:	e007      	b.n	801e444 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801e434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e436:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801e438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e43a:	681b      	ldr	r3, [r3, #0]
 801e43c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801e43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e440:	2b00      	cmp	r3, #0
 801e442:	d1e9      	bne.n	801e418 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801e444:	6a3b      	ldr	r3, [r7, #32]
 801e446:	2b00      	cmp	r3, #0
 801e448:	d022      	beq.n	801e490 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801e44a:	68fb      	ldr	r3, [r7, #12]
 801e44c:	685b      	ldr	r3, [r3, #4]
 801e44e:	2b00      	cmp	r3, #0
 801e450:	d106      	bne.n	801e460 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801e452:	4b15      	ldr	r3, [pc, #84]	; (801e4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e454:	f240 12df 	movw	r2, #479	; 0x1df
 801e458:	4917      	ldr	r1, [pc, #92]	; (801e4b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e45a:	4815      	ldr	r0, [pc, #84]	; (801e4b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e45c:	f000 fd92 	bl	801ef84 <iprintf>
          LWIP_ASSERT("sanity check",
 801e460:	68fb      	ldr	r3, [r7, #12]
 801e462:	685b      	ldr	r3, [r3, #4]
 801e464:	685b      	ldr	r3, [r3, #4]
 801e466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e468:	429a      	cmp	r2, r3
 801e46a:	d106      	bne.n	801e47a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801e46c:	4b0e      	ldr	r3, [pc, #56]	; (801e4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e46e:	f240 12e1 	movw	r2, #481	; 0x1e1
 801e472:	4911      	ldr	r1, [pc, #68]	; (801e4b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e474:	480e      	ldr	r0, [pc, #56]	; (801e4b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e476:	f000 fd85 	bl	801ef84 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801e47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e47c:	681b      	ldr	r3, [r3, #0]
 801e47e:	2b00      	cmp	r3, #0
 801e480:	d006      	beq.n	801e490 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801e482:	4b09      	ldr	r3, [pc, #36]	; (801e4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e484:	f240 12e3 	movw	r2, #483	; 0x1e3
 801e488:	490c      	ldr	r1, [pc, #48]	; (801e4bc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801e48a:	4809      	ldr	r0, [pc, #36]	; (801e4b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e48c:	f000 fd7a 	bl	801ef84 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801e490:	6a3b      	ldr	r3, [r7, #32]
 801e492:	2b00      	cmp	r3, #0
 801e494:	bf14      	ite	ne
 801e496:	2301      	movne	r3, #1
 801e498:	2300      	moveq	r3, #0
 801e49a:	b2db      	uxtb	r3, r3
 801e49c:	e000      	b.n	801e4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801e49e:	2300      	movs	r3, #0
}
 801e4a0:	4618      	mov	r0, r3
 801e4a2:	3730      	adds	r7, #48	; 0x30
 801e4a4:	46bd      	mov	sp, r7
 801e4a6:	bd80      	pop	{r7, pc}
 801e4a8:	080228d4 	.word	0x080228d4
 801e4ac:	080229b8 	.word	0x080229b8
 801e4b0:	0802291c 	.word	0x0802291c
 801e4b4:	080229d8 	.word	0x080229d8
 801e4b8:	08022a10 	.word	0x08022a10
 801e4bc:	08022a20 	.word	0x08022a20

0801e4c0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801e4c0:	b580      	push	{r7, lr}
 801e4c2:	b08e      	sub	sp, #56	; 0x38
 801e4c4:	af00      	add	r7, sp, #0
 801e4c6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801e4c8:	687b      	ldr	r3, [r7, #4]
 801e4ca:	685b      	ldr	r3, [r3, #4]
 801e4cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801e4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4d0:	781b      	ldrb	r3, [r3, #0]
 801e4d2:	f003 030f 	and.w	r3, r3, #15
 801e4d6:	b2db      	uxtb	r3, r3
 801e4d8:	009b      	lsls	r3, r3, #2
 801e4da:	b2db      	uxtb	r3, r3
 801e4dc:	2b14      	cmp	r3, #20
 801e4de:	f040 8167 	bne.w	801e7b0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801e4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4e4:	88db      	ldrh	r3, [r3, #6]
 801e4e6:	b29b      	uxth	r3, r3
 801e4e8:	4618      	mov	r0, r3
 801e4ea:	f7f5 ff27 	bl	801433c <lwip_htons>
 801e4ee:	4603      	mov	r3, r0
 801e4f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e4f4:	b29b      	uxth	r3, r3
 801e4f6:	00db      	lsls	r3, r3, #3
 801e4f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4fc:	885b      	ldrh	r3, [r3, #2]
 801e4fe:	b29b      	uxth	r3, r3
 801e500:	4618      	mov	r0, r3
 801e502:	f7f5 ff1b 	bl	801433c <lwip_htons>
 801e506:	4603      	mov	r3, r0
 801e508:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801e50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e50c:	781b      	ldrb	r3, [r3, #0]
 801e50e:	f003 030f 	and.w	r3, r3, #15
 801e512:	b2db      	uxtb	r3, r3
 801e514:	009b      	lsls	r3, r3, #2
 801e516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801e51a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e51e:	b29b      	uxth	r3, r3
 801e520:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e522:	429a      	cmp	r2, r3
 801e524:	f0c0 8146 	bcc.w	801e7b4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801e528:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e52c:	b29b      	uxth	r3, r3
 801e52e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e530:	1ad3      	subs	r3, r2, r3
 801e532:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801e534:	6878      	ldr	r0, [r7, #4]
 801e536:	f7f7 fb6d 	bl	8015c14 <pbuf_clen>
 801e53a:	4603      	mov	r3, r0
 801e53c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801e53e:	4ba3      	ldr	r3, [pc, #652]	; (801e7cc <ip4_reass+0x30c>)
 801e540:	881b      	ldrh	r3, [r3, #0]
 801e542:	461a      	mov	r2, r3
 801e544:	8c3b      	ldrh	r3, [r7, #32]
 801e546:	4413      	add	r3, r2
 801e548:	2b0a      	cmp	r3, #10
 801e54a:	dd10      	ble.n	801e56e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e54c:	8c3b      	ldrh	r3, [r7, #32]
 801e54e:	4619      	mov	r1, r3
 801e550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e552:	f7ff fd81 	bl	801e058 <ip_reass_remove_oldest_datagram>
 801e556:	4603      	mov	r3, r0
 801e558:	2b00      	cmp	r3, #0
 801e55a:	f000 812d 	beq.w	801e7b8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801e55e:	4b9b      	ldr	r3, [pc, #620]	; (801e7cc <ip4_reass+0x30c>)
 801e560:	881b      	ldrh	r3, [r3, #0]
 801e562:	461a      	mov	r2, r3
 801e564:	8c3b      	ldrh	r3, [r7, #32]
 801e566:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e568:	2b0a      	cmp	r3, #10
 801e56a:	f300 8125 	bgt.w	801e7b8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e56e:	4b98      	ldr	r3, [pc, #608]	; (801e7d0 <ip4_reass+0x310>)
 801e570:	681b      	ldr	r3, [r3, #0]
 801e572:	633b      	str	r3, [r7, #48]	; 0x30
 801e574:	e015      	b.n	801e5a2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801e576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e578:	695a      	ldr	r2, [r3, #20]
 801e57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e57c:	68db      	ldr	r3, [r3, #12]
 801e57e:	429a      	cmp	r2, r3
 801e580:	d10c      	bne.n	801e59c <ip4_reass+0xdc>
 801e582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e584:	699a      	ldr	r2, [r3, #24]
 801e586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e588:	691b      	ldr	r3, [r3, #16]
 801e58a:	429a      	cmp	r2, r3
 801e58c:	d106      	bne.n	801e59c <ip4_reass+0xdc>
 801e58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e590:	899a      	ldrh	r2, [r3, #12]
 801e592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e594:	889b      	ldrh	r3, [r3, #4]
 801e596:	b29b      	uxth	r3, r3
 801e598:	429a      	cmp	r2, r3
 801e59a:	d006      	beq.n	801e5aa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e59e:	681b      	ldr	r3, [r3, #0]
 801e5a0:	633b      	str	r3, [r7, #48]	; 0x30
 801e5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e5a4:	2b00      	cmp	r3, #0
 801e5a6:	d1e6      	bne.n	801e576 <ip4_reass+0xb6>
 801e5a8:	e000      	b.n	801e5ac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801e5aa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801e5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e5ae:	2b00      	cmp	r3, #0
 801e5b0:	d109      	bne.n	801e5c6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801e5b2:	8c3b      	ldrh	r3, [r7, #32]
 801e5b4:	4619      	mov	r1, r3
 801e5b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e5b8:	f7ff fdb0 	bl	801e11c <ip_reass_enqueue_new_datagram>
 801e5bc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801e5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e5c0:	2b00      	cmp	r3, #0
 801e5c2:	d11c      	bne.n	801e5fe <ip4_reass+0x13e>
      goto nullreturn;
 801e5c4:	e0f9      	b.n	801e7ba <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e5c8:	88db      	ldrh	r3, [r3, #6]
 801e5ca:	b29b      	uxth	r3, r3
 801e5cc:	4618      	mov	r0, r3
 801e5ce:	f7f5 feb5 	bl	801433c <lwip_htons>
 801e5d2:	4603      	mov	r3, r0
 801e5d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e5d8:	2b00      	cmp	r3, #0
 801e5da:	d110      	bne.n	801e5fe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801e5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e5de:	89db      	ldrh	r3, [r3, #14]
 801e5e0:	4618      	mov	r0, r3
 801e5e2:	f7f5 feab 	bl	801433c <lwip_htons>
 801e5e6:	4603      	mov	r3, r0
 801e5e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e5ec:	2b00      	cmp	r3, #0
 801e5ee:	d006      	beq.n	801e5fe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801e5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e5f2:	3308      	adds	r3, #8
 801e5f4:	2214      	movs	r2, #20
 801e5f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801e5f8:	4618      	mov	r0, r3
 801e5fa:	f000 fcb0 	bl	801ef5e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801e5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e600:	88db      	ldrh	r3, [r3, #6]
 801e602:	b29b      	uxth	r3, r3
 801e604:	f003 0320 	and.w	r3, r3, #32
 801e608:	2b00      	cmp	r3, #0
 801e60a:	bf0c      	ite	eq
 801e60c:	2301      	moveq	r3, #1
 801e60e:	2300      	movne	r3, #0
 801e610:	b2db      	uxtb	r3, r3
 801e612:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801e614:	69fb      	ldr	r3, [r7, #28]
 801e616:	2b00      	cmp	r3, #0
 801e618:	d00e      	beq.n	801e638 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801e61a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801e61c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e61e:	4413      	add	r3, r2
 801e620:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801e622:	8b7a      	ldrh	r2, [r7, #26]
 801e624:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e626:	429a      	cmp	r2, r3
 801e628:	f0c0 80a0 	bcc.w	801e76c <ip4_reass+0x2ac>
 801e62c:	8b7b      	ldrh	r3, [r7, #26]
 801e62e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801e632:	4293      	cmp	r3, r2
 801e634:	f200 809a 	bhi.w	801e76c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801e638:	69fa      	ldr	r2, [r7, #28]
 801e63a:	6879      	ldr	r1, [r7, #4]
 801e63c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e63e:	f7ff fdd5 	bl	801e1ec <ip_reass_chain_frag_into_datagram_and_validate>
 801e642:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801e644:	697b      	ldr	r3, [r7, #20]
 801e646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e64a:	f000 8091 	beq.w	801e770 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e64e:	4b5f      	ldr	r3, [pc, #380]	; (801e7cc <ip4_reass+0x30c>)
 801e650:	881a      	ldrh	r2, [r3, #0]
 801e652:	8c3b      	ldrh	r3, [r7, #32]
 801e654:	4413      	add	r3, r2
 801e656:	b29a      	uxth	r2, r3
 801e658:	4b5c      	ldr	r3, [pc, #368]	; (801e7cc <ip4_reass+0x30c>)
 801e65a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801e65c:	69fb      	ldr	r3, [r7, #28]
 801e65e:	2b00      	cmp	r3, #0
 801e660:	d00d      	beq.n	801e67e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801e662:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801e664:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e666:	4413      	add	r3, r2
 801e668:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801e66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e66c:	8a7a      	ldrh	r2, [r7, #18]
 801e66e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801e670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e672:	7f9b      	ldrb	r3, [r3, #30]
 801e674:	f043 0301 	orr.w	r3, r3, #1
 801e678:	b2da      	uxtb	r2, r3
 801e67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e67c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801e67e:	697b      	ldr	r3, [r7, #20]
 801e680:	2b01      	cmp	r3, #1
 801e682:	d171      	bne.n	801e768 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801e684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e686:	8b9b      	ldrh	r3, [r3, #28]
 801e688:	3314      	adds	r3, #20
 801e68a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801e68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e68e:	685b      	ldr	r3, [r3, #4]
 801e690:	685b      	ldr	r3, [r3, #4]
 801e692:	681b      	ldr	r3, [r3, #0]
 801e694:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801e696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e698:	685b      	ldr	r3, [r3, #4]
 801e69a:	685b      	ldr	r3, [r3, #4]
 801e69c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801e69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e6a0:	3308      	adds	r3, #8
 801e6a2:	2214      	movs	r2, #20
 801e6a4:	4619      	mov	r1, r3
 801e6a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e6a8:	f000 fc59 	bl	801ef5e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801e6ac:	8a3b      	ldrh	r3, [r7, #16]
 801e6ae:	4618      	mov	r0, r3
 801e6b0:	f7f5 fe44 	bl	801433c <lwip_htons>
 801e6b4:	4603      	mov	r3, r0
 801e6b6:	461a      	mov	r2, r3
 801e6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6ba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801e6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6be:	2200      	movs	r2, #0
 801e6c0:	719a      	strb	r2, [r3, #6]
 801e6c2:	2200      	movs	r2, #0
 801e6c4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801e6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6c8:	2200      	movs	r2, #0
 801e6ca:	729a      	strb	r2, [r3, #10]
 801e6cc:	2200      	movs	r2, #0
 801e6ce:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801e6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e6d2:	685b      	ldr	r3, [r3, #4]
 801e6d4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801e6d6:	e00d      	b.n	801e6f4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801e6d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e6da:	685b      	ldr	r3, [r3, #4]
 801e6dc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801e6de:	2114      	movs	r1, #20
 801e6e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801e6e2:	f7f7 f983 	bl	80159ec <pbuf_remove_header>
      pbuf_cat(p, r);
 801e6e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e6e8:	6878      	ldr	r0, [r7, #4]
 801e6ea:	f7f7 fad3 	bl	8015c94 <pbuf_cat>
      r = iprh->next_pbuf;
 801e6ee:	68fb      	ldr	r3, [r7, #12]
 801e6f0:	681b      	ldr	r3, [r3, #0]
 801e6f2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801e6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e6f6:	2b00      	cmp	r3, #0
 801e6f8:	d1ee      	bne.n	801e6d8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801e6fa:	4b35      	ldr	r3, [pc, #212]	; (801e7d0 <ip4_reass+0x310>)
 801e6fc:	681b      	ldr	r3, [r3, #0]
 801e6fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e700:	429a      	cmp	r2, r3
 801e702:	d102      	bne.n	801e70a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801e704:	2300      	movs	r3, #0
 801e706:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e708:	e010      	b.n	801e72c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e70a:	4b31      	ldr	r3, [pc, #196]	; (801e7d0 <ip4_reass+0x310>)
 801e70c:	681b      	ldr	r3, [r3, #0]
 801e70e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e710:	e007      	b.n	801e722 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801e712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e714:	681b      	ldr	r3, [r3, #0]
 801e716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e718:	429a      	cmp	r2, r3
 801e71a:	d006      	beq.n	801e72a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e71e:	681b      	ldr	r3, [r3, #0]
 801e720:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e724:	2b00      	cmp	r3, #0
 801e726:	d1f4      	bne.n	801e712 <ip4_reass+0x252>
 801e728:	e000      	b.n	801e72c <ip4_reass+0x26c>
          break;
 801e72a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801e72c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e72e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e730:	f7ff fd2e 	bl	801e190 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801e734:	6878      	ldr	r0, [r7, #4]
 801e736:	f7f7 fa6d 	bl	8015c14 <pbuf_clen>
 801e73a:	4603      	mov	r3, r0
 801e73c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801e73e:	4b23      	ldr	r3, [pc, #140]	; (801e7cc <ip4_reass+0x30c>)
 801e740:	881b      	ldrh	r3, [r3, #0]
 801e742:	8c3a      	ldrh	r2, [r7, #32]
 801e744:	429a      	cmp	r2, r3
 801e746:	d906      	bls.n	801e756 <ip4_reass+0x296>
 801e748:	4b22      	ldr	r3, [pc, #136]	; (801e7d4 <ip4_reass+0x314>)
 801e74a:	f240 229b 	movw	r2, #667	; 0x29b
 801e74e:	4922      	ldr	r1, [pc, #136]	; (801e7d8 <ip4_reass+0x318>)
 801e750:	4822      	ldr	r0, [pc, #136]	; (801e7dc <ip4_reass+0x31c>)
 801e752:	f000 fc17 	bl	801ef84 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801e756:	4b1d      	ldr	r3, [pc, #116]	; (801e7cc <ip4_reass+0x30c>)
 801e758:	881a      	ldrh	r2, [r3, #0]
 801e75a:	8c3b      	ldrh	r3, [r7, #32]
 801e75c:	1ad3      	subs	r3, r2, r3
 801e75e:	b29a      	uxth	r2, r3
 801e760:	4b1a      	ldr	r3, [pc, #104]	; (801e7cc <ip4_reass+0x30c>)
 801e762:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801e764:	687b      	ldr	r3, [r7, #4]
 801e766:	e02c      	b.n	801e7c2 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801e768:	2300      	movs	r3, #0
 801e76a:	e02a      	b.n	801e7c2 <ip4_reass+0x302>

nullreturn_ipr:
 801e76c:	bf00      	nop
 801e76e:	e000      	b.n	801e772 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801e770:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801e772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e774:	2b00      	cmp	r3, #0
 801e776:	d106      	bne.n	801e786 <ip4_reass+0x2c6>
 801e778:	4b16      	ldr	r3, [pc, #88]	; (801e7d4 <ip4_reass+0x314>)
 801e77a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801e77e:	4918      	ldr	r1, [pc, #96]	; (801e7e0 <ip4_reass+0x320>)
 801e780:	4816      	ldr	r0, [pc, #88]	; (801e7dc <ip4_reass+0x31c>)
 801e782:	f000 fbff 	bl	801ef84 <iprintf>
  if (ipr->p == NULL) {
 801e786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e788:	685b      	ldr	r3, [r3, #4]
 801e78a:	2b00      	cmp	r3, #0
 801e78c:	d114      	bne.n	801e7b8 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801e78e:	4b10      	ldr	r3, [pc, #64]	; (801e7d0 <ip4_reass+0x310>)
 801e790:	681b      	ldr	r3, [r3, #0]
 801e792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e794:	429a      	cmp	r2, r3
 801e796:	d006      	beq.n	801e7a6 <ip4_reass+0x2e6>
 801e798:	4b0e      	ldr	r3, [pc, #56]	; (801e7d4 <ip4_reass+0x314>)
 801e79a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801e79e:	4911      	ldr	r1, [pc, #68]	; (801e7e4 <ip4_reass+0x324>)
 801e7a0:	480e      	ldr	r0, [pc, #56]	; (801e7dc <ip4_reass+0x31c>)
 801e7a2:	f000 fbef 	bl	801ef84 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801e7a6:	2100      	movs	r1, #0
 801e7a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e7aa:	f7ff fcf1 	bl	801e190 <ip_reass_dequeue_datagram>
 801e7ae:	e004      	b.n	801e7ba <ip4_reass+0x2fa>
    goto nullreturn;
 801e7b0:	bf00      	nop
 801e7b2:	e002      	b.n	801e7ba <ip4_reass+0x2fa>
    goto nullreturn;
 801e7b4:	bf00      	nop
 801e7b6:	e000      	b.n	801e7ba <ip4_reass+0x2fa>
  }

nullreturn:
 801e7b8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801e7ba:	6878      	ldr	r0, [r7, #4]
 801e7bc:	f7f7 f99c 	bl	8015af8 <pbuf_free>
  return NULL;
 801e7c0:	2300      	movs	r3, #0
}
 801e7c2:	4618      	mov	r0, r3
 801e7c4:	3738      	adds	r7, #56	; 0x38
 801e7c6:	46bd      	mov	sp, r7
 801e7c8:	bd80      	pop	{r7, pc}
 801e7ca:	bf00      	nop
 801e7cc:	20004660 	.word	0x20004660
 801e7d0:	2000465c 	.word	0x2000465c
 801e7d4:	080228d4 	.word	0x080228d4
 801e7d8:	08022a44 	.word	0x08022a44
 801e7dc:	0802291c 	.word	0x0802291c
 801e7e0:	08022a60 	.word	0x08022a60
 801e7e4:	08022a6c 	.word	0x08022a6c

0801e7e8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801e7e8:	b580      	push	{r7, lr}
 801e7ea:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801e7ec:	2005      	movs	r0, #5
 801e7ee:	f7f6 fa91 	bl	8014d14 <memp_malloc>
 801e7f2:	4603      	mov	r3, r0
}
 801e7f4:	4618      	mov	r0, r3
 801e7f6:	bd80      	pop	{r7, pc}

0801e7f8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801e7f8:	b580      	push	{r7, lr}
 801e7fa:	b082      	sub	sp, #8
 801e7fc:	af00      	add	r7, sp, #0
 801e7fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801e800:	687b      	ldr	r3, [r7, #4]
 801e802:	2b00      	cmp	r3, #0
 801e804:	d106      	bne.n	801e814 <ip_frag_free_pbuf_custom_ref+0x1c>
 801e806:	4b07      	ldr	r3, [pc, #28]	; (801e824 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801e808:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801e80c:	4906      	ldr	r1, [pc, #24]	; (801e828 <ip_frag_free_pbuf_custom_ref+0x30>)
 801e80e:	4807      	ldr	r0, [pc, #28]	; (801e82c <ip_frag_free_pbuf_custom_ref+0x34>)
 801e810:	f000 fbb8 	bl	801ef84 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801e814:	6879      	ldr	r1, [r7, #4]
 801e816:	2005      	movs	r0, #5
 801e818:	f7f6 face 	bl	8014db8 <memp_free>
}
 801e81c:	bf00      	nop
 801e81e:	3708      	adds	r7, #8
 801e820:	46bd      	mov	sp, r7
 801e822:	bd80      	pop	{r7, pc}
 801e824:	080228d4 	.word	0x080228d4
 801e828:	08022a8c 	.word	0x08022a8c
 801e82c:	0802291c 	.word	0x0802291c

0801e830 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801e830:	b580      	push	{r7, lr}
 801e832:	b084      	sub	sp, #16
 801e834:	af00      	add	r7, sp, #0
 801e836:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801e838:	687b      	ldr	r3, [r7, #4]
 801e83a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801e83c:	68fb      	ldr	r3, [r7, #12]
 801e83e:	2b00      	cmp	r3, #0
 801e840:	d106      	bne.n	801e850 <ipfrag_free_pbuf_custom+0x20>
 801e842:	4b11      	ldr	r3, [pc, #68]	; (801e888 <ipfrag_free_pbuf_custom+0x58>)
 801e844:	f240 22ce 	movw	r2, #718	; 0x2ce
 801e848:	4910      	ldr	r1, [pc, #64]	; (801e88c <ipfrag_free_pbuf_custom+0x5c>)
 801e84a:	4811      	ldr	r0, [pc, #68]	; (801e890 <ipfrag_free_pbuf_custom+0x60>)
 801e84c:	f000 fb9a 	bl	801ef84 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801e850:	68fa      	ldr	r2, [r7, #12]
 801e852:	687b      	ldr	r3, [r7, #4]
 801e854:	429a      	cmp	r2, r3
 801e856:	d006      	beq.n	801e866 <ipfrag_free_pbuf_custom+0x36>
 801e858:	4b0b      	ldr	r3, [pc, #44]	; (801e888 <ipfrag_free_pbuf_custom+0x58>)
 801e85a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801e85e:	490d      	ldr	r1, [pc, #52]	; (801e894 <ipfrag_free_pbuf_custom+0x64>)
 801e860:	480b      	ldr	r0, [pc, #44]	; (801e890 <ipfrag_free_pbuf_custom+0x60>)
 801e862:	f000 fb8f 	bl	801ef84 <iprintf>
  if (pcr->original != NULL) {
 801e866:	68fb      	ldr	r3, [r7, #12]
 801e868:	695b      	ldr	r3, [r3, #20]
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	d004      	beq.n	801e878 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801e86e:	68fb      	ldr	r3, [r7, #12]
 801e870:	695b      	ldr	r3, [r3, #20]
 801e872:	4618      	mov	r0, r3
 801e874:	f7f7 f940 	bl	8015af8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801e878:	68f8      	ldr	r0, [r7, #12]
 801e87a:	f7ff ffbd 	bl	801e7f8 <ip_frag_free_pbuf_custom_ref>
}
 801e87e:	bf00      	nop
 801e880:	3710      	adds	r7, #16
 801e882:	46bd      	mov	sp, r7
 801e884:	bd80      	pop	{r7, pc}
 801e886:	bf00      	nop
 801e888:	080228d4 	.word	0x080228d4
 801e88c:	08022a98 	.word	0x08022a98
 801e890:	0802291c 	.word	0x0802291c
 801e894:	08022aa4 	.word	0x08022aa4

0801e898 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801e898:	b580      	push	{r7, lr}
 801e89a:	b094      	sub	sp, #80	; 0x50
 801e89c:	af02      	add	r7, sp, #8
 801e89e:	60f8      	str	r0, [r7, #12]
 801e8a0:	60b9      	str	r1, [r7, #8]
 801e8a2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801e8a4:	2300      	movs	r3, #0
 801e8a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801e8aa:	68bb      	ldr	r3, [r7, #8]
 801e8ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801e8ae:	3b14      	subs	r3, #20
 801e8b0:	2b00      	cmp	r3, #0
 801e8b2:	da00      	bge.n	801e8b6 <ip4_frag+0x1e>
 801e8b4:	3307      	adds	r3, #7
 801e8b6:	10db      	asrs	r3, r3, #3
 801e8b8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801e8ba:	2314      	movs	r3, #20
 801e8bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801e8be:	68fb      	ldr	r3, [r7, #12]
 801e8c0:	685b      	ldr	r3, [r3, #4]
 801e8c2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801e8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e8c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801e8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8ca:	781b      	ldrb	r3, [r3, #0]
 801e8cc:	f003 030f 	and.w	r3, r3, #15
 801e8d0:	b2db      	uxtb	r3, r3
 801e8d2:	009b      	lsls	r3, r3, #2
 801e8d4:	b2db      	uxtb	r3, r3
 801e8d6:	2b14      	cmp	r3, #20
 801e8d8:	d002      	beq.n	801e8e0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801e8da:	f06f 0305 	mvn.w	r3, #5
 801e8de:	e10f      	b.n	801eb00 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801e8e0:	68fb      	ldr	r3, [r7, #12]
 801e8e2:	895b      	ldrh	r3, [r3, #10]
 801e8e4:	2b13      	cmp	r3, #19
 801e8e6:	d809      	bhi.n	801e8fc <ip4_frag+0x64>
 801e8e8:	4b87      	ldr	r3, [pc, #540]	; (801eb08 <ip4_frag+0x270>)
 801e8ea:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801e8ee:	4987      	ldr	r1, [pc, #540]	; (801eb0c <ip4_frag+0x274>)
 801e8f0:	4887      	ldr	r0, [pc, #540]	; (801eb10 <ip4_frag+0x278>)
 801e8f2:	f000 fb47 	bl	801ef84 <iprintf>
 801e8f6:	f06f 0305 	mvn.w	r3, #5
 801e8fa:	e101      	b.n	801eb00 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801e8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8fe:	88db      	ldrh	r3, [r3, #6]
 801e900:	b29b      	uxth	r3, r3
 801e902:	4618      	mov	r0, r3
 801e904:	f7f5 fd1a 	bl	801433c <lwip_htons>
 801e908:	4603      	mov	r3, r0
 801e90a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801e90c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e90e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e912:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801e916:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801e91c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801e91e:	68fb      	ldr	r3, [r7, #12]
 801e920:	891b      	ldrh	r3, [r3, #8]
 801e922:	3b14      	subs	r3, #20
 801e924:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801e928:	e0e0      	b.n	801eaec <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801e92a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e92c:	00db      	lsls	r3, r3, #3
 801e92e:	b29b      	uxth	r3, r3
 801e930:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e934:	4293      	cmp	r3, r2
 801e936:	bf28      	it	cs
 801e938:	4613      	movcs	r3, r2
 801e93a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801e93c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e940:	2114      	movs	r1, #20
 801e942:	200e      	movs	r0, #14
 801e944:	f7f6 fdf8 	bl	8015538 <pbuf_alloc>
 801e948:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801e94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e94c:	2b00      	cmp	r3, #0
 801e94e:	f000 80d4 	beq.w	801eafa <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801e952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e954:	895b      	ldrh	r3, [r3, #10]
 801e956:	2b13      	cmp	r3, #19
 801e958:	d806      	bhi.n	801e968 <ip4_frag+0xd0>
 801e95a:	4b6b      	ldr	r3, [pc, #428]	; (801eb08 <ip4_frag+0x270>)
 801e95c:	f240 3225 	movw	r2, #805	; 0x325
 801e960:	496c      	ldr	r1, [pc, #432]	; (801eb14 <ip4_frag+0x27c>)
 801e962:	486b      	ldr	r0, [pc, #428]	; (801eb10 <ip4_frag+0x278>)
 801e964:	f000 fb0e 	bl	801ef84 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801e968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e96a:	685b      	ldr	r3, [r3, #4]
 801e96c:	2214      	movs	r2, #20
 801e96e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e970:	4618      	mov	r0, r3
 801e972:	f000 faf4 	bl	801ef5e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801e976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e978:	685b      	ldr	r3, [r3, #4]
 801e97a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801e97c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801e97e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801e982:	e064      	b.n	801ea4e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801e984:	68fb      	ldr	r3, [r7, #12]
 801e986:	895a      	ldrh	r2, [r3, #10]
 801e988:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e98a:	1ad3      	subs	r3, r2, r3
 801e98c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801e98e:	68fb      	ldr	r3, [r7, #12]
 801e990:	895b      	ldrh	r3, [r3, #10]
 801e992:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801e994:	429a      	cmp	r2, r3
 801e996:	d906      	bls.n	801e9a6 <ip4_frag+0x10e>
 801e998:	4b5b      	ldr	r3, [pc, #364]	; (801eb08 <ip4_frag+0x270>)
 801e99a:	f240 322d 	movw	r2, #813	; 0x32d
 801e99e:	495e      	ldr	r1, [pc, #376]	; (801eb18 <ip4_frag+0x280>)
 801e9a0:	485b      	ldr	r0, [pc, #364]	; (801eb10 <ip4_frag+0x278>)
 801e9a2:	f000 faef 	bl	801ef84 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801e9a6:	8bfa      	ldrh	r2, [r7, #30]
 801e9a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e9ac:	4293      	cmp	r3, r2
 801e9ae:	bf28      	it	cs
 801e9b0:	4613      	movcs	r3, r2
 801e9b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801e9b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e9ba:	2b00      	cmp	r3, #0
 801e9bc:	d105      	bne.n	801e9ca <ip4_frag+0x132>
        poff = 0;
 801e9be:	2300      	movs	r3, #0
 801e9c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801e9c2:	68fb      	ldr	r3, [r7, #12]
 801e9c4:	681b      	ldr	r3, [r3, #0]
 801e9c6:	60fb      	str	r3, [r7, #12]
        continue;
 801e9c8:	e041      	b.n	801ea4e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801e9ca:	f7ff ff0d 	bl	801e7e8 <ip_frag_alloc_pbuf_custom_ref>
 801e9ce:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801e9d0:	69bb      	ldr	r3, [r7, #24]
 801e9d2:	2b00      	cmp	r3, #0
 801e9d4:	d103      	bne.n	801e9de <ip4_frag+0x146>
        pbuf_free(rambuf);
 801e9d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e9d8:	f7f7 f88e 	bl	8015af8 <pbuf_free>
        goto memerr;
 801e9dc:	e08e      	b.n	801eafc <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e9de:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801e9e0:	68fb      	ldr	r3, [r7, #12]
 801e9e2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e9e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e9e6:	4413      	add	r3, r2
 801e9e8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801e9ec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801e9f0:	9201      	str	r2, [sp, #4]
 801e9f2:	9300      	str	r3, [sp, #0]
 801e9f4:	4603      	mov	r3, r0
 801e9f6:	2241      	movs	r2, #65	; 0x41
 801e9f8:	2000      	movs	r0, #0
 801e9fa:	f7f6 fec3 	bl	8015784 <pbuf_alloced_custom>
 801e9fe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801ea00:	697b      	ldr	r3, [r7, #20]
 801ea02:	2b00      	cmp	r3, #0
 801ea04:	d106      	bne.n	801ea14 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801ea06:	69b8      	ldr	r0, [r7, #24]
 801ea08:	f7ff fef6 	bl	801e7f8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801ea0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ea0e:	f7f7 f873 	bl	8015af8 <pbuf_free>
        goto memerr;
 801ea12:	e073      	b.n	801eafc <ip4_frag+0x264>
      }
      pbuf_ref(p);
 801ea14:	68f8      	ldr	r0, [r7, #12]
 801ea16:	f7f7 f915 	bl	8015c44 <pbuf_ref>
      pcr->original = p;
 801ea1a:	69bb      	ldr	r3, [r7, #24]
 801ea1c:	68fa      	ldr	r2, [r7, #12]
 801ea1e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801ea20:	69bb      	ldr	r3, [r7, #24]
 801ea22:	4a3e      	ldr	r2, [pc, #248]	; (801eb1c <ip4_frag+0x284>)
 801ea24:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801ea26:	6979      	ldr	r1, [r7, #20]
 801ea28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ea2a:	f7f7 f933 	bl	8015c94 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801ea2e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801ea32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ea36:	1ad3      	subs	r3, r2, r3
 801ea38:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801ea3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ea40:	2b00      	cmp	r3, #0
 801ea42:	d004      	beq.n	801ea4e <ip4_frag+0x1b6>
        poff = 0;
 801ea44:	2300      	movs	r3, #0
 801ea46:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801ea48:	68fb      	ldr	r3, [r7, #12]
 801ea4a:	681b      	ldr	r3, [r3, #0]
 801ea4c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801ea4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ea52:	2b00      	cmp	r3, #0
 801ea54:	d196      	bne.n	801e984 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801ea56:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ea58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ea5c:	4413      	add	r3, r2
 801ea5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ea60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ea64:	68bb      	ldr	r3, [r7, #8]
 801ea66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ea68:	3b14      	subs	r3, #20
 801ea6a:	429a      	cmp	r2, r3
 801ea6c:	bfd4      	ite	le
 801ea6e:	2301      	movle	r3, #1
 801ea70:	2300      	movgt	r3, #0
 801ea72:	b2db      	uxtb	r3, r3
 801ea74:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ea76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ea7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ea7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801ea80:	6a3b      	ldr	r3, [r7, #32]
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	d002      	beq.n	801ea8c <ip4_frag+0x1f4>
 801ea86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ea88:	2b00      	cmp	r3, #0
 801ea8a:	d003      	beq.n	801ea94 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801ea8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ea8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801ea92:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ea94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ea96:	4618      	mov	r0, r3
 801ea98:	f7f5 fc50 	bl	801433c <lwip_htons>
 801ea9c:	4603      	mov	r3, r0
 801ea9e:	461a      	mov	r2, r3
 801eaa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eaa2:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801eaa4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801eaa6:	3314      	adds	r3, #20
 801eaa8:	b29b      	uxth	r3, r3
 801eaaa:	4618      	mov	r0, r3
 801eaac:	f7f5 fc46 	bl	801433c <lwip_htons>
 801eab0:	4603      	mov	r3, r0
 801eab2:	461a      	mov	r2, r3
 801eab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eab6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801eab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eaba:	2200      	movs	r2, #0
 801eabc:	729a      	strb	r2, [r3, #10]
 801eabe:	2200      	movs	r2, #0
 801eac0:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801eac2:	68bb      	ldr	r3, [r7, #8]
 801eac4:	695b      	ldr	r3, [r3, #20]
 801eac6:	687a      	ldr	r2, [r7, #4]
 801eac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801eaca:	68b8      	ldr	r0, [r7, #8]
 801eacc:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801eace:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ead0:	f7f7 f812 	bl	8015af8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801ead4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ead8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801eada:	1ad3      	subs	r3, r2, r3
 801eadc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801eae0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801eae4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801eae6:	4413      	add	r3, r2
 801eae8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801eaec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801eaf0:	2b00      	cmp	r3, #0
 801eaf2:	f47f af1a 	bne.w	801e92a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801eaf6:	2300      	movs	r3, #0
 801eaf8:	e002      	b.n	801eb00 <ip4_frag+0x268>
      goto memerr;
 801eafa:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801eafc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801eb00:	4618      	mov	r0, r3
 801eb02:	3748      	adds	r7, #72	; 0x48
 801eb04:	46bd      	mov	sp, r7
 801eb06:	bd80      	pop	{r7, pc}
 801eb08:	080228d4 	.word	0x080228d4
 801eb0c:	08022ab0 	.word	0x08022ab0
 801eb10:	0802291c 	.word	0x0802291c
 801eb14:	08022acc 	.word	0x08022acc
 801eb18:	08022aec 	.word	0x08022aec
 801eb1c:	0801e831 	.word	0x0801e831

0801eb20 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801eb20:	b580      	push	{r7, lr}
 801eb22:	b086      	sub	sp, #24
 801eb24:	af00      	add	r7, sp, #0
 801eb26:	6078      	str	r0, [r7, #4]
 801eb28:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801eb2a:	230e      	movs	r3, #14
 801eb2c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801eb2e:	687b      	ldr	r3, [r7, #4]
 801eb30:	895b      	ldrh	r3, [r3, #10]
 801eb32:	2b0e      	cmp	r3, #14
 801eb34:	d96e      	bls.n	801ec14 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801eb36:	687b      	ldr	r3, [r7, #4]
 801eb38:	7bdb      	ldrb	r3, [r3, #15]
 801eb3a:	2b00      	cmp	r3, #0
 801eb3c:	d106      	bne.n	801eb4c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801eb3e:	683b      	ldr	r3, [r7, #0]
 801eb40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801eb44:	3301      	adds	r3, #1
 801eb46:	b2da      	uxtb	r2, r3
 801eb48:	687b      	ldr	r3, [r7, #4]
 801eb4a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801eb4c:	687b      	ldr	r3, [r7, #4]
 801eb4e:	685b      	ldr	r3, [r3, #4]
 801eb50:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801eb52:	693b      	ldr	r3, [r7, #16]
 801eb54:	7b1a      	ldrb	r2, [r3, #12]
 801eb56:	7b5b      	ldrb	r3, [r3, #13]
 801eb58:	021b      	lsls	r3, r3, #8
 801eb5a:	4313      	orrs	r3, r2
 801eb5c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801eb5e:	693b      	ldr	r3, [r7, #16]
 801eb60:	781b      	ldrb	r3, [r3, #0]
 801eb62:	f003 0301 	and.w	r3, r3, #1
 801eb66:	2b00      	cmp	r3, #0
 801eb68:	d023      	beq.n	801ebb2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801eb6a:	693b      	ldr	r3, [r7, #16]
 801eb6c:	781b      	ldrb	r3, [r3, #0]
 801eb6e:	2b01      	cmp	r3, #1
 801eb70:	d10f      	bne.n	801eb92 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801eb72:	693b      	ldr	r3, [r7, #16]
 801eb74:	785b      	ldrb	r3, [r3, #1]
 801eb76:	2b00      	cmp	r3, #0
 801eb78:	d11b      	bne.n	801ebb2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801eb7a:	693b      	ldr	r3, [r7, #16]
 801eb7c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801eb7e:	2b5e      	cmp	r3, #94	; 0x5e
 801eb80:	d117      	bne.n	801ebb2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801eb82:	687b      	ldr	r3, [r7, #4]
 801eb84:	7b5b      	ldrb	r3, [r3, #13]
 801eb86:	f043 0310 	orr.w	r3, r3, #16
 801eb8a:	b2da      	uxtb	r2, r3
 801eb8c:	687b      	ldr	r3, [r7, #4]
 801eb8e:	735a      	strb	r2, [r3, #13]
 801eb90:	e00f      	b.n	801ebb2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801eb92:	693b      	ldr	r3, [r7, #16]
 801eb94:	2206      	movs	r2, #6
 801eb96:	4928      	ldr	r1, [pc, #160]	; (801ec38 <ethernet_input+0x118>)
 801eb98:	4618      	mov	r0, r3
 801eb9a:	f000 f9d1 	bl	801ef40 <memcmp>
 801eb9e:	4603      	mov	r3, r0
 801eba0:	2b00      	cmp	r3, #0
 801eba2:	d106      	bne.n	801ebb2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801eba4:	687b      	ldr	r3, [r7, #4]
 801eba6:	7b5b      	ldrb	r3, [r3, #13]
 801eba8:	f043 0308 	orr.w	r3, r3, #8
 801ebac:	b2da      	uxtb	r2, r3
 801ebae:	687b      	ldr	r3, [r7, #4]
 801ebb0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801ebb2:	89fb      	ldrh	r3, [r7, #14]
 801ebb4:	2b08      	cmp	r3, #8
 801ebb6:	d003      	beq.n	801ebc0 <ethernet_input+0xa0>
 801ebb8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801ebbc:	d014      	beq.n	801ebe8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801ebbe:	e032      	b.n	801ec26 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ebc0:	683b      	ldr	r3, [r7, #0]
 801ebc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ebc6:	f003 0308 	and.w	r3, r3, #8
 801ebca:	2b00      	cmp	r3, #0
 801ebcc:	d024      	beq.n	801ec18 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801ebce:	8afb      	ldrh	r3, [r7, #22]
 801ebd0:	4619      	mov	r1, r3
 801ebd2:	6878      	ldr	r0, [r7, #4]
 801ebd4:	f7f6 ff0a 	bl	80159ec <pbuf_remove_header>
 801ebd8:	4603      	mov	r3, r0
 801ebda:	2b00      	cmp	r3, #0
 801ebdc:	d11e      	bne.n	801ec1c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801ebde:	6839      	ldr	r1, [r7, #0]
 801ebe0:	6878      	ldr	r0, [r7, #4]
 801ebe2:	f7fe ff2d 	bl	801da40 <ip4_input>
      break;
 801ebe6:	e013      	b.n	801ec10 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ebe8:	683b      	ldr	r3, [r7, #0]
 801ebea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ebee:	f003 0308 	and.w	r3, r3, #8
 801ebf2:	2b00      	cmp	r3, #0
 801ebf4:	d014      	beq.n	801ec20 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801ebf6:	8afb      	ldrh	r3, [r7, #22]
 801ebf8:	4619      	mov	r1, r3
 801ebfa:	6878      	ldr	r0, [r7, #4]
 801ebfc:	f7f6 fef6 	bl	80159ec <pbuf_remove_header>
 801ec00:	4603      	mov	r3, r0
 801ec02:	2b00      	cmp	r3, #0
 801ec04:	d10e      	bne.n	801ec24 <ethernet_input+0x104>
        etharp_input(p, netif);
 801ec06:	6839      	ldr	r1, [r7, #0]
 801ec08:	6878      	ldr	r0, [r7, #4]
 801ec0a:	f7fe f8cd 	bl	801cda8 <etharp_input>
      break;
 801ec0e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801ec10:	2300      	movs	r3, #0
 801ec12:	e00c      	b.n	801ec2e <ethernet_input+0x10e>
    goto free_and_return;
 801ec14:	bf00      	nop
 801ec16:	e006      	b.n	801ec26 <ethernet_input+0x106>
        goto free_and_return;
 801ec18:	bf00      	nop
 801ec1a:	e004      	b.n	801ec26 <ethernet_input+0x106>
        goto free_and_return;
 801ec1c:	bf00      	nop
 801ec1e:	e002      	b.n	801ec26 <ethernet_input+0x106>
        goto free_and_return;
 801ec20:	bf00      	nop
 801ec22:	e000      	b.n	801ec26 <ethernet_input+0x106>
        goto free_and_return;
 801ec24:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801ec26:	6878      	ldr	r0, [r7, #4]
 801ec28:	f7f6 ff66 	bl	8015af8 <pbuf_free>
  return ERR_OK;
 801ec2c:	2300      	movs	r3, #0
}
 801ec2e:	4618      	mov	r0, r3
 801ec30:	3718      	adds	r7, #24
 801ec32:	46bd      	mov	sp, r7
 801ec34:	bd80      	pop	{r7, pc}
 801ec36:	bf00      	nop
 801ec38:	08033804 	.word	0x08033804

0801ec3c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ec3c:	b580      	push	{r7, lr}
 801ec3e:	b086      	sub	sp, #24
 801ec40:	af00      	add	r7, sp, #0
 801ec42:	60f8      	str	r0, [r7, #12]
 801ec44:	60b9      	str	r1, [r7, #8]
 801ec46:	607a      	str	r2, [r7, #4]
 801ec48:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801ec4a:	8c3b      	ldrh	r3, [r7, #32]
 801ec4c:	4618      	mov	r0, r3
 801ec4e:	f7f5 fb75 	bl	801433c <lwip_htons>
 801ec52:	4603      	mov	r3, r0
 801ec54:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ec56:	210e      	movs	r1, #14
 801ec58:	68b8      	ldr	r0, [r7, #8]
 801ec5a:	f7f6 feb7 	bl	80159cc <pbuf_add_header>
 801ec5e:	4603      	mov	r3, r0
 801ec60:	2b00      	cmp	r3, #0
 801ec62:	d125      	bne.n	801ecb0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ec64:	68bb      	ldr	r3, [r7, #8]
 801ec66:	685b      	ldr	r3, [r3, #4]
 801ec68:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ec6a:	693b      	ldr	r3, [r7, #16]
 801ec6c:	8afa      	ldrh	r2, [r7, #22]
 801ec6e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ec70:	693b      	ldr	r3, [r7, #16]
 801ec72:	2206      	movs	r2, #6
 801ec74:	6839      	ldr	r1, [r7, #0]
 801ec76:	4618      	mov	r0, r3
 801ec78:	f000 f971 	bl	801ef5e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ec7c:	693b      	ldr	r3, [r7, #16]
 801ec7e:	3306      	adds	r3, #6
 801ec80:	2206      	movs	r2, #6
 801ec82:	6879      	ldr	r1, [r7, #4]
 801ec84:	4618      	mov	r0, r3
 801ec86:	f000 f96a 	bl	801ef5e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ec8a:	68fb      	ldr	r3, [r7, #12]
 801ec8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801ec90:	2b06      	cmp	r3, #6
 801ec92:	d006      	beq.n	801eca2 <ethernet_output+0x66>
 801ec94:	4b0a      	ldr	r3, [pc, #40]	; (801ecc0 <ethernet_output+0x84>)
 801ec96:	f240 1233 	movw	r2, #307	; 0x133
 801ec9a:	490a      	ldr	r1, [pc, #40]	; (801ecc4 <ethernet_output+0x88>)
 801ec9c:	480a      	ldr	r0, [pc, #40]	; (801ecc8 <ethernet_output+0x8c>)
 801ec9e:	f000 f971 	bl	801ef84 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801eca2:	68fb      	ldr	r3, [r7, #12]
 801eca4:	699b      	ldr	r3, [r3, #24]
 801eca6:	68b9      	ldr	r1, [r7, #8]
 801eca8:	68f8      	ldr	r0, [r7, #12]
 801ecaa:	4798      	blx	r3
 801ecac:	4603      	mov	r3, r0
 801ecae:	e002      	b.n	801ecb6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801ecb0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801ecb2:	f06f 0301 	mvn.w	r3, #1
}
 801ecb6:	4618      	mov	r0, r3
 801ecb8:	3718      	adds	r7, #24
 801ecba:	46bd      	mov	sp, r7
 801ecbc:	bd80      	pop	{r7, pc}
 801ecbe:	bf00      	nop
 801ecc0:	08022afc 	.word	0x08022afc
 801ecc4:	08022b34 	.word	0x08022b34
 801ecc8:	08022b68 	.word	0x08022b68

0801eccc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801eccc:	b580      	push	{r7, lr}
 801ecce:	b086      	sub	sp, #24
 801ecd0:	af00      	add	r7, sp, #0
 801ecd2:	6078      	str	r0, [r7, #4]
 801ecd4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801ecd6:	683b      	ldr	r3, [r7, #0]
 801ecd8:	60bb      	str	r3, [r7, #8]
 801ecda:	2304      	movs	r3, #4
 801ecdc:	60fb      	str	r3, [r7, #12]
 801ecde:	2300      	movs	r3, #0
 801ece0:	613b      	str	r3, [r7, #16]
 801ece2:	2300      	movs	r3, #0
 801ece4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801ece6:	f107 0308 	add.w	r3, r7, #8
 801ecea:	2100      	movs	r1, #0
 801ecec:	4618      	mov	r0, r3
 801ecee:	f7f1 fe3d 	bl	801096c <osMessageCreate>
 801ecf2:	4602      	mov	r2, r0
 801ecf4:	687b      	ldr	r3, [r7, #4]
 801ecf6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ecf8:	687b      	ldr	r3, [r7, #4]
 801ecfa:	681b      	ldr	r3, [r3, #0]
 801ecfc:	2b00      	cmp	r3, #0
 801ecfe:	d102      	bne.n	801ed06 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801ed00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ed04:	e000      	b.n	801ed08 <sys_mbox_new+0x3c>

  return ERR_OK;
 801ed06:	2300      	movs	r3, #0
}
 801ed08:	4618      	mov	r0, r3
 801ed0a:	3718      	adds	r7, #24
 801ed0c:	46bd      	mov	sp, r7
 801ed0e:	bd80      	pop	{r7, pc}

0801ed10 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ed10:	b580      	push	{r7, lr}
 801ed12:	b084      	sub	sp, #16
 801ed14:	af00      	add	r7, sp, #0
 801ed16:	6078      	str	r0, [r7, #4]
 801ed18:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801ed1a:	687b      	ldr	r3, [r7, #4]
 801ed1c:	681b      	ldr	r3, [r3, #0]
 801ed1e:	6839      	ldr	r1, [r7, #0]
 801ed20:	2200      	movs	r2, #0
 801ed22:	4618      	mov	r0, r3
 801ed24:	f7f1 fe4c 	bl	80109c0 <osMessagePut>
 801ed28:	4603      	mov	r3, r0
 801ed2a:	2b00      	cmp	r3, #0
 801ed2c:	d102      	bne.n	801ed34 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801ed2e:	2300      	movs	r3, #0
 801ed30:	73fb      	strb	r3, [r7, #15]
 801ed32:	e001      	b.n	801ed38 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ed34:	23ff      	movs	r3, #255	; 0xff
 801ed36:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801ed38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ed3c:	4618      	mov	r0, r3
 801ed3e:	3710      	adds	r7, #16
 801ed40:	46bd      	mov	sp, r7
 801ed42:	bd80      	pop	{r7, pc}

0801ed44 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ed44:	b580      	push	{r7, lr}
 801ed46:	b08c      	sub	sp, #48	; 0x30
 801ed48:	af00      	add	r7, sp, #0
 801ed4a:	61f8      	str	r0, [r7, #28]
 801ed4c:	61b9      	str	r1, [r7, #24]
 801ed4e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801ed50:	f7f1 fc47 	bl	80105e2 <osKernelSysTick>
 801ed54:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801ed56:	697b      	ldr	r3, [r7, #20]
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	d017      	beq.n	801ed8c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801ed5c:	69fb      	ldr	r3, [r7, #28]
 801ed5e:	6819      	ldr	r1, [r3, #0]
 801ed60:	f107 0320 	add.w	r3, r7, #32
 801ed64:	697a      	ldr	r2, [r7, #20]
 801ed66:	4618      	mov	r0, r3
 801ed68:	f7f1 fe6a 	bl	8010a40 <osMessageGet>

    if(event.status == osEventMessage)
 801ed6c:	6a3b      	ldr	r3, [r7, #32]
 801ed6e:	2b10      	cmp	r3, #16
 801ed70:	d109      	bne.n	801ed86 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801ed72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed74:	461a      	mov	r2, r3
 801ed76:	69bb      	ldr	r3, [r7, #24]
 801ed78:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801ed7a:	f7f1 fc32 	bl	80105e2 <osKernelSysTick>
 801ed7e:	4602      	mov	r2, r0
 801ed80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed82:	1ad3      	subs	r3, r2, r3
 801ed84:	e019      	b.n	801edba <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ed86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ed8a:	e016      	b.n	801edba <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801ed8c:	69fb      	ldr	r3, [r7, #28]
 801ed8e:	6819      	ldr	r1, [r3, #0]
 801ed90:	463b      	mov	r3, r7
 801ed92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ed96:	4618      	mov	r0, r3
 801ed98:	f7f1 fe52 	bl	8010a40 <osMessageGet>
 801ed9c:	f107 0320 	add.w	r3, r7, #32
 801eda0:	463a      	mov	r2, r7
 801eda2:	ca07      	ldmia	r2, {r0, r1, r2}
 801eda4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801eda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801edaa:	461a      	mov	r2, r3
 801edac:	69bb      	ldr	r3, [r7, #24]
 801edae:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801edb0:	f7f1 fc17 	bl	80105e2 <osKernelSysTick>
 801edb4:	4602      	mov	r2, r0
 801edb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801edb8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801edba:	4618      	mov	r0, r3
 801edbc:	3730      	adds	r7, #48	; 0x30
 801edbe:	46bd      	mov	sp, r7
 801edc0:	bd80      	pop	{r7, pc}

0801edc2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801edc2:	b480      	push	{r7}
 801edc4:	b083      	sub	sp, #12
 801edc6:	af00      	add	r7, sp, #0
 801edc8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801edca:	687b      	ldr	r3, [r7, #4]
 801edcc:	681b      	ldr	r3, [r3, #0]
 801edce:	2b00      	cmp	r3, #0
 801edd0:	d101      	bne.n	801edd6 <sys_mbox_valid+0x14>
    return 0;
 801edd2:	2300      	movs	r3, #0
 801edd4:	e000      	b.n	801edd8 <sys_mbox_valid+0x16>
  else
    return 1;
 801edd6:	2301      	movs	r3, #1
}
 801edd8:	4618      	mov	r0, r3
 801edda:	370c      	adds	r7, #12
 801eddc:	46bd      	mov	sp, r7
 801edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ede2:	4770      	bx	lr

0801ede4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801ede4:	b580      	push	{r7, lr}
 801ede6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801ede8:	4803      	ldr	r0, [pc, #12]	; (801edf8 <sys_init+0x14>)
 801edea:	f7f1 fc6a 	bl	80106c2 <osMutexCreate>
 801edee:	4602      	mov	r2, r0
 801edf0:	4b02      	ldr	r3, [pc, #8]	; (801edfc <sys_init+0x18>)
 801edf2:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801edf4:	bf00      	nop
 801edf6:	bd80      	pop	{r7, pc}
 801edf8:	08033814 	.word	0x08033814
 801edfc:	20013d4c 	.word	0x20013d4c

0801ee00 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801ee00:	b580      	push	{r7, lr}
 801ee02:	b084      	sub	sp, #16
 801ee04:	af00      	add	r7, sp, #0
 801ee06:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801ee08:	2300      	movs	r3, #0
 801ee0a:	60bb      	str	r3, [r7, #8]
 801ee0c:	2300      	movs	r3, #0
 801ee0e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801ee10:	f107 0308 	add.w	r3, r7, #8
 801ee14:	4618      	mov	r0, r3
 801ee16:	f7f1 fc54 	bl	80106c2 <osMutexCreate>
 801ee1a:	4602      	mov	r2, r0
 801ee1c:	687b      	ldr	r3, [r7, #4]
 801ee1e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801ee20:	687b      	ldr	r3, [r7, #4]
 801ee22:	681b      	ldr	r3, [r3, #0]
 801ee24:	2b00      	cmp	r3, #0
 801ee26:	d102      	bne.n	801ee2e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801ee28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ee2c:	e000      	b.n	801ee30 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801ee2e:	2300      	movs	r3, #0
}
 801ee30:	4618      	mov	r0, r3
 801ee32:	3710      	adds	r7, #16
 801ee34:	46bd      	mov	sp, r7
 801ee36:	bd80      	pop	{r7, pc}

0801ee38 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801ee38:	b580      	push	{r7, lr}
 801ee3a:	b082      	sub	sp, #8
 801ee3c:	af00      	add	r7, sp, #0
 801ee3e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801ee40:	687b      	ldr	r3, [r7, #4]
 801ee42:	681b      	ldr	r3, [r3, #0]
 801ee44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801ee48:	4618      	mov	r0, r3
 801ee4a:	f7f1 fc53 	bl	80106f4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801ee4e:	bf00      	nop
 801ee50:	3708      	adds	r7, #8
 801ee52:	46bd      	mov	sp, r7
 801ee54:	bd80      	pop	{r7, pc}

0801ee56 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801ee56:	b580      	push	{r7, lr}
 801ee58:	b082      	sub	sp, #8
 801ee5a:	af00      	add	r7, sp, #0
 801ee5c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801ee5e:	687b      	ldr	r3, [r7, #4]
 801ee60:	681b      	ldr	r3, [r3, #0]
 801ee62:	4618      	mov	r0, r3
 801ee64:	f7f1 fc94 	bl	8010790 <osMutexRelease>
}
 801ee68:	bf00      	nop
 801ee6a:	3708      	adds	r7, #8
 801ee6c:	46bd      	mov	sp, r7
 801ee6e:	bd80      	pop	{r7, pc}

0801ee70 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801ee70:	b580      	push	{r7, lr}
 801ee72:	b08c      	sub	sp, #48	; 0x30
 801ee74:	af00      	add	r7, sp, #0
 801ee76:	60f8      	str	r0, [r7, #12]
 801ee78:	60b9      	str	r1, [r7, #8]
 801ee7a:	607a      	str	r2, [r7, #4]
 801ee7c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801ee7e:	f107 0314 	add.w	r3, r7, #20
 801ee82:	2200      	movs	r2, #0
 801ee84:	601a      	str	r2, [r3, #0]
 801ee86:	605a      	str	r2, [r3, #4]
 801ee88:	609a      	str	r2, [r3, #8]
 801ee8a:	60da      	str	r2, [r3, #12]
 801ee8c:	611a      	str	r2, [r3, #16]
 801ee8e:	615a      	str	r2, [r3, #20]
 801ee90:	619a      	str	r2, [r3, #24]
 801ee92:	68fb      	ldr	r3, [r7, #12]
 801ee94:	617b      	str	r3, [r7, #20]
 801ee96:	68bb      	ldr	r3, [r7, #8]
 801ee98:	61bb      	str	r3, [r7, #24]
 801ee9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ee9c:	b21b      	sxth	r3, r3
 801ee9e:	83bb      	strh	r3, [r7, #28]
 801eea0:	683b      	ldr	r3, [r7, #0]
 801eea2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801eea4:	f107 0314 	add.w	r3, r7, #20
 801eea8:	6879      	ldr	r1, [r7, #4]
 801eeaa:	4618      	mov	r0, r3
 801eeac:	f7f1 fba9 	bl	8010602 <osThreadCreate>
 801eeb0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801eeb2:	4618      	mov	r0, r3
 801eeb4:	3730      	adds	r7, #48	; 0x30
 801eeb6:	46bd      	mov	sp, r7
 801eeb8:	bd80      	pop	{r7, pc}
	...

0801eebc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801eebc:	b580      	push	{r7, lr}
 801eebe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801eec0:	4b04      	ldr	r3, [pc, #16]	; (801eed4 <sys_arch_protect+0x18>)
 801eec2:	681b      	ldr	r3, [r3, #0]
 801eec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801eec8:	4618      	mov	r0, r3
 801eeca:	f7f1 fc13 	bl	80106f4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801eece:	2301      	movs	r3, #1
}
 801eed0:	4618      	mov	r0, r3
 801eed2:	bd80      	pop	{r7, pc}
 801eed4:	20013d4c 	.word	0x20013d4c

0801eed8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801eed8:	b580      	push	{r7, lr}
 801eeda:	b082      	sub	sp, #8
 801eedc:	af00      	add	r7, sp, #0
 801eede:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801eee0:	4b04      	ldr	r3, [pc, #16]	; (801eef4 <sys_arch_unprotect+0x1c>)
 801eee2:	681b      	ldr	r3, [r3, #0]
 801eee4:	4618      	mov	r0, r3
 801eee6:	f7f1 fc53 	bl	8010790 <osMutexRelease>
}
 801eeea:	bf00      	nop
 801eeec:	3708      	adds	r7, #8
 801eeee:	46bd      	mov	sp, r7
 801eef0:	bd80      	pop	{r7, pc}
 801eef2:	bf00      	nop
 801eef4:	20013d4c 	.word	0x20013d4c

0801eef8 <__libc_init_array>:
 801eef8:	b570      	push	{r4, r5, r6, lr}
 801eefa:	4e0d      	ldr	r6, [pc, #52]	; (801ef30 <__libc_init_array+0x38>)
 801eefc:	4c0d      	ldr	r4, [pc, #52]	; (801ef34 <__libc_init_array+0x3c>)
 801eefe:	1ba4      	subs	r4, r4, r6
 801ef00:	10a4      	asrs	r4, r4, #2
 801ef02:	2500      	movs	r5, #0
 801ef04:	42a5      	cmp	r5, r4
 801ef06:	d109      	bne.n	801ef1c <__libc_init_array+0x24>
 801ef08:	4e0b      	ldr	r6, [pc, #44]	; (801ef38 <__libc_init_array+0x40>)
 801ef0a:	4c0c      	ldr	r4, [pc, #48]	; (801ef3c <__libc_init_array+0x44>)
 801ef0c:	f000 ff7a 	bl	801fe04 <_init>
 801ef10:	1ba4      	subs	r4, r4, r6
 801ef12:	10a4      	asrs	r4, r4, #2
 801ef14:	2500      	movs	r5, #0
 801ef16:	42a5      	cmp	r5, r4
 801ef18:	d105      	bne.n	801ef26 <__libc_init_array+0x2e>
 801ef1a:	bd70      	pop	{r4, r5, r6, pc}
 801ef1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ef20:	4798      	blx	r3
 801ef22:	3501      	adds	r5, #1
 801ef24:	e7ee      	b.n	801ef04 <__libc_init_array+0xc>
 801ef26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ef2a:	4798      	blx	r3
 801ef2c:	3501      	adds	r5, #1
 801ef2e:	e7f2      	b.n	801ef16 <__libc_init_array+0x1e>
 801ef30:	080338bc 	.word	0x080338bc
 801ef34:	080338bc 	.word	0x080338bc
 801ef38:	080338bc 	.word	0x080338bc
 801ef3c:	080338c0 	.word	0x080338c0

0801ef40 <memcmp>:
 801ef40:	b530      	push	{r4, r5, lr}
 801ef42:	2400      	movs	r4, #0
 801ef44:	42a2      	cmp	r2, r4
 801ef46:	d101      	bne.n	801ef4c <memcmp+0xc>
 801ef48:	2000      	movs	r0, #0
 801ef4a:	e007      	b.n	801ef5c <memcmp+0x1c>
 801ef4c:	5d03      	ldrb	r3, [r0, r4]
 801ef4e:	3401      	adds	r4, #1
 801ef50:	190d      	adds	r5, r1, r4
 801ef52:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801ef56:	42ab      	cmp	r3, r5
 801ef58:	d0f4      	beq.n	801ef44 <memcmp+0x4>
 801ef5a:	1b58      	subs	r0, r3, r5
 801ef5c:	bd30      	pop	{r4, r5, pc}

0801ef5e <memcpy>:
 801ef5e:	b510      	push	{r4, lr}
 801ef60:	1e43      	subs	r3, r0, #1
 801ef62:	440a      	add	r2, r1
 801ef64:	4291      	cmp	r1, r2
 801ef66:	d100      	bne.n	801ef6a <memcpy+0xc>
 801ef68:	bd10      	pop	{r4, pc}
 801ef6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ef6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ef72:	e7f7      	b.n	801ef64 <memcpy+0x6>

0801ef74 <memset>:
 801ef74:	4402      	add	r2, r0
 801ef76:	4603      	mov	r3, r0
 801ef78:	4293      	cmp	r3, r2
 801ef7a:	d100      	bne.n	801ef7e <memset+0xa>
 801ef7c:	4770      	bx	lr
 801ef7e:	f803 1b01 	strb.w	r1, [r3], #1
 801ef82:	e7f9      	b.n	801ef78 <memset+0x4>

0801ef84 <iprintf>:
 801ef84:	b40f      	push	{r0, r1, r2, r3}
 801ef86:	4b0a      	ldr	r3, [pc, #40]	; (801efb0 <iprintf+0x2c>)
 801ef88:	b513      	push	{r0, r1, r4, lr}
 801ef8a:	681c      	ldr	r4, [r3, #0]
 801ef8c:	b124      	cbz	r4, 801ef98 <iprintf+0x14>
 801ef8e:	69a3      	ldr	r3, [r4, #24]
 801ef90:	b913      	cbnz	r3, 801ef98 <iprintf+0x14>
 801ef92:	4620      	mov	r0, r4
 801ef94:	f000 f8a2 	bl	801f0dc <__sinit>
 801ef98:	ab05      	add	r3, sp, #20
 801ef9a:	9a04      	ldr	r2, [sp, #16]
 801ef9c:	68a1      	ldr	r1, [r4, #8]
 801ef9e:	9301      	str	r3, [sp, #4]
 801efa0:	4620      	mov	r0, r4
 801efa2:	f000 f9ff 	bl	801f3a4 <_vfiprintf_r>
 801efa6:	b002      	add	sp, #8
 801efa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801efac:	b004      	add	sp, #16
 801efae:	4770      	bx	lr
 801efb0:	2000005c 	.word	0x2000005c

0801efb4 <rand>:
 801efb4:	b538      	push	{r3, r4, r5, lr}
 801efb6:	4b13      	ldr	r3, [pc, #76]	; (801f004 <rand+0x50>)
 801efb8:	681c      	ldr	r4, [r3, #0]
 801efba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801efbc:	b97b      	cbnz	r3, 801efde <rand+0x2a>
 801efbe:	2018      	movs	r0, #24
 801efc0:	f000 f916 	bl	801f1f0 <malloc>
 801efc4:	4a10      	ldr	r2, [pc, #64]	; (801f008 <rand+0x54>)
 801efc6:	4b11      	ldr	r3, [pc, #68]	; (801f00c <rand+0x58>)
 801efc8:	63a0      	str	r0, [r4, #56]	; 0x38
 801efca:	e9c0 2300 	strd	r2, r3, [r0]
 801efce:	4b10      	ldr	r3, [pc, #64]	; (801f010 <rand+0x5c>)
 801efd0:	6083      	str	r3, [r0, #8]
 801efd2:	230b      	movs	r3, #11
 801efd4:	8183      	strh	r3, [r0, #12]
 801efd6:	2201      	movs	r2, #1
 801efd8:	2300      	movs	r3, #0
 801efda:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801efde:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801efe0:	480c      	ldr	r0, [pc, #48]	; (801f014 <rand+0x60>)
 801efe2:	690a      	ldr	r2, [r1, #16]
 801efe4:	694b      	ldr	r3, [r1, #20]
 801efe6:	4c0c      	ldr	r4, [pc, #48]	; (801f018 <rand+0x64>)
 801efe8:	4350      	muls	r0, r2
 801efea:	fb04 0003 	mla	r0, r4, r3, r0
 801efee:	fba2 2304 	umull	r2, r3, r2, r4
 801eff2:	4403      	add	r3, r0
 801eff4:	1c54      	adds	r4, r2, #1
 801eff6:	f143 0500 	adc.w	r5, r3, #0
 801effa:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801effe:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801f002:	bd38      	pop	{r3, r4, r5, pc}
 801f004:	2000005c 	.word	0x2000005c
 801f008:	abcd330e 	.word	0xabcd330e
 801f00c:	e66d1234 	.word	0xe66d1234
 801f010:	0005deec 	.word	0x0005deec
 801f014:	5851f42d 	.word	0x5851f42d
 801f018:	4c957f2d 	.word	0x4c957f2d

0801f01c <strchr>:
 801f01c:	b2c9      	uxtb	r1, r1
 801f01e:	4603      	mov	r3, r0
 801f020:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f024:	b11a      	cbz	r2, 801f02e <strchr+0x12>
 801f026:	428a      	cmp	r2, r1
 801f028:	d1f9      	bne.n	801f01e <strchr+0x2>
 801f02a:	4618      	mov	r0, r3
 801f02c:	4770      	bx	lr
 801f02e:	2900      	cmp	r1, #0
 801f030:	bf18      	it	ne
 801f032:	2300      	movne	r3, #0
 801f034:	e7f9      	b.n	801f02a <strchr+0xe>

0801f036 <strncmp>:
 801f036:	b510      	push	{r4, lr}
 801f038:	b16a      	cbz	r2, 801f056 <strncmp+0x20>
 801f03a:	3901      	subs	r1, #1
 801f03c:	1884      	adds	r4, r0, r2
 801f03e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f042:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f046:	4293      	cmp	r3, r2
 801f048:	d103      	bne.n	801f052 <strncmp+0x1c>
 801f04a:	42a0      	cmp	r0, r4
 801f04c:	d001      	beq.n	801f052 <strncmp+0x1c>
 801f04e:	2b00      	cmp	r3, #0
 801f050:	d1f5      	bne.n	801f03e <strncmp+0x8>
 801f052:	1a98      	subs	r0, r3, r2
 801f054:	bd10      	pop	{r4, pc}
 801f056:	4610      	mov	r0, r2
 801f058:	e7fc      	b.n	801f054 <strncmp+0x1e>
	...

0801f05c <std>:
 801f05c:	2300      	movs	r3, #0
 801f05e:	b510      	push	{r4, lr}
 801f060:	4604      	mov	r4, r0
 801f062:	e9c0 3300 	strd	r3, r3, [r0]
 801f066:	6083      	str	r3, [r0, #8]
 801f068:	8181      	strh	r1, [r0, #12]
 801f06a:	6643      	str	r3, [r0, #100]	; 0x64
 801f06c:	81c2      	strh	r2, [r0, #14]
 801f06e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f072:	6183      	str	r3, [r0, #24]
 801f074:	4619      	mov	r1, r3
 801f076:	2208      	movs	r2, #8
 801f078:	305c      	adds	r0, #92	; 0x5c
 801f07a:	f7ff ff7b 	bl	801ef74 <memset>
 801f07e:	4b05      	ldr	r3, [pc, #20]	; (801f094 <std+0x38>)
 801f080:	6263      	str	r3, [r4, #36]	; 0x24
 801f082:	4b05      	ldr	r3, [pc, #20]	; (801f098 <std+0x3c>)
 801f084:	62a3      	str	r3, [r4, #40]	; 0x28
 801f086:	4b05      	ldr	r3, [pc, #20]	; (801f09c <std+0x40>)
 801f088:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f08a:	4b05      	ldr	r3, [pc, #20]	; (801f0a0 <std+0x44>)
 801f08c:	6224      	str	r4, [r4, #32]
 801f08e:	6323      	str	r3, [r4, #48]	; 0x30
 801f090:	bd10      	pop	{r4, pc}
 801f092:	bf00      	nop
 801f094:	0801f901 	.word	0x0801f901
 801f098:	0801f923 	.word	0x0801f923
 801f09c:	0801f95b 	.word	0x0801f95b
 801f0a0:	0801f97f 	.word	0x0801f97f

0801f0a4 <_cleanup_r>:
 801f0a4:	4901      	ldr	r1, [pc, #4]	; (801f0ac <_cleanup_r+0x8>)
 801f0a6:	f000 b885 	b.w	801f1b4 <_fwalk_reent>
 801f0aa:	bf00      	nop
 801f0ac:	0801fc59 	.word	0x0801fc59

0801f0b0 <__sfmoreglue>:
 801f0b0:	b570      	push	{r4, r5, r6, lr}
 801f0b2:	1e4a      	subs	r2, r1, #1
 801f0b4:	2568      	movs	r5, #104	; 0x68
 801f0b6:	4355      	muls	r5, r2
 801f0b8:	460e      	mov	r6, r1
 801f0ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f0be:	f000 f8ed 	bl	801f29c <_malloc_r>
 801f0c2:	4604      	mov	r4, r0
 801f0c4:	b140      	cbz	r0, 801f0d8 <__sfmoreglue+0x28>
 801f0c6:	2100      	movs	r1, #0
 801f0c8:	e9c0 1600 	strd	r1, r6, [r0]
 801f0cc:	300c      	adds	r0, #12
 801f0ce:	60a0      	str	r0, [r4, #8]
 801f0d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f0d4:	f7ff ff4e 	bl	801ef74 <memset>
 801f0d8:	4620      	mov	r0, r4
 801f0da:	bd70      	pop	{r4, r5, r6, pc}

0801f0dc <__sinit>:
 801f0dc:	6983      	ldr	r3, [r0, #24]
 801f0de:	b510      	push	{r4, lr}
 801f0e0:	4604      	mov	r4, r0
 801f0e2:	bb33      	cbnz	r3, 801f132 <__sinit+0x56>
 801f0e4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801f0e8:	6503      	str	r3, [r0, #80]	; 0x50
 801f0ea:	4b12      	ldr	r3, [pc, #72]	; (801f134 <__sinit+0x58>)
 801f0ec:	4a12      	ldr	r2, [pc, #72]	; (801f138 <__sinit+0x5c>)
 801f0ee:	681b      	ldr	r3, [r3, #0]
 801f0f0:	6282      	str	r2, [r0, #40]	; 0x28
 801f0f2:	4298      	cmp	r0, r3
 801f0f4:	bf04      	itt	eq
 801f0f6:	2301      	moveq	r3, #1
 801f0f8:	6183      	streq	r3, [r0, #24]
 801f0fa:	f000 f81f 	bl	801f13c <__sfp>
 801f0fe:	6060      	str	r0, [r4, #4]
 801f100:	4620      	mov	r0, r4
 801f102:	f000 f81b 	bl	801f13c <__sfp>
 801f106:	60a0      	str	r0, [r4, #8]
 801f108:	4620      	mov	r0, r4
 801f10a:	f000 f817 	bl	801f13c <__sfp>
 801f10e:	2200      	movs	r2, #0
 801f110:	60e0      	str	r0, [r4, #12]
 801f112:	2104      	movs	r1, #4
 801f114:	6860      	ldr	r0, [r4, #4]
 801f116:	f7ff ffa1 	bl	801f05c <std>
 801f11a:	2201      	movs	r2, #1
 801f11c:	2109      	movs	r1, #9
 801f11e:	68a0      	ldr	r0, [r4, #8]
 801f120:	f7ff ff9c 	bl	801f05c <std>
 801f124:	2202      	movs	r2, #2
 801f126:	2112      	movs	r1, #18
 801f128:	68e0      	ldr	r0, [r4, #12]
 801f12a:	f7ff ff97 	bl	801f05c <std>
 801f12e:	2301      	movs	r3, #1
 801f130:	61a3      	str	r3, [r4, #24]
 801f132:	bd10      	pop	{r4, pc}
 801f134:	0803381c 	.word	0x0803381c
 801f138:	0801f0a5 	.word	0x0801f0a5

0801f13c <__sfp>:
 801f13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f13e:	4b1b      	ldr	r3, [pc, #108]	; (801f1ac <__sfp+0x70>)
 801f140:	681e      	ldr	r6, [r3, #0]
 801f142:	69b3      	ldr	r3, [r6, #24]
 801f144:	4607      	mov	r7, r0
 801f146:	b913      	cbnz	r3, 801f14e <__sfp+0x12>
 801f148:	4630      	mov	r0, r6
 801f14a:	f7ff ffc7 	bl	801f0dc <__sinit>
 801f14e:	3648      	adds	r6, #72	; 0x48
 801f150:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f154:	3b01      	subs	r3, #1
 801f156:	d503      	bpl.n	801f160 <__sfp+0x24>
 801f158:	6833      	ldr	r3, [r6, #0]
 801f15a:	b133      	cbz	r3, 801f16a <__sfp+0x2e>
 801f15c:	6836      	ldr	r6, [r6, #0]
 801f15e:	e7f7      	b.n	801f150 <__sfp+0x14>
 801f160:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f164:	b16d      	cbz	r5, 801f182 <__sfp+0x46>
 801f166:	3468      	adds	r4, #104	; 0x68
 801f168:	e7f4      	b.n	801f154 <__sfp+0x18>
 801f16a:	2104      	movs	r1, #4
 801f16c:	4638      	mov	r0, r7
 801f16e:	f7ff ff9f 	bl	801f0b0 <__sfmoreglue>
 801f172:	6030      	str	r0, [r6, #0]
 801f174:	2800      	cmp	r0, #0
 801f176:	d1f1      	bne.n	801f15c <__sfp+0x20>
 801f178:	230c      	movs	r3, #12
 801f17a:	603b      	str	r3, [r7, #0]
 801f17c:	4604      	mov	r4, r0
 801f17e:	4620      	mov	r0, r4
 801f180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f182:	4b0b      	ldr	r3, [pc, #44]	; (801f1b0 <__sfp+0x74>)
 801f184:	6665      	str	r5, [r4, #100]	; 0x64
 801f186:	e9c4 5500 	strd	r5, r5, [r4]
 801f18a:	60a5      	str	r5, [r4, #8]
 801f18c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801f190:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801f194:	2208      	movs	r2, #8
 801f196:	4629      	mov	r1, r5
 801f198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f19c:	f7ff feea 	bl	801ef74 <memset>
 801f1a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f1a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f1a8:	e7e9      	b.n	801f17e <__sfp+0x42>
 801f1aa:	bf00      	nop
 801f1ac:	0803381c 	.word	0x0803381c
 801f1b0:	ffff0001 	.word	0xffff0001

0801f1b4 <_fwalk_reent>:
 801f1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f1b8:	4680      	mov	r8, r0
 801f1ba:	4689      	mov	r9, r1
 801f1bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f1c0:	2600      	movs	r6, #0
 801f1c2:	b914      	cbnz	r4, 801f1ca <_fwalk_reent+0x16>
 801f1c4:	4630      	mov	r0, r6
 801f1c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f1ca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801f1ce:	3f01      	subs	r7, #1
 801f1d0:	d501      	bpl.n	801f1d6 <_fwalk_reent+0x22>
 801f1d2:	6824      	ldr	r4, [r4, #0]
 801f1d4:	e7f5      	b.n	801f1c2 <_fwalk_reent+0xe>
 801f1d6:	89ab      	ldrh	r3, [r5, #12]
 801f1d8:	2b01      	cmp	r3, #1
 801f1da:	d907      	bls.n	801f1ec <_fwalk_reent+0x38>
 801f1dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f1e0:	3301      	adds	r3, #1
 801f1e2:	d003      	beq.n	801f1ec <_fwalk_reent+0x38>
 801f1e4:	4629      	mov	r1, r5
 801f1e6:	4640      	mov	r0, r8
 801f1e8:	47c8      	blx	r9
 801f1ea:	4306      	orrs	r6, r0
 801f1ec:	3568      	adds	r5, #104	; 0x68
 801f1ee:	e7ee      	b.n	801f1ce <_fwalk_reent+0x1a>

0801f1f0 <malloc>:
 801f1f0:	4b02      	ldr	r3, [pc, #8]	; (801f1fc <malloc+0xc>)
 801f1f2:	4601      	mov	r1, r0
 801f1f4:	6818      	ldr	r0, [r3, #0]
 801f1f6:	f000 b851 	b.w	801f29c <_malloc_r>
 801f1fa:	bf00      	nop
 801f1fc:	2000005c 	.word	0x2000005c

0801f200 <_free_r>:
 801f200:	b538      	push	{r3, r4, r5, lr}
 801f202:	4605      	mov	r5, r0
 801f204:	2900      	cmp	r1, #0
 801f206:	d045      	beq.n	801f294 <_free_r+0x94>
 801f208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f20c:	1f0c      	subs	r4, r1, #4
 801f20e:	2b00      	cmp	r3, #0
 801f210:	bfb8      	it	lt
 801f212:	18e4      	addlt	r4, r4, r3
 801f214:	f000 fdc0 	bl	801fd98 <__malloc_lock>
 801f218:	4a1f      	ldr	r2, [pc, #124]	; (801f298 <_free_r+0x98>)
 801f21a:	6813      	ldr	r3, [r2, #0]
 801f21c:	4610      	mov	r0, r2
 801f21e:	b933      	cbnz	r3, 801f22e <_free_r+0x2e>
 801f220:	6063      	str	r3, [r4, #4]
 801f222:	6014      	str	r4, [r2, #0]
 801f224:	4628      	mov	r0, r5
 801f226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f22a:	f000 bdb6 	b.w	801fd9a <__malloc_unlock>
 801f22e:	42a3      	cmp	r3, r4
 801f230:	d90c      	bls.n	801f24c <_free_r+0x4c>
 801f232:	6821      	ldr	r1, [r4, #0]
 801f234:	1862      	adds	r2, r4, r1
 801f236:	4293      	cmp	r3, r2
 801f238:	bf04      	itt	eq
 801f23a:	681a      	ldreq	r2, [r3, #0]
 801f23c:	685b      	ldreq	r3, [r3, #4]
 801f23e:	6063      	str	r3, [r4, #4]
 801f240:	bf04      	itt	eq
 801f242:	1852      	addeq	r2, r2, r1
 801f244:	6022      	streq	r2, [r4, #0]
 801f246:	6004      	str	r4, [r0, #0]
 801f248:	e7ec      	b.n	801f224 <_free_r+0x24>
 801f24a:	4613      	mov	r3, r2
 801f24c:	685a      	ldr	r2, [r3, #4]
 801f24e:	b10a      	cbz	r2, 801f254 <_free_r+0x54>
 801f250:	42a2      	cmp	r2, r4
 801f252:	d9fa      	bls.n	801f24a <_free_r+0x4a>
 801f254:	6819      	ldr	r1, [r3, #0]
 801f256:	1858      	adds	r0, r3, r1
 801f258:	42a0      	cmp	r0, r4
 801f25a:	d10b      	bne.n	801f274 <_free_r+0x74>
 801f25c:	6820      	ldr	r0, [r4, #0]
 801f25e:	4401      	add	r1, r0
 801f260:	1858      	adds	r0, r3, r1
 801f262:	4282      	cmp	r2, r0
 801f264:	6019      	str	r1, [r3, #0]
 801f266:	d1dd      	bne.n	801f224 <_free_r+0x24>
 801f268:	6810      	ldr	r0, [r2, #0]
 801f26a:	6852      	ldr	r2, [r2, #4]
 801f26c:	605a      	str	r2, [r3, #4]
 801f26e:	4401      	add	r1, r0
 801f270:	6019      	str	r1, [r3, #0]
 801f272:	e7d7      	b.n	801f224 <_free_r+0x24>
 801f274:	d902      	bls.n	801f27c <_free_r+0x7c>
 801f276:	230c      	movs	r3, #12
 801f278:	602b      	str	r3, [r5, #0]
 801f27a:	e7d3      	b.n	801f224 <_free_r+0x24>
 801f27c:	6820      	ldr	r0, [r4, #0]
 801f27e:	1821      	adds	r1, r4, r0
 801f280:	428a      	cmp	r2, r1
 801f282:	bf04      	itt	eq
 801f284:	6811      	ldreq	r1, [r2, #0]
 801f286:	6852      	ldreq	r2, [r2, #4]
 801f288:	6062      	str	r2, [r4, #4]
 801f28a:	bf04      	itt	eq
 801f28c:	1809      	addeq	r1, r1, r0
 801f28e:	6021      	streq	r1, [r4, #0]
 801f290:	605c      	str	r4, [r3, #4]
 801f292:	e7c7      	b.n	801f224 <_free_r+0x24>
 801f294:	bd38      	pop	{r3, r4, r5, pc}
 801f296:	bf00      	nop
 801f298:	20004664 	.word	0x20004664

0801f29c <_malloc_r>:
 801f29c:	b570      	push	{r4, r5, r6, lr}
 801f29e:	1ccd      	adds	r5, r1, #3
 801f2a0:	f025 0503 	bic.w	r5, r5, #3
 801f2a4:	3508      	adds	r5, #8
 801f2a6:	2d0c      	cmp	r5, #12
 801f2a8:	bf38      	it	cc
 801f2aa:	250c      	movcc	r5, #12
 801f2ac:	2d00      	cmp	r5, #0
 801f2ae:	4606      	mov	r6, r0
 801f2b0:	db01      	blt.n	801f2b6 <_malloc_r+0x1a>
 801f2b2:	42a9      	cmp	r1, r5
 801f2b4:	d903      	bls.n	801f2be <_malloc_r+0x22>
 801f2b6:	230c      	movs	r3, #12
 801f2b8:	6033      	str	r3, [r6, #0]
 801f2ba:	2000      	movs	r0, #0
 801f2bc:	bd70      	pop	{r4, r5, r6, pc}
 801f2be:	f000 fd6b 	bl	801fd98 <__malloc_lock>
 801f2c2:	4a21      	ldr	r2, [pc, #132]	; (801f348 <_malloc_r+0xac>)
 801f2c4:	6814      	ldr	r4, [r2, #0]
 801f2c6:	4621      	mov	r1, r4
 801f2c8:	b991      	cbnz	r1, 801f2f0 <_malloc_r+0x54>
 801f2ca:	4c20      	ldr	r4, [pc, #128]	; (801f34c <_malloc_r+0xb0>)
 801f2cc:	6823      	ldr	r3, [r4, #0]
 801f2ce:	b91b      	cbnz	r3, 801f2d8 <_malloc_r+0x3c>
 801f2d0:	4630      	mov	r0, r6
 801f2d2:	f000 fb05 	bl	801f8e0 <_sbrk_r>
 801f2d6:	6020      	str	r0, [r4, #0]
 801f2d8:	4629      	mov	r1, r5
 801f2da:	4630      	mov	r0, r6
 801f2dc:	f000 fb00 	bl	801f8e0 <_sbrk_r>
 801f2e0:	1c43      	adds	r3, r0, #1
 801f2e2:	d124      	bne.n	801f32e <_malloc_r+0x92>
 801f2e4:	230c      	movs	r3, #12
 801f2e6:	6033      	str	r3, [r6, #0]
 801f2e8:	4630      	mov	r0, r6
 801f2ea:	f000 fd56 	bl	801fd9a <__malloc_unlock>
 801f2ee:	e7e4      	b.n	801f2ba <_malloc_r+0x1e>
 801f2f0:	680b      	ldr	r3, [r1, #0]
 801f2f2:	1b5b      	subs	r3, r3, r5
 801f2f4:	d418      	bmi.n	801f328 <_malloc_r+0x8c>
 801f2f6:	2b0b      	cmp	r3, #11
 801f2f8:	d90f      	bls.n	801f31a <_malloc_r+0x7e>
 801f2fa:	600b      	str	r3, [r1, #0]
 801f2fc:	50cd      	str	r5, [r1, r3]
 801f2fe:	18cc      	adds	r4, r1, r3
 801f300:	4630      	mov	r0, r6
 801f302:	f000 fd4a 	bl	801fd9a <__malloc_unlock>
 801f306:	f104 000b 	add.w	r0, r4, #11
 801f30a:	1d23      	adds	r3, r4, #4
 801f30c:	f020 0007 	bic.w	r0, r0, #7
 801f310:	1ac3      	subs	r3, r0, r3
 801f312:	d0d3      	beq.n	801f2bc <_malloc_r+0x20>
 801f314:	425a      	negs	r2, r3
 801f316:	50e2      	str	r2, [r4, r3]
 801f318:	e7d0      	b.n	801f2bc <_malloc_r+0x20>
 801f31a:	428c      	cmp	r4, r1
 801f31c:	684b      	ldr	r3, [r1, #4]
 801f31e:	bf16      	itet	ne
 801f320:	6063      	strne	r3, [r4, #4]
 801f322:	6013      	streq	r3, [r2, #0]
 801f324:	460c      	movne	r4, r1
 801f326:	e7eb      	b.n	801f300 <_malloc_r+0x64>
 801f328:	460c      	mov	r4, r1
 801f32a:	6849      	ldr	r1, [r1, #4]
 801f32c:	e7cc      	b.n	801f2c8 <_malloc_r+0x2c>
 801f32e:	1cc4      	adds	r4, r0, #3
 801f330:	f024 0403 	bic.w	r4, r4, #3
 801f334:	42a0      	cmp	r0, r4
 801f336:	d005      	beq.n	801f344 <_malloc_r+0xa8>
 801f338:	1a21      	subs	r1, r4, r0
 801f33a:	4630      	mov	r0, r6
 801f33c:	f000 fad0 	bl	801f8e0 <_sbrk_r>
 801f340:	3001      	adds	r0, #1
 801f342:	d0cf      	beq.n	801f2e4 <_malloc_r+0x48>
 801f344:	6025      	str	r5, [r4, #0]
 801f346:	e7db      	b.n	801f300 <_malloc_r+0x64>
 801f348:	20004664 	.word	0x20004664
 801f34c:	20004668 	.word	0x20004668

0801f350 <__sfputc_r>:
 801f350:	6893      	ldr	r3, [r2, #8]
 801f352:	3b01      	subs	r3, #1
 801f354:	2b00      	cmp	r3, #0
 801f356:	b410      	push	{r4}
 801f358:	6093      	str	r3, [r2, #8]
 801f35a:	da08      	bge.n	801f36e <__sfputc_r+0x1e>
 801f35c:	6994      	ldr	r4, [r2, #24]
 801f35e:	42a3      	cmp	r3, r4
 801f360:	db01      	blt.n	801f366 <__sfputc_r+0x16>
 801f362:	290a      	cmp	r1, #10
 801f364:	d103      	bne.n	801f36e <__sfputc_r+0x1e>
 801f366:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f36a:	f000 bb0d 	b.w	801f988 <__swbuf_r>
 801f36e:	6813      	ldr	r3, [r2, #0]
 801f370:	1c58      	adds	r0, r3, #1
 801f372:	6010      	str	r0, [r2, #0]
 801f374:	7019      	strb	r1, [r3, #0]
 801f376:	4608      	mov	r0, r1
 801f378:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f37c:	4770      	bx	lr

0801f37e <__sfputs_r>:
 801f37e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f380:	4606      	mov	r6, r0
 801f382:	460f      	mov	r7, r1
 801f384:	4614      	mov	r4, r2
 801f386:	18d5      	adds	r5, r2, r3
 801f388:	42ac      	cmp	r4, r5
 801f38a:	d101      	bne.n	801f390 <__sfputs_r+0x12>
 801f38c:	2000      	movs	r0, #0
 801f38e:	e007      	b.n	801f3a0 <__sfputs_r+0x22>
 801f390:	463a      	mov	r2, r7
 801f392:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f396:	4630      	mov	r0, r6
 801f398:	f7ff ffda 	bl	801f350 <__sfputc_r>
 801f39c:	1c43      	adds	r3, r0, #1
 801f39e:	d1f3      	bne.n	801f388 <__sfputs_r+0xa>
 801f3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f3a4 <_vfiprintf_r>:
 801f3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3a8:	460c      	mov	r4, r1
 801f3aa:	b09d      	sub	sp, #116	; 0x74
 801f3ac:	4617      	mov	r7, r2
 801f3ae:	461d      	mov	r5, r3
 801f3b0:	4606      	mov	r6, r0
 801f3b2:	b118      	cbz	r0, 801f3bc <_vfiprintf_r+0x18>
 801f3b4:	6983      	ldr	r3, [r0, #24]
 801f3b6:	b90b      	cbnz	r3, 801f3bc <_vfiprintf_r+0x18>
 801f3b8:	f7ff fe90 	bl	801f0dc <__sinit>
 801f3bc:	4b7c      	ldr	r3, [pc, #496]	; (801f5b0 <_vfiprintf_r+0x20c>)
 801f3be:	429c      	cmp	r4, r3
 801f3c0:	d158      	bne.n	801f474 <_vfiprintf_r+0xd0>
 801f3c2:	6874      	ldr	r4, [r6, #4]
 801f3c4:	89a3      	ldrh	r3, [r4, #12]
 801f3c6:	0718      	lsls	r0, r3, #28
 801f3c8:	d55e      	bpl.n	801f488 <_vfiprintf_r+0xe4>
 801f3ca:	6923      	ldr	r3, [r4, #16]
 801f3cc:	2b00      	cmp	r3, #0
 801f3ce:	d05b      	beq.n	801f488 <_vfiprintf_r+0xe4>
 801f3d0:	2300      	movs	r3, #0
 801f3d2:	9309      	str	r3, [sp, #36]	; 0x24
 801f3d4:	2320      	movs	r3, #32
 801f3d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f3da:	2330      	movs	r3, #48	; 0x30
 801f3dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f3e0:	9503      	str	r5, [sp, #12]
 801f3e2:	f04f 0b01 	mov.w	fp, #1
 801f3e6:	46b8      	mov	r8, r7
 801f3e8:	4645      	mov	r5, r8
 801f3ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 801f3ee:	b10b      	cbz	r3, 801f3f4 <_vfiprintf_r+0x50>
 801f3f0:	2b25      	cmp	r3, #37	; 0x25
 801f3f2:	d154      	bne.n	801f49e <_vfiprintf_r+0xfa>
 801f3f4:	ebb8 0a07 	subs.w	sl, r8, r7
 801f3f8:	d00b      	beq.n	801f412 <_vfiprintf_r+0x6e>
 801f3fa:	4653      	mov	r3, sl
 801f3fc:	463a      	mov	r2, r7
 801f3fe:	4621      	mov	r1, r4
 801f400:	4630      	mov	r0, r6
 801f402:	f7ff ffbc 	bl	801f37e <__sfputs_r>
 801f406:	3001      	adds	r0, #1
 801f408:	f000 80c2 	beq.w	801f590 <_vfiprintf_r+0x1ec>
 801f40c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f40e:	4453      	add	r3, sl
 801f410:	9309      	str	r3, [sp, #36]	; 0x24
 801f412:	f898 3000 	ldrb.w	r3, [r8]
 801f416:	2b00      	cmp	r3, #0
 801f418:	f000 80ba 	beq.w	801f590 <_vfiprintf_r+0x1ec>
 801f41c:	2300      	movs	r3, #0
 801f41e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f426:	9304      	str	r3, [sp, #16]
 801f428:	9307      	str	r3, [sp, #28]
 801f42a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f42e:	931a      	str	r3, [sp, #104]	; 0x68
 801f430:	46a8      	mov	r8, r5
 801f432:	2205      	movs	r2, #5
 801f434:	f818 1b01 	ldrb.w	r1, [r8], #1
 801f438:	485e      	ldr	r0, [pc, #376]	; (801f5b4 <_vfiprintf_r+0x210>)
 801f43a:	f7e8 ff19 	bl	8008270 <memchr>
 801f43e:	9b04      	ldr	r3, [sp, #16]
 801f440:	bb78      	cbnz	r0, 801f4a2 <_vfiprintf_r+0xfe>
 801f442:	06d9      	lsls	r1, r3, #27
 801f444:	bf44      	itt	mi
 801f446:	2220      	movmi	r2, #32
 801f448:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801f44c:	071a      	lsls	r2, r3, #28
 801f44e:	bf44      	itt	mi
 801f450:	222b      	movmi	r2, #43	; 0x2b
 801f452:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801f456:	782a      	ldrb	r2, [r5, #0]
 801f458:	2a2a      	cmp	r2, #42	; 0x2a
 801f45a:	d02a      	beq.n	801f4b2 <_vfiprintf_r+0x10e>
 801f45c:	9a07      	ldr	r2, [sp, #28]
 801f45e:	46a8      	mov	r8, r5
 801f460:	2000      	movs	r0, #0
 801f462:	250a      	movs	r5, #10
 801f464:	4641      	mov	r1, r8
 801f466:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f46a:	3b30      	subs	r3, #48	; 0x30
 801f46c:	2b09      	cmp	r3, #9
 801f46e:	d969      	bls.n	801f544 <_vfiprintf_r+0x1a0>
 801f470:	b360      	cbz	r0, 801f4cc <_vfiprintf_r+0x128>
 801f472:	e024      	b.n	801f4be <_vfiprintf_r+0x11a>
 801f474:	4b50      	ldr	r3, [pc, #320]	; (801f5b8 <_vfiprintf_r+0x214>)
 801f476:	429c      	cmp	r4, r3
 801f478:	d101      	bne.n	801f47e <_vfiprintf_r+0xda>
 801f47a:	68b4      	ldr	r4, [r6, #8]
 801f47c:	e7a2      	b.n	801f3c4 <_vfiprintf_r+0x20>
 801f47e:	4b4f      	ldr	r3, [pc, #316]	; (801f5bc <_vfiprintf_r+0x218>)
 801f480:	429c      	cmp	r4, r3
 801f482:	bf08      	it	eq
 801f484:	68f4      	ldreq	r4, [r6, #12]
 801f486:	e79d      	b.n	801f3c4 <_vfiprintf_r+0x20>
 801f488:	4621      	mov	r1, r4
 801f48a:	4630      	mov	r0, r6
 801f48c:	f000 fae0 	bl	801fa50 <__swsetup_r>
 801f490:	2800      	cmp	r0, #0
 801f492:	d09d      	beq.n	801f3d0 <_vfiprintf_r+0x2c>
 801f494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f498:	b01d      	add	sp, #116	; 0x74
 801f49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f49e:	46a8      	mov	r8, r5
 801f4a0:	e7a2      	b.n	801f3e8 <_vfiprintf_r+0x44>
 801f4a2:	4a44      	ldr	r2, [pc, #272]	; (801f5b4 <_vfiprintf_r+0x210>)
 801f4a4:	1a80      	subs	r0, r0, r2
 801f4a6:	fa0b f000 	lsl.w	r0, fp, r0
 801f4aa:	4318      	orrs	r0, r3
 801f4ac:	9004      	str	r0, [sp, #16]
 801f4ae:	4645      	mov	r5, r8
 801f4b0:	e7be      	b.n	801f430 <_vfiprintf_r+0x8c>
 801f4b2:	9a03      	ldr	r2, [sp, #12]
 801f4b4:	1d11      	adds	r1, r2, #4
 801f4b6:	6812      	ldr	r2, [r2, #0]
 801f4b8:	9103      	str	r1, [sp, #12]
 801f4ba:	2a00      	cmp	r2, #0
 801f4bc:	db01      	blt.n	801f4c2 <_vfiprintf_r+0x11e>
 801f4be:	9207      	str	r2, [sp, #28]
 801f4c0:	e004      	b.n	801f4cc <_vfiprintf_r+0x128>
 801f4c2:	4252      	negs	r2, r2
 801f4c4:	f043 0302 	orr.w	r3, r3, #2
 801f4c8:	9207      	str	r2, [sp, #28]
 801f4ca:	9304      	str	r3, [sp, #16]
 801f4cc:	f898 3000 	ldrb.w	r3, [r8]
 801f4d0:	2b2e      	cmp	r3, #46	; 0x2e
 801f4d2:	d10e      	bne.n	801f4f2 <_vfiprintf_r+0x14e>
 801f4d4:	f898 3001 	ldrb.w	r3, [r8, #1]
 801f4d8:	2b2a      	cmp	r3, #42	; 0x2a
 801f4da:	d138      	bne.n	801f54e <_vfiprintf_r+0x1aa>
 801f4dc:	9b03      	ldr	r3, [sp, #12]
 801f4de:	1d1a      	adds	r2, r3, #4
 801f4e0:	681b      	ldr	r3, [r3, #0]
 801f4e2:	9203      	str	r2, [sp, #12]
 801f4e4:	2b00      	cmp	r3, #0
 801f4e6:	bfb8      	it	lt
 801f4e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801f4ec:	f108 0802 	add.w	r8, r8, #2
 801f4f0:	9305      	str	r3, [sp, #20]
 801f4f2:	4d33      	ldr	r5, [pc, #204]	; (801f5c0 <_vfiprintf_r+0x21c>)
 801f4f4:	f898 1000 	ldrb.w	r1, [r8]
 801f4f8:	2203      	movs	r2, #3
 801f4fa:	4628      	mov	r0, r5
 801f4fc:	f7e8 feb8 	bl	8008270 <memchr>
 801f500:	b140      	cbz	r0, 801f514 <_vfiprintf_r+0x170>
 801f502:	2340      	movs	r3, #64	; 0x40
 801f504:	1b40      	subs	r0, r0, r5
 801f506:	fa03 f000 	lsl.w	r0, r3, r0
 801f50a:	9b04      	ldr	r3, [sp, #16]
 801f50c:	4303      	orrs	r3, r0
 801f50e:	f108 0801 	add.w	r8, r8, #1
 801f512:	9304      	str	r3, [sp, #16]
 801f514:	f898 1000 	ldrb.w	r1, [r8]
 801f518:	482a      	ldr	r0, [pc, #168]	; (801f5c4 <_vfiprintf_r+0x220>)
 801f51a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f51e:	2206      	movs	r2, #6
 801f520:	f108 0701 	add.w	r7, r8, #1
 801f524:	f7e8 fea4 	bl	8008270 <memchr>
 801f528:	2800      	cmp	r0, #0
 801f52a:	d037      	beq.n	801f59c <_vfiprintf_r+0x1f8>
 801f52c:	4b26      	ldr	r3, [pc, #152]	; (801f5c8 <_vfiprintf_r+0x224>)
 801f52e:	bb1b      	cbnz	r3, 801f578 <_vfiprintf_r+0x1d4>
 801f530:	9b03      	ldr	r3, [sp, #12]
 801f532:	3307      	adds	r3, #7
 801f534:	f023 0307 	bic.w	r3, r3, #7
 801f538:	3308      	adds	r3, #8
 801f53a:	9303      	str	r3, [sp, #12]
 801f53c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f53e:	444b      	add	r3, r9
 801f540:	9309      	str	r3, [sp, #36]	; 0x24
 801f542:	e750      	b.n	801f3e6 <_vfiprintf_r+0x42>
 801f544:	fb05 3202 	mla	r2, r5, r2, r3
 801f548:	2001      	movs	r0, #1
 801f54a:	4688      	mov	r8, r1
 801f54c:	e78a      	b.n	801f464 <_vfiprintf_r+0xc0>
 801f54e:	2300      	movs	r3, #0
 801f550:	f108 0801 	add.w	r8, r8, #1
 801f554:	9305      	str	r3, [sp, #20]
 801f556:	4619      	mov	r1, r3
 801f558:	250a      	movs	r5, #10
 801f55a:	4640      	mov	r0, r8
 801f55c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f560:	3a30      	subs	r2, #48	; 0x30
 801f562:	2a09      	cmp	r2, #9
 801f564:	d903      	bls.n	801f56e <_vfiprintf_r+0x1ca>
 801f566:	2b00      	cmp	r3, #0
 801f568:	d0c3      	beq.n	801f4f2 <_vfiprintf_r+0x14e>
 801f56a:	9105      	str	r1, [sp, #20]
 801f56c:	e7c1      	b.n	801f4f2 <_vfiprintf_r+0x14e>
 801f56e:	fb05 2101 	mla	r1, r5, r1, r2
 801f572:	2301      	movs	r3, #1
 801f574:	4680      	mov	r8, r0
 801f576:	e7f0      	b.n	801f55a <_vfiprintf_r+0x1b6>
 801f578:	ab03      	add	r3, sp, #12
 801f57a:	9300      	str	r3, [sp, #0]
 801f57c:	4622      	mov	r2, r4
 801f57e:	4b13      	ldr	r3, [pc, #76]	; (801f5cc <_vfiprintf_r+0x228>)
 801f580:	a904      	add	r1, sp, #16
 801f582:	4630      	mov	r0, r6
 801f584:	f3af 8000 	nop.w
 801f588:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801f58c:	4681      	mov	r9, r0
 801f58e:	d1d5      	bne.n	801f53c <_vfiprintf_r+0x198>
 801f590:	89a3      	ldrh	r3, [r4, #12]
 801f592:	065b      	lsls	r3, r3, #25
 801f594:	f53f af7e 	bmi.w	801f494 <_vfiprintf_r+0xf0>
 801f598:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f59a:	e77d      	b.n	801f498 <_vfiprintf_r+0xf4>
 801f59c:	ab03      	add	r3, sp, #12
 801f59e:	9300      	str	r3, [sp, #0]
 801f5a0:	4622      	mov	r2, r4
 801f5a2:	4b0a      	ldr	r3, [pc, #40]	; (801f5cc <_vfiprintf_r+0x228>)
 801f5a4:	a904      	add	r1, sp, #16
 801f5a6:	4630      	mov	r0, r6
 801f5a8:	f000 f888 	bl	801f6bc <_printf_i>
 801f5ac:	e7ec      	b.n	801f588 <_vfiprintf_r+0x1e4>
 801f5ae:	bf00      	nop
 801f5b0:	08033840 	.word	0x08033840
 801f5b4:	08033880 	.word	0x08033880
 801f5b8:	08033860 	.word	0x08033860
 801f5bc:	08033820 	.word	0x08033820
 801f5c0:	08033886 	.word	0x08033886
 801f5c4:	0803388a 	.word	0x0803388a
 801f5c8:	00000000 	.word	0x00000000
 801f5cc:	0801f37f 	.word	0x0801f37f

0801f5d0 <_printf_common>:
 801f5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f5d4:	4691      	mov	r9, r2
 801f5d6:	461f      	mov	r7, r3
 801f5d8:	688a      	ldr	r2, [r1, #8]
 801f5da:	690b      	ldr	r3, [r1, #16]
 801f5dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f5e0:	4293      	cmp	r3, r2
 801f5e2:	bfb8      	it	lt
 801f5e4:	4613      	movlt	r3, r2
 801f5e6:	f8c9 3000 	str.w	r3, [r9]
 801f5ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f5ee:	4606      	mov	r6, r0
 801f5f0:	460c      	mov	r4, r1
 801f5f2:	b112      	cbz	r2, 801f5fa <_printf_common+0x2a>
 801f5f4:	3301      	adds	r3, #1
 801f5f6:	f8c9 3000 	str.w	r3, [r9]
 801f5fa:	6823      	ldr	r3, [r4, #0]
 801f5fc:	0699      	lsls	r1, r3, #26
 801f5fe:	bf42      	ittt	mi
 801f600:	f8d9 3000 	ldrmi.w	r3, [r9]
 801f604:	3302      	addmi	r3, #2
 801f606:	f8c9 3000 	strmi.w	r3, [r9]
 801f60a:	6825      	ldr	r5, [r4, #0]
 801f60c:	f015 0506 	ands.w	r5, r5, #6
 801f610:	d107      	bne.n	801f622 <_printf_common+0x52>
 801f612:	f104 0a19 	add.w	sl, r4, #25
 801f616:	68e3      	ldr	r3, [r4, #12]
 801f618:	f8d9 2000 	ldr.w	r2, [r9]
 801f61c:	1a9b      	subs	r3, r3, r2
 801f61e:	42ab      	cmp	r3, r5
 801f620:	dc28      	bgt.n	801f674 <_printf_common+0xa4>
 801f622:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801f626:	6822      	ldr	r2, [r4, #0]
 801f628:	3300      	adds	r3, #0
 801f62a:	bf18      	it	ne
 801f62c:	2301      	movne	r3, #1
 801f62e:	0692      	lsls	r2, r2, #26
 801f630:	d42d      	bmi.n	801f68e <_printf_common+0xbe>
 801f632:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f636:	4639      	mov	r1, r7
 801f638:	4630      	mov	r0, r6
 801f63a:	47c0      	blx	r8
 801f63c:	3001      	adds	r0, #1
 801f63e:	d020      	beq.n	801f682 <_printf_common+0xb2>
 801f640:	6823      	ldr	r3, [r4, #0]
 801f642:	68e5      	ldr	r5, [r4, #12]
 801f644:	f8d9 2000 	ldr.w	r2, [r9]
 801f648:	f003 0306 	and.w	r3, r3, #6
 801f64c:	2b04      	cmp	r3, #4
 801f64e:	bf08      	it	eq
 801f650:	1aad      	subeq	r5, r5, r2
 801f652:	68a3      	ldr	r3, [r4, #8]
 801f654:	6922      	ldr	r2, [r4, #16]
 801f656:	bf0c      	ite	eq
 801f658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f65c:	2500      	movne	r5, #0
 801f65e:	4293      	cmp	r3, r2
 801f660:	bfc4      	itt	gt
 801f662:	1a9b      	subgt	r3, r3, r2
 801f664:	18ed      	addgt	r5, r5, r3
 801f666:	f04f 0900 	mov.w	r9, #0
 801f66a:	341a      	adds	r4, #26
 801f66c:	454d      	cmp	r5, r9
 801f66e:	d11a      	bne.n	801f6a6 <_printf_common+0xd6>
 801f670:	2000      	movs	r0, #0
 801f672:	e008      	b.n	801f686 <_printf_common+0xb6>
 801f674:	2301      	movs	r3, #1
 801f676:	4652      	mov	r2, sl
 801f678:	4639      	mov	r1, r7
 801f67a:	4630      	mov	r0, r6
 801f67c:	47c0      	blx	r8
 801f67e:	3001      	adds	r0, #1
 801f680:	d103      	bne.n	801f68a <_printf_common+0xba>
 801f682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f68a:	3501      	adds	r5, #1
 801f68c:	e7c3      	b.n	801f616 <_printf_common+0x46>
 801f68e:	18e1      	adds	r1, r4, r3
 801f690:	1c5a      	adds	r2, r3, #1
 801f692:	2030      	movs	r0, #48	; 0x30
 801f694:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f698:	4422      	add	r2, r4
 801f69a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f69e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f6a2:	3302      	adds	r3, #2
 801f6a4:	e7c5      	b.n	801f632 <_printf_common+0x62>
 801f6a6:	2301      	movs	r3, #1
 801f6a8:	4622      	mov	r2, r4
 801f6aa:	4639      	mov	r1, r7
 801f6ac:	4630      	mov	r0, r6
 801f6ae:	47c0      	blx	r8
 801f6b0:	3001      	adds	r0, #1
 801f6b2:	d0e6      	beq.n	801f682 <_printf_common+0xb2>
 801f6b4:	f109 0901 	add.w	r9, r9, #1
 801f6b8:	e7d8      	b.n	801f66c <_printf_common+0x9c>
	...

0801f6bc <_printf_i>:
 801f6bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f6c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801f6c4:	460c      	mov	r4, r1
 801f6c6:	7e09      	ldrb	r1, [r1, #24]
 801f6c8:	b085      	sub	sp, #20
 801f6ca:	296e      	cmp	r1, #110	; 0x6e
 801f6cc:	4617      	mov	r7, r2
 801f6ce:	4606      	mov	r6, r0
 801f6d0:	4698      	mov	r8, r3
 801f6d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f6d4:	f000 80b3 	beq.w	801f83e <_printf_i+0x182>
 801f6d8:	d822      	bhi.n	801f720 <_printf_i+0x64>
 801f6da:	2963      	cmp	r1, #99	; 0x63
 801f6dc:	d036      	beq.n	801f74c <_printf_i+0x90>
 801f6de:	d80a      	bhi.n	801f6f6 <_printf_i+0x3a>
 801f6e0:	2900      	cmp	r1, #0
 801f6e2:	f000 80b9 	beq.w	801f858 <_printf_i+0x19c>
 801f6e6:	2958      	cmp	r1, #88	; 0x58
 801f6e8:	f000 8083 	beq.w	801f7f2 <_printf_i+0x136>
 801f6ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f6f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801f6f4:	e032      	b.n	801f75c <_printf_i+0xa0>
 801f6f6:	2964      	cmp	r1, #100	; 0x64
 801f6f8:	d001      	beq.n	801f6fe <_printf_i+0x42>
 801f6fa:	2969      	cmp	r1, #105	; 0x69
 801f6fc:	d1f6      	bne.n	801f6ec <_printf_i+0x30>
 801f6fe:	6820      	ldr	r0, [r4, #0]
 801f700:	6813      	ldr	r3, [r2, #0]
 801f702:	0605      	lsls	r5, r0, #24
 801f704:	f103 0104 	add.w	r1, r3, #4
 801f708:	d52a      	bpl.n	801f760 <_printf_i+0xa4>
 801f70a:	681b      	ldr	r3, [r3, #0]
 801f70c:	6011      	str	r1, [r2, #0]
 801f70e:	2b00      	cmp	r3, #0
 801f710:	da03      	bge.n	801f71a <_printf_i+0x5e>
 801f712:	222d      	movs	r2, #45	; 0x2d
 801f714:	425b      	negs	r3, r3
 801f716:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801f71a:	486f      	ldr	r0, [pc, #444]	; (801f8d8 <_printf_i+0x21c>)
 801f71c:	220a      	movs	r2, #10
 801f71e:	e039      	b.n	801f794 <_printf_i+0xd8>
 801f720:	2973      	cmp	r1, #115	; 0x73
 801f722:	f000 809d 	beq.w	801f860 <_printf_i+0x1a4>
 801f726:	d808      	bhi.n	801f73a <_printf_i+0x7e>
 801f728:	296f      	cmp	r1, #111	; 0x6f
 801f72a:	d020      	beq.n	801f76e <_printf_i+0xb2>
 801f72c:	2970      	cmp	r1, #112	; 0x70
 801f72e:	d1dd      	bne.n	801f6ec <_printf_i+0x30>
 801f730:	6823      	ldr	r3, [r4, #0]
 801f732:	f043 0320 	orr.w	r3, r3, #32
 801f736:	6023      	str	r3, [r4, #0]
 801f738:	e003      	b.n	801f742 <_printf_i+0x86>
 801f73a:	2975      	cmp	r1, #117	; 0x75
 801f73c:	d017      	beq.n	801f76e <_printf_i+0xb2>
 801f73e:	2978      	cmp	r1, #120	; 0x78
 801f740:	d1d4      	bne.n	801f6ec <_printf_i+0x30>
 801f742:	2378      	movs	r3, #120	; 0x78
 801f744:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f748:	4864      	ldr	r0, [pc, #400]	; (801f8dc <_printf_i+0x220>)
 801f74a:	e055      	b.n	801f7f8 <_printf_i+0x13c>
 801f74c:	6813      	ldr	r3, [r2, #0]
 801f74e:	1d19      	adds	r1, r3, #4
 801f750:	681b      	ldr	r3, [r3, #0]
 801f752:	6011      	str	r1, [r2, #0]
 801f754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f75c:	2301      	movs	r3, #1
 801f75e:	e08c      	b.n	801f87a <_printf_i+0x1be>
 801f760:	681b      	ldr	r3, [r3, #0]
 801f762:	6011      	str	r1, [r2, #0]
 801f764:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f768:	bf18      	it	ne
 801f76a:	b21b      	sxthne	r3, r3
 801f76c:	e7cf      	b.n	801f70e <_printf_i+0x52>
 801f76e:	6813      	ldr	r3, [r2, #0]
 801f770:	6825      	ldr	r5, [r4, #0]
 801f772:	1d18      	adds	r0, r3, #4
 801f774:	6010      	str	r0, [r2, #0]
 801f776:	0628      	lsls	r0, r5, #24
 801f778:	d501      	bpl.n	801f77e <_printf_i+0xc2>
 801f77a:	681b      	ldr	r3, [r3, #0]
 801f77c:	e002      	b.n	801f784 <_printf_i+0xc8>
 801f77e:	0668      	lsls	r0, r5, #25
 801f780:	d5fb      	bpl.n	801f77a <_printf_i+0xbe>
 801f782:	881b      	ldrh	r3, [r3, #0]
 801f784:	4854      	ldr	r0, [pc, #336]	; (801f8d8 <_printf_i+0x21c>)
 801f786:	296f      	cmp	r1, #111	; 0x6f
 801f788:	bf14      	ite	ne
 801f78a:	220a      	movne	r2, #10
 801f78c:	2208      	moveq	r2, #8
 801f78e:	2100      	movs	r1, #0
 801f790:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f794:	6865      	ldr	r5, [r4, #4]
 801f796:	60a5      	str	r5, [r4, #8]
 801f798:	2d00      	cmp	r5, #0
 801f79a:	f2c0 8095 	blt.w	801f8c8 <_printf_i+0x20c>
 801f79e:	6821      	ldr	r1, [r4, #0]
 801f7a0:	f021 0104 	bic.w	r1, r1, #4
 801f7a4:	6021      	str	r1, [r4, #0]
 801f7a6:	2b00      	cmp	r3, #0
 801f7a8:	d13d      	bne.n	801f826 <_printf_i+0x16a>
 801f7aa:	2d00      	cmp	r5, #0
 801f7ac:	f040 808e 	bne.w	801f8cc <_printf_i+0x210>
 801f7b0:	4665      	mov	r5, ip
 801f7b2:	2a08      	cmp	r2, #8
 801f7b4:	d10b      	bne.n	801f7ce <_printf_i+0x112>
 801f7b6:	6823      	ldr	r3, [r4, #0]
 801f7b8:	07db      	lsls	r3, r3, #31
 801f7ba:	d508      	bpl.n	801f7ce <_printf_i+0x112>
 801f7bc:	6923      	ldr	r3, [r4, #16]
 801f7be:	6862      	ldr	r2, [r4, #4]
 801f7c0:	429a      	cmp	r2, r3
 801f7c2:	bfde      	ittt	le
 801f7c4:	2330      	movle	r3, #48	; 0x30
 801f7c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f7ca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801f7ce:	ebac 0305 	sub.w	r3, ip, r5
 801f7d2:	6123      	str	r3, [r4, #16]
 801f7d4:	f8cd 8000 	str.w	r8, [sp]
 801f7d8:	463b      	mov	r3, r7
 801f7da:	aa03      	add	r2, sp, #12
 801f7dc:	4621      	mov	r1, r4
 801f7de:	4630      	mov	r0, r6
 801f7e0:	f7ff fef6 	bl	801f5d0 <_printf_common>
 801f7e4:	3001      	adds	r0, #1
 801f7e6:	d14d      	bne.n	801f884 <_printf_i+0x1c8>
 801f7e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f7ec:	b005      	add	sp, #20
 801f7ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f7f2:	4839      	ldr	r0, [pc, #228]	; (801f8d8 <_printf_i+0x21c>)
 801f7f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801f7f8:	6813      	ldr	r3, [r2, #0]
 801f7fa:	6821      	ldr	r1, [r4, #0]
 801f7fc:	1d1d      	adds	r5, r3, #4
 801f7fe:	681b      	ldr	r3, [r3, #0]
 801f800:	6015      	str	r5, [r2, #0]
 801f802:	060a      	lsls	r2, r1, #24
 801f804:	d50b      	bpl.n	801f81e <_printf_i+0x162>
 801f806:	07ca      	lsls	r2, r1, #31
 801f808:	bf44      	itt	mi
 801f80a:	f041 0120 	orrmi.w	r1, r1, #32
 801f80e:	6021      	strmi	r1, [r4, #0]
 801f810:	b91b      	cbnz	r3, 801f81a <_printf_i+0x15e>
 801f812:	6822      	ldr	r2, [r4, #0]
 801f814:	f022 0220 	bic.w	r2, r2, #32
 801f818:	6022      	str	r2, [r4, #0]
 801f81a:	2210      	movs	r2, #16
 801f81c:	e7b7      	b.n	801f78e <_printf_i+0xd2>
 801f81e:	064d      	lsls	r5, r1, #25
 801f820:	bf48      	it	mi
 801f822:	b29b      	uxthmi	r3, r3
 801f824:	e7ef      	b.n	801f806 <_printf_i+0x14a>
 801f826:	4665      	mov	r5, ip
 801f828:	fbb3 f1f2 	udiv	r1, r3, r2
 801f82c:	fb02 3311 	mls	r3, r2, r1, r3
 801f830:	5cc3      	ldrb	r3, [r0, r3]
 801f832:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801f836:	460b      	mov	r3, r1
 801f838:	2900      	cmp	r1, #0
 801f83a:	d1f5      	bne.n	801f828 <_printf_i+0x16c>
 801f83c:	e7b9      	b.n	801f7b2 <_printf_i+0xf6>
 801f83e:	6813      	ldr	r3, [r2, #0]
 801f840:	6825      	ldr	r5, [r4, #0]
 801f842:	6961      	ldr	r1, [r4, #20]
 801f844:	1d18      	adds	r0, r3, #4
 801f846:	6010      	str	r0, [r2, #0]
 801f848:	0628      	lsls	r0, r5, #24
 801f84a:	681b      	ldr	r3, [r3, #0]
 801f84c:	d501      	bpl.n	801f852 <_printf_i+0x196>
 801f84e:	6019      	str	r1, [r3, #0]
 801f850:	e002      	b.n	801f858 <_printf_i+0x19c>
 801f852:	066a      	lsls	r2, r5, #25
 801f854:	d5fb      	bpl.n	801f84e <_printf_i+0x192>
 801f856:	8019      	strh	r1, [r3, #0]
 801f858:	2300      	movs	r3, #0
 801f85a:	6123      	str	r3, [r4, #16]
 801f85c:	4665      	mov	r5, ip
 801f85e:	e7b9      	b.n	801f7d4 <_printf_i+0x118>
 801f860:	6813      	ldr	r3, [r2, #0]
 801f862:	1d19      	adds	r1, r3, #4
 801f864:	6011      	str	r1, [r2, #0]
 801f866:	681d      	ldr	r5, [r3, #0]
 801f868:	6862      	ldr	r2, [r4, #4]
 801f86a:	2100      	movs	r1, #0
 801f86c:	4628      	mov	r0, r5
 801f86e:	f7e8 fcff 	bl	8008270 <memchr>
 801f872:	b108      	cbz	r0, 801f878 <_printf_i+0x1bc>
 801f874:	1b40      	subs	r0, r0, r5
 801f876:	6060      	str	r0, [r4, #4]
 801f878:	6863      	ldr	r3, [r4, #4]
 801f87a:	6123      	str	r3, [r4, #16]
 801f87c:	2300      	movs	r3, #0
 801f87e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f882:	e7a7      	b.n	801f7d4 <_printf_i+0x118>
 801f884:	6923      	ldr	r3, [r4, #16]
 801f886:	462a      	mov	r2, r5
 801f888:	4639      	mov	r1, r7
 801f88a:	4630      	mov	r0, r6
 801f88c:	47c0      	blx	r8
 801f88e:	3001      	adds	r0, #1
 801f890:	d0aa      	beq.n	801f7e8 <_printf_i+0x12c>
 801f892:	6823      	ldr	r3, [r4, #0]
 801f894:	079b      	lsls	r3, r3, #30
 801f896:	d413      	bmi.n	801f8c0 <_printf_i+0x204>
 801f898:	68e0      	ldr	r0, [r4, #12]
 801f89a:	9b03      	ldr	r3, [sp, #12]
 801f89c:	4298      	cmp	r0, r3
 801f89e:	bfb8      	it	lt
 801f8a0:	4618      	movlt	r0, r3
 801f8a2:	e7a3      	b.n	801f7ec <_printf_i+0x130>
 801f8a4:	2301      	movs	r3, #1
 801f8a6:	464a      	mov	r2, r9
 801f8a8:	4639      	mov	r1, r7
 801f8aa:	4630      	mov	r0, r6
 801f8ac:	47c0      	blx	r8
 801f8ae:	3001      	adds	r0, #1
 801f8b0:	d09a      	beq.n	801f7e8 <_printf_i+0x12c>
 801f8b2:	3501      	adds	r5, #1
 801f8b4:	68e3      	ldr	r3, [r4, #12]
 801f8b6:	9a03      	ldr	r2, [sp, #12]
 801f8b8:	1a9b      	subs	r3, r3, r2
 801f8ba:	42ab      	cmp	r3, r5
 801f8bc:	dcf2      	bgt.n	801f8a4 <_printf_i+0x1e8>
 801f8be:	e7eb      	b.n	801f898 <_printf_i+0x1dc>
 801f8c0:	2500      	movs	r5, #0
 801f8c2:	f104 0919 	add.w	r9, r4, #25
 801f8c6:	e7f5      	b.n	801f8b4 <_printf_i+0x1f8>
 801f8c8:	2b00      	cmp	r3, #0
 801f8ca:	d1ac      	bne.n	801f826 <_printf_i+0x16a>
 801f8cc:	7803      	ldrb	r3, [r0, #0]
 801f8ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f8d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f8d6:	e76c      	b.n	801f7b2 <_printf_i+0xf6>
 801f8d8:	08033891 	.word	0x08033891
 801f8dc:	080338a2 	.word	0x080338a2

0801f8e0 <_sbrk_r>:
 801f8e0:	b538      	push	{r3, r4, r5, lr}
 801f8e2:	4c06      	ldr	r4, [pc, #24]	; (801f8fc <_sbrk_r+0x1c>)
 801f8e4:	2300      	movs	r3, #0
 801f8e6:	4605      	mov	r5, r0
 801f8e8:	4608      	mov	r0, r1
 801f8ea:	6023      	str	r3, [r4, #0]
 801f8ec:	f7ea fa56 	bl	8009d9c <_sbrk>
 801f8f0:	1c43      	adds	r3, r0, #1
 801f8f2:	d102      	bne.n	801f8fa <_sbrk_r+0x1a>
 801f8f4:	6823      	ldr	r3, [r4, #0]
 801f8f6:	b103      	cbz	r3, 801f8fa <_sbrk_r+0x1a>
 801f8f8:	602b      	str	r3, [r5, #0]
 801f8fa:	bd38      	pop	{r3, r4, r5, pc}
 801f8fc:	20013d48 	.word	0x20013d48

0801f900 <__sread>:
 801f900:	b510      	push	{r4, lr}
 801f902:	460c      	mov	r4, r1
 801f904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f908:	f000 fa48 	bl	801fd9c <_read_r>
 801f90c:	2800      	cmp	r0, #0
 801f90e:	bfab      	itete	ge
 801f910:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f912:	89a3      	ldrhlt	r3, [r4, #12]
 801f914:	181b      	addge	r3, r3, r0
 801f916:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f91a:	bfac      	ite	ge
 801f91c:	6563      	strge	r3, [r4, #84]	; 0x54
 801f91e:	81a3      	strhlt	r3, [r4, #12]
 801f920:	bd10      	pop	{r4, pc}

0801f922 <__swrite>:
 801f922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f926:	461f      	mov	r7, r3
 801f928:	898b      	ldrh	r3, [r1, #12]
 801f92a:	05db      	lsls	r3, r3, #23
 801f92c:	4605      	mov	r5, r0
 801f92e:	460c      	mov	r4, r1
 801f930:	4616      	mov	r6, r2
 801f932:	d505      	bpl.n	801f940 <__swrite+0x1e>
 801f934:	2302      	movs	r3, #2
 801f936:	2200      	movs	r2, #0
 801f938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f93c:	f000 f9b6 	bl	801fcac <_lseek_r>
 801f940:	89a3      	ldrh	r3, [r4, #12]
 801f942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f94a:	81a3      	strh	r3, [r4, #12]
 801f94c:	4632      	mov	r2, r6
 801f94e:	463b      	mov	r3, r7
 801f950:	4628      	mov	r0, r5
 801f952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f956:	f000 b869 	b.w	801fa2c <_write_r>

0801f95a <__sseek>:
 801f95a:	b510      	push	{r4, lr}
 801f95c:	460c      	mov	r4, r1
 801f95e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f962:	f000 f9a3 	bl	801fcac <_lseek_r>
 801f966:	1c43      	adds	r3, r0, #1
 801f968:	89a3      	ldrh	r3, [r4, #12]
 801f96a:	bf15      	itete	ne
 801f96c:	6560      	strne	r0, [r4, #84]	; 0x54
 801f96e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f976:	81a3      	strheq	r3, [r4, #12]
 801f978:	bf18      	it	ne
 801f97a:	81a3      	strhne	r3, [r4, #12]
 801f97c:	bd10      	pop	{r4, pc}

0801f97e <__sclose>:
 801f97e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f982:	f000 b8d3 	b.w	801fb2c <_close_r>
	...

0801f988 <__swbuf_r>:
 801f988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f98a:	460e      	mov	r6, r1
 801f98c:	4614      	mov	r4, r2
 801f98e:	4605      	mov	r5, r0
 801f990:	b118      	cbz	r0, 801f99a <__swbuf_r+0x12>
 801f992:	6983      	ldr	r3, [r0, #24]
 801f994:	b90b      	cbnz	r3, 801f99a <__swbuf_r+0x12>
 801f996:	f7ff fba1 	bl	801f0dc <__sinit>
 801f99a:	4b21      	ldr	r3, [pc, #132]	; (801fa20 <__swbuf_r+0x98>)
 801f99c:	429c      	cmp	r4, r3
 801f99e:	d12a      	bne.n	801f9f6 <__swbuf_r+0x6e>
 801f9a0:	686c      	ldr	r4, [r5, #4]
 801f9a2:	69a3      	ldr	r3, [r4, #24]
 801f9a4:	60a3      	str	r3, [r4, #8]
 801f9a6:	89a3      	ldrh	r3, [r4, #12]
 801f9a8:	071a      	lsls	r2, r3, #28
 801f9aa:	d52e      	bpl.n	801fa0a <__swbuf_r+0x82>
 801f9ac:	6923      	ldr	r3, [r4, #16]
 801f9ae:	b363      	cbz	r3, 801fa0a <__swbuf_r+0x82>
 801f9b0:	6923      	ldr	r3, [r4, #16]
 801f9b2:	6820      	ldr	r0, [r4, #0]
 801f9b4:	1ac0      	subs	r0, r0, r3
 801f9b6:	6963      	ldr	r3, [r4, #20]
 801f9b8:	b2f6      	uxtb	r6, r6
 801f9ba:	4283      	cmp	r3, r0
 801f9bc:	4637      	mov	r7, r6
 801f9be:	dc04      	bgt.n	801f9ca <__swbuf_r+0x42>
 801f9c0:	4621      	mov	r1, r4
 801f9c2:	4628      	mov	r0, r5
 801f9c4:	f000 f948 	bl	801fc58 <_fflush_r>
 801f9c8:	bb28      	cbnz	r0, 801fa16 <__swbuf_r+0x8e>
 801f9ca:	68a3      	ldr	r3, [r4, #8]
 801f9cc:	3b01      	subs	r3, #1
 801f9ce:	60a3      	str	r3, [r4, #8]
 801f9d0:	6823      	ldr	r3, [r4, #0]
 801f9d2:	1c5a      	adds	r2, r3, #1
 801f9d4:	6022      	str	r2, [r4, #0]
 801f9d6:	701e      	strb	r6, [r3, #0]
 801f9d8:	6963      	ldr	r3, [r4, #20]
 801f9da:	3001      	adds	r0, #1
 801f9dc:	4283      	cmp	r3, r0
 801f9de:	d004      	beq.n	801f9ea <__swbuf_r+0x62>
 801f9e0:	89a3      	ldrh	r3, [r4, #12]
 801f9e2:	07db      	lsls	r3, r3, #31
 801f9e4:	d519      	bpl.n	801fa1a <__swbuf_r+0x92>
 801f9e6:	2e0a      	cmp	r6, #10
 801f9e8:	d117      	bne.n	801fa1a <__swbuf_r+0x92>
 801f9ea:	4621      	mov	r1, r4
 801f9ec:	4628      	mov	r0, r5
 801f9ee:	f000 f933 	bl	801fc58 <_fflush_r>
 801f9f2:	b190      	cbz	r0, 801fa1a <__swbuf_r+0x92>
 801f9f4:	e00f      	b.n	801fa16 <__swbuf_r+0x8e>
 801f9f6:	4b0b      	ldr	r3, [pc, #44]	; (801fa24 <__swbuf_r+0x9c>)
 801f9f8:	429c      	cmp	r4, r3
 801f9fa:	d101      	bne.n	801fa00 <__swbuf_r+0x78>
 801f9fc:	68ac      	ldr	r4, [r5, #8]
 801f9fe:	e7d0      	b.n	801f9a2 <__swbuf_r+0x1a>
 801fa00:	4b09      	ldr	r3, [pc, #36]	; (801fa28 <__swbuf_r+0xa0>)
 801fa02:	429c      	cmp	r4, r3
 801fa04:	bf08      	it	eq
 801fa06:	68ec      	ldreq	r4, [r5, #12]
 801fa08:	e7cb      	b.n	801f9a2 <__swbuf_r+0x1a>
 801fa0a:	4621      	mov	r1, r4
 801fa0c:	4628      	mov	r0, r5
 801fa0e:	f000 f81f 	bl	801fa50 <__swsetup_r>
 801fa12:	2800      	cmp	r0, #0
 801fa14:	d0cc      	beq.n	801f9b0 <__swbuf_r+0x28>
 801fa16:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801fa1a:	4638      	mov	r0, r7
 801fa1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fa1e:	bf00      	nop
 801fa20:	08033840 	.word	0x08033840
 801fa24:	08033860 	.word	0x08033860
 801fa28:	08033820 	.word	0x08033820

0801fa2c <_write_r>:
 801fa2c:	b538      	push	{r3, r4, r5, lr}
 801fa2e:	4c07      	ldr	r4, [pc, #28]	; (801fa4c <_write_r+0x20>)
 801fa30:	4605      	mov	r5, r0
 801fa32:	4608      	mov	r0, r1
 801fa34:	4611      	mov	r1, r2
 801fa36:	2200      	movs	r2, #0
 801fa38:	6022      	str	r2, [r4, #0]
 801fa3a:	461a      	mov	r2, r3
 801fa3c:	f7ea f95d 	bl	8009cfa <_write>
 801fa40:	1c43      	adds	r3, r0, #1
 801fa42:	d102      	bne.n	801fa4a <_write_r+0x1e>
 801fa44:	6823      	ldr	r3, [r4, #0]
 801fa46:	b103      	cbz	r3, 801fa4a <_write_r+0x1e>
 801fa48:	602b      	str	r3, [r5, #0]
 801fa4a:	bd38      	pop	{r3, r4, r5, pc}
 801fa4c:	20013d48 	.word	0x20013d48

0801fa50 <__swsetup_r>:
 801fa50:	4b32      	ldr	r3, [pc, #200]	; (801fb1c <__swsetup_r+0xcc>)
 801fa52:	b570      	push	{r4, r5, r6, lr}
 801fa54:	681d      	ldr	r5, [r3, #0]
 801fa56:	4606      	mov	r6, r0
 801fa58:	460c      	mov	r4, r1
 801fa5a:	b125      	cbz	r5, 801fa66 <__swsetup_r+0x16>
 801fa5c:	69ab      	ldr	r3, [r5, #24]
 801fa5e:	b913      	cbnz	r3, 801fa66 <__swsetup_r+0x16>
 801fa60:	4628      	mov	r0, r5
 801fa62:	f7ff fb3b 	bl	801f0dc <__sinit>
 801fa66:	4b2e      	ldr	r3, [pc, #184]	; (801fb20 <__swsetup_r+0xd0>)
 801fa68:	429c      	cmp	r4, r3
 801fa6a:	d10f      	bne.n	801fa8c <__swsetup_r+0x3c>
 801fa6c:	686c      	ldr	r4, [r5, #4]
 801fa6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fa72:	b29a      	uxth	r2, r3
 801fa74:	0715      	lsls	r5, r2, #28
 801fa76:	d42c      	bmi.n	801fad2 <__swsetup_r+0x82>
 801fa78:	06d0      	lsls	r0, r2, #27
 801fa7a:	d411      	bmi.n	801faa0 <__swsetup_r+0x50>
 801fa7c:	2209      	movs	r2, #9
 801fa7e:	6032      	str	r2, [r6, #0]
 801fa80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fa84:	81a3      	strh	r3, [r4, #12]
 801fa86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fa8a:	e03e      	b.n	801fb0a <__swsetup_r+0xba>
 801fa8c:	4b25      	ldr	r3, [pc, #148]	; (801fb24 <__swsetup_r+0xd4>)
 801fa8e:	429c      	cmp	r4, r3
 801fa90:	d101      	bne.n	801fa96 <__swsetup_r+0x46>
 801fa92:	68ac      	ldr	r4, [r5, #8]
 801fa94:	e7eb      	b.n	801fa6e <__swsetup_r+0x1e>
 801fa96:	4b24      	ldr	r3, [pc, #144]	; (801fb28 <__swsetup_r+0xd8>)
 801fa98:	429c      	cmp	r4, r3
 801fa9a:	bf08      	it	eq
 801fa9c:	68ec      	ldreq	r4, [r5, #12]
 801fa9e:	e7e6      	b.n	801fa6e <__swsetup_r+0x1e>
 801faa0:	0751      	lsls	r1, r2, #29
 801faa2:	d512      	bpl.n	801faca <__swsetup_r+0x7a>
 801faa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801faa6:	b141      	cbz	r1, 801faba <__swsetup_r+0x6a>
 801faa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801faac:	4299      	cmp	r1, r3
 801faae:	d002      	beq.n	801fab6 <__swsetup_r+0x66>
 801fab0:	4630      	mov	r0, r6
 801fab2:	f7ff fba5 	bl	801f200 <_free_r>
 801fab6:	2300      	movs	r3, #0
 801fab8:	6363      	str	r3, [r4, #52]	; 0x34
 801faba:	89a3      	ldrh	r3, [r4, #12]
 801fabc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fac0:	81a3      	strh	r3, [r4, #12]
 801fac2:	2300      	movs	r3, #0
 801fac4:	6063      	str	r3, [r4, #4]
 801fac6:	6923      	ldr	r3, [r4, #16]
 801fac8:	6023      	str	r3, [r4, #0]
 801faca:	89a3      	ldrh	r3, [r4, #12]
 801facc:	f043 0308 	orr.w	r3, r3, #8
 801fad0:	81a3      	strh	r3, [r4, #12]
 801fad2:	6923      	ldr	r3, [r4, #16]
 801fad4:	b94b      	cbnz	r3, 801faea <__swsetup_r+0x9a>
 801fad6:	89a3      	ldrh	r3, [r4, #12]
 801fad8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fadc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fae0:	d003      	beq.n	801faea <__swsetup_r+0x9a>
 801fae2:	4621      	mov	r1, r4
 801fae4:	4630      	mov	r0, r6
 801fae6:	f000 f917 	bl	801fd18 <__smakebuf_r>
 801faea:	89a2      	ldrh	r2, [r4, #12]
 801faec:	f012 0301 	ands.w	r3, r2, #1
 801faf0:	d00c      	beq.n	801fb0c <__swsetup_r+0xbc>
 801faf2:	2300      	movs	r3, #0
 801faf4:	60a3      	str	r3, [r4, #8]
 801faf6:	6963      	ldr	r3, [r4, #20]
 801faf8:	425b      	negs	r3, r3
 801fafa:	61a3      	str	r3, [r4, #24]
 801fafc:	6923      	ldr	r3, [r4, #16]
 801fafe:	b953      	cbnz	r3, 801fb16 <__swsetup_r+0xc6>
 801fb00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fb04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801fb08:	d1ba      	bne.n	801fa80 <__swsetup_r+0x30>
 801fb0a:	bd70      	pop	{r4, r5, r6, pc}
 801fb0c:	0792      	lsls	r2, r2, #30
 801fb0e:	bf58      	it	pl
 801fb10:	6963      	ldrpl	r3, [r4, #20]
 801fb12:	60a3      	str	r3, [r4, #8]
 801fb14:	e7f2      	b.n	801fafc <__swsetup_r+0xac>
 801fb16:	2000      	movs	r0, #0
 801fb18:	e7f7      	b.n	801fb0a <__swsetup_r+0xba>
 801fb1a:	bf00      	nop
 801fb1c:	2000005c 	.word	0x2000005c
 801fb20:	08033840 	.word	0x08033840
 801fb24:	08033860 	.word	0x08033860
 801fb28:	08033820 	.word	0x08033820

0801fb2c <_close_r>:
 801fb2c:	b538      	push	{r3, r4, r5, lr}
 801fb2e:	4c06      	ldr	r4, [pc, #24]	; (801fb48 <_close_r+0x1c>)
 801fb30:	2300      	movs	r3, #0
 801fb32:	4605      	mov	r5, r0
 801fb34:	4608      	mov	r0, r1
 801fb36:	6023      	str	r3, [r4, #0]
 801fb38:	f7ea f8fb 	bl	8009d32 <_close>
 801fb3c:	1c43      	adds	r3, r0, #1
 801fb3e:	d102      	bne.n	801fb46 <_close_r+0x1a>
 801fb40:	6823      	ldr	r3, [r4, #0]
 801fb42:	b103      	cbz	r3, 801fb46 <_close_r+0x1a>
 801fb44:	602b      	str	r3, [r5, #0]
 801fb46:	bd38      	pop	{r3, r4, r5, pc}
 801fb48:	20013d48 	.word	0x20013d48

0801fb4c <__sflush_r>:
 801fb4c:	898a      	ldrh	r2, [r1, #12]
 801fb4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb52:	4605      	mov	r5, r0
 801fb54:	0710      	lsls	r0, r2, #28
 801fb56:	460c      	mov	r4, r1
 801fb58:	d458      	bmi.n	801fc0c <__sflush_r+0xc0>
 801fb5a:	684b      	ldr	r3, [r1, #4]
 801fb5c:	2b00      	cmp	r3, #0
 801fb5e:	dc05      	bgt.n	801fb6c <__sflush_r+0x20>
 801fb60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801fb62:	2b00      	cmp	r3, #0
 801fb64:	dc02      	bgt.n	801fb6c <__sflush_r+0x20>
 801fb66:	2000      	movs	r0, #0
 801fb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fb6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fb6e:	2e00      	cmp	r6, #0
 801fb70:	d0f9      	beq.n	801fb66 <__sflush_r+0x1a>
 801fb72:	2300      	movs	r3, #0
 801fb74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fb78:	682f      	ldr	r7, [r5, #0]
 801fb7a:	6a21      	ldr	r1, [r4, #32]
 801fb7c:	602b      	str	r3, [r5, #0]
 801fb7e:	d032      	beq.n	801fbe6 <__sflush_r+0x9a>
 801fb80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801fb82:	89a3      	ldrh	r3, [r4, #12]
 801fb84:	075a      	lsls	r2, r3, #29
 801fb86:	d505      	bpl.n	801fb94 <__sflush_r+0x48>
 801fb88:	6863      	ldr	r3, [r4, #4]
 801fb8a:	1ac0      	subs	r0, r0, r3
 801fb8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fb8e:	b10b      	cbz	r3, 801fb94 <__sflush_r+0x48>
 801fb90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fb92:	1ac0      	subs	r0, r0, r3
 801fb94:	2300      	movs	r3, #0
 801fb96:	4602      	mov	r2, r0
 801fb98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fb9a:	6a21      	ldr	r1, [r4, #32]
 801fb9c:	4628      	mov	r0, r5
 801fb9e:	47b0      	blx	r6
 801fba0:	1c43      	adds	r3, r0, #1
 801fba2:	89a3      	ldrh	r3, [r4, #12]
 801fba4:	d106      	bne.n	801fbb4 <__sflush_r+0x68>
 801fba6:	6829      	ldr	r1, [r5, #0]
 801fba8:	291d      	cmp	r1, #29
 801fbaa:	d848      	bhi.n	801fc3e <__sflush_r+0xf2>
 801fbac:	4a29      	ldr	r2, [pc, #164]	; (801fc54 <__sflush_r+0x108>)
 801fbae:	40ca      	lsrs	r2, r1
 801fbb0:	07d6      	lsls	r6, r2, #31
 801fbb2:	d544      	bpl.n	801fc3e <__sflush_r+0xf2>
 801fbb4:	2200      	movs	r2, #0
 801fbb6:	6062      	str	r2, [r4, #4]
 801fbb8:	04d9      	lsls	r1, r3, #19
 801fbba:	6922      	ldr	r2, [r4, #16]
 801fbbc:	6022      	str	r2, [r4, #0]
 801fbbe:	d504      	bpl.n	801fbca <__sflush_r+0x7e>
 801fbc0:	1c42      	adds	r2, r0, #1
 801fbc2:	d101      	bne.n	801fbc8 <__sflush_r+0x7c>
 801fbc4:	682b      	ldr	r3, [r5, #0]
 801fbc6:	b903      	cbnz	r3, 801fbca <__sflush_r+0x7e>
 801fbc8:	6560      	str	r0, [r4, #84]	; 0x54
 801fbca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fbcc:	602f      	str	r7, [r5, #0]
 801fbce:	2900      	cmp	r1, #0
 801fbd0:	d0c9      	beq.n	801fb66 <__sflush_r+0x1a>
 801fbd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fbd6:	4299      	cmp	r1, r3
 801fbd8:	d002      	beq.n	801fbe0 <__sflush_r+0x94>
 801fbda:	4628      	mov	r0, r5
 801fbdc:	f7ff fb10 	bl	801f200 <_free_r>
 801fbe0:	2000      	movs	r0, #0
 801fbe2:	6360      	str	r0, [r4, #52]	; 0x34
 801fbe4:	e7c0      	b.n	801fb68 <__sflush_r+0x1c>
 801fbe6:	2301      	movs	r3, #1
 801fbe8:	4628      	mov	r0, r5
 801fbea:	47b0      	blx	r6
 801fbec:	1c41      	adds	r1, r0, #1
 801fbee:	d1c8      	bne.n	801fb82 <__sflush_r+0x36>
 801fbf0:	682b      	ldr	r3, [r5, #0]
 801fbf2:	2b00      	cmp	r3, #0
 801fbf4:	d0c5      	beq.n	801fb82 <__sflush_r+0x36>
 801fbf6:	2b1d      	cmp	r3, #29
 801fbf8:	d001      	beq.n	801fbfe <__sflush_r+0xb2>
 801fbfa:	2b16      	cmp	r3, #22
 801fbfc:	d101      	bne.n	801fc02 <__sflush_r+0xb6>
 801fbfe:	602f      	str	r7, [r5, #0]
 801fc00:	e7b1      	b.n	801fb66 <__sflush_r+0x1a>
 801fc02:	89a3      	ldrh	r3, [r4, #12]
 801fc04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fc08:	81a3      	strh	r3, [r4, #12]
 801fc0a:	e7ad      	b.n	801fb68 <__sflush_r+0x1c>
 801fc0c:	690f      	ldr	r7, [r1, #16]
 801fc0e:	2f00      	cmp	r7, #0
 801fc10:	d0a9      	beq.n	801fb66 <__sflush_r+0x1a>
 801fc12:	0793      	lsls	r3, r2, #30
 801fc14:	680e      	ldr	r6, [r1, #0]
 801fc16:	bf08      	it	eq
 801fc18:	694b      	ldreq	r3, [r1, #20]
 801fc1a:	600f      	str	r7, [r1, #0]
 801fc1c:	bf18      	it	ne
 801fc1e:	2300      	movne	r3, #0
 801fc20:	eba6 0807 	sub.w	r8, r6, r7
 801fc24:	608b      	str	r3, [r1, #8]
 801fc26:	f1b8 0f00 	cmp.w	r8, #0
 801fc2a:	dd9c      	ble.n	801fb66 <__sflush_r+0x1a>
 801fc2c:	4643      	mov	r3, r8
 801fc2e:	463a      	mov	r2, r7
 801fc30:	6a21      	ldr	r1, [r4, #32]
 801fc32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801fc34:	4628      	mov	r0, r5
 801fc36:	47b0      	blx	r6
 801fc38:	2800      	cmp	r0, #0
 801fc3a:	dc06      	bgt.n	801fc4a <__sflush_r+0xfe>
 801fc3c:	89a3      	ldrh	r3, [r4, #12]
 801fc3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fc42:	81a3      	strh	r3, [r4, #12]
 801fc44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fc48:	e78e      	b.n	801fb68 <__sflush_r+0x1c>
 801fc4a:	4407      	add	r7, r0
 801fc4c:	eba8 0800 	sub.w	r8, r8, r0
 801fc50:	e7e9      	b.n	801fc26 <__sflush_r+0xda>
 801fc52:	bf00      	nop
 801fc54:	20400001 	.word	0x20400001

0801fc58 <_fflush_r>:
 801fc58:	b538      	push	{r3, r4, r5, lr}
 801fc5a:	690b      	ldr	r3, [r1, #16]
 801fc5c:	4605      	mov	r5, r0
 801fc5e:	460c      	mov	r4, r1
 801fc60:	b1db      	cbz	r3, 801fc9a <_fflush_r+0x42>
 801fc62:	b118      	cbz	r0, 801fc6c <_fflush_r+0x14>
 801fc64:	6983      	ldr	r3, [r0, #24]
 801fc66:	b90b      	cbnz	r3, 801fc6c <_fflush_r+0x14>
 801fc68:	f7ff fa38 	bl	801f0dc <__sinit>
 801fc6c:	4b0c      	ldr	r3, [pc, #48]	; (801fca0 <_fflush_r+0x48>)
 801fc6e:	429c      	cmp	r4, r3
 801fc70:	d109      	bne.n	801fc86 <_fflush_r+0x2e>
 801fc72:	686c      	ldr	r4, [r5, #4]
 801fc74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fc78:	b17b      	cbz	r3, 801fc9a <_fflush_r+0x42>
 801fc7a:	4621      	mov	r1, r4
 801fc7c:	4628      	mov	r0, r5
 801fc7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fc82:	f7ff bf63 	b.w	801fb4c <__sflush_r>
 801fc86:	4b07      	ldr	r3, [pc, #28]	; (801fca4 <_fflush_r+0x4c>)
 801fc88:	429c      	cmp	r4, r3
 801fc8a:	d101      	bne.n	801fc90 <_fflush_r+0x38>
 801fc8c:	68ac      	ldr	r4, [r5, #8]
 801fc8e:	e7f1      	b.n	801fc74 <_fflush_r+0x1c>
 801fc90:	4b05      	ldr	r3, [pc, #20]	; (801fca8 <_fflush_r+0x50>)
 801fc92:	429c      	cmp	r4, r3
 801fc94:	bf08      	it	eq
 801fc96:	68ec      	ldreq	r4, [r5, #12]
 801fc98:	e7ec      	b.n	801fc74 <_fflush_r+0x1c>
 801fc9a:	2000      	movs	r0, #0
 801fc9c:	bd38      	pop	{r3, r4, r5, pc}
 801fc9e:	bf00      	nop
 801fca0:	08033840 	.word	0x08033840
 801fca4:	08033860 	.word	0x08033860
 801fca8:	08033820 	.word	0x08033820

0801fcac <_lseek_r>:
 801fcac:	b538      	push	{r3, r4, r5, lr}
 801fcae:	4c07      	ldr	r4, [pc, #28]	; (801fccc <_lseek_r+0x20>)
 801fcb0:	4605      	mov	r5, r0
 801fcb2:	4608      	mov	r0, r1
 801fcb4:	4611      	mov	r1, r2
 801fcb6:	2200      	movs	r2, #0
 801fcb8:	6022      	str	r2, [r4, #0]
 801fcba:	461a      	mov	r2, r3
 801fcbc:	f7ea f860 	bl	8009d80 <_lseek>
 801fcc0:	1c43      	adds	r3, r0, #1
 801fcc2:	d102      	bne.n	801fcca <_lseek_r+0x1e>
 801fcc4:	6823      	ldr	r3, [r4, #0]
 801fcc6:	b103      	cbz	r3, 801fcca <_lseek_r+0x1e>
 801fcc8:	602b      	str	r3, [r5, #0]
 801fcca:	bd38      	pop	{r3, r4, r5, pc}
 801fccc:	20013d48 	.word	0x20013d48

0801fcd0 <__swhatbuf_r>:
 801fcd0:	b570      	push	{r4, r5, r6, lr}
 801fcd2:	460e      	mov	r6, r1
 801fcd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fcd8:	2900      	cmp	r1, #0
 801fcda:	b096      	sub	sp, #88	; 0x58
 801fcdc:	4614      	mov	r4, r2
 801fcde:	461d      	mov	r5, r3
 801fce0:	da07      	bge.n	801fcf2 <__swhatbuf_r+0x22>
 801fce2:	2300      	movs	r3, #0
 801fce4:	602b      	str	r3, [r5, #0]
 801fce6:	89b3      	ldrh	r3, [r6, #12]
 801fce8:	061a      	lsls	r2, r3, #24
 801fcea:	d410      	bmi.n	801fd0e <__swhatbuf_r+0x3e>
 801fcec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fcf0:	e00e      	b.n	801fd10 <__swhatbuf_r+0x40>
 801fcf2:	466a      	mov	r2, sp
 801fcf4:	f000 f864 	bl	801fdc0 <_fstat_r>
 801fcf8:	2800      	cmp	r0, #0
 801fcfa:	dbf2      	blt.n	801fce2 <__swhatbuf_r+0x12>
 801fcfc:	9a01      	ldr	r2, [sp, #4]
 801fcfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801fd02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801fd06:	425a      	negs	r2, r3
 801fd08:	415a      	adcs	r2, r3
 801fd0a:	602a      	str	r2, [r5, #0]
 801fd0c:	e7ee      	b.n	801fcec <__swhatbuf_r+0x1c>
 801fd0e:	2340      	movs	r3, #64	; 0x40
 801fd10:	2000      	movs	r0, #0
 801fd12:	6023      	str	r3, [r4, #0]
 801fd14:	b016      	add	sp, #88	; 0x58
 801fd16:	bd70      	pop	{r4, r5, r6, pc}

0801fd18 <__smakebuf_r>:
 801fd18:	898b      	ldrh	r3, [r1, #12]
 801fd1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fd1c:	079d      	lsls	r5, r3, #30
 801fd1e:	4606      	mov	r6, r0
 801fd20:	460c      	mov	r4, r1
 801fd22:	d507      	bpl.n	801fd34 <__smakebuf_r+0x1c>
 801fd24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fd28:	6023      	str	r3, [r4, #0]
 801fd2a:	6123      	str	r3, [r4, #16]
 801fd2c:	2301      	movs	r3, #1
 801fd2e:	6163      	str	r3, [r4, #20]
 801fd30:	b002      	add	sp, #8
 801fd32:	bd70      	pop	{r4, r5, r6, pc}
 801fd34:	ab01      	add	r3, sp, #4
 801fd36:	466a      	mov	r2, sp
 801fd38:	f7ff ffca 	bl	801fcd0 <__swhatbuf_r>
 801fd3c:	9900      	ldr	r1, [sp, #0]
 801fd3e:	4605      	mov	r5, r0
 801fd40:	4630      	mov	r0, r6
 801fd42:	f7ff faab 	bl	801f29c <_malloc_r>
 801fd46:	b948      	cbnz	r0, 801fd5c <__smakebuf_r+0x44>
 801fd48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fd4c:	059a      	lsls	r2, r3, #22
 801fd4e:	d4ef      	bmi.n	801fd30 <__smakebuf_r+0x18>
 801fd50:	f023 0303 	bic.w	r3, r3, #3
 801fd54:	f043 0302 	orr.w	r3, r3, #2
 801fd58:	81a3      	strh	r3, [r4, #12]
 801fd5a:	e7e3      	b.n	801fd24 <__smakebuf_r+0xc>
 801fd5c:	4b0d      	ldr	r3, [pc, #52]	; (801fd94 <__smakebuf_r+0x7c>)
 801fd5e:	62b3      	str	r3, [r6, #40]	; 0x28
 801fd60:	89a3      	ldrh	r3, [r4, #12]
 801fd62:	6020      	str	r0, [r4, #0]
 801fd64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fd68:	81a3      	strh	r3, [r4, #12]
 801fd6a:	9b00      	ldr	r3, [sp, #0]
 801fd6c:	6163      	str	r3, [r4, #20]
 801fd6e:	9b01      	ldr	r3, [sp, #4]
 801fd70:	6120      	str	r0, [r4, #16]
 801fd72:	b15b      	cbz	r3, 801fd8c <__smakebuf_r+0x74>
 801fd74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fd78:	4630      	mov	r0, r6
 801fd7a:	f000 f833 	bl	801fde4 <_isatty_r>
 801fd7e:	b128      	cbz	r0, 801fd8c <__smakebuf_r+0x74>
 801fd80:	89a3      	ldrh	r3, [r4, #12]
 801fd82:	f023 0303 	bic.w	r3, r3, #3
 801fd86:	f043 0301 	orr.w	r3, r3, #1
 801fd8a:	81a3      	strh	r3, [r4, #12]
 801fd8c:	89a3      	ldrh	r3, [r4, #12]
 801fd8e:	431d      	orrs	r5, r3
 801fd90:	81a5      	strh	r5, [r4, #12]
 801fd92:	e7cd      	b.n	801fd30 <__smakebuf_r+0x18>
 801fd94:	0801f0a5 	.word	0x0801f0a5

0801fd98 <__malloc_lock>:
 801fd98:	4770      	bx	lr

0801fd9a <__malloc_unlock>:
 801fd9a:	4770      	bx	lr

0801fd9c <_read_r>:
 801fd9c:	b538      	push	{r3, r4, r5, lr}
 801fd9e:	4c07      	ldr	r4, [pc, #28]	; (801fdbc <_read_r+0x20>)
 801fda0:	4605      	mov	r5, r0
 801fda2:	4608      	mov	r0, r1
 801fda4:	4611      	mov	r1, r2
 801fda6:	2200      	movs	r2, #0
 801fda8:	6022      	str	r2, [r4, #0]
 801fdaa:	461a      	mov	r2, r3
 801fdac:	f7e9 ff88 	bl	8009cc0 <_read>
 801fdb0:	1c43      	adds	r3, r0, #1
 801fdb2:	d102      	bne.n	801fdba <_read_r+0x1e>
 801fdb4:	6823      	ldr	r3, [r4, #0]
 801fdb6:	b103      	cbz	r3, 801fdba <_read_r+0x1e>
 801fdb8:	602b      	str	r3, [r5, #0]
 801fdba:	bd38      	pop	{r3, r4, r5, pc}
 801fdbc:	20013d48 	.word	0x20013d48

0801fdc0 <_fstat_r>:
 801fdc0:	b538      	push	{r3, r4, r5, lr}
 801fdc2:	4c07      	ldr	r4, [pc, #28]	; (801fde0 <_fstat_r+0x20>)
 801fdc4:	2300      	movs	r3, #0
 801fdc6:	4605      	mov	r5, r0
 801fdc8:	4608      	mov	r0, r1
 801fdca:	4611      	mov	r1, r2
 801fdcc:	6023      	str	r3, [r4, #0]
 801fdce:	f7e9 ffbc 	bl	8009d4a <_fstat>
 801fdd2:	1c43      	adds	r3, r0, #1
 801fdd4:	d102      	bne.n	801fddc <_fstat_r+0x1c>
 801fdd6:	6823      	ldr	r3, [r4, #0]
 801fdd8:	b103      	cbz	r3, 801fddc <_fstat_r+0x1c>
 801fdda:	602b      	str	r3, [r5, #0]
 801fddc:	bd38      	pop	{r3, r4, r5, pc}
 801fdde:	bf00      	nop
 801fde0:	20013d48 	.word	0x20013d48

0801fde4 <_isatty_r>:
 801fde4:	b538      	push	{r3, r4, r5, lr}
 801fde6:	4c06      	ldr	r4, [pc, #24]	; (801fe00 <_isatty_r+0x1c>)
 801fde8:	2300      	movs	r3, #0
 801fdea:	4605      	mov	r5, r0
 801fdec:	4608      	mov	r0, r1
 801fdee:	6023      	str	r3, [r4, #0]
 801fdf0:	f7e9 ffbb 	bl	8009d6a <_isatty>
 801fdf4:	1c43      	adds	r3, r0, #1
 801fdf6:	d102      	bne.n	801fdfe <_isatty_r+0x1a>
 801fdf8:	6823      	ldr	r3, [r4, #0]
 801fdfa:	b103      	cbz	r3, 801fdfe <_isatty_r+0x1a>
 801fdfc:	602b      	str	r3, [r5, #0]
 801fdfe:	bd38      	pop	{r3, r4, r5, pc}
 801fe00:	20013d48 	.word	0x20013d48

0801fe04 <_init>:
 801fe04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe06:	bf00      	nop
 801fe08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fe0a:	bc08      	pop	{r3}
 801fe0c:	469e      	mov	lr, r3
 801fe0e:	4770      	bx	lr

0801fe10 <_fini>:
 801fe10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe12:	bf00      	nop
 801fe14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fe16:	bc08      	pop	{r3}
 801fe18:	469e      	mov	lr, r3
 801fe1a:	4770      	bx	lr
