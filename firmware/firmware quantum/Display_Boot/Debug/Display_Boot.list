
Display_Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a60  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003da8  08003da8  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  08003da8  08003da8  00013da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003db0  08003db0  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003db0  08003db0  00013db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003db4  08003db4  00013db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .shared       00000040  20000010  08003dc8  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000053c  20000050  08003e08  00020050  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000058c  08003e08  0002058c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000990c  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000270c  00000000  00000000  0002998c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000d08  00000000  00000000  0002c098  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b40  00000000  00000000  0002cda0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002bb36  00000000  00000000  0002d8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000c740  00000000  00000000  00059416  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000fd88a  00000000  00000000  00065b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001633e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f48  00000000  00000000  0016345c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	; (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	20000050 	.word	0x20000050
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08003bfc 	.word	0x08003bfc

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000054 	.word	0x20000054
 80001f0:	08003bfc 	.word	0x08003bfc

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000204:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000208:	f000 b972 	b.w	80004f0 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9e08      	ldr	r6, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	4688      	mov	r8, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14b      	bne.n	80002ca <__udivmoddi4+0xa6>
 8000232:	428a      	cmp	r2, r1
 8000234:	4615      	mov	r5, r2
 8000236:	d967      	bls.n	8000308 <__udivmoddi4+0xe4>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b14a      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 800023e:	f1c2 0720 	rsb	r7, r2, #32
 8000242:	fa01 f302 	lsl.w	r3, r1, r2
 8000246:	fa20 f707 	lsr.w	r7, r0, r7
 800024a:	4095      	lsls	r5, r2
 800024c:	ea47 0803 	orr.w	r8, r7, r3
 8000250:	4094      	lsls	r4, r2
 8000252:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000256:	0c23      	lsrs	r3, r4, #16
 8000258:	fbb8 f7fe 	udiv	r7, r8, lr
 800025c:	fa1f fc85 	uxth.w	ip, r5
 8000260:	fb0e 8817 	mls	r8, lr, r7, r8
 8000264:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000268:	fb07 f10c 	mul.w	r1, r7, ip
 800026c:	4299      	cmp	r1, r3
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x60>
 8000270:	18eb      	adds	r3, r5, r3
 8000272:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000276:	f080 811b 	bcs.w	80004b0 <__udivmoddi4+0x28c>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 8118 	bls.w	80004b0 <__udivmoddi4+0x28c>
 8000280:	3f02      	subs	r7, #2
 8000282:	442b      	add	r3, r5
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0fe 	udiv	r0, r3, lr
 800028c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 fc0c 	mul.w	ip, r0, ip
 8000298:	45a4      	cmp	ip, r4
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x8c>
 800029c:	192c      	adds	r4, r5, r4
 800029e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x290>
 80002a6:	45a4      	cmp	ip, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x290>
 80002ac:	3802      	subs	r0, #2
 80002ae:	442c      	add	r4, r5
 80002b0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b4:	eba4 040c 	sub.w	r4, r4, ip
 80002b8:	2700      	movs	r7, #0
 80002ba:	b11e      	cbz	r6, 80002c4 <__udivmoddi4+0xa0>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c6 4300 	strd	r4, r3, [r6]
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xbe>
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	f000 80eb 	beq.w	80004aa <__udivmoddi4+0x286>
 80002d4:	2700      	movs	r7, #0
 80002d6:	e9c6 0100 	strd	r0, r1, [r6]
 80002da:	4638      	mov	r0, r7
 80002dc:	4639      	mov	r1, r7
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f783 	clz	r7, r3
 80002e6:	2f00      	cmp	r7, #0
 80002e8:	d147      	bne.n	800037a <__udivmoddi4+0x156>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd0>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80fa 	bhi.w	80004e8 <__udivmoddi4+0x2c4>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4698      	mov	r8, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa0>
 8000302:	e9c6 4800 	strd	r4, r8, [r6]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xe8>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 808f 	bne.w	8000434 <__udivmoddi4+0x210>
 8000316:	1b49      	subs	r1, r1, r5
 8000318:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800031c:	fa1f f885 	uxth.w	r8, r5
 8000320:	2701      	movs	r7, #1
 8000322:	fbb1 fcfe 	udiv	ip, r1, lr
 8000326:	0c23      	lsrs	r3, r4, #16
 8000328:	fb0e 111c 	mls	r1, lr, ip, r1
 800032c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000330:	fb08 f10c 	mul.w	r1, r8, ip
 8000334:	4299      	cmp	r1, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x124>
 8000338:	18eb      	adds	r3, r5, r3
 800033a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x122>
 8000340:	4299      	cmp	r1, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2bc>
 8000346:	4684      	mov	ip, r0
 8000348:	1a59      	subs	r1, r3, r1
 800034a:	b2a3      	uxth	r3, r4
 800034c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000350:	fb0e 1410 	mls	r4, lr, r0, r1
 8000354:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000358:	fb08 f800 	mul.w	r8, r8, r0
 800035c:	45a0      	cmp	r8, r4
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x14c>
 8000360:	192c      	adds	r4, r5, r4
 8000362:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x14a>
 8000368:	45a0      	cmp	r8, r4
 800036a:	f200 80b6 	bhi.w	80004da <__udivmoddi4+0x2b6>
 800036e:	4618      	mov	r0, r3
 8000370:	eba4 0408 	sub.w	r4, r4, r8
 8000374:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000378:	e79f      	b.n	80002ba <__udivmoddi4+0x96>
 800037a:	f1c7 0c20 	rsb	ip, r7, #32
 800037e:	40bb      	lsls	r3, r7
 8000380:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000384:	ea4e 0e03 	orr.w	lr, lr, r3
 8000388:	fa01 f407 	lsl.w	r4, r1, r7
 800038c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000390:	fa21 f30c 	lsr.w	r3, r1, ip
 8000394:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000398:	4325      	orrs	r5, r4
 800039a:	fbb3 f9f8 	udiv	r9, r3, r8
 800039e:	0c2c      	lsrs	r4, r5, #16
 80003a0:	fb08 3319 	mls	r3, r8, r9, r3
 80003a4:	fa1f fa8e 	uxth.w	sl, lr
 80003a8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003ac:	fb09 f40a 	mul.w	r4, r9, sl
 80003b0:	429c      	cmp	r4, r3
 80003b2:	fa02 f207 	lsl.w	r2, r2, r7
 80003b6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b0>
 80003bc:	eb1e 0303 	adds.w	r3, lr, r3
 80003c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c4:	f080 8087 	bcs.w	80004d6 <__udivmoddi4+0x2b2>
 80003c8:	429c      	cmp	r4, r3
 80003ca:	f240 8084 	bls.w	80004d6 <__udivmoddi4+0x2b2>
 80003ce:	f1a9 0902 	sub.w	r9, r9, #2
 80003d2:	4473      	add	r3, lr
 80003d4:	1b1b      	subs	r3, r3, r4
 80003d6:	b2ad      	uxth	r5, r5
 80003d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003dc:	fb08 3310 	mls	r3, r8, r0, r3
 80003e0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e8:	45a2      	cmp	sl, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1da>
 80003ec:	eb1e 0404 	adds.w	r4, lr, r4
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f4:	d26b      	bcs.n	80004ce <__udivmoddi4+0x2aa>
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	d969      	bls.n	80004ce <__udivmoddi4+0x2aa>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4474      	add	r4, lr
 80003fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000402:	fba0 8902 	umull	r8, r9, r0, r2
 8000406:	eba4 040a 	sub.w	r4, r4, sl
 800040a:	454c      	cmp	r4, r9
 800040c:	46c2      	mov	sl, r8
 800040e:	464b      	mov	r3, r9
 8000410:	d354      	bcc.n	80004bc <__udivmoddi4+0x298>
 8000412:	d051      	beq.n	80004b8 <__udivmoddi4+0x294>
 8000414:	2e00      	cmp	r6, #0
 8000416:	d069      	beq.n	80004ec <__udivmoddi4+0x2c8>
 8000418:	ebb1 050a 	subs.w	r5, r1, sl
 800041c:	eb64 0403 	sbc.w	r4, r4, r3
 8000420:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000424:	40fd      	lsrs	r5, r7
 8000426:	40fc      	lsrs	r4, r7
 8000428:	ea4c 0505 	orr.w	r5, ip, r5
 800042c:	e9c6 5400 	strd	r5, r4, [r6]
 8000430:	2700      	movs	r7, #0
 8000432:	e747      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f703 	lsr.w	r7, r0, r3
 800043c:	4095      	lsls	r5, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	fa21 f303 	lsr.w	r3, r1, r3
 8000446:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800044a:	4338      	orrs	r0, r7
 800044c:	0c01      	lsrs	r1, r0, #16
 800044e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000452:	fa1f f885 	uxth.w	r8, r5
 8000456:	fb0e 3317 	mls	r3, lr, r7, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb07 f308 	mul.w	r3, r7, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x256>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000470:	d22f      	bcs.n	80004d2 <__udivmoddi4+0x2ae>
 8000472:	428b      	cmp	r3, r1
 8000474:	d92d      	bls.n	80004d2 <__udivmoddi4+0x2ae>
 8000476:	3f02      	subs	r7, #2
 8000478:	4429      	add	r1, r5
 800047a:	1acb      	subs	r3, r1, r3
 800047c:	b281      	uxth	r1, r0
 800047e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000482:	fb0e 3310 	mls	r3, lr, r0, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb00 f308 	mul.w	r3, r0, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x27e>
 8000492:	1869      	adds	r1, r5, r1
 8000494:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000498:	d217      	bcs.n	80004ca <__udivmoddi4+0x2a6>
 800049a:	428b      	cmp	r3, r1
 800049c:	d915      	bls.n	80004ca <__udivmoddi4+0x2a6>
 800049e:	3802      	subs	r0, #2
 80004a0:	4429      	add	r1, r5
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a8:	e73b      	b.n	8000322 <__udivmoddi4+0xfe>
 80004aa:	4637      	mov	r7, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e709      	b.n	80002c4 <__udivmoddi4+0xa0>
 80004b0:	4607      	mov	r7, r0
 80004b2:	e6e7      	b.n	8000284 <__udivmoddi4+0x60>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x8c>
 80004b8:	4541      	cmp	r1, r8
 80004ba:	d2ab      	bcs.n	8000414 <__udivmoddi4+0x1f0>
 80004bc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c0:	eb69 020e 	sbc.w	r2, r9, lr
 80004c4:	3801      	subs	r0, #1
 80004c6:	4613      	mov	r3, r2
 80004c8:	e7a4      	b.n	8000414 <__udivmoddi4+0x1f0>
 80004ca:	4660      	mov	r0, ip
 80004cc:	e7e9      	b.n	80004a2 <__udivmoddi4+0x27e>
 80004ce:	4618      	mov	r0, r3
 80004d0:	e795      	b.n	80003fe <__udivmoddi4+0x1da>
 80004d2:	4667      	mov	r7, ip
 80004d4:	e7d1      	b.n	800047a <__udivmoddi4+0x256>
 80004d6:	4681      	mov	r9, r0
 80004d8:	e77c      	b.n	80003d4 <__udivmoddi4+0x1b0>
 80004da:	3802      	subs	r0, #2
 80004dc:	442c      	add	r4, r5
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0x14c>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	442b      	add	r3, r5
 80004e6:	e72f      	b.n	8000348 <__udivmoddi4+0x124>
 80004e8:	4638      	mov	r0, r7
 80004ea:	e708      	b.n	80002fe <__udivmoddi4+0xda>
 80004ec:	4637      	mov	r7, r6
 80004ee:	e6e9      	b.n	80002c4 <__udivmoddi4+0xa0>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <CpuIrqDisable>:
** \brief     Disable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  __asm volatile ("cpsid i");
 80004f8:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <CpuIrqEnable>:
** \brief     Enable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  __asm volatile ("cpsie i");
 8000508:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals. */
  CpuIrqDisable();
 8000518:	f7ff ffec 	bl	80004f4 <CpuIrqDisable>
} /*** end of CpuInit ***/
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 8000526:	f000 fb5f 	bl	8000be8 <NvmVerifyChecksum>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d102      	bne.n	8000536 <CpuStartUserProgram+0x16>
    /* bootloader will stay active so perform deferred initialization to make sure
     * the communication interface that were not yet initialized are now initialized.
     * this is needed to make sure firmware updates via these communication interfaces
     * will be possible.
     */
    ComDeferredInit();
 8000530:	f000 fe1f 	bl	8001172 <ComDeferredInit>
#endif
    /* not a valid user program so it cannot be started */
    return;
 8000534:	e022      	b.n	800057c <CpuStartUserProgram+0x5c>
  }
#if (BOOT_CPU_USER_PROGRAM_START_HOOK > 0)
  /* invoke callback */
  if (CpuUserProgramStartHook() == BLT_FALSE)
 8000536:	f001 f9eb 	bl	8001910 <CpuUserProgramStartHook>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d102      	bne.n	8000546 <CpuStartUserProgram+0x26>
    /* bootloader will stay active so perform deferred initialization to make sure
     * the communication interface that were not yet initialized are now initialized.
     * this is needed to make sure firmware updates via these communication interfaces
     * will be possible.
     */
    ComDeferredInit();
 8000540:	f000 fe17 	bl	8001172 <ComDeferredInit>
  #endif
    /* callback requests the user program to not be started */
    return;
 8000544:	e01a      	b.n	800057c <CpuStartUserProgram+0x5c>
  }
#endif
#if (BOOT_COM_ENABLE > 0)
  /* release the communication interface */
  ComFree();
 8000546:	f000 fd8f 	bl	8001068 <ComFree>
#endif
  /* reset the timer */
  TimerReset();
 800054a:	f000 fcc5 	bl	8000ed8 <TimerReset>
  /* reset the HAL */
  HAL_DeInit();
 800054e:	f001 fd03 	bl	8001f58 <HAL_DeInit>
  /* remap user program's vector table */
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 8000552:	f000 fb50 	bl	8000bf6 <NvmGetUserProgBaseAddress>
 8000556:	4603      	mov	r3, r0
 8000558:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <CpuStartUserProgram+0x64>)
 800055a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800055e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000562:	6093      	str	r3, [r2, #8]
  /* set the address where the bootloader needs to jump to. this is the address of
   * the 2nd entry in the user program's vector table. this address points to the
   * user program's reset handler.
   */
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 8000564:	f000 fb47 	bl	8000bf6 <NvmGetUserProgBaseAddress>
 8000568:	4603      	mov	r3, r0
 800056a:	3304      	adds	r3, #4
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	607b      	str	r3, [r7, #4]
  /* The Cortex-M4 core has interrupts enabled out of reset. the bootloader
   * explicitly disables these for security reasons. Enable them here again, so it does 
   * not have to be done by the user program.
   */
  CpuIrqEnable();
 8000570:	f7ff ffc8 	bl	8000504 <CpuIrqEnable>
  /* start the user program by activating its reset interrupt service routine */
  pProgResetHandler();
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4798      	blx	r3
  /* theoretically, the code never gets here because the user program should now be
   * running and the previous function call should not return. In case it did return
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
 8000578:	f000 fdfb 	bl	8001172 <ComDeferredInit>
#endif
} /*** end of CpuStartUserProgram ***/
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	4613      	mov	r3, r2
 8000594:	80fb      	strh	r3, [r7, #6]
  blt_int8u *from, *to;

  /* set casted pointers */
  from = (blt_int8u *)src;
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	617b      	str	r3, [r7, #20]
  to = (blt_int8u *)dest;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	613b      	str	r3, [r7, #16]

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 800059e:	e009      	b.n	80005b4 <CpuMemCopy+0x2c>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	1c53      	adds	r3, r2, #1
 80005a4:	617b      	str	r3, [r7, #20]
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	1c59      	adds	r1, r3, #1
 80005aa:	6139      	str	r1, [r7, #16]
 80005ac:	7812      	ldrb	r2, [r2, #0]
 80005ae:	701a      	strb	r2, [r3, #0]
    /* keep the watchdog happy */
    CopService();
 80005b0:	f000 fdeb 	bl	800118a <CopService>
  while (len-- > 0)
 80005b4:	88fb      	ldrh	r3, [r7, #6]
 80005b6:	1e5a      	subs	r2, r3, #1
 80005b8:	80fa      	strh	r2, [r7, #6]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d1f0      	bne.n	80005a0 <CpuMemCopy+0x18>
  }
} /*** end of CpuMemCopy ***/
 80005be:	bf00      	nop
 80005c0:	3718      	adds	r7, #24
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <FlashInit>:
** \brief     Initializes the flash driver.
** \return    none.
**
****************************************************************************************/
void FlashInit(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* init the flash block info structs by setting the address to an invalid address */
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <FlashInit+0x20>)
 80005ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005d2:	601a      	str	r2, [r3, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <FlashInit+0x24>)
 80005d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005da:	601a      	str	r2, [r3, #0]
} /*** end of FlashInit ***/
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	2000006c 	.word	0x2000006c
 80005ec:	20000270 	.word	0x20000270

080005f0 <FlashWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  blt_addr base_addr;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	1e5a      	subs	r2, r3, #1
 8000600:	491d      	ldr	r1, [pc, #116]	; (8000678 <FlashWrite+0x88>)
 8000602:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000606:	4419      	add	r1, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	425b      	negs	r3, r3
 800060c:	440b      	add	r3, r1
 800060e:	3b01      	subs	r3, #1
 8000610:	429a      	cmp	r2, r3
 8000612:	d901      	bls.n	8000618 <FlashWrite+0x28>
  {
    return BLT_FALSE;
 8000614:	2300      	movs	r3, #0
 8000616:	e02a      	b.n	800066e <FlashWrite+0x7e>
  }
  
  /* make sure the addresses are within the flash device */
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8000618:	68f8      	ldr	r0, [r7, #12]
 800061a:	f000 fa7d 	bl	8000b18 <FlashGetSector>
 800061e:	4603      	mov	r3, r0
 8000620:	2bff      	cmp	r3, #255	; 0xff
 8000622:	d009      	beq.n	8000638 <FlashWrite+0x48>
      (FlashGetSector(addr+len-1) == FLASH_INVALID_SECTOR))
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	4413      	add	r3, r2
 800062a:	3b01      	subs	r3, #1
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fa73 	bl	8000b18 <FlashGetSector>
 8000632:	4603      	mov	r3, r0
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8000634:	2bff      	cmp	r3, #255	; 0xff
 8000636:	d101      	bne.n	800063c <FlashWrite+0x4c>
  {
    return BLT_FALSE;
 8000638:	2300      	movs	r3, #0
 800063a:	e018      	b.n	800066e <FlashWrite+0x7e>
  }

  /* if this is the bootblock, then let the boot block manager handle it */
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000642:	f023 0301 	bic.w	r3, r3, #1
 8000646:	617b      	str	r3, [r7, #20]
  if (base_addr == flashLayout[0].sector_start)
 8000648:	4a0c      	ldr	r2, [pc, #48]	; (800067c <FlashWrite+0x8c>)
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	4293      	cmp	r3, r2
 800064e:	d107      	bne.n	8000660 <FlashWrite+0x70>
  {
    /* let the boot block manager handle it */
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	68f9      	ldr	r1, [r7, #12]
 8000656:	480a      	ldr	r0, [pc, #40]	; (8000680 <FlashWrite+0x90>)
 8000658:	f000 f968 	bl	800092c <FlashAddToBlock>
 800065c:	4603      	mov	r3, r0
 800065e:	e006      	b.n	800066e <FlashWrite+0x7e>
  }
  /* let the block manager handle it */
  return FlashAddToBlock(&blockInfo, addr, data, len);
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	68f9      	ldr	r1, [r7, #12]
 8000666:	4807      	ldr	r0, [pc, #28]	; (8000684 <FlashWrite+0x94>)
 8000668:	f000 f960 	bl	800092c <FlashAddToBlock>
 800066c:	4603      	mov	r3, r0
} /*** end of FlashWrite ***/
 800066e:	4618      	mov	r0, r3
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	081e0000 	.word	0x081e0000
 800067c:	08008000 	.word	0x08008000
 8000680:	20000270 	.word	0x20000270
 8000684:	2000006c 	.word	0x2000006c

08000688 <FlashErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashErase(blt_addr addr, blt_int32u len)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
  blt_int8u first_sector;
  blt_int8u last_sector;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	1e5a      	subs	r2, r3, #1
 8000696:	4916      	ldr	r1, [pc, #88]	; (80006f0 <FlashErase+0x68>)
 8000698:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800069c:	4419      	add	r1, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	425b      	negs	r3, r3
 80006a2:	440b      	add	r3, r1
 80006a4:	3b01      	subs	r3, #1
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d901      	bls.n	80006ae <FlashErase+0x26>
  {
    return BLT_FALSE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	e01c      	b.n	80006e8 <FlashErase+0x60>
  }
  
  /* obtain the first and last sector number */
  first_sector = FlashGetSector(addr);
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f000 fa32 	bl	8000b18 <FlashGetSector>
 80006b4:	4603      	mov	r3, r0
 80006b6:	73fb      	strb	r3, [r7, #15]
  last_sector  = FlashGetSector(addr+len-1);
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	4413      	add	r3, r2
 80006be:	3b01      	subs	r3, #1
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fa29 	bl	8000b18 <FlashGetSector>
 80006c6:	4603      	mov	r3, r0
 80006c8:	73bb      	strb	r3, [r7, #14]
  /* check them */
  if ((first_sector == FLASH_INVALID_SECTOR) || (last_sector == FLASH_INVALID_SECTOR))
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	2bff      	cmp	r3, #255	; 0xff
 80006ce:	d002      	beq.n	80006d6 <FlashErase+0x4e>
 80006d0:	7bbb      	ldrb	r3, [r7, #14]
 80006d2:	2bff      	cmp	r3, #255	; 0xff
 80006d4:	d101      	bne.n	80006da <FlashErase+0x52>
  {
    return BLT_FALSE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e006      	b.n	80006e8 <FlashErase+0x60>
  }
  /* erase the sectors */
  return FlashEraseSectors(first_sector, last_sector);
 80006da:	7bba      	ldrb	r2, [r7, #14]
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	4611      	mov	r1, r2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f9c3 	bl	8000a6c <FlashEraseSectors>
 80006e6:	4603      	mov	r3, r0
} /*** end of FlashErase ***/
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	081e0000 	.word	0x081e0000

080006f4 <FlashWriteChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWriteChecksum(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]

  /* first check that the bootblock contains valid data. if not, this means the
   * bootblock is not part of the reprogramming this time and therefore no
   * new checksum needs to be written
   */
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 80006fe:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <FlashWriteChecksum+0x84>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000706:	d101      	bne.n	800070c <FlashWriteChecksum+0x18>
  {
    return BLT_TRUE;
 8000708:	2301      	movs	r3, #1
 800070a:	e031      	b.n	8000770 <FlashWriteChecksum+0x7c>
#endif

  /* compute the checksum. note that the user program's vectors are not yet written
   * to flash but are present in the bootblock data structure at this point.
   */
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <FlashWriteChecksum+0x88>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4413      	add	r3, r2
 8000714:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <FlashWriteChecksum+0x8c>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <FlashWriteChecksum+0x90>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4413      	add	r3, r2
 8000728:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <FlashWriteChecksum+0x94>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4413      	add	r3, r2
 8000732:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <FlashWriteChecksum+0x98>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4413      	add	r3, r2
 800073c:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <FlashWriteChecksum+0x9c>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4413      	add	r3, r2
 8000746:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <FlashWriteChecksum+0xa0>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4413      	add	r3, r2
 8000750:	607b      	str	r3, [r7, #4]
  signature_checksum  = ~signature_checksum; /* one's complement */
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	43db      	mvns	r3, r3
 8000756:	607b      	str	r3, [r7, #4]
  signature_checksum += 1; /* two's complement */
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3301      	adds	r3, #1
 800075c:	607b      	str	r3, [r7, #4]

  /* write the checksum */
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <FlashWriteChecksum+0xa4>)
 8000760:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000764:	1d3a      	adds	r2, r7, #4
 8000766:	2104      	movs	r1, #4
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff41 	bl	80005f0 <FlashWrite>
 800076e:	4603      	mov	r3, r0
                    sizeof(blt_addr), (blt_int8u *)&signature_checksum);
} /*** end of FlashWriteChecksum ***/
 8000770:	4618      	mov	r0, r3
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000270 	.word	0x20000270
 800077c:	20000274 	.word	0x20000274
 8000780:	20000278 	.word	0x20000278
 8000784:	2000027c 	.word	0x2000027c
 8000788:	20000280 	.word	0x20000280
 800078c:	20000284 	.word	0x20000284
 8000790:	20000288 	.word	0x20000288
 8000794:	2000028c 	.word	0x2000028c
 8000798:	08008000 	.word	0x08008000

0800079c <FlashVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashVerifyChecksum(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]

  /* verify the checksum based on how it was written by CpuWriteChecksum() */
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 80007a6:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <FlashVerifyChecksum+0x84>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <FlashVerifyChecksum+0x84>)
 80007b2:	3304      	adds	r3, #4
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 80007bc:	4b18      	ldr	r3, [pc, #96]	; (8000820 <FlashVerifyChecksum+0x84>)
 80007be:	3308      	adds	r3, #8
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <FlashVerifyChecksum+0x84>)
 80007ca:	330c      	adds	r3, #12
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <FlashVerifyChecksum+0x84>)
 80007d6:	3310      	adds	r3, #16
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <FlashVerifyChecksum+0x84>)
 80007e2:	3314      	adds	r3, #20
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <FlashVerifyChecksum+0x84>)
 80007ee:	3318      	adds	r3, #24
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <FlashVerifyChecksum+0x84>)
 80007fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	4413      	add	r3, r2
 8000804:	607b      	str	r3, [r7, #4]
  /* sum should add up to an unsigned 32-bit value of 0 */
  if (signature_checksum == 0)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d101      	bne.n	8000810 <FlashVerifyChecksum+0x74>
  {
    /* checksum okay */
    return BLT_TRUE;
 800080c:	2301      	movs	r3, #1
 800080e:	e000      	b.n	8000812 <FlashVerifyChecksum+0x76>
  }
  /* checksum incorrect */
  return BLT_FALSE;
 8000810:	2300      	movs	r3, #0
} /*** end of FlashVerifyChecksum ***/
 8000812:	4618      	mov	r0, r3
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	08008000 	.word	0x08008000

08000824 <FlashDone>:
**            the currently active block that needs to be flashed.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashDone(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* check if there is still data waiting to be programmed in the boot block */
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <FlashDone+0x40>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000830:	d007      	beq.n	8000842 <FlashDone+0x1e>
  {
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 8000832:	480c      	ldr	r0, [pc, #48]	; (8000864 <FlashDone+0x40>)
 8000834:	f000 f8dc 	bl	80009f0 <FlashWriteBlock>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d101      	bne.n	8000842 <FlashDone+0x1e>
    {
      return BLT_FALSE;
 800083e:	2300      	movs	r3, #0
 8000840:	e00d      	b.n	800085e <FlashDone+0x3a>
    }
  }

  /* check if there is still data waiting to be programmed */
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <FlashDone+0x44>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800084a:	d007      	beq.n	800085c <FlashDone+0x38>
  {
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 800084c:	4806      	ldr	r0, [pc, #24]	; (8000868 <FlashDone+0x44>)
 800084e:	f000 f8cf 	bl	80009f0 <FlashWriteBlock>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d101      	bne.n	800085c <FlashDone+0x38>
    {
      return BLT_FALSE;
 8000858:	2300      	movs	r3, #0
 800085a:	e000      	b.n	800085e <FlashDone+0x3a>
    }
  }
  /* still here so all is okay */
  return BLT_TRUE;
 800085c:	2301      	movs	r3, #1
} /*** end of FlashDone ***/
 800085e:	4618      	mov	r0, r3
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000270 	.word	0x20000270
 8000868:	2000006c 	.word	0x2000006c

0800086c <FlashGetUserProgBaseAddress>:
**            This is basically the first address in the flashLayout table.
** \return    Base address.
**
****************************************************************************************/
blt_addr FlashGetUserProgBaseAddress(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return flashLayout[0].sector_start;
 8000870:	4b02      	ldr	r3, [pc, #8]	; (800087c <FlashGetUserProgBaseAddress+0x10>)
} /*** end of FlashGetUserProgBaseAddress ***/
 8000872:	4618      	mov	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	08008000 	.word	0x08008000

08000880 <FlashInitBlock>:
** \param     address Base address of the block data.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashInitBlock(tFlashBlockInfo *block, blt_addr address)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
  /* check address alignment */
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <FlashInitBlock+0x18>
  {
    return BLT_FALSE;
 8000894:	2300      	movs	r3, #0
 8000896:	e012      	b.n	80008be <FlashInitBlock+0x3e>
  }
  /* make sure that we are initializing a new block and not the same one */
  if (block->base_addr == address)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	683a      	ldr	r2, [r7, #0]
 800089e:	429a      	cmp	r2, r3
 80008a0:	d101      	bne.n	80008a6 <FlashInitBlock+0x26>
  {
    /* block already initialized, so nothing to do */
    return BLT_TRUE;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00b      	b.n	80008be <FlashInitBlock+0x3e>
  }
  /* set the base address and copies the current data from flash */
  block->base_addr = address;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	683a      	ldr	r2, [r7, #0]
 80008aa:	601a      	str	r2, [r3, #0]
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3304      	adds	r3, #4
 80008b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b4:	6839      	ldr	r1, [r7, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe66 	bl	8000588 <CpuMemCopy>
  return BLT_TRUE;
 80008bc:	2301      	movs	r3, #1
} /*** end of FlashInitBlock ***/
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <FlashSwitchBlock>:
** \return    The pointer of the block info struct that is no being used, or a NULL
**            pointer in case of error.
**
****************************************************************************************/
static tFlashBlockInfo *FlashSwitchBlock(tFlashBlockInfo *block, blt_addr base_addr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  /* check if a switch needs to be made away from the boot block. in this case the boot
   * block shouldn't be written yet, because this is done at the end of the programming
   * session by FlashDone(), this is right after the checksum was written.
   */
  if (block == &bootBlockInfo)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a12      	ldr	r2, [pc, #72]	; (8000920 <FlashSwitchBlock+0x58>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d102      	bne.n	80008e0 <FlashSwitchBlock+0x18>
  {
    /* switch from the boot block to the generic block info structure */
    block = &blockInfo;
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <FlashSwitchBlock+0x5c>)
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	e010      	b.n	8000902 <FlashSwitchBlock+0x3a>
  }
  /* check if a switch back into the bootblock is needed. in this case the generic block
   * doesn't need to be written here yet.
   */
  else if (base_addr == flashLayout[0].sector_start)
 80008e0:	4a11      	ldr	r2, [pc, #68]	; (8000928 <FlashSwitchBlock+0x60>)
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d104      	bne.n	80008f2 <FlashSwitchBlock+0x2a>
  {
    /* switch from the generic block to the boot block info structure */
    block = &bootBlockInfo;
 80008e8:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <FlashSwitchBlock+0x58>)
 80008ea:	607b      	str	r3, [r7, #4]
    base_addr = flashLayout[0].sector_start;
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <FlashSwitchBlock+0x60>)
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	e007      	b.n	8000902 <FlashSwitchBlock+0x3a>
  }
  else
  {
    /* need to switch to a new block, so program the current one and init the next */
    if (FlashWriteBlock(block) == BLT_FALSE)
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f87c 	bl	80009f0 <FlashWriteBlock>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d101      	bne.n	8000902 <FlashSwitchBlock+0x3a>
    {
      return BLT_NULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	e009      	b.n	8000916 <FlashSwitchBlock+0x4e>
    }
  }

  /* initialize tne new block when necessary */
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 8000902:	6839      	ldr	r1, [r7, #0]
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff ffbb 	bl	8000880 <FlashInitBlock>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d101      	bne.n	8000914 <FlashSwitchBlock+0x4c>
  {
    return BLT_NULL;
 8000910:	2300      	movs	r3, #0
 8000912:	e000      	b.n	8000916 <FlashSwitchBlock+0x4e>
  }

  /* still here to all is okay  */
  return block;
 8000914:	687b      	ldr	r3, [r7, #4]
} /*** end of FlashSwitchBlock ***/
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000270 	.word	0x20000270
 8000924:	2000006c 	.word	0x2000006c
 8000928:	08008000 	.word	0x08008000

0800092c <FlashAddToBlock>:
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashAddToBlock(tFlashBlockInfo *block, blt_addr address,
                                blt_int8u *data, blt_int32u len)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
 8000938:	603b      	str	r3, [r7, #0]
  blt_addr   current_base_addr;
  blt_int8u  *dst;
  blt_int8u  *src;

  /* determine the current base address */
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000940:	f023 0301 	bic.w	r3, r3, #1
 8000944:	617b      	str	r3, [r7, #20]

  /* make sure the blockInfo is not uninitialized */
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800094e:	d108      	bne.n	8000962 <FlashAddToBlock+0x36>
  {
    /* initialize the blockInfo struct for the current block */
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 8000950:	6979      	ldr	r1, [r7, #20]
 8000952:	68f8      	ldr	r0, [r7, #12]
 8000954:	f7ff ff94 	bl	8000880 <FlashInitBlock>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d101      	bne.n	8000962 <FlashAddToBlock+0x36>
    {
      return BLT_FALSE;
 800095e:	2300      	movs	r3, #0
 8000960:	e042      	b.n	80009e8 <FlashAddToBlock+0xbc>
    }
  }

  /* check if the new data fits in the current block */
  if (block->base_addr != current_base_addr)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	697a      	ldr	r2, [r7, #20]
 8000968:	429a      	cmp	r2, r3
 800096a:	d009      	beq.n	8000980 <FlashAddToBlock+0x54>
  {
    /* need to switch to a new block, so program the current one and init the next */
    block = FlashSwitchBlock(block, current_base_addr);
 800096c:	6979      	ldr	r1, [r7, #20]
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f7ff ffaa 	bl	80008c8 <FlashSwitchBlock>
 8000974:	60f8      	str	r0, [r7, #12]
    if (block == BLT_NULL)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d101      	bne.n	8000980 <FlashAddToBlock+0x54>
    {
      return BLT_FALSE;
 800097c:	2300      	movs	r3, #0
 800097e:	e033      	b.n	80009e8 <FlashAddToBlock+0xbc>
    }
  }

  /* add the data to the current block, but check for block overflow */
  dst = &(block->data[address - block->base_addr]);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	68ba      	ldr	r2, [r7, #8]
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	3304      	adds	r3, #4
 800098e:	61fb      	str	r3, [r7, #28]
  src = data;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	61bb      	str	r3, [r7, #24]
  do
  {
    /* keep the watchdog happy */
    CopService();
 8000994:	f000 fbf9 	bl	800118a <CopService>
    /* buffer overflow? */
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	3204      	adds	r2, #4
 800099e:	1a9b      	subs	r3, r3, r2
 80009a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009a4:	d30f      	bcc.n	80009c6 <FlashAddToBlock+0x9a>
    {
      /* need to switch to a new block, so program the current one and init the next */
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80009ac:	4619      	mov	r1, r3
 80009ae:	68f8      	ldr	r0, [r7, #12]
 80009b0:	f7ff ff8a 	bl	80008c8 <FlashSwitchBlock>
 80009b4:	60f8      	str	r0, [r7, #12]
      if (block == BLT_NULL)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d101      	bne.n	80009c0 <FlashAddToBlock+0x94>
      {
        return BLT_FALSE;
 80009bc:	2300      	movs	r3, #0
 80009be:	e013      	b.n	80009e8 <FlashAddToBlock+0xbc>
      }
      /* reset destination pointer */
      dst = &(block->data[0]);
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3304      	adds	r3, #4
 80009c4:	61fb      	str	r3, [r7, #28]
    }
    /* write the data to the buffer */
    *dst = *src;
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	781a      	ldrb	r2, [r3, #0]
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	701a      	strb	r2, [r3, #0]
    /* update pointers */
    dst++;
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3301      	adds	r3, #1
 80009d2:	61fb      	str	r3, [r7, #28]
    src++;
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	3301      	adds	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
    /* decrement byte counter */
    len--;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	3b01      	subs	r3, #1
 80009de:	603b      	str	r3, [r7, #0]
  }
  while (len > 0);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d1d6      	bne.n	8000994 <FlashAddToBlock+0x68>
  /* still here so all is good */
  return BLT_TRUE;
 80009e6:	2301      	movs	r3, #1
} /*** end of FlashAddToBlock ***/
 80009e8:	4618      	mov	r0, r3
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <FlashWriteBlock>:
** \param     block   Pointer to flash block info structure to operate on.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashWriteBlock(tFlashBlockInfo *block)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  blt_addr   prog_addr;
  blt_int32u prog_data;
  blt_int32u word_cnt;
  blt_bool   result = BLT_TRUE;
 80009f8:	2301      	movs	r3, #1
 80009fa:	74fb      	strb	r3, [r7, #19]
    }
  }
#endif

  /* unlock the flash peripheral to enable the flash control register access. */
  HAL_FLASH_Unlock();
 80009fc:	f001 fc4a 	bl	8002294 <HAL_FLASH_Unlock>

  /* program all words in the block one by one */
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	e028      	b.n	8000a58 <FlashWriteBlock+0x68>
  {
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	60fb      	str	r3, [r7, #12]
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	60bb      	str	r3, [r7, #8]
    /* keep the watchdog happy */
    CopService();
 8000a20:	f000 fbb3 	bl	800118a <CopService>
    /* program the word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	f04f 0400 	mov.w	r4, #0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4623      	mov	r3, r4
 8000a2e:	68f9      	ldr	r1, [r7, #12]
 8000a30:	2002      	movs	r0, #2
 8000a32:	f001 fbdb 	bl	80021ec <HAL_FLASH_Program>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d002      	beq.n	8000a42 <FlashWriteBlock+0x52>
    {
      result = BLT_FALSE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	74fb      	strb	r3, [r7, #19]
      break;
 8000a40:	e00d      	b.n	8000a5e <FlashWriteBlock+0x6e>
    }
    /* verify that the written data is actually there */
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d002      	beq.n	8000a52 <FlashWriteBlock+0x62>
    {
      result = BLT_FALSE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	74fb      	strb	r3, [r7, #19]
      break;
 8000a50:	e005      	b.n	8000a5e <FlashWriteBlock+0x6e>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	3301      	adds	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a5c:	d9d3      	bls.n	8000a06 <FlashWriteBlock+0x16>
    }
  }

  /* lock the flash peripheral to disable the flash control register access. */
  HAL_FLASH_Lock();
 8000a5e:	f001 fc3b 	bl	80022d8 <HAL_FLASH_Lock>

  /* Give the result back to the caller. */
  return result;
 8000a62:	7cfb      	ldrb	r3, [r7, #19]
} /*** end of FlashWriteBlock ***/
 8000a64:	4618      	mov	r0, r3
 8000a66:	371c      	adds	r7, #28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd90      	pop	{r4, r7, pc}

08000a6c <FlashEraseSectors>:
** \param     last_sector  Last flash sector number.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashEraseSectors(blt_int8u first_sector, blt_int8u last_sector)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	460a      	mov	r2, r1
 8000a76:	71fb      	strb	r3, [r7, #7]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	71bb      	strb	r3, [r7, #6]
  blt_bool result = BLT_TRUE;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  blt_int8u sectorIdx;
  FLASH_EraseInitTypeDef eraseInitStruct;
  blt_int32u eraseSectorError = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]

  /* validate the sector numbers */
  if (first_sector > last_sector)
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	79bb      	ldrb	r3, [r7, #6]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d902      	bls.n	8000a94 <FlashEraseSectors+0x28>
  {
    result = BLT_FALSE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if ((first_sector < flashLayout[0].sector_num) || \
 8000a94:	2202      	movs	r2, #2
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d303      	bcc.n	8000aa4 <FlashEraseSectors+0x38>
      (last_sector > flashLayout[FLASH_TOTAL_SECTORS-1].sector_num))
 8000a9c:	2217      	movs	r2, #23
  if ((first_sector < flashLayout[0].sector_num) || \
 8000a9e:	79bb      	ldrb	r3, [r7, #6]
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d902      	bls.n	8000aaa <FlashEraseSectors+0x3e>
  {
    result = BLT_FALSE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* only move forward with the erase operation if all is okay so far */
  if (result == BLT_TRUE)
 8000aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d12b      	bne.n	8000b0a <FlashEraseSectors+0x9e>
  {
    /* intialize the sector erase info structure */
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	623b      	str	r3, [r7, #32]
    eraseInitStruct.NbSectors = 1;
 8000aba:	2301      	movs	r3, #1
 8000abc:	61fb      	str	r3, [r7, #28]

    /* unlock the flash array */
    HAL_FLASH_Unlock();
 8000abe:	f001 fbe9 	bl	8002294 <HAL_FLASH_Unlock>

    /* erase all sectors one by one */
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ac8:	e018      	b.n	8000afc <FlashEraseSectors+0x90>
    {
      /* keep the watchdog happy */
      CopService();
 8000aca:	f000 fb5e 	bl	800118a <CopService>
      /* set the sector to erase */
      eraseInitStruct.Sector = sectorIdx;
 8000ace:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ad2:	61bb      	str	r3, [r7, #24]
      /* submit the sector erase request */
      if(HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&eraseSectorError) != HAL_OK)
 8000ad4:	f107 020c 	add.w	r2, r7, #12
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	4611      	mov	r1, r2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fd48 	bl	8002574 <HAL_FLASHEx_Erase>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <FlashEraseSectors+0x86>
      {
        /* could not perform erase operation */
        result = BLT_FALSE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        /* error detected so don't bother continuing with the loop */
        break;
 8000af0:	e009      	b.n	8000b06 <FlashEraseSectors+0x9a>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8000af2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000af6:	3301      	adds	r3, #1
 8000af8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000afc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000b00:	79bb      	ldrb	r3, [r7, #6]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d9e1      	bls.n	8000aca <FlashEraseSectors+0x5e>
      }
    }

    /* lock the flash array again */
    HAL_FLASH_Lock();
 8000b06:	f001 fbe7 	bl	80022d8 <HAL_FLASH_Lock>
  }

  /* give the result back to the caller */
  return result;
 8000b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
} /*** end of FlashEraseSectors ***/
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <FlashGetSector>:
** \param     address Address in the flash sector.
** \return    Flash sector number or FLASH_INVALID_SECTOR.
**
****************************************************************************************/
static blt_int8u FlashGetSector(blt_addr address)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  blt_int8u result = FLASH_INVALID_SECTOR;
 8000b20:	23ff      	movs	r3, #255	; 0xff
 8000b22:	73fb      	strb	r3, [r7, #15]
  blt_int8u sectorIdx;

  /* search through the sectors to find the right one */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	73bb      	strb	r3, [r7, #14]
 8000b28:	e02f      	b.n	8000b8a <FlashGetSector+0x72>
  {
    /* keep the watchdog happy */
    CopService();
 8000b2a:	f000 fb2e 	bl	800118a <CopService>
    /* is the address in this sector? */
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8000b2e:	7bba      	ldrb	r2, [r7, #14]
 8000b30:	491a      	ldr	r1, [pc, #104]	; (8000b9c <FlashGetSector+0x84>)
 8000b32:	4613      	mov	r3, r2
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	4413      	add	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d31f      	bcc.n	8000b84 <FlashGetSector+0x6c>
        (address < (flashLayout[sectorIdx].sector_start + \
 8000b44:	7bba      	ldrb	r2, [r7, #14]
 8000b46:	4915      	ldr	r1, [pc, #84]	; (8000b9c <FlashGetSector+0x84>)
 8000b48:	4613      	mov	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4413      	add	r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	440b      	add	r3, r1
 8000b52:	6819      	ldr	r1, [r3, #0]
                    flashLayout[sectorIdx].sector_size)))
 8000b54:	7bba      	ldrb	r2, [r7, #14]
 8000b56:	4811      	ldr	r0, [pc, #68]	; (8000b9c <FlashGetSector+0x84>)
 8000b58:	4613      	mov	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4413      	add	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	4403      	add	r3, r0
 8000b62:	3304      	adds	r3, #4
 8000b64:	681b      	ldr	r3, [r3, #0]
        (address < (flashLayout[sectorIdx].sector_start + \
 8000b66:	440b      	add	r3, r1
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d20a      	bcs.n	8000b84 <FlashGetSector+0x6c>
    {
      /* found the sector we are looking for so store it */
      result = flashLayout[sectorIdx].sector_num;
 8000b6e:	7bba      	ldrb	r2, [r7, #14]
 8000b70:	490a      	ldr	r1, [pc, #40]	; (8000b9c <FlashGetSector+0x84>)
 8000b72:	4613      	mov	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	4413      	add	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	3308      	adds	r3, #8
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	73fb      	strb	r3, [r7, #15]
      /* all done so no need to continue looping */
      break;
 8000b82:	e005      	b.n	8000b90 <FlashGetSector+0x78>
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8000b84:	7bbb      	ldrb	r3, [r7, #14]
 8000b86:	3301      	adds	r3, #1
 8000b88:	73bb      	strb	r3, [r7, #14]
 8000b8a:	7bbb      	ldrb	r3, [r7, #14]
 8000b8c:	2b15      	cmp	r3, #21
 8000b8e:	d9cc      	bls.n	8000b2a <FlashGetSector+0x12>
    }
  }
  /* give the result back to the caller */
  return result;
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of FlashGetSector ***/
 8000b92:	4618      	mov	r0, r3
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	08003c80 	.word	0x08003c80

08000ba0 <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 8000ba4:	f7ff fd10 	bl	80005c8 <FlashInit>
} /*** end of NvmInit ***/
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	68b9      	ldr	r1, [r7, #8]
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f7ff fd17 	bl	80005f0 <FlashWrite>
 8000bc2:	4603      	mov	r3, r0
} /*** end of NvmWrite ***/
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 8000bd6:	6839      	ldr	r1, [r7, #0]
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff fd55 	bl	8000688 <FlashErase>
 8000bde:	4603      	mov	r3, r0
} /*** end of NvmErase ***/
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 8000bec:	f7ff fdd6 	bl	800079c <FlashVerifyChecksum>
 8000bf0:	4603      	mov	r3, r0
#endif
} /*** end of NvmVerifyChecksum ***/
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
  return FlashGetUserProgBaseAddress();
 8000bfa:	f7ff fe37 	bl	800086c <FlashGetUserProgBaseAddress>
 8000bfe:	4603      	mov	r3, r0
} /*** end of NvmGetUserProgBaseAddress ***/
 8000c00:	4618      	mov	r0, r3
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 8000c08:	f7ff fd74 	bl	80006f4 <FlashWriteChecksum>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d101      	bne.n	8000c16 <NvmDone+0x12>
  {
    return BLT_FALSE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e002      	b.n	8000c1c <NvmDone+0x18>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
 8000c16:	f7ff fe05 	bl	8000824 <FlashDone>
 8000c1a:	4603      	mov	r3, r0
} /*** end of NvmDone ***/
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	60da      	str	r2, [r3, #12]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 0320 	and.w	r3, r3, #32
 8000c50:	2b20      	cmp	r3, #32
 8000c52:	bf0c      	ite	eq
 8000c54:	2301      	moveq	r3, #1
 8000c56:	2300      	movne	r3, #0
 8000c58:	b2db      	uxtb	r3, r3
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c76:	2b80      	cmp	r3, #128	; 0x80
 8000c78:	bf0c      	ite	eq
 8000c7a:	2301      	moveq	r3, #1
 8000c7c:	2300      	movne	r3, #0
 8000c7e:	b2db      	uxtb	r3, r3
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	b2db      	uxtb	r3, r3
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000cb2:	78fa      	ldrb	r2, [r7, #3]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	605a      	str	r2, [r3, #4]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <Rs232Init>:
** \brief     Initializes the RS232 communication interface.
** \return    none.
**
****************************************************************************************/
void Rs232Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0
            (BOOT_COM_RS232_CHANNEL_INDEX == 3) ||
            (BOOT_COM_RS232_CHANNEL_INDEX == 4) ||
            (BOOT_COM_RS232_CHANNEL_INDEX == 5));

  /* configure UART peripheral */
  USART_InitStruct.BaudRate = BOOT_COM_RS232_BAUDRATE;
 8000cca:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000cce:	607b      	str	r3, [r7, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000cdc:	230c      	movs	r3, #12
 8000cde:	617b      	str	r3, [r7, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  /* initialize the UART peripheral */
  LL_USART_Init(USART_CHANNEL, &USART_InitStruct);
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	4619      	mov	r1, r3
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <Rs232Init+0x3c>)
 8000cee:	f002 fec7 	bl	8003a80 <LL_USART_Init>
  LL_USART_Enable(USART_CHANNEL);
 8000cf2:	4803      	ldr	r0, [pc, #12]	; (8000d00 <Rs232Init+0x3c>)
 8000cf4:	f7ff ff94 	bl	8000c20 <LL_USART_Enable>
} /*** end of Rs232Init ***/
 8000cf8:	bf00      	nop
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40004800 	.word	0x40004800

08000d04 <Rs232TransmitPacket>:
** \param     len  Number of bytes that are to be transmitted.
** \return    none.
**
****************************************************************************************/
void Rs232TransmitPacket(blt_int8u *data, blt_int8u len)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	70fb      	strb	r3, [r7, #3]
  blt_int16u data_index;

  /* verify validity of the len-paramenter */
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 8000d10:	78fb      	ldrb	r3, [r7, #3]
 8000d12:	2b40      	cmp	r3, #64	; 0x40
 8000d14:	d903      	bls.n	8000d1e <Rs232TransmitPacket+0x1a>
 8000d16:	2179      	movs	r1, #121	; 0x79
 8000d18:	480f      	ldr	r0, [pc, #60]	; (8000d58 <Rs232TransmitPacket+0x54>)
 8000d1a:	f000 f910 	bl	8000f3e <AssertFailure>

  /* first transmit the length of the packet */
  Rs232TransmitByte(len);
 8000d1e:	78fb      	ldrb	r3, [r7, #3]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 f89b 	bl	8000e5c <Rs232TransmitByte>

  /* transmit all the packet bytes one-by-one */
  for (data_index = 0; data_index < len; data_index++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	81fb      	strh	r3, [r7, #14]
 8000d2a:	e00b      	b.n	8000d44 <Rs232TransmitPacket+0x40>
  {
    /* keep the watchdog happy */
    CopService();
 8000d2c:	f000 fa2d 	bl	800118a <CopService>
    /* write byte */
    Rs232TransmitByte(data[data_index]);
 8000d30:	89fb      	ldrh	r3, [r7, #14]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 f88f 	bl	8000e5c <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 8000d3e:	89fb      	ldrh	r3, [r7, #14]
 8000d40:	3301      	adds	r3, #1
 8000d42:	81fb      	strh	r3, [r7, #14]
 8000d44:	78fb      	ldrb	r3, [r7, #3]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	89fa      	ldrh	r2, [r7, #14]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d3ee      	bcc.n	8000d2c <Rs232TransmitPacket+0x28>
  }
} /*** end of Rs232TransmitPacket ***/
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	08003c14 	.word	0x08003c14

08000d5c <Rs232ReceivePacket>:
** \param     len Pointer where the length of the packet is to be stored.
** \return    BLT_TRUE if a packet was received, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool Rs232ReceivePacket(blt_int8u *data, blt_int8u *len)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  static blt_int8u xcpCtoRxLength;
  static blt_bool  xcpCtoRxInProgress = BLT_FALSE;
  static blt_int32u xcpCtoRxStartTime = 0;

  /* start of cto packet received? */
  if (xcpCtoRxInProgress == BLT_FALSE)
 8000d66:	4b2b      	ldr	r3, [pc, #172]	; (8000e14 <Rs232ReceivePacket+0xb8>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d119      	bne.n	8000da2 <Rs232ReceivePacket+0x46>
  {
    /* store the message length when received */
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == BLT_TRUE)
 8000d6e:	482a      	ldr	r0, [pc, #168]	; (8000e18 <Rs232ReceivePacket+0xbc>)
 8000d70:	f000 f85a 	bl	8000e28 <Rs232ReceiveByte>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d146      	bne.n	8000e08 <Rs232ReceivePacket+0xac>
    {
      if ( (xcpCtoReqPacket[0] > 0) &&
 8000d7a:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <Rs232ReceivePacket+0xbc>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d042      	beq.n	8000e08 <Rs232ReceivePacket+0xac>
           (xcpCtoReqPacket[0] <= BOOT_COM_RS232_RX_MAX_DATA) )
 8000d82:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <Rs232ReceivePacket+0xbc>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
      if ( (xcpCtoReqPacket[0] > 0) &&
 8000d86:	2b40      	cmp	r3, #64	; 0x40
 8000d88:	d83e      	bhi.n	8000e08 <Rs232ReceivePacket+0xac>
      {
        /* store the start time */
        xcpCtoRxStartTime = TimerGet();
 8000d8a:	f000 f8c7 	bl	8000f1c <TimerGet>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <Rs232ReceivePacket+0xc0>)
 8000d92:	601a      	str	r2, [r3, #0]
        /* reset packet data count */
        xcpCtoRxLength = 0;
 8000d94:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <Rs232ReceivePacket+0xc4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
        /* indicate that a cto packet is being received */
        xcpCtoRxInProgress = BLT_TRUE;
 8000d9a:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <Rs232ReceivePacket+0xb8>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e032      	b.n	8000e08 <Rs232ReceivePacket+0xac>
    }
  }
  else
  {
    /* store the next packet byte */
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 8000da2:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <Rs232ReceivePacket+0xc4>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <Rs232ReceivePacket+0xbc>)
 8000daa:	4413      	add	r3, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 f83b 	bl	8000e28 <Rs232ReceiveByte>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d11c      	bne.n	8000df2 <Rs232ReceivePacket+0x96>
    {
      /* increment the packet data count */
      xcpCtoRxLength++;
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <Rs232ReceivePacket+0xc4>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <Rs232ReceivePacket+0xc4>)
 8000dc2:	701a      	strb	r2, [r3, #0]

      /* check to see if the entire packet was received */
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 8000dc4:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <Rs232ReceivePacket+0xbc>)
 8000dc6:	781a      	ldrb	r2, [r3, #0]
 8000dc8:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <Rs232ReceivePacket+0xc4>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d11b      	bne.n	8000e08 <Rs232ReceivePacket+0xac>
      {
        /* copy the packet data */
        CpuMemCopy((blt_int32u)data, (blt_int32u)&xcpCtoReqPacket[1], xcpCtoRxLength);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	4914      	ldr	r1, [pc, #80]	; (8000e24 <Rs232ReceivePacket+0xc8>)
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <Rs232ReceivePacket+0xc4>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	461a      	mov	r2, r3
 8000ddc:	f7ff fbd4 	bl	8000588 <CpuMemCopy>
        /* done with cto packet reception */
        xcpCtoRxInProgress = BLT_FALSE;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <Rs232ReceivePacket+0xb8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
        /* set the packet length */
        *len = xcpCtoRxLength;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <Rs232ReceivePacket+0xc4>)
 8000de8:	781a      	ldrb	r2, [r3, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	701a      	strb	r2, [r3, #0]
        /* packet reception complete */
        return BLT_TRUE;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00b      	b.n	8000e0a <Rs232ReceivePacket+0xae>
      }
    }
    else
    {
      /* check packet reception timeout */
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 8000df2:	f000 f893 	bl	8000f1c <TimerGet>
 8000df6:	4602      	mov	r2, r0
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <Rs232ReceivePacket+0xc0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3364      	adds	r3, #100	; 0x64
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d902      	bls.n	8000e08 <Rs232ReceivePacket+0xac>
      {
        /* cancel cto packet reception due to timeout. note that that automaticaly
         * discards the already received packet bytes, allowing the host to retry.
         */
        xcpCtoRxInProgress = BLT_FALSE;
 8000e02:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <Rs232ReceivePacket+0xb8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  /* packet reception not yet complete */
  return BLT_FALSE;
 8000e08:	2300      	movs	r3, #0
} /*** end of Rs232ReceivePacket ***/
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000474 	.word	0x20000474
 8000e18:	20000478 	.word	0x20000478
 8000e1c:	200004bc 	.word	0x200004bc
 8000e20:	200004c0 	.word	0x200004c0
 8000e24:	20000479 	.word	0x20000479

08000e28 <Rs232ReceiveByte>:
** \param     data Pointer to byte where the data is to be stored.
** \return    BLT_TRUE if a byte was received, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool Rs232ReceiveByte(blt_int8u *data)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if (LL_USART_IsActiveFlag_RXNE(USART_CHANNEL) != 0)
 8000e30:	4809      	ldr	r0, [pc, #36]	; (8000e58 <Rs232ReceiveByte+0x30>)
 8000e32:	f7ff ff05 	bl	8000c40 <LL_USART_IsActiveFlag_RXNE>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d008      	beq.n	8000e4e <Rs232ReceiveByte+0x26>
  {
    /* retrieve and store the newly received byte */
    *data = LL_USART_ReceiveData8(USART_CHANNEL);
 8000e3c:	4806      	ldr	r0, [pc, #24]	; (8000e58 <Rs232ReceiveByte+0x30>)
 8000e3e:	f7ff ff25 	bl	8000c8c <LL_USART_ReceiveData8>
 8000e42:	4603      	mov	r3, r0
 8000e44:	461a      	mov	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	701a      	strb	r2, [r3, #0]
    /* all done */
    return BLT_TRUE;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <Rs232ReceiveByte+0x28>
  }
  /* still here to no new byte received */
  return BLT_FALSE;
 8000e4e:	2300      	movs	r3, #0
} /*** end of Rs232ReceiveByte ***/
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40004800 	.word	0x40004800

08000e5c <Rs232TransmitByte>:
** \param     data Value of byte that is to be transmitted.
** \return    none.
**
****************************************************************************************/
static void Rs232TransmitByte(blt_int8u data)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  blt_int32u timeout;

  /* write byte to transmit holding register */
  LL_USART_TransmitData8(USART_CHANNEL, data);
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480e      	ldr	r0, [pc, #56]	; (8000ea4 <Rs232TransmitByte+0x48>)
 8000e6c:	f7ff ff1b 	bl	8000ca6 <LL_USART_TransmitData8>
  /* set timeout time to wait for transmit completion. */
  timeout = TimerGet() + RS232_BYTE_TX_TIMEOUT_MS;
 8000e70:	f000 f854 	bl	8000f1c <TimerGet>
 8000e74:	4603      	mov	r3, r0
 8000e76:	330a      	adds	r3, #10
 8000e78:	60fb      	str	r3, [r7, #12]
  /* wait for tx holding register to be empty */
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 8000e7a:	e007      	b.n	8000e8c <Rs232TransmitByte+0x30>
  {
    /* keep the watchdog happy */
    CopService();
 8000e7c:	f000 f985 	bl	800118a <CopService>
    /* break loop upon timeout. this would indicate a hardware failure. */
    if (TimerGet() > timeout)
 8000e80:	f000 f84c 	bl	8000f1c <TimerGet>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d306      	bcc.n	8000e9a <Rs232TransmitByte+0x3e>
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <Rs232TransmitByte+0x48>)
 8000e8e:	f7ff feea 	bl	8000c66 <LL_USART_IsActiveFlag_TXE>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0f1      	beq.n	8000e7c <Rs232TransmitByte+0x20>
    {
      break;
    }
  }
} /*** end of Rs232TransmitByte ***/
 8000e98:	e000      	b.n	8000e9c <Rs232TransmitByte+0x40>
      break;
 8000e9a:	bf00      	nop
} /*** end of Rs232TransmitByte ***/
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40004800 	.word	0x40004800

08000ea8 <TimerInit>:
** \brief     Initializes the polling based millisecond timer driver.
** \return    none.
**
****************************************************************************************/
void TimerInit(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Reset the timer configuration. */
  TimerReset();
 8000eac:	f000 f814 	bl	8000ed8 <TimerReset>

  /* Configure the systick frequency as a 1 ms event generator. */
  SysTick->LOAD = BOOT_CPU_SYSTEM_SPEED_KHZ - 1;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <TimerInit+0x24>)
 8000eb2:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <TimerInit+0x28>)
 8000eb4:	605a      	str	r2, [r3, #4]
  /* Reset the current counter value. */
  SysTick->VAL = 0;
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <TimerInit+0x24>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  /* Select core clock as source and enable the timer. */
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <TimerInit+0x24>)
 8000ebe:	2205      	movs	r2, #5
 8000ec0:	601a      	str	r2, [r3, #0]
  /* Reset the millisecond counter value. */
  millisecond_counter = 0;
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <TimerInit+0x2c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
} /*** end of TimerInit ***/
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	e000e010 	.word	0xe000e010
 8000ed0:	00034bbf 	.word	0x00034bbf
 8000ed4:	200004c4 	.word	0x200004c4

08000ed8 <TimerReset>:
**            configuration.
** \return    none.
**
****************************************************************************************/
void TimerReset(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* Set the systick's status and control register back into the default reset value. */
  SysTick->CTRL = 0;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <TimerReset+0x14>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
} /* end of TimerReset */
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <TimerUpdate>:
** \brief     Updates the millisecond timer.
** \return    none.
**
****************************************************************************************/
void TimerUpdate(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* Check if the millisecond event occurred. */
  if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <TimerUpdate+0x24>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d004      	beq.n	8000f0a <TimerUpdate+0x1a>
  {
    /* Increment the millisecond counter. */
    millisecond_counter++;
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <TimerUpdate+0x28>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <TimerUpdate+0x28>)
 8000f08:	6013      	str	r3, [r2, #0]
  }
} /*** end of TimerUpdate ***/
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e010 	.word	0xe000e010
 8000f18:	200004c4 	.word	0x200004c4

08000f1c <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 8000f20:	f7ff ffe6 	bl	8000ef0 <TimerUpdate>
  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
 8000f24:	4b01      	ldr	r3, [pc, #4]	; (8000f2c <TimerGet+0x10>)
 8000f26:	681b      	ldr	r3, [r3, #0]
} /*** end of TimerGet ***/
 8000f28:	4618      	mov	r0, r3
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200004c4 	.word	0x200004c4

08000f30 <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 8000f34:	f7ff fff2 	bl	8000f1c <TimerGet>
 8000f38:	4603      	mov	r3, r0
} /*** end of HAL_GetTick ***/
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 8000f48:	f000 f91f 	bl	800118a <CopService>
 8000f4c:	e7fc      	b.n	8000f48 <AssertFailure+0xa>
	...

08000f50 <BackDoorInit>:
** \brief     Initializes the backdoor entry option.
** \return    none
**
****************************************************************************************/
void BackDoorInit(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
    FileHandleFirmwareUpdateRequest();
  }
#endif
#else
  /* open the backdoor after a reset */
  backdoorOpen = BLT_TRUE;
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <BackDoorInit+0x18>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 8000f5a:	f000 f82d 	bl	8000fb8 <BackDoorRestartTimer>
#endif
  /* perform the first check that open/closes the backdoor */
  BackDoorCheck();
 8000f5e:	f000 f805 	bl	8000f6c <BackDoorCheck>
} /*** end of BackDoorInit ***/
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200004c8 	.word	0x200004c8

08000f6c <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 8000f70:	f000 f8ee 	bl	8001150 <ComIsConnected>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d015      	beq.n	8000fa6 <BackDoorCheck+0x3a>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <BackDoorCheck+0x40>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d112      	bne.n	8000fa8 <BackDoorCheck+0x3c>
  {
    /* check if the backdoor entry time window elapsed */
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 8000f82:	f7ff ffcb 	bl	8000f1c <TimerGet>
 8000f86:	4601      	mov	r1, r0
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <BackDoorCheck+0x44>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <BackDoorCheck+0x48>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4413      	add	r3, r2
 8000f92:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000f96:	4299      	cmp	r1, r3
 8000f98:	d306      	bcc.n	8000fa8 <BackDoorCheck+0x3c>
    {
      /* close the backdoor */
      backdoorOpen = BLT_FALSE;
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <BackDoorCheck+0x40>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
#endif
      {
        /* no firmware update requests detected, so attempt to start the user program.
         * this function does not return if a valid user program is present.
         */
        CpuStartUserProgram();
 8000fa0:	f7ff fabe 	bl	8000520 <CpuStartUserProgram>
 8000fa4:	e000      	b.n	8000fa8 <BackDoorCheck+0x3c>
    return;
 8000fa6:	bf00      	nop
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200004c8 	.word	0x200004c8
 8000fb0:	200004d0 	.word	0x200004d0
 8000fb4:	200004cc 	.word	0x200004cc

08000fb8 <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <BackDoorRestartTimer+0x1c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d104      	bne.n	8000fce <BackDoorRestartTimer+0x16>
  {
    backdoorOpenTime = TimerGet();
 8000fc4:	f7ff ffaa 	bl	8000f1c <TimerGet>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <BackDoorRestartTimer+0x20>)
 8000fcc:	601a      	str	r2, [r3, #0]
  }
} /*** end of BackDoorRestartTimer ***/
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200004c8 	.word	0x200004c8
 8000fd8:	200004cc 	.word	0x200004cc

08000fdc <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* initialize the CPU */
  CpuInit();
 8000fe0:	f7ff fa98 	bl	8000514 <CpuInit>
  /* initialize the watchdog */
  CopInit();
 8000fe4:	f000 f8cb 	bl	800117e <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 8000fe8:	f7ff ff5e 	bl	8000ea8 <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 8000fec:	f7ff fdd8 	bl	8000ba0 <NvmInit>
  /* initialize the file system module */
  FileInit();
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 8000ff0:	f000 f810 	bl	8001014 <ComInit>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 8000ff4:	f7ff ffac 	bl	8000f50 <BackDoorInit>
} /*** end of BootInit ***/
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* service the watchdog */
  CopService();
 8001000:	f000 f8c3 	bl	800118a <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 8001004:	f7ff ff74 	bl	8000ef0 <TimerUpdate>
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 8001008:	f000 f812 	bl	8001030 <ComTask>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
 800100c:	f7ff ffae 	bl	8000f6c <BackDoorCheck>
} /*** end of BootTask ***/
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* initialize the XCP communication protocol */
  XcpInit();
 8001018:	f000 f8be 	bl	8001198 <XcpInit>
  /* set it as active */
  comActiveInterface = COM_IF_CAN;
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* initialize the RS232 interface */
  Rs232Init();
 800101c:	f7ff fe52 	bl	8000cc4 <Rs232Init>
  /* set it as active */
  comActiveInterface = COM_IF_RS232;
 8001020:	4b02      	ldr	r3, [pc, #8]	; (800102c <ComInit+0x18>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
  NetInit();
  /* set it as active */
  comActiveInterface = COM_IF_NET;
  #endif
#endif
} /*** end of ComInit ***/
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000000 	.word	0x20000000

08001030 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  if (Rs232ReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	4619      	mov	r1, r3
 800103a:	4809      	ldr	r0, [pc, #36]	; (8001060 <ComTask+0x30>)
 800103c:	f7ff fe8e 	bl	8000d5c <Rs232ReceivePacket>
 8001040:	4603      	mov	r3, r0
 8001042:	2b01      	cmp	r3, #1
 8001044:	d107      	bne.n	8001056 <ComTask+0x26>
  {
    /* make this the active interface */
    comActiveInterface = COM_IF_RS232;
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <ComTask+0x34>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	4619      	mov	r1, r3
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <ComTask+0x30>)
 8001052:	f000 f8dd 	bl	8001210 <XcpPacketReceived>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200004d4 	.word	0x200004d4
 8001064:	20000000 	.word	0x20000000

08001068 <ComFree>:
** \brief     Releases the communication module.
** \return    none
**
****************************************************************************************/
void ComFree(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
#endif
} /*** end of ComFree ***/
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* transmit the packet. note that len is limited to 255 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_RS232)
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <ComTransmitPacket+0x2c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d105      	bne.n	8001098 <ComTransmitPacket+0x20>
  {
    Rs232TransmitPacket(data, (blt_int8u)len);
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff fe36 	bl	8000d04 <Rs232TransmitPacket>
    NetTransmitPacket(data, len);
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 8001098:	f000 f8ac 	bl	80011f4 <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000000 	.word	0x20000000

080010a8 <ComGetActiveInterfaceMaxRxLen>:
**            communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <ComGetActiveInterfaceMaxRxLen+0x50>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d816      	bhi.n	80010e4 <ComGetActiveInterfaceMaxRxLen+0x3c>
 80010b6:	a201      	add	r2, pc, #4	; (adr r2, 80010bc <ComGetActiveInterfaceMaxRxLen+0x14>)
 80010b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010bc:	080010cd 	.word	0x080010cd
 80010c0:	080010d3 	.word	0x080010d3
 80010c4:	080010d9 	.word	0x080010d9
 80010c8:	080010df 	.word	0x080010df
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_RX_MAX_DATA;
 80010cc:	2340      	movs	r3, #64	; 0x40
 80010ce:	80fb      	strh	r3, [r7, #6]
      break;
 80010d0:	e00b      	b.n	80010ea <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_RX_MAX_DATA;
 80010d2:	2300      	movs	r3, #0
 80010d4:	80fb      	strh	r3, [r7, #6]
      break;
 80010d6:	e008      	b.n	80010ea <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_USB:
      result = BOOT_COM_USB_RX_MAX_DATA;
 80010d8:	2300      	movs	r3, #0
 80010da:	80fb      	strh	r3, [r7, #6]
      break;
 80010dc:	e005      	b.n	80010ea <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_NET:
      result = BOOT_COM_NET_RX_MAX_DATA;
 80010de:	2340      	movs	r3, #64	; 0x40
 80010e0:	80fb      	strh	r3, [r7, #6]
      break;
 80010e2:	e002      	b.n	80010ea <ComGetActiveInterfaceMaxRxLen+0x42>

    default:
      result = BOOT_COM_RX_MAX_DATA;
 80010e4:	2340      	movs	r3, #64	; 0x40
 80010e6:	80fb      	strh	r3, [r7, #6]
      break;
 80010e8:	bf00      	nop
  }

  return result;
 80010ea:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	20000000 	.word	0x20000000

080010fc <ComGetActiveInterfaceMaxTxLen>:
**            specified communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <ComGetActiveInterfaceMaxTxLen+0x50>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b03      	cmp	r3, #3
 8001108:	d816      	bhi.n	8001138 <ComGetActiveInterfaceMaxTxLen+0x3c>
 800110a:	a201      	add	r2, pc, #4	; (adr r2, 8001110 <ComGetActiveInterfaceMaxTxLen+0x14>)
 800110c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001110:	08001121 	.word	0x08001121
 8001114:	08001127 	.word	0x08001127
 8001118:	0800112d 	.word	0x0800112d
 800111c:	08001133 	.word	0x08001133
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_TX_MAX_DATA;
 8001120:	2340      	movs	r3, #64	; 0x40
 8001122:	80fb      	strh	r3, [r7, #6]
      break;
 8001124:	e00b      	b.n	800113e <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_TX_MAX_DATA;
 8001126:	2300      	movs	r3, #0
 8001128:	80fb      	strh	r3, [r7, #6]
      break;
 800112a:	e008      	b.n	800113e <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_USB:
      result = BOOT_COM_USB_TX_MAX_DATA;
 800112c:	2300      	movs	r3, #0
 800112e:	80fb      	strh	r3, [r7, #6]
      break;
 8001130:	e005      	b.n	800113e <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_NET:
      result = BOOT_COM_NET_TX_MAX_DATA;
 8001132:	2340      	movs	r3, #64	; 0x40
 8001134:	80fb      	strh	r3, [r7, #6]
      break;
 8001136:	e002      	b.n	800113e <ComGetActiveInterfaceMaxTxLen+0x42>

    default:
      result = BOOT_COM_TX_MAX_DATA;
 8001138:	2340      	movs	r3, #64	; 0x40
 800113a:	80fb      	strh	r3, [r7, #6]
      break;
 800113c:	bf00      	nop
  }

  return result;
 800113e:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	20000000 	.word	0x20000000

08001150 <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
  blt_bool result = BLT_FALSE;
 8001156:	2300      	movs	r3, #0
 8001158:	71fb      	strb	r3, [r7, #7]

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 800115a:	f000 f83b 	bl	80011d4 <XcpIsConnected>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <ComIsConnected+0x18>
  {
    result = BLT_TRUE;
 8001164:	2301      	movs	r3, #1
 8001166:	71fb      	strb	r3, [r7, #7]
  {
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
 8001168:	79fb      	ldrb	r3, [r7, #7]
} /*** end of ComIsConnected ***/
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <ComDeferredInit>:
**            a request.
** \return    none
**
****************************************************************************************/
void ComDeferredInit(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	af00      	add	r7, sp, #0
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
  /* the default internal timed backdoor mechanism should start its timer after the
   * communication interfaces are initialized. since a deferred initialization was now
   * performed, the backdoor timer should be restarted.
   */
  BackDoorRestartTimer();
 8001176:	f7ff ff1f 	bl	8000fb8 <BackDoorRestartTimer>
#endif
} /*** end of ComDeferredInit ***/
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}

0800117e <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
 8001182:	f000 fbd9 	bl	8001938 <CopInitHook>
#endif
} /*** end of CopInit ***/
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}

0800118a <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
 800118e:	f000 fbda 	bl	8001946 <CopServiceHook>
#endif
} /*** end of CopService ***/
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <XcpInit>:
** \brief     Initializes the XCP driver. Should be called once upon system startup.
** \return    none
**
****************************************************************************************/
void XcpInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* reset xcp module info */
  xcpInfo.connected = 0;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <XcpInit+0x38>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
  xcpInfo.mta = 0;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <XcpInit+0x38>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoPending = 0;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <XcpInit+0x38>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  xcpInfo.ctoLen = 0;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <XcpInit+0x38>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  xcpInfo.s_n_k_resource = 0;
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <XcpInit+0x38>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	709a      	strb	r2, [r3, #2]
  xcpInfo.protection = 0;
 80011be:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <XcpInit+0x38>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	705a      	strb	r2, [r3, #1]
} /*** end of XcpInit ***/
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000514 	.word	0x20000514

080011d4 <XcpIsConnected>:
** \brief     Obtains information about the XCP connection state.
** \return    BLT_TRUE is an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool XcpIsConnected(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  if (xcpInfo.connected == 0)
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <XcpIsConnected+0x1c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <XcpIsConnected+0x10>
  {
    return BLT_FALSE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e000      	b.n	80011e6 <XcpIsConnected+0x12>
  }
  return BLT_TRUE;
 80011e4:	2301      	movs	r3, #1
} /*** end of XcpIsConnected ***/
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	20000514 	.word	0x20000514

080011f4 <XcpPacketTransmitted>:
**            the transport layer.
** \return    none
**
****************************************************************************************/
void XcpPacketTransmitted(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* reset packet transmission pending flag */
  xcpInfo.ctoPending = 0;
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <XcpPacketTransmitted+0x18>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
} /*** end of XcpPacketTransmitted ***/
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000514 	.word	0x20000514

08001210 <XcpPacketReceived>:
** \param     len Number of bytes in the packet.
** \return    none
**
****************************************************************************************/
void XcpPacketReceived(blt_int8u *data, blt_int8u len)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
    /* packet processed by hook function so no need to continue. */
    return;
  }
#endif
  /* was this a connect command? */
  if (data[0] == XCP_CMD_CONNECT)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2bff      	cmp	r3, #255	; 0xff
 8001222:	d103      	bne.n	800122c <XcpPacketReceived+0x1c>
  {
    /* process the connect command */
    XcpCmdConnect(data);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 f92d 	bl	8001484 <XcpCmdConnect>
 800122a:	e0b5      	b.n	8001398 <XcpPacketReceived+0x188>
  }
  /* only continue if connected */
  else if (xcpInfo.connected == 1)
 800122c:	4b69      	ldr	r3, [pc, #420]	; (80013d4 <XcpPacketReceived+0x1c4>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b01      	cmp	r3, #1
 8001232:	f040 80ca 	bne.w	80013ca <XcpPacketReceived+0x1ba>
  {
    switch (data[0])
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	3bc9      	subs	r3, #201	; 0xc9
 800123c:	2b35      	cmp	r3, #53	; 0x35
 800123e:	f200 80a7 	bhi.w	8001390 <XcpPacketReceived+0x180>
 8001242:	a201      	add	r2, pc, #4	; (adr r2, 8001248 <XcpPacketReceived+0x38>)
 8001244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001248:	08001361 	.word	0x08001361
 800124c:	08001391 	.word	0x08001391
 8001250:	08001391 	.word	0x08001391
 8001254:	08001389 	.word	0x08001389
 8001258:	08001391 	.word	0x08001391
 800125c:	08001391 	.word	0x08001391
 8001260:	08001381 	.word	0x08001381
 8001264:	08001369 	.word	0x08001369
 8001268:	08001379 	.word	0x08001379
 800126c:	08001371 	.word	0x08001371
 8001270:	08001391 	.word	0x08001391
 8001274:	08001391 	.word	0x08001391
 8001278:	08001391 	.word	0x08001391
 800127c:	08001391 	.word	0x08001391
 8001280:	08001391 	.word	0x08001391
 8001284:	08001391 	.word	0x08001391
 8001288:	08001391 	.word	0x08001391
 800128c:	08001391 	.word	0x08001391
 8001290:	08001391 	.word	0x08001391
 8001294:	08001391 	.word	0x08001391
 8001298:	08001391 	.word	0x08001391
 800129c:	08001391 	.word	0x08001391
 80012a0:	08001391 	.word	0x08001391
 80012a4:	08001391 	.word	0x08001391
 80012a8:	08001391 	.word	0x08001391
 80012ac:	08001391 	.word	0x08001391
 80012b0:	08001391 	.word	0x08001391
 80012b4:	08001391 	.word	0x08001391
 80012b8:	08001391 	.word	0x08001391
 80012bc:	08001391 	.word	0x08001391
 80012c0:	08001391 	.word	0x08001391
 80012c4:	08001391 	.word	0x08001391
 80012c8:	08001391 	.word	0x08001391
 80012cc:	08001391 	.word	0x08001391
 80012d0:	08001391 	.word	0x08001391
 80012d4:	08001391 	.word	0x08001391
 80012d8:	08001391 	.word	0x08001391
 80012dc:	08001391 	.word	0x08001391
 80012e0:	08001391 	.word	0x08001391
 80012e4:	08001391 	.word	0x08001391
 80012e8:	08001391 	.word	0x08001391
 80012ec:	08001391 	.word	0x08001391
 80012f0:	08001339 	.word	0x08001339
 80012f4:	08001329 	.word	0x08001329
 80012f8:	08001321 	.word	0x08001321
 80012fc:	08001331 	.word	0x08001331
 8001300:	08001391 	.word	0x08001391
 8001304:	08001391 	.word	0x08001391
 8001308:	08001391 	.word	0x08001391
 800130c:	08001341 	.word	0x08001341
 8001310:	08001391 	.word	0x08001391
 8001314:	08001349 	.word	0x08001349
 8001318:	08001351 	.word	0x08001351
 800131c:	08001359 	.word	0x08001359
    {
      case XCP_CMD_UPLOAD:
        XcpCmdUpload(data);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f977 	bl	8001614 <XcpCmdUpload>
        break;
 8001326:	e037      	b.n	8001398 <XcpPacketReceived+0x188>
      case XCP_CMD_SHORT_UPLOAD:
        XcpCmdShortUpload(data);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f9af 	bl	800168c <XcpCmdShortUpload>
        break;
 800132e:	e033      	b.n	8001398 <XcpPacketReceived+0x188>
      case XCP_CMD_SET_MTA:
        XcpCmdSetMta(data);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f957 	bl	80015e4 <XcpCmdSetMta>
        break;
 8001336:	e02f      	b.n	8001398 <XcpPacketReceived+0x188>
      case XCP_CMD_BUILD_CHECKSUM:
        XcpCmdBuildCheckSum(data);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 f9e7 	bl	800170c <XcpCmdBuildCheckSum>
        break;
 800133e:	e02b      	b.n	8001398 <XcpPacketReceived+0x188>
      case XCP_CMD_GET_ID:
        XcpCmdGetId(data);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f929 	bl	8001598 <XcpCmdGetId>
        break;
 8001346:	e027      	b.n	8001398 <XcpPacketReceived+0x188>
      case XCP_CMD_SYNCH:
        XcpCmdSynch(data);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 f919 	bl	8001580 <XcpCmdSynch>
        break;
 800134e:	e023      	b.n	8001398 <XcpPacketReceived+0x188>
      case XCP_CMD_GET_STATUS:
        XcpCmdGetStatus(data);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 f8f1 	bl	8001538 <XcpCmdGetStatus>
        break;
 8001356:	e01f      	b.n	8001398 <XcpPacketReceived+0x188>
      case XCP_CMD_DISCONNECT:
        XcpCmdDisconnect(data);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f8d7 	bl	800150c <XcpCmdDisconnect>
        break;
 800135e:	e01b      	b.n	8001398 <XcpPacketReceived+0x188>
        XcpCmdDownloadMax(data);
        break;
#endif
#if (XCP_RES_PROGRAMMING_EN == 1)
      case XCP_CMD_PROGRAM_MAX:
        XcpCmdProgramMax(data);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 fa1f 	bl	80017a4 <XcpCmdProgramMax>
        break;
 8001366:	e017      	b.n	8001398 <XcpPacketReceived+0x188>
      case XCP_CMD_PROGRAM:
        XcpCmdProgram(data);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 fa49 	bl	8001800 <XcpCmdProgram>
        break;
 800136e:	e013      	b.n	8001398 <XcpPacketReceived+0x188>
      case XCP_CMD_PROGRAM_START:
        XcpCmdProgramStart(data);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f9f1 	bl	8001758 <XcpCmdProgramStart>
        break;
 8001376:	e00f      	b.n	8001398 <XcpPacketReceived+0x188>
      case XCP_CMD_PROGRAM_CLEAR:
        XcpCmdProgramClear(data);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 fa89 	bl	8001890 <XcpCmdProgramClear>
        break;
 800137e:	e00b      	b.n	8001398 <XcpPacketReceived+0x188>
      case XCP_CMD_PROGRAM_RESET:
        XcpCmdProgramReset(data);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 faa5 	bl	80018d0 <XcpCmdProgramReset>
        break;
 8001386:	e007      	b.n	8001398 <XcpPacketReceived+0x188>
      case XCP_CMD_PROGRAM_PREPARE:
        XcpCmdProgramPrepare(data);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 fab5 	bl	80018f8 <XcpCmdProgramPrepare>
        break;
 800138e:	e003      	b.n	8001398 <XcpPacketReceived+0x188>
      case XCP_CMD_GET_CAL_PAGE:
        XcpCmdGetCalPage(data);
        break;
#endif
      default:
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 8001390:	2020      	movs	r0, #32
 8001392:	f000 f85f 	bl	8001454 <XcpSetCtoError>
        break;
 8001396:	bf00      	nop
    /* return to make sure response packet is not send because we are not connected */
    return;
  }

  /* make sure the previous command was completed */
  if (xcpInfo.ctoPending == 1)
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <XcpPacketReceived+0x1c4>)
 800139a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d102      	bne.n	80013a8 <XcpPacketReceived+0x198>
  {
    /* command overrun occurred */
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 80013a2:	2010      	movs	r0, #16
 80013a4:	f000 f856 	bl	8001454 <XcpSetCtoError>
  }

  /* send the response if it contains something */
  if (xcpInfo.ctoLen > 0)
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <XcpPacketReceived+0x1c4>)
 80013aa:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	dd0c      	ble.n	80013cc <XcpPacketReceived+0x1bc>
  {
    /* set cto packet transmission pending flag */
    xcpInfo.ctoPending = 1;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <XcpPacketReceived+0x1c4>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    /* transmit the cto response packet */
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <XcpPacketReceived+0x1c4>)
 80013bc:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80013c0:	4619      	mov	r1, r3
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <XcpPacketReceived+0x1c8>)
 80013c4:	f000 f80a 	bl	80013dc <XcpTransmitPacket>
 80013c8:	e000      	b.n	80013cc <XcpPacketReceived+0x1bc>
    return;
 80013ca:	bf00      	nop
  }
} /*** end of XcpPacketReceived ***/
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000514 	.word	0x20000514
 80013d8:	20000517 	.word	0x20000517

080013dc <XcpTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
static void XcpTransmitPacket(blt_int8u *data, blt_int16s len)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
  /* submit packet to the communication interface for transmission */
#if (BOOT_COM_ENABLE == 0)
  XcpTransmitPacketHook(data, len);
#else
  ComTransmitPacket(data, len);
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	4619      	mov	r1, r3
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff fe43 	bl	8001078 <ComTransmitPacket>
#endif

} /*** end of XcpTransmitPacket ***/
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <XcpComputeChecksum>:
** \return    Checksum type that was used during the checksum calculation.
**
****************************************************************************************/
static blt_int8u XcpComputeChecksum(blt_int32u address, blt_int32u length,
                                    blt_int32u *checksum)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
  blt_int8u cs = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	75fb      	strb	r3, [r7, #23]

  /* this example computes the checksum using the add byte to byte algorithm */
  while (length-- > 0)
 800140a:	e009      	b.n	8001420 <XcpComputeChecksum+0x26>
  {
    /* add the next byte value */
    cs += *((blt_int8u *)(blt_addr)address);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	781a      	ldrb	r2, [r3, #0]
 8001410:	7dfb      	ldrb	r3, [r7, #23]
 8001412:	4413      	add	r3, r2
 8001414:	75fb      	strb	r3, [r7, #23]
    /* increment address */
    address++;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3301      	adds	r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
    /* service the watchdog */
    CopService();
 800141c:	f7ff feb5 	bl	800118a <CopService>
  while (length-- > 0)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	1e5a      	subs	r2, r3, #1
 8001424:	60ba      	str	r2, [r7, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <XcpComputeChecksum+0x12>
  }
  /* store the computed checksum value */
  *checksum = cs;
 800142a:	7dfa      	ldrb	r2, [r7, #23]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	601a      	str	r2, [r3, #0]
  /* inform the caller of the uses checksum computation algorithm */
  return XCP_CS_ADD11;
 8001430:	2301      	movs	r3, #1
} /*** end of XcpComputeChecksum ***/
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <XcpProtectResources>:
** \brief     Utility function to protects all the available resources.
** \return    none
**
****************************************************************************************/
static void XcpProtectResources(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  xcpInfo.protection = 0;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <XcpProtectResources+0x14>)
 8001442:	2200      	movs	r2, #0
 8001444:	705a      	strb	r2, [r3, #1]

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	20000514 	.word	0x20000514

08001454 <XcpSetCtoError>:
** \param     error XCP error code (XCP_ERR_XXX).
** \return    none
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <XcpSetCtoError+0x2c>)
 8001460:	22fe      	movs	r2, #254	; 0xfe
 8001462:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[1] = error;
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <XcpSetCtoError+0x2c>)
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	7113      	strb	r3, [r2, #4]
  xcpInfo.ctoLen = 2;
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <XcpSetCtoError+0x2c>)
 800146c:	2202      	movs	r2, #2
 800146e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpSetCtoError ***/
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000514 	.word	0x20000514

08001484 <XcpCmdConnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdConnect(blt_int8u *data)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* enable resource protection */
  XcpProtectResources();
 800148c:	f7ff ffd6 	bl	800143c <XcpProtectResources>

  /* indicate that the connection is established */
  xcpInfo.connected = 1;
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <XcpCmdConnect+0x84>)
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <XcpCmdConnect+0x84>)
 8001498:	22ff      	movs	r2, #255	; 0xff
 800149a:	70da      	strb	r2, [r3, #3]

  /* report available resources */
  xcpInfo.ctoData[1] = 0;
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <XcpCmdConnect+0x84>)
 800149e:	2200      	movs	r2, #0
 80014a0:	711a      	strb	r2, [r3, #4]
#if (XCP_RES_PAGING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_CALPAG;
#endif

#if (XCP_RES_PROGRAMMING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <XcpCmdConnect+0x84>)
 80014a4:	791b      	ldrb	r3, [r3, #4]
 80014a6:	f043 0310 	orr.w	r3, r3, #16
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b16      	ldr	r3, [pc, #88]	; (8001508 <XcpCmdConnect+0x84>)
 80014ae:	711a      	strb	r2, [r3, #4]
#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_STIM;
#endif

  /* report communication mode info. only byte granularity is supported */
  xcpInfo.ctoData[2] = 0;
 80014b0:	4b15      	ldr	r3, [pc, #84]	; (8001508 <XcpCmdConnect+0x84>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	715a      	strb	r2, [r3, #5]
  /* configure for motorola or intel byte ordering */
  xcpInfo.ctoData[2] |= XCP_MOTOROLA_FORMAT;
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <XcpCmdConnect+0x84>)
 80014b8:	795a      	ldrb	r2, [r3, #5]
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <XcpCmdConnect+0x84>)
 80014bc:	715a      	strb	r2, [r3, #5]

  /* report max cto data length */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 80014be:	f7ff fdf3 	bl	80010a8 <ComGetActiveInterfaceMaxRxLen>
 80014c2:	4603      	mov	r3, r0
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <XcpCmdConnect+0x84>)
 80014c8:	719a      	strb	r2, [r3, #6]

  /* report max dto data length */
#if (XCP_MOTOROLA_FORMAT == 0)
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 80014ca:	f7ff fe17 	bl	80010fc <ComGetActiveInterfaceMaxTxLen>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <XcpCmdConnect+0x84>)
 80014d4:	71da      	strb	r2, [r3, #7]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 80014d6:	f7ff fe11 	bl	80010fc <ComGetActiveInterfaceMaxTxLen>
 80014da:	4603      	mov	r3, r0
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	b29b      	uxth	r3, r3
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <XcpCmdConnect+0x84>)
 80014e4:	721a      	strb	r2, [r3, #8]
  xcpInfo.ctoData[4] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
  xcpInfo.ctoData[5] = (blt_int8u)XCP_DTO_PACKET_LEN;
#endif

  /* report msb of protocol layer version number */
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <XcpCmdConnect+0x84>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	725a      	strb	r2, [r3, #9]

  /* report msb of transport layer version number */
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <XcpCmdConnect+0x84>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	729a      	strb	r2, [r3, #10]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <XcpCmdConnect+0x84>)
 80014f4:	2208      	movs	r2, #8
 80014f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* reinit the NVM driver because a new firmware update is about the start */
  NvmInit();
 80014fa:	f7ff fb51 	bl	8000ba0 <NvmInit>
} /*** end of XcpCmdConnect ***/
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000514 	.word	0x20000514

0800150c <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <XcpCmdDisconnect+0x28>)
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]

  /* enable resource protection */
  XcpProtectResources();
 800151a:	f7ff ff8f 	bl	800143c <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <XcpCmdDisconnect+0x28>)
 8001520:	22ff      	movs	r2, #255	; 0xff
 8001522:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <XcpCmdDisconnect+0x28>)
 8001526:	2201      	movs	r2, #1
 8001528:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdDisconnect ***/
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000514 	.word	0x20000514

08001538 <XcpCmdGetStatus>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetStatus(blt_int8u *data)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <XcpCmdGetStatus+0x44>)
 8001542:	22ff      	movs	r2, #255	; 0xff
 8001544:	70da      	strb	r2, [r3, #3]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <XcpCmdGetStatus+0x44>)
 8001548:	2200      	movs	r2, #0
 800154a:	711a      	strb	r2, [r3, #4]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <XcpCmdGetStatus+0x44>)
 800154e:	785a      	ldrb	r2, [r3, #1]
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <XcpCmdGetStatus+0x44>)
 8001552:	715a      	strb	r2, [r3, #5]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <XcpCmdGetStatus+0x44>)
 8001556:	2200      	movs	r2, #0
 8001558:	719a      	strb	r2, [r3, #6]
  xcpInfo.ctoData[4] = 0;
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <XcpCmdGetStatus+0x44>)
 800155c:	2200      	movs	r2, #0
 800155e:	71da      	strb	r2, [r3, #7]
  xcpInfo.ctoData[5] = 0;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <XcpCmdGetStatus+0x44>)
 8001562:	2200      	movs	r2, #0
 8001564:	721a      	strb	r2, [r3, #8]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <XcpCmdGetStatus+0x44>)
 8001568:	2206      	movs	r2, #6
 800156a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetStatus ***/
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000514 	.word	0x20000514

08001580 <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 8001588:	2000      	movs	r0, #0
 800158a:	f7ff ff63 	bl	8001454 <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <XcpCmdGetId>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetId(blt_int8u *data)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <XcpCmdGetId+0x40>)
 80015a2:	22ff      	movs	r2, #255	; 0xff
 80015a4:	70da      	strb	r2, [r3, #3]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 80015a6:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <XcpCmdGetId+0x44>)
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <XcpCmdGetId+0x40>)
 80015aa:	649a      	str	r2, [r3, #72]	; 0x48

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <XcpCmdGetId+0x40>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	711a      	strb	r2, [r3, #4]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <XcpCmdGetId+0x40>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[3] = 0;
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <XcpCmdGetId+0x40>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	719a      	strb	r2, [r3, #6]

  /* store station id length (excl. null termination) for response packet */
  *(blt_int32u *)&xcpInfo.ctoData[4] = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <XcpCmdGetId+0x48>)
 80015c0:	2207      	movs	r2, #7
 80015c2:	601a      	str	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <XcpCmdGetId+0x40>)
 80015c6:	2208      	movs	r2, #8
 80015c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetId ***/
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	20000514 	.word	0x20000514
 80015dc:	08003d88 	.word	0x08003d88
 80015e0:	2000051b 	.word	0x2000051b

080015e4 <XcpCmdSetMta>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <XcpCmdSetMta+0x2c>)
 80015ee:	22ff      	movs	r2, #255	; 0xff
 80015f0:	70da      	strb	r2, [r3, #3]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = *(blt_int32u *)&data[4];
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4a06      	ldr	r2, [pc, #24]	; (8001610 <XcpCmdSetMta+0x2c>)
 80015f8:	6493      	str	r3, [r2, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = 1;
 80015fa:	4b05      	ldr	r3, [pc, #20]	; (8001610 <XcpCmdSetMta+0x2c>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdSetMta ***/
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000514 	.word	0x20000514

08001614 <XcpCmdUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdUpload(blt_int8u *data)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3301      	adds	r3, #1
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	461c      	mov	r4, r3
 8001624:	f7ff fd40 	bl	80010a8 <ComGetActiveInterfaceMaxRxLen>
 8001628:	4603      	mov	r3, r0
 800162a:	3b01      	subs	r3, #1
 800162c:	429c      	cmp	r4, r3
 800162e:	dd03      	ble.n	8001638 <XcpCmdUpload+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8001630:	2022      	movs	r0, #34	; 0x22
 8001632:	f7ff ff0f 	bl	8001454 <XcpSetCtoError>
    return;
 8001636:	e021      	b.n	800167c <XcpCmdUpload+0x68>
  }

  /* read out the length of the requested upload operation */
  len = data[1];
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3301      	adds	r3, #1
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <XcpCmdUpload+0x70>)
 8001642:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8001644:	68b8      	ldr	r0, [r7, #8]
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <XcpCmdUpload+0x74>)
 8001648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164a:	89fa      	ldrh	r2, [r7, #14]
 800164c:	4619      	mov	r1, r3
 800164e:	f7fe ff9b 	bl	8000588 <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <XcpCmdUpload+0x74>)
 8001654:	22ff      	movs	r2, #255	; 0xff
 8001656:	70da      	strb	r2, [r3, #3]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <XcpCmdUpload+0x74>)
 800165a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	3201      	adds	r2, #1
 8001660:	7812      	ldrb	r2, [r2, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a08      	ldr	r2, [pc, #32]	; (8001688 <XcpCmdUpload+0x74>)
 8001666:	6493      	str	r3, [r2, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3301      	adds	r3, #1
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	3301      	adds	r3, #1
 8001672:	b29b      	uxth	r3, r3
 8001674:	b21a      	sxth	r2, r3
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <XcpCmdUpload+0x74>)
 8001678:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdUpload ***/
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bd90      	pop	{r4, r7, pc}
 8001682:	bf00      	nop
 8001684:	20000518 	.word	0x20000518
 8001688:	20000514 	.word	0x20000514

0800168c <XcpCmdShortUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdShortUpload(blt_int8u *data)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3301      	adds	r3, #1
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461c      	mov	r4, r3
 800169c:	f7ff fd04 	bl	80010a8 <ComGetActiveInterfaceMaxRxLen>
 80016a0:	4603      	mov	r3, r0
 80016a2:	3b01      	subs	r3, #1
 80016a4:	429c      	cmp	r4, r3
 80016a6:	dd03      	ble.n	80016b0 <XcpCmdShortUpload+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 80016a8:	2022      	movs	r0, #34	; 0x22
 80016aa:	f7ff fed3 	bl	8001454 <XcpSetCtoError>
    return;
 80016ae:	e025      	b.n	80016fc <XcpCmdShortUpload+0x70>
  }

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = *(blt_int32u *)&data[4];
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4a13      	ldr	r2, [pc, #76]	; (8001704 <XcpCmdShortUpload+0x78>)
 80016b6:	6493      	str	r3, [r2, #72]	; 0x48
  /* read out the length of the requested upload operation */
  len = data[1];
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3301      	adds	r3, #1
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <XcpCmdShortUpload+0x7c>)
 80016c2:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 80016c4:	68b8      	ldr	r0, [r7, #8]
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <XcpCmdShortUpload+0x78>)
 80016c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ca:	89fa      	ldrh	r2, [r7, #14]
 80016cc:	4619      	mov	r1, r3
 80016ce:	f7fe ff5b 	bl	8000588 <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <XcpCmdShortUpload+0x78>)
 80016d4:	22ff      	movs	r2, #255	; 0xff
 80016d6:	70da      	strb	r2, [r3, #3]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <XcpCmdShortUpload+0x78>)
 80016da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	3201      	adds	r2, #1
 80016e0:	7812      	ldrb	r2, [r2, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a07      	ldr	r2, [pc, #28]	; (8001704 <XcpCmdShortUpload+0x78>)
 80016e6:	6493      	str	r3, [r2, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3301      	adds	r3, #1
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3301      	adds	r3, #1
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	4b03      	ldr	r3, [pc, #12]	; (8001704 <XcpCmdShortUpload+0x78>)
 80016f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdShortUpload ***/
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd90      	pop	{r4, r7, pc}
 8001702:	bf00      	nop
 8001704:	20000514 	.word	0x20000514
 8001708:	20000518 	.word	0x20000518

0800170c <XcpCmdBuildCheckSum>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdBuildCheckSum(blt_int8u *data)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <XcpCmdBuildCheckSum+0x44>)
 8001716:	22ff      	movs	r2, #255	; 0xff
 8001718:	70da      	strb	r2, [r3, #3]

  /* obtain checksum and checksum type */
  xcpInfo.ctoData[1] = XcpComputeChecksum(xcpInfo.mta, *(blt_int32u *)&data[4],
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <XcpCmdBuildCheckSum+0x44>)
 800171c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3304      	adds	r3, #4
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <XcpCmdBuildCheckSum+0x48>)
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff fe67 	bl	80013fa <XcpComputeChecksum>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	4b07      	ldr	r3, [pc, #28]	; (8001750 <XcpCmdBuildCheckSum+0x44>)
 8001732:	711a      	strb	r2, [r3, #4]
                                          (blt_int32u *)&xcpInfo.ctoData[4]);

  /* initialize reserved parameters */
  xcpInfo.ctoData[2] = 0;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <XcpCmdBuildCheckSum+0x44>)
 8001736:	2200      	movs	r2, #0
 8001738:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[3] = 0;
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <XcpCmdBuildCheckSum+0x44>)
 800173c:	2200      	movs	r2, #0
 800173e:	719a      	strb	r2, [r3, #6]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <XcpCmdBuildCheckSum+0x44>)
 8001742:	2208      	movs	r2, #8
 8001744:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdBuildCheckSum ***/
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000514 	.word	0x20000514
 8001754:	2000051b 	.word	0x2000051b

08001758 <XcpCmdProgramStart>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramStart(blt_int8u *data)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <XcpCmdProgramStart+0x48>)
 8001762:	22ff      	movs	r2, #255	; 0xff
 8001764:	70da      	strb	r2, [r3, #3]

  /* initialize reserved parameter */
  xcpInfo.ctoData[1] = 0;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <XcpCmdProgramStart+0x48>)
 8001768:	2200      	movs	r2, #0
 800176a:	711a      	strb	r2, [r3, #4]

  /* no special communication mode supported during programming */
  xcpInfo.ctoData[2] = 0;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <XcpCmdProgramStart+0x48>)
 800176e:	2200      	movs	r2, #0
 8001770:	715a      	strb	r2, [r3, #5]

  /* cto packet length stays the same during programming */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8001772:	f7ff fc99 	bl	80010a8 <ComGetActiveInterfaceMaxRxLen>
 8001776:	4603      	mov	r3, r0
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <XcpCmdProgramStart+0x48>)
 800177c:	719a      	strb	r2, [r3, #6]

  /* no block size, st-min time, or queue size supported */
  xcpInfo.ctoData[4] = 0;
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <XcpCmdProgramStart+0x48>)
 8001780:	2200      	movs	r2, #0
 8001782:	71da      	strb	r2, [r3, #7]
  xcpInfo.ctoData[5] = 0;
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <XcpCmdProgramStart+0x48>)
 8001786:	2200      	movs	r2, #0
 8001788:	721a      	strb	r2, [r3, #8]
  xcpInfo.ctoData[6] = 0;
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <XcpCmdProgramStart+0x48>)
 800178c:	2200      	movs	r2, #0
 800178e:	725a      	strb	r2, [r3, #9]

  /* set packet length */
  xcpInfo.ctoLen = 7;
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <XcpCmdProgramStart+0x48>)
 8001792:	2207      	movs	r2, #7
 8001794:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramStart ***/
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000514 	.word	0x20000514

080017a4 <XcpCmdProgramMax>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramMax(blt_int8u *data)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <XcpCmdProgramMax+0x58>)
 80017ae:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80017b0:	f7ff fc7a 	bl	80010a8 <ComGetActiveInterfaceMaxRxLen>
 80017b4:	4603      	mov	r3, r0
 80017b6:	3b01      	subs	r3, #1
 80017b8:	4619      	mov	r1, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3301      	adds	r3, #1
 80017be:	461a      	mov	r2, r3
 80017c0:	4620      	mov	r0, r4
 80017c2:	f7ff f9f3 	bl	8000bac <NvmWrite>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d103      	bne.n	80017d4 <XcpCmdProgramMax+0x30>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 80017cc:	2031      	movs	r0, #49	; 0x31
 80017ce:	f7ff fe41 	bl	8001454 <XcpSetCtoError>
    return;
 80017d2:	e00f      	b.n	80017f4 <XcpCmdProgramMax+0x50>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <XcpCmdProgramMax+0x58>)
 80017d6:	22ff      	movs	r2, #255	; 0xff
 80017d8:	70da      	strb	r2, [r3, #3]

  /* post increment the mta */
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 80017da:	f7ff fc65 	bl	80010a8 <ComGetActiveInterfaceMaxRxLen>
 80017de:	4603      	mov	r3, r0
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <XcpCmdProgramMax+0x58>)
 80017e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e6:	4413      	add	r3, r2
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <XcpCmdProgramMax+0x58>)
 80017ea:	6493      	str	r3, [r2, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = 1;
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <XcpCmdProgramMax+0x58>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramMax ***/
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd90      	pop	{r4, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000514 	.word	0x20000514

08001800 <XcpCmdProgram>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgram(blt_int8u *data)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* validate length of download request */
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3301      	adds	r3, #1
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	461c      	mov	r4, r3
 8001810:	f7ff fc4a 	bl	80010a8 <ComGetActiveInterfaceMaxRxLen>
 8001814:	4603      	mov	r3, r0
 8001816:	3b02      	subs	r3, #2
 8001818:	429c      	cmp	r4, r3
 800181a:	dd03      	ble.n	8001824 <XcpCmdProgram+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 800181c:	2022      	movs	r0, #34	; 0x22
 800181e:	f7ff fe19 	bl	8001454 <XcpSetCtoError>
    return;
 8001822:	e030      	b.n	8001886 <XcpCmdProgram+0x86>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <XcpCmdProgram+0x8c>)
 8001826:	22ff      	movs	r2, #255	; 0xff
 8001828:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <XcpCmdProgram+0x8c>)
 800182c:	2201      	movs	r2, #1
 800182e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* end of programming sequence (datasize is 0)? */
  if (data[1] == 0)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3301      	adds	r3, #1
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d108      	bne.n	800184e <XcpCmdProgram+0x4e>
  {
    /* call erase/programming cleanup routine */
    if (NvmDone() == BLT_FALSE)
 800183c:	f7ff f9e2 	bl	8000c04 <NvmDone>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d11e      	bne.n	8001884 <XcpCmdProgram+0x84>
    {
      /* error occurred while finishing up programming */
      XcpSetCtoError(XCP_ERR_GENERIC);
 8001846:	2031      	movs	r0, #49	; 0x31
 8001848:	f7ff fe04 	bl	8001454 <XcpSetCtoError>
    }
    return;
 800184c:	e01a      	b.n	8001884 <XcpCmdProgram+0x84>
  }
  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <XcpCmdProgram+0x8c>)
 8001850:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3301      	adds	r3, #1
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3302      	adds	r3, #2
 800185e:	461a      	mov	r2, r3
 8001860:	f7ff f9a4 	bl	8000bac <NvmWrite>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d103      	bne.n	8001872 <XcpCmdProgram+0x72>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 800186a:	2031      	movs	r0, #49	; 0x31
 800186c:	f7ff fdf2 	bl	8001454 <XcpSetCtoError>
    return;
 8001870:	e009      	b.n	8001886 <XcpCmdProgram+0x86>
  }

  /* post increment the mta */
  xcpInfo.mta += data[1];
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <XcpCmdProgram+0x8c>)
 8001874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	3201      	adds	r2, #1
 800187a:	7812      	ldrb	r2, [r2, #0]
 800187c:	4413      	add	r3, r2
 800187e:	4a03      	ldr	r2, [pc, #12]	; (800188c <XcpCmdProgram+0x8c>)
 8001880:	6493      	str	r3, [r2, #72]	; 0x48
 8001882:	e000      	b.n	8001886 <XcpCmdProgram+0x86>
    return;
 8001884:	bf00      	nop
} /*** end of XcpCmdProgram ***/
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	bd90      	pop	{r4, r7, pc}
 800188c:	20000514 	.word	0x20000514

08001890 <XcpCmdProgramClear>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramClear(blt_int8u *data)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* erase the memory */
  if (NvmErase((blt_addr)xcpInfo.mta, *(blt_int32u *)&data[4]) == BLT_FALSE)
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <XcpCmdProgramClear+0x3c>)
 800189a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3304      	adds	r3, #4
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4619      	mov	r1, r3
 80018a4:	4610      	mov	r0, r2
 80018a6:	f7ff f991 	bl	8000bcc <NvmErase>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d103      	bne.n	80018b8 <XcpCmdProgramClear+0x28>
  {
    /* error occurred during erasure */
    XcpSetCtoError(XCP_ERR_GENERIC);
 80018b0:	2031      	movs	r0, #49	; 0x31
 80018b2:	f7ff fdcf 	bl	8001454 <XcpSetCtoError>
    return;
 80018b6:	e006      	b.n	80018c6 <XcpCmdProgramClear+0x36>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <XcpCmdProgramClear+0x3c>)
 80018ba:	22ff      	movs	r2, #255	; 0xff
 80018bc:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 80018be:	4b03      	ldr	r3, [pc, #12]	; (80018cc <XcpCmdProgramClear+0x3c>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramClear ***/
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000514 	.word	0x20000514

080018d0 <XcpCmdProgramReset>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramReset(blt_int8u *data)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
#endif

  /* reset the ecu after programming is done. so basically, just start the newly programmed
   * firmware. it is okay if the code does not return here. 
   */
  CpuStartUserProgram();
 80018d8:	f7fe fe22 	bl	8000520 <CpuStartUserProgram>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <XcpCmdProgramReset+0x24>)
 80018de:	22ff      	movs	r2, #255	; 0xff
 80018e0:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <XcpCmdProgramReset+0x24>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramReset ***/
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000514 	.word	0x20000514

080018f8 <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 8001900:	2031      	movs	r0, #49	; 0x31
 8001902:	f7ff fda7 	bl	8001454 <XcpSetCtoError>
  return;
 8001906:	bf00      	nop
} /*** end of XcpCmdProgramPrepare ***/
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <CpuUserProgramStartHook>:
** \return    BLT_TRUE if it is okay to start the user program, BLT_FALSE to keep
**            keep the bootloader active.
**
****************************************************************************************/
blt_bool CpuUserProgramStartHook(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* additional and optional backdoor entry through the pushbutton on the board. to
   * force the bootloader to stay active after reset, keep the pushbutton pressed while
   * resetting the microcontroller.
   */
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 8001914:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001918:	4806      	ldr	r0, [pc, #24]	; (8001934 <CpuUserProgramStartHook+0x24>)
 800191a:	f001 f915 	bl	8002b48 <HAL_GPIO_ReadPin>
 800191e:	4603      	mov	r3, r0
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <CpuUserProgramStartHook+0x18>
  {
    /* pushbutton pressed, so do not start the user program and keep the
     * bootloader active instead.
     */
    return BLT_FALSE;
 8001924:	2300      	movs	r3, #0
 8001926:	e002      	b.n	800192e <CpuUserProgramStartHook+0x1e>
  }
  /* clean up the LED driver */
  LedBlinkExit();
 8001928:	f000 f854 	bl	80019d4 <LedBlinkExit>
  /*  okay to start the user program.*/
  return BLT_TRUE;
 800192c:	2301      	movs	r3, #1
} /*** end of CpuUserProgramStartHook ***/
 800192e:	4618      	mov	r0, r3
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40020800 	.word	0x40020800

08001938 <CopInitHook>:
**            watchdog.
** \return    none.
**
****************************************************************************************/
void CopInitHook(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* this function is called upon initialization. might as well use it to initialize
   * the LED driver. It is kind of a visual watchdog anyways.
   */
  LedBlinkInit(100);
 800193c:	2064      	movs	r0, #100	; 0x64
 800193e:	f000 f809 	bl	8001954 <LedBlinkInit>
} /*** end of CopInitHook ***/
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}

08001946 <CopServiceHook>:
**            the watchdog to prevent a watchdog reset.
** \return    none.
**
****************************************************************************************/
void CopServiceHook(void)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	af00      	add	r7, sp, #0
  /* run the LED blink task. this is a better place to do it than in the main() program
   * loop. certain operations such as flash erase can take a long time, which would cause
   * a blink interval to be skipped. this function is also called during such operations,
   * so no blink intervals will be skipped when calling the LED blink task here.
   */
  LedBlinkTask();
 800194a:	f000 f813 	bl	8001974 <LedBlinkTask>
} /*** end of CopServiceHook ***/
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <LedBlinkInit>:
** \param     interval_ms Specifies the desired LED blink interval time in milliseconds.
** \return    none.
**
****************************************************************************************/
void LedBlinkInit(blt_int16u interval_ms)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	80fb      	strh	r3, [r7, #6]
  /* store the interval time between LED toggles */
  ledBlinkIntervalMs = interval_ms;
 800195e:	4a04      	ldr	r2, [pc, #16]	; (8001970 <LedBlinkInit+0x1c>)
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	8013      	strh	r3, [r2, #0]
} /*** end of LedBlinkInit ***/
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	20000560 	.word	0x20000560

08001974 <LedBlinkTask>:
** \brief     Task function for blinking the LED as a fixed timer interval.
** \return    none.
**
****************************************************************************************/
void LedBlinkTask(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  static blt_bool ledOn = BLT_FALSE;
  static blt_int32u nextBlinkEvent = 0;

  /* check for blink event */
  if (TimerGet() >= nextBlinkEvent)
 8001978:	f7ff fad0 	bl	8000f1c <TimerGet>
 800197c:	4602      	mov	r2, r0
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <LedBlinkTask+0x50>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d31c      	bcc.n	80019c0 <LedBlinkTask+0x4c>
  {
    /* toggle the LED state */
    if (ledOn == BLT_FALSE)
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <LedBlinkTask+0x54>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d108      	bne.n	80019a0 <LedBlinkTask+0x2c>
    {
      ledOn = BLT_TRUE;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <LedBlinkTask+0x54>)
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8001994:	2201      	movs	r2, #1
 8001996:	2108      	movs	r1, #8
 8001998:	480c      	ldr	r0, [pc, #48]	; (80019cc <LedBlinkTask+0x58>)
 800199a:	f001 f8ed 	bl	8002b78 <HAL_GPIO_WritePin>
 800199e:	e007      	b.n	80019b0 <LedBlinkTask+0x3c>
    }
    else
    {
      ledOn = BLT_FALSE;
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <LedBlinkTask+0x54>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2108      	movs	r1, #8
 80019aa:	4808      	ldr	r0, [pc, #32]	; (80019cc <LedBlinkTask+0x58>)
 80019ac:	f001 f8e4 	bl	8002b78 <HAL_GPIO_WritePin>
    }
    /* schedule the next blink event */
    nextBlinkEvent = TimerGet() + ledBlinkIntervalMs;
 80019b0:	f7ff fab4 	bl	8000f1c <TimerGet>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <LedBlinkTask+0x5c>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	4a01      	ldr	r2, [pc, #4]	; (80019c4 <LedBlinkTask+0x50>)
 80019be:	6013      	str	r3, [r2, #0]
  }
} /*** end of LedBlinkTask ***/
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000564 	.word	0x20000564
 80019c8:	20000568 	.word	0x20000568
 80019cc:	40022800 	.word	0x40022800
 80019d0:	20000560 	.word	0x20000560

080019d4 <LedBlinkExit>:
**            exit.
** \return    none.
**
****************************************************************************************/
void LedBlinkExit(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* turn the LED off */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80019d8:	2200      	movs	r2, #0
 80019da:	2180      	movs	r1, #128	; 0x80
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <LedBlinkExit+0x14>)
 80019de:	f001 f8cb 	bl	8002b78 <HAL_GPIO_WritePin>
} /*** end of LedBlinkExit ***/
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40020400 	.word	0x40020400

080019ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
  blt_int8u deferredInitRequestFlag = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	71fb      	strb	r3, [r7, #7]

  /* initialize the microcontroller */
  Init();
 80019f6:	f000 f811 	bl	8001a1c <Init>
  /* initialize the shared parameters module */
  SharedParamsInit();
 80019fa:	f000 f94f 	bl	8001c9c <SharedParamsInit>
  /* initialize the bootloader */
  BootInit();
 80019fe:	f7ff faed 	bl	8000fdc <BootInit>
   * the bootloader to initialize the TCP/IP network stack. this makes it possible for
   * a firmware update to proceed. the code here reads out this flag and performs the
   * TCP/IP network stack initialization when requested.
   */
  //ComDeferredInit();
  SharedParamsReadByIndex(0, &deferredInitRequestFlag);
 8001a02:	1dfb      	adds	r3, r7, #7
 8001a04:	4619      	mov	r1, r3
 8001a06:	2000      	movs	r0, #0
 8001a08:	f000 f970 	bl	8001cec <SharedParamsReadByIndex>
  if (deferredInitRequestFlag == 1)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <main+0x2a>
  {
    /* explicitly initialize all communication interface for which the deferred
     * initialization feature was enabled.
     */
    ComDeferredInit();
 8001a12:	f7ff fbae 	bl	8001172 <ComDeferredInit>

  /* start the infinite program loop */
  while (1)
  {
    /* run the bootloader task */
    BootTask();
 8001a16:	f7ff faf1 	bl	8000ffc <BootTask>
 8001a1a:	e7fc      	b.n	8001a16 <main+0x2a>

08001a1c <Init>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* HAL library initialization */
  HAL_Init();
 8001a20:	f000 fa78 	bl	8001f14 <HAL_Init>
  /* configure system clock */
  SystemClock_Config();
 8001a24:	f000 f802 	bl	8001a2c <SystemClock_Config>
} /*** end of Init ***/
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <SystemClock_Config>:




void SystemClock_Config(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b094      	sub	sp, #80	; 0x50
 8001a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	2234      	movs	r2, #52	; 0x34
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 f8d6 	bl	8003bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	4b2c      	ldr	r3, [pc, #176]	; (8001b08 <SystemClock_Config+0xdc>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	4a2b      	ldr	r2, [pc, #172]	; (8001b08 <SystemClock_Config+0xdc>)
 8001a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a60:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <SystemClock_Config+0xdc>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <SystemClock_Config+0xe0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a25      	ldr	r2, [pc, #148]	; (8001b0c <SystemClock_Config+0xe0>)
 8001a76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <SystemClock_Config+0xe0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a92:	2302      	movs	r3, #2
 8001a94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001aa0:	23b4      	movs	r3, #180	; 0xb4
 8001aa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001aa8:	2306      	movs	r3, #6
 8001aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8001aac:	2306      	movs	r3, #6
 8001aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f001 fa87 	bl	8002fc8 <HAL_RCC_OscConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ac0:	f000 f8e4 	bl	8001c8c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ac4:	f001 f872 	bl	8002bac <HAL_PWREx_EnableOverDrive>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ace:	f000 f8dd 	bl	8001c8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad2:	230f      	movs	r3, #15
 8001ad4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ade:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ae2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	2105      	movs	r1, #5
 8001af0:	4618      	mov	r0, r3
 8001af2:	f001 f8ab 	bl	8002c4c <HAL_RCC_ClockConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001afc:	f000 f8c6 	bl	8001c8c <Error_Handler>
  }
}
 8001b00:	bf00      	nop
 8001b02:	3750      	adds	r7, #80	; 0x50
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40007000 	.word	0x40007000

08001b10 <HAL_MspInit>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void HAL_MspInit(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08e      	sub	sp, #56	; 0x38
 8001b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Power and SYSCFG clock enable. */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
 8001b1a:	4b58      	ldr	r3, [pc, #352]	; (8001c7c <HAL_MspInit+0x16c>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a57      	ldr	r2, [pc, #348]	; (8001c7c <HAL_MspInit+0x16c>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b55      	ldr	r3, [pc, #340]	; (8001c7c <HAL_MspInit+0x16c>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	623b      	str	r3, [r7, #32]
 8001b30:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	4b51      	ldr	r3, [pc, #324]	; (8001c7c <HAL_MspInit+0x16c>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a50      	ldr	r2, [pc, #320]	; (8001c7c <HAL_MspInit+0x16c>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b4e      	ldr	r3, [pc, #312]	; (8001c7c <HAL_MspInit+0x16c>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4a:	61fb      	str	r3, [r7, #28]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
  /* GPIO ports clock enable. */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <HAL_MspInit+0x16c>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a49      	ldr	r2, [pc, #292]	; (8001c7c <HAL_MspInit+0x16c>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b47      	ldr	r3, [pc, #284]	; (8001c7c <HAL_MspInit+0x16c>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	4b43      	ldr	r3, [pc, #268]	; (8001c7c <HAL_MspInit+0x16c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a42      	ldr	r2, [pc, #264]	; (8001c7c <HAL_MspInit+0x16c>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b40      	ldr	r3, [pc, #256]	; (8001c7c <HAL_MspInit+0x16c>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b3c      	ldr	r3, [pc, #240]	; (8001c7c <HAL_MspInit+0x16c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a3b      	ldr	r2, [pc, #236]	; (8001c7c <HAL_MspInit+0x16c>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b39      	ldr	r3, [pc, #228]	; (8001c7c <HAL_MspInit+0x16c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <HAL_MspInit+0x16c>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a34      	ldr	r2, [pc, #208]	; (8001c7c <HAL_MspInit+0x16c>)
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b32      	ldr	r3, [pc, #200]	; (8001c7c <HAL_MspInit+0x16c>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <HAL_MspInit+0x16c>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a2d      	ldr	r2, [pc, #180]	; (8001c7c <HAL_MspInit+0x16c>)
 8001bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <HAL_MspInit+0x16c>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <HAL_MspInit+0x16c>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a26      	ldr	r2, [pc, #152]	; (8001c7c <HAL_MspInit+0x16c>)
 8001be4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_MspInit+0x16c>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]

#if (BOOT_COM_RS232_ENABLE > 0)
  /* UART clock enable. */
  __HAL_RCC_USART3_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <HAL_MspInit+0x16c>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a1f      	ldr	r2, [pc, #124]	; (8001c7c <HAL_MspInit+0x16c>)
 8001c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_MspInit+0x16c>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
#endif

  /* Configure GPIO pin for the LED. */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c12:	2308      	movs	r3, #8
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c16:	2301      	movs	r3, #1
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c26:	4619      	mov	r1, r3
 8001c28:	4815      	ldr	r0, [pc, #84]	; (8001c80 <HAL_MspInit+0x170>)
 8001c2a:	f000 fde3 	bl	80027f4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2108      	movs	r1, #8
 8001c32:	4813      	ldr	r0, [pc, #76]	; (8001c80 <HAL_MspInit+0x170>)
 8001c34:	f000 ffa0 	bl	8002b78 <HAL_GPIO_WritePin>

  /* Configure GPIO pin for (optional) backdoor entry input. */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	480d      	ldr	r0, [pc, #52]	; (8001c84 <HAL_MspInit+0x174>)
 8001c4e:	f000 fdd1 	bl	80027f4 <HAL_GPIO_Init>
#if (BOOT_COM_RS232_ENABLE > 0)
  /* UART TX and RX GPIO pin configuration. */
  GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 8001c52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c60:	2303      	movs	r3, #3
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c64:	2307      	movs	r3, #7
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4806      	ldr	r0, [pc, #24]	; (8001c88 <HAL_MspInit+0x178>)
 8001c70:	f000 fdc0 	bl	80027f4 <HAL_GPIO_Init>
#endif
} /*** end of HAL_MspInit ***/
 8001c74:	bf00      	nop
 8001c76:	3738      	adds	r7, #56	; 0x38
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40022800 	.word	0x40022800
 8001c84:	40020800 	.word	0x40020800
 8001c88:	40020400 	.word	0x40020400

08001c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <SharedParamsInit>:
** \brief     Initializes the shared RAM parameters module.
** \return    none.
**
****************************************************************************************/
void SharedParamsInit(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0

  /* The shared parameter buffer does not get initialized by the C-startup code. Another
   * previously running program could have initialized it, in which case it is ready
   * for use and nothing more needs to be done.
   */
  if (!SharedParamsValidateBuffer())
 8001ca2:	f000 f845 	bl	8001d30 <SharedParamsValidateBuffer>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f083 0301 	eor.w	r3, r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d013      	beq.n	8001cda <SharedParamsInit+0x3e>
     * was configured to not do this.
     *
     * The initialization consists of setting the buffer identifier, zeroing the
     * actual parameter data and updating the checksum at the end.
     */
    sharedParamsBuffer.identifier = SHARED_PARAMS_BUFFER_ID;
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <SharedParamsInit+0x48>)
 8001cb4:	4a0c      	ldr	r2, [pc, #48]	; (8001ce8 <SharedParamsInit+0x4c>)
 8001cb6:	601a      	str	r2, [r3, #0]
    for (byteIdx=0; byteIdx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	e008      	b.n	8001cd0 <SharedParamsInit+0x34>
    {
      sharedParamsBuffer.data[byteIdx] = 0;
 8001cbe:	4a09      	ldr	r2, [pc, #36]	; (8001ce4 <SharedParamsInit+0x48>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
    for (byteIdx=0; byteIdx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b37      	cmp	r3, #55	; 0x37
 8001cd4:	d9f3      	bls.n	8001cbe <SharedParamsInit+0x22>
    }
    SharedParamsWriteChecksum();
 8001cd6:	f000 f845 	bl	8001d64 <SharedParamsWriteChecksum>
  }
} /*** end of SharedParamsInit ***/
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000010 	.word	0x20000010
 8001ce8:	ce42e7a2 	.word	0xce42e7a2

08001cec <SharedParamsReadByIndex>:
** \param     value Pointer to where the read data value is stored.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
bool SharedParamsReadByIndex(uint32_t idx, uint8_t * value)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  bool result = false;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]

  /* Only continue if the buffer and the specified parameters are valid. */
  if ( (SharedParamsValidateBuffer()) &&
 8001cfa:	f000 f819 	bl	8001d30 <SharedParamsValidateBuffer>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00e      	beq.n	8001d22 <SharedParamsReadByIndex+0x36>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b37      	cmp	r3, #55	; 0x37
 8001d08:	d80b      	bhi.n	8001d22 <SharedParamsReadByIndex+0x36>
       (idx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN)  &&
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <SharedParamsReadByIndex+0x36>
       (value != NULL) )
  {
    /* Read the value and update the result. */
    *value = sharedParamsBuffer.data[idx];
 8001d10:	4a06      	ldr	r2, [pc, #24]	; (8001d2c <SharedParamsReadByIndex+0x40>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	3304      	adds	r3, #4
 8001d18:	781a      	ldrb	r2, [r3, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	701a      	strb	r2, [r3, #0]
    result = true;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	73fb      	strb	r3, [r7, #15]
  }
  /* Give the result back to the caller. */
  return result;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of SharedParamsReadByIndex ***/
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000010 	.word	0x20000010

08001d30 <SharedParamsValidateBuffer>:
**            identifier and verifying its checksum.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
static bool SharedParamsValidateBuffer(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
  bool result = false;
 8001d36:	2300      	movs	r3, #0
 8001d38:	71fb      	strb	r3, [r7, #7]

  /* Perform validation. */
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <SharedParamsValidateBuffer+0x2c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a08      	ldr	r2, [pc, #32]	; (8001d60 <SharedParamsValidateBuffer+0x30>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d106      	bne.n	8001d52 <SharedParamsValidateBuffer+0x22>
       (SharedParamsVerifyChecksum()) )
 8001d44:	f000 f81a 	bl	8001d7c <SharedParamsVerifyChecksum>
 8001d48:	4603      	mov	r3, r0
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <SharedParamsValidateBuffer+0x22>
  {
    /* The shared parameter buffer is valid, so update the result value. */
    result = true;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	71fb      	strb	r3, [r7, #7]
  }
  /* Give the result back to the caller. */
  return result;
 8001d52:	79fb      	ldrb	r3, [r7, #7]
} /*** end of SharedParamsValitabeTable ***/
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000010 	.word	0x20000010
 8001d60:	ce42e7a2 	.word	0xce42e7a2

08001d64 <SharedParamsWriteChecksum>:
** \brief     Calculates and writes the checksum into the buffer.
** \return    none.
**
****************************************************************************************/
static void SharedParamsWriteChecksum(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Calculate and write the checksum. */
  sharedParamsBuffer.checksum = SharedParamsCalculateChecksum();
 8001d68:	f000 f81e 	bl	8001da8 <SharedParamsCalculateChecksum>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b01      	ldr	r3, [pc, #4]	; (8001d78 <SharedParamsWriteChecksum+0x14>)
 8001d72:	879a      	strh	r2, [r3, #60]	; 0x3c
} /*** end of SharedParamsWriteChecksum ***/
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000010 	.word	0x20000010

08001d7c <SharedParamsVerifyChecksum>:
**            buffer.
** \return    True is the checksum is correct, false otherwise.
**
****************************************************************************************/
static bool SharedParamsVerifyChecksum(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
  bool result = false;
 8001d82:	2300      	movs	r3, #0
 8001d84:	71fb      	strb	r3, [r7, #7]

  /* Calculate and verify the checksum. */
  if (SharedParamsCalculateChecksum() == sharedParamsBuffer.checksum)
 8001d86:	f000 f80f 	bl	8001da8 <SharedParamsCalculateChecksum>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <SharedParamsVerifyChecksum+0x28>)
 8001d90:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d101      	bne.n	8001d9a <SharedParamsVerifyChecksum+0x1e>
  {
    /* Checksum is correct, so update the result value. */
    result = true;
 8001d96:	2301      	movs	r3, #1
 8001d98:	71fb      	strb	r3, [r7, #7]
  }
  /* Give the result back to the caller. */
  return result;
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
} /*** end of SharedParamsVerifyChecksum ***/
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000010 	.word	0x20000010

08001da8 <SharedParamsCalculateChecksum>:
**            two's complement value of it.
** \return    The calculated checksum value.
**
****************************************************************************************/
static uint16_t SharedParamsCalculateChecksum(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
  uint16_t result = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	80fb      	strh	r3, [r7, #6]
  uint32_t byteIdx;

  /* Add the identifier bytes to the checksum. */
  result += (uint8_t)sharedParamsBuffer.identifier;
 8001db2:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <SharedParamsCalculateChecksum+0x88>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 8u);
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <SharedParamsCalculateChecksum+0x88>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0a1b      	lsrs	r3, r3, #8
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	4413      	add	r3, r2
 8001dce:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 16u);
 8001dd0:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <SharedParamsCalculateChecksum+0x88>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	0c1b      	lsrs	r3, r3, #16
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	4413      	add	r3, r2
 8001dde:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 24u);
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <SharedParamsCalculateChecksum+0x88>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	0e1b      	lsrs	r3, r3, #24
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	4413      	add	r3, r2
 8001dee:	80fb      	strh	r3, [r7, #6]
  /* Loop through the parameter data array. */
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	e00b      	b.n	8001e0e <SharedParamsCalculateChecksum+0x66>
  {
    /* Add parameter data byte to the checksum. */
    result += (uint8_t)sharedParamsBuffer.data[byteIdx];
 8001df6:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <SharedParamsCalculateChecksum+0x88>)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	4413      	add	r3, r2
 8001e06:	80fb      	strh	r3, [r7, #6]
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b37      	cmp	r3, #55	; 0x37
 8001e12:	d9f0      	bls.n	8001df6 <SharedParamsCalculateChecksum+0x4e>
  }
  /* Determine one's complement. */
  result = ~result;
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	80fb      	strh	r3, [r7, #6]
  /* Determine two's complement. */
  result += 1;
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	80fb      	strh	r3, [r7, #6]
  /* Give the result back to the caller. */
  return result;
 8001e20:	88fb      	ldrh	r3, [r7, #6]
} /*** end of SharedParamsCalculateChecksum ***/
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000010 	.word	0x20000010

08001e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <HardFault_Handler+0x4>

08001e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <MemManage_Handler+0x4>

08001e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <BusFault_Handler+0x4>

08001e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <UsageFault_Handler+0x4>

08001e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <SystemInit+0x28>)
 8001e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9e:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <SystemInit+0x28>)
 8001ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ea8:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <SystemInit+0x28>)
 8001eaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001eae:	609a      	str	r2, [r3, #8]
#endif
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ec4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ec6:	e003      	b.n	8001ed0 <LoopCopyDataInit>

08001ec8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001eca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ecc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ece:	3104      	adds	r1, #4

08001ed0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ed0:	480b      	ldr	r0, [pc, #44]	; (8001f00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ed4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ed6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ed8:	d3f6      	bcc.n	8001ec8 <CopyDataInit>
  ldr  r2, =_sbss
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001edc:	e002      	b.n	8001ee4 <LoopFillZerobss>

08001ede <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ede:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ee0:	f842 3b04 	str.w	r3, [r2], #4

08001ee4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ee6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ee8:	d3f9      	bcc.n	8001ede <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eea:	f7ff ffd3 	bl	8001e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eee:	f001 fe59 	bl	8003ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef2:	f7ff fd7b 	bl	80019ec <main>
  bx  lr    
 8001ef6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ef8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001efc:	08003db8 	.word	0x08003db8
  ldr  r0, =_sdata
 8001f00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f04:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001f08:	20000050 	.word	0x20000050
  ldr  r3, = _ebss
 8001f0c:	2000058c 	.word	0x2000058c

08001f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f10:	e7fe      	b.n	8001f10 <ADC_IRQHandler>
	...

08001f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f18:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <HAL_Init+0x40>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <HAL_Init+0x40>)
 8001f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_Init+0x40>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <HAL_Init+0x40>)
 8001f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a07      	ldr	r2, [pc, #28]	; (8001f54 <HAL_Init+0x40>)
 8001f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	f000 f921 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f42:	2000      	movs	r0, #0
 8001f44:	f000 f83c 	bl	8001fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f48:	f7ff fde2 	bl	8001b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023c00 	.word	0x40023c00

08001f58 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <HAL_DeInit+0x54>)
 8001f5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f62:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <HAL_DeInit+0x54>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <HAL_DeInit+0x54>)
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <HAL_DeInit+0x54>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <HAL_DeInit+0x54>)
 8001f7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f7e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_DeInit+0x54>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_DeInit+0x54>)
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f8c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001f8e:	4b07      	ldr	r3, [pc, #28]	; (8001fac <HAL_DeInit+0x54>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_DeInit+0x54>)
 8001f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f9a:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <HAL_DeInit+0x54>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001fa2:	f000 f805 	bl	8001fb0 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800

08001fb0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_InitTick+0x54>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_InitTick+0x58>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f8f7 	bl	80021d2 <HAL_SYSTICK_Config>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00e      	b.n	800200c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b0f      	cmp	r3, #15
 8001ff2:	d80a      	bhi.n	800200a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ffc:	f000 f8cd 	bl	800219a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002000:	4a06      	ldr	r2, [pc, #24]	; (800201c <HAL_InitTick+0x5c>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	e000      	b.n	800200c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000004 	.word	0x20000004
 8002018:	2000000c 	.word	0x2000000c
 800201c:	20000008 	.word	0x20000008

08002020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800203c:	4013      	ands	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800204c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002052:	4a04      	ldr	r2, [pc, #16]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	60d3      	str	r3, [r2, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <__NVIC_GetPriorityGrouping+0x18>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	f003 0307 	and.w	r3, r3, #7
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	; (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002164:	f7ff ff8e 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff47 	bl	8002020 <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ac:	f7ff ff5c 	bl	8002068 <__NVIC_GetPriorityGrouping>
 80021b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff ff8e 	bl	80020d8 <NVIC_EncodePriority>
 80021bc:	4602      	mov	r2, r0
 80021be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5d 	bl	8002084 <__NVIC_SetPriority>
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ffb0 	bl	8002140 <SysTick_Config>
 80021e0:	4603      	mov	r3, r0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80021fe:	4b23      	ldr	r3, [pc, #140]	; (800228c <HAL_FLASH_Program+0xa0>)
 8002200:	7e1b      	ldrb	r3, [r3, #24]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_FLASH_Program+0x1e>
 8002206:	2302      	movs	r3, #2
 8002208:	e03b      	b.n	8002282 <HAL_FLASH_Program+0x96>
 800220a:	4b20      	ldr	r3, [pc, #128]	; (800228c <HAL_FLASH_Program+0xa0>)
 800220c:	2201      	movs	r2, #1
 800220e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002210:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002214:	f000 f870 	bl	80022f8 <FLASH_WaitForLastOperation>
 8002218:	4603      	mov	r3, r0
 800221a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d12b      	bne.n	800227a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d105      	bne.n	8002234 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002228:	783b      	ldrb	r3, [r7, #0]
 800222a:	4619      	mov	r1, r3
 800222c:	68b8      	ldr	r0, [r7, #8]
 800222e:	f000 f919 	bl	8002464 <FLASH_Program_Byte>
 8002232:	e016      	b.n	8002262 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d105      	bne.n	8002246 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800223a:	883b      	ldrh	r3, [r7, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	68b8      	ldr	r0, [r7, #8]
 8002240:	f000 f8ec 	bl	800241c <FLASH_Program_HalfWord>
 8002244:	e00d      	b.n	8002262 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d105      	bne.n	8002258 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4619      	mov	r1, r3
 8002250:	68b8      	ldr	r0, [r7, #8]
 8002252:	f000 f8c1 	bl	80023d8 <FLASH_Program_Word>
 8002256:	e004      	b.n	8002262 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800225c:	68b8      	ldr	r0, [r7, #8]
 800225e:	f000 f88b 	bl	8002378 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002262:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002266:	f000 f847 	bl	80022f8 <FLASH_WaitForLastOperation>
 800226a:	4603      	mov	r3, r0
 800226c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_FLASH_Program+0xa4>)
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	4a07      	ldr	r2, [pc, #28]	; (8002290 <HAL_FLASH_Program+0xa4>)
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800227a:	4b04      	ldr	r3, [pc, #16]	; (800228c <HAL_FLASH_Program+0xa0>)
 800227c:	2200      	movs	r2, #0
 800227e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002280:	7dfb      	ldrb	r3, [r7, #23]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	2000056c 	.word	0x2000056c
 8002290:	40023c00 	.word	0x40023c00

08002294 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_FLASH_Unlock+0x38>)
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da0b      	bge.n	80022be <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <HAL_FLASH_Unlock+0x38>)
 80022a8:	4a09      	ldr	r2, [pc, #36]	; (80022d0 <HAL_FLASH_Unlock+0x3c>)
 80022aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80022ac:	4b07      	ldr	r3, [pc, #28]	; (80022cc <HAL_FLASH_Unlock+0x38>)
 80022ae:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <HAL_FLASH_Unlock+0x40>)
 80022b0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_FLASH_Unlock+0x38>)
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	da01      	bge.n	80022be <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80022be:	79fb      	ldrb	r3, [r7, #7]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40023c00 	.word	0x40023c00
 80022d0:	45670123 	.word	0x45670123
 80022d4:	cdef89ab 	.word	0xcdef89ab

080022d8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_FLASH_Lock+0x1c>)
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <HAL_FLASH_Lock+0x1c>)
 80022e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022e6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	40023c00 	.word	0x40023c00

080022f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002304:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <FLASH_WaitForLastOperation+0x78>)
 8002306:	2200      	movs	r2, #0
 8002308:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800230a:	f7fe fe11 	bl	8000f30 <HAL_GetTick>
 800230e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002310:	e010      	b.n	8002334 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002318:	d00c      	beq.n	8002334 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d007      	beq.n	8002330 <FLASH_WaitForLastOperation+0x38>
 8002320:	f7fe fe06 	bl	8000f30 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	d201      	bcs.n	8002334 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e019      	b.n	8002368 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <FLASH_WaitForLastOperation+0x7c>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1e8      	bne.n	8002312 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <FLASH_WaitForLastOperation+0x7c>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <FLASH_WaitForLastOperation+0x7c>)
 800234e:	2201      	movs	r2, #1
 8002350:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <FLASH_WaitForLastOperation+0x7c>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800235e:	f000 f8a3 	bl	80024a8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
  
}  
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	2000056c 	.word	0x2000056c
 8002374:	40023c00 	.word	0x40023c00

08002378 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002378:	b490      	push	{r4, r7}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <FLASH_Program_DoubleWord+0x5c>)
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <FLASH_Program_DoubleWord+0x5c>)
 800238a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002390:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <FLASH_Program_DoubleWord+0x5c>)
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	4a0f      	ldr	r2, [pc, #60]	; (80023d4 <FLASH_Program_DoubleWord+0x5c>)
 8002396:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800239a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800239c:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <FLASH_Program_DoubleWord+0x5c>)
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	4a0c      	ldr	r2, [pc, #48]	; (80023d4 <FLASH_Program_DoubleWord+0x5c>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80023ae:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80023b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	f04f 0400 	mov.w	r4, #0
 80023be:	0013      	movs	r3, r2
 80023c0:	2400      	movs	r4, #0
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	3204      	adds	r2, #4
 80023c6:	6013      	str	r3, [r2, #0]
}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc90      	pop	{r4, r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40023c00 	.word	0x40023c00

080023d8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <FLASH_Program_Word+0x40>)
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	4a0c      	ldr	r2, [pc, #48]	; (8002418 <FLASH_Program_Word+0x40>)
 80023e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <FLASH_Program_Word+0x40>)
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	4a09      	ldr	r2, [pc, #36]	; (8002418 <FLASH_Program_Word+0x40>)
 80023f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <FLASH_Program_Word+0x40>)
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	4a06      	ldr	r2, [pc, #24]	; (8002418 <FLASH_Program_Word+0x40>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	601a      	str	r2, [r3, #0]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	40023c00 	.word	0x40023c00

0800241c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002428:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <FLASH_Program_HalfWord+0x44>)
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	4a0c      	ldr	r2, [pc, #48]	; (8002460 <FLASH_Program_HalfWord+0x44>)
 800242e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002432:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002434:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <FLASH_Program_HalfWord+0x44>)
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	4a09      	ldr	r2, [pc, #36]	; (8002460 <FLASH_Program_HalfWord+0x44>)
 800243a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002440:	4b07      	ldr	r3, [pc, #28]	; (8002460 <FLASH_Program_HalfWord+0x44>)
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	4a06      	ldr	r2, [pc, #24]	; (8002460 <FLASH_Program_HalfWord+0x44>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	887a      	ldrh	r2, [r7, #2]
 8002450:	801a      	strh	r2, [r3, #0]
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40023c00 	.word	0x40023c00

08002464 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <FLASH_Program_Byte+0x40>)
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <FLASH_Program_Byte+0x40>)
 8002476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800247a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <FLASH_Program_Byte+0x40>)
 800247e:	4a09      	ldr	r2, [pc, #36]	; (80024a4 <FLASH_Program_Byte+0x40>)
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002484:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <FLASH_Program_Byte+0x40>)
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <FLASH_Program_Byte+0x40>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	701a      	strb	r2, [r3, #0]
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40023c00 	.word	0x40023c00

080024a8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80024ac:	4b2f      	ldr	r3, [pc, #188]	; (800256c <FLASH_SetErrorCode+0xc4>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80024b8:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <FLASH_SetErrorCode+0xc8>)
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	f043 0310 	orr.w	r3, r3, #16
 80024c0:	4a2b      	ldr	r2, [pc, #172]	; (8002570 <FLASH_SetErrorCode+0xc8>)
 80024c2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80024c4:	4b29      	ldr	r3, [pc, #164]	; (800256c <FLASH_SetErrorCode+0xc4>)
 80024c6:	2210      	movs	r2, #16
 80024c8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80024ca:	4b28      	ldr	r3, [pc, #160]	; (800256c <FLASH_SetErrorCode+0xc4>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80024d6:	4b26      	ldr	r3, [pc, #152]	; (8002570 <FLASH_SetErrorCode+0xc8>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f043 0308 	orr.w	r3, r3, #8
 80024de:	4a24      	ldr	r2, [pc, #144]	; (8002570 <FLASH_SetErrorCode+0xc8>)
 80024e0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80024e2:	4b22      	ldr	r3, [pc, #136]	; (800256c <FLASH_SetErrorCode+0xc4>)
 80024e4:	2220      	movs	r2, #32
 80024e6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80024e8:	4b20      	ldr	r3, [pc, #128]	; (800256c <FLASH_SetErrorCode+0xc4>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80024f4:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <FLASH_SetErrorCode+0xc8>)
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	f043 0304 	orr.w	r3, r3, #4
 80024fc:	4a1c      	ldr	r2, [pc, #112]	; (8002570 <FLASH_SetErrorCode+0xc8>)
 80024fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <FLASH_SetErrorCode+0xc4>)
 8002502:	2240      	movs	r2, #64	; 0x40
 8002504:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002506:	4b19      	ldr	r3, [pc, #100]	; (800256c <FLASH_SetErrorCode+0xc4>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250e:	2b00      	cmp	r3, #0
 8002510:	d008      	beq.n	8002524 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002512:	4b17      	ldr	r3, [pc, #92]	; (8002570 <FLASH_SetErrorCode+0xc8>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f043 0302 	orr.w	r3, r3, #2
 800251a:	4a15      	ldr	r2, [pc, #84]	; (8002570 <FLASH_SetErrorCode+0xc8>)
 800251c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800251e:	4b13      	ldr	r3, [pc, #76]	; (800256c <FLASH_SetErrorCode+0xc4>)
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <FLASH_SetErrorCode+0xc4>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d009      	beq.n	8002544 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002530:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <FLASH_SetErrorCode+0xc8>)
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <FLASH_SetErrorCode+0xc8>)
 800253a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <FLASH_SetErrorCode+0xc4>)
 800253e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002542:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <FLASH_SetErrorCode+0xc4>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002550:	4b07      	ldr	r3, [pc, #28]	; (8002570 <FLASH_SetErrorCode+0xc8>)
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	f043 0320 	orr.w	r3, r3, #32
 8002558:	4a05      	ldr	r2, [pc, #20]	; (8002570 <FLASH_SetErrorCode+0xc8>)
 800255a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <FLASH_SetErrorCode+0xc4>)
 800255e:	2202      	movs	r2, #2
 8002560:	60da      	str	r2, [r3, #12]
  }
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	40023c00 	.word	0x40023c00
 8002570:	2000056c 	.word	0x2000056c

08002574 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002586:	4b32      	ldr	r3, [pc, #200]	; (8002650 <HAL_FLASHEx_Erase+0xdc>)
 8002588:	7e1b      	ldrb	r3, [r3, #24]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_FLASHEx_Erase+0x1e>
 800258e:	2302      	movs	r3, #2
 8002590:	e05a      	b.n	8002648 <HAL_FLASHEx_Erase+0xd4>
 8002592:	4b2f      	ldr	r3, [pc, #188]	; (8002650 <HAL_FLASHEx_Erase+0xdc>)
 8002594:	2201      	movs	r2, #1
 8002596:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002598:	f24c 3050 	movw	r0, #50000	; 0xc350
 800259c:	f7ff feac 	bl	80022f8 <FLASH_WaitForLastOperation>
 80025a0:	4603      	mov	r3, r0
 80025a2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d14a      	bne.n	8002640 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025b0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d117      	bne.n	80025ea <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4619      	mov	r1, r3
 80025c6:	4610      	mov	r0, r2
 80025c8:	f000 f846 	bl	8002658 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025d0:	f7ff fe92 	bl	80022f8 <FLASH_WaitForLastOperation>
 80025d4:	4603      	mov	r3, r0
 80025d6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80025d8:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <HAL_FLASHEx_Erase+0xe0>)
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	4a1d      	ldr	r2, [pc, #116]	; (8002654 <HAL_FLASHEx_Erase+0xe0>)
 80025de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80025e2:	f023 0304 	bic.w	r3, r3, #4
 80025e6:	6113      	str	r3, [r2, #16]
 80025e8:	e028      	b.n	800263c <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	e01c      	b.n	800262c <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	4619      	mov	r1, r3
 80025fa:	68b8      	ldr	r0, [r7, #8]
 80025fc:	f000 f866 	bl	80026cc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002600:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002604:	f7ff fe78 	bl	80022f8 <FLASH_WaitForLastOperation>
 8002608:	4603      	mov	r3, r0
 800260a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800260c:	4b11      	ldr	r3, [pc, #68]	; (8002654 <HAL_FLASHEx_Erase+0xe0>)
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	4a10      	ldr	r2, [pc, #64]	; (8002654 <HAL_FLASHEx_Erase+0xe0>)
 8002612:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002616:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	601a      	str	r2, [r3, #0]
          break;
 8002624:	e00a      	b.n	800263c <HAL_FLASHEx_Erase+0xc8>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3301      	adds	r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4413      	add	r3, r2
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	429a      	cmp	r2, r3
 800263a:	d3da      	bcc.n	80025f2 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800263c:	f000 f894 	bl	8002768 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002640:	4b03      	ldr	r3, [pc, #12]	; (8002650 <HAL_FLASHEx_Erase+0xdc>)
 8002642:	2200      	movs	r2, #0
 8002644:	761a      	strb	r2, [r3, #24]

  return status;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	2000056c 	.word	0x2000056c
 8002654:	40023c00 	.word	0x40023c00

08002658 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	6039      	str	r1, [r7, #0]
 8002662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002664:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <FLASH_MassErase+0x70>)
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <FLASH_MassErase+0x70>)
 800266a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800266e:	6113      	str	r3, [r2, #16]

  if(Banks == FLASH_BANK_BOTH)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	2b03      	cmp	r3, #3
 8002674:	d108      	bne.n	8002688 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8002676:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <FLASH_MassErase+0x70>)
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	4a13      	ldr	r2, [pc, #76]	; (80026c8 <FLASH_MassErase+0x70>)
 800267c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	6113      	str	r3, [r2, #16]
 8002686:	e00f      	b.n	80026a8 <FLASH_MassErase+0x50>
  }
  else if(Banks == FLASH_BANK_1)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d106      	bne.n	800269c <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <FLASH_MassErase+0x70>)
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	4a0d      	ldr	r2, [pc, #52]	; (80026c8 <FLASH_MassErase+0x70>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	6113      	str	r3, [r2, #16]
 800269a:	e005      	b.n	80026a8 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 800269c:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <FLASH_MassErase+0x70>)
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	4a09      	ldr	r2, [pc, #36]	; (80026c8 <FLASH_MassErase+0x70>)
 80026a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a6:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <FLASH_MassErase+0x70>)
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	4313      	orrs	r3, r2
 80026b2:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <FLASH_MassErase+0x70>)
 80026b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b8:	6113      	str	r3, [r2, #16]
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40023c00 	.word	0x40023c00

080026cc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d102      	bne.n	80026e8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	e010      	b.n	800270a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d103      	bne.n	80026f6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80026ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	e009      	b.n	800270a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d103      	bne.n	8002704 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80026fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	e002      	b.n	800270a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002704:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002708:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b0b      	cmp	r3, #11
 800270e:	d902      	bls.n	8002716 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3304      	adds	r3, #4
 8002714:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <FLASH_Erase_Sector+0x98>)
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	4a12      	ldr	r2, [pc, #72]	; (8002764 <FLASH_Erase_Sector+0x98>)
 800271c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002720:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <FLASH_Erase_Sector+0x98>)
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	490f      	ldr	r1, [pc, #60]	; (8002764 <FLASH_Erase_Sector+0x98>)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800272e:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <FLASH_Erase_Sector+0x98>)
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <FLASH_Erase_Sector+0x98>)
 8002734:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002738:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <FLASH_Erase_Sector+0x98>)
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4313      	orrs	r3, r2
 8002744:	4a07      	ldr	r2, [pc, #28]	; (8002764 <FLASH_Erase_Sector+0x98>)
 8002746:	f043 0302 	orr.w	r3, r3, #2
 800274a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <FLASH_Erase_Sector+0x98>)
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	4a04      	ldr	r2, [pc, #16]	; (8002764 <FLASH_Erase_Sector+0x98>)
 8002752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002756:	6113      	str	r3, [r2, #16]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	40023c00 	.word	0x40023c00

08002768 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800276c:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <FLASH_FlushCaches+0x88>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002774:	2b00      	cmp	r3, #0
 8002776:	d017      	beq.n	80027a8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <FLASH_FlushCaches+0x88>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1c      	ldr	r2, [pc, #112]	; (80027f0 <FLASH_FlushCaches+0x88>)
 800277e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002782:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <FLASH_FlushCaches+0x88>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a19      	ldr	r2, [pc, #100]	; (80027f0 <FLASH_FlushCaches+0x88>)
 800278a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <FLASH_FlushCaches+0x88>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a16      	ldr	r2, [pc, #88]	; (80027f0 <FLASH_FlushCaches+0x88>)
 8002796:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800279a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800279c:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <FLASH_FlushCaches+0x88>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a13      	ldr	r2, [pc, #76]	; (80027f0 <FLASH_FlushCaches+0x88>)
 80027a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027a6:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <FLASH_FlushCaches+0x88>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d017      	beq.n	80027e4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80027b4:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <FLASH_FlushCaches+0x88>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0d      	ldr	r2, [pc, #52]	; (80027f0 <FLASH_FlushCaches+0x88>)
 80027ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027be:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <FLASH_FlushCaches+0x88>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <FLASH_FlushCaches+0x88>)
 80027c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <FLASH_FlushCaches+0x88>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a07      	ldr	r2, [pc, #28]	; (80027f0 <FLASH_FlushCaches+0x88>)
 80027d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027d6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <FLASH_FlushCaches+0x88>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <FLASH_FlushCaches+0x88>)
 80027de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027e2:	6013      	str	r3, [r2, #0]
  }
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40023c00 	.word	0x40023c00

080027f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	e177      	b.n	8002b00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002810:	2201      	movs	r2, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	429a      	cmp	r2, r3
 800282a:	f040 8166 	bne.w	8002afa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d00b      	beq.n	800284e <HAL_GPIO_Init+0x5a>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d007      	beq.n	800284e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002842:	2b11      	cmp	r3, #17
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b12      	cmp	r3, #18
 800284c:	d130      	bne.n	80028b0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	2203      	movs	r2, #3
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002884:	2201      	movs	r2, #1
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 0201 	and.w	r2, r3, #1
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0xfc>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b12      	cmp	r3, #18
 80028ee:	d123      	bne.n	8002938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	08da      	lsrs	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3208      	adds	r2, #8
 80028f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	220f      	movs	r2, #15
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	08da      	lsrs	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3208      	adds	r2, #8
 8002932:	69b9      	ldr	r1, [r7, #24]
 8002934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0203 	and.w	r2, r3, #3
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80c0 	beq.w	8002afa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4b65      	ldr	r3, [pc, #404]	; (8002b14 <HAL_GPIO_Init+0x320>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	4a64      	ldr	r2, [pc, #400]	; (8002b14 <HAL_GPIO_Init+0x320>)
 8002984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002988:	6453      	str	r3, [r2, #68]	; 0x44
 800298a:	4b62      	ldr	r3, [pc, #392]	; (8002b14 <HAL_GPIO_Init+0x320>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002996:	4a60      	ldr	r2, [pc, #384]	; (8002b18 <HAL_GPIO_Init+0x324>)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	3302      	adds	r3, #2
 800299e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	220f      	movs	r2, #15
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a57      	ldr	r2, [pc, #348]	; (8002b1c <HAL_GPIO_Init+0x328>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d037      	beq.n	8002a32 <HAL_GPIO_Init+0x23e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a56      	ldr	r2, [pc, #344]	; (8002b20 <HAL_GPIO_Init+0x32c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d031      	beq.n	8002a2e <HAL_GPIO_Init+0x23a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a55      	ldr	r2, [pc, #340]	; (8002b24 <HAL_GPIO_Init+0x330>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d02b      	beq.n	8002a2a <HAL_GPIO_Init+0x236>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a54      	ldr	r2, [pc, #336]	; (8002b28 <HAL_GPIO_Init+0x334>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d025      	beq.n	8002a26 <HAL_GPIO_Init+0x232>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a53      	ldr	r2, [pc, #332]	; (8002b2c <HAL_GPIO_Init+0x338>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d01f      	beq.n	8002a22 <HAL_GPIO_Init+0x22e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a52      	ldr	r2, [pc, #328]	; (8002b30 <HAL_GPIO_Init+0x33c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d019      	beq.n	8002a1e <HAL_GPIO_Init+0x22a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a51      	ldr	r2, [pc, #324]	; (8002b34 <HAL_GPIO_Init+0x340>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d013      	beq.n	8002a1a <HAL_GPIO_Init+0x226>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a50      	ldr	r2, [pc, #320]	; (8002b38 <HAL_GPIO_Init+0x344>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00d      	beq.n	8002a16 <HAL_GPIO_Init+0x222>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4f      	ldr	r2, [pc, #316]	; (8002b3c <HAL_GPIO_Init+0x348>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d007      	beq.n	8002a12 <HAL_GPIO_Init+0x21e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4e      	ldr	r2, [pc, #312]	; (8002b40 <HAL_GPIO_Init+0x34c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d101      	bne.n	8002a0e <HAL_GPIO_Init+0x21a>
 8002a0a:	2309      	movs	r3, #9
 8002a0c:	e012      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a0e:	230a      	movs	r3, #10
 8002a10:	e010      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a12:	2308      	movs	r3, #8
 8002a14:	e00e      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a16:	2307      	movs	r3, #7
 8002a18:	e00c      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a1a:	2306      	movs	r3, #6
 8002a1c:	e00a      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a1e:	2305      	movs	r3, #5
 8002a20:	e008      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a22:	2304      	movs	r3, #4
 8002a24:	e006      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a26:	2303      	movs	r3, #3
 8002a28:	e004      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e002      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a32:	2300      	movs	r3, #0
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	f002 0203 	and.w	r2, r2, #3
 8002a3a:	0092      	lsls	r2, r2, #2
 8002a3c:	4093      	lsls	r3, r2
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a44:	4934      	ldr	r1, [pc, #208]	; (8002b18 <HAL_GPIO_Init+0x324>)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	3302      	adds	r3, #2
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a52:	4b3c      	ldr	r3, [pc, #240]	; (8002b44 <HAL_GPIO_Init+0x350>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a76:	4a33      	ldr	r2, [pc, #204]	; (8002b44 <HAL_GPIO_Init+0x350>)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a7c:	4b31      	ldr	r3, [pc, #196]	; (8002b44 <HAL_GPIO_Init+0x350>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aa0:	4a28      	ldr	r2, [pc, #160]	; (8002b44 <HAL_GPIO_Init+0x350>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aa6:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <HAL_GPIO_Init+0x350>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aca:	4a1e      	ldr	r2, [pc, #120]	; (8002b44 <HAL_GPIO_Init+0x350>)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad0:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <HAL_GPIO_Init+0x350>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002af4:	4a13      	ldr	r2, [pc, #76]	; (8002b44 <HAL_GPIO_Init+0x350>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3301      	adds	r3, #1
 8002afe:	61fb      	str	r3, [r7, #28]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	2b0f      	cmp	r3, #15
 8002b04:	f67f ae84 	bls.w	8002810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b08:	bf00      	nop
 8002b0a:	3724      	adds	r7, #36	; 0x24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40013800 	.word	0x40013800
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	40020400 	.word	0x40020400
 8002b24:	40020800 	.word	0x40020800
 8002b28:	40020c00 	.word	0x40020c00
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40021400 	.word	0x40021400
 8002b34:	40021800 	.word	0x40021800
 8002b38:	40021c00 	.word	0x40021c00
 8002b3c:	40022000 	.word	0x40022000
 8002b40:	40022400 	.word	0x40022400
 8002b44:	40013c00 	.word	0x40013c00

08002b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	887b      	ldrh	r3, [r7, #2]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	e001      	b.n	8002b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
 8002b84:	4613      	mov	r3, r2
 8002b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b88:	787b      	ldrb	r3, [r7, #1]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b8e:	887a      	ldrh	r2, [r7, #2]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b94:	e003      	b.n	8002b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b96:	887b      	ldrh	r3, [r7, #2]
 8002b98:	041a      	lsls	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	619a      	str	r2, [r3, #24]
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	603b      	str	r3, [r7, #0]
 8002bba:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <HAL_PWREx_EnableOverDrive+0x90>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	4a1f      	ldr	r2, [pc, #124]	; (8002c3c <HAL_PWREx_EnableOverDrive+0x90>)
 8002bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc6:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <HAL_PWREx_EnableOverDrive+0x90>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <HAL_PWREx_EnableOverDrive+0x94>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bd8:	f7fe f9aa 	bl	8000f30 <HAL_GetTick>
 8002bdc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bde:	e009      	b.n	8002bf4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002be0:	f7fe f9a6 	bl	8000f30 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bee:	d901      	bls.n	8002bf4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e01f      	b.n	8002c34 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bf4:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c00:	d1ee      	bne.n	8002be0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c02:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c08:	f7fe f992 	bl	8000f30 <HAL_GetTick>
 8002c0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c0e:	e009      	b.n	8002c24 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c10:	f7fe f98e 	bl	8000f30 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c1e:	d901      	bls.n	8002c24 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e007      	b.n	8002c34 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c24:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c30:	d1ee      	bne.n	8002c10 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	420e0040 	.word	0x420e0040
 8002c44:	40007000 	.word	0x40007000
 8002c48:	420e0044 	.word	0x420e0044

08002c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0cc      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c60:	4b68      	ldr	r3, [pc, #416]	; (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d90c      	bls.n	8002c88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b65      	ldr	r3, [pc, #404]	; (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b63      	ldr	r3, [pc, #396]	; (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0b8      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d020      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca0:	4b59      	ldr	r3, [pc, #356]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4a58      	ldr	r2, [pc, #352]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002caa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cb8:	4b53      	ldr	r3, [pc, #332]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	4a52      	ldr	r2, [pc, #328]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc4:	4b50      	ldr	r3, [pc, #320]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	494d      	ldr	r1, [pc, #308]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d044      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d107      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d119      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e07f      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d003      	beq.n	8002d0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0a:	4b3f      	ldr	r3, [pc, #252]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d109      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e06f      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1a:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e067      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d2a:	4b37      	ldr	r3, [pc, #220]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f023 0203 	bic.w	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4934      	ldr	r1, [pc, #208]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d3c:	f7fe f8f8 	bl	8000f30 <HAL_GetTick>
 8002d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d44:	f7fe f8f4 	bl	8000f30 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e04f      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 020c 	and.w	r2, r3, #12
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d1eb      	bne.n	8002d44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b25      	ldr	r3, [pc, #148]	; (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d20c      	bcs.n	8002d94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b22      	ldr	r3, [pc, #136]	; (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b20      	ldr	r3, [pc, #128]	; (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e032      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da0:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4916      	ldr	r1, [pc, #88]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d009      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dbe:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	490e      	ldr	r1, [pc, #56]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dd2:	f000 f821 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8002dd6:	4601      	mov	r1, r0
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002de4:	5cd3      	ldrb	r3, [r2, r3]
 8002de6:	fa21 f303 	lsr.w	r3, r1, r3
 8002dea:	4a09      	ldr	r2, [pc, #36]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff f8e4 	bl	8001fc0 <HAL_InitTick>

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40023c00 	.word	0x40023c00
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	08003d90 	.word	0x08003d90
 8002e10:	20000004 	.word	0x20000004
 8002e14:	20000008 	.word	0x20000008

08002e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	607b      	str	r3, [r7, #4]
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	2300      	movs	r3, #0
 8002e28:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e2e:	4b63      	ldr	r3, [pc, #396]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d007      	beq.n	8002e4a <HAL_RCC_GetSysClockFreq+0x32>
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d008      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0x38>
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f040 80b4 	bne.w	8002fac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e44:	4b5e      	ldr	r3, [pc, #376]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e46:	60bb      	str	r3, [r7, #8]
       break;
 8002e48:	e0b3      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e4a:	4b5e      	ldr	r3, [pc, #376]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002e4c:	60bb      	str	r3, [r7, #8]
      break;
 8002e4e:	e0b0      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e50:	4b5a      	ldr	r3, [pc, #360]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e5a:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d04a      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e66:	4b55      	ldr	r3, [pc, #340]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	099b      	lsrs	r3, r3, #6
 8002e6c:	f04f 0400 	mov.w	r4, #0
 8002e70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	ea03 0501 	and.w	r5, r3, r1
 8002e7c:	ea04 0602 	and.w	r6, r4, r2
 8002e80:	4629      	mov	r1, r5
 8002e82:	4632      	mov	r2, r6
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	f04f 0400 	mov.w	r4, #0
 8002e8c:	0154      	lsls	r4, r2, #5
 8002e8e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e92:	014b      	lsls	r3, r1, #5
 8002e94:	4619      	mov	r1, r3
 8002e96:	4622      	mov	r2, r4
 8002e98:	1b49      	subs	r1, r1, r5
 8002e9a:	eb62 0206 	sbc.w	r2, r2, r6
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	f04f 0400 	mov.w	r4, #0
 8002ea6:	0194      	lsls	r4, r2, #6
 8002ea8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002eac:	018b      	lsls	r3, r1, #6
 8002eae:	1a5b      	subs	r3, r3, r1
 8002eb0:	eb64 0402 	sbc.w	r4, r4, r2
 8002eb4:	f04f 0100 	mov.w	r1, #0
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	00e2      	lsls	r2, r4, #3
 8002ebe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ec2:	00d9      	lsls	r1, r3, #3
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4614      	mov	r4, r2
 8002ec8:	195b      	adds	r3, r3, r5
 8002eca:	eb44 0406 	adc.w	r4, r4, r6
 8002ece:	f04f 0100 	mov.w	r1, #0
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	0262      	lsls	r2, r4, #9
 8002ed8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002edc:	0259      	lsls	r1, r3, #9
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4614      	mov	r4, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f04f 0400 	mov.w	r4, #0
 8002eec:	461a      	mov	r2, r3
 8002eee:	4623      	mov	r3, r4
 8002ef0:	f7fd f980 	bl	80001f4 <__aeabi_uldivmod>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	460c      	mov	r4, r1
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	e049      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efc:	4b2f      	ldr	r3, [pc, #188]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	099b      	lsrs	r3, r3, #6
 8002f02:	f04f 0400 	mov.w	r4, #0
 8002f06:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	ea03 0501 	and.w	r5, r3, r1
 8002f12:	ea04 0602 	and.w	r6, r4, r2
 8002f16:	4629      	mov	r1, r5
 8002f18:	4632      	mov	r2, r6
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	f04f 0400 	mov.w	r4, #0
 8002f22:	0154      	lsls	r4, r2, #5
 8002f24:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f28:	014b      	lsls	r3, r1, #5
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4622      	mov	r2, r4
 8002f2e:	1b49      	subs	r1, r1, r5
 8002f30:	eb62 0206 	sbc.w	r2, r2, r6
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	f04f 0400 	mov.w	r4, #0
 8002f3c:	0194      	lsls	r4, r2, #6
 8002f3e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f42:	018b      	lsls	r3, r1, #6
 8002f44:	1a5b      	subs	r3, r3, r1
 8002f46:	eb64 0402 	sbc.w	r4, r4, r2
 8002f4a:	f04f 0100 	mov.w	r1, #0
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	00e2      	lsls	r2, r4, #3
 8002f54:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f58:	00d9      	lsls	r1, r3, #3
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4614      	mov	r4, r2
 8002f5e:	195b      	adds	r3, r3, r5
 8002f60:	eb44 0406 	adc.w	r4, r4, r6
 8002f64:	f04f 0100 	mov.w	r1, #0
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	02a2      	lsls	r2, r4, #10
 8002f6e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f72:	0299      	lsls	r1, r3, #10
 8002f74:	460b      	mov	r3, r1
 8002f76:	4614      	mov	r4, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	4621      	mov	r1, r4
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f04f 0400 	mov.w	r4, #0
 8002f82:	461a      	mov	r2, r3
 8002f84:	4623      	mov	r3, r4
 8002f86:	f7fd f935 	bl	80001f4 <__aeabi_uldivmod>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	460c      	mov	r4, r1
 8002f8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa8:	60bb      	str	r3, [r7, #8]
      break;
 8002faa:	e002      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fac:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002fae:	60bb      	str	r3, [r7, #8]
      break;
 8002fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	00f42400 	.word	0x00f42400
 8002fc4:	007a1200 	.word	0x007a1200

08002fc8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d075      	beq.n	80030cc <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fe0:	4ba2      	ldr	r3, [pc, #648]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d00c      	beq.n	8003006 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fec:	4b9f      	ldr	r3, [pc, #636]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d112      	bne.n	800301e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff8:	4b9c      	ldr	r3, [pc, #624]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003004:	d10b      	bne.n	800301e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003006:	4b99      	ldr	r3, [pc, #612]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d05b      	beq.n	80030ca <HAL_RCC_OscConfig+0x102>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d157      	bne.n	80030ca <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e20b      	b.n	8003436 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003026:	d106      	bne.n	8003036 <HAL_RCC_OscConfig+0x6e>
 8003028:	4b90      	ldr	r3, [pc, #576]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a8f      	ldr	r2, [pc, #572]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 800302e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	e01d      	b.n	8003072 <HAL_RCC_OscConfig+0xaa>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800303e:	d10c      	bne.n	800305a <HAL_RCC_OscConfig+0x92>
 8003040:	4b8a      	ldr	r3, [pc, #552]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a89      	ldr	r2, [pc, #548]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 8003046:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	4b87      	ldr	r3, [pc, #540]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a86      	ldr	r2, [pc, #536]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 8003052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	e00b      	b.n	8003072 <HAL_RCC_OscConfig+0xaa>
 800305a:	4b84      	ldr	r3, [pc, #528]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a83      	ldr	r2, [pc, #524]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 8003060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b81      	ldr	r3, [pc, #516]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a80      	ldr	r2, [pc, #512]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 800306c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003070:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d013      	beq.n	80030a2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fd ff59 	bl	8000f30 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003082:	f7fd ff55 	bl	8000f30 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b64      	cmp	r3, #100	; 0x64
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e1d0      	b.n	8003436 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003094:	4b75      	ldr	r3, [pc, #468]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0xba>
 80030a0:	e014      	b.n	80030cc <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a2:	f7fd ff45 	bl	8000f30 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030aa:	f7fd ff41 	bl	8000f30 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b64      	cmp	r3, #100	; 0x64
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e1bc      	b.n	8003436 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030bc:	4b6b      	ldr	r3, [pc, #428]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f0      	bne.n	80030aa <HAL_RCC_OscConfig+0xe2>
 80030c8:	e000      	b.n	80030cc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d063      	beq.n	80031a0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030d8:	4b64      	ldr	r3, [pc, #400]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00b      	beq.n	80030fc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030e4:	4b61      	ldr	r3, [pc, #388]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d11c      	bne.n	800312a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030f0:	4b5e      	ldr	r3, [pc, #376]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d116      	bne.n	800312a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fc:	4b5b      	ldr	r3, [pc, #364]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_RCC_OscConfig+0x14c>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d001      	beq.n	8003114 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e190      	b.n	8003436 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003114:	4b55      	ldr	r3, [pc, #340]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4952      	ldr	r1, [pc, #328]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 8003124:	4313      	orrs	r3, r2
 8003126:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003128:	e03a      	b.n	80031a0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d020      	beq.n	8003174 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003132:	4b4f      	ldr	r3, [pc, #316]	; (8003270 <HAL_RCC_OscConfig+0x2a8>)
 8003134:	2201      	movs	r2, #1
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fd fefa 	bl	8000f30 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003140:	f7fd fef6 	bl	8000f30 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e171      	b.n	8003436 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003152:	4b46      	ldr	r3, [pc, #280]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315e:	4b43      	ldr	r3, [pc, #268]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	493f      	ldr	r1, [pc, #252]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]
 8003172:	e015      	b.n	80031a0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003174:	4b3e      	ldr	r3, [pc, #248]	; (8003270 <HAL_RCC_OscConfig+0x2a8>)
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317a:	f7fd fed9 	bl	8000f30 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003182:	f7fd fed5 	bl	8000f30 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e150      	b.n	8003436 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003194:	4b35      	ldr	r3, [pc, #212]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f0      	bne.n	8003182 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d030      	beq.n	800320e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d016      	beq.n	80031e2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b4:	4b2f      	ldr	r3, [pc, #188]	; (8003274 <HAL_RCC_OscConfig+0x2ac>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ba:	f7fd feb9 	bl	8000f30 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c2:	f7fd feb5 	bl	8000f30 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e130      	b.n	8003436 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d4:	4b25      	ldr	r3, [pc, #148]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 80031d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0x1fa>
 80031e0:	e015      	b.n	800320e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e2:	4b24      	ldr	r3, [pc, #144]	; (8003274 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fd fea2 	bl	8000f30 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f0:	f7fd fe9e 	bl	8000f30 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e119      	b.n	8003436 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003202:	4b1a      	ldr	r3, [pc, #104]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 8003204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 809f 	beq.w	800335a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800321c:	2300      	movs	r3, #0
 800321e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003220:	4b12      	ldr	r3, [pc, #72]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10f      	bne.n	800324c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	4b0e      	ldr	r3, [pc, #56]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	4a0d      	ldr	r2, [pc, #52]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 8003236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323a:	6413      	str	r3, [r2, #64]	; 0x40
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <HAL_RCC_OscConfig+0x2a4>)
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003248:	2301      	movs	r3, #1
 800324a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <HAL_RCC_OscConfig+0x2b0>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d120      	bne.n	800329a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003258:	4b07      	ldr	r3, [pc, #28]	; (8003278 <HAL_RCC_OscConfig+0x2b0>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a06      	ldr	r2, [pc, #24]	; (8003278 <HAL_RCC_OscConfig+0x2b0>)
 800325e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003262:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003264:	f7fd fe64 	bl	8000f30 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326a:	e010      	b.n	800328e <HAL_RCC_OscConfig+0x2c6>
 800326c:	40023800 	.word	0x40023800
 8003270:	42470000 	.word	0x42470000
 8003274:	42470e80 	.word	0x42470e80
 8003278:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327c:	f7fd fe58 	bl	8000f30 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e0d3      	b.n	8003436 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328e:	4b6c      	ldr	r3, [pc, #432]	; (8003440 <HAL_RCC_OscConfig+0x478>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d106      	bne.n	80032b0 <HAL_RCC_OscConfig+0x2e8>
 80032a2:	4b68      	ldr	r3, [pc, #416]	; (8003444 <HAL_RCC_OscConfig+0x47c>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	4a67      	ldr	r2, [pc, #412]	; (8003444 <HAL_RCC_OscConfig+0x47c>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6713      	str	r3, [r2, #112]	; 0x70
 80032ae:	e01c      	b.n	80032ea <HAL_RCC_OscConfig+0x322>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b05      	cmp	r3, #5
 80032b6:	d10c      	bne.n	80032d2 <HAL_RCC_OscConfig+0x30a>
 80032b8:	4b62      	ldr	r3, [pc, #392]	; (8003444 <HAL_RCC_OscConfig+0x47c>)
 80032ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032bc:	4a61      	ldr	r2, [pc, #388]	; (8003444 <HAL_RCC_OscConfig+0x47c>)
 80032be:	f043 0304 	orr.w	r3, r3, #4
 80032c2:	6713      	str	r3, [r2, #112]	; 0x70
 80032c4:	4b5f      	ldr	r3, [pc, #380]	; (8003444 <HAL_RCC_OscConfig+0x47c>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	4a5e      	ldr	r2, [pc, #376]	; (8003444 <HAL_RCC_OscConfig+0x47c>)
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	6713      	str	r3, [r2, #112]	; 0x70
 80032d0:	e00b      	b.n	80032ea <HAL_RCC_OscConfig+0x322>
 80032d2:	4b5c      	ldr	r3, [pc, #368]	; (8003444 <HAL_RCC_OscConfig+0x47c>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d6:	4a5b      	ldr	r2, [pc, #364]	; (8003444 <HAL_RCC_OscConfig+0x47c>)
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	6713      	str	r3, [r2, #112]	; 0x70
 80032de:	4b59      	ldr	r3, [pc, #356]	; (8003444 <HAL_RCC_OscConfig+0x47c>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e2:	4a58      	ldr	r2, [pc, #352]	; (8003444 <HAL_RCC_OscConfig+0x47c>)
 80032e4:	f023 0304 	bic.w	r3, r3, #4
 80032e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d015      	beq.n	800331e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f2:	f7fd fe1d 	bl	8000f30 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f8:	e00a      	b.n	8003310 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032fa:	f7fd fe19 	bl	8000f30 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	f241 3288 	movw	r2, #5000	; 0x1388
 8003308:	4293      	cmp	r3, r2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e092      	b.n	8003436 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003310:	4b4c      	ldr	r3, [pc, #304]	; (8003444 <HAL_RCC_OscConfig+0x47c>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0ee      	beq.n	80032fa <HAL_RCC_OscConfig+0x332>
 800331c:	e014      	b.n	8003348 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331e:	f7fd fe07 	bl	8000f30 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003324:	e00a      	b.n	800333c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003326:	f7fd fe03 	bl	8000f30 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	f241 3288 	movw	r2, #5000	; 0x1388
 8003334:	4293      	cmp	r3, r2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e07c      	b.n	8003436 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333c:	4b41      	ldr	r3, [pc, #260]	; (8003444 <HAL_RCC_OscConfig+0x47c>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1ee      	bne.n	8003326 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003348:	7dfb      	ldrb	r3, [r7, #23]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d105      	bne.n	800335a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800334e:	4b3d      	ldr	r3, [pc, #244]	; (8003444 <HAL_RCC_OscConfig+0x47c>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	4a3c      	ldr	r2, [pc, #240]	; (8003444 <HAL_RCC_OscConfig+0x47c>)
 8003354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003358:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d068      	beq.n	8003434 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003362:	4b38      	ldr	r3, [pc, #224]	; (8003444 <HAL_RCC_OscConfig+0x47c>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	2b08      	cmp	r3, #8
 800336c:	d060      	beq.n	8003430 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d145      	bne.n	8003402 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003376:	4b34      	ldr	r3, [pc, #208]	; (8003448 <HAL_RCC_OscConfig+0x480>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fd fdd8 	bl	8000f30 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003384:	f7fd fdd4 	bl	8000f30 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e04f      	b.n	8003436 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003396:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_RCC_OscConfig+0x47c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69da      	ldr	r2, [r3, #28]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	019b      	lsls	r3, r3, #6
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	085b      	lsrs	r3, r3, #1
 80033ba:	3b01      	subs	r3, #1
 80033bc:	041b      	lsls	r3, r3, #16
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	061b      	lsls	r3, r3, #24
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	071b      	lsls	r3, r3, #28
 80033ce:	491d      	ldr	r1, [pc, #116]	; (8003444 <HAL_RCC_OscConfig+0x47c>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d4:	4b1c      	ldr	r3, [pc, #112]	; (8003448 <HAL_RCC_OscConfig+0x480>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033da:	f7fd fda9 	bl	8000f30 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e2:	f7fd fda5 	bl	8000f30 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e020      	b.n	8003436 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f4:	4b13      	ldr	r3, [pc, #76]	; (8003444 <HAL_RCC_OscConfig+0x47c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x41a>
 8003400:	e018      	b.n	8003434 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <HAL_RCC_OscConfig+0x480>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fd fd92 	bl	8000f30 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003410:	f7fd fd8e 	bl	8000f30 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e009      	b.n	8003436 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003422:	4b08      	ldr	r3, [pc, #32]	; (8003444 <HAL_RCC_OscConfig+0x47c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x448>
 800342e:	e001      	b.n	8003434 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40007000 	.word	0x40007000
 8003444:	40023800 	.word	0x40023800
 8003448:	42470060 	.word	0x42470060

0800344c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <LL_RCC_GetSysClkSource+0x18>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 030c 	and.w	r3, r3, #12
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800

08003468 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <LL_RCC_GetAHBPrescaler+0x18>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800

08003484 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003488:	4b04      	ldr	r3, [pc, #16]	; (800349c <LL_RCC_GetAPB1Prescaler+0x18>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40023800 	.word	0x40023800

080034a0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800

080034bc <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80034c0:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <LL_RCC_PLL_GetMainSource+0x18>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800

080034d8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <LL_RCC_PLL_GetN+0x18>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	099b      	lsrs	r3, r3, #6
 80034e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	40023800 	.word	0x40023800

080034f4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80034f8:	4b04      	ldr	r3, [pc, #16]	; (800350c <LL_RCC_PLL_GetP+0x18>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003500:	4618      	mov	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800

08003510 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <LL_RCC_PLL_GetDivider+0x18>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800351c:	4618      	mov	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800

0800352c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003534:	f000 f820 	bl	8003578 <RCC_GetSystemClockFreq>
 8003538:	4602      	mov	r2, r0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f83e 	bl	80035c4 <RCC_GetHCLKClockFreq>
 8003548:	4602      	mov	r2, r0
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	4618      	mov	r0, r3
 8003554:	f000 f84c 	bl	80035f0 <RCC_GetPCLK1ClockFreq>
 8003558:	4602      	mov	r2, r0
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4618      	mov	r0, r3
 8003564:	f000 f858 	bl	8003618 <RCC_GetPCLK2ClockFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	60da      	str	r2, [r3, #12]
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003582:	f7ff ff63 	bl	800344c <LL_RCC_GetSysClkSource>
 8003586:	4603      	mov	r3, r0
 8003588:	2b04      	cmp	r3, #4
 800358a:	d006      	beq.n	800359a <RCC_GetSystemClockFreq+0x22>
 800358c:	2b08      	cmp	r3, #8
 800358e:	d007      	beq.n	80035a0 <RCC_GetSystemClockFreq+0x28>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10a      	bne.n	80035aa <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003594:	4b09      	ldr	r3, [pc, #36]	; (80035bc <RCC_GetSystemClockFreq+0x44>)
 8003596:	607b      	str	r3, [r7, #4]
      break;
 8003598:	e00a      	b.n	80035b0 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800359a:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <RCC_GetSystemClockFreq+0x48>)
 800359c:	607b      	str	r3, [r7, #4]
      break;
 800359e:	e007      	b.n	80035b0 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80035a0:	2008      	movs	r0, #8
 80035a2:	f000 f84d 	bl	8003640 <RCC_PLL_GetFreqDomain_SYS>
 80035a6:	6078      	str	r0, [r7, #4]
      break;
 80035a8:	e002      	b.n	80035b0 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80035aa:	4b04      	ldr	r3, [pc, #16]	; (80035bc <RCC_GetSystemClockFreq+0x44>)
 80035ac:	607b      	str	r3, [r7, #4]
      break;
 80035ae:	bf00      	nop
  }

  return frequency;
 80035b0:	687b      	ldr	r3, [r7, #4]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	00f42400 	.word	0x00f42400
 80035c0:	007a1200 	.word	0x007a1200

080035c4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80035cc:	f7ff ff4c 	bl	8003468 <LL_RCC_GetAHBPrescaler>
 80035d0:	4603      	mov	r3, r0
 80035d2:	091b      	lsrs	r3, r3, #4
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	4a04      	ldr	r2, [pc, #16]	; (80035ec <RCC_GetHCLKClockFreq+0x28>)
 80035da:	5cd3      	ldrb	r3, [r2, r3]
 80035dc:	461a      	mov	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	40d3      	lsrs	r3, r2
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	08003d90 	.word	0x08003d90

080035f0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80035f8:	f7ff ff44 	bl	8003484 <LL_RCC_GetAPB1Prescaler>
 80035fc:	4603      	mov	r3, r0
 80035fe:	0a9b      	lsrs	r3, r3, #10
 8003600:	4a04      	ldr	r2, [pc, #16]	; (8003614 <RCC_GetPCLK1ClockFreq+0x24>)
 8003602:	5cd3      	ldrb	r3, [r2, r3]
 8003604:	461a      	mov	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	40d3      	lsrs	r3, r2
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	08003da0 	.word	0x08003da0

08003618 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003620:	f7ff ff3e 	bl	80034a0 <LL_RCC_GetAPB2Prescaler>
 8003624:	4603      	mov	r3, r0
 8003626:	0b5b      	lsrs	r3, r3, #13
 8003628:	4a04      	ldr	r2, [pc, #16]	; (800363c <RCC_GetPCLK2ClockFreq+0x24>)
 800362a:	5cd3      	ldrb	r3, [r2, r3]
 800362c:	461a      	mov	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	40d3      	lsrs	r3, r2
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	08003da0 	.word	0x08003da0

08003640 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	2300      	movs	r3, #0
 8003652:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003654:	f7ff ff32 	bl	80034bc <LL_RCC_PLL_GetMainSource>
 8003658:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8003660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003664:	d003      	beq.n	800366e <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8003666:	e005      	b.n	8003674 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003668:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800366a:	617b      	str	r3, [r7, #20]
      break;
 800366c:	e005      	b.n	800367a <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800366e:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003670:	617b      	str	r3, [r7, #20]
      break;
 8003672:	e002      	b.n	800367a <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003676:	617b      	str	r3, [r7, #20]
      break;
 8003678:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b08      	cmp	r3, #8
 800367e:	d113      	bne.n	80036a8 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003680:	f7ff ff46 	bl	8003510 <LL_RCC_PLL_GetDivider>
 8003684:	4602      	mov	r2, r0
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	fbb3 f4f2 	udiv	r4, r3, r2
 800368c:	f7ff ff24 	bl	80034d8 <LL_RCC_PLL_GetN>
 8003690:	4603      	mov	r3, r0
 8003692:	fb03 f404 	mul.w	r4, r3, r4
 8003696:	f7ff ff2d 	bl	80034f4 <LL_RCC_PLL_GetP>
 800369a:	4603      	mov	r3, r0
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	3301      	adds	r3, #1
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	fbb4 f3f3 	udiv	r3, r4, r3
 80036a6:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80036a8:	693b      	ldr	r3, [r7, #16]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd90      	pop	{r4, r7, pc}
 80036b2:	bf00      	nop
 80036b4:	00f42400 	.word	0x00f42400
 80036b8:	007a1200 	.word	0x007a1200

080036bc <LL_USART_IsEnabled>:
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d0:	bf0c      	ite	eq
 80036d2:	2301      	moveq	r3, #1
 80036d4:	2300      	movne	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <LL_USART_SetStopBitsLength>:
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	611a      	str	r2, [r3, #16]
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <LL_USART_SetHWFlowCtrl>:
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	615a      	str	r2, [r3, #20]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <LL_USART_SetBaudRate>:
{
 8003730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003734:	b085      	sub	sp, #20
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003746:	f040 80c1 	bne.w	80038cc <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	461d      	mov	r5, r3
 800374e:	f04f 0600 	mov.w	r6, #0
 8003752:	46a8      	mov	r8, r5
 8003754:	46b1      	mov	r9, r6
 8003756:	eb18 0308 	adds.w	r3, r8, r8
 800375a:	eb49 0409 	adc.w	r4, r9, r9
 800375e:	4698      	mov	r8, r3
 8003760:	46a1      	mov	r9, r4
 8003762:	eb18 0805 	adds.w	r8, r8, r5
 8003766:	eb49 0906 	adc.w	r9, r9, r6
 800376a:	f04f 0100 	mov.w	r1, #0
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003776:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800377a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800377e:	4688      	mov	r8, r1
 8003780:	4691      	mov	r9, r2
 8003782:	eb18 0005 	adds.w	r0, r8, r5
 8003786:	eb49 0106 	adc.w	r1, r9, r6
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	461d      	mov	r5, r3
 800378e:	f04f 0600 	mov.w	r6, #0
 8003792:	196b      	adds	r3, r5, r5
 8003794:	eb46 0406 	adc.w	r4, r6, r6
 8003798:	461a      	mov	r2, r3
 800379a:	4623      	mov	r3, r4
 800379c:	f7fc fd2a 	bl	80001f4 <__aeabi_uldivmod>
 80037a0:	4603      	mov	r3, r0
 80037a2:	460c      	mov	r4, r1
 80037a4:	461a      	mov	r2, r3
 80037a6:	4bb5      	ldr	r3, [pc, #724]	; (8003a7c <LL_USART_SetBaudRate+0x34c>)
 80037a8:	fba3 2302 	umull	r2, r3, r3, r2
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	fa1f f883 	uxth.w	r8, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	461d      	mov	r5, r3
 80037ba:	f04f 0600 	mov.w	r6, #0
 80037be:	46a9      	mov	r9, r5
 80037c0:	46b2      	mov	sl, r6
 80037c2:	eb19 0309 	adds.w	r3, r9, r9
 80037c6:	eb4a 040a 	adc.w	r4, sl, sl
 80037ca:	4699      	mov	r9, r3
 80037cc:	46a2      	mov	sl, r4
 80037ce:	eb19 0905 	adds.w	r9, r9, r5
 80037d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80037d6:	f04f 0100 	mov.w	r1, #0
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037ea:	4689      	mov	r9, r1
 80037ec:	4692      	mov	sl, r2
 80037ee:	eb19 0005 	adds.w	r0, r9, r5
 80037f2:	eb4a 0106 	adc.w	r1, sl, r6
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	461d      	mov	r5, r3
 80037fa:	f04f 0600 	mov.w	r6, #0
 80037fe:	196b      	adds	r3, r5, r5
 8003800:	eb46 0406 	adc.w	r4, r6, r6
 8003804:	461a      	mov	r2, r3
 8003806:	4623      	mov	r3, r4
 8003808:	f7fc fcf4 	bl	80001f4 <__aeabi_uldivmod>
 800380c:	4603      	mov	r3, r0
 800380e:	460c      	mov	r4, r1
 8003810:	461a      	mov	r2, r3
 8003812:	4b9a      	ldr	r3, [pc, #616]	; (8003a7c <LL_USART_SetBaudRate+0x34c>)
 8003814:	fba3 1302 	umull	r1, r3, r3, r2
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	2164      	movs	r1, #100	; 0x64
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	3332      	adds	r3, #50	; 0x32
 8003826:	4a95      	ldr	r2, [pc, #596]	; (8003a7c <LL_USART_SetBaudRate+0x34c>)
 8003828:	fba2 2303 	umull	r2, r3, r2, r3
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	b29b      	uxth	r3, r3
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	b29b      	uxth	r3, r3
 8003834:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003838:	b29b      	uxth	r3, r3
 800383a:	4443      	add	r3, r8
 800383c:	fa1f f883 	uxth.w	r8, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	461d      	mov	r5, r3
 8003844:	f04f 0600 	mov.w	r6, #0
 8003848:	46a9      	mov	r9, r5
 800384a:	46b2      	mov	sl, r6
 800384c:	eb19 0309 	adds.w	r3, r9, r9
 8003850:	eb4a 040a 	adc.w	r4, sl, sl
 8003854:	4699      	mov	r9, r3
 8003856:	46a2      	mov	sl, r4
 8003858:	eb19 0905 	adds.w	r9, r9, r5
 800385c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003860:	f04f 0100 	mov.w	r1, #0
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800386c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003870:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003874:	4689      	mov	r9, r1
 8003876:	4692      	mov	sl, r2
 8003878:	eb19 0005 	adds.w	r0, r9, r5
 800387c:	eb4a 0106 	adc.w	r1, sl, r6
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	461d      	mov	r5, r3
 8003884:	f04f 0600 	mov.w	r6, #0
 8003888:	196b      	adds	r3, r5, r5
 800388a:	eb46 0406 	adc.w	r4, r6, r6
 800388e:	461a      	mov	r2, r3
 8003890:	4623      	mov	r3, r4
 8003892:	f7fc fcaf 	bl	80001f4 <__aeabi_uldivmod>
 8003896:	4603      	mov	r3, r0
 8003898:	460c      	mov	r4, r1
 800389a:	461a      	mov	r2, r3
 800389c:	4b77      	ldr	r3, [pc, #476]	; (8003a7c <LL_USART_SetBaudRate+0x34c>)
 800389e:	fba3 1302 	umull	r1, r3, r3, r2
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	2164      	movs	r1, #100	; 0x64
 80038a6:	fb01 f303 	mul.w	r3, r1, r3
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	3332      	adds	r3, #50	; 0x32
 80038b0:	4a72      	ldr	r2, [pc, #456]	; (8003a7c <LL_USART_SetBaudRate+0x34c>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	b29b      	uxth	r3, r3
 80038c0:	4443      	add	r3, r8
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	461a      	mov	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	609a      	str	r2, [r3, #8]
}
 80038ca:	e0d2      	b.n	8003a72 <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	469a      	mov	sl, r3
 80038d0:	f04f 0b00 	mov.w	fp, #0
 80038d4:	46d0      	mov	r8, sl
 80038d6:	46d9      	mov	r9, fp
 80038d8:	eb18 0308 	adds.w	r3, r8, r8
 80038dc:	eb49 0409 	adc.w	r4, r9, r9
 80038e0:	4698      	mov	r8, r3
 80038e2:	46a1      	mov	r9, r4
 80038e4:	eb18 080a 	adds.w	r8, r8, sl
 80038e8:	eb49 090b 	adc.w	r9, r9, fp
 80038ec:	f04f 0100 	mov.w	r1, #0
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80038fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003900:	4688      	mov	r8, r1
 8003902:	4691      	mov	r9, r2
 8003904:	eb1a 0508 	adds.w	r5, sl, r8
 8003908:	eb4b 0609 	adc.w	r6, fp, r9
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4619      	mov	r1, r3
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	f04f 0400 	mov.w	r4, #0
 800391c:	0094      	lsls	r4, r2, #2
 800391e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003922:	008b      	lsls	r3, r1, #2
 8003924:	461a      	mov	r2, r3
 8003926:	4623      	mov	r3, r4
 8003928:	4628      	mov	r0, r5
 800392a:	4631      	mov	r1, r6
 800392c:	f7fc fc62 	bl	80001f4 <__aeabi_uldivmod>
 8003930:	4603      	mov	r3, r0
 8003932:	460c      	mov	r4, r1
 8003934:	461a      	mov	r2, r3
 8003936:	4b51      	ldr	r3, [pc, #324]	; (8003a7c <LL_USART_SetBaudRate+0x34c>)
 8003938:	fba3 2302 	umull	r2, r3, r3, r2
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	b29b      	uxth	r3, r3
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	fa1f f883 	uxth.w	r8, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	469b      	mov	fp, r3
 800394a:	f04f 0c00 	mov.w	ip, #0
 800394e:	46d9      	mov	r9, fp
 8003950:	46e2      	mov	sl, ip
 8003952:	eb19 0309 	adds.w	r3, r9, r9
 8003956:	eb4a 040a 	adc.w	r4, sl, sl
 800395a:	4699      	mov	r9, r3
 800395c:	46a2      	mov	sl, r4
 800395e:	eb19 090b 	adds.w	r9, r9, fp
 8003962:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003966:	f04f 0100 	mov.w	r1, #0
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003972:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003976:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800397a:	4689      	mov	r9, r1
 800397c:	4692      	mov	sl, r2
 800397e:	eb1b 0509 	adds.w	r5, fp, r9
 8003982:	eb4c 060a 	adc.w	r6, ip, sl
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	4619      	mov	r1, r3
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	f04f 0400 	mov.w	r4, #0
 8003996:	0094      	lsls	r4, r2, #2
 8003998:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800399c:	008b      	lsls	r3, r1, #2
 800399e:	461a      	mov	r2, r3
 80039a0:	4623      	mov	r3, r4
 80039a2:	4628      	mov	r0, r5
 80039a4:	4631      	mov	r1, r6
 80039a6:	f7fc fc25 	bl	80001f4 <__aeabi_uldivmod>
 80039aa:	4603      	mov	r3, r0
 80039ac:	460c      	mov	r4, r1
 80039ae:	461a      	mov	r2, r3
 80039b0:	4b32      	ldr	r3, [pc, #200]	; (8003a7c <LL_USART_SetBaudRate+0x34c>)
 80039b2:	fba3 1302 	umull	r1, r3, r3, r2
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	2164      	movs	r1, #100	; 0x64
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	3332      	adds	r3, #50	; 0x32
 80039c4:	4a2d      	ldr	r2, [pc, #180]	; (8003a7c <LL_USART_SetBaudRate+0x34c>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	4443      	add	r3, r8
 80039d6:	fa1f f883 	uxth.w	r8, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	469b      	mov	fp, r3
 80039de:	f04f 0c00 	mov.w	ip, #0
 80039e2:	46d9      	mov	r9, fp
 80039e4:	46e2      	mov	sl, ip
 80039e6:	eb19 0309 	adds.w	r3, r9, r9
 80039ea:	eb4a 040a 	adc.w	r4, sl, sl
 80039ee:	4699      	mov	r9, r3
 80039f0:	46a2      	mov	sl, r4
 80039f2:	eb19 090b 	adds.w	r9, r9, fp
 80039f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80039fa:	f04f 0100 	mov.w	r1, #0
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a0e:	4689      	mov	r9, r1
 8003a10:	4692      	mov	sl, r2
 8003a12:	eb1b 0509 	adds.w	r5, fp, r9
 8003a16:	eb4c 060a 	adc.w	r6, ip, sl
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	f04f 0400 	mov.w	r4, #0
 8003a2a:	0094      	lsls	r4, r2, #2
 8003a2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a30:	008b      	lsls	r3, r1, #2
 8003a32:	461a      	mov	r2, r3
 8003a34:	4623      	mov	r3, r4
 8003a36:	4628      	mov	r0, r5
 8003a38:	4631      	mov	r1, r6
 8003a3a:	f7fc fbdb 	bl	80001f4 <__aeabi_uldivmod>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	460c      	mov	r4, r1
 8003a42:	461a      	mov	r2, r3
 8003a44:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <LL_USART_SetBaudRate+0x34c>)
 8003a46:	fba3 1302 	umull	r1, r3, r3, r2
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	2164      	movs	r1, #100	; 0x64
 8003a4e:	fb01 f303 	mul.w	r3, r1, r3
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	3332      	adds	r3, #50	; 0x32
 8003a58:	4a08      	ldr	r2, [pc, #32]	; (8003a7c <LL_USART_SetBaudRate+0x34c>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	4443      	add	r3, r8
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	609a      	str	r2, [r3, #8]
}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a7c:	51eb851f 	.word	0x51eb851f

08003a80 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff fe12 	bl	80036bc <LL_USART_IsEnabled>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d16c      	bne.n	8003b78 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003aa6:	f023 030c 	bic.w	r3, r3, #12
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	6851      	ldr	r1, [r2, #4]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	68d2      	ldr	r2, [r2, #12]
 8003ab2:	4311      	orrs	r1, r2
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	6912      	ldr	r2, [r2, #16]
 8003ab8:	4311      	orrs	r1, r2
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	6992      	ldr	r2, [r2, #24]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	4619      	mov	r1, r3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fe09 	bl	80036e4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff fe16 	bl	800370a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003ade:	f107 0308 	add.w	r3, r7, #8
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff fd22 	bl	800352c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a26      	ldr	r2, [pc, #152]	; (8003b84 <LL_USART_Init+0x104>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d102      	bne.n	8003af6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	e02f      	b.n	8003b56 <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a23      	ldr	r2, [pc, #140]	; (8003b88 <LL_USART_Init+0x108>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d102      	bne.n	8003b04 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	e028      	b.n	8003b56 <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a21      	ldr	r2, [pc, #132]	; (8003b8c <LL_USART_Init+0x10c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d102      	bne.n	8003b12 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	61bb      	str	r3, [r7, #24]
 8003b10:	e021      	b.n	8003b56 <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a1e      	ldr	r2, [pc, #120]	; (8003b90 <LL_USART_Init+0x110>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d102      	bne.n	8003b20 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	e01a      	b.n	8003b56 <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <LL_USART_Init+0x114>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d102      	bne.n	8003b2e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	e013      	b.n	8003b56 <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a19      	ldr	r2, [pc, #100]	; (8003b98 <LL_USART_Init+0x118>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d102      	bne.n	8003b3c <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	61bb      	str	r3, [r7, #24]
 8003b3a:	e00c      	b.n	8003b56 <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <LL_USART_Init+0x11c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d102      	bne.n	8003b4a <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	61bb      	str	r3, [r7, #24]
 8003b48:	e005      	b.n	8003b56 <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a14      	ldr	r2, [pc, #80]	; (8003ba0 <LL_USART_Init+0x120>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d101      	bne.n	8003b56 <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00d      	beq.n	8003b78 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d009      	beq.n	8003b78 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8003b64:	2300      	movs	r3, #0
 8003b66:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	699a      	ldr	r2, [r3, #24]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69b9      	ldr	r1, [r7, #24]
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff fddc 	bl	8003730 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003b78:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40011000 	.word	0x40011000
 8003b88:	40004400 	.word	0x40004400
 8003b8c:	40004800 	.word	0x40004800
 8003b90:	40011400 	.word	0x40011400
 8003b94:	40004c00 	.word	0x40004c00
 8003b98:	40005000 	.word	0x40005000
 8003b9c:	40007800 	.word	0x40007800
 8003ba0:	40007c00 	.word	0x40007c00

08003ba4 <__libc_init_array>:
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	4e0d      	ldr	r6, [pc, #52]	; (8003bdc <__libc_init_array+0x38>)
 8003ba8:	4c0d      	ldr	r4, [pc, #52]	; (8003be0 <__libc_init_array+0x3c>)
 8003baa:	1ba4      	subs	r4, r4, r6
 8003bac:	10a4      	asrs	r4, r4, #2
 8003bae:	2500      	movs	r5, #0
 8003bb0:	42a5      	cmp	r5, r4
 8003bb2:	d109      	bne.n	8003bc8 <__libc_init_array+0x24>
 8003bb4:	4e0b      	ldr	r6, [pc, #44]	; (8003be4 <__libc_init_array+0x40>)
 8003bb6:	4c0c      	ldr	r4, [pc, #48]	; (8003be8 <__libc_init_array+0x44>)
 8003bb8:	f000 f820 	bl	8003bfc <_init>
 8003bbc:	1ba4      	subs	r4, r4, r6
 8003bbe:	10a4      	asrs	r4, r4, #2
 8003bc0:	2500      	movs	r5, #0
 8003bc2:	42a5      	cmp	r5, r4
 8003bc4:	d105      	bne.n	8003bd2 <__libc_init_array+0x2e>
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bcc:	4798      	blx	r3
 8003bce:	3501      	adds	r5, #1
 8003bd0:	e7ee      	b.n	8003bb0 <__libc_init_array+0xc>
 8003bd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bd6:	4798      	blx	r3
 8003bd8:	3501      	adds	r5, #1
 8003bda:	e7f2      	b.n	8003bc2 <__libc_init_array+0x1e>
 8003bdc:	08003db0 	.word	0x08003db0
 8003be0:	08003db0 	.word	0x08003db0
 8003be4:	08003db0 	.word	0x08003db0
 8003be8:	08003db4 	.word	0x08003db4

08003bec <memset>:
 8003bec:	4402      	add	r2, r0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d100      	bne.n	8003bf6 <memset+0xa>
 8003bf4:	4770      	bx	lr
 8003bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bfa:	e7f9      	b.n	8003bf0 <memset+0x4>

08003bfc <_init>:
 8003bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfe:	bf00      	nop
 8003c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c02:	bc08      	pop	{r3}
 8003c04:	469e      	mov	lr, r3
 8003c06:	4770      	bx	lr

08003c08 <_fini>:
 8003c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0a:	bf00      	nop
 8003c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0e:	bc08      	pop	{r3}
 8003c10:	469e      	mov	lr, r3
 8003c12:	4770      	bx	lr
